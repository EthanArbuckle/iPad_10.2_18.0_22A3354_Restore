void sub_20F872D70(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x5B8]) && SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x320]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  sub_20E863784((uint64_t)&STACK[0x370]);
  sub_20F8827DC((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

BOOL sub_20F873114(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a1[1027];
  v3 = *(unsigned __int8 *)(v2 + 1720);
  v4 = v2 + 864;
  v5 = v2 + 24;
  if (v3)
    v5 = v4;
  if (!*(_BYTE *)(v5 + 428))
    return *(_BYTE *)(v5 + 426) != 0;
  v6 = a1[963];
  if (!v6)
    goto LABEL_28;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v6 <= a2)
      v8 = a2 % v6;
  }
  else
  {
    v8 = ((_DWORD)v6 - 1) & a2;
  }
  v10 = *(uint64_t ***)(a1[962] + 8 * v8);
  if (!v10 || (v11 = *v10) == 0)
LABEL_28:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    v12 = v6 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a2)
      {
        if (*((_DWORD *)v11 + 4) == a2)
          return *(_BYTE *)(v5 + 426) && *((_BYTE *)v11 + 20) != 0;
      }
      else if ((v14 & v12) != v8)
      {
        goto LABEL_28;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a2)
      break;
    if (v13 >= v6)
      v13 %= v6;
    if (v13 != v8)
      goto LABEL_28;
LABEL_15:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_28;
  }
  if (*((_DWORD *)v11 + 4) != a2)
    goto LABEL_15;
  return *(_BYTE *)(v5 + 426) && *((_BYTE *)v11 + 20) != 0;
}

BOOL sub_20F873254(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a1[1027];
  v3 = *(unsigned __int8 *)(v2 + 1720);
  v4 = v2 + 864;
  v5 = v2 + 24;
  if (v3)
    v5 = v4;
  if (!*(_BYTE *)(v5 + 429))
    return *(_BYTE *)(v5 + 416) != 0;
  v6 = a1[968];
  if (!v6)
    goto LABEL_28;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a2;
    if (v6 <= a2)
      v8 = a2 % v6;
  }
  else
  {
    v8 = ((_DWORD)v6 - 1) & a2;
  }
  v10 = *(uint64_t ***)(a1[967] + 8 * v8);
  if (!v10 || (v11 = *v10) == 0)
LABEL_28:
    sub_20E89FD20("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    v12 = v6 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a2)
      {
        if (*((_DWORD *)v11 + 4) == a2)
          return *(_BYTE *)(v5 + 416) && *((_BYTE *)v11 + 20) != 0;
      }
      else if ((v14 & v12) != v8)
      {
        goto LABEL_28;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a2)
      break;
    if (v13 >= v6)
      v13 %= v6;
    if (v13 != v8)
      goto LABEL_28;
LABEL_15:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_28;
  }
  if (*((_DWORD *)v11 + 4) != a2)
    goto LABEL_15;
  return *(_BYTE *)(v5 + 416) && *((_BYTE *)v11 + 20) != 0;
}

void sub_20F873394(uint64_t a1)
{
  uint64_t v1;
  int v2;
  float64x2_t *v3;
  float64x2_t *v4;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int32 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  float64x2_t v22[2];
  float64x2_t v23[2];
  unsigned int *v24;

  v1 = *(_QWORD *)(a1 + 8216);
  v2 = *(unsigned __int8 *)(v1 + 1720);
  v3 = (float64x2_t *)(v1 + 864);
  v4 = (float64x2_t *)(v1 + 24);
  if (v2)
    v4 = v3;
  __asm { FMOV            V2.2D, #1.0 }
  v10 = vdivq_f64(_Q2, vsqrtq_f64(v4[9]));
  v23[0] = vdivq_f64(_Q2, vsqrtq_f64(v4[8]));
  v23[1] = v10;
  v11 = v4[11];
  v22[0] = v4[10];
  v22[1] = v11;
  v12 = *(uint64_t **)(**(_QWORD **)(a1 + 7952) + 336);
  if (v12)
  {
    v14 = a1 + 7696;
    do
    {
      while (1)
      {
        v17 = *((_DWORD *)v12 + 4);
        v21 = v17;
        v18 = *(_QWORD *)(a1 + 8216);
        if (*(_BYTE *)v18)
          break;
        v15 = *(_QWORD *)(v18 + 16);
        v24 = &v21;
        v16 = sub_20FB76E58(v14, &v21, (uint64_t)&unk_2102DB95C, &v24);
        sub_20FB82BE8(v15, v17, *((unsigned __int8 *)v16 + 20), v23, v22);
        v12 = (uint64_t *)*v12;
        if (!v12)
          return;
      }
      v19 = *(_QWORD *)(v18 + 8);
      v24 = &v21;
      v20 = sub_20FB76E58(v14, &v21, (uint64_t)&unk_2102DB95C, &v24);
      sub_20FB7D420(v19, v17, *((unsigned __int8 *)v20 + 20), v23, v22);
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
}

void sub_20F8734C8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  float64x2_t v6;
  int64x2_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  unsigned int *v31;

  v1 = *(_QWORD *)(a1 + 8216);
  v2 = *(unsigned __int8 *)(v1 + 1720);
  v3 = v1 + 864;
  v4 = v1 + 24;
  if (v2)
    v4 = v3;
  v5 = *(_OWORD *)(v4 + 208);
  v6 = vsqrtq_f64(*(float64x2_t *)(v4 + 192));
  __asm { FMOV            V3.2D, #1.0 }
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vceqzq_f64(v6), (int8x16_t)_Q3, (int8x16_t)vdivq_f64(_Q3, v6));
  v28 = vdupq_lane_s64(v12.i64[0], 0);
  v29 = v12;
  v30 = vdupq_laneq_s64(v12, 1);
  v13 = *(_OWORD *)(v4 + 240);
  v26 = *(_OWORD *)(v4 + 224);
  v27 = v13;
  v25 = v5;
  v14 = **(_QWORD **)(a1 + 7952);
  v15 = *(_QWORD **)(v14 + 296);
  v16 = (_QWORD *)(v14 + 304);
  if (v15 != (_QWORD *)(v14 + 304))
  {
    v18 = a1 + 7736;
    do
    {
      v24 = *((_DWORD *)v15 + 8);
      v19 = *(_QWORD *)(a1 + 8216);
      if (*(_BYTE *)v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        v31 = &v24;
        sub_20FB76E58(v18, &v24, (uint64_t)&unk_2102DB95C, &v31);
        sub_20FB86F74(v20);
        v21 = (_QWORD *)v15[1];
        if (v21)
          goto LABEL_10;
      }
      else
      {
        v22 = *(_QWORD *)(v19 + 16);
        v31 = &v24;
        sub_20FB76E58(v18, &v24, (uint64_t)&unk_2102DB95C, &v31);
        sub_20FB8C208(v22);
        v21 = (_QWORD *)v15[1];
        if (v21)
        {
          do
          {
LABEL_10:
            v23 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
          goto LABEL_5;
        }
      }
      do
      {
        v23 = (_QWORD *)v15[2];
        _ZF = *v23 == (_QWORD)v15;
        v15 = v23;
      }
      while (!_ZF);
LABEL_5:
      v15 = v23;
    }
    while (v23 != v16);
  }
}

uint64_t *sub_20F87364C(uint64_t a1, uint64_t a2, int a3)
{
  char **v5;
  char **v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  char **v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  const char *v36;
  size_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void *p_p;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  std::string::size_type v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BOOL4 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t i;
  int **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  double *v132;
  void **v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  void **v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  void **v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  std::string::size_type size;
  BOOL v151;
  uint64_t v152;
  _QWORD *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  int64x2_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  size_t v167;
  const char *v168;
  unsigned __int8 v169;
  uint64_t *v170;
  unsigned __int8 v171;
  const char *v172;
  size_t v173;
  _BYTE *v174;
  unint64_t v175;
  const char *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  std::string::size_type v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::string::size_type v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  char v223;
  int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  std::string::size_type v230;
  _BYTE *p_dst;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  std::string *v236;
  uint64_t v237;
  const char *v238;
  size_t v239;
  unint64_t v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  const char *v243;
  size_t v244;
  std::string::size_type *p_size;
  int v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  unint64_t v250;
  NSObject *v251;
  uint64_t v252;
  uint64_t v253;
  size_t v254;
  void *v255;
  _QWORD *v256;
  size_t v257;
  std::string::size_type v258;
  _BYTE *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  std::string::size_type v263;
  char v264;
  _QWORD *v265;
  std::string::size_type v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  char *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::string::size_type v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  std::string::size_type v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::string::size_type v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::string *v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t *result;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _BOOL4 v316;
  uint64_t v317;
  int v318;
  const char *__src;
  uint64_t *__srca;
  unint64_t v322;
  int v323;
  const char *v324;
  int v325;
  uint64_t v326;
  unint64_t __s;
  char *__sa;
  std::string v329;
  int v330;
  const char *v331;
  int v332;
  const char *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  void *v336[2];
  unsigned __int8 v337;
  void *v338[2];
  unsigned __int8 v339;
  void *v340[2];
  unsigned __int8 v341;
  std::string v342;
  std::string v343;
  std::string __dst;
  uint64_t v345[2];
  uint64_t *v346;
  __int128 v347;
  char v348;
  char *v349;
  std::string v350;
  char *v351;
  std::__shared_weak_count *v352;
  std::string v353;
  _BYTE object[24];
  __int128 v355;
  void *__p;
  size_t v357;
  unint64_t v358;
  void *v359;
  unint64_t v360;
  void *v361;
  char v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  std::string v366;
  std::string v367;
  __int128 v368;
  char *v369;
  const char *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 288) == 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1345, (uint64_t)"window.landmark_parametrization() != LandmarkParameterization::Invalid", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v5 = *(char ***)(a2 + 48);
  v6 = *(char ***)(a2 + 56);
  if (v5 != v6)
  {
    v7 = 0;
    while (1)
    {
      v9 = *v5;
      v8 = v5[1];
      if (*v5 != v8)
      {
        v10 = v8 - v9 - 520;
        if (v10 >= 0x208)
        {
          v12 = 0;
          v13 = v10 / 0x208 + 1;
          v11 = &v9[520 * (v13 & 0xFFFFFFFFFFFFFELL)];
          v14 = v13 & 0xFFFFFFFFFFFFFELL;
          do
          {
            v7 += *(_QWORD *)v9;
            v12 += *((_QWORD *)v9 + 65);
            v9 += 1040;
            v14 -= 2;
          }
          while (v14);
          v7 += v12;
          if (v13 == (v13 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_5;
        }
        else
        {
          v11 = *v5;
        }
        do
        {
          v7 += *(_QWORD *)v11;
          v11 += 520;
        }
        while (v11 != v8);
      }
LABEL_5:
      v5 += 3;
      if (v5 == v6)
        goto LABEL_15;
    }
  }
  v7 = 0;
LABEL_15:
  v15 = *(char ***)(a2 + 72);
  v16 = *(char ***)(a2 + 80);
  v326 = a2;
  if (v15 != v16)
  {
    v17 = 0;
    while (1)
    {
      v19 = *v15;
      v18 = v15[1];
      if (*v15 != v18)
      {
        v20 = v18 - v19 - 520;
        if (v20 >= 0x208)
        {
          v22 = 0;
          v23 = v20 / 0x208 + 1;
          v21 = &v19[520 * (v23 & 0xFFFFFFFFFFFFFELL)];
          v24 = v23 & 0xFFFFFFFFFFFFFELL;
          do
          {
            v17 += *(_QWORD *)v19;
            v22 += *((_QWORD *)v19 + 65);
            v19 += 1040;
            v24 -= 2;
          }
          while (v24);
          v17 += v22;
          if (v23 == (v23 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_17;
        }
        else
        {
          v21 = *v15;
        }
        do
        {
          v17 += *(_QWORD *)v21;
          v21 += 520;
        }
        while (v21 != v18);
      }
LABEL_17:
      v15 += 3;
      if (v15 == v16)
        goto LABEL_27;
    }
  }
  v17 = 0;
LABEL_27:
  v26 = *(_QWORD *)(a2 + 296);
  v25 = *(_QWORD *)(a2 + 304);
  sub_20F82FD50(v345);
  v322 = v25 - v26;
  __s = (v25 - v26) >> 2;
  if (**(int **)(v345[0] + 56) <= 3)
  {
    v27 = *(unsigned __int8 *)(v345[0] + 72);
    v28 = sub_20E8C31DC(v345[0], "OSLogSurrogateAppender", 1, 0);
    v29 = v28;
    if (v27 || v28 != 0)
    {
      v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v345;
      v367.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v367.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v368) = 3;
      *((_QWORD *)&v368 + 1) = "unknown file";
      LODWORD(v369) = 1350;
      v371 = 0;
      v372 = 0;
      v370 = "unknown function";
      v31 = *(_QWORD *)v367.__r_.__value_.__l.__data_;
      if (*(char *)(*(_QWORD *)v367.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v33 = *(const char **)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
        v315 = *(_QWORD *)v367.__r_.__value_.__l.__data_;
        v317 = v31 + 16;
        v325 = v27;
        v35 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v35 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        v32 = *(unsigned __int8 *)(*(_QWORD *)v367.__r_.__value_.__l.__data_ + 39);
        v33 = (const char *)(v31 + 16);
        v315 = *(_QWORD *)v367.__r_.__value_.__l.__data_;
        v317 = v31 + 16;
        v325 = v27;
        v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v34 & 1) != 0)
          goto LABEL_36;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v355 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_36:
      if (byte_254A4A4F8[23] >= 0)
        v36 = byte_254A4A4F8;
      else
        v36 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v37 = byte_254A4A4F8[23];
      else
        v37 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v33;
      *(_QWORD *)object = os_log_create(v36, v33);
      v38 = &object[8];
      if (v37 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v37 >= 0x17)
      {
        v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v37 | 7) != 0x17)
          v39 = v37 | 7;
        v40 = v39 + 1;
        v38 = operator new(v39 + 1);
        *(_QWORD *)&object[16] = v37;
        *(_QWORD *)&v355 = v40 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v38;
      }
      else
      {
        BYTE7(v355) = v37;
        if (!v37)
        {
LABEL_50:
          v38[v37] = 0;
          BYTE8(v355) = 1;
          p_p = &__p;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v32 >= 0x17)
          {
            v43 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v43 = v32 | 7;
            v44 = v43 + 1;
            p_p = operator new(v43 + 1);
            v358 = v44 | 0x8000000000000000;
            __p = p_p;
            v357 = v32;
          }
          else
          {
            HIBYTE(v358) = v32;
            if (!v32)
            {
              LOBYTE(__p) = 0;
              LOBYTE(v359) = 1;
              v42 = *(NSObject **)object;
              if ((SHIBYTE(v358) & 0x80000000) == 0)
                goto LABEL_54;
              goto LABEL_60;
            }
          }
          memmove(p_p, __src, v32);
          *((_BYTE *)p_p + v32) = 0;
          LOBYTE(v359) = 1;
          v42 = *(NSObject **)object;
          if ((SHIBYTE(v358) & 0x80000000) == 0)
          {
LABEL_54:
            if (!BYTE8(v355))
              goto LABEL_63;
            goto LABEL_61;
          }
LABEL_60:
          operator delete(__p);
          if (!BYTE8(v355))
          {
LABEL_63:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v29 && *(_QWORD *)(v29 + 24))
            {
              v45 = _os_log_pack_size();
              v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
              v47 = (std::__shared_weak_count *)operator new();
              v48 = v47;
              v47->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v47->__shared_weak_owners_ = 0;
              v47[1].__vftable = v46;
              *(_QWORD *)object = v46;
              *(_QWORD *)&object[8] = v46;
              *(_QWORD *)&object[16] = v47;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
              v355 = 0uLL;
              __p = 0;
              do
                v51 = __ldaxr(p_shared_owners);
              while (__stlxr(v51 - 1, p_shared_owners));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v48);
              }
              v52 = *(_QWORD *)object;
              v53 = _os_log_pack_fill();
              *(_DWORD *)v53 = 134218496;
              *(_QWORD *)(v53 + 4) = __s;
              *(_WORD *)(v53 + 12) = 2048;
              *(_QWORD *)(v53 + 14) = v7;
              *(_WORD *)(v53 + 22) = 2048;
              *(_QWORD *)(v53 + 24) = v17;
              v54 = operator new();
              v55 = *(unsigned __int8 *)(v315 + 39);
              v56 = *(_QWORD *)(v315 + 16);
              v57 = *(_QWORD *)(v315 + 24);
              v58 = v355;
              *(_OWORD *)(v54 + 8) = *(_OWORD *)&object[8];
              if ((v55 & 0x80u) != 0)
                v55 = v57;
              else
                v56 = v317;
              *(_QWORD *)v54 = v52;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v54 + 24) = v58;
              v355 = 0uLL;
              *(_QWORD *)(v54 + 40) = v56;
              *(_QWORD *)(v54 + 48) = v55;
              *(_BYTE *)(v54 + 56) = 1;
              v350.__r_.__value_.__r.__words[0] = 0;
              v329.__r_.__value_.__r.__words[0] = v54;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), &v329);
              v59 = v329.__r_.__value_.__r.__words[0];
              v329.__r_.__value_.__r.__words[0] = 0;
              v60 = v325;
              if (v59)
              {
                v61 = *(std::__shared_weak_count **)(v59 + 32);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = *(std::__shared_weak_count **)(v59 + 16);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
                v67 = v350.__r_.__value_.__r.__words[0];
                v350.__r_.__value_.__r.__words[0] = 0;
                if (v67)
                {
                  v68 = *(std::__shared_weak_count **)(v67 + 32);
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  v71 = *(std::__shared_weak_count **)(v67 + 16);
                  if (v71)
                  {
                    v72 = (unint64_t *)&v71->__shared_owners_;
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
                }
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
              if (*((_QWORD *)&v355 + 1))
              {
                v75 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v77 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v78 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
            }
            else
            {
              os_log_type_enabled(v42, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134218496;
              *(_QWORD *)&object[4] = __s;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v7;
              *(_WORD *)&object[22] = 2048;
              *(_QWORD *)&v355 = v17;
              v80 = (void *)_os_log_send_and_compose_impl();
              v60 = v325;
              if (v80)
                free(v80);
            }
            if (v60)
            {
              sub_20E8C003C((uint64_t)&v367, "Processing a window of %zu frames (%zu point-tracks and %zu line-tracks)", __s, v7, v17);
              sub_20E863570((uint64_t)&v367);
            }
            sub_20E863570((uint64_t)&v367);
            v81 = v372;
            if (v372)
            {
              v82 = (unint64_t *)&v372->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            goto LABEL_118;
          }
LABEL_61:
          if (SBYTE7(v355) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_63;
        }
      }
      memmove(v38, v36, v37);
      goto LABEL_50;
    }
  }
LABEL_118:
  v84 = *(_QWORD *)(a1 + 2488);
  v85 = (v84 - *(_QWORD *)(a1 + 2480)) >> 2;
  v86 = **(_DWORD **)(v326 + 296);
  v318 = *(_DWORD *)(v84 - 4);
  v87 = v318 == v86;
  if (v318 == v86)
    v88 = -1;
  else
    v88 = 0;
  v89 = v85 + __s - v87;
  if (v89 >= *(unsigned int *)(a1 + 1936))
    v90 = *(unsigned int *)(a1 + 1936);
  else
    v90 = v85 + __s - v87;
  __srca = (uint64_t *)(a1 + 2656);
  sub_20FD30C88(a1 + 2656, v7, v17, v90);
  v91 = v89 - v90;
  *(_DWORD *)(a1 + 2848) = *(_DWORD *)(v326 + 288);
  v92 = v326;
  if (v89 - v90 >= v85)
  {
    LODWORD(v93) = 0;
    if (v322 == 4)
      goto LABEL_128;
LABEL_132:
    v105 = 0;
    goto LABEL_133;
  }
  v93 = 0;
  v94 = 168 * v91;
  do
  {
    v95 = *(_QWORD *)(a1 + 2280) + v94;
    v96 = *(_QWORD *)(a1 + 2656) + 168 * v93;
    v97 = *(_OWORD *)(v95 + 96);
    v99 = *(_OWORD *)(v95 + 48);
    v98 = *(_OWORD *)(v95 + 64);
    *(_OWORD *)(v96 + 80) = *(_OWORD *)(v95 + 80);
    *(_OWORD *)(v96 + 96) = v97;
    *(_OWORD *)(v96 + 48) = v99;
    *(_OWORD *)(v96 + 64) = v98;
    v101 = *(_OWORD *)(v95 + 128);
    v100 = *(_OWORD *)(v95 + 144);
    v102 = *(_OWORD *)(v95 + 112);
    *(_QWORD *)(v96 + 160) = *(_QWORD *)(v95 + 160);
    *(_OWORD *)(v96 + 128) = v101;
    *(_OWORD *)(v96 + 144) = v100;
    *(_OWORD *)(v96 + 112) = v102;
    v103 = *(_OWORD *)v95;
    v104 = *(_OWORD *)(v95 + 32);
    *(_OWORD *)(v96 + 16) = *(_OWORD *)(v95 + 16);
    *(_OWORD *)(v96 + 32) = v104;
    *(_OWORD *)v96 = v103;
    ++v93;
    v94 += 168;
  }
  while (v90 - (__s + v88) != v93);
  if (v322 != 4)
    goto LABEL_132;
LABEL_128:
  v105 = *(_BYTE *)(a1 + 11664) != 0;
  if (*(_BYTE *)(a1 + 11664) && a3)
  {
    v106 = *(_QWORD *)(a1 + 2280) + 168 * v85;
    v107 = *(_QWORD *)(a1 + 2656) + 168 * v93;
    v108 = *(_OWORD *)(v106 + 96);
    v110 = *(_OWORD *)(v106 + 48);
    v109 = *(_OWORD *)(v106 + 64);
    *(_OWORD *)(v107 + 80) = *(_OWORD *)(v106 + 80);
    *(_OWORD *)(v107 + 96) = v108;
    *(_OWORD *)(v107 + 48) = v110;
    *(_OWORD *)(v107 + 64) = v109;
    v112 = *(_OWORD *)(v106 + 128);
    v111 = *(_OWORD *)(v106 + 144);
    v113 = *(_OWORD *)(v106 + 112);
    *(_QWORD *)(v107 + 160) = *(_QWORD *)(v106 + 160);
    *(_OWORD *)(v107 + 128) = v112;
    *(_OWORD *)(v107 + 144) = v111;
    *(_OWORD *)(v107 + 112) = v113;
    v114 = *(_OWORD *)v106;
    v115 = *(_OWORD *)(v106 + 32);
    *(_OWORD *)(v107 + 16) = *(_OWORD *)(v106 + 16);
    *(_OWORD *)(v107 + 32) = v115;
    *(_OWORD *)v107 = v114;
    v105 = 1;
  }
LABEL_133:
  v346 = v345;
  v347 = xmmword_2103B83C0;
  if (!v90)
    goto LABEL_145;
  if (v90 < 0xB)
  {
    for (i = 0; i != v90; ++i)
LABEL_144:
      *((_BYTE *)v346 + i) = 0;
    goto LABEL_145;
  }
  if (v90 <= 0x14)
    v116 = 20;
  else
    v116 = v90;
  *(_QWORD *)&v347 = v116;
  v117 = (uint64_t *)operator new[]();
  if (v346 != v345 && v346)
    MEMORY[0x212BC6368](v346, 0x1000C8077774924);
  v346 = v117;
  i = *((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1) < v90)
    goto LABEL_144;
LABEL_145:
  v119 = (int **)(v326 + 296);
  *((_QWORD *)&v347 + 1) = v90;
  if (__s <= v87)
  {
    v323 = 0;
    if (!*(_QWORD *)(v326 + 616))
      goto LABEL_226;
  }
  else
  {
    v323 = (v322 >> 2) - (v318 == v86);
    do
    {
      v120 = *(_QWORD *)(a1 + 2488);
      v121 = *(_QWORD *)(a1 + 2480);
      v122 = v120 - v121;
      if (v120 != v121)
      {
        v123 = 0;
        v124 = v122 >> 2;
        if (v124 <= 1)
          v124 = 1;
        while (*(_DWORD *)(v121 + 4 * v123) != (*v119)[v87])
        {
          if (v124 == ++v123)
            goto LABEL_155;
        }
        if ((_DWORD)v123 != -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1413, (uint64_t)"cur_frame_index == -1", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
LABEL_155:
      sub_20EB8200C(*(_QWORD *)(a1 + 2680) + 1664 * v93, *(_QWORD *)(v326 + 120) + 1664 * v87);
      *((_BYTE *)v346 + v93) = 1;
      ++v87;
      LODWORD(v93) = v93 + 1;
    }
    while (v87 != __s);
    v92 = v326;
    if (!*(_QWORD *)(v326 + 616))
      goto LABEL_226;
  }
  if (!*(_QWORD *)(a1 + 7880))
    goto LABEL_226;
  v125 = *(_QWORD *)(a1 + 7808);
  v126 = *(_QWORD *)(a1 + 7776);
  v127 = v125 ? *(_QWORD *)(a1 + 7808) : 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 7784) - v126) >> 3);
  if (*(double *)(v126 + 56 * v127 - 56) <= *(double *)(*(_QWORD *)(v92 + 512) + 56 * *(_QWORD *)(v92 + 536)))
    goto LABEL_226;
  if (!v125)
    v125 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 7784) - v126) >> 3);
  LODWORD(v355) = 0;
  sub_20E87876C((uint64_t)v340, (uint64_t)object, (double *)(v126 + 56 * v125 - 56));
  if ((_DWORD)v355 == -1)
    sub_20E877AB8();
  v340[0] = v338;
  ((void (*)(std::string *__return_ptr, void **, _BYTE *))off_24CA04608[v355])(&v342, v340, object);
  if ((_DWORD)v355 != -1)
    ((void (*)(void **, _BYTE *))off_24CA045F0[v355])(v340, object);
  v128 = std::string::insert(&v342, 0, "New segment IMU meaasurements is not in order: ", 0x2FuLL);
  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v343.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  v130 = std::string::append(&v343, " v.s. ", 6uLL);
  v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v366.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v366.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  v132 = (double *)(*(_QWORD *)(v92 + 512) + 56 * *(_QWORD *)(v92 + 536));
  LODWORD(v355) = 0;
  sub_20E87876C((uint64_t)v338, (uint64_t)object, v132);
  if ((_DWORD)v355 == -1)
    sub_20E877AB8();
  v338[0] = v336;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24CA04608[v355])(v340, v338, object);
  if ((_DWORD)v355 != -1)
    ((void (*)(void **, _BYTE *))off_24CA045F0[v355])(v338, object);
  if ((v341 & 0x80u) == 0)
    v133 = v340;
  else
    v133 = (void **)v340[0];
  if ((v341 & 0x80u) == 0)
    v134 = v341;
  else
    v134 = (std::string::size_type)v340[1];
  v135 = std::string::append(&v366, (const std::string::value_type *)v133, v134);
  v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  v137 = std::string::append(&__dst, ". State ID: ", 0xCuLL);
  v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v353.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v353.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v355) = 0;
  sub_20F0E8338((uint64_t)v336, (uint64_t)object, (int **)(a1 + 2856));
  if ((_DWORD)v355 == -1)
    sub_20E877AB8();
  v336[0] = &v349;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24CA04608[v355])(v338, v336, object);
  if ((_DWORD)v355 != -1)
    ((void (*)(void **, _BYTE *))off_24CA045F0[v355])(v336, object);
  if ((v339 & 0x80u) == 0)
    v139 = v338;
  else
    v139 = (void **)v338[0];
  if ((v339 & 0x80u) == 0)
    v140 = v339;
  else
    v140 = (std::string::size_type)v338[1];
  v141 = std::string::append(&v353, (const std::string::value_type *)v139, v140);
  v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  v350.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v142;
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  v143 = std::string::append(&v350, " v.s. ", 6uLL);
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v329.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v329.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v355) = 0;
  sub_20F0E8338((uint64_t)&v349, (uint64_t)object, v119);
  if ((_DWORD)v355 == -1)
    sub_20E877AB8();
  v349 = &v348;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA04608[v355])(v336, &v349, object);
  if ((_DWORD)v355 != -1)
    ((void (*)(char **, _BYTE *))off_24CA045F0[v355])(&v349, object);
  if ((v337 & 0x80u) == 0)
    v145 = v336;
  else
    v145 = (void **)v336[0];
  if ((v337 & 0x80u) == 0)
    v146 = v337;
  else
    v146 = (std::string::size_type)v336[1];
  v147 = std::string::append(&v329, (const std::string::value_type *)v145, v146);
  v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
  v367.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v148;
  v147->__r_.__value_.__l.__size_ = 0;
  v147->__r_.__value_.__r.__words[2] = 0;
  v147->__r_.__value_.__r.__words[0] = 0;
  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v149 = &v367;
  else
    v149 = (std::string *)v367.__r_.__value_.__r.__words[0];
  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v367.__r_.__value_.__r.__words[2]);
  else
    size = v367.__r_.__value_.__l.__size_;
  v151 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1434, (uint64_t)"inertial_measurements_.NewestSample().timestamp <= window_imus.OldestSample().timestamp", 87, (uint64_t)v149, size, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v367.__r_.__value_.__l.__data_);
    if (((char)v337 & 0x80000000) == 0)
    {
LABEL_204:
      if ((SHIBYTE(v329.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_205;
      goto LABEL_217;
    }
  }
  else if (((char)v337 & 0x80000000) == 0)
  {
    goto LABEL_204;
  }
  operator delete(v336[0]);
  if ((SHIBYTE(v329.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_205:
    if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_206;
    goto LABEL_218;
  }
LABEL_217:
  operator delete(v329.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_206:
    if (((char)v339 & 0x80000000) == 0)
      goto LABEL_207;
    goto LABEL_219;
  }
LABEL_218:
  operator delete(v350.__r_.__value_.__l.__data_);
  if (((char)v339 & 0x80000000) == 0)
  {
LABEL_207:
    if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_208;
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v338[0]);
  if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_208:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_209;
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v353.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_209:
    if (((char)v341 & 0x80000000) == 0)
      goto LABEL_210;
    goto LABEL_222;
  }
LABEL_221:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (((char)v341 & 0x80000000) == 0)
  {
LABEL_210:
    if ((SHIBYTE(v366.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_223;
  }
LABEL_222:
  operator delete(v340[0]);
  if ((SHIBYTE(v366.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_211:
    if ((SHIBYTE(v343.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_212;
    goto LABEL_224;
  }
LABEL_223:
  operator delete(v366.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v343.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_212:
    if ((SHIBYTE(v342.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_213;
LABEL_225:
    operator delete(v342.__r_.__value_.__l.__data_);
    if (v151)
      goto LABEL_476;
    goto LABEL_226;
  }
LABEL_224:
  operator delete(v343.__r_.__value_.__l.__data_);
  if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_225;
LABEL_213:
  if (v151)
    goto LABEL_476;
LABEL_226:
  v152 = v92 + 512;
  v153 = (_QWORD *)(a1 + 7776);
  sub_20FDB9A70(a1 + 7776, v92 + 512, *(unsigned int *)(a1 + 1936));
  if (*(_QWORD *)(a1 + 7872) != *((_QWORD *)&v347 + 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1439, (uint64_t)"inertial_measurements_.NumFrames() == propagate_mask.size()", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_476;
  }
  sub_20F82FD50(&v353);
  if (**(int **)(v353.__r_.__value_.__r.__words[0] + 56) > 2
    || (v161 = *(unsigned __int8 *)(v353.__r_.__value_.__r.__words[0] + 72),
        v162 = sub_20E8C31DC((uint64_t)v353.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
        v163 = v162,
        !v161)
    && !v162)
  {
    v164 = (_BYTE *)(a1 + 7944);
    if ((a3 & 1) != 0)
      goto LABEL_232;
LABEL_327:
    v170 = v346;
LABEL_328:
    sub_20FD316C8((_BOOL8)__srca, (_QWORD *)(a1 + 2856), v170, (uint64_t *)(v92 + 624), (uint64_t *)(a1 + 3056), v154, v155, v156, v157, v158, v159, v160);
    goto LABEL_329;
  }
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
  v367.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v367.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v368) = 2;
  *((_QWORD *)&v368 + 1) = "unknown file";
  LODWORD(v369) = 1442;
  v371 = 0;
  v372 = 0;
  v370 = "unknown function";
  v165 = *(_QWORD *)v367.__r_.__value_.__l.__data_;
  v166 = *(_QWORD *)v367.__r_.__value_.__l.__data_ + 16;
  v313 = *(_QWORD *)v367.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)v367.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v168 = *(const char **)(v165 + 16);
    v167 = *(_QWORD *)(v165 + 24);
    v314 = v152;
    v316 = v105;
    v171 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v171 & 1) != 0)
      goto LABEL_244;
  }
  else
  {
    v167 = *(unsigned __int8 *)(*(_QWORD *)v367.__r_.__value_.__l.__data_ + 39);
    v168 = (const char *)(v165 + 16);
    v314 = v152;
    v316 = v105;
    v169 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v169 & 1) != 0)
      goto LABEL_244;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v355 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_244:
  if (byte_254A4A4F8[23] >= 0)
    v172 = byte_254A4A4F8;
  else
    v172 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v173 = byte_254A4A4F8[23];
  else
    v173 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v172, v168);
  v174 = &object[8];
  if (v173 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v173 >= 0x17)
  {
    v175 = v163;
    v176 = v168;
    v177 = v166;
    v178 = v161;
    v179 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17)
      v179 = v173 | 7;
    v180 = v179 + 1;
    v174 = operator new(v179 + 1);
    *(_QWORD *)&object[16] = v173;
    *(_QWORD *)&v355 = v180 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v174;
    v161 = v178;
    v166 = v177;
    v168 = v176;
    v163 = v175;
    goto LABEL_257;
  }
  BYTE7(v355) = v173;
  if (v173)
LABEL_257:
    memmove(v174, v172, v173);
  v174[v173] = 0;
  BYTE8(v355) = 1;
  v181 = &__p;
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v167 >= 0x17)
  {
    v183 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v183 = v167 | 7;
    v184 = v183 + 1;
    v181 = operator new(v183 + 1);
    v358 = v184 | 0x8000000000000000;
    __p = v181;
    v357 = v167;
  }
  else
  {
    HIBYTE(v358) = v167;
    if (!v167)
    {
      LOBYTE(__p) = 0;
      LOBYTE(v359) = 1;
      v182 = *(NSObject **)object;
      if ((SHIBYTE(v358) & 0x80000000) == 0)
        goto LABEL_262;
      goto LABEL_268;
    }
  }
  memmove(v181, v168, v167);
  *((_BYTE *)v181 + v167) = 0;
  LOBYTE(v359) = 1;
  v182 = *(NSObject **)object;
  if ((SHIBYTE(v358) & 0x80000000) == 0)
  {
LABEL_262:
    if (!BYTE8(v355))
      goto LABEL_271;
    goto LABEL_269;
  }
LABEL_268:
  operator delete(__p);
  if (!BYTE8(v355))
    goto LABEL_271;
LABEL_269:
  if (SBYTE7(v355) < 0)
    operator delete(*(void **)&object[8]);
LABEL_271:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v163 && *(_QWORD *)(v163 + 24))
  {
    v185 = _os_log_pack_size();
    v186 = (std::__shared_weak_count_vtbl *)operator new(v185, (std::align_val_t)8uLL);
    v187 = (std::__shared_weak_count *)operator new();
    v188 = v187;
    v187->__shared_owners_ = 0;
    v189 = (unint64_t *)&v187->__shared_owners_;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v186;
    *(_QWORD *)object = v186;
    *(_QWORD *)&object[8] = v186;
    *(_QWORD *)&object[16] = v187;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
    v355 = 0uLL;
    __p = 0;
    do
      v191 = __ldaxr(v189);
    while (__stlxr(v191 - 1, v189));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v188);
    }
    v192 = *(_QWORD *)object;
    v193 = _os_log_pack_fill();
    *(_DWORD *)v193 = 67109376;
    *(_DWORD *)(v193 + 4) = v323;
    *(_WORD *)(v193 + 8) = 2048;
    *(_QWORD *)(v193 + 10) = __s;
    v194 = operator new();
    v195 = *(unsigned __int8 *)(v313 + 39);
    v196 = *(_QWORD *)(v313 + 16);
    v197 = *(_QWORD *)(v313 + 24);
    v198 = v355;
    *(_OWORD *)(v194 + 8) = *(_OWORD *)&object[8];
    if ((v195 & 0x80u) != 0)
      v195 = v197;
    else
      v196 = v166;
    *(_QWORD *)v194 = v192;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v194 + 24) = v198;
    v355 = 0uLL;
    *(_QWORD *)(v194 + 40) = v196;
    *(_QWORD *)(v194 + 48) = v195;
    *(_BYTE *)(v194 + 56) = 2;
    v350.__r_.__value_.__r.__words[0] = 0;
    v329.__r_.__value_.__r.__words[0] = v194;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v163 + 24) + 40))(*(_QWORD *)(v163 + 24), &v329);
    v153 = (_QWORD *)(a1 + 7776);
    v199 = v329.__r_.__value_.__r.__words[0];
    v329.__r_.__value_.__r.__words[0] = 0;
    v92 = v326;
    v105 = v316;
    if (v199)
    {
      v200 = *(std::__shared_weak_count **)(v199 + 32);
      if (v200)
      {
        v201 = (unint64_t *)&v200->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      v203 = *(std::__shared_weak_count **)(v199 + 16);
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      MEMORY[0x212BC6398](v199, 0x10F0C40B62ED6C6);
      v206 = v350.__r_.__value_.__r.__words[0];
      v350.__r_.__value_.__r.__words[0] = 0;
      if (v206)
      {
        v207 = *(std::__shared_weak_count **)(v206 + 32);
        if (v207)
        {
          v208 = (unint64_t *)&v207->__shared_owners_;
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v210 = *(std::__shared_weak_count **)(v206 + 16);
        if (v210)
        {
          v211 = (unint64_t *)&v210->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        MEMORY[0x212BC6398](v206, 0x10F0C40B62ED6C6);
      }
    }
    v213 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
    if (*((_QWORD *)&v355 + 1))
    {
      v214 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v217 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
  }
  else
  {
    os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 67109376;
    *(_DWORD *)&object[4] = v323;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = __s;
    v219 = (void *)_os_log_send_and_compose_impl();
    v92 = v326;
    v105 = v316;
    v153 = (_QWORD *)(a1 + 7776);
    if (v219)
      free(v219);
  }
  if (v161)
  {
    sub_20E8C003C((uint64_t)&v367, "Propagating %d of %zu frames...", v323, __s);
    sub_20E863570((uint64_t)&v367);
  }
  sub_20E863570((uint64_t)&v367);
  v220 = v372;
  if (v372)
  {
    v221 = (unint64_t *)&v372->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v152 = v314;
  v164 = (_BYTE *)(a1 + 7944);
  if ((a3 & 1) == 0)
    goto LABEL_327;
LABEL_232:
  if (!v105)
  {
    sub_20FD31398(__srca, v346, v153, a1 + 4752);
    goto LABEL_240;
  }
  if (!*v164
  {
LABEL_476:
    abort();
  }
  sub_20FD31E58((double *)(a1 + 7888), v152, __srca, a1 + 4752);
LABEL_240:
  v164 = (_BYTE *)(a1 + 7944);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2936) - 40))
  {
    v170 = v346;
    if (*((_BYTE *)v346 + *((_QWORD *)&v347 + 1) - 1))
      goto LABEL_328;
  }
LABEL_329:
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 2664) - *(_QWORD *)(a1 + 2656)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 2864) - *(_QWORD *)(a1 + 2856)) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1475, (uint64_t)"seed_estimate_.bundle.num_frames() == seed_estimate_.state_ids.size()", 69, (uint64_t)"Sizes should match after updating from window.", 46, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v223 = *(_BYTE *)(v92 + 500);
  v224 = *(_DWORD *)(*(_QWORD *)(v92 + 304) - 4);
  if (v223)
    v223 = *(_DWORD *)(v92 + 496) == v224;
  v164[3720] = v223;
  *(_DWORD *)(a1 + 11668) = v224;
  sub_20F82FD50(&v343);
  if (**(int **)(v343.__r_.__value_.__r.__words[0] + 56) <= 3)
  {
    v225 = *(unsigned __int8 *)(v343.__r_.__value_.__r.__words[0] + 72);
    v226 = sub_20E8C31DC((uint64_t)v343.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
    v227 = v226;
    if (v225 || v226)
    {
      sub_20E863438((uint64_t)object);
      sub_20E86A980(&object[16], (uint64_t)"State [", 7);
      v228 = (_QWORD *)std::ostream::operator<<();
      v229 = sub_20E86A980(v228, (uint64_t)"]: ", 3);
      sub_20E86A980(v229, (uint64_t)"bad geometry: ", 14);
      std::ostream::operator<<();
      if ((v364 & 0x10) != 0)
      {
        v232 = v363;
        if (v363 < v360)
        {
          v363 = v360;
          v232 = v360;
        }
        v233 = v359;
        v230 = v232 - (_QWORD)v359;
        if (v232 - (unint64_t)v359 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_393;
      }
      else
      {
        if ((v364 & 8) == 0)
        {
          v230 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_349;
        }
        v233 = __p;
        v230 = v358 - (_QWORD)__p;
        if (v358 - (unint64_t)__p > 0x7FFFFFFFFFFFFFF7)
LABEL_393:
          sub_20E860B7C();
      }
      if (v230 >= 0x17)
      {
        v234 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v230 | 7) != 0x17)
          v234 = v230 | 7;
        v235 = v234 + 1;
        p_dst = operator new(v234 + 1);
        __dst.__r_.__value_.__l.__size_ = v230;
        __dst.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v230;
        p_dst = &__dst;
        if (!v230)
        {
LABEL_349:
          p_dst[v230] = 0;
          v329.__r_.__value_.__r.__words[0] = (std::string::size_type)&v343;
          v329.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v329.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v330 = 3;
          v331 = "unknown file";
          v332 = 1482;
          v334 = 0;
          v335 = 0;
          v333 = "unknown function";
          v236 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v236 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          __sa = (char *)v236;
          v237 = *(_QWORD *)v329.__r_.__value_.__l.__data_;
          v238 = (const char *)(*(_QWORD *)v329.__r_.__value_.__l.__data_ + 16);
          v324 = v238;
          if (*(char *)(*(_QWORD *)v329.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v238 = *(const char **)(v237 + 16);
            v239 = *(_QWORD *)(v237 + 24);
            v240 = v227;
            v242 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v242 & 1) != 0)
              goto LABEL_355;
          }
          else
          {
            v239 = *(unsigned __int8 *)(*(_QWORD *)v329.__r_.__value_.__l.__data_ + 39);
            v240 = v227;
            v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v241 & 1) != 0)
              goto LABEL_355;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v367);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v367);
            if ((_BYTE)v368 && SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v367.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_355:
          if (byte_254A4A4F8[23] >= 0)
            v243 = byte_254A4A4F8;
          else
            v243 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v244 = byte_254A4A4F8[23];
          else
            v244 = *(_QWORD *)&byte_254A4A4F8[8];
          v367.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v243, v238);
          p_size = &v367.__r_.__value_.__l.__size_;
          if (v244 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v244 >= 0x17)
          {
            v246 = v225;
            v247 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v244 | 7) != 0x17)
              v247 = v244 | 7;
            v248 = v247 + 1;
            p_size = (std::string::size_type *)operator new(v247 + 1);
            v367.__r_.__value_.__r.__words[2] = v244;
            *(_QWORD *)&v368 = v248 | 0x8000000000000000;
            v367.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            v225 = v246;
          }
          else
          {
            BYTE7(v368) = v244;
            if (!v244)
            {
LABEL_369:
              *((_BYTE *)p_size + v244) = 0;
              BYTE8(v368) = 1;
              v249 = (char *)&v369;
              if (v239 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v239 >= 0x17)
              {
                v252 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v239 | 7) != 0x17)
                  v252 = v239 | 7;
                v253 = v252 + 1;
                v249 = (char *)operator new(v252 + 1);
                v370 = (const char *)v239;
                v371 = v253 | 0x8000000000000000;
                v369 = v249;
                v250 = v240;
              }
              else
              {
                HIBYTE(v371) = v239;
                v250 = v240;
                if (!v239)
                {
                  LOBYTE(v369) = 0;
                  LOBYTE(v372) = 1;
                  v251 = v367.__r_.__value_.__r.__words[0];
                  if ((SHIBYTE(v371) & 0x80000000) == 0)
                    goto LABEL_373;
                  goto LABEL_379;
                }
              }
              memmove(v249, v238, v239);
              v249[v239] = 0;
              LOBYTE(v372) = 1;
              v251 = v367.__r_.__value_.__r.__words[0];
              if ((SHIBYTE(v371) & 0x80000000) == 0)
              {
LABEL_373:
                v92 = v326;
                if (!BYTE8(v368))
                  goto LABEL_382;
                goto LABEL_380;
              }
LABEL_379:
              operator delete(v369);
              v92 = v326;
              if (!BYTE8(v368))
                goto LABEL_382;
LABEL_380:
              if (SBYTE7(v368) < 0)
                operator delete((void *)v367.__r_.__value_.__l.__size_);
LABEL_382:
              if (v367.__r_.__value_.__r.__words[0])
                os_release(v367.__r_.__value_.__l.__data_);
              if (!v250 || !*(_QWORD *)(v250 + 24))
              {
                os_log_type_enabled(v251, OS_LOG_TYPE_INFO);
                LODWORD(v367.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v367.__r_.__value_.__r.__words + 4) = (std::string::size_type)__sa;
                v260 = (void *)_os_log_send_and_compose_impl();
                v164 = (_BYTE *)(a1 + 7944);
                if (v260)
                  free(v260);
                goto LABEL_457;
              }
              v254 = _os_log_pack_size();
              v255 = operator new(v254, (std::align_val_t)8uLL);
              v256 = (_QWORD *)operator new();
              *v256 = &off_24C9ABB80;
              v256[1] = 0;
              v256[2] = 0;
              v256[3] = v255;
              v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
              v350.__r_.__value_.__l.__size_ = (std::string::size_type)v255;
              v351 = 0;
              v352 = 0;
              v350.__r_.__value_.__r.__words[2] = (std::string::size_type)v256;
              v257 = strlen(__sa);
              if (v257 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v258 = v257;
              if (v257 >= 0x17)
              {
                v261 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v257 | 7) != 0x17)
                  v261 = v257 | 7;
                v262 = v261 + 1;
                v259 = operator new(v261 + 1);
                v353.__r_.__value_.__l.__size_ = v258;
                v353.__r_.__value_.__r.__words[2] = v262 | 0x8000000000000000;
                v353.__r_.__value_.__r.__words[0] = (std::string::size_type)v259;
                v250 = v240;
              }
              else
              {
                *((_BYTE *)&v353.__r_.__value_.__s + 23) = v257;
                v259 = &v353;
                if (!v257)
                {
LABEL_398:
                  v259[v258] = 0;
                  v366.__r_.__value_.__r.__words[0] = v353.__r_.__value_.__l.__size_;
                  v263 = v353.__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)v366.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v353.__r_.__value_.__r.__words[1] + 7);
                  v264 = HIBYTE(v353.__r_.__value_.__r.__words[2]);
                  v265 = operator new(0x38uLL);
                  v265[1] = 0;
                  v265[2] = 0;
                  v265[3] = off_24C9ABC20;
                  *v265 = &off_24C9ABBD0;
                  v266 = v366.__r_.__value_.__r.__words[0];
                  v265[4] = v263;
                  v265[5] = v266;
                  *(_QWORD *)((char *)v265 + 47) = *(std::string::size_type *)((char *)v366.__r_.__value_.__r.__words + 7);
                  *((_BYTE *)v265 + 55) = v264;
                  v366.__r_.__value_.__r.__words[0] = 0;
                  *(std::string::size_type *)((char *)v366.__r_.__value_.__r.__words + 7) = 0;
                  v267 = v352;
                  v351 = (char *)(v265 + 3);
                  v352 = (std::__shared_weak_count *)v265;
                  v92 = v326;
                  if (v267)
                  {
                    v268 = (unint64_t *)&v267->__shared_owners_;
                    do
                      v269 = __ldaxr(v268);
                    while (__stlxr(v269 - 1, v268));
                    if (!v269)
                    {
                      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                      std::__shared_weak_count::__release_weak(v267);
                    }
                  }
                  v367 = v350;
                  v270 = v351;
                  if (v350.__r_.__value_.__r.__words[2])
                  {
                    v271 = (unint64_t *)(v350.__r_.__value_.__r.__words[2] + 8);
                    do
                      v272 = __ldxr(v271);
                    while (__stxr(v272 + 1, v271));
                  }
                  v273 = v352;
                  *(_QWORD *)&v368 = v270;
                  *((_QWORD *)&v368 + 1) = v352;
                  if (v352)
                  {
                    v274 = (unint64_t *)&v352->__shared_owners_;
                    do
                      v275 = __ldxr(v274);
                    while (__stxr(v275 + 1, v274));
                    v369 = v270;
                    do
                      v276 = __ldaxr(v274);
                    while (__stlxr(v276 - 1, v274));
                    if (!v276)
                    {
                      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                      std::__shared_weak_count::__release_weak(v273);
                    }
                  }
                  else
                  {
                    v369 = v270;
                  }
                  v277 = (std::__shared_weak_count *)v350.__r_.__value_.__r.__words[2];
                  if (v350.__r_.__value_.__r.__words[2])
                  {
                    v278 = (unint64_t *)(v350.__r_.__value_.__r.__words[2] + 8);
                    do
                      v279 = __ldaxr(v278);
                    while (__stlxr(v279 - 1, v278));
                    if (!v279)
                    {
                      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                      std::__shared_weak_count::__release_weak(v277);
                    }
                  }
                  v280 = v367.__r_.__value_.__r.__words[0];
                  if (v369[31] >= 0)
                    v281 = v369 + 8;
                  else
                    v281 = (char *)*((_QWORD *)v369 + 1);
                  v282 = _os_log_pack_fill();
                  *(_DWORD *)v282 = 136315138;
                  *(_QWORD *)(v282 + 4) = v281;
                  v283 = operator new();
                  v284 = *(unsigned __int8 *)(v237 + 39);
                  v285 = v324;
                  if ((v284 & 0x80u) != 0)
                  {
                    v285 = *(const char **)(v237 + 16);
                    v284 = *(_QWORD *)(v237 + 24);
                  }
                  *(_QWORD *)v283 = v280;
                  *(_OWORD *)(v283 + 8) = *(_OWORD *)&v367.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v367.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v283 + 24) = v368;
                  v368 = 0uLL;
                  *(_QWORD *)(v283 + 40) = v285;
                  *(_QWORD *)(v283 + 48) = v284;
                  *(_BYTE *)(v283 + 56) = 1;
                  v353.__r_.__value_.__r.__words[0] = 0;
                  v350.__r_.__value_.__r.__words[0] = v283;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v250 + 24) + 40))(*(_QWORD *)(v250 + 24), &v350);
                  v164 = (_BYTE *)(a1 + 7944);
                  v286 = v350.__r_.__value_.__r.__words[0];
                  v350.__r_.__value_.__r.__words[0] = 0;
                  if (v286)
                  {
                    v287 = *(std::__shared_weak_count **)(v286 + 32);
                    if (v287)
                    {
                      v288 = (unint64_t *)&v287->__shared_owners_;
                      do
                        v289 = __ldaxr(v288);
                      while (__stlxr(v289 - 1, v288));
                      if (!v289)
                      {
                        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                        std::__shared_weak_count::__release_weak(v287);
                      }
                    }
                    v290 = *(std::__shared_weak_count **)(v286 + 16);
                    if (v290)
                    {
                      v291 = (unint64_t *)&v290->__shared_owners_;
                      do
                        v292 = __ldaxr(v291);
                      while (__stlxr(v292 - 1, v291));
                      if (!v292)
                      {
                        ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                        std::__shared_weak_count::__release_weak(v290);
                      }
                    }
                    MEMORY[0x212BC6398](v286, 0x10F0C40B62ED6C6);
                    v293 = v353.__r_.__value_.__r.__words[0];
                    v353.__r_.__value_.__r.__words[0] = 0;
                    if (v293)
                    {
                      v294 = *(std::__shared_weak_count **)(v293 + 32);
                      if (v294)
                      {
                        v295 = (unint64_t *)&v294->__shared_owners_;
                        do
                          v296 = __ldaxr(v295);
                        while (__stlxr(v296 - 1, v295));
                        if (!v296)
                        {
                          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                          std::__shared_weak_count::__release_weak(v294);
                        }
                      }
                      v297 = *(std::__shared_weak_count **)(v293 + 16);
                      if (v297)
                      {
                        v298 = (unint64_t *)&v297->__shared_owners_;
                        do
                          v299 = __ldaxr(v298);
                        while (__stlxr(v299 - 1, v298));
                        if (!v299)
                        {
                          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                          std::__shared_weak_count::__release_weak(v297);
                        }
                      }
                      MEMORY[0x212BC6398](v293, 0x10F0C40B62ED6C6);
                    }
                  }
                  v300 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                  if (*((_QWORD *)&v368 + 1))
                  {
                    v301 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
                    do
                      v302 = __ldaxr(v301);
                    while (__stlxr(v302 - 1, v301));
                    if (!v302)
                    {
                      ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                      std::__shared_weak_count::__release_weak(v300);
                    }
                  }
                  v303 = (std::__shared_weak_count *)v367.__r_.__value_.__r.__words[2];
                  if (v367.__r_.__value_.__r.__words[2])
                  {
                    v304 = (unint64_t *)(v367.__r_.__value_.__r.__words[2] + 8);
                    do
                      v305 = __ldaxr(v304);
                    while (__stlxr(v305 - 1, v304));
                    if (!v305)
                    {
                      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                      std::__shared_weak_count::__release_weak(v303);
                    }
                  }
LABEL_457:
                  if (v225)
                  {
                    v306 = &__dst;
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v306 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    sub_20E8C003C((uint64_t)&v329, "%s", (const char *)v306);
                    sub_20E863570((uint64_t)&v329);
                  }
                  sub_20E863570((uint64_t)&v329);
                  v307 = v335;
                  if (v335)
                  {
                    v308 = (unint64_t *)&v335->__shared_owners_;
                    do
                      v309 = __ldaxr(v308);
                    while (__stlxr(v309 - 1, v308));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                      std::__shared_weak_count::__release_weak(v307);
                    }
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                  v310 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)&object[16] = v310;
                  *(_QWORD *)&v355 = MEMORY[0x24BEDB848] + 16;
                  if (v362 < 0)
                    operator delete(v361);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v365);
                  goto LABEL_471;
                }
              }
              memcpy(v259, __sa, v258);
              goto LABEL_398;
            }
          }
          memmove(p_size, v243, v244);
          goto LABEL_369;
        }
      }
      memmove(p_dst, v233, v230);
      goto LABEL_349;
    }
  }
LABEL_471:
  v311 = *(_DWORD *)(*(_QWORD *)(v92 + 304) - 4);
  v164[3728] = *(_BYTE *)(v92 + 504);
  *(_DWORD *)(a1 + 11676) = v311;
  *((_QWORD *)&v347 + 1) = 0;
  result = v346;
  if (v346 != v345)
  {
    if (v346)
      return (uint64_t *)MEMORY[0x212BC6368](v346, 0x1000C8077774924);
  }
  return result;
}

void sub_20F875B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,_Unwind_Exception *exception_object,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *object;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 152) && *(char *)(v72 - 153) < 0)
    operator delete(*(void **)(v72 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  if (a54 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  a59 = 0;
  if (exception_object != (_Unwind_Exception *)&a55)
  {
    if (exception_object)
      MEMORY[0x212BC6368]();
  }
  _Unwind_Resume(a1);
}

void sub_20F876108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD **a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t *p_shared_owners;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  int8x8_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t i;
  unsigned __int8 v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  unsigned int v97;
  __n128 v98;
  int8x16_t v99;
  __int128 v100;
  __int128 v101;
  int8x16_t v102;
  float64x2_t v103;
  float64x2_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t j;
  unsigned __int8 v110;
  int8x16_t v111;
  int8x16_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  BOOL v121;
  BOOL v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  BOOL v127;
  int8x16_t v128;
  int8x16_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  BOOL v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  int8x8_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int8x8_t v151;
  uint8x8_t v152;
  unint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned __int8 v161;
  uint64_t v162;
  uint64_t k;
  unsigned __int8 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t m;
  unsigned __int8 v188;
  unint64_t v189;
  unsigned int v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  BOOL v199;
  uint64_t *v200;
  uint64_t v201;
  char v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t n;
  unsigned __int8 v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 v220;
  uint64_t v221;
  uint64_t ii;
  unsigned __int8 v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  double v239;
  unsigned __int8 v240;
  uint64_t v241;
  uint64_t kk;
  unsigned __int8 v243;
  unsigned __int8 v244;
  uint64_t v245;
  uint64_t jj;
  unsigned __int8 v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  float64x2_t v251;
  unsigned __int8 v252;
  uint64_t v253;
  uint64_t mm;
  unsigned __int8 v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  float64x2_t v265;
  double v266;
  float64x2_t v267;
  double v268;
  float64x2_t v269;
  float64x2_t v271;
  float64x2_t v273;
  double v274;
  double v275;
  double v277;
  double v279;
  double v285;
  double v286;
  double v287;
  double v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v292;
  double v293;
  double v298;
  char v299;
  double *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  double *v304;
  double v305;
  uint64_t v308;
  double v309;
  double v312;
  double v315;
  double v318;
  double v320;
  double v321;
  char *v322;
  char *v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  _QWORD *v342;
  char *v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  __int128 v349;
  char *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  char *v380;
  _OWORD *v381;
  _OWORD *v382;
  __int128 v383;
  _OWORD *v384;
  __int128 v385;
  char *v386;
  __int128 v387;
  _OWORD *v388;
  __int128 v389;
  _OWORD *v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  char *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  _OWORD *v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  char *v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  _OWORD *v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  char *v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  _OWORD *v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  char *v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  char *v422;
  __int128 v423;
  _OWORD *v424;
  uint64_t v425;
  __int128 v426;
  char *v427;
  char *v428;
  unint64_t v429;
  unint64_t v430;
  char *v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  _BYTE *v466;
  char *v467;
  int64_t v468;
  unint64_t v469;
  char *v470;
  int v471;
  char *v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  float32x4_t *v476;
  float32x4_t *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  char *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char *v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unsigned int *v505;
  unsigned int *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t i1;
  uint64_t v512;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unsigned int *v518;
  unsigned int *v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t i2;
  uint64_t v525;
  unint64_t v528;
  uint64_t v529;
  char **v530;
  char *v531;
  uint64_t v532;
  int v533;
  unint64_t v534;
  char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v540;
  unint64_t i3;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char *v546;
  int v547;
  int v548;
  uint64_t v549;
  unint64_t v550;
  char *v551;
  int v552;
  unint64_t v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  int v557;
  unint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v564;
  unint64_t i4;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  int v571;
  uint64_t v572;
  unint64_t v573;
  _QWORD *v574;
  int v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int v580;
  uint64_t v581;
  char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v593;
  unint64_t i8;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  unint64_t v598;
  unint64_t v599;
  int v600;
  void *v602;
  unint64_t *v603;
  unint64_t *v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  _QWORD *v610;
  uint64_t v611;
  void *v612;
  std::__shared_weak_count *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  std::__shared_weak_count *v619;
  unint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t *v624;
  unint64_t v625;
  unint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  uint64_t v630;
  void *v631;
  std::__shared_weak_count *v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  void *v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v643;
  uint64_t v645;
  uint64_t i9;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  uint64_t v652;
  int v653;
  unint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  unsigned __int8 v667;
  uint64_t v668;
  uint64_t i10;
  unsigned __int8 v670;
  __int128 v671;
  __int128 v672;
  __int128 v673;
  __int128 v674;
  __int128 v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v689;
  unint64_t i5;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  unint64_t v694;
  unint64_t v695;
  int v696;
  void *v698;
  unint64_t *v699;
  unint64_t *v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  void *v708;
  std::__shared_weak_count *v709;
  unint64_t v710;
  unint64_t *v711;
  unint64_t v712;
  std::__shared_weak_count *v713;
  unint64_t *v714;
  std::__shared_weak_count *v715;
  unint64_t v716;
  unint64_t *p_shared_weak_owners;
  unint64_t v718;
  unint64_t v719;
  unint64_t *v720;
  unint64_t v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  uint64_t v726;
  void *v727;
  std::__shared_weak_count *v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  _BYTE *v732;
  void *v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  uint64_t v737;
  uint64_t v739;
  unint64_t v741;
  uint64_t v742;
  uint64_t i6;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  uint64_t v749;
  int v750;
  unint64_t *v752;
  unint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unsigned __int8 v758;
  uint64_t v759;
  uint64_t i7;
  unsigned __int8 v761;
  int v762;
  BOOL v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  char v769;
  char v770;
  char v771;
  uint64_t v772;
  char v773;
  char v774;
  int v775;
  char v776;
  char v777;
  uint64_t v778;
  char v779;
  char v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  double v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  double v789;
  uint64_t v790;
  uint64_t v791;
  double v792;
  unint64_t v793;
  char v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  BOOL v806;
  char v807;
  __int128 v808;
  __int128 v809;
  int8x16_t v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  unint64_t v831;
  uint64_t v832;
  __int128 v833;
  int8x16_t v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  std::__shared_weak_count *v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  int8x16_t v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  unint64_t *v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  unsigned int v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  _QWORD *v868;
  char *v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t *v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v882;
  unint64_t i11;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  unint64_t v887;
  unsigned __int8 v889;
  uint64_t v890;
  uint64_t i12;
  unsigned __int8 v892;
  int v893;
  uint64_t v894;
  char *v895;
  uint64_t v896;
  int v897;
  uint64_t v898;
  uint64_t *v899;
  uint64_t v900;
  int v901;
  uint64_t v902;
  int v903;
  unsigned __int8 v904;
  uint64_t v905;
  uint64_t v906;
  unsigned __int8 v907;
  uint64_t v908;
  int v909;
  BOOL v910;
  uint64_t v911;
  uint64_t v914;
  unint64_t i13;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  unsigned __int8 v921;
  uint64_t v922;
  uint64_t i14;
  unsigned __int8 v924;
  int v925;
  _QWORD *v926;
  uint64_t v927;
  char *v928;
  char *v929;
  int v930;
  _DWORD *v931;
  _DWORD *v932;
  _QWORD *v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  _BYTE *v937;
  char *v938;
  uint64_t v939;
  int64_t v940;
  unint64_t v941;
  char *v942;
  int v943;
  _QWORD *v944;
  unint64_t v945;
  uint64_t v946;
  uint64_t v947;
  _OWORD *v948;
  char *v949;
  uint64_t v950;
  __int128 v951;
  char *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  char **v956;
  _QWORD *v957;
  char *v958;
  int v959;
  unint64_t v960;
  char *v961;
  char *v962;
  char *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  unint64_t v968;
  char *v969;
  char *v970;
  char *i15;
  uint64_t v972;
  int v973;
  int v974;
  int v975;
  unint64_t v976;
  int v977;
  unint64_t v978;
  unint64_t v979;
  BOOL v980;
  uint64_t v981;
  uint64_t v982;
  size_t v983;
  const char *v984;
  unsigned __int8 v985;
  unsigned __int8 v986;
  const char *v987;
  size_t v988;
  void **v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  int v993;
  uint64_t v994;
  uint64_t v995;
  void **v996;
  NSObject *v997;
  uint64_t v998;
  uint64_t v999;
  size_t v1000;
  std::__shared_weak_count_vtbl *v1001;
  std::__shared_weak_count *v1002;
  std::__shared_weak_count *v1003;
  unint64_t *v1004;
  unint64_t v1005;
  unint64_t v1006;
  void *v1007;
  _DWORD *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  std::__shared_weak_count *v1013;
  unint64_t *v1014;
  unint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  uint64_t v1019;
  std::__shared_weak_count *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  std::__shared_weak_count *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  std::__shared_weak_count *v1026;
  unint64_t *v1027;
  unint64_t v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  void *v1032;
  std::__shared_weak_count *v1033;
  unint64_t *v1034;
  unint64_t v1035;
  char *v1036;
  char *i16;
  char **v1038;
  _QWORD *v1039;
  char *v1040;
  int v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t *v1047;
  uint64_t *v1048;
  uint64_t v1049;
  unsigned int v1050;
  int8x8_t v1051;
  int v1052;
  unint64_t v1053;
  uint8x8_t v1054;
  unint64_t v1055;
  uint64_t **v1056;
  uint64_t *v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  char v1061;
  uint64_t *v1062;
  double v1065;
  double v1068;
  int8x16_t v1069;
  float64x2_t v1071;
  double v1072;
  float64x2_t v1073;
  unsigned __int8 v1074;
  uint64_t v1075;
  uint64_t i17;
  unsigned __int8 v1077;
  float64x2_t v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  int v1082;
  float64x2_t v1083;
  __int128 v1084;
  unsigned __int8 v1085;
  uint64_t v1086;
  uint64_t i18;
  unsigned __int8 v1088;
  int v1089;
  unint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1097;
  uint64_t v1098;
  std::__shared_weak_count *v1099;
  unint64_t *v1100;
  unint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  BOOL v1108;
  char v1109;
  unsigned int v1110;
  BOOL v1111;
  uint64_t v1112;
  uint64_t *v1113;
  uint64_t v1114;
  unint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  char **v1120;
  _QWORD *v1121;
  char *v1122;
  int v1123;
  unint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  int v1127;
  unint64_t v1128;
  __int128 v1129;
  char *v1130;
  char *v1131;
  unint64_t v1132;
  unint64_t v1133;
  char *v1134;
  uint64_t v1135;
  uint64_t *v1136;
  uint64_t v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  char *v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  char *v1194;
  uint64_t *v1195;
  unsigned __int8 *v1196;
  uint64_t v1197;
  int v1198;
  int v1199;
  uint64_t v1200;
  _QWORD *v1201;
  unint64_t v1202;
  std::__shared_weak_count *v1203;
  _QWORD *v1204;
  unint64_t *v1205;
  unint64_t v1206;
  char *v1207;
  __int128 *v1208;
  __int128 *v1209;
  char *v1210;
  char *v1211;
  __int128 v1212;
  unint64_t v1213;
  unint64_t v1214;
  char *v1215;
  __int128 v1216;
  char *v1217;
  char *v1218;
  __int128 v1219;
  char *v1220;
  uint64_t v1221;
  uint64_t v1222;
  unint64_t v1223;
  unsigned int v1224;
  unsigned int v1225;
  unint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  unsigned int v1229;
  BOOL v1230;
  _QWORD *v1231;
  int8x8_t v1232;
  unint64_t v1233;
  uint8x8_t v1234;
  unint64_t v1235;
  int8x8_t **v1236;
  int8x8_t *v1237;
  unint64_t v1238;
  uint64_t v1239;
  int8x8_t v1240;
  int8x8_t v1241;
  int8x8_t v1242;
  uint8x8_t v1243;
  unint64_t v1244;
  int8x8_t v1245;
  int8x8_t **v1246;
  int8x8_t *v1247;
  uint64_t v1248;
  int8x8_t v1249;
  unint64_t v1250;
  unsigned __int8 v1251;
  uint64_t v1252;
  uint64_t i19;
  unsigned __int8 v1254;
  int8x8_t *v1255;
  int8x8_t *v1256;
  unint64_t v1257;
  unint64_t v1258;
  int8x8_t v1259;
  unint64_t v1260;
  std::__shared_weak_count *v1261;
  unint64_t *v1262;
  unint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  unint64_t *v1267;
  unint64_t v1268;
  int v1269;
  int v1270;
  unint64_t v1271;
  int v1272;
  unint64_t v1273;
  _QWORD **v1274;
  _QWORD *v1275;
  int v1276;
  _QWORD *v1277;
  uint64_t *v1278;
  uint64_t *v1279;
  _QWORD *v1280;
  uint64_t *v1281;
  uint64_t *v1282;
  int8x8_t v1283;
  unint64_t v1284;
  uint8x8_t v1285;
  _QWORD *v1286;
  std::__shared_weak_count *v1287;
  unint64_t *v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  _DWORD *v1298;
  void *v1299;
  _DWORD *v1300;
  int64_t v1301;
  unint64_t v1302;
  int64_t v1303;
  unint64_t v1304;
  char *v1305;
  char *v1306;
  char *v1307;
  uint64_t v1308;
  int v1309;
  unint64_t *v1310;
  unint64_t v1311;
  uint64_t v1312;
  uint64_t *v1313;
  uint64_t *v1314;
  unint64_t v1315;
  unint64_t v1316;
  unint64_t v1317;
  _QWORD *v1318;
  void *v1319;
  _DWORD *v1320;
  uint64_t *v1321;
  uint64_t **v1322;
  _DWORD *v1323;
  _QWORD *v1324;
  std::__shared_weak_count *v1325;
  unint64_t *v1326;
  unint64_t v1327;
  unint64_t v1328;
  unsigned int v1329;
  uint64_t **v1330;
  unint64_t v1331;
  unint64_t v1332;
  uint64_t *v1333;
  uint64_t i20;
  uint64_t v1335;
  uint64_t *v1336;
  uint64_t **v1337;
  uint64_t *v1338;
  uint64_t *v1339;
  std::__shared_weak_count *v1340;
  unint64_t *v1341;
  unint64_t v1342;
  char *v1343;
  char *v1344;
  unint64_t v1345;
  unint64_t v1346;
  char *v1347;
  uint64_t v1348;
  unsigned int v1349;
  BOOL v1350;
  uint64_t v1351;
  char *v1352;
  char *v1353;
  __int128 v1354;
  std::__shared_weak_count *v1355;
  unint64_t *v1356;
  unint64_t v1357;
  std::__shared_weak_count *v1358;
  unint64_t *v1359;
  unint64_t v1360;
  _QWORD *v1361;
  _QWORD *v1362;
  unsigned __int8 *v1363;
  unsigned __int8 *v1364;
  int v1365;
  uint64_t v1366;
  unint64_t v1367;
  int v1368;
  unint64_t v1369;
  char **v1370;
  std::runtime_error *v1371;
  std::runtime_error *exception;
  uint64_t v1373;
  uint64_t v1374;
  void *v1375;
  void *v1376;
  void *v1377;
  std::ios_base *v1378;
  uint64_t v1379;
  void *v1380;
  _QWORD *v1381;
  _QWORD *v1382;
  _QWORD *v1383;
  _QWORD *v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  std::locale::id *v1388;
  _QWORD *v1389;
  _QWORD *v1390;
  _QWORD *v1391;
  _QWORD *v1392;
  _QWORD *v1393;
  _QWORD *v1394;
  _QWORD *v1395;
  _QWORD *v1396;
  const std::locale::facet *v1397;
  size_t v1398;
  _BYTE *v1399;
  uint64_t v1400;
  const void **v1401;
  const void *v1402;
  uint64_t v1403;
  uint64_t v1404;
  const char *v1405;
  size_t v1406;
  unsigned __int8 v1407;
  uint64_t v1408;
  uint64_t nn;
  unsigned __int8 v1410;
  uint64_t v1411;
  uint64_t v1412;
  _QWORD *v1413;
  uint64_t v1414;
  char **v1415;
  _QWORD *v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  float64x2_t v1421;
  float64x2_t v1422;
  _QWORD *v1423;
  __int128 v1424;
  unint64_t v1425;
  __int128 v1426;
  _BOOL4 v1427;
  char *v1428;
  unsigned int v1429;
  char *v1430;
  _QWORD *v1431;
  _QWORD *v1432;
  char *v1433;
  uint64_t v1434;
  unsigned int v1435;
  char *v1436;
  uint64_t v1437;
  void *v1438;
  unsigned int v1439;
  void *v1440;
  uint64_t v1441;
  char *v1442;
  int v1443;
  char *v1444;
  _QWORD *v1445;
  uint64_t *v1446;
  uint64_t *v1447;
  int v1448;
  uint64_t *v1449;
  uint64_t *v1450;
  uint64_t *v1451;
  uint64_t v1452;
  int v1453;
  char *v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  char *v1458;
  uint64_t v1459;
  double v1460;
  _QWORD *v1461;
  uint64_t v1462;
  float64_t v1463;
  _QWORD *v1464;
  char *v1465;
  double v1466;
  uint64_t v1467;
  _QWORD *v1468;
  size_t v1469;
  double v1470;
  char *v1471;
  unsigned int *v1472;
  const char *v1473;
  double v1474;
  uint64_t *v1475;
  void *v1476;
  _QWORD *v1477;
  unsigned int v1478;
  float32x4_t v1479;
  uint64_t v1480;
  int v1481;
  int8x16_t v1482;
  std::__shared_weak_count *v1483;
  uint64_t **v1484;
  uint64_t v1485;
  char *v1486;
  __int128 v1487;
  __int128 v1488;
  uint64_t v1489;
  _BYTE *v1490;
  std::__shared_weak_count *v1491;
  _BYTE __dst[32];
  float64x2_t v1493;
  uint64_t v1494;
  void *object[6];
  __int128 v1496;
  _OWORD v1497[5];
  _BYTE v1498[128];
  __int128 v1499;
  _BYTE v1500[56];
  __int128 v1501;
  _BYTE v1502[56];
  __int128 v1503;
  _BYTE v1504[56];
  __int128 v1505;
  _BYTE v1506[56];
  __int128 v1507;
  _BYTE v1508[56];
  __int128 v1509;
  _BYTE v1510[704];
  _OWORD v1511[84];
  __int128 v1512;
  uint64_t v1513;
  float32x4_t v1514;
  _BYTE v1515[24];
  _BYTE v1516[24];
  _BYTE v1517[24];
  _BYTE v1518[32];
  char v1519;
  uint64_t v1520;
  __int128 v1521[3];
  int8x16_t v1522[2];
  __int128 v1523;
  __int128 v1524;
  _OWORD v1525[9];
  __int128 v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  uint64_t v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  uint64_t v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  uint64_t v1540;
  __int128 v1541;
  __int128 v1542;
  __int128 v1543;
  __int128 v1544;
  uint64_t v1545;
  __int128 v1546;
  __int128 v1547;
  __int128 v1548;
  __int128 v1549;
  uint64_t v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  uint64_t v1555;
  _BYTE v1556[648];
  __int128 v1557;
  uint64_t v1558;
  __int128 v1559;
  uint64_t v1560;
  _QWORD v1561[81];
  _BYTE v1562[648];
  __int128 v1563;
  uint64_t v1564;
  float32x4_t v1565;
  _BYTE v1566[23];
  uint64_t v1567;

  MEMORY[0x24BDAC7A8](a1);
  v15 = v14;
  v17 = v16;
  v1443 = v18;
  v19 = v13;
  v1477 = v20;
  v1431 = v21;
  v1445 = v22;
  v1432 = v23;
  v1567 = *MEMORY[0x24BDAC8D0];
  v24 = a11[9];
  if (v24 != v13)
  {
    sub_20EE62A1C((char **)v24, *v13, v13[1], 0x6DB6DB6DB6DB6DB7 * ((v13[1] - *v13) >> 3));
    v25 = *(_OWORD *)(v19 + 3);
    v24[5] = v19[5];
    *(_OWORD *)(v24 + 3) = v25;
    sub_20E86811C(v24 + 6, (char *)v19[6], (char *)v19[7], (v19[7] - v19[6]) >> 3);
  }
  v26 = *(_OWORD *)(v19 + 9);
  v24[11] = v19[11];
  *(_OWORD *)(v24 + 9) = v26;
  v27 = *((float32x4_t *)v19 + 6);
  *((float32x4_t *)v24 + 6) = v27;
  if (v1445[59] == v1445[60]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1001, (uint64_t)"!window.FullWindowMode()", 24, (uint64_t)"The window must be in incremental mode.", 39, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1464 = v17;
  v1461 = v15;
  v28 = v1432[26] - v1432[25];
  v1486 = 0;
  if ((v28 & 0x3FFFFFFFCLL) == 0)
  {
    v1430 = 0;
    goto LABEL_545;
  }
  v29 = 0;
  v1433 = 0;
  v1430 = 0;
  v30 = 0;
  v1455 = (v28 >> 2);
  v1415 = (char **)(a11 + 10);
  do
  {
    while (1)
    {
      v1471 = v29;
      v12 = *(unsigned int *)(v1432[25] + 4 * v30);
      v33 = *(_QWORD *)(v1432[28] + 8 * v30);
      v34 = *(_QWORD *)(v1432[31] + 8 * v30);
      v35 = (uint64_t)*a11;
      v36 = (*a11)[7];
      if (!v36)
        break;
      v37 = (uint64_t)(*a11 + 7);
      do
      {
        while (*(_QWORD *)(v36 + 32))
        {
          v37 = v36;
          v36 = *(_QWORD *)v36;
          if (!v36)
            goto LABEL_20;
        }
        if (*(_DWORD *)(v36 + 40) < v12)
          v36 += 8;
        else
          v37 = v36;
        v36 = *(_QWORD *)v36;
      }
      while (v36);
LABEL_20:
      if ((_QWORD *)v37 == *a11 + 7
        || *(_QWORD *)(v37 + 32)
        || *(_DWORD *)(v37 + 40) > v12
        || !*(_QWORD *)(v37 + 48))
      {
        break;
      }
LABEL_11:
      v29 = v1471;
      if (++v30 == v1455)
        goto LABEL_545;
    }
    v1467 = v30;
    v38 = *v1432 + 168 * v30;
    *(_OWORD *)object = *(_OWORD *)v38;
    v39 = *(_OWORD *)(v38 + 16);
    v40 = *(_OWORD *)(v38 + 32);
    v41 = *(_OWORD *)(v38 + 48);
    *(_QWORD *)&v1497[0] = *(_QWORD *)(v38 + 64);
    *(_OWORD *)&object[4] = v40;
    v1496 = v41;
    *(_OWORD *)&object[2] = v39;
    v42 = *(_OWORD *)(v38 + 144);
    *((_QWORD *)&v1497[1] + 1) = *(_QWORD *)(v38 + 160);
    *(_OWORD *)((char *)v1497 + 8) = v42;
    v43 = *(_OWORD *)(v38 + 96);
    *(_QWORD *)&v1497[3] = *(_QWORD *)(v38 + 112);
    v1497[2] = v43;
    v44 = *(_OWORD *)(v38 + 72);
    *((_QWORD *)&v1497[4] + 1) = *(_QWORD *)(v38 + 88);
    *(_OWORD *)((char *)&v1497[3] + 8) = v44;
    bzero(&v1498[24], 0x288uLL);
    v45 = *(_OWORD *)(v38 + 120);
    *(_QWORD *)&v1498[16] = *(_QWORD *)(v38 + 136);
    *(_OWORD *)v1498 = v45;
    *(_QWORD *)&v1510[168] = v33;
    *(_QWORD *)&v1510[176] = v34;
    sub_20F283D18(v35, 0, v12, (uint64_t)object);
    v46 = (_QWORD *)(*a11)[37];
    if (v46 != *a11 + 38)
    {
      do
      {
        v49 = *((unsigned int *)v46 + 8);
        v50 = operator new(0x300uLL);
        v50[2] = 0;
        *v50 = &off_24C9FC5B0;
        v50[1] = 0;
        *(_QWORD *)v1518 = sub_20F469B44((uint64_t)(v50 + 3));
        *(_QWORD *)&v1518[8] = v50;
        v50[3] = 0;
        v50[4] = v12;
        *((_DWORD *)v50 + 10) = v49;
        v51 = (int8x8_t)v1477[1];
        if (!*(_QWORD *)&v51)
          goto LABEL_1689;
        v52 = v12 ^ __ROR4__(v49, 13);
        v53 = (uint8x8_t)vcnt_s8(v51);
        v53.i16[0] = vaddlv_u8(v53);
        if (v53.u32[0] > 1uLL)
        {
          v54 = v52;
          if (*(_QWORD *)&v51 <= v52)
            v54 = v52 % *(_QWORD *)&v51;
        }
        else
        {
          v54 = (v51.i32[0] - 1) & v52;
        }
        v55 = *(uint64_t ***)(*v1477 + 8 * v54);
        if (!v55 || (v56 = *v55) == 0)
        {
LABEL_1689:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1317, (uint64_t)"lens_iter != image_id_lens_map.end()", 36, (uint64_t)"Fail to find the lens", 21, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        if (v53.u32[0] < 2uLL)
        {
          v57 = *(_QWORD *)&v51 - 1;
          while (1)
          {
            v59 = v56[1];
            if (v59 == v52)
            {
              if (*((_DWORD *)v56 + 8) == (_DWORD)v49 && !v56[2] && *((_DWORD *)v56 + 6) == (_DWORD)v12)
                goto LABEL_55;
            }
            else if ((v59 & v57) != v54)
            {
              goto LABEL_1689;
            }
            v56 = (uint64_t *)*v56;
            if (!v56)
              goto LABEL_1689;
          }
        }
        while (1)
        {
          v58 = v56[1];
          if (v58 == v52)
            break;
          if (v58 >= *(_QWORD *)&v51)
            v58 %= *(_QWORD *)&v51;
          if (v58 != v54)
            goto LABEL_1689;
LABEL_41:
          v56 = (uint64_t *)*v56;
          if (!v56)
            goto LABEL_1689;
        }
        if (*((_DWORD *)v56 + 8) != (_DWORD)v49 || v56[2] || *((_DWORD *)v56 + 6) != (_DWORD)v12)
          goto LABEL_41;
LABEL_55:
        v60 = v56[5];
        v61 = operator new();
        sub_20E972DB4(v61, v60);
        memcpy((void *)(v61 + 1000), (const void *)(v60 + 1000), 0x1B8uLL);
        v62 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
        *(_QWORD *)(*(_QWORD *)v1518 + 24) = v61;
        if (v62)
        {
          v63 = *(_DWORD *)(v62 + 992);
          if (v63 != -1)
          {
            if (v63 > 7)
            {
              if (v63 > 0xB)
              {
                if (v63 >= 0xF)
                {
                  v64 = *(std::__shared_weak_count **)(v62 + 896);
                  if (v64)
                  {
                    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
                    do
                      v66 = __ldaxr(p_shared_owners);
                    while (__stlxr(v66 - 1, p_shared_owners));
                    goto LABEL_79;
                  }
                }
              }
              else if (v63 > 9)
              {
                if (v63 != 10)
                {
                  v64 = *(std::__shared_weak_count **)(v62 + 672);
                  if (v64)
                  {
                    v69 = (unint64_t *)&v64->__shared_owners_;
                    do
                      v66 = __ldaxr(v69);
                    while (__stlxr(v66 - 1, v69));
                    goto LABEL_79;
                  }
                }
              }
              else if (v63 == 9)
              {
                v64 = *(std::__shared_weak_count **)(v62 + 504);
                if (v64)
                {
                  v67 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v67);
                  while (__stlxr(v66 - 1, v67));
                  goto LABEL_79;
                }
              }
            }
            else if (v63 == 7)
            {
              v64 = *(std::__shared_weak_count **)(v62 + 480);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
LABEL_79:
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
            }
          }
          MEMORY[0x212BC6398](v62, 0x1000C408CB30F5BLL);
          v61 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
        }
        v70 = operator new();
        sub_20E972DB4(v70, v61);
        memcpy((void *)(v70 + 1000), (const void *)(v61 + 1000), 0x1B8uLL);
        v71 = *(_QWORD *)(*(_QWORD *)v1518 + 32);
        *(_QWORD *)(*(_QWORD *)v1518 + 32) = v70;
        if (v71)
        {
          v72 = *(_DWORD *)(v71 + 992);
          if (v72 != -1)
          {
            if (v72 > 7)
            {
              if (v72 > 0xB)
              {
                if (v72 >= 0xF)
                {
                  v73 = *(std::__shared_weak_count **)(v71 + 896);
                  if (v73)
                  {
                    v77 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v77);
                    while (__stlxr(v75 - 1, v77));
                    goto LABEL_106;
                  }
                }
              }
              else if (v72 > 9)
              {
                if (v72 != 10)
                {
                  v73 = *(std::__shared_weak_count **)(v71 + 672);
                  if (v73)
                  {
                    v78 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v78);
                    while (__stlxr(v75 - 1, v78));
                    goto LABEL_106;
                  }
                }
              }
              else if (v72 == 9)
              {
                v73 = *(std::__shared_weak_count **)(v71 + 504);
                if (v73)
                {
                  v76 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v76);
                  while (__stlxr(v75 - 1, v76));
                  goto LABEL_106;
                }
              }
            }
            else if (v72 == 7)
            {
              v73 = *(std::__shared_weak_count **)(v71 + 480);
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
LABEL_106:
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
            }
          }
          MEMORY[0x212BC6398](v71, 0x1000C408CB30F5BLL);
        }
        v79 = (int8x8_t)(*a11)[41];
        if (!*(_QWORD *)&v79)
          goto LABEL_129;
        v80 = (uint8x8_t)vcnt_s8(v79);
        v80.i16[0] = vaddlv_u8(v80);
        if (v80.u32[0] > 1uLL)
        {
          v81 = v49;
          if (*(_QWORD *)&v79 <= v49)
            v81 = v49 % *(_QWORD *)&v79;
        }
        else
        {
          v81 = (v79.i32[0] - 1) & v49;
        }
        v82 = *(uint64_t ***)((*a11)[40] + 8 * v81);
        if (v82)
        {
          v83 = *v82;
          if (*v82)
          {
            if (v80.u32[0] < 2uLL)
            {
              v84 = *(_QWORD *)&v79 - 1;
              while (1)
              {
                v86 = v83[1];
                if (v86 == v49)
                {
                  if (*((_DWORD *)v83 + 4) == (_DWORD)v49)
                    goto LABEL_130;
                }
                else if ((v86 & v84) != v81)
                {
                  goto LABEL_129;
                }
                v83 = (uint64_t *)*v83;
                if (!v83)
                  goto LABEL_130;
              }
            }
            do
            {
              v85 = v83[1];
              if (v85 == v49)
              {
                if (*((_DWORD *)v83 + 4) == (_DWORD)v49)
                  break;
              }
              else
              {
                if (v85 >= *(_QWORD *)&v79)
                  v85 %= *(_QWORD *)&v79;
                if (v85 != v81)
                  goto LABEL_129;
              }
              v83 = (uint64_t *)*v83;
            }
            while (v83);
          }
        }
        else
        {
LABEL_129:
          v83 = 0;
        }
LABEL_130:
        v87 = *(_DWORD **)(*(_QWORD *)v1518 + 32);
        v88 = v87[248];
        if (v88 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v90 = qword_254A6DE40;
            for (i = qword_254A6DE48; v90 != i; v90 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v90)(*(_QWORD *)(v90 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
          }
          v92 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (byte_254A6DE68)
          {
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v88 = v87[248];
            goto LABEL_139;
          }
LABEL_1698:
          abort();
        }
LABEL_139:
        if (!v88)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          goto LABEL_1698;
        }
        memmove(__dst, v87, 0x48uLL);
        v93 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
        sub_20F13B958((uint64_t)(v83 + 3), (double *)__dst, (uint64_t)v1521);
        v97 = *(_DWORD *)(v93 + 992);
        if (v97 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v108 = qword_254A6DE40;
            for (j = qword_254A6DE48; v108 != j; v108 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v108)(*(_QWORD *)(v108 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
          }
          v110 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (byte_254A6DE68)
          {
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v97 = *(_DWORD *)(v93 + 992);
            if (v97 > 7)
              goto LABEL_156;
LABEL_142:
            if (v97 > 3)
            {
              *(_QWORD *)&v95.f64[0] = v1522[1].i64[0];
              v99 = (int8x16_t)v1521[2];
              v98 = (__n128)v1522[0];
              v112 = (int8x16_t)v1521[0];
              v111 = (int8x16_t)v1521[1];
              v113 = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
              v114 = vextq_s8(v99, v99, 8uLL).u64[0];
              v115 = vextq_s8(v111, v111, 8uLL).u64[0];
              v116 = vextq_s8(v112, v112, 8uLL).u64[0];
              v96.f64[0] = *(float64_t *)(v93 + 64);
              *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vabdq_f64(v95, v96);
              v123 = vabdq_f64((float64x2_t)v1522[0], *(float64x2_t *)(v93 + 48));
              v124 = vabdq_f64((float64x2_t)v1521[2], *(float64x2_t *)(v93 + 32));
              v125 = vabdq_f64((float64x2_t)v1521[1], *(float64x2_t *)(v93 + 16));
              v126 = vabdq_f64((float64x2_t)v1521[0], *(float64x2_t *)v93);
              v127 = v126.f64[0] > 1.0e-10;
              if (v126.f64[1] > 1.0e-10)
                v127 = 1;
              if (v125.f64[0] > 1.0e-10)
                v127 = 1;
              if (v125.f64[1] > 1.0e-10)
                v127 = 1;
              if (v124.f64[0] > 1.0e-10)
                v127 = 1;
              if (v124.f64[1] > 1.0e-10)
                v127 = 1;
              if (v123.f64[0] > 1.0e-10)
                v127 = 1;
              v122 = v127 || v123.f64[1] > 1.0e-10 || v96.f64[0] > 1.0e-10;
              if (v97 > 5)
              {
                if (!v122)
                  goto LABEL_207;
                goto LABEL_205;
              }
              goto LABEL_188;
            }
            if (v97 > 1)
            {
              *(_QWORD *)&v94.f64[0] = v1522[1].i64[0];
              v99 = (int8x16_t)v1521[2];
              v98 = (__n128)v1522[0];
              v129 = (int8x16_t)v1521[0];
              v128 = (int8x16_t)v1521[1];
              v130 = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
              v131 = vextq_s8(v99, v99, 8uLL).u64[0];
              v132 = vextq_s8(v128, v128, 8uLL).u64[0];
              v133 = vextq_s8(v129, v129, 8uLL).u64[0];
              v96.f64[0] = *(float64_t *)(v93 + 64);
              *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vabdq_f64(v94, v96);
              v134 = vabdq_f64((float64x2_t)v1522[0], *(float64x2_t *)(v93 + 48));
              v135 = vabdq_f64((float64x2_t)v1521[2], *(float64x2_t *)(v93 + 32));
              v136 = vabdq_f64((float64x2_t)v1521[1], *(float64x2_t *)(v93 + 16));
              v137 = vabdq_f64((float64x2_t)v1521[0], *(float64x2_t *)v93);
              v138 = v137.f64[0] > 1.0e-10;
              if (v137.f64[1] > 1.0e-10)
                v138 = 1;
              if (v136.f64[0] > 1.0e-10)
                v138 = 1;
              if (v136.f64[1] > 1.0e-10)
                v138 = 1;
              if (v135.f64[0] > 1.0e-10)
                v138 = 1;
              if (v135.f64[1] > 1.0e-10)
                v138 = 1;
              if (v134.f64[0] > 1.0e-10)
                v138 = 1;
              if (v138 || v134.f64[1] > 1.0e-10 || v96.f64[0] > 1.0e-10)
              {
                v129.i64[1] = v133;
                v128.i64[1] = v132;
                *(int8x16_t *)v93 = v129;
                *(int8x16_t *)(v93 + 16) = v128;
                v99.i64[1] = v131;
                *(float64_t *)(v93 + 64) = v94.f64[0];
                v98.n128_u64[1] = v130;
                goto LABEL_206;
              }
              goto LABEL_207;
            }
            if (v97)
            {
              *(_QWORD *)&v94.f64[0] = v1522[1].i64[0];
              v99.i64[0] = *(_QWORD *)&v1521[2];
              v98 = (__n128)v1522[0];
              *(_QWORD *)&v101 = *(_QWORD *)&v1521[0];
              *(_QWORD *)&v100 = *(_QWORD *)&v1521[1];
              v102 = (int8x16_t)vabdq_f64((float64x2_t)v1521[0], *(float64x2_t *)v93);
              v103 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
              v104 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v103, (float64x2_t)vextq_s8(v102, v102, 8uLL)), (int32x4_t)vcgeq_f64(v103, vabdq_f64((float64x2_t)v1521[1], *(float64x2_t *)(v93 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v103, vabdq_f64((float64x2_t)v1521[2], *(float64x2_t *)(v93 + 32))), (int32x4_t)vcgeq_f64(
                                                                                  v103,
                                                                                  vabdq_f64((float64x2_t)v1522[0], *(float64x2_t *)(v93 + 48))))));
              if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v104)) & 1) != 0
                || (v104.f64[0] = *(float64_t *)(v93 + 64), vabdq_f64(v94, v104).f64[0] > 1.0e-10))
              {
                v105 = vextq_s8(v1522[0], v1522[0], 8uLL).u64[0];
                *((_QWORD *)&v101 + 1) = vextq_s8((int8x16_t)v1521[0], (int8x16_t)v1521[0], 8uLL).u64[0];
                *((_QWORD *)&v100 + 1) = vextq_s8((int8x16_t)v1521[1], (int8x16_t)v1521[1], 8uLL).u64[0];
                v106 = vextq_s8((int8x16_t)v1521[2], (int8x16_t)v1521[2], 8uLL).u64[0];
                *(_OWORD *)v93 = v101;
                *(_OWORD *)(v93 + 16) = v100;
                v99.i64[1] = v106;
                *(float64_t *)(v93 + 64) = v94.f64[0];
                v98.n128_u64[1] = v105;
                goto LABEL_206;
              }
              goto LABEL_207;
            }
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          }
          abort();
        }
        if (v97 <= 7)
          goto LABEL_142;
LABEL_156:
        *(_QWORD *)&v95.f64[0] = v1522[1].i64[0];
        v99 = (int8x16_t)v1521[2];
        v98 = (__n128)v1522[0];
        v112 = (int8x16_t)v1521[0];
        v111 = (int8x16_t)v1521[1];
        v113 = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
        v114 = vextq_s8(v99, v99, 8uLL).u64[0];
        v115 = vextq_s8(v111, v111, 8uLL).u64[0];
        v116 = vextq_s8(v112, v112, 8uLL).u64[0];
        v96.f64[0] = *(float64_t *)(v93 + 64);
        *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vabdq_f64(v95, v96);
        v117 = vabdq_f64((float64x2_t)v1522[0], *(float64x2_t *)(v93 + 48));
        v118 = vabdq_f64((float64x2_t)v1521[2], *(float64x2_t *)(v93 + 32));
        v119 = vabdq_f64((float64x2_t)v1521[1], *(float64x2_t *)(v93 + 16));
        v120 = vabdq_f64((float64x2_t)v1521[0], *(float64x2_t *)v93);
        v121 = v120.f64[0] > 1.0e-10;
        if (v120.f64[1] > 1.0e-10)
          v121 = 1;
        if (v119.f64[0] > 1.0e-10)
          v121 = 1;
        if (v119.f64[1] > 1.0e-10)
          v121 = 1;
        if (v118.f64[0] > 1.0e-10)
          v121 = 1;
        if (v118.f64[1] > 1.0e-10)
          v121 = 1;
        if (v117.f64[0] > 1.0e-10)
          v121 = 1;
        v122 = v121 || v117.f64[1] > 1.0e-10 || v96.f64[0] > 1.0e-10;
        if (v97 > 0xB)
        {
          if (v97 > 0xD)
          {
            if (!v122)
              goto LABEL_207;
            goto LABEL_205;
          }
        }
        else if (v97 > 9)
        {
          if (!v122)
            goto LABEL_207;
LABEL_205:
          v112.i64[1] = v116;
          v111.i64[1] = v115;
          *(int8x16_t *)v93 = v112;
          *(int8x16_t *)(v93 + 16) = v111;
          v99.i64[1] = v114;
          *(float64_t *)(v93 + 64) = v95.f64[0];
          v98.n128_u64[1] = v113;
LABEL_206:
          *(int8x16_t *)(v93 + 32) = v99;
          *(__n128 *)(v93 + 48) = v98;
          v139 = *((double *)v1521 + 1);
          v140 = *(double *)&v1521[2];
          v141 = *(double *)&v1521[1];
          v142 = *(double *)v1521 * *(double *)&v1521[2];
          v143 = -*((double *)v1521 + 1) / (*(double *)v1521 * *(double *)&v1521[2]);
          *(double *)(v93 + 72) = 1.0 / *(double *)v1521;
          *(double *)(v93 + 80) = v143;
          v144 = *((double *)&v1521[2] + 1);
          *(double *)(v93 + 88) = -(v140 * v141 - v139 * *((double *)&v1521[2] + 1)) / v142;
          *(_QWORD *)(v93 + 96) = 0;
          *(double *)(v93 + 104) = 1.0 / v140;
          *(double *)(v93 + 112) = -v144 / v140;
          *(_QWORD *)(v93 + 120) = 0;
          *(_QWORD *)(v93 + 128) = 0;
          v98 = (__n128)xmmword_2102E3C70;
          *(_OWORD *)(v93 + 136) = xmmword_2102E3C70;
          *(_QWORD *)(v93 + 152) = 0x7FF8000000000000;
          *(_BYTE *)(v93 + 160) = 0;
          goto LABEL_207;
        }
LABEL_188:
        if (v122)
          goto LABEL_205;
LABEL_207:
        v145 = (int8x8_t)(*a11)[46];
        if (v145)
        {
          v98.n128_u64[0] = (unint64_t)vcnt_s8(v145);
          v98.n128_u16[0] = vaddlv_u8((uint8x8_t)v98.n128_u64[0]);
          if (v98.n128_u32[0] > 1uLL)
          {
            v146 = v49;
            if (*(_QWORD *)&v145 <= v49)
              v146 = v49 % *(_QWORD *)&v145;
          }
          else
          {
            v146 = (v145.i32[0] - 1) & v49;
          }
          v147 = *(uint64_t **)((*a11)[45] + 8 * v146);
          if (v147)
          {
            v147 = (uint64_t *)*v147;
            if (v147)
            {
              if (v98.n128_u32[0] < 2uLL)
              {
                v148 = *(_QWORD *)&v145 - 1;
                while (1)
                {
                  v150 = v147[1];
                  if (v150 == v49)
                  {
                    if (*((_DWORD *)v147 + 4) == (_DWORD)v49)
                      goto LABEL_228;
                  }
                  else if ((v150 & v148) != v146)
                  {
                    goto LABEL_227;
                  }
                  v147 = (uint64_t *)*v147;
                  if (!v147)
                    goto LABEL_228;
                }
              }
              do
              {
                v149 = v147[1];
                if (v149 == v49)
                {
                  if (*((_DWORD *)v147 + 4) == (_DWORD)v49)
                    break;
                }
                else
                {
                  if (v149 >= *(_QWORD *)&v145)
                    v149 %= *(_QWORD *)&v145;
                  if (v149 != v146)
                    goto LABEL_227;
                }
                v147 = (uint64_t *)*v147;
              }
              while (v147);
            }
          }
        }
        else
        {
LABEL_227:
          v147 = 0;
        }
LABEL_228:
        sub_20F6182A0(*(char **)(*(_QWORD *)v1518 + 24), (float64x2_t *)(v147 + 3), v98);
        v151 = (int8x8_t)(*a11)[51];
        if (!*(_QWORD *)&v151)
          goto LABEL_248;
        v152 = (uint8x8_t)vcnt_s8(v151);
        v152.i16[0] = vaddlv_u8(v152);
        if (v152.u32[0] > 1uLL)
        {
          v153 = v49;
          if (*(_QWORD *)&v151 <= v49)
            v153 = v49 % *(_QWORD *)&v151;
        }
        else
        {
          v153 = (v151.i32[0] - 1) & v49;
        }
        v154 = *(uint64_t ***)((*a11)[50] + 8 * v153);
        if (v154)
        {
          v155 = *v154;
          if (*v154)
          {
            if (v152.u32[0] < 2uLL)
            {
              v156 = *(_QWORD *)&v151 - 1;
              while (1)
              {
                v158 = v155[1];
                if (v158 == v49)
                {
                  if (*((_DWORD *)v155 + 4) == (_DWORD)v49)
                    goto LABEL_249;
                }
                else if ((v158 & v156) != v153)
                {
                  goto LABEL_248;
                }
                v155 = (uint64_t *)*v155;
                if (!v155)
                  goto LABEL_249;
              }
            }
            do
            {
              v157 = v155[1];
              if (v157 == v49)
              {
                if (*((_DWORD *)v155 + 4) == (_DWORD)v49)
                  break;
              }
              else
              {
                if (v157 >= *(_QWORD *)&v151)
                  v157 %= *(_QWORD *)&v151;
                if (v157 != v153)
                  goto LABEL_248;
              }
              v155 = (uint64_t *)*v155;
            }
            while (v155);
          }
        }
        else
        {
LABEL_248:
          v155 = 0;
        }
LABEL_249:
        v159 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
        v160 = *(_DWORD *)(v159 + 992);
        if (v160 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v161 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v162 = qword_254A6DE40;
            for (k = qword_254A6DE48; v162 != k; v162 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v162)(*(_QWORD *)(v162 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
          }
          v164 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (byte_254A6DE68)
          {
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v160 = *(_DWORD *)(v159 + 992);
            if (v160 > 7)
              goto LABEL_262;
LABEL_251:
            if (v160 > 3)
            {
              if (v160 < 7)
                goto LABEL_273;
              v165 = v159 + 488;
LABEL_272:
              *(_OWORD *)v165 = *(_OWORD *)(v155 + 3);
              v166 = *(_OWORD *)(v155 + 5);
              v167 = *(_OWORD *)(v155 + 7);
              v168 = *(_OWORD *)(v155 + 9);
              *(_QWORD *)(v165 + 64) = v155[11];
              *(_OWORD *)(v165 + 32) = v167;
              *(_OWORD *)(v165 + 48) = v168;
              *(_OWORD *)(v165 + 16) = v166;
              goto LABEL_273;
            }
            if (v160)
              goto LABEL_273;
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          }
          abort();
        }
        if (v160 <= 7)
          goto LABEL_251;
LABEL_262:
        if (v160 > 0xB)
        {
          if (v160 < 0xF)
            goto LABEL_273;
          v165 = v159 + 904;
          goto LABEL_272;
        }
        if (v160 > 9)
        {
          if (v160 == 10)
            goto LABEL_273;
          v165 = v159 + 680;
          goto LABEL_272;
        }
        if (v160 == 9)
        {
          v165 = v159 + 512;
          goto LABEL_272;
        }
LABEL_273:
        v169 = *(_QWORD *)v1518;
        v171 = (uint64_t)a11[5];
        v170 = a11[6];
        if (v170 != (_QWORD *)v171)
        {
          v172 = ((uint64_t)v170 - v171) >> 4;
          v173 = *(_DWORD *)(*(_QWORD *)v1518 + 16);
          v174 = **(_QWORD **)v1518;
          while (1)
          {
            v175 = v172 >> 1;
            v176 = v171 + 16 * (v172 >> 1);
            v177 = *(_QWORD *)v176;
            v178 = *(_DWORD *)(*(_QWORD *)v176 + 16);
            _CF = v178 >= v173;
            if (v178 != v173)
              goto LABEL_281;
            if (*(_QWORD *)v177 >= v174)
              break;
LABEL_275:
            v171 = v176 + 16;
            v175 = v172 + ~v175;
LABEL_276:
            v172 = v175;
            if (!v175)
              goto LABEL_284;
          }
          if (*(_QWORD *)v177 != v174)
            goto LABEL_276;
          _CF = *(_DWORD *)(v177 + 8) >= *(_DWORD *)(*(_QWORD *)v1518 + 8);
LABEL_281:
          if (_CF)
            goto LABEL_276;
          goto LABEL_275;
        }
LABEL_284:
        if ((_QWORD *)v171 != v170)
        {
          v180 = *(_QWORD *)v171;
          if (*(_DWORD *)(*(_QWORD *)v171 + 16) == *(_DWORD *)(*(_QWORD *)v1518 + 16)
            && *(_QWORD *)v180 == **(_QWORD **)v1518
            && *(_DWORD *)(v180 + 8) == *(_DWORD *)(*(_QWORD *)v1518 + 8))
          {
            goto LABEL_329;
          }
        }
        v181 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
        if (!v181)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 114, (uint64_t)"vio_frame->lens_model_", 22, (uint64_t)"VIO Frame Lens is not set!", 26, (void (*)(void **))sub_21023DDB0);
          v185 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v186 = qword_254A6DE40;
            for (m = qword_254A6DE48; v186 != m; v186 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v186)(*(_QWORD *)(v186 + 8), "vio_frame->lens_model_", 22, "VIO Frame Lens is not set!", 26);
          }
          v188 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "vio_frame->lens_model_", 22, "VIO Frame Lens is not set!", 26);
          v169 = *(_QWORD *)v1518;
          v181 = *(_QWORD *)(*(_QWORD *)v1518 + 24);
          v182 = (uint64_t)*a11;
          v183 = *a11 + 7;
          v184 = (uint64_t *)*v183;
          if (*v183)
            goto LABEL_299;
          goto LABEL_329;
        }
        v182 = (uint64_t)*a11;
        v183 = *a11 + 7;
        v184 = (uint64_t *)*v183;
        if (!*v183)
          goto LABEL_329;
LABEL_299:
        v189 = *(_QWORD *)v169;
        v190 = *(_DWORD *)(v169 + 8);
        v191 = v183;
        do
        {
          v192 = v184[4];
          if (v192 < v189)
          {
            ++v184;
          }
          else if (v192 == v189)
          {
            if (*((_DWORD *)v184 + 10) < v190)
              ++v184;
            else
              v191 = v184;
          }
          else
          {
            v191 = v184;
          }
          v184 = (uint64_t *)*v184;
        }
        while (v184);
        if (v191 == v183)
          goto LABEL_329;
        v193 = v191[4];
        if (v189 < v193 || v189 == v193 && *((_DWORD *)v191 + 10) > v190)
          goto LABEL_329;
        v194 = v191[6];
        if (!v194)
          goto LABEL_329;
        v195 = *(_QWORD *)(v182 + 304);
        if (!v195)
          goto LABEL_1766;
        v196 = *(_DWORD *)(v169 + 16);
        v197 = v182 + 304;
        do
        {
          v198 = *(_DWORD *)(v195 + 32);
          v199 = v198 >= v196;
          if (v198 >= v196)
            v200 = (uint64_t *)v195;
          else
            v200 = (uint64_t *)(v195 + 8);
          if (v199)
            v197 = v195;
          v195 = *v200;
        }
        while (*v200);
        if (v197 != v182 + 304 && *(_DWORD *)(v197 + 32) <= v196)
        {
          v201 = v197 + 40;
        }
        else
        {
LABEL_1766:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 90, (uint64_t)"T_I_to_C", 8, (uint64_t)"Failed to find ItoC transform for camera source", 47, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1708;
          }
          v201 = 0;
        }
        *(_QWORD *)&v1521[0] = v194;
        DWORD2(v1521[0]) = 0;
        *(_QWORD *)&v1521[1] = v194 + 72;
        DWORD2(v1521[1]) = 0;
        *(_QWORD *)&v1521[2] = v201;
        DWORD2(v1521[2]) = 0;
        v1522[0].i64[0] = v201 + 72;
        v1522[0].i32[2] = 0;
        v1522[1].i64[0] = v181;
        sub_20F287320(v182 + 1784, (uint64_t *)v169, v169, v1521);
        if ((v202 & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 93, (uint64_t)"ret.second", 10, (uint64_t)"Duplicated pose ref. This should not happen", 43, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1708:
          abort();
        }
        if (a11[6] == (_QWORD *)sub_20F286FF8((char **)a11 + 5, v171, v1518))
        {
LABEL_329:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1347, (uint64_t)"ret", 3, (uint64_t)"Database can't add frame", 24, (void (*)(void **))sub_21023DDB0);
          v203 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v204 = qword_254A6DE40;
            for (n = qword_254A6DE48; v204 != n; v204 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v204)(*(_QWORD *)(v204 + 8), "ret", 3, "Database can't add frame", 24);
          }
          v206 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v206 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "ret", 3, "Database can't add frame", 24);
        }
        v207 = *(std::__shared_weak_count **)&v1518[8];
        if (*(_QWORD *)&v1518[8])
        {
          v208 = (unint64_t *)(*(_QWORD *)&v1518[8] + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
            v210 = (_QWORD *)v46[1];
            if (v210)
              goto LABEL_342;
            do
            {
LABEL_345:
              v211 = (_QWORD *)v46[2];
              _ZF = *v211 == (_QWORD)v46;
              v46 = v211;
            }
            while (!_ZF);
            goto LABEL_30;
          }
        }
        v210 = (_QWORD *)v46[1];
        if (!v210)
          goto LABEL_345;
        do
        {
LABEL_342:
          v211 = v210;
          v210 = (_QWORD *)*v210;
        }
        while (v210);
LABEL_30:
        v46 = v211;
      }
      while (v211 != *a11 + 38);
    }
    if (*(_QWORD *)&v1510[96])
    {
      *(_QWORD *)&v1510[104] = *(_QWORD *)&v1510[96];
      operator delete(*(void **)&v1510[96]);
    }
    if (!v1443)
      goto LABEL_497;
    v47 = (*a11)[7];
    if (!v47)
      goto LABEL_487;
    v48 = (uint64_t)(*a11 + 7);
    do
    {
      while (*(_QWORD *)(v47 + 32))
      {
        v48 = v47;
        v47 = *(_QWORD *)v47;
        if (!v47)
          goto LABEL_375;
      }
      if (*(_DWORD *)(v47 + 40) < v12)
        v47 += 8;
      else
        v48 = v47;
      v47 = *(_QWORD *)v47;
    }
    while (v47);
LABEL_375:
    if ((_QWORD *)v48 == *a11 + 7)
      goto LABEL_487;
    if (*(_QWORD *)(v48 + 32))
      goto LABEL_487;
    if (*(_DWORD *)(v48 + 40) > v12)
      goto LABEL_487;
    v212 = a11[8];
    if (!v212 || v48 == (*a11)[6])
      goto LABEL_487;
    v1413 = (_QWORD *)(v48 + 32);
    v213 = *(_QWORD *)v48;
    v214 = v48;
    if (*(_QWORD *)v48)
    {
      do
      {
        v215 = v213;
        v213 = *(_QWORD *)(v213 + 8);
      }
      while (v213);
    }
    else
    {
      do
      {
        v215 = *(_QWORD *)(v214 + 16);
        _ZF = *(_QWORD *)v215 == v214;
        v214 = v215;
      }
      while (_ZF);
    }
    DWORD2(v1521[0]) = *(_DWORD *)(v215 + 40);
    *(_QWORD *)&v1521[0] = *(_QWORD *)(v215 + 32);
    *(_QWORD *)&v1521[1] = *v1413;
    DWORD2(v1521[1]) = *(_DWORD *)(v48 + 40);
    v216 = *((_OWORD *)v212 + 2);
    v1564 = v212[6];
    v1563 = v216;
    v1565.i64[0] = v212[1];
    v1565.i64[1] = v212[3];
    v217 = *(_QWORD *)(v215 + 48);
    v1426 = *(_OWORD *)(v217 + 120);
    v218 = *(_QWORD *)(v217 + 136);
    v1424 = *(_OWORD *)(v217 + 144);
    v219 = *(_QWORD *)(v217 + 160);
    memset(v1522, 0, sizeof(v1522));
    v1521[2] = 0u;
    v1523 = xmmword_2103BA968;
    v1524 = unk_2103BA978;
    *((_QWORD *)&v1525[3] + 1) = 0;
    *((_QWORD *)&v1525[1] + 1) = 0;
    *(_OWORD *)((char *)&v1525[2] + 8) = 0u;
    *(_OWORD *)((char *)v1525 + 8) = 0u;
    *(_QWORD *)&v1525[0] = 0x3FF0000000000000;
    *(_QWORD *)&v1525[2] = 0x3FF0000000000000;
    *(_QWORD *)&v1525[4] = 0x3FF0000000000000;
    bzero((char *)&v1525[4] + 8, 0x480uLL);
    v1558 = v218;
    v1557 = v1426;
    v1560 = v219;
    v1559 = v1424;
    bzero(&v1561[1], 0x278uLL);
    v1561[0] = 0x3FF0000000000000;
    v1561[10] = 0x3FF0000000000000;
    v1561[20] = 0x3FF0000000000000;
    v1561[30] = 0x3FF0000000000000;
    v1561[40] = 0x3FF0000000000000;
    v1561[50] = 0x3FF0000000000000;
    v1561[60] = 0x3FF0000000000000;
    v1561[70] = 0x3FF0000000000000;
    v1561[80] = 0x3FF0000000000000;
    bzero(v1562, 0x288uLL);
    v1414 = v215;
    if (!(_DWORD)v1467)
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1946, (uint64_t)"imu_measurements_segment >= 1", 29, (uint64_t)"Miss aligned IMU segments", 25, (void (*)(void **))sub_21023DDB0);
      v220 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v220 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v221 = qword_254A6DE40;
        for (ii = qword_254A6DE48; v221 != ii; v221 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v221)(*(_QWORD *)(v221 + 8), "imu_measurements_segment >= 1", 29, "Miss aligned IMU segments", 25);
      }
      v223 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v223 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      v215 = v1414;
      if (!byte_254A6DE68)
LABEL_1721:
        abort();
      qword_254A6DE58(unk_254A6DE60, "imu_measurements_segment >= 1", 29, "Miss aligned IMU segments", 25);
    }
    v224 = a11[9];
    v225 = (v1467 - 1);
    v226 = v224[9];
    v227 = v224[6];
    v228 = v224[5];
    v229 = (v224[7] - v227) >> 3;
    v1423 = v224;
    if (v224[12] == v225 + 1)
    {
      v1427 = 1;
      v230 = v224[5];
    }
    else
    {
      v230 = *(_QWORD *)(v227 + 8 * ((v226 + v225 + 1) % v229)) + 1;
      v1427 = v230 == v228;
    }
    v231 = *(_QWORD *)(v227 + 8 * ((v226 + v225) % v229));
    v232 = v231 == v228;
    *(_QWORD *)&v1488 = a11[9];
    BYTE8(v1488) = v231 == v228;
    v1489 = v231;
    v233 = *(_QWORD *)(v215 + 48);
    v1412 = v230 - 1;
    if (v230 - 1 == v228)
    {
      if (v231 == v228)
      {
        v232 = 1;
        v231 = v228;
        goto LABEL_417;
      }
      if (!v231)
      {
        v235 = 1 - v230;
        if (1 == v230)
          goto LABEL_417;
        goto LABEL_412;
      }
LABEL_410:
      v235 = v231 - (v230 - 1);
      goto LABEL_411;
    }
    if (v230 == 1)
    {
      _ZF = v231 != v228 && v231 == 0;
      if (_ZF)
      {
        v232 = 0;
        v231 = 0;
        goto LABEL_417;
      }
    }
    if (v230 != 1)
      goto LABEL_410;
    v235 = v228;
    if (v231 != v228)
      goto LABEL_410;
LABEL_411:
    if (!v235)
      goto LABEL_417;
LABEL_412:
    v236 = -v235;
    do
    {
      v237 = v236 >> 1;
      v238 = (v236 >> 1) + v231;
      if (*(double *)(*v224 + 56 * ((v238 + v224[3]) % (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v224[1] - *v224) >> 3)))) < *(double *)(v233 + 816))
      {
        v231 = v238 + 1;
        v232 = v238 + 1 == v228;
        v237 = v236 + ~v237;
      }
      v236 = v237;
    }
    while (v237);
LABEL_417:
    BYTE8(v1488) = v232;
    v1489 = v231;
    v239 = *(double *)(*(_QWORD *)(v48 + 48) + 816);
    v1411 = v228;
    if (v239 == *(double *)(*v224
                           + 56
                           * ((v224[3] + v1412)
                            % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v224[1] - *v224) >> 3)))))
    {
      if (*(double *)(v233 + 816) < v239)
        goto LABEL_436;
LABEL_428:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1964, (uint64_t)"iter->second->timestamp < next_iter->second->timestamp", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v244 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v244 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v245 = qword_254A6DE40;
        for (jj = qword_254A6DE48; v245 != jj; v245 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v245)(*(_QWORD *)(v245 + 8), "iter->second->timestamp < next_iter->second->timestamp", 54, "", 0);
      }
      v247 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v247 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      v215 = v1414;
      if (!byte_254A6DE68)
        goto LABEL_1721;
      qword_254A6DE58(unk_254A6DE60, "iter->second->timestamp < next_iter->second->timestamp", 54, "", 0);
      goto LABEL_436;
    }
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1961, (uint64_t)"ExactlyEqual(next_iter->second->timestamp, imu_segment_last_iter->timestamp)", 76, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v240 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v240 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v241 = qword_254A6DE40;
      for (kk = qword_254A6DE48; v241 != kk; v241 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v241)(*(_QWORD *)(v241 + 8), "ExactlyEqual(next_iter->second->timestamp, imu_segment_last_iter->timestamp)", 76, "", 0);
    }
    v243 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v243 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    v215 = v1414;
    if (!byte_254A6DE68)
      goto LABEL_1721;
    qword_254A6DE58(unk_254A6DE60, "ExactlyEqual(next_iter->second->timestamp, imu_segment_last_iter->timestamp)", 76, "", 0);
    if (*(double *)(*(_QWORD *)(v1414 + 48) + 816) >= *(double *)(*(_QWORD *)(v48 + 48) + 816))
      goto LABEL_428;
LABEL_436:
    v248 = (_QWORD *)v1488;
    v249 = v1489;
    v250 = *(_QWORD *)v1488
         + 56
         * ((*(_QWORD *)(v1488 + 24) + v1489)
          % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v1488 + 8) - *(_QWORD *)v1488) >> 3)));
    *(_QWORD *)__dst = *(_QWORD *)v250;
    *(_OWORD *)&__dst[8] = *(_OWORD *)(v250 + 8);
    *(_QWORD *)&__dst[24] = *(_QWORD *)(v250 + 24);
    v1494 = *(_QWORD *)(v250 + 48);
    v251 = *(float64x2_t *)(v250 + 32);
    v1493 = v251;
    v251.f64[0] = *(float64_t *)(*(_QWORD *)(v215 + 48) + 816);
    if (v251.f64[0] != *(double *)__dst)
    {
      if (v251.f64[0] >= *(double *)__dst)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1972, (uint64_t)"iter->second->timestamp < imu_segment_start_iter->timestamp", 59, (uint64_t)"The state timstamp should be less than IMU start iter", 53, (void (*)(void **))sub_21023DDB0);
        v252 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v252 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v253 = qword_254A6DE40;
          for (mm = qword_254A6DE48; v253 != mm; v253 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v253)(*(_QWORD *)(v253 + 8), "iter->second->timestamp < imu_segment_start_iter->timestamp", 59, "The state timstamp should be less than IMU start iter", 53);
        }
        v255 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v255 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_1721;
        qword_254A6DE58(unk_254A6DE60, "iter->second->timestamp < imu_segment_start_iter->timestamp", 59, "The state timstamp should be less than IMU start iter", 53);
        v251.f64[0] = *(float64_t *)(*(_QWORD *)(v1414 + 48) + 816);
      }
      v256 = a11[9];
      v257 = v256[5];
      *(_QWORD *)v1518 = v256;
      v1518[8] = v257 == 0;
      *(_QWORD *)&v1518[16] = 0;
      *(_QWORD *)&v1518[24] = v256;
      v1519 = 1;
      v1520 = v257;
      sub_210122964((uint64_t)v1518, (uint64_t **)&v1488, (uint64_t)object, v251.f64[0]);
      *(void **)__dst = object[0];
      *(_OWORD *)&__dst[8] = *(_OWORD *)&object[1];
      *(void **)&__dst[24] = object[3];
      *(void **)&v251.f64[1] = object[5];
      v1493 = *(float64x2_t *)&object[4];
      v1494 = v1496;
      v248 = (_QWORD *)v1488;
      v249 = v1489;
    }
    v258 = a11[8];
    v259 = *((double *)v258 + 15);
    v260 = *((double *)v258 + 18);
    v261 = *((double *)v258 + 19);
    v263 = *((double *)v258 + 16);
    v262 = *((double *)v258 + 17);
    v264 = *((double *)v258 + 22);
    v265 = *((float64x2_t *)v258 + 10);
    v266 = *((double *)v258 + 25);
    v267 = *(float64x2_t *)(v258 + 23);
    v268 = *((double *)v258 + 28);
    v269 = *((float64x2_t *)v258 + 13);
    _Q20 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v265, *((double *)v258 + 14)), (float64x2_t)0, v267), (float64x2_t)0, v269);
    v271 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v265, v262), v267, v259), (float64x2_t)0, v269);
    _D23 = v264 * v262 + v266 * v259 + v268 * 0.0;
    v273 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v265, v260), v267, v261), v269, v263);
    v274 = v264 * v260 + v266 * v261 + v268 * v263;
    v275 = *((double *)v258 + 31);
    _Q19 = *(float64x2_t *)(v258 + 29);
    v277 = *((double *)v258 + 34);
    _Q17 = *((float64x2_t *)v258 + 16);
    v279 = *((double *)v258 + 37);
    _Q7 = *(float64x2_t *)(v258 + 35);
    v1422 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q19.f64[0]), v271, _Q19, 1), v273, v275);
    __asm { FMLA            D26, D23, V19.D[1] }
    v1421 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q17.f64[0]), v271, _Q17, 1), v273, v277);
    __asm { FMLA            D26, D23, V17.D[1] }
    _D11 = _D26 + v274 * v277;
    v1420 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q7.f64[0]), v271, _Q7, 1), v273, v279);
    __asm { FMLA            D20, D23, V7.D[1] }
    v285 = _Q20.f64[0] + v274 * v279;
    v286 = *((double *)v258 + 9);
    v271.f64[0] = (float64_t)v258[12];
    v287 = *((double *)v258 + 13);
    v288 = *((double *)v258 + 10);
    v273.f64[0] = (float64_t)v258[11];
    v289 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v265, *((double *)v258 + 8)), (float64x2_t)0, v267), (float64x2_t)0, v269);
    v290 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v265, v273.f64[0]), v267, v286), (float64x2_t)0, v269);
    _D21 = v264 * v273.f64[0] + v266 * v286 + v268 * 0.0;
    v292 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v265, v271.f64[0]), v267, v287), v269, v288);
    v293 = v264 * v271.f64[0] + v266 * v287 + v268 * v288;
    v1419 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v289, _Q19.f64[0]), v290, _Q19, 1), v292, v275);
    __asm { FMLA            D1, D21, V19.D[1] }
    v1418 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v289, _Q17.f64[0]), v290, _Q17, 1), v292, v277);
    __asm { FMLA            D1, D21, V17.D[1] }
    _D14 = _D1 + v293 * v277;
    v1417 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v289, _Q7.f64[0]), v290, _Q7, 1), v292, v279);
    __asm { FMLA            D1, D21, V7.D[1] }
    v298 = _D1 + v293 * v279;
    v299 = BYTE8(v1488);
    v300 = (double *)__dst;
    v1416 = v248;
    while (v1427)
    {
      if (v299)
        goto LABEL_463;
      if (v249)
      {
LABEL_452:
        v301 = v249 - v230;
        goto LABEL_460;
      }
      v301 = -v1423[5];
LABEL_460:
      if ((v301 & 0x8000000000000000) == 0)
        goto LABEL_463;
      v302 = *v248;
      v303 = (v249 + v248[3]) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v248[1] - *v248) >> 3));
      v304 = (double *)(*v248 + 56 * v303);
      v251.f64[0] = *v304 - *v300;
      if (v251.f64[0] >= 0.0001)
      {
        v305 = v300[3];
        _Q2 = *(float64x2_t *)(v300 + 1);
        __asm { FMLA            D4, D11, V2.D[1] }
        *(float64x2_t *)v1518 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1422, _Q2.f64[0]), v1421, _Q2, 1), v1420, v305);
        *(double *)&v1518[16] = _D4 + v285 * v305;
        v308 = v302 + 56 * v303;
        v309 = *(double *)(v308 + 24);
        _Q2 = *(float64x2_t *)(v308 + 8);
        __asm { FMLA            D4, D11, V2.D[1] }
        *(float64x2_t *)v1517 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1422, _Q2.f64[0]), v1421, _Q2, 1), v1420, v309);
        *(double *)&v1517[16] = _D4 + v285 * v309;
        v312 = v300[6];
        _Q2 = *(float64x2_t *)(v300 + 4);
        __asm { FMLA            D4, D14, V2.D[1] }
        *(float64x2_t *)v1516 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1419, _Q2.f64[0]), v1418, _Q2, 1), v1417, v312);
        *(double *)&v1516[16] = _D4 + v298 * v312;
        v315 = *(double *)(v308 + 48);
        _Q2 = *(float64x2_t *)(v308 + 32);
        __asm { FMLA            D4, D14, V2.D[1] }
        *(float64x2_t *)v1515 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1419, _Q2.f64[0]), v1418, _Q2, 1), v1417, v315);
        *(double *)&v1515[16] = _D4 + v298 * v315;
        *(_QWORD *)v1566 = v1518;
        *(_DWORD *)&v1566[8] = 0;
        v1490 = v1517;
        LODWORD(v1491) = 0;
        sub_20F81FFC8((uint64_t)&v1521[2], 1, (uint64_t)object, v251, *(double *)a11[8], *((double *)a11[8] + 2));
        v1521[2] = *(_OWORD *)object;
        v1522[0].i64[0] = (uint64_t)object[2];
        *(int8x16_t *)((char *)v1522 + 8) = *(int8x16_t *)&object[3];
        v1522[1].i64[1] = (uint64_t)object[5];
        v1523 = v1496;
        v1524 = v1497[0];
        *(_QWORD *)&v1525[4] = *(_QWORD *)v1498;
        v1525[2] = v1497[3];
        v1525[3] = v1497[4];
        v1525[0] = v1497[1];
        v1525[1] = v1497[2];
        *((_QWORD *)&v1525[8] + 1) = *(_QWORD *)&v1498[72];
        *(_OWORD *)((char *)&v1525[6] + 8) = *(_OWORD *)&v1498[40];
        *(_OWORD *)((char *)&v1525[7] + 8) = *(_OWORD *)&v1498[56];
        *(_OWORD *)((char *)&v1525[4] + 8) = *(_OWORD *)&v1498[8];
        *(_OWORD *)((char *)&v1525[5] + 8) = *(_OWORD *)&v1498[24];
        v1530 = *(_QWORD *)v1500;
        v1528 = *(_OWORD *)&v1498[112];
        v1529 = v1499;
        v1526 = *(_OWORD *)&v1498[80];
        v1527 = *(_OWORD *)&v1498[96];
        v1535 = *(_QWORD *)v1502;
        v1533 = *(_OWORD *)&v1500[40];
        v1534 = v1501;
        v1531 = *(_OWORD *)&v1500[8];
        v1532 = *(_OWORD *)&v1500[24];
        v1540 = *(_QWORD *)v1504;
        v1538 = *(_OWORD *)&v1502[40];
        v1539 = v1503;
        v1536 = *(_OWORD *)&v1502[8];
        v1537 = *(_OWORD *)&v1502[24];
        v1545 = *(_QWORD *)v1506;
        v1543 = *(_OWORD *)&v1504[40];
        v1544 = v1505;
        v1541 = *(_OWORD *)&v1504[8];
        v1542 = *(_OWORD *)&v1504[24];
        v1550 = *(_QWORD *)v1508;
        v1548 = *(_OWORD *)&v1506[40];
        v1549 = v1507;
        v1546 = *(_OWORD *)&v1506[8];
        v1547 = *(_OWORD *)&v1506[24];
        v1555 = *(_QWORD *)v1510;
        v1553 = *(_OWORD *)&v1508[40];
        v1554 = v1509;
        v1551 = *(_OWORD *)&v1508[8];
        v1552 = *(_OWORD *)&v1508[24];
        memcpy(v1556, &v1510[8], sizeof(v1556));
        v1557 = *(_OWORD *)&v1510[656];
        v1558 = *(_QWORD *)&v1510[672];
        v1559 = *(_OWORD *)&v1510[680];
        v1560 = *(_QWORD *)&v1510[696];
        memcpy(v1561, v1511, sizeof(v1561));
        memcpy(v1562, (char *)&v1511[40] + 8, sizeof(v1562));
        v300 = v304;
        v248 = v1416;
      }
      v299 = ++v249 == v248[5];
    }
    if (v230 || v299 || v249)
    {
      if (v230 || !v299)
        goto LABEL_452;
      v301 = v1423[5];
      goto LABEL_460;
    }
LABEL_463:
    v318 = *(double *)(*(_QWORD *)(v48 + 48) + 816) - *(double *)(*(_QWORD *)(v1414 + 48) + 816);
    _NF = v318 < *(double *)&v1561[27];
    if (v318 != *(double *)&v1561[27])
    {
      v320 = v318 - *(double *)&v1561[27];
      v321 = *(double *)&v1561[27] - v318;
      if (!_NF)
        v321 = v320;
      if (v321 > 0.0001)
      {
        v1373 = MEMORY[0x24BEDB858];
        v1374 = MEMORY[0x24BEDB858] + 104;
        *(_QWORD *)&v1497[4] = MEMORY[0x24BEDB858] + 104;
        v1375 = (void *)(MEMORY[0x24BEDB858] + 64);
        v1376 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
        v1377 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
        object[2] = (void *)(MEMORY[0x24BEDB858] + 64);
        object[0] = v1376;
        *(void **)((char *)object + *((_QWORD *)v1376 - 3)) = v1377;
        object[1] = 0;
        v1378 = (std::ios_base *)((char *)object + *((_QWORD *)object[0] - 3));
        std::ios_base::init(v1378, &object[3]);
        v1378[1].__vftable = 0;
        v1378[1].__fmtflags_ = -1;
        v1379 = MEMORY[0x24BEDB7F0];
        v1380 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
        object[2] = *(void **)(MEMORY[0x24BEDB7F0] + 32);
        *(void **)((char *)&object[2] + *((_QWORD *)object[2] - 3)) = v1380;
        object[0] = *(void **)(v1379 + 8);
        *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(v1379 + 48);
        *(_QWORD *)&v1497[4] = v1374;
        object[0] = (void *)(v1373 + 24);
        object[2] = v1375;
        std::streambuf::basic_streambuf();
        object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
        memset((char *)&v1497[1] + 8, 0, 32);
        DWORD2(v1497[3]) = 24;
        sub_20E86A980(&object[2], (uint64_t)"The IMU measurements between state time = ", 42);
        v1381 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v1381, (uint64_t)", next_state time = ", 20);
        v1382 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v1382, (uint64_t)" with gap = ", 12);
        v1383 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v1383, (uint64_t)"must be close to preintegration gap =", 37);
        v1384 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v1384, (uint64_t)" IMU Buffer info*****: \n", 24);
        v1385 = 0;
        v1386 = v1489;
        v1387 = v1488;
        v1485 = ~v1489 + v230;
        v1388 = (std::locale::id *)MEMORY[0x24BEDB350];
        if (!BYTE8(v1488))
          goto LABEL_1727;
        while (v1412 != v1411)
        {
          while (1)
          {
            sub_20E86A980(&object[2], (uint64_t)"IMU measurement number =", 24);
            v1389 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1389, (uint64_t)" Timestamp = ", 13);
            v1390 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1390, (uint64_t)" gyro0 = ", 9);
            v1391 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1391, (uint64_t)" gyro1 =", 8);
            v1392 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1392, (uint64_t)" gyro2 = ", 9);
            v1393 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1393, (uint64_t)" accel0 = ", 10);
            v1394 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1394, (uint64_t)" accel1 = ", 10);
            v1395 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v1395, (uint64_t)" accel2 = ", 10);
            v1396 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v1396 + *(_QWORD *)(*v1396 - 24)));
            v1397 = std::locale::use_facet((const std::locale *)v1518, v1388);
            ((void (*)(const std::locale::facet *, uint64_t))v1397->__vftable[2].~facet_0)(v1397, 10);
            std::locale::~locale((std::locale *)v1518);
            std::ostream::put();
            std::ostream::flush();
            if (++v1385 + v1386 == *(_QWORD *)(v1387 + 40))
              break;
LABEL_1727:
            if (v1412 != v1411 && v1485 == v1385)
              goto LABEL_1732;
          }
        }
LABEL_1732:
        if ((BYTE8(v1497[3]) & 0x10) != 0)
        {
          v1400 = *(_QWORD *)&v1497[3];
          if (*(_QWORD *)&v1497[3] < *((_QWORD *)&v1497[0] + 1))
          {
            *(_QWORD *)&v1497[3] = *((_QWORD *)&v1497[0] + 1);
            v1400 = *((_QWORD *)&v1497[0] + 1);
          }
          v1401 = (const void **)v1497;
        }
        else
        {
          if ((BYTE8(v1497[3]) & 8) == 0)
          {
            v1398 = 0;
            v1518[23] = 0;
            v1399 = v1518;
            goto LABEL_1748;
          }
          v1401 = (const void **)&object[5];
          v1400 = *((_QWORD *)&v1496 + 1);
        }
        v1402 = *v1401;
        v1398 = v1400 - (_QWORD)*v1401;
        if (v1398 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1398 >= 0x17)
        {
          v1403 = (v1398 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1398 | 7) != 0x17)
            v1403 = v1398 | 7;
          v1404 = v1403 + 1;
          v1399 = operator new(v1403 + 1);
          *(_QWORD *)&v1518[16] = v1404 | 0x8000000000000000;
          *(_QWORD *)v1518 = v1399;
          *(_QWORD *)&v1518[8] = v1398;
        }
        else
        {
          v1518[23] = v1400 - *(_BYTE *)v1401;
          v1399 = v1518;
          if (!v1398)
          {
LABEL_1748:
            v1399[v1398] = 0;
            if (v1518[23] >= 0)
              v1405 = v1518;
            else
              v1405 = *(const char **)v1518;
            v1406 = strlen(v1405);
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 2041, (uint64_t)"", 0, (uint64_t)v1405, v1406, (void (*)(void **))sub_21023DDB0);
            v1407 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v1407 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v1408 = qword_254A6DE40;
              for (nn = qword_254A6DE48; v1408 != nn; v1408 += 16)
                (*(void (**)(_QWORD, const char *, _QWORD, const char *, size_t))v1408)(*(_QWORD *)(v1408 + 8), "", 0, v1405, v1406);
            }
            v1410 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v1410 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (byte_254A6DE68)
              qword_254A6DE58(unk_254A6DE60, "", 0, v1405, v1406);
            abort();
          }
        }
        memmove(v1399, v1402, v1398);
        goto LABEL_1748;
      }
    }
    *(_OWORD *)object = *(_OWORD *)v1413;
    *(_OWORD *)&object[2] = v1521[0];
    *(_OWORD *)((char *)&object[3] + 4) = *(__int128 *)((char *)v1521 + 12);
    v1496 = v1521[2];
    *(_QWORD *)&v1497[0] = v1522[0].i64[0];
    *(int8x16_t *)((char *)v1497 + 8) = *(int8x16_t *)((char *)v1522 + 8);
    *((_QWORD *)&v1497[1] + 1) = v1522[1].i64[1];
    v1497[2] = v1523;
    v1497[3] = v1524;
    *(_QWORD *)&v1498[48] = *(_QWORD *)&v1525[4];
    *(_OWORD *)&v1498[16] = v1525[2];
    *(_OWORD *)&v1498[32] = v1525[3];
    v1497[4] = v1525[0];
    *(_OWORD *)v1498 = v1525[1];
    *(_QWORD *)&v1498[120] = *((_QWORD *)&v1525[8] + 1);
    *(_OWORD *)&v1498[88] = *(_OWORD *)((char *)&v1525[6] + 8);
    *(_OWORD *)&v1498[104] = *(_OWORD *)((char *)&v1525[7] + 8);
    *(_OWORD *)&v1498[56] = *(_OWORD *)((char *)&v1525[4] + 8);
    *(_OWORD *)&v1498[72] = *(_OWORD *)((char *)&v1525[5] + 8);
    *(_QWORD *)&v1500[48] = v1530;
    *(_OWORD *)&v1500[16] = v1528;
    *(_OWORD *)&v1500[32] = v1529;
    v1499 = v1526;
    *(_OWORD *)v1500 = v1527;
    *(_QWORD *)&v1502[48] = v1535;
    *(_OWORD *)&v1502[16] = v1533;
    *(_OWORD *)&v1502[32] = v1534;
    v1501 = v1531;
    *(_OWORD *)v1502 = v1532;
    *(_QWORD *)&v1504[48] = v1540;
    *(_OWORD *)&v1504[16] = v1538;
    *(_OWORD *)&v1504[32] = v1539;
    v1503 = v1536;
    *(_OWORD *)v1504 = v1537;
    *(_QWORD *)&v1506[48] = v1545;
    *(_OWORD *)&v1506[16] = v1543;
    *(_OWORD *)&v1506[32] = v1544;
    v1505 = v1541;
    *(_OWORD *)v1506 = v1542;
    *(_QWORD *)&v1508[48] = v1550;
    *(_OWORD *)&v1508[16] = v1548;
    *(_OWORD *)&v1508[32] = v1549;
    v1507 = v1546;
    *(_OWORD *)v1508 = v1547;
    *(_QWORD *)&v1510[48] = v1555;
    *(_OWORD *)&v1510[16] = v1553;
    *(_OWORD *)&v1510[32] = v1554;
    v1509 = v1551;
    *(_OWORD *)v1510 = v1552;
    memcpy(&v1510[56], v1556, 0x288uLL);
    v1511[0] = v1557;
    *(_QWORD *)&v1511[1] = v1558;
    *(_OWORD *)((char *)&v1511[1] + 8) = v1559;
    *((_QWORD *)&v1511[2] + 1) = v1560;
    memcpy(&v1511[3], v1561, 0x288uLL);
    memcpy((char *)&v1511[43] + 8, v1562, 0x288uLL);
    v1512 = v1563;
    v1513 = v1564;
    v1514 = v1565;
    v323 = (char *)a11[11];
    v322 = (char *)a11[12];
    if (v323 >= v322)
    {
      v343 = *v1415;
      v344 = 0x80BFA02FE80BFA03 * ((v323 - *v1415) >> 4);
      v345 = v344 + 1;
      if (v344 + 1 > 0x17F405FD017F40)
        sub_20E92CED8();
      v346 = 0x80BFA02FE80BFA03 * ((v322 - v343) >> 4);
      if (2 * v346 > v345)
        v345 = 2 * v346;
      if (v346 >= 0xBFA02FE80BFA0)
        v347 = 0x17F405FD017F40;
      else
        v347 = v345;
      if (v347)
      {
        if (v347 > 0x17F405FD017F40)
          sub_20E877A38();
        v348 = (char *)operator new(2736 * v347);
      }
      else
      {
        v348 = 0;
      }
      v349 = v1521[0];
      v1428 = v348;
      v350 = &v348[2736 * v344];
      *(_OWORD *)v350 = *(_OWORD *)object;
      *((_OWORD *)v350 + 1) = v349;
      *(_OWORD *)(v350 + 28) = *(__int128 *)((char *)v1521 + 12);
      *((_OWORD *)v350 + 3) = v1521[2];
      *((_QWORD *)v350 + 8) = v1522[0].i64[0];
      *(int8x16_t *)(v350 + 72) = *(int8x16_t *)((char *)v1522 + 8);
      *((_QWORD *)v350 + 11) = v1522[1].i64[1];
      v351 = v1524;
      *((_OWORD *)v350 + 6) = v1523;
      *((_OWORD *)v350 + 7) = v351;
      *((_QWORD *)v350 + 24) = *(_QWORD *)&v1525[4];
      v352 = v1525[3];
      *((_OWORD *)v350 + 10) = v1525[2];
      *((_OWORD *)v350 + 11) = v352;
      v353 = v1525[1];
      *((_OWORD *)v350 + 8) = v1525[0];
      *((_OWORD *)v350 + 9) = v353;
      v354 = *(_OWORD *)((char *)&v1525[5] + 8);
      *(_OWORD *)(v350 + 200) = *(_OWORD *)((char *)&v1525[4] + 8);
      *((_QWORD *)v350 + 33) = *((_QWORD *)&v1525[8] + 1);
      v355 = *(_OWORD *)((char *)&v1525[6] + 8);
      *(_OWORD *)(v350 + 248) = *(_OWORD *)((char *)&v1525[7] + 8);
      *(_OWORD *)(v350 + 232) = v355;
      *(_OWORD *)(v350 + 216) = v354;
      v356 = v1526;
      v357 = v1527;
      v358 = v1528;
      v359 = v1529;
      *((_QWORD *)v350 + 42) = v1530;
      *((_OWORD *)v350 + 19) = v358;
      *((_OWORD *)v350 + 20) = v359;
      *((_OWORD *)v350 + 17) = v356;
      *((_OWORD *)v350 + 18) = v357;
      v360 = v1531;
      v361 = v1532;
      v362 = v1533;
      v363 = v1534;
      *((_QWORD *)v350 + 51) = v1535;
      *(_OWORD *)(v350 + 376) = v362;
      *(_OWORD *)(v350 + 392) = v363;
      *(_OWORD *)(v350 + 344) = v360;
      *(_OWORD *)(v350 + 360) = v361;
      v364 = v1536;
      v365 = v1537;
      v366 = v1538;
      v367 = v1539;
      *((_QWORD *)v350 + 60) = v1540;
      *((_OWORD *)v350 + 28) = v366;
      *((_OWORD *)v350 + 29) = v367;
      *((_OWORD *)v350 + 26) = v364;
      *((_OWORD *)v350 + 27) = v365;
      v368 = v1541;
      v369 = v1542;
      v370 = v1543;
      v371 = v1544;
      *((_QWORD *)v350 + 69) = v1545;
      *(_OWORD *)(v350 + 520) = v370;
      *(_OWORD *)(v350 + 536) = v371;
      *(_OWORD *)(v350 + 488) = v368;
      *(_OWORD *)(v350 + 504) = v369;
      v372 = v1546;
      v373 = v1547;
      v374 = v1548;
      v375 = v1549;
      *((_QWORD *)v350 + 78) = v1550;
      *((_OWORD *)v350 + 37) = v374;
      *((_OWORD *)v350 + 38) = v375;
      *((_OWORD *)v350 + 35) = v372;
      *((_OWORD *)v350 + 36) = v373;
      v376 = v1551;
      v377 = v1552;
      v378 = v1553;
      v379 = v1554;
      *((_QWORD *)v350 + 87) = v1555;
      *(_OWORD *)(v350 + 664) = v378;
      *(_OWORD *)(v350 + 680) = v379;
      *(_OWORD *)(v350 + 632) = v376;
      *(_OWORD *)(v350 + 648) = v377;
      memcpy(v350 + 704, v1556, 0x288uLL);
      *(_OWORD *)(v350 + 1352) = v1557;
      *((_QWORD *)v350 + 171) = v1558;
      *((_OWORD *)v350 + 86) = v1559;
      *((_QWORD *)v350 + 174) = v1560;
      memcpy(v350 + 1400, v1561, 0x288uLL);
      memcpy(v350 + 2048, v1562, 0x288uLL);
      *(_OWORD *)(v350 + 2696) = v1563;
      *((_QWORD *)v350 + 339) = v1564;
      v27 = v1565;
      *((float32x4_t *)v350 + 170) = v1565;
      if (v323 == v343)
      {
        v380 = v350;
      }
      else
      {
        v1425 = v347;
        v380 = v350;
        do
        {
          v381 = v380;
          v380 -= 2736;
          *(_OWORD *)v380 = *((_OWORD *)v323 - 171);
          v382 = v381 - 170;
          v383 = *((_OWORD *)v323 - 170);
          *(_OWORD *)((char *)v382 + 12) = *(_OWORD *)(v323 - 2708);
          *v382 = v383;
          v384 = v381 - 168;
          v385 = *((_OWORD *)v323 - 168);
          *((_QWORD *)v384 + 2) = *((_QWORD *)v323 - 334);
          *v384 = v385;
          v386 = (char *)v381 - 2664;
          v387 = *(_OWORD *)(v323 - 2664);
          *((_QWORD *)v386 + 2) = *((_QWORD *)v323 - 331);
          *(_OWORD *)v386 = v387;
          v388 = v381 - 165;
          v389 = *((_OWORD *)v323 - 164);
          *v388 = *((_OWORD *)v323 - 165);
          v388[1] = v389;
          v390 = v381 - 163;
          v392 = *((_OWORD *)v323 - 161);
          v391 = *((_OWORD *)v323 - 160);
          v393 = *((_OWORD *)v323 - 162);
          *((_QWORD *)v390 + 8) = *((_QWORD *)v323 - 318);
          v390[2] = v392;
          v390[3] = v391;
          v390[1] = v393;
          *v390 = *((_OWORD *)v323 - 163);
          v394 = (char *)v381 - 2536;
          *(_OWORD *)v394 = *(_OWORD *)(v323 - 2536);
          v395 = *(_OWORD *)(v323 - 2520);
          v396 = *(_OWORD *)(v323 - 2504);
          v397 = *(_OWORD *)(v323 - 2488);
          *((_QWORD *)v394 + 8) = *((_QWORD *)v323 - 309);
          *((_OWORD *)v394 + 2) = v396;
          *((_OWORD *)v394 + 3) = v397;
          *((_OWORD *)v394 + 1) = v395;
          v398 = v381 - 154;
          *v398 = *((_OWORD *)v323 - 154);
          v399 = *((_OWORD *)v323 - 153);
          v400 = *((_OWORD *)v323 - 152);
          v401 = *((_OWORD *)v323 - 151);
          *((_QWORD *)v398 + 8) = *((_QWORD *)v323 - 300);
          v398[2] = v400;
          v398[3] = v401;
          v398[1] = v399;
          v402 = (char *)v381 - 2392;
          *(_OWORD *)v402 = *(_OWORD *)(v323 - 2392);
          v403 = *(_OWORD *)(v323 - 2376);
          v404 = *(_OWORD *)(v323 - 2360);
          v405 = *(_OWORD *)(v323 - 2344);
          *((_QWORD *)v402 + 8) = *((_QWORD *)v323 - 291);
          *((_OWORD *)v402 + 2) = v404;
          *((_OWORD *)v402 + 3) = v405;
          *((_OWORD *)v402 + 1) = v403;
          v406 = v381 - 145;
          *v406 = *((_OWORD *)v323 - 145);
          v407 = *((_OWORD *)v323 - 144);
          v408 = *((_OWORD *)v323 - 143);
          v409 = *((_OWORD *)v323 - 142);
          *((_QWORD *)v406 + 8) = *((_QWORD *)v323 - 282);
          v406[2] = v408;
          v406[3] = v409;
          v406[1] = v407;
          v410 = (char *)v381 - 2248;
          *(_OWORD *)v410 = *(_OWORD *)(v323 - 2248);
          v411 = *(_OWORD *)(v323 - 2232);
          v412 = *(_OWORD *)(v323 - 2216);
          v413 = *(_OWORD *)(v323 - 2200);
          *((_QWORD *)v410 + 8) = *((_QWORD *)v323 - 273);
          *((_OWORD *)v410 + 2) = v412;
          *((_OWORD *)v410 + 3) = v413;
          *((_OWORD *)v410 + 1) = v411;
          v414 = v381 - 136;
          *v414 = *((_OWORD *)v323 - 136);
          v415 = *((_OWORD *)v323 - 135);
          v416 = *((_OWORD *)v323 - 134);
          v417 = *((_OWORD *)v323 - 133);
          *((_QWORD *)v414 + 8) = *((_QWORD *)v323 - 264);
          v414[2] = v416;
          v414[3] = v417;
          v414[1] = v415;
          v418 = (char *)v381 - 2104;
          *(_OWORD *)v418 = *(_OWORD *)(v323 - 2104);
          v419 = *(_OWORD *)(v323 - 2088);
          v420 = *(_OWORD *)(v323 - 2072);
          v421 = *(_OWORD *)(v323 - 2056);
          *((_QWORD *)v418 + 8) = *((_QWORD *)v323 - 255);
          *((_OWORD *)v418 + 2) = v420;
          *((_OWORD *)v418 + 3) = v421;
          *((_OWORD *)v418 + 1) = v419;
          memcpy(v381 - 127, v323 - 2032, 0x288uLL);
          v422 = (char *)v381 - 1384;
          v423 = *(_OWORD *)(v323 - 1384);
          *((_QWORD *)v422 + 2) = *((_QWORD *)v323 - 171);
          *(_OWORD *)v422 = v423;
          v424 = v381 - 85;
          v425 = *((_QWORD *)v323 - 168);
          *v424 = *((_OWORD *)v323 - 85);
          *((_QWORD *)v424 + 2) = v425;
          memcpy((char *)v381 - 1336, v323 - 1336, 0x288uLL);
          memcpy(v381 - 43, v323 - 688, 0x288uLL);
          v426 = *(_OWORD *)(v323 - 40);
          *((_QWORD *)v381 - 3) = *((_QWORD *)v323 - 3);
          *(_OWORD *)((char *)v381 - 40) = v426;
          v27 = *((float32x4_t *)v323 - 1);
          *(v381 - 1) = v27;
          v323 -= 2736;
        }
        while (v323 != v343);
        v323 = *v1415;
        v347 = v1425;
      }
      v342 = v350 + 2736;
      a11[10] = v380;
      a11[11] = v350 + 2736;
      a11[12] = &v1428[2736 * v347];
      if (v323)
        operator delete(v323);
    }
    else
    {
      *(_OWORD *)v323 = *(_OWORD *)object;
      *((_OWORD *)v323 + 1) = *(_OWORD *)&object[2];
      *(_OWORD *)(v323 + 28) = *(_OWORD *)((char *)&object[3] + 4);
      *((_OWORD *)v323 + 3) = v1496;
      *((_QWORD *)v323 + 8) = *(_QWORD *)&v1497[0];
      *(_OWORD *)(v323 + 72) = *(_OWORD *)((char *)v1497 + 8);
      *((_QWORD *)v323 + 11) = *((_QWORD *)&v1497[1] + 1);
      *((_OWORD *)v323 + 7) = v1497[3];
      *((_OWORD *)v323 + 6) = v1497[2];
      *((_OWORD *)v323 + 8) = v1497[4];
      *((_QWORD *)v323 + 24) = *(_QWORD *)&v1498[48];
      *((_OWORD *)v323 + 11) = *(_OWORD *)&v1498[32];
      *((_OWORD *)v323 + 10) = *(_OWORD *)&v1498[16];
      *((_OWORD *)v323 + 9) = *(_OWORD *)v1498;
      *(_OWORD *)(v323 + 200) = *(_OWORD *)&v1498[56];
      *((_QWORD *)v323 + 33) = *(_QWORD *)&v1498[120];
      *(_OWORD *)(v323 + 248) = *(_OWORD *)&v1498[104];
      *(_OWORD *)(v323 + 232) = *(_OWORD *)&v1498[88];
      *(_OWORD *)(v323 + 216) = *(_OWORD *)&v1498[72];
      *((_OWORD *)v323 + 17) = v1499;
      v324 = *(_OWORD *)v1500;
      v325 = *(_OWORD *)&v1500[16];
      v326 = *(_OWORD *)&v1500[32];
      *((_QWORD *)v323 + 42) = *(_QWORD *)&v1500[48];
      *((_OWORD *)v323 + 19) = v325;
      *((_OWORD *)v323 + 20) = v326;
      *((_OWORD *)v323 + 18) = v324;
      *(_OWORD *)(v323 + 344) = v1501;
      v327 = *(_OWORD *)v1502;
      v328 = *(_OWORD *)&v1502[16];
      v329 = *(_OWORD *)&v1502[32];
      *((_QWORD *)v323 + 51) = *(_QWORD *)&v1502[48];
      *(_OWORD *)(v323 + 376) = v328;
      *(_OWORD *)(v323 + 392) = v329;
      *(_OWORD *)(v323 + 360) = v327;
      *((_OWORD *)v323 + 26) = v1503;
      v330 = *(_OWORD *)v1504;
      v331 = *(_OWORD *)&v1504[16];
      v332 = *(_OWORD *)&v1504[32];
      *((_QWORD *)v323 + 60) = *(_QWORD *)&v1504[48];
      *((_OWORD *)v323 + 28) = v331;
      *((_OWORD *)v323 + 29) = v332;
      *((_OWORD *)v323 + 27) = v330;
      *(_OWORD *)(v323 + 488) = v1505;
      v333 = *(_OWORD *)v1506;
      v334 = *(_OWORD *)&v1506[16];
      v335 = *(_OWORD *)&v1506[32];
      *((_QWORD *)v323 + 69) = *(_QWORD *)&v1506[48];
      *(_OWORD *)(v323 + 520) = v334;
      *(_OWORD *)(v323 + 536) = v335;
      *(_OWORD *)(v323 + 504) = v333;
      *((_OWORD *)v323 + 35) = v1507;
      v336 = *(_OWORD *)v1508;
      v337 = *(_OWORD *)&v1508[16];
      v338 = *(_OWORD *)&v1508[32];
      *((_QWORD *)v323 + 78) = *(_QWORD *)&v1508[48];
      *((_OWORD *)v323 + 37) = v337;
      *((_OWORD *)v323 + 38) = v338;
      *((_OWORD *)v323 + 36) = v336;
      *(_OWORD *)(v323 + 632) = v1509;
      v339 = *(_OWORD *)v1510;
      v340 = *(_OWORD *)&v1510[16];
      v341 = *(_OWORD *)&v1510[32];
      *((_QWORD *)v323 + 87) = *(_QWORD *)&v1510[48];
      *(_OWORD *)(v323 + 664) = v340;
      *(_OWORD *)(v323 + 680) = v341;
      *(_OWORD *)(v323 + 648) = v339;
      memcpy(v323 + 704, &v1510[56], 0x288uLL);
      *(_OWORD *)(v323 + 1352) = v1511[0];
      *((_QWORD *)v323 + 171) = *(_QWORD *)&v1511[1];
      *((_OWORD *)v323 + 86) = *(_OWORD *)((char *)&v1511[1] + 8);
      *((_QWORD *)v323 + 174) = *((_QWORD *)&v1511[2] + 1);
      memcpy(v323 + 1400, &v1511[3], 0x288uLL);
      memcpy(v323 + 2048, (char *)&v1511[43] + 8, 0x288uLL);
      *(_OWORD *)(v323 + 2696) = v1512;
      *((_QWORD *)v323 + 339) = v1513;
      v27 = v1514;
      *((float32x4_t *)v323 + 170) = v1514;
      v342 = v323 + 2736;
    }
    a11[11] = v342;
LABEL_487:
    v428 = (char *)a11[10];
    v427 = (char *)a11[11];
    if (v427 != v428)
    {
      v429 = 0x80BFA02FE80BFA03 * ((v427 - v428) >> 4);
      do
      {
        v430 = v429 >> 1;
        v431 = &v428[2736 * (v429 >> 1)];
        if (!*(_QWORD *)v431 && *((_DWORD *)v431 + 2) < v12)
        {
          v428 = v431 + 2736;
          v430 = v429 + ~v430;
        }
        v429 = v430;
      }
      while (v430);
    }
    if (v428 != v427 && !*(_QWORD *)v428 && *((_DWORD *)v428 + 2) == (_DWORD)v12)
    {
      bzero(a12, 0x568uLL);
      *((_BYTE *)a12 + 1384) = 1;
      v432 = *((_OWORD *)v428 + 3);
      a12[6] = *((_QWORD *)v428 + 8);
      *((_OWORD *)a12 + 2) = v432;
      v433 = *(_OWORD *)(v428 + 72);
      a12[9] = *((_QWORD *)v428 + 11);
      *(_OWORD *)(a12 + 7) = v433;
      v434 = *((_OWORD *)v428 + 7);
      *((_OWORD *)a12 + 5) = *((_OWORD *)v428 + 6);
      *((_OWORD *)a12 + 6) = v434;
      v436 = *((_OWORD *)v428 + 10);
      v435 = *((_OWORD *)v428 + 11);
      v437 = *((_OWORD *)v428 + 9);
      a12[22] = *((_QWORD *)v428 + 24);
      *((_OWORD *)a12 + 9) = v436;
      *((_OWORD *)a12 + 10) = v435;
      *((_OWORD *)a12 + 8) = v437;
      *((_OWORD *)a12 + 7) = *((_OWORD *)v428 + 8);
      v438 = *(_OWORD *)(v428 + 232);
      v439 = *(_OWORD *)(v428 + 248);
      v440 = *(_OWORD *)(v428 + 216);
      a12[31] = *((_QWORD *)v428 + 33);
      *(_OWORD *)(a12 + 27) = v438;
      *(_OWORD *)(a12 + 29) = v439;
      *(_OWORD *)(a12 + 25) = v440;
      *(_OWORD *)(a12 + 23) = *(_OWORD *)(v428 + 200);
      *((_OWORD *)a12 + 16) = *((_OWORD *)v428 + 17);
      v441 = *((_OWORD *)v428 + 18);
      v442 = *((_OWORD *)v428 + 19);
      v443 = *((_OWORD *)v428 + 20);
      a12[40] = *((_QWORD *)v428 + 42);
      *((_OWORD *)a12 + 18) = v442;
      *((_OWORD *)a12 + 19) = v443;
      *((_OWORD *)a12 + 17) = v441;
      *(_OWORD *)(a12 + 41) = *(_OWORD *)(v428 + 344);
      v444 = *(_OWORD *)(v428 + 360);
      v445 = *(_OWORD *)(v428 + 376);
      v446 = *(_OWORD *)(v428 + 392);
      a12[49] = *((_QWORD *)v428 + 51);
      *(_OWORD *)(a12 + 45) = v445;
      *(_OWORD *)(a12 + 47) = v446;
      *(_OWORD *)(a12 + 43) = v444;
      *((_OWORD *)a12 + 25) = *((_OWORD *)v428 + 26);
      v447 = *((_OWORD *)v428 + 27);
      v448 = *((_OWORD *)v428 + 28);
      v449 = *((_OWORD *)v428 + 29);
      a12[58] = *((_QWORD *)v428 + 60);
      *((_OWORD *)a12 + 27) = v448;
      *((_OWORD *)a12 + 28) = v449;
      *((_OWORD *)a12 + 26) = v447;
      *(_OWORD *)(a12 + 59) = *(_OWORD *)(v428 + 488);
      v450 = *(_OWORD *)(v428 + 504);
      v451 = *(_OWORD *)(v428 + 520);
      v452 = *(_OWORD *)(v428 + 536);
      a12[67] = *((_QWORD *)v428 + 69);
      *(_OWORD *)(a12 + 63) = v451;
      *(_OWORD *)(a12 + 65) = v452;
      *(_OWORD *)(a12 + 61) = v450;
      *((_OWORD *)a12 + 34) = *((_OWORD *)v428 + 35);
      v453 = *((_OWORD *)v428 + 36);
      v454 = *((_OWORD *)v428 + 37);
      v455 = *((_OWORD *)v428 + 38);
      a12[76] = *((_QWORD *)v428 + 78);
      *((_OWORD *)a12 + 36) = v454;
      *((_OWORD *)a12 + 37) = v455;
      *((_OWORD *)a12 + 35) = v453;
      *(_OWORD *)(a12 + 77) = *(_OWORD *)(v428 + 632);
      v456 = *(_OWORD *)(v428 + 648);
      v457 = *(_OWORD *)(v428 + 664);
      v458 = *(_OWORD *)(v428 + 680);
      a12[85] = *((_QWORD *)v428 + 87);
      *(_OWORD *)(a12 + 81) = v457;
      *(_OWORD *)(a12 + 83) = v458;
      *(_OWORD *)(a12 + 79) = v456;
      memcpy(a12 + 86, v428 + 704, 0x288uLL);
      v459 = *(_OWORD *)(v428 + 1352);
      a12[169] = *((_QWORD *)v428 + 171);
      *(_OWORD *)(a12 + 167) = v459;
      v460 = *((_QWORD *)v428 + 174);
      v27 = *((float32x4_t *)v428 + 86);
      *((float32x4_t *)a12 + 85) = v27;
      a12[172] = v460;
      LODWORD(v460) = *((_DWORD *)v428 + 6);
      *a12 = *((_QWORD *)v428 + 2);
      *((_DWORD *)a12 + 2) = v460;
      LODWORD(v460) = *((_DWORD *)v428 + 10);
      a12[2] = *((_QWORD *)v428 + 4);
      *((_DWORD *)a12 + 6) = v460;
    }
LABEL_497:
    v461 = v1445[59];
    v462 = (unint64_t)(v1445[60] - v461) >> 2;
    while (2)
    {
      LODWORD(v462) = v462 - 1;
      if ((v462 & 0x80000000) != 0)
      {
        v30 = v1467;
        goto LABEL_11;
      }
      if (*(_DWORD *)(v461 + 4 * v462) != (_DWORD)v12)
        continue;
      break;
    }
    if (v1430 < v1433)
    {
      *(_DWORD *)v1430 = v462;
      v31 = (uint64_t)(v1430 + 4);
      v32 = v1467;
      v29 = v1471;
      goto LABEL_8;
    }
    v12 = (uint64_t)v1471;
    v463 = (v1430 - v1471) >> 2;
    v464 = v463 + 1;
    if ((unint64_t)(v463 + 1) >> 62)
      sub_20EABADD4();
    if ((v1433 - v1471) >> 1 > v464)
      v464 = (v1433 - v1471) >> 1;
    if ((unint64_t)(v1433 - v1471) >= 0x7FFFFFFFFFFFFFFCLL)
      v465 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v465 = v464;
    if (!v465)
    {
      v466 = 0;
      v467 = v1430;
      v29 = (char *)(4 * v463);
      *(_DWORD *)(4 * v463) = v462;
      v31 = 4 * v463 + 4;
      v468 = v1430 - v1471;
      if (v1430 != v1471)
        goto LABEL_510;
LABEL_516:
      v32 = v1467;
      v1486 = v29;
      v1433 = &v466[4 * v465];
      if (!v1471)
        goto LABEL_8;
      goto LABEL_517;
    }
    if (v465 >> 62)
      sub_20E877A38();
    v466 = operator new(4 * v465);
    v467 = v1430;
    v29 = &v466[4 * v463];
    *(_DWORD *)v29 = v462;
    v31 = (uint64_t)(v29 + 4);
    v468 = v1430 - v1471;
    if (v1430 == v1471)
      goto LABEL_516;
LABEL_510:
    v469 = v468 - 4;
    v32 = v1467;
    if (v469 < 0xBC)
    {
      v470 = v467;
      goto LABEL_512;
    }
    v472 = v467 - 4;
    v473 = (v472 - v1471) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v466[v1430 - v1471 - 4 - v473] > &v466[v1430 - v1471 - 4])
    {
      v470 = v1430;
      goto LABEL_512;
    }
    if (&v472[-v473] > v472)
    {
      v470 = v1430;
      goto LABEL_512;
    }
    if ((unint64_t)(v1471 - v466) < 0x20)
    {
      v470 = v1430;
      goto LABEL_512;
    }
    v474 = (v469 >> 2) + 1;
    v475 = 4 * (v474 & 0x7FFFFFFFFFFFFFF8);
    v470 = &v1430[-v475];
    v29 -= v475;
    v476 = (float32x4_t *)&v466[4 * v463 - 16];
    v477 = (float32x4_t *)(v1430 - 16);
    v478 = v474 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *v477;
      v476[-1] = v477[-1];
      *v476 = v27;
      v476 -= 2;
      v477 -= 2;
      v478 -= 8;
    }
    while (v478);
    if (v474 != (v474 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_512:
        v471 = *((_DWORD *)v470 - 1);
        v470 -= 4;
        *((_DWORD *)v29 - 1) = v471;
        v29 -= 4;
      }
      while (v470 != v1471);
    }
    v1486 = v29;
    v1433 = &v466[4 * v465];
    if (v1471)
LABEL_517:
      operator delete(v1471);
LABEL_8:
    v1430 = (char *)v31;
    v30 = v32 + 1;
  }
  while (v30 != v1455);
LABEL_545:
  v479 = *(_QWORD *)(a9 + 16);
  if (__CFADD__(v479, *(_QWORD *)(a9 + 32)))
  {
    if (v479 == 7)
    {
      v480 = 15;
    }
    else
    {
      v481 = (v479 - 1) / 7 + v479;
      _ZF = v481 == 0;
      v482 = 0xFFFFFFFFFFFFFFFFLL >> __clz(v481);
      if (_ZF)
        v480 = 1;
      else
        v480 = v482;
    }
    sub_20FB90FD8((char **)a9, (char *)v480);
  }
  v483 = *(_QWORD *)(a9 + 24);
  if (v483 < 0x80)
  {
    if (v483)
    {
      *(_QWORD *)(a9 + 16) = 0;
      v484 = *(char **)a9;
      memset(*(void **)a9, 128, v483 + 8);
      v484[v483] = -1;
      v485 = *(_QWORD *)(a9 + 24);
      v486 = v485 - (v485 >> 3);
      _ZF = v485 == 7;
      v487 = 6;
      if (!_ZF)
        v487 = v486;
      *(_QWORD *)(a9 + 32) = v487 - *(_QWORD *)(a9 + 16);
    }
  }
  else
  {
    operator delete(*(void **)a9);
    *(_QWORD *)a9 = &unk_2102DAFF0;
    v27 = 0uLL;
    *(_OWORD *)(a9 + 8) = 0u;
    *(_OWORD *)(a9 + 24) = 0u;
  }
  v488 = *(_QWORD *)(a10 + 16);
  if (__CFADD__(v488, *(_QWORD *)(a10 + 32)))
  {
    if (v488 == 7)
    {
      v489 = 15;
    }
    else
    {
      v490 = (v488 - 1) / 7 + v488;
      _ZF = v490 == 0;
      v491 = 0xFFFFFFFFFFFFFFFFLL >> __clz(v490);
      if (_ZF)
        v489 = 1;
      else
        v489 = v491;
    }
    sub_20FB90FD8((char **)a10, (char *)v489);
  }
  v492 = *(_QWORD *)(a10 + 24);
  if (v492 < 0x80)
  {
    if (v492)
    {
      *(_QWORD *)(a10 + 16) = 0;
      v493 = *(char **)a10;
      memset(*(void **)a10, 128, v492 + 8);
      v493[v492] = -1;
      v494 = *(_QWORD *)(a10 + 24);
      v495 = v494 - (v494 >> 3);
      _ZF = v494 == 7;
      v496 = 6;
      if (!_ZF)
        v496 = v495;
      *(_QWORD *)(a10 + 32) = v496 - *(_QWORD *)(a10 + 16);
    }
  }
  else
  {
    operator delete(*(void **)a10);
    *(_QWORD *)a10 = &unk_2102DAFF0;
    v27 = 0uLL;
    *(_OWORD *)(a10 + 8) = 0u;
    *(_OWORD *)(a10 + 24) = 0u;
  }
  v498 = v1445[6];
  v497 = v1445[7];
  if (v497 != v498)
  {
    v499 = 0;
    v500 = 0;
    v12 = 24;
    do
    {
      v501 = *(_QWORD *)(v498 + 24 * v499 + 8) - *(_QWORD *)(v498 + 24 * v499);
      if (v501)
      {
        v1478 = v500;
        v502 = 0;
        v503 = 0xFC0FC0FC0FC0FC1 * (v501 >> 3);
        do
        {
          v504 = *(_QWORD *)(v1445[6] + 24 * v499) + 520 * v502;
          v505 = *(unsigned int **)(v504 + 200);
          v506 = *(unsigned int **)(v504 + 208);
          while (v505 != v506)
          {
            v510 = 0;
            v512 = *v505;
            _X9 = *(char **)a9;
            __asm { PRFM            #4, [X9] }
            v515 = (0x9DDFEA08EB382D69 * v512 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v512
                                                                          + 0x376ADF16980614E5) >> 32);
            v516 = *(_QWORD *)(a9 + 24);
            for (i1 = (v515 >> 7) ^ 0x13701D; ; i1 = v510 + v507)
            {
              v507 = i1 & v516;
              v508 = *(_QWORD *)&_X9[v507];
              v509 = ((v508 ^ (0x101010101010101 * (v515 & 0x7F))) - 0x101010101010101) & ~(v508 ^ (0x101010101010101 * (v515 & 0x7F))) & 0x8080808080808080;
              if (v509)
                break;
LABEL_584:
              if ((v508 & (~v508 << 6) & 0x8080808080808080) != 0)
              {
                *(_DWORD *)(*(_QWORD *)(a9 + 8) + 4 * sub_20FB91150((uint64_t *)a9, v515)) = v512;
                goto LABEL_587;
              }
              v510 += 8;
            }
            while (*(_DWORD *)(*(_QWORD *)(a9 + 8) + 4 * ((v507 + (__clz(__rbit64(v509)) >> 3)) & v516)) != (_DWORD)v512)
            {
              v509 &= v509 - 1;
              if (!v509)
                goto LABEL_584;
            }
LABEL_587:
            ++v505;
          }
          v12 = 24;
          v517 = *(_QWORD *)(v1445[9] + 24 * v499) + 520 * v502;
          v518 = *(unsigned int **)(v517 + 200);
          v519 = *(unsigned int **)(v517 + 208);
          while (v518 != v519)
          {
            v523 = 0;
            v525 = *v518;
            _X9 = *(char **)a10;
            __asm { PRFM            #4, [X9] }
            v528 = (0x9DDFEA08EB382D69 * v525 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v525
                                                                          + 0x376ADF16980614E5) >> 32);
            v529 = *(_QWORD *)(a10 + 24);
            for (i2 = (v528 >> 7) ^ 0x13701D; ; i2 = v523 + v520)
            {
              v520 = i2 & v529;
              v521 = *(_QWORD *)&_X9[v520];
              v522 = ((v521 ^ (0x101010101010101 * (v528 & 0x7F))) - 0x101010101010101) & ~(v521 ^ (0x101010101010101 * (v528 & 0x7F))) & 0x8080808080808080;
              if (v522)
                break;
LABEL_594:
              if ((v521 & (~v521 << 6) & 0x8080808080808080) != 0)
              {
                *(_DWORD *)(*(_QWORD *)(a10 + 8) + 4 * sub_20FB91150((uint64_t *)a10, v528)) = v525;
                goto LABEL_597;
              }
              v523 += 8;
            }
            while (*(_DWORD *)(*(_QWORD *)(a10 + 8) + 4 * ((v520 + (__clz(__rbit64(v522)) >> 3)) & v529)) != (_DWORD)v525)
            {
              v522 &= v522 - 1;
              if (!v522)
                goto LABEL_594;
            }
LABEL_597:
            ++v518;
          }
          ++v502;
        }
        while (v502 != v503);
        v498 = v1445[6];
        v497 = v1445[7];
        v500 = v1478;
      }
      v499 = ++v500;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v497 - v498) >> 3) > v500);
  }
  v530 = (char **)a11[2];
  v531 = *v530;
  v532 = (uint64_t)v530[1];
  v533 = **v530;
  if (v533 <= -2)
  {
    do
    {
      v534 = (__clz(__rbit64(((*(_QWORD *)v531 >> 7) & ~*(_QWORD *)v531 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v531 += v534;
      v532 += 32 * v534;
      v533 = *v531;
    }
    while (v533 < -1);
  }
  if (v533 != 255)
  {
LABEL_606:
    v536 = 0;
    v537 = *(unsigned int *)(v532 + 8);
    _X10 = *(char **)a9;
    __asm { PRFM            #4, [X10] }
    v540 = *(_QWORD *)(a9 + 24);
    for (i3 = (((0x9DDFEA08EB382D69 * v537 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v537
                                                                        + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
          ;
          i3 = v536 + v543)
    {
      v543 = i3 & v540;
      v544 = *(_QWORD *)&_X10[v543];
      v542 = 0x101010101010101
           * (((105 * v537 - 27) ^ ((0x9DDFEA08EB382D69 * v537 + 0x376ADF16980614E5) >> 32)) & 0x7F);
      v545 = ((v544 ^ v542) - 0x101010101010101) & ~(v544 ^ v542) & 0x8080808080808080;
      if (v545)
        break;
LABEL_610:
      if ((v544 & (~v544 << 6) & 0x8080808080808080) != 0)
      {
LABEL_613:
        if (*(_DWORD *)(*(_QWORD *)(v532 + 16) + 520) == 2)
          goto LABEL_614;
        v551 = v531 + 1;
        v552 = v531[1];
        v549 = v532 + 32;
        if (v552 <= -2)
        {
          do
          {
            v553 = (__clz(__rbit64(((*(_QWORD *)v551 >> 7) & ~*(_QWORD *)v551 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v551 += v553;
            v549 += 32 * v553;
            v552 = *v551;
          }
          while (v552 < -1);
        }
        if (v552 == 255)
          v535 = 0;
        else
          v535 = v551;
        sub_20F887154(a11[2], v531, v532);
LABEL_605:
        v532 = v549;
        v531 = v535;
        if (!v535)
          goto LABEL_623;
        goto LABEL_606;
      }
      v536 += 8;
    }
    while (*(_DWORD *)(*(_QWORD *)(a9 + 8) + 4 * ((v543 + (__clz(__rbit64(v545)) >> 3)) & v540)) != (_DWORD)v537)
    {
      v545 &= v545 - 1;
      if (!v545)
        goto LABEL_610;
    }
    if (!_X10)
      goto LABEL_613;
LABEL_614:
    v548 = v531[1];
    v546 = v531 + 1;
    LOBYTE(v547) = v548;
    v549 = v532 + 32;
    if (v548 <= -2)
    {
      do
      {
        v550 = (__clz(__rbit64(((*(_QWORD *)v546 >> 7) & ~*(_QWORD *)v546 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v546 += v550;
        v549 += 32 * v550;
        v547 = *v546;
      }
      while (v547 < -1);
    }
    v535 = v546;
    if (v547 != 255)
      goto LABEL_605;
  }
LABEL_623:
  v554 = a11[3];
  v555 = *v554;
  v556 = v554[1];
  v557 = *(char *)*v554;
  if (v557 <= -2)
  {
    do
    {
      v558 = (__clz(__rbit64(((*(_QWORD *)v555 >> 7) & ~*(_QWORD *)v555 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v555 += v558;
      v556 += 32 * v558;
      v557 = *(char *)v555;
    }
    while (v557 < -1);
  }
  if (v557 != 255)
  {
LABEL_632:
    v560 = 0;
    v561 = *(unsigned int *)(v556 + 8);
    _X10 = *(char **)a10;
    __asm { PRFM            #4, [X10] }
    v564 = *(_QWORD *)(a10 + 24);
    for (i4 = (((0x9DDFEA08EB382D69 * v561 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v561
                                                                        + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
          ;
          i4 = v560 + v567)
    {
      v567 = i4 & v564;
      v568 = *(_QWORD *)&_X10[v567];
      v566 = 0x101010101010101
           * (((105 * v561 - 27) ^ ((0x9DDFEA08EB382D69 * v561 + 0x376ADF16980614E5) >> 32)) & 0x7F);
      v569 = ((v568 ^ v566) - 0x101010101010101) & ~(v568 ^ v566) & 0x8080808080808080;
      if (v569)
        break;
LABEL_636:
      if ((v568 & (~v568 << 6) & 0x8080808080808080) != 0)
      {
LABEL_643:
        v574 = (_QWORD *)(v555 + 1);
        v575 = *(char *)(v555 + 1);
        v572 = v556 + 32;
        if (v575 <= -2)
        {
          do
          {
            v576 = (__clz(__rbit64(((*v574 >> 7) & ~*v574 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v574 = (_QWORD *)((char *)v574 + v576);
            v572 += 32 * v576;
            v575 = *(char *)v574;
          }
          while (v575 < -1);
        }
        if (v575 == 255)
          v559 = 0;
        else
          v559 = v574;
        sub_20F29C91C(a11[3], (_QWORD *)v555, v556);
LABEL_631:
        v556 = v572;
        v555 = (unint64_t)v559;
        if (!v559)
          goto LABEL_646;
        goto LABEL_632;
      }
      v560 += 8;
    }
    while (*(_DWORD *)(*(_QWORD *)(a10 + 8) + 4 * ((v567 + (__clz(__rbit64(v569)) >> 3)) & v564)) != (_DWORD)v561)
    {
      v569 &= v569 - 1;
      if (!v569)
        goto LABEL_636;
    }
    if (!_X10)
      goto LABEL_643;
    v571 = *(char *)++v555;
    LOBYTE(v570) = v571;
    v559 = (_QWORD *)v555;
    v572 = v556 + 32;
    if (v571 <= -2)
    {
      do
      {
        v573 = (__clz(__rbit64(((*v559 >> 7) & ~*v559 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v559 = (_QWORD *)((char *)v559 + v573);
        v572 += 32 * v573;
        v570 = *(char *)v559;
      }
      while (v570 < -1);
    }
    if (v570 != 255)
      goto LABEL_631;
  }
LABEL_646:
  v578 = v1445[6];
  v577 = v1445[7];
  if (v577 != v578)
  {
    v579 = 0;
    v580 = 0;
    v27 = (float32x4_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v1479 = v27;
    while (1)
    {
      v581 = *(_QWORD *)(v578 + 24 * v579 + 8) - *(_QWORD *)(v578 + 24 * v579);
      if (v581)
        break;
LABEL_649:
      v579 = ++v580;
      if (0xAAAAAAAAAAAAAAABLL * ((v577 - v578) >> 3) <= v580)
        goto LABEL_905;
    }
    v1429 = v580;
    v582 = 0;
    v1434 = 0xFC0FC0FC0FC0FC1 * (v581 >> 3);
    v1441 = v579;
    while (1)
    {
      v1436 = v582;
      v1439 = v582;
      v583 = *(_QWORD *)(v1445[6] + 24 * v579) + 520 * v582;
      v584 = *(_QWORD *)(v583 + 200);
      v1450 = (uint64_t *)(v583 + 200);
      v586 = (uint64_t *)(v583 + 208);
      v585 = *(_QWORD *)(v583 + 208);
      v1446 = v586;
      if (v585 != v584)
        break;
LABEL_761:
      v679 = *(_QWORD *)(v1445[9] + 24 * v1441) + 520 * v1439;
      v680 = *(_QWORD *)(v679 + 200);
      v1451 = (uint64_t *)(v679 + 200);
      v682 = (uint64_t *)(v679 + 208);
      v681 = *(_QWORD *)(v679 + 208);
      v1447 = v682;
      if (v681 != v680)
      {
        v683 = 0;
        v684 = a11[3];
        while (1)
        {
          v685 = *(unsigned int *)(v680 + 4 * v683);
          if ((v685 & 0x80000000) == 0)
          {
            v686 = 0;
            _X10 = *v684;
            __asm { PRFM            #4, [X10] }
            v689 = v684[3];
            for (i5 = (((0x9DDFEA08EB382D69 * v685 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v685
                                                                                + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
                  ;
                  i5 = v686 + v692)
            {
              v692 = i5 & v689;
              v693 = *(_QWORD *)(_X10 + v692);
              v691 = 0x101010101010101
                   * (((105 * v685 - 27) ^ ((0x9DDFEA08EB382D69 * v685
                                                                             + 0x376ADF16980614E5) >> 32)) & 0x7F);
              v694 = ((v693 ^ v691) - 0x101010101010101) & ~(v693 ^ v691) & 0x8080808080808080;
              if (v694)
                break;
LABEL_773:
              if ((v693 & (~v693 << 6) & 0x8080808080808080) != 0)
                goto LABEL_776;
              v686 += 8;
            }
            while (1)
            {
              v695 = v684[1] + 32 * ((v692 + (__clz(__rbit64(v694)) >> 3)) & v689);
              v555 = *(_QWORD *)v695;
              v696 = *(_DWORD *)(v695 + 8);
              if (!v555 && v696 == (_DWORD)v685)
                break;
              v694 &= v694 - 1;
              if (!v694)
                goto LABEL_773;
            }
            if (!_X10)
              break;
          }
LABEL_764:
          if (++v683 >= (unint64_t)((v681 - v680) >> 2))
            goto LABEL_652;
        }
LABEL_776:
        v698 = (void *)v1461[6];
        v699 = (unint64_t *)v1461[7];
        object[0] = v698;
        object[1] = v699;
        if (v699)
        {
          v700 = v699 + 1;
          do
            v701 = __ldxr(v700);
          while (__stxr(v701 + 1, v700));
        }
        v702 = v1461[2];
        if (v1461[1] != v702)
        {
          v703 = *(_QWORD *)(v702 - 8);
          *(_QWORD *)(v702 - 8) = 0;
          v704 = v1461[2];
          v707 = *(_QWORD *)(v704 - 8);
          v706 = (_QWORD *)(v704 - 8);
          v705 = v707;
          *v706 = 0;
          if (v707)
          {
            if (*(_BYTE *)(v705 + 968))
              *(_BYTE *)(v705 + 968) = 0;
            v708 = *(void **)(v705 + 976);
            *(_QWORD *)(v705 + 984) = v708;
            *(_DWORD *)(v705 + 1000) = 0;
            if (v708)
              operator delete(v708);
            v709 = *(std::__shared_weak_count **)(v705 + 8);
            if (v709)
              std::__shared_weak_count::__release_weak(v709);
            MEMORY[0x212BC6398](v705, 0x10E2C408E9A3F00, v556);
          }
          v1461[2] = v706;
          *(_QWORD *)__dst = 0;
          *(_QWORD *)&v1521[0] = v698;
          *((_QWORD *)&v1521[0] + 1) = v699;
          if (!v699)
            goto LABEL_794;
LABEL_792:
          v711 = v699 + 1;
          do
            v712 = __ldxr(v711);
          while (__stxr(v712 + 1, v711));
          goto LABEL_794;
        }
        v710 = v1461[4];
        if (v710 >= v1461[5])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v1461[4] = v710 + 1;
        v703 = operator new();
        *(_BYTE *)(v703 + 40) = 0;
        *(_BYTE *)(v703 + 968) = 0;
        *(_OWORD *)v703 = 0u;
        *(_OWORD *)(v703 + 16) = 0u;
        *(_DWORD *)(v703 + 32) = 0;
        *(_QWORD *)(v703 + 976) = 0;
        *(_QWORD *)(v703 + 992) = 0;
        *(_QWORD *)(v703 + 984) = 0;
        *(_DWORD *)(v703 + 1000) = 0;
        *(_QWORD *)__dst = 0;
        *(_QWORD *)&v1521[0] = v698;
        *((_QWORD *)&v1521[0] + 1) = v699;
        if (v699)
          goto LABEL_792;
LABEL_794:
        v1490 = (_BYTE *)v703;
        v713 = (std::__shared_weak_count *)operator new();
        v1521[0] = 0uLL;
        v713->__shared_owners_ = 0;
        v714 = (unint64_t *)&v713->__shared_owners_;
        v713->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA047E0;
        v713->__shared_weak_owners_ = 0;
        v713[1].__vftable = (std::__shared_weak_count_vtbl *)v703;
        v713[1].__shared_owners_ = (uint64_t)v698;
        v713[1].__shared_weak_owners_ = (uint64_t)v699;
        v1491 = v713;
        v12 = (uint64_t)"";
        if (!v703)
          goto LABEL_807;
        v715 = *(std::__shared_weak_count **)(v703 + 8);
        if (v715)
        {
          if (v715->__shared_owners_ == -1)
          {
            do
              v716 = __ldxr(v714);
            while (__stxr(v716 + 1, v714));
            p_shared_weak_owners = (unint64_t *)&v713->__shared_weak_owners_;
            do
              v718 = __ldxr(p_shared_weak_owners);
            while (__stxr(v718 + 1, p_shared_weak_owners));
            *(_QWORD *)v703 = v703;
            *(_QWORD *)(v703 + 8) = v713;
            std::__shared_weak_count::__release_weak(v715);
            goto LABEL_805;
          }
          goto LABEL_807;
        }
        do
          v719 = __ldxr(v714);
        while (__stxr(v719 + 1, v714));
        v720 = (unint64_t *)&v713->__shared_weak_owners_;
        do
          v721 = __ldxr(v720);
        while (__stxr(v721 + 1, v720));
        *(_QWORD *)v703 = v703;
        *(_QWORD *)(v703 + 8) = v713;
        do
LABEL_805:
          v722 = __ldaxr(v714);
        while (__stlxr(v722 - 1, v714));
        if (v722)
        {
LABEL_807:
          v723 = (std::__shared_weak_count *)*((_QWORD *)&v1521[0] + 1);
          if (*((_QWORD *)&v1521[0] + 1))
            goto LABEL_808;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v713->__on_zero_shared)(v713);
          std::__shared_weak_count::__release_weak(v713);
          v723 = (std::__shared_weak_count *)*((_QWORD *)&v1521[0] + 1);
          if (*((_QWORD *)&v1521[0] + 1))
          {
LABEL_808:
            v724 = (unint64_t *)&v723->__shared_owners_;
            do
              v725 = __ldaxr(v724);
            while (__stlxr(v725 - 1, v724));
            if (!v725)
            {
              ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
              std::__shared_weak_count::__release_weak(v723);
            }
          }
        }
        v726 = *(_QWORD *)__dst;
        if (*(_QWORD *)__dst)
        {
          if (*(_BYTE *)(*(_QWORD *)__dst + 968))
            *(_BYTE *)(*(_QWORD *)__dst + 968) = 0;
          v727 = *(void **)(v726 + 976);
          *(_QWORD *)(v726 + 984) = v727;
          *(_DWORD *)(v726 + 1000) = 0;
          if (v727)
            operator delete(v727);
          v728 = *(std::__shared_weak_count **)(v726 + 8);
          if (v728)
            std::__shared_weak_count::__release_weak(v728);
          MEMORY[0x212BC6398](v726, 0x10E2C408E9A3F00);
        }
        v729 = (std::__shared_weak_count *)object[1];
        if (!object[1])
          goto LABEL_824;
        v730 = (unint64_t *)((char *)object[1] + 8);
        do
          v731 = __ldaxr(v730);
        while (__stlxr(v731 - 1, v730));
        if (!v731)
        {
          ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
          std::__shared_weak_count::__release_weak(v729);
          v732 = v1490;
          *((_QWORD *)v1490 + 2) = 0;
          *((_QWORD *)v732 + 3) = 0;
          *((_DWORD *)v732 + 8) = 0;
          if (v732[968])
LABEL_825:
            v732[968] = 0;
        }
        else
        {
LABEL_824:
          v732 = v1490;
          *((_QWORD *)v1490 + 2) = 0;
          *((_QWORD *)v732 + 3) = 0;
          *((_DWORD *)v732 + 8) = 0;
          if (v732[968])
            goto LABEL_825;
        }
        *((_QWORD *)v732 + 123) = *((_QWORD *)v732 + 122);
        *((_DWORD *)v732 + 250) = 0;
        *((_QWORD *)v732 + 3) = 0;
        *((_DWORD *)v732 + 8) = v685;
        v733 = (void *)*((_QWORD *)v732 + 4);
        object[0] = 0;
        object[1] = v733;
        v734 = v1491;
        object[2] = v732;
        object[3] = v1491;
        if (v1491)
        {
          v735 = (unint64_t *)&v1491->__shared_owners_;
          do
            v736 = __ldxr(v735);
          while (__stxr(v736 + 1, v735));
        }
        v737 = 0;
        _X10 = *v684;
        v739 = v684[1];
        __asm { PRFM            #4, [X10] }
        v741 = (0x9DDFEA08EB382D69 * v733 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                    * v733
                                                                                    + 0x376ADF16980614E5) >> 32);
        v742 = v684[3];
        for (i6 = (v741 >> 7) ^ 0x13701D; ; i6 = v737 + v744)
        {
          v744 = i6 & v742;
          v745 = *(_QWORD *)(_X10 + v744);
          v746 = ((v745 ^ (0x101010101010101 * (v741 & 0x7F))) - 0x101010101010101) & ~(v745 ^ (0x101010101010101
                                                                                                  * (v741 & 0x7F))) & 0x8080808080808080;
          if (v746)
            break;
LABEL_836:
          if ((v745 & (~v745 << 6) & 0x8080808080808080) != 0)
          {
            v764 = sub_20F346A98(v684, v741);
            v765 = v684[1] + 32 * v764;
            *(_OWORD *)v765 = *(_OWORD *)object;
            *(_QWORD *)(v765 + 16) = v732;
            *(_QWORD *)(v765 + 24) = v734;
            v766 = v684[1] + 32 * v764;
            v767 = *(_QWORD *)(v766 + 16);
            v756 = v766 + 16;
            v755 = v767;
            if (!*(_BYTE *)(v767 + 968))
              goto LABEL_852;
            goto LABEL_843;
          }
          v737 += 8;
        }
        while (1)
        {
          v747 = (v744 + (__clz(__rbit64(v746)) >> 3)) & v742;
          v748 = v739 + 32 * v747;
          v749 = *(_QWORD *)v748;
          v750 = *(_DWORD *)(v748 + 8);
          if (!v749 && v750 == (_DWORD)v733)
            break;
          v746 &= v746 - 1;
          if (!v746)
            goto LABEL_836;
        }
        if (!v734)
          goto LABEL_842;
        v752 = (unint64_t *)&v734->__shared_owners_;
        do
          v753 = __ldaxr(v752);
        while (__stlxr(v753 - 1, v752));
        if (!v753)
        {
          ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
          std::__shared_weak_count::__release_weak(v734);
          v831 = v739 + 32 * v747;
          v832 = *(_QWORD *)(v831 + 16);
          v756 = v831 + 16;
          v755 = v832;
          if (!*(_BYTE *)(v832 + 968))
            goto LABEL_852;
        }
        else
        {
LABEL_842:
          v754 = v739 + 32 * v747;
          v757 = *(_QWORD *)(v754 + 16);
          v756 = v754 + 16;
          v755 = v757;
          if (!*(_BYTE *)(v757 + 968))
          {
LABEL_852:
            v762 = 0;
            v763 = 1;
            goto LABEL_853;
          }
        }
LABEL_843:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1422, (uint64_t)"!lineTrack->second->hasStructure()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v758 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v758 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v759 = qword_254A6DE40;
          for (i7 = qword_254A6DE48; v759 != i7; v759 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v759)(*(_QWORD *)(v759 + 8), "!lineTrack->second->hasStructure()", 34, "", 0);
        }
        v761 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v761 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "!lineTrack->second->hasStructure()", 34, "", 0);
        v755 = *(_QWORD *)v756;
        v762 = *(unsigned __int8 *)(*(_QWORD *)v756 + 968);
        v763 = *(_BYTE *)(*(_QWORD *)v756 + 968) == 0;
LABEL_853:
        v1489 = 0;
        v1488 = 0uLL;
        memset(__dst, 0, 29);
        memset(v1515, 0, 23);
        memset(v1518, 0, 29);
        *(_QWORD *)v1566 = 0;
        *(_QWORD *)&v1566[8] = 0;
        *(_QWORD *)&v1566[15] = 0;
        v27.i64[1] = 0;
        memset(v1498, 0, 120);
        memset(v1497, 0, sizeof(v1497));
        v1496 = 0u;
        memset(object, 0, sizeof(object));
        v1487 = 0uLL;
        memset(v1521, 0, sizeof(v1521));
        memset(v1522, 0, sizeof(v1522));
        v1523 = 0u;
        v1524 = 0u;
        memset(v1525, 0, sizeof(v1525));
        *(_QWORD *)&v1526 = 0;
        if (v763)
        {
          if (v762)
          {
            v768 = 0;
            v769 = 0;
            v770 = 0;
            v771 = 0;
            v772 = 0;
            v773 = 0;
            v774 = 0;
            v775 = 0;
            v776 = 0;
            v556 = 0;
            v777 = 0;
            v778 = 0;
            v779 = 0;
            v780 = 0;
            v781 = 0;
            v782 = 0;
            LODWORD(v783) = 0;
            v784 = *(unsigned __int8 *)(v755 + 464);
            v555 = 1;
            v785 = 1.0;
            v27.i64[0] = -1.0;
            v786 = 0xFFEFFFFFFFFFFFFFLL;
            v787 = 0x7FF8000000000000;
            v788 = 0x7FF8000000000000;
            v789 = -1.0;
            v790 = 0x7FF8000000000000;
            v791 = 0x7FF8000000000000;
            v792 = 1.0;
            v793 = 0xFFEFFFFFFFFFFFFFLL;
            v794 = 1;
            goto LABEL_866;
          }
          v776 = 0;
          v770 = 0;
          v771 = 0;
          v772 = 0;
          v773 = 0;
          v774 = 0;
          v556 = 0;
          v777 = 0;
          v778 = 0;
          v779 = 0;
          v780 = 0;
          v781 = 0;
          v782 = 0;
          v783 = 0;
          v769 = 0;
          v807 = 1;
          v785 = 1.0;
          v27.i64[0] = -1.0;
          v786 = 0xFFEFFFFFFFFFFFFFLL;
          v787 = 0x7FF8000000000000;
          v788 = 0x7FF8000000000000;
          v555 = 1;
          v789 = -1.0;
          v790 = 0x7FF8000000000000;
          v791 = 0x7FF8000000000000;
          v792 = 1.0;
          v793 = 0xFFEFFFFFFFFFFFFFLL;
          v794 = 1;
          v806 = 1;
LABEL_891:
          *(_QWORD *)(v755 + 40) = &off_24CA04D80;
          *(float32x4_t *)(v755 + 48) = v1479;
          *(_QWORD *)(v755 + 64) = 0x7FF8000000000000;
          *(_OWORD *)(v755 + 72) = v1488;
          *(_QWORD *)(v755 + 88) = v1489;
          *(_BYTE *)(v755 + 96) = v794;
          *(_BYTE *)(v755 + 97) = v780;
          *(_BYTE *)(v755 + 98) = v779;
          *(_OWORD *)(v755 + 104) = *(_OWORD *)&__dst[5];
          *(_QWORD *)(v755 + 120) = *(_QWORD *)&__dst[21];
          *(_QWORD *)(v755 + 128) = v793;
          *(_QWORD *)(v755 + 136) = v778;
          *(double *)(v755 + 144) = v792;
          v844 = v1496;
          *(_OWORD *)(v755 + 184) = *(_OWORD *)&object[4];
          *(_OWORD *)(v755 + 200) = v844;
          v845 = v1497[1];
          *(_OWORD *)(v755 + 216) = v1497[0];
          *(_OWORD *)(v755 + 232) = v845;
          v846 = *(_OWORD *)&object[2];
          *(_OWORD *)(v755 + 152) = *(_OWORD *)object;
          *(_OWORD *)(v755 + 168) = v846;
          v847 = *(_OWORD *)v1498;
          *(_OWORD *)(v755 + 280) = v1497[4];
          *(_OWORD *)(v755 + 296) = v847;
          v848 = *(_OWORD *)&v1498[32];
          *(_OWORD *)(v755 + 312) = *(_OWORD *)&v1498[16];
          *(_OWORD *)(v755 + 328) = v848;
          v849 = v1497[3];
          *(_OWORD *)(v755 + 248) = v1497[2];
          *(_OWORD *)(v755 + 264) = v849;
          *(_QWORD *)(v755 + 408) = *(_QWORD *)&v1498[112];
          v850 = *(_OWORD *)&v1498[96];
          *(_OWORD *)(v755 + 376) = *(_OWORD *)&v1498[80];
          *(_OWORD *)(v755 + 392) = v850;
          v851 = *(_OWORD *)&v1498[64];
          *(_OWORD *)(v755 + 344) = *(_OWORD *)&v1498[48];
          *(_OWORD *)(v755 + 360) = v851;
          *(_QWORD *)(v755 + 416) = v791;
          *(_QWORD *)(v755 + 424) = v790;
          *(_BYTE *)(v755 + 432) = v777;
          *(_BYTE *)(v755 + 433) = v556;
          *(_BYTE *)(v755 + 440) = 0;
          *(_BYTE *)(v755 + 464) = 0;
          if (!v806)
          {
            *(_BYTE *)(v755 + 440) = v776;
            v556 = *(_QWORD *)&v1517[15];
            *(_QWORD *)(v755 + 456) = *(_QWORD *)&v1517[15];
            *(_OWORD *)(v755 + 441) = *(_OWORD *)v1517;
            *(_BYTE *)(v755 + 464) = 1;
          }
          *(_QWORD *)(v755 + 472) = v782;
          *(double *)(v755 + 480) = v789;
          *(float32x4_t *)(v755 + 496) = v1479;
          *(_QWORD *)(v755 + 512) = 0x7FF8000000000000;
          *(_OWORD *)(v755 + 520) = v1487;
          *(_QWORD *)(v755 + 536) = v783;
          *(_BYTE *)(v755 + 544) = v555;
          *(_BYTE *)(v755 + 545) = v774;
          *(_BYTE *)(v755 + 546) = v773;
          *(_OWORD *)(v755 + 552) = *(_OWORD *)&v1518[5];
          *(_QWORD *)(v755 + 568) = *(_QWORD *)&v1518[21];
          *(_QWORD *)(v755 + 576) = v786;
          *(_QWORD *)(v755 + 584) = v772;
          *(double *)(v755 + 592) = v785;
          *(_QWORD *)(v755 + 488) = &off_24CA04D80;
          v852 = v1522[0];
          *(_OWORD *)(v755 + 632) = v1521[2];
          *(int8x16_t *)(v755 + 648) = v852;
          v853 = v1523;
          *(int8x16_t *)(v755 + 664) = v1522[1];
          *(_OWORD *)(v755 + 680) = v853;
          v854 = v1521[1];
          *(_OWORD *)(v755 + 600) = v1521[0];
          *(_OWORD *)(v755 + 616) = v854;
          v855 = v1525[4];
          *(_OWORD *)(v755 + 760) = v1525[3];
          *(_OWORD *)(v755 + 776) = v855;
          v856 = v1525[2];
          *(_OWORD *)(v755 + 728) = v1525[1];
          *(_OWORD *)(v755 + 744) = v856;
          v857 = v1525[0];
          *(_OWORD *)(v755 + 696) = v1524;
          *(_OWORD *)(v755 + 712) = v857;
          *(_QWORD *)(v755 + 856) = v1526;
          v858 = v1525[8];
          *(_OWORD *)(v755 + 824) = v1525[7];
          *(_OWORD *)(v755 + 840) = v858;
          v859 = v1525[6];
          *(_OWORD *)(v755 + 792) = v1525[5];
          *(_OWORD *)(v755 + 808) = v859;
          *(_QWORD *)(v755 + 864) = v788;
          *(_QWORD *)(v755 + 872) = v787;
          *(_BYTE *)(v755 + 880) = v771;
          *(_BYTE *)(v755 + 881) = v770;
          *(_BYTE *)(v755 + 888) = 0;
          *(_BYTE *)(v755 + 912) = 0;
          if ((v807 & 1) == 0)
          {
            *(_BYTE *)(v755 + 888) = v769;
            *(_QWORD *)(v755 + 904) = *(_QWORD *)&v1516[15];
            *(_OWORD *)(v755 + 889) = *(_OWORD *)v1516;
            *(_BYTE *)(v755 + 912) = 1;
          }
          *(_QWORD *)(v755 + 920) = v781;
          *(_QWORD *)(v755 + 928) = v27.i64[0];
          v27 = 0uLL;
          *(_OWORD *)(v755 + 936) = 0uLL;
          *(_QWORD *)(v755 + 960) = 0;
          *(_QWORD *)(v755 + 952) = 0;
          *(_BYTE *)(v755 + 968) = 1;
          v843 = v1491;
          if (v1491)
          {
LABEL_896:
            v860 = (unint64_t *)&v843->__shared_owners_;
            do
              v861 = __ldaxr(v860);
            while (__stlxr(v861 - 1, v860));
            if (!v861)
            {
              ((void (*)(std::__shared_weak_count *))v843->__on_zero_shared)(v843);
              std::__shared_weak_count::__release_weak(v843);
            }
          }
          goto LABEL_763;
        }
        v1488 = *(_OWORD *)(v755 + 72);
        LODWORD(v1489) = *(_DWORD *)(v755 + 88);
        v794 = *(_BYTE *)(v755 + 96);
        v780 = *(_BYTE *)(v755 + 97);
        v779 = *(_BYTE *)(v755 + 98);
        *(_OWORD *)&__dst[5] = *(_OWORD *)(v755 + 104);
        *(_QWORD *)&__dst[21] = *(_QWORD *)(v755 + 120);
        v793 = *(_QWORD *)(v755 + 128);
        v778 = *(_QWORD *)(v755 + 136);
        v792 = *(double *)(v755 + 144);
        v795 = *(_OWORD *)(v755 + 168);
        *(_OWORD *)object = *(_OWORD *)(v755 + 152);
        *(_OWORD *)&object[2] = v795;
        v796 = *(_OWORD *)(v755 + 184);
        v797 = *(_OWORD *)(v755 + 200);
        v798 = *(_OWORD *)(v755 + 232);
        v1497[0] = *(_OWORD *)(v755 + 216);
        v1497[1] = v798;
        *(_OWORD *)&object[4] = v796;
        v1496 = v797;
        v799 = *(_OWORD *)(v755 + 264);
        v800 = *(_OWORD *)(v755 + 296);
        v801 = *(_OWORD *)(v755 + 312);
        v1497[4] = *(_OWORD *)(v755 + 280);
        *(_OWORD *)v1498 = v800;
        v1497[2] = *(_OWORD *)(v755 + 248);
        v1497[3] = v799;
        v802 = *(_OWORD *)(v755 + 328);
        v803 = *(_OWORD *)(v755 + 344);
        *(_OWORD *)&v1498[16] = v801;
        *(_OWORD *)&v1498[32] = v802;
        *(_QWORD *)&v1498[112] = *(_QWORD *)(v755 + 408);
        v804 = *(_OWORD *)(v755 + 392);
        v805 = *(_OWORD *)(v755 + 360);
        *(_OWORD *)&v1498[80] = *(_OWORD *)(v755 + 376);
        *(_OWORD *)&v1498[96] = v804;
        v784 = *(unsigned __int8 *)(v755 + 464);
        v806 = *(_BYTE *)(v755 + 464) == 0;
        *(_OWORD *)&v1498[48] = v803;
        *(_OWORD *)&v1498[64] = v805;
        if (v784)
        {
          v776 = *(_BYTE *)(v755 + 440);
          *(_QWORD *)&v1515[15] = *(_QWORD *)(v755 + 456);
          *(_OWORD *)v1515 = *(_OWORD *)(v755 + 441);
          v775 = 1;
        }
        else
        {
          v776 = 0;
          v775 = 0;
        }
        v791 = *(_QWORD *)(v755 + 416);
        v790 = *(_QWORD *)(v755 + 424);
        v777 = *(_BYTE *)(v755 + 432);
        v556 = *(unsigned __int8 *)(v755 + 433);
        v782 = *(_QWORD *)(v755 + 472);
        v789 = *(double *)(v755 + 480);
        v1487 = *(_OWORD *)(v755 + 520);
        v783 = *(unsigned int *)(v755 + 536);
        v555 = *(unsigned __int8 *)(v755 + 544);
        v774 = *(_BYTE *)(v755 + 545);
        v773 = *(_BYTE *)(v755 + 546);
        *(_QWORD *)&v1518[21] = *(_QWORD *)(v755 + 568);
        *(_OWORD *)&v1518[5] = *(_OWORD *)(v755 + 552);
        v786 = *(_QWORD *)(v755 + 576);
        v772 = *(_QWORD *)(v755 + 584);
        v785 = *(double *)(v755 + 592);
        v808 = *(_OWORD *)(v755 + 616);
        v1521[0] = *(_OWORD *)(v755 + 600);
        v1521[1] = v808;
        v809 = *(_OWORD *)(v755 + 632);
        v810 = *(int8x16_t *)(v755 + 648);
        v811 = *(_OWORD *)(v755 + 680);
        v1522[1] = *(int8x16_t *)(v755 + 664);
        v1523 = v811;
        v1521[2] = v809;
        v1522[0] = v810;
        v812 = *(_OWORD *)(v755 + 712);
        v1524 = *(_OWORD *)(v755 + 696);
        v1525[0] = v812;
        v813 = *(_OWORD *)(v755 + 728);
        v814 = *(_OWORD *)(v755 + 744);
        v815 = *(_OWORD *)(v755 + 776);
        v1525[3] = *(_OWORD *)(v755 + 760);
        v1525[4] = v815;
        v1525[1] = v813;
        v1525[2] = v814;
        v27 = *(float32x4_t *)(v755 + 792);
        v816 = *(_OWORD *)(v755 + 808);
        v817 = *(_OWORD *)(v755 + 824);
        v818 = *(_OWORD *)(v755 + 840);
        *(_QWORD *)&v1526 = *(_QWORD *)(v755 + 856);
        v1525[7] = v817;
        v1525[8] = v818;
        v1525[5] = v27;
        v1525[6] = v816;
        v12 = *(unsigned __int8 *)(v755 + 912);
        if (*(_BYTE *)(v755 + 912))
        {
          v769 = *(_BYTE *)(v755 + 888);
          *(_QWORD *)&v1566[15] = *(_QWORD *)(v755 + 904);
          v27 = *(float32x4_t *)(v755 + 889);
          *(float32x4_t *)v1566 = v27;
          v768 = 1;
        }
        else
        {
          v769 = 0;
          v768 = 0;
        }
        v788 = *(_QWORD *)(v755 + 864);
        v787 = *(_QWORD *)(v755 + 872);
        v771 = *(_BYTE *)(v755 + 880);
        v770 = *(_BYTE *)(v755 + 881);
        v781 = *(_QWORD *)(v755 + 920);
        v27.i64[0] = *(_QWORD *)(v755 + 928);
        if (v762)
        {
LABEL_866:
          *(float32x4_t *)(v755 + 48) = v1479;
          *(_QWORD *)(v755 + 64) = 0x7FF8000000000000;
          *(_OWORD *)(v755 + 72) = v1488;
          v12 = v1489;
          *(_DWORD *)(v755 + 88) = v1489;
          *(_BYTE *)(v755 + 96) = v794;
          *(_BYTE *)(v755 + 97) = v780;
          *(_BYTE *)(v755 + 98) = v779;
          *(_OWORD *)(v755 + 104) = *(_OWORD *)&__dst[5];
          *(_QWORD *)(v755 + 120) = *(_QWORD *)&__dst[21];
          *(_QWORD *)(v755 + 128) = v793;
          *(_QWORD *)(v755 + 136) = v778;
          *(double *)(v755 + 144) = v792;
          v819 = *(_OWORD *)object;
          *(_OWORD *)(v755 + 168) = *(_OWORD *)&object[2];
          *(_OWORD *)(v755 + 152) = v819;
          v820 = *(_OWORD *)&object[4];
          v821 = v1496;
          v822 = v1497[0];
          *(_OWORD *)(v755 + 232) = v1497[1];
          *(_OWORD *)(v755 + 216) = v822;
          *(_OWORD *)(v755 + 200) = v821;
          *(_OWORD *)(v755 + 184) = v820;
          v823 = v1497[3];
          *(_OWORD *)(v755 + 248) = v1497[2];
          v824 = v1497[4];
          v825 = *(_OWORD *)&v1498[16];
          v826 = *(_OWORD *)&v1498[32];
          *(_OWORD *)(v755 + 296) = *(_OWORD *)v1498;
          *(_OWORD *)(v755 + 312) = v825;
          *(_OWORD *)(v755 + 264) = v823;
          *(_OWORD *)(v755 + 280) = v824;
          v827 = *(_OWORD *)&v1498[48];
          v828 = *(_OWORD *)&v1498[64];
          *(_OWORD *)(v755 + 328) = v826;
          *(_OWORD *)(v755 + 344) = v827;
          v829 = *(_OWORD *)&v1498[80];
          v830 = *(_OWORD *)&v1498[96];
          *(_QWORD *)(v755 + 408) = *(_QWORD *)&v1498[112];
          *(_OWORD *)(v755 + 376) = v829;
          *(_OWORD *)(v755 + 392) = v830;
          *(_OWORD *)(v755 + 360) = v828;
          *(_QWORD *)(v755 + 416) = v791;
          *(_QWORD *)(v755 + 424) = v790;
          *(_BYTE *)(v755 + 432) = v777;
          *(_BYTE *)(v755 + 433) = v556;
          if (v784 == v775)
          {
            if (v784)
            {
              *(_BYTE *)(v755 + 440) = v776;
              v556 = *(_QWORD *)&v1515[15];
              *(_QWORD *)(v755 + 456) = *(_QWORD *)&v1515[15];
              *(_OWORD *)(v755 + 441) = *(_OWORD *)v1515;
            }
          }
          else if (v784)
          {
            *(_BYTE *)(v755 + 464) = 0;
          }
          else
          {
            *(_BYTE *)(v755 + 440) = v776;
            v556 = *(_QWORD *)&v1515[15];
            *(_QWORD *)(v755 + 456) = *(_QWORD *)&v1515[15];
            *(_OWORD *)(v755 + 441) = *(_OWORD *)v1515;
            *(_BYTE *)(v755 + 464) = 1;
          }
          *(_QWORD *)(v755 + 472) = v782;
          *(double *)(v755 + 480) = v789;
          *(float32x4_t *)(v755 + 496) = v1479;
          *(_QWORD *)(v755 + 512) = 0x7FF8000000000000;
          *(_OWORD *)(v755 + 520) = v1487;
          *(_DWORD *)(v755 + 536) = v783;
          *(_BYTE *)(v755 + 544) = v555;
          *(_BYTE *)(v755 + 545) = v774;
          *(_BYTE *)(v755 + 546) = v773;
          *(_OWORD *)(v755 + 552) = *(_OWORD *)&v1518[5];
          *(_QWORD *)(v755 + 568) = *(_QWORD *)&v1518[21];
          *(_QWORD *)(v755 + 576) = v786;
          *(_QWORD *)(v755 + 584) = v772;
          *(double *)(v755 + 592) = v785;
          v833 = v1523;
          *(int8x16_t *)(v755 + 664) = v1522[1];
          *(_OWORD *)(v755 + 680) = v833;
          v834 = v1522[0];
          *(_OWORD *)(v755 + 632) = v1521[2];
          *(int8x16_t *)(v755 + 648) = v834;
          v835 = v1521[1];
          *(_OWORD *)(v755 + 600) = v1521[0];
          *(_OWORD *)(v755 + 616) = v835;
          v836 = v1525[2];
          *(_OWORD *)(v755 + 728) = v1525[1];
          *(_OWORD *)(v755 + 744) = v836;
          v837 = v1525[4];
          *(_OWORD *)(v755 + 760) = v1525[3];
          *(_OWORD *)(v755 + 776) = v837;
          v838 = v1525[0];
          *(_OWORD *)(v755 + 696) = v1524;
          *(_OWORD *)(v755 + 712) = v838;
          v839 = v1525[5];
          v840 = v1525[6];
          v841 = v1525[7];
          v842 = v1525[8];
          *(_QWORD *)(v755 + 856) = v1526;
          *(_OWORD *)(v755 + 824) = v841;
          *(_OWORD *)(v755 + 840) = v842;
          *(_OWORD *)(v755 + 792) = v839;
          *(_OWORD *)(v755 + 808) = v840;
          *(_QWORD *)(v755 + 864) = v788;
          *(_QWORD *)(v755 + 872) = v787;
          *(_BYTE *)(v755 + 880) = v771;
          *(_BYTE *)(v755 + 881) = v770;
          if (*(unsigned __int8 *)(v755 + 912) == v768)
          {
            if (*(_BYTE *)(v755 + 912))
            {
              *(_BYTE *)(v755 + 888) = v769;
              *(_QWORD *)(v755 + 904) = *(_QWORD *)&v1566[15];
              *(_OWORD *)(v755 + 889) = *(_OWORD *)v1566;
              *(_QWORD *)(v755 + 920) = v781;
              *(_QWORD *)(v755 + 928) = v27.i64[0];
              v843 = v1491;
              if (v1491)
                goto LABEL_896;
              goto LABEL_763;
            }
          }
          else
          {
            if (*(_BYTE *)(v755 + 912))
            {
              *(_BYTE *)(v755 + 912) = 0;
              *(_QWORD *)(v755 + 920) = v781;
              *(_QWORD *)(v755 + 928) = v27.i64[0];
              v843 = v1491;
              if (v1491)
                goto LABEL_896;
              goto LABEL_763;
            }
            *(_BYTE *)(v755 + 888) = v769;
            *(_QWORD *)(v755 + 904) = *(_QWORD *)&v1566[15];
            *(_OWORD *)(v755 + 889) = *(_OWORD *)v1566;
            *(_BYTE *)(v755 + 912) = 1;
          }
          *(_QWORD *)(v755 + 920) = v781;
          *(_QWORD *)(v755 + 928) = v27.i64[0];
          v843 = v1491;
          if (v1491)
            goto LABEL_896;
LABEL_763:
          v681 = *v1447;
          v680 = *v1451;
          goto LABEL_764;
        }
        if (v784)
        {
          *(_OWORD *)v1517 = *(_OWORD *)v1515;
          *(_QWORD *)&v1517[15] = *(_QWORD *)&v1515[15];
          if ((_DWORD)v12)
          {
LABEL_873:
            v807 = 0;
            *(_OWORD *)v1516 = *(_OWORD *)v1566;
            *(_QWORD *)&v1516[15] = *(_QWORD *)&v1566[15];
            goto LABEL_891;
          }
        }
        else
        {
          v776 = 0;
          if ((_DWORD)v12)
            goto LABEL_873;
        }
        v769 = 0;
        v807 = 1;
        goto LABEL_891;
      }
LABEL_652:
      v582 = v1436 + 1;
      v579 = v1441;
      if (v1436 + 1 == (char *)v1434)
      {
        v578 = v1445[6];
        v577 = v1445[7];
        v580 = v1429;
        goto LABEL_649;
      }
    }
    v587 = 0;
    v588 = a11[2];
    while (1)
    {
      v589 = *(unsigned int *)(v584 + 4 * v587);
      if ((v589 & 0x80000000) == 0)
      {
        v590 = 0;
        _X10 = *v588;
        __asm { PRFM            #4, [X10] }
        v593 = v588[3];
        for (i8 = (((0x9DDFEA08EB382D69 * v589 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v589
                                                                            + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
              ;
              i8 = v590 + v596)
        {
          v596 = i8 & v593;
          v597 = *(_QWORD *)(_X10 + v596);
          v595 = 0x101010101010101
               * (((105 * v589 - 27) ^ ((0x9DDFEA08EB382D69 * v589
                                                                         + 0x376ADF16980614E5) >> 32)) & 0x7F);
          v598 = ((v597 ^ v595) - 0x101010101010101) & ~(v597 ^ v595) & 0x8080808080808080;
          if (v598)
            break;
LABEL_665:
          if ((v597 & (~v597 << 6) & 0x8080808080808080) != 0)
            goto LABEL_668;
          v590 += 8;
        }
        while (1)
        {
          v599 = v588[1] + 32 * ((v596 + (__clz(__rbit64(v598)) >> 3)) & v593);
          v555 = *(_QWORD *)v599;
          v600 = *(_DWORD *)(v599 + 8);
          if (!v555 && v600 == (_DWORD)v589)
            break;
          v598 &= v598 - 1;
          if (!v598)
            goto LABEL_665;
        }
        if (!_X10)
          break;
      }
LABEL_656:
      if (++v587 >= (unint64_t)((v585 - v584) >> 2))
        goto LABEL_761;
    }
LABEL_668:
    v602 = (void *)v1464[6];
    v603 = (unint64_t *)v1464[7];
    object[0] = v602;
    object[1] = v603;
    if (v603)
    {
      v604 = v603 + 1;
      do
        v605 = __ldxr(v604);
      while (__stxr(v605 + 1, v604));
    }
    v606 = v1464[2];
    if (v1464[1] != v606)
    {
      v607 = *(_QWORD *)(v606 - 8);
      *(_QWORD *)(v606 - 8) = 0;
      v608 = v1464[2];
      v611 = *(_QWORD *)(v608 - 8);
      v610 = (_QWORD *)(v608 - 8);
      v609 = v611;
      *v610 = 0;
      if (v611)
      {
        if (*(_BYTE *)(v609 + 488))
          *(_BYTE *)(v609 + 488) = 0;
        v612 = *(void **)(v609 + 496);
        *(_QWORD *)(v609 + 504) = v612;
        *(_DWORD *)(v609 + 520) = 0;
        if (v612)
          operator delete(v612);
        v613 = *(std::__shared_weak_count **)(v609 + 8);
        if (v613)
          std::__shared_weak_count::__release_weak(v613);
        MEMORY[0x212BC6398](v609, 0x10E2C401D09A2A5, v556);
      }
      v1464[2] = v610;
      *(_QWORD *)v1518 = 0;
      *(_QWORD *)&v1521[0] = v602;
      *((_QWORD *)&v1521[0] + 1) = v603;
      if (!v603)
        goto LABEL_686;
LABEL_684:
      v615 = v603 + 1;
      do
        v616 = __ldxr(v615);
      while (__stxr(v616 + 1, v615));
      goto LABEL_686;
    }
    v614 = v1464[4];
    if (v614 >= v1464[5])
    {
      v1371 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v1371, "Allocated object exceeds max pool size.");
      __cxa_throw(v1371, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v1464[4] = v614 + 1;
    v607 = operator new();
    *(_BYTE *)(v607 + 40) = 0;
    *(_BYTE *)(v607 + 488) = 0;
    *(_OWORD *)v607 = 0u;
    *(_OWORD *)(v607 + 16) = 0u;
    *(_DWORD *)(v607 + 32) = 0;
    *(_QWORD *)(v607 + 504) = 0;
    *(_QWORD *)(v607 + 512) = 0;
    *(_QWORD *)(v607 + 496) = 0;
    *(_DWORD *)(v607 + 520) = 0;
    *(_QWORD *)v1518 = 0;
    *(_QWORD *)&v1521[0] = v602;
    *((_QWORD *)&v1521[0] + 1) = v603;
    if (v603)
      goto LABEL_684;
LABEL_686:
    *(_QWORD *)__dst = v607;
    v617 = (std::__shared_weak_count *)operator new();
    v1521[0] = 0uLL;
    v617->__shared_owners_ = 0;
    v618 = (unint64_t *)&v617->__shared_owners_;
    v617->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04790;
    v617->__shared_weak_owners_ = 0;
    v617[1].__vftable = (std::__shared_weak_count_vtbl *)v607;
    v617[1].__shared_owners_ = (uint64_t)v602;
    v617[1].__shared_weak_owners_ = (uint64_t)v603;
    *(_QWORD *)&__dst[8] = v617;
    v12 = (uint64_t)"";
    if (!v607)
      goto LABEL_699;
    v619 = *(std::__shared_weak_count **)(v607 + 8);
    if (v619)
    {
      if (v619->__shared_owners_ == -1)
      {
        do
          v620 = __ldxr(v618);
        while (__stxr(v620 + 1, v618));
        v621 = (unint64_t *)&v617->__shared_weak_owners_;
        do
          v622 = __ldxr(v621);
        while (__stxr(v622 + 1, v621));
        *(_QWORD *)v607 = v607;
        *(_QWORD *)(v607 + 8) = v617;
        std::__shared_weak_count::__release_weak(v619);
        goto LABEL_697;
      }
      goto LABEL_699;
    }
    do
      v623 = __ldxr(v618);
    while (__stxr(v623 + 1, v618));
    v624 = (unint64_t *)&v617->__shared_weak_owners_;
    do
      v625 = __ldxr(v624);
    while (__stxr(v625 + 1, v624));
    *(_QWORD *)v607 = v607;
    *(_QWORD *)(v607 + 8) = v617;
    do
LABEL_697:
      v626 = __ldaxr(v618);
    while (__stlxr(v626 - 1, v618));
    if (v626)
    {
LABEL_699:
      v627 = (std::__shared_weak_count *)*((_QWORD *)&v1521[0] + 1);
      if (*((_QWORD *)&v1521[0] + 1))
        goto LABEL_700;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
      std::__shared_weak_count::__release_weak(v617);
      v627 = (std::__shared_weak_count *)*((_QWORD *)&v1521[0] + 1);
      if (*((_QWORD *)&v1521[0] + 1))
      {
LABEL_700:
        v628 = (unint64_t *)&v627->__shared_owners_;
        do
          v629 = __ldaxr(v628);
        while (__stlxr(v629 - 1, v628));
        if (!v629)
        {
          ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
          std::__shared_weak_count::__release_weak(v627);
        }
      }
    }
    v630 = *(_QWORD *)v1518;
    if (*(_QWORD *)v1518)
    {
      if (*(_BYTE *)(*(_QWORD *)v1518 + 488))
        *(_BYTE *)(*(_QWORD *)v1518 + 488) = 0;
      v631 = *(void **)(v630 + 496);
      *(_QWORD *)(v630 + 504) = v631;
      *(_DWORD *)(v630 + 520) = 0;
      if (v631)
        operator delete(v631);
      v632 = *(std::__shared_weak_count **)(v630 + 8);
      if (v632)
        std::__shared_weak_count::__release_weak(v632);
      MEMORY[0x212BC6398](v630, 0x10E2C401D09A2A5);
    }
    v633 = (std::__shared_weak_count *)object[1];
    if (!object[1])
      goto LABEL_716;
    v634 = (unint64_t *)((char *)object[1] + 8);
    do
      v635 = __ldaxr(v634);
    while (__stlxr(v635 - 1, v634));
    if (!v635)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
      v636 = *(_QWORD *)__dst;
      *(_QWORD *)(*(_QWORD *)__dst + 16) = 0;
      *(_QWORD *)(v636 + 24) = 0;
      *(_DWORD *)(v636 + 32) = 0;
      if (*(_BYTE *)(v636 + 488))
LABEL_717:
        *(_BYTE *)(v636 + 488) = 0;
    }
    else
    {
LABEL_716:
      v636 = *(_QWORD *)__dst;
      *(_QWORD *)(*(_QWORD *)__dst + 16) = 0;
      *(_QWORD *)(v636 + 24) = 0;
      *(_DWORD *)(v636 + 32) = 0;
      if (*(_BYTE *)(v636 + 488))
        goto LABEL_717;
    }
    *(_QWORD *)(v636 + 504) = *(_QWORD *)(v636 + 496);
    *(_DWORD *)(v636 + 520) = 0;
    *(_QWORD *)(v636 + 24) = 0;
    *(_DWORD *)(v636 + 32) = v589;
    v637 = *(void **)(v636 + 32);
    object[0] = 0;
    object[1] = v637;
    v638 = *(std::__shared_weak_count **)&__dst[8];
    object[2] = (void *)v636;
    object[3] = *(void **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v639 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v640 = __ldxr(v639);
      while (__stxr(v640 + 1, v639));
    }
    v641 = 0;
    _X10 = *v588;
    v643 = v588[1];
    __asm { PRFM            #4, [X10] }
    v555 = (0x9DDFEA08EB382D69 * v637 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                * v637
                                                                                + 0x376ADF16980614E5) >> 32);
    v645 = v588[3];
    for (i9 = (v555 >> 7) ^ 0x13701D; ; i9 = v641 + v647)
    {
      v647 = i9 & v645;
      v648 = *(_QWORD *)(_X10 + v647);
      v649 = ((v648 ^ (0x101010101010101 * (v555 & 0x7F))) - 0x101010101010101) & ~(v648 ^ (0x101010101010101
                                                                                              * (v555 & 0x7F))) & 0x8080808080808080;
      if (v649)
      {
        while (1)
        {
          v650 = (v647 + (__clz(__rbit64(v649)) >> 3)) & v645;
          v651 = v643 + 32 * v650;
          v652 = *(_QWORD *)v651;
          v653 = *(_DWORD *)(v651 + 8);
          if (!v652 && v653 == (_DWORD)v637)
            break;
          v649 &= v649 - 1;
          if (!v649)
            goto LABEL_728;
        }
        if (!v638)
          goto LABEL_734;
        v655 = (unint64_t *)&v638->__shared_owners_;
        do
          v656 = __ldaxr(v655);
        while (__stlxr(v656 - 1, v655));
        if (!v656)
        {
          ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
          std::__shared_weak_count::__release_weak(v638);
          v665 = v643 + 32 * v650;
          v666 = *(_QWORD *)(v665 + 16);
          v659 = v665 + 16;
          v658 = v666;
          if (*(_BYTE *)(v666 + 488))
            goto LABEL_741;
        }
        else
        {
LABEL_734:
          v657 = v643 + 32 * v650;
          v660 = *(_QWORD *)(v657 + 16);
          v659 = v657 + 16;
          v658 = v660;
          if (*(_BYTE *)(v660 + 488))
            goto LABEL_741;
        }
LABEL_749:
        memset(v1521, 0, sizeof(v1521));
        memset(object, 0, sizeof(object));
        v1496 = 0u;
        memset(v1497, 0, sizeof(v1497));
        memset(v1498, 0, 120);
        *(_QWORD *)(v658 + 40) = &off_24CA04D80;
        *(_QWORD *)(v658 + 48) = 0;
        *(_QWORD *)(v658 + 56) = 0;
        *(_QWORD *)(v658 + 64) = 0;
        *(_OWORD *)(v658 + 72) = *(__int128 *)((char *)&v1521[1] + 8);
        *(_QWORD *)(v658 + 88) = *((_QWORD *)&v1521[2] + 1);
        *(_BYTE *)(v658 + 96) = 1;
        *(_WORD *)(v658 + 97) = 0;
        *(_QWORD *)(v658 + 104) = 0;
        *(_QWORD *)(v658 + 112) = 0;
        *(_QWORD *)(v658 + 120) = 0;
        *(_QWORD *)(v658 + 128) = 0xFFEFFFFFFFFFFFFFLL;
        *(_QWORD *)(v658 + 136) = 0;
        *(_QWORD *)(v658 + 144) = 0x3FF0000000000000;
        *(_OWORD *)(v658 + 152) = 0u;
        *(_OWORD *)(v658 + 168) = 0u;
        *(_OWORD *)(v658 + 184) = 0u;
        *(_OWORD *)(v658 + 200) = 0u;
        *(_OWORD *)(v658 + 216) = 0u;
        *(_OWORD *)(v658 + 232) = 0u;
        v671 = *(_OWORD *)v1498;
        *(_OWORD *)(v658 + 280) = v1497[4];
        *(_OWORD *)(v658 + 296) = v671;
        v672 = *(_OWORD *)&v1498[32];
        *(_OWORD *)(v658 + 312) = *(_OWORD *)&v1498[16];
        *(_OWORD *)(v658 + 328) = v672;
        v673 = v1497[3];
        *(_OWORD *)(v658 + 248) = v1497[2];
        *(_OWORD *)(v658 + 264) = v673;
        *(_QWORD *)(v658 + 408) = *(_QWORD *)&v1498[112];
        v674 = *(_OWORD *)&v1498[96];
        *(_OWORD *)(v658 + 376) = *(_OWORD *)&v1498[80];
        *(_OWORD *)(v658 + 392) = v674;
        v675 = *(_OWORD *)&v1498[64];
        *(_OWORD *)(v658 + 344) = *(_OWORD *)&v1498[48];
        *(_OWORD *)(v658 + 360) = v675;
        *(float32x4_t *)(v658 + 416) = v1479;
        *(_WORD *)(v658 + 432) = 0;
        *(_BYTE *)(v658 + 440) = 0;
        *(_BYTE *)(v658 + 464) = 0;
        *(_QWORD *)(v658 + 472) = 0;
        *(_QWORD *)(v658 + 480) = 0xBFF0000000000000;
        *(_BYTE *)(v658 + 488) = 1;
        goto LABEL_750;
      }
LABEL_728:
      if ((v648 & (~v648 << 6) & 0x8080808080808080) != 0)
        break;
      v641 += 8;
    }
    v661 = sub_20F346A98(v588, v555);
    v662 = v588[1] + 32 * v661;
    *(_OWORD *)v662 = *(_OWORD *)object;
    *(_QWORD *)(v662 + 16) = v636;
    *(_QWORD *)(v662 + 24) = v638;
    v663 = v588[1] + 32 * v661;
    v664 = *(_QWORD *)(v663 + 16);
    v659 = v663 + 16;
    v658 = v664;
    if (!*(_BYTE *)(v664 + 488))
      goto LABEL_749;
LABEL_741:
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1397, (uint64_t)"!frontEndTrack->second->hasStructure()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v667 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v667 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v668 = qword_254A6DE40;
      for (i10 = qword_254A6DE48; v668 != i10; v668 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v668)(*(_QWORD *)(v668 + 8), "!frontEndTrack->second->hasStructure()", 38, "", 0);
    }
    v670 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v670 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "!frontEndTrack->second->hasStructure()", 38, "", 0);
    v658 = *(_QWORD *)v659;
    if (!*(_BYTE *)(*(_QWORD *)v659 + 488))
      goto LABEL_749;
LABEL_750:
    *(_QWORD *)(v658 + 64) = 0x7FF8000000000000;
    v27 = (float32x4_t)xmmword_2103BA988;
    *(_OWORD *)(v658 + 48) = xmmword_2103BA988;
    v676 = *(std::__shared_weak_count **)&__dst[8];
    if (*(_QWORD *)&__dst[8])
    {
      v677 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v678 = __ldaxr(v677);
      while (__stlxr(v678 - 1, v677));
      if (!v678)
      {
        ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
        std::__shared_weak_count::__release_weak(v676);
      }
    }
    v585 = *v1446;
    v584 = *v1450;
    goto LABEL_656;
  }
  v578 = v1445[7];
LABEL_905:
  v1465 = v1486;
  if (v1486 != v1430)
  {
    v1468 = v1445 + 59;
    v862 = v577;
    do
    {
      if (v862 == v578)
      {
        v862 = v578;
      }
      else
      {
        v863 = 0;
        v864 = 0;
        do
        {
          v865 = *(_QWORD *)(v578 + 24 * v863 + 8) - *(_QWORD *)(v578 + 24 * v863);
          if (v865)
          {
            v1435 = v864;
            v866 = 0;
            v1472 = (unsigned int *)(*v1431 + 32 * v863);
            v1437 = 0xFC0FC0FC0FC0FC1 * (v865 >> 3);
            v1440 = (void *)v863;
            do
            {
              v1480 = v866;
              v1448 = v866;
              v867 = 520 * v866;
              v868 = (_QWORD *)(*(_QWORD *)(v1445[6] + 24 * v863) + v867);
              v1444 = *(char **)(v1445[9] + 24 * v863);
              v869 = &v1444[v867];
              v870 = v868[63] - v868[62];
              v1456 = *((_QWORD *)v869 + 63);
              v1442 = v869;
              v1452 = *((_QWORD *)v869 + 62);
              if ((v870 & 0x3FFFFFFFCLL) != 0)
              {
                v871 = 0;
                v872 = a11[2];
                v1459 = (v870 >> 2);
                do
                {
                  v873 = v871 + 1;
                  v874 = *(unsigned int *)(v868[62] + 4 * v871);
                  if ((v874 & 0x80000000) == 0)
                  {
                    v875 = *(_DWORD *)(v868[16] + 8 * v871);
                    v876 = *(_DWORD *)v1465 - v875;
                    if ((v876 & 0x80000000) == 0)
                    {
                      v877 = v868[19];
                      v878 = *(_QWORD *)(v877 + 8 * v871);
                      if (v876 < (int)(*(_QWORD *)(v877 + 8 * v873) - v878))
                      {
                        if (*(_BYTE *)(v868[10] + v878 + v876))
                        {
                          v879 = 0;
                          _X9 = *v872;
                          __asm { PRFM            #4, [X9] }
                          v882 = v872[3];
                          for (i11 = (((0x9DDFEA08EB382D69 * v874 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                               * v874
                                                                                               + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
                                ;
                                i11 = v879 + v885)
                          {
                            v885 = i11 & v882;
                            v886 = *(_QWORD *)(_X9 + v885);
                            v884 = 0x101010101010101
                                 * (((105 * v874 - 27) ^ ((0x9DDFEA08EB382D69 * v874
                                                                                           + 0x376ADF16980614E5) >> 32)) & 0x7F);
                            v887 = ((v886 ^ v884) - 0x101010101010101) & ~(v886 ^ v884) & 0x8080808080808080;
                            if (v887)
                              break;
LABEL_931:
                            if ((v886 & (~v886 << 6) & 0x8080808080808080) != 0)
                              goto LABEL_934;
                            v879 += 8;
                          }
                          while (1)
                          {
                            v12 = v872[1] + 32 * ((v885 + (__clz(__rbit64(v887)) >> 3)) & v882);
                            if (!*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == (_DWORD)v874)
                              break;
                            v887 &= v887 - 1;
                            if (!v887)
                              goto LABEL_931;
                          }
                          if (!_X9)
                          {
LABEL_934:
                            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1170, (uint64_t)"track_iter != track_list->end()", 31, (uint64_t)"We should always be able to find a track", 40, (void (*)(void **))sub_21023DDB0);
                            v889 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                            if ((v889 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                            {
                              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A6DE78);
                            }
                            if (!byte_254A6DE68 || byte_254A6DE70)
                            {
                              v890 = qword_254A6DE40;
                              for (i12 = qword_254A6DE48; v890 != i12; v890 += 16)
                                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v890)(*(_QWORD *)(v890 + 8), "track_iter != track_list->end()", 31, "We should always be able to find a track", 40);
                            }
                            v892 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                            if ((v892 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                            {
                              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A6DE78);
                            }
                            if (!byte_254A6DE68)
                              abort();
                            qword_254A6DE58(unk_254A6DE60, "track_iter != track_list->end()", 31, "We should always be able to find a track", 40);
                          }
                          if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 504) == *(_QWORD *)(*(_QWORD *)(v12 + 16) + 496))
                          {
                            v893 = 0;
                            do
                              sub_20FB91E44(*v1472, v1480, (uint64_t)v868, v1468, v875, v871, v893++, (uint64_t)*a11, *(_QWORD *)(v12 + 16));
                            while (v876 + 1 != v893);
                          }
                          else
                          {
                            sub_20FB91E44(*v1472, v1480, (uint64_t)v868, v1468, v875, v871, v876, (uint64_t)*a11, *(_QWORD *)(v12 + 16));
                          }
                        }
                      }
                    }
                  }
                  ++v871;
                }
                while (v873 != v1459);
              }
              if (((v1456 - v1452) & 0x3FFFFFFFCLL) != 0)
              {
                v894 = 0;
                v895 = &v1444[520 * v1448];
                v1449 = a11[3];
                v1457 = ((unint64_t)(v1456 - v1452) >> 2);
                do
                {
                  v896 = 8 * (2 * v894);
                  v897 = *(_DWORD *)(*((_QWORD *)v895 + 16) + v896);
                  v898 = *((_QWORD *)v895 + 19);
                  v899 = (uint64_t *)(v898 + v896);
                  v900 = *v899;
                  v1462 = *((_QWORD *)v895 + 10);
                  LODWORD(v899) = *((_DWORD *)v899 + 2);
                  v12 = ((_DWORD)v899 - v900);
                  v901 = *(_DWORD *)(v898 + 8 * ((2 * (_DWORD)v894) | 1u) + 8) - (_DWORD)v899;
                  v902 = *((_QWORD *)v1442 + 62);
                  v903 = *(_DWORD *)v1465;
                  if ((_DWORD)v12 != v901)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1149, (uint64_t)"src_track_length == end_track_length", 36, (uint64_t)"source and end points must have same track length", 49, (void (*)(void **))sub_21023DDB0);
                    v1453 = v903;
                    v904 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v904 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v906 = qword_254A6DE40;
                      v905 = qword_254A6DE48;
                      while (v906 != v905)
                      {
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v906)(*(_QWORD *)(v906 + 8), "src_track_length == end_track_length", 36, "source and end points must have same track length", 49);
                        v906 += 16;
                      }
                    }
                    v907 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v907 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    v903 = v1453;
                    if (!byte_254A6DE68)
LABEL_1690:
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "src_track_length == end_track_length", 36, "source and end points must have same track length", 49);
                  }
                  v908 = *(unsigned int *)(v902 + 4 * v894);
                  if ((v908 & 0x80000000) == 0)
                  {
                    v909 = v903 - v897;
                    if ((v909 & 0x80000000) == 0)
                    {
                      v910 = v909 < (int)v12 && v909 < v901;
                      if (v910 && *(_BYTE *)(v1462 + v900 + v909))
                      {
                        v911 = 0;
                        _X9 = *v1449;
                        __asm { PRFM            #4, [X9] }
                        v914 = v1449[3];
                        for (i13 = (((0x9DDFEA08EB382D69 * v908 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                             * v908
                                                                                             + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
                              ;
                              i13 = v911 + v917)
                        {
                          v917 = i13 & v914;
                          v918 = *(_QWORD *)(_X9 + v917);
                          v916 = 0x101010101010101
                               * (((105 * v908 - 27) ^ ((0x9DDFEA08EB382D69 * v908
                                                                                         + 0x376ADF16980614E5) >> 32)) & 0x7F);
                          v919 = ((v918 ^ v916) - 0x101010101010101) & ~(v918 ^ v916) & 0x8080808080808080;
                          if (v919)
                            break;
LABEL_979:
                          if ((v918 & (~v918 << 6) & 0x8080808080808080) != 0)
                            goto LABEL_982;
                          v911 += 8;
                        }
                        while (1)
                        {
                          v12 = v1449[1] + 32 * ((v917 + (__clz(__rbit64(v919)) >> 3)) & v914);
                          if (!*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == (_DWORD)v908)
                            break;
                          v919 &= v919 - 1;
                          if (!v919)
                            goto LABEL_979;
                        }
                        if (!_X9)
                        {
LABEL_982:
                          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1170, (uint64_t)"track_iter != track_list->end()", 31, (uint64_t)"We should always be able to find a track", 40, (void (*)(void **))sub_21023DDB0);
                          v921 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                          if ((v921 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                          {
                            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DE78);
                          }
                          if (!byte_254A6DE68 || byte_254A6DE70)
                          {
                            v922 = qword_254A6DE40;
                            for (i14 = qword_254A6DE48; v922 != i14; v922 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v922)(*(_QWORD *)(v922 + 8), "track_iter != track_list->end()", 31, "We should always be able to find a track", 40);
                          }
                          v924 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                          if ((v924 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                          {
                            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DE78);
                          }
                          if (!byte_254A6DE68)
                            goto LABEL_1690;
                          qword_254A6DE58(unk_254A6DE60, "track_iter != track_list->end()", 31, "We should always be able to find a track", 40);
                        }
                        if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 984) == *(_QWORD *)(*(_QWORD *)(v12 + 16) + 976))
                        {
                          v925 = 0;
                          do
                            sub_20FB93534(*v1472, v1480, v895, v1468, v897, (2 * v894), v925++, (uint64_t)*a11, v27, *(_QWORD **)(v12 + 16));
                          while (v909 + 1 != v925);
                        }
                        else
                        {
                          sub_20FB93534(*v1472, v1480, v895, v1468, v897, (2 * v894), v909, (uint64_t)*a11, v27, *(_QWORD **)(v12 + 16));
                        }
                      }
                    }
                  }
                  ++v894;
                }
                while (v894 != v1457);
              }
              v866 = v1480 + 1;
              v863 = (unint64_t)v1440;
            }
            while (v1480 + 1 != v1437);
            v578 = v1445[6];
            v577 = v1445[7];
            v864 = v1435;
          }
          v862 = v577;
          v863 = ++v864;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v577 - v578) >> 3) > v864);
      }
      v1465 += 4;
    }
    while (v1465 != v1430);
  }
  memset(v1518, 0, 24);
  v926 = (_QWORD *)(*a11)[6];
  v927 = (uint64_t)(*a11 + 7);
  if (v926 == (_QWORD *)v927)
    goto LABEL_1686;
  v928 = 0;
  v929 = 0;
  v1458 = 0;
  while (2)
  {
    v930 = *((_DWORD *)v926 + 10);
    v932 = (_DWORD *)v1432[25];
    v931 = (_DWORD *)v1432[26];
    if (v932 != v931)
    {
      while (*v932 != v930)
      {
        if (++v932 == v931)
        {
          v932 = (_DWORD *)v1432[26];
          break;
        }
      }
    }
    if (v932 == v931)
    {
      if (v1458 < v929)
      {
        *(_DWORD *)v1458 = v930;
        *(_QWORD *)&v1518[8] = v1458 + 4;
        v1458 += 4;
        v933 = (_QWORD *)v926[1];
        if (!v933)
          goto LABEL_1032;
        goto LABEL_1030;
      }
      v934 = (v1458 - v928) >> 2;
      v935 = v934 + 1;
      if ((unint64_t)(v934 + 1) >> 62)
        sub_20E867F44();
      if ((v929 - v928) >> 1 > v935)
        v935 = (v929 - v928) >> 1;
      if ((unint64_t)(v929 - v928) >= 0x7FFFFFFFFFFFFFFCLL)
        v936 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v936 = v935;
      if (v936)
      {
        if (v936 >> 62)
          sub_20E877A38();
        v937 = operator new(4 * v936);
        v938 = &v937[4 * v934];
        *(_DWORD *)v938 = v930;
        v939 = (uint64_t)(v938 + 4);
        v940 = v1458 - v928;
        if (v1458 != v928)
        {
LABEL_1024:
          v941 = v940 - 4;
          if (v941 < 0xBC
            || (v945 = (v1458 - 4 - v928) & 0xFFFFFFFFFFFFFFFCLL,
                &v937[v1458 - v928 - 4 - v945] > &v937[v1458 - v928 - 4])
            || &v1458[-v945 - 4] > v1458 - 4)
          {
            v942 = v1458;
          }
          else if ((unint64_t)(v928 - v937) >= 0x20)
          {
            v946 = (v941 >> 2) + 1;
            v947 = 4 * (v946 & 0x7FFFFFFFFFFFFFF8);
            v942 = &v1458[-v947];
            v938 -= v947;
            v948 = &v937[4 * v934 - 16];
            v949 = v1458 - 16;
            v950 = v946 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v951 = *(_OWORD *)v949;
              *(v948 - 1) = *((_OWORD *)v949 - 1);
              *v948 = v951;
              v948 -= 2;
              v949 -= 32;
              v950 -= 8;
            }
            while (v950);
            if (v946 == (v946 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_1027:
              v929 = &v937[4 * v936];
              *(_QWORD *)v1518 = v938;
              *(_QWORD *)&v1518[8] = v939;
              *(_QWORD *)&v1518[16] = v929;
              if (!v928)
              {
LABEL_1029:
                v928 = v938;
                *(_QWORD *)&v1518[8] = v939;
                v1458 = (char *)v939;
                v933 = (_QWORD *)v926[1];
                if (v933)
                  goto LABEL_1030;
                do
                {
LABEL_1032:
                  v944 = (_QWORD *)v926[2];
                  _ZF = *v944 == (_QWORD)v926;
                  v926 = v944;
                }
                while (!_ZF);
                goto LABEL_1004;
              }
LABEL_1028:
              operator delete(v928);
              goto LABEL_1029;
            }
          }
          else
          {
            v942 = v1458;
          }
          do
          {
            v943 = *((_DWORD *)v942 - 1);
            v942 -= 4;
            *((_DWORD *)v938 - 1) = v943;
            v938 -= 4;
          }
          while (v942 != v928);
          goto LABEL_1027;
        }
      }
      else
      {
        v937 = 0;
        v938 = (char *)(4 * v934);
        *(_DWORD *)(4 * v934) = v930;
        v939 = 4 * v934 + 4;
        v940 = v1458 - v928;
        if (v1458 != v928)
          goto LABEL_1024;
      }
      v929 = &v937[4 * v936];
      *(_QWORD *)v1518 = v938;
      *(_QWORD *)&v1518[8] = v939;
      *(_QWORD *)&v1518[16] = v929;
      if (!v928)
        goto LABEL_1029;
      goto LABEL_1028;
    }
    v933 = (_QWORD *)v926[1];
    if (!v933)
      goto LABEL_1032;
    do
    {
LABEL_1030:
      v944 = v933;
      v933 = (_QWORD *)*v933;
    }
    while (v933);
LABEL_1004:
    v926 = v944;
    if (v944 != (_QWORD *)v927)
      continue;
    break;
  }
  v1438 = *(void **)v1518;
  if (*(char **)v1518 == v1458)
    goto LABEL_1684;
  v952 = *(char **)v1518;
  while (2)
  {
    v953 = *(unsigned int *)v952;
    *(_QWORD *)v1517 = 0;
    *(_QWORD *)&v1517[8] = v953;
    v954 = (*a11)[7];
    v1454 = v952;
    if (!v954)
      goto LABEL_1091;
    v955 = (uint64_t)(*a11 + 7);
    do
    {
      while (*(_QWORD *)(v954 + 32))
      {
        v955 = v954;
        v954 = *(_QWORD *)v954;
        if (!v954)
          goto LABEL_1056;
      }
      if (*(_DWORD *)(v954 + 40) < v953)
        v954 += 8;
      else
        v955 = v954;
      v954 = *(_QWORD *)v954;
    }
    while (v954);
LABEL_1056:
    if ((_QWORD *)v955 == *a11 + 7
      || *(_QWORD *)(v955 + 32)
      || *(_DWORD *)(v955 + 40) > v953
      || !*(_QWORD *)(v955 + 48))
    {
LABEL_1091:
      sub_20F9B2A4C(v1516);
      if (**(int **)(*(_QWORD *)v1516 + 56) > 4
        || ((v977 = *(unsigned __int8 *)(*(_QWORD *)v1516 + 72),
             v978 = sub_20E8C31DC(*(uint64_t *)v1516, "OSLogSurrogateAppender", 1, 0),
             v979 = v978,
             !v977)
          ? (v980 = v978 == 0)
          : (v980 = 0),
            v980))
      {
LABEL_1184:
        v1036 = v1454;
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 1214, (uint64_t)"ret", 3, (uint64_t)"We fail to remove states which should not happen", 48, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        goto LABEL_1185;
      }
      *(_QWORD *)&v1521[0] = v1516;
      *((std::chrono::steady_clock::time_point *)&v1521[0] + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v1521[1] = std::chrono::system_clock::now();
      DWORD2(v1521[1]) = 4;
      *(_QWORD *)&v1521[2] = "unknown file";
      DWORD2(v1521[2]) = 408;
      v1522[0].i64[0] = (uint64_t)"unknown function";
      v1522[0].i64[1] = 0;
      v1522[1].i64[0] = 0;
      v981 = **(_QWORD **)&v1521[0];
      v982 = **(_QWORD **)&v1521[0] + 16;
      if (*(char *)(**(_QWORD **)&v1521[0] + 39) < 0)
      {
        v984 = *(const char **)(v981 + 16);
        v983 = *(_QWORD *)(v981 + 24);
        v1481 = *(_DWORD *)&v1517[8];
        v986 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v986 & 1) != 0)
          goto LABEL_1100;
      }
      else
      {
        v983 = *(unsigned __int8 *)(**(_QWORD **)&v1521[0] + 39);
        v984 = (const char *)(**(_QWORD **)&v1521[0] + 16);
        v1481 = *(_DWORD *)&v1517[8];
        v985 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v985 & 1) != 0)
          goto LABEL_1100;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
        if (__dst[24] && (__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1100:
      if (byte_254A4A4F8[23] >= 0)
        v987 = byte_254A4A4F8;
      else
        v987 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v988 = byte_254A4A4F8[23];
      else
        v988 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v987, v984);
      if (v988 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v1473 = v984;
      if (v988 >= 0x17)
      {
        v1469 = v983;
        v990 = v979;
        v991 = v982;
        v992 = v981;
        v993 = v977;
        v994 = (v988 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v988 | 7) != 0x17)
          v994 = v988 | 7;
        v995 = v994 + 1;
        v989 = (void **)operator new(v994 + 1);
        object[3] = (void *)(v995 | 0x8000000000000000);
        object[1] = v989;
        object[2] = (void *)v988;
        v977 = v993;
        v981 = v992;
        v982 = v991;
        v979 = v990;
        v983 = v1469;
      }
      else
      {
        HIBYTE(object[3]) = v988;
        v989 = &object[1];
        if (!v988)
        {
LABEL_1114:
          *((_BYTE *)v989 + v988) = 0;
          LOBYTE(object[4]) = 1;
          if (v983 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v983 >= 0x17)
          {
            v998 = (v983 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v983 | 7) != 0x17)
              v998 = v983 | 7;
            v999 = v998 + 1;
            v996 = (void **)operator new(v998 + 1);
            *((_QWORD *)&v1496 + 1) = v999 | 0x8000000000000000;
            object[5] = v996;
            *(_QWORD *)&v1496 = v983;
          }
          else
          {
            HIBYTE(v1496) = v983;
            v996 = &object[5];
            if (!v983)
            {
              LOBYTE(object[5]) = 0;
              LOBYTE(v1497[0]) = 1;
              v997 = object[0];
              if ((SHIBYTE(v1496) & 0x80000000) == 0)
                goto LABEL_1118;
              goto LABEL_1124;
            }
          }
          memmove(v996, v1473, v983);
          *((_BYTE *)v996 + v983) = 0;
          LOBYTE(v1497[0]) = 1;
          v997 = object[0];
          if ((SHIBYTE(v1496) & 0x80000000) == 0)
          {
LABEL_1118:
            if (!LOBYTE(object[4]))
              goto LABEL_1127;
            goto LABEL_1125;
          }
LABEL_1124:
          operator delete(object[5]);
          if (!LOBYTE(object[4]))
          {
LABEL_1127:
            if (object[0])
              os_release(object[0]);
            if (v979 && *(_QWORD *)(v979 + 24))
            {
              v1000 = _os_log_pack_size();
              v1001 = (std::__shared_weak_count_vtbl *)operator new(v1000, (std::align_val_t)8uLL);
              v1002 = (std::__shared_weak_count *)operator new();
              v1003 = v1002;
              v1002->__shared_owners_ = 0;
              v1004 = (unint64_t *)&v1002->__shared_owners_;
              v1002->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1002->__shared_weak_owners_ = 0;
              v1002[1].__vftable = v1001;
              object[0] = v1001;
              object[1] = v1001;
              object[2] = v1002;
              do
                v1005 = __ldxr(v1004);
              while (__stxr(v1005 + 1, v1004));
              memset(&object[3], 0, 24);
              do
                v1006 = __ldaxr(v1004);
              while (__stlxr(v1006 - 1, v1004));
              if (!v1006)
              {
                ((void (*)(std::__shared_weak_count *))v1002->__on_zero_shared)(v1002);
                std::__shared_weak_count::__release_weak(v1003);
              }
              v1007 = object[0];
              v1008 = (_DWORD *)_os_log_pack_fill();
              *v1008 = 67109120;
              v1008[1] = v1481;
              v1009 = operator new();
              v1010 = *(unsigned __int8 *)(v981 + 39);
              if ((v1010 & 0x80u) == 0)
                v1011 = v982;
              else
                v1011 = *(_QWORD *)(v981 + 16);
              if ((v1010 & 0x80u) != 0)
                v1010 = *(_QWORD *)(v981 + 24);
              *(_QWORD *)v1009 = v1007;
              *(_OWORD *)(v1009 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v1009 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v1009 + 40) = v1011;
              *(_QWORD *)(v1009 + 48) = v1010;
              *(_BYTE *)(v1009 + 56) = 16;
              *(_QWORD *)&v1488 = 0;
              *(_QWORD *)__dst = v1009;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v979 + 24) + 40))(*(_QWORD *)(v979 + 24), __dst);
              v1012 = *(_QWORD *)__dst;
              *(_QWORD *)__dst = 0;
              if (v1012)
              {
                v1013 = *(std::__shared_weak_count **)(v1012 + 32);
                if (v1013)
                {
                  v1014 = (unint64_t *)&v1013->__shared_owners_;
                  do
                    v1015 = __ldaxr(v1014);
                  while (__stlxr(v1015 - 1, v1014));
                  if (!v1015)
                  {
                    ((void (*)(std::__shared_weak_count *))v1013->__on_zero_shared)(v1013);
                    std::__shared_weak_count::__release_weak(v1013);
                  }
                }
                v1016 = *(std::__shared_weak_count **)(v1012 + 16);
                if (v1016)
                {
                  v1017 = (unint64_t *)&v1016->__shared_owners_;
                  do
                    v1018 = __ldaxr(v1017);
                  while (__stlxr(v1018 - 1, v1017));
                  if (!v1018)
                  {
                    ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
                    std::__shared_weak_count::__release_weak(v1016);
                  }
                }
                MEMORY[0x212BC6398](v1012, 0x10F0C40B62ED6C6);
                v1019 = v1488;
                *(_QWORD *)&v1488 = 0;
                if (v1019)
                {
                  v1020 = *(std::__shared_weak_count **)(v1019 + 32);
                  if (v1020)
                  {
                    v1021 = (unint64_t *)&v1020->__shared_owners_;
                    do
                      v1022 = __ldaxr(v1021);
                    while (__stlxr(v1022 - 1, v1021));
                    if (!v1022)
                    {
                      ((void (*)(std::__shared_weak_count *))v1020->__on_zero_shared)(v1020);
                      std::__shared_weak_count::__release_weak(v1020);
                    }
                  }
                  v1023 = *(std::__shared_weak_count **)(v1019 + 16);
                  if (v1023)
                  {
                    v1024 = (unint64_t *)&v1023->__shared_owners_;
                    do
                      v1025 = __ldaxr(v1024);
                    while (__stlxr(v1025 - 1, v1024));
                    if (!v1025)
                    {
                      ((void (*)(std::__shared_weak_count *))v1023->__on_zero_shared)(v1023);
                      std::__shared_weak_count::__release_weak(v1023);
                    }
                  }
                  MEMORY[0x212BC6398](v1019, 0x10F0C40B62ED6C6);
                }
              }
              v1026 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v1027 = (unint64_t *)((char *)object[4] + 8);
                do
                  v1028 = __ldaxr(v1027);
                while (__stlxr(v1028 - 1, v1027));
                if (!v1028)
                {
                  ((void (*)(std::__shared_weak_count *))v1026->__on_zero_shared)(v1026);
                  std::__shared_weak_count::__release_weak(v1026);
                }
              }
              v1029 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v1030 = (unint64_t *)((char *)object[2] + 8);
                do
                  v1031 = __ldaxr(v1030);
                while (__stlxr(v1031 - 1, v1030));
                if (!v1031)
                {
                  ((void (*)(std::__shared_weak_count *))v1029->__on_zero_shared)(v1029);
                  std::__shared_weak_count::__release_weak(v1029);
                }
              }
            }
            else
            {
              os_log_type_enabled(v997, OS_LOG_TYPE_ERROR);
              LODWORD(object[0]) = 67109120;
              HIDWORD(object[0]) = v1481;
              v1032 = (void *)_os_log_send_and_compose_impl();
              if (v1032)
                free(v1032);
            }
            if (v977)
            {
              sub_20E8C003C((uint64_t)v1521, "Failed to prune a candidate state (view: %d)", *(_DWORD *)&v1517[8]);
              sub_20E863570((uint64_t)v1521);
            }
            sub_20E863570((uint64_t)v1521);
            v1033 = (std::__shared_weak_count *)v1522[1].i64[0];
            if (v1522[1].i64[0])
            {
              v1034 = (unint64_t *)(v1522[1].i64[0] + 8);
              do
                v1035 = __ldaxr(v1034);
              while (__stlxr(v1035 - 1, v1034));
              if (!v1035)
              {
                ((void (*)(std::__shared_weak_count *))v1033->__on_zero_shared)(v1033);
                std::__shared_weak_count::__release_weak(v1033);
              }
            }
            goto LABEL_1184;
          }
LABEL_1125:
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          goto LABEL_1127;
        }
      }
      memmove(v989, v987, v988);
      goto LABEL_1114;
    }
    memset(object, 0, 24);
    v956 = (char **)a11[2];
    v957 = *v956;
    v958 = v956[1];
    v959 = **v956;
    if (v959 <= -2)
    {
      do
      {
        v960 = (__clz(__rbit64(((*v957 >> 7) & ~*v957 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v957 = (_QWORD *)((char *)v957 + v960);
        v958 += 32 * v960;
        v959 = *(char *)v957;
      }
      while (v959 < -1);
    }
    if (v959 == 255)
    {
      v961 = 0;
      v1370 = (char **)a11[3];
      v1039 = *v1370;
      v1040 = v1370[1];
      v1041 = **v1370;
      if (v1041 > -2)
        goto LABEL_1190;
      goto LABEL_1189;
    }
    v961 = 0;
    v962 = 0;
    v963 = 0;
    while (2)
    {
      v964 = *((_QWORD *)v958 + 2);
      if (*(_BYTE *)(v964 + 488))
        v965 = v964 + 40;
      else
        v965 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v965 + 24))(v965, v555, v556)&& (sub_20FB4381C((uint64_t)v1517, (uint64_t)*a11, *((_QWORD *)v958 + 2)) & 1) == 0)
      {
        if (v963 < v962)
        {
          *(_OWORD *)v963 = *(_OWORD *)v958;
          v963 += 16;
          goto LABEL_1085;
        }
        v966 = (v963 - v961) >> 4;
        v967 = v966 + 1;
        if ((unint64_t)(v966 + 1) >> 60)
          sub_20E867F44();
        if ((v962 - v961) >> 3 > v967)
          v967 = (v962 - v961) >> 3;
        if ((unint64_t)(v962 - v961) >= 0x7FFFFFFFFFFFFFF0)
          v968 = 0xFFFFFFFFFFFFFFFLL;
        else
          v968 = v967;
        if (v968)
        {
          if (v968 >> 60)
            sub_20E877A38();
          v969 = (char *)operator new(16 * v968);
          v970 = &v969[16 * v966];
          *(_OWORD *)v970 = *(_OWORD *)v958;
          for (i15 = v970; v963 != v961; *((_DWORD *)i15 + 2) = v973)
          {
LABEL_1081:
            v972 = *((_QWORD *)v963 - 2);
            v963 -= 16;
            v973 = *((_DWORD *)v963 + 2);
            *((_QWORD *)i15 - 2) = v972;
            i15 -= 16;
          }
        }
        else
        {
          v969 = 0;
          v970 = (char *)(16 * v966);
          *(_OWORD *)(16 * v966) = *(_OWORD *)v958;
          i15 = (char *)(16 * v966);
          if (v963 != v961)
            goto LABEL_1081;
        }
        v962 = &v969[16 * v968];
        v963 = v970 + 16;
        object[0] = i15;
        object[2] = v962;
        if (v961)
          operator delete(v961);
        v961 = i15;
LABEL_1085:
        object[1] = v963;
      }
      v975 = *((char *)v957 + 1);
      v957 = (_QWORD *)((char *)v957 + 1);
      LOBYTE(v974) = v975;
      v958 += 32;
      if (v975 <= -2)
      {
        do
        {
          v976 = (__clz(__rbit64(((*v957 >> 7) & ~*v957 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v957 = (_QWORD *)((char *)v957 + v976);
          v958 += 32 * v976;
          v974 = *(char *)v957;
        }
        while (v974 < -1);
      }
      if (v974 != 255)
        continue;
      break;
    }
    for (i16 = v961; i16 != v963; i16 += 16)
    {
      v1097 = 0;
      v1113 = a11[2];
      v1114 = *((_QWORD *)i16 + 1);
      _X24 = *v1113;
      __asm { PRFM            #4, [X24] }
      v1117 = (0x9DDFEA08EB382D69 * v1114 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                    * v1114
                                                                                    + 0x376ADF16980614E5) >> 32);
      v1118 = v1113[3];
      v1098 = (v1117 >> 7) ^ 0x13701D;
      v1119 = 0x101010101010101 * (v1117 & 0x7F);
      while (1)
      {
        v1091 = v1098 & v1118;
        v1092 = *(_QWORD *)(_X24 + v1091);
        v1093 = ((v1092 ^ v1119) - 0x101010101010101) & ~(v1092 ^ v1119) & 0x8080808080808080;
        if (v1093)
          break;
LABEL_1277:
        if ((v1092 & (~v1092 << 6) & 0x8080808080808080) != 0)
          goto LABEL_1295;
        v1097 += 8;
        v1098 = v1097 + v1091;
      }
      while (1)
      {
        v1094 = (v1091 + (__clz(__rbit64(v1093)) >> 3)) & v1118;
        v1095 = v1113[1] + 32 * v1094;
        if (*(_QWORD *)v1095 == *(_QWORD *)i16 && *(_DWORD *)(v1095 + 8) == (_DWORD)v1114)
          break;
        v1093 &= v1093 - 1;
        if (!v1093)
          goto LABEL_1277;
      }
      if (_X24)
      {
        v1099 = *(std::__shared_weak_count **)(v1095 + 24);
        if (v1099)
        {
          v1100 = (unint64_t *)&v1099->__shared_owners_;
          do
            v1101 = __ldaxr(v1100);
          while (__stlxr(v1101 - 1, v1100));
          if (!v1101)
          {
            ((void (*)(std::__shared_weak_count *))v1099->__on_zero_shared)(v1099);
            std::__shared_weak_count::__release_weak(v1099);
          }
        }
        v1102 = v1113[3];
        --v1113[2];
        v1103 = *v1113;
        v1104 = _X24 + v1094 - *v1113;
        v1105 = *(_QWORD *)(*v1113 + ((v1104 - 8) & v1102));
        v1106 = *(_QWORD *)(_X24 + v1094) & (~*(_QWORD *)(_X24 + v1094) << 6) & 0x8080808080808080;
        v1107 = v1105 & (~v1105 << 6) & 0x8080808080808080;
        if (v1107)
          v1108 = v1106 == 0;
        else
          v1108 = 1;
        if (v1108)
        {
          v1112 = 0;
          v1109 = -2;
        }
        else
        {
          v1110 = (__clz(v1107) >> 3) + (__clz(__rbit64(v1106)) >> 3);
          v1111 = v1110 >= 8;
          v1112 = v1110 < 8;
          if (v1111)
            v1109 = -2;
          else
            v1109 = 0x80;
        }
        *(_BYTE *)(v1103 + v1104) = v1109;
        *(_BYTE *)(v1103 + ((v1104 - 7) & v1102) + (v1102 & 7)) = v1109;
        v1113[4] += v1112;
      }
LABEL_1295:
      ;
    }
    v1038 = (char **)a11[3];
    v1039 = *v1038;
    v1040 = v1038[1];
    v1041 = **v1038;
    if (v1041 > -2)
      goto LABEL_1190;
    do
    {
LABEL_1189:
      v1042 = (__clz(__rbit64(((*v1039 >> 7) & ~*v1039 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v1039 = (_QWORD *)((char *)v1039 + v1042);
      v1040 += 32 * v1042;
      v1041 = *(char *)v1039;
    }
    while (v1041 < -1);
LABEL_1190:
    if (v1041 != 255)
    {
      v1043 = *((_QWORD *)v1040 + 2);
      v1044 = v1043 + 40;
      if (*(_BYTE *)(v1043 + 968))
        v1045 = v1043 + 40;
      else
        v1045 = 0;
      if (!*(_QWORD *)(v1045 + 920))
        goto LABEL_1260;
      v1046 = *(_QWORD *)v1517;
      if (*(_QWORD *)v1517 != *(_QWORD *)(v1045 + 896))
        goto LABEL_1260;
      if (*(_DWORD *)&v1517[8] != *(_DWORD *)(v1045 + 904))
        goto LABEL_1260;
      v1047 = *(uint64_t **)(v1043 + 976);
      v1048 = *(uint64_t **)(v1043 + 984);
      if (v1047 == v1048)
        goto LABEL_1260;
      v1049 = (uint64_t)*a11;
      while (1)
      {
        v1050 = *((_DWORD *)v1047 + 2);
        if (*v1047 != *(_QWORD *)v1517)
          break;
        if (v1050 != *(_DWORD *)&v1517[8])
          goto LABEL_1204;
        v1047 += 19;
        if (v1047 == v1048)
          goto LABEL_1260;
      }
      v1046 = *v1047;
LABEL_1204:
      v1051 = *(int8x8_t *)(v1049 + 1792);
      if (!*(_QWORD *)&v1051)
        goto LABEL_1230;
      v1052 = *((_DWORD *)v1047 + 4);
      v1053 = v1050 ^ __ROR4__(v1052, 13);
      v1054 = (uint8x8_t)vcnt_s8(v1051);
      v1054.i16[0] = vaddlv_u8(v1054);
      if (v1054.u32[0] > 1uLL)
      {
        v1055 = v1053;
        if (*(_QWORD *)&v1051 <= v1053)
          v1055 = v1053 % *(_QWORD *)&v1051;
      }
      else
      {
        v1055 = (v1051.i32[0] - 1) & v1053;
      }
      v1056 = *(uint64_t ***)(*(_QWORD *)(v1049 + 1784) + 8 * v1055);
      if (!v1056 || (v1057 = *v1056) == 0)
      {
LABEL_1230:
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 193, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"Cannot find the pose ref", 24, (void (*)(void **))sub_21023DDB0))
        {
          v1062 = 0;
          v1061 = 1;
          if (!MEMORY[0x40])
            goto LABEL_1232;
          goto LABEL_1233;
        }
        goto LABEL_1704;
      }
      if (v1054.u32[0] < 2uLL)
      {
        v1058 = *(_QWORD *)&v1051 - 1;
        while (1)
        {
          v1060 = v1057[1];
          if (v1060 == v1053)
          {
            if (*((_DWORD *)v1057 + 8) == v1052 && v1057[2] == v1046 && *((_DWORD *)v1057 + 6) == v1050)
              goto LABEL_1228;
          }
          else if ((v1060 & v1058) != v1055)
          {
            goto LABEL_1230;
          }
          v1057 = (uint64_t *)*v1057;
          if (!v1057)
            goto LABEL_1230;
        }
      }
      while (1)
      {
        v1059 = v1057[1];
        if (v1059 == v1053)
        {
          if (*((_DWORD *)v1057 + 8) == v1052 && v1057[2] == v1046 && *((_DWORD *)v1057 + 6) == v1050)
          {
LABEL_1228:
            v1061 = 0;
            v1062 = v1057 + 5;
            if (v1057[13])
              goto LABEL_1233;
LABEL_1232:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 196, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1704;
            }
LABEL_1233:
            if (!*(_BYTE *)(v1043 + 968))
              v1044 = 0;
            if ((v1061 & 1) != 0)
              goto LABEL_1252;
            _Q0 = *((float64x2_t *)v1047 + 7);
            _Q1 = *((float64x2_t *)v1047 + 8);
            v1065 = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
            _D4 = v1047[15];
            __asm { FMLA            D3, D4, V0.D[1] }
            v1068 = 1.0 / sqrt(_D3 + 1.0);
            v1069 = (int8x16_t)vmulq_n_f64(_Q0, v1068);
            _D3 = v1047[17];
            __asm { FMLA            D0, D3, V1.D[1] }
            v1466 = v1068;
            v1470 = 1.0 / sqrt(_Q0.f64[0] + 1.0);
            v1482 = (int8x16_t)vmulq_n_f64(_Q1, v1470);
            *(_QWORD *)&v1474 = vextq_s8(v1482, v1482, 8uLL).u64[0];
            _Q0.f64[0] = v1065 * v1068;
            v1460 = *(double *)vextq_s8(v1069, v1069, 8uLL).i64;
            v1463 = *(double *)v1069.i64;
            *(_QWORD *)&v1071.f64[0] = v1069.i64[0];
            v1071.f64[1] = v1460;
            v1072 = fabs(sqrt(vmulq_f64(v1071, v1071).f64[0] + _Q0.f64[0] * v1460 + v1068 * v1068) + -1.0);
            if (v1072 <= 0.000001)
            {
              *(_QWORD *)&v1073.f64[0] = v1482.i64[0];
              v1073.f64[1] = v1474;
              if (fabs(sqrt(vmulq_f64(v1073, v1073).f64[0]+ *(double *)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).i64 * v1470 * v1474+ v1470 * v1470)+ -1.0) <= 0.000001)goto LABEL_1246;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIOAnchoredLine3D.hpp", 45, (uint64_t)"std::fabs(vio::math::L2Norm3(src_anchor_direction.data()) - 1) <= 1e-6 && std::fabs(vio::math::L2Norm3(end_anchor_direction.data()) - 1) <= 1e-6", 144, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0);
            v1074 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v1074 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v1075 = qword_254A6DE40;
              for (i17 = qword_254A6DE48; v1075 != i17; v1075 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1075)(*(_QWORD *)(v1075 + 8), "std::fabs(vio::math::L2Norm3(src_anchor_direction.data()) - 1) <= 1e-6 && std::fabs(vio::math::L2Norm3(end_anchor_direction.data()) - 1) <= 1e-6", 144, "anchor direction should be normalized to 1", 42);
            }
            v1077 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v1077 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_1710;
            qword_254A6DE58(unk_254A6DE60, "std::fabs(vio::math::L2Norm3(src_anchor_direction.data()) - 1) <= 1e-6 && std::fabs(vio::math::L2Norm3(end_anchor_direction.data()) - 1) <= 1e-6", 144, "anchor direction should be normalized to 1", 42);
            v1078.f64[0] = v1463;
            v1078.f64[1] = v1460;
            v1072 = fabs(sqrt(vmulq_f64(v1078, v1078).f64[0] + v1460 * v1460 + v1466 * v1466) + -1.0);
LABEL_1246:
            v1079 = *(_OWORD *)v1047;
            *(_DWORD *)(v1044 + 912) = *((_DWORD *)v1047 + 4);
            *(_OWORD *)(v1044 + 896) = v1079;
            *(_QWORD *)(v1044 + 920) = v1062;
            if (v1072 > 0.000001
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1710;
            }
            v1080 = *(_OWORD *)v1047;
            *(_DWORD *)(v1044 + 48) = *((_DWORD *)v1047 + 4);
            *(_OWORD *)(v1044 + 32) = v1080;
            *(float64_t *)&v1081 = v1463;
            *((double *)&v1081 + 1) = v1460;
            *(double *)(v1044 + 80) = v1466;
            *(_OWORD *)(v1044 + 64) = v1081;
            *(_QWORD *)(v1044 + 88) = 0xFFEFFFFFFFFFFFFFLL;
            *(_QWORD *)(v1044 + 96) = v1062;
            v1082 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1044 + 16))(v1044);
            *(_QWORD *)&v1083.f64[0] = v1482.i64[0];
            v1083.f64[1] = v1474;
            if (fabs(sqrt(vmulq_f64(v1083, v1083).f64[0] + v1474 * v1474 + v1470 * v1470) + -1.0) > 0.000001
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
            {
LABEL_1710:
              abort();
            }
            v1084 = *(_OWORD *)v1047;
            *(_DWORD *)(v1044 + 496) = *((_DWORD *)v1047 + 4);
            *(_OWORD *)(v1044 + 480) = v1084;
            *(_QWORD *)(v1044 + 544) = v1062;
            *(double *)(v1044 + 528) = v1470;
            *(_QWORD *)&v1084 = v1482.i64[0];
            *((double *)&v1084 + 1) = v1474;
            *(_OWORD *)(v1044 + 512) = v1084;
            *(_QWORD *)(v1044 + 536) = 0xFFEFFFFFFFFFFFFFLL;
            if ((v1082 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1044 + 448) + 16))(v1044 + 448)) != 1
              || !*(_QWORD *)(v1044 + 920))
            {
LABEL_1252:
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 210, (uint64_t)"ret", 3, (uint64_t)"When re-anchoring, failed to set anchor for track using frame ", 62, (void (*)(void **))sub_21023DDB0);
              v1085 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v1085 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v1086 = qword_254A6DE40;
                for (i18 = qword_254A6DE48; v1086 != i18; v1086 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1086)(*(_QWORD *)(v1086 + 8), "ret", 3, "When re-anchoring, failed to set anchor for track using frame ", 62);
              }
              v1088 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v1088 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (byte_254A6DE68)
              {
                qword_254A6DE58(unk_254A6DE60, "ret", 3, "When re-anchoring, failed to set anchor for track using frame ", 62);
                goto LABEL_1260;
              }
LABEL_1704:
              abort();
            }
LABEL_1260:
            v1089 = *((char *)v1039 + 1);
            v1039 = (_QWORD *)((char *)v1039 + 1);
            LOBYTE(v1041) = v1089;
            v1040 += 32;
            if (v1089 <= -2)
            {
              do
              {
                v1090 = (__clz(__rbit64(((*v1039 >> 7) & ~*v1039 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v1039 = (_QWORD *)((char *)v1039 + v1090);
                v1040 += 32 * v1090;
                v1041 = *(char *)v1039;
              }
              while (v1041 < -1);
            }
            goto LABEL_1190;
          }
        }
        else
        {
          if (v1059 >= *(_QWORD *)&v1051)
            v1059 %= *(_QWORD *)&v1051;
          if (v1059 != v1055)
            goto LABEL_1230;
        }
        v1057 = (uint64_t *)*v1057;
        if (!v1057)
          goto LABEL_1230;
      }
    }
    v1120 = (char **)a11[4];
    v1121 = *v1120;
    v1122 = v1120[1];
    v1123 = **v1120;
    if (v1123 <= -2)
    {
      do
      {
        v1124 = (__clz(__rbit64(((*v1121 >> 7) & ~*v1121 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v1121 = (_QWORD *)((char *)v1121 + v1124);
        v1122 += 32 * v1124;
        v1123 = *(char *)v1121;
      }
      while (v1123 < -1);
    }
    while (v1123 != 255)
    {
      v1125 = *((_QWORD *)v1122 + 2);
      v1126 = v1125 + 40;
      if (!*(_BYTE *)(v1125 + 280))
        v1126 = 0;
      if (*(_BYTE *)(v1126 + 152))
        sub_20F293B94((uint64_t)v1517, (uint64_t)*a11, v1125);
      v1127 = *((char *)v1121 + 1);
      v1121 = (_QWORD *)((char *)v1121 + 1);
      LOBYTE(v1123) = v1127;
      v1122 += 32;
      if (v1127 <= -2)
      {
        do
        {
          v1128 = (__clz(__rbit64(((*v1121 >> 7) & ~*v1121 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v1121 = (_QWORD *)((char *)v1121 + v1128);
          v1122 += 32 * v1128;
          v1123 = *(char *)v1121;
        }
        while (v1123 < -1);
      }
    }
    if (v961)
    {
      object[1] = v961;
      operator delete(v961);
    }
    v1129 = *(_OWORD *)v1517;
    v1488 = *(_OWORD *)v1517;
    if (sub_20F29632C(*a11, *(void **)v1517, *(void **)&v1517[8]))
    {
      v1130 = (char *)a11[10];
      v1131 = (char *)a11[11];
      if (v1131 != v1130)
      {
        v1132 = 0x80BFA02FE80BFA03 * ((v1131 - v1130) >> 4);
        do
        {
          v1133 = v1132 >> 1;
          v1134 = &v1130[2736 * (v1132 >> 1)];
          if (*(_QWORD *)v1134 < (unint64_t)v1129
            || *(_QWORD *)v1134 == (_QWORD)v1129 && *((_DWORD *)v1134 + 2) < DWORD2(v1129))
          {
            v1130 = v1134 + 2736;
            v1133 = v1132 + ~v1133;
          }
          v1132 = v1133;
        }
        while (v1133);
      }
      if (v1130 == v1131 || *(_QWORD *)v1130 != (_QWORD)v1129 || *((_DWORD *)v1130 + 2) != DWORD2(v1129))
        v1130 = (char *)a11[11];
      if (v1131 != v1130)
      {
        if (v1130 + 2736 != v1131)
        {
          v1135 = *((_QWORD *)v1130 + 2);
          if (v1135 == *((_QWORD *)v1130 + 344))
          {
            v1136 = (uint64_t *)(v1130 + 2752);
            v1137 = (*a11)[6];
            if (*(_QWORD *)v1130 != *(_QWORD *)(v1137 + 32) || *((_DWORD *)v1130 + 2) != *(_DWORD *)(v1137 + 40))
              goto LABEL_1331;
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 307, (uint64_t)"preint_iter->first != this->state_set()->begin()->first", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v1135 = *v1136;
LABEL_1331:
              if (*((_QWORD *)v1130 + 4) == v1135 && *((_DWORD *)v1130 + 10) == *((_DWORD *)v1130 + 690)
                || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 310, (uint64_t)"preint_iter->second.state_id1 == next_preint_iter->second.state_id0", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                sub_20F2965C4((uint64_t)(v1130 + 48), (uint64_t)(v1130 + 2784), (uint64_t)object);
                *((_OWORD *)v1130 + 174) = *(_OWORD *)object;
                *((void **)v1130 + 350) = object[2];
                *(_OWORD *)(v1130 + 2808) = *(_OWORD *)&object[3];
                *((void **)v1130 + 353) = object[5];
                v1138 = v1497[0];
                *((_OWORD *)v1130 + 177) = v1496;
                *((_OWORD *)v1130 + 178) = v1138;
                v1139 = v1497[1];
                *((_OWORD *)v1130 + 180) = v1497[2];
                v1140 = v1497[4];
                *((_OWORD *)v1130 + 181) = v1497[3];
                *((_OWORD *)v1130 + 182) = v1140;
                *((_QWORD *)v1130 + 366) = *(_QWORD *)v1498;
                *((_OWORD *)v1130 + 179) = v1139;
                v1141 = *(_OWORD *)&v1498[24];
                *(_OWORD *)(v1130 + 2936) = *(_OWORD *)&v1498[8];
                *((_QWORD *)v1130 + 375) = *(_QWORD *)&v1498[72];
                v1142 = *(_OWORD *)&v1498[40];
                *(_OWORD *)(v1130 + 2984) = *(_OWORD *)&v1498[56];
                *(_OWORD *)(v1130 + 2968) = v1142;
                *(_OWORD *)(v1130 + 2952) = v1141;
                v1143 = *(_OWORD *)&v1498[96];
                *((_OWORD *)v1130 + 188) = *(_OWORD *)&v1498[80];
                *((_QWORD *)v1130 + 384) = *(_QWORD *)v1500;
                v1144 = *(_OWORD *)&v1498[112];
                *((_OWORD *)v1130 + 191) = v1499;
                *((_OWORD *)v1130 + 190) = v1144;
                *((_OWORD *)v1130 + 189) = v1143;
                v1145 = *(_OWORD *)&v1500[8];
                v1146 = *(_OWORD *)&v1500[24];
                v1147 = *(_OWORD *)&v1500[40];
                v1148 = v1501;
                *((_QWORD *)v1130 + 393) = *(_QWORD *)v1502;
                *(_OWORD *)(v1130 + 3112) = v1147;
                *(_OWORD *)(v1130 + 3128) = v1148;
                *(_OWORD *)(v1130 + 3080) = v1145;
                *(_OWORD *)(v1130 + 3096) = v1146;
                v1149 = *(_OWORD *)&v1502[24];
                *((_OWORD *)v1130 + 197) = *(_OWORD *)&v1502[8];
                v1150 = *(_OWORD *)&v1502[40];
                v1151 = v1503;
                *((_QWORD *)v1130 + 402) = *(_QWORD *)v1504;
                *((_OWORD *)v1130 + 200) = v1151;
                *((_OWORD *)v1130 + 199) = v1150;
                *((_OWORD *)v1130 + 198) = v1149;
                v1152 = *(_OWORD *)&v1504[8];
                v1153 = *(_OWORD *)&v1504[24];
                v1154 = *(_OWORD *)&v1504[40];
                v1155 = v1505;
                *((_QWORD *)v1130 + 411) = *(_QWORD *)v1506;
                *(_OWORD *)(v1130 + 3256) = v1154;
                *(_OWORD *)(v1130 + 3272) = v1155;
                *(_OWORD *)(v1130 + 3224) = v1152;
                *(_OWORD *)(v1130 + 3240) = v1153;
                v1156 = *(_OWORD *)&v1506[24];
                *((_OWORD *)v1130 + 206) = *(_OWORD *)&v1506[8];
                v1157 = *(_OWORD *)&v1506[40];
                v1158 = v1507;
                *((_QWORD *)v1130 + 420) = *(_QWORD *)v1508;
                *((_OWORD *)v1130 + 209) = v1158;
                *((_OWORD *)v1130 + 208) = v1157;
                *((_OWORD *)v1130 + 207) = v1156;
                v1159 = *(_OWORD *)&v1508[8];
                v1160 = *(_OWORD *)&v1508[24];
                v1161 = *(_OWORD *)&v1508[40];
                v1162 = v1509;
                *((_QWORD *)v1130 + 429) = *(_QWORD *)v1510;
                *(_OWORD *)(v1130 + 3400) = v1161;
                *(_OWORD *)(v1130 + 3416) = v1162;
                *(_OWORD *)(v1130 + 3368) = v1159;
                *(_OWORD *)(v1130 + 3384) = v1160;
                memcpy(v1130 + 3440, &v1510[8], 0x288uLL);
                *(_OWORD *)(v1130 + 4088) = *(_OWORD *)&v1510[656];
                *((_QWORD *)v1130 + 513) = *(_QWORD *)&v1510[672];
                *((_OWORD *)v1130 + 257) = *(_OWORD *)&v1510[680];
                *((_QWORD *)v1130 + 516) = *(_QWORD *)&v1510[696];
                memcpy(v1130 + 4136, v1511, 0x288uLL);
                memcpy(v1130 + 4784, (char *)&v1511[40] + 8, 0x288uLL);
                *((_DWORD *)v1130 + 690) = *((_DWORD *)v1130 + 6);
                *v1136 = *((_QWORD *)v1130 + 2);
                v1131 = (char *)a11[11];
                goto LABEL_1335;
              }
            }
LABEL_1722:
            abort();
          }
        }
LABEL_1335:
        if (v1130 + 2736 != v1131)
        {
          do
          {
            v1163 = v1130 + 2736;
            *(_QWORD *)v1130 = *((_QWORD *)v1130 + 342);
            *((_DWORD *)v1130 + 2) = *((_DWORD *)v1130 + 686);
            *((_OWORD *)v1130 + 1) = *((_OWORD *)v1130 + 172);
            *(_OWORD *)(v1130 + 28) = *(_OWORD *)(v1130 + 2764);
            *((_OWORD *)v1130 + 3) = *((_OWORD *)v1130 + 174);
            *((_QWORD *)v1130 + 8) = *((_QWORD *)v1130 + 350);
            *((_QWORD *)v1130 + 11) = *((_QWORD *)v1130 + 353);
            *(_OWORD *)(v1130 + 72) = *(_OWORD *)(v1130 + 2808);
            v1164 = *((_OWORD *)v1130 + 178);
            *((_OWORD *)v1130 + 6) = *((_OWORD *)v1130 + 177);
            *((_OWORD *)v1130 + 7) = v1164;
            v1165 = *((_OWORD *)v1130 + 179);
            *((_QWORD *)v1130 + 24) = *((_QWORD *)v1130 + 366);
            v1166 = *((_OWORD *)v1130 + 182);
            *((_OWORD *)v1130 + 10) = *((_OWORD *)v1130 + 181);
            *((_OWORD *)v1130 + 11) = v1166;
            v1167 = *((_OWORD *)v1130 + 180);
            *((_OWORD *)v1130 + 8) = v1165;
            *((_OWORD *)v1130 + 9) = v1167;
            v1168 = *(_OWORD *)(v1130 + 2936);
            *(_OWORD *)(v1130 + 216) = *(_OWORD *)(v1130 + 2952);
            v1169 = *(_OWORD *)(v1130 + 2984);
            *(_OWORD *)(v1130 + 232) = *(_OWORD *)(v1130 + 2968);
            *(_OWORD *)(v1130 + 248) = v1169;
            *((_QWORD *)v1130 + 33) = *((_QWORD *)v1130 + 375);
            *(_OWORD *)(v1130 + 200) = v1168;
            v1170 = *((_OWORD *)v1130 + 188);
            v1171 = *((_OWORD *)v1130 + 189);
            v1172 = *((_OWORD *)v1130 + 190);
            v1173 = *((_OWORD *)v1130 + 191);
            *((_QWORD *)v1130 + 42) = *((_QWORD *)v1130 + 384);
            *((_OWORD *)v1130 + 19) = v1172;
            *((_OWORD *)v1130 + 20) = v1173;
            *((_OWORD *)v1130 + 17) = v1170;
            *((_OWORD *)v1130 + 18) = v1171;
            v1174 = *(_OWORD *)(v1130 + 3112);
            v1175 = *(_OWORD *)(v1130 + 3128);
            *((_QWORD *)v1130 + 51) = *((_QWORD *)v1130 + 393);
            v1177 = *(_OWORD *)(v1130 + 3080);
            v1176 = *(_OWORD *)(v1130 + 3096);
            *(_OWORD *)(v1130 + 376) = v1174;
            *(_OWORD *)(v1130 + 392) = v1175;
            *(_OWORD *)(v1130 + 344) = v1177;
            *(_OWORD *)(v1130 + 360) = v1176;
            v1178 = *((_OWORD *)v1130 + 197);
            v1179 = *((_OWORD *)v1130 + 198);
            v1180 = *((_OWORD *)v1130 + 199);
            v1181 = *((_OWORD *)v1130 + 200);
            *((_QWORD *)v1130 + 60) = *((_QWORD *)v1130 + 402);
            *((_OWORD *)v1130 + 28) = v1180;
            *((_OWORD *)v1130 + 29) = v1181;
            *((_OWORD *)v1130 + 26) = v1178;
            *((_OWORD *)v1130 + 27) = v1179;
            v1182 = *(_OWORD *)(v1130 + 3256);
            v1183 = *(_OWORD *)(v1130 + 3272);
            *((_QWORD *)v1130 + 69) = *((_QWORD *)v1130 + 411);
            v1185 = *(_OWORD *)(v1130 + 3224);
            v1184 = *(_OWORD *)(v1130 + 3240);
            *(_OWORD *)(v1130 + 520) = v1182;
            *(_OWORD *)(v1130 + 536) = v1183;
            *(_OWORD *)(v1130 + 488) = v1185;
            *(_OWORD *)(v1130 + 504) = v1184;
            v1186 = *((_OWORD *)v1130 + 206);
            v1187 = *((_OWORD *)v1130 + 207);
            v1188 = *((_OWORD *)v1130 + 208);
            v1189 = *((_OWORD *)v1130 + 209);
            *((_QWORD *)v1130 + 78) = *((_QWORD *)v1130 + 420);
            *((_OWORD *)v1130 + 37) = v1188;
            *((_OWORD *)v1130 + 38) = v1189;
            *((_OWORD *)v1130 + 35) = v1186;
            *((_OWORD *)v1130 + 36) = v1187;
            v1190 = *(_OWORD *)(v1130 + 3400);
            v1191 = *(_OWORD *)(v1130 + 3416);
            *((_QWORD *)v1130 + 87) = *((_QWORD *)v1130 + 429);
            v1193 = *(_OWORD *)(v1130 + 3368);
            v1192 = *(_OWORD *)(v1130 + 3384);
            *(_OWORD *)(v1130 + 664) = v1190;
            *(_OWORD *)(v1130 + 680) = v1191;
            *(_OWORD *)(v1130 + 632) = v1193;
            *(_OWORD *)(v1130 + 648) = v1192;
            memcpy(v1130 + 704, v1130 + 3440, 0x288uLL);
            *((_QWORD *)v1130 + 171) = *((_QWORD *)v1130 + 513);
            *(_OWORD *)(v1130 + 1352) = *(_OWORD *)(v1130 + 4088);
            *((_OWORD *)v1130 + 86) = *((_OWORD *)v1130 + 257);
            *((_QWORD *)v1130 + 174) = *((_QWORD *)v1130 + 516);
            memcpy(v1130 + 1400, v1130 + 4136, 0x288uLL);
            memcpy(v1130 + 2048, v1130 + 4784, 0x288uLL);
            *((_QWORD *)v1130 + 339) = *((_QWORD *)v1130 + 681);
            *(_OWORD *)(v1130 + 2696) = *(_OWORD *)(v1130 + 5432);
            *((_OWORD *)v1130 + 170) = *((_OWORD *)v1130 + 341);
            v1194 = v1130 + 5472;
            v1130 += 2736;
          }
          while (v1194 != v1131);
          v1130 = v1163;
        }
        a11[11] = v1130;
      }
      v1195 = a11[2];
      if (v1195)
      {
        memset(object, 0, 24);
        v1196 = (unsigned __int8 *)*v1195;
        v1197 = v1195[1];
        v1475 = v1195;
        v1198 = *(char *)*v1195;
        v1199 = *(unsigned __int8 *)*v1195;
        v1200 = v1197;
        v1201 = v1196;
        if (v1198 <= -2)
        {
          v1200 = v1197;
          v1201 = v1196;
          do
          {
            v1202 = (__clz(__rbit64(((*v1201 >> 7) & ~*v1201 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v1201 = (_QWORD *)((char *)v1201 + v1202);
            v1200 += 32 * v1202;
          }
          while (*(char *)v1201 < -1);
          if (*(unsigned __int8 *)v1201 == 255)
            goto LABEL_1497;
LABEL_1348:
          v1204 = *(_QWORD **)(v1200 + 16);
          v1203 = *(std::__shared_weak_count **)(v1200 + 24);
          if (v1203)
          {
            v1205 = (unint64_t *)&v1203->__shared_owners_;
            do
              v1206 = __ldxr(v1205);
            while (__stxr(v1206 + 1, v1205));
          }
          v1483 = v1203;
          v1207 = (char *)object[0];
          object[1] = object[0];
          v1208 = (__int128 *)v1204[62];
          v1209 = (__int128 *)v1204[63];
          if (v1208 == v1209)
            goto LABEL_1487;
          v1210 = (char *)object[2];
          v1211 = (char *)object[0];
          while (2)
          {
            if (*(_QWORD *)v1208 == (_QWORD)v1488 && *((_DWORD *)v1208 + 2) == DWORD2(v1488))
            {
              if (v1207 < v1210)
              {
                v1212 = *v1208;
                *((_QWORD *)v1207 + 2) = *((_QWORD *)v1208 + 2);
                *(_OWORD *)v1207 = v1212;
                v1207 += 24;
              }
              else
              {
                v1213 = 0xAAAAAAAAAAAAAAABLL * ((v1207 - v1211) >> 3) + 1;
                if (v1213 > 0xAAAAAAAAAAAAAAALL)
                {
                  object[2] = v1210;
                  object[1] = v1207;
                  object[0] = v1211;
                  sub_20E867F44();
                }
                if (0x5555555555555556 * ((v1210 - v1211) >> 3) > v1213)
                  v1213 = 0x5555555555555556 * ((v1210 - v1211) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v1210 - v1211) >> 3) >= 0x555555555555555)
                  v1214 = 0xAAAAAAAAAAAAAAALL;
                else
                  v1214 = v1213;
                if (v1214)
                {
                  if (v1214 > 0xAAAAAAAAAAAAAAALL)
                  {
                    object[2] = v1210;
                    object[1] = v1207;
                    object[0] = v1211;
                    sub_20E877A38();
                  }
                  v1215 = (char *)operator new(24 * v1214);
                }
                else
                {
                  v1215 = 0;
                }
                v1216 = *v1208;
                v1217 = &v1215[8 * ((v1207 - v1211) >> 3)];
                *((_QWORD *)v1217 + 2) = *((_QWORD *)v1208 + 2);
                *(_OWORD *)v1217 = v1216;
                if (v1207 == v1211)
                {
                  v1220 = v1207;
                  v1211 = &v1215[8 * ((v1207 - v1211) >> 3)];
                  v1210 = &v1215[24 * v1214];
                  v1207 = v1217 + 24;
                  if (v1220)
                    goto LABEL_1372;
                }
                else
                {
                  v1218 = &v1215[8 * ((v1207 - v1211) >> 3)];
                  do
                  {
                    v1219 = *(_OWORD *)(v1207 - 24);
                    *((_DWORD *)v1218 - 2) = *((_DWORD *)v1207 - 2);
                    *(_OWORD *)(v1218 - 24) = v1219;
                    v1218 -= 24;
                    v1207 -= 24;
                  }
                  while (v1207 != v1211);
                  v1220 = v1211;
                  v1211 = v1218;
                  v1210 = &v1215[24 * v1214];
                  v1207 = v1217 + 24;
                  if (v1220)
LABEL_1372:
                    operator delete(v1220);
                }
              }
            }
            v1208 += 4;
            if (v1208 != v1209)
              continue;
            break;
          }
          object[2] = v1210;
          object[1] = v1207;
          object[0] = v1211;
          if (v1211 == v1207)
            goto LABEL_1487;
LABEL_1377:
          v1222 = v1204[62];
          v1221 = v1204[63];
          v1223 = *(_QWORD *)v1211;
          v1224 = *((_DWORD *)v1211 + 2);
          v1225 = *((_DWORD *)v1211 + 4);
          if (v1221 == v1222)
          {
LABEL_1388:
            if (v1222 == v1221
              || *(_DWORD *)(v1222 + 16) != v1225
              || *(_QWORD *)v1222 != v1223
              || *(_DWORD *)(v1222 + 8) != v1224)
            {
              goto LABEL_1437;
            }
            v1231 = (_QWORD *)v1204[2];
            if (!v1231)
              goto LABEL_1478;
            v1232 = (int8x8_t)v1231[1];
            if (!*(_QWORD *)&v1232)
              goto LABEL_1437;
            v1233 = v1224 ^ __ROR4__(v1225, 13);
            v1234 = (uint8x8_t)vcnt_s8(v1232);
            v1234.i16[0] = vaddlv_u8(v1234);
            if (v1234.u32[0] > 1uLL)
            {
              v1235 = v1233;
              if (*(_QWORD *)&v1232 <= v1233)
                v1235 = v1233 % *(_QWORD *)&v1232;
            }
            else
            {
              v1235 = (v1232.i32[0] - 1) & v1233;
            }
            v1236 = *(int8x8_t ***)(*v1231 + 8 * v1235);
            if (!v1236)
              goto LABEL_1437;
            v1237 = *v1236;
            if (!v1237)
              goto LABEL_1437;
            v1238 = *(unsigned int *)(v1222 + 28);
            if (v1234.u32[0] < 2uLL)
            {
              v1239 = *(_QWORD *)&v1232 - 1;
              while (1)
              {
                v1241 = v1237[1];
                if (*(_QWORD *)&v1241 == v1233)
                {
                  if (v1237[4].i32[0] == v1225 && *(_QWORD *)&v1237[2] == v1223 && v1237[3].i32[0] == v1224)
                    goto LABEL_1417;
                }
                else if ((*(_QWORD *)&v1241 & v1239) != v1235)
                {
                  goto LABEL_1437;
                }
                v1237 = (int8x8_t *)*v1237;
                if (!v1237)
                  goto LABEL_1437;
              }
            }
            while (1)
            {
              v1240 = v1237[1];
              if (*(_QWORD *)&v1240 == v1233)
              {
                if (v1237[4].i32[0] == v1225 && *(_QWORD *)&v1237[2] == v1223 && v1237[3].i32[0] == v1224)
                {
LABEL_1417:
                  v1242 = v1237[6];
                  if (v1242)
                  {
                    v1243 = (uint8x8_t)vcnt_s8(v1242);
                    v1243.i16[0] = vaddlv_u8(v1243);
                    if (v1243.u32[0] > 1uLL)
                    {
                      v1244 = *(unsigned int *)(v1222 + 28);
                      if (*(_QWORD *)&v1242 <= v1238)
                        v1244 = v1238 % *(_QWORD *)&v1242;
                    }
                    else
                    {
                      v1244 = (v1242.i32[0] - 1) & v1238;
                    }
                    v1245 = v1237[5];
                    v1246 = *(int8x8_t ***)(*(_QWORD *)&v1245 + 8 * v1244);
                    if (v1246)
                    {
                      v1247 = *v1246;
                      if (*v1246)
                      {
                        v1248 = *(_QWORD *)&v1242 - 1;
                        if (v1243.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v1249 = v1247[1];
                            if (*(_QWORD *)&v1249 == v1238)
                            {
                              if (v1247[2].i32[0] == (_DWORD)v1238)
                                goto LABEL_1446;
                            }
                            else if ((*(_QWORD *)&v1249 & v1248) != v1244)
                            {
                              goto LABEL_1437;
                            }
                            v1247 = (int8x8_t *)*v1247;
                            if (!v1247)
                              goto LABEL_1437;
                          }
                        }
                        do
                        {
                          v1250 = (unint64_t)v1247[1];
                          if (v1250 == v1238)
                          {
                            if (v1247[2].i32[0] == (_DWORD)v1238)
                            {
LABEL_1446:
                              if (v1243.u32[0] > 1uLL)
                              {
                                if (*(_QWORD *)&v1242 <= v1238)
                                  v1238 %= *(_QWORD *)&v1242;
                              }
                              else
                              {
                                v1238 &= v1248;
                              }
                              v1255 = *(int8x8_t **)(*(_QWORD *)&v1245 + 8 * v1238);
                              do
                              {
                                v1256 = v1255;
                                v1255 = (int8x8_t *)*v1255;
                              }
                              while (v1255 != v1247);
                              if (v1256 == &v1237[7])
                                goto LABEL_1463;
                              v1257 = (unint64_t)v1256[1];
                              if (v1243.u32[0] > 1uLL)
                              {
                                if (v1257 >= *(_QWORD *)&v1242)
                                  v1257 %= *(_QWORD *)&v1242;
                              }
                              else
                              {
                                v1257 &= v1248;
                              }
                              if (v1257 != v1238)
                              {
LABEL_1463:
                                if (!*(_QWORD *)v1247)
                                  goto LABEL_1464;
                                v1258 = *(_QWORD *)(*(_QWORD *)v1247 + 8);
                                if (v1243.u32[0] > 1uLL)
                                {
                                  if (v1258 >= *(_QWORD *)&v1242)
                                    v1258 %= *(_QWORD *)&v1242;
                                }
                                else
                                {
                                  v1258 &= v1248;
                                }
                                if (v1258 != v1238)
LABEL_1464:
                                  *(_QWORD *)(*(_QWORD *)&v1245 + 8 * v1238) = 0;
                              }
                              v1259 = *v1247;
                              if (*v1247)
                              {
                                v1260 = *(_QWORD *)(*(_QWORD *)&v1259 + 8);
                                if (v1243.u32[0] > 1uLL)
                                {
                                  if (v1260 >= *(_QWORD *)&v1242)
                                    v1260 %= *(_QWORD *)&v1242;
                                }
                                else
                                {
                                  v1260 &= v1248;
                                }
                                if (v1260 != v1238)
                                {
                                  *(_QWORD *)(*(_QWORD *)&v1237[5] + 8 * v1260) = v1256;
                                  v1259 = *v1247;
                                }
                              }
                              *v1256 = v1259;
                              *v1247 = 0;
                              --*(_QWORD *)&v1237[8];
                              v1261 = (std::__shared_weak_count *)v1247[4];
                              if (v1261)
                              {
                                v1262 = (unint64_t *)&v1261->__shared_owners_;
                                do
                                  v1263 = __ldaxr(v1262);
                                while (__stlxr(v1263 - 1, v1262));
                                if (!v1263)
                                {
                                  ((void (*)(std::__shared_weak_count *))v1261->__on_zero_shared)(v1261);
                                  std::__shared_weak_count::__release_weak(v1261);
                                }
                              }
                              operator delete(v1247);
                              v1221 = v1204[63];
LABEL_1478:
                              if (v1222 + 64 != v1221)
                              {
                                do
                                {
                                  v1264 = v1222 + 64;
                                  *(_OWORD *)v1222 = *(_OWORD *)(v1222 + 64);
                                  *(_DWORD *)(v1222 + 16) = *(_DWORD *)(v1222 + 80);
                                  v1265 = *(_QWORD *)(v1222 + 96);
                                  *(_QWORD *)(v1222 + 24) = *(_QWORD *)(v1222 + 88);
                                  *(_QWORD *)(v1222 + 32) = v1265;
                                  *(_OWORD *)(v1222 + 40) = *(_OWORD *)(v1222 + 104);
                                  v1266 = v1222 + 128;
                                  *(_DWORD *)(v1222 + 56) = *(_DWORD *)(v1222 + 120);
                                  v1222 += 64;
                                }
                                while (v1266 != v1221);
                                v1222 = v1264;
                              }
                              v1204[63] = v1222;
                              v1211 += 24;
                              if (v1211 != v1207)
                                goto LABEL_1377;
                              if (!v1483)
                                goto LABEL_1491;
LABEL_1487:
                              v1267 = (unint64_t *)&v1483->__shared_owners_;
                              do
                                v1268 = __ldaxr(v1267);
                              while (__stlxr(v1268 - 1, v1267));
                              if (!v1268)
                              {
                                ((void (*)(std::__shared_weak_count *))v1483->__on_zero_shared)(v1483);
                                std::__shared_weak_count::__release_weak(v1483);
                                v1272 = *((char *)v1201 + 1);
                                v1201 = (_QWORD *)((char *)v1201 + 1);
                                LOBYTE(v1269) = v1272;
                                v1200 += 32;
                                if (v1272 <= -2)
                                  goto LABEL_1492;
                              }
                              else
                              {
LABEL_1491:
                                v1270 = *((char *)v1201 + 1);
                                v1201 = (_QWORD *)((char *)v1201 + 1);
                                LOBYTE(v1269) = v1270;
                                v1200 += 32;
                                if (v1270 <= -2)
                                {
                                  do
                                  {
LABEL_1492:
                                    v1271 = (__clz(__rbit64(((*v1201 >> 7) & ~*v1201 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                                    v1201 = (_QWORD *)((char *)v1201 + v1271);
                                    v1200 += 32 * v1271;
                                    v1269 = *(char *)v1201;
                                  }
                                  while (v1269 < -1);
                                }
                              }
                              if (v1269 == 255)
                              {
                                v1196 = (unsigned __int8 *)*v1475;
                                v1197 = v1475[1];
                                v1199 = *(unsigned __int8 *)*v1475;
                                goto LABEL_1497;
                              }
                              goto LABEL_1348;
                            }
                          }
                          else
                          {
                            if (v1250 >= *(_QWORD *)&v1242)
                              v1250 %= *(_QWORD *)&v1242;
                            if (v1250 != v1244)
                              break;
                          }
                          v1247 = (int8x8_t *)*v1247;
                        }
                        while (v1247);
                      }
                    }
                  }
LABEL_1437:
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 66, (uint64_t)"ret", 3, (uint64_t)"Fail to remove node. this is not possible", 41, (void (*)(void **))sub_21023DDB0);
                  v1251 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1251 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1252 = qword_254A6DE40;
                    for (i19 = qword_254A6DE48; v1252 != i19; v1252 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1252)(*(_QWORD *)(v1252 + 8), "ret", 3, "Fail to remove node. this is not possible", 41);
                  }
                  v1254 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1254 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "ret", 3, "Fail to remove node. this is not possible", 41);
                  v1211 += 24;
                  if (v1211 == v1207)
                    goto LABEL_1487;
                  goto LABEL_1377;
                }
              }
              else
              {
                if (*(_QWORD *)&v1240 >= *(_QWORD *)&v1232)
                  *(_QWORD *)&v1240 %= *(_QWORD *)&v1232;
                if (*(_QWORD *)&v1240 != v1235)
                  goto LABEL_1437;
              }
              v1237 = (int8x8_t *)*v1237;
              if (!v1237)
                goto LABEL_1437;
            }
          }
          v1226 = (v1221 - v1222) >> 6;
          while (2)
          {
            v1227 = v1226 >> 1;
            v1228 = v1222 + (v1226 >> 1 << 6);
            v1229 = *(_DWORD *)(v1228 + 16);
            v1230 = v1229 >= v1225;
            if (v1229 == v1225)
            {
              if (*(_QWORD *)v1228 >= v1223)
              {
                if (*(_QWORD *)v1228 == v1223)
                {
                  v1230 = *(_DWORD *)(v1228 + 8) >= v1224;
                  goto LABEL_1385;
                }
LABEL_1380:
                v1226 = v1227;
                if (!v1227)
                  goto LABEL_1388;
                continue;
              }
            }
            else
            {
LABEL_1385:
              if (v1230)
                goto LABEL_1380;
            }
            break;
          }
          v1222 = v1228 + 64;
          v1227 = v1226 + ~v1227;
          goto LABEL_1380;
        }
        if (*v1196 != 255)
          goto LABEL_1348;
LABEL_1497:
        if ((char)v1199 <= -2)
        {
          do
          {
            v1273 = (__clz(__rbit64(((*(_QWORD *)v1196 >> 7) & ~*(_QWORD *)v1196 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v1196 += v1273;
            v1197 += 32 * v1273;
          }
          while ((char)*v1196 < -1);
          v1199 = *v1196;
        }
        if (v1199 != 255)
        {
          do
          {
            if (*(_QWORD *)(*(_QWORD *)(v1197 + 16) + 504) - *(_QWORD *)(*(_QWORD *)(v1197 + 16) + 496) >= 0x80uLL)
            {
              LOBYTE(v1368) = v1196[1];
              v1363 = v1196 + 1;
              v1366 = v1197 + 32;
              if ((char)v1368 <= -2)
              {
                do
                {
                  v1369 = (__clz(__rbit64(((*(_QWORD *)v1363 >> 7) & ~*(_QWORD *)v1363 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                  v1363 += v1369;
                  v1366 += 32 * v1369;
                  v1368 = (char)*v1363;
                }
                while (v1368 < -1);
              }
              if (v1368 == 255)
                break;
            }
            else
            {
              v1364 = v1196 + 1;
              v1365 = (char)v1196[1];
              v1366 = v1197 + 32;
              if (v1365 <= -2)
              {
                do
                {
                  v1367 = (__clz(__rbit64(((*(_QWORD *)v1364 >> 7) & ~*(_QWORD *)v1364 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                  v1364 += v1367;
                  v1366 += 32 * v1367;
                  v1365 = (char)*v1364;
                }
                while (v1365 < -1);
              }
              if (v1365 == 255)
                v1363 = 0;
              else
                v1363 = v1364;
              sub_20F887154(v1475, v1196, v1197);
            }
            v1196 = v1363;
            v1197 = v1366;
          }
          while (v1363);
        }
        if (object[0])
          operator delete(object[0]);
        sub_20F29AEF0((uint64_t)&v1488, 2u, a11[3]);
        sub_20F29B92C((uint64_t)&v1488, 1u, a11[4]);
      }
      v1274 = a11;
      v1275 = (_QWORD *)(*a11)[37];
      if (v1275 == *a11 + 38)
      {
LABEL_1505:
        v1036 = v1454;
        goto LABEL_1185;
      }
      while (2)
      {
        v1276 = *((_DWORD *)v1275 + 8);
        v1521[0] = v1488;
        LODWORD(v1521[1]) = v1276;
        v1484 = v1274[1];
        v1277 = v1484 + 3;
        v1278 = sub_20E9DF85C(v1484 + 3, (uint64_t *)v1521);
        if (!v1278)
          goto LABEL_1622;
        v1279 = v1278;
        object[0] = operator new(0x3E80uLL);
        object[1] = object[0];
        object[2] = (char *)object[0] + 16000;
        v1280 = (_QWORD *)v1279[7];
        if (!v1280)
        {
LABEL_1509:
          v1281 = sub_20E9DF85C(v1277, (uint64_t *)v1521);
          if (v1281)
          {
            v1282 = v1281;
            v1283 = (int8x8_t)v1484[4];
            v1284 = v1281[1];
            v1285 = (uint8x8_t)vcnt_s8(v1283);
            v1285.i16[0] = vaddlv_u8(v1285);
            if (v1285.u32[0] > 1uLL)
            {
              if (v1284 >= *(_QWORD *)&v1283)
                v1284 %= *(_QWORD *)&v1283;
            }
            else
            {
              v1284 &= *(_QWORD *)&v1283 - 1;
            }
            v1312 = *v1281;
            v1313 = *(uint64_t **)(*v1277 + 8 * v1284);
            do
            {
              v1314 = v1313;
              v1313 = (uint64_t *)*v1313;
            }
            while (v1313 != v1281);
            if (v1314 == v1484 + 5)
              goto LABEL_1567;
            v1315 = v1314[1];
            if (v1285.u32[0] > 1uLL)
            {
              if (v1315 >= *(_QWORD *)&v1283)
                v1315 %= *(_QWORD *)&v1283;
            }
            else
            {
              v1315 &= *(_QWORD *)&v1283 - 1;
            }
            if (v1315 == v1284)
            {
LABEL_1569:
              if (v1312)
              {
                v1316 = *(_QWORD *)(v1312 + 8);
                goto LABEL_1571;
              }
            }
            else
            {
LABEL_1567:
              if (!v1312)
                goto LABEL_1568;
              v1316 = *(_QWORD *)(v1312 + 8);
              if (v1285.u32[0] > 1uLL)
              {
                v1317 = *(_QWORD *)(v1312 + 8);
                if (v1316 >= *(_QWORD *)&v1283)
                  v1317 = v1316 % *(_QWORD *)&v1283;
              }
              else
              {
                v1317 = v1316 & (*(_QWORD *)&v1283 - 1);
              }
              if (v1317 != v1284)
              {
LABEL_1568:
                *(_QWORD *)(*v1277 + 8 * v1284) = 0;
                v1312 = *v1281;
                goto LABEL_1569;
              }
LABEL_1571:
              if (v1285.u32[0] > 1uLL)
              {
                if (v1316 >= *(_QWORD *)&v1283)
                  v1316 %= *(_QWORD *)&v1283;
              }
              else
              {
                v1316 &= *(_QWORD *)&v1283 - 1;
              }
              if (v1316 != v1284)
              {
                *(_QWORD *)(*v1277 + 8 * v1316) = v1314;
                v1312 = *v1281;
              }
            }
            *v1314 = v1312;
            *v1281 = 0;
            --v1484[6];
            v1318 = (_QWORD *)v1281[7];
            while (v1318)
            {
              v1324 = v1318;
              v1318 = (_QWORD *)*v1318;
              v1325 = (std::__shared_weak_count *)v1324[4];
              if (v1325)
              {
                v1326 = (unint64_t *)&v1325->__shared_owners_;
                do
                  v1327 = __ldaxr(v1326);
                while (__stlxr(v1327 - 1, v1326));
                if (!v1327)
                {
                  ((void (*)(std::__shared_weak_count *))v1325->__on_zero_shared)(v1325);
                  std::__shared_weak_count::__release_weak(v1325);
                }
              }
              operator delete(v1324);
            }
            v1319 = (void *)v1282[5];
            v1282[5] = 0;
            if (v1319)
              operator delete(v1319);
            operator delete(v1282);
          }
          v1320 = object[1];
          v1476 = object[0];
          if (object[0] != object[1])
          {
            v1322 = (uint64_t **)(v1484 + 1);
            v1321 = (uint64_t *)v1484[1];
            if (v1321)
            {
              v1323 = object[0];
LABEL_1591:
              v1328 = *(_QWORD *)v1323;
              v1329 = v1323[2];
              v1330 = (uint64_t **)(v1484 + 1);
              do
              {
                v1331 = v1321[4];
                if (v1331 < v1328)
                {
                  ++v1321;
                }
                else if (v1331 == v1328)
                {
                  if (*((_DWORD *)v1321 + 10) < v1329)
                    ++v1321;
                  else
                    v1330 = (uint64_t **)v1321;
                }
                else
                {
                  v1330 = (uint64_t **)v1321;
                }
                v1321 = (uint64_t *)*v1321;
              }
              while (v1321);
              if (v1330 != v1322)
              {
                v1332 = (unint64_t)v1330[4];
                if (v1332 <= v1328 && (v1332 != v1328 || *((_DWORD *)v1330 + 10) <= v1329))
                {
                  v1333 = v1330[6];
                  v1335 = v1333[15];
                  for (i20 = v1333[16]; v1335 != i20; v1335 += 64)
                    sub_20FB96F70(v1277, (uint64_t *)v1335, *(_DWORD *)(v1335 + 28));
                  v1336 = v1330[1];
                  v1337 = v1330;
                  if (v1336)
                  {
                    do
                    {
                      v1338 = v1336;
                      v1336 = (uint64_t *)*v1336;
                    }
                    while (v1336);
                  }
                  else
                  {
                    do
                    {
                      v1338 = v1337[2];
                      _ZF = *v1338 == (_QWORD)v1337;
                      v1337 = (uint64_t **)v1338;
                    }
                    while (!_ZF);
                  }
                  if ((uint64_t **)*v1484 == v1330)
                    *v1484 = v1338;
                  v1339 = (uint64_t *)v1484[1];
                  --v1484[2];
                  sub_20E8D2134(v1339, (uint64_t *)v1330);
                  v1340 = (std::__shared_weak_count *)v1330[7];
                  if (v1340)
                  {
                    v1341 = (unint64_t *)&v1340->__shared_owners_;
                    do
                      v1342 = __ldaxr(v1341);
                    while (__stlxr(v1342 - 1, v1341));
                    if (!v1342)
                    {
                      ((void (*)(std::__shared_weak_count *))v1340->__on_zero_shared)(v1340);
                      std::__shared_weak_count::__release_weak(v1340);
                    }
                  }
                  operator delete(v1330);
                }
              }
              while (1)
              {
                v1323 += 4;
                if (v1323 == v1320)
                  break;
                v1321 = *v1322;
                if (*v1322)
                  goto LABEL_1591;
              }
            }
          }
          if (v1476)
            operator delete(v1476);
LABEL_1622:
          v1343 = (char *)a11[5];
          v1344 = (char *)a11[6];
          if (v1344 == v1343)
          {
LABEL_1633:
            if (v1343 == v1344)
            {
              v1352 = (char *)a11[6];
            }
            else
            {
              v1351 = *(_QWORD *)v1343;
              v1352 = (char *)a11[6];
              if (*(_DWORD *)(*(_QWORD *)v1343 + 16) == LODWORD(v1521[1]))
              {
                v1352 = (char *)a11[6];
                if (*(_QWORD *)v1351 == *(_QWORD *)&v1521[0])
                {
                  if (*(_DWORD *)(v1351 + 8) == DWORD2(v1521[0]))
                    v1352 = v1343;
                  else
                    v1352 = (char *)a11[6];
                }
              }
            }
            if (v1344 != v1352)
            {
              v1353 = v1352 + 16;
              if (v1352 + 16 != v1344)
              {
                do
                {
                  v1354 = *(_OWORD *)v1353;
                  *(_QWORD *)v1353 = 0;
                  *((_QWORD *)v1353 + 1) = 0;
                  v1355 = (std::__shared_weak_count *)*((_QWORD *)v1352 + 1);
                  *(_OWORD *)v1352 = v1354;
                  if (v1355)
                  {
                    v1356 = (unint64_t *)&v1355->__shared_owners_;
                    do
                      v1357 = __ldaxr(v1356);
                    while (__stlxr(v1357 - 1, v1356));
                    if (!v1357)
                    {
                      ((void (*)(std::__shared_weak_count *))v1355->__on_zero_shared)(v1355);
                      std::__shared_weak_count::__release_weak(v1355);
                    }
                  }
                  v1353 += 16;
                  v1352 += 16;
                }
                while (v1353 != v1344);
                v1344 = (char *)a11[6];
              }
              while (v1344 != v1352)
              {
                v1358 = (std::__shared_weak_count *)*((_QWORD *)v1344 - 1);
                if (v1358)
                {
                  v1359 = (unint64_t *)&v1358->__shared_owners_;
                  do
                    v1360 = __ldaxr(v1359);
                  while (__stlxr(v1360 - 1, v1359));
                  if (!v1360)
                  {
                    ((void (*)(std::__shared_weak_count *))v1358->__on_zero_shared)(v1358);
                    std::__shared_weak_count::__release_weak(v1358);
                  }
                }
                v1344 -= 16;
              }
              a11[6] = v1352;
            }
            v1361 = (_QWORD *)v1275[1];
            if (v1361)
            {
              do
              {
                v1362 = v1361;
                v1361 = (_QWORD *)*v1361;
              }
              while (v1361);
            }
            else
            {
              do
              {
                v1362 = (_QWORD *)v1275[2];
                _ZF = *v1362 == (_QWORD)v1275;
                v1275 = v1362;
              }
              while (!_ZF);
            }
            v1274 = a11;
            v1275 = v1362;
            if (v1362 == *a11 + 38)
              goto LABEL_1505;
            continue;
          }
          v1345 = (v1344 - v1343) >> 4;
          while (2)
          {
            v1346 = v1345 >> 1;
            v1347 = &v1343[16 * (v1345 >> 1)];
            v1348 = *(_QWORD *)v1347;
            v1349 = *(_DWORD *)(*(_QWORD *)v1347 + 16);
            v1350 = v1349 >= LODWORD(v1521[1]);
            if (v1349 == LODWORD(v1521[1]))
            {
              if (*(_QWORD *)v1348 >= *(_QWORD *)&v1521[0])
              {
                if (*(_QWORD *)v1348 == *(_QWORD *)&v1521[0])
                {
                  v1350 = *(_DWORD *)(v1348 + 8) >= DWORD2(v1521[0]);
                  goto LABEL_1630;
                }
LABEL_1625:
                v1345 = v1346;
                if (!v1346)
                  goto LABEL_1633;
                continue;
              }
            }
            else
            {
LABEL_1630:
              if (v1350)
                goto LABEL_1625;
            }
            break;
          }
          v1343 = v1347 + 16;
          v1346 = v1345 + ~v1346;
          goto LABEL_1625;
        }
        break;
      }
      while (2)
      {
        v1286 = (_QWORD *)v1280[3];
        v1287 = (std::__shared_weak_count *)v1280[4];
        *(_QWORD *)__dst = v1286;
        *(_QWORD *)&__dst[8] = v1287;
        if (v1287)
        {
          v1288 = (unint64_t *)&v1287->__shared_owners_;
          do
            v1289 = __ldxr(v1288);
          while (__stxr(v1289 + 1, v1288));
        }
        v1291 = v1286[15];
        v1290 = v1286[16];
        v1292 = v1291;
        if (v1291 != v1290)
        {
          v1292 = v1286[15];
          while (*(_DWORD *)(v1292 + 16) != LODWORD(v1521[1])
               || *(_QWORD *)v1292 != *(_QWORD *)&v1521[0]
               || *(_DWORD *)(v1292 + 8) != DWORD2(v1521[0]))
          {
            v1292 += 64;
            if (v1292 == v1290)
              goto LABEL_1527;
          }
        }
        if (v1292 != v1290)
        {
          if (v1292 + 64 != v1290)
          {
            do
            {
              v1293 = v1292 + 64;
              *(_OWORD *)v1292 = *(_OWORD *)(v1292 + 64);
              *(_DWORD *)(v1292 + 16) = *(_DWORD *)(v1292 + 80);
              v1294 = *(_QWORD *)(v1292 + 96);
              *(_QWORD *)(v1292 + 24) = *(_QWORD *)(v1292 + 88);
              *(_QWORD *)(v1292 + 32) = v1294;
              *(_OWORD *)(v1292 + 40) = *(_OWORD *)(v1292 + 104);
              v1295 = v1292 + 128;
              *(_DWORD *)(v1292 + 56) = *(_DWORD *)(v1292 + 120);
              v1292 += 64;
            }
            while (v1295 != v1290);
            v1291 = v1286[15];
            v1292 = v1293;
          }
          v1286[16] = v1292;
          v1290 = v1292;
        }
LABEL_1527:
        if (v1290 == v1291)
        {
          v1296 = v1286[3];
          v1297 = v1286[4];
          v1298 = object[1];
          if (object[1] >= object[2])
          {
            v1300 = object[0];
            v1301 = ((char *)object[1] - (char *)object[0]) >> 4;
            v1302 = v1301 + 1;
            if ((unint64_t)(v1301 + 1) >> 60)
              sub_20E867F44();
            v1303 = (char *)object[2] - (char *)object[0];
            if (((char *)object[2] - (char *)object[0]) >> 3 > v1302)
              v1302 = v1303 >> 3;
            if ((unint64_t)v1303 >= 0x7FFFFFFFFFFFFFF0)
              v1304 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1304 = v1302;
            if (v1304)
            {
              if (v1304 >> 60)
                sub_20E877A38();
              v1305 = (char *)operator new(16 * v1304);
            }
            else
            {
              v1305 = 0;
            }
            v1306 = &v1305[16 * v1301];
            *(_QWORD *)v1306 = v1296;
            *((_QWORD *)v1306 + 1) = v1297;
            v1307 = v1306;
            if (v1298 != v1300)
            {
              do
              {
                v1308 = *((_QWORD *)v1298 - 2);
                v1298 -= 4;
                v1309 = v1298[2];
                *((_QWORD *)v1307 - 2) = v1308;
                v1307 -= 16;
                *((_DWORD *)v1307 + 2) = v1309;
              }
              while (v1298 != v1300);
              v1298 = v1300;
            }
            v1299 = v1306 + 16;
            object[0] = v1307;
            object[2] = &v1305[16 * v1304];
            if (v1298)
              operator delete(v1298);
          }
          else
          {
            *(_QWORD *)object[1] = v1296;
            *((_QWORD *)v1298 + 1) = v1297;
            v1299 = v1298 + 4;
          }
          object[1] = v1299;
          if (v1287)
            goto LABEL_1548;
        }
        else
        {
          if (!v1287)
            goto LABEL_1512;
LABEL_1548:
          v1310 = (unint64_t *)&v1287->__shared_owners_;
          do
            v1311 = __ldaxr(v1310);
          while (__stlxr(v1311 - 1, v1310));
          if (!v1311)
          {
            ((void (*)(std::__shared_weak_count *))v1287->__on_zero_shared)(v1287);
            std::__shared_weak_count::__release_weak(v1287);
          }
        }
LABEL_1512:
        v1280 = (_QWORD *)*v1280;
        if (!v1280)
          goto LABEL_1509;
        continue;
      }
    }
    v1036 = v1454;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viodatabase.hpp", 449, (uint64_t)"ret", 3, (uint64_t)"Fail to remove state, this should not happen!", 45, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1722;
    }
LABEL_1185:
    v952 = v1036 + 4;
    if (v952 != v1458)
      continue;
    break;
  }
LABEL_1684:
  if (v1438)
    operator delete(v1438);
LABEL_1686:
  if (v1486)
    operator delete(v1486);
}

void sub_20F87F9C0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  if (SLOBYTE(STACK[0xFB7]) < 0)
    operator delete((void *)STACK[0xFA0]);
  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  STACK[0x490] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v2 + 72);
  *(unint64_t *)((char *)&STACK[0x490] + *(_QWORD *)(v3 - 24)) = v4;
  v6 = MEMORY[0x24BEDB848] + 16;
  STACK[0x4A0] = v5;
  STACK[0x4A8] = v6;
  if (SLOBYTE(STACK[0x4FF]) < 0)
    operator delete((void *)STACK[0x4E8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](STACK[0x3D0]);
  v7 = (void *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    STACK[0x3F0] = (unint64_t)v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_20F87FAB8()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FAC8()
{
  sub_20E86E8C4((uint64_t *)&STACK[0x448]);
  sub_20E86E8C4((uint64_t *)&STACK[0x420]);
  sub_20E86E658((uint64_t)&STACK[0x490]);
  sub_20E863714((uint64_t)&STACK[0xFD0]);
  JUMPOUT(0x20F87FEE4);
}

void sub_20F87FAF0()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  sub_20E863714(&STACK[0xFD0]);
  JUMPOUT(0x20F87FEE4);
}

void sub_20F87FB10()
{
  sub_20E863714((uint64_t)&STACK[0xFD0]);
  JUMPOUT(0x20F87FEE4);
}

void sub_20F87FBE8()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FBFC()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FC10()
{
  void *v0;

  sub_20E86665C((uint64_t)&STACK[0x448]);
  v0 = (void *)STACK[0x490];
  if (STACK[0x490])
  {
    STACK[0x498] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x20F87FEE4);
}

void sub_20F87FC38()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FC48()
{
  if (STACK[0xFA0])
  {
    STACK[0xFA8] = STACK[0xFA0];
    JUMPOUT(0x20F87FFC0);
  }
  JUMPOUT(0x20F87FFE4);
}

void sub_20F87FC50(_Unwind_Exception *a1)
{
  void *v2;

  if (STACK[0x778])
  {
    STACK[0x780] = STACK[0x778];
    JUMPOUT(0x20F87FFC0);
  }
  v2 = (void *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    STACK[0x3F0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_20F87FC58()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FC8C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  STACK[0x4A0] = v2;
  STACK[0x498] = v0;
  STACK[0x490] = v1;
  v3 = (std::__shared_weak_count *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (void *)STACK[0x490];
  if (STACK[0x490])
  {
    STACK[0x498] = (unint64_t)v6;
    operator delete(v6);
  }
  JUMPOUT(0x20F87FEE4);
}

void sub_20F87FCBC()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x1000C408CB30F5BLL);
  JUMPOUT(0x20F87FF7CLL);
}

void sub_20F87FCF0()
{
  if (STACK[0x778])
  {
    STACK[0x780] = STACK[0x778];
    JUMPOUT(0x20F87FFC0);
  }
  JUMPOUT(0x20F87FFE4);
}

void sub_20F87FCF8()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  if (STACK[0x778])
  {
    STACK[0x780] = STACK[0x778];
    JUMPOUT(0x20F87FFC0);
  }
  JUMPOUT(0x20F87FFE4);
}

void sub_20F87FD14()
{
  sub_20E86665C((uint64_t)&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD1C()
{
  void *v0;

  __cxa_free_exception(v0);
  sub_20E86665C((uint64_t)&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD2C()
{
  sub_20E86665C((uint64_t)&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD34()
{
  void *v0;

  __cxa_free_exception(v0);
  sub_20E86665C((uint64_t)&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD48()
{
  void *v0;

  v0 = (void *)STACK[0x490];
  if (STACK[0x490])
  {
    STACK[0x498] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0xFA0])
  {
    STACK[0xFA8] = STACK[0xFA0];
    JUMPOUT(0x20F87FFC0);
  }
  JUMPOUT(0x20F87FFE4);
}

void sub_20F87FD54()
{
  sub_20F28AC44((uint64_t)&STACK[0x490]);
  sub_20E86665C((uint64_t)&STACK[0x438]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD64()
{
  sub_20F28AC44((uint64_t)&STACK[0x490]);
  sub_20E86665C((uint64_t)&STACK[0x448]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD74()
{
  sub_20E86665C(&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD7C()
{
  sub_20E86665C(&STACK[0x490]);
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FD94()
{
  JUMPOUT(0x20F87FEA0);
}

void sub_20F87FDA8(void *a1, int a2)
{
  std::mutex *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_20FB91938(v2, v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F87FFF4);
}

void sub_20F87FDCC()
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&STACK[0xFD0]);
  sub_20FB44A44((uint64_t *)&STACK[0x448]);
  JUMPOUT(0x20F87FDE4);
}

void sub_20F87FDFC(void *a1, int a2)
{
  std::mutex *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_20FB91418(v2, v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F87FFF4);
}

void sub_20F87FE20()
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&STACK[0xFD0]);
  sub_20FB44988((uint64_t *)&STACK[0xFA0]);
  JUMPOUT(0x20F87FE38);
}

void sub_20F87FE4C(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F87FFF4);
}

void sub_20F87FE5C()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FE6C()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FE88()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FEF4()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FF34()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FF44()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FF54()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FF64()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FF78()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  v0 = (std::__shared_weak_count *)STACK[0xFA8];
  if (STACK[0xFA8])
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  if (STACK[0x778])
  {
    STACK[0x780] = STACK[0x778];
    JUMPOUT(0x20F87FFC0);
  }
  JUMPOUT(0x20F87FFE4);
}

void sub_20F87FFD0()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

void sub_20F87FFFC()
{
  if (!STACK[0x3E8])
    JUMPOUT(0x20F87FFF4);
  JUMPOUT(0x20F87FFECLL);
}

uint64_t sub_20F88000C(uint64_t a1, size_t a2, double a3)
{
  size_t prime;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t **v21;
  uint64_t **v22;
  float64x2_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  float64x2_t v27;
  float64x2_t **v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  float64x2_t *v34;
  double v35;
  double v37;
  double v39;
  float64x2_t *v41;
  float64x2_t v43;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  int64x2_t v50;
  float64x2_t v52;
  int64x2_t v53;
  double v57;
  double v58;
  float64x2_t v60;
  unsigned int v61;
  double v62;
  double v63;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float64x2_t *v73;
  int v74;
  double v75;
  unint64_t v76;
  unint64_t v77;
  uint8x8_t v78;
  uint64_t **v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  float64x2_t *v95;
  int v96;
  float64x2_t *v97;
  unsigned int v98;
  float64x2_t v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  void **v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  _BOOL8 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint8x8_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  double v121;
  double v122;
  double v124;
  double v127;
  float64x2_t v128;
  float64x2_t v132;
  float64x2_t v133;
  double v134;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  int v143;
  int v144;
  float64x2_t v146;
  double v147;
  double v149;
  double v150;
  double v151;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  int v160;
  int v161;
  BOOL v162;
  float64x2_t v163;
  double v164;
  double v166;
  double v167;
  float64x2_t v168;
  double v169;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  int v178;
  int v179;
  BOOL v180;
  float64x2_t v181;
  double v182;
  double v184;
  double v185;
  float64x2_t v186;
  double v187;
  unsigned int v188;
  float64x2_t v189;
  double v190;
  float64x2_t v191;
  double v192;
  float64x2_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v203;
  double v204;
  double v205;
  float64x2_t v206;
  float32x2_t *v207;
  float32x2_t *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t *v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  float32x2_t *v215;
  unsigned int v216;
  __int32 v218;
  float32x2_t *v219;
  double v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t *v225;
  uint64_t **v226;
  uint64_t **v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  _QWORD *v231;
  __int128 v232;
  uint64_t *v233;
  uint64_t **v234;
  uint64_t v235;
  size_t v237;
  _QWORD *v238;
  float64x2_t v239;
  double v240;
  uint64_t **v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  float64x2_t v247;
  uint64_t v248;

  prime = a2;
  v248 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 488)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1764, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_434;
  }
  if (!*(_BYTE *)(prime + 464))
    return 0;
  v6 = *(_QWORD *)(a1 + 2864);
  if (*(_QWORD *)(a1 + 2856) == v6)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1776, (uint64_t)"!seed_estimate_.state_ids.empty()", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v6 = *(_QWORD *)(a1 + 2864);
      goto LABEL_7;
    }
LABEL_434:
    abort();
  }
LABEL_7:
  v7 = *(_DWORD *)(v6 - 4);
  v245 = 0;
  v246 = 0;
  v243 = 0;
  v244 = &v245;
  v241 = &v242;
  v242 = 0;
  v8 = *(__int128 **)(prime + 496);
  v9 = *(__int128 **)(prime + 504);
  if (v8 == v9)
    goto LABEL_29;
  do
  {
    v10 = v245;
    v11 = &v245;
    v12 = &v245;
    if (v245)
    {
      v13 = *((_DWORD *)v8 + 4);
      v14 = *(uint64_t **)v8;
      v15 = *((_DWORD *)v8 + 2);
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v16 = *((_DWORD *)v10 + 12);
          if (v13 == v16)
            break;
          if (v13 >= v16)
          {
            if (v16 >= v13)
              goto LABEL_10;
            goto LABEL_24;
          }
LABEL_13:
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_26;
        }
        v17 = v12[4];
        if (v14 < v17)
          goto LABEL_13;
        if (v14 != v17)
        {
          if (v17 >= v14)
            goto LABEL_10;
          goto LABEL_24;
        }
        v18 = *((_DWORD *)v12 + 10);
        if (v15 < v18)
          goto LABEL_13;
        if (v18 >= v15)
          goto LABEL_10;
LABEL_24:
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          break;
        }
      }
    }
LABEL_26:
    v19 = operator new(0x38uLL);
    v20 = *v8;
    v19[6] = *((_QWORD *)v8 + 2);
    *((_OWORD *)v19 + 2) = v20;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v12;
    *v11 = v19;
    if (*v244)
    {
      v244 = (uint64_t **)*v244;
      v19 = *v11;
    }
    sub_20E868578(v245, v19);
    ++v246;
LABEL_10:
    v8 += 4;
  }
  while (v8 != v9);
  v21 = v244;
  if (v244 == &v245)
    goto LABEL_29;
  while (2)
  {
    if (v21[4] || *((_DWORD *)v21 + 10) != v7)
      goto LABEL_417;
    v225 = v242;
    v226 = &v242;
    v227 = &v242;
    if (!v242)
      goto LABEL_414;
    v228 = *((_DWORD *)v21 + 12);
    while (2)
    {
      while (2)
      {
        v227 = (uint64_t **)v225;
        v229 = *((_DWORD *)v225 + 12);
        if (v228 != v229)
        {
          if (v228 >= v229)
          {
            if (v229 >= v228)
              goto LABEL_417;
            goto LABEL_412;
          }
          goto LABEL_405;
        }
        if (v227[4] || (v230 = *((_DWORD *)v227 + 10), v7 < v230))
        {
LABEL_405:
          v225 = *v227;
          v226 = v227;
          if (!*v227)
            goto LABEL_414;
          continue;
        }
        break;
      }
      if (v230 >= v7)
        goto LABEL_417;
LABEL_412:
      v225 = v227[1];
      if (v225)
        continue;
      break;
    }
    v226 = v227 + 1;
LABEL_414:
    v231 = operator new(0x38uLL);
    v232 = *((_OWORD *)v21 + 2);
    v231[6] = v21[6];
    *((_OWORD *)v231 + 2) = v232;
    *v231 = 0;
    v231[1] = 0;
    v231[2] = v227;
    *v226 = v231;
    if (*v241)
    {
      v241 = (uint64_t **)*v241;
      v231 = *v226;
    }
    sub_20E868578(v242, v231);
    ++v243;
LABEL_417:
    v233 = v21[1];
    if (v233)
    {
      do
      {
        v234 = (uint64_t **)v233;
        v233 = (uint64_t *)*v233;
      }
      while (v233);
    }
    else
    {
      do
      {
        v234 = (uint64_t **)v21[2];
        _ZF = *v234 == (uint64_t *)v21;
        v21 = v234;
      }
      while (!_ZF);
    }
    v21 = v234;
    if (v234 != &v245)
      continue;
    break;
  }
LABEL_29:
  v22 = v241;
  if (v241 == &v242)
  {
LABEL_423:
    v235 = 0;
    goto LABEL_424;
  }
  v23 = (float64x2_t *)(prime + 440);
  v24 = (uint64_t *)(a1 + 14176);
  v237 = prime;
  v238 = (_QWORD *)(a1 + 14192);
  while (2)
  {
    v25 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(a1 + 7952) + 1784), (uint64_t *)v22 + 4);
    if (v25)
      v28 = (float64x2_t **)(v25 + 5);
    else
      v28 = 0;
    if (!v25
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1791, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_430:
      abort();
    }
    v29 = v28[8];
    if (!v29)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1792, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_430;
      }
      v29 = v28[8];
    }
    v30 = **v28;
    _Q2.f64[0] = (*v28)[2].f64[1];
    v31 = *(float64x2_t *)((char *)*v28 + 24);
    v32 = (*v28)[4].f64[0];
    _Q5 = (*v28)[3];
    v34 = v28[4];
    v35 = v34[1].f64[0];
    _Q7 = *v34;
    v37 = v34[2].f64[1];
    _Q17 = *(float64x2_t *)((char *)v34 + 24);
    v39 = v34[4].f64[0];
    _Q19 = v34[3];
    v41 = v28[6];
    v27.f64[0] = v41[1].f64[0];
    _Q21 = *v41;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v41->f64[0]), v31, *v41, 1), _Q5, v27.f64[0]);
    __asm { FMLA            D23, D2, V21.D[1] }
    v27.f64[0] = _D23 + v32 * v27.f64[0];
    v47 = v28[2];
    _Q21.f64[0] = v47[1].f64[0];
    v48 = vaddq_f64(v27, _Q21);
    v49 = vaddq_f64(v43, *v47);
    v50 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q7.f64[0]), v31, _Q7, 1), _Q5, v35);
    __asm { FMLA            D23, D2, V7.D[1] }
    v52.f64[0] = _D23 + v32 * v35;
    v53 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q17.f64[0]), v31, _Q17, 1), _Q5, v37);
    __asm { FMLA            D23, D2, V17.D[1] }
    _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, _Q19.f64[0]), v31, _Q19, 1), _Q5, v39);
    __asm { FMLA            D0, D2, V19.D[1] }
    v57 = _D0 + v32 * v39;
    _Q2.f64[0] = v23[1].f64[0];
    *(_QWORD *)&v58 = *(_OWORD *)&vsubq_f64(_Q2, v48);
    _Q3 = vsubq_f64(*v23, v49);
    v52.f64[1] = _D23 + v32 * v37;
    v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v50, v53), _Q3.f64[0]), (float64x2_t)vzip2q_s64(v50, v53), _Q3, 1), v52, v58);
    _Q3.f64[0] = _Q3.f64[1];
    __asm { FMLA            D5, D3, V1.D[1] }
    v239 = v60;
    v240 = vmlad_n_f64(_Q5.f64[0], v57, v58);
    v61 = LODWORD(v29[62].f64[0]);
    if (v61 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_433;
      }
      v61 = LODWORD(v29[62].f64[0]);
      if (v61 > 7)
        goto LABEL_48;
LABEL_42:
      if (v61 > 3)
      {
        if (v61 == 6)
          goto LABEL_49;
      }
      else
      {
        if (v61 <= 1)
        {
          if (!v61)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_433:
            abort();
          }
          goto LABEL_49;
        }
        if (v61 == 2)
          goto LABEL_49;
      }
LABEL_54:
      v64 = *(int8x8_t *)(a1 + 14184);
      if (v64)
      {
        v65 = *((unsigned int *)v22 + 12);
        v66 = (uint8x8_t)vcnt_s8(v64);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          v67 = *((unsigned int *)v22 + 12);
          if (*(_QWORD *)&v64 <= v65)
            v67 = v65 % *(_QWORD *)&v64;
        }
        else
        {
          v67 = (v64.i32[0] - 1) & v65;
        }
        v68 = *(uint64_t ***)(*v24 + 8 * v67);
        if (v68)
        {
          v69 = *v68;
          if (v69)
          {
            if (v66.u32[0] < 2uLL)
            {
              v70 = *(_QWORD *)&v64 - 1;
              while (1)
              {
                v72 = v69[1];
                if (v72 == v65)
                {
                  if (*((_DWORD *)v69 + 4) == (_DWORD)v65)
                    goto LABEL_143;
                }
                else if ((v72 & v70) != v67)
                {
                  goto LABEL_74;
                }
                v69 = (uint64_t *)*v69;
                if (!v69)
                  goto LABEL_74;
              }
            }
            do
            {
              v71 = v69[1];
              if (v71 == v65)
              {
                if (*((_DWORD *)v69 + 4) == (_DWORD)v65)
                  goto LABEL_143;
              }
              else
              {
                if (v71 >= *(_QWORD *)&v64)
                  v71 %= *(_QWORD *)&v64;
                if (v71 != v67)
                  break;
              }
              v69 = (uint64_t *)*v69;
            }
            while (v69);
          }
        }
      }
LABEL_74:
      v73 = v28[8];
      v74 = LODWORD(v73[62].f64[0]);
      if (v74 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_429;
        }
        v74 = LODWORD(v73[62].f64[0]);
      }
      if (!v74)
        goto LABEL_428;
      if (v74 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_429;
        }
        v74 = LODWORD(v73[62].f64[0]);
      }
      if (!v74)
      {
LABEL_428:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_429:
        abort();
      }
      v75 = tan(v73[9].f64[0] * 0.0174532925);
      v76 = *((unsigned int *)v22 + 12);
      v77 = *(_QWORD *)(a1 + 14184);
      if (v77)
      {
        v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
        v78.i16[0] = vaddlv_u8(v78);
        if (v78.u32[0] > 1uLL)
        {
          prime = *((unsigned int *)v22 + 12);
          if (v77 <= v76)
            prime = v76 % v77;
        }
        else
        {
          prime = ((_DWORD)v77 - 1) & v76;
        }
        v79 = *(uint64_t ***)(*v24 + 8 * prime);
        if (v79)
        {
          v80 = *v79;
          if (v80)
          {
            if (v78.u32[0] < 2uLL)
            {
              while (1)
              {
                v82 = v80[1];
                if (v82 == v76)
                {
                  if (*((_DWORD *)v80 + 4) == (_DWORD)v76)
                    goto LABEL_143;
                }
                else if ((v82 & (v77 - 1)) != prime)
                {
                  goto LABEL_102;
                }
                v80 = (uint64_t *)*v80;
                if (!v80)
                  goto LABEL_102;
              }
            }
            do
            {
              v81 = v80[1];
              if (v81 == v76)
              {
                if (*((_DWORD *)v80 + 4) == (_DWORD)v76)
                  goto LABEL_143;
              }
              else
              {
                if (v81 >= v77)
                  v81 %= v77;
                if (v81 != prime)
                  break;
              }
              v80 = (uint64_t *)*v80;
            }
            while (v80);
          }
        }
      }
LABEL_102:
      v83 = operator new(0x20uLL);
      *v83 = 0;
      v83[1] = v76;
      *((_DWORD *)v83 + 4) = v76;
      *((double *)v83 + 3) = v75 * v75;
      v84 = (float)(unint64_t)(*(_QWORD *)(a1 + 14200) + 1);
      v85 = *(float *)(a1 + 14208);
      if (v77 && (float)(v85 * (float)v77) >= v84)
      {
        v76 = prime;
      }
      else
      {
        v86 = v77 < 3 || (v77 & (v77 - 1)) != 0;
        v87 = v86 | (2 * v77);
        v88 = vcvtps_u32_f32(v84 / v85);
        if (v87 <= v88)
          prime = v88;
        else
          prime = v87;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v77 = *(_QWORD *)(a1 + 14184);
        }
        if (prime > v77)
          goto LABEL_118;
        if (prime < v77)
        {
          v89 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 14200) / *(float *)(a1 + 14208));
          if (v77 < 3 || (v90 = (uint8x8_t)vcnt_s8((int8x8_t)v77), v90.i16[0] = vaddlv_u8(v90), v90.u32[0] > 1uLL))
          {
            v89 = std::__next_prime(v89);
          }
          else
          {
            v91 = 1 << -(char)__clz(v89 - 1);
            if (v89 >= 2)
              v89 = v91;
          }
          if (prime <= v89)
            prime = v89;
          if (prime < v77)
LABEL_118:
            sub_20E8D2B3C(a1 + 14176, prime);
        }
        v77 = *(_QWORD *)(a1 + 14184);
        if ((v77 & (v77 - 1)) != 0)
        {
          if (v77 <= v76)
            v76 %= v77;
        }
        else
        {
          v76 = ((_DWORD)v77 - 1) & v76;
        }
      }
      v92 = *v24;
      v93 = *(_QWORD **)(*v24 + 8 * v76);
      if (v93)
      {
        *v83 = *v93;
      }
      else
      {
        *v83 = *v238;
        *v238 = v83;
        *(_QWORD *)(v92 + 8 * v76) = v238;
        if (!*v83)
        {
LABEL_142:
          ++*(_QWORD *)(a1 + 14200);
LABEL_143:
          v95 = v28[8];
          v96 = LODWORD(v95[62].f64[0]);
          if (v96 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_432;
            }
            v96 = LODWORD(v95[62].f64[0]);
          }
          if (!v96)
            goto LABEL_431;
          if (v96 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_432;
            }
            if (!LODWORD(v95[62].f64[0]))
            {
LABEL_431:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_432:
              abort();
            }
            if (v95[9].f64[0] >= 90.0)
              goto LABEL_167;
          }
          else if (v95[9].f64[0] >= 90.0)
          {
            goto LABEL_167;
          }
          v97 = v28[8];
          v98 = LODWORD(v97[62].f64[0]);
          if (v98 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_432;
            }
            v98 = LODWORD(v97[62].f64[0]);
            if (v98 <= 7)
            {
LABEL_155:
              if (v98 > 3)
              {
                if (v98 == 6)
                  goto LABEL_167;
              }
              else
              {
                if (v98 <= 1)
                {
                  if (!v98)
                    goto LABEL_431;
                  goto LABEL_167;
                }
                if (v98 == 2)
                  goto LABEL_167;
              }
              goto LABEL_166;
            }
          }
          else if (v98 <= 7)
          {
            goto LABEL_155;
          }
          if (v98 == 13)
            goto LABEL_167;
LABEL_166:
          if (v240 <= 0.01)
            goto LABEL_393;
LABEL_167:
          v99 = v239;
          v100 = *((unsigned int *)v22 + 12);
          v101 = *(_QWORD *)(a1 + 14184);
          if (v101)
          {
            v102 = (uint8x8_t)vcnt_s8((int8x8_t)v101);
            v102.i16[0] = vaddlv_u8(v102);
            if (v102.u32[0] > 1uLL)
            {
              prime = *((unsigned int *)v22 + 12);
              if (v101 <= v100)
                prime = v100 % v101;
            }
            else
            {
              prime = ((_DWORD)v101 - 1) & v100;
            }
            v103 = *(void ***)(*v24 + 8 * prime);
            if (v103)
            {
              v104 = *v103;
              if (*v103)
              {
                if (v102.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v106 = v104[1];
                    if (v106 == v100)
                    {
                      if (*((_DWORD *)v104 + 4) == (_DWORD)v100)
                        goto LABEL_225;
                    }
                    else if ((v106 & (v101 - 1)) != prime)
                    {
                      goto LABEL_187;
                    }
                    v104 = (_QWORD *)*v104;
                    if (!v104)
                      goto LABEL_187;
                  }
                }
                do
                {
                  v105 = v104[1];
                  if (v105 == v100)
                  {
                    if (*((_DWORD *)v104 + 4) == (_DWORD)v100)
                      goto LABEL_225;
                  }
                  else
                  {
                    if (v105 >= v101)
                      v105 %= v101;
                    if (v105 != prime)
                      break;
                  }
                  v104 = (_QWORD *)*v104;
                }
                while (v104);
              }
            }
          }
LABEL_187:
          v104 = operator new(0x20uLL);
          *v104 = 0;
          v104[1] = v100;
          *((_DWORD *)v104 + 4) = *((_DWORD *)v22 + 12);
          v104[3] = 0;
          v107 = (float)(unint64_t)(*(_QWORD *)(a1 + 14200) + 1);
          v108 = *(float *)(a1 + 14208);
          if (v101 && (float)(v108 * (float)v101) >= v107)
          {
            v100 = prime;
          }
          else
          {
            v109 = (v101 & (v101 - 1)) != 0;
            if (v101 < 3)
              v109 = 1;
            v110 = v109 | (2 * v101);
            v111 = vcvtps_u32_f32(v107 / v108);
            if (v110 <= v111)
              prime = v111;
            else
              prime = v110;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v101 = *(_QWORD *)(a1 + 14184);
            }
            if (prime > v101)
              goto LABEL_200;
            if (prime < v101)
            {
              v112 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 14200) / *(float *)(a1 + 14208));
              if (v101 < 3
                || (v113 = (uint8x8_t)vcnt_s8((int8x8_t)v101), v113.i16[0] = vaddlv_u8(v113), v113.u32[0] > 1uLL))
              {
                v112 = std::__next_prime(v112);
              }
              else
              {
                v114 = 1 << -(char)__clz(v112 - 1);
                if (v112 >= 2)
                  v112 = v114;
              }
              if (prime <= v112)
                prime = v112;
              if (prime < v101)
LABEL_200:
                sub_20E8D2B3C(a1 + 14176, prime);
            }
            v101 = *(_QWORD *)(a1 + 14184);
            if ((v101 & (v101 - 1)) != 0)
            {
              if (v101 <= v100)
                v100 %= v101;
            }
            else
            {
              v100 = ((_DWORD)v101 - 1) & v100;
            }
          }
          v115 = *v24;
          v116 = *(_QWORD **)(*v24 + 8 * v100);
          if (v116)
          {
            *v104 = *v116;
          }
          else
          {
            *v104 = *v238;
            *v238 = v104;
            *(_QWORD *)(v115 + 8 * v100) = v238;
            if (!*v104)
            {
LABEL_224:
              ++*(_QWORD *)(a1 + 14200);
LABEL_225:
              if (v99.f64[0] * v99.f64[0] + v99.f64[1] * v99.f64[1] <= v240 * (*((double *)v104 + 3) * v240))
                goto LABEL_226;
              goto LABEL_393;
            }
            v117 = *(_QWORD *)(*v104 + 8);
            if ((v101 & (v101 - 1)) != 0)
            {
              if (v117 >= v101)
                v117 %= v101;
            }
            else
            {
              v117 &= v101 - 1;
            }
            v116 = (_QWORD *)(*v24 + 8 * v117);
          }
          *v116 = v104;
          goto LABEL_224;
        }
        v94 = *(_QWORD *)(*v83 + 8);
        if ((v77 & (v77 - 1)) != 0)
        {
          if (v94 >= v77)
            v94 %= v77;
        }
        else
        {
          v94 &= v77 - 1;
        }
        v93 = (_QWORD *)(*v24 + 8 * v94);
      }
      *v93 = v83;
      goto LABEL_142;
    }
    if (v61 <= 7)
      goto LABEL_42;
LABEL_48:
    if (v61 != 13)
      goto LABEL_54;
LABEL_49:
    if (v240 <= 0.01)
      goto LABEL_393;
    v62 = sub_20F29212C((uint64_t)v28[8], 0.0);
    if (fabs(v239.f64[0]) >= fabs(v62 * v240) || fabs(v239.f64[1]) >= fabs(v63 * v240))
      goto LABEL_393;
LABEL_226:
    v118 = (uint64_t)v28[8];
    v119 = *(_DWORD *)(v118 + 992);
    if (v119 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_436;
      }
      v119 = *(_DWORD *)(v118 + 992);
      if (v119 > 7)
        goto LABEL_235;
LABEL_228:
      if (v119 <= 3)
      {
        if (v119 <= 1)
        {
          if (!v119)
            goto LABEL_435;
          if (v240 < 0.00000001)
            goto LABEL_393;
          v247 = vmulq_n_f64(v239, 1.0 / v240);
LABEL_343:
          v189.f64[0] = *(double *)(v118 + 16) + *(double *)v118 * v247.f64[0] + *(double *)(v118 + 8) * v247.f64[1];
          v190 = v247.f64[1] * *(double *)(v118 + 32) + *(double *)(v118 + 40);
          goto LABEL_378;
        }
        if (v119 == 2)
        {
          if (*(_DWORD *)(v118 + 212))
          {
            if (v240 < 0.00000001)
              goto LABEL_393;
            _Q2 = vmulq_n_f64(v239, 1.0 / v240);
            _D0 = vmuld_lane_f64(1.0 / v240, v239, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v132 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v118 + 192), *(int8x16_t *)(v118 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v118 + 192), *(float64x2_t *)(v118 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v118 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v118 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v118 + 184) * *(double *)&_D1))));
            v247 = v132;
          }
          else
          {
            if (v240 < 0.00000001)
              goto LABEL_393;
            _Q2 = vmulq_n_f64(v239, 1.0 / v240);
            _D0 = vmuld_lane_f64(1.0 / v240, v239, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v132 = vmulq_n_f64(_Q2, *(double *)(v118 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v118 + 176) + *(double *)(v118 + 184) * _D1));
            v247 = v132;
          }
          goto LABEL_368;
        }
        _V0.D[1] = v239.f64[1];
        _D1 = v239.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v173 = sqrt(_D6);
        v174 = fabs(v240);
        v175 = fabs(v173);
        v176 = v174 / v175;
        if (v174 >= v175)
          v176 = v175 / v174;
        if (v176 <= 0.414213562)
        {
          v178 = 1;
          v179 = 2;
          v177 = v176;
          if (_D6 >= 0.00000001)
          {
LABEL_315:
            if (v174 < v175)
              v178 = -v178;
            else
              v179 = v176 > 0.414213562;
            v180 = v173 == INFINITY && v174 == INFINITY;
            v181 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v177 * v177), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v177 * v177), (float64x2_t)xmmword_210315370), v177 * v177 * (v177 * v177))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v177 * v177), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v177 * v177), (float64x2_t)xmmword_210315380), v177 * v177 * (v177 * v177))),
                       v177 * v177 * (v177 * v177) * (v177 * v177 * (v177 * v177))));
            v182 = v177 + v177 * vdivq_f64(v181, (float64x2_t)vdupq_laneq_s64((int64x2_t)v181, 1)).f64[0];
            if (v180)
              v182 = 0.785398163;
            if (v173 == 0.0 && v240 == 0.0)
              v184 = 0.0;
            else
              v184 = v182;
            if (v240 < 0.0)
            {
              v179 = 4 - v179;
              v178 = -v178;
            }
            if (v173 < 0.0)
            {
              v179 = -v179;
              v178 = -v178;
            }
            v185 = (double)v179 * 3.061617e-17 + (double)v179 * 0.785398163 + v184 * (double)v178;
            v186 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), v185 * v185)), v185 * v185);
            v187 = 1.0 / v173 * (v185 + v185 * (v186.f64[0] + vmuld_lane_f64(v185 * v185 * (v185 * v185), v186, 1)));
            goto LABEL_364;
          }
        }
        else
        {
          v177 = (v175 - v174) / (v174 + v175);
          if (v174 >= v175)
            v177 = -v177;
          v178 = -1;
          v179 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_315;
        }
        v187 = 1.0 / v240;
LABEL_364:
        v132 = vmulq_n_f64(v239, v187);
        v247 = v132;
        goto LABEL_368;
      }
      if (v119 > 5)
      {
        if (v119 != 6)
        {
          v120 = sub_20EB31FFC(v118, &v247, &v239);
          goto LABEL_337;
        }
        v133 = vaddq_f64(vdivq_f64(v239, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v240, 0)), *(float64x2_t *)(v118 + 192));
        v134 = sqrt(vaddvq_f64(vmulq_f64(v133, v133)));
        v128 = vaddq_f64(*(float64x2_t *)(v118 + 208), vmulq_n_f64(v133, v134* (v134* (*(double *)(v118 + 168) + v134 * (*(double *)(v118 + 176) + *(double *)(v118 + 184) * v134)))+ 1.0));
        goto LABEL_256;
      }
      if (v119 == 5)
      {
        v121 = v239.f64[0] * v239.f64[0] + v239.f64[1] * v239.f64[1];
        if (v121 >= 0.00000001)
        {
          v194 = sqrt(v121);
          if (v194 <= v240)
          {
            v205 = v194 / v240 * 0.785398163
                 - v194 / v240 * (v194 / v240 + -1.0) * (v194 / v240 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v194 <= -v240)
            {
              v196 = v194 / v240 * 0.785398163
                   - v194 / v240 * (-1.0 - v194 / v240) * (v194 / v240 * -0.0663008339 + 0.244711287);
              v197 = 3.14159265;
            }
            else
            {
              v195 = fabs(v240 / v194);
              v196 = v240 / v194 * (v195 + -1.0) * (v195 * 0.0663008339 + 0.244711287) + v240 / v194 * -0.785398163;
              v197 = 1.57079633;
            }
            v205 = v196 + v197;
          }
          v206 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), v205 * v205)), v205 * v205);
          v122 = (v205 + v205 * (v206.f64[0] + vmuld_lane_f64(v205 * v205 * (v205 * v205), v206, 1))) / v194;
        }
        else
        {
          if (v240 == 0.0)
            goto LABEL_393;
          v122 = 1.0 / v240;
        }
        v193.f64[0] = v239.f64[0] * v122;
        v192 = v239.f64[1] * v122;
        v247.f64[0] = v239.f64[0] * v122;
        v247.f64[1] = v239.f64[1] * v122;
LABEL_375:
        v198 = *(double *)(v118 + 8);
        v199 = *(double *)v118 * v193.f64[0];
        goto LABEL_376;
      }
      _V0.D[1] = v239.f64[1];
      _D1 = v239.f64[1];
      __asm { FMLA            D6, D1, V0.D[1] }
      v155 = sqrt(_D6);
      v156 = fabs(v240);
      v157 = fabs(v155);
      v158 = v156 / v157;
      if (v156 >= v157)
        v158 = v157 / v156;
      if (v158 <= 0.414213562)
      {
        v160 = 1;
        v161 = 2;
        v159 = v158;
        if (_D6 >= 0.00000001)
        {
LABEL_290:
          if (v156 < v157)
            v160 = -v160;
          else
            v161 = v158 > 0.414213562;
          v162 = v155 == INFINITY && v156 == INFINITY;
          v163 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v159 * v159), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v159 * v159), (float64x2_t)xmmword_210315370), v159 * v159 * (v159 * v159))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v159 * v159), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v159 * v159), (float64x2_t)xmmword_210315380), v159 * v159 * (v159 * v159))), v159 * v159 * (v159 * v159) * (v159 * v159 * (v159 * v159))));
          v164 = v159 + v159 * vdivq_f64(v163, (float64x2_t)vdupq_laneq_s64((int64x2_t)v163, 1)).f64[0];
          if (v162)
            v164 = 0.785398163;
          if (v155 == 0.0 && v240 == 0.0)
            v166 = 0.0;
          else
            v166 = v164;
          if (v240 < 0.0)
          {
            v161 = 4 - v161;
            v160 = -v160;
          }
          if (v155 < 0.0)
          {
            v161 = -v161;
            v160 = -v160;
          }
          v167 = (double)v161 * 3.061617e-17 + (double)v161 * 0.785398163 + v166 * (double)v160;
          v168 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v118 + 168), *(int64x2_t *)(v118 + 184)), v167 * v167)), v167 * v167);
          v169 = 1.0 / v155 * (v167 + v167 * (v168.f64[0] + vmuld_lane_f64(v167 * v167 * (v167 * v167), v168, 1)));
          goto LABEL_361;
        }
      }
      else
      {
        v159 = (v157 - v156) / (v156 + v157);
        if (v156 >= v157)
          v159 = -v159;
        v160 = -1;
        v161 = 1;
        if (_D6 >= 0.00000001)
          goto LABEL_290;
      }
      v169 = 1.0 / v240;
LABEL_361:
      v193 = vmulq_n_f64(v239, v169);
      v247 = v193;
      v192 = v193.f64[1];
      goto LABEL_375;
    }
    if (v119 <= 7)
      goto LABEL_228;
LABEL_235:
    if (v119 > 0xB)
    {
      if (v119 > 0xD)
      {
        if (v119 == 14)
          v120 = sub_20EB247C0(&v247, (uint64_t)&v239, (double *)(v118 + 168), (*(double *)v118 + *(double *)(v118 + 32)) * 0.5);
        else
          v120 = sub_20EB3E39C(v118, &v247, &v239);
LABEL_337:
        if (!v120)
          goto LABEL_393;
        v188 = *(_DWORD *)(v118 + 992);
        if (v188 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_436;
          }
          v188 = *(_DWORD *)(v118 + 992);
          if (v188 <= 7)
          {
LABEL_340:
            if (v188 <= 3)
            {
              if (v188 <= 1)
              {
                if (!v188)
                {
LABEL_435:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_436:
                  abort();
                }
                goto LABEL_343;
              }
              v132 = v247;
LABEL_368:
              v189.f64[0] = *(double *)(v118 + 16)
                          + *(double *)v118 * v132.f64[0]
                          + vmuld_lane_f64(*(double *)(v118 + 8), v132, 1);
              v203 = *(double *)(v118 + 40);
              v204 = vmuld_lane_f64(*(double *)(v118 + 32), v132, 1);
              goto LABEL_377;
            }
            if (v188 <= 5)
            {
              v192 = v247.f64[1];
              v193.f64[0] = v247.f64[0];
              goto LABEL_375;
            }
LABEL_351:
            v189.f64[0] = *(double *)(v118 + 16) + *(double *)v118 * v247.f64[0] + *(double *)(v118 + 8) * v247.f64[1];
            v190 = *(double *)(v118 + 40) + *(double *)(v118 + 32) * v247.f64[1];
            goto LABEL_378;
          }
        }
        else if (v188 <= 7)
        {
          goto LABEL_340;
        }
        if (v188 <= 0xB)
        {
          v191.f64[0] = v247.f64[0];
          if (v188 <= 9)
          {
            v192 = v247.f64[1];
            goto LABEL_358;
          }
          v189.f64[0] = *(double *)(v118 + 16) + *(double *)v118 * v247.f64[0] + *(double *)(v118 + 8) * v247.f64[1];
          v190 = *(double *)(v118 + 40) + *(double *)(v118 + 32) * v247.f64[1];
          goto LABEL_378;
        }
        goto LABEL_351;
      }
      if (v119 != 13 || v240 < 0.00000001)
        goto LABEL_393;
      _Q0 = vdivq_f64(v239, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v240, 0));
      v124 = (*(double *)v118 + *(double *)(v118 + 32)) * 0.5;
      _D3 = _Q0.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v127 = v124 * (_D2 * v124);
      v128 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v127* (*(double *)(v118 + 168)+ v124 * *(double *)(v118 + 224)+ v127* (*(double *)(v118 + 176)+ v124 * *(double *)(v118 + 232)+ v127* (*(double *)(v118 + 184)+ v124 * *(double *)(v118 + 240)+ v127* (*(double *)(v118 + 192)+ v124 * *(double *)(v118 + 248)+ v127* (*(double *)(v118 + 200)+ v124 * *(double *)(v118 + 256)+ v127
                                   * (*(double *)(v118 + 208)
                                    + v124 * *(double *)(v118 + 264)
                                    + v127 * (*(double *)(v118 + 216) + *(double *)(v118 + 272) * v124 + v127 * 0.0)))))))
                              / 100.0
                              + 1.0),
                              0));
LABEL_256:
      v247 = v128;
      goto LABEL_351;
    }
    if (v119 > 9)
    {
      if (v119 == 10)
        v120 = sub_20EB24288(&v247, (uint64_t)&v239, (double *)(v118 + 168), (*(double *)v118 + *(double *)(v118 + 32)) * 0.5);
      else
        v120 = sub_20EB3A2E4(v118, &v247, &v239);
      goto LABEL_337;
    }
    if (v119 == 9)
    {
      v120 = sub_20EB3641C(v118, &v247, &v239);
      goto LABEL_337;
    }
    _V0.D[1] = v239.f64[1];
    _D1 = v239.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v138 = sqrt(_D6);
    v139 = fabs(v240);
    v140 = fabs(v138);
    v141 = v139 / v140;
    if (v139 >= v140)
      v141 = v140 / v139;
    if (v141 <= 0.414213562)
    {
      v143 = 1;
      v144 = 2;
      v142 = v141;
      if (_D6 >= 0.00000001)
        goto LABEL_265;
      goto LABEL_356;
    }
    v142 = (v140 - v139) / (v139 + v140);
    if (v139 >= v140)
      v142 = -v142;
    v143 = -1;
    v144 = 1;
    if (_D6 < 0.00000001)
    {
LABEL_356:
      v151 = 1.0 / v240;
      goto LABEL_357;
    }
LABEL_265:
    if (v139 < v140)
      v143 = -v143;
    else
      v144 = v141 > 0.414213562;
    _ZF = v138 == INFINITY && v139 == INFINITY;
    v146 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v142 * v142), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v142 * v142), (float64x2_t)xmmword_210315370), v142 * v142 * (v142 * v142))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v142 * v142), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v142 * v142), (float64x2_t)xmmword_210315380), v142 * v142 * (v142 * v142))), v142 * v142 * (v142 * v142) * (v142 * v142 * (v142 * v142))));
    v147 = v142 + v142 * vdivq_f64(v146, (float64x2_t)vdupq_laneq_s64((int64x2_t)v146, 1)).f64[0];
    if (_ZF)
      v147 = 0.785398163;
    if (v138 == 0.0 && v240 == 0.0)
      v149 = 0.0;
    else
      v149 = v147;
    if (v240 < 0.0)
    {
      v144 = 4 - v144;
      v143 = -v143;
    }
    if (v138 < 0.0)
    {
      v144 = -v144;
      v143 = -v143;
    }
    v150 = (double)v144 * 3.061617e-17 + (double)v144 * 0.785398163 + v149 * (double)v143;
    v151 = 1.0
         / v138
         * (v150
          * (v150
           * v150
           * (*(double *)(v118 + 168)
            + v150
            * v150
            * (*(double *)(v118 + 176)
             + v150
             * v150
             * (*(double *)(v118 + 184)
              + v150
              * v150
              * (*(double *)(v118 + 192)
               + v150
               * v150
               * (*(double *)(v118 + 200)
                + v150 * v150 * (*(double *)(v118 + 208) + v150 * v150 * *(double *)(v118 + 216)))))))
           + 1.0));
LABEL_357:
    v191 = vmulq_n_f64(v239, v151);
    v247 = v191;
    v192 = v191.f64[1];
LABEL_358:
    v198 = *(double *)(v118 + 8);
    v199 = *(double *)v118 * v191.f64[0];
LABEL_376:
    v189.f64[0] = *(double *)(v118 + 16) + v199 + v198 * v192;
    v203 = *(double *)(v118 + 40);
    v204 = v192 * *(double *)(v118 + 32);
LABEL_377:
    v190 = v204 + v203;
LABEL_378:
    v189.f64[1] = v190;
    v207 = *(float32x2_t **)(v237 + 496);
    v208 = *(float32x2_t **)(v237 + 504);
    v209 = *((_DWORD *)v22 + 10);
    v210 = (char *)v208 - (char *)v207;
    if (v208 != v207)
    {
      v211 = v22[4];
      v212 = *((_DWORD *)v22 + 12);
      v213 = v210 >> 6;
      while (1)
      {
        v214 = v213 >> 1;
        v215 = &v207[8 * (v213 >> 1)];
        v216 = v215[2].u32[0];
        _CF = v216 >= v212;
        if (v216 != v212)
          goto LABEL_386;
        if (*(_QWORD *)v215 >= (unint64_t)v211)
          break;
LABEL_380:
        v207 = v215 + 8;
        v214 = v213 + ~v214;
LABEL_381:
        v213 = v214;
        if (!v214)
          goto LABEL_389;
      }
      if ((uint64_t *)*v215 != v211)
        goto LABEL_381;
      _CF = v215[1].i32[0] >= v209;
LABEL_386:
      if (_CF)
        goto LABEL_381;
      goto LABEL_380;
    }
LABEL_389:
    v218 = v207[1].i32[0];
    v219 = v207 + 3;
    if (v218 != v209)
      v219 = 0;
    _D2 = vsubq_f64(vcvtq_f64_f32(v219[8]), v189).f64[1];
    __asm { FMLA            D0, D2, V1.D[1] }
    v222 = v219[4].f32[0];
    if (_D0 > *(double *)(a1 + 2064) * v222 * v222 || _D0 <= v222 * a3 * (v222 * a3))
    {
LABEL_393:
      v223 = v22[1];
      if (v223)
      {
        do
        {
          v224 = (uint64_t **)v223;
          v223 = (uint64_t *)*v223;
        }
        while (v223);
      }
      else
      {
        do
        {
          v224 = (uint64_t **)v22[2];
          _ZF = *v224 == (uint64_t *)v22;
          v22 = v224;
        }
        while (!_ZF);
      }
      v22 = v224;
      if (v224 == &v242)
        goto LABEL_423;
      continue;
    }
    break;
  }
  v235 = 1;
LABEL_424:
  sub_20E86872C((uint64_t)&v241, v242);
  sub_20E86872C((uint64_t)&v244, v245);
  return v235;
}

void sub_20F881EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_20E86872C((uint64_t)&a15, a16);
  sub_20E86872C((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20F881F54(uint64_t a1, uint64_t a2, int a3, int a4, double *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  float64_t **v18;
  uint64_t v19;
  unint64_t v20;
  double **v21;
  int v22;
  int v23;
  uint64_t *v24;
  float64x2_t v25;
  float64x2_t *v26;
  unsigned __int8 v34;
  uint64_t v36;
  double v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  uint64_t *v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v56;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  float64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  float64x2_t *v69;
  double v70;
  float64x2_t v71;
  double v72;
  uint64_t v73;
  uint64_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  uint64_t v80;
  float64_t **v81;
  double *v82;
  int v83;
  float64x2_t v84;
  double **v85;
  float64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  float64x2_t v89;
  uint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  _QWORD v94[40];
  uint64_t v95;
  double v96;
  float64x2_t v97;
  float64_t v98;
  __int128 v99;
  uint64_t v100;

  if (!*(_BYTE *)(a2 + 488))
    return 1;
  v10 = a2 + 40;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40))
    return 1;
  v90 = a1;
  v11 = *(_QWORD *)(a2 + 496);
  v12 = *(_QWORD *)(a2 + 504);
  v13 = v12 - v11;
  v14 = v10;
  v15 = (v12 - v11) >> 6;
  v16 = *(unsigned __int8 *)(a2 + 488);
  v87 = v14;
  if (!*(_BYTE *)(a2 + 488))
    v14 = 0;
  v17 = *(double *)(v14 + 384);
  v97 = (float64x2_t)xmmword_2103BAF20;
  v98 = 1.0;
  v95 = 0;
  v96 = 0.0;
  __p = 0;
  v92 = 0;
  v93 = 0;
  v82 = a5;
  if ((unint64_t)v13 > 0x53F)
  {
    sub_20EA6462C(&__p, v13 >> 5);
    v11 = *(_QWORD *)(a2 + 496);
    v12 = *(_QWORD *)(a2 + 504);
    v85 = (double **)__p;
    v18 = (float64_t **)((char *)__p + 8 * v15);
    if (*(_BYTE *)(a2 + 488))
      v19 = v87;
    else
      v19 = 0;
    if (v11 != v12)
      goto LABEL_10;
LABEL_57:
    v45 = 0;
    v34 = 1;
    v46 = __p;
    if (!__p)
      goto LABEL_59;
    goto LABEL_58;
  }
  v85 = (double **)v94;
  v18 = (float64_t **)&v94[v15];
  if (v16)
    v19 = v87;
  else
    v19 = 0;
  if (v11 == v12)
    goto LABEL_57;
LABEL_10:
  v83 = a3;
  v20 = 0;
  v88 = 0;
  v81 = v18;
  v21 = v85;
  do
  {
    if (a4)
    {
      if (*(_QWORD *)(v19 + 32) == *(_QWORD *)v11)
      {
        v22 = *(_DWORD *)(v19 + 48);
        v23 = *(_DWORD *)(v11 + 16);
        if (*(_DWORD *)(v19 + 40) == *(_DWORD *)(v11 + 8))
          goto LABEL_19;
      }
      else
      {
        v22 = *(_DWORD *)(v19 + 48);
        v23 = *(_DWORD *)(v11 + 16);
      }
      if (v22 != v23)
        goto LABEL_12;
LABEL_19:
      if (v22 != v23 && v17 > *(double *)(v90 + 40))
        goto LABEL_12;
    }
    v24 = sub_20E9DF85C((_QWORD *)(v90 + 64), (uint64_t *)v11);
    if (!v24
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 201, (uint64_t)"cameraPoseIter != camera_data_.end()", 36, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v26 = (float64x2_t *)(v11 + 40);
    *v18 = (float64_t *)(v24 + 5);
    *v21 = (double *)(v11 + 40);
    if (*(_DWORD *)(v19 + 48) == *(_DWORD *)(v11 + 16)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)v11
      && *(_DWORD *)(v19 + 40) == *(_DWORD *)(v11 + 8))
    {
      _Q0 = *v26;
      v25.f64[0] = v98;
      _Q2 = vmulq_f64(_Q0, _Q0);
      _D3 = *(_QWORD *)(v11 + 48);
      __asm { FMLA            D2, D3, V0.D[1] }
      _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v25.f64[0] * v25.f64[0]);
      v97 = vmulq_n_f64(*v26, _Q2.f64[0]);
      *(_QWORD *)&v98 = *(_OWORD *)&vmulq_f64(v25, _Q2);
      v88 = v20;
    }
    ++v18;
    ++v21;
    ++v20;
LABEL_12:
    v11 += 64;
  }
  while (v11 != v12);
  if (v20 <= 1)
  {
    v45 = 0;
    if (v20 == 1)
      v34 = 2;
    else
      v34 = 1;
    v46 = __p;
    if (!__p)
      goto LABEL_59;
LABEL_58:
    v92 = v46;
    operator delete(v46);
    goto LABEL_59;
  }
  if (v83)
  {
    v36 = v87;
    if (!*(_BYTE *)(a2 + 488))
      v36 = 0;
    v37 = *(double *)(v36 + 376);
    v95 = *(_QWORD *)(v36 + 384);
    v96 = v37;
  }
  if (*(_BYTE *)(v90 + 56))
  {
    v38 = *(__int128 **)(a2 + 496);
    v39 = *(__int128 **)(a2 + 504);
    if (v38 != v39)
    {
      while (1)
      {
        v40 = *v38;
        v100 = *((_QWORD *)v38 + 2);
        v99 = v40;
        v41 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v90 + 48) + 1784), (uint64_t *)&v99);
        v43 = v41 ? (uint64_t)(v41 + 5) : 0;
        if (!v41
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 299, (uint64_t)"camera_pose_ref", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        if (*(double *)(*(_QWORD *)(v43 + 64) + 1424) > 0.0)
        {
          v44 = v87;
          if (!*(_BYTE *)(a2 + 488))
            v44 = 0;
          if (*(_DWORD *)(v44 + 48) == (_DWORD)v100
            && *(_QWORD *)(v44 + 32) == (_QWORD)v99
            && *(_DWORD *)(v44 + 40) == DWORD2(v99)
            && *(double *)(v44 + 88) == -1.79769313e308
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 311, (uint64_t)"!ExactlyEqual(track.getStructure()->anchor_row_measurement(), VIOAnchoredPoint3DBase<Float>::kInvalidAnchorRowMeasurement)", 122, (uint64_t)"The anchor row measurement has not been set in rolling-shutter compensation.", 76, (void (*)(void **))sub_21023DDB0))
          {
            break;
          }
          v42.f64[0] = *((float *)v38 + 9);
          sub_20F2B0AD8(v90, (int8x16_t **)v43, (uint64_t)&v99, v42);
        }
        v38 += 4;
        if (v38 == v39)
          goto LABEL_106;
      }
      abort();
    }
  }
LABEL_106:
  v45 = sub_20F2B04C8((__int128 *)&v97, &v96, (float64_t *)&v95, v85, v81, v20, v88);
  v34 = 5;
  v46 = __p;
  if (__p)
    goto LABEL_58;
LABEL_59:
  if (v45)
  {
    v47 = (_QWORD *)(v90 + 64);
    if (*(_BYTE *)(a2 + 488))
      v48 = v87;
    else
      v48 = 0;
    v49 = sub_20E9DF85C((_QWORD *)(v90 + 64), (uint64_t *)(v48 + 32));
    v50.f64[0] = v96;
    v51.f64[0] = v98;
    v52.f64[1] = v97.f64[1];
    v53 = vmulq_f64(v51, v50);
    _Q0 = vmulq_n_f64(v97, v96);
    _D4 = v49[39];
    v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v49 + 33), _Q0.f64[0]), *(float64x2_t *)(v49 + 37), _Q0, 1), *(float64x2_t *)(v49 + 41), v53.f64[0]);
    __asm { FMLA            D2, D4, V0.D[1] }
    v52.f64[0] = vmlad_n_f64(_D2, *((double *)v49 + 43), v53.f64[0]);
    *(_QWORD *)&v53.f64[0] = v49[47];
    v58 = *(_OWORD *)&vaddq_f64(v53, v52);
    v59 = vaddq_f64(*(float64x2_t *)(v49 + 45), v56);
    if (*(_BYTE *)(a2 + 488))
      v60 = v87;
    else
      v60 = 0;
    *(float64x2_t *)(v60 + 8) = v59;
    *(_QWORD *)(v60 + 24) = v58;
    if (*(_BYTE *)(a2 + 488))
      v61 = v87;
    else
      v61 = 0;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61) & 1) != 0)
    {
      v62 = v87;
      if (*(_BYTE *)(a2 + 488))
        goto LABEL_75;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 432, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_121;
      }
      v62 = *(_BYTE *)(a2 + 488) ? v87 : 0;
LABEL_75:
      v63 = sub_20E9DF85C(v47, (uint64_t *)(v62 + 32));
      if (!v63
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 435, (uint64_t)"anchorCameraIter != camera_data_.end()", 38, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
      {
LABEL_121:
        abort();
      }
      if (*(_BYTE *)(a2 + 488))
        v65 = v87;
      else
        v65 = 0;
      v66 = *(_QWORD *)(a2 + 496);
      v67 = *(_QWORD *)(a2 + 504);
      if (v66 != v67)
      {
        v68 = *(int8x16_t *)(v65 + 8);
        v64.f64[0] = *(float64_t *)(v65 + 24);
        v89 = v64;
        v69 = (float64x2_t *)(v63 + 45);
        v70 = 1.0;
        v71.f64[0] = *(float64_t *)(v65 + 8);
        *(_QWORD *)&v71.f64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
        v86 = v71;
        v68.i64[1] = *(_QWORD *)&v71.f64[1];
        v84 = (float64x2_t)v68;
        while (1)
        {
          if (*(_BYTE *)(a2 + 488))
            v73 = v87;
          else
            v73 = 0;
          if (*(_DWORD *)(v73 + 48) != *(_DWORD *)(v66 + 16)
            || *(_QWORD *)(v73 + 32) != *(_QWORD *)v66
            || *(_DWORD *)(v73 + 40) != *(_DWORD *)(v66 + 8))
          {
            v74 = sub_20E9DF85C(v47, (uint64_t *)v66);
            if (!v74
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 448, (uint64_t)"invPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_121;
            }
            v75.f64[0] = v69[1].f64[0];
            *(_QWORD *)&v75.f64[0] = *(_OWORD *)&vsubq_f64(v75, v89);
            v77 = vsubq_f64(*v69, v86);
            v72 = 1.0;
            if (fabs(v77.f64[0]) >= 1.0e-10 || fabs(v77.f64[1]) >= 1.0e-10 || fabs(v75.f64[0]) >= 1.0e-10)
            {
              *(_QWORD *)&v76.f64[0] = v74[47];
              *(_QWORD *)&v76.f64[0] = *(_OWORD *)&vsubq_f64(v76, v89);
              v78 = vsubq_f64(*(float64x2_t *)(v74 + 45), v84);
              if (fabs(v78.f64[0]) >= 1.0e-10 || fabs(v78.f64[1]) >= 1.0e-10 || fabs(v76.f64[0]) >= 1.0e-10)
              {
                v77.f64[1] = *(double *)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).i64;
                v78.f64[1] = *(double *)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).i64;
                v72 = (vmulq_f64(v77, v78).f64[0] + v77.f64[1] * v78.f64[1] + v75.f64[0] * v76.f64[0])
                    / sqrt((vmulq_f64(v77, v77).f64[0] + v77.f64[1] * v77.f64[1] + v75.f64[0] * v75.f64[0])* (vmulq_f64(v78, v78).f64[0] + v78.f64[1] * v78.f64[1] + v76.f64[0] * v76.f64[0]));
              }
            }
            if (v72 < v70)
              v70 = v72;
          }
          v66 += 64;
          if (v66 == v67)
            goto LABEL_110;
        }
      }
      v70 = 1.0;
LABEL_110:
      v79 = v96;
      if (v96 >= *(double *)(v90 + 16) && v96 <= *(double *)(v90 + 24) || v70 <= *(double *)(v90 + 32))
      {
        if (*(_BYTE *)(a2 + 488))
          v80 = v87;
        else
          v80 = 0;
        *(double *)(v80 + 104) = v70;
        v34 = 0;
        if (v82)
          *v82 = v79;
      }
      else
      {
        return 5;
      }
    }
    else
    {
      return 6;
    }
  }
  return v34;
}

void sub_20F882764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F882790(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  if (*(_BYTE *)(a1 + 488))
    *(_BYTE *)(a1 + 488) = 0;
  v2 = *(void **)(a1 + 496);
  *(_QWORD *)(a1 + 504) = v2;
  *(_DWORD *)(a1 + 520) = 0;
  if (v2)
    operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_20F8827DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 16);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F88282C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  float64x2_t *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  unsigned __int16 v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  _BOOL4 v37;
  char v38;
  _BOOL4 v39;
  int v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t **v50;
  float64x2_t v51;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t *v56;
  double v57;
  double v59;
  double v61;
  float64x2_t *v63;
  float64x2_t v65;
  float64x2_t *v66;
  double v67;
  float64x2_t v68;
  int64x2_t v69;
  float64x2_t v71;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  __int128 v91;
  float64x2_t v92;
  __int128 v93;
  float64x2_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  int v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  _OWORD v104[3];

  v2 = a2 + 40;
  if (*(_BYTE *)(a2 + 488))
    v3 = a2 + 40;
  else
    v3 = 0;
  if (*(_BYTE *)(v3 + 392))
    return 0;
  v6 = *a1;
  v7 = *a1 + 14232;
  v8 = (_BYTE *)(*a1 + 14376);
  if (!*v8 || (v9 = *(_QWORD *)(a2 + 496), v10 = *(_QWORD *)(a2 + 504), v9 == v10))
  {
LABEL_16:
    if (*(_BYTE *)(v3 + 393))
      return 0;
    if (sub_20F881F54(a1[2], a2, 0, 0, 0))
    {
      if (*(_BYTE *)(a2 + 488))
      {
        v22 = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        return v22;
      }
      return 0;
    }
    if (*(_BYTE *)(a2 + 488))
    {
      v102 = *(_OWORD *)(a2 + 48);
      v103 = *(_QWORD *)(a2 + 64);
    }
    if (*(_BYTE *)a1[3])
    {
      v24 = 6;
      if (*(_DWORD *)(*(_QWORD *)(a2 + 496) + 16) == *(_DWORD *)(*(_QWORD *)(a2 + 504) - 48))
        v24 = 5;
      v25 = (float64x2_t *)a1[v24];
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 1;
      v26 = a1[2];
      if (*(_BYTE *)a1[7])
      {
        v88 = *v25;
        v89 = v25[1];
        v90 = v25[2];
        v27 = (_OWORD *)a1[8];
        v28 = v27[1];
        v104[0] = *v27;
        v104[1] = v28;
        v104[2] = v27[2];
        v29 = sub_20FB99654(v26, a2, (uint64_t)&v88, (uint64_t)v104, (uint64_t)&v97);
        v37 = v29 > 0xFFu;
        if ((v29 & 1) == 0)
        {
          v38 = 0;
LABEL_41:
          v41 = 0;
          goto LABEL_42;
        }
      }
      else
      {
        v88 = *v25;
        v89 = v25[1];
        v90 = v25[2];
        v40 = sub_20FB98350(v26, a2, (uint64_t)&v88, 1, &v97);
        v37 = 0;
        v38 = 0;
        v41 = 0;
        if (!v40)
          goto LABEL_42;
      }
      if (*(_BYTE *)(v6 + 1998))
        v42 = *(_BYTE *)a1[4] != 0;
      else
        v42 = 0;
      v38 = 1;
      v41 = sub_20F881F54(a1[2], a2, 1, v42, 0);
      if (!v41)
      {
        v43 = a1[2];
        v88 = *v25;
        v89 = v25[1];
        v90 = v25[2];
        v38 = sub_20FB98350(v43, a2, (uint64_t)&v88, 1, &v97);
        goto LABEL_41;
      }
    }
    else
    {
      if (*(_BYTE *)(v6 + 1998))
        v39 = *(_BYTE *)a1[4] != 0;
      else
        v39 = 0;
      v41 = sub_20F881F54(a1[2], a2, 1, v39, 0);
      v37 = 0;
      v38 = v41 == 0;
    }
LABEL_42:
    if (v41)
    {
      v22 = 0;
      if (*(_BYTE *)(v6 + 1996))
        return v22;
      goto LABEL_77;
    }
    if (*v8
      && ((v44 = *(unsigned __int8 *)(a2 + 488), *(_BYTE *)(a2 + 488)) ? (v45 = v2) : (v45 = 0),
          sub_20F818B48(*(_QWORD *)(v6 + 14224), (float64x2_t *)(v45 + 8), v7, v30.f64[0], v31, v32, v33, v34, v35)))
    {
      *(_BYTE *)(v45 + 392) = 1;
      v46 = *(_QWORD *)(v6 + 15680);
      if (!v46)
        goto LABEL_75;
      v38 = 0;
      v37 = 0;
    }
    else
    {
      v46 = *(_QWORD *)(v6 + 15680);
      if (!v46)
        goto LABEL_65;
      v44 = *(unsigned __int8 *)(a2 + 488);
    }
    if (v44)
      v47 = v2;
    else
      v47 = 0;
    v48 = v47 + 8;
    v49 = a1[9];
    v50 = *(float64x2_t ***)(v47 + 96);
    v51 = **v50;
    _D4 = (*v50)[2].f64[1];
    v53 = *(float64x2_t *)((char *)*v50 + 24);
    v54 = (*v50)[4].f64[0];
    v55 = (*v50)[3];
    v56 = v50[4];
    v57 = v56[1].f64[0];
    _Q17 = *v56;
    v59 = v56[2].f64[1];
    _Q19 = *(float64x2_t *)((char *)v56 + 24);
    v61 = v56[4].f64[0];
    _Q21 = v56[3];
    v63 = v50[6];
    v30.f64[0] = v63[1].f64[0];
    _Q1 = *v63;
    v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, v63->f64[0]), v53, *v63, 1), v55, v30.f64[0]);
    __asm { FMLA            D23, D4, V1.D[1] }
    v30.f64[0] = _Q23.f64[0] + v54 * v30.f64[0];
    v66 = v50[2];
    _Q23.f64[0] = v66[1].f64[0];
    *(_QWORD *)&v67 = *(_OWORD *)&vaddq_f64(v30, _Q23);
    v68 = vaddq_f64(v65, *v66);
    v69 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q17.f64[0]), v53, _Q17, 1), v55, v57);
    __asm { FMLA            D23, D4, V17.D[1] }
    v71.f64[0] = _D23 + v54 * v57;
    _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q19.f64[0]), v53, _Q19, 1), v55, v59);
    __asm { FMLA            D23, D4, V19.D[1] }
    _Q3 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, _Q21.f64[0]), v53, _Q21, 1), v55, v61);
    __asm { FMLA            D2, D4, V21.D[1] }
    v76 = _D2 + v54 * v61;
    v77 = (float64x2_t)vzip1q_s64(v69, (int64x2_t)_Q17);
    v78 = (float64x2_t)vzip2q_s64(v69, (int64x2_t)_Q17);
    v71.f64[1] = _D23 + v54 * v59;
    _D18 = v68.f64[1];
    __asm { FMLA            D17, D18, V3.D[1] }
    _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], v76, v67);
    v88 = v77;
    v89 = (float64x2_t)_Q3.u64[0];
    v90 = v78;
    v91 = vdupq_laneq_s64(_Q3, 1).u64[0];
    v92 = v71;
    v93 = *(unint64_t *)&v76;
    v94 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v77, v68.f64[0]), v78, v68, 1), v71, v67));
    v95 = *(_OWORD *)&vnegq_f64(_Q17);
    v96 = 0x3FF0000000000000;
    v80 = v47 + 64;
    v81 = *(_QWORD *)(a2 + 496);
    v82 = *(_QWORD *)(a2 + 504);
    v83 = v81 != v82 && *(_DWORD *)(v81 + 16) != *(_DWORD *)(v82 - 48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, float64x2_t *, uint64_t, _BOOL8))(*(_QWORD *)v46 + 32))(v46, v48, v49, &v88, v80, v83))
    {
      v22 = 0;
      if (*(_BYTE *)(a2 + 488))
        v84 = v2;
      else
        v84 = 0;
      *(_BYTE *)(v84 + 393) = 1;
      ++*(_QWORD *)a1[10];
LABEL_76:
      *(_QWORD *)a1[16] += v22;
      if (*(_BYTE *)(v6 + 1996))
        return v22;
LABEL_77:
      if (*(_BYTE *)(a2 + 488))
      {
        *(_OWORD *)(a2 + 48) = v102;
        *(_QWORD *)(a2 + 64) = v103;
        if (*(_BYTE *)(v6 + 1997))
          sub_20FB42340(a1[2]);
      }
      return v22;
    }
LABEL_65:
    if ((v38 & 1) == 0)
    {
      v22 = 0;
      if (!v37 || !*(_BYTE *)a1[7])
        goto LABEL_76;
      sub_20F895F94((char **)a1[12], a2);
      goto LABEL_75;
    }
    sub_20F895F94((char **)a1[11], a2);
    if (*(_BYTE *)(a1[13] + 40))
    {
      v85 = *(uint64_t **)a1[14];
      v86 = *(_QWORD *)(a2 + 496);
      v87 = *(_QWORD *)(a2 + 504);
      if (!sub_20FB40CBC(v85, v86, v87))
        goto LABEL_70;
      sub_20F895F94((char **)a1[15], a2);
      if (*(_BYTE *)(a1[13] + 40))
      {
        v85 = *(uint64_t **)a1[14];
        v86 = *(_QWORD *)(a2 + 496);
        v87 = *(_QWORD *)(a2 + 504);
LABEL_70:
        if ((sub_20FB40CBC(v85, v86, v87) & 1) != 0)
          goto LABEL_71;
LABEL_75:
        v22 = 0;
        goto LABEL_76;
      }
    }
LABEL_71:
    v22 = 1;
    goto LABEL_76;
  }
  v11 = (uint64_t *)a1[1];
  v12 = *v11;
  v13 = *((_DWORD *)v11 + 2);
  while (1)
  {
    if (*(_QWORD *)v9 == v12 && *(_DWORD *)(v9 + 8) == v13)
    {
      v20 = *(_QWORD *)(v6 + 14352);
      v21 = *(_QWORD *)(v6 + 14360);
      if (v20 != v21)
      {
        while (*(_DWORD *)v20 != *(_DWORD *)(v9 + 16))
        {
          v20 += 32;
          if (v20 == v21)
            goto LABEL_9;
        }
        _D2 = vsubq_f64(*(float64x2_t *)(v9 + 40), *(float64x2_t *)(v20 + 8)).f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        if (_D1 < *(double *)(*(_QWORD *)(v6 + 14224) + 280) * *(double *)(v20 + 24))
          break;
      }
    }
LABEL_9:
    v9 += 64;
    if (v9 == v10)
      goto LABEL_16;
  }
  v22 = 0;
  *(_BYTE *)(v3 + 392) = 1;
  return v22;
}

BOOL sub_20F882E40(unint64_t **a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v27;
  double v33;
  double v35;
  double v37;
  double v38;
  float v39;
  float v40;
  float v41;
  double *v42;
  double *v43;
  unint64_t v44;
  float64x2_t v46;

  v2 = **a1;
  v3 = *a1[1];
  if (v2 < v3)
  {
    v6 = (uint64_t *)a1[8];
    v7 = *(_QWORD *)(*a1[2] + 8 * a2);
    if (!*(_BYTE *)a1[3])
      goto LABEL_15;
    v8 = v7 + 40;
    if (!*(_BYTE *)(v7 + 488))
      v8 = 0;
    if (!*(_BYTE *)(v8 + 432))
    {
LABEL_15:
      if (sub_20F88282C((uint64_t *)a1[4], v7))
      {
        v10 = (uint64_t *)a1[5];
        v9 = (uint64_t *)a1[6];
        v12 = *v9;
        v11 = (uint64_t **)v9[1];
        v13 = *(_QWORD *)(*(_QWORD *)v9[2] + 8 * a2);
        if (*(_BYTE *)(v13 + 488))
          v14 = v13 + 40;
        else
          v14 = 0;
        v15 = *(double *)(v14 + 24);
        _Q1 = *(_OWORD *)(v14 + 8);
        v17 = *v11;
        v18 = v11[1];
        v19 = *v17;
        v20 = (double *)v17[2];
        v21 = *v18;
        v22 = (double *)v18[2];
        v23 = *(double *)&_Q1 - *v20;
        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v20[1];
        v24 = v15 - v20[2];
        v25.f64[0] = *(float64_t *)(v19 + 16);
        _Q7 = *(_OWORD *)(v19 + 48);
        v25.f64[1] = *(float64_t *)(v19 + 40);
        v27 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v19, *(int64x2_t *)(v19 + 24)), v23), (float64x2_t)vzip2q_s64(*(int64x2_t *)v19, *(int64x2_t *)(v19 + 24)), *(double *)&_Q1), v25, v24);
        __asm { FMLA            D2, D1, V7.D[1] }
        v33 = _D2 + *(double *)(v19 + 64) * v24;
        _D2 = v27.f64[1] - v22[1];
        v35 = v33 - v22[2];
        v25.f64[0] = *(float64_t *)(v21 + 16);
        _Q7 = *(_OWORD *)(v21 + 48);
        v25.f64[1] = *(float64_t *)(v21 + 40);
        v46 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v21, *(int64x2_t *)(v21 + 24)), v27.f64[0] - *v22), (float64x2_t)vzip2q_s64(*(int64x2_t *)v21, *(int64x2_t *)(v21 + 24)), _D2), v25, v35);
        __asm { FMLA            D1, D2, V7.D[1] }
        v37 = *(double *)&_Q1 + *(double *)(v21 + 64) * v35;
        *(float *)&v35 = v46.f64[0];
        *(float *)&_Q1 = v37;
        v38 = atan2f(*(float *)&v35, *(float *)&_Q1) + 3.14159265;
        v39 = v46.f64[1];
        v40 = sqrt(vmulq_f64(v46, v46).f64[0] + v37 * v37);
        v41 = atan2f(v39, v40);
        v42 = (double *)(*(_QWORD *)(v12 + 12520) + 16 * a2);
        *v42 = v38;
        v42[1] = v41 + 1.57079633;
        v43 = (double *)(*(_QWORD *)(v12 + 12520) + 16 * a2);
        v44 = *v10
            + 48 * ((unint64_t)(*v43 * 3.81971863) - ((unint64_t)(*v43 * 3.81971863) == 24))
            + 4 * ((unint64_t)(v43[1] * 3.81971863) - ((unint64_t)(v43[1] * 3.81971863) == 12));
        ++*(_DWORD *)(v44 + 12568);
      }
    }
    ++*a1[7];
    *(_QWORD *)(v6[1568] + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  return v2 < v3;
}

uint64_t sub_20F8830B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  if (a1 == a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)(v3 + 8);
      v7 = &v14;
      v8 = &v14;
      if (v4)
      {
        v9 = v4;
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v9;
            v10 = *((_DWORD *)v9 + 7);
            if (v6 >= v10)
              break;
            v9 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_12;
          }
          if (v10 >= v6)
            break;
          v9 = v8[1];
          if (!v9)
          {
            v7 = v8 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v11 = operator new(0x20uLL);
        v11[7] = v6;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v8;
        *v7 = (uint64_t *)v11;
        if (*v13)
        {
          v13 = (uint64_t **)*v13;
          v11 = *v7;
        }
        sub_20E868578(v14, (uint64_t *)v11);
        v5 = ++v15;
      }
      v3 += 64;
      v4 = v14;
    }
    while (v3 != a2);
  }
  sub_20E86872C((uint64_t)&v13, v4);
  return v5;
}

void sub_20F8831CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20E86872C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8831E4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  char *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 *v114;
  __int128 *v115;
  uint64_t v116;
  char *v117;
  __int128 *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 *v170;
  char *v171;
  __int128 *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 *v221;
  __int128 *v222;
  uint64_t v223;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 *v257;
  uint64_t v258;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = (__int128 *)(a1 + 616);
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v7;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v8 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v8;
  v9 = (__int128 *)(a1 + 80);
  v10 = (char *)(a2 + 5);
  v11 = (__int128 *)*((_QWORD *)a2 + 74);
  if (v11 == a2 + 5)
  {
    sub_20FB42F50(v9, v10, &v10[8 * *((_QWORD *)a2 + 76)]);
    *((_QWORD *)a2 + 76) = 0;
    v63 = (__int128 *)(a1 + 1160);
    v64 = (char *)a2 + 616;
    v65 = (__int128 *)*((_QWORD *)a2 + 141);
    if (v65 != (__int128 *)((char *)a2 + 616))
      goto LABEL_12;
LABEL_24:
    sub_20FB42F50((_QWORD *)(a1 + 616), v64, &v64[8 * *((_QWORD *)a2 + 143)]);
    *((_QWORD *)a2 + 143) = 0;
    *(_QWORD *)(a1 + 1152) = *((_QWORD *)a2 + 144);
    v117 = (char *)a2 + 1160;
    v118 = (__int128 *)*((_QWORD *)a2 + 209);
    if (v118 != (__int128 *)((char *)a2 + 1160))
      goto LABEL_18;
LABEL_25:
    sub_20EDB42F8(v63, v117, &v117[8 * *((_QWORD *)a2 + 211)]);
    *((_QWORD *)a2 + 211) = 0;
    goto LABEL_26;
  }
  *(_QWORD *)(a1 + 608) = 0;
  v258 = *((_QWORD *)a2 + 75);
  v257 = v11;
  *((_QWORD *)a2 + 74) = v10;
  *((_QWORD *)a2 + 75) = 64;
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = v226;
  *(_OWORD *)(a1 + 80) = v225;
  *(_OWORD *)(a1 + 96) = v14;
  v225 = v12;
  v226 = v13;
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = v228;
  *(_OWORD *)(a1 + 112) = v227;
  *(_OWORD *)(a1 + 128) = v17;
  v227 = v15;
  v228 = v16;
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = v230;
  *(_OWORD *)(a1 + 144) = v229;
  *(_OWORD *)(a1 + 160) = v20;
  v229 = v18;
  v230 = v19;
  v21 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = v232;
  *(_OWORD *)(a1 + 176) = v231;
  *(_OWORD *)(a1 + 192) = v23;
  v231 = v21;
  v232 = v22;
  v24 = *(_OWORD *)(a1 + 208);
  v25 = *(_OWORD *)(a1 + 224);
  v26 = v234;
  *(_OWORD *)(a1 + 208) = v233;
  *(_OWORD *)(a1 + 224) = v26;
  v233 = v24;
  v234 = v25;
  v27 = *(_OWORD *)(a1 + 240);
  v28 = *(_OWORD *)(a1 + 256);
  v29 = v236;
  *(_OWORD *)(a1 + 240) = v235;
  *(_OWORD *)(a1 + 256) = v29;
  v235 = v27;
  v236 = v28;
  v30 = *(_OWORD *)(a1 + 272);
  v31 = *(_OWORD *)(a1 + 288);
  v32 = v238;
  *(_OWORD *)(a1 + 272) = v237;
  *(_OWORD *)(a1 + 288) = v32;
  v237 = v30;
  v238 = v31;
  v33 = *(_OWORD *)(a1 + 304);
  v34 = *(_OWORD *)(a1 + 320);
  v35 = v240;
  *(_OWORD *)(a1 + 304) = v239;
  *(_OWORD *)(a1 + 320) = v35;
  v239 = v33;
  v240 = v34;
  v36 = *(_OWORD *)(a1 + 336);
  v37 = *(_OWORD *)(a1 + 352);
  v38 = v242;
  *(_OWORD *)(a1 + 336) = v241;
  *(_OWORD *)(a1 + 352) = v38;
  v241 = v36;
  v242 = v37;
  v39 = *(_OWORD *)(a1 + 368);
  v40 = *(_OWORD *)(a1 + 384);
  v41 = v244;
  *(_OWORD *)(a1 + 368) = v243;
  *(_OWORD *)(a1 + 384) = v41;
  v243 = v39;
  v244 = v40;
  v42 = *(_OWORD *)(a1 + 400);
  v43 = *(_OWORD *)(a1 + 416);
  v44 = v246;
  *(_OWORD *)(a1 + 400) = v245;
  *(_OWORD *)(a1 + 416) = v44;
  v245 = v42;
  v246 = v43;
  v45 = *(_OWORD *)(a1 + 432);
  v46 = *(_OWORD *)(a1 + 448);
  v47 = v248;
  *(_OWORD *)(a1 + 432) = v247;
  *(_OWORD *)(a1 + 448) = v47;
  v247 = v45;
  v248 = v46;
  v48 = *(_OWORD *)(a1 + 464);
  v49 = *(_OWORD *)(a1 + 480);
  v50 = v250;
  *(_OWORD *)(a1 + 464) = v249;
  *(_OWORD *)(a1 + 480) = v50;
  v249 = v48;
  v250 = v49;
  v51 = *(_OWORD *)(a1 + 496);
  v52 = *(_OWORD *)(a1 + 512);
  v53 = v252;
  *(_OWORD *)(a1 + 496) = v251;
  *(_OWORD *)(a1 + 512) = v53;
  v251 = v51;
  v252 = v52;
  v54 = *(_OWORD *)(a1 + 528);
  v55 = *(_OWORD *)(a1 + 544);
  v56 = v254;
  *(_OWORD *)(a1 + 528) = v253;
  *(_OWORD *)(a1 + 544) = v56;
  v253 = v54;
  v254 = v55;
  v57 = *(_OWORD *)(a1 + 560);
  v58 = *(_OWORD *)(a1 + 576);
  v59 = v256;
  *(_OWORD *)(a1 + 560) = v255;
  *(_OWORD *)(a1 + 576) = v59;
  v255 = v57;
  v256 = v58;
  v60 = *(__int128 **)(a1 + 592);
  v61 = v257;
  *(_QWORD *)(a1 + 592) = v257;
  v257 = v60;
  if (v61 == &v225)
  {
    *(_QWORD *)(a1 + 592) = v9;
    if (v60 != v9)
      goto LABEL_8;
LABEL_35:
    v60 = &v225;
    v257 = &v225;
    goto LABEL_8;
  }
  if (v60 == v9)
    goto LABEL_35;
LABEL_8:
  v62 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v258;
  v258 = v62;
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  *((_QWORD *)a2 + 76) = 0;
  if (v60 != &v225 && v60)
    MEMORY[0x212BC6368](v60, 0x1000C8000313F17);
  v63 = (__int128 *)(a1 + 1160);
  v64 = (char *)a2 + 616;
  v65 = (__int128 *)*((_QWORD *)a2 + 141);
  if (v65 == (__int128 *)((char *)a2 + 616))
    goto LABEL_24;
LABEL_12:
  *(_QWORD *)(a1 + 1144) = 0;
  v258 = *((_QWORD *)a2 + 142);
  v257 = v65;
  *((_QWORD *)a2 + 141) = v64;
  *((_QWORD *)a2 + 142) = 64;
  v66 = *v6;
  v67 = *(_OWORD *)(a1 + 632);
  v68 = v226;
  *v6 = v225;
  *(_OWORD *)(a1 + 632) = v68;
  v225 = v66;
  v226 = v67;
  v69 = *(_OWORD *)(a1 + 648);
  v70 = *(_OWORD *)(a1 + 664);
  v71 = v228;
  *(_OWORD *)(a1 + 648) = v227;
  *(_OWORD *)(a1 + 664) = v71;
  v227 = v69;
  v228 = v70;
  v72 = *(_OWORD *)(a1 + 680);
  v73 = *(_OWORD *)(a1 + 696);
  v74 = v230;
  *(_OWORD *)(a1 + 680) = v229;
  *(_OWORD *)(a1 + 696) = v74;
  v229 = v72;
  v230 = v73;
  v75 = *(_OWORD *)(a1 + 712);
  v76 = *(_OWORD *)(a1 + 728);
  v77 = v232;
  *(_OWORD *)(a1 + 712) = v231;
  *(_OWORD *)(a1 + 728) = v77;
  v231 = v75;
  v232 = v76;
  v78 = *(_OWORD *)(a1 + 744);
  v79 = *(_OWORD *)(a1 + 760);
  v80 = v234;
  *(_OWORD *)(a1 + 744) = v233;
  *(_OWORD *)(a1 + 760) = v80;
  v233 = v78;
  v234 = v79;
  v81 = *(_OWORD *)(a1 + 776);
  v82 = *(_OWORD *)(a1 + 792);
  v83 = v236;
  *(_OWORD *)(a1 + 776) = v235;
  *(_OWORD *)(a1 + 792) = v83;
  v235 = v81;
  v236 = v82;
  v84 = *(_OWORD *)(a1 + 808);
  v85 = *(_OWORD *)(a1 + 824);
  v86 = v238;
  *(_OWORD *)(a1 + 808) = v237;
  *(_OWORD *)(a1 + 824) = v86;
  v237 = v84;
  v238 = v85;
  v87 = *(_OWORD *)(a1 + 840);
  v88 = *(_OWORD *)(a1 + 856);
  v89 = v240;
  *(_OWORD *)(a1 + 840) = v239;
  *(_OWORD *)(a1 + 856) = v89;
  v239 = v87;
  v240 = v88;
  v90 = *(_OWORD *)(a1 + 872);
  v91 = *(_OWORD *)(a1 + 888);
  v92 = v242;
  *(_OWORD *)(a1 + 872) = v241;
  *(_OWORD *)(a1 + 888) = v92;
  v241 = v90;
  v242 = v91;
  v93 = *(_OWORD *)(a1 + 904);
  v94 = *(_OWORD *)(a1 + 920);
  v95 = v244;
  *(_OWORD *)(a1 + 904) = v243;
  *(_OWORD *)(a1 + 920) = v95;
  v243 = v93;
  v244 = v94;
  v96 = *(_OWORD *)(a1 + 936);
  v97 = *(_OWORD *)(a1 + 952);
  v98 = v246;
  *(_OWORD *)(a1 + 936) = v245;
  *(_OWORD *)(a1 + 952) = v98;
  v245 = v96;
  v246 = v97;
  v99 = *(_OWORD *)(a1 + 968);
  v100 = *(_OWORD *)(a1 + 984);
  v101 = v248;
  *(_OWORD *)(a1 + 968) = v247;
  *(_OWORD *)(a1 + 984) = v101;
  v247 = v99;
  v248 = v100;
  v102 = *(_OWORD *)(a1 + 1000);
  v103 = *(_OWORD *)(a1 + 1016);
  v104 = v250;
  *(_OWORD *)(a1 + 1000) = v249;
  *(_OWORD *)(a1 + 1016) = v104;
  v249 = v102;
  v250 = v103;
  v105 = *(_OWORD *)(a1 + 1032);
  v106 = *(_OWORD *)(a1 + 1048);
  v107 = v252;
  *(_OWORD *)(a1 + 1032) = v251;
  *(_OWORD *)(a1 + 1048) = v107;
  v251 = v105;
  v252 = v106;
  v108 = *(_OWORD *)(a1 + 1064);
  v109 = *(_OWORD *)(a1 + 1080);
  v110 = v254;
  *(_OWORD *)(a1 + 1064) = v253;
  *(_OWORD *)(a1 + 1080) = v110;
  v253 = v108;
  v254 = v109;
  v111 = *(_OWORD *)(a1 + 1096);
  v112 = *(_OWORD *)(a1 + 1112);
  v113 = v256;
  *(_OWORD *)(a1 + 1096) = v255;
  *(_OWORD *)(a1 + 1112) = v113;
  v255 = v111;
  v256 = v112;
  v114 = *(__int128 **)(a1 + 1128);
  v115 = v257;
  *(_QWORD *)(a1 + 1128) = v257;
  v257 = v114;
  if (v115 == &v225)
  {
    *(_QWORD *)(a1 + 1128) = v6;
    if (v114 != v6)
      goto LABEL_14;
LABEL_37:
    v114 = &v225;
    v257 = &v225;
    goto LABEL_14;
  }
  if (v114 == v6)
    goto LABEL_37;
LABEL_14:
  v116 = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v258;
  v258 = v116;
  *(_QWORD *)(a1 + 1144) = *((_QWORD *)a2 + 143);
  *((_QWORD *)a2 + 143) = 0;
  if (v114 != &v225 && v114)
    MEMORY[0x212BC6368](v114, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 1152) = *((_QWORD *)a2 + 144);
  v117 = (char *)a2 + 1160;
  v118 = (__int128 *)*((_QWORD *)a2 + 209);
  if (v118 == (__int128 *)((char *)a2 + 1160))
    goto LABEL_25;
LABEL_18:
  *(_QWORD *)(a1 + 1688) = 0;
  v258 = *((_QWORD *)a2 + 210);
  v257 = v118;
  *((_QWORD *)a2 + 209) = v117;
  *((_QWORD *)a2 + 210) = 64;
  v119 = *v63;
  v120 = v63[1];
  v121 = v226;
  *v63 = v225;
  v63[1] = v121;
  v225 = v119;
  v226 = v120;
  v122 = v63[2];
  v123 = v63[3];
  v124 = v228;
  v63[2] = v227;
  v63[3] = v124;
  v227 = v122;
  v228 = v123;
  v125 = v63[4];
  v126 = v63[5];
  v127 = v230;
  v63[4] = v229;
  v63[5] = v127;
  v229 = v125;
  v230 = v126;
  v128 = v63[6];
  v129 = v63[7];
  v130 = v232;
  v63[6] = v231;
  v63[7] = v130;
  v231 = v128;
  v232 = v129;
  v131 = v63[8];
  v132 = v63[9];
  v133 = v234;
  v63[8] = v233;
  v63[9] = v133;
  v233 = v131;
  v234 = v132;
  v134 = v63[10];
  v135 = v63[11];
  v136 = v236;
  v63[10] = v235;
  v63[11] = v136;
  v235 = v134;
  v236 = v135;
  v137 = v63[12];
  v138 = v63[13];
  v139 = v238;
  v63[12] = v237;
  v63[13] = v139;
  v237 = v137;
  v238 = v138;
  v140 = v63[14];
  v141 = v63[15];
  v142 = v240;
  v63[14] = v239;
  v63[15] = v142;
  v239 = v140;
  v240 = v141;
  v143 = v63[16];
  v144 = v63[17];
  v145 = v242;
  v63[16] = v241;
  v63[17] = v145;
  v241 = v143;
  v242 = v144;
  v146 = v63[18];
  v147 = v63[19];
  v148 = v244;
  v63[18] = v243;
  v63[19] = v148;
  v243 = v146;
  v244 = v147;
  v149 = v63[20];
  v150 = v63[21];
  v151 = v246;
  v63[20] = v245;
  v63[21] = v151;
  v245 = v149;
  v246 = v150;
  v152 = v63[22];
  v153 = v63[23];
  v154 = v248;
  v63[22] = v247;
  v63[23] = v154;
  v247 = v152;
  v248 = v153;
  v155 = v63[24];
  v156 = v63[25];
  v157 = v250;
  v63[24] = v249;
  v63[25] = v157;
  v249 = v155;
  v250 = v156;
  v158 = v63[26];
  v159 = v63[27];
  v160 = v252;
  v63[26] = v251;
  v63[27] = v160;
  v251 = v158;
  v252 = v159;
  v161 = v63[28];
  v162 = v63[29];
  v163 = v254;
  v63[28] = v253;
  v63[29] = v163;
  v253 = v161;
  v254 = v162;
  v164 = v63[30];
  v165 = v63[31];
  v166 = v256;
  v63[30] = v255;
  v63[31] = v166;
  v255 = v164;
  v256 = v165;
  v167 = *(__int128 **)(a1 + 1672);
  v168 = v257;
  *(_QWORD *)(a1 + 1672) = v257;
  v257 = v167;
  if (v168 == &v225)
  {
    *(_QWORD *)(a1 + 1672) = v63;
    if (v167 != v63)
      goto LABEL_20;
LABEL_39:
    v167 = &v225;
    v257 = &v225;
    goto LABEL_20;
  }
  if (v167 == v63)
    goto LABEL_39;
LABEL_20:
  v169 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = v258;
  v258 = v169;
  *(_QWORD *)(a1 + 1688) = *((_QWORD *)a2 + 211);
  *((_QWORD *)a2 + 211) = 0;
  if (v167 != &v225 && v167)
    MEMORY[0x212BC6368](v167, 0x1000C8000313F17);
LABEL_26:
  *(_OWORD *)(a1 + 1696) = a2[106];
  v170 = (__int128 *)(a1 + 1712);
  v171 = (char *)(a2 + 107);
  v172 = (__int128 *)*((_QWORD *)a2 + 278);
  if (v172 == a2 + 107)
  {
    sub_20EDB42F8(v170, v171, &v171[8 * *((_QWORD *)a2 + 280)]);
    *((_QWORD *)a2 + 280) = 0;
    return a1;
  }
  *(_QWORD *)(a1 + 2240) = 0;
  v258 = *((_QWORD *)a2 + 279);
  v257 = v172;
  *((_QWORD *)a2 + 278) = v171;
  *((_QWORD *)a2 + 279) = 64;
  v173 = *(_OWORD *)(a1 + 1712);
  v174 = *(_OWORD *)(a1 + 1728);
  v175 = v226;
  *(_OWORD *)(a1 + 1712) = v225;
  *(_OWORD *)(a1 + 1728) = v175;
  v225 = v173;
  v226 = v174;
  v176 = *(_OWORD *)(a1 + 1744);
  v177 = *(_OWORD *)(a1 + 1760);
  v178 = v228;
  *(_OWORD *)(a1 + 1744) = v227;
  *(_OWORD *)(a1 + 1760) = v178;
  v227 = v176;
  v228 = v177;
  v179 = *(_OWORD *)(a1 + 1776);
  v180 = *(_OWORD *)(a1 + 1792);
  v181 = v230;
  *(_OWORD *)(a1 + 1776) = v229;
  *(_OWORD *)(a1 + 1792) = v181;
  v229 = v179;
  v230 = v180;
  v182 = *(_OWORD *)(a1 + 1808);
  v183 = *(_OWORD *)(a1 + 1824);
  v184 = v232;
  *(_OWORD *)(a1 + 1808) = v231;
  *(_OWORD *)(a1 + 1824) = v184;
  v231 = v182;
  v232 = v183;
  v185 = *(_OWORD *)(a1 + 1840);
  v186 = *(_OWORD *)(a1 + 1856);
  v187 = v234;
  *(_OWORD *)(a1 + 1840) = v233;
  *(_OWORD *)(a1 + 1856) = v187;
  v233 = v185;
  v234 = v186;
  v188 = *(_OWORD *)(a1 + 1872);
  v189 = *(_OWORD *)(a1 + 1888);
  v190 = v236;
  *(_OWORD *)(a1 + 1872) = v235;
  *(_OWORD *)(a1 + 1888) = v190;
  v235 = v188;
  v236 = v189;
  v191 = *(_OWORD *)(a1 + 1904);
  v192 = *(_OWORD *)(a1 + 1920);
  v193 = v238;
  *(_OWORD *)(a1 + 1904) = v237;
  *(_OWORD *)(a1 + 1920) = v193;
  v237 = v191;
  v238 = v192;
  v194 = *(_OWORD *)(a1 + 1936);
  v195 = *(_OWORD *)(a1 + 1952);
  v196 = v240;
  *(_OWORD *)(a1 + 1936) = v239;
  *(_OWORD *)(a1 + 1952) = v196;
  v239 = v194;
  v240 = v195;
  v197 = *(_OWORD *)(a1 + 1968);
  v198 = *(_OWORD *)(a1 + 1984);
  v199 = v242;
  *(_OWORD *)(a1 + 1968) = v241;
  *(_OWORD *)(a1 + 1984) = v199;
  v241 = v197;
  v242 = v198;
  v200 = *(_OWORD *)(a1 + 2000);
  v201 = *(_OWORD *)(a1 + 2016);
  v202 = v244;
  *(_OWORD *)(a1 + 2000) = v243;
  *(_OWORD *)(a1 + 2016) = v202;
  v243 = v200;
  v244 = v201;
  v203 = *(_OWORD *)(a1 + 2032);
  v204 = *(_OWORD *)(a1 + 2048);
  v205 = v246;
  *(_OWORD *)(a1 + 2032) = v245;
  *(_OWORD *)(a1 + 2048) = v205;
  v245 = v203;
  v246 = v204;
  v206 = *(_OWORD *)(a1 + 2064);
  v207 = *(_OWORD *)(a1 + 2080);
  v208 = v248;
  *(_OWORD *)(a1 + 2064) = v247;
  *(_OWORD *)(a1 + 2080) = v208;
  v247 = v206;
  v248 = v207;
  v209 = *(_OWORD *)(a1 + 2096);
  v210 = *(_OWORD *)(a1 + 2112);
  v211 = v250;
  *(_OWORD *)(a1 + 2096) = v249;
  *(_OWORD *)(a1 + 2112) = v211;
  v249 = v209;
  v250 = v210;
  v212 = *(_OWORD *)(a1 + 2128);
  v213 = *(_OWORD *)(a1 + 2144);
  v214 = v252;
  *(_OWORD *)(a1 + 2128) = v251;
  *(_OWORD *)(a1 + 2144) = v214;
  v251 = v212;
  v252 = v213;
  v215 = *(_OWORD *)(a1 + 2160);
  v216 = *(_OWORD *)(a1 + 2176);
  v217 = v254;
  *(_OWORD *)(a1 + 2160) = v253;
  *(_OWORD *)(a1 + 2176) = v217;
  v253 = v215;
  v254 = v216;
  v218 = *(_OWORD *)(a1 + 2192);
  v219 = *(_OWORD *)(a1 + 2208);
  v220 = v256;
  *(_OWORD *)(a1 + 2192) = v255;
  *(_OWORD *)(a1 + 2208) = v220;
  v255 = v218;
  v256 = v219;
  v221 = *(__int128 **)(a1 + 2224);
  v222 = v257;
  *(_QWORD *)(a1 + 2224) = v257;
  v257 = v221;
  if (v222 == &v225)
  {
    *(_QWORD *)(a1 + 2224) = v170;
    if (v221 != v170)
      goto LABEL_29;
LABEL_41:
    v221 = &v225;
    v257 = &v225;
    goto LABEL_29;
  }
  if (v221 == v170)
    goto LABEL_41;
LABEL_29:
  v223 = *(_QWORD *)(a1 + 2232);
  *(_QWORD *)(a1 + 2232) = v258;
  v258 = v223;
  *(_QWORD *)(a1 + 2240) = *((_QWORD *)a2 + 280);
  *((_QWORD *)a2 + 280) = 0;
  if (v221 != &v225 && v221)
    MEMORY[0x212BC6368](v221, 0x1000C8000313F17);
  return a1;
}

void sub_20F883A44(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int8x16_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t v24;
  int8x8_t *v25;
  uint64_t **v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v45;
  unint64_t v46;
  int8x8_t v47;
  int8x8_t v48;
  float v49;
  float v50;
  uint64_t v51;
  int8x8_t **v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t prime;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  unint64_t v60;
  int8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  int v66;
  uint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint8x8_t v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  int v92;
  uint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v111;
  unint64_t v112;
  unint64_t *p_shared_weak_owners;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  int8x8_t *v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  unsigned int v134;
  uint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  _OWORD *v146;
  uint64_t *v147;
  unint64_t v148;
  unsigned int v149;
  _OWORD *v150;
  uint64_t *v151;
  unint64_t *v152;
  unint64_t v153;
  int8x8_t *v154;
  int8x8_t v155;
  int8x8_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  BOOL v161;
  unint64_t v162;
  unsigned int v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  __int128 v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  __int128 v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  uint8x8_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  __int128 v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  float32x2_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int8x16_t v214;
  float32x4_t v215;
  float32x4_t v216;
  double v217;
  float64x2_t v222;
  double v228;
  float64x2_t v229;
  float64x2_t v230;
  double v232;
  float64x2_t v233;
  int8x16_t v234;
  int8x16_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int8x16_t v243;
  std::__shared_weak_count *v244;
  int v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t **v248;
  uint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unsigned int v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int v257;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  __int128 v263;
  unint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  std::runtime_error *exception;
  uint64_t v271;
  int8x8_t *v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  double v283;
  uint64_t v284;
  double v285;
  int8x16_t v286;
  double v287;
  int8x16_t v288;
  double v289;
  __int128 v290;
  int8x16_t v291;
  int v292;
  int v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t **v296;
  unsigned int v297;
  _QWORD *v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  int v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int8x8_t *v311;
  std::__shared_weak_count *v312;
  char v313;
  int8x8_t *v314;
  std::__shared_weak_count *v315;
  _BYTE v316[40];
  __int128 v317;
  int v318;
  uint64_t v319;

  v319 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 7952);
  if (!v7)
    return;
  v9 = a2;
  v293 = *(unsigned __int8 *)(a5 + 128);
  if (*(_BYTE *)(a5 + 128))
  {
    v289 = *(double *)(a5 + 48);
    v290 = *(_OWORD *)(a5 + 32);
    v283 = *(double *)(a5 + 16);
    v287 = *(double *)(a5 + 40);
    v288 = *(int8x16_t *)(a5 + 64);
    v285 = *(double *)(a5 + 80);
    v284 = vextq_s8(v288, v288, 8uLL).u64[0];
    v291 = *(int8x16_t *)a5;
    v286 = vextq_s8(v291, v291, 8uLL);
    v10 = *(uint64_t ***)(v7 + 8);
    v271 = a1;
    if (*(_BYTE *)(a1 + 1945))
      goto LABEL_4;
  }
  else
  {
    a6.i64[0] = 0;
    v291 = a6;
    a6.i64[0] = 0;
    v286 = a6;
    v283 = 0.0;
    *(_QWORD *)&v290 = 0;
    v287 = 0.0;
    v289 = 0.0;
    v288.i64[0] = 0;
    *(double *)&v284 = 0.0;
    v285 = 0.0;
    v10 = *(uint64_t ***)(v7 + 8);
    v271 = a1;
    if (*(_BYTE *)(a1 + 1945))
    {
LABEL_4:
      if (!v10[2])
        v10 = (uint64_t **)(a1 + 7968);
    }
  }
  if (a3)
  {
    v11 = 0;
    *(_QWORD *)&v12.f64[0] = v291.i64[0];
    *(_QWORD *)&v12.f64[1] = v286.i64[0];
    v282 = v12;
    *(_QWORD *)&v13.f64[0] = v288.i64[0];
    *(_QWORD *)&v13.f64[1] = v284;
    v281 = v13;
    v295 = (uint64_t *)(v10 + 3);
    v273 = (int8x8_t *)(v10 + 5);
    *(_QWORD *)&v14.f64[0] = v290;
    v294 = a3;
    v14.f64[1] = v287;
    v279 = (float64x2_t)vdupq_lane_s64(v290, 0);
    v280 = v14;
    v277 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v287, 0);
    v278 = (float64x2_t)vdupq_lane_s64(v288.i64[0], 0);
    v275 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v289, 0);
    v276 = (float64x2_t)vdupq_lane_s64(v284, 0);
    v274 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v285, 0);
    v296 = v10;
    v299 = v10 + 1;
    while (1)
    {
      v300 = v11;
      v15 = v9 + (v11 << 7);
      v16 = *(_DWORD *)(v15 + 8);
      v17 = *(_DWORD *)(v15 + 12);
      LODWORD(v303) = 0;
      DWORD1(v303) = v17;
      *((_QWORD *)&v303 + 1) = *(_QWORD *)v15;
      v304 = *(_OWORD *)(v15 + 40);
      v305 = v16;
      if (*(_BYTE *)(v15 + 32))
        LODWORD(v303) = 2139095039;
      v18 = v299;
      v19 = (uint64_t *)*v299;
      if (!*v299)
      {
LABEL_23:
        v302 = 0uLL;
        goto LABEL_24;
      }
      v20 = *(_QWORD *)(v15 + 16);
      v21 = *(_DWORD *)(v15 + 24);
      do
      {
        v22 = v19[4];
        if (v22 < v20)
        {
          ++v19;
        }
        else if (v22 == v20)
        {
          if (*((_DWORD *)v19 + 10) < v21)
            ++v19;
          else
            v18 = v19;
        }
        else
        {
          v18 = v19;
        }
        v19 = (uint64_t *)*v19;
      }
      while (v19);
      if (v18 == v299)
        break;
      v23 = v18[4];
      if (v20 < v23 || v20 == v23 && v21 < *((_DWORD *)v18 + 10))
        goto LABEL_23;
      v30 = v18[6];
      v6 = v18[7];
      if (!v6)
        goto LABEL_29;
      v41 = (unint64_t *)(v6 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      *(_QWORD *)&v302 = v30;
      *((_QWORD *)&v302 + 1) = v6;
      do
        v43 = __ldxr(v41);
      while (__stxr(v43 + 1, v41));
      do
        v44 = __ldaxr(v41);
      while (__stlxr(v44 - 1, v41));
      if (v44)
      {
        v30 = v302;
        if ((_QWORD)v302)
          goto LABEL_30;
      }
      else
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v6 + 16))(v6);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
        v30 = v302;
        if ((_QWORD)v302)
        {
LABEL_30:
          *(_OWORD *)v316 = *(_OWORD *)a4;
          *(_QWORD *)&v316[16] = *(_QWORD *)(a4 + 16);
          *(_OWORD *)&v316[24] = v303;
          v31.f64[1] = *((float64_t *)&v304 + 1);
          v317 = v304;
          v318 = v305;
          v32 = *(_QWORD *)(v30 + 120);
          v33 = *(_QWORD *)(v30 + 128);
          if (v33 == v32)
          {
LABEL_41:
            if (v32 == v33
              || *(_DWORD *)(v32 + 16) != *(_DWORD *)(a4 + 16)
              || *(_QWORD *)v32 != *(_QWORD *)a4
              || (v39 = *(_QWORD *)(v30 + 128), *(_DWORD *)(v32 + 8) != *(_DWORD *)(a4 + 8)))
            {
              v39 = sub_20FBCC8E8((char **)(v30 + 120), (char *)v32, (__int128 *)v316);
              v33 = *(_QWORD *)(v30 + 128);
            }
            if (v33 != v39)
              sub_20FBCD5EC(v30, a4, (uint64_t)&v303);
            v40 = v302;
            if (*(_BYTE *)(v302 + 112))
              goto LABEL_390;
LABEL_49:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2993, (uint64_t)"track->getStructure()", 21, (uint64_t)"The track does not have a structure!", 36, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            goto LABEL_390;
          }
          v34 = (v33 - v32) >> 6;
          while (2)
          {
            v35 = v34 >> 1;
            v36 = v32 + (v34 >> 1 << 6);
            v37 = *(_DWORD *)(v36 + 16);
            _CF = v37 >= *(_DWORD *)&v316[16];
            if (v37 == *(_DWORD *)&v316[16])
            {
              if (*(_QWORD *)v36 >= *(_QWORD *)v316)
              {
                if (*(_QWORD *)v36 == *(_QWORD *)v316)
                {
                  _CF = *(_DWORD *)(v36 + 8) >= *(_DWORD *)&v316[8];
                  goto LABEL_38;
                }
LABEL_33:
                v34 = v35;
                if (!v35)
                  goto LABEL_41;
                continue;
              }
            }
            else
            {
LABEL_38:
              if (_CF)
                goto LABEL_33;
            }
            break;
          }
          v32 = v36 + 64;
          v35 = v34 + ~v35;
          goto LABEL_33;
        }
      }
LABEL_24:
      v24 = *(int8x8_t *)(v15 + 16);
      v297 = *(_DWORD *)(v15 + 24);
      v25 = (int8x8_t *)sub_20E9DF85C(v295, (uint64_t *)a4);
      if (v25)
        goto LABEL_143;
      v308 = 0;
      v309 = 0;
      v310 = 1065353216;
      *(_OWORD *)v316 = *(_OWORD *)a4;
      *(_OWORD *)&v316[16] = *(unint64_t *)(a4 + 16);
      v306 = 0;
      v307 = 0;
      *(_QWORD *)&v316[32] = 0;
      v317 = 0uLL;
      v318 = 1065353216;
      v26 = v10;
      v27 = (*(_DWORD *)&v316[8] ^ __ROR4__(*(_DWORD *)&v316[16], 13));
      v28 = (unint64_t)v26[4];
      if (v28)
      {
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v6 = v27;
          if (v28 <= v27)
            v6 = v27 % v28;
        }
        else
        {
          v6 = ((_DWORD)v28 - 1) & v27;
        }
        v45 = *(void ***)(*v295 + 8 * v6);
        if (v45)
        {
          v25 = (int8x8_t *)*v45;
          if (*v45)
          {
            if (v29.u32[0] < 2uLL)
            {
              while (1)
              {
                v47 = v25[1];
                if (*(_QWORD *)&v47 == v27)
                {
                  if (v25[4].i32[0] == *(_DWORD *)&v316[16]
                    && *(_QWORD *)&v25[2] == *(_QWORD *)v316
                    && v25[3].i32[0] == *(_DWORD *)&v316[8])
                  {
                    goto LABEL_83;
                  }
                }
                else if ((*(_QWORD *)&v47 & (v28 - 1)) != v6)
                {
                  goto LABEL_84;
                }
                v25 = (int8x8_t *)*v25;
                if (!v25)
                  goto LABEL_84;
              }
            }
            do
            {
              v46 = (unint64_t)v25[1];
              if (v46 == v27)
              {
                if (v25[4].i32[0] == *(_DWORD *)&v316[16]
                  && *(_QWORD *)&v25[2] == *(_QWORD *)v316
                  && v25[3].i32[0] == *(_DWORD *)&v316[8])
                {
LABEL_83:
                  v10 = v296;
                  goto LABEL_127;
                }
              }
              else
              {
                if (v46 >= v28)
                  v46 %= v28;
                if (v46 != v6)
                  break;
              }
              v25 = (int8x8_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_84:
      v25 = (int8x8_t *)operator new(0x50uLL);
      v311 = v25;
      v312 = (std::__shared_weak_count *)v273;
      *v25 = 0;
      v25[1] = (int8x8_t)v27;
      v48 = *(int8x8_t *)(a4 + 16);
      *(_OWORD *)v25[2].i8 = *(_OWORD *)a4;
      *(_QWORD *)&v316[24] = 0;
      *(_QWORD *)&v316[32] = 0;
      v25[4] = v48;
      v25[5] = 0;
      v25[7] = 0;
      v25[8] = 0;
      v25[6] = 0;
      v25[9].i32[0] = 1065353216;
      v313 = 1;
      v49 = (float)((unint64_t)v296[6] + 1);
      v50 = *((float *)v296 + 14);
      if (v28 && (float)(v50 * (float)v28) >= v49)
      {
        v51 = *v295;
        v52 = *(int8x8_t ***)(*v295 + 8 * v6);
        v10 = v296;
        if (v52)
          goto LABEL_87;
      }
      else
      {
        v53 = v28 < 3 || (v28 & (v28 - 1)) != 0;
        v54 = v53 | (2 * v28);
        v55 = vcvtps_u32_f32(v49 / v50);
        if (v54 <= v55)
          prime = v55;
        else
          prime = v54;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v28 = (unint64_t)v296[4];
        }
        if (prime > v28)
          goto LABEL_99;
        if (prime < v28)
        {
          v57 = vcvtps_u32_f32((float)(unint64_t)v296[6] / *((float *)v296 + 14));
          if (v28 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
          {
            v57 = std::__next_prime(v57);
          }
          else
          {
            v59 = 1 << -(char)__clz(v57 - 1);
            if (v57 >= 2)
              v57 = v59;
          }
          if (prime <= v57)
            prime = v57;
          if (prime < v28)
LABEL_99:
            sub_20E8D2B3C((uint64_t)v295, prime);
        }
        v28 = (unint64_t)v296[4];
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v28 <= v27)
            v6 = v27 % v28;
          else
            v6 = v27;
          v51 = *v295;
          v52 = *(int8x8_t ***)(*v295 + 8 * v6);
          v10 = v296;
          if (v52)
          {
LABEL_87:
            *v25 = (int8x8_t)*v52;
            goto LABEL_125;
          }
        }
        else
        {
          v6 = ((_DWORD)v28 - 1) & v27;
          v51 = *v295;
          v52 = *(int8x8_t ***)(*v295 + 8 * v6);
          v10 = v296;
          if (v52)
            goto LABEL_87;
        }
      }
      *v25 = *v273;
      *v273 = (int8x8_t)v25;
      *(_QWORD *)(v51 + 8 * v6) = v273;
      if (!*(_QWORD *)v25)
        goto LABEL_126;
      v60 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v60 >= v28)
          v60 %= v28;
      }
      else
      {
        v60 &= v28 - 1;
      }
      v52 = (int8x8_t **)(*v295 + 8 * v60);
LABEL_125:
      *v52 = v25;
LABEL_126:
      v10[6] = (uint64_t *)((char *)v10[6] + 1);
LABEL_127:
      v6 = vcvtps_u32_f32((float)(unint64_t)v10[8] / *(float *)v25[9].i32);
      if (v6 == 1)
      {
        v6 = 2;
      }
      else if ((v6 & (v6 - 1)) != 0)
      {
        v6 = std::__next_prime(v6);
      }
      v61 = v25[6];
      if (v6 > *(_QWORD *)&v61)
        goto LABEL_132;
      if (v6 < *(_QWORD *)&v61)
      {
        v62 = vcvtps_u32_f32((float)(unint64_t)v25[8] / *(float *)v25[9].i32);
        if (*(_QWORD *)&v61 < 3uLL || (v63 = (uint8x8_t)vcnt_s8(v61), v63.i16[0] = vaddlv_u8(v63), v63.u32[0] > 1uLL))
        {
          v62 = std::__next_prime(v62);
        }
        else
        {
          v64 = 1 << -(char)__clz(v62 - 1);
          if (v62 >= 2)
            v62 = v64;
        }
        if (v6 <= v62)
          v6 = v62;
        if (v6 < *(_QWORD *)&v61)
LABEL_132:
          sub_20E8D2B3C((uint64_t)&v25[5], v6);
      }
LABEL_143:
      _ZF = *(_QWORD *)&v24 == -1 && v297 == -1;
      v66 = !_ZF;
      if (_ZF)
        goto LABEL_162;
      v67 = (uint64_t *)*v299;
      if (!*v299)
        goto LABEL_162;
      v68 = v299;
      do
      {
        v69 = v67[4];
        if (v69 < *(_QWORD *)&v24)
        {
          ++v67;
        }
        else if (v69 == *(_QWORD *)&v24)
        {
          if (*((_DWORD *)v67 + 10) < v297)
            ++v67;
          else
            v68 = v67;
        }
        else
        {
          v68 = v67;
        }
        v67 = (uint64_t *)*v67;
      }
      while (v67);
      if (v68 == v299
        || (v70 = v68[4], *(_QWORD *)&v24 < v70)
        || *(_QWORD *)&v24 == v70 && *((_DWORD *)v68 + 10) > v297)
      {
LABEL_162:
        v311 = 0;
        v312 = 0;
        v71 = (unint64_t)v25[6];
        if (v71)
        {
          v72 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
          v72.i16[0] = vaddlv_u8(v72);
          if (v72.u32[0] > 1uLL)
          {
            v73 = DWORD1(v303);
            if (v71 <= DWORD1(v303))
              v73 = DWORD1(v303) % v71;
          }
          else
          {
            v73 = (v71 - 1) & DWORD1(v303);
          }
          v74 = *(uint64_t ***)(*(_QWORD *)&v25[5] + 8 * v73);
          if (v74)
          {
            v75 = *v74;
            if (v75)
            {
              if (v72.u32[0] < 2uLL)
              {
                v76 = v71 - 1;
                while (1)
                {
                  v78 = v75[1];
                  if (v78 == DWORD1(v303))
                  {
                    if (*((_DWORD *)v75 + 4) == DWORD1(v303))
                      goto LABEL_377;
                  }
                  else if ((v78 & v76) != v73)
                  {
                    goto LABEL_182;
                  }
                  v75 = (uint64_t *)*v75;
                  if (!v75)
                    goto LABEL_182;
                }
              }
              do
              {
                v77 = v75[1];
                if (v77 == DWORD1(v303))
                {
                  if (*((_DWORD *)v75 + 4) == DWORD1(v303))
                  {
LABEL_377:
                    v192 = v75[3];
                    v191 = v75[4];
                    if (v191)
                    {
                      v193 = (unint64_t *)(v191 + 8);
                      do
                        v194 = __ldxr(v193);
                      while (__stxr(v194 + 1, v193));
                    }
                    *(_QWORD *)&v301 = v192;
                    *((_QWORD *)&v301 + 1) = v191;
                    v195 = v301;
                    v301 = 0uLL;
                    v182 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
                    v302 = v195;
                    if (!v182)
                      goto LABEL_381;
                    goto LABEL_361;
                  }
                }
                else
                {
                  if (v77 >= v71)
                    v77 %= v71;
                  if (v77 != v73)
                    break;
                }
                v75 = (uint64_t *)*v75;
              }
              while (v75);
            }
          }
        }
LABEL_182:
        v79 = v10[9];
        if (v79)
        {
          v292 = v66;
          v81 = v79[6];
          v80 = v79[7];
          *(_QWORD *)v316 = v81;
          *(_QWORD *)&v316[8] = v80;
          if (v80)
          {
            v82 = (unint64_t *)(v80 + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          v84 = v79[2];
          if (v79[1] != v84)
          {
            v85 = *(_QWORD *)(v84 - 8);
            *(_QWORD *)(v84 - 8) = 0;
            v86 = v79[2];
            v89 = *(_QWORD *)(v86 - 8);
            v87 = (_QWORD *)(v86 - 8);
            v88 = v89;
            *v87 = 0;
            if (v89)
            {
              if (*(_BYTE *)(v88 + 112))
                *(_BYTE *)(v88 + 112) = 0;
              v90 = *(void **)(v88 + 120);
              *(_QWORD *)(v88 + 128) = v90;
              *(_DWORD *)(v88 + 144) = 0;
              if (v90)
                operator delete(v90);
              v91 = *(std::__shared_weak_count **)(v88 + 8);
              if (v91)
                std::__shared_weak_count::__release_weak(v91);
              MEMORY[0x212BC6398](v88, 0x10A2C405D2BE22CLL);
            }
            v79[2] = (uint64_t)v87;
            v9 = a2;
            v314 = 0;
            v306 = v81;
            v307 = (std::__shared_weak_count *)v80;
            if (!v80)
              goto LABEL_224;
LABEL_222:
            v108 = (unint64_t *)(v80 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
            goto LABEL_224;
          }
          v107 = v79[4];
          if (v107 >= v79[5])
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v79[4] = v107 + 1;
          v85 = operator new();
          *(_BYTE *)(v85 + 40) = 0;
          *(_BYTE *)(v85 + 112) = 0;
          *(_OWORD *)v85 = 0u;
          *(_OWORD *)(v85 + 16) = 0u;
          *(_DWORD *)(v85 + 32) = 0;
          *(_QWORD *)(v85 + 128) = 0;
          *(_QWORD *)(v85 + 136) = 0;
          *(_QWORD *)(v85 + 120) = 0;
          *(_DWORD *)(v85 + 144) = 0;
          v314 = 0;
          v306 = v81;
          v307 = (std::__shared_weak_count *)v80;
          if (v80)
            goto LABEL_222;
LABEL_224:
          v94 = (std::__shared_weak_count *)operator new();
          v94->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v94->__shared_owners_;
          v306 = 0;
          v307 = 0;
          v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04918;
          v94->__shared_weak_owners_ = 0;
          v94[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
          v94[1].__shared_owners_ = v81;
          v94[1].__shared_weak_owners_ = v80;
          if (!v85)
            goto LABEL_237;
          v111 = *(std::__shared_weak_count **)(v85 + 8);
          if (v111)
          {
            if (v111->__shared_owners_ == -1)
            {
              do
                v112 = __ldxr(p_shared_owners);
              while (__stxr(v112 + 1, p_shared_owners));
              p_shared_weak_owners = (unint64_t *)&v94->__shared_weak_owners_;
              do
                v114 = __ldxr(p_shared_weak_owners);
              while (__stxr(v114 + 1, p_shared_weak_owners));
              *(_QWORD *)v85 = v85;
              *(_QWORD *)(v85 + 8) = v94;
              std::__shared_weak_count::__release_weak(v111);
              goto LABEL_235;
            }
            goto LABEL_237;
          }
          do
            v115 = __ldxr(p_shared_owners);
          while (__stxr(v115 + 1, p_shared_owners));
          v116 = (unint64_t *)&v94->__shared_weak_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
          *(_QWORD *)v85 = v85;
          *(_QWORD *)(v85 + 8) = v94;
          do
LABEL_235:
            v118 = __ldaxr(p_shared_owners);
          while (__stlxr(v118 - 1, p_shared_owners));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
            v119 = v307;
            v93 = v299;
            if (v307)
              goto LABEL_238;
            goto LABEL_241;
          }
LABEL_237:
          v119 = v307;
          v93 = v299;
          if (!v307)
            goto LABEL_241;
LABEL_238:
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (v121)
          {
LABEL_241:
            v122 = v314;
            if (v314)
              goto LABEL_242;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
            v122 = v314;
            if (v314)
            {
LABEL_242:
              if (v122[14].i8[0])
                v122[14].i8[0] = 0;
              v123 = (void *)v122[15];
              v122[16] = (int8x8_t)v123;
              v122[18].i32[0] = 0;
              if (v123)
                operator delete(v123);
              v124 = (std::__shared_weak_count *)v122[1];
              if (v124)
                std::__shared_weak_count::__release_weak(v124);
              MEMORY[0x212BC6398](v122, 0x10A2C405D2BE22CLL);
            }
          }
          v125 = *(std::__shared_weak_count **)&v316[8];
          if (!*(_QWORD *)&v316[8])
            goto LABEL_253;
          v126 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
            *(_QWORD *)(v85 + 16) = 0;
            *(_QWORD *)(v85 + 24) = 0;
            *(_DWORD *)(v85 + 32) = 0;
            if (*(_BYTE *)(v85 + 112))
LABEL_254:
              *(_BYTE *)(v85 + 112) = 0;
          }
          else
          {
LABEL_253:
            *(_QWORD *)(v85 + 16) = 0;
            *(_QWORD *)(v85 + 24) = 0;
            *(_DWORD *)(v85 + 32) = 0;
            if (*(_BYTE *)(v85 + 112))
              goto LABEL_254;
          }
          *(_QWORD *)(v85 + 128) = *(_QWORD *)(v85 + 120);
          *(_DWORD *)(v85 + 144) = 0;
          v10 = v296;
          v311 = (int8x8_t *)v85;
          v312 = v94;
          *(_QWORD *)(v85 + 16) = v295;
          if (!v292)
          {
LABEL_256:
            v128 = v10[1];
            v129 = v10[2];
            if (v129)
            {
              v130 = v10[1];
              v131 = v93;
              if (v128)
              {
                do
                {
                  v132 = v130;
                  v130 = (uint64_t *)v130[1];
                }
                while (v130);
              }
              else
              {
                do
                {
                  v132 = (uint64_t *)v131[2];
                  _ZF = *v132 == (_QWORD)v131;
                  v131 = v132;
                }
                while (_ZF);
              }
              v133 = *((unsigned int *)v132 + 10);
              if ((unint64_t)v129 >= v133)
                LODWORD(v129) = v133;
              else
                LODWORD(v129) = 0;
            }
            v24 = v25[2];
            v134 = v129;
            if (v128)
            {
              do
              {
                v135 = v93;
                do
                {
                  v136 = v128[4];
                  if (v136 < *(_QWORD *)&v24)
                  {
                    ++v128;
                  }
                  else if (v136 == *(_QWORD *)&v24)
                  {
                    if (*((_DWORD *)v128 + 10) < v134)
                      ++v128;
                    else
                      v135 = v128;
                  }
                  else
                  {
                    v135 = v128;
                  }
                  v128 = (uint64_t *)*v128;
                }
                while (v128);
                if (v135 == v93)
                  break;
                v137 = v135[4];
                if (v137 > *(_QWORD *)&v24 || v137 == *(_QWORD *)&v24 && *((_DWORD *)v135 + 10) > v134)
                  break;
                v138 = v135[6];
                v139 = (std::__shared_weak_count *)v135[7];
                if (!v139)
                  goto LABEL_266;
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldxr(v140);
                while (__stxr(v141 + 1, v140));
                do
                  v142 = __ldaxr(v140);
                while (__stlxr(v142 - 1, v140));
                if (v142)
                {
LABEL_266:
                  v10 = v296;
                  if (!v138)
                    goto LABEL_287;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                  v10 = v296;
                  if (!v138)
                  {
LABEL_287:
                    v93 = v299;
                    break;
                  }
                }
                ++v134;
                v93 = v299;
                v128 = (uint64_t *)*v299;
              }
              while (*v299);
            }
            *(int8x8_t *)(v85 + 24) = v24;
            *(_DWORD *)(v85 + 32) = v134;
LABEL_289:
            v143 = *(_QWORD *)(v85 + 32);
            *(int8x8_t *)v316 = v24;
            *(_QWORD *)&v316[8] = v143;
            *(_QWORD *)&v316[16] = v85;
            *(_QWORD *)&v316[24] = v94;
            v144 = (unint64_t *)&v94->__shared_owners_;
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
            v146 = (_OWORD *)*v93;
            v147 = v93;
            if (!*v93)
            {
LABEL_302:
              v150 = operator new(0x40uLL);
              v150[2] = *(_OWORD *)v316;
              *((_QWORD *)v150 + 6) = v85;
              *((_QWORD *)v150 + 7) = v94;
              *(_OWORD *)&v316[16] = 0uLL;
              *(_QWORD *)v150 = 0;
              *((_QWORD *)v150 + 1) = 0;
              *((_QWORD *)v150 + 2) = v147;
              *v93 = (uint64_t)v150;
              v151 = (uint64_t *)**v10;
              if (v151)
              {
                *v10 = v151;
                v150 = (_OWORD *)*v93;
              }
              sub_20E868578(v10[1], (uint64_t *)v150);
              v10[2] = (uint64_t *)((char *)v10[2] + 1);
              v94 = *(std::__shared_weak_count **)&v316[24];
              if (*(_QWORD *)&v316[24])
              {
LABEL_305:
                v152 = (unint64_t *)&v94->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v154 = v311;
LABEL_310:
              *(_OWORD *)v316 = *(_OWORD *)v25[2].i8;
              *(int8x8_t *)&v316[16] = v25[4];
              *(_OWORD *)&v316[24] = v303;
              v317 = v304;
              v318 = v305;
              v155 = v154[15];
              v156 = v154[16];
              if (*(_QWORD *)&v156 != *(_QWORD *)&v155)
              {
                v157 = (uint64_t)(*(_QWORD *)&v156 - *(_QWORD *)&v155) >> 6;
                while (1)
                {
                  v158 = v157 >> 1;
                  v159 = *(_QWORD *)&v155 + (v157 >> 1 << 6);
                  v160 = *(_DWORD *)(v159 + 16);
                  v161 = v160 >= *(_DWORD *)&v316[16];
                  if (v160 != *(_DWORD *)&v316[16])
                    goto LABEL_318;
                  if (*(_QWORD *)v159 >= *(_QWORD *)v316)
                    break;
LABEL_312:
                  v155 = (int8x8_t)(v159 + 64);
                  v158 = v157 + ~v158;
LABEL_313:
                  v157 = v158;
                  if (!v158)
                    goto LABEL_321;
                }
                if (*(_QWORD *)v159 != *(_QWORD *)v316)
                  goto LABEL_313;
                v161 = *(_DWORD *)(v159 + 8) >= *(_DWORD *)&v316[8];
LABEL_318:
                if (v161)
                  goto LABEL_313;
                goto LABEL_312;
              }
LABEL_321:
              if (*(_QWORD *)&v155 != *(_QWORD *)&v156
                && *(_DWORD *)(*(_QWORD *)&v155 + 16) == v25[4].i32[0]
                && **(_QWORD **)&v155 == *(_QWORD *)&v25[2]
                && *(_DWORD *)(*(_QWORD *)&v155 + 8) == v25[3].i32[0])
              {
                v6 = (unint64_t)v312;
LABEL_350:
                v301 = 0uLL;
                goto LABEL_351;
              }
              v162 = sub_20FBCC8E8((char **)&v154[15], *(char **)&v155, (__int128 *)v316);
              v6 = (unint64_t)v312;
              if (*(_QWORD *)&v154[16] == v162)
                goto LABEL_350;
              v163 = DWORD1(v303);
              v314 = v154;
              v315 = v312;
              if (v312)
              {
                v164 = (unint64_t *)&v312->__shared_owners_;
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
                do
                  v166 = __ldxr(v164);
                while (__stxr(v166 + 1, v164));
              }
              LODWORD(v308) = v163;
              *(_DWORD *)v316 = v163;
              *(_QWORD *)&v316[8] = v154;
              *(_QWORD *)&v316[16] = v6;
              v306 = 0;
              v307 = 0;
              *(_DWORD *)&v316[24] = v163;
              v167 = sub_20FBCD2B0((uint64_t)&v25[5], v163, (uint64_t)v316);
              v168 = *(std::__shared_weak_count **)&v316[16];
              if (!*(_QWORD *)&v316[16])
                goto LABEL_335;
              v169 = (unint64_t *)(*(_QWORD *)&v316[16] + 8);
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
                v171 = v307;
                if (v307)
                {
LABEL_336:
                  v172 = (unint64_t *)&v171->__shared_owners_;
                  do
                    v173 = __ldaxr(v172);
                  while (__stlxr(v173 - 1, v172));
                  if (!v173)
                  {
                    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                    std::__shared_weak_count::__release_weak(v171);
                  }
                }
              }
              else
              {
LABEL_335:
                v171 = v307;
                if (v307)
                  goto LABEL_336;
              }
              v174 = v315;
              if (!v315)
                goto LABEL_349;
              v175 = (unint64_t *)&v315->__shared_owners_;
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
                v6 = (unint64_t)v312;
                if ((v167 & 1) == 0)
                  goto LABEL_350;
              }
              else
              {
LABEL_349:
                v6 = (unint64_t)v312;
                if ((v167 & 1) == 0)
                  goto LABEL_350;
              }
              *(_QWORD *)&v301 = v311;
              *((_QWORD *)&v301 + 1) = v6;
              if (!v6)
                goto LABEL_360;
              v177 = (unint64_t *)(v6 + 8);
              do
                v178 = __ldxr(v177);
              while (__stxr(v178 + 1, v177));
LABEL_357:
              v179 = (unint64_t *)(v6 + 8);
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (v180)
                goto LABEL_360;
              (*(void (**)(unint64_t))(*(_QWORD *)v6 + 16))(v6);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
              v185 = v301;
              v301 = 0uLL;
              v182 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
              v302 = v185;
              if (!v182)
                goto LABEL_381;
LABEL_361:
              v183 = (unint64_t *)&v182->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
              goto LABEL_381;
            }
            while (2)
            {
              while (1)
              {
                v147 = (uint64_t *)v146;
                v148 = *((_QWORD *)v146 + 4);
                if (*(_QWORD *)&v24 < v148)
                  break;
                if (*(_QWORD *)&v24 == v148)
                {
                  v149 = *((_DWORD *)v147 + 10);
                  if (v149 > v143)
                    break;
                  if (v149 >= v143)
                    goto LABEL_305;
                }
                else if (v148 >= *(_QWORD *)&v24)
                {
                  goto LABEL_305;
                }
                v146 = (_OWORD *)v147[1];
                if (!v146)
                {
                  v93 = v147 + 1;
                  goto LABEL_302;
                }
              }
              v146 = (_OWORD *)*v147;
              v93 = v147;
              if (!*v147)
                goto LABEL_302;
              continue;
            }
          }
LABEL_219:
          *(int8x8_t *)(v85 + 24) = v24;
          *(_DWORD *)(v85 + 32) = v297;
          goto LABEL_289;
        }
        v85 = operator new();
        v92 = v66;
        *(_BYTE *)(v85 + 40) = 0;
        *(_BYTE *)(v85 + 112) = 0;
        *(_OWORD *)v85 = 0u;
        *(_OWORD *)(v85 + 16) = 0u;
        *(_DWORD *)(v85 + 32) = 0;
        *(_QWORD *)(v85 + 128) = 0;
        *(_QWORD *)(v85 + 136) = 0;
        *(_QWORD *)(v85 + 120) = 0;
        *(_DWORD *)(v85 + 144) = 0;
        *(_QWORD *)v316 = v85;
        v93 = v299;
        v94 = (std::__shared_weak_count *)operator new();
        v94->__shared_owners_ = 0;
        v95 = (unint64_t *)&v94->__shared_owners_;
        v94->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA04968;
        v94->__shared_weak_owners_ = 0;
        v94[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
        *(_QWORD *)v316 = 0;
        v96 = *(std::__shared_weak_count **)(v85 + 8);
        if (v96)
        {
          if (v96->__shared_owners_ == -1)
          {
            do
              v97 = __ldxr(v95);
            while (__stxr(v97 + 1, v95));
            v98 = (unint64_t *)&v94->__shared_weak_owners_;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
            *(_QWORD *)v85 = v85;
            *(_QWORD *)(v85 + 8) = v94;
            std::__shared_weak_count::__release_weak(v96);
            do
LABEL_207:
              v103 = __ldaxr(v95);
            while (__stlxr(v103 - 1, v95));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v104 = *(_QWORD *)v316;
          if (*(_QWORD *)v316)
          {
            if (*(_BYTE *)(*(_QWORD *)v316 + 112))
              *(_BYTE *)(*(_QWORD *)v316 + 112) = 0;
            v105 = *(void **)(v104 + 120);
            *(_QWORD *)(v104 + 128) = v105;
            *(_DWORD *)(v104 + 144) = 0;
            if (v105)
              operator delete(v105);
            v106 = *(std::__shared_weak_count **)(v104 + 8);
            if (v106)
              std::__shared_weak_count::__release_weak(v106);
            MEMORY[0x212BC6398](v104, 0x10A2C405D2BE22CLL);
          }
          v10 = v296;
          v311 = (int8x8_t *)v85;
          v312 = v94;
          *(_QWORD *)(v85 + 16) = v295;
          if (!v92)
            goto LABEL_256;
          goto LABEL_219;
        }
        do
          v100 = __ldxr(v95);
        while (__stxr(v100 + 1, v95));
        v101 = (unint64_t *)&v94->__shared_weak_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
        *(_QWORD *)v85 = v85;
        *(_QWORD *)(v85 + 8) = v94;
        goto LABEL_207;
      }
      v154 = (int8x8_t *)v68[6];
      v6 = v68[7];
      if (v6)
      {
        v186 = (unint64_t *)(v6 + 8);
        do
          v187 = __ldxr(v186);
        while (__stxr(v187 + 1, v186));
      }
      v311 = v154;
      v312 = (std::__shared_weak_count *)v6;
      v188 = (unint64_t)v25[6];
      if (!v188)
        goto LABEL_310;
      v189 = (uint8x8_t)vcnt_s8((int8x8_t)v188);
      v189.i16[0] = vaddlv_u8(v189);
      if (v189.u32[0] > 1uLL)
      {
        v190 = DWORD1(v303);
        if (v188 <= DWORD1(v303))
          v190 = DWORD1(v303) % v188;
      }
      else
      {
        v190 = (v188 - 1) & DWORD1(v303);
      }
      v248 = *(uint64_t ***)(*(_QWORD *)&v25[5] + 8 * v190);
      if (!v248)
        goto LABEL_310;
      v249 = *v248;
      if (!v249)
        goto LABEL_310;
      if (v189.u32[0] < 2uLL)
      {
        v250 = v188 - 1;
        while (1)
        {
          v252 = v249[1];
          if (v252 == DWORD1(v303))
          {
            if (*((_DWORD *)v249 + 4) == DWORD1(v303))
              goto LABEL_426;
          }
          else if ((v252 & v250) != v190)
          {
            goto LABEL_310;
          }
          v249 = (uint64_t *)*v249;
          if (!v249)
            goto LABEL_310;
        }
      }
      while (1)
      {
        v251 = v249[1];
        if (v251 == DWORD1(v303))
          break;
        if (v251 >= v188)
          v251 %= v188;
        if (v251 != v190)
          goto LABEL_310;
LABEL_415:
        v249 = (uint64_t *)*v249;
        if (!v249)
          goto LABEL_310;
      }
      if (*((_DWORD *)v249 + 4) != DWORD1(v303))
        goto LABEL_415;
LABEL_426:
      v253 = (unint64_t)v154[3];
      v254 = v154[4].u32[0];
      v255 = v249[3];
      v256 = *(_QWORD *)(v255 + 24);
      v257 = *(_DWORD *)(v255 + 32);
      if (v253 == v256 && v254 == v257)
      {
        *(_QWORD *)&v301 = v154;
        *((_QWORD *)&v301 + 1) = v6;
        v263 = v301;
        v301 = 0uLL;
        v182 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
        v302 = v263;
        if (!v182)
          goto LABEL_381;
        goto LABEL_361;
      }
      v259 = (uint64_t *)*v299;
      if (!*v299)
        goto LABEL_350;
      v260 = (uint64_t)v299;
      v261 = *v299;
      do
      {
        v262 = *(_QWORD *)(v261 + 32);
        if (v262 < v253)
        {
          v261 += 8;
        }
        else if (v262 == v253)
        {
          if (*(_DWORD *)(v261 + 40) < v254)
            v261 += 8;
          else
            v260 = v261;
        }
        else
        {
          v260 = v261;
        }
        v261 = *(_QWORD *)v261;
      }
      while (v261);
      if ((_QWORD *)v260 == v299)
        goto LABEL_350;
      v264 = *(_QWORD *)(v260 + 32);
      if (v253 < v264 || v253 == v264 && *(_DWORD *)(v260 + 40) > v254)
        goto LABEL_350;
      v265 = v299;
      do
      {
        v266 = v259[4];
        if (v266 < v256)
        {
          ++v259;
        }
        else if (v266 == v256)
        {
          if (*((_DWORD *)v259 + 10) < v257)
            ++v259;
          else
            v265 = v259;
        }
        else
        {
          v265 = v259;
        }
        v259 = (uint64_t *)*v259;
      }
      while (v259);
      if (v265 == v299)
        goto LABEL_350;
      v267 = v265[4];
      if (v256 < v267 || v256 == v267 && *((_DWORD *)v265 + 10) > v257)
        goto LABEL_350;
      sub_20FBCC2E4(&v301, v10, v260, v265);
LABEL_351:
      if (v6)
        goto LABEL_357;
LABEL_360:
      v181 = v301;
      v301 = 0uLL;
      v182 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
      v302 = v181;
      if (v182)
        goto LABEL_361;
LABEL_381:
      v196 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
      if (*((_QWORD *)&v301 + 1))
      {
        v197 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      v199 = v302;
      memset(v316, 0, 39);
      if (!*(_BYTE *)(v302 + 112))
      {
        *(_QWORD *)(v302 + 56) = 0;
        *(_QWORD *)(v199 + 64) = 0;
        *(_QWORD *)(v199 + 40) = &off_24CA048E0;
        *(_QWORD *)(v199 + 48) = 0;
        v31.f64[1] = *(float64_t *)&v316[11];
        v201 = *(_OWORD *)&v316[19];
        *(_OWORD *)(v199 + 76) = *(_OWORD *)&v316[3];
        *(_OWORD *)(v199 + 92) = v201;
        *(_DWORD *)(v199 + 108) = *(_DWORD *)&v316[35];
        *(_BYTE *)(v199 + 112) = 1;
        *(_BYTE *)(v199 + 72) = 0;
        v40 = v302;
        if (*(_BYTE *)(v302 + 112))
          goto LABEL_390;
        goto LABEL_49;
      }
      *(_QWORD *)(v302 + 48) = 0;
      *(_QWORD *)(v199 + 56) = 0;
      *(_QWORD *)(v199 + 64) = 0;
      v31.f64[1] = *(float64_t *)&v316[11];
      v200 = *(_OWORD *)&v316[19];
      *(_OWORD *)(v199 + 76) = *(_OWORD *)&v316[3];
      *(_OWORD *)(v199 + 92) = v200;
      *(_DWORD *)(v199 + 108) = *(_DWORD *)&v316[35];
      *(_BYTE *)(v199 + 72) = 0;
      v40 = v302;
      if (!*(_BYTE *)(v302 + 112))
        goto LABEL_49;
LABEL_390:
      v202 = v9 + (v300 << 7);
      v203 = *(float64x2_t *)(v202 + 64);
      v31.f64[0] = *(float64_t *)(v202 + 80);
      *(float64_t *)(v40 + 64) = v31.f64[0];
      *(float64x2_t *)(v40 + 48) = v203;
      if (!*(_BYTE *)(a5 + 128))
      {
        v206 = v40 + 40;
        v245 = *(unsigned __int8 *)(v202 + 124);
        v208 = v40 + 40;
        if (v245)
          goto LABEL_395;
LABEL_403:
        *(_BYTE *)(v208 + 32) = 0;
        v244 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
        if (!*((_QWORD *)&v302 + 1))
          goto LABEL_8;
LABEL_404:
        v246 = (unint64_t *)&v244->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
        goto LABEL_8;
      }
      v204 = *(double *)vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).i64;
      v205 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a5, v203.f64[0]), *(float64x2_t *)(a5 + 32), v204), *(float64x2_t *)(a5 + 64), v31.f64[0]);
      v31.f64[0] = *(double *)(a5 + 16) * v203.f64[0] + *(double *)(a5 + 48) * v204 + *(double *)(a5 + 80) * v31.f64[0];
      v203.f64[0] = *(float64_t *)(a5 + 112);
      v31 = vaddq_f64(v31, v203);
      v203 = vaddq_f64(v205, *(float64x2_t *)(a5 + 96));
      *(float64x2_t *)(v40 + 48) = v203;
      *(float64_t *)(v40 + 64) = v31.f64[0];
      v206 = v40 + 40;
      v207 = *(unsigned __int8 *)(v202 + 124);
      if (*(_BYTE *)(v40 + 112))
        v208 = v40 + 40;
      else
        v208 = 0;
      if (!v207)
        goto LABEL_403;
LABEL_395:
      v209 = v9 + (v300 << 7);
      v31.f64[0] = *(float64_t *)(v209 + 88);
      v203.f64[0] = *(float64_t *)(v209 + 100);
      v210 = vzip1q_s32((int32x4_t)v31, (int32x4_t)v203).u64[0];
      LODWORD(v31.f64[1]) = *(_DWORD *)(v209 + 96);
      LODWORD(v203.f64[1]) = *(_DWORD *)(v209 + 108);
      v211 = *(float32x2_t *)(v209 + 112);
      v212 = vtrn2q_s32((int32x4_t)v31, (int32x4_t)v203);
      v212.i32[2] = v211.i32[1];
      v213 = vzip2q_s32((int32x4_t)v31, (int32x4_t)v203);
      v213.i32[2] = *(_DWORD *)(v209 + 120);
      *(_DWORD *)(v208 + 44) = v211.i32[0];
      *(_QWORD *)(v208 + 36) = v210;
      *(_DWORD *)(v208 + 56) = v211.i32[1];
      *(_QWORD *)(v208 + 48) = v212.i64[0];
      *(_DWORD *)(v208 + 68) = v213.i32[2];
      *(_QWORD *)(v208 + 60) = v213.i64[0];
      v214 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v212, (int8x16_t)v212, 0xCuLL), (int8x16_t)v212, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v213, v213), (int8x16_t)v213, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v212, v212), (int8x16_t)v212, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v213, (int8x16_t)v213, 0xCuLL), (int8x16_t)v213, 8uLL));
      *(float32x2_t *)&v31.f64[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v31.f64[0], *(float32x2_t *)v214.i8), *(float32x2_t *)&v203.f64[0], *(float32x2_t *)v214.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL), v211);
      *(_BYTE *)(v208 + 32) = *(float *)v31.f64 > 0.0;
      if (v293)
      {
        if (!*(_BYTE *)(v40 + 112))
          v206 = 0;
        if (*(_BYTE *)(v206 + 32))
        {
          LODWORD(v31.f64[0]) = *(_DWORD *)(v206 + 68);
          v215 = *(float32x4_t *)(v206 + 36);
          v216 = *(float32x4_t *)(v206 + 52);
          *(_QWORD *)&v217 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v31.f64[0]);
          _Q3 = vcvt_hight_f64_f32(v216);
          _Q2 = vcvtq_f64_f32(*(float32x2_t *)v216.f32);
          _Q4 = vcvt_hight_f64_f32(v215);
          _Q1 = vcvtq_f64_f32(*(float32x2_t *)v215.f32);
          v222 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, _Q1.f64[0]), v280, _Q1, 1), v281, _Q4.f64[0]);
          _D19 = v289;
          __asm { FMLA            D6, D19, V1.D[1] }
          _D21 = v285;
          v228 = vmlad_n_f64(_D6, v285, _Q4.f64[0]);
          v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v282, _Q4, 1), v280, _Q2.f64[0]), v281, _Q2, 1);
          __asm { FMLA            D4, D21, V2.D[1] }
          v230 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v282, _Q3.f64[0]), v280, _Q3, 1), v281, v217);
          __asm { FMLA            D7, D19, V3.D[1] }
          v232 = vmlad_n_f64(_D7, v285, v217);
          *(_QWORD *)&_Q3.f64[1] = v291.i64[1];
          v233 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v222, *(double *)v291.i64), v279, v229), v278, v230);
          _Q3.f64[0] = v228 * *(double *)v291.i64 + _Q4.f64[0] * *(double *)&v290 + v232 * *(double *)v288.i64;
          v234.i64[1] = v286.i64[1];
          v235 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v222, *(double *)v286.i64), v277, v229), v276, v230);
          *(double *)v234.i64 = v228 * *(double *)v286.i64 + _Q4.f64[0] * v287 + v232 * *(double *)&v284;
          v236 = vmlaq_f64(vmulq_n_f64(v222, v283), v275, v229);
          v229.f64[1] = v274.f64[1];
          v237 = vmlaq_f64(v236, v274, v230);
          v229.f64[0] = v228 * v283 + _Q4.f64[0] * v289 + v232 * v285;
          v238 = (float64x2_t)vzip1q_s64((int64x2_t)_Q3, (int64x2_t)v235);
          *(float32x2_t *)&_Q4.f64[0] = vcvt_f32_f64(v238);
          v239 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v235, v234, 8uLL)), v237);
          *(float32x2_t *)&v233.f64[0] = vcvt_f32_f64(v233);
          v240 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&v233.f64[0], v238);
          *(int8x16_t *)(v206 + 36) = v240;
          *(_DWORD *)(v206 + 68) = vcvt_f32_f64(v229).u32[0];
          *(int8x16_t *)(v206 + 52) = v239;
          v241 = (int32x4_t)vextq_s8(v240, v239, 0xCuLL);
          v242 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v237), v229);
          v243 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v241, (int8x16_t)v241, 0xCuLL), (int8x16_t)v241, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v242, v242), (int8x16_t)v242, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v241, v241), (int8x16_t)v241, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v242, (int8x16_t)v242, 0xCuLL), (int8x16_t)v242, 8uLL));
          *(_BYTE *)(v206 + 32) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v233.f64[0], *(float32x2_t *)v243.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.i8, 1), *(float32x2_t *)&v233.f64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL), *(float32x2_t *)&_Q4.f64[0]).f32[0] > 0.0;
        }
      }
      v244 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
      if (*((_QWORD *)&v302 + 1))
        goto LABEL_404;
LABEL_8:
      v11 = v300 + 1;
      if (v300 + 1 == v294)
        goto LABEL_460;
    }
    v30 = 0;
LABEL_29:
    v302 = (unint64_t)v30;
    if (v30)
      goto LABEL_30;
    goto LABEL_24;
  }
LABEL_460:
  v268 = *(_QWORD *)(v271 + 5280);
  if (v268 == -1 && *(_DWORD *)(v271 + 5288) == -1
    || v268 < *(_QWORD *)a4
    || v268 == *(_QWORD *)a4 && *(_DWORD *)(v271 + 5288) < *(_DWORD *)(a4 + 8))
  {
    v269 = *(_QWORD *)a4;
    *(_DWORD *)(v271 + 5288) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)(v271 + 5280) = v269;
  }
}

void sub_20F885580()
{
  uint64_t v0;

  sub_20E86665C(v0 - 176);
  JUMPOUT(0x20F88566CLL);
}

void sub_20F885588()
{
  void *v0;
  uint64_t v1;

  __cxa_free_exception(v0);
  sub_20E86665C(v1 - 176);
  JUMPOUT(0x20F88566CLL);
}

void sub_20F885598()
{
  uint64_t v0;

  sub_20EE6C9B0(v0 - 216);
  sub_20F28C018(v0 - 176);
  sub_20F2828AC(v0 - 256);
  JUMPOUT(0x20F885680);
}

void sub_20F8855E0()
{
  uint64_t v0;

  sub_20E8C2824(v0 - 176);
  sub_20E86665C(v0 - 256);
  sub_20E86665C(v0 - 192);
  JUMPOUT(0x20F88566CLL);
}

void sub_20F885600(void *a1, int a2)
{
  uint64_t v2;
  std::mutex *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_20FBCCCA0(v3, v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F885688);
}

void sub_20F885624()
{
  uint64_t v0;

  __cxa_end_catch();
  sub_20E86665C(v0 - 256);
  sub_20FB447E0((uint64_t *)(v0 - 192));
  JUMPOUT(0x20F88563CLL);
}

void sub_20F885648(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F885688);
}

void sub_20F885658()
{
  uint64_t v0;

  sub_20F28AC44(v0 - 176);
  JUMPOUT(0x20F88566CLL);
}

void sub_20F885668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  sub_20E86665C(v67 - 216);
  sub_20E86665C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

unint64_t sub_20F885690(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t result;
  int v29;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type size;
  _QWORD *v36;
  _QWORD *v37;
  std::string *p_p;
  std::string::size_type v39;
  char v40;
  size_t v41;
  void **v42;
  unint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  const char *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  const char *v54;
  size_t v55;
  std::string::size_type *p_size;
  uint64_t v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  void *v69;
  _QWORD *v70;
  size_t v71;
  size_t v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::string::size_type v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  const char *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  const char *v127;
  std::string __p;
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *__dst[2];
  int64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  const void *v142;
  unint64_t v143;
  void *v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  std::string v154;
  char *v155;
  std::__shared_weak_count *v156;
  _QWORD *v157;
  __int128 v158;
  std::string v159;
  __int128 v160;
  void *v161[2];
  unint64_t v162;
  char v163;
  _QWORD v164[5];

  v164[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 8);
  if (*(_BYTE *)(a1 + 1945) && !*(_QWORD *)(v5 + 16))
    v5 = a1 + 7968;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[10] - a2[9]) >> 3) != (uint64_t)(a2[94] - a2[93]) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3030, (uint64_t)"query_frame_bundle.front_track_key_per_feature.size() == query_frame.image_features().size()", 92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v152 = *a3;
  v153 = *((_QWORD *)a3 + 2);
  *(_QWORD *)&v152 = 0;
  v150 = *(_OWORD *)a2;
  v151 = a2[2];
  *(_QWORD *)&v150 = 0;
  v6 = sub_20FCBC4B0(a2);
  v7 = sub_20E9DF85C((_QWORD *)(v5 + 24), (uint64_t *)&v152);
  if (v7)
  {
    v8 = v7[7];
    if (v8)
    {
      v9 = 0;
      do
      {
        v10 = *(_DWORD *)(*((_QWORD *)a3 + 93) + 4 * *(unsigned int *)(v8 + 16));
        v11 = (_DWORD *)*v6;
        v12 = (_DWORD *)v6[1];
        if (v12 != (_DWORD *)*v6)
        {
          v13 = ((uint64_t)v12 - *v6) >> 3;
          do
          {
            v14 = v13 >> 1;
            v15 = &v11[2 * (v13 >> 1)];
            v17 = *v15;
            v16 = v15 + 2;
            v13 += ~(v13 >> 1);
            if (v17 < v10)
              v11 = v16;
            else
              v13 = v14;
          }
          while (v13);
        }
        if (v12 != v11 && *v11 == v10)
        {
          v18 = *(_QWORD *)(v8 + 24);
          v19 = a2[9] + 40 * v11[1];
          v137 = v150;
          v138 = v151;
          v139 = *(_OWORD *)v19;
          v140 = *(_OWORD *)(v19 + 16);
          LODWORD(v141) = *(_DWORD *)(v19 + 32);
          v20 = *(_QWORD *)(v18 + 120);
          v21 = *(_QWORD *)(v18 + 128);
          if (v21 != v20)
          {
            v22 = (v21 - v20) >> 6;
            while (1)
            {
              v23 = v22 >> 1;
              v24 = v20 + (v22 >> 1 << 6);
              v25 = *(_DWORD *)(v24 + 16);
              v26 = v25 >= v138;
              if (v25 != (_DWORD)v138)
                goto LABEL_27;
              if (*(_QWORD *)v24 >= (unint64_t)v137)
                break;
LABEL_21:
              v20 = v24 + 64;
              v23 = v22 + ~v23;
LABEL_22:
              v22 = v23;
              if (!v23)
                goto LABEL_30;
            }
            if (*(_QWORD *)v24 != (_QWORD)v137)
              goto LABEL_22;
            v26 = *(_DWORD *)(v24 + 8) >= DWORD2(v137);
LABEL_27:
            if (v26)
              goto LABEL_22;
            goto LABEL_21;
          }
LABEL_30:
          if (v20 == v21
            || *(_DWORD *)(v20 + 16) != (_DWORD)v151
            || *(_QWORD *)v20 != (_QWORD)v150
            || (v27 = *(_QWORD *)(v18 + 128), *(_DWORD *)(v20 + 8) != DWORD2(v150)))
          {
            v27 = sub_20FBCC8E8((char **)(v18 + 120), (char *)v20, &v137);
            v21 = *(_QWORD *)(v18 + 128);
          }
          if (v21 != v27)
            sub_20FBCD5EC(v18, (uint64_t)&v150, v19);
          ++v9;
        }
        v8 = *(_QWORD *)v8;
      }
      while (v8);
    }
  }
  sub_20F82FD50(&v149);
  result = v149;
  if (**(int **)(v149 + 56) <= 2)
  {
    v29 = *(unsigned __int8 *)(v149 + 72);
    result = sub_20E8C31DC(v149, "OSLogSurrogateAppender", 1, 0);
    if (v29 || result != 0)
    {
      v31 = result;
      sub_20E863438((uint64_t)&v137);
      sub_20E86A980(&v138, (uint64_t)"Extend track: ", 14);
      v32 = (_QWORD *)std::ostream::operator<<();
      v33 = sub_20E86A980(v32, (uint64_t)" for ", 5);
      sub_20F271158((uint64_t)&v150, &v159);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v159;
      else
        v34 = (std::string *)v159.__r_.__value_.__r.__words[0];
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        size = v159.__r_.__value_.__l.__size_;
      v36 = sub_20E86A980(v33, (uint64_t)v34, size);
      v37 = sub_20E86A980(v36, (uint64_t)" from ", 6);
      sub_20F271158((uint64_t)&v152, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v39 = __p.__r_.__value_.__l.__size_;
      sub_20E86A980(v37, (uint64_t)p_p, v39);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_56:
          v40 = v147;
          if ((v147 & 0x10) == 0)
            goto LABEL_57;
          goto LABEL_61;
        }
      }
      else if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_56;
      }
      operator delete(v159.__r_.__value_.__l.__data_);
      v40 = v147;
      if ((v147 & 0x10) == 0)
      {
LABEL_57:
        if ((v40 & 8) == 0)
        {
          v41 = 0;
          HIBYTE(v136) = 0;
          v42 = __dst;
          goto LABEL_71;
        }
        v44 = (const void *)v140;
        v41 = v141 - v140;
        if ((unint64_t)(v141 - v140) > 0x7FFFFFFFFFFFFFF7)
LABEL_116:
          sub_20E860B7C();
LABEL_64:
        if (v41 >= 0x17)
        {
          v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v45 = v41 | 7;
          v46 = v45 + 1;
          v42 = (void **)operator new(v45 + 1);
          __dst[1] = (void *)v41;
          v136 = v46 | 0x8000000000000000;
          __dst[0] = v42;
        }
        else
        {
          HIBYTE(v136) = v41;
          v42 = __dst;
          if (!v41)
          {
LABEL_71:
            *((_BYTE *)v42 + v41) = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
            __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v129 = 2;
            v130 = "unknown file";
            v131 = 3065;
            v133 = 0;
            v134 = 0;
            v132 = "unknown function";
            if (v136 >= 0)
              v47 = (const char *)__dst;
            else
              v47 = (const char *)__dst[0];
            v48 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v49 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
            if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v51 = *(const char **)(v48 + 16);
              v50 = *(_QWORD *)(v48 + 24);
              v53 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v53 & 1) != 0)
                goto LABEL_78;
            }
            else
            {
              v50 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
              v51 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
              v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v52 & 1) != 0)
                goto LABEL_78;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v159);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v159);
              if ((_BYTE)v160 && SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v159.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_78:
            if (byte_254A4A4F8[23] >= 0)
              v54 = byte_254A4A4F8;
            else
              v54 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v55 = byte_254A4A4F8[23];
            else
              v55 = *(_QWORD *)&byte_254A4A4F8[8];
            v159.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v54, v51);
            p_size = &v159.__r_.__value_.__l.__size_;
            if (v55 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v55 >= 0x17)
            {
              v127 = v51;
              v57 = v48;
              v58 = v31;
              v59 = v47;
              v60 = v49;
              v61 = v29;
              v62 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v55 | 7) != 0x17)
                v62 = v55 | 7;
              v63 = v62 + 1;
              p_size = (std::string::size_type *)operator new(v62 + 1);
              v159.__r_.__value_.__r.__words[2] = v55;
              *(_QWORD *)&v160 = v63 | 0x8000000000000000;
              v159.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
              v29 = v61;
              v49 = v60;
              v47 = v59;
              v31 = v58;
              v48 = v57;
              v51 = v127;
            }
            else
            {
              BYTE7(v160) = v55;
              if (!v55)
              {
LABEL_92:
                *((_BYTE *)p_size + v55) = 0;
                BYTE8(v160) = 1;
                v64 = v161;
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v50 >= 0x17)
                {
                  v66 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v66 = v50 | 7;
                  v67 = v66 + 1;
                  v64 = (void **)operator new(v66 + 1);
                  v161[1] = (void *)v50;
                  v162 = v67 | 0x8000000000000000;
                  v161[0] = v64;
                }
                else
                {
                  HIBYTE(v162) = v50;
                  if (!v50)
                  {
                    LOBYTE(v161[0]) = 0;
                    v163 = 1;
                    v65 = v159.__r_.__value_.__r.__words[0];
                    if ((SHIBYTE(v162) & 0x80000000) == 0)
                      goto LABEL_96;
                    goto LABEL_102;
                  }
                }
                memmove(v64, v51, v50);
                *((_BYTE *)v64 + v50) = 0;
                v163 = 1;
                v65 = v159.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v162) & 0x80000000) == 0)
                {
LABEL_96:
                  if (!BYTE8(v160))
                    goto LABEL_105;
                  goto LABEL_103;
                }
LABEL_102:
                operator delete(v161[0]);
                if (!BYTE8(v160))
                  goto LABEL_105;
LABEL_103:
                if (SBYTE7(v160) < 0)
                  operator delete((void *)v159.__r_.__value_.__l.__size_);
LABEL_105:
                if (v159.__r_.__value_.__r.__words[0])
                  os_release(v159.__r_.__value_.__l.__data_);
                if (!v31 || !*(_QWORD *)(v31 + 24))
                {
                  os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG);
                  LODWORD(v159.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
                  v74 = (void *)_os_log_send_and_compose_impl();
                  if (v74)
                    free(v74);
                  goto LABEL_181;
                }
                v68 = _os_log_pack_size();
                v69 = operator new(v68, (std::align_val_t)8uLL);
                v70 = (_QWORD *)operator new();
                *v70 = &off_24C9ABB80;
                v70[1] = 0;
                v70[2] = 0;
                v70[3] = v69;
                v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
                v154.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
                v155 = 0;
                v156 = 0;
                v154.__r_.__value_.__r.__words[2] = (std::string::size_type)v70;
                v71 = strlen(v47);
                if (v71 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v72 = v71;
                if (v71 >= 0x17)
                {
                  v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v71 | 7) != 0x17)
                    v75 = v71 | 7;
                  v76 = v75 + 1;
                  v73 = operator new(v75 + 1);
                  *(_QWORD *)&v158 = v72;
                  *((_QWORD *)&v158 + 1) = v76 | 0x8000000000000000;
                  v157 = v73;
                }
                else
                {
                  HIBYTE(v158) = v71;
                  v73 = &v157;
                  if (!v71)
                  {
LABEL_121:
                    *((_BYTE *)v73 + v72) = 0;
                    v77 = v157;
                    v164[0] = v158;
                    *(_QWORD *)((char *)v164 + 7) = *(_QWORD *)((char *)&v158 + 7);
                    v78 = HIBYTE(v158);
                    v79 = operator new(0x38uLL);
                    v79[1] = 0;
                    v79[2] = 0;
                    v79[3] = off_24C9ABC20;
                    *v79 = &off_24C9ABBD0;
                    v80 = v164[0];
                    v79[4] = v77;
                    v79[5] = v80;
                    *(_QWORD *)((char *)v79 + 47) = *(_QWORD *)((char *)v164 + 7);
                    *((_BYTE *)v79 + 55) = v78;
                    v164[0] = 0;
                    *(_QWORD *)((char *)v164 + 7) = 0;
                    v81 = v156;
                    v155 = (char *)(v79 + 3);
                    v156 = (std::__shared_weak_count *)v79;
                    if (v81)
                    {
                      p_shared_owners = (unint64_t *)&v81->__shared_owners_;
                      do
                        v83 = __ldaxr(p_shared_owners);
                      while (__stlxr(v83 - 1, p_shared_owners));
                      if (!v83)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    v159 = v154;
                    v84 = v155;
                    if (v154.__r_.__value_.__r.__words[2])
                    {
                      v85 = (unint64_t *)(v154.__r_.__value_.__r.__words[2] + 8);
                      do
                        v86 = __ldxr(v85);
                      while (__stxr(v86 + 1, v85));
                    }
                    v87 = v156;
                    *(_QWORD *)&v160 = v84;
                    *((_QWORD *)&v160 + 1) = v156;
                    if (v156)
                    {
                      v88 = (unint64_t *)&v156->__shared_owners_;
                      do
                        v89 = __ldxr(v88);
                      while (__stxr(v89 + 1, v88));
                      v161[0] = v84;
                      do
                        v90 = __ldaxr(v88);
                      while (__stlxr(v90 - 1, v88));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                        std::__shared_weak_count::__release_weak(v87);
                      }
                    }
                    else
                    {
                      v161[0] = v84;
                    }
                    v91 = (std::__shared_weak_count *)v154.__r_.__value_.__r.__words[2];
                    if (v154.__r_.__value_.__r.__words[2])
                    {
                      v92 = (unint64_t *)(v154.__r_.__value_.__r.__words[2] + 8);
                      do
                        v93 = __ldaxr(v92);
                      while (__stlxr(v93 - 1, v92));
                      if (!v93)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    v94 = v159.__r_.__value_.__r.__words[0];
                    if (*((char *)v161[0] + 31) >= 0)
                      v95 = (char *)v161[0] + 8;
                    else
                      v95 = (char *)*((_QWORD *)v161[0] + 1);
                    v96 = _os_log_pack_fill();
                    *(_DWORD *)v96 = 136315138;
                    *(_QWORD *)(v96 + 4) = v95;
                    v97 = operator new();
                    v98 = *(unsigned __int8 *)(v48 + 39);
                    v99 = *(_QWORD *)(v48 + 16);
                    v100 = *(_QWORD *)(v48 + 24);
                    v101 = v160;
                    *(_OWORD *)(v97 + 8) = *(_OWORD *)&v159.__r_.__value_.__r.__words[1];
                    if ((v98 & 0x80u) != 0)
                      v98 = v100;
                    else
                      v99 = v49;
                    *(_QWORD *)v97 = v94;
                    *(_OWORD *)&v159.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v97 + 24) = v101;
                    v160 = 0uLL;
                    *(_QWORD *)(v97 + 40) = v99;
                    *(_QWORD *)(v97 + 48) = v98;
                    *(_BYTE *)(v97 + 56) = 2;
                    v157 = 0;
                    v154.__r_.__value_.__r.__words[0] = v97;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v154);
                    v102 = v154.__r_.__value_.__r.__words[0];
                    v154.__r_.__value_.__r.__words[0] = 0;
                    if (v102)
                    {
                      v103 = *(std::__shared_weak_count **)(v102 + 32);
                      if (v103)
                      {
                        v104 = (unint64_t *)&v103->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      v106 = *(std::__shared_weak_count **)(v102 + 16);
                      if (v106)
                      {
                        v107 = (unint64_t *)&v106->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
                      v109 = v157;
                      v157 = 0;
                      if (v109)
                      {
                        v110 = (std::__shared_weak_count *)v109[4];
                        if (v110)
                        {
                          v111 = (unint64_t *)&v110->__shared_owners_;
                          do
                            v112 = __ldaxr(v111);
                          while (__stlxr(v112 - 1, v111));
                          if (!v112)
                          {
                            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                            std::__shared_weak_count::__release_weak(v110);
                          }
                        }
                        v113 = (std::__shared_weak_count *)v109[2];
                        if (v113)
                        {
                          v114 = (unint64_t *)&v113->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
                      }
                    }
                    v116 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
                    if (*((_QWORD *)&v160 + 1))
                    {
                      v117 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
                      do
                        v118 = __ldaxr(v117);
                      while (__stlxr(v118 - 1, v117));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                        std::__shared_weak_count::__release_weak(v116);
                      }
                    }
                    v119 = (std::__shared_weak_count *)v159.__r_.__value_.__r.__words[2];
                    if (v159.__r_.__value_.__r.__words[2])
                    {
                      v120 = (unint64_t *)(v159.__r_.__value_.__r.__words[2] + 8);
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
LABEL_181:
                    if (v29)
                    {
                      v122 = (const char *)__dst;
                      if (v136 < 0)
                        v122 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)&__p, "%s", v122);
                      sub_20E863570((uint64_t)&__p);
                    }
                    sub_20E863570((uint64_t)&__p);
                    v123 = v134;
                    if (v134)
                    {
                      v124 = (unint64_t *)&v134->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                    if (SHIBYTE(v136) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)&v137 = *MEMORY[0x24BEDB7F0];
                    v126 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)&v137 + *(_QWORD *)(v137 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v138 = v126;
                    *(_QWORD *)&v139 = MEMORY[0x24BEDB848] + 16;
                    if (v145 < 0)
                      operator delete(v144);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return MEMORY[0x212BC6290](&v148);
                  }
                }
                memcpy(v73, v47, v72);
                goto LABEL_121;
              }
            }
            memmove(p_size, v54, v55);
            goto LABEL_92;
          }
        }
        memmove(v42, v44, v41);
        goto LABEL_71;
      }
LABEL_61:
      v43 = v146;
      if (v146 < v143)
      {
        v146 = v143;
        v43 = v143;
      }
      v44 = v142;
      v41 = v43 - (_QWORD)v142;
      if (v43 - (unint64_t)v142 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_116;
      goto LABEL_64;
    }
  }
  return result;
}

void sub_20F88640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 168) && *(char *)(v31 - 169) < 0)
    operator delete(*(void **)(v31 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a30 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8865B4(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  float64x2_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  float64x2_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t *p_shared_weak_owners;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v63;
  uint64_t v64;
  uint64_t j;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  int v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  int v105;
  unint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  double v119;
  __int128 v120;
  __int128 v121;
  int v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  double v134;
  _BYTE v135[39];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v120 = 0u;
  v121 = 0u;
  v122 = 733223008;
  kdebug_trace();
  v9 = *(_QWORD **)(a1 + 7952);
  if (!v9)
    return kdebug_trace();
  v10 = (uint64_t *)v9[4];
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    v13 = *v9;
    v15 = (_QWORD *)(*v9 + 56);
    v14 = (uint64_t *)*v15;
    if (*v15)
    {
      v107 = *(_DWORD *)(v13 + 1648);
LABEL_6:
      v16 = v15;
      do
      {
        v17 = v14[4];
        if (v17 < a3)
        {
          ++v14;
        }
        else if (v17 == a3)
        {
          if (*((_DWORD *)v14 + 10) < a4)
            ++v14;
          else
            v16 = v14;
        }
        else
        {
          v16 = v14;
        }
        v14 = (uint64_t *)*v14;
      }
      while (v14);
      if (v16 == v15)
        goto LABEL_111;
      v18 = v16[4];
      if (a3 < v18 || a3 == v18 && *((_DWORD *)v16 + 10) > a4)
        goto LABEL_111;
      if (!*(_BYTE *)(v11 + 128))
        goto LABEL_111;
      v19 = 0;
      v20 = *(_QWORD *)(v11 + 64);
      v8.f64[0] = *(float64_t *)(v11 + 72);
      v21 = *(double *)(v11 + 80);
      v22 = *(_DWORD *)(v11 + 120);
      LODWORD(v109) = 0;
      HIDWORD(v109) = v22;
      v23 = vmulq_n_f64((float64x2_t)vdupq_lane_s64(v20, 0), *(double *)&v20);
      v24 = *(_OWORD *)(v11 + 16);
      v110 = *(_OWORD *)v11;
      v111 = v24;
      v113 = 0uLL;
      v114 = *(unint64_t *)&v23.f64[1];
      v115 = 0uLL;
      v112 = *(unint64_t *)&v23.f64[0];
      v116 = *(_OWORD *)&vmulq_f64(v8, v8);
      v25 = *(_OWORD *)(v11 + 88);
      v118 = *(_QWORD *)(v11 + 104);
      v117 = v25;
      v119 = v21;
      v26 = *(unsigned int *)(v11 + 120);
      _X10 = *v10;
      __asm { PRFM            #4, [X10] }
      v31 = v10[3];
      for (i = (((0x9DDFEA08EB382D69 * v26 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v26
                                                                        + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
            ;
            i = v19 + v34)
      {
        v34 = i & v31;
        v35 = *(_QWORD *)(_X10 + v34);
        v33 = 0x101010101010101
            * (((105 * v26 - 27) ^ ((0x9DDFEA08EB382D69 * v26 + 0x376ADF16980614E5) >> 32)) & 0x7F);
        v36 = ((v35 ^ v33) - 0x101010101010101) & ~(v35 ^ v33) & 0x8080808080808080;
        if (v36)
          break;
LABEL_27:
        if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
          goto LABEL_41;
        v19 += 8;
      }
      while (1)
      {
        v37 = v10[1] + 32 * ((v34 + (__clz(__rbit64(v36)) >> 3)) & v31);
        if (!*(_QWORD *)v37 && *(_DWORD *)(v37 + 8) == (_DWORD)v26)
          break;
        v36 &= v36 - 1;
        if (!v36)
          goto LABEL_27;
      }
      if (_X10)
      {
        v39 = *(uint64_t **)(v37 + 16);
        *(_QWORD *)v135 = a3;
        *(_QWORD *)&v135[8] = a4;
        *(_DWORD *)&v135[16] = v107;
        v123 = *(_OWORD *)v135;
        *(_QWORD *)&v124 = *(_QWORD *)&v135[16];
        *((_QWORD *)&v124 + 1) = v109;
        v125 = v110;
        v126 = v111;
        v129 = v114;
        v130 = v115;
        v131 = v116;
        v8.f64[1] = *((float64_t *)&v112 + 1);
        v127 = v112;
        v128 = v113;
        v133 = v118;
        v132 = v117;
        v134 = v21;
        v40 = v39[36];
        v41 = v39[37];
        if (v41 != v40)
        {
          v42 = 0xCF3CF3CF3CF3CF3DLL * ((v41 - v40) >> 3);
          while (1)
          {
            v43 = v42 >> 1;
            v44 = v40 + 168 * (v42 >> 1);
            v45 = *(_DWORD *)(v44 + 16);
            _CF = v45 >= v124;
            if (v45 != (_DWORD)v124)
              goto LABEL_38;
            if (*(_QWORD *)v44 >= (unint64_t)v123)
              break;
LABEL_32:
            v40 = v44 + 168;
            v43 = v42 + ~v43;
LABEL_33:
            v42 = v43;
            if (!v43)
              goto LABEL_61;
          }
          if (*(_QWORD *)v44 != (_QWORD)v123)
            goto LABEL_33;
          _CF = *(_DWORD *)(v44 + 8) >= DWORD2(v123);
LABEL_38:
          if (_CF)
            goto LABEL_33;
          goto LABEL_32;
        }
LABEL_61:
        if (v40 == v41
          || *(_DWORD *)(v40 + 16) != v107
          || *(_QWORD *)v40 != a3
          || (v70 = v39[37], *(_DWORD *)(v40 + 8) != (_DWORD)a4))
        {
          v70 = sub_20FBCE384(v39 + 36, (char *)v40, &v123);
          v41 = v39[37];
        }
        if (v41 != v70)
          sub_20FBCDBF8(v39, (uint64_t)v135, (uint64_t)&v109);
        goto LABEL_107;
      }
LABEL_41:
      v47 = (std::__shared_weak_count *)operator new(0x158uLL);
      v48 = v47;
      v47->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      v47->__shared_weak_owners_ = 0;
      v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA049B8;
      LOBYTE(v47[2].__shared_weak_owners_) = 0;
      LOBYTE(v47[12].__shared_weak_owners_) = 0;
      v47[1].__shared_weak_owners_ = 0;
      v47[2].__vftable = 0;
      LODWORD(v47[2].__shared_owners_) = 0;
      v47[13].__shared_owners_ = 0;
      v47[13].__shared_weak_owners_ = 0;
      v47[13].__vftable = 0;
      LODWORD(v47[14].__vftable) = 0;
      *(_QWORD *)&v108 = v47 + 1;
      *((_QWORD *)&v108 + 1) = v47;
      do
        v50 = __ldxr(p_shared_owners);
      while (__stxr(v50 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v52 = __ldxr(p_shared_weak_owners);
      while (__stxr(v52 + 1, p_shared_weak_owners));
      v47[1].__vftable = (std::__shared_weak_count_vtbl *)&v47[1];
      v47[1].__shared_owners_ = (uint64_t)v47;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v48);
      }
      v54 = *(_DWORD *)(v11 + 120);
      v55 = *(_QWORD *)(v11 + 112);
      *(_QWORD *)(v108 + 24) = v55;
      *(_DWORD *)(v108 + 32) = v54;
      v56 = v55;
      v57 = *(_QWORD *)(v108 + 32);
      *(_QWORD *)&v123 = v56;
      *((_QWORD *)&v123 + 1) = v57;
      v124 = v108;
      if (*((_QWORD *)&v108 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = 0;
      _X11 = *v10;
      __asm { PRFM            #4, [X11] }
      v63 = (0x9DDFEA08EB382D69 * v57 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                * v57
                                                                                + 0x376ADF16980614E5) >> 32);
      v64 = v10[3];
      for (j = (v63 >> 7) ^ 0x13701D; ; j = v60 + v66)
      {
        v66 = j & v64;
        v67 = *(_QWORD *)(_X11 + v66);
        v68 = ((v67 ^ (0x101010101010101 * (v63 & 0x7F))) - 0x101010101010101) & ~(v67 ^ (0x101010101010101
                                                                                            * (v63 & 0x7F))) & 0x8080808080808080;
        if (v68)
          break;
LABEL_59:
        if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0)
        {
          v73 = sub_20F346A98(v10, v63);
          v74 = (_OWORD *)(v10[1] + 32 * v73);
          *v74 = v123;
          v74[1] = v108;
          v37 = v10[1] + 32 * v73;
          goto LABEL_74;
        }
        v60 += 8;
      }
      while (1)
      {
        v37 = v10[1] + 32 * ((v66 + (__clz(__rbit64(v68)) >> 3)) & v64);
        if (*(_QWORD *)v37 == v56 && *(_DWORD *)(v37 + 8) == (_DWORD)v57)
          break;
        v68 &= v68 - 1;
        if (!v68)
          goto LABEL_59;
      }
      if (*((_QWORD *)&v108 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 16))(*((_QWORD *)&v108 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v108 + 1));
        }
      }
LABEL_74:
      v75 = *(uint64_t **)(v37 + 16);
      *(_QWORD *)v135 = a3;
      *(_QWORD *)&v135[8] = a4;
      *(_DWORD *)&v135[16] = v107;
      v123 = *(_OWORD *)v135;
      *(_QWORD *)&v124 = *(_QWORD *)&v135[16];
      *((_QWORD *)&v124 + 1) = v109;
      v125 = v110;
      v126 = v111;
      v129 = v114;
      v130 = v115;
      v131 = v116;
      v127 = v112;
      v128 = v113;
      v133 = v118;
      v132 = v117;
      v134 = v119;
      v76 = v75[36];
      v77 = v75[37];
      if (v77 != v76)
      {
        v78 = 0xCF3CF3CF3CF3CF3DLL * ((v77 - v76) >> 3);
        while (1)
        {
          v79 = v78 >> 1;
          v80 = v76 + 168 * (v78 >> 1);
          v81 = *(_DWORD *)(v80 + 16);
          v82 = v81 >= v124;
          if (v81 != (_DWORD)v124)
            goto LABEL_82;
          if (*(_QWORD *)v80 >= (unint64_t)v123)
            break;
LABEL_76:
          v76 = v80 + 168;
          v79 = v78 + ~v79;
LABEL_77:
          v78 = v79;
          if (!v79)
            goto LABEL_85;
        }
        if (*(_QWORD *)v80 != (_QWORD)v123)
          goto LABEL_77;
        v82 = *(_DWORD *)(v80 + 8) >= DWORD2(v123);
LABEL_82:
        if (v82)
          goto LABEL_77;
        goto LABEL_76;
      }
LABEL_85:
      if (v76 == v77
        || *(_DWORD *)(v76 + 16) != v107
        || *(_QWORD *)v76 != a3
        || (v83 = v75[37], *(_DWORD *)(v76 + 8) != (_DWORD)a4))
      {
        v83 = sub_20FBCE384(v75 + 36, (char *)v76, &v123);
        v77 = v75[37];
      }
      if (v77 != v83)
        sub_20FBCDBF8(v75, (uint64_t)v135, (uint64_t)&v109);
      v84 = *(_QWORD *)(v37 + 16);
      if (*(_BYTE *)(v84 + 280))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3109, (uint64_t)"!plane_track->second->hasStructure()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v84 = *(_QWORD *)(v37 + 16);
        v85 = *(unsigned __int8 *)(v84 + 280);
        v86 = 0uLL;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        *(_QWORD *)&v126 = 0;
        memset(v135, 0, sizeof(v135));
        if (v85)
        {
          v87 = v125;
          *(_OWORD *)(v84 + 64) = 0uLL;
          *(_OWORD *)(v84 + 80) = v87;
          v88 = *(_OWORD *)&v135[23];
          *(_OWORD *)(v84 + 120) = *(_OWORD *)&v135[7];
          *(_OWORD *)(v84 + 48) = 0uLL;
          *(_QWORD *)(v84 + 96) = v126;
          *(_OWORD *)(v84 + 136) = v88;
          *(_OWORD *)(v84 + 152) = 0uLL;
          *(_OWORD *)(v84 + 168) = 0uLL;
          *(_OWORD *)(v84 + 184) = 0uLL;
          *(_OWORD *)(v84 + 200) = 0uLL;
          *(_OWORD *)(v84 + 216) = 0uLL;
          *(_OWORD *)(v84 + 232) = 0uLL;
          *(_OWORD *)(v84 + 248) = 0uLL;
          *(_OWORD *)(v84 + 264) = 0uLL;
          goto LABEL_98;
        }
      }
      else
      {
        v86 = 0uLL;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        *(_QWORD *)&v126 = 0;
        memset(v135, 0, sizeof(v135));
      }
      v89 = v125;
      *(_OWORD *)(v84 + 64) = v86;
      *(_OWORD *)(v84 + 80) = v89;
      v90 = *(_OWORD *)&v135[23];
      *(_OWORD *)(v84 + 120) = *(_OWORD *)&v135[7];
      *(_OWORD *)(v84 + 48) = v86;
      *(_QWORD *)(v84 + 96) = v126;
      *(_OWORD *)(v84 + 136) = v90;
      *(_OWORD *)(v84 + 152) = v86;
      *(_OWORD *)(v84 + 168) = v86;
      *(_OWORD *)(v84 + 184) = v86;
      *(_QWORD *)(v84 + 200) = 0;
      *(_QWORD *)(v84 + 40) = &off_24CA04A08;
      *(_QWORD *)(v84 + 272) = 0;
      *(_OWORD *)(v84 + 240) = v86;
      *(_OWORD *)(v84 + 256) = v86;
      *(_OWORD *)(v84 + 208) = v86;
      *(_OWORD *)(v84 + 224) = v86;
      *(_BYTE *)(v84 + 280) = 1;
LABEL_98:
      *(_QWORD *)(v84 + 104) = 0;
      *(_BYTE *)(v84 + 112) = 1;
      v91 = *(_QWORD *)(v37 + 16);
      if (*(_BYTE *)(v91 + 280))
        v92 = v91 + 40;
      else
        v92 = 0;
      v123 = v110;
      v124 = v111;
      if (((*(uint64_t (**)(uint64_t, __int128 *, __int128 *, unint64_t, uint64_t, __int128 *, double))(*(_QWORD *)v92 + 32))(v92, &v123, &v117, a3, a4, &v112, v119) & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3114, (uint64_t)"ret", 3, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (*((_QWORD *)&v108 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 16))(*((_QWORD *)&v108 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v108 + 1));
          if (*(_BYTE *)(*(_QWORD *)(v37 + 16) + 280))
            goto LABEL_111;
LABEL_108:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3118, (uint64_t)"plane_track->second->getStructure()", 35, (uint64_t)"The track does not have a structure!", 36, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
LABEL_111:
          while (1)
          {
            v11 += 192;
            if (v11 == v12)
              goto LABEL_112;
            v14 = (uint64_t *)*v15;
            if (*v15)
              goto LABEL_6;
          }
        }
      }
LABEL_107:
      if (*(_BYTE *)(*(_QWORD *)(v37 + 16) + 280))
        goto LABEL_111;
      goto LABEL_108;
    }
  }
LABEL_112:
  v95 = (char *)*v10;
  v96 = v10[1];
  v97 = *(char *)*v10;
  if (v97 <= -2)
  {
    do
    {
      v98 = (__clz(__rbit64(((*(_QWORD *)v95 >> 7) & ~*(_QWORD *)v95 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v95 += v98;
      v96 += 32 * v98;
      v97 = *v95;
    }
    while (v97 < -1);
  }
  if (v97 != 255)
  {
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v96 + 16) + 296) == *(_QWORD *)(*(_QWORD *)(v96 + 16) + 288))
      {
        v104 = v95 + 1;
        v105 = v95[1];
        v102 = v96 + 32;
        if (v105 <= -2)
        {
          do
          {
            v106 = (__clz(__rbit64(((*(_QWORD *)v104 >> 7) & ~*(_QWORD *)v104 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v104 += v106;
            v102 += 32 * v106;
            v105 = *v104;
          }
          while (v105 < -1);
        }
        if (v105 == 255)
          v101 = 0;
        else
          v101 = v104;
        sub_20F29C91C(v10, v95, v96);
      }
      else
      {
        LOBYTE(v100) = v95[1];
        v101 = v95 + 1;
        v102 = v96 + 32;
        if ((char)v100 <= -2)
        {
          do
          {
            v103 = (__clz(__rbit64(((*(_QWORD *)v101 >> 7) & ~*(_QWORD *)v101 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v101 += v103;
            v102 += 32 * v103;
            v100 = *v101;
          }
          while (v100 < -1);
        }
        if (v100 == 255)
          return kdebug_trace();
      }
      v95 = v101;
      v96 = v102;
    }
    while (v101);
  }
  return kdebug_trace();
}

void sub_20F8870E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20F28AC44((uint64_t)&a47);
  sub_20E86665C((uint64_t)&a21);
  sub_20E8E69C4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F887154(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;

  v5 = (_QWORD *)((char *)a2 + 1);
  if (*((char *)a2 + 1) <= -2)
  {
    do
      v5 = (_QWORD *)((char *)v5 + ((__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
    while (*(char *)v5 < -1);
  }
  v6 = *(std::__shared_weak_count **)(a3 + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = a1[3];
  --a1[2];
  v10 = *a1;
  v11 = (char *)a2 - *a1;
  v12 = *(_QWORD *)(*a1 + ((unint64_t)(v11 - 8) & v9));
  v13 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  v14 = v12 & (~v12 << 6) & 0x8080808080808080;
  if (v14)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (v15)
  {
    v19 = 0;
    v16 = -2;
  }
  else
  {
    v17 = (__clz(v14) >> 3) + (__clz(__rbit64(v13)) >> 3);
    v18 = v17 >= 8;
    v19 = v17 < 8;
    if (v18)
      v16 = -2;
    else
      v16 = 0x80;
  }
  v11[v10] = v16;
  *(_BYTE *)(v10 + ((unint64_t)(v11 - 7) & v9) + (v9 & 7)) = v16;
  a1[4] += v19;
}

BOOL sub_20F88729C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 result;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64x2_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  size_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint8x8_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unint64_t *p_dst;
  int v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  int v104;
  int64x2_t *v105;
  int64x2_t *v106;
  int64x2_t *v107;
  int v108;
  int64x2_t *v109;
  int64x2_t *v110;
  int64x2_t *v111;
  int64x2_t *v112;
  int v113;
  int64x2_t *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int v117;
  int v118;
  int v119;
  int64x2_t *v120;
  int64x2_t *v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t *v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t *v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t *v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t *v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t *v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t *v151;
  int64x2_t v152;
  int64x2_t *v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t *v185;
  int64x2_t *v186;
  int64x2_t *v187;
  int64x2_t *v188;
  int64x2_t *v189;
  int64x2_t *v190;
  int64x2_t *v191;
  int64x2_t *v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  int64x2_t v198;
  int64x2_t v199;
  unint64_t __dst;
  unsigned int v201;
  _BYTE *v202;
  unsigned int v203;
  uint64_t v204;
  size_t v205;
  unint64_t v206;
  uint64_t v207;
  _BYTE v208[56];
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  _BYTE *v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t *v216;
  unsigned int v217;
  _BYTE v218[15];
  _BYTE *v219;
  int v220;
  uint64_t v221;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v221 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v5 + 2276) != 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3967, (uint64_t)"state_ == State::ReadyForUpdate", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = *(_QWORD *)(v6 + 2488);
  v8 = *(_QWORD *)(v6 + 2480);
  v9 = v7 - v8;
  if (v7 == v8)
    return 0;
  v10 = 0;
  v11 = v9 >> 2;
  if (v11 <= 1)
    v11 = 1;
  while (*(_DWORD *)(v8 + 4 * v10) != v4)
  {
    if (v11 == ++v10)
      return 0;
  }
  if ((_DWORD)v10 == -1)
    return 0;
  bzero(v208, 0x708uLL);
  v13 = *(_DWORD *)(v6 + 8168);
  if (*(_DWORD *)(v6 + 8176) == 1)
  {
    if (v13 >= 0xF)
    {
      v14 = *(_DWORD *)(v6 + 8172);
      if (v14 >= 0xF)
        goto LABEL_18;
    }
    return 0;
  }
  if (v13 < 6)
    return 0;
  v14 = *(_DWORD *)(v6 + 8172);
  if (v14 < 6)
    return 0;
LABEL_18:
  v194 = v2;
  v195 = v6;
  v210 = 0xF0000000FLL;
  v211 = 15;
  v212 = v208;
  v213 = 0;
  if (*(_BYTE *)(v6 + 11632) && *(_DWORD *)(v6 + 11624) == 30)
  {
    v15 = (8 * v14 * v13 + 31) & 0xFFFFFFFE0;
    v205 = v15 >> 3;
    v16 = operator new(v15, (std::align_val_t)0x20uLL);
    v17 = (unint64_t)v16;
    v204 = (uint64_t)v16;
    if (v14 * v13)
      memcpy(v16, *(const void **)(v6 + 8152), 8 * v14 * v13);
    v206 = __PAIR64__(v14, v13);
    v207 = *(_QWORD *)(v6 + 8176);
    v18 = *(_QWORD *)(v6 + 11608);
    v19 = *(_QWORD *)(v6 + 15208);
    v20 = *(_QWORD *)(v6 + 15216) - v19;
    if (v20 >> 3 > 0x626)
    {
      if (v20 != 12600)
        *(_QWORD *)(v6 + 15216) = v19 + 12600;
    }
    else
    {
      *(_QWORD *)(v6 + 15216) = v19;
      sub_20E93D8FC(v6 + 15208, 0x627uLL);
      v19 = *(_QWORD *)(v6 + 15208);
    }
    v22 = 0;
    v23 = (_QWORD *)(v18 + 120);
    v24 = (_QWORD *)(v19 + 3600);
    v25 = (_QWORD *)(v19 + 1800);
    v26 = (_QWORD *)v19;
    v27 = (_QWORD *)v17;
    do
    {
      while (1)
      {
        v28 = v22 - 12;
        v29 = v22 - 12 >= 9 && v22 >= 6;
        v30 = *(v23 - 15);
        if (v29)
          break;
        *v27 = v30;
        v27[1] = *(v23 - 14);
        v27[2] = *(v23 - 13);
        v27[3] = *(v23 - 12);
        v27[4] = *(v23 - 11);
        v27[5] = *(v23 - 10);
        *v26 = *(v23 - 9);
        v26[1] = *(v23 - 8);
        v26[2] = *(v23 - 7);
        v26[3] = *(v23 - 6);
        v26[4] = *(v23 - 5);
        v26[5] = *(v23 - 4);
        v27[6] = *(v23 - 3);
        v27[7] = *(v23 - 2);
        v27[8] = *(v23 - 1);
        v27[9] = *v23;
        v27[10] = v23[1];
        v27[11] = v23[2];
        v27[12] = v23[3];
        v27[13] = v23[4];
        v27[14] = v23[5];
        v27 += 15;
        v26[6] = v23[6];
        v26[7] = v23[7];
        v26[8] = v23[8];
        v26[9] = v23[9];
        v26[10] = v23[10];
        v26[11] = v23[11];
        v26[12] = v23[12];
        v26[13] = v23[13];
        v26[14] = v23[14];
        v26 += 15;
        v23 += 30;
        ++v22;
        if (v28 == 17)
          goto LABEL_35;
      }
      *v25 = v30;
      v25[1] = *(v23 - 14);
      v25[2] = *(v23 - 13);
      v25[3] = *(v23 - 12);
      v25[4] = *(v23 - 11);
      v25[5] = *(v23 - 10);
      *v24 = *(v23 - 9);
      v24[1] = *(v23 - 8);
      v24[2] = *(v23 - 7);
      v24[3] = *(v23 - 6);
      v24[4] = *(v23 - 5);
      v24[5] = *(v23 - 4);
      v25[6] = *(v23 - 3);
      v25[7] = *(v23 - 2);
      v25[8] = *(v23 - 1);
      v25[9] = *v23;
      v25[10] = v23[1];
      v25[11] = v23[2];
      v25[12] = v23[3];
      v25[13] = v23[4];
      v25[14] = v23[5];
      v25 += 15;
      v24[6] = v23[6];
      v24[7] = v23[7];
      v24[8] = v23[8];
      v24[9] = v23[9];
      v24[10] = v23[10];
      v24[11] = v23[11];
      v24[12] = v23[12];
      v24[13] = v23[13];
      v24[14] = v23[14];
      v24 += 15;
      v23 += 30;
      ++v22;
    }
    while (v28 != 17);
LABEL_35:
    if (sub_21020B160((char *)(v19 + 7200), (char *)(v19 + 3600), 0xFu))
    {
      bzero((void *)(v19 + 9000), 0x708uLL);
      __dst = 0x100000001;
      sub_20E85E250(&__dst, CblasRowMajor, CblasNoTrans, CblasNoTrans, 15, 15, 15, (const double *)(v19 + 7200), 1.0, 1.0, 15, (double *)(v19 + 1800), 15, (double *)(v19 + 9000), 15);
      v31 = v19 + 10800;
      bzero((void *)(v19 + 10800), 0x708uLL);
      __dst = 0x100000001;
      sub_20E85E250(&__dst, CblasRowMajor, CblasNoTrans, CblasNoTrans, 15, 15, 15, (const double *)v19, 1.0, 1.0, 15, (double *)(v19 + 9000), 15, (double *)(v19 + 10800), 15);
      if (v17 >= v19 + 12600 || v31 >= v17 + 1800)
      {
        v33 = 0;
        v32 = 224;
        do
        {
          v34 = (float64x2_t *)(v17 + v33);
          v35 = vsubq_f64(*(float64x2_t *)(v17 + v33 + 16), *(float64x2_t *)(v19 + v33 + 10816));
          *v34 = vsubq_f64(*(float64x2_t *)(v17 + v33), *(float64x2_t *)(v19 + v33 + 10800));
          v34[1] = v35;
          v33 += 32;
        }
        while (v33 != 1792);
      }
      else
      {
        v32 = 0;
      }
      v36 = 8 * v32;
      do
      {
        *(double *)(v17 + v36) = *(double *)(v17 + v36) - *(double *)(v31 + v36);
        v36 += 8;
      }
      while (v36 != 1800);
    }
    sub_20FC8C440((uint64_t)&v204, (unsigned int *)&v210);
    if (v204)
      MEMORY[0x212BC6368](v204, 0x1000C8000313F17);
  }
  else
  {
    sub_20FC8C440(v6 + 8152, (unsigned int *)&v210);
  }
  v37 = v210;
  v38 = v210;
  if (v210 >= 8)
  {
    v99 = 0;
    v196 = v210 & 0xFFFFFFF8;
    v197 = v210 & 7;
    v100 = 8;
    do
    {
      v101 = 0;
      v102 = &v212[-8 * v213];
      v103 = v211;
      v104 = v213 + v99 + v211 * v99;
      v105 = (int64x2_t *)&v102[8 * v104 + 8 * v211];
      v106 = (int64x2_t *)&v102[16 * v211 + 8 * v104];
      v107 = (int64x2_t *)&v102[24 * v211 + 8 * v104];
      v108 = v104 + 4 * v211;
      v109 = (int64x2_t *)&v102[8 * v108];
      v110 = (int64x2_t *)((char *)v109 + 8 * v211);
      v111 = &v109[v211];
      v112 = (int64x2_t *)((char *)v109 + 24 * v211);
      v113 = v108 + 4;
      v114 = (int64x2_t *)&v102[8 * (v108 + 4)];
      v115 = (int64x2_t *)&v102[8 * v108 + 32 + 8 * v211];
      v116 = (int64x2_t *)&v102[16 * v211 + 32 + 8 * v108];
      v117 = v113 + 3 * v211;
      v118 = 8 * v211;
      v119 = v104;
      v120 = (int64x2_t *)&v102[8 * v117];
      do
      {
        if (v101)
        {
          v121 = (int64x2_t *)&v102[8 * v119];
          v122 = v121[2];
          v123 = v121[3];
          v124 = *v121;
          v125 = v121[1];
          v126 = (int64x2_t *)((char *)v121 + 8 * v103);
          v128 = v126[2];
          v127 = v126[3];
          v129 = *v126;
          v130 = v126[1];
          v131 = &v121[v103];
          v133 = v131[2];
          v132 = v131[3];
          v134 = *v131;
          v135 = v131[1];
          v136 = (int64x2_t *)((char *)v121 + 24 * v103);
          v137 = v136[2];
          v138 = v136[3];
          v139 = *v136;
          v140 = v136[1];
          v141 = &v121[2 * v103];
          v142 = v141[2];
          v143 = v141[3];
          v144 = *v141;
          v145 = v141[1];
          v146 = (int64x2_t *)((char *)v121 + 40 * v103);
          v148 = v146[2];
          v147 = v146[3];
          v149 = *v146;
          v150 = v146[1];
          v151 = &v121[3 * v103];
          v152 = v151[1];
          v153 = (int64x2_t *)((char *)v121 + 56 * v103);
          v198 = vzip1q_s64(v134, v139);
          v199 = vzip1q_s64(v124, v129);
          v154 = vzip1q_s64(v144, v149);
          v155 = vzip1q_s64(*v151, *v153);
          v156.i64[0] = vdupq_laneq_s64(v134, 1).u64[0];
          v156.i64[1] = v139.i64[1];
          v157.i64[0] = vdupq_laneq_s64(v144, 1).u64[0];
          v157.i64[1] = v149.i64[1];
          v21 = vzip2q_s64(v124, v129);
          v158.i64[0] = vdupq_laneq_s64(*v151, 1).u64[0];
          v158.i64[1] = v153->i64[1];
          v159 = vzip1q_s64(v125, v130);
          v160 = vzip1q_s64(v135, v140);
          v162 = v151[2];
          v161 = v151[3];
          v163 = vzip2q_s64(v125, v130);
          v165.i64[0] = vdupq_laneq_s64(v135, 1).u64[0];
          v164 = vzip1q_s64(v145, v150);
          v165.i64[1] = v140.i64[1];
          v166 = vzip1q_s64(v152, v153[1]);
          v167.i64[0] = vdupq_laneq_s64(v145, 1).u64[0];
          v167.i64[1] = v150.i64[1];
          v168.i64[0] = vdupq_laneq_s64(v152, 1).u64[0];
          v168.i64[1] = v153[1].i64[1];
          v169 = vzip1q_s64(v122, v128);
          v170 = vzip1q_s64(v133, v137);
          v171 = vzip2q_s64(v122, v128);
          v172 = vzip1q_s64(v142, v148);
          v173.i64[0] = vdupq_laneq_s64(v133, 1).u64[0];
          v173.i64[1] = v137.i64[1];
          v174.i64[0] = vdupq_laneq_s64(v142, 1).u64[0];
          v174.i64[1] = v148.i64[1];
          v175 = vzip1q_s64(v162, v153[2]);
          v176.i64[0] = vdupq_laneq_s64(v162, 1).u64[0];
          v176.i64[1] = v153[2].i64[1];
          v177 = vzip1q_s64(v132, v138);
          v178.i64[0] = vdupq_laneq_s64(v132, 1).u64[0];
          v178.i64[1] = v138.i64[1];
          v179 = vzip1q_s64(v123, v127);
          v180 = vzip2q_s64(v123, v127);
          v181 = vzip1q_s64(v143, v147);
          v182.i64[0] = vdupq_laneq_s64(v143, 1).u64[0];
          v182.i64[1] = v147.i64[1];
          v183 = vzip1q_s64(v161, v153[3]);
          v184.i64[0] = vdupq_laneq_s64(v161, 1).u64[0];
          v184.i64[1] = v153[3].i64[1];
        }
        else
        {
          v21 = *v105;
          v159 = *v106;
          v163 = *v107;
          v165 = v107[1];
          v199 = vzip1q_s64(*(int64x2_t *)&v102[8 * v104], *v105);
          v156.i64[0] = vdupq_laneq_s64(*v106, 1).u64[0];
          v156.i64[1] = v107->i64[1];
          v160 = vzip1q_s64(v106[1], v165);
          v198 = vzip1q_s64(*v106, *v107);
          v169 = *v109;
          v170 = v109[1];
          v171 = *v110;
          v173 = v110[1];
          v179 = *v111;
          v177 = v111[1];
          v180 = *v112;
          v178 = v112[1];
          v154 = vzip1q_s64(*v109, *v110);
          v155 = vzip1q_s64(*v111, *v112);
          v157 = vzip2q_s64(*v109, *v110);
          v158.i64[0] = vdupq_laneq_s64(*v111, 1).u64[0];
          v158.i64[1] = v112->i64[1];
          v164 = vzip1q_s64(v170, v173);
          v166 = vzip1q_s64(v177, v178);
          v167 = vzip2q_s64(v170, v173);
          v168.i64[0] = vdupq_laneq_s64(v177, 1).u64[0];
          v168.i64[1] = v112[1].i64[1];
          v174 = *v115;
          v181 = *v116;
          v172 = vzip1q_s64(*v114, *v115);
          v182 = *v120;
          v184 = v120[1];
          v183 = vzip1q_s64(v116[1], v184);
          v176.i64[0] = vdupq_laneq_s64(*v116, 1).u64[0];
          v175 = vzip1q_s64(*v116, *v120);
          v176.i64[1] = v120->i64[1];
        }
        v185 = (int64x2_t *)&v102[8 * (v104 + v101)];
        *v185 = v199;
        v185[1] = v198;
        v185[2] = v154;
        v185[3] = v155;
        v186 = (int64x2_t *)((char *)v185 + 8 * v103);
        *v186 = v21;
        v186[1] = v156;
        v186[2] = v157;
        v186[3] = v158;
        v187 = &v185[v103];
        *v187 = v159;
        v187[1] = v160;
        v187[2] = v164;
        v187[3] = v166;
        v188 = (int64x2_t *)((char *)v185 + 24 * v103);
        *v188 = v163;
        v188[1] = v165;
        v188[2] = v167;
        v188[3] = v168;
        v189 = &v185[2 * v103];
        *v189 = v169;
        v189[1] = v170;
        v189[2] = v172;
        v189[3] = v175;
        v190 = (int64x2_t *)((char *)v185 + 40 * v103);
        *v190 = v171;
        v190[1] = v173;
        v190[2] = v174;
        v190[3] = v176;
        v191 = &v185[3 * v103];
        *v191 = v179;
        v191[1] = v177;
        v191[2] = v181;
        v191[3] = v183;
        v192 = (int64x2_t *)((char *)v185 + 56 * v103);
        v192[2] = v182;
        v192[3] = v184;
        v119 += v118;
        v101 += 8;
        *v192 = v180;
        v192[1] = v178;
      }
      while (v100 + v101 <= v37);
      v38 = v197;
      if (v197)
      {
        v193 = &v212[-8 * v213];
        v204 = v197 | 0x800000000;
        LODWORD(v205) = v211;
        v206 = (unint64_t)&v193[8 * v213 + 8 * v196 + 8 * v211 * v99];
        LODWORD(v207) = v213 + v196 + v211 * v99;
        LODWORD(__dst) = 8;
        HIDWORD(__dst) = v197;
        v201 = v211;
        v202 = &v193[8 * v213 + 8 * v99 + 8 * v211 * v196];
        v203 = v213 + v99 + v211 * v196;
        sub_20F208E50((uint64_t)&v204, (uint64_t)&__dst);
      }
      v100 += 8;
      v99 += 8;
    }
    while (v100 <= v37);
  }
  if (v38)
  {
    v39 = v37 & 0xFFFFFFF8;
    if ((v37 & 0xFFFFFFF8) < v37)
    {
      v40 = v37 & 0xFFFFFFF8;
      do
      {
        v42 = v40 + 8;
        v43 = v37 - v40;
        if (v40 + 8 <= v37)
          v43 = 8;
        v44 = &v212[-8 * v213];
        v45 = v213 + v40 + v211 * v39;
        __dst = __PAIR64__(v38, v43);
        v201 = v211;
        v202 = &v44[8 * v45];
        v203 = v45;
        if (v39 == v40)
        {
          v214 = v43;
          v215 = v38;
          v216 = &v204;
          v217 = 0;
          *(_DWORD *)v218 = v43;
          *(_DWORD *)&v218[4] = v38;
          *(_DWORD *)&v218[8] = v211;
          v219 = &v44[8 * v45];
          v220 = v213 + v40 + v211 * v39;
          sub_20F20BBD4((unint64_t)&v214, (uint64_t)v218);
          if (v214)
          {
            v46 = v215;
            if (v215)
            {
              v47 = 0;
              v48 = 0;
              v49 = 8 * v214;
              do
              {
                memmove(&v202[8 * v203 + 8 * v201 * v48++ + -8 * v203], &v216[v47 + v217 - v217], v49);
                v47 += 8;
              }
              while (v46 != v48);
            }
          }
        }
        else
        {
          v41 = v213 + v39 + v211 * v40;
          v204 = __PAIR64__(v43, v38);
          LODWORD(v205) = v211;
          v206 = (unint64_t)&v44[8 * v41];
          LODWORD(v207) = v41;
          sub_20F208E50((uint64_t)&__dst, (uint64_t)&v204);
        }
        v40 = v42;
      }
      while (v42 < v37);
    }
  }
  v50 = *(_QWORD **)(v195 + 5176);
  if (*(_QWORD *)(v195 + 5184) - (_QWORD)v50 <= 0xEuLL)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4021, (uint64_t)"last_prior_.info_certainties().size() >= cv_types::InertialState::kDof", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v50 = *(_QWORD **)(v195 + 5176);
  }
  v51 = 0;
  *(_QWORD *)&v218[7] = *(_QWORD *)((char *)v50 + 7);
  *(_QWORD *)v218 = *v50;
  v52 = *(uint8x8_t *)v218;
  v21.i32[0] = *(_DWORD *)&v218[8];
  v21.i64[0] = vmovl_u8(*(uint8x8_t *)v21.i8).u64[0];
  v53 = v218[12];
  v54 = v218[13];
  v55 = v218[14];
  v56 = &v209;
  v57 = &v204;
  do
  {
    if (v218[v51])
    {
      if (v218[0])
        *v57++ = *(v56 - 7);
      if (v218[1])
        *v57++ = *(v56 - 6);
      if (v218[2])
        *v57++ = *(v56 - 5);
      if (v218[3])
        *v57++ = *(v56 - 4);
      if (v218[4])
        *v57++ = *(v56 - 3);
      if (v218[5])
        *v57++ = *(v56 - 2);
      if (v218[6])
        *v57++ = *(v56 - 1);
      if (v218[7])
        *v57++ = *v56;
      if (v218[8])
        *v57++ = v56[1];
      if (v218[9])
        *v57++ = v56[2];
      if (v218[10])
        *v57++ = v56[3];
      if (v218[11])
        *v57++ = v56[4];
      if (v218[12])
        *v57++ = v56[5];
      if (v218[13])
        *v57++ = v56[6];
      if (v218[14])
        *v57++ = v56[7];
    }
    ++v51;
    v56 += 15;
  }
  while (v51 != 15);
  result = sub_21020B160((char *)&__dst, (char *)&v204, vaddvq_s32((int32x4_t)vaddw_u16(vpaddlq_u16(vmovl_u8(v52)), *(uint16x4_t *)v21.i8)) + v53 + v54 + v55);
  if (result)
  {
    v58 = 0;
    v59 = v218[0];
    v60 = v218[1];
    v61 = v218[2];
    v62 = v218[3];
    v63 = v218[4];
    v64 = v218[5];
    v65 = v218[6];
    v66 = v218[7];
    v67 = v218[8];
    v68 = v218[9];
    v69 = v218[10];
    v70 = v218[11];
    v71 = v218[12];
    v72 = v218[13];
    v73 = v194 + 56;
    p_dst = &__dst;
    v75 = v218[14];
    while (1)
    {
      while (!v218[v58])
      {
        v76 = (_OWORD *)(v73 - 56);
        *(_QWORD *)(v73 + 56) = 0;
        *(_OWORD *)(v73 + 24) = 0uLL;
        *(_OWORD *)(v73 + 40) = 0uLL;
        v76[3] = 0uLL;
        *(_OWORD *)(v73 + 8) = 0uLL;
        v76[1] = 0uLL;
        v76[2] = 0uLL;
        *v76 = 0uLL;
        ++v58;
        v73 += 120;
        if (v58 == 15)
          return result;
      }
      v77 = 0;
      if (v59)
        break;
      *(_QWORD *)(v73 - 56) = 0;
      if (v60)
        goto LABEL_101;
LABEL_102:
      *(_QWORD *)(v73 - 48) = v77;
      v80 = 0;
      if (v61)
      {
        v81 = *p_dst++;
        *(_QWORD *)(v73 - 40) = v81;
        if (!v62)
          goto LABEL_105;
LABEL_104:
        v82 = *p_dst++;
        v80 = v82;
        goto LABEL_105;
      }
      *(_QWORD *)(v73 - 40) = 0;
      if (v62)
        goto LABEL_104;
LABEL_105:
      *(_QWORD *)(v73 - 32) = v80;
      v83 = 0;
      if (v63)
      {
        v84 = *p_dst++;
        *(_QWORD *)(v73 - 24) = v84;
        if (!v64)
          goto LABEL_108;
LABEL_107:
        v85 = *p_dst++;
        v83 = v85;
        goto LABEL_108;
      }
      *(_QWORD *)(v73 - 24) = 0;
      if (v64)
        goto LABEL_107;
LABEL_108:
      *(_QWORD *)(v73 - 16) = v83;
      v86 = 0;
      if (v65)
      {
        v87 = *p_dst++;
        *(_QWORD *)(v73 - 8) = v87;
        if (!v66)
          goto LABEL_111;
LABEL_110:
        v88 = *p_dst++;
        v86 = v88;
        goto LABEL_111;
      }
      *(_QWORD *)(v73 - 8) = 0;
      if (v66)
        goto LABEL_110;
LABEL_111:
      *(_QWORD *)v73 = v86;
      v89 = 0;
      if (v67)
      {
        v90 = *p_dst++;
        *(_QWORD *)(v73 + 8) = v90;
        if (!v68)
          goto LABEL_114;
LABEL_113:
        v91 = *p_dst++;
        v89 = v91;
        goto LABEL_114;
      }
      *(_QWORD *)(v73 + 8) = 0;
      if (v68)
        goto LABEL_113;
LABEL_114:
      *(_QWORD *)(v73 + 16) = v89;
      v92 = 0;
      if (v69)
      {
        v93 = *p_dst++;
        *(_QWORD *)(v73 + 24) = v93;
        if (!v70)
          goto LABEL_117;
LABEL_116:
        v94 = *p_dst++;
        v92 = v94;
        goto LABEL_117;
      }
      *(_QWORD *)(v73 + 24) = 0;
      if (v70)
        goto LABEL_116;
LABEL_117:
      *(_QWORD *)(v73 + 32) = v92;
      v95 = 0;
      if (!v71)
      {
        *(_QWORD *)(v73 + 40) = 0;
        if (!v72)
          goto LABEL_120;
LABEL_119:
        v97 = *p_dst++;
        v95 = v97;
        goto LABEL_120;
      }
      v96 = *p_dst++;
      *(_QWORD *)(v73 + 40) = v96;
      if (v72)
        goto LABEL_119;
LABEL_120:
      *(_QWORD *)(v73 + 48) = v95;
      if (v75)
      {
        v98 = *p_dst++;
        *(_QWORD *)(v73 + 56) = v98;
        ++v58;
        v73 += 120;
        if (v58 == 15)
          return result;
      }
      else
      {
        *(_QWORD *)(v73 + 56) = 0;
        ++v58;
        v73 += 120;
        if (v58 == 15)
          return result;
      }
    }
    v78 = *p_dst++;
    *(_QWORD *)(v73 - 56) = v78;
    if (!v60)
      goto LABEL_102;
LABEL_101:
    v79 = *p_dst++;
    v77 = v79;
    goto LABEL_102;
  }
  return result;
}

void sub_20F888130(_Unwind_Exception *a1)
{
  if (STACK[0x768])
  {
    MEMORY[0x212BC6368](STACK[0x768], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F888164(uint64_t a1, uint64_t **a2, uint64_t a3, double a4, double a5, int8x16_t _Q2)
{
  int v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  double v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  float64x2_t v22;
  int32x4_t v23;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  double v39;
  unint64_t v45;
  uint64_t v46;
  float32x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  double v55;
  float64x2_t v60;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  double v66;
  float64x2_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  unint64_t *v78;
  unint64_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  double v97;

  v7 = *(unsigned __int8 *)(a3 + 128);
  if (*(_BYTE *)(a3 + 128))
  {
    v8 = *(int8x16_t *)a3;
    v9 = *(_OWORD *)(a3 + 32);
    v10 = *(int8x16_t *)(a3 + 64);
    _D21 = *(double *)(a3 + 48);
    v97 = *(double *)(a3 + 16);
    v12 = *(double *)(a3 + 40);
    _D25 = *(double *)(a3 + 80);
    v14 = vextq_s8(v10, v10, 8uLL).u64[0];
    *(_QWORD *)&v15 = vextq_s8(v8, v8, 8uLL).u64[0];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 8);
    if (!*(_BYTE *)(a1 + 1945))
      goto LABEL_5;
  }
  else
  {
    v8.i64[0] = 0;
    v15 = 0.0;
    v97 = 0.0;
    *(_QWORD *)&v9 = 0;
    v12 = 0.0;
    _D21 = 0.0;
    v10.i64[0] = 0;
    *(double *)&v14 = 0.0;
    _D25 = 0.0;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 8);
    if (!*(_BYTE *)(a1 + 1945))
      goto LABEL_5;
  }
  if (!*(_QWORD *)(v16 + 16))
    v16 = a1 + 7968;
LABEL_5:
  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    v21 = *(uint64_t **)(v16 + 8);
    v20 = (_QWORD *)(v16 + 8);
    v19 = v21;
    if (v21)
    {
      *(_QWORD *)&v22.f64[0] = v8.i64[0];
      v22.f64[1] = v15;
      v88 = v22;
      *(_QWORD *)&v22.f64[0] = v10.i64[0];
      *(_QWORD *)&v22.f64[1] = v14;
      v87 = v22;
      *(_QWORD *)&v22.f64[0] = v9;
      v22.f64[1] = v12;
      v86 = v22;
      v84 = (float64x2_t)vdupq_lane_s64(v10.i64[0], 0);
      v85 = (float64x2_t)vdupq_lane_s64(v9, 0);
      v82 = (float64x2_t)vdupq_lane_s64(v14, 0);
      v83 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      v23 = (int32x4_t)vdupq_lane_s64(*(uint64_t *)&_D21, 0);
      _Q0 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_D25, 0);
      v80 = _Q0;
      v81 = (float64x2_t)v23;
      v95 = v9;
      v96 = v8.i64[0];
      v93 = v10.i64[0];
      v94 = _D21;
      v92 = v12;
      v90 = _D25;
      v91 = v15;
      v89 = v14;
LABEL_8:
      v25 = *v17;
      v26 = *((_DWORD *)v17 + 2);
      v27 = v20;
      do
      {
        v28 = v19[4];
        if (v28 < v25)
        {
          ++v19;
        }
        else if (v28 == v25)
        {
          if (*((_DWORD *)v19 + 10) < v26)
            ++v19;
          else
            v27 = v19;
        }
        else
        {
          v27 = v19;
        }
        v19 = (uint64_t *)*v19;
      }
      while (v19);
      if (v27 != v20)
      {
        v29 = v27[4];
        if (v25 >= v29 && (v25 != v29 || v26 >= *((_DWORD *)v27 + 10)))
        {
          v31 = v27[6];
          v30 = (std::__shared_weak_count *)v27[7];
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v33 = __ldxr(p_shared_owners);
            while (__stxr(v33 + 1, p_shared_owners));
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
              v14 = v89;
              _D25 = v90;
              v15 = v91;
              v12 = v92;
              v10.i64[0] = v93;
              _D21 = v94;
              *(_QWORD *)&v9 = v95;
              v8.i64[0] = v96;
            }
          }
          if (v31)
          {
            v36 = v31 + 40;
            v37 = *(unsigned __int8 *)(v31 + 112);
            if (*(_BYTE *)(v31 + 112))
              v38 = (_QWORD *)(v31 + 40);
            else
              v38 = 0;
            v38[1] = v17[2];
            v38[2] = v17[3];
            v38[3] = v17[4];
            if (*(_BYTE *)(a3 + 128))
            {
              _Q2.i64[0] = *(_QWORD *)(a3 + 48);
              v39 = *((double *)v38 + 3);
              _Q7 = *(float64x2_t *)(v38 + 1);
              __asm { FMLA            D0, D2, V7.D[1] }
              _Q0.f64[0] = _Q0.f64[0] + *(double *)(a3 + 80) * v39;
              _Q2.i64[0] = *(_QWORD *)(a3 + 112);
              _Q0 = vaddq_f64(_Q0, (float64x2_t)_Q2);
              v23 = (int32x4_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q7.f64[0]), *(float64x2_t *)(a3 + 32), _Q7, 1), *(float64x2_t *)(a3 + 64), v39), *(float64x2_t *)(a3 + 96));
              *(int32x4_t *)(v38 + 1) = v23;
              v38[3] = *(_QWORD *)&_Q0.f64[0];
              v37 = *(unsigned __int8 *)(v31 + 112);
            }
            *(_QWORD *)&_Q0.f64[0] = v17[5];
            v23.i64[0] = *(uint64_t *)((char *)v17 + 52);
            v45 = vzip1q_s32((int32x4_t)_Q0, v23).u64[0];
            LODWORD(_Q0.f64[1]) = *((_DWORD *)v17 + 12);
            if (v37)
              v46 = v31 + 40;
            else
              v46 = 0;
            v23.i32[2] = *((_DWORD *)v17 + 15);
            v47 = (float32x2_t)v17[8];
            v48 = vtrn2q_s32((int32x4_t)_Q0, v23);
            v48.i32[2] = v47.i32[1];
            v49 = vzip2q_s32((int32x4_t)_Q0, v23);
            v49.i32[2] = *((_DWORD *)v17 + 18);
            *(_DWORD *)(v46 + 44) = v47.i32[0];
            *(_QWORD *)(v46 + 36) = v45;
            *(_DWORD *)(v46 + 56) = v47.i32[1];
            *(_QWORD *)(v46 + 48) = v48.i64[0];
            *(_DWORD *)(v46 + 68) = v49.i32[2];
            *(_QWORD *)(v46 + 60) = v49.i64[0];
            _Q2 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v48, (int8x16_t)v48, 0xCuLL), (int8x16_t)v48, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v48, v48), (int8x16_t)v48, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL), (int8x16_t)v49, 8uLL));
            v50 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q0.f64[0], *(float32x2_t *)_Q2.i8), *(float32x2_t *)v23.i8, *(float32x2_t *)_Q2.i8, 1);
            v23 = (int32x4_t)vextq_s8(_Q2, _Q2, 8uLL);
            v51 = vmla_f32(v50, *(float32x2_t *)v23.i8, v47);
            *(_BYTE *)(v46 + 32) = v51.f32[0] > 0.0;
            if (!*(_BYTE *)(v31 + 112))
              v36 = 0;
            v52 = *((unsigned __int8 *)v17 + 76);
            *(_BYTE *)(v36 + 32) = v52;
            if (v7 && v52)
            {
              v51.i32[0] = *(_DWORD *)(v36 + 68);
              v53 = *(float32x4_t *)(v36 + 36);
              v54 = *(float32x4_t *)(v36 + 52);
              *(_QWORD *)&v55 = *(_OWORD *)&vcvtq_f64_f32(v51);
              _Q3 = vcvt_hight_f64_f32(v54);
              _Q2 = vcvtq_f64_f32(*(float32x2_t *)v54.f32);
              _Q4 = vcvt_hight_f64_f32(v53);
              _Q1 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
              v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, _Q1.f64[0]), v86, _Q1, 1), v87, _Q4.f64[0]);
              __asm { FMLA            D6, D21, V1.D[1] }
              v62 = vmlad_n_f64(_D6, _D25, _Q4.f64[0]);
              v63 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v88, _Q4, 1), v86, _Q2.f64[0]), v87, _Q2, 1);
              __asm { FMLA            D4, D25, V2.D[1] }
              v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, _Q3.f64[0]), v86, _Q3, 1), v87, v55);
              __asm { FMLA            D7, D21, V3.D[1] }
              v66 = vmlad_n_f64(_D7, _D25, v55);
              _Q3.f64[1] = v84.f64[1];
              v67 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v60, *(double *)v8.i64), v85, v63), v84, v64);
              _Q3.f64[0] = v62 * *(double *)v8.i64 + _Q4.f64[0] * *(double *)&v9 + v66 * *(double *)v10.i64;
              v68.i64[1] = *(_QWORD *)&v82.f64[1];
              v69 = (int8x16_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v60, v15), v83, v63), v82, v64);
              *(double *)v68.i64 = v62 * v15 + _Q4.f64[0] * v12 + v66 * *(double *)&v14;
              v70 = vmlaq_f64(vmulq_n_f64(v60, v97), v81, v63);
              v63.f64[1] = v80.f64[1];
              v71 = vmlaq_f64(v70, v80, v64);
              v63.f64[0] = v62 * v97 + _Q4.f64[0] * _D21 + v66 * _D25;
              v72 = (float64x2_t)vzip1q_s64((int64x2_t)_Q3, (int64x2_t)v69);
              *(float32x2_t *)&_Q4.f64[0] = vcvt_f32_f64(v72);
              v73 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v69, v68, 8uLL)), v71);
              *(float32x2_t *)&v67.f64[0] = vcvt_f32_f64(v67);
              v74 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&v67.f64[0], v72);
              *(float32x2_t *)&v72.f64[0] = vcvt_f32_f64(v71);
              *(int8x16_t *)(v36 + 36) = v74;
              *(_DWORD *)(v36 + 68) = vcvt_f32_f64(v63).u32[0];
              *(int8x16_t *)(v36 + 52) = v73;
              v75 = (int32x4_t)vextq_s8(v74, v73, 0xCuLL);
              v76 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), (int8x16_t)v75, 8uLL);
              v77 = (int32x4_t)vcvt_hight_f32_f64(*(int32x2_t *)&v72.f64[0], v63);
              _Q2 = vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL);
              v23 = (int32x4_t)vmlsq_f32(vmulq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL)), (float32x4_t)_Q2, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), (int8x16_t)v77, 8uLL));
              *(float32x2_t *)_Q2.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v67.f64[0], *(float32x2_t *)v23.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)&v67.f64[0], 1);
              _Q0 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
              *(_BYTE *)(v36 + 32) = vmla_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)&_Q0.f64[0], *(float32x2_t *)&_Q4.f64[0]).f32[0] > 0.0;
            }
          }
          if (v30)
          {
            v78 = (unint64_t *)&v30->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
              v14 = v89;
              _D25 = v90;
              v15 = v91;
              v12 = v92;
              v10.i64[0] = v93;
              _D21 = v94;
              *(_QWORD *)&v9 = v95;
              v8.i64[0] = v96;
            }
          }
        }
      }
      while (1)
      {
        v17 += 10;
        if (v17 == v18)
          break;
        v19 = (uint64_t *)*v20;
        if (*v20)
          goto LABEL_8;
      }
    }
  }
}

_QWORD *sub_20F88867C(_QWORD *result, float64x2_t *a2, float64x2_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double v11;
  float64x2_t v12;
  float32x4_t v23;
  float32x4_t v24;
  double v25;
  float64x2_t v30;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  double v52;
  float64x2_t v53;
  float32x4_t v60;
  float32x4_t v61;
  double v62;
  float64x2_t v67;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v74;
  int64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  _QWORD *v84;
  _QWORD *v85;

  v3 = *(_QWORD **)(result[994] + 8);
  v6 = (_QWORD *)*v3;
  v4 = v3 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v8 = v5[6];
      if (*(_BYTE *)(v8 + 112))
      {
        a3.f64[0] = *(float64_t *)(v8 + 64);
        _Q1 = *(float64x2_t *)(v8 + 48);
        _D4 = a2[3].f64[0];
        v11 = a2[5].f64[0];
        v12 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q1.f64[0]), a2[2], _Q1, 1), a2[4], a3.f64[0]);
        __asm { FMLA            D2, D4, V1.D[1] }
        a3.f64[0] = _D2 + v11 * a3.f64[0];
        _Q1.f64[0] = a2[7].f64[0];
        a3 = vaddq_f64(a3, _Q1);
        *(float64x2_t *)(v8 + 48) = vaddq_f64(v12, a2[6]);
        *(float64_t *)(v8 + 64) = a3.f64[0];
        if (*(_BYTE *)(v8 + 72))
        {
          a3.f64[0] = a2[1].f64[0];
          _Q3 = *(int8x16_t *)a2;
          _D1 = a2[3].f64[0];
          _Q4 = a2[2];
          _D2 = a2[5].f64[0];
          _Q5 = a2[4];
          LODWORD(v11) = *(_DWORD *)(v8 + 108);
          v23 = *(float32x4_t *)(v8 + 76);
          v24 = *(float32x4_t *)(v8 + 92);
          *(_QWORD *)&v25 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v11);
          _Q17 = vcvt_hight_f64_f32(v24);
          _Q16 = vcvtq_f64_f32(*(float32x2_t *)v24.f32);
          _Q18 = vcvt_hight_f64_f32(v23);
          _Q7 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
          v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q7.f64[0]), _Q4, _Q7, 1), _Q5, _Q18.f64[0]);
          __asm { FMLA            D20, D1, V7.D[1] }
          v32 = vmlad_n_f64(_D20, _D2, _Q18.f64[0]);
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*a2, _Q18, 1), _Q4, _Q16.f64[0]), _Q5, _Q16, 1);
          __asm { FMLA            D18, D2, V16.D[1] }
          v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v25);
          __asm { FMLA            D21, D1, V17.D[1] }
          _D21 = vmlad_n_f64(_D21, _D2, v25);
          v37 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, a2->f64[0]), v33, _Q4.f64[0]), v34, _Q5.f64[0]);
          _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(v32 * a2->f64[0], _Q18.f64[0], _Q4.f64[0]), _D21, _Q5.f64[0]);
          v38 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v30, *a2, 1), v33, _Q4, 1), v34, _Q5, 1);
          __asm
          {
            FMLA            D3, D18, V4.D[1]
            FMLA            D3, D21, V5.D[1]
          }
          v39 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, a3.f64[0]), v33, _D1), v34, _D2);
          a3.f64[0] = v32 * a3.f64[0] + _Q18.f64[0] * _D1 + _D21 * _D2;
          v40 = (float64x2_t)vextq_s8((int8x16_t)v38, _Q3, 8uLL);
          v41 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, v38);
          *(float32x2_t *)_Q3.i8 = vcvt_f32_f64(v41);
          v42 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v39);
          *(float32x2_t *)&_Q5.f64[0] = vcvt_f32_f64(v37);
          v43 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&_Q5.f64[0], v41);
          *(int8x16_t *)(v8 + 76) = v43;
          *(_DWORD *)(v8 + 108) = vcvt_f32_f64(a3).u32[0];
          *(int8x16_t *)(v8 + 92) = v42;
          v44 = (int32x4_t)vextq_s8(v43, v42, 0xCuLL);
          v45 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39), a3);
          v46 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), (int8x16_t)v44, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), (int8x16_t)v45, 8uLL));
          *(float32x2_t *)v44.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q5.f64[0], *(float32x2_t *)v46.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1), *(float32x2_t *)&_Q5.f64[0], 1);
          a3 = (float64x2_t)vextq_s8(v46, v46, 8uLL);
          *(_BYTE *)(v8 + 72) = vmla_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)&a3.f64[0], *(float32x2_t *)_Q3.i8).f32[0] > 0.0;
        }
      }
      v47 = (_QWORD *)v5[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (_QWORD *)v5[2];
          _ZF = *v48 == (_QWORD)v5;
          v5 = v48;
        }
        while (!_ZF);
      }
      v5 = v48;
    }
    while (v48 != v4);
  }
  v7 = (_QWORD *)result[996];
  if (v7 != result + 997)
  {
    do
    {
      v49 = v7[6];
      if (*(_BYTE *)(v49 + 112))
      {
        a3.f64[0] = *(float64_t *)(v49 + 64);
        _Q1 = *(float64x2_t *)(v49 + 48);
        _D4 = a2[3].f64[0];
        v52 = a2[5].f64[0];
        v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q1.f64[0]), a2[2], _Q1, 1), a2[4], a3.f64[0]);
        __asm { FMLA            D2, D4, V1.D[1] }
        a3.f64[0] = _D2 + v52 * a3.f64[0];
        _Q1.f64[0] = a2[7].f64[0];
        a3 = vaddq_f64(a3, _Q1);
        *(float64x2_t *)(v49 + 48) = vaddq_f64(v53, a2[6]);
        *(float64_t *)(v49 + 64) = a3.f64[0];
        if (*(_BYTE *)(v49 + 72))
        {
          a3.f64[0] = a2[1].f64[0];
          _Q3 = *(int8x16_t *)a2;
          _D1 = a2[3].f64[0];
          _Q4 = a2[2];
          _D2 = a2[5].f64[0];
          _Q5 = a2[4];
          LODWORD(v52) = *(_DWORD *)(v49 + 108);
          v60 = *(float32x4_t *)(v49 + 76);
          v61 = *(float32x4_t *)(v49 + 92);
          *(_QWORD *)&v62 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v52);
          _Q17 = vcvt_hight_f64_f32(v61);
          _Q16 = vcvtq_f64_f32(*(float32x2_t *)v61.f32);
          _Q18 = vcvt_hight_f64_f32(v60);
          _Q7 = vcvtq_f64_f32(*(float32x2_t *)v60.f32);
          v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q7.f64[0]), _Q4, _Q7, 1), _Q5, _Q18.f64[0]);
          __asm { FMLA            D20, D1, V7.D[1] }
          v69 = vmlad_n_f64(_D20, _D2, _Q18.f64[0]);
          v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*a2, _Q18, 1), _Q4, _Q16.f64[0]), _Q5, _Q16, 1);
          __asm { FMLA            D18, D2, V16.D[1] }
          v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v62);
          __asm { FMLA            D21, D1, V17.D[1] }
          _D21 = vmlad_n_f64(_D21, _D2, v62);
          v74 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v67, a2->f64[0]), v70, _Q4.f64[0]), v71, _Q5.f64[0]);
          _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(v69 * a2->f64[0], _Q18.f64[0], _Q4.f64[0]), _D21, _Q5.f64[0]);
          v75 = (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v67, *a2, 1), v70, _Q4, 1), v71, _Q5, 1);
          __asm
          {
            FMLA            D3, D18, V4.D[1]
            FMLA            D3, D21, V5.D[1]
          }
          v76 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v67, a3.f64[0]), v70, _D1), v71, _D2);
          a3.f64[0] = v69 * a3.f64[0] + _Q18.f64[0] * _D1 + _D21 * _D2;
          v77 = (float64x2_t)vextq_s8((int8x16_t)v75, _Q3, 8uLL);
          v78 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, v75);
          *(float32x2_t *)_Q3.i8 = vcvt_f32_f64(v78);
          v79 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v77), v76);
          *(float32x2_t *)&_Q5.f64[0] = vcvt_f32_f64(v74);
          v80 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&_Q5.f64[0], v78);
          *(int8x16_t *)(v49 + 76) = v80;
          *(_DWORD *)(v49 + 108) = vcvt_f32_f64(a3).u32[0];
          *(int8x16_t *)(v49 + 92) = v79;
          v81 = (int32x4_t)vextq_s8(v80, v79, 0xCuLL);
          v82 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v76), a3);
          v83 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v81, (int8x16_t)v81, 0xCuLL), (int8x16_t)v81, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), (int8x16_t)v82, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v81, v81), (int8x16_t)v81, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), (int8x16_t)v82, 8uLL));
          *(float32x2_t *)v81.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q5.f64[0], *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)&_Q5.f64[0], 1);
          a3 = (float64x2_t)vextq_s8(v83, v83, 8uLL);
          *(_BYTE *)(v49 + 72) = vmla_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)&a3.f64[0], *(float32x2_t *)_Q3.i8).f32[0] > 0.0;
        }
      }
      v84 = (_QWORD *)v7[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (_QWORD *)v7[2];
          _ZF = *v85 == (_QWORD)v7;
          v7 = v85;
        }
        while (!_ZF);
      }
      v7 = v85;
    }
    while (v85 != result + 997);
  }
  return result;
}

uint64_t sub_20F888A80(uint64_t result, float64x2_t *a2, double a3, float64x2_t a4)
{
  float64x2_t v4;
  float64x2_t v9;
  float64x2_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  double v18;
  uint64_t *v22;
  unsigned __int8 v23;
  float64_t v25;
  float64_t v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  float64_t v36;
  float64_t v37;
  uint64_t v38;
  int v39;
  float64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  const char *v49;
  size_t v50;
  _BYTE *v51;
  const char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  size_t v63;
  size_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  const char *v117;
  _QWORD v118[3];
  int v119;
  const char *v120;
  int v121;
  const char *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void *__dst[2];
  int64_t v126;
  uint64_t v127;
  float64x2_t v128;
  float64_t v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  char *v132;
  std::__shared_weak_count *v133;
  _QWORD *v134;
  __int128 v135;
  _BYTE v136[24];
  uint64_t v137;
  void *v138;
  void *v139;
  char v140;
  uint64_t v141;
  void *v142;
  unint64_t v143;
  char v144;
  void *v145;
  void *v146;
  char v147;
  unint64_t v148;
  void *__p;
  _BYTE v150[160];
  _BYTE v151[24];
  __int128 v152;
  void *v153[2];
  unint64_t v154;
  char v155;
  _QWORD v156[5];

  v156[2] = *MEMORY[0x24BDAC8D0];
  a4.f64[0] = a2[1].f64[0];
  v4 = *a2;
  __asm { FMOV            V2.2D, #-1.0 }
  v9 = vaddq_f64(a4, _Q2);
  v128 = vaddq_f64(*a2, _Q2);
  v129 = v9.f64[0];
  *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vabsq_f64(v9);
  v10.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v128), v10)) > 0.02)
  {
    sub_20F82FD50(&v127);
    result = v127;
    if (**(int **)(v127 + 56) > 4)
      return result;
    v11 = *(unsigned __int8 *)(v127 + 72);
    result = sub_20E8C31DC(v127, "OSLogSurrogateAppender", 1, 0);
    v12 = result;
    if (!v11 && result == 0)
      return result;
    sub_20E863438((uint64_t)v136);
    v14 = sub_20E86A980(&v136[16], (uint64_t)"The gyro scale update is NOT applied due to being too large: %f.", 64);
    *(_QWORD *)v151 = &v128;
    sub_20EB32EA4(v14, (__int128 **)v151);
    if ((__p & 0x10) != 0)
    {
      v34 = v148;
      if (v148 < v143)
      {
        v148 = v143;
        v34 = v143;
      }
      v35 = v142;
      v15 = v34 - (_QWORD)v142;
      if (v34 - (unint64_t)v142 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_90;
    }
    else
    {
      if ((__p & 8) == 0)
      {
        v15 = 0;
        HIBYTE(v126) = 0;
        v16 = __dst;
        goto LABEL_45;
      }
      v35 = v139;
      v15 = v141 - (_QWORD)v139;
      if ((unint64_t)(v141 - (_QWORD)v139) > 0x7FFFFFFFFFFFFFF7)
LABEL_90:
        sub_20E860B7C();
    }
    if (v15 >= 0x17)
    {
      v41 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v41 = v15 | 7;
      v42 = v41 + 1;
      v16 = (void **)operator new(v41 + 1);
      __dst[1] = (void *)v15;
      v126 = v42 | 0x8000000000000000;
      __dst[0] = v16;
    }
    else
    {
      HIBYTE(v126) = v15;
      v16 = __dst;
      if (!v15)
      {
LABEL_45:
        *((_BYTE *)v16 + v15) = 0;
        v118[0] = &v127;
        v118[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v118[2] = std::chrono::system_clock::now().__d_.__rep_;
        v119 = 4;
        v120 = "unknown file";
        v121 = 4119;
        v123 = 0;
        v124 = 0;
        v122 = "unknown function";
        if (v126 >= 0)
          v43 = (const char *)__dst;
        else
          v43 = (const char *)__dst[0];
        v44 = *(_QWORD *)v118[0];
        v45 = (const char *)(*(_QWORD *)v118[0] + 16);
        v117 = v45;
        if (*(char *)(*(_QWORD *)v118[0] + 39) < 0)
        {
          v45 = *(const char **)(v44 + 16);
          v46 = *(_QWORD *)(v44 + 24);
          v48 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v48 & 1) != 0)
            goto LABEL_52;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)v118[0] + 39);
          v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v47 & 1) != 0)
            goto LABEL_52;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v151);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v151);
          if ((_BYTE)v152 && (v151[23] & 0x80000000) != 0)
            operator delete(*(void **)v151);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_52:
        if (byte_254A4A4F8[23] >= 0)
          v49 = byte_254A4A4F8;
        else
          v49 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v50 = byte_254A4A4F8[23];
        else
          v50 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v151 = os_log_create(v49, v45);
        v51 = &v151[8];
        if (v50 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v50 >= 0x17)
        {
          v52 = v43;
          v53 = v11;
          v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v54 = v50 | 7;
          v55 = v54 + 1;
          v51 = operator new(v54 + 1);
          *(_QWORD *)&v151[16] = v50;
          *(_QWORD *)&v152 = v55 | 0x8000000000000000;
          *(_QWORD *)&v151[8] = v51;
          v11 = v53;
          v43 = v52;
        }
        else
        {
          BYTE7(v152) = v50;
          if (!v50)
          {
LABEL_66:
            v51[v50] = 0;
            BYTE8(v152) = 1;
            v56 = v153;
            if (v46 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v46 >= 0x17)
            {
              v57 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v46 | 7) != 0x17)
                v57 = v46 | 7;
              v58 = v57 + 1;
              v56 = (void **)operator new(v57 + 1);
              v153[1] = (void *)v46;
              v154 = v58 | 0x8000000000000000;
              v153[0] = v56;
            }
            else
            {
              HIBYTE(v154) = v46;
              if (!v46)
              {
LABEL_74:
                *((_BYTE *)v56 + v46) = 0;
                v155 = 1;
                v59 = *(NSObject **)v151;
                if (SHIBYTE(v154) < 0)
                  operator delete(v153[0]);
                if (BYTE8(v152) && SBYTE7(v152) < 0)
                  operator delete(*(void **)&v151[8]);
                if (*(_QWORD *)v151)
                  os_release(*(void **)v151);
                if (!v12 || !*(_QWORD *)(v12 + 24))
                {
                  os_log_type_enabled(v59, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v151 = 136315138;
                  *(_QWORD *)&v151[4] = v43;
                  v66 = (void *)_os_log_send_and_compose_impl();
                  if (v66)
                    free(v66);
                  goto LABEL_154;
                }
                v60 = _os_log_pack_size();
                v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
                v62 = (std::__shared_weak_count *)operator new();
                v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v62->__shared_owners_ = 0;
                v62->__shared_weak_owners_ = 0;
                v62[1].__vftable = v61;
                *(_QWORD *)&v130 = v61;
                *((_QWORD *)&v130 + 1) = v61;
                v132 = 0;
                v133 = 0;
                v131 = v62;
                v63 = strlen(v43);
                if (v63 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v64 = v63;
                if (v63 >= 0x17)
                {
                  v67 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v63 | 7) != 0x17)
                    v67 = v63 | 7;
                  v68 = v67 + 1;
                  v65 = operator new(v67 + 1);
                  *(_QWORD *)&v135 = v64;
                  *((_QWORD *)&v135 + 1) = v68 | 0x8000000000000000;
                  v134 = v65;
                }
                else
                {
                  HIBYTE(v135) = v63;
                  v65 = &v134;
                  if (!v63)
                  {
LABEL_95:
                    *((_BYTE *)v65 + v64) = 0;
                    v69 = v134;
                    v156[0] = v135;
                    *(_QWORD *)((char *)v156 + 7) = *(_QWORD *)((char *)&v135 + 7);
                    v70 = HIBYTE(v135);
                    v71 = operator new(0x38uLL);
                    v71[1] = 0;
                    v71[2] = 0;
                    v71[3] = off_24C9ABC20;
                    *v71 = &off_24C9ABBD0;
                    v72 = v156[0];
                    v71[4] = v69;
                    v71[5] = v72;
                    *(_QWORD *)((char *)v71 + 47) = *(_QWORD *)((char *)v156 + 7);
                    *((_BYTE *)v71 + 55) = v70;
                    v156[0] = 0;
                    *(_QWORD *)((char *)v156 + 7) = 0;
                    v73 = v133;
                    v132 = (char *)(v71 + 3);
                    v133 = (std::__shared_weak_count *)v71;
                    if (v73)
                    {
                      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                      do
                        v75 = __ldaxr(p_shared_owners);
                      while (__stlxr(v75 - 1, p_shared_owners));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                        std::__shared_weak_count::__release_weak(v73);
                      }
                    }
                    *(_OWORD *)v151 = v130;
                    v76 = v132;
                    *(_QWORD *)&v151[16] = v131;
                    if (v131)
                    {
                      v77 = (unint64_t *)&v131->__shared_owners_;
                      do
                        v78 = __ldxr(v77);
                      while (__stxr(v78 + 1, v77));
                    }
                    v79 = v133;
                    *(_QWORD *)&v152 = v76;
                    *((_QWORD *)&v152 + 1) = v133;
                    if (v133)
                    {
                      v80 = (unint64_t *)&v133->__shared_owners_;
                      do
                        v81 = __ldxr(v80);
                      while (__stxr(v81 + 1, v80));
                      v153[0] = v76;
                      do
                        v82 = __ldaxr(v80);
                      while (__stlxr(v82 - 1, v80));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                    }
                    else
                    {
                      v153[0] = v76;
                    }
                    v83 = v131;
                    if (v131)
                    {
                      v84 = (unint64_t *)&v131->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    v86 = *(_QWORD *)v151;
                    if (*((char *)v153[0] + 31) >= 0)
                      v87 = (char *)v153[0] + 8;
                    else
                      v87 = (char *)*((_QWORD *)v153[0] + 1);
                    v88 = _os_log_pack_fill();
                    *(_DWORD *)v88 = 136315138;
                    *(_QWORD *)(v88 + 4) = v87;
                    v89 = operator new();
                    v90 = *(unsigned __int8 *)(v44 + 39);
                    v91 = v117;
                    if ((v90 & 0x80u) != 0)
                    {
                      v91 = *(const char **)(v44 + 16);
                      v90 = *(_QWORD *)(v44 + 24);
                    }
                    *(_QWORD *)v89 = v86;
                    *(_OWORD *)(v89 + 8) = *(_OWORD *)&v151[8];
                    *(_QWORD *)&v151[8] = 0;
                    *(_QWORD *)&v151[16] = 0;
                    *(_OWORD *)(v89 + 24) = v152;
                    v152 = 0uLL;
                    *(_QWORD *)(v89 + 40) = v91;
                    *(_QWORD *)(v89 + 48) = v90;
                    *(_BYTE *)(v89 + 56) = 16;
                    v134 = 0;
                    *(_QWORD *)&v130 = v89;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v130);
                    v92 = v130;
                    *(_QWORD *)&v130 = 0;
                    if (v92)
                    {
                      v93 = *(std::__shared_weak_count **)(v92 + 32);
                      if (v93)
                      {
                        v94 = (unint64_t *)&v93->__shared_owners_;
                        do
                          v95 = __ldaxr(v94);
                        while (__stlxr(v95 - 1, v94));
                        if (!v95)
                        {
                          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                          std::__shared_weak_count::__release_weak(v93);
                        }
                      }
                      v96 = *(std::__shared_weak_count **)(v92 + 16);
                      if (v96)
                      {
                        v97 = (unint64_t *)&v96->__shared_owners_;
                        do
                          v98 = __ldaxr(v97);
                        while (__stlxr(v98 - 1, v97));
                        if (!v98)
                        {
                          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                          std::__shared_weak_count::__release_weak(v96);
                        }
                      }
                      MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
                      v99 = v134;
                      v134 = 0;
                      if (v99)
                      {
                        v100 = (std::__shared_weak_count *)v99[4];
                        if (v100)
                        {
                          v101 = (unint64_t *)&v100->__shared_owners_;
                          do
                            v102 = __ldaxr(v101);
                          while (__stlxr(v102 - 1, v101));
                          if (!v102)
                          {
                            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                            std::__shared_weak_count::__release_weak(v100);
                          }
                        }
                        v103 = (std::__shared_weak_count *)v99[2];
                        if (v103)
                        {
                          v104 = (unint64_t *)&v103->__shared_owners_;
                          do
                            v105 = __ldaxr(v104);
                          while (__stlxr(v105 - 1, v104));
                          if (!v105)
                          {
                            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                            std::__shared_weak_count::__release_weak(v103);
                          }
                        }
                        MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
                      }
                    }
                    v106 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
                    if (*((_QWORD *)&v152 + 1))
                    {
                      v107 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                      do
                        v108 = __ldaxr(v107);
                      while (__stlxr(v108 - 1, v107));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                        std::__shared_weak_count::__release_weak(v106);
                      }
                    }
                    v109 = *(std::__shared_weak_count **)&v151[16];
                    if (*(_QWORD *)&v151[16])
                    {
                      v110 = (unint64_t *)(*(_QWORD *)&v151[16] + 8);
                      do
                        v111 = __ldaxr(v110);
                      while (__stlxr(v111 - 1, v110));
                      if (!v111)
                      {
                        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                        std::__shared_weak_count::__release_weak(v109);
                      }
                    }
LABEL_154:
                    if (v11)
                    {
                      v112 = (const char *)__dst;
                      if (v126 < 0)
                        v112 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v118, "%s", v112);
                      sub_20E863570((uint64_t)v118);
                    }
                    sub_20E863570((uint64_t)v118);
                    v113 = v124;
                    if (v124)
                    {
                      v114 = (unint64_t *)&v124->__shared_owners_;
                      do
                        v115 = __ldaxr(v114);
                      while (__stlxr(v115 - 1, v114));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                        std::__shared_weak_count::__release_weak(v113);
                      }
                    }
                    if (SHIBYTE(v126) < 0)
                      operator delete(__dst[0]);
                    *(_QWORD *)v136 = *MEMORY[0x24BEDB7F0];
                    v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&v136[*(_QWORD *)(*(_QWORD *)v136 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v136[16] = v116;
                    v137 = MEMORY[0x24BEDB848] + 16;
                    if (v147 < 0)
                      operator delete(v145);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    return MEMORY[0x212BC6290](v150);
                  }
                }
                memcpy(v65, v43, v64);
                goto LABEL_95;
              }
            }
            memmove(v56, v45, v46);
            goto LABEL_74;
          }
        }
        memmove(v51, v49, v50);
        goto LABEL_66;
      }
    }
    memmove(v16, v35, v15);
    goto LABEL_45;
  }
  v17 = result + 12464;
  v10.f64[0] = *(float64_t *)(result + 12480);
  *(_QWORD *)&v18 = *(_OWORD *)&vsubq_f64(a4, v10);
  *(_QWORD *)&v4.f64[1] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u64[0];
  _D3 = vsubq_f64(v4, *(float64x2_t *)(result + 12464)).f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  if (vmlad_n_f64(_D2, v18, v18) < 1.0e-20)
    return result;
  v22 = sub_210219C18();
  v23 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v25 = a2->f64[0];
    v26 = a2->f64[1];
    v27 = *(_QWORD *)&a2[1].f64[0];
    *(_DWORD *)v136 = 134218496;
    *(float64_t *)&v136[4] = v25;
    *(_WORD *)&v136[12] = 2048;
    *(float64_t *)&v136[14] = v26;
    *(_WORD *)&v136[22] = 2048;
    v137 = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    v29 = strlen(v28);
    *(_QWORD *)v151 = 0;
    pthread_threadid_np(0, (__uint64_t *)v151);
    v30 = *(_QWORD *)v151;
    timespec_get((timespec *)v151, 1);
    sub_210219E20(v136, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v22 + 1), (__int128 *)(v22 + 5), "[CVCalUpdate] Gyro scale factor applied: %f %f %f", 0x31uLL, v28, v29, v30, v151);
    std::mutex::lock(&stru_254A5A410);
    v31 = qword_254A5A458;
    for (i = unk_254A5A460; v31 != i; v31 += 40)
    {
      v33 = *(_QWORD *)(v31 + 32);
      if (!v33)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v33 + 48))(v33, v136);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v150[15] & 0x80000000) != 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v148) & 0x80000000) == 0)
      {
LABEL_18:
        if (!(_BYTE)v145)
        {
LABEL_30:
          if ((_BYTE)v141 && v140 < 0)
            operator delete(v138);
          if (SHIBYTE(v137) < 0)
            operator delete(*(void **)&v136[8]);
          if (v28)
            free(v28);
          goto LABEL_37;
        }
LABEL_28:
        if (v144 < 0)
          operator delete(v142);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v148) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v146);
    if (!(_BYTE)v145)
      goto LABEL_30;
    goto LABEL_28;
  }
LABEL_37:
  result = os_signpost_enabled((os_log_t)*v22);
  if ((_DWORD)result)
  {
    v36 = a2->f64[0];
    v37 = a2->f64[1];
    v38 = *(_QWORD *)&a2[1].f64[0];
    *(_DWORD *)v136 = 134218496;
    *(float64_t *)&v136[4] = v36;
    *(_WORD *)&v136[12] = 2048;
    *(float64_t *)&v136[14] = v37;
    *(_WORD *)&v136[22] = 2048;
    v137 = v38;
    result = _os_signpost_emit_unreliably_with_name_impl();
  }
  v39 = *(unsigned __int8 *)(v17 + 48);
  v40 = *a2;
  *(float64_t *)(v17 + 40) = a2[1].f64[0];
  *(float64x2_t *)(v17 + 24) = v40;
  if (!v39)
    *(_BYTE *)(v17 + 48) = 1;
  return result;
}

void sub_20F8897FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (*(_BYTE *)(v42 - 168) && *(char *)(v42 - 169) < 0)
    operator delete(*(void **)(v42 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  if (a29 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_20F889968()
{
  JUMPOUT(0x20F889990);
}

void sub_20F889974()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F889988);
}

BOOL sub_20F8899AC(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;

  v2 = *(_QWORD *)(result + 8216);
  v3 = *(unsigned __int8 *)(v2 + 1720);
  v4 = v2 + 864;
  if (!*(_BYTE *)(v2 + 1720))
    v4 = v2 + 24;
  if (*(_DWORD *)(v4 + 824))
  {
    v6 = (_QWORD *)result;
    v7 = *(_QWORD *)(result + 2488);
    if (*(_QWORD *)(result + 2480) == v7)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4961, (uint64_t)"!this->estimate_.state_ids.empty()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if (result)
        abort();
      v7 = v6[311];
      v2 = v6[1027];
      v3 = *(unsigned __int8 *)(v2 + 1720);
    }
    v8 = *(_DWORD *)(v7 - 4);
    v9 = v2 + 864;
    v10 = v2 + 24;
    if (v3)
      v11 = v9;
    else
      v11 = v10;
    if (v8 > *(_DWORD *)(v11 + 824))
    {
      v12 = *(_DWORD *)(v11 + 828);
      v13 = (unint64_t)((double)v12 * 1.5);
      if (v6[252] < v13)
        v13 = v6[252];
      v6[252] = v13;
      *(_DWORD *)(a2 + 1392) = v12;
      v14 = *(_DWORD *)(v11 + 828);
      if (*(_DWORD *)(a2 + 1400) < v14)
        v14 = *(_DWORD *)(a2 + 1400);
      *(_DWORD *)(a2 + 1400) = v14;
      v15 = *(_QWORD *)(v6[994] + 16);
      v16 = *(_QWORD **)v15;
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(unsigned __int8 *)v16;
      if ((char)v18 <= -2)
      {
        do
        {
          v19 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v16 = (_QWORD *)((char *)v16 + v19);
          v17 += 32 * v19;
        }
        while (*(char *)v16 < -1);
        v18 = *(unsigned __int8 *)v16;
      }
      if (v18 != 255)
      {
        do
        {
          v20 = *(_QWORD *)(v17 + 16);
          if (v20 && *(_BYTE *)(v20 + 488))
            *(_WORD *)(v20 + 97) = 256;
          v22 = *((char *)v16 + 1);
          v16 = (_QWORD *)((char *)v16 + 1);
          LOBYTE(v21) = v22;
          v17 += 32;
          if (v22 <= -2)
          {
            do
            {
              v23 = (__clz(__rbit64(((*v16 >> 7) & ~*v16 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v16 = (_QWORD *)((char *)v16 + v23);
              v17 += 32 * v23;
              v21 = *(char *)v16;
            }
            while (v21 < -1);
          }
        }
        while (v21 != 255);
      }
    }
  }
  return result;
}

uint64_t sub_20F889B78(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  __int128 *v54;
  __int128 v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  _QWORD *v59;
  _QWORD *v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  BOOL v76;
  __int128 *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t result;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t v107;
  uint64_t v108;
  int8x16_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  uint64_t v121;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!*(_BYTE *)a2)
  {
    v62 = *(_QWORD *)(a2 + 16) + 4856;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4281, (uint64_t)"!ls.linearize() && \"Failed to linearize the LS for covariance extractor.\"", 73, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_88:
      abort();
    }
    v119 = 0;
    v118 = 0;
    v117 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v62 + 16))(v62, &v117)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4284, (uint64_t)"!ls.solve(dummy) && \"Failed to factorize the LS for covariance extractor.\"", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v63 = a3[2];
    if (v63)
    {
      if (v63 > 0xD20D20D20D20D2)
        sub_20E867F44();
      v64 = operator new(312 * v63);
      *a1 = (uint64_t)v64;
      a1[1] = (uint64_t)v64;
      a1[2] = (uint64_t)v64 + 312 * v63;
    }
    v67 = (_QWORD *)*a3;
    v65 = a3 + 1;
    v66 = v67;
    if (v67 == v65)
      goto LABEL_83;
    while (1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4293, (uint64_t)"ls.template extractCovariance<typename BATraits::PoseVariable>( variable_id, covariance)", 88, (uint64_t)"Failed to extract pose variable covariance.", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v68 = *a1;
      v69 = a1[1];
      if (v69 != *a1)
        break;
LABEL_72:
      v77 = (__int128 *)(v66 + 4);
      if (v68 == v69
        || *(_DWORD *)(v68 + 16) != *((_DWORD *)v66 + 12)
        || *(_QWORD *)v68 != *(_QWORD *)v77
        || *(_DWORD *)(v68 + 8) != *((_DWORD *)v66 + 10))
      {
        v120 = *v77;
        v121 = v66[6];
        sub_20FC5DF8C(a1, (char *)v68, &v120);
      }
      v78 = (_QWORD *)v66[1];
      if (v78)
      {
        do
        {
          v79 = v78;
          v78 = (_QWORD *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          v79 = (_QWORD *)v66[2];
          v61 = *v79 == (_QWORD)v66;
          v66 = v79;
        }
        while (!v61);
      }
      v66 = v79;
      if (v79 == v65)
        goto LABEL_83;
    }
    v70 = 0x6F96F96F96F96F97 * ((v69 - *a1) >> 3);
    v71 = *((_DWORD *)v66 + 12);
    v72 = v66[4];
    while (1)
    {
      v73 = v70 >> 1;
      v74 = v68 + 312 * (v70 >> 1);
      v75 = *(_DWORD *)(v74 + 16);
      v76 = v75 >= v71;
      if (v75 != v71)
        goto LABEL_69;
      if (*(_QWORD *)v74 >= v72)
        break;
LABEL_63:
      v68 = v74 + 312;
      v73 = v70 + ~v73;
LABEL_64:
      v70 = v73;
      if (!v73)
        goto LABEL_72;
    }
    if (*(_QWORD *)v74 != v72)
      goto LABEL_64;
    v76 = *(_DWORD *)(v74 + 8) >= *((_DWORD *)v66 + 10);
LABEL_69:
    if (v76)
      goto LABEL_64;
    goto LABEL_63;
  }
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 4856;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v5 + 4856) + 8))(v5 + 4856)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4281, (uint64_t)"!ls.linearize() && \"Failed to linearize the LS for covariance extractor.\"", 73, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_88;
  }
  v119 = 0;
  v118 = 0;
  v117 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v5 + 4856, &v117)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4284, (uint64_t)"!ls.solve(dummy) && \"Failed to factorize the LS for covariance extractor.\"", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = a3[2];
  if (v8)
  {
    if (v8 > 0xD20D20D20D20D2)
      sub_20E867F44();
    v9 = operator new(312 * v8);
    *a1 = (uint64_t)v9;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v9 + 312 * v8;
  }
  v12 = (_QWORD *)*a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    v116 = v7;
    v103 = v7;
    v115 = v7;
    v102 = v7;
    v114 = v7;
    v101 = v7;
    v113 = v7;
    v95 = v7;
    v112 = v7;
    v94 = v7;
    v111 = v7;
    v93 = v7;
    v109.i64[0] = v7;
    v92 = v7;
    v107.i64[0] = v7;
    v91 = v7;
    v96.i64[0] = v7;
    v90 = v7;
    v110 = v7;
    v89 = v7;
    v108 = v7;
    v88 = v7;
    v106 = v7;
    v87 = v7;
    v105 = v7;
    v86 = v7;
    v104 = v7;
    v85 = v7;
    v100 = v7;
    v84 = v7;
    v99.i64[0] = v7;
    v83 = v7;
    v98.i64[0] = v7;
    v82 = v7;
    v97.i64[0] = v7;
    v81 = v7;
    while (1)
    {
      if (!*(_BYTE *)(v5 + 7864))
        goto LABEL_95;
      v13 = *((_DWORD *)v11 + 10);
      if (!*(_BYTE *)(v5 + 7869))
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 168))(v6);
        *(_BYTE *)(v5 + 7869) = v14;
        if (!v14)
          goto LABEL_95;
      }
      v15 = *(_QWORD **)(v5 + 42856);
      if (!v15)
        goto LABEL_95;
      v16 = (char *)*v15;
      v17 = (char *)v15[1];
      v18 = (uint64_t)&v17[-*v15];
      if (!v18)
        goto LABEL_95;
      v19 = v18 >> 2;
      v20 = v16;
      do
      {
        v21 = v19 >> 1;
        v22 = &v20[4 * (v19 >> 1)];
        v24 = *(_DWORD *)v22;
        v23 = v22 + 4;
        v19 += ~(v19 >> 1);
        if (v24 < v13)
          v20 = v23;
        else
          v19 = v21;
      }
      while (v19);
      if (v17 != v20 && *(_DWORD *)v20 == v13)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 42864) + 240) + ((v20 - v16) & 0x3FFFFFFFCLL));
        v26 = *(unsigned int *)(v5 + 42848);
        v27 = (int8x16_t *)(*(_QWORD *)(v5 + 42832) + 8 * (v25 + v25 * v26));
        v28 = *v27;
        v29 = v27[1];
        v30 = v27[2];
        v31 = (int8x16_t *)((char *)v27 + 8 * v26);
        v32 = *v31;
        v33 = v31[1];
        v34 = v31[2];
        v35 = (int8x16_t *)((char *)v27 + 24 * v26);
        v36 = *v35;
        v37 = v35[1];
        v38 = v35[2];
        v39 = &v27[2 * v26];
        v40 = *v39;
        v41 = v39[1];
        v42 = v39[2];
        v43 = &v27[v26];
        v44 = (int8x16_t *)((char *)v27 + 40 * v26);
        v114 = v30.i64[0];
        v115 = v29.i64[0];
        v101 = vextq_s8(v30, v30, 8uLL).u64[0];
        v102 = vextq_s8(v29, v29, 8uLL).u64[0];
        v116 = v28.i64[0];
        v103 = vextq_s8(v28, v28, 8uLL).u64[0];
        v104 = v41.i64[0];
        v97 = v44[2];
        v98 = v44[1];
        v81 = vextq_s8(v97, v97, 8uLL).u64[0];
        v82 = vextq_s8(v98, v98, 8uLL).u64[0];
        v99 = *v44;
        v100 = v42.i64[0];
        v83 = vextq_s8(v99, v99, 8uLL).u64[0];
        v84 = vextq_s8(v42, v42, 8uLL).u64[0];
        v105 = v40.i64[0];
        v106 = v38.i64[0];
        v85 = vextq_s8(v41, v41, 8uLL).u64[0];
        v86 = vextq_s8(v40, v40, 8uLL).u64[0];
        v107 = v43[1];
        v108 = v37.i64[0];
        v87 = vextq_s8(v38, v38, 8uLL).u64[0];
        v88 = vextq_s8(v37, v37, 8uLL).u64[0];
        v109 = *v43;
        v110 = v36.i64[0];
        v96 = v43[2];
        v89 = vextq_s8(v36, v36, 8uLL).u64[0];
        v90 = vextq_s8(v96, v96, 8uLL).u64[0];
        v91 = vextq_s8(v107, v107, 8uLL).u64[0];
        v92 = vextq_s8(v109, v109, 8uLL).u64[0];
        v111 = v34.i64[0];
        v112 = v33.i64[0];
        v93 = vextq_s8(v34, v34, 8uLL).u64[0];
        v94 = vextq_s8(v33, v33, 8uLL).u64[0];
        v113 = v32.i64[0];
        v95 = vextq_s8(v32, v32, 8uLL).u64[0];
      }
      else
      {
LABEL_95:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4293, (uint64_t)"ls.template extractCovariance<typename BATraits::PoseVariable>( variable_id, covariance)", 88, (uint64_t)"Failed to extract pose variable covariance.", 43, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v45 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
        break;
LABEL_39:
      v54 = (__int128 *)(v11 + 4);
      if (v45 == v46
        || *(_DWORD *)(v45 + 16) != *((_DWORD *)v11 + 12)
        || *(_QWORD *)v45 != *(_QWORD *)v54
        || *(_DWORD *)(v45 + 8) != *((_DWORD *)v11 + 10))
      {
        v120 = *v54;
        v121 = v11[6];
        v45 = sub_20FC5DF8C(a1, (char *)v45, &v120);
      }
      *(_QWORD *)&v55 = v116;
      *((_QWORD *)&v55 + 1) = v103;
      *(_OWORD *)(v45 + 24) = v55;
      v56 = (_OWORD *)(v45 + 24);
      *(_QWORD *)&v55 = v115;
      *((_QWORD *)&v55 + 1) = v102;
      *(_QWORD *)&v57 = v114;
      *((_QWORD *)&v57 + 1) = v101;
      v56[1] = v55;
      v56[2] = v57;
      *(_QWORD *)&v55 = v113;
      *((_QWORD *)&v55 + 1) = v95;
      *(_QWORD *)&v57 = v112;
      *((_QWORD *)&v57 + 1) = v94;
      *(_QWORD *)&v58 = v111;
      *((_QWORD *)&v58 + 1) = v93;
      v56[3] = v55;
      v56[4] = v57;
      *(_QWORD *)&v55 = v109.i64[0];
      *((_QWORD *)&v55 + 1) = v92;
      v56[5] = v58;
      v56[6] = v55;
      *(_QWORD *)&v55 = v107.i64[0];
      *((_QWORD *)&v55 + 1) = v91;
      *(_QWORD *)&v57 = v96.i64[0];
      *((_QWORD *)&v57 + 1) = v90;
      v56[7] = v55;
      v56[8] = v57;
      *(_QWORD *)&v55 = v110;
      *((_QWORD *)&v55 + 1) = v89;
      *(_QWORD *)&v57 = v108;
      *((_QWORD *)&v57 + 1) = v88;
      *(_QWORD *)&v58 = v106;
      *((_QWORD *)&v58 + 1) = v87;
      v56[9] = v55;
      v56[10] = v57;
      *(_QWORD *)&v55 = v105;
      *((_QWORD *)&v55 + 1) = v86;
      v56[11] = v58;
      v56[12] = v55;
      *(_QWORD *)&v55 = v104;
      *((_QWORD *)&v55 + 1) = v85;
      *(_QWORD *)&v57 = v100;
      *((_QWORD *)&v57 + 1) = v84;
      v56[13] = v55;
      v56[14] = v57;
      *(_QWORD *)&v55 = v99.i64[0];
      *((_QWORD *)&v55 + 1) = v83;
      *(_QWORD *)&v57 = v98.i64[0];
      *((_QWORD *)&v57 + 1) = v82;
      v56[15] = v55;
      v56[16] = v57;
      *(_QWORD *)&v55 = v97.i64[0];
      *((_QWORD *)&v55 + 1) = v81;
      v56[17] = v55;
      v59 = (_QWORD *)v11[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (_QWORD *)v11[2];
          v61 = *v60 == (_QWORD)v11;
          v11 = v60;
        }
        while (!v61);
      }
      v11 = v60;
      if (v60 == v10)
        goto LABEL_83;
    }
    v47 = 0x6F96F96F96F96F97 * ((v46 - *a1) >> 3);
    v48 = *((_DWORD *)v11 + 12);
    v49 = v11[4];
    while (1)
    {
      v50 = v47 >> 1;
      v51 = v45 + 312 * (v47 >> 1);
      v52 = *(_DWORD *)(v51 + 16);
      v53 = v52 >= v48;
      if (v52 != v48)
        goto LABEL_36;
      if (*(_QWORD *)v51 >= v49)
        break;
LABEL_30:
      v45 = v51 + 312;
      v50 = v47 + ~v50;
LABEL_31:
      v47 = v50;
      if (!v50)
        goto LABEL_39;
    }
    if (*(_QWORD *)v51 != v49)
      goto LABEL_31;
    v53 = *(_DWORD *)(v51 + 8) >= *((_DWORD *)v11 + 10);
LABEL_36:
    if (v53)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_83:
  result = v117;
  if (v117)
    return MEMORY[0x212BC6368](v117, 0x1000C8000313F17);
  return result;
}

void sub_20F88A3E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (STACK[0x248])
  {
    MEMORY[0x212BC6368](STACK[0x248], 0x1000C8000313F17);
    v3 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v3 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v3;
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20F88A450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unsigned int i;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  int64x2_t v22;
  void *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  double v94;
  double v95;
  float64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  double v104;
  double v105;
  float64x2_t *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  size_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  size_t v118;
  size_t v119;
  char *v120;
  __int128 v121;
  size_t v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  size_t v126;
  size_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  size_t v133;
  _BYTE *v134;
  size_t v135;
  _BYTE *v136;
  char **v137;
  _BYTE *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  _BYTE *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _QWORD *v163;
  _QWORD *v164;
  __int128 v165;
  void *v166;
  void *v167;
  long double v168;
  char **v169;
  char *v170;
  _QWORD *v171;
  int v172;
  unint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  void **v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  double v206;
  double v210;
  double v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  _BYTE *v217;
  int8x8_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint8x8_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  double v228;
  float v229;
  uint64_t v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  double v236;
  BOOL v237;
  char *v238;
  void *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  BOOL v244;
  int v245;
  BOOL v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  __int128 *v257;
  __int128 *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  __int128 v262;
  char *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  __int128 v270;
  char **v271;
  char *v272;
  uint64_t v273;
  int v274;
  float32x2_t *v275;
  float32x2_t *v276;
  char *v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  float64x2_t v281;
  float64x2_t v282;
  __int128 v283;
  void *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  __int16 v288;
  char *v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  char *v295;
  int v296;
  int v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  float v305;
  BOOL v306;
  unsigned __int32 v307;
  char *v308;
  _BYTE *v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  unint64_t v313;
  char *v314;
  char *v315;
  unsigned __int32 v316;
  float32x2_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  unint64_t v325;
  unint64_t v326;
  BOOL v327;
  char *v328;
  uint64_t v329;
  char *v330;
  unint64_t v331;
  char *v332;
  void *v333;
  unint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *j;
  void *v341;
  BOOL v342;
  char *v343;
  __int128 v344;
  float64x2_t v345;
  char *v346;
  char **v347;
  void *v348;
  uint64_t v349;
  char *v350;
  char *v351;
  char *v352;
  __int16 v353;
  _QWORD *v354;
  _BYTE *v355;
  char *v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  char *v363;
  char *v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  _OWORD *v371;
  void *v372;
  void *v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  unint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t *v381;
  void **v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  void **v386;
  void *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  void *v392;
  void *v393;
  _QWORD *v394;
  uint64_t *v395;
  void **v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  void **v400;
  void *v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  void *v406;
  void *v407;
  _QWORD *v408;
  uint64_t *v409;
  void **v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  void **v414;
  void *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  void *v420;
  void *v421;
  uint64_t *v422;
  uint64_t *v423;
  int v424;
  uint64_t v425;
  float32x2_t *v426;
  float32x2_t *v427;
  unint64_t v428;
  uint64_t v429;
  uint8x8_t v430;
  unint64_t v431;
  uint64_t **v432;
  uint64_t *v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v437;
  uint64_t v439;
  char *v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  float32x2_t v444;
  void *v445;
  void **v446;
  void **v447;
  unsigned int v448;
  unsigned int v449;
  BOOL v450;
  char v451;
  char v452;
  void **v453;
  void **v454;
  _QWORD *v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  _BYTE *v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  float64x2_t v467;
  unint64_t v468;
  float64x2_t *v469;
  void **v470;
  char *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  char *v476;
  float64x2_t *v477;
  _OWORD *f64;
  float64x2_t *v479;
  uint64_t v480;
  _BYTE *v481;
  uint64_t **v482;
  unsigned int v483;
  unsigned int v484;
  BOOL v485;
  char v486;
  char v487;
  char **v488;
  char **v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  _BYTE *v495;
  int v496;
  uint64_t v497;
  int v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  _QWORD *v502;
  char *v503;
  char **v504;
  char **v505;
  unsigned int v506;
  unsigned int v507;
  BOOL v508;
  char v509;
  char v510;
  char **v511;
  char *v512;
  char *v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  _BYTE *v517;
  int v518;
  uint64_t v519;
  int v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  float64x2_t *v525;
  _BYTE *v526;
  uint64_t *v527;
  float64x2_t **v528;
  char *v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  char *v534;
  char *v535;
  float64x2_t *v536;
  unint64_t v537;
  _QWORD **v538;
  uint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  float64x2_t *v545;
  uint64_t v546;
  uint64_t v547;
  void **v548;
  _BYTE *v549;
  char *v550;
  unsigned int v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  _QWORD *v555;
  char **v556;
  _BYTE *v557;
  _BYTE *v558;
  uint64_t v559;
  char *v560;
  size_t v561;
  char *v562;
  _QWORD *v563;
  _BYTE *v564;
  unsigned int v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  _QWORD *v569;
  char **v570;
  _BYTE *v571;
  _BYTE *v572;
  uint64_t v573;
  char *v574;
  size_t v575;
  char *v576;
  char *v577;
  char **v578;
  unsigned int v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  char **v584;
  _BYTE *v585;
  _BYTE *v586;
  uint64_t v587;
  char *v588;
  size_t v589;
  char *v590;
  void **v591;
  void **v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  BOOL v596;
  uint64_t v597;
  _QWORD *v598;
  unint64_t v599;
  void *v600;
  uint64_t v601;
  char *v602;
  char *v603;
  char *v604;
  int v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  uint64_t v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  uint64_t v623;
  unint64_t v624;
  __int128 *v625;
  _DWORD *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  char *v632;
  char *v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  char *v642;
  int v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  char *v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  float64x2_t v666;
  int64x2_t v667;
  float64x2_t v669;
  float64x2_t v670;
  int8x16_t v671;
  float64x2_t v674;
  unint64_t v678;
  uint64_t v679;
  float64x2_t v681;
  double v682;
  float64x2_t v683;
  double v684;
  double v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  char *v695;
  char *v696;
  unint64_t v697;
  unint64_t v698;
  _BYTE *v699;
  _BYTE *v700;
  char *v701;
  char *v702;
  char *v703;
  char *v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  char *v711;
  char *v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  char *v719;
  __int128 *v720;
  char *v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  unint64_t v725;
  char *v726;
  char *v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  char *v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  uint64_t v742;
  uint64_t v743;
  int v744;
  uint64_t *v745;
  char v746;
  int v747;
  char v748;
  uint64_t *v749;
  BOOL v750;
  double v751;
  uint64_t *v752;
  BOOL v753;
  BOOL v754;
  char *v755;
  void *v756;
  BOOL v757;
  void *v758;
  unint64_t v759;
  _QWORD *v760;
  float32x2_t *v761;
  uint64_t v762;
  void *v763;
  unsigned int v764;
  unint64_t v765;
  void **v766;
  float32x2_t *v767;
  char **v768;
  unint64_t v769;
  float64x2_t v770;
  void *v771[6];
  _BYTE v772[32];
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  __int128 v776;
  uint64_t v777;
  char v778;
  void *v779;
  char *v780;
  char *v781;
  __int16 v782;
  void *v783;
  char *v784;
  unint64_t v785;
  __int16 v786;
  char v787;
  _QWORD v788[2];
  _OWORD v789[12];
  int v790;
  __int16 v791;
  void *__p[6];
  void *v793[2];
  void *v794[2];
  __int128 v795;
  _OWORD v796[3];
  __int128 v797;
  void *v798[2];
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  size_t __sz[2];
  void *v804[2];
  _OWORD v805[4];
  _OWORD v806[3];
  void *v807[2];
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  uint64_t v820;
  char v821;
  uint64_t v822;
  __int128 v823;
  _BYTE v824[808];
  int v825;
  __int128 v826;
  int v827;
  __int128 v828;
  int v829;
  __int128 v830;
  int v831;
  __int128 v832;
  int v833;
  __int128 v834;
  char *v835;
  _BYTE v836[24];
  double v837;
  uint64_t v838;
  int v839;
  char v840;
  __int16 v841;
  char v842;
  char **v843;
  char *v844;
  char *v845;

  memset(v789, 0, sizeof(v789));
  v790 = 2;
  v791 = 0;
  v821 = 0;
  *(_OWORD *)&v824[792] = 0u;
  v825 = 0;
  v826 = 0u;
  v827 = 0;
  v829 = 0;
  v828 = 0u;
  v830 = 0u;
  v831 = 0;
  v833 = 0;
  v832 = 0u;
  v834 = 0u;
  v835 = 0;
  LOBYTE(v810) = 0;
  v809 = 0u;
  v808 = 0u;
  *(_OWORD *)v807 = 0u;
  memset(v806, 0, sizeof(v806));
  memset(v805, 0, sizeof(v805));
  *(_OWORD *)__sz = 0u;
  *(_OWORD *)v804 = 0u;
  v801 = 0u;
  v802 = 0u;
  v799 = 0u;
  v800 = 0u;
  v797 = 0u;
  *(_OWORD *)v798 = 0u;
  v795 = 0u;
  memset(v796, 0, sizeof(v796));
  *(_OWORD *)v793 = 0u;
  *(_OWORD *)v794 = 0u;
  memset(__p, 0, sizeof(__p));
  bzero(&v822, 0x32CuLL);
  v4 = *(char **)(a1 + 2480);
  v762 = a1;
  v5 = *(char **)(a1 + 2488);
  if (v4 == v5)
  {
    *(_QWORD *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 192) = 2;
    *(_WORD *)(a2 + 200) = 0;
    *(_BYTE *)(a2 + 808) = 0;
    *(_QWORD *)(a2 + 1752) = 0;
    *(_OWORD *)(a2 + 1760) = 0u;
    *(_BYTE *)(a2 + 640) = 0;
    *(_OWORD *)(a2 + 608) = 0u;
    *(_OWORD *)(a2 + 624) = 0u;
    *(_OWORD *)(a2 + 576) = 0u;
    *(_OWORD *)(a2 + 592) = 0u;
    *(_OWORD *)(a2 + 544) = 0u;
    *(_OWORD *)(a2 + 560) = 0u;
    *(_OWORD *)(a2 + 512) = 0u;
    *(_OWORD *)(a2 + 528) = 0u;
    *(_OWORD *)(a2 + 480) = 0u;
    *(_OWORD *)(a2 + 496) = 0u;
    *(_OWORD *)(a2 + 448) = 0u;
    *(_OWORD *)(a2 + 464) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 432) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    bzero((void *)(a2 + 816), 0x32CuLL);
    *(_DWORD *)(a2 + 1648) = 0;
    *(_OWORD *)(a2 + 1632) = 0u;
    *(_OWORD *)(a2 + 1656) = 0u;
    *(_DWORD *)(a2 + 1672) = 0;
    *(_OWORD *)(a2 + 1680) = 0u;
    *(_DWORD *)(a2 + 1696) = 0;
    *(_OWORD *)(a2 + 1704) = 0u;
    *(_DWORD *)(a2 + 1720) = 0;
    *(_OWORD *)(a2 + 1728) = 0u;
    *(_DWORD *)(a2 + 1744) = 0;
    return sub_20F028598((uint64_t)v789);
  }
  sub_20F0E80A4(v796, v4, v5, (v5 - v4) >> 2);
  i = *(_DWORD *)(*((_QWORD *)&v796[0] + 1) - 4);
  if ((_OWORD *)((char *)&v796[1] + 8) != (_OWORD *)(a1 + 2504))
    sub_20E86811C((_QWORD *)&v796[1] + 1, *(char **)(a1 + 2504), *(char **)(a1 + 2512), (uint64_t)(*(_QWORD *)(a1 + 2512) - *(_QWORD *)(a1 + 2504)) >> 3);
  if (&v797 != (__int128 *)(a1 + 2528))
    sub_20E86811C(&v797, *(char **)(a1 + 2528), *(char **)(a1 + 2536), (uint64_t)(*(_QWORD *)(a1 + 2536) - *(_QWORD *)(a1 + 2528)) >> 3);
  memset(v771, 0, 24);
  v7 = *(_BYTE **)(a1 + 8056);
  v8 = *(_BYTE **)(a1 + 8064);
  v9 = v8 - v7;
  v742 = a2;
  if (v8 == v7)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v8 - v7);
    v771[0] = v10;
    v11 = &v10[32 * (v9 >> 5)];
    v771[2] = v11;
    memcpy(v10, v7, v9);
    v771[1] = v11;
  }
  *(_OWORD *)&v771[3] = *(_OWORD *)(v762 + 8080);
  v771[5] = *(void **)(v762 + 8096);
  memset(v772, 0, 24);
  v12 = *(_QWORD *)(v762 + 8104);
  v13 = *(_QWORD *)(v762 + 8112);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0x6DB6DB6DB6DB6DB7 * (v14 >> 3);
    if (v15 > 0x492492492492492)
      sub_20EABADD4();
    v16 = (char *)operator new(v14);
    v17 = 0;
    *(_QWORD *)v772 = v16;
    *(_QWORD *)&v772[8] = v16;
    *(_QWORD *)&v772[16] = &v16[56 * v15];
    do
    {
      v18 = v12 + v17;
      v19 = &v16[v17];
      *(_QWORD *)v19 = *(_QWORD *)(v12 + v17);
      v20 = *(_OWORD *)(v12 + v17 + 8);
      *((_QWORD *)v19 + 3) = *(_QWORD *)(v12 + v17 + 24);
      *(_OWORD *)(v19 + 8) = v20;
      v21 = *(_OWORD *)(v12 + v17 + 32);
      *((_QWORD *)v19 + 6) = *(_QWORD *)(v12 + v17 + 48);
      *((_OWORD *)v19 + 2) = v21;
      v17 += 56;
    }
    while (v18 + 56 != v13);
    *(_QWORD *)&v772[8] = &v16[v17];
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v10 = (char *)v771[0];
    v22 = *(int64x2_t *)&v771[1];
  }
  else
  {
    v22 = vdupq_n_s64((unint64_t)v11);
  }
  *(int64x2_t *)&__p[1] = v22;
  memset(v771, 0, sizeof(v771));
  *(_OWORD *)&__p[3] = *(_OWORD *)&v771[3];
  __p[0] = v10;
  __p[5] = v771[5];
  v23 = v793[0];
  if (v793[0])
  {
    v793[1] = v793[0];
    operator delete(v793[0]);
    v23 = v771[0];
  }
  *(_OWORD *)v793 = *(_OWORD *)v772;
  v794[0] = *(void **)&v772[16];
  memset(v772, 0, 24);
  if (v23)
  {
    v771[1] = v23;
    operator delete(v23);
  }
  sub_20F1329F0((uint64_t)v789, v762 + 2280);
  v24 = *(_BYTE **)(v762 + 2288);
  v25 = *(_BYTE **)(v762 + 2280);
  v26 = 0xCF3CF3CF3CF3CF3DLL * ((v24 - v25) >> 3);
  v27 = v794[1];
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)&v795 + 1) - (unint64_t)v794[1]) >> 3) < v26)
  {
    if (v26 > 0x186186186186186)
      sub_20E867F44();
    v28 = (_BYTE *)v795;
    v29 = (char *)operator new(v24 - v25);
    v30 = &v29[168 * ((v28 - v27) / 168)];
    v31 = v30;
    if (v28 != v27)
    {
      v32 = &v29[168 * ((v28 - v27) / 168)];
      do
      {
        v31 = v32 - 168;
        v33 = *(_OWORD *)(v28 - 168);
        v34 = *(_OWORD *)(v28 - 152);
        *(_OWORD *)(v32 - 136) = *(_OWORD *)(v28 - 136);
        *(_OWORD *)(v32 - 152) = v34;
        *(_OWORD *)(v32 - 168) = v33;
        v35 = *(_OWORD *)(v28 - 120);
        v36 = *(_OWORD *)(v28 - 104);
        v37 = *(_OWORD *)(v28 - 88);
        *(_OWORD *)(v32 - 72) = *(_OWORD *)(v28 - 72);
        *(_OWORD *)(v32 - 88) = v37;
        *(_OWORD *)(v32 - 104) = v36;
        *(_OWORD *)(v32 - 120) = v35;
        v38 = *(_OWORD *)(v28 - 56);
        v39 = *(_OWORD *)(v28 - 40);
        v40 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v32 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v32 - 24) = v40;
        *(_OWORD *)(v32 - 40) = v39;
        *(_OWORD *)(v32 - 56) = v38;
        v28 -= 168;
        v32 -= 168;
      }
      while (v28 != v27);
    }
    v794[1] = v31;
    *(_QWORD *)&v795 = v30;
    *((_QWORD *)&v795 + 1) = &v29[8 * ((v24 - v25) >> 3)];
    if (v27)
      operator delete(v27);
  }
  v756 = v25;
  v763 = v24;
  v764 = i;
  v765 = 0xCF3CF3CF3CF3CF3DLL * ((v24 - v25) >> 3);
  if (v24 != v25)
  {
    v41 = 0;
    v42 = 0;
    v43 = (char *)v795;
    do
    {
      while (1)
      {
        v52 = *(_QWORD *)(v762 + 2280) + 168 * v41;
        if ((unint64_t)v43 >= *((_QWORD *)&v795 + 1))
          break;
        v44 = *(_OWORD *)v52;
        v45 = *(_OWORD *)(v52 + 32);
        *((_OWORD *)v43 + 1) = *(_OWORD *)(v52 + 16);
        *((_OWORD *)v43 + 2) = v45;
        *(_OWORD *)v43 = v44;
        v46 = *(_OWORD *)(v52 + 48);
        v47 = *(_OWORD *)(v52 + 64);
        v48 = *(_OWORD *)(v52 + 96);
        *((_OWORD *)v43 + 5) = *(_OWORD *)(v52 + 80);
        *((_OWORD *)v43 + 6) = v48;
        *((_OWORD *)v43 + 3) = v46;
        *((_OWORD *)v43 + 4) = v47;
        v49 = *(_OWORD *)(v52 + 112);
        v50 = *(_OWORD *)(v52 + 128);
        v51 = *(_OWORD *)(v52 + 144);
        *((_QWORD *)v43 + 20) = *(_QWORD *)(v52 + 160);
        *((_OWORD *)v43 + 8) = v50;
        *((_OWORD *)v43 + 9) = v51;
        *((_OWORD *)v43 + 7) = v49;
        *(_QWORD *)&v795 = v43 + 168;
        v43 += 168;
        v41 = ++v42;
        if (v26 <= v42)
          goto LABEL_53;
      }
      v53 = (char *)v794[1];
      v54 = 0xCF3CF3CF3CF3CF3DLL * ((v43 - (char *)v794[1]) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0x186186186186186)
        sub_20E867F44();
      if (0x9E79E79E79E79E7ALL * ((uint64_t)(*((_QWORD *)&v795 + 1) - (unint64_t)v794[1]) >> 3) > v55)
        v55 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*((_QWORD *)&v795 + 1) - (unint64_t)v794[1]) >> 3);
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)&v795 + 1) - (unint64_t)v794[1]) >> 3) >= 0xC30C30C30C30C3)
        v56 = 0x186186186186186;
      else
        v56 = v55;
      if (v56)
      {
        if (v56 > 0x186186186186186)
          sub_20E877A38();
        v57 = (char *)operator new(168 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[168 * v54];
      v59 = *(_OWORD *)v52;
      v60 = *(_OWORD *)(v52 + 32);
      *((_OWORD *)v58 + 1) = *(_OWORD *)(v52 + 16);
      *((_OWORD *)v58 + 2) = v60;
      *(_OWORD *)v58 = v59;
      v61 = *(_OWORD *)(v52 + 48);
      v62 = *(_OWORD *)(v52 + 64);
      v63 = *(_OWORD *)(v52 + 96);
      *((_OWORD *)v58 + 5) = *(_OWORD *)(v52 + 80);
      *((_OWORD *)v58 + 6) = v63;
      *((_OWORD *)v58 + 3) = v61;
      *((_OWORD *)v58 + 4) = v62;
      v64 = *(_OWORD *)(v52 + 112);
      v65 = *(_OWORD *)(v52 + 128);
      v66 = *(_OWORD *)(v52 + 144);
      *((_QWORD *)v58 + 20) = *(_QWORD *)(v52 + 160);
      *((_OWORD *)v58 + 8) = v65;
      *((_OWORD *)v58 + 9) = v66;
      *((_OWORD *)v58 + 7) = v64;
      v67 = v58;
      if (v43 == v53)
      {
        v26 = v765;
        v76 = v58 + 168;
        v794[1] = v58;
        *(_QWORD *)&v795 = v58 + 168;
        *((_QWORD *)&v795 + 1) = &v57[168 * v56];
        if (!v43)
          goto LABEL_49;
      }
      else
      {
        v26 = v765;
        do
        {
          v68 = *(_OWORD *)(v43 - 168);
          v69 = *(_OWORD *)(v43 - 152);
          *(_OWORD *)(v67 - 136) = *(_OWORD *)(v43 - 136);
          *(_OWORD *)(v67 - 152) = v69;
          *(_OWORD *)(v67 - 168) = v68;
          v70 = *(_OWORD *)(v43 - 120);
          v71 = *(_OWORD *)(v43 - 104);
          v72 = *(_OWORD *)(v43 - 88);
          *(_OWORD *)(v67 - 72) = *(_OWORD *)(v43 - 72);
          *(_OWORD *)(v67 - 88) = v72;
          *(_OWORD *)(v67 - 104) = v71;
          *(_OWORD *)(v67 - 120) = v70;
          v73 = *(_OWORD *)(v43 - 56);
          v74 = *(_OWORD *)(v43 - 40);
          v75 = *(_OWORD *)(v43 - 24);
          *((_QWORD *)v67 - 1) = *((_QWORD *)v43 - 1);
          *(_OWORD *)(v67 - 24) = v75;
          *(_OWORD *)(v67 - 40) = v74;
          *(_OWORD *)(v67 - 56) = v73;
          v67 -= 168;
          v43 -= 168;
        }
        while (v43 != v53);
        v43 = (char *)v794[1];
        v76 = v58 + 168;
        v794[1] = v67;
        *(_QWORD *)&v795 = v58 + 168;
        *((_QWORD *)&v795 + 1) = &v57[168 * v56];
        if (!v43)
          goto LABEL_49;
      }
      operator delete(v43);
LABEL_49:
      i = v764;
      *(_QWORD *)&v795 = v76;
      v43 = v76;
      v41 = ++v42;
    }
    while (v26 > v42);
  }
LABEL_53:
  memset(v771, 0, 24);
  sub_20EB884A4((uint64_t)v771, (uint64_t)(*(_QWORD *)(v762 + 2432) - *(_QWORD *)(v762 + 2424)) >> 5, 0);
  v77 = *(_QWORD *)(v762 + 2432);
  v78 = *(_QWORD *)(v762 + 2424);
  v79 = v77 - v78;
  if (v77 != v78)
  {
    v80 = 0;
    v81 = v79 >> 5;
    v82 = v771[0];
    if (v81 <= 1)
      v81 = 1;
    v83 = (char *)(v78 + 24);
    do
    {
      while (1)
      {
        v84 = v80 >> 6;
        v85 = 1 << v80;
        v86 = *v83;
        v83 += 32;
        if ((v86 & 0x20) != 0)
          break;
        v82[v84] &= ~v85;
        if (v81 == ++v80)
          goto LABEL_60;
      }
      v82[v84] |= v85;
      ++v80;
    }
    while (v81 != v80);
  }
LABEL_60:
  sub_20E8B40D4(v836, (uint64_t)v771);
  if (v771[0])
    operator delete(v771[0]);
  if (v798[1])
    operator delete(v798[1]);
  v798[1] = *(void **)v836;
  v799 = *(_OWORD *)&v836[8];
  v87 = *(_QWORD *)(v762 + 2328);
  v88 = *(_QWORD *)(v762 + 2336);
  v89 = (v88 - v87) >> 5;
  v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v800 + 1) - v800) >> 3);
  if (v89 <= v90)
  {
    if (v89 < v90)
      *((_QWORD *)&v800 + 1) = v800 + 24 * v89;
  }
  else
  {
    sub_20F11D1A8((void **)&v800, v89 - v90);
  }
  if (v88 != v87)
  {
    v91 = 0;
    if (v89 <= 1)
      v92 = 1;
    else
      v92 = (v88 - v87) >> 5;
    v93 = (double *)(v87 + 24);
    do
    {
      if (*v93 == 0.0)
        v94 = 1.0;
      else
        v94 = 1.0 / *v93;
      v95 = v94 * *(v93 - 1);
      v96 = (float64x2_t *)(v800 + v91);
      *v96 = vmulq_n_f64(*(float64x2_t *)(v93 - 3), v94);
      v96[1].f64[0] = v95;
      v91 += 24;
      v93 += 4;
      --v92;
    }
    while (v92);
  }
  v97 = *(_QWORD *)(v762 + 2352);
  v98 = *(_QWORD *)(v762 + 2360);
  v99 = (v98 - v97) >> 5;
  v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v802 - *((_QWORD *)&v801 + 1)) >> 3);
  if (v99 <= v100)
  {
    if (v99 < v100)
      *(_QWORD *)&v802 = *((_QWORD *)&v801 + 1) + 24 * v99;
  }
  else
  {
    sub_20F11D1A8((void **)&v801 + 1, v99 - v100);
  }
  if (v98 != v97)
  {
    v101 = 0;
    if (v99 <= 1)
      v102 = 1;
    else
      v102 = (v98 - v97) >> 5;
    v103 = (double *)(v97 + 24);
    do
    {
      if (*v103 == 0.0)
        v104 = 1.0;
      else
        v104 = 1.0 / *v103;
      v105 = v104 * *(v103 - 1);
      v106 = (float64x2_t *)(*((_QWORD *)&v801 + 1) + v101);
      *v106 = vmulq_n_f64(*(float64x2_t *)(v103 - 3), v104);
      v106[1].f64[0] = v105;
      v101 += 24;
      v103 += 4;
      --v102;
    }
    while (v102);
  }
  v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v762 + 7952) + 8) + 16);
  v108 = *(_QWORD *)(v762 + 7984);
  v109 = (_QWORD *)__sz[1];
  v110 = __sz[0];
  v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3);
  v112 = v26 - v111;
  if (v26 <= v111)
  {
    if (v26 < v111)
    {
      v126 = __sz[0] + 24 * v26;
      if (__sz[1] != v126)
      {
        v127 = __sz[1];
        do
        {
          v129 = *(void **)(v127 - 24);
          v127 -= 24;
          v128 = v129;
          if (v129)
          {
            *(v109 - 2) = v128;
            operator delete(v128);
          }
          v109 = (_QWORD *)v127;
        }
        while (v127 != v126);
      }
      __sz[1] = v110 + 24 * v26;
    }
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v804[0] - __sz[1]) >> 3) >= v112)
    {
      bzero((void *)__sz[1], 24 * ((24 * v112 - 24) / 0x18) + 24);
      __sz[1] = (size_t)&v109[3 * ((24 * v112 - 24) / 0x18) + 3];
      goto LABEL_117;
    }
    if (v26 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v113 = 0x5555555555555556 * ((uint64_t)((uint64_t)v804[0] - __sz[0]) >> 3);
    if (v113 <= v26)
      v113 = v26;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v804[0] - __sz[0]) >> 3) >= 0x555555555555555)
      v114 = 0xAAAAAAAAAAAAAAALL;
    else
      v114 = v113;
    if (v114 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v115 = (char *)operator new(24 * v114);
    v116 = &v115[24 * v111];
    v117 = &v115[24 * v114];
    v118 = 24 * ((24 * v112 - 24) / 0x18) + 24;
    bzero(v116, v118);
    v119 = (size_t)&v116[v118];
    if (v109 == (_QWORD *)v110)
    {
      __sz[0] = (size_t)v116;
      __sz[1] = (size_t)&v116[v118];
      v804[0] = v117;
      i = v764;
      goto LABEL_115;
    }
    do
    {
      v120 = v116;
      *((_QWORD *)v116 - 2) = 0;
      *((_QWORD *)v116 - 1) = 0;
      v121 = *(_OWORD *)(v109 - 3);
      v109 -= 3;
      *(_OWORD *)(v116 - 24) = v121;
      v116 -= 24;
      *((_QWORD *)v120 - 1) = v109[2];
      *v109 = 0;
      v109[1] = 0;
      v109[2] = 0;
    }
    while (v109 != (_QWORD *)v110);
    v109 = (_QWORD *)__sz[0];
    v122 = __sz[1];
    __sz[0] = (size_t)v116;
    __sz[1] = v119;
    v804[0] = v117;
    if ((_QWORD *)v122 != v109)
    {
      v123 = (_QWORD *)v122;
      i = v764;
      do
      {
        v125 = (void *)*(v123 - 3);
        v123 -= 3;
        v124 = v125;
        if (v125)
        {
          *(_QWORD *)(v122 - 16) = v124;
          operator delete(v124);
        }
        v122 = (size_t)v123;
      }
      while (v123 != v109);
LABEL_115:
      if (!v109)
        goto LABEL_117;
      goto LABEL_116;
    }
    i = v764;
    if (v109)
LABEL_116:
      operator delete(v109);
  }
LABEL_117:
  if (v763 != v756)
  {
    v130 = 0;
    v131 = 0;
    v132 = v108 + v107;
    do
    {
      v133 = __sz[0] + 24 * v130;
      v134 = *(_BYTE **)v133;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v133 + 16) - *(_QWORD *)v133) >> 4) < v132)
      {
        if (v132 > 0x555555555555555)
          sub_20E867F44();
        v135 = __sz[0] + 24 * v130;
        v138 = *(_BYTE **)(v135 + 8);
        v137 = (char **)(v135 + 8);
        v136 = v138;
        v139 = (char *)operator new(48 * (v108 + v107));
        v140 = &v139[v138 - v134];
        v141 = v140;
        if (v138 != v134)
        {
          v142 = &v139[v136 - v134];
          do
          {
            v141 = v142 - 48;
            v143 = *((_OWORD *)v136 - 3);
            *((_QWORD *)v142 - 4) = *((_QWORD *)v136 - 4);
            *((_OWORD *)v142 - 3) = v143;
            *(_OWORD *)(v142 - 24) = *(_OWORD *)(v136 - 24);
            v144 = *((_DWORD *)v136 - 2);
            *(v142 - 4) = *(v136 - 4);
            *((_DWORD *)v142 - 2) = v144;
            v136 -= 48;
            v142 -= 48;
          }
          while (v136 != v134);
        }
        *(_QWORD *)v133 = v141;
        *v137 = v140;
        *(_QWORD *)(v133 + 16) = &v139[48 * v132];
        i = v764;
        if (v134)
          operator delete(v134);
      }
      v130 = ++v131;
    }
    while (v765 > v131);
  }
  v145 = v762;
  v146 = *(_QWORD *)(v762 + 7952);
  if (v146)
  {
    v788[0] = v789;
    v788[1] = v762;
    v147 = *(_QWORD **)(v146 + 8);
    v150 = (_QWORD *)*v147;
    v148 = v147 + 1;
    v149 = v150;
    if (v150 != v148)
    {
      do
      {
        sub_20F88E8C0(v788, (uint64_t)(v149 + 4));
        v374 = (_QWORD *)v149[1];
        if (v374)
        {
          do
          {
            v375 = v374;
            v374 = (_QWORD *)*v374;
          }
          while (v374);
        }
        else
        {
          do
          {
            v375 = (_QWORD *)v149[2];
            _ZF = *v375 == (_QWORD)v149;
            v149 = v375;
          }
          while (!_ZF);
        }
        v149 = v375;
      }
      while (v375 != v148);
    }
    v151 = *(_QWORD **)(v762 + 7968);
    if (v151 != (_QWORD *)(v762 + 7976))
    {
      do
      {
        sub_20F88E8C0(v788, (uint64_t)(v151 + 4));
        v376 = (_QWORD *)v151[1];
        if (v376)
        {
          do
          {
            v377 = v376;
            v376 = (_QWORD *)*v376;
          }
          while (v376);
        }
        else
        {
          do
          {
            v377 = (_QWORD *)v151[2];
            _ZF = *v377 == (_QWORD)v151;
            v151 = v377;
          }
          while (!_ZF);
        }
        v151 = v377;
      }
      while (v377 != (_QWORD *)(v762 + 7976));
    }
    v152 = *(_QWORD *)(v762 + 7952);
    v153 = *(unsigned int *)(*(_QWORD *)(v152 + 16) + 16);
    v154 = v807[0];
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v808 - (unint64_t)v807[0]) >> 3) < v153)
    {
      v155 = v807[1];
      v156 = (char *)operator new(56 * v153);
      v157 = &v156[v155 - v154];
      v158 = v157;
      if (v155 != v154)
      {
        v159 = &v156[v155 - v154];
        do
        {
          v160 = *(_OWORD *)(v155 - 56);
          v161 = *(_OWORD *)(v155 - 40);
          v162 = *(_OWORD *)(v155 - 24);
          v158 = v159 - 56;
          *(_DWORD *)(v159 - 9) = *(_DWORD *)(v155 - 9);
          *(_OWORD *)(v159 - 24) = v162;
          *(_OWORD *)(v159 - 40) = v161;
          *(_OWORD *)(v159 - 56) = v160;
          v155 -= 56;
          v159 -= 56;
        }
        while (v155 != v154);
      }
      v807[0] = v158;
      v807[1] = v157;
      *(_QWORD *)&v808 = &v156[56 * v153];
      if (v154)
      {
        operator delete(v154);
        v152 = *(_QWORD *)(v762 + 7952);
      }
    }
    v163 = (_QWORD *)v762;
    v164 = *(_QWORD **)v152;
    v165 = *(_OWORD *)(v762 + 11704);
    *(_OWORD *)(v762 + 15096) = *(_OWORD *)(v762 + 11688);
    *(_OWORD *)(v762 + 15112) = v165;
    *(_OWORD *)(v762 + 15128) = *(_OWORD *)(v762 + 11720);
    sub_20F38F148(v762 + 15096, v164);
    v166 = *(void **)(v762 + 496);
    v167 = *(void **)(v762 + 592);
    v168 = cos(*(double *)(v762 + 568) * 0.0174532925);
    v169 = *(char ***)(*(_QWORD *)(v762 + 7952) + 16);
    v171 = *v169;
    v170 = v169[1];
    v172 = **v169;
    if (v172 <= -2)
    {
      do
      {
        v173 = (__clz(__rbit64(((*v171 >> 7) & ~*v171 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v171 = (_QWORD *)((char *)v171 + v173);
        v170 += 32 * v173;
        v172 = *(char *)v171;
      }
      while (v172 < -1);
    }
    if (v172 == 255)
    {
LABEL_389:
      v378 = ((v163[383] - v163[382]) >> 5);
      sub_20F88EBC8((uint64_t)v806, v378);
      sub_20F88EBC8((uint64_t)&v806[1] + 8, v378);
      sub_20F88EBC8((uint64_t)&v805[2] + 8, v378);
      if (v378)
      {
        v379 = 0;
        v769 = v378;
        do
        {
          v380 = (_QWORD *)(*(_QWORD *)&v806[0] + 24 * v379);
          v381 = v380 + 1;
          v382 = (void **)v380[1];
          v383 = 0x4EC4EC4EC4EC4EC5
               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                          - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
          v384 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v382 - *v380) >> 3);
          if (v383 <= v384)
          {
            if (v383 < v384)
            {
              v385 = *v380
                   + 0x6276276276276278
                   * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                              - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
              if (v382 != (void **)v385)
              {
                v386 = (void **)v380[1];
                do
                {
                  v389 = (char *)*(v386 - 3);
                  v386 -= 3;
                  v388 = v389;
                  if (v389)
                  {
                    v390 = (char *)*(v382 - 2);
                    v387 = v388;
                    if (v390 != v388)
                    {
                      v391 = (char *)*(v382 - 2);
                      do
                      {
                        v393 = (void *)*((_QWORD *)v391 - 3);
                        v391 -= 24;
                        v392 = v393;
                        if (v393)
                        {
                          *((_QWORD *)v390 - 2) = v392;
                          operator delete(v392);
                        }
                        v390 = v391;
                      }
                      while (v391 != v388);
                      v387 = *v386;
                    }
                    *(v382 - 2) = v388;
                    operator delete(v387);
                  }
                  v382 = v386;
                }
                while (v386 != (void **)v385);
              }
              *v381 = v385;
              v378 = v769;
            }
          }
          else
          {
            sub_20F41702C((uint64_t)v380, v383 - v384);
          }
          v394 = (_QWORD *)(*((_QWORD *)&v806[1] + 1) + 24 * v379);
          v395 = v394 + 1;
          v396 = (void **)v394[1];
          v397 = 0x4EC4EC4EC4EC4EC5
               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                          - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
          v398 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v396 - *v394) >> 3);
          if (v397 <= v398)
          {
            if (v397 < v398)
            {
              v399 = *v394
                   + 0x6276276276276278
                   * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                              - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
              if (v396 != (void **)v399)
              {
                v400 = (void **)v394[1];
                do
                {
                  v403 = (char *)*(v400 - 3);
                  v400 -= 3;
                  v402 = v403;
                  if (v403)
                  {
                    v404 = (char *)*(v396 - 2);
                    v401 = v402;
                    if (v404 != v402)
                    {
                      v405 = (char *)*(v396 - 2);
                      do
                      {
                        v407 = (void *)*((_QWORD *)v405 - 3);
                        v405 -= 24;
                        v406 = v407;
                        if (v407)
                        {
                          *((_QWORD *)v404 - 2) = v406;
                          operator delete(v406);
                        }
                        v404 = v405;
                      }
                      while (v405 != v402);
                      v401 = *v400;
                    }
                    *(v396 - 2) = v402;
                    operator delete(v401);
                  }
                  v396 = v400;
                }
                while (v400 != (void **)v399);
              }
              *v395 = v399;
              v378 = v769;
            }
          }
          else
          {
            sub_20F41702C((uint64_t)v394, v397 - v398);
          }
          v408 = (_QWORD *)(*((_QWORD *)&v805[2] + 1) + 24 * v379);
          v409 = v408 + 1;
          v410 = (void **)v408[1];
          v411 = 0x4EC4EC4EC4EC4EC5
               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                          - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
          v412 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v410 - *v408) >> 3);
          if (v411 > v412)
          {
            sub_20F41702C((uint64_t)v408, v411 - v412);
          }
          else if (v411 < v412)
          {
            v413 = *v408
                 + 0x6276276276276278
                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 16)
                            - *(_QWORD *)(*(_QWORD *)(v762 + 3056) + 32 * v379 + 8)) >> 7);
            if (v410 != (void **)v413)
            {
              v414 = (void **)v408[1];
              do
              {
                v417 = (char *)*(v414 - 3);
                v414 -= 3;
                v416 = v417;
                if (v417)
                {
                  v418 = (char *)*(v410 - 2);
                  v415 = v416;
                  if (v418 != v416)
                  {
                    v419 = (char *)*(v410 - 2);
                    do
                    {
                      v421 = (void *)*((_QWORD *)v419 - 3);
                      v419 -= 24;
                      v420 = v421;
                      if (v421)
                      {
                        *((_QWORD *)v418 - 2) = v420;
                        operator delete(v420);
                      }
                      v418 = v419;
                    }
                    while (v419 != v416);
                    v415 = *v414;
                  }
                  *(v410 - 2) = v416;
                  operator delete(v415);
                }
                v410 = v414;
              }
              while (v414 != (void **)v413);
            }
            *v409 = v413;
            v378 = v769;
          }
          ++v379;
        }
        while (v379 != v378);
      }
      v145 = v762;
      v422 = *(uint64_t **)(v762 + 12400);
      v423 = *(uint64_t **)(v762 + 12408);
      if (v422 != v423)
      {
        v424 = *(_DWORD *)(*(_QWORD *)(v762 + 2480)
                         + 4 * (((*(_QWORD *)(v762 + 2488) - *(_QWORD *)(v762 + 2480)) >> 2) - 1));
        v747 = v424;
        v745 = *(uint64_t **)(v762 + 12408);
LABEL_441:
        v425 = *v422;
        v426 = *(float32x2_t **)(*v422 + 496);
        v761 = *(float32x2_t **)(*v422 + 504);
        if (v426 != v761)
        {
          v427 = *(float32x2_t **)(*v422 + 496);
          if (v761[-7].i32[0] != v424)
            goto LABEL_440;
          while (v427[1].i32[0] != v424)
          {
            v427 += 8;
            if (v427 == v761)
              goto LABEL_440;
          }
        }
        v771[1] = 0;
        v771[2] = 0;
        v771[0] = &v771[1];
        *(_QWORD *)&v836[8] = 0;
        *(_QWORD *)&v836[16] = 0;
        *(_QWORD *)v836 = &v836[8];
        v844 = 0;
        v845 = 0;
        v843 = &v844;
        v428 = *(_QWORD *)(v145 + 336);
        if (v428)
        {
          v429 = *(_QWORD *)(v425 + 32);
          v430 = (uint8x8_t)vcnt_s8((int8x8_t)v428);
          v430.i16[0] = vaddlv_u8(v430);
          if (v430.u32[0] > 1uLL)
          {
            v431 = *(_QWORD *)(v425 + 32);
            if (v428 <= v429)
              v431 = v429 % v428;
          }
          else
          {
            v431 = ((_DWORD)v428 - 1) & v429;
          }
          v432 = *(uint64_t ***)(*(_QWORD *)(v145 + 328) + 8 * v431);
          if (v432)
          {
            v433 = *v432;
            if (!*v432)
              goto LABEL_474;
            v434 = *(_QWORD *)(v425 + 24);
            if (v430.u32[0] < 2uLL)
            {
              v435 = v428 - 1;
              while (1)
              {
                v439 = v433[1];
                if (v439 == v429)
                {
                  if (v433[2] == v434 && *((_DWORD *)v433 + 6) == (_DWORD)v429)
                    goto LABEL_474;
                }
                else if ((v439 & v435) != v431)
                {
                  goto LABEL_472;
                }
                v433 = (uint64_t *)*v433;
                if (!v433)
                  goto LABEL_474;
              }
            }
            while (1)
            {
              v437 = v433[1];
              if (v437 == v429)
              {
                _ZF = v433[2] == v434 && *((_DWORD *)v433 + 6) == (_DWORD)v429;
                if (_ZF)
                  goto LABEL_474;
              }
              else
              {
                if (v437 >= v428)
                  v437 %= v428;
                if (v437 != v431)
                {
LABEL_472:
                  v433 = 0;
                  goto LABEL_474;
                }
              }
              v433 = (uint64_t *)*v433;
              if (!v433)
                goto LABEL_474;
            }
          }
        }
        v433 = 0;
LABEL_474:
        if (v426 == v761)
          goto LABEL_678;
        v749 = v422;
        v752 = v433;
LABEL_478:
        v441 = (unint64_t)v426[2].u32[0] >> 16;
        v442 = (unsigned __int16)v426[2].i32[0];
        v443 = v442 << 32;
        v444 = v426[4];
        v445 = v771[1];
        v446 = &v771[1];
LABEL_480:
        v447 = v446;
        if (!v445)
        {
LABEL_497:
          v453 = (void **)operator new(0x40uLL);
          v454 = v453;
          v453[4] = (void *)(v443 | v441);
          v453[5] = 0;
          v453[6] = 0;
          v453[7] = 0;
          *v453 = 0;
          v453[1] = 0;
          v453[2] = v446;
          *v447 = v453;
          v455 = v453;
          if (*(_QWORD *)v771[0])
          {
            v771[0] = *(void **)v771[0];
            v455 = *v447;
          }
          v456 = v771[1];
          _ZF = v455 == v771[1];
          *((_BYTE *)v455 + 24) = v455 == v771[1];
          if (!_ZF)
          {
            do
            {
              v457 = v455[2];
              if (*(_BYTE *)(v457 + 24))
                break;
              v458 = *(_QWORD **)(v457 + 16);
              v459 = *v458;
              if (*v458 == v457)
              {
                v462 = v458[1];
                if (!v462 || (v463 = *(unsigned __int8 *)(v462 + 24), v460 = (_BYTE *)(v462 + 24), v463))
                {
                  if (*(_QWORD **)v457 == v455)
                  {
                    *(_BYTE *)(v457 + 24) = 1;
                    *((_BYTE *)v458 + 24) = 0;
                    v466 = *(_QWORD *)(v457 + 8);
                    *v458 = v466;
                    if (v466)
                      goto LABEL_514;
                  }
                  else
                  {
                    v464 = *(uint64_t **)(v457 + 8);
                    v465 = *v464;
                    *(_QWORD *)(v457 + 8) = *v464;
                    if (v465)
                    {
                      *(_QWORD *)(v465 + 16) = v457;
                      v458 = *(_QWORD **)(v457 + 16);
                    }
                    v464[2] = (uint64_t)v458;
                    *(_QWORD *)(*(_QWORD *)(v457 + 16) + 8 * (**(_QWORD **)(v457 + 16) != v457)) = v464;
                    *v464 = v457;
                    *(_QWORD *)(v457 + 16) = v464;
                    v458 = (_QWORD *)v464[2];
                    v457 = *v458;
                    *((_BYTE *)v464 + 24) = 1;
                    *((_BYTE *)v458 + 24) = 0;
                    v466 = *(_QWORD *)(v457 + 8);
                    *v458 = v466;
                    if (v466)
LABEL_514:
                      *(_QWORD *)(v466 + 16) = v458;
                  }
                  *(_QWORD *)(v457 + 16) = v458[2];
                  *(_QWORD *)(v458[2] + 8 * (*(_QWORD *)v458[2] != (_QWORD)v458)) = v457;
                  *(_QWORD *)(v457 + 8) = v458;
LABEL_575:
                  v458[2] = v457;
                  break;
                }
              }
              else if (!v459 || (v461 = *(unsigned __int8 *)(v459 + 24), v460 = (_BYTE *)(v459 + 24), v461))
              {
                if (*(_QWORD **)v457 == v455)
                {
                  v539 = v455[1];
                  *(_QWORD *)v457 = v539;
                  if (v539)
                  {
                    *(_QWORD *)(v539 + 16) = v457;
                    v458 = *(_QWORD **)(v457 + 16);
                  }
                  v455[2] = v458;
                  *(_QWORD *)(*(_QWORD *)(v457 + 16) + 8 * (**(_QWORD **)(v457 + 16) != v457)) = v455;
                  v455[1] = v457;
                  *(_QWORD *)(v457 + 16) = v455;
                  v458 = (_QWORD *)v455[2];
                  *((_BYTE *)v455 + 24) = 1;
                  *((_BYTE *)v458 + 24) = 0;
                  v457 = v458[1];
                  v502 = *(_QWORD **)v457;
                  v458[1] = *(_QWORD *)v457;
                  if (v502)
LABEL_573:
                    v502[2] = v458;
                }
                else
                {
                  *(_BYTE *)(v457 + 24) = 1;
                  *((_BYTE *)v458 + 24) = 0;
                  v457 = v458[1];
                  v502 = *(_QWORD **)v457;
                  v458[1] = *(_QWORD *)v457;
                  if (v502)
                    goto LABEL_573;
                }
                *(_QWORD *)(v457 + 16) = v458[2];
                *(_QWORD *)(v458[2] + 8 * (*(_QWORD *)v458[2] != (_QWORD)v458)) = v457;
                *(_QWORD *)v457 = v458;
                goto LABEL_575;
              }
              *(_BYTE *)(v457 + 24) = 1;
              v455 = v458;
              *((_BYTE *)v458 + 24) = v458 == v456;
              *v460 = 1;
            }
            while (v458 != v456);
          }
          ++v771[2];
          v467 = vcvtq_f64_f32(v444);
          v469 = (float64x2_t *)v453[6];
          v468 = (unint64_t)v453[7];
          v770 = v467;
          if ((unint64_t)v469 < v468)
            goto LABEL_577;
LABEL_517:
          v471 = (char *)v454[5];
          v472 = ((char *)v469 - v471) >> 4;
          v473 = v472 + 1;
          if ((unint64_t)(v472 + 1) >> 60)
            sub_20E867F44();
          v474 = v468 - (_QWORD)v471;
          if (v474 >> 3 > v473)
            v473 = v474 >> 3;
          if ((unint64_t)v474 >= 0x7FFFFFFFFFFFFFF0)
            v475 = 0xFFFFFFFFFFFFFFFLL;
          else
            v475 = v473;
          if (v475)
          {
            if (v475 >> 60)
              sub_20E877A38();
            v476 = (char *)operator new(16 * v475);
            v477 = (float64x2_t *)&v476[16 * v472];
            *v477 = v770;
            f64 = (_OWORD *)v477[1].f64;
            if (v469 == (float64x2_t *)v471)
            {
LABEL_531:
              v454[5] = v477;
              v454[6] = f64;
              v454[7] = &v476[16 * v475];
              if (v469)
                goto LABEL_532;
              goto LABEL_533;
            }
          }
          else
          {
            v476 = 0;
            v477 = (float64x2_t *)(16 * v472);
            v479 = (float64x2_t *)(16 * v472);
            *v479 = v770;
            f64 = (_OWORD *)v479[1].f64;
            if (v469 == (float64x2_t *)v471)
              goto LABEL_531;
          }
          do
          {
            v477[-1] = v469[-1];
            --v477;
            --v469;
          }
          while (v469 != (float64x2_t *)v471);
          v469 = (float64x2_t *)v454[5];
          v454[5] = v477;
          v454[6] = f64;
          v454[7] = &v476[16 * v475];
          if (v469)
LABEL_532:
            operator delete(v469);
LABEL_533:
          v454[6] = f64;
          if (!v752)
            goto LABEL_578;
          goto LABEL_534;
        }
        while (1)
        {
          v446 = (void **)v445;
          v448 = *((_DWORD *)v445 + 8);
          if ((_DWORD)v441 == v448)
          {
            v449 = *((_DWORD *)v446 + 9);
            if (v442 < v449)
              goto LABEL_479;
            v450 = v449 == (_DWORD)v442;
            if (v449 >= v442)
              v451 = 1;
            else
              v451 = -1;
            if (v450)
              v451 = 0;
            if ((v451 & 0x80) == 0)
            {
LABEL_516:
              v454 = v446;
              v467 = vcvtq_f64_f32(v444);
              v470 = v446 + 6;
              v469 = (float64x2_t *)v446[6];
              v468 = (unint64_t)v470[1];
              v770 = v467;
              if ((unint64_t)v469 >= v468)
                goto LABEL_517;
LABEL_577:
              *v469 = v467;
              v454[6] = &v469[1];
              if (!v752)
              {
LABEL_578:
                v503 = v844;
                v504 = &v844;
                v505 = &v844;
                if (!v844)
                {
LABEL_597:
                  v511 = (char **)operator new(0x40uLL);
                  v489 = v511;
                  v511[4] = (char *)(v443 | v441);
                  v511[5] = 0;
                  v511[6] = 0;
                  v511[7] = 0;
                  *v511 = 0;
                  v511[1] = 0;
                  v511[2] = (char *)v504;
                  *v505 = (char *)v511;
                  v512 = (char *)v511;
                  if (*v843)
                  {
                    v843 = (char **)*v843;
                    v512 = *v505;
                  }
                  v513 = v844;
                  v512[24] = v512 == v844;
                  if (v512 == v513)
                    goto LABEL_647;
                  while (1)
                  {
                    v514 = *((_QWORD *)v512 + 2);
                    if (*(_BYTE *)(v514 + 24))
                      goto LABEL_647;
                    v515 = *(char **)(v514 + 16);
                    v516 = *(_QWORD *)v515;
                    if (*(_QWORD *)v515 == v514)
                    {
                      v519 = *((_QWORD *)v515 + 1);
                      if (!v519 || (v520 = *(unsigned __int8 *)(v519 + 24), v517 = (_BYTE *)(v519 + 24), v520))
                      {
                        if (*(char **)v514 == v512)
                        {
                          *(_BYTE *)(v514 + 24) = 1;
                          v515[24] = 0;
                          v523 = *(_QWORD *)(v514 + 8);
                          *(_QWORD *)v515 = v523;
                          if (v523)
                            goto LABEL_613;
                        }
                        else
                        {
                          v521 = *(uint64_t **)(v514 + 8);
                          v522 = *v521;
                          *(_QWORD *)(v514 + 8) = *v521;
                          if (v522)
                          {
                            *(_QWORD *)(v522 + 16) = v514;
                            v515 = *(char **)(v514 + 16);
                          }
                          v521[2] = (uint64_t)v515;
                          *(_QWORD *)(*(_QWORD *)(v514 + 16) + 8 * (**(_QWORD **)(v514 + 16) != v514)) = v521;
                          *v521 = v514;
                          *(_QWORD *)(v514 + 16) = v521;
                          v515 = (char *)v521[2];
                          v514 = *(_QWORD *)v515;
                          *((_BYTE *)v521 + 24) = 1;
                          v515[24] = 0;
                          v523 = *(_QWORD *)(v514 + 8);
                          *(_QWORD *)v515 = v523;
                          if (v523)
LABEL_613:
                            *(_QWORD *)(v523 + 16) = v515;
                        }
                        *(_QWORD *)(v514 + 16) = *((_QWORD *)v515 + 2);
                        *(_QWORD *)(*((_QWORD *)v515 + 2) + 8 * (**((_QWORD **)v515 + 2) != (_QWORD)v515)) = v514;
                        *(_QWORD *)(v514 + 8) = v515;
LABEL_646:
                        *((_QWORD *)v515 + 2) = v514;
LABEL_647:
                        ++v845;
                        v525 = (float64x2_t *)v511[6];
                        v537 = (unint64_t)v511[7];
                        if ((unint64_t)v525 < v537)
                          goto LABEL_476;
LABEL_648:
                        v528 = (float64x2_t **)(v489 + 5);
                        v541 = v489[5];
                        v542 = ((char *)v525 - v541) >> 4;
                        v543 = v542 + 1;
                        if ((unint64_t)(v542 + 1) >> 60)
                          sub_20E867F44();
                        v544 = v537 - (_QWORD)v541;
                        if (v544 >> 3 > v543)
                          v543 = v544 >> 3;
                        if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF0)
                          v533 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v533 = v543;
                        if (v533)
                        {
                          if (v533 >> 60)
                            sub_20E877A38();
                          v534 = (char *)operator new(16 * v533);
                          v535 = &v534[16 * v542];
                          *(float64x2_t *)v535 = v770;
                          v440 = v535 + 16;
                          if (v525 == (float64x2_t *)v541)
                            goto LABEL_661;
                          do
                          {
LABEL_659:
                            *((float64x2_t *)v535 - 1) = v525[-1];
                            v535 -= 16;
                            --v525;
                          }
                          while (v525 != (float64x2_t *)v541);
LABEL_660:
                          v525 = *v528;
                        }
                        else
                        {
                          v534 = 0;
                          v535 = (char *)(16 * v542);
                          v545 = (float64x2_t *)(16 * v542);
                          *v545 = v770;
                          v440 = (char *)&v545[1];
                          if (v525 != (float64x2_t *)v541)
                            goto LABEL_659;
                        }
LABEL_661:
                        v489[5] = v535;
                        v489[6] = v440;
                        v489[7] = &v534[16 * v533];
                        if (v525)
                          operator delete(v525);
                        goto LABEL_477;
                      }
                    }
                    else if (!v516 || (v518 = *(unsigned __int8 *)(v516 + 24), v517 = (_BYTE *)(v516 + 24), v518))
                    {
                      if (*(char **)v514 == v512)
                      {
                        v547 = *((_QWORD *)v512 + 1);
                        *(_QWORD *)v514 = v547;
                        if (v547)
                        {
                          *(_QWORD *)(v547 + 16) = v514;
                          v515 = *(char **)(v514 + 16);
                        }
                        *((_QWORD *)v512 + 2) = v515;
                        *(_QWORD *)(*(_QWORD *)(v514 + 16) + 8 * (**(_QWORD **)(v514 + 16) != v514)) = v512;
                        *((_QWORD *)v512 + 1) = v514;
                        *(_QWORD *)(v514 + 16) = v512;
                        v515 = (char *)*((_QWORD *)v512 + 2);
                        v512[24] = 1;
                        v515[24] = 0;
                        v514 = *((_QWORD *)v515 + 1);
                        v540 = *(char **)v514;
                        *((_QWORD *)v515 + 1) = *(_QWORD *)v514;
                        if (v540)
LABEL_644:
                          *((_QWORD *)v540 + 2) = v515;
                      }
                      else
                      {
                        *(_BYTE *)(v514 + 24) = 1;
                        v515[24] = 0;
                        v514 = *((_QWORD *)v515 + 1);
                        v540 = *(char **)v514;
                        *((_QWORD *)v515 + 1) = *(_QWORD *)v514;
                        if (v540)
                          goto LABEL_644;
                      }
                      *(_QWORD *)(v514 + 16) = *((_QWORD *)v515 + 2);
                      *(_QWORD *)(*((_QWORD *)v515 + 2) + 8 * (**((_QWORD **)v515 + 2) != (_QWORD)v515)) = v514;
                      *(_QWORD *)v514 = v515;
                      goto LABEL_646;
                    }
                    *(_BYTE *)(v514 + 24) = 1;
                    v512 = v515;
                    v515[24] = v515 == v513;
                    *v517 = 1;
                    if (v515 == v513)
                      goto LABEL_647;
                  }
                }
                while (1)
                {
                  v504 = (char **)v503;
                  v506 = *((_DWORD *)v503 + 8);
                  if ((_DWORD)v441 == v506)
                  {
                    v507 = *((_DWORD *)v504 + 9);
                    if (v442 < v507)
                      goto LABEL_580;
                    v508 = v507 == (_DWORD)v442;
                    if (v507 >= v442)
                      v509 = 1;
                    else
                      v509 = -1;
                    if (v508)
                      v509 = 0;
                    if ((v509 & 0x80) == 0)
                    {
LABEL_636:
                      v489 = v504;
                      v538 = (_QWORD **)(v504 + 6);
                      v525 = (float64x2_t *)v504[6];
                      v537 = (unint64_t)v538[1];
                      if ((unint64_t)v525 < v537)
                        goto LABEL_476;
                      goto LABEL_648;
                    }
                  }
                  else
                  {
                    if (v441 < v506)
                    {
LABEL_580:
                      v503 = *v504;
                      v505 = v504;
                      if (!*v504)
                        goto LABEL_597;
                      continue;
                    }
                    if (v506 >= v441)
                      v510 = 1;
                    else
                      v510 = -1;
                    if ((v510 & 0x80) == 0)
                      goto LABEL_636;
                  }
                  v503 = v504[1];
                  if (!v503)
                  {
                    v505 = v504 + 1;
                    goto LABEL_597;
                  }
                }
              }
LABEL_534:
              v480 = *(_QWORD *)&v836[8];
              v481 = &v836[8];
              v482 = (uint64_t **)&v836[8];
              if (!*(_QWORD *)&v836[8])
              {
LABEL_553:
                v488 = (char **)operator new(0x40uLL);
                v489 = v488;
                v488[4] = (char *)(v443 | v441);
                v488[5] = 0;
                v488[6] = 0;
                v488[7] = 0;
                *v488 = 0;
                v488[1] = 0;
                v488[2] = v481;
                *v482 = (uint64_t *)v488;
                v490 = (uint64_t *)v488;
                if (**(_QWORD **)v836)
                {
                  *(_QWORD *)v836 = **(_QWORD **)v836;
                  v490 = *v482;
                }
                v491 = *(uint64_t **)&v836[8];
                *((_BYTE *)v490 + 24) = v490 == *(uint64_t **)&v836[8];
                if (v490 != v491)
                {
                  do
                  {
                    v492 = v490[2];
                    if (*(_BYTE *)(v492 + 24))
                      break;
                    v493 = *(uint64_t **)(v492 + 16);
                    v494 = *v493;
                    if (*v493 == v492)
                    {
                      v497 = v493[1];
                      if (!v497 || (v498 = *(unsigned __int8 *)(v497 + 24), v495 = (_BYTE *)(v497 + 24), v498))
                      {
                        if (*(uint64_t **)v492 == v490)
                        {
                          *(_BYTE *)(v492 + 24) = 1;
                          *((_BYTE *)v493 + 24) = 0;
                          v501 = *(_QWORD *)(v492 + 8);
                          *v493 = v501;
                          if (v501)
                            goto LABEL_569;
                        }
                        else
                        {
                          v499 = *(uint64_t **)(v492 + 8);
                          v500 = *v499;
                          *(_QWORD *)(v492 + 8) = *v499;
                          if (v500)
                          {
                            *(_QWORD *)(v500 + 16) = v492;
                            v493 = *(uint64_t **)(v492 + 16);
                          }
                          v499[2] = (uint64_t)v493;
                          *(_QWORD *)(*(_QWORD *)(v492 + 16) + 8 * (**(_QWORD **)(v492 + 16) != v492)) = v499;
                          *v499 = v492;
                          *(_QWORD *)(v492 + 16) = v499;
                          v493 = (uint64_t *)v499[2];
                          v492 = *v493;
                          *((_BYTE *)v499 + 24) = 1;
                          *((_BYTE *)v493 + 24) = 0;
                          v501 = *(_QWORD *)(v492 + 8);
                          *v493 = v501;
                          if (v501)
LABEL_569:
                            *(_QWORD *)(v501 + 16) = v493;
                        }
                        *(_QWORD *)(v492 + 16) = v493[2];
                        *(_QWORD *)(v493[2] + 8 * (*(_QWORD *)v493[2] != (_QWORD)v493)) = v492;
                        *(_QWORD *)(v492 + 8) = v493;
LABEL_621:
                        v493[2] = v492;
                        break;
                      }
                    }
                    else if (!v494 || (v496 = *(unsigned __int8 *)(v494 + 24), v495 = (_BYTE *)(v494 + 24), v496))
                    {
                      if (*(uint64_t **)v492 == v490)
                      {
                        v546 = v490[1];
                        *(_QWORD *)v492 = v546;
                        if (v546)
                        {
                          *(_QWORD *)(v546 + 16) = v492;
                          v493 = *(uint64_t **)(v492 + 16);
                        }
                        v490[2] = (uint64_t)v493;
                        *(_QWORD *)(*(_QWORD *)(v492 + 16) + 8 * (**(_QWORD **)(v492 + 16) != v492)) = v490;
                        v490[1] = v492;
                        *(_QWORD *)(v492 + 16) = v490;
                        v493 = (uint64_t *)v490[2];
                        *((_BYTE *)v490 + 24) = 1;
                        *((_BYTE *)v493 + 24) = 0;
                        v492 = v493[1];
                        v527 = *(uint64_t **)v492;
                        v493[1] = *(_QWORD *)v492;
                        if (v527)
LABEL_619:
                          v527[2] = (uint64_t)v493;
                      }
                      else
                      {
                        *(_BYTE *)(v492 + 24) = 1;
                        *((_BYTE *)v493 + 24) = 0;
                        v492 = v493[1];
                        v527 = *(uint64_t **)v492;
                        v493[1] = *(_QWORD *)v492;
                        if (v527)
                          goto LABEL_619;
                      }
                      *(_QWORD *)(v492 + 16) = v493[2];
                      *(_QWORD *)(v493[2] + 8 * (*(_QWORD *)v493[2] != (_QWORD)v493)) = v492;
                      *(_QWORD *)v492 = v493;
                      goto LABEL_621;
                    }
                    *(_BYTE *)(v492 + 24) = 1;
                    v490 = v493;
                    *((_BYTE *)v493 + 24) = v493 == v491;
                    *v495 = 1;
                  }
                  while (v493 != v491);
                }
                ++*(_QWORD *)&v836[16];
                v525 = (float64x2_t *)v488[6];
                v524 = (unint64_t)v488[7];
                if ((unint64_t)v525 < v524)
                  goto LABEL_476;
LABEL_623:
                v528 = (float64x2_t **)(v489 + 5);
                v529 = v489[5];
                v530 = ((char *)v525 - v529) >> 4;
                v531 = v530 + 1;
                if ((unint64_t)(v530 + 1) >> 60)
                  sub_20E867F44();
                v532 = v524 - (_QWORD)v529;
                if (v532 >> 3 > v531)
                  v531 = v532 >> 3;
                if ((unint64_t)v532 >= 0x7FFFFFFFFFFFFFF0)
                  v533 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v533 = v531;
                if (v533)
                {
                  if (v533 >> 60)
                    sub_20E877A38();
                  v534 = (char *)operator new(16 * v533);
                  v535 = &v534[16 * v530];
                  *(float64x2_t *)v535 = v770;
                  v440 = v535 + 16;
                  if (v525 == (float64x2_t *)v529)
                    goto LABEL_661;
                }
                else
                {
                  v534 = 0;
                  v535 = (char *)(16 * v530);
                  v536 = (float64x2_t *)(16 * v530);
                  *v536 = v770;
                  v440 = (char *)&v536[1];
                  if (v525 == (float64x2_t *)v529)
                    goto LABEL_661;
                }
                do
                {
                  *((float64x2_t *)v535 - 1) = v525[-1];
                  v535 -= 16;
                  --v525;
                }
                while (v525 != (float64x2_t *)v529);
                goto LABEL_660;
              }
              while (2)
              {
                v481 = (_BYTE *)v480;
                v483 = *(_DWORD *)(v480 + 32);
                if ((_DWORD)v441 != v483)
                {
                  if (v441 < v483)
                  {
LABEL_536:
                    v480 = *(_QWORD *)v481;
                    v482 = (uint64_t **)v481;
                    if (!*(_QWORD *)v481)
                      goto LABEL_553;
                    continue;
                  }
                  if (v483 >= v441)
                    v487 = 1;
                  else
                    v487 = -1;
                  if ((v487 & 0x80) == 0)
                    goto LABEL_615;
LABEL_551:
                  v480 = *((_QWORD *)v481 + 1);
                  if (!v480)
                  {
                    v482 = (uint64_t **)(v481 + 8);
                    goto LABEL_553;
                  }
                  continue;
                }
                break;
              }
              v484 = *((_DWORD *)v481 + 9);
              if (v442 < v484)
                goto LABEL_536;
              v485 = v484 == (_DWORD)v442;
              if (v484 >= v442)
                v486 = 1;
              else
                v486 = -1;
              if (v485)
                v486 = 0;
              if (v486 < 0)
                goto LABEL_551;
LABEL_615:
              v489 = (char **)v481;
              v526 = v481 + 48;
              v525 = (float64x2_t *)*((_QWORD *)v481 + 6);
              v524 = *((_QWORD *)v526 + 1);
              if ((unint64_t)v525 >= v524)
                goto LABEL_623;
LABEL_476:
              *v525 = v770;
              v440 = (char *)&v525[1];
LABEL_477:
              v489[6] = v440;
              v426 += 8;
              if (v426 != v761)
                goto LABEL_478;
              v548 = (void **)v771[0];
              v422 = v749;
              v423 = v745;
              if (v771[0] != &v771[1])
              {
                do
                {
                  v579 = *((_DWORD *)v548 + 9);
                  v580 = *(_QWORD *)(*((_QWORD *)&v805[2] + 1) + 24 * *((unsigned int *)v548 + 8));
                  v581 = v580 + 24 * v579;
                  v583 = *(_QWORD **)(v581 + 8);
                  v582 = *(_QWORD *)(v581 + 16);
                  v584 = (char **)(v581 + 8);
                  if ((unint64_t)v583 >= v582)
                  {
                    v590 = sub_20FB43288((char **)(v580 + 24 * v579), v548[5], (uint64_t)v548[6]);
                  }
                  else
                  {
                    *v583 = 0;
                    v583[1] = 0;
                    v583[2] = 0;
                    v586 = v548[5];
                    v585 = v548[6];
                    v587 = v585 - v586;
                    if (v585 != v586)
                    {
                      if (v587 < 0)
                        sub_20E867F44();
                      v588 = (char *)operator new(v585 - v586);
                      *v583 = v588;
                      v583[1] = v588;
                      v583[2] = &v588[16 * (v587 >> 4)];
                      v589 = v587 & 0xFFFFFFFFFFFFFFF0;
                      memcpy(v588, v586, v589);
                      v583[1] = &v588[v589];
                    }
                    v590 = (char *)(v583 + 3);
                    *v584 = (char *)(v583 + 3);
                  }
                  *v584 = v590;
                  v591 = (void **)v548[1];
                  if (v591)
                  {
                    do
                    {
                      v592 = v591;
                      v591 = (void **)*v591;
                    }
                    while (v591);
                  }
                  else
                  {
                    do
                    {
                      v592 = (void **)v548[2];
                      _ZF = *v592 == v548;
                      v548 = v592;
                    }
                    while (!_ZF);
                  }
                  v548 = v592;
                }
                while (v592 != &v771[1]);
              }
LABEL_678:
              v549 = *(_BYTE **)v836;
              if (*(_BYTE **)v836 != &v836[8])
              {
                do
                {
                  v551 = *((_DWORD *)v549 + 9);
                  v552 = *(_QWORD *)(*(_QWORD *)&v806[0] + 24 * *((unsigned int *)v549 + 8));
                  v553 = v552 + 24 * v551;
                  v555 = *(_QWORD **)(v553 + 8);
                  v554 = *(_QWORD *)(v553 + 16);
                  v556 = (char **)(v553 + 8);
                  if ((unint64_t)v555 >= v554)
                  {
                    v562 = sub_20FB43288((char **)(v552 + 24 * v551), *((const void **)v549 + 5), *((_QWORD *)v549 + 6));
                  }
                  else
                  {
                    *v555 = 0;
                    v555[1] = 0;
                    v555[2] = 0;
                    v558 = (_BYTE *)*((_QWORD *)v549 + 5);
                    v557 = (_BYTE *)*((_QWORD *)v549 + 6);
                    v559 = v557 - v558;
                    if (v557 != v558)
                    {
                      if (v559 < 0)
                        sub_20E867F44();
                      v560 = (char *)operator new(v557 - v558);
                      *v555 = v560;
                      v555[1] = v560;
                      v555[2] = &v560[16 * (v559 >> 4)];
                      v561 = v559 & 0xFFFFFFFFFFFFFFF0;
                      memcpy(v560, v558, v561);
                      v555[1] = &v560[v561];
                    }
                    v562 = (char *)(v555 + 3);
                    *v556 = (char *)(v555 + 3);
                  }
                  *v556 = v562;
                  v563 = (_QWORD *)*((_QWORD *)v549 + 1);
                  if (v563)
                  {
                    do
                    {
                      v564 = v563;
                      v563 = (_QWORD *)*v563;
                    }
                    while (v563);
                  }
                  else
                  {
                    do
                    {
                      v564 = (_BYTE *)*((_QWORD *)v549 + 2);
                      _ZF = *(_QWORD *)v564 == (_QWORD)v549;
                      v549 = v564;
                    }
                    while (!_ZF);
                  }
                  v549 = v564;
                }
                while (v564 != &v836[8]);
              }
              v550 = (char *)v843;
              if (v843 != &v844)
              {
                do
                {
                  v565 = *((_DWORD *)v550 + 9);
                  v566 = *(_QWORD *)(*((_QWORD *)&v806[1] + 1) + 24 * *((unsigned int *)v550 + 8));
                  v567 = v566 + 24 * v565;
                  v569 = *(_QWORD **)(v567 + 8);
                  v568 = *(_QWORD *)(v567 + 16);
                  v570 = (char **)(v567 + 8);
                  if ((unint64_t)v569 >= v568)
                  {
                    v576 = sub_20FB43288((char **)(v566 + 24 * v565), *((const void **)v550 + 5), *((_QWORD *)v550 + 6));
                  }
                  else
                  {
                    *v569 = 0;
                    v569[1] = 0;
                    v569[2] = 0;
                    v572 = (_BYTE *)*((_QWORD *)v550 + 5);
                    v571 = (_BYTE *)*((_QWORD *)v550 + 6);
                    v573 = v571 - v572;
                    if (v571 != v572)
                    {
                      if (v573 < 0)
                        sub_20E867F44();
                      v574 = (char *)operator new(v571 - v572);
                      *v569 = v574;
                      v569[1] = v574;
                      v569[2] = &v574[16 * (v573 >> 4)];
                      v575 = v573 & 0xFFFFFFFFFFFFFFF0;
                      memcpy(v574, v572, v575);
                      v569[1] = &v574[v575];
                    }
                    v576 = (char *)(v569 + 3);
                    *v570 = (char *)(v569 + 3);
                  }
                  *v570 = v576;
                  v577 = (char *)*((_QWORD *)v550 + 1);
                  if (v577)
                  {
                    do
                    {
                      v578 = (char **)v577;
                      v577 = *(char **)v577;
                    }
                    while (v577);
                  }
                  else
                  {
                    do
                    {
                      v578 = (char **)*((_QWORD *)v550 + 2);
                      _ZF = *v578 == v550;
                      v550 = (char *)v578;
                    }
                    while (!_ZF);
                  }
                  v550 = (char *)v578;
                }
                while (v578 != &v844);
              }
              sub_20EDEE790(v844);
              sub_20EDEE790(*(_QWORD **)&v836[8]);
              sub_20EDEE790((_QWORD *)v771[1]);
              v145 = v762;
              v424 = v747;
LABEL_440:
              if (++v422 == v423)
                goto LABEL_720;
              goto LABEL_441;
            }
          }
          else
          {
            if (v441 < v448)
            {
LABEL_479:
              v445 = *v446;
              goto LABEL_480;
            }
            if (v448 >= v441)
              v452 = 1;
            else
              v452 = -1;
            if ((v452 & 0x80) == 0)
              goto LABEL_516;
          }
          v445 = v446[1];
          if (!v445)
          {
            v447 = v446 + 1;
            goto LABEL_497;
          }
        }
      }
      goto LABEL_720;
    }
    v744 = *(_DWORD *)(v762 + 1784);
    v174 = *(double *)(v762 + 616) * *(double *)(v762 + 616);
LABEL_141:
    v175 = *((_QWORD *)v170 + 2);
    if (*(_BYTE *)(v175 + 488))
      v176 = v175 + 40;
    else
      v176 = 0;
    v177 = (void **)(v176 + 8);
    v178 = *((_QWORD *)v170 + 2);
    v179 = *(_QWORD *)(v178 + 496);
    v180 = *(_QWORD *)(v178 + 504);
    if (v179 != v180)
    {
      while (*(_QWORD *)v179 || *(_DWORD *)(v179 + 8) != i)
      {
        v179 += 64;
        if (v179 == v180)
          goto LABEL_236;
      }
    }
    if (v179 != v180)
    {
      v766 = (void **)(v176 + 8);
      v181 = *(_QWORD *)(v178 + 24);
      v182 = *(_DWORD *)(v178 + 32);
      LODWORD(v843) = 0;
      BYTE4(v843) = 0;
      v844 = 0;
      LODWORD(v845) = 0;
      BYTE4(v845) = 1;
      *(_WORD *)((char *)&v771[5] + 5) = v786;
      HIBYTE(v771[5]) = v787;
      v841 = v786;
      v842 = v787;
      v771[0] = v166;
      v771[1] = v167;
      v771[2] = *(void **)&v168;
      v771[3] = *(void **)&v174;
      v771[4] = (void *)0x7FEFFFFFFFFFFFFFLL;
      LODWORD(v771[5]) = v744;
      BYTE4(v771[5]) = 1;
      *(_QWORD *)v836 = v166;
      *(_QWORD *)&v836[8] = v167;
      *(long double *)&v836[16] = v168;
      v837 = v174;
      v838 = 0x7FEFFFFFFFFFFFFFLL;
      v839 = v744;
      v840 = 1;
      sub_20FB99654(v762 + 15096, v178, (uint64_t)v771, (uint64_t)v836, (uint64_t)&v843);
      v183 = *((_QWORD *)v170 + 2);
      v184 = *(_QWORD *)(v183 + 496);
      v185 = *(_QWORD *)(v183 + 504);
      v186 = v184;
      if (v185 != v184)
      {
        v187 = (v185 - v184) >> 6;
        v186 = *(_QWORD *)(v183 + 496);
        do
        {
          v188 = v187 >> 1;
          v189 = v186 + (v187 >> 1 << 6);
          if (!*(_DWORD *)(v189 + 16) && !*(_QWORD *)v189)
          {
            _CF = *(_DWORD *)(v189 + 8) >= i;
            v191 = v189 + 64;
            v192 = v187 + ~v188;
            if (!_CF)
            {
              v188 = v192;
              v186 = v191;
            }
          }
          v187 = v188;
        }
        while (v188);
      }
      if (v186 == v185 || *(_DWORD *)(v186 + 16) || *(_QWORD *)v186 || *(_DWORD *)(v186 + 8) != i)
      {
        v757 = 0;
      }
      else
      {
        v193 = v163[382];
        v194 = *(_QWORD *)(v193 + 8);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v193 + 16) - v194) >> 7)) < 2)
        {
          v757 = 0;
        }
        else
        {
          v195 = *(double *)(v194 + 1728);
          _Q1 = *(_OWORD *)(v194 + 1712);
          _D3 = *(_QWORD *)(v194 + 8);
          __asm { FMLA            D16, D3, V1.D[1] }
          _D5 = *(_QWORD *)(v194 + 32);
          __asm { FMLA            D3, D5, V1.D[1] }
          _D3 = _D3 + v195 * *(double *)(v194 + 40);
          _D5 = *(_QWORD *)(v194 + 56);
          __asm { FMLA            D4, D5, V1.D[1] }
          v206 = _D4 + v195 * *(double *)(v194 + 64);
          _Q1 = *(float64x2_t *)(v186 + 40);
          _D5 = *(_QWORD *)(v186 + 48);
          __asm { FMLA            D4, D5, V1.D[1] }
          v210 = 1.0 / sqrt(_D4 + 1.0);
          _Q1 = vmulq_n_f64(_Q1, v210);
          __asm { FMLA            D2, D3, V1.D[1] }
          v213 = acos(fmin(_D2 + v206 * v210, 1.0));
          if (*(_BYTE *)(v194 + 3200))
            v214 = v194 + 1760;
          else
            v214 = 0;
          v215 = *(_DWORD *)(v214 + 992);
          if (v215 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_824;
            }
            v215 = *(_DWORD *)(v214 + 992);
          }
          if (!v215)
            goto LABEL_823;
          if (v215 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_824;
            }
            v215 = *(_DWORD *)(v214 + 992);
          }
          if (!v215)
          {
LABEL_823:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_824:
            abort();
          }
          v757 = v213 * 57.2957795 < *(double *)(v214 + 144);
          v183 = *((_QWORD *)v170 + 2);
          v184 = *(_QWORD *)(v183 + 496);
          v185 = *(_QWORD *)(v183 + 504);
        }
      }
      v216 = *(_DWORD *)(v184 + 16) != *(_DWORD *)(v185 - 48);
      v217 = (_BYTE *)(v183 + 40);
      if (!*(_BYTE *)(v183 + 488))
        v217 = 0;
      if (v217[424] && v217[432])
      {
        v218 = (int8x8_t)v163[1768];
        if (v218)
        {
          v219 = 0x9DDFEA08EB382D69 * (((8 * v183) + 8) ^ HIDWORD(v183));
          v220 = 0x9DDFEA08EB382D69 * (HIDWORD(v183) ^ (v219 >> 47) ^ v219);
          v221 = 0x9DDFEA08EB382D69 * (v220 ^ (v220 >> 47));
          v222 = (uint8x8_t)vcnt_s8(v218);
          v222.i16[0] = vaddlv_u8(v222);
          if (v222.u32[0] > 1uLL)
          {
            v223 = v221;
            if (v221 >= *(_QWORD *)&v218)
              v223 = v221 % *(_QWORD *)&v218;
          }
          else
          {
            v223 = (*(_QWORD *)&v218 - 1) & v221;
          }
          v224 = *(_QWORD **)(v163[1767] + 8 * v223);
          if (v224)
          {
            v224 = (_QWORD *)*v224;
            if (v224)
            {
              if (v222.u32[0] < 2uLL)
              {
                v225 = *(_QWORD *)&v218 - 1;
                while (1)
                {
                  v227 = v224[1];
                  if (v221 == v227)
                  {
                    if (v224[2] == v183)
                      goto LABEL_201;
                  }
                  else if ((v227 & v225) != v223)
                  {
                    goto LABEL_200;
                  }
                  v224 = (_QWORD *)*v224;
                  if (!v224)
                    goto LABEL_201;
                }
              }
              do
              {
                v226 = v224[1];
                if (v221 == v226)
                {
                  if (v224[2] == v183)
                    break;
                }
                else
                {
                  if (v226 >= *(_QWORD *)&v218)
                    v226 %= *(_QWORD *)&v218;
                  if (v226 != v223)
                    goto LABEL_200;
                }
                v224 = (_QWORD *)*v224;
              }
              while (v224);
            }
          }
        }
        else
        {
LABEL_200:
          v224 = 0;
        }
LABEL_201:
        v750 = v224 == 0;
      }
      else
      {
        v750 = 0;
      }
      v746 = v217[392];
      v748 = v217[393];
      v228 = acos(*(long double *)&v844);
      v229 = acosf(*(float *)&v845);
      v230 = v163[1550];
      v231 = v163[1551];
      if (v230 != v231)
      {
        while (v181 != *(_QWORD *)(*(_QWORD *)v230 + 24) || v182 != *(_DWORD *)(*(_QWORD *)v230 + 32))
        {
          v230 += 8;
          if (v230 == v231)
          {
            v230 = v163[1551];
            break;
          }
        }
      }
      v232 = v230 != v231;
      v233 = v163[46];
      v234 = v163[47];
      v753 = v216;
      if (v233 != v234)
      {
        while (v181 != *(_QWORD *)v233 || *(_DWORD *)(v233 + 8) != v182)
        {
          v233 += 16;
          if (v233 == v234)
          {
            v233 = v163[47];
            break;
          }
        }
      }
      v235 = v228 * 57.2957795;
      v236 = (float)(v229 * 57.296);
      v237 = v233 != v234;
      v238 = (char *)v807[1];
      if (v807[1] >= (void *)v808)
      {
        v240 = (char *)v807[0];
        v241 = 0x6DB6DB6DB6DB6DB7 * (((char *)v807[1] - (char *)v807[0]) >> 3);
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) > 0x492492492492492)
          sub_20E867F44();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v808 - (unint64_t)v807[0]) >> 3) > v242)
          v242 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v808 - (unint64_t)v807[0]) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v808 - (unint64_t)v807[0]) >> 3)) >= 0x249249249249249)
          v243 = 0x492492492492492;
        else
          v243 = v242;
        if (v243)
        {
          v743 = v176;
          if (v243 > 0x492492492492492)
            sub_20E877A38();
          v244 = v237;
          v245 = v182;
          v246 = v232;
          v247 = v243;
          v248 = (char *)operator new(56 * v243);
          v232 = v246;
          v182 = v245;
          v237 = v244;
          v176 = v743;
          v243 = v247;
        }
        else
        {
          v248 = 0;
        }
        v249 = &v248[56 * v241];
        *(_QWORD *)v249 = v181;
        *((_DWORD *)v249 + 2) = v182;
        *((double *)v249 + 2) = v235;
        *((double *)v249 + 3) = v236;
        v249[32] = v757;
        v249[33] = v232;
        v249[34] = v237;
        v249[35] = 0;
        v249[36] = v753;
        *((_QWORD *)v249 + 5) = 0;
        v249[48] = v750;
        v249[49] = v746;
        v249[50] = v748;
        v250 = v249;
        if (v238 == v240)
        {
          v163 = (_QWORD *)v762;
          i = v764;
          v177 = v766;
        }
        else
        {
          v163 = (_QWORD *)v762;
          i = v764;
          v177 = v766;
          do
          {
            v251 = *(_OWORD *)(v238 - 56);
            v252 = *(_OWORD *)(v238 - 40);
            v253 = *(_OWORD *)(v238 - 24);
            *(_DWORD *)(v250 - 9) = *(_DWORD *)(v238 - 9);
            *(_OWORD *)(v250 - 24) = v253;
            *(_OWORD *)(v250 - 40) = v252;
            *(_OWORD *)(v250 - 56) = v251;
            v250 -= 56;
            v238 -= 56;
          }
          while (v238 != v240);
          v238 = (char *)v807[0];
        }
        v807[0] = v250;
        v239 = v249 + 56;
        v807[1] = v249 + 56;
        *(_QWORD *)&v808 = &v248[56 * v243];
        if (v238)
          operator delete(v238);
      }
      else
      {
        *(_QWORD *)v807[1] = v181;
        *((_DWORD *)v238 + 2) = v182;
        *((double *)v238 + 2) = v235;
        *((double *)v238 + 3) = v236;
        v238[32] = v757;
        v238[33] = v232;
        v238[34] = v237;
        v238[35] = 0;
        v238[36] = v753;
        *((_QWORD *)v238 + 5) = 0;
        v238[48] = v750;
        v238[49] = v746;
        v239 = v238 + 56;
        v238[50] = v748;
        v163 = (_QWORD *)v762;
        v177 = (void **)(v176 + 8);
      }
      v807[1] = v239;
    }
LABEL_236:
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176))
      goto LABEL_279;
    *(_QWORD *)&v772[8] = 0;
    *(_QWORD *)&v772[16] = 0;
    *(_DWORD *)&v772[24] = -1;
    LOBYTE(v773.f64[0]) = 0;
    v778 = 0;
    v784 = 0;
    v785 = 0;
    v783 = 0;
    v780 = 0;
    v781 = 0;
    v779 = 0;
    v782 = 0;
    v254 = *(_OWORD *)v177;
    v771[2] = v177[2];
    *(_OWORD *)v771 = v254;
    *(_OWORD *)&v771[3] = *(_OWORD *)(v176 + 64);
    v771[5] = *(void **)(v176 + 80);
    *(_DWORD *)v772 = *(_QWORD *)(*((_QWORD *)v170 + 2) + 32);
    v255 = *(_OWORD *)(v176 + 32);
    *(_DWORD *)&v772[24] = *(_DWORD *)(v176 + 48);
    *(_OWORD *)&v772[8] = v255;
    v256 = *((_QWORD *)v170 + 2);
    v257 = *(__int128 **)(v256 + 496);
    v258 = *(__int128 **)(v256 + 504);
    v843 = 0;
    v844 = 0;
    v845 = 0;
    v259 = (char *)v258 - (char *)v257;
    if (v258 == v257)
    {
      v271 = 0;
      v261 = 0;
      v272 = 0;
      goto LABEL_262;
    }
    if (v259 < 0)
      sub_20E867F44();
    v260 = v259 >> 6;
    v261 = (char *)operator new(24 * (v259 >> 6));
    v843 = (char **)v261;
    v844 = v261;
    v845 = &v261[24 * v260];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          *(_OWORD *)v836 = *v257;
          *(_QWORD *)&v836[16] = *((_QWORD *)v257 + 2);
          if (v261 >= v845)
            break;
          v262 = *v257;
          *((_QWORD *)v261 + 2) = *((_QWORD *)v257 + 2);
          *(_OWORD *)v261 = v262;
          v261 += 24;
          v844 = v261;
          v257 += 4;
          if (v257 == v258)
            goto LABEL_259;
        }
        v263 = (char *)v843;
        v264 = 0xAAAAAAAAAAAAAAABLL * ((v261 - (char *)v843) >> 3);
        v265 = v264 + 1;
        if (v264 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((v845 - (char *)v843) >> 3) > v265)
          v265 = 0x5555555555555556 * ((v845 - (char *)v843) >> 3);
        v266 = 0xAAAAAAAAAAAAAAABLL * ((v845 - (char *)v843) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v265;
        if (v266)
        {
          if (v266 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v267 = (char *)operator new(24 * v266);
        }
        else
        {
          v267 = 0;
        }
        v268 = &v267[24 * v264];
        *(_OWORD *)v268 = *(_OWORD *)v836;
        *((_QWORD *)v268 + 2) = *(_QWORD *)&v836[16];
        v269 = v268 + 24;
        if (v261 != v263)
          break;
        v843 = (char **)v268;
        v844 = v268 + 24;
        v845 = &v267[24 * v266];
LABEL_258:
        operator delete(v261);
        v261 = v269;
        v844 = v269;
        v257 += 4;
        if (v257 == v258)
        {
LABEL_259:
          v271 = v843;
          v272 = v845;
          if (v779)
            operator delete(v779);
LABEL_262:
          v779 = v271;
          v780 = v261;
          v781 = v272;
          v273 = *((_QWORD *)v170 + 2);
          v274 = *(_DWORD *)(v273 + 520);
          LOBYTE(v782) = v274 == 2;
          HIBYTE(v782) = v274 == 1;
          v276 = *(float32x2_t **)(v273 + 496);
          v275 = *(float32x2_t **)(v273 + 504);
          v767 = v275;
          if (v276 == v275)
          {
LABEL_263:
            v277 = *(char **)&v805[0];
            if (*(_QWORD *)&v805[0] >= *((_QWORD *)&v805[0] + 1))
            {
              v299 = (char *)v804[1];
              v300 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)&v805[0] - (unint64_t)v804[1]) >> 3);
              v301 = v300 + 1;
              if (v300 + 1 > 0x12F684BDA12F684)
                sub_20E867F44();
              if (0x97B425ED097B426 * ((uint64_t)(*((_QWORD *)&v805[0] + 1) - (unint64_t)v804[1]) >> 3) > v301)
                v301 = 0x97B425ED097B426 * ((uint64_t)(*((_QWORD *)&v805[0] + 1) - (unint64_t)v804[1]) >> 3);
              if (0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)&v805[0] + 1) - (unint64_t)v804[1]) >> 3) >= 0x97B425ED097B42)
                v302 = 0x12F684BDA12F684;
              else
                v302 = v301;
              v838 = (uint64_t)v805 + 8;
              if (v302)
              {
                if (v302 > 0x12F684BDA12F684)
                  sub_20E877A38();
                v303 = (char *)operator new(216 * v302);
              }
              else
              {
                v303 = 0;
              }
              v343 = &v303[216 * v300];
              *(_QWORD *)v836 = v303;
              *(_QWORD *)&v836[8] = v343;
              *(_QWORD *)&v836[16] = v343;
              *(_QWORD *)&v837 = &v303[216 * v302];
              v751 = v837;
              *(_OWORD *)v343 = *(_OWORD *)v771;
              *((void **)v343 + 2) = v771[2];
              *(_OWORD *)(v343 + 24) = *(_OWORD *)&v771[3];
              *((void **)v343 + 5) = v771[5];
              *((_OWORD *)v343 + 3) = *(_OWORD *)v772;
              *(_OWORD *)(v343 + 60) = *(_OWORD *)&v772[12];
              v343[80] = 0;
              v343[152] = 0;
              if (v778)
              {
                v344 = v776;
                *((float64x2_t *)v343 + 7) = v775;
                *((_OWORD *)v343 + 8) = v344;
                *((_QWORD *)v343 + 18) = v777;
                v345 = v774;
                *((float64x2_t *)v343 + 5) = v773;
                *((float64x2_t *)v343 + 6) = v345;
                v343[152] = 1;
              }
              v759 = v300;
              v346 = &v303[216 * v300];
              *((_QWORD *)v346 + 20) = 0;
              v346 += 160;
              *((_QWORD *)v346 + 1) = 0;
              v768 = (char **)(v346 + 8);
              v755 = v346;
              *((_QWORD *)v346 + 2) = 0;
              v347 = (char **)(v346 + 16);
              v348 = v779;
              v349 = v780 - (_BYTE *)v779;
              if (v780 != v779)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v349 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v350 = (char *)operator new(v780 - (_BYTE *)v779);
                *(_QWORD *)v755 = v350;
                *v768 = v350;
                v351 = &v350[8 * (v349 >> 3)];
                *v347 = v351;
                memcpy(v350, v348, v349 - 4);
                *v768 = v351;
              }
              v352 = &v303[216 * v759];
              v353 = v782;
              *((_QWORD *)v352 + 24) = 0;
              v354 = v352 + 192;
              *((_WORD *)v354 - 4) = v353;
              v354[1] = 0;
              v760 = v354 + 1;
              v354[2] = 0;
              v355 = v783;
              v356 = v784;
              v357 = v784 - (_BYTE *)v783;
              if (v784 != v783)
              {
                if (v357 < 0)
                  sub_20E867F44();
                v358 = (char *)operator new(v784 - (_BYTE *)v783);
                v359 = 0;
                *v354 = v358;
                *v760 = v358;
                v354[2] = &v358[32 * (v357 >> 5)];
                do
                {
                  v360 = &v355[v359];
                  v361 = &v358[v359];
                  *(_DWORD *)v361 = *(_DWORD *)&v355[v359];
                  *(_OWORD *)(v361 + 8) = *(_OWORD *)&v355[v359 + 8];
                  v361[24] = v355[v359 + 24];
                  v359 += 32;
                }
                while (v360 + 32 != v356);
                *v760 = &v358[v359];
              }
              if (v277 == v299)
              {
                v804[1] = v343;
                *(_QWORD *)&v805[0] = v343 + 216;
                *((double *)v805 + 1) = v751;
                i = v764;
              }
              else
              {
                v362 = 0;
                do
                {
                  v363 = &v343[v362];
                  v364 = &v277[v362];
                  v365 = *(_OWORD *)&v277[v362 - 216];
                  *((_QWORD *)v363 - 25) = *(_QWORD *)&v277[v362 - 200];
                  *(_OWORD *)(v363 - 216) = v365;
                  v366 = *(_OWORD *)&v277[v362 - 192];
                  *((_QWORD *)v363 - 22) = *(_QWORD *)&v277[v362 - 176];
                  *((_OWORD *)v363 - 12) = v366;
                  v367 = *(_OWORD *)&v277[v362 - 168];
                  *(_OWORD *)(v363 - 156) = *(_OWORD *)&v277[v362 - 156];
                  *(_OWORD *)(v363 - 168) = v367;
                  v343[v362 - 136] = 0;
                  *(v363 - 64) = 0;
                  if (v277[v362 - 64])
                  {
                    *(_OWORD *)&v343[v362 - 136] = *(_OWORD *)(v364 - 136);
                    v368 = *(_OWORD *)(v364 - 120);
                    v369 = *(_OWORD *)(v364 - 104);
                    v370 = *(_OWORD *)(v364 - 88);
                    *(_QWORD *)&v343[v362 - 72] = *((_QWORD *)v364 - 9);
                    *(_OWORD *)&v343[v362 - 104] = v369;
                    *(_OWORD *)&v343[v362 - 88] = v370;
                    *(_OWORD *)&v343[v362 - 120] = v368;
                    *(v363 - 64) = 1;
                  }
                  *((_QWORD *)v363 - 7) = 0;
                  *((_QWORD *)v363 - 6) = 0;
                  *((_QWORD *)v363 - 5) = 0;
                  *(_OWORD *)(v363 - 56) = *(_OWORD *)(v364 - 56);
                  *((_QWORD *)v363 - 5) = *((_QWORD *)v364 - 5);
                  *((_QWORD *)v364 - 6) = 0;
                  *((_QWORD *)v364 - 5) = 0;
                  *((_QWORD *)v364 - 7) = 0;
                  *((_WORD *)v363 - 16) = *((_WORD *)v364 - 16);
                  *((_QWORD *)v363 - 2) = 0;
                  *((_QWORD *)v363 - 1) = 0;
                  *((_QWORD *)v363 - 3) = 0;
                  *(_OWORD *)(v363 - 24) = *(_OWORD *)(v364 - 24);
                  *((_QWORD *)v363 - 1) = *((_QWORD *)v364 - 1);
                  *((_QWORD *)v364 - 3) = 0;
                  *((_QWORD *)v364 - 2) = 0;
                  *((_QWORD *)v364 - 1) = 0;
                  v362 -= 216;
                }
                while (&v277[v362] != v299);
                v277 = (char *)v804[1];
                v371 = *(_OWORD **)&v805[0];
                v804[1] = &v343[v362];
                *(_QWORD *)&v805[0] = v343 + 216;
                *((double *)v805 + 1) = v837;
                for (i = v764; v371 != (_OWORD *)v277; v371 = (_OWORD *)((char *)v371 - 216))
                {
                  v372 = (void *)*((_QWORD *)v371 - 3);
                  if (v372)
                  {
                    *((_QWORD *)v371 - 2) = v372;
                    operator delete(v372);
                  }
                  v373 = (void *)*((_QWORD *)v371 - 7);
                  if (v373)
                  {
                    *((_QWORD *)v371 - 6) = v373;
                    operator delete(v373);
                  }
                }
              }
              if (v277)
                operator delete(v277);
              v290 = (char *)v783;
              *(_QWORD *)&v805[0] = v343 + 216;
              if (v783)
LABEL_275:
                operator delete(v290);
            }
            else
            {
              v278 = *(_OWORD *)v771;
              *(void **)(*(_QWORD *)&v805[0] + 16) = v771[2];
              *(_OWORD *)v277 = v278;
              v279 = *(_OWORD *)&v771[3];
              *((void **)v277 + 5) = v771[5];
              *(_OWORD *)(v277 + 24) = v279;
              v280 = *(_OWORD *)v772;
              *(_OWORD *)(v277 + 60) = *(_OWORD *)&v772[12];
              *((_OWORD *)v277 + 3) = v280;
              v277[80] = 0;
              v277[152] = 0;
              if (v778)
              {
                *((float64x2_t *)v277 + 5) = v773;
                v281 = v774;
                v282 = v775;
                v283 = v776;
                *((_QWORD *)v277 + 18) = v777;
                *((float64x2_t *)v277 + 7) = v282;
                *((_OWORD *)v277 + 8) = v283;
                *((float64x2_t *)v277 + 6) = v281;
                v277[152] = 1;
              }
              *((_QWORD *)v277 + 20) = 0;
              *((_QWORD *)v277 + 21) = 0;
              *((_QWORD *)v277 + 22) = 0;
              v284 = v779;
              v285 = v780 - (_BYTE *)v779;
              if (v780 != v779)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v285 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v286 = (char *)operator new(v780 - (_BYTE *)v779);
                *((_QWORD *)v277 + 20) = v286;
                *((_QWORD *)v277 + 21) = v286;
                v287 = &v286[8 * (v285 >> 3)];
                *((_QWORD *)v277 + 22) = v287;
                memcpy(v286, v284, v285 - 4);
                *((_QWORD *)v277 + 21) = v287;
              }
              v288 = v782;
              *((_QWORD *)v277 + 24) = 0;
              *((_WORD *)v277 + 92) = v288;
              *((_QWORD *)v277 + 25) = 0;
              *((_QWORD *)v277 + 26) = 0;
              v290 = (char *)v783;
              v289 = v784;
              v291 = v784 - (_BYTE *)v783;
              if (v784 != v783)
              {
                if (v291 < 0)
                  sub_20E867F44();
                v292 = (char *)operator new(v784 - (_BYTE *)v783);
                v293 = 0;
                *((_QWORD *)v277 + 24) = v292;
                *((_QWORD *)v277 + 25) = v292;
                *((_QWORD *)v277 + 26) = &v292[32 * (v291 >> 5)];
                do
                {
                  v294 = &v290[v293];
                  v295 = &v292[v293];
                  *(_DWORD *)v295 = *(_DWORD *)&v290[v293];
                  *(_OWORD *)(v295 + 8) = *(_OWORD *)&v290[v293 + 8];
                  v295[24] = v290[v293 + 24];
                  v293 += 32;
                }
                while (v294 + 32 != v289);
                *((_QWORD *)v277 + 25) = &v292[v293];
              }
              *(_QWORD *)&v805[0] = v277 + 216;
              if (v290)
                goto LABEL_275;
            }
            if (v779)
              operator delete(v779);
            v163 = (_QWORD *)v762;
LABEL_279:
            v297 = *((char *)v171 + 1);
            v171 = (_QWORD *)((char *)v171 + 1);
            LOBYTE(v296) = v297;
            v170 += 32;
            if (v297 <= -2)
            {
              do
              {
                v298 = (__clz(__rbit64(((*v171 >> 7) & ~*v171 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v171 = (_QWORD *)((char *)v171 + v298);
                v170 += 32 * v298;
                v296 = *(char *)v171;
              }
              while (v296 < -1);
            }
            if (v296 == 255)
              goto LABEL_389;
            goto LABEL_141;
          }
          while (2)
          {
            if (*(_QWORD *)v276 || i != v276[1].i32[0])
              goto LABEL_293;
            v305 = v276[3].f32[0];
            v306 = v305 == 3.4028e38;
            v307 = v276[2].u32[0];
            v309 = v783;
            v308 = v784;
            v310 = v784 - (_BYTE *)v783;
            if (v784 == v783)
            {
              v312 = v784;
              v317 = v276[4];
              goto LABEL_306;
            }
            v311 = v310 >> 5;
            v312 = (char *)v783;
            do
            {
              v313 = v311 >> 1;
              v314 = &v312[32 * (v311 >> 1)];
              v316 = *(_DWORD *)v314;
              v315 = v314 + 32;
              v311 += ~(v311 >> 1);
              if (v316 < v307)
                v312 = v315;
              else
                v311 = v313;
            }
            while (v311);
            v317 = v276[4];
            if (v784 != v312)
            {
              v304 = v312;
              if (*(_DWORD *)v312 == v307)
                goto LABEL_292;
            }
LABEL_306:
            v318 = v312 - (_BYTE *)v783;
            v319 = (v312 - (_BYTE *)v783) >> 5;
            v304 = (char *)v783 + ((v312 - (_BYTE *)v783) & 0xFFFFFFFFFFFFFFE0);
            if ((unint64_t)v784 < v785)
            {
              if (v304 == v784)
              {
                *(_DWORD *)v784 = v307;
                v309[32 * v319 + 24] = 0;
                v784 = v308 + 32;
                v304 = v308;
              }
              else
              {
                v320 = v784 - 32;
                v321 = v784;
                if ((unint64_t)v784 >= 0x20)
                {
                  do
                  {
                    *(_DWORD *)v321 = *(_DWORD *)v320;
                    *(_OWORD *)(v321 + 8) = *(_OWORD *)(v320 + 8);
                    v321[24] = v320[24];
                    v321 += 32;
                    v320 += 32;
                  }
                  while (v320 < v308);
                }
                v784 = v321;
                if (v308 != v304 + 32)
                {
                  v322 = 0;
                  v323 = &v309[32 * ((v308 - (v304 + 32)) >> 5) + 32 * v319];
                  do
                  {
                    v324 = &v308[v322];
                    *((_DWORD *)v324 - 8) = *(_DWORD *)&v323[v322 - 32];
                    *(_OWORD *)(v324 - 24) = *(_OWORD *)&v323[v322 - 24];
                    *(v324 - 8) = v323[v322 - 8];
                    v322 -= 32;
                  }
                  while (-32 * ((v308 - (v304 + 32)) >> 5) != v322);
                }
                *(_DWORD *)v304 = v307;
                v309[32 * v319 + 24] = 0;
              }
              goto LABEL_292;
            }
            v325 = (v310 >> 5) + 1;
            if (v325 >> 59)
              sub_20E867F44();
            if ((uint64_t)(v785 - (_QWORD)v783) >> 4 > v325)
              v325 = (uint64_t)(v785 - (_QWORD)v783) >> 4;
            if (v785 - (unint64_t)v783 >= 0x7FFFFFFFFFFFFFE0)
              v326 = 0x7FFFFFFFFFFFFFFLL;
            else
              v326 = v325;
            if (v326)
            {
              if (v326 >> 59)
                sub_20E877A38();
              v327 = v305 == 3.4028e38;
              v328 = (char *)operator new(32 * v326);
              v306 = v327;
              v319 = (v312 - v309) >> 5;
              v329 = (uint64_t)&v328[32 * v319];
              v330 = &v328[32 * v326];
              if (v319 == v326)
              {
LABEL_323:
                v275 = v767;
                if (v318 >= 1)
                {
                  v331 = v319 + 2;
                  if (v319 >= -1)
                    v331 = v319 + 1;
                  v329 -= 32 * (v331 >> 1);
                  *(_DWORD *)v329 = v307;
                  *(_BYTE *)(v329 + 24) = 0;
                  v332 = (char *)v783;
                  v333 = (void *)v329;
                  if (v783 == v304)
                    goto LABEL_341;
LABEL_338:
                  v337 = 0;
                  do
                  {
                    v338 = v329 + v337;
                    *(_DWORD *)(v338 - 32) = *(_DWORD *)&v304[v337 - 32];
                    *(_OWORD *)(v338 - 24) = *(_OWORD *)&v304[v337 - 24];
                    *(_BYTE *)(v338 - 8) = v304[v337 - 8];
                    v337 -= 32;
                  }
                  while (&v304[v337] != v332);
                  v333 = (void *)(v329 + v337);
                  goto LABEL_341;
                }
                v758 = v328;
                v754 = v306;
                if (v312 == v309)
                  v334 = 1;
                else
                  v334 = v318 >> 4;
                if (v334 >> 59)
                  sub_20E877A38();
                v335 = (char *)operator new(32 * v334);
                v329 = (uint64_t)&v335[32 * (v334 >> 2)];
                v330 = &v335[32 * v334];
                if (v758)
                {
                  v336 = &v335[32 * v334];
                  operator delete(v758);
                  v330 = v336;
                }
                v275 = v767;
                v306 = v754;
                *(_DWORD *)v329 = v307;
                *(_BYTE *)(v329 + 24) = 0;
                v332 = (char *)v783;
                v333 = (void *)v329;
                if (v783 != v304)
                  goto LABEL_338;
LABEL_341:
                v339 = v329 + 32;
                for (j = v784; v304 != j; v304 += 32)
                {
                  *(_DWORD *)v339 = *(_DWORD *)v304;
                  *(_OWORD *)(v339 + 8) = *(_OWORD *)(v304 + 8);
                  *(_BYTE *)(v339 + 24) = v304[24];
                  v339 += 32;
                }
                v341 = v783;
                v783 = v333;
                v784 = (char *)v339;
                v785 = (unint64_t)v330;
                if (v341)
                {
                  v342 = v306;
                  operator delete(v341);
                  v306 = v342;
                }
                v304 = (char *)v329;
                i = v764;
LABEL_292:
                *(float64x2_t *)(v304 + 8) = vcvtq_f64_f32(v317);
                v304[24] = v306;
LABEL_293:
                v276 += 8;
                if (v276 == v275)
                  goto LABEL_263;
                continue;
              }
            }
            else
            {
              v328 = 0;
              v329 = 32 * v319;
              v330 = 0;
              if (!v319)
                goto LABEL_323;
            }
            break;
          }
          v275 = v767;
          *(_DWORD *)v329 = v307;
          *(_BYTE *)(v329 + 24) = 0;
          v332 = (char *)v783;
          v333 = (void *)v329;
          if (v783 == v304)
            goto LABEL_341;
          goto LABEL_338;
        }
      }
      do
      {
        v270 = *(_OWORD *)(v261 - 24);
        *((_DWORD *)v268 - 2) = *((_DWORD *)v261 - 2);
        *(_OWORD *)(v268 - 24) = v270;
        v268 -= 24;
        v261 -= 24;
      }
      while (v261 != v263);
      v261 = (char *)v843;
      v843 = (char **)v268;
      v844 = v269;
      v845 = &v267[24 * v266];
      if (v261)
        goto LABEL_258;
      v261 = v269;
      v844 = v269;
      v257 += 4;
      if (v257 == v258)
        goto LABEL_259;
    }
  }
LABEL_720:
  LOBYTE(v791) = *(_BYTE *)(v145 + 7682);
  HIBYTE(v791) = *(_BYTE *)(v145 + 7686);
  v822 = **(_QWORD **)(v145 + 5264);
  if (*(_BYTE *)(v145 + 1932))
  {
    v823 = *(_OWORD *)(v145 + 12424);
    v593 = *(_QWORD *)(v145 + 8216);
    v594 = 8;
    if (!*(_BYTE *)v593)
      v594 = 16;
    v595 = *(_QWORD *)(v593 + v594);
    if (*(_BYTE *)v593)
      v596 = v595 == 0;
    else
      v596 = 1;
    if (v596)
      v597 = *(_QWORD *)(v593 + 16);
    else
      v597 = *(_QWORD *)(v593 + 8);
    sub_20F88EEC0((uint64_t)v824, v597 + 2192);
  }
  v598 = *(_QWORD **)(v145 + 12440);
  v599 = v598[9];
  v600 = (void *)*((_QWORD *)&v808 + 1);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v809 + 1) - *((_QWORD *)&v808 + 1)) >> 4) < v599)
  {
    if (v599 > 0x1745D1745D1745DLL)
      sub_20E867F44();
    v601 = v809;
    v602 = (char *)operator new(176 * v599);
    v603 = &v602[v601 - (_QWORD)v600];
    v604 = v603;
    if ((void *)v601 != v600)
    {
      v604 = &v602[v601 - (_QWORD)v600];
      do
      {
        v605 = *(_DWORD *)(v601 - 176);
        v601 -= 176;
        *((_DWORD *)v604 - 44) = v605;
        v604 -= 176;
        v606 = *(_OWORD *)(v601 + 8);
        v607 = *(_OWORD *)(v601 + 24);
        *(_OWORD *)(v604 + 40) = *(_OWORD *)(v601 + 40);
        *(_OWORD *)(v604 + 24) = v607;
        *(_OWORD *)(v604 + 8) = v606;
        v608 = *(_OWORD *)(v601 + 56);
        v609 = *(_OWORD *)(v601 + 72);
        v610 = *(_OWORD *)(v601 + 88);
        *(_OWORD *)(v604 + 104) = *(_OWORD *)(v601 + 104);
        *(_OWORD *)(v604 + 88) = v610;
        *(_OWORD *)(v604 + 72) = v609;
        *(_OWORD *)(v604 + 56) = v608;
        v611 = *(_OWORD *)(v601 + 120);
        v612 = *(_OWORD *)(v601 + 136);
        v613 = *(_OWORD *)(v601 + 152);
        *((_QWORD *)v604 + 21) = *(_QWORD *)(v601 + 168);
        *(_OWORD *)(v604 + 152) = v613;
        *(_OWORD *)(v604 + 136) = v612;
        *(_OWORD *)(v604 + 120) = v611;
      }
      while ((void *)v601 != v600);
    }
    *((_QWORD *)&v808 + 1) = v604;
    *(_QWORD *)&v809 = v603;
    *((_QWORD *)&v809 + 1) = &v602[176 * v599];
    if (v600)
    {
      operator delete(v600);
      v598 = *(_QWORD **)(v762 + 12440);
    }
  }
  if (v598[9])
  {
    v614 = 0;
    while (1)
    {
      v623 = v598[4];
      v624 = (v598[7] + v614) % (0xAAAAAAAAAAAAAAABLL * ((v598[5] - v623) >> 6));
      v625 = (__int128 *)(v623 + 192 * v624);
      if (*((_DWORD *)v625 + 47) != *(_DWORD *)(*((_QWORD *)&v796[0] + 1) - 4)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 4641, (uint64_t)"propagated_pose_info.propagates_state_id == static_cast<uint32_t>(debug.state_ids.back())", 89, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v626 = (_DWORD *)(v623 + 192 * v624 + 184);
      v627 = v809;
      if ((unint64_t)v809 >= *((_QWORD *)&v809 + 1))
        break;
      *(_DWORD *)v809 = *v626;
      v615 = *v625;
      v616 = v625[1];
      *(_OWORD *)(v627 + 40) = v625[2];
      *(_OWORD *)(v627 + 24) = v616;
      *(_OWORD *)(v627 + 8) = v615;
      v617 = v625[3];
      v618 = v625[4];
      v619 = v625[5];
      *(_OWORD *)(v627 + 104) = v625[6];
      *(_OWORD *)(v627 + 88) = v619;
      *(_OWORD *)(v627 + 72) = v618;
      *(_OWORD *)(v627 + 56) = v617;
      v620 = v625[7];
      v621 = v625[8];
      v622 = v625[9];
      *(_QWORD *)(v627 + 168) = *((_QWORD *)v625 + 20);
      *(_OWORD *)(v627 + 152) = v622;
      *(_OWORD *)(v627 + 136) = v621;
      *(_OWORD *)(v627 + 120) = v620;
      *(_QWORD *)&v809 = v627 + 176;
      if (!v821)
        goto LABEL_760;
LABEL_740:
      if (++v614 == v598[9])
        goto LABEL_762;
    }
    v628 = *((_QWORD *)&v808 + 1);
    v629 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v809 - *((_QWORD *)&v808 + 1)) >> 4);
    v630 = v629 + 1;
    if ((unint64_t)(v629 + 1) > 0x1745D1745D1745DLL)
      sub_20E867F44();
    if (0x5D1745D1745D1746 * ((uint64_t)(*((_QWORD *)&v809 + 1) - *((_QWORD *)&v808 + 1)) >> 4) > v630)
      v630 = 0x5D1745D1745D1746 * ((uint64_t)(*((_QWORD *)&v809 + 1) - *((_QWORD *)&v808 + 1)) >> 4);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v809 + 1) - *((_QWORD *)&v808 + 1)) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
      v631 = 0x1745D1745D1745DLL;
    else
      v631 = v630;
    if (v631)
    {
      if (v631 > 0x1745D1745D1745DLL)
        sub_20E877A38();
      v632 = (char *)operator new(176 * v631);
    }
    else
    {
      v632 = 0;
    }
    v633 = &v632[176 * v629];
    *(_DWORD *)v633 = *v626;
    v634 = *v625;
    v635 = v625[1];
    *(_OWORD *)(v633 + 40) = v625[2];
    *(_OWORD *)(v633 + 24) = v635;
    *(_OWORD *)(v633 + 8) = v634;
    v636 = v625[3];
    v637 = v625[4];
    v638 = v625[5];
    *(_OWORD *)(v633 + 104) = v625[6];
    *(_OWORD *)(v633 + 88) = v638;
    *(_OWORD *)(v633 + 72) = v637;
    *(_OWORD *)(v633 + 56) = v636;
    v639 = v625[7];
    v640 = v625[8];
    v641 = v625[9];
    *((_QWORD *)v633 + 21) = *((_QWORD *)v625 + 20);
    *(_OWORD *)(v633 + 152) = v641;
    *(_OWORD *)(v633 + 136) = v640;
    *(_OWORD *)(v633 + 120) = v639;
    v642 = v633;
    if (v627 != v628)
    {
      do
      {
        v643 = *(_DWORD *)(v627 - 176);
        v627 -= 176;
        *((_DWORD *)v642 - 44) = v643;
        v642 -= 176;
        v644 = *(_OWORD *)(v627 + 8);
        v645 = *(_OWORD *)(v627 + 24);
        *(_OWORD *)(v642 + 40) = *(_OWORD *)(v627 + 40);
        *(_OWORD *)(v642 + 24) = v645;
        *(_OWORD *)(v642 + 8) = v644;
        v646 = *(_OWORD *)(v627 + 56);
        v647 = *(_OWORD *)(v627 + 72);
        v648 = *(_OWORD *)(v627 + 88);
        *(_OWORD *)(v642 + 104) = *(_OWORD *)(v627 + 104);
        *(_OWORD *)(v642 + 88) = v648;
        *(_OWORD *)(v642 + 72) = v647;
        *(_OWORD *)(v642 + 56) = v646;
        v649 = *(_OWORD *)(v627 + 120);
        v650 = *(_OWORD *)(v627 + 136);
        v651 = *(_OWORD *)(v627 + 152);
        *((_QWORD *)v642 + 21) = *(_QWORD *)(v627 + 168);
        *(_OWORD *)(v642 + 152) = v651;
        *(_OWORD *)(v642 + 136) = v650;
        *(_OWORD *)(v642 + 120) = v649;
      }
      while (v627 != v628);
      v627 = *((_QWORD *)&v808 + 1);
    }
    *((_QWORD *)&v808 + 1) = v642;
    v652 = v633 + 176;
    *(_QWORD *)&v809 = v633 + 176;
    *((_QWORD *)&v809 + 1) = &v632[176 * v631];
    if (v627)
      operator delete((void *)v627);
    *(_QWORD *)&v809 = v652;
    if (v821)
      goto LABEL_740;
LABEL_760:
    if (*(double *)(v623 + 192 * v624 + 176) - *(double *)(v623 + 192 * v624 + 168) < *(double *)(v762 + 1624))
    {
      v653 = *v625;
      v654 = v625[2];
      v811 = v625[1];
      v812 = v654;
      v810 = v653;
      v655 = v625[3];
      v656 = v625[4];
      v657 = v625[6];
      v815 = v625[5];
      v816 = v657;
      v813 = v655;
      v814 = v656;
      v658 = v625[7];
      v659 = v625[8];
      v660 = v625[9];
      v820 = *((_QWORD *)v625 + 20);
      v818 = v659;
      v819 = v660;
      v817 = v658;
      v821 = 1;
    }
    goto LABEL_740;
  }
LABEL_762:
  v661 = *(_QWORD *)(v762 + 15680);
  if (!v661 || (v662 = *(_QWORD *)(v762 + 2480), v663 = *(_QWORD *)(v762 + 2488), v662 == v663))
  {
    v696 = 0;
    v695 = 0;
  }
  else
  {
    v664 = *(_QWORD *)(v762 + 3032);
    if (*(_DWORD *)v664)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6686, (uint64_t)"default_camera_models_.front().camera_id == 0u", 46, (uint64_t)"The first camera should be the primiary camera.", 47, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v664 = *(_QWORD *)(v762 + 3032);
      v663 = *(_QWORD *)(v762 + 2488);
      v662 = *(_QWORD *)(v762 + 2480);
      v661 = *(_QWORD *)(v762 + 15680);
    }
    v665 = *(_QWORD *)(v664 + 8);
    v666.f64[0] = *(float64_t *)(v665 + 16);
    v667 = *(int64x2_t *)(v665 + 24);
    _D17 = *(_QWORD *)(v665 + 64);
    v669 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v665, v667);
    v670 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v665, v667);
    v666.f64[1] = *(float64_t *)(v665 + 40);
    v671 = vextq_s8((int8x16_t)v670, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v665 + 48), 1), 8uLL);
    _D5 = *(double *)(v665 + 88);
    _Q6 = *(float64x2_t *)(v665 + 72);
    v674 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v669, vnegq_f64(_Q6).f64[0]), v670, _Q6, 1), v666, _D5, 0);
    _D18 = *(_QWORD *)(v665 + 56);
    __asm
    {
      FMLS            D4, D18, V6.D[1]
      FMLS            D4, D17, V5.D[0]
    }
    v678 = *(_QWORD *)(v665 + 48);
    *(_QWORD *)&v670.f64[1] = v671.i64[0];
    v671.i64[0] = _D17;
    _Q4.f64[1] = 1.0;
    v679 = *(_QWORD *)(v762 + 2280) + 168 * ((v663 - v662) >> 2);
    _Q23.f64[0] = *(float64_t *)(v679 - 152);
    v681 = *(float64x2_t *)(v679 - 168);
    v682 = *(double *)(v679 - 128);
    v683 = *(float64x2_t *)(v679 - 144);
    v684 = *(double *)(v679 - 104);
    _Q20 = *(float64x2_t *)(v679 - 120);
    v686 = *(double *)(v679 - 8);
    v687 = vmulq_n_f64(v669, _Q23.f64[0]);
    v688 = vmulq_n_f64((float64x2_t)v678, _Q23.f64[0]);
    _Q23.f64[1] = v682;
    v689 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v681, (int64x2_t)v683), *(double *)(v679 - 24)), (float64x2_t)vzip2q_s64((int64x2_t)v681, (int64x2_t)v683), *(float64x2_t *)(v679 - 24), 1), _Q23, v686);
    _D25 = *(_QWORD *)(v679 - 16);
    __asm { FMLA            D23, D25, V20.D[1] }
    _Q23.f64[0] = _Q23.f64[0] + v684 * v686;
    v691 = vmlaq_n_f64(vmulq_n_f64(v669, v681.f64[0]), v670, v683.f64[0]);
    v692 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v678, v681.f64[0]), (float64x2_t)v671.u64[1], v683.f64[0]);
    v693 = vmlaq_laneq_f64(vmulq_laneq_f64(v669, v681, 1), v670, v683, 1);
    v694 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v678, v681, 1), (float64x2_t)v671.u64[1], v683, 1);
    *(_QWORD *)&v683.f64[0] = *(_OWORD *)&vnegq_f64(v689);
    *(float64x2_t *)v771 = vmlaq_f64(vmlaq_n_f64(v691, v666, _Q20.f64[0]), (float64x2_t)0, v674);
    *(float64x2_t *)&v771[2] = vmlaq_f64(vmlaq_n_f64(v692, (float64x2_t)v671.u64[0], _Q20.f64[0]), (float64x2_t)0, _Q4);
    *(float64x2_t *)&v771[4] = vmlaq_f64(vmlaq_laneq_f64(v693, v666, _Q20, 1), (float64x2_t)0, v674);
    *(float64x2_t *)v772 = vmlaq_f64(vmlaq_laneq_f64(v694, (float64x2_t)v671.u64[0], _Q20, 1), (float64x2_t)0, _Q4);
    *(float64x2_t *)&v772[16] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v687, v670, v682), v666, v684), (float64x2_t)0, v674);
    v773 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v688, (float64x2_t)v671.u64[1], v682), (float64x2_t)v671.u64[0], v684), (float64x2_t)0, _Q4);
    v774 = vaddq_f64(v674, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v669, v683.f64[0]), v670, v689, 1), v666, _Q23.f64[0], 0));
    v775 = vaddq_f64(_Q4, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v678, v683.f64[0]), (float64x2_t)v671.u64[1], v689, 1), (float64x2_t)v671.u64[0], _Q23.f64[0], 0));
    (*(void (**)(_BYTE *__return_ptr, uint64_t, void **, double, double))(*(_QWORD *)v661 + 24))(v836, v661, v771, *(double *)(v762 + 2256), *(double *)(v762 + 2264));
    v695 = *(char **)&v836[8];
    v696 = *(char **)v836;
  }
  v697 = v695 - v696;
  v698 = (v695 - v696) >> 3;
  v699 = (_BYTE *)v834;
  if (v698 > (uint64_t)&v835[-v834] >> 7)
  {
    if (v697 >= 0xFFFFFFFFFFFFFF9)
      sub_20E867F44();
    v700 = (_BYTE *)*((_QWORD *)&v834 + 1);
    v701 = (char *)operator new(16 * v697);
    v702 = &v701[(v700 - v699) & 0xFFFFFFFFFFFFFF80];
    v703 = v702;
    if (v700 != v699)
    {
      v704 = &v701[(v700 - v699) & 0xFFFFFFFFFFFFFF80];
      do
      {
        v703 = v704 - 128;
        v705 = *((_OWORD *)v700 - 8);
        v706 = *((_OWORD *)v700 - 7);
        v707 = *((_OWORD *)v700 - 5);
        *((_OWORD *)v704 - 6) = *((_OWORD *)v700 - 6);
        *((_OWORD *)v704 - 5) = v707;
        *((_OWORD *)v704 - 8) = v705;
        *((_OWORD *)v704 - 7) = v706;
        v708 = *((_OWORD *)v700 - 4);
        v709 = *((_OWORD *)v700 - 3);
        v710 = *((_OWORD *)v700 - 1);
        *((_OWORD *)v704 - 2) = *((_OWORD *)v700 - 2);
        *((_OWORD *)v704 - 1) = v710;
        *((_OWORD *)v704 - 4) = v708;
        *((_OWORD *)v704 - 3) = v709;
        v700 -= 128;
        v704 -= 128;
      }
      while (v700 != v699);
    }
    *(_QWORD *)&v834 = v703;
    *((_QWORD *)&v834 + 1) = v702;
    v835 = &v701[128 * v698];
    if (v699)
      operator delete(v699);
  }
  if (v696 != v695)
  {
    v711 = (char *)*((_QWORD *)&v834 + 1);
    v712 = v696;
    do
    {
      v720 = (__int128 *)(*(_QWORD *)v712 + 8);
      if (v711 < v835)
      {
        v713 = *v720;
        v714 = *(_OWORD *)(*(_QWORD *)v712 + 24);
        v715 = *(_OWORD *)(*(_QWORD *)v712 + 56);
        *((_OWORD *)v711 + 2) = *(_OWORD *)(*(_QWORD *)v712 + 40);
        *((_OWORD *)v711 + 3) = v715;
        *(_OWORD *)v711 = v713;
        *((_OWORD *)v711 + 1) = v714;
        v716 = v720[4];
        v717 = v720[5];
        v718 = v720[7];
        *((_OWORD *)v711 + 6) = v720[6];
        *((_OWORD *)v711 + 7) = v718;
        *((_OWORD *)v711 + 4) = v716;
        *((_OWORD *)v711 + 5) = v717;
        v719 = v711 + 128;
      }
      else
      {
        v721 = (char *)v834;
        v722 = (uint64_t)&v711[-v834] >> 7;
        v723 = v722 + 1;
        if ((unint64_t)(v722 + 1) >> 57)
          sub_20E867F44();
        v724 = (uint64_t)&v835[-v834];
        if ((uint64_t)&v835[-v834] >> 6 > v723)
          v723 = v724 >> 6;
        if ((unint64_t)v724 >= 0x7FFFFFFFFFFFFF80)
          v725 = 0x1FFFFFFFFFFFFFFLL;
        else
          v725 = v723;
        if (v725)
        {
          if (v725 >> 57)
            sub_20E877A38();
          v726 = (char *)operator new(v725 << 7);
        }
        else
        {
          v726 = 0;
        }
        v727 = &v726[128 * v722];
        v728 = *v720;
        v729 = v720[1];
        v730 = v720[3];
        *((_OWORD *)v727 + 2) = v720[2];
        *((_OWORD *)v727 + 3) = v730;
        *(_OWORD *)v727 = v728;
        *((_OWORD *)v727 + 1) = v729;
        v731 = v720[4];
        v732 = v720[5];
        v733 = v720[7];
        *((_OWORD *)v727 + 6) = v720[6];
        *((_OWORD *)v727 + 7) = v733;
        *((_OWORD *)v727 + 4) = v731;
        *((_OWORD *)v727 + 5) = v732;
        v734 = v727;
        if (v711 != v721)
        {
          do
          {
            v735 = *((_OWORD *)v711 - 8);
            v736 = *((_OWORD *)v711 - 7);
            v737 = *((_OWORD *)v711 - 5);
            *((_OWORD *)v734 - 6) = *((_OWORD *)v711 - 6);
            *((_OWORD *)v734 - 5) = v737;
            *((_OWORD *)v734 - 8) = v735;
            *((_OWORD *)v734 - 7) = v736;
            v738 = *((_OWORD *)v711 - 4);
            v739 = *((_OWORD *)v711 - 3);
            v740 = *((_OWORD *)v711 - 1);
            *((_OWORD *)v734 - 2) = *((_OWORD *)v711 - 2);
            *((_OWORD *)v734 - 1) = v740;
            *((_OWORD *)v734 - 4) = v738;
            *((_OWORD *)v734 - 3) = v739;
            v734 -= 128;
            v711 -= 128;
          }
          while (v711 != v721);
          v711 = (char *)v834;
        }
        *(_QWORD *)&v834 = v734;
        v719 = v727 + 128;
        *((_QWORD *)&v834 + 1) = v727 + 128;
        v835 = &v726[128 * v725];
        if (v711)
          operator delete(v711);
      }
      *((_QWORD *)&v834 + 1) = v719;
      v712 += 8;
      v711 = v719;
    }
    while (v712 != v695);
  }
  sub_20F028FB8(v742, (uint64_t)v789);
  if (v696)
    operator delete(v696);
  return sub_20F028598((uint64_t)v789);
}

void sub_20F88E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F88E56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p)
    operator delete(__p);
  if (a33)
  {
    operator delete(a33);
    sub_20F028598((uint64_t)&a63);
    _Unwind_Resume(a1);
  }
  sub_20F028598((uint64_t)&a63);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F88E8C0(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  double v18;
  double v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v2 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v2 + 120);
  v3 = *(_QWORD *)(v2 + 128);
  if (v4 != v3)
  {
    v5 = result[1];
    v37 = result;
    v38 = a2;
    v35 = v5;
    v36 = *(_QWORD *)(v2 + 128);
    while (1)
    {
      v8 = *(_DWORD **)(*result + 304);
      v9 = *(_DWORD **)(*result + 312);
      if (v8 != v9)
        break;
      v11 = 0;
      if (v9 - v8)
        goto LABEL_14;
LABEL_5:
      v4 += 64;
      if (v4 == v3)
        return result;
    }
    v10 = *(_DWORD **)(*result + 304);
    while (*v10 != *(_DWORD *)(v4 + 8))
    {
      if (++v10 == v9)
      {
        v10 = *(_DWORD **)(*result + 312);
        break;
      }
    }
    v11 = v10 - v8;
    if (v11 >= v9 - v8)
      goto LABEL_5;
LABEL_14:
    v12 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(v12 + 112))
      v13 = v12 + 40;
    else
      v13 = 0;
    v39 = *(_OWORD *)(v13 + 8);
    v40 = *(_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v5 + 304);
    v14 = *(_QWORD *)(v5 + 312);
    if (v15 != v14)
    {
      while (*(_QWORD *)v15 != *(_QWORD *)a2 || *(_DWORD *)(v15 + 8) != *(_DWORD *)(a2 + 8))
      {
        v15 += 16;
        if (v15 == v14)
        {
          v15 = *(_QWORD *)(v5 + 312);
          break;
        }
      }
    }
    v16 = v15 != v14;
    v17 = *(_DWORD *)(v4 + 16);
    v18 = *(float *)(v4 + 32);
    v19 = *(float *)(v4 + 36);
    v20 = (_QWORD *)(*(_QWORD *)(*result + 448) + 24 * v11);
    v22 = v20 + 1;
    v21 = (char *)v20[1];
    v23 = v20[2];
    if ((unint64_t)v21 < v23)
    {
      v6 = *(_OWORD *)(v13 + 8);
      *((_QWORD *)v21 + 2) = *(_QWORD *)(v13 + 24);
      *(_OWORD *)v21 = v6;
      *((double *)v21 + 3) = v18;
      *((double *)v21 + 4) = v19;
      *((_DWORD *)v21 + 10) = v17;
      v21[44] = v16;
      v7 = v21 + 48;
    }
    else
    {
      v24 = (char *)*v20;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v21[-*v20] >> 4);
      v26 = v25 + 1;
      if (v25 + 1 > 0x555555555555555)
        sub_20E867F44();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v24) >> 4);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x2AAAAAAAAAAAAAALL)
        v28 = 0x555555555555555;
      else
        v28 = v26;
      if (v28 > 0x555555555555555)
        sub_20E877A38();
      v29 = 48 * v28;
      v30 = (char *)operator new(48 * v28);
      v31 = &v30[48 * v25];
      *(_OWORD *)v31 = v39;
      *((_QWORD *)v31 + 2) = v40;
      *((double *)v31 + 3) = v18;
      *((double *)v31 + 4) = v19;
      *((_DWORD *)v31 + 10) = v17;
      v31[44] = v16;
      v32 = v31;
      if (v21 != v24)
      {
        do
        {
          v33 = *((_OWORD *)v21 - 3);
          *((_QWORD *)v32 - 4) = *((_QWORD *)v21 - 4);
          *((_OWORD *)v32 - 3) = v33;
          *(_OWORD *)(v32 - 24) = *(_OWORD *)(v21 - 24);
          v34 = *((_DWORD *)v21 - 2);
          *(v32 - 4) = *(v21 - 4);
          *((_DWORD *)v32 - 2) = v34;
          v32 -= 48;
          v21 -= 48;
        }
        while (v21 != v24);
        v21 = (char *)*v20;
      }
      *v20 = v32;
      v7 = v31 + 48;
      *v22 = v31 + 48;
      v20[2] = &v30[v29];
      if (v21)
        operator delete(v21);
      result = v37;
      a2 = v38;
      v5 = v35;
      v3 = v36;
    }
    *v22 = v7;
    goto LABEL_5;
  }
  return result;
}

_QWORD *sub_20F88EB88(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[20];
  if (v3)
  {
    a1[21] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20F88EBC8(uint64_t a1, unint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  void **v31;
  void **v32;
  void *v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  void *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  void *v43;
  void *v44;

  v4 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v31 = &v4[3 * a2];
      if (v3 != v31)
      {
        v32 = *(void ***)(a1 + 8);
        do
        {
          v35 = (void **)*(v32 - 3);
          v32 -= 3;
          v34 = v35;
          if (v35)
          {
            v36 = (void **)*(v3 - 2);
            v33 = v34;
            if (v36 != v34)
            {
              v37 = (void **)*(v3 - 2);
              do
              {
                v40 = (char *)*(v37 - 3);
                v37 -= 3;
                v39 = v40;
                if (v40)
                {
                  v41 = (char *)*(v36 - 2);
                  v38 = v39;
                  if (v41 != v39)
                  {
                    v42 = (char *)*(v36 - 2);
                    do
                    {
                      v44 = (void *)*((_QWORD *)v42 - 3);
                      v42 -= 24;
                      v43 = v44;
                      if (v44)
                      {
                        *((_QWORD *)v41 - 2) = v43;
                        operator delete(v43);
                      }
                      v41 = v42;
                    }
                    while (v42 != v39);
                    v38 = *v37;
                  }
                  *(v36 - 2) = v39;
                  operator delete(v38);
                }
                v36 = v37;
              }
              while (v37 != v34);
              v33 = *v32;
            }
            *(v3 - 2) = v34;
            operator delete(v33);
          }
          v3 = v32;
        }
        while (v32 != v31);
      }
      *(_QWORD *)(a1 + 8) = v31;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = 24 * v10;
      v12 = (char *)operator new(24 * v10);
      v13 = &v12[24 * v5];
      v14 = &v12[v11];
      bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v15 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
      if (v3 == v4)
      {
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          v16 = *(_OWORD *)(v3 - 3);
          v3 -= 3;
          *(_OWORD *)(v13 - 24) = v16;
          v13 -= 24;
          *((_QWORD *)v13 + 2) = v3[2];
          *v3 = 0;
          v3[1] = 0;
          v3[2] = 0;
        }
        while (v3 != v4);
        v3 = *(void ***)a1;
        v17 = *(void ***)(a1 + 8);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
        if (v17 != v3)
        {
          v18 = v17;
          do
          {
            v21 = (void **)*(v18 - 3);
            v18 -= 3;
            v20 = v21;
            if (v21)
            {
              v22 = (void **)*(v17 - 2);
              v19 = v20;
              if (v22 != v20)
              {
                v23 = (void **)*(v17 - 2);
                do
                {
                  v26 = (char *)*(v23 - 3);
                  v23 -= 3;
                  v25 = v26;
                  if (v26)
                  {
                    v27 = (char *)*(v22 - 2);
                    v24 = v25;
                    if (v27 != v25)
                    {
                      v28 = (char *)*(v22 - 2);
                      do
                      {
                        v30 = (void *)*((_QWORD *)v28 - 3);
                        v28 -= 24;
                        v29 = v30;
                        if (v30)
                        {
                          *((_QWORD *)v27 - 2) = v29;
                          operator delete(v29);
                        }
                        v27 = v28;
                      }
                      while (v28 != v25);
                      v24 = *v23;
                    }
                    *(v22 - 2) = v25;
                    operator delete(v24);
                  }
                  v22 = v23;
                }
                while (v23 != v20);
                v19 = *v18;
              }
              *(v17 - 2) = v20;
              operator delete(v19);
            }
            v17 = v18;
          }
          while (v18 != v3);
        }
      }
      if (v3)
        operator delete(v3);
    }
  }
}

uint64_t sub_20F88EEC0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  void *v29;
  int v30;
  __int128 v31;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 40), *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
    sub_20E9BF954((_QWORD *)(a1 + 64), *(char **)(a2 + 64), *(char **)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 88), *(char **)(a2 + 88), *(char **)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 112), *(char **)(a2 + 112), *(char **)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 136), *(char **)(a2 + 136), *(char **)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 184), *(char **)(a2 + 184), *(char **)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 208), *(char **)(a2 + 208), *(char **)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
    v4 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v4;
    sub_20E86811C((_QWORD *)(a1 + 256), *(char **)(a2 + 256), *(char **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
    sub_20E9BF954((_QWORD *)(a1 + 280), *(char **)(a2 + 280), *(char **)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 304), *(char **)(a2 + 304), *(char **)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 328), *(char **)(a2 + 328), *(char **)(a2 + 336), (uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 352), *(char **)(a2 + 352), *(char **)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 376), *(char **)(a2 + 376), *(char **)(a2 + 384), (uint64_t)(*(_QWORD *)(a2 + 384) - *(_QWORD *)(a2 + 376)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 400), *(char **)(a2 + 400), *(char **)(a2 + 408), (uint64_t)(*(_QWORD *)(a2 + 408) - *(_QWORD *)(a2 + 400)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 424), *(char **)(a2 + 424), *(char **)(a2 + 432), (uint64_t)(*(_QWORD *)(a2 + 432) - *(_QWORD *)(a2 + 424)) >> 4);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    sub_20E86811C((_QWORD *)(a1 + 456), *(char **)(a2 + 456), *(char **)(a2 + 464), (uint64_t)(*(_QWORD *)(a2 + 464) - *(_QWORD *)(a2 + 456)) >> 3);
    sub_20E9BF954((_QWORD *)(a1 + 480), *(char **)(a2 + 480), *(char **)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 504), *(char **)(a2 + 504), *(char **)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 528), *(char **)(a2 + 528), *(char **)(a2 + 536), (uint64_t)(*(_QWORD *)(a2 + 536) - *(_QWORD *)(a2 + 528)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 552), *(char **)(a2 + 552), *(char **)(a2 + 560), (uint64_t)(*(_QWORD *)(a2 + 560) - *(_QWORD *)(a2 + 552)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 576), *(char **)(a2 + 576), *(char **)(a2 + 584), (uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 600), *(char **)(a2 + 600), *(char **)(a2 + 608), (uint64_t)(*(_QWORD *)(a2 + 608) - *(_QWORD *)(a2 + 600)) >> 4);
    sub_20E9BF954((_QWORD *)(a1 + 624), *(char **)(a2 + 624), *(char **)(a2 + 632), (uint64_t)(*(_QWORD *)(a2 + 632) - *(_QWORD *)(a2 + 624)) >> 4);
    sub_20FB4348C((char *)(a1 + 648), *(char **)(a2 + 648), *(char **)(a2 + 656), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 656) - *(_QWORD *)(a2 + 648)) >> 3));
    sub_20FB4348C((char *)(a1 + 672), *(char **)(a2 + 672), *(char **)(a2 + 680), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 680) - *(_QWORD *)(a2 + 672)) >> 3));
    sub_20FB4348C((char *)(a1 + 696), *(char **)(a2 + 696), *(char **)(a2 + 704), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696)) >> 3));
    sub_20FB4348C((char *)(a1 + 720), *(char **)(a2 + 720), *(char **)(a2 + 728), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 728) - *(_QWORD *)(a2 + 720)) >> 3));
    sub_20FB4348C((char *)(a1 + 744), *(char **)(a2 + 744), *(char **)(a2 + 752), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 752) - *(_QWORD *)(a2 + 744)) >> 3));
    v5 = *(unsigned int *)(a2 + 784);
    if (*(_QWORD *)(a1 + 776) >= v5)
    {
      if (!(_DWORD)v5)
      {
        *(_DWORD *)(a1 + 784) = 0;
        v10 = *(unsigned int *)(a2 + 808);
        if (*(_QWORD *)(a1 + 800) < v10)
          goto LABEL_9;
        goto LABEL_13;
      }
      v9 = *(void **)(a1 + 768);
      v7 = 8 * v5;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 768);
      if (v6)
        MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 768) = 0;
      v7 = 8 * v5;
      v8 = (v7 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 776) = v8 >> 3;
      v9 = operator new(v8, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 768) = v9;
    }
    memcpy(v9, *(const void **)(a2 + 768), v7);
    *(_DWORD *)(a1 + 784) = *(_DWORD *)(a2 + 784);
    v10 = *(unsigned int *)(a2 + 808);
    if (*(_QWORD *)(a1 + 800) < v10)
    {
LABEL_9:
      v11 = *(_QWORD *)(a1 + 792);
      if (v11)
        MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 792) = 0;
      v12 = 8 * v10;
      v13 = (v12 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 800) = v13 >> 3;
      v14 = operator new(v13, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 792) = v14;
      goto LABEL_15;
    }
LABEL_13:
    if (!(_DWORD)v10)
    {
      *(_DWORD *)(a1 + 808) = 0;
      v15 = *(unsigned int *)(a2 + 832);
      if (*(_QWORD *)(a1 + 824) < v15)
        goto LABEL_16;
      goto LABEL_20;
    }
    v14 = *(void **)(a1 + 792);
    v12 = 8 * v10;
LABEL_15:
    memcpy(v14, *(const void **)(a2 + 792), v12);
    *(_DWORD *)(a1 + 808) = *(_DWORD *)(a2 + 808);
    v15 = *(unsigned int *)(a2 + 832);
    if (*(_QWORD *)(a1 + 824) < v15)
    {
LABEL_16:
      v16 = *(_QWORD *)(a1 + 816);
      if (v16)
        MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 816) = 0;
      v17 = 8 * v15;
      v18 = (v17 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 824) = v18 >> 3;
      v19 = operator new(v18, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 816) = v19;
      goto LABEL_22;
    }
LABEL_20:
    if (!(_DWORD)v15)
    {
      *(_DWORD *)(a1 + 832) = 0;
      v20 = *(unsigned int *)(a2 + 856);
      if (*(_QWORD *)(a1 + 848) < v20)
        goto LABEL_23;
      goto LABEL_27;
    }
    v19 = *(void **)(a1 + 816);
    v17 = 8 * v15;
LABEL_22:
    memcpy(v19, *(const void **)(a2 + 816), v17);
    *(_DWORD *)(a1 + 832) = *(_DWORD *)(a2 + 832);
    v20 = *(unsigned int *)(a2 + 856);
    if (*(_QWORD *)(a1 + 848) < v20)
    {
LABEL_23:
      v21 = *(_QWORD *)(a1 + 840);
      if (v21)
        MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 840) = 0;
      v22 = 8 * v20;
      v23 = (v22 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 848) = v23 >> 3;
      v24 = operator new(v23, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 840) = v24;
      goto LABEL_29;
    }
LABEL_27:
    if (!(_DWORD)v20)
    {
      *(_DWORD *)(a1 + 856) = 0;
      v25 = *(unsigned int *)(a2 + 880);
      if (*(_QWORD *)(a1 + 872) < v25)
        goto LABEL_30;
      goto LABEL_34;
    }
    v24 = *(void **)(a1 + 840);
    v22 = 8 * v20;
LABEL_29:
    memcpy(v24, *(const void **)(a2 + 840), v22);
    *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
    v25 = *(unsigned int *)(a2 + 880);
    if (*(_QWORD *)(a1 + 872) < v25)
    {
LABEL_30:
      v26 = *(_QWORD *)(a1 + 864);
      if (v26)
        MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 864) = 0;
      v27 = 8 * v25;
      v28 = (v27 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 872) = v28 >> 3;
      v29 = operator new(v28, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 864) = v29;
      goto LABEL_36;
    }
LABEL_34:
    if (!(_DWORD)v25)
    {
      v30 = 0;
      goto LABEL_38;
    }
    v29 = *(void **)(a1 + 864);
    v27 = 8 * v25;
LABEL_36:
    memcpy(v29, *(const void **)(a2 + 864), v27);
    v30 = *(_DWORD *)(a2 + 880);
LABEL_38:
    *(_DWORD *)(a1 + 880) = v30;
  }
  v31 = *(_OWORD *)(a2 + 888);
  *(_DWORD *)(a1 + 904) = *(_DWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 888) = v31;
  return a1;
}

uint64_t sub_20F88F474(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int64x2_t *v28;
  int64x2_t *v29;
  unint64_t v30;
  unsigned int v31;
  int64x2_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  double *v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double *v65;
  int64_t v66;
  double *v67;
  double *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int64x2_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  int64x2_t *v100;
  int64x2_t *v101;
  unint64_t v102;
  unsigned int v103;
  int64x2_t *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _DWORD *v109;
  double *v110;
  double v111;
  double v112;
  double *v113;
  double *v114;
  double *v115;
  double v116;
  double v117;
  double *v118;
  double *v119;
  double v120;
  double v121;
  double v122;
  double *v123;
  double v124;
  uint64_t v125;
  int64x2_t *v126;
  int64x2_t v127;
  uint64_t v128;
  int64x2_t v129;
  uint64_t v130;
  const char *v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  double *v146;
  double *v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  double *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  int64_t v169;
  double *v170;
  double *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int64x2_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t *v178;
  double *v179;
  double v180;
  double v181;
  double *v182;
  double *v183;
  double *v184;
  double v185;
  double v186;
  double *v187;
  double *v188;
  double v189;
  double v190;
  double v191;
  double *v192;
  double v193;
  unint64_t v194;
  int64x2_t v195;
  int64x2_t *v196;
  int64x2_t v197;
  int64x2_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  size_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  int64_t v209;
  char *v210;
  uint64_t v211;
  _DWORD *v212;
  uint64_t *v213;
  double *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  unint64_t v224;
  double v225;
  uint64_t v226;
  double *v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  double *v242;
  double *v243;
  unint64_t v244;
  size_t v245;
  int v246;
  unint64_t v247;
  uint64_t v248;
  size_t v249;
  const char *v250;
  unsigned __int8 v251;
  const char *v252;
  size_t v253;
  _BYTE *v254;
  uint64_t v255;
  uint64_t v256;
  void ***v257;
  uint64_t v258;
  uint64_t v259;
  NSObject *v260;
  size_t v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  size_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  int v286;
  unint64_t v287;
  uint64_t v288;
  size_t v289;
  const char *v290;
  unsigned __int8 v291;
  const char *v292;
  size_t v293;
  _BYTE *v294;
  uint64_t v295;
  uint64_t v296;
  void ***v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  size_t v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  size_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  double *v325;
  double *v326;
  double *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  double *v331;
  double v332;
  double v333;
  double v334;
  int v335;
  int v336;
  double v337;
  double v338;
  double *v339;
  _DWORD *v340;
  int v341;
  double v342;
  int v343;
  int v344;
  double *v345;
  unint64_t v346;
  double *v347;
  double *v348;
  double v349;
  double v350;
  double v351;
  double *v352;
  double v353;
  double v354;
  int v355;
  int v356;
  double v357;
  int v358;
  double v359;
  double v360;
  double *v361;
  double v362;
  double *v363;
  double v364;
  double v365;
  int v366;
  double v367;
  double v368;
  double v369;
  unint64_t v370;
  double v371;
  double v372;
  int v373;
  unint64_t v374;
  int64x2_t v375;
  int64x2_t *v376;
  int64x2_t v377;
  int64x2_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  __int128 v382;
  size_t v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  int64_t v389;
  char *v390;
  uint64_t v391;
  _DWORD *v392;
  uint64_t *v393;
  double *v394;
  uint64_t v395;
  char *v396;
  char *v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  unint64_t v404;
  double v405;
  uint64_t v406;
  double *v407;
  double v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  double *v422;
  double *v423;
  unint64_t v424;
  size_t v425;
  int v426;
  unint64_t v427;
  uint64_t v428;
  size_t v429;
  const char *v430;
  unsigned __int8 v431;
  const char *v432;
  size_t v433;
  _BYTE *v434;
  uint64_t v435;
  uint64_t v436;
  void ***v437;
  uint64_t v438;
  uint64_t v439;
  NSObject *v440;
  size_t v441;
  std::__shared_weak_count_vtbl *v442;
  std::__shared_weak_count *v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  size_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  void *v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t v464;
  int v466;
  unint64_t v467;
  uint64_t v468;
  size_t v469;
  const char *v470;
  unsigned __int8 v471;
  const char *v472;
  size_t v473;
  _BYTE *v474;
  uint64_t v475;
  uint64_t v476;
  void ***v477;
  uint64_t v478;
  uint64_t v479;
  NSObject *v480;
  size_t v481;
  std::__shared_weak_count_vtbl *v482;
  std::__shared_weak_count *v483;
  std::__shared_weak_count *v484;
  unint64_t *p_shared_owners;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  size_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  double *v505;
  double *v506;
  double *v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  double *v511;
  double v512;
  double v513;
  double v514;
  int v515;
  double *v516;
  _DWORD *v517;
  int v518;
  double v519;
  int v520;
  int v521;
  double *v522;
  int v523;
  double v524;
  unint64_t v525;
  int v526;
  double *v527;
  double *v528;
  double v529;
  double v530;
  double v531;
  double *v532;
  double v533;
  double v534;
  int v535;
  double v536;
  int v537;
  double v538;
  double v539;
  double *v540;
  double v541;
  double *v542;
  double v543;
  double v544;
  int v545;
  int v546;
  double v547;
  double v548;
  double v549;
  unint64_t v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  double v557;
  int v558;
  double *v559;
  double v560;
  double v561;
  double *v562;
  double *v563;
  double *v564;
  double v565;
  double v566;
  int v567;
  double v568;
  double v569;
  double v570;
  double v571;
  double v572;
  int v573;
  double *v574;
  double v575;
  double v576;
  double *v577;
  double *v578;
  double *v579;
  double v580;
  double v581;
  int v582;
  int v583;
  double v584;
  double v585;
  int v586;
  int v587;
  double v588;
  double v589;
  int v590;
  double v591;
  double *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  uint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  _QWORD *v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  uint64_t v607;
  _QWORD *v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  _QWORD *v619;
  _QWORD *v620;
  _QWORD *v621;
  _QWORD *v622;
  _QWORD *v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  _QWORD *v631;
  _QWORD *v632;
  _QWORD *v633;
  double v634;
  double *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  uint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  uint64_t v650;
  _QWORD *v651;
  _QWORD *v652;
  _QWORD *v653;
  _QWORD *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  _QWORD *v662;
  _QWORD *v663;
  _QWORD *v664;
  _QWORD *v665;
  _QWORD *v666;
  _QWORD *v667;
  _QWORD *v668;
  _QWORD *v669;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  _QWORD *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int64x2_t *v692;
  uint64_t v693;
  uint64_t v694;
  int64x2_t *v695;
  uint64_t v696;
  uint64_t v697;
  double *__src;
  double *__srca;
  _QWORD **__srcb;
  _QWORD **__srcc;
  _QWORD **__srcd;
  _QWORD **__srce;
  __int128 v704;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v706;
  const char *v707;
  int v708;
  const char *v709;
  uint64_t v710;
  std::__shared_weak_count *v711;
  void *__p;
  _BYTE *v713;
  uint64_t v714;
  void *v715;
  void *v716;
  size_t v717;
  __int128 v718;
  char *v719;
  int v720;
  _BYTE v721[24];
  unint64_t v722;
  void **v723;
  void **v724;
  _DWORD *v725;
  _QWORD *p_p;
  __int128 *v727;
  __int128 *v728;
  uint64_t v729;
  __int128 *v730;
  uint64_t v731;

  v731 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 1948);
  if (!*(_BYTE *)a1)
  {
    if (!v6)
      return a2;
    if (v6 == -1)
    {
      sub_20FC6589C(*(_QWORD **)(a1 + 16), (uint64_t)v721, 0);
      return a2;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(v12 + 144);
    v14 = a3[2];
    *(_QWORD *)v721 = 0;
    sub_20FC603F0(a2 + 11824, v14, (uint64_t *)v721);
    sub_20FC6061C(a2 + 11872, a3[2], (uint64_t)&unk_2103BBD08);
    v15 = *(_QWORD *)(v12 + 16);
    if (v13 | v15)
    {
      if (v15)
        v15 = *(_QWORD *)(v15 + 16);
      if (v13)
        v16 = *(_QWORD *)(v13 + 16);
      else
        v16 = 0;
      *(_QWORD *)v721 = 0;
      sub_20F4058C4(a2 + 11848, v16 + v15, (uint64_t *)v721);
      *(_QWORD *)&v704 = *(_QWORD *)(a2 + 11848);
      *(_QWORD *)v721 = &v704;
      *(_QWORD *)&v721[8] = a3;
      *(_QWORD *)&v721[16] = a2 + 11824;
      v722 = a2 + 11872;
      v723 = (void **)&v718;
      v93 = *(_QWORD **)(v12 + 16);
      if (v93)
      {
        v96 = (_QWORD *)*v93;
        v94 = v93 + 1;
        v95 = v96;
        if (v96 != v94)
        {
          do
          {
            sub_20FC60874((unint64_t)v721, (uint64_t)(v95 + 4));
            v105 = (_QWORD *)v95[1];
            if (v105)
            {
              do
              {
                v106 = v105;
                v105 = (_QWORD *)*v105;
              }
              while (v105);
            }
            else
            {
              do
              {
                v106 = (_QWORD *)v95[2];
                v35 = *v106 == (_QWORD)v95;
                v95 = v106;
              }
              while (!v35);
            }
            v95 = v106;
          }
          while (v106 != v94);
        }
      }
      if (v13)
      {
        v99 = *(_QWORD **)v13;
        v98 = (_QWORD *)(v13 + 8);
        v97 = v99;
        if (v99 != v98)
        {
          do
          {
            sub_20FC60874((unint64_t)v721, (uint64_t)(v97 + 4));
            v107 = (_QWORD *)v97[1];
            if (v107)
            {
              do
              {
                v108 = v107;
                v107 = (_QWORD *)*v107;
              }
              while (v107);
            }
            else
            {
              do
              {
                v108 = (_QWORD *)v97[2];
                v35 = *v108 == (_QWORD)v97;
                v97 = v108;
              }
              while (!v35);
            }
            v97 = v108;
          }
          while (v108 != v98);
        }
      }
      v19 = *(unsigned int *)(a2 + 1948);
      v20 = *(unsigned __int8 *)(a2 + 1976);
      if (v19 < (uint64_t)(*(_QWORD *)(a2 + 11856) - *(_QWORD *)(a2 + 11848)) >> 3)
        goto LABEL_163;
    }
    else
    {
      *(_QWORD *)(a2 + 11856) = *(_QWORD *)(a2 + 11848);
      LODWORD(v19) = *(_DWORD *)(a2 + 1948);
      v20 = *(unsigned __int8 *)(a2 + 1976);
    }
    if (!v20 && *(_BYTE *)(a2 + 1977))
    {
      v109 = (_DWORD *)(a2 + 11896);
      v717 = 0;
      goto LABEL_167;
    }
    v100 = *(int64x2_t **)(a2 + 11824);
    v101 = *(int64x2_t **)(a2 + 11832);
    if (v100 == v101)
    {
      v103 = 0;
      goto LABEL_162;
    }
    v102 = (char *)v101 - (char *)v100 - 8;
    if (v102 >= 0x18)
    {
      v125 = (v102 >> 3) + 1;
      v104 = (int64x2_t *)((char *)v100 + 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL));
      v126 = v100 + 1;
      v127 = 0uLL;
      v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      v129 = 0uLL;
      do
      {
        v127 = vaddq_s64(v126[-1], v127);
        v129 = vaddq_s64(*v126, v129);
        v126 += 2;
        v128 -= 4;
      }
      while (v128);
      v103 = vaddvq_s64(vaddq_s64(v129, v127));
      if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_162:
        if (v19 >= v103)
        {
          sub_20FC6589C(*(_QWORD **)(a1 + 16), (uint64_t)v721, v103);
          return a2;
        }
LABEL_163:
        v109 = (_DWORD *)(a2 + 11896);
        v717 = 0;
        if (!v20)
        {
LABEL_167:
          sub_20F889B78((uint64_t *)&v715, *(_QWORD *)(a2 + 8216), a3);
          __p = 0;
          v713 = 0;
          v714 = 0;
          v132 = *(_QWORD *)(a1 + 16);
          v133 = *(_QWORD **)(v132 + 144);
          LODWORD(v718) = *(_DWORD *)(a2 + 1948);
          *(_QWORD *)(a2 + 11904) = *(_QWORD *)(a2 + 11896);
          v717 = 0;
          *(_QWORD *)&v704 = 0;
          *(_QWORD *)v721 = &v704;
          *(_QWORD *)&v721[8] = a3;
          *(_QWORD *)&v721[16] = &v717;
          v722 = v132;
          v723 = (void **)v132;
          v724 = &v715;
          v725 = v109;
          p_p = &__p;
          v727 = &v718;
          v728 = (__int128 *)(a2 + 11824);
          v729 = a2 + 11848;
          v730 = (__int128 *)(a2 + 11872);
          v134 = *(_QWORD **)(v132 + 16);
          if (v134)
          {
            v137 = (_QWORD *)*v134;
            v135 = v134 + 1;
            v136 = v137;
            if (v137 != v135)
            {
              do
              {
                sub_20FC68048((uint64_t **)v721, (uint64_t)(v136 + 4));
                v152 = (_QWORD *)v136[1];
                if (v152)
                {
                  do
                  {
                    v153 = v152;
                    v152 = (_QWORD *)*v152;
                  }
                  while (v152);
                }
                else
                {
                  do
                  {
                    v153 = (_QWORD *)v136[2];
                    v35 = *v153 == (_QWORD)v136;
                    v136 = v153;
                  }
                  while (!v35);
                }
                v136 = v153;
              }
              while (v153 != v135);
            }
          }
          if (v133)
          {
            v140 = (_QWORD *)*v133;
            v138 = v133 + 1;
            v139 = v140;
            if (v140 != v138)
            {
              do
              {
                sub_20FC68048((uint64_t **)v721, (uint64_t)(v139 + 4));
                v154 = (_QWORD *)v139[1];
                if (v154)
                {
                  do
                  {
                    v155 = v154;
                    v154 = (_QWORD *)*v154;
                  }
                  while (v154);
                }
                else
                {
                  do
                  {
                    v155 = (_QWORD *)v139[2];
                    v35 = *v155 == (_QWORD)v139;
                    v139 = v155;
                  }
                  while (!v35);
                }
                v139 = v155;
              }
              while (v155 != v138);
            }
          }
          if (0xCF3CF3CF3CF3CF3DLL * ((v713 - (_BYTE *)__p) >> 3) != (uint64_t)(*(_QWORD *)(a2 + 11904)
                                                                              - *(_QWORD *)(a2 + 11896)) >> 4
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5115, (uint64_t)"weak_feature_vectors.size() == scores.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          if (*(_BYTE *)(a2 + 1977))
          {
            printf("[MMI] %zu %zu\n", (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4, v717);
            v141 = *(_QWORD *)(a2 + 11896);
            v142 = *(_QWORD *)(a2 + 11904);
            v144 = __p;
            v143 = v713;
            memset(v721, 0, sizeof(v721));
            v145 = v142 - v141;
            if (v142 == v141)
            {
              v147 = 0;
              v151 = 0;
            }
            else
            {
              if (v145 < 0)
                sub_20E867F44();
              v146 = (double *)operator new(v142 - v141);
              v147 = v146;
              v148 = 0;
              *(_QWORD *)v721 = v146;
              *(_QWORD *)&v721[16] = &v146[2 * (v145 >> 4)];
              do
              {
                v149 = v141 + v148 * 8;
                v150 = &v146[v148];
                *v150 = *(double *)(v141 + v148 * 8);
                *((_DWORD *)v150 + 2) = *(_DWORD *)(v141 + v148 * 8 + 8);
                v148 += 2;
              }
              while (v149 + 16 != v142);
              v151 = &v146[v148];
              *(_QWORD *)&v721[8] = &v146[v148];
            }
            v169 = v143 - v144;
            if (v143 == v144)
            {
              v171 = 0;
              v170 = 0;
            }
            else
            {
              if (0xCF3CF3CF3CF3CF3DLL * (v169 >> 3) > 0x186186186186186)
                sub_20E867F44();
              v170 = (double *)operator new(v169);
              v171 = &v170[v169 >> 3];
              memcpy(v170, v144, v169);
            }
            v172 = (char *)v151 - (char *)v147;
            v173 = ((char *)v151 - (char *)v147) >> 4;
            __srca = v170;
            if ((unint64_t)((char *)v151 - (char *)v147) < 0x641)
            {
              if (v147 != v151)
              {
                v179 = v147 + 2;
                v180 = *v147;
                v181 = *v147;
                if (v147 + 2 != v151)
                {
                  v182 = v147 + 2;
                  v183 = v147;
                  v184 = v147 + 2;
                  do
                  {
                    v185 = *v184;
                    v184 += 2;
                    v186 = v185;
                    if (v185 < v181)
                    {
                      v181 = v186;
                      v183 = v182;
                    }
                    v182 = v184;
                  }
                  while (v184 != v151);
                  v181 = *v183;
                  v187 = v147;
                  v188 = v147 + 2;
                  do
                  {
                    v189 = *v188;
                    v188 += 2;
                    v190 = v189;
                    if (v180 < v189)
                    {
                      v180 = v190;
                      v187 = v179;
                    }
                    v179 = v188;
                  }
                  while (v188 != v151);
                  v180 = *v187;
                }
                v191 = v180 + (v180 - v181) / (double)v173 * -100.0;
                if (v173 <= 1)
                  v173 = 1;
                v192 = v170 + 10;
                do
                {
                  v193 = *v147;
                  v147 += 2;
                  printf("[MMS] %g %g %g %g ", v193, NAN, v193 - v191, 1.0);
                  printf(" %g", *(v192 - 10));
                  printf(" %g", *(v192 - 9));
                  printf(" %g", *(v192 - 8));
                  printf(" %g", *(v192 - 7));
                  printf(" %g", *(v192 - 6));
                  printf(" %g", *(v192 - 5));
                  printf(" %g", *(v192 - 4));
                  printf(" %g", *(v192 - 3));
                  printf(" %g", *(v192 - 2));
                  printf(" %g", *(v192 - 1));
                  printf(" %g", *v192);
                  printf(" %g", v192[1]);
                  printf(" %g", v192[2]);
                  printf(" %g", v192[3]);
                  printf(" %g", v192[4]);
                  printf(" %g", v192[5]);
                  printf(" %g", v192[6]);
                  printf(" %g", v192[7]);
                  printf(" %g", v192[8]);
                  printf(" %g", v192[9]);
                  printf(" %g", v192[10]);
                  putchar(10);
                  v192 += 21;
                  --v173;
                }
                while (v173);
                goto LABEL_549;
              }
LABEL_548:
              if (!v170)
              {
LABEL_550:
                if (*(_QWORD *)v721)
                {
                  *(_QWORD *)&v721[8] = *(_QWORD *)v721;
                  operator delete(*(void **)v721);
                }
                printf("[MMD]");
                v409 = 0;
                v410 = 0;
                v411 = 200;
                while (1)
                {
                  v413 = *(_QWORD *)(a2 + 11872);
                  v414 = *(_QWORD *)(a2 + 11880);
                  if (v413 == v414)
                  {
                    v412 = 0;
                  }
                  else
                  {
                    v415 = v414 - v413 - 200;
                    if (v415 >= 0xC8)
                    {
                      v417 = 0;
                      v418 = 0;
                      v419 = v415 / 0xC8 + 1;
                      v416 = v413 + 200 * (v419 & 0x3FFFFFFFFFFFFFELL);
                      v420 = (_QWORD *)(v413 + v411);
                      v421 = v419 & 0x3FFFFFFFFFFFFFELL;
                      do
                      {
                        v417 += *(v420 - 25);
                        v418 += *v420;
                        v420 += 50;
                        v421 -= 2;
                      }
                      while (v421);
                      v412 = v418 + v417;
                      if (v419 == (v419 & 0x3FFFFFFFFFFFFFELL))
                        goto LABEL_554;
                    }
                    else
                    {
                      v412 = 0;
                      v416 = *(_QWORD *)(a2 + 11872);
                    }
                    do
                    {
                      v412 += *(_QWORD *)(v416 + v409);
                      v416 += 200;
                    }
                    while (v416 != v414);
                  }
LABEL_554:
                  printf(" %zu", v412);
                  ++v410;
                  v411 += 8;
                  v409 += 8;
                  if (v410 == 25)
                  {
                    putchar(10);
                    goto LABEL_564;
                  }
                }
              }
LABEL_549:
              operator delete(__srca);
              goto LABEL_550;
            }
            v704 = 0uLL;
            rep = 0;
            if ((v172 & 0x8000000000000000) != 0)
              sub_20E867F44();
            v174 = v172 >> 1;
            v175 = (int64x2_t *)operator new(v172 >> 1);
            *(_QWORD *)&v704 = v175;
            rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v175->i64[v173];
            bzero(v175, v172 >> 1);
            v176 = (uint64_t *)((char *)v175->i64 + (v172 >> 1));
            *((_QWORD *)&v704 + 1) = v176;
            if (v151 != v147)
            {
              if (v174 - 8 < 0x18)
              {
                v177 = 0;
                v178 = (uint64_t *)v175;
                do
LABEL_515:
                  *v178++ = v177++;
                while (v178 != v176);
                goto LABEL_516;
              }
              v374 = ((v174 - 8) >> 3) + 1;
              v177 = v374 & 0x3FFFFFFFFFFFFFFCLL;
              v178 = &v175->i64[v374 & 0x3FFFFFFFFFFFFFFCLL];
              v375 = (int64x2_t)xmmword_2102E3FA0;
              v376 = v175 + 1;
              v377 = vdupq_n_s64(2uLL);
              v378 = vdupq_n_s64(4uLL);
              v379 = v374 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v376[-1] = v375;
                *v376 = vaddq_s64(v375, v377);
                v375 = vaddq_s64(v375, v378);
                v376 += 2;
                v379 -= 4;
              }
              while (v379);
              if (v374 != v177)
                goto LABEL_515;
            }
LABEL_516:
            *(_QWORD *)&v718 = v721;
            v380 = 126 - 2 * __clz(v173);
            if (v151 == v147)
              v381 = 0;
            else
              v381 = v380;
            v695 = v175;
            sub_20FC69184((uint64_t)v175, v176, (uint64_t **)&v718, v381, 1);
            v718 = 0uLL;
            v719 = 0;
            v382 = *(_OWORD *)v721;
            v383 = *(_QWORD *)&v721[8] - *(_QWORD *)v721;
            v689 = (uint64_t)(*(_QWORD *)&v721[8] - *(_QWORD *)v721) >> 4;
            if (*(_QWORD *)&v721[8] == *(_QWORD *)v721)
            {
              v385 = 0;
            }
            else
            {
              if ((v383 & 0x8000000000000000) != 0)
                sub_20E867F44();
              v384 = (char *)operator new(v383);
              v385 = v384;
              v386 = 0;
              *(_QWORD *)&v718 = v384;
              v719 = &v384[16 * v689];
              do
              {
                v387 = v382 + v386;
                v388 = &v384[v386];
                *(_QWORD *)v388 = *(_QWORD *)(v382 + v386);
                *((_DWORD *)v388 + 2) = *(_DWORD *)(v382 + v386 + 8);
                v386 += 16;
              }
              while (v387 + 16 != *((_QWORD *)&v382 + 1));
              *((_QWORD *)&v718 + 1) = &v384[v386];
            }
            v389 = (char *)v171 - (char *)v170;
            if (v389)
            {
              if (0xCF3CF3CF3CF3CF3DLL * (v389 >> 3) > 0x186186186186186)
                sub_20E867F44();
              v390 = (char *)operator new(v389);
              memcpy(v390, __srca, v389);
            }
            else
            {
              v390 = 0;
            }
            if (v151 != v147)
            {
              v391 = v172 >> 4;
              if (v172 >> 4 <= 1)
                v391 = 1;
              v392 = (_DWORD *)(v382 + 8);
              v393 = (uint64_t *)v175;
              v394 = __srca;
              do
              {
                v395 = *v393++;
                v396 = &v385[16 * v395];
                *((_QWORD *)v392 - 1) = *(_QWORD *)v396;
                *v392 = *((_DWORD *)v396 + 2);
                v392 += 4;
                v397 = &v390[168 * v395];
                v398 = *((_OWORD *)v397 + 1);
                *(_OWORD *)v394 = *(_OWORD *)v397;
                *((_OWORD *)v394 + 1) = v398;
                v399 = *((_OWORD *)v397 + 5);
                *((_OWORD *)v394 + 4) = *((_OWORD *)v397 + 4);
                *((_OWORD *)v394 + 5) = v399;
                v400 = *((_OWORD *)v397 + 3);
                *((_OWORD *)v394 + 2) = *((_OWORD *)v397 + 2);
                *((_OWORD *)v394 + 3) = v400;
                v394[20] = *((double *)v397 + 20);
                v401 = *((_OWORD *)v397 + 9);
                *((_OWORD *)v394 + 8) = *((_OWORD *)v397 + 8);
                *((_OWORD *)v394 + 9) = v401;
                v402 = *((_OWORD *)v397 + 7);
                *((_OWORD *)v394 + 6) = *((_OWORD *)v397 + 6);
                *((_OWORD *)v394 + 7) = v402;
                v394 += 21;
                --v391;
              }
              while (v391);
            }
            if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
            {
              v403 = 0;
              v404 = 0;
              v405 = (*(double *)(v382 + 1600) + *(double *)(v382 + 1584)) * 0.5;
              if (v689 <= 1)
                v406 = 1;
              else
                v406 = v689;
              v407 = __srca + 10;
              do
              {
                if (v404 >= 0x64)
                  v408 = 0.0;
                else
                  v408 = 1.0;
                printf("[MMS] %g %g %g %g ", *(double *)(*(_QWORD *)v721 + v403), *(double *)(*(_QWORD *)v721 + v403) - v405, *(double *)(*(_QWORD *)v721 + v403) - v405, v408);
                printf(" %g", *(v407 - 10));
                printf(" %g", *(v407 - 9));
                printf(" %g", *(v407 - 8));
                printf(" %g", *(v407 - 7));
                printf(" %g", *(v407 - 6));
                printf(" %g", *(v407 - 5));
                printf(" %g", *(v407 - 4));
                printf(" %g", *(v407 - 3));
                printf(" %g", *(v407 - 2));
                printf(" %g", *(v407 - 1));
                printf(" %g", *v407);
                printf(" %g", v407[1]);
                printf(" %g", v407[2]);
                printf(" %g", v407[3]);
                printf(" %g", v407[4]);
                printf(" %g", v407[5]);
                printf(" %g", v407[6]);
                printf(" %g", v407[7]);
                printf(" %g", v407[8]);
                printf(" %g", v407[9]);
                printf(" %g", v407[10]);
                putchar(10);
                ++v404;
                v403 += 16;
                v407 += 21;
              }
              while (v406 != v404);
            }
            if (v390)
              operator delete(v390);
            v170 = __srca;
            if (v385)
              operator delete(v385);
            operator delete(v695);
            goto LABEL_548;
          }
LABEL_564:
          if (__p)
          {
            v713 = __p;
            operator delete(__p);
          }
          if (v715)
          {
            v716 = v715;
            operator delete(v715);
          }
LABEL_568:
          v422 = *(double **)(a2 + 11904);
          v423 = *(double **)(a2 + 11896);
          v424 = ((char *)v422 - (char *)v423) >> 4;
          v425 = v717;
          if (v424 >= v717)
            goto LABEL_636;
          sub_20F82FD50(&v718);
          if (**(int **)(v718 + 56) > 3
            || (v426 = *(unsigned __int8 *)(v718 + 72),
                v427 = sub_20E8C31DC(v718, "OSLogSurrogateAppender", 1, 0),
                !v426)
            && !v427)
          {
LABEL_635:
            v422 = *(double **)(a2 + 11904);
            v423 = *(double **)(a2 + 11896);
            v425 = v717;
            v424 = ((char *)v422 - (char *)v423) >> 4;
LABEL_636:
            v464 = *(unsigned int *)(a2 + 1948);
            if (v424 >= v464 || v425 < v464)
            {
LABEL_708:
              if (v424 <= v464 && v425 <= v464)
              {
                sub_20FC6589C(*(_QWORD **)(a1 + 16), (uint64_t)v721, v425);
                return a2;
              }
              if (v424 > v464)
              {
                v505 = &v423[2 * v464];
                if (v505 == v422)
                  goto LABEL_885;
                v506 = v423;
                v507 = v422;
                while (1)
                {
                  v508 = ((char *)v507 - (char *)v506) >> 4;
                  if (v508 < 2)
                    goto LABEL_885;
                  if (v508 == 3)
                  {
                    v568 = v506[2];
                    v569 = *v506;
                    v570 = *(v507 - 2);
                    if (v568 <= *v506)
                    {
                      if (v570 > v568)
                      {
                        v506[2] = v570;
                        *(v507 - 2) = v568;
                        v587 = *((_DWORD *)v506 + 6);
                        *((_DWORD *)v506 + 6) = *((_DWORD *)v507 - 2);
                        *((_DWORD *)v507 - 2) = v587;
                        v588 = v506[2];
                        v589 = *v506;
                        if (v588 > *v506)
                        {
                          *v506 = v588;
                          v506[2] = v589;
                          v590 = *((_DWORD *)v506 + 2);
                          *((_DWORD *)v506 + 2) = *((_DWORD *)v506 + 6);
                          *((_DWORD *)v506 + 6) = v590;
                        }
                      }
                      goto LABEL_885;
                    }
                    if (v570 > v568)
                    {
                      *v506 = v570;
                      *(v507 - 2) = v569;
                      goto LABEL_804;
                    }
                    *v506 = v568;
                    v506[2] = v569;
                    v573 = *((_DWORD *)v506 + 2);
                    *((_DWORD *)v506 + 2) = *((_DWORD *)v506 + 6);
                    *((_DWORD *)v506 + 6) = v573;
                    v634 = *(v507 - 2);
                    if (v634 <= v569)
                      goto LABEL_885;
                    v506[2] = v634;
                    *(v507 - 2) = v569;
                    *((_DWORD *)v506 + 6) = *((_DWORD *)v507 - 2);
LABEL_805:
                    *((_DWORD *)v507 - 2) = v573;
                    goto LABEL_885;
                  }
                  if (v508 == 2)
                  {
                    v571 = *(v507 - 2);
                    v572 = *v506;
                    if (v571 <= *v506)
                      goto LABEL_885;
                    *v506 = v571;
                    *(v507 - 2) = v572;
LABEL_804:
                    v573 = *((_DWORD *)v506 + 2);
                    *((_DWORD *)v506 + 2) = *((_DWORD *)v507 - 2);
                    goto LABEL_805;
                  }
                  if ((char *)v507 - (char *)v506 <= 127)
                  {
                    while (v506 != v507 - 2)
                    {
                      v574 = v506;
                      v506 += 2;
                      if (v574 != v507 && v506 != v507)
                      {
                        v575 = *v574;
                        v576 = *v574;
                        v577 = v506;
                        v578 = v574;
                        v579 = v506;
                        do
                        {
                          v580 = *v579;
                          v579 += 2;
                          v581 = v580;
                          if (v580 > v576)
                          {
                            v576 = v581;
                            v578 = v577;
                          }
                          v577 = v579;
                        }
                        while (v579 != v507);
                        if (v578 != v574)
                        {
                          *v574 = *v578;
                          *v578 = v575;
                          v582 = *((_DWORD *)v574 + 2);
                          *((_DWORD *)v574 + 2) = *((_DWORD *)v578 + 2);
                          *((_DWORD *)v578 + 2) = v582;
                        }
                      }
                    }
                    goto LABEL_885;
                  }
                  v509 = v508 >> 1;
                  v510 = (unint64_t)&v506[2 * (v508 >> 1)];
                  v511 = v507 - 2;
                  v512 = *(v507 - 2);
                  v513 = *(double *)v510;
                  v514 = *v506;
                  if (*(double *)v510 > *v506)
                    break;
                  if (v512 > v513)
                  {
                    *(double *)v510 = v512;
                    *(v507 - 2) = v513;
                    v516 = &v506[2 * v509];
                    v518 = *((_DWORD *)v516 + 2);
                    v517 = v516 + 1;
                    *v517 = *((_DWORD *)v507 - 2);
                    *((_DWORD *)v507 - 2) = v518;
                    v519 = *v506;
                    if (*(double *)v510 > *v506)
                    {
                      *v506 = *(double *)v510;
                      *(double *)v510 = v519;
                      v520 = *((_DWORD *)v506 + 2);
                      *((_DWORD *)v506 + 2) = *v517;
                      *v517 = v520;
LABEL_728:
                      v523 = 2;
                      goto LABEL_731;
                    }
                    goto LABEL_729;
                  }
                  v523 = 0;
LABEL_731:
                  v524 = *v506;
                  if (*v506 > *(double *)v510)
                  {
                    v525 = (unint64_t)(v507 - 2);
                    goto LABEL_737;
                  }
                  v525 = (unint64_t)(v507 - 2);
                  while (1)
                  {
                    v525 -= 16;
                    if ((double *)v525 == v506)
                      break;
                    if (*(double *)v525 > *(double *)v510)
                    {
                      *v506 = *(double *)v525;
                      *(double *)v525 = v524;
                      v526 = *((_DWORD *)v506 + 2);
                      *((_DWORD *)v506 + 2) = *(_DWORD *)(v525 + 8);
                      *(_DWORD *)(v525 + 8) = v526;
                      ++v523;
LABEL_737:
                      v527 = v506 + 2;
                      if ((unint64_t)(v506 + 2) >= v525)
                      {
                        v532 = v506 + 2;
                      }
                      else
                      {
                        v528 = v506 + 2;
                        while (1)
                        {
                          v529 = *(double *)v510;
                          do
                          {
                            v530 = *v528;
                            v528 += 2;
                            v531 = v530;
                          }
                          while (v530 > v529);
                          v532 = v528 - 2;
                          do
                          {
                            v533 = *(double *)(v525 - 16);
                            v525 -= 16;
                            v534 = v533;
                          }
                          while (v533 <= v529);
                          if ((unint64_t)v532 >= v525)
                            break;
                          *(v528 - 2) = v534;
                          *(double *)v525 = v531;
                          v535 = *((_DWORD *)v528 - 2);
                          *((_DWORD *)v528 - 2) = *(_DWORD *)(v525 + 8);
                          *(_DWORD *)(v525 + 8) = v535;
                          ++v523;
                          if (v532 == (double *)v510)
                            v510 = v525;
                        }
                      }
                      if (v532 != (double *)v510)
                      {
                        v536 = *v532;
                        if (*(double *)v510 > *v532)
                        {
                          *v532 = *(double *)v510;
                          *(double *)v510 = v536;
                          v537 = *((_DWORD *)v532 + 2);
                          *((_DWORD *)v532 + 2) = *(_DWORD *)(v510 + 8);
                          *(_DWORD *)(v510 + 8) = v537;
                          ++v523;
                        }
                      }
                      if (v532 != v505)
                      {
                        if (v523)
                        {
LABEL_753:
                          if (v532 <= v505)
                            v506 = v532 + 2;
                          else
                            v507 = v532;
                          goto LABEL_779;
                        }
                        if (v532 <= v505)
                        {
                          v542 = v532 + 2;
                          while (v542 != v507)
                          {
                            v543 = *v542;
                            v544 = *(v542 - 2);
                            v542 += 2;
                            if (v543 > v544)
                              goto LABEL_753;
                          }
                        }
                        else
                        {
                          while (v527 != v532)
                          {
                            v538 = *v527;
                            v539 = *(v527 - 2);
                            v527 += 2;
                            if (v538 > v539)
                              goto LABEL_753;
                          }
                        }
                      }
                      goto LABEL_885;
                    }
                  }
                  v540 = v506 + 2;
                  if (v524 <= *v511)
                  {
                    if (v540 == v511)
                      goto LABEL_885;
                    while (1)
                    {
                      v541 = *v540;
                      if (v524 > *v540)
                        break;
                      v540 += 2;
                      if (v540 == v511)
                        goto LABEL_885;
                    }
                    *v540 = *v511;
                    *(v507 - 2) = v541;
                    v545 = *((_DWORD *)v540 + 2);
                    *((_DWORD *)v540 + 2) = *((_DWORD *)v507 - 2);
                    *((_DWORD *)v507 - 2) = v545;
                    v540 += 2;
                  }
                  if (v540 == v511)
                    goto LABEL_885;
                  while (1)
                  {
                    v547 = *v506;
                    do
                    {
                      v548 = *v540;
                      v540 += 2;
                      v549 = v548;
                    }
                    while (v547 <= v548);
                    v550 = (unint64_t)(v540 - 2);
                    do
                    {
                      v551 = *(v511 - 2);
                      v511 -= 2;
                      v552 = v551;
                    }
                    while (v547 > v551);
                    if (v550 >= (unint64_t)v511)
                      break;
                    *(v540 - 2) = v552;
                    *v511 = v549;
                    v546 = *((_DWORD *)v540 - 2);
                    *((_DWORD *)v540 - 2) = *((_DWORD *)v511 + 2);
                    *((_DWORD *)v511 + 2) = v546;
                  }
                  v506 = v540 - 2;
                  if (v550 > (unint64_t)v505)
                    goto LABEL_885;
LABEL_779:
                  if (v507 == v505)
                  {
LABEL_885:
                    v635 = &v423[2 * *(unsigned int *)(a2 + 1948)];
                    if (v635 != v422)
                      *(_QWORD *)(a2 + 11904) = v635;
                    goto LABEL_887;
                  }
                }
                if (v512 <= v513)
                {
                  *v506 = v513;
                  *(double *)v510 = v514;
                  v521 = *((_DWORD *)v506 + 2);
                  v522 = &v506[2 * v509 + 1];
                  *((_DWORD *)v506 + 2) = *(_DWORD *)v522;
                  *(_DWORD *)v522 = v521;
                  if (*v511 > v514)
                  {
                    *(double *)v510 = *v511;
                    *(v507 - 2) = v514;
                    *(_DWORD *)v522 = *((_DWORD *)v507 - 2);
                    *((_DWORD *)v507 - 2) = v521;
                    goto LABEL_728;
                  }
                }
                else
                {
                  *v506 = v512;
                  *(v507 - 2) = v514;
                  v515 = *((_DWORD *)v506 + 2);
                  *((_DWORD *)v506 + 2) = *((_DWORD *)v507 - 2);
                  *((_DWORD *)v507 - 2) = v515;
                }
LABEL_729:
                v523 = 1;
                goto LABEL_731;
              }
LABEL_887:
              v721[0] = 0;
              sub_20EDCA4D0(a2 + 11920, v425, v721);
              v636 = *(_QWORD *)(a2 + 11896);
              v637 = *(_QWORD *)(a2 + 11904);
              if (v636 != v637)
              {
                v638 = *(_QWORD *)(a2 + 11920);
                v639 = *(_QWORD *)(a2 + 11896);
                do
                {
                  *(_QWORD *)(v638 + (((unint64_t)*(unsigned int *)(v639 + 8) >> 3) & 0x1FFFFFF8)) ^= 1 << *(_DWORD *)(v639 + 8);
                  v639 += 16;
                }
                while (v639 != v637);
              }
              v640 = *(_QWORD **)(a1 + 16);
              v641 = v637 - v636;
              v35 = v641 == 0;
              v642 = v641 >> 4;
              if (v35)
                v642 = *(_QWORD *)(a2 + 11928);
              __p = (void *)(a2 + 11920);
              v643 = (_QWORD *)v640[2];
              if (v643)
              {
                if (v642)
                {
LABEL_910:
                  sub_20FC5E8A8((uint64_t)(v640 + 806), v642 - 0x79435E50D79435E5 * ((uint64_t)(v640[807] - v640[806]) >> 4));
                  v640[841] = v640 + 394;
                  v655 = v640[1];
                  v704 = *(_OWORD *)(*(_QWORD *)(v655 + 48) + 32);
                  v658 = *(_QWORD *)(v655 + 56);
                  v656 = v655 + 56;
                  v657 = v658;
                  if (v658)
                  {
                    do
                    {
                      v659 = v657;
                      v657 = *(_QWORD *)(v657 + 8);
                    }
                    while (v657);
                  }
                  else
                  {
                    do
                    {
                      v659 = *(_QWORD *)(v656 + 16);
                      v35 = *(_QWORD *)v659 == v656;
                      v656 = v659;
                    }
                    while (v35);
                  }
                  v718 = *(_OWORD *)(v659 + 32);
                  v660 = v640[807];
                  if (v660 == v640[806])
                    v661 = 0;
                  else
                    v661 = *(_DWORD *)(v660 - 296) + 1;
                  v720 = v661;
                  v715 = 0;
                  *(_QWORD *)v721 = v640;
                  *(_QWORD *)&v721[8] = &v704;
                  *(_QWORD *)&v721[16] = &v718;
                  v722 = (unint64_t)(v640 + 646);
                  v723 = &__p;
                  v724 = &v715;
                  v725 = &v720;
                  p_p = v640 + 607;
                  v665 = (_QWORD *)v640[2];
                  if (v665)
                  {
                    v668 = (_QWORD *)*v665;
                    v666 = v665 + 1;
                    v667 = v668;
                    if (v668 != v666)
                    {
                      do
                      {
                        sub_20FC6A0A4((uint64_t *)v721, (uint64_t)(v667 + 4));
                        v674 = (_QWORD *)v667[1];
                        if (v674)
                        {
                          do
                          {
                            v675 = v674;
                            v674 = (_QWORD *)*v674;
                          }
                          while (v674);
                        }
                        else
                        {
                          do
                          {
                            v675 = (_QWORD *)v667[2];
                            v35 = *v675 == (_QWORD)v667;
                            v667 = v675;
                          }
                          while (!v35);
                        }
                        v667 = v675;
                      }
                      while (v675 != v666);
                    }
                  }
                  v669 = (_QWORD *)v640[18];
                  if (v669)
                  {
                    v672 = (_QWORD *)*v669;
                    v670 = v669 + 1;
                    v671 = v672;
                    if (v672 != v670)
                    {
                      do
                      {
                        sub_20FC6A0A4((uint64_t *)v721, (uint64_t)(v671 + 4));
                        v676 = (_QWORD *)v671[1];
                        if (v676)
                        {
                          do
                          {
                            v677 = v676;
                            v676 = (_QWORD *)*v676;
                          }
                          while (v676);
                        }
                        else
                        {
                          do
                          {
                            v677 = (_QWORD *)v671[2];
                            v35 = *v677 == (_QWORD)v671;
                            v671 = v677;
                          }
                          while (!v35);
                        }
                        v671 = v677;
                      }
                      while (v677 != v670);
                    }
                  }
                  return a2;
                }
                v646 = (_QWORD *)*v643;
                v644 = v643 + 1;
                v645 = v646;
                if (v646 == v644)
                {
                  v642 = 0;
                }
                else
                {
                  v642 = 0;
                  do
                  {
                    v647 = (_QWORD *)v645[1];
                    v648 = v645;
                    if (v647)
                    {
                      do
                      {
                        v649 = v647;
                        v647 = (_QWORD *)*v647;
                      }
                      while (v647);
                    }
                    else
                    {
                      do
                      {
                        v649 = (_QWORD *)v648[2];
                        v35 = *v649 == (_QWORD)v648;
                        v648 = v649;
                      }
                      while (!v35);
                    }
                    v642 += (uint64_t)(*(_QWORD *)(v645[6] + 128) - *(_QWORD *)(v645[6] + 120)) >> 6;
                    v645 = v649;
                  }
                  while (v649 != v644);
                }
              }
              else
              {
                v650 = v640[18];
                if (!v650 || !*(_QWORD *)(v650 + 16))
                  return a2;
                if (v642)
                  goto LABEL_910;
              }
              v651 = (_QWORD *)v640[18];
              if (v651)
              {
                v654 = (_QWORD *)*v651;
                v652 = v651 + 1;
                v653 = v654;
                if (v654 != v652)
                {
                  do
                  {
                    v662 = (_QWORD *)v653[1];
                    v663 = v653;
                    if (v662)
                    {
                      do
                      {
                        v664 = v662;
                        v662 = (_QWORD *)*v662;
                      }
                      while (v662);
                    }
                    else
                    {
                      do
                      {
                        v664 = (_QWORD *)v663[2];
                        v35 = *v664 == (_QWORD)v663;
                        v663 = v664;
                      }
                      while (!v35);
                    }
                    v642 += (uint64_t)(*(_QWORD *)(v653[6] + 128) - *(_QWORD *)(v653[6] + 120)) >> 6;
                    v653 = v664;
                  }
                  while (v664 != v652);
                }
              }
              goto LABEL_910;
            }
            sub_20F82FD50(&v718);
            if (**(int **)(v718 + 56) > 4
              || (v466 = *(unsigned __int8 *)(v718 + 72),
                  v467 = sub_20E8C31DC(v718, "OSLogSurrogateAppender", 1, 0),
                  !v466)
              && !v467)
            {
LABEL_707:
              v422 = *(double **)(a2 + 11904);
              v423 = *(double **)(a2 + 11896);
              v464 = *(unsigned int *)(a2 + 1948);
              v425 = v717;
              v424 = ((char *)v422 - (char *)v423) >> 4;
              goto LABEL_708;
            }
            __srce = (_QWORD **)v467;
            *(_QWORD *)&v704 = &v718;
            *((std::chrono::steady_clock::time_point *)&v704 + 1) = std::chrono::steady_clock::now();
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v706 = 4;
            v707 = "unknown file";
            v708 = 5143;
            v710 = 0;
            v711 = 0;
            v709 = "unknown function";
            v468 = *(_QWORD *)v704;
            v685 = *(_QWORD *)v704;
            if (*(char *)(*(_QWORD *)v704 + 39) < 0)
            {
              v470 = *(const char **)(v468 + 16);
              v469 = *(_QWORD *)(v468 + 24);
            }
            else
            {
              v469 = *(unsigned __int8 *)(*(_QWORD *)v704 + 39);
              v470 = (const char *)(*(_QWORD *)v704 + 16);
            }
            v681 = *(_QWORD *)v704 + 16;
            v691 = *(_QWORD *)(a2 + 11896);
            v697 = *(_QWORD *)(a2 + 11904);
            v471 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v471 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v721);
              if ((_BYTE)v722)
              {
                *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v721;
                *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v721[16];
              }
              else
              {
                byte_254A4A4F8[23] = 14;
                strcpy(byte_254A4A4F8, "com.apple.cv3d");
              }
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v472 = byte_254A4A4F8;
            else
              v472 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v473 = byte_254A4A4F8[23];
            else
              v473 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v721 = os_log_create(v472, v470);
            v474 = &v721[8];
            if (v473 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v473 >= 0x17)
            {
              v475 = (v473 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v473 | 7) != 0x17)
                v475 = v473 | 7;
              v476 = v475 + 1;
              v474 = operator new(v475 + 1);
              *(_QWORD *)&v721[16] = v473;
              v722 = v476 | 0x8000000000000000;
              *(_QWORD *)&v721[8] = v474;
            }
            else
            {
              HIBYTE(v722) = v473;
              if (!v473)
              {
LABEL_662:
                v474[v473] = 0;
                LOBYTE(v723) = 1;
                v477 = &v724;
                if (v469 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v469 >= 0x17)
                {
                  v478 = (v469 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v469 | 7) != 0x17)
                    v478 = v469 | 7;
                  v479 = v478 + 1;
                  v477 = (void ***)operator new(v478 + 1);
                  v725 = (_DWORD *)v469;
                  p_p = (_QWORD *)(v479 | 0x8000000000000000);
                  v724 = (void **)v477;
                }
                else
                {
                  HIBYTE(p_p) = v469;
                  if (!v469)
                    goto LABEL_670;
                }
                memmove(v477, v470, v469);
LABEL_670:
                *((_BYTE *)v477 + v469) = 0;
                LOBYTE(v727) = 1;
                v480 = *(NSObject **)v721;
                if (SHIBYTE(p_p) < 0)
                  operator delete(v724);
                if ((_BYTE)v723 && SHIBYTE(v722) < 0)
                  operator delete(*(void **)&v721[8]);
                if (*(_QWORD *)v721)
                  os_release(*(void **)v721);
                if (__srce && __srce[3])
                {
                  v481 = _os_log_pack_size();
                  v482 = (std::__shared_weak_count_vtbl *)operator new(v481, (std::align_val_t)8uLL);
                  v483 = (std::__shared_weak_count *)operator new();
                  v484 = v483;
                  v483->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v483->__shared_owners_;
                  v483->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v483->__shared_weak_owners_ = 0;
                  v483[1].__vftable = v482;
                  do
                    v486 = __ldxr(p_shared_owners);
                  while (__stxr(v486 + 1, p_shared_owners));
                  do
                    v487 = __ldaxr(p_shared_owners);
                  while (__stlxr(v487 - 1, p_shared_owners));
                  if (!v487)
                  {
                    ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                    std::__shared_weak_count::__release_weak(v484);
                  }
                  v488 = _os_log_pack_fill();
                  v489 = v717;
                  *(_DWORD *)v488 = 134218240;
                  *(_QWORD *)(v488 + 4) = v489;
                  *(_WORD *)(v488 + 12) = 2048;
                  *(_QWORD *)(v488 + 14) = (v697 - v691) >> 4;
                  v490 = operator new();
                  v491 = *(unsigned __int8 *)(v685 + 39);
                  v492 = v681;
                  if ((v491 & 0x80u) != 0)
                  {
                    v492 = *(_QWORD *)(v685 + 16);
                    v491 = *(_QWORD *)(v685 + 24);
                  }
                  *(_QWORD *)v490 = v482;
                  *(_QWORD *)(v490 + 8) = v482;
                  *(_QWORD *)(v490 + 16) = v484;
                  *(_QWORD *)(v490 + 24) = 0;
                  *(_QWORD *)(v490 + 32) = 0;
                  *(_QWORD *)(v490 + 40) = v492;
                  *(_QWORD *)(v490 + 48) = v491;
                  *(_BYTE *)(v490 + 56) = 16;
                  *(_QWORD *)v721 = v490;
                  (*(void (**)(_QWORD *, _BYTE *))(*__srce[3] + 40))(__srce[3], v721);
                  v493 = *(_QWORD *)v721;
                  *(_QWORD *)v721 = 0;
                  if (v493)
                  {
                    v494 = *(std::__shared_weak_count **)(v493 + 32);
                    if (v494)
                    {
                      v495 = (unint64_t *)&v494->__shared_owners_;
                      do
                        v496 = __ldaxr(v495);
                      while (__stlxr(v496 - 1, v495));
                      if (!v496)
                      {
                        ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
                        std::__shared_weak_count::__release_weak(v494);
                      }
                    }
                    v497 = *(std::__shared_weak_count **)(v493 + 16);
                    if (v497)
                    {
                      v498 = (unint64_t *)&v497->__shared_owners_;
                      do
                        v499 = __ldaxr(v498);
                      while (__stlxr(v499 - 1, v498));
                      if (!v499)
                      {
                        ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                        std::__shared_weak_count::__release_weak(v497);
                      }
                    }
                    MEMORY[0x212BC6398](v493, 0x10F0C40B62ED6C6);
                  }
                }
                else
                {
                  os_log_type_enabled(v480, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v721 = 134218240;
                  *(_QWORD *)&v721[4] = v717;
                  *(_WORD *)&v721[12] = 2048;
                  *(_QWORD *)&v721[14] = (v697 - v691) >> 4;
                  v500 = (void *)_os_log_send_and_compose_impl();
                  if (v500)
                    free(v500);
                }
                if (v466)
                {
                  sub_20E8C003C((uint64_t)&v704, "There are %zu total constraints but will only select %zu with a valid score.", v717, (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4);
                  sub_20E863570((uint64_t)&v704);
                }
                sub_20E863570((uint64_t)&v704);
                v501 = v711;
                if (v711)
                {
                  v502 = (unint64_t *)&v711->__shared_owners_;
                  do
                    v503 = __ldaxr(v502);
                  while (__stlxr(v503 - 1, v502));
                  if (!v503)
                  {
                    ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                    std::__shared_weak_count::__release_weak(v501);
                  }
                }
                goto LABEL_707;
              }
            }
            memmove(v474, v472, v473);
            goto LABEL_662;
          }
          __srcd = (_QWORD **)v427;
          *(_QWORD *)&v704 = &v718;
          *((std::chrono::steady_clock::time_point *)&v704 + 1) = std::chrono::steady_clock::now();
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v706 = 3;
          v707 = "unknown file";
          v708 = 5137;
          v710 = 0;
          v711 = 0;
          v709 = "unknown function";
          v428 = *(_QWORD *)v704;
          if (*(char *)(*(_QWORD *)v704 + 39) < 0)
          {
            v430 = *(const char **)(v428 + 16);
            v429 = *(_QWORD *)(v428 + 24);
          }
          else
          {
            v429 = *(unsigned __int8 *)(*(_QWORD *)v704 + 39);
            v430 = (const char *)(*(_QWORD *)v704 + 16);
          }
          v680 = *(_QWORD *)v704 + 16;
          v684 = *(_QWORD *)v704;
          v690 = *(_QWORD *)(a2 + 11896);
          v696 = *(_QWORD *)(a2 + 11904);
          v431 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v431 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v721);
            if ((_BYTE)v722)
            {
              *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v721;
              *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v721[16];
            }
            else
            {
              byte_254A4A4F8[23] = 14;
              strcpy(byte_254A4A4F8, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v432 = byte_254A4A4F8;
          else
            v432 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v433 = byte_254A4A4F8[23];
          else
            v433 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v721 = os_log_create(v432, v430);
          v434 = &v721[8];
          if (v433 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v433 >= 0x17)
          {
            v435 = (v433 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v433 | 7) != 0x17)
              v435 = v433 | 7;
            v436 = v435 + 1;
            v434 = operator new(v435 + 1);
            *(_QWORD *)&v721[16] = v433;
            v722 = v436 | 0x8000000000000000;
            *(_QWORD *)&v721[8] = v434;
          }
          else
          {
            HIBYTE(v722) = v433;
            if (!v433)
            {
LABEL_590:
              v434[v433] = 0;
              LOBYTE(v723) = 1;
              v437 = &v724;
              if (v429 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v429 >= 0x17)
              {
                v438 = (v429 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v429 | 7) != 0x17)
                  v438 = v429 | 7;
                v439 = v438 + 1;
                v437 = (void ***)operator new(v438 + 1);
                v725 = (_DWORD *)v429;
                p_p = (_QWORD *)(v439 | 0x8000000000000000);
                v724 = (void **)v437;
              }
              else
              {
                HIBYTE(p_p) = v429;
                if (!v429)
                  goto LABEL_598;
              }
              memmove(v437, v430, v429);
LABEL_598:
              *((_BYTE *)v437 + v429) = 0;
              LOBYTE(v727) = 1;
              v440 = *(NSObject **)v721;
              if (SHIBYTE(p_p) < 0)
                operator delete(v724);
              if ((_BYTE)v723 && SHIBYTE(v722) < 0)
                operator delete(*(void **)&v721[8]);
              if (*(_QWORD *)v721)
                os_release(*(void **)v721);
              if (__srcd && __srcd[3])
              {
                v441 = _os_log_pack_size();
                v442 = (std::__shared_weak_count_vtbl *)operator new(v441, (std::align_val_t)8uLL);
                v443 = (std::__shared_weak_count *)operator new();
                v444 = v443;
                v443->__shared_owners_ = 0;
                v445 = (unint64_t *)&v443->__shared_owners_;
                v443->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v443->__shared_weak_owners_ = 0;
                v443[1].__vftable = v442;
                do
                  v446 = __ldxr(v445);
                while (__stxr(v446 + 1, v445));
                do
                  v447 = __ldaxr(v445);
                while (__stlxr(v447 - 1, v445));
                if (!v447)
                {
                  ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                  std::__shared_weak_count::__release_weak(v444);
                }
                v448 = _os_log_pack_fill();
                v449 = v717;
                *(_DWORD *)v448 = 134218240;
                *(_QWORD *)(v448 + 4) = v449;
                *(_WORD *)(v448 + 12) = 2048;
                *(_QWORD *)(v448 + 14) = (v696 - v690) >> 4;
                v450 = operator new();
                v451 = *(unsigned __int8 *)(v684 + 39);
                v452 = v680;
                if ((v451 & 0x80u) != 0)
                {
                  v452 = *(_QWORD *)(v684 + 16);
                  v451 = *(_QWORD *)(v684 + 24);
                }
                *(_QWORD *)v450 = v442;
                *(_QWORD *)(v450 + 8) = v442;
                *(_QWORD *)(v450 + 16) = v444;
                *(_QWORD *)(v450 + 24) = 0;
                *(_QWORD *)(v450 + 32) = 0;
                *(_QWORD *)(v450 + 40) = v452;
                *(_QWORD *)(v450 + 48) = v451;
                *(_BYTE *)(v450 + 56) = 1;
                *(_QWORD *)v721 = v450;
                (*(void (**)(_QWORD *, _BYTE *))(*__srcd[3] + 40))(__srcd[3], v721);
                v453 = *(_QWORD *)v721;
                *(_QWORD *)v721 = 0;
                if (v453)
                {
                  v454 = *(std::__shared_weak_count **)(v453 + 32);
                  if (v454)
                  {
                    v455 = (unint64_t *)&v454->__shared_owners_;
                    do
                      v456 = __ldaxr(v455);
                    while (__stlxr(v456 - 1, v455));
                    if (!v456)
                    {
                      ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                      std::__shared_weak_count::__release_weak(v454);
                    }
                  }
                  v457 = *(std::__shared_weak_count **)(v453 + 16);
                  if (v457)
                  {
                    v458 = (unint64_t *)&v457->__shared_owners_;
                    do
                      v459 = __ldaxr(v458);
                    while (__stlxr(v459 - 1, v458));
                    if (!v459)
                    {
                      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                      std::__shared_weak_count::__release_weak(v457);
                    }
                  }
                  MEMORY[0x212BC6398](v453, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v440, OS_LOG_TYPE_INFO);
                *(_DWORD *)v721 = 134218240;
                *(_QWORD *)&v721[4] = v717;
                *(_WORD *)&v721[12] = 2048;
                *(_QWORD *)&v721[14] = (v696 - v690) >> 4;
                v460 = (void *)_os_log_send_and_compose_impl();
                if (v460)
                  free(v460);
              }
              if (v426)
              {
                sub_20E8C003C((uint64_t)&v704, "There are %zu total constraints but only %zu scores were generated.", v717, (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4);
                sub_20E863570((uint64_t)&v704);
              }
              sub_20E863570((uint64_t)&v704);
              v461 = v711;
              if (v711)
              {
                v462 = (unint64_t *)&v711->__shared_owners_;
                do
                  v463 = __ldaxr(v462);
                while (__stlxr(v463 - 1, v462));
                if (!v463)
                {
                  ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                  std::__shared_weak_count::__release_weak(v461);
                }
              }
              goto LABEL_635;
            }
          }
          memmove(v434, v432, v433);
          goto LABEL_590;
        }
        LOBYTE(v704) = 0;
        LOBYTE(rep) = 0;
        v131 = (const char *)(a2 + 1952);
        if (*(char *)(a2 + 1975) < 0)
        {
          if (!*(_QWORD *)(a2 + 1960))
            goto LABEL_199;
          v131 = *(const char **)v131;
        }
        else if (!*(_BYTE *)(a2 + 1975))
        {
LABEL_199:
          v156 = *(_QWORD *)(a1 + 16);
          v157 = *(_QWORD **)(v156 + 144);
          LODWORD(__p) = v19;
          v717 = 0;
          *(_QWORD *)&v718 = 0;
          *(_QWORD *)(a2 + 11904) = *(_QWORD *)(a2 + 11896);
          v715 = 0;
          *(_QWORD *)v721 = &v715;
          *(_QWORD *)&v721[8] = a3;
          *(_QWORD *)&v721[16] = &v717;
          v722 = v156;
          v723 = (void **)v156;
          v724 = &__p;
          v725 = (_DWORD *)(a2 + 11824);
          p_p = (_QWORD *)(a2 + 11848);
          v727 = (__int128 *)(a2 + 11872);
          v728 = &v704;
          v729 = a2 + 11896;
          v730 = &v718;
          v158 = *(_QWORD **)(v156 + 16);
          if (v158)
          {
            v161 = (_QWORD *)*v158;
            v159 = v158 + 1;
            v160 = v161;
            if (v161 != v159)
            {
              do
              {
                sub_20FC67358((uint64_t **)v721, (uint64_t)(v160 + 4));
                v165 = (_QWORD *)v160[1];
                if (v165)
                {
                  do
                  {
                    v166 = v165;
                    v165 = (_QWORD *)*v165;
                  }
                  while (v165);
                }
                else
                {
                  do
                  {
                    v166 = (_QWORD *)v160[2];
                    v35 = *v166 == (_QWORD)v160;
                    v160 = v166;
                  }
                  while (!v35);
                }
                v160 = v166;
              }
              while (v166 != v159);
            }
          }
          if (v157)
          {
            v164 = (_QWORD *)*v157;
            v162 = v157 + 1;
            v163 = v164;
            if (v164 != v162)
            {
              do
              {
                sub_20FC67358((uint64_t **)v721, (uint64_t)(v163 + 4));
                v167 = (_QWORD *)v163[1];
                if (v167)
                {
                  do
                  {
                    v168 = v167;
                    v167 = (_QWORD *)*v167;
                  }
                  while (v167);
                }
                else
                {
                  do
                  {
                    v168 = (_QWORD *)v163[2];
                    v35 = *v168 == (_QWORD)v163;
                    v163 = v168;
                  }
                  while (!v35);
                }
                v163 = v168;
              }
              while (v168 != v162);
            }
          }
          goto LABEL_568;
        }
        if (sscanf(v131, "%f,%f,%f,%f", v721, &v721[4], &v721[8], (unint64_t)v721 | 0xC) == 4)
        {
          v704 = *(_OWORD *)v721;
          LOBYTE(rep) = 1;
        }
        LODWORD(v19) = *(_DWORD *)(a2 + 1948);
        goto LABEL_199;
      }
    }
    else
    {
      v103 = 0;
      v104 = *(int64x2_t **)(a2 + 11824);
    }
    do
    {
      v130 = v104->i64[0];
      v104 = (int64x2_t *)((char *)v104 + 8);
      v103 += v130;
    }
    while (v104 != v101);
    goto LABEL_162;
  }
  if (!v6)
    return a2;
  if (v6 == -1)
  {
    sub_20FC5E37C(*(_QWORD **)(a1 + 8), (uint64_t)v721, 0);
    return a2;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 144);
  v9 = a3[2];
  *(_QWORD *)v721 = 0;
  sub_20FC603F0(a2 + 11824, v9, (uint64_t *)v721);
  sub_20FC6061C(a2 + 11872, a3[2], (uint64_t)&unk_2103BBA38);
  v10 = *(_QWORD *)(v7 + 16);
  if (v8 | v10)
  {
    if (v10)
      v10 = *(_QWORD *)(v10 + 16);
    if (v8)
      v11 = *(_QWORD *)(v8 + 16);
    else
      v11 = 0;
    *(_QWORD *)v721 = 0;
    sub_20F4058C4(a2 + 11848, v11 + v10, (uint64_t *)v721);
    *(_QWORD *)&v704 = *(_QWORD *)(a2 + 11848);
    *(_QWORD *)v721 = &v704;
    *(_QWORD *)&v721[8] = a3;
    *(_QWORD *)&v721[16] = a2 + 11824;
    v722 = a2 + 11872;
    v723 = (void **)&v718;
    v21 = *(_QWORD **)(v7 + 16);
    if (v21)
    {
      v24 = (_QWORD *)*v21;
      v22 = v21 + 1;
      v23 = v24;
      if (v24 != v22)
      {
        do
        {
          sub_20FC60874((unint64_t)v721, (uint64_t)(v23 + 4));
          v33 = (_QWORD *)v23[1];
          if (v33)
          {
            do
            {
              v34 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v34 = (_QWORD *)v23[2];
              v35 = *v34 == (_QWORD)v23;
              v23 = v34;
            }
            while (!v35);
          }
          v23 = v34;
        }
        while (v34 != v22);
      }
    }
    if (v8)
    {
      v27 = *(_QWORD **)v8;
      v26 = (_QWORD *)(v8 + 8);
      v25 = v27;
      if (v27 != v26)
      {
        do
        {
          sub_20FC60874((unint64_t)v721, (uint64_t)(v25 + 4));
          v36 = (_QWORD *)v25[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v25[2];
              v35 = *v37 == (_QWORD)v25;
              v25 = v37;
            }
            while (!v35);
          }
          v25 = v37;
        }
        while (v37 != v26);
      }
    }
    v17 = *(unsigned int *)(a2 + 1948);
    v18 = *(unsigned __int8 *)(a2 + 1976);
    if (v17 < (uint64_t)(*(_QWORD *)(a2 + 11856) - *(_QWORD *)(a2 + 11848)) >> 3)
      goto LABEL_52;
  }
  else
  {
    *(_QWORD *)(a2 + 11856) = *(_QWORD *)(a2 + 11848);
    LODWORD(v17) = *(_DWORD *)(a2 + 1948);
    v18 = *(unsigned __int8 *)(a2 + 1976);
  }
  if (!v18 && *(_BYTE *)(a2 + 1977))
  {
    v38 = (_DWORD *)(a2 + 11896);
    v717 = 0;
    goto LABEL_56;
  }
  v28 = *(int64x2_t **)(a2 + 11824);
  v29 = *(int64x2_t **)(a2 + 11832);
  if (v28 == v29)
  {
    v31 = 0;
    goto LABEL_51;
  }
  v30 = (char *)v29 - (char *)v28 - 8;
  if (v30 < 0x18)
  {
    v31 = 0;
    v32 = *(int64x2_t **)(a2 + 11824);
    do
    {
LABEL_50:
      v44 = v32->i64[0];
      v32 = (int64x2_t *)((char *)v32 + 8);
      v31 += v44;
    }
    while (v32 != v29);
    goto LABEL_51;
  }
  v39 = (v30 >> 3) + 1;
  v32 = (int64x2_t *)((char *)v28 + 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL));
  v40 = v28 + 1;
  v41 = 0uLL;
  v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  v43 = 0uLL;
  do
  {
    v41 = vaddq_s64(v40[-1], v41);
    v43 = vaddq_s64(*v40, v43);
    v40 += 2;
    v42 -= 4;
  }
  while (v42);
  v31 = vaddvq_s64(vaddq_s64(v43, v41));
  if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_50;
LABEL_51:
  if (v17 >= v31)
  {
    sub_20FC5E37C(*(_QWORD **)(a1 + 8), (uint64_t)v721, v31);
    return a2;
  }
LABEL_52:
  v38 = (_DWORD *)(a2 + 11896);
  v717 = 0;
  if (v18)
  {
    LOBYTE(v704) = 0;
    LOBYTE(rep) = 0;
    v45 = (const char *)(a2 + 1952);
    if (*(char *)(a2 + 1975) < 0)
    {
      if (!*(_QWORD *)(a2 + 1960))
        goto LABEL_94;
      v45 = *(const char **)v45;
    }
    else if (!*(_BYTE *)(a2 + 1975))
    {
LABEL_94:
      v80 = *(_QWORD *)(a1 + 8);
      v81 = *(_QWORD **)(v80 + 144);
      LODWORD(__p) = v17;
      v717 = 0;
      *(_QWORD *)&v718 = 0;
      *(_QWORD *)(a2 + 11904) = *(_QWORD *)(a2 + 11896);
      v715 = 0;
      *(_QWORD *)v721 = &v715;
      *(_QWORD *)&v721[8] = a3;
      *(_QWORD *)&v721[16] = &v717;
      v722 = v80;
      v723 = (void **)v80;
      v724 = &__p;
      v725 = (_DWORD *)(a2 + 11824);
      p_p = (_QWORD *)(a2 + 11848);
      v727 = (__int128 *)(a2 + 11872);
      v728 = &v704;
      v729 = a2 + 11896;
      v730 = &v718;
      v82 = *(_QWORD **)(v80 + 16);
      if (v82)
      {
        v85 = (_QWORD *)*v82;
        v83 = v82 + 1;
        v84 = v85;
        if (v85 != v83)
        {
          do
          {
            sub_20FC60B08((uint64_t **)v721, (uint64_t)(v84 + 4));
            v89 = (_QWORD *)v84[1];
            if (v89)
            {
              do
              {
                v90 = v89;
                v89 = (_QWORD *)*v89;
              }
              while (v89);
            }
            else
            {
              do
              {
                v90 = (_QWORD *)v84[2];
                v35 = *v90 == (_QWORD)v84;
                v84 = v90;
              }
              while (!v35);
            }
            v84 = v90;
          }
          while (v90 != v83);
        }
      }
      if (v81)
      {
        v88 = (_QWORD *)*v81;
        v86 = v81 + 1;
        v87 = v88;
        if (v88 != v86)
        {
          do
          {
            sub_20FC60B08((uint64_t **)v721, (uint64_t)(v87 + 4));
            v91 = (_QWORD *)v87[1];
            if (v91)
            {
              do
              {
                v92 = v91;
                v91 = (_QWORD *)*v91;
              }
              while (v91);
            }
            else
            {
              do
              {
                v92 = (_QWORD *)v87[2];
                v35 = *v92 == (_QWORD)v87;
                v87 = v92;
              }
              while (!v35);
            }
            v87 = v92;
          }
          while (v92 != v86);
        }
      }
      goto LABEL_300;
    }
    if (sscanf(v45, "%f,%f,%f,%f", v721, &v721[4], &v721[8], (unint64_t)v721 | 0xC) == 4)
    {
      v704 = *(_OWORD *)v721;
      LOBYTE(rep) = 1;
    }
    LODWORD(v17) = *(_DWORD *)(a2 + 1948);
    goto LABEL_94;
  }
LABEL_56:
  sub_20F889B78((uint64_t *)&v715, *(_QWORD *)(a2 + 8216), a3);
  __p = 0;
  v713 = 0;
  v714 = 0;
  v46 = *(_QWORD *)(a1 + 8);
  v47 = *(_QWORD **)(v46 + 144);
  LODWORD(v718) = *(_DWORD *)(a2 + 1948);
  *(_QWORD *)(a2 + 11904) = *(_QWORD *)(a2 + 11896);
  v717 = 0;
  *(_QWORD *)&v704 = 0;
  *(_QWORD *)v721 = &v704;
  *(_QWORD *)&v721[8] = a3;
  *(_QWORD *)&v721[16] = &v717;
  v722 = v46;
  v723 = (void **)v46;
  v724 = &v715;
  v725 = v38;
  p_p = &__p;
  v727 = &v718;
  v728 = (__int128 *)(a2 + 11824);
  v729 = a2 + 11848;
  v730 = (__int128 *)(a2 + 11872);
  v48 = *(_QWORD **)(v46 + 16);
  if (v48)
  {
    v51 = (_QWORD *)*v48;
    v49 = v48 + 1;
    v50 = v51;
    if (v51 != v49)
    {
      do
      {
        sub_20FC61C38((uint64_t **)v721, (uint64_t)(v50 + 4));
        v76 = (_QWORD *)v50[1];
        if (v76)
        {
          do
          {
            v77 = v76;
            v76 = (_QWORD *)*v76;
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (_QWORD *)v50[2];
            v35 = *v77 == (_QWORD)v50;
            v50 = v77;
          }
          while (!v35);
        }
        v50 = v77;
      }
      while (v77 != v49);
    }
  }
  if (v47)
  {
    v54 = (_QWORD *)*v47;
    v52 = v47 + 1;
    v53 = v54;
    if (v54 != v52)
    {
      do
      {
        sub_20FC61C38((uint64_t **)v721, (uint64_t)(v53 + 4));
        v78 = (_QWORD *)v53[1];
        if (v78)
        {
          do
          {
            v79 = v78;
            v78 = (_QWORD *)*v78;
          }
          while (v78);
        }
        else
        {
          do
          {
            v79 = (_QWORD *)v53[2];
            v35 = *v79 == (_QWORD)v53;
            v53 = v79;
          }
          while (!v35);
        }
        v53 = v79;
      }
      while (v79 != v52);
    }
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((v713 - (_BYTE *)__p) >> 3) != (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5115, (uint64_t)"weak_feature_vectors.size() == scores.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a2 + 1977))
  {
    printf("[MMI] %zu %zu\n", (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4, v717);
    v55 = *(_QWORD *)(a2 + 11896);
    v56 = *(_QWORD *)(a2 + 11904);
    v58 = __p;
    v57 = v713;
    memset(v721, 0, sizeof(v721));
    v59 = v56 - v55;
    if (v56 == v55)
    {
      v61 = 0;
      v65 = 0;
      v66 = v713 - (_BYTE *)__p;
      if (v713 != __p)
        goto LABEL_68;
    }
    else
    {
      if (v59 < 0)
        sub_20E867F44();
      v60 = (double *)operator new(v56 - v55);
      v61 = v60;
      v62 = 0;
      *(_QWORD *)v721 = v60;
      *(_QWORD *)&v721[16] = &v60[2 * (v59 >> 4)];
      do
      {
        v63 = v55 + v62 * 8;
        v64 = &v60[v62];
        *v64 = *(double *)(v55 + v62 * 8);
        *((_DWORD *)v64 + 2) = *(_DWORD *)(v55 + v62 * 8 + 8);
        v62 += 2;
      }
      while (v63 + 16 != v56);
      v65 = &v60[v62];
      *(_QWORD *)&v721[8] = &v60[v62];
      v66 = v57 - v58;
      if (v57 != v58)
      {
LABEL_68:
        if (0xCF3CF3CF3CF3CF3DLL * (v66 >> 3) > 0x186186186186186)
          sub_20E867F44();
        v67 = (double *)operator new(v66);
        v68 = &v67[v66 >> 3];
        memcpy(v67, v58, v66);
        v69 = (char *)v65 - (char *)v61;
        v70 = ((char *)v65 - (char *)v61) >> 4;
        __src = v67;
        if ((unint64_t)((char *)v65 - (char *)v61) >= 0x641)
        {
LABEL_70:
          v704 = 0uLL;
          rep = 0;
          if ((v69 & 0x8000000000000000) != 0)
            sub_20E867F44();
          v71 = v69 >> 1;
          v72 = (int64x2_t *)operator new(v69 >> 1);
          *(_QWORD *)&v704 = v72;
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v72->i64[v70];
          bzero(v72, v69 >> 1);
          v73 = (uint64_t *)((char *)v72->i64 + (v69 >> 1));
          *((_QWORD *)&v704 + 1) = v73;
          if (v65 == v61)
            goto LABEL_248;
          if (v71 - 8 >= 0x18)
          {
            v194 = ((v71 - 8) >> 3) + 1;
            v74 = v194 & 0x3FFFFFFFFFFFFFFCLL;
            v75 = &v72->i64[v194 & 0x3FFFFFFFFFFFFFFCLL];
            v195 = (int64x2_t)xmmword_2102E3FA0;
            v196 = v72 + 1;
            v197 = vdupq_n_s64(2uLL);
            v198 = vdupq_n_s64(4uLL);
            v199 = v194 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v196[-1] = v195;
              *v196 = vaddq_s64(v195, v197);
              v195 = vaddq_s64(v195, v198);
              v196 += 2;
              v199 -= 4;
            }
            while (v199);
            if (v194 == v74)
            {
LABEL_248:
              *(_QWORD *)&v718 = v721;
              v200 = 126 - 2 * __clz(v70);
              if (v65 == v61)
                v201 = 0;
              else
                v201 = v200;
              v692 = v72;
              sub_20FC645C0((uint64_t)v72, v73, (uint64_t **)&v718, v201, 1);
              v718 = 0uLL;
              v719 = 0;
              v202 = *(_OWORD *)v721;
              v203 = *(_QWORD *)&v721[8] - *(_QWORD *)v721;
              v686 = (uint64_t)(*(_QWORD *)&v721[8] - *(_QWORD *)v721) >> 4;
              if (*(_QWORD *)&v721[8] == *(_QWORD *)v721)
              {
                v205 = 0;
              }
              else
              {
                if ((v203 & 0x8000000000000000) != 0)
                  sub_20E867F44();
                v204 = (char *)operator new(v203);
                v205 = v204;
                v206 = 0;
                *(_QWORD *)&v718 = v204;
                v719 = &v204[16 * v686];
                do
                {
                  v207 = v202 + v206;
                  v208 = &v204[v206];
                  *(_QWORD *)v208 = *(_QWORD *)(v202 + v206);
                  *((_DWORD *)v208 + 2) = *(_DWORD *)(v202 + v206 + 8);
                  v206 += 16;
                }
                while (v207 + 16 != *((_QWORD *)&v202 + 1));
                *((_QWORD *)&v718 + 1) = &v204[v206];
              }
              v209 = (char *)v68 - (char *)v67;
              if (v209)
              {
                if (0xCF3CF3CF3CF3CF3DLL * (v209 >> 3) > 0x186186186186186)
                  sub_20E867F44();
                v210 = (char *)operator new(v209);
                memcpy(v210, __src, v209);
              }
              else
              {
                v210 = 0;
              }
              if (v65 != v61)
              {
                v211 = v69 >> 4;
                if (v69 >> 4 <= 1)
                  v211 = 1;
                v212 = (_DWORD *)(v202 + 8);
                v213 = (uint64_t *)v72;
                v214 = __src;
                do
                {
                  v215 = *v213++;
                  v216 = &v205[16 * v215];
                  *((_QWORD *)v212 - 1) = *(_QWORD *)v216;
                  *v212 = *((_DWORD *)v216 + 2);
                  v212 += 4;
                  v217 = &v210[168 * v215];
                  v218 = *((_OWORD *)v217 + 1);
                  *(_OWORD *)v214 = *(_OWORD *)v217;
                  *((_OWORD *)v214 + 1) = v218;
                  v219 = *((_OWORD *)v217 + 5);
                  *((_OWORD *)v214 + 4) = *((_OWORD *)v217 + 4);
                  *((_OWORD *)v214 + 5) = v219;
                  v220 = *((_OWORD *)v217 + 3);
                  *((_OWORD *)v214 + 2) = *((_OWORD *)v217 + 2);
                  *((_OWORD *)v214 + 3) = v220;
                  v214[20] = *((double *)v217 + 20);
                  v221 = *((_OWORD *)v217 + 9);
                  *((_OWORD *)v214 + 8) = *((_OWORD *)v217 + 8);
                  *((_OWORD *)v214 + 9) = v221;
                  v222 = *((_OWORD *)v217 + 7);
                  *((_OWORD *)v214 + 6) = *((_OWORD *)v217 + 6);
                  *((_OWORD *)v214 + 7) = v222;
                  v214 += 21;
                  --v211;
                }
                while (v211);
              }
              if (*((_QWORD *)&v202 + 1) != (_QWORD)v202)
              {
                v223 = 0;
                v224 = 0;
                v225 = (*(double *)(v202 + 1600) + *(double *)(v202 + 1584)) * 0.5;
                if (v686 <= 1)
                  v226 = 1;
                else
                  v226 = v686;
                v227 = __src + 10;
                do
                {
                  if (v224 >= 0x64)
                    v228 = 0.0;
                  else
                    v228 = 1.0;
                  printf("[MMS] %g %g %g %g ", *(double *)(*(_QWORD *)v721 + v223), *(double *)(*(_QWORD *)v721 + v223) - v225, *(double *)(*(_QWORD *)v721 + v223) - v225, v228);
                  printf(" %g", *(v227 - 10));
                  printf(" %g", *(v227 - 9));
                  printf(" %g", *(v227 - 8));
                  printf(" %g", *(v227 - 7));
                  printf(" %g", *(v227 - 6));
                  printf(" %g", *(v227 - 5));
                  printf(" %g", *(v227 - 4));
                  printf(" %g", *(v227 - 3));
                  printf(" %g", *(v227 - 2));
                  printf(" %g", *(v227 - 1));
                  printf(" %g", *v227);
                  printf(" %g", v227[1]);
                  printf(" %g", v227[2]);
                  printf(" %g", v227[3]);
                  printf(" %g", v227[4]);
                  printf(" %g", v227[5]);
                  printf(" %g", v227[6]);
                  printf(" %g", v227[7]);
                  printf(" %g", v227[8]);
                  printf(" %g", v227[9]);
                  printf(" %g", v227[10]);
                  putchar(10);
                  ++v224;
                  v223 += 16;
                  v227 += 21;
                }
                while (v226 != v224);
              }
              if (v210)
                operator delete(v210);
              v67 = __src;
              if (v205)
                operator delete(v205);
              operator delete(v692);
              goto LABEL_280;
            }
          }
          else
          {
            v74 = 0;
            v75 = (uint64_t *)v72;
          }
          do
            *v75++ = v74++;
          while (v75 != v73);
          goto LABEL_248;
        }
LABEL_141:
        if (v61 != v65)
        {
          v110 = v61 + 2;
          v111 = *v61;
          v112 = *v61;
          if (v61 + 2 != v65)
          {
            v113 = v61 + 2;
            v114 = v61;
            v115 = v61 + 2;
            do
            {
              v116 = *v115;
              v115 += 2;
              v117 = v116;
              if (v116 < v112)
              {
                v112 = v117;
                v114 = v113;
              }
              v113 = v115;
            }
            while (v115 != v65);
            v112 = *v114;
            v118 = v61;
            v119 = v61 + 2;
            do
            {
              v120 = *v119;
              v119 += 2;
              v121 = v120;
              if (v111 < v120)
              {
                v111 = v121;
                v118 = v110;
              }
              v110 = v119;
            }
            while (v119 != v65);
            v111 = *v118;
          }
          v122 = v111 + (v111 - v112) / (double)v70 * -100.0;
          if (v70 <= 1)
            v70 = 1;
          v123 = v67 + 10;
          do
          {
            v124 = *v61;
            v61 += 2;
            printf("[MMS] %g %g %g %g ", v124, NAN, v124 - v122, 1.0);
            printf(" %g", *(v123 - 10));
            printf(" %g", *(v123 - 9));
            printf(" %g", *(v123 - 8));
            printf(" %g", *(v123 - 7));
            printf(" %g", *(v123 - 6));
            printf(" %g", *(v123 - 5));
            printf(" %g", *(v123 - 4));
            printf(" %g", *(v123 - 3));
            printf(" %g", *(v123 - 2));
            printf(" %g", *(v123 - 1));
            printf(" %g", *v123);
            printf(" %g", v123[1]);
            printf(" %g", v123[2]);
            printf(" %g", v123[3]);
            printf(" %g", v123[4]);
            printf(" %g", v123[5]);
            printf(" %g", v123[6]);
            printf(" %g", v123[7]);
            printf(" %g", v123[8]);
            printf(" %g", v123[9]);
            printf(" %g", v123[10]);
            putchar(10);
            v123 += 21;
            --v70;
          }
          while (v70);
          goto LABEL_281;
        }
LABEL_280:
        if (!v67)
        {
LABEL_282:
          if (*(_QWORD *)v721)
          {
            *(_QWORD *)&v721[8] = *(_QWORD *)v721;
            operator delete(*(void **)v721);
          }
          printf("[MMD]");
          v229 = 0;
          v230 = 0;
          v231 = 200;
          while (1)
          {
            v233 = *(_QWORD *)(a2 + 11872);
            v234 = *(_QWORD *)(a2 + 11880);
            if (v233 == v234)
            {
              v232 = 0;
            }
            else
            {
              v235 = v234 - v233 - 200;
              if (v235 >= 0xC8)
              {
                v237 = 0;
                v238 = 0;
                v239 = v235 / 0xC8 + 1;
                v236 = v233 + 200 * (v239 & 0x3FFFFFFFFFFFFFELL);
                v240 = (_QWORD *)(v233 + v231);
                v241 = v239 & 0x3FFFFFFFFFFFFFELL;
                do
                {
                  v237 += *(v240 - 25);
                  v238 += *v240;
                  v240 += 50;
                  v241 -= 2;
                }
                while (v241);
                v232 = v238 + v237;
                if (v239 == (v239 & 0x3FFFFFFFFFFFFFELL))
                  goto LABEL_286;
              }
              else
              {
                v232 = 0;
                v236 = *(_QWORD *)(a2 + 11872);
              }
              do
              {
                v232 += *(_QWORD *)(v236 + v229);
                v236 += 200;
              }
              while (v236 != v234);
            }
LABEL_286:
            printf(" %zu", v232);
            ++v230;
            v231 += 8;
            v229 += 8;
            if (v230 == 25)
            {
              putchar(10);
              goto LABEL_296;
            }
          }
        }
LABEL_281:
        operator delete(__src);
        goto LABEL_282;
      }
    }
    v68 = 0;
    v67 = 0;
    v69 = (char *)v65 - (char *)v61;
    v70 = ((char *)v65 - (char *)v61) >> 4;
    __src = 0;
    if ((unint64_t)((char *)v65 - (char *)v61) >= 0x641)
      goto LABEL_70;
    goto LABEL_141;
  }
LABEL_296:
  if (__p)
  {
    v713 = __p;
    operator delete(__p);
  }
  if (v715)
  {
    v716 = v715;
    operator delete(v715);
  }
LABEL_300:
  v242 = *(double **)(a2 + 11904);
  v243 = *(double **)(a2 + 11896);
  v244 = ((char *)v242 - (char *)v243) >> 4;
  v245 = v717;
  if (v244 >= v717)
    goto LABEL_368;
  sub_20F82FD50(&v718);
  if (**(int **)(v718 + 56) <= 3)
  {
    v246 = *(unsigned __int8 *)(v718 + 72);
    v247 = sub_20E8C31DC(v718, "OSLogSurrogateAppender", 1, 0);
    if (v246 || v247)
    {
      __srcb = (_QWORD **)v247;
      *(_QWORD *)&v704 = &v718;
      *((std::chrono::steady_clock::time_point *)&v704 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v706 = 3;
      v707 = "unknown file";
      v708 = 5137;
      v710 = 0;
      v711 = 0;
      v709 = "unknown function";
      v248 = *(_QWORD *)v704;
      if (*(char *)(*(_QWORD *)v704 + 39) < 0)
      {
        v250 = *(const char **)(v248 + 16);
        v249 = *(_QWORD *)(v248 + 24);
      }
      else
      {
        v249 = *(unsigned __int8 *)(*(_QWORD *)v704 + 39);
        v250 = (const char *)(*(_QWORD *)v704 + 16);
      }
      v678 = *(_QWORD *)v704 + 16;
      v682 = *(_QWORD *)v704;
      v687 = *(_QWORD *)(a2 + 11896);
      v693 = *(_QWORD *)(a2 + 11904);
      v251 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v251 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v721);
        if ((_BYTE)v722)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v721;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v721[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v252 = byte_254A4A4F8;
      else
        v252 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v253 = byte_254A4A4F8[23];
      else
        v253 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v721 = os_log_create(v252, v250);
      v254 = &v721[8];
      if (v253 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v253 >= 0x17)
      {
        v255 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v253 | 7) != 0x17)
          v255 = v253 | 7;
        v256 = v255 + 1;
        v254 = operator new(v255 + 1);
        *(_QWORD *)&v721[16] = v253;
        v722 = v256 | 0x8000000000000000;
        *(_QWORD *)&v721[8] = v254;
      }
      else
      {
        HIBYTE(v722) = v253;
        if (!v253)
        {
LABEL_322:
          v254[v253] = 0;
          LOBYTE(v723) = 1;
          v257 = &v724;
          if (v249 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v249 >= 0x17)
          {
            v258 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v249 | 7) != 0x17)
              v258 = v249 | 7;
            v259 = v258 + 1;
            v257 = (void ***)operator new(v258 + 1);
            v725 = (_DWORD *)v249;
            p_p = (_QWORD *)(v259 | 0x8000000000000000);
            v724 = (void **)v257;
          }
          else
          {
            HIBYTE(p_p) = v249;
            if (!v249)
              goto LABEL_330;
          }
          memmove(v257, v250, v249);
LABEL_330:
          *((_BYTE *)v257 + v249) = 0;
          LOBYTE(v727) = 1;
          v260 = *(NSObject **)v721;
          if (SHIBYTE(p_p) < 0)
            operator delete(v724);
          if ((_BYTE)v723 && SHIBYTE(v722) < 0)
            operator delete(*(void **)&v721[8]);
          if (*(_QWORD *)v721)
            os_release(*(void **)v721);
          if (__srcb && __srcb[3])
          {
            v261 = _os_log_pack_size();
            v262 = (std::__shared_weak_count_vtbl *)operator new(v261, (std::align_val_t)8uLL);
            v263 = (std::__shared_weak_count *)operator new();
            v264 = v263;
            v263->__shared_owners_ = 0;
            v265 = (unint64_t *)&v263->__shared_owners_;
            v263->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v263->__shared_weak_owners_ = 0;
            v263[1].__vftable = v262;
            do
              v266 = __ldxr(v265);
            while (__stxr(v266 + 1, v265));
            do
              v267 = __ldaxr(v265);
            while (__stlxr(v267 - 1, v265));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
              std::__shared_weak_count::__release_weak(v264);
            }
            v268 = _os_log_pack_fill();
            v269 = v717;
            *(_DWORD *)v268 = 134218240;
            *(_QWORD *)(v268 + 4) = v269;
            *(_WORD *)(v268 + 12) = 2048;
            *(_QWORD *)(v268 + 14) = (v693 - v687) >> 4;
            v270 = operator new();
            v271 = *(unsigned __int8 *)(v682 + 39);
            v272 = v678;
            if ((v271 & 0x80u) != 0)
            {
              v272 = *(_QWORD *)(v682 + 16);
              v271 = *(_QWORD *)(v682 + 24);
            }
            *(_QWORD *)v270 = v262;
            *(_QWORD *)(v270 + 8) = v262;
            *(_QWORD *)(v270 + 16) = v264;
            *(_QWORD *)(v270 + 24) = 0;
            *(_QWORD *)(v270 + 32) = 0;
            *(_QWORD *)(v270 + 40) = v272;
            *(_QWORD *)(v270 + 48) = v271;
            *(_BYTE *)(v270 + 56) = 1;
            *(_QWORD *)v721 = v270;
            (*(void (**)(_QWORD *, _BYTE *))(*__srcb[3] + 40))(__srcb[3], v721);
            v273 = *(_QWORD *)v721;
            *(_QWORD *)v721 = 0;
            if (v273)
            {
              v274 = *(std::__shared_weak_count **)(v273 + 32);
              if (v274)
              {
                v275 = (unint64_t *)&v274->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                  std::__shared_weak_count::__release_weak(v274);
                }
              }
              v277 = *(std::__shared_weak_count **)(v273 + 16);
              if (v277)
              {
                v278 = (unint64_t *)&v277->__shared_owners_;
                do
                  v279 = __ldaxr(v278);
                while (__stlxr(v279 - 1, v278));
                if (!v279)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
              }
              MEMORY[0x212BC6398](v273, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v260, OS_LOG_TYPE_INFO);
            *(_DWORD *)v721 = 134218240;
            *(_QWORD *)&v721[4] = v717;
            *(_WORD *)&v721[12] = 2048;
            *(_QWORD *)&v721[14] = (v693 - v687) >> 4;
            v280 = (void *)_os_log_send_and_compose_impl();
            if (v280)
              free(v280);
          }
          if (v246)
          {
            sub_20E8C003C((uint64_t)&v704, "There are %zu total constraints but only %zu scores were generated.", v717, (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4);
            sub_20E863570((uint64_t)&v704);
          }
          sub_20E863570((uint64_t)&v704);
          v281 = v711;
          if (v711)
          {
            v282 = (unint64_t *)&v711->__shared_owners_;
            do
              v283 = __ldaxr(v282);
            while (__stlxr(v283 - 1, v282));
            if (!v283)
            {
              ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
              std::__shared_weak_count::__release_weak(v281);
            }
          }
          goto LABEL_367;
        }
      }
      memmove(v254, v252, v253);
      goto LABEL_322;
    }
  }
LABEL_367:
  v242 = *(double **)(a2 + 11904);
  v243 = *(double **)(a2 + 11896);
  v245 = v717;
  v244 = ((char *)v242 - (char *)v243) >> 4;
LABEL_368:
  v284 = *(unsigned int *)(a2 + 1948);
  if (v244 >= v284 || v245 < v284)
    goto LABEL_440;
  sub_20F82FD50(&v718);
  if (**(int **)(v718 + 56) <= 4)
  {
    v286 = *(unsigned __int8 *)(v718 + 72);
    v287 = sub_20E8C31DC(v718, "OSLogSurrogateAppender", 1, 0);
    if (v286 || v287)
    {
      __srcc = (_QWORD **)v287;
      *(_QWORD *)&v704 = &v718;
      *((std::chrono::steady_clock::time_point *)&v704 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v706 = 4;
      v707 = "unknown file";
      v708 = 5143;
      v710 = 0;
      v711 = 0;
      v709 = "unknown function";
      v288 = *(_QWORD *)v704;
      if (*(char *)(*(_QWORD *)v704 + 39) < 0)
      {
        v290 = *(const char **)(v288 + 16);
        v289 = *(_QWORD *)(v288 + 24);
      }
      else
      {
        v289 = *(unsigned __int8 *)(*(_QWORD *)v704 + 39);
        v290 = (const char *)(*(_QWORD *)v704 + 16);
      }
      v679 = *(_QWORD *)v704 + 16;
      v683 = *(_QWORD *)v704;
      v688 = *(_QWORD *)(a2 + 11896);
      v694 = *(_QWORD *)(a2 + 11904);
      v291 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v721);
        if ((_BYTE)v722)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v721;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&v721[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v292 = byte_254A4A4F8;
      else
        v292 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v293 = byte_254A4A4F8[23];
      else
        v293 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v721 = os_log_create(v292, v290);
      v294 = &v721[8];
      if (v293 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v293 >= 0x17)
      {
        v295 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v293 | 7) != 0x17)
          v295 = v293 | 7;
        v296 = v295 + 1;
        v294 = operator new(v295 + 1);
        *(_QWORD *)&v721[16] = v293;
        v722 = v296 | 0x8000000000000000;
        *(_QWORD *)&v721[8] = v294;
      }
      else
      {
        HIBYTE(v722) = v293;
        if (!v293)
        {
LABEL_394:
          v294[v293] = 0;
          LOBYTE(v723) = 1;
          v297 = &v724;
          if (v289 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v289 >= 0x17)
          {
            v298 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v289 | 7) != 0x17)
              v298 = v289 | 7;
            v299 = v298 + 1;
            v297 = (void ***)operator new(v298 + 1);
            v725 = (_DWORD *)v289;
            p_p = (_QWORD *)(v299 | 0x8000000000000000);
            v724 = (void **)v297;
          }
          else
          {
            HIBYTE(p_p) = v289;
            if (!v289)
              goto LABEL_402;
          }
          memmove(v297, v290, v289);
LABEL_402:
          *((_BYTE *)v297 + v289) = 0;
          LOBYTE(v727) = 1;
          v300 = *(NSObject **)v721;
          if (SHIBYTE(p_p) < 0)
            operator delete(v724);
          if ((_BYTE)v723 && SHIBYTE(v722) < 0)
            operator delete(*(void **)&v721[8]);
          if (*(_QWORD *)v721)
            os_release(*(void **)v721);
          if (__srcc && __srcc[3])
          {
            v301 = _os_log_pack_size();
            v302 = (std::__shared_weak_count_vtbl *)operator new(v301, (std::align_val_t)8uLL);
            v303 = (std::__shared_weak_count *)operator new();
            v304 = v303;
            v303->__shared_owners_ = 0;
            v305 = (unint64_t *)&v303->__shared_owners_;
            v303->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v303->__shared_weak_owners_ = 0;
            v303[1].__vftable = v302;
            do
              v306 = __ldxr(v305);
            while (__stxr(v306 + 1, v305));
            do
              v307 = __ldaxr(v305);
            while (__stlxr(v307 - 1, v305));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
              std::__shared_weak_count::__release_weak(v304);
            }
            v308 = _os_log_pack_fill();
            v309 = v717;
            *(_DWORD *)v308 = 134218240;
            *(_QWORD *)(v308 + 4) = v309;
            *(_WORD *)(v308 + 12) = 2048;
            *(_QWORD *)(v308 + 14) = (v694 - v688) >> 4;
            v310 = operator new();
            v311 = *(unsigned __int8 *)(v683 + 39);
            v312 = v679;
            if ((v311 & 0x80u) != 0)
            {
              v312 = *(_QWORD *)(v683 + 16);
              v311 = *(_QWORD *)(v683 + 24);
            }
            *(_QWORD *)v310 = v302;
            *(_QWORD *)(v310 + 8) = v302;
            *(_QWORD *)(v310 + 16) = v304;
            *(_QWORD *)(v310 + 24) = 0;
            *(_QWORD *)(v310 + 32) = 0;
            *(_QWORD *)(v310 + 40) = v312;
            *(_QWORD *)(v310 + 48) = v311;
            *(_BYTE *)(v310 + 56) = 16;
            *(_QWORD *)v721 = v310;
            (*(void (**)(_QWORD *, _BYTE *))(*__srcc[3] + 40))(__srcc[3], v721);
            v313 = *(_QWORD *)v721;
            *(_QWORD *)v721 = 0;
            if (v313)
            {
              v314 = *(std::__shared_weak_count **)(v313 + 32);
              if (v314)
              {
                v315 = (unint64_t *)&v314->__shared_owners_;
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
              v317 = *(std::__shared_weak_count **)(v313 + 16);
              if (v317)
              {
                v318 = (unint64_t *)&v317->__shared_owners_;
                do
                  v319 = __ldaxr(v318);
                while (__stlxr(v319 - 1, v318));
                if (!v319)
                {
                  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                  std::__shared_weak_count::__release_weak(v317);
                }
              }
              MEMORY[0x212BC6398](v313, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v300, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v721 = 134218240;
            *(_QWORD *)&v721[4] = v717;
            *(_WORD *)&v721[12] = 2048;
            *(_QWORD *)&v721[14] = (v694 - v688) >> 4;
            v320 = (void *)_os_log_send_and_compose_impl();
            if (v320)
              free(v320);
          }
          if (v286)
          {
            sub_20E8C003C((uint64_t)&v704, "There are %zu total constraints but will only select %zu with a valid score.", v717, (uint64_t)(*(_QWORD *)(a2 + 11904) - *(_QWORD *)(a2 + 11896)) >> 4);
            sub_20E863570((uint64_t)&v704);
          }
          sub_20E863570((uint64_t)&v704);
          v321 = v711;
          if (v711)
          {
            v322 = (unint64_t *)&v711->__shared_owners_;
            do
              v323 = __ldaxr(v322);
            while (__stlxr(v323 - 1, v322));
            if (!v323)
            {
              ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
              std::__shared_weak_count::__release_weak(v321);
            }
          }
          goto LABEL_439;
        }
      }
      memmove(v294, v292, v293);
      goto LABEL_394;
    }
  }
LABEL_439:
  v242 = *(double **)(a2 + 11904);
  v243 = *(double **)(a2 + 11896);
  v284 = *(unsigned int *)(a2 + 1948);
  v245 = v717;
  v244 = ((char *)v242 - (char *)v243) >> 4;
LABEL_440:
  if (v244 <= v284 && v245 <= v284)
  {
    sub_20FC5E37C(*(_QWORD **)(a1 + 8), (uint64_t)v721, v245);
    return a2;
  }
  if (v244 <= v284)
    goto LABEL_827;
  v325 = &v243[2 * v284];
  if (v325 == v242)
    goto LABEL_825;
  v326 = v243;
  v327 = v242;
  while (1)
  {
    v328 = ((char *)v327 - (char *)v326) >> 4;
    if (v328 < 2)
      goto LABEL_825;
    if (v328 == 3)
    {
      v555 = v326[2];
      v556 = *v326;
      v557 = *(v327 - 2);
      if (v555 <= *v326)
      {
        if (v557 > v555)
        {
          v326[2] = v557;
          *(v327 - 2) = v555;
          v583 = *((_DWORD *)v326 + 6);
          *((_DWORD *)v326 + 6) = *((_DWORD *)v327 - 2);
          *((_DWORD *)v327 - 2) = v583;
          v584 = v326[2];
          v585 = *v326;
          if (v584 > *v326)
          {
            *v326 = v584;
            v326[2] = v585;
            v586 = *((_DWORD *)v326 + 2);
            *((_DWORD *)v326 + 2) = *((_DWORD *)v326 + 6);
            *((_DWORD *)v326 + 6) = v586;
          }
        }
        goto LABEL_825;
      }
      if (v557 <= v555)
      {
        *v326 = v555;
        v326[2] = v556;
        v558 = *((_DWORD *)v326 + 2);
        *((_DWORD *)v326 + 2) = *((_DWORD *)v326 + 6);
        *((_DWORD *)v326 + 6) = v558;
        v591 = *(v327 - 2);
        if (v591 <= v556)
          goto LABEL_825;
        v326[2] = v591;
        *(v327 - 2) = v556;
        *((_DWORD *)v326 + 6) = *((_DWORD *)v327 - 2);
LABEL_787:
        *((_DWORD *)v327 - 2) = v558;
        goto LABEL_825;
      }
      *v326 = v557;
      *(v327 - 2) = v556;
LABEL_786:
      v558 = *((_DWORD *)v326 + 2);
      *((_DWORD *)v326 + 2) = *((_DWORD *)v327 - 2);
      goto LABEL_787;
    }
    if (v328 == 2)
    {
      v553 = *(v327 - 2);
      v554 = *v326;
      if (v553 <= *v326)
        goto LABEL_825;
      *v326 = v553;
      *(v327 - 2) = v554;
      goto LABEL_786;
    }
    if ((char *)v327 - (char *)v326 <= 127)
    {
      while (v326 != v327 - 2)
      {
        v559 = v326;
        v326 += 2;
        if (v559 != v327 && v326 != v327)
        {
          v560 = *v559;
          v561 = *v559;
          v562 = v326;
          v563 = v559;
          v564 = v326;
          do
          {
            v565 = *v564;
            v564 += 2;
            v566 = v565;
            if (v565 > v561)
            {
              v561 = v566;
              v563 = v562;
            }
            v562 = v564;
          }
          while (v564 != v327);
          if (v563 != v559)
          {
            *v559 = *v563;
            *v563 = v560;
            v567 = *((_DWORD *)v559 + 2);
            *((_DWORD *)v559 + 2) = *((_DWORD *)v563 + 2);
            *((_DWORD *)v563 + 2) = v567;
          }
        }
      }
      goto LABEL_825;
    }
    v329 = v328 >> 1;
    v330 = (unint64_t)&v326[2 * (v328 >> 1)];
    v331 = v327 - 2;
    v332 = *(v327 - 2);
    v333 = *(double *)v330;
    v334 = *v326;
    if (*(double *)v330 > *v326)
    {
      if (v332 > v333)
      {
        *v326 = v332;
        *(v327 - 2) = v334;
        v335 = *((_DWORD *)v326 + 2);
        *((_DWORD *)v326 + 2) = *((_DWORD *)v327 - 2);
        *((_DWORD *)v327 - 2) = v335;
        v336 = 1;
        v337 = *v326;
        v338 = *(double *)v330;
        if (*v326 > *(double *)v330)
          goto LABEL_464;
        goto LABEL_475;
      }
      *v326 = v333;
      *(double *)v330 = v334;
      v344 = *((_DWORD *)v326 + 2);
      v345 = &v326[2 * v329 + 1];
      *((_DWORD *)v326 + 2) = *(_DWORD *)v345;
      *(_DWORD *)v345 = v344;
      if (*v331 > v334)
      {
        *(double *)v330 = *v331;
        *(v327 - 2) = v334;
        *(_DWORD *)v345 = *((_DWORD *)v327 - 2);
        *((_DWORD *)v327 - 2) = v344;
LABEL_461:
        v336 = 2;
        v337 = *v326;
        v338 = *(double *)v330;
        if (*v326 > *(double *)v330)
          goto LABEL_464;
        goto LABEL_475;
      }
      goto LABEL_463;
    }
    if (v332 <= v333)
      break;
    *(double *)v330 = v332;
    *(v327 - 2) = v333;
    v339 = &v326[2 * v329];
    v341 = *((_DWORD *)v339 + 2);
    v340 = v339 + 1;
    *v340 = *((_DWORD *)v327 - 2);
    *((_DWORD *)v327 - 2) = v341;
    v342 = *v326;
    if (*(double *)v330 > *v326)
    {
      *v326 = *(double *)v330;
      *(double *)v330 = v342;
      v343 = *((_DWORD *)v326 + 2);
      *((_DWORD *)v326 + 2) = *v340;
      *v340 = v343;
      goto LABEL_461;
    }
LABEL_463:
    v336 = 1;
    v337 = *v326;
    v338 = *(double *)v330;
    if (*v326 > *(double *)v330)
      goto LABEL_464;
LABEL_475:
    v346 = (unint64_t)(v327 - 2);
    while (1)
    {
      v346 -= 16;
      if ((double *)v346 == v326)
        break;
      if (*(double *)v346 > v338)
      {
        *v326 = *(double *)v346;
        *(double *)v346 = v337;
        v356 = *((_DWORD *)v326 + 2);
        *((_DWORD *)v326 + 2) = *(_DWORD *)(v346 + 8);
        *(_DWORD *)(v346 + 8) = v356;
        ++v336;
        v347 = v326 + 2;
        if ((unint64_t)(v326 + 2) < v346)
          goto LABEL_465;
        goto LABEL_479;
      }
    }
    v361 = v326 + 2;
    if (v337 <= *v331)
    {
      if (v361 == v331)
        goto LABEL_825;
      while (1)
      {
        v362 = *v361;
        if (v337 > *v361)
          break;
        v361 += 2;
        if (v361 == v331)
          goto LABEL_825;
      }
      *v361 = *v331;
      *(v327 - 2) = v362;
      v366 = *((_DWORD *)v361 + 2);
      *((_DWORD *)v361 + 2) = *((_DWORD *)v327 - 2);
      *((_DWORD *)v327 - 2) = v366;
      v361 += 2;
    }
    if (v361 == v331)
      goto LABEL_825;
    while (1)
    {
      v367 = *v326;
      do
      {
        v368 = *v361;
        v361 += 2;
        v369 = v368;
      }
      while (v367 <= v368);
      v370 = (unint64_t)(v361 - 2);
      do
      {
        v371 = *(v331 - 2);
        v331 -= 2;
        v372 = v371;
      }
      while (v367 > v371);
      if (v370 >= (unint64_t)v331)
        break;
      *(v361 - 2) = v372;
      *v331 = v369;
      v373 = *((_DWORD *)v361 - 2);
      *((_DWORD *)v361 - 2) = *((_DWORD *)v331 + 2);
      *((_DWORD *)v331 + 2) = v373;
    }
    v326 = v361 - 2;
    if (v370 > (unint64_t)v325)
      goto LABEL_825;
LABEL_510:
    if (v327 == v325)
      goto LABEL_825;
  }
  v336 = 0;
  v337 = *v326;
  v338 = *(double *)v330;
  if (*v326 <= *(double *)v330)
    goto LABEL_475;
LABEL_464:
  v346 = (unint64_t)(v327 - 2);
  v347 = v326 + 2;
  if (v326 + 2 >= v327 - 2)
  {
LABEL_479:
    v352 = v347;
  }
  else
  {
LABEL_465:
    v348 = v347;
    while (1)
    {
      v349 = *(double *)v330;
      do
      {
        v350 = *v348;
        v348 += 2;
        v351 = v350;
      }
      while (v350 > v349);
      v352 = v348 - 2;
      do
      {
        v353 = *(double *)(v346 - 16);
        v346 -= 16;
        v354 = v353;
      }
      while (v353 <= v349);
      if ((unint64_t)v352 >= v346)
        break;
      *(v348 - 2) = v354;
      *(double *)v346 = v351;
      v355 = *((_DWORD *)v348 - 2);
      *((_DWORD *)v348 - 2) = *(_DWORD *)(v346 + 8);
      *(_DWORD *)(v346 + 8) = v355;
      ++v336;
      if (v352 == (double *)v330)
        v330 = v346;
    }
  }
  if (v352 != (double *)v330)
  {
    v357 = *v352;
    if (*(double *)v330 > *v352)
    {
      *v352 = *(double *)v330;
      *(double *)v330 = v357;
      v358 = *((_DWORD *)v352 + 2);
      *((_DWORD *)v352 + 2) = *(_DWORD *)(v330 + 8);
      *(_DWORD *)(v330 + 8) = v358;
      ++v336;
    }
  }
  if (v352 == v325)
    goto LABEL_825;
  if (v336)
  {
LABEL_485:
    if (v352 <= v325)
      v326 = v352 + 2;
    else
      v327 = v352;
    goto LABEL_510;
  }
  if (v352 <= v325)
  {
    v363 = v352 + 2;
    while (v363 != v327)
    {
      v364 = *v363;
      v365 = *(v363 - 2);
      v363 += 2;
      if (v364 > v365)
        goto LABEL_485;
    }
  }
  else
  {
    while (v347 != v352)
    {
      v359 = *v347;
      v360 = *(v347 - 2);
      v347 += 2;
      if (v359 > v360)
        goto LABEL_485;
    }
  }
LABEL_825:
  v592 = &v243[2 * *(unsigned int *)(a2 + 1948)];
  if (v592 != v242)
    *(_QWORD *)(a2 + 11904) = v592;
LABEL_827:
  v721[0] = 0;
  sub_20EDCA4D0(a2 + 11920, v245, v721);
  v593 = *(_QWORD *)(a2 + 11896);
  v594 = *(_QWORD *)(a2 + 11904);
  if (v593 != v594)
  {
    v595 = *(_QWORD *)(a2 + 11920);
    v596 = *(_QWORD *)(a2 + 11896);
    do
    {
      *(_QWORD *)(v595 + (((unint64_t)*(unsigned int *)(v596 + 8) >> 3) & 0x1FFFFFF8)) ^= 1 << *(_DWORD *)(v596 + 8);
      v596 += 16;
    }
    while (v596 != v594);
  }
  v597 = *(_QWORD **)(a1 + 8);
  v598 = v594 - v593;
  v35 = v598 == 0;
  v599 = v598 >> 4;
  if (v35)
    v599 = *(_QWORD *)(a2 + 11928);
  __p = (void *)(a2 + 11920);
  v600 = (_QWORD *)v597[2];
  if (v600)
  {
    if (!v599)
    {
      v603 = (_QWORD *)*v600;
      v601 = v600 + 1;
      v602 = v603;
      if (v603 == v601)
      {
        v599 = 0;
      }
      else
      {
        v599 = 0;
        do
        {
          v604 = (_QWORD *)v602[1];
          v605 = v602;
          if (v604)
          {
            do
            {
              v606 = v604;
              v604 = (_QWORD *)*v604;
            }
            while (v604);
          }
          else
          {
            do
            {
              v606 = (_QWORD *)v605[2];
              v35 = *v606 == (_QWORD)v605;
              v605 = v606;
            }
            while (!v35);
          }
          v599 += (uint64_t)(*(_QWORD *)(v602[6] + 128) - *(_QWORD *)(v602[6] + 120)) >> 6;
          v602 = v606;
        }
        while (v606 != v601);
      }
      goto LABEL_848;
    }
    goto LABEL_850;
  }
  v607 = v597[18];
  if (v607 && *(_QWORD *)(v607 + 16))
  {
    if (!v599)
    {
LABEL_848:
      v608 = (_QWORD *)v597[18];
      if (v608)
      {
        v611 = (_QWORD *)*v608;
        v609 = v608 + 1;
        v610 = v611;
        if (v611 != v609)
        {
          do
          {
            v619 = (_QWORD *)v610[1];
            v620 = v610;
            if (v619)
            {
              do
              {
                v621 = v619;
                v619 = (_QWORD *)*v619;
              }
              while (v619);
            }
            else
            {
              do
              {
                v621 = (_QWORD *)v620[2];
                v35 = *v621 == (_QWORD)v620;
                v620 = v621;
              }
              while (!v35);
            }
            v599 += (uint64_t)(*(_QWORD *)(v610[6] + 128) - *(_QWORD *)(v610[6] + 120)) >> 6;
            v610 = v621;
          }
          while (v621 != v609);
        }
      }
    }
LABEL_850:
    sub_20FC5E8A8((uint64_t)(v597 + 808), v599 - 0x79435E50D79435E5 * ((uint64_t)(v597[809] - v597[808]) >> 4));
    v597[846] = v597 + 394;
    v612 = v597[1];
    v704 = *(_OWORD *)(*(_QWORD *)(v612 + 48) + 32);
    v615 = *(_QWORD *)(v612 + 56);
    v613 = v612 + 56;
    v614 = v615;
    if (v615)
    {
      do
      {
        v616 = v614;
        v614 = *(_QWORD *)(v614 + 8);
      }
      while (v614);
    }
    else
    {
      do
      {
        v616 = *(_QWORD *)(v613 + 16);
        v35 = *(_QWORD *)v616 == v613;
        v613 = v616;
      }
      while (v35);
    }
    v718 = *(_OWORD *)(v616 + 32);
    v617 = v597[809];
    if (v617 == v597[808])
      v618 = 0;
    else
      v618 = *(_DWORD *)(v617 - 296) + 1;
    v720 = v618;
    v715 = 0;
    *(_QWORD *)v721 = v597;
    *(_QWORD *)&v721[8] = &v704;
    *(_QWORD *)&v721[16] = &v718;
    v722 = (unint64_t)(v597 + 648);
    v723 = &__p;
    v724 = &v715;
    v725 = &v720;
    p_p = v597 + 607;
    v622 = (_QWORD *)v597[2];
    if (v622)
    {
      v625 = (_QWORD *)*v622;
      v623 = v622 + 1;
      v624 = v625;
      if (v625 != v623)
      {
        do
        {
          sub_20FC65604((uint64_t *)v721, (uint64_t)(v624 + 4));
          v630 = (_QWORD *)v624[1];
          if (v630)
          {
            do
            {
              v631 = v630;
              v630 = (_QWORD *)*v630;
            }
            while (v630);
          }
          else
          {
            do
            {
              v631 = (_QWORD *)v624[2];
              v35 = *v631 == (_QWORD)v624;
              v624 = v631;
            }
            while (!v35);
          }
          v624 = v631;
        }
        while (v631 != v623);
      }
    }
    v626 = (_QWORD *)v597[18];
    if (v626)
    {
      v629 = (_QWORD *)*v626;
      v627 = v626 + 1;
      v628 = v629;
      if (v629 != v627)
      {
        do
        {
          sub_20FC65604((uint64_t *)v721, (uint64_t)(v628 + 4));
          v632 = (_QWORD *)v628[1];
          if (v632)
          {
            do
            {
              v633 = v632;
              v632 = (_QWORD *)*v632;
            }
            while (v632);
          }
          else
          {
            do
            {
              v633 = (_QWORD *)v628[2];
              v35 = *v633 == (_QWORD)v628;
              v628 = v633;
            }
            while (!v35);
          }
          v628 = v633;
        }
        while (v633 != v627);
      }
    }
  }
  return a2;
}

void sub_20F8939EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a21);
  v39 = a29;
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F894128(uint64_t a1, _OWORD *a2, char a3, _OWORD *a4)
{
  __int128 v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  unint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _DWORD *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  void **v94;
  _QWORD *v95;
  _OWORD *v96;
  uint64_t *v97;
  int v98;
  char v99;
  __int128 v100;
  _OWORD v101[3];
  uint64_t v102;
  char v103;
  void *v104[2];
  void *__p[2];
  int v106;
  _OWORD v107[4];

  v6 = *(_OWORD *)(a1 + 11704);
  v101[0] = *(_OWORD *)(a1 + 11688);
  v101[1] = v6;
  v101[2] = *(_OWORD *)(a1 + 11720);
  v102 = 0;
  v103 = 0;
  *(_OWORD *)v104 = 0u;
  *(_OWORD *)__p = 0u;
  v106 = 1065353216;
  if (!a3)
  {
    a2 = v101;
    sub_20F38F148((uint64_t)v101, **(_QWORD ***)(a1 + 7952));
  }
  v8 = *(void **)(a1 + 8328);
  *(_QWORD *)(a1 + 8336) = v8;
  v9 = *(void **)(a1 + 8304);
  *(_QWORD *)(a1 + 8312) = v9;
  *(_QWORD *)(a1 + 8288) = *(_QWORD *)(a1 + 8280);
  if (*(_BYTE *)(a1 + 1928))
  {
    v94 = (void **)(a1 + 8328);
    v10 = *(_QWORD *)(a1 + 8216);
    if (*(_BYTE *)v10 && *(_QWORD *)(v10 + 8))
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(_QWORD *)(v10 + 16);
    v12 = (uint64_t **)(v11 + 152);
    v13 = *(_QWORD *)(v11 + 160) - *(_QWORD *)(v11 + 152);
    v14 = v13 >> 3;
    if (v13 >> 3 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8344) - (_QWORD)v8) >> 2))
    {
      if (v13 < 0)
        sub_20EABADD4();
      v15 = (char *)operator new((unint64_t)v13 >> 1);
      *(_QWORD *)(a1 + 8328) = v15;
      *(_QWORD *)(a1 + 8336) = v15;
      *(_QWORD *)(a1 + 8344) = &v15[4 * v14];
      if (v8)
      {
        operator delete(v8);
        v9 = *(void **)(a1 + 8304);
      }
    }
    v16 = (char *)v12[1] - (char *)*v12;
    v17 = v16 >> 3;
    if (v16 >> 3 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8320) - (_QWORD)v9) >> 4))
    {
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF9)
        sub_20E867F44();
      v18 = *(_QWORD *)(a1 + 8312);
      v19 = (char *)operator new(2 * v16);
      v20 = &v19[v18 - (_QWORD)v9];
      v21 = v20;
      if ((void *)v18 != v9)
      {
        v21 = &v19[v18 - (_QWORD)v9];
        do
        {
          v22 = *(_QWORD *)(v18 - 16);
          v18 -= 16;
          v23 = *(_QWORD *)(v18 + 5);
          *((_QWORD *)v21 - 2) = v22;
          v21 -= 16;
          *(_QWORD *)(v21 + 5) = v23;
        }
        while ((void *)v18 != v9);
      }
      *(_QWORD *)(a1 + 8304) = v21;
      *(_QWORD *)(a1 + 8312) = v20;
      *(_QWORD *)(a1 + 8320) = &v19[16 * v17];
      if (v9)
        operator delete(v9);
    }
    v95 = (_QWORD *)(a1 + 8280);
    v24 = (char *)v12[1] - (char *)*v12;
    v25 = v24 >> 3;
    v26 = *(_BYTE **)(a1 + 8280);
    if (v24 >> 3 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8296) - (_QWORD)v26) >> 5))
    {
      if ((unint64_t)v24 >= 0x3FFFFFFFFFFFFFF9)
        sub_20E95E0B0();
      v27 = *(_BYTE **)(a1 + 8288);
      v28 = (char *)operator new(4 * v24);
      v29 = &v28[(v27 - v26) & 0xFFFFFFFFFFFFFFE0];
      v30 = v29;
      if (v27 != v26)
      {
        v31 = &v28[(v27 - v26) & 0xFFFFFFFFFFFFFFE0];
        do
        {
          v30 = v31 - 32;
          v32 = *((_OWORD *)v27 - 1);
          *((_OWORD *)v31 - 2) = *((_OWORD *)v27 - 2);
          *((_OWORD *)v31 - 1) = v32;
          v27 -= 32;
          v31 -= 32;
        }
        while (v27 != v26);
      }
      *(_QWORD *)(a1 + 8280) = v30;
      *(_QWORD *)(a1 + 8288) = v29;
      *(_QWORD *)(a1 + 8296) = &v28[32 * v25];
      if (v26)
        operator delete(v26);
    }
    v34 = *v12;
    v33 = v12[1];
    if (*v12 != v33)
    {
      v96 = a4;
      v97 = v12[1];
      while (1)
      {
        v36 = *(_DWORD *)(*v34 + 32);
        if (sub_20F881F54((uint64_t)a2, *v34, 0, 0, 0))
        {
          v37 = (_QWORD *)*v34;
          if (*(_BYTE *)(*v34 + 488))
          {
            v37[6] = 0;
            v37[7] = 0;
            v37[8] = 0;
          }
          goto LABEL_32;
        }
        v98 = 0;
        v99 = 0;
        *(_QWORD *)&v100 = 0;
        DWORD2(v100) = 0;
        BYTE12(v100) = 1;
        v38 = *v34;
        v39 = a4[1];
        v107[0] = *a4;
        v107[1] = v39;
        v107[2] = a4[2];
        v40 = a2;
        if (sub_20FB98350((uint64_t)a2, v38, (uint64_t)v107, 1, &v98))
          break;
LABEL_31:
        a2 = v40;
        v33 = v97;
LABEL_32:
        if (++v34 == v33)
          goto LABEL_94;
      }
      v41 = *(_OWORD **)(a1 + 8312);
      v42 = *(_QWORD *)(a1 + 8320);
      if ((unint64_t)v41 >= v42)
      {
        v44 = *(_OWORD **)(a1 + 8304);
        v45 = v41 - v44;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          sub_20E867F44();
        v47 = v42 - (_QWORD)v44;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 >> 60)
            goto LABEL_99;
          v49 = (char *)operator new(16 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[16 * v45];
        *(_OWORD *)v50 = v100;
        v51 = v50;
        if (v41 != v44)
        {
          do
          {
            v52 = *((_QWORD *)v41-- - 2);
            v53 = *(_QWORD *)((char *)v41 + 5);
            *((_QWORD *)v51-- - 2) = v52;
            *(_QWORD *)((char *)v51 + 5) = v53;
          }
          while (v41 != v44);
          v41 = *(_OWORD **)(a1 + 8304);
        }
        *(_QWORD *)(a1 + 8304) = v51;
        v43 = v50 + 16;
        *(_QWORD *)(a1 + 8312) = v50 + 16;
        *(_QWORD *)(a1 + 8320) = &v49[16 * v48];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v41 = v100;
        v43 = v41 + 1;
      }
      *(_QWORD *)(a1 + 8312) = v43;
      v54 = *(char **)(a1 + 8336);
      v55 = *(_QWORD *)(a1 + 8344);
      if ((unint64_t)v54 < v55)
      {
        *(_DWORD *)v54 = v36;
        v56 = (uint64_t)(v54 + 4);
LABEL_75:
        *(_QWORD *)(a1 + 8336) = v56;
        if (*(_BYTE *)(*v34 + 488))
          v75 = (_QWORD *)(*v34 + 40);
        else
          v75 = 0;
        v77 = v75[1];
        v76 = v75[2];
        v78 = v75[3];
        v79 = *(_QWORD **)(a1 + 8288);
        v80 = *(_QWORD *)(a1 + 8296);
        if ((unint64_t)v79 < v80)
        {
          *v79 = v77;
          v79[1] = v76;
          v79[2] = v78;
          v35 = v79 + 4;
          v79[3] = 0x3FF0000000000000;
          a4 = v96;
        }
        else
        {
          a4 = v96;
          v81 = (_QWORD *)*v95;
          v82 = ((uint64_t)v79 - *v95) >> 5;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 59)
            sub_20E95E0B0();
          v84 = v80 - (_QWORD)v81;
          if (v84 >> 4 > v83)
            v83 = v84 >> 4;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFE0)
            v85 = 0x7FFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            if (v85 >> 59)
              sub_20E877A38();
            v86 = (char *)operator new(32 * v85);
          }
          else
          {
            v86 = 0;
          }
          v87 = &v86[32 * v82];
          *(_QWORD *)v87 = v77;
          *((_QWORD *)v87 + 1) = v76;
          *((_QWORD *)v87 + 2) = v78;
          *((_QWORD *)v87 + 3) = 0x3FF0000000000000;
          v88 = v87;
          if (v79 != v81)
          {
            do
            {
              v89 = *((_OWORD *)v79 - 1);
              *((_OWORD *)v88 - 2) = *((_OWORD *)v79 - 2);
              *((_OWORD *)v88 - 1) = v89;
              v88 -= 32;
              v79 -= 4;
            }
            while (v79 != v81);
            v79 = (_QWORD *)*v95;
          }
          v90 = &v86[32 * v85];
          *(_QWORD *)(a1 + 8280) = v88;
          v35 = v87 + 32;
          *(_QWORD *)(a1 + 8288) = v87 + 32;
          *(_QWORD *)(a1 + 8296) = v90;
          if (v79)
            operator delete(v79);
        }
        *(_QWORD *)(a1 + 8288) = v35;
        goto LABEL_31;
      }
      v57 = (char *)*v94;
      v58 = v54 - (_BYTE *)*v94;
      v59 = v58 >> 2;
      v60 = (v58 >> 2) + 1;
      if (v60 >> 62)
        sub_20EABADD4();
      v61 = v55 - (_QWORD)v57;
      if (v61 >> 1 > v60)
        v60 = v61 >> 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (v62)
      {
        if (v62 >> 62)
LABEL_99:
          sub_20E877A38();
        v63 = operator new(4 * v62);
        v64 = &v63[4 * v59];
        *v64 = v36;
        v56 = (uint64_t)(v64 + 1);
        v65 = v54 - v57;
        if (v54 == v57)
          goto LABEL_73;
      }
      else
      {
        v63 = 0;
        v64 = (_DWORD *)(4 * v59);
        *(_DWORD *)(4 * v59) = v36;
        v56 = 4 * v59 + 4;
        v65 = v54 - v57;
        if (v54 == v57)
        {
LABEL_73:
          *(_QWORD *)(a1 + 8328) = v64;
          *(_QWORD *)(a1 + 8336) = v56;
          *(_QWORD *)(a1 + 8344) = &v63[4 * v62];
          if (v57)
            operator delete(v57);
          goto LABEL_75;
        }
      }
      v66 = v65 - 4;
      if (v66 < 0x2C)
        goto LABEL_109;
      if ((unint64_t)(v54 - &v63[v58]) < 0x20)
        goto LABEL_109;
      v67 = (v66 >> 2) + 1;
      v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
      v69 = &v54[-v68];
      v64 = (_DWORD *)((char *)v64 - v68);
      v70 = &v63[4 * v59 - 16];
      v71 = v54 - 16;
      v72 = v67 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v73 = *(_OWORD *)v71;
        *(v70 - 1) = *((_OWORD *)v71 - 1);
        *v70 = v73;
        v70 -= 2;
        v71 -= 32;
        v72 -= 8;
      }
      while (v72);
      v54 = v69;
      if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_109:
        do
        {
          v74 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *--v64 = v74;
        }
        while (v54 != v57);
      }
      goto LABEL_73;
    }
  }
LABEL_94:
  v91 = __p[0];
  if (__p[0])
  {
    do
    {
      v92 = (_QWORD *)*v91;
      operator delete(v91);
      v91 = v92;
    }
    while (v92);
  }
  v93 = v104[0];
  v104[0] = 0;
  if (v93)
    operator delete(v93);
}

void sub_20F8947D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F8947E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F8947FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F894810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F894824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F894838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F89484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20F25CF20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F894860(uint64_t a1, _OWORD *a2, _QWORD *a3, char **a4, uint64_t a5, _DWORD *a6, _DWORD *a7, double *a8)
{
  uint64_t v13;
  uint64_t v14;
  long double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *i;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  _BYTE *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  unsigned int v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 v98;
  int v99;
  int v100;
  _QWORD *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  uint64_t *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  uint64_t *v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  _OWORD *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  _QWORD *v153;
  double v154;
  long double v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  unint64_t *v192;
  double v193;
  double *v194;
  double v195;
  double v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  size_t v201;
  const char *v202;
  unsigned __int8 v203;
  unsigned __int8 v204;
  const char *v205;
  size_t v206;
  _BYTE *v207;
  const char *v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE *v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  double v219;
  double v220;
  size_t v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  double *v257;
  _DWORD *v259;
  char **v260;
  uint64_t v262;
  int v263;
  uint64_t *v264;
  long double v265;
  int v266;
  uint64_t v267;
  double v268;
  void **v269;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t *v274;
  __int128 v275;
  __int128 v276;
  int v277;
  char v278;
  __int16 v279;
  char v280;
  const char *v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE v286[13];
  __int16 v287;
  char v288;
  __int128 v289;
  _BYTE v290[32];
  __int16 v291;
  char v292;
  uint64_t v293;
  _BYTE v294[48];
  size_t v295;
  unint64_t v296;
  char v297;
  uint64_t v298;

  v298 = *MEMORY[0x24BDAC8D0];
  v13 = a1 + 496;
  v267 = *(_QWORD *)(a1 + 496);
  v14 = *(_QWORD *)(a1 + 592);
  v15 = cos(*(double *)(a1 + 568) * 0.0174532925);
  v266 = *(_DWORD *)(a1 + 1784);
  v16 = *(double *)(a1 + 616);
  v290[28] = 0;
  *(_QWORD *)&v289 = *(_QWORD *)(a1 + 536);
  *((_QWORD *)&v289 + 1) = v14;
  *(long double *)v290 = v15;
  *(_DWORD *)&v290[24] = *(_QWORD *)(a1 + 1800);
  *(_OWORD *)&v290[8] = xmmword_2102DCC90;
  v17 = *(double *)(a1 + 8144);
  v18 = v13 + 8 * *(unsigned __int8 *)(a1 + 11680);
  v19 = *(double *)(v18 + 208);
  v20 = *(double *)(v18 + 184);
  v21 = *(double *)(a1 + 560);
  v265 = cos(*(double *)(a1 + 584) * 0.0174532925);
  v22 = **(_QWORD ***)(a1 + 7952);
  v23 = *(_OWORD *)(a1 + 11688);
  v24 = *(_OWORD *)(a1 + 11720);
  a2[1] = *(_OWORD *)(a1 + 11704);
  a2[2] = v24;
  *a2 = v23;
  v272 = (uint64_t)a2;
  sub_20F38F148((uint64_t)a2, v22);
  v262 = a1;
  v25 = *(_QWORD *)(a1 + 8216);
  v26 = 8;
  if (!*(_BYTE *)v25)
    v26 = 16;
  v257 = a8;
  if (*(_BYTE *)v25 && *(_QWORD *)(v25 + v26))
  {
    v27 = a3;
    if (*(_QWORD *)(*(_QWORD *)(v25 + 8) + 152) == *(_QWORD *)(*(_QWORD *)(v25 + 8) + 160))
      goto LABEL_9;
    goto LABEL_8;
  }
  v27 = a3;
  if (*(_QWORD *)(*(_QWORD *)(v25 + 16) + 152) != *(_QWORD *)(*(_QWORD *)(v25 + 16) + 160))
LABEL_8:
    sub_20F894128(a1, a2, 1, &v289);
LABEL_9:
  v259 = a7;
  v260 = a4;
  v28 = *(_QWORD *)(a1 + 12408);
  v29 = *(_QWORD *)(a1 + 12400);
  v30 = v28 - v29;
  v31 = (v28 - v29) >> 3;
  v32 = v27;
  v33 = *(_QWORD *)(a1 + 2488);
  v34 = *(_QWORD *)(a1 + 2480);
  v32[1] = *v32;
  a4[1] = *a4;
  v35 = *(char **)a5;
  for (i = *(char **)(a5 + 8); i != v35; i -= 16)
  {
    v37 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  *(_QWORD *)(a5 + 8) = v35;
  v40 = (_BYTE *)*a3;
  v41 = v259;
  if (v31 <= (uint64_t)(a3[2] - *a3) >> 3)
    goto LABEL_29;
  if (v30 < 0)
    goto LABEL_261;
  v42 = (_BYTE *)a3[1];
  v43 = (char *)operator new(v28 - v29);
  v44 = v42 - v40;
  v45 = &v43[(v42 - v40) & 0xFFFFFFFFFFFFFFF8];
  v46 = v45;
  if (v42 != v40)
  {
    if ((unint64_t)(v44 - 8) < 0x58)
    {
      v46 = &v43[(v42 - v40) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_26:
        v55 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v46 - 1) = v55;
        v46 -= 8;
      }
      while (v42 != v40);
      goto LABEL_27;
    }
    v46 = &v43[(v42 - v40) & 0xFFFFFFFFFFFFFFF8];
    if (v42 - v43 - (v44 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_26;
    v47 = v44 >> 3;
    v48 = ((unint64_t)(v44 - 8) >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v42[-v49];
    v46 = &v45[-v49];
    v51 = &v43[8 * v47 - 16];
    v52 = (__int128 *)(v42 - 16);
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *v52;
      *((_OWORD *)v51 - 1) = *(v52 - 1);
      *(_OWORD *)v51 = v54;
      v51 -= 32;
      v52 -= 2;
      v53 -= 4;
    }
    while (v53);
    v42 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_26;
  }
LABEL_27:
  *a3 = v46;
  a3[1] = v45;
  a3[2] = &v43[8 * v31];
  if (v40)
    operator delete(v40);
LABEL_29:
  v56 = v260;
  v57 = *v260;
  if (v31 > (v260[2] - *v260) >> 3)
  {
    if ((v30 & 0x8000000000000000) == 0)
    {
      v58 = v260[1];
      v59 = (char *)operator new(v28 - v29);
      v60 = v58 - v57;
      v61 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
      v62 = v61;
      if (v58 == v57)
        goto LABEL_39;
      if ((unint64_t)(v60 - 8) >= 0x58)
      {
        v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
        if (v58 - v59 - (v60 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          v63 = v60 >> 3;
          v64 = ((unint64_t)(v60 - 8) >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v66 = &v58[-v65];
          v62 = &v61[-v65];
          v67 = &v59[8 * v63 - 16];
          v68 = (__int128 *)(v58 - 16);
          v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = *v68;
            *((_OWORD *)v67 - 1) = *(v68 - 1);
            *(_OWORD *)v67 = v70;
            v67 -= 32;
            v68 -= 2;
            v69 -= 4;
          }
          while (v69);
          v58 = v66;
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_39:
            v56 = v260;
            *v260 = v62;
            v260[1] = v61;
            v260[2] = &v59[8 * v31];
            if (v57)
              operator delete(v57);
            goto LABEL_41;
          }
        }
      }
      else
      {
        v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v71 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v62 - 1) = v71;
        v62 -= 8;
      }
      while (v58 != v57);
      goto LABEL_39;
    }
LABEL_261:
    sub_20E867F44();
  }
LABEL_41:
  if ((unint64_t)(v33 - v34) < 0x10)
    v72 = 1;
  else
    v72 = (unint64_t)((v33 - v34) >> 2) >> 2;
  sub_20EA647CC(a5, v31 / v72);
  v73 = (_QWORD *)(v262 + 2576);
  v74 = *(_QWORD *)(v262 + 2576);
  v75 = (*(_QWORD *)(v262 + 2584) - v74) >> 2;
  if (v31 <= v75)
  {
    v76 = a3;
    if (v31 < v75)
      *(_QWORD *)(v262 + 2584) = v74 + 4 * v31;
  }
  else
  {
    sub_20EAC24FC(v262 + 2576, v31 - v75);
    v76 = a3;
  }
  *(_QWORD *)v294 = 0;
  *(_DWORD *)&v294[8] = 0;
  v294[12] = 1;
  v77 = *(_QWORD *)(v262 + 8232);
  v78 = (*(_QWORD *)(v262 + 8240) - v77) >> 4;
  if (v31 <= v78)
  {
    if (v31 < v78)
      *(_QWORD *)(v262 + 8240) = v77 + 16 * v31;
  }
  else
  {
    sub_20FB436E4((void **)(v262 + 8232), v31 - v78, v294);
  }
  v269 = (void **)(v262 + 8256);
  *(_QWORD *)(v262 + 8264) = *(_QWORD *)(v262 + 8256);
  *(_QWORD *)v294 = 0;
  *(_DWORD *)&v294[8] = 0;
  v294[12] = 1;
  if (v28 != v29)
    sub_20FB436E4(v269, (v28 - v29) >> 3, v294);
  v79 = (_QWORD *)(v262 + 2328);
  v80 = *(_QWORD *)(v262 + 2328);
  v81 = (*(_QWORD *)(v262 + 2336) - v80) >> 5;
  if (v31 <= v81)
  {
    if (v31 < v81)
      *(_QWORD *)(v262 + 2336) = v80 + 32 * v31;
  }
  else
  {
    sub_20F156988((char **)(v262 + 2328), v31 - v81);
  }
  *(_QWORD *)(v262 + 2384) = *(_QWORD *)(v262 + 2376);
  v82 = **(_DWORD **)(v262 + 2480);
  *a6 = 0;
  *v259 = 0;
  v83 = *(uint64_t **)(v262 + 12400);
  v84 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
  v264 = *(uint64_t **)(v262 + 12408);
  if (v83 == v264)
  {
    v86 = 0;
    v268 = 0.0;
    v90 = 0.0;
    v91 = 0.0;
    v194 = v257;
LABEL_171:
    LODWORD(v85) = 0;
    v193 = 1.0;
    goto LABEL_172;
  }
  v263 = v82;
  v85 = 0;
  v86 = 0;
  v87 = v17 * v19 + (1.0 - v17) * v20;
  v88 = v16 * v16;
  v89 = v21 * v87;
  v268 = 0.0;
  v90 = 0.0;
  v91 = 0.0;
  do
  {
    v92 = *v83;
    v93 = v86;
    *(_DWORD *)(*v73 + 4 * v86) = *(_QWORD *)(*v83 + 32);
    if (*(_BYTE *)(v92 + 488))
      v94 = v92 + 40;
    else
      v94 = 0;
    v95 = *(_QWORD *)(v94 + 24);
    v96 = *v79 + 32 * v86;
    *(_OWORD *)v96 = *(_OWORD *)(v94 + 8);
    *(_QWORD *)(v96 + 16) = v95;
    *(_QWORD *)(v96 + 24) = 0x3FF0000000000000;
    LODWORD(v285) = 0;
    BYTE4(v285) = 0;
    *(_QWORD *)v286 = 0;
    *(_DWORD *)&v286[8] = 0;
    v286[12] = 1;
    v97 = *v83;
    *(_WORD *)&v294[45] = v291;
    v294[47] = v292;
    v279 = v287;
    v280 = v288;
    *(_QWORD *)v294 = v267;
    *(_QWORD *)&v294[8] = v14;
    *(long double *)&v294[16] = v15;
    *(double *)&v294[24] = v88;
    *(_QWORD *)&v294[32] = 0x7FEFFFFFFFFFFFFFLL;
    *(_DWORD *)&v294[40] = v266;
    v294[44] = 0;
    v274 = *(uint64_t **)&v89;
    *(_QWORD *)&v275 = v14;
    *((long double *)&v275 + 1) = v265;
    v276 = xmmword_2102DCC90;
    v277 = v266;
    v278 = 0;
    v98 = sub_20FB99654(v272, v97, (uint64_t)v294, (uint64_t)&v274, (uint64_t)&v285);
    v99 = v285;
    v100 = BYTE4(v285);
    v101 = (_QWORD *)(*(_QWORD *)(v262 + 8232) + 16 * v93);
    *v101 = *(_QWORD *)v286;
    *(_QWORD *)((char *)v101 + 5) = *(_QWORD *)&v286[5];
    *a6 += v99;
    *v41 += v100;
    if ((v98 & 1) != 0)
    {
      v106 = (char *)v76[1];
      v105 = v76[2];
      if ((unint64_t)v106 < v105)
      {
        *(_QWORD *)v106 = *v83;
        v104 = (uint64_t)(v106 + 8);
LABEL_104:
        v146 = 0;
        v76[1] = v104;
        v147 = 257;
        goto LABEL_111;
      }
      v127 = v85;
      v128 = (char *)*v76;
      v129 = (uint64_t)&v106[-*v76];
      v130 = v129 >> 3;
      v131 = (v129 >> 3) + 1;
      if (v131 >> 61)
        goto LABEL_261;
      v132 = v105 - (_QWORD)v128;
      if (v132 >> 2 > v131)
        v131 = v132 >> 2;
      if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
        v133 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v133 = v131;
      if (v133)
      {
        if (v133 >> 61)
LABEL_262:
          sub_20E877A38();
        v134 = operator new(8 * v133);
        v135 = (uint64_t *)&v134[8 * v130];
        *v135 = *v83;
        v104 = (uint64_t)(v135 + 1);
        v136 = (char *)(v106 - v128);
        if (v106 != v128)
        {
LABEL_95:
          v137 = (unint64_t)(v136 - 8);
          if (v137 < 0x58)
            goto LABEL_273;
          if ((unint64_t)(v106 - v134 - v129) < 0x20)
            goto LABEL_273;
          v138 = (v137 >> 3) + 1;
          v139 = 8 * (v138 & 0x3FFFFFFFFFFFFFFCLL);
          v140 = &v106[-v139];
          v135 = (uint64_t *)((char *)v135 - v139);
          v141 = &v134[8 * v130 - 16];
          v142 = v106 - 16;
          v143 = v138 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v144 = *(_OWORD *)v142;
            *(v141 - 1) = *((_OWORD *)v142 - 1);
            *v141 = v144;
            v141 -= 2;
            v142 -= 32;
            v143 -= 4;
          }
          while (v143);
          v106 = v140;
          if (v138 != (v138 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_273:
            do
            {
              v145 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *--v135 = v145;
            }
            while (v106 != v128);
          }
          v76 = a3;
          v106 = (char *)*a3;
          *a3 = v135;
          a3[1] = v104;
          a3[2] = &v134[8 * v133];
          v85 = v127;
          v41 = v259;
          if (!v106)
            goto LABEL_103;
LABEL_102:
          operator delete(v106);
LABEL_103:
          v56 = v260;
          v79 = (_QWORD *)(v262 + 2328);
          goto LABEL_104;
        }
      }
      else
      {
        v134 = 0;
        v135 = (uint64_t *)(8 * v130);
        *(_QWORD *)(8 * v130) = *v83;
        v104 = 8 * v130 + 8;
        v136 = (char *)(v106 - v128);
        if (v106 != v128)
          goto LABEL_95;
      }
      v76 = a3;
      *a3 = v135;
      a3[1] = v104;
      a3[2] = &v134[8 * v133];
      v85 = v127;
      v41 = v259;
      if (!v106)
        goto LABEL_103;
      goto LABEL_102;
    }
    v103 = (char *)v56[1];
    v102 = v56[2];
    if ((unint64_t)v103 >= v102)
    {
      v107 = v85;
      v108 = (char *)*v56;
      v109 = (uint64_t)&v103[-*v56];
      v110 = v109 >> 3;
      v111 = (v109 >> 3) + 1;
      if (v111 >> 61)
        goto LABEL_261;
      v112 = v102 - (_QWORD)v108;
      if (v112 >> 2 > v111)
        v111 = v112 >> 2;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
        v113 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v113 = v111;
      if (v113)
      {
        if (v113 >> 61)
          goto LABEL_262;
        v114 = operator new(8 * v113);
        v115 = (uint64_t *)&v114[8 * v110];
        *v115 = *v83;
        v104 = (uint64_t)(v115 + 1);
        v116 = (char *)(v103 - v108);
        if (v103 != v108)
          goto LABEL_79;
      }
      else
      {
        v114 = 0;
        v115 = (uint64_t *)(8 * v110);
        *(_QWORD *)(8 * v110) = *v83;
        v104 = 8 * v110 + 8;
        v116 = (char *)(v103 - v108);
        if (v103 != v108)
        {
LABEL_79:
          v117 = (unint64_t)(v116 - 8);
          if (v117 < 0x58)
            goto LABEL_274;
          if ((unint64_t)(v103 - v114 - v109) < 0x20)
            goto LABEL_274;
          v118 = (v117 >> 3) + 1;
          v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
          v120 = &v103[-v119];
          v115 = (uint64_t *)((char *)v115 - v119);
          v121 = &v114[8 * v110 - 16];
          v122 = v103 - 16;
          v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v124 = *(_OWORD *)v122;
            *(v121 - 1) = *((_OWORD *)v122 - 1);
            *v121 = v124;
            v121 -= 2;
            v122 -= 32;
            v123 -= 4;
          }
          while (v123);
          v103 = v120;
          if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              v125 = *((_QWORD *)v103 - 1);
              v103 -= 8;
              *--v115 = v125;
            }
            while (v103 != v108);
          }
          v126 = (uint64_t **)v260;
          v103 = *v260;
          goto LABEL_107;
        }
      }
      v126 = (uint64_t **)v260;
LABEL_107:
      *v126 = v115;
      v126[1] = (uint64_t *)v104;
      v126[2] = (uint64_t *)&v114[8 * v113];
      v85 = v107;
      v41 = v259;
      v56 = v126;
      v76 = a3;
      if (v103)
        operator delete(v103);
      v79 = (_QWORD *)(v262 + 2328);
      goto LABEL_110;
    }
    *(_QWORD *)v103 = *v83;
    v104 = (uint64_t)(v103 + 8);
LABEL_110:
    v56[1] = v104;
    v146 = 1;
    v147 = 256;
LABEL_111:
    v73 = (_QWORD *)(v262 + 2576);
    if (*(_BYTE *)(*v83 + 488))
      v148 = *v83 + 40;
    else
      v148 = 0;
    *(_WORD *)(v148 + 57) = v147;
    v149 = *v83;
    v150 = *v83 + 40;
    if (!*(_BYTE *)(*v83 + 488))
      v150 = 0;
    *(_BYTE *)(v150 + 56) = v146;
    if ((v98 & 1) != 0)
    {
      v153 = (char *)*v269 + 16 * v93;
      *v153 = *(_QWORD *)v286;
      *(_QWORD *)((char *)v153 + 5) = *(_QWORD *)&v286[5];
      v154 = *(double *)v286;
      if (*(double *)v286 < -1.0)
        v154 = -1.0;
      v155 = fmin(v154, 1.0);
      v268 = v268 + acos(v155) * 57.2957795;
      v156 = 1.0 - v155 * v155;
      v90 = v90 + sqrt(v156);
      v91 = v91 + v156;
      v85 = (v85 + 1);
      v152 = v263;
      if (v98 < 0x100u)
        goto LABEL_61;
    }
    else
    {
      LODWORD(v274) = 0;
      BYTE4(v274) = 0;
      *(_QWORD *)&v275 = 0;
      DWORD2(v275) = 0;
      BYTE12(v275) = 1;
      *(_OWORD *)v294 = v289;
      *(_OWORD *)&v294[16] = *(_OWORD *)v290;
      *(_OWORD *)&v294[32] = *(_OWORD *)&v290[16];
      sub_20FB98350(v272, v149, (uint64_t)v294, 1, (int *)&v274);
      v151 = (char *)*v269 + 16 * v93;
      *v151 = v275;
      *(_QWORD *)((char *)v151 + 5) = *(_QWORD *)((char *)&v275 + 5);
      v152 = v263;
      if (v98 < 0x100u)
        goto LABEL_61;
    }
    v157 = *v83;
    v158 = *(_QWORD *)(*v83 + 496);
    v159 = *(_QWORD *)(*v83 + 504);
    if (v158 != v159)
    {
      while (*(_QWORD *)v158 || *(_DWORD *)(v158 + 8) != v152)
      {
        v158 += 64;
        if (v158 == v159)
          goto LABEL_61;
      }
    }
    if (v158 != v159)
    {
      v160 = 0;
      v161 = *(uint64_t **)(*(_QWORD *)(v262 + 7952) + 16);
      v162 = *(_QWORD *)(v157 + 24);
      v163 = *(_QWORD *)(v157 + 32);
      _X10 = *v161;
      __asm { PRFM            #4, [X10] }
      v169 = (0x9DDFEA08EB382D69 * v163 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                  * v163
                                                                                  + 0x376ADF16980614E5) >> 32);
      v170 = v161[3];
      v171 = (v169 >> 7) ^ 0x13701D;
      v172 = 0x101010101010101 * (v169 & 0x7F);
      while (1)
      {
        v173 = v171 & v170;
        v174 = *(_QWORD *)(_X10 + v173);
        v175 = ((v174 ^ v172) - 0x101010101010101) & ~(v174 ^ v172) & 0x8080808080808080;
        if (v175)
          break;
LABEL_135:
        if ((v174 & (~v174 << 6) & 0x8080808080808080) != 0)
          goto LABEL_138;
        v160 += 8;
        v171 = v160 + v173;
      }
      while (1)
      {
        v104 = v161[1] + 32 * ((v173 + (__clz(__rbit64(v175)) >> 3)) & v170);
        if (*(_QWORD *)v104 == v162 && *(_DWORD *)(v104 + 8) == (_DWORD)v163)
          break;
        v175 &= v175 - 1;
        if (!v175)
          goto LABEL_135;
      }
      if (!_X10)
      {
LABEL_138:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5539, (uint64_t)"iter != viodatabase_->track_list()->end()", 41, (uint64_t)"Cannot find the track.", 22, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_263;
        }
      }
      if (*(_BYTE *)(v262 + 1985))
      {
        v177 = *(_QWORD *)(*v83 + 496);
        v178 = *(_QWORD *)(*v83 + 504);
        if (v177 != v178)
        {
          while (*(unsigned __int16 *)(v177 + 18) != *(_DWORD *)(v262 + 1988))
          {
            v177 += 64;
            if (v177 == v178)
              goto LABEL_61;
          }
        }
        if (v177 != v178)
        {
          if (*(_DWORD *)(v262 + 1988) != *(unsigned __int16 *)(v177 + 18)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5554, (uint64_t)"found_cam_stream_id.camera_id == config_.camera_used_for_mapping", 64, (uint64_t)"We should not use tracks from this camera for mapping", 53, (void (*)(void **))sub_21023DDB0))
          {
LABEL_263:
            abort();
          }
          v179 = *(_QWORD *)(v104 + 16);
          v180 = *(_QWORD *)(v104 + 24);
          *(_QWORD *)v294 = v179;
          *(_QWORD *)&v294[8] = v180;
          if (v180)
          {
            v181 = (unint64_t *)(v180 + 8);
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
          }
          v183 = a5;
          v184 = *(_QWORD **)(a5 + 8);
          if ((unint64_t)v184 < *(_QWORD *)(a5 + 16))
          {
LABEL_60:
            *v184 = v179;
            v184[1] = v180;
            *(_QWORD *)(v183 + 8) = v184 + 2;
            v79 = (_QWORD *)(v262 + 2328);
            goto LABEL_61;
          }
          v185 = sub_20EAFDCA4((char **)a5, (uint64_t)v294);
          v186 = *(std::__shared_weak_count **)&v294[8];
          *(_QWORD *)(a5 + 8) = v185;
          v79 = (_QWORD *)(v262 + 2328);
          if (v186)
          {
            v187 = (unint64_t *)&v186->__shared_owners_;
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            goto LABEL_165;
          }
        }
      }
      else
      {
        v179 = *(_QWORD *)(v104 + 16);
        v180 = *(_QWORD *)(v104 + 24);
        *(_QWORD *)v294 = v179;
        *(_QWORD *)&v294[8] = v180;
        if (v180)
        {
          v189 = (unint64_t *)(v180 + 8);
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
        }
        v183 = a5;
        v184 = *(_QWORD **)(a5 + 8);
        if ((unint64_t)v184 < *(_QWORD *)(a5 + 16))
          goto LABEL_60;
        v191 = sub_20EAFDCA4((char **)a5, (uint64_t)v294);
        v186 = *(std::__shared_weak_count **)&v294[8];
        *(_QWORD *)(a5 + 8) = v191;
        v79 = (_QWORD *)(v262 + 2328);
        if (v186)
        {
          v192 = (unint64_t *)&v186->__shared_owners_;
          do
            v188 = __ldaxr(v192);
          while (__stlxr(v188 - 1, v192));
LABEL_165:
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
      }
    }
LABEL_61:
    v86 = v93 + 1;
    ++v83;
  }
  while (v83 != v264);
  if (!(_DWORD)v85)
  {
    v194 = v257;
    v84 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
    goto LABEL_171;
  }
  v193 = (double)v85;
  v194 = v257;
  v84 = "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" + 2;
LABEL_172:
  v195 = *((double *)v84 + 310);
  v196 = v90 / v193 * v195;
  *v194 = v196;
  sub_20F82FD50(&v284);
  if (**(int **)(v284 + 56) > 2)
    return;
  v197 = *(unsigned __int8 *)(v284 + 72);
  v198 = sub_20E8C31DC(v284, "OSLogSurrogateAppender", 1, 0);
  v199 = v198;
  if (!v197 && !v198)
    return;
  v274 = &v284;
  *(std::chrono::steady_clock::time_point *)&v275 = std::chrono::steady_clock::now();
  *((std::chrono::system_clock::time_point *)&v275 + 1) = std::chrono::system_clock::now();
  LODWORD(v276) = 2;
  *((_QWORD *)&v276 + 1) = "unknown file";
  v277 = 5573;
  v282 = 0;
  v283 = 0;
  v281 = "unknown function";
  v200 = *v274;
  if (*(char *)(*v274 + 39) < 0)
  {
    v202 = *(const char **)(v200 + 16);
    v201 = *(_QWORD *)(v200 + 24);
    v271 = *v274 + 16;
    v273 = v85;
    v204 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v204 & 1) == 0)
    {
LABEL_264:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v294);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v294);
        if (v294[24] && (v294[23] & 0x80000000) != 0)
          operator delete(*(void **)v294);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v201 = *(unsigned __int8 *)(*v274 + 39);
    v202 = (const char *)(*v274 + 16);
    v271 = (uint64_t)v202;
    v273 = v85;
    v203 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v203 & 1) == 0)
      goto LABEL_264;
  }
  if (byte_254A4A4F8[23] >= 0)
    v205 = byte_254A4A4F8;
  else
    v205 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v206 = byte_254A4A4F8[23];
  else
    v206 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v294 = os_log_create(v205, v202);
  v207 = &v294[8];
  if (v206 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v206 >= 0x17)
  {
    v208 = v202;
    v209 = v199;
    v210 = v200;
    v211 = v197;
    v212 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v206 | 7) != 0x17)
      v212 = v206 | 7;
    v213 = v212 + 1;
    v207 = operator new(v212 + 1);
    *(_QWORD *)&v294[16] = v206;
    *(_QWORD *)&v294[24] = v213 | 0x8000000000000000;
    *(_QWORD *)&v294[8] = v207;
    v197 = v211;
    v200 = v210;
    v199 = v209;
    v202 = v208;
    goto LABEL_192;
  }
  v294[31] = v206;
  if (v206)
LABEL_192:
    memmove(v207, v205, v206);
  v207[v206] = 0;
  v294[32] = 1;
  v214 = &v294[40];
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v201 >= 0x17)
  {
    v216 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v216 = v201 | 7;
    v217 = v216 + 1;
    v214 = operator new(v216 + 1);
    v295 = v201;
    v296 = v217 | 0x8000000000000000;
    *(_QWORD *)&v294[40] = v214;
  }
  else
  {
    HIBYTE(v296) = v201;
    if (!v201)
    {
      v294[40] = 0;
      v297 = 1;
      v215 = *(NSObject **)v294;
      if ((SHIBYTE(v296) & 0x80000000) == 0)
        goto LABEL_197;
LABEL_203:
      operator delete(*(void **)&v294[40]);
      if (v294[32])
        goto LABEL_204;
      goto LABEL_206;
    }
  }
  memmove(v214, v202, v201);
  v214[v201] = 0;
  v297 = 1;
  v215 = *(NSObject **)v294;
  if (SHIBYTE(v296) < 0)
    goto LABEL_203;
LABEL_197:
  if (v294[32])
  {
LABEL_204:
    if ((v294[31] & 0x80000000) != 0)
      operator delete(*(void **)&v294[8]);
  }
LABEL_206:
  if (*(_QWORD *)v294)
    os_release(*(void **)v294);
  v218 = sqrt(v91 / v193);
  v219 = v268 / v193;
  v220 = v218 * v195;
  if (v199 && *(_QWORD *)(v199 + 24))
  {
    v221 = _os_log_pack_size();
    v222 = (std::__shared_weak_count_vtbl *)operator new(v221, (std::align_val_t)8uLL);
    v223 = (std::__shared_weak_count *)operator new();
    v224 = v223;
    v223->__shared_owners_ = 0;
    v225 = (unint64_t *)&v223->__shared_owners_;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v222;
    *(_QWORD *)v294 = v222;
    *(_QWORD *)&v294[8] = v222;
    *(_QWORD *)&v294[16] = v223;
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
    memset(&v294[24], 0, 24);
    do
      v227 = __ldaxr(v225);
    while (__stlxr(v227 - 1, v225));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v224);
    }
    v228 = *(_QWORD *)v294;
    v229 = _os_log_pack_fill();
    *(_DWORD *)v229 = 134219008;
    *(double *)(v229 + 4) = v219;
    *(_WORD *)(v229 + 12) = 2048;
    *(double *)(v229 + 14) = v196;
    *(_WORD *)(v229 + 22) = 2048;
    *(double *)(v229 + 24) = v220;
    *(_WORD *)(v229 + 32) = 1024;
    *(_DWORD *)(v229 + 34) = v273;
    *(_WORD *)(v229 + 38) = 1024;
    *(_DWORD *)(v229 + 40) = v86;
    v230 = operator new();
    v231 = *(unsigned __int8 *)(v200 + 39);
    v232 = v271;
    if ((v231 & 0x80u) != 0)
    {
      v232 = *(_QWORD *)(v200 + 16);
      v231 = *(_QWORD *)(v200 + 24);
    }
    *(_QWORD *)v230 = v228;
    *(_OWORD *)(v230 + 8) = *(_OWORD *)&v294[8];
    *(_QWORD *)&v294[8] = 0;
    *(_QWORD *)&v294[16] = 0;
    *(_OWORD *)(v230 + 24) = *(_OWORD *)&v294[24];
    *(_QWORD *)&v294[24] = 0;
    *(_QWORD *)&v294[32] = 0;
    *(_QWORD *)(v230 + 40) = v232;
    *(_QWORD *)(v230 + 48) = v231;
    *(_BYTE *)(v230 + 56) = 2;
    v293 = 0;
    v285 = v230;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v199 + 24) + 40))(*(_QWORD *)(v199 + 24), &v285);
    v233 = v285;
    v285 = 0;
    if (v233)
    {
      v234 = *(std::__shared_weak_count **)(v233 + 32);
      if (v234)
      {
        v235 = (unint64_t *)&v234->__shared_owners_;
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (!v236)
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
      }
      v237 = *(std::__shared_weak_count **)(v233 + 16);
      if (v237)
      {
        v238 = (unint64_t *)&v237->__shared_owners_;
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 - 1, v238));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      MEMORY[0x212BC6398](v233, 0x10F0C40B62ED6C6);
      v240 = v293;
      v293 = 0;
      if (v240)
      {
        v241 = *(std::__shared_weak_count **)(v240 + 32);
        if (v241)
        {
          v242 = (unint64_t *)&v241->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        v244 = *(std::__shared_weak_count **)(v240 + 16);
        if (v244)
        {
          v245 = (unint64_t *)&v244->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        MEMORY[0x212BC6398](v240, 0x10F0C40B62ED6C6);
      }
    }
    v247 = *(std::__shared_weak_count **)&v294[32];
    if (*(_QWORD *)&v294[32])
    {
      v248 = (unint64_t *)(*(_QWORD *)&v294[32] + 8);
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    v250 = *(std::__shared_weak_count **)&v294[16];
    if (*(_QWORD *)&v294[16])
    {
      v251 = (unint64_t *)(*(_QWORD *)&v294[16] + 8);
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
  }
  else
  {
    os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v294 = 134219008;
    *(double *)&v294[4] = v219;
    *(_WORD *)&v294[12] = 2048;
    *(double *)&v294[14] = v196;
    *(_WORD *)&v294[22] = 2048;
    *(double *)&v294[24] = v220;
    *(_WORD *)&v294[32] = 1024;
    *(_DWORD *)&v294[34] = v273;
    *(_WORD *)&v294[38] = 1024;
    *(_DWORD *)&v294[40] = v86;
    v253 = (void *)_os_log_send_and_compose_impl();
    if (v253)
      free(v253);
  }
  if (v197)
  {
    sub_20E8C003C((uint64_t)&v274, "vergence angle: %f, %f, %f (%u / %u)", v219, v196, v220, v273, v86);
    sub_20E863570((uint64_t)&v274);
  }
  sub_20E863570((uint64_t)&v274);
  v254 = v283;
  if (v283)
  {
    v255 = (unint64_t *)&v283->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
}

void sub_20F895E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(_BYTE *)(v41 - 216))
  {
    if (*(char *)(v41 - 217) < 0)
      operator delete(*(void **)(v41 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F895E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  sub_20E86E8C4(&a51);
  sub_20E86E8C4((uint64_t *)(v51 - 248));
  sub_20E86E658(v51 - 240);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F895E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20E86E658(v41 - 240);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F895EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  MEMORY[0x212BC6398](v41, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F895EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F895EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F895F94(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *a1;
  v9 = v5 - *a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    sub_20E867F44();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_20E877A38();
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[1] = (char *)v7;
}

void sub_20F896104(uint64_t a1)
{
  double *v1;
  double *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *i;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  size_t v74;
  char *v75;
  char *v76;
  unsigned __int8 *v77;
  unsigned int *v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  char *v83;
  float64x2_t v84;
  float64x2_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  float64x2_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  char *v111;
  char v112;
  uint64_t v113;
  int v114;
  char *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int *v120;
  uint64_t v121;
  int v122;
  float64x2_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  const void *v134;
  _BYTE *v135;
  char *v136;
  float64x2_t v137;
  _OWORD *v138;
  float64x2_t v139;
  float64x2_t v140;
  int64x2_t v141;
  float64x2_t v142;
  int64x2_t v143;
  float64x2_t v144;
  uint64_t v145;
  double v146;
  float64x2_t v147;
  char v148;
  double v149;
  float64x2_t v150;
  double v151;
  double v152;
  float64x2_t v153;
  unint64_t v154;
  double v155;
  double v156;
  long double v157;
  long double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  _QWORD *v165;
  double v166;
  unsigned int *v167;
  unsigned int *v168;
  _BYTE *v169;
  int v170;
  char *v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  _QWORD *v197;
  char *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _BYTE *v207;
  _QWORD *v208;
  char *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  _OWORD *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  _QWORD *v259;
  _BYTE *v260;
  unsigned int v261;
  unint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int v267;
  _QWORD *v268;
  __int128 v269;
  _BYTE *v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  _BYTE *v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  _BYTE *v283;
  _QWORD *v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  _QWORD *v290;
  char *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  _QWORD *v299;
  char *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  __int128 v306;
  uint64_t *v307;
  uint64_t *v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  int v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  char *v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  _BYTE *v334;
  uint64_t *v335;
  char *v336;
  unint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  _BYTE *v344;
  uint64_t *v345;
  char *v346;
  unint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  _OWORD *v354;
  char *v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  char v359;
  __int16 v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  _OWORD *v365;
  char *v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  double v375;
  long double v376;
  long double v377;
  double v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  char *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  char *v410;
  unint64_t *v411;
  double v412;
  double v413;
  int v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  const char *v418;
  size_t v419;
  unsigned __int8 v420;
  unsigned __int8 v421;
  const char *v422;
  size_t v423;
  _BYTE *v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  NSObject *v428;
  uint64_t v429;
  uint64_t v430;
  double v431;
  double v432;
  double v433;
  size_t v434;
  std::__shared_weak_count_vtbl *v435;
  std::__shared_weak_count *v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  const char *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  void *v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::logic_error *exception;
  double *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  _QWORD *v476;
  void **v477;
  int v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  double *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  double v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char v491;
  int v492;
  double v493;
  int v494;
  double v495;
  unsigned int v496;
  _DWORD *v497;
  _DWORD *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  double *v505;
  uint64_t *v506;
  unsigned int *__dst;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  void *v511;
  unsigned int *v512;
  char *v513;
  __int128 v514;
  _BYTE v515[32];
  __int16 v516;
  char v517;
  __int16 v518;
  char v519;
  __int128 v520;
  __int128 v521;
  int v522;
  _QWORD v523[3];
  __int128 v524;
  int v525;
  char v526;
  __int16 v527;
  char v528;
  __int128 v529;
  uint64_t v530;
  _OWORD v531[3];
  uint64_t v532[5];
  int v533;
  char v534;
  __int16 v535;
  char v536;
  __int128 v537;
  uint64_t v538;
  float64x2_t v539;
  double v540;
  _QWORD v541[10];
  uint64_t v542;
  _BYTE v543[13];
  _BYTE v544[32];
  __int128 v545;
  const char *v546;
  uint64_t v547;
  std::__shared_weak_count *v548;
  _BYTE v549[300];
  int v550;
  _BYTE v551[300];
  int v552;
  _WORD v553[302];
  int v554;
  _DWORD v555[300];
  int v556;
  _DWORD v557[2];
  int v558;
  _BYTE object[24];
  __int128 v560;
  void *__p[2];
  unint64_t v562;
  char v563;
  int v564;
  int v565;
  _OWORD v566[240];
  int v567;
  int v568;
  int v569;
  uint64_t v570;
  uint64_t v571;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v497 = v3;
  v498 = v4;
  v472 = v5;
  v475 = v6;
  v479 = v7;
  v9 = v8;
  v482 = v8;
  v571 = *MEMORY[0x24BDAC8D0];
  v10 = v8 + 62;
  v495 = v8[62];
  v11 = v8[74];
  v12 = cos(v8[71] * 0.0174532925);
  v13 = *((_DWORD *)v9 + 446);
  v14 = v9[77];
  v487 = v9[67];
  v486 = *((_DWORD *)v9 + 450);
  v515[28] = 0;
  v15 = &v10[*((unsigned __int8 *)v9 + 11680)];
  *(double *)&v514 = v9[70] * (v9[1018] * v15[26] + (1.0 - v9[1018]) * v15[23]);
  *((double *)&v514 + 1) = v11;
  *(_QWORD *)v515 = cos(v9[73] * 0.0174532925);
  v494 = v13;
  *(_DWORD *)&v515[24] = v13;
  *(_OWORD *)&v515[8] = xmmword_2102DCC90;
  v16 = *((_QWORD *)v9 + 1027);
  v471 = v2;
  if (*(_BYTE *)v16)
  {
    v17 = 0;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 16);
    if (v17 && (*(_DWORD *)(v17 + 62856) || *(_DWORD *)(v17 + 62860) || *(_BYTE *)(v17 + 62864)))
      goto LABEL_4;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5606, (uint64_t)"baid && (baid->linearSystem().updatedAfterSolve() || baid->linearSystem().revertedAfterSolve() || baid->linearSystem().solveAttemptedAndFailed())", 145, (uint64_t)"Must be running in LPS mode and must have solved before.", 56, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_4:
  v18 = (uint64_t *)(v17 + 62768);
  v19 = *((_QWORD *)v482 + 1551);
  v20 = *((_QWORD *)v482 + 1550);
  v21 = v19 - v20;
  v473 = (v19 - v20) >> 3;
  v22 = *(_DWORD *)(*(_QWORD *)(v17 + 62768) + 1744);
  v479[1] = *v479;
  v475[1] = *v475;
  v23 = *(char **)v472;
  for (i = *(char **)(v472 + 8); i != v23; i -= 16)
  {
    v25 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  *(_QWORD *)(v472 + 8) = v23;
  v28 = (_BYTE *)*v479;
  if (v473 <= (uint64_t)(v479[2] - *v479) >> 3)
    goto LABEL_29;
  if (v21 < 0)
    goto LABEL_548;
  v29 = (_BYTE *)v479[1];
  v30 = (char *)operator new(v19 - v20);
  v31 = v29 - v28;
  v32 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
  v33 = v32;
  if (v29 != v28)
  {
    if ((unint64_t)(v31 - 8) < 0x58)
    {
      v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_26:
        v42 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v33 - 1) = v42;
        v33 -= 8;
      }
      while (v29 != v28);
      goto LABEL_27;
    }
    v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
    if (v29 - v30 - (v31 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_26;
    v34 = v31 >> 3;
    v35 = ((unint64_t)(v31 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v29[-v36];
    v33 = &v32[-v36];
    v38 = &v30[8 * v34 - 16];
    v39 = (__int128 *)(v29 - 16);
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *v39;
      *((_OWORD *)v38 - 1) = *(v39 - 1);
      *(_OWORD *)v38 = v41;
      v38 -= 32;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    v29 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_26;
  }
LABEL_27:
  *v479 = v33;
  v479[1] = v32;
  v479[2] = &v30[8 * v473];
  if (v28)
    operator delete(v28);
LABEL_29:
  v43 = (_BYTE *)*v475;
  if (v473 <= (uint64_t)(v475[2] - *v475) >> 3)
    goto LABEL_41;
  if (v21 < 0)
LABEL_548:
    sub_20E867F44();
  v44 = (_BYTE *)v475[1];
  v45 = (char *)operator new(v19 - v20);
  v46 = v44 - v43;
  v47 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFF8];
  v48 = v47;
  if (v44 == v43)
    goto LABEL_39;
  if ((unint64_t)(v46 - 8) < 0x58)
  {
    v48 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_38:
      v57 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      *((_QWORD *)v48 - 1) = v57;
      v48 -= 8;
    }
    while (v44 != v43);
    goto LABEL_39;
  }
  v48 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFF8];
  if (v44 - v45 - (v46 & 0xFFFFFFFFFFFFFFF8) < 0x20)
    goto LABEL_38;
  v49 = v46 >> 3;
  v50 = ((unint64_t)(v46 - 8) >> 3) + 1;
  v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
  v52 = &v44[-v51];
  v48 = &v47[-v51];
  v53 = &v45[8 * v49 - 16];
  v54 = (__int128 *)(v44 - 16);
  v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v56 = *v54;
    *((_OWORD *)v53 - 1) = *(v54 - 1);
    *(_OWORD *)v53 = v56;
    v53 -= 32;
    v54 -= 2;
    v55 -= 4;
  }
  while (v55);
  v44 = v52;
  if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_38;
LABEL_39:
  *v475 = v48;
  v475[1] = v47;
  v475[2] = &v45[8 * v473];
  if (v43)
    operator delete(v43);
LABEL_41:
  if (v22 <= 1)
    v58 = 1;
  else
    v58 = v22;
  sub_20EA647CC(v472, v473 / v58);
  v480 = v482 + 322;
  sub_20F172AE4((uint64_t)(v482 + 322), v473, flt_2103B89FC);
  *(_QWORD *)object = 0;
  *(_DWORD *)&object[8] = 0;
  object[12] = 1;
  v59 = *((_QWORD *)v482 + 1029);
  v60 = (*((_QWORD *)v482 + 1030) - v59) >> 4;
  if (v473 <= v60)
  {
    if (v473 < v60)
      *((_QWORD *)v482 + 1030) = v59 + 16 * v473;
  }
  else
  {
    sub_20FB436E4((void **)v482 + 1029, v473 - v60, object);
  }
  v477 = (void **)(v482 + 1032);
  v482[1033] = v482[1032];
  *(_QWORD *)object = 0;
  *(_DWORD *)&object[8] = 0;
  object[12] = 1;
  if (v19 != v20)
    sub_20FB436E4(v477, v473, object);
  v61 = *((_QWORD *)v482 + 291);
  v62 = (*((_QWORD *)v482 + 292) - v61) >> 5;
  if (v473 <= v62)
  {
    if (v473 < v62)
      *((_QWORD *)v482 + 292) = v61 + 32 * v473;
  }
  else
  {
    sub_20F156988((char **)v482 + 291, v473 - v62);
  }
  v476 = v482 + 291;
  v482[298] = v482[297];
  *v497 = 0;
  *v498 = 0;
  v478 = **((_DWORD **)v482 + 310);
  v511 = 0;
  v512 = 0;
  v513 = 0;
  v520 = 0u;
  v521 = 0u;
  v522 = 733226608;
  kdebug_trace();
  v63 = (_QWORD *)(v17 + 62344);
  v65 = *(_QWORD *)(v17 + 62536);
  v64 = (_BYTE *)v63[25];
  v481 = v63;
  v66 = (_BYTE *)v63[26];
  v67 = v66 - v64;
  v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - v64) >> 2);
  if (v66 == v64)
  {
    v69 = 0;
    v70 = 0;
    if (!(_DWORD)v65)
      goto LABEL_65;
  }
  else
  {
    if (v68 > 0x1555555555555555)
      sub_20E867F44();
    v69 = (char *)operator new(v66 - v64);
    memcpy(v69, v64, 12 * ((v67 - 12) / 0xCuLL) + 12);
    v70 = &v69[12 * ((v67 - 12) / 0xCuLL) + 12];
    if (!(_DWORD)v65)
    {
LABEL_65:
      v492 = -1;
      if (!v69)
        goto LABEL_73;
      goto LABEL_72;
    }
  }
  v71 = (v478 - HIDWORD(v65));
  if (0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 2) <= v71)
    goto LABEL_65;
  v72 = &v69[12 * v71];
  v492 = -1;
  if (v72 != v70 && v72[8])
  {
    if (v66 == v64)
    {
      v73 = 0;
      v75 = 0;
    }
    else
    {
      if (v68 > 0x1555555555555555)
        sub_20E867F44();
      v73 = (char *)operator new(v66 - v64);
      v74 = 12 * ((v67 - 12) / 0xCuLL) + 12;
      memcpy(v73, v64, v74);
      v75 = &v73[v74];
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v75 - v73) >> 2) <= v71 || (v76 = &v73[12 * v71], v76 == v75) || !v76[8])
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Key does not exist in the map.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
    v492 = *((_DWORD *)v76 + 1);
    operator delete(v73);
  }
LABEL_72:
  operator delete(v69);
LABEL_73:
  v493 = v14 * v14;
  v77 = (unsigned __int8 *)(*v18 + 35376);
  v499 = *v18;
  v78 = (unsigned int *)(*v18 + 30920);
  v79 = *v77;
  v80 = *(_QWORD *)&v11;
  if (!*v77
    || !*(_BYTE *)(*v18 + 31281)
    || !*((_BYTE *)v18 + 142)
    || *((_BYTE *)v18 + 141)
    || *(double *)(*v18 + 35384) != v495
    || *(double *)(*v18 + 35392) != v11
    || *(double *)(*v18 + 35400) != v12
    || *(_DWORD *)(*v18 + 35424) != v494
    || *(double *)(*v18 + 35408) != v493
    || *(double *)(*v18 + 35416) != 1.79769313e308
    || *(double *)(*v18 + 35432) != v487
    || *(double *)(*v18 + 35440) != v11
    || *(double *)(*v18 + 35448) != v12
    || *(_DWORD *)(*v18 + 35472) != v486
    || *(double *)(*v18 + 35456) != 0.0
    || *(double *)(*v18 + 35464) != 1.79769313e308
    || !sub_20FBC98B8(v499 + 35480, (uint64_t)&v514)
    || *((_DWORD *)v77 + 38) != v492)
  {
    if (v77[156])
      ++*((_DWORD *)v18 + 48);
    if (v79)
    {
      if (*((_BYTE *)v18 + 142) && !*((_BYTE *)v18 + 141))
      {
        if (*((_BYTE *)v78 + 361))
          v81 = v18 + 26;
        else
          v81 = (_DWORD *)v18 + 51;
      }
      else
      {
        v81 = v18 + 25;
      }
    }
    else
    {
      v81 = (_DWORD *)v18 + 49;
    }
    ++*v81;
    ++*(_DWORD *)(v499 + 363816);
    *v497 = 0;
    *v498 = 0;
    v82 = *v78;
    if ((_DWORD)v82)
    {
      v83 = (char *)operator new(24 * v82);
      bzero(v83, 24 * ((24 * v82 - 24) / 0x18uLL) + 24);
      v505 = (double *)v83;
      v511 = v83;
      v512 = (unsigned int *)&v83[24 * ((24 * v82 - 24) / 0x18uLL) + 24];
      v513 = &v83[24 * v82];
    }
    else
    {
      v505 = 0;
    }
    *(_QWORD *)object = 0;
    v564 = 0;
    v567 = 0;
    v568 = 0;
    v569 = 0;
    v570 = 0;
    sub_20FBCAE10((uint64_t)object, (_DWORD *)(v499 + 64), 1);
    v86 = (int *)(v499 + 578688);
    v570 = 0;
    v87 = *(unsigned int *)(v499 + 578696);
    v558 = 0;
    if ((_DWORD)v87)
    {
      LODWORD(v88) = 0;
      v89 = 4 * v87;
      do
      {
        v90 = *v86++;
        v557[v88] = v90;
        v88 = ++v558;
        v89 -= 4;
      }
      while (v89);
      v91 = vaddq_f64(*(float64x2_t *)(v499 + 43824), (float64x2_t)0);
      *(float64x2_t *)(v499 + 43808) = vaddq_f64(*(float64x2_t *)(v499 + 43808), (float64x2_t)0);
      *(float64x2_t *)(v499 + 43824) = v91;
      if ((_DWORD)v88)
      {
        v496 = 0;
        v92 = 0;
        v474 = v88;
        v93 = 0.0;
        v94 = 0.0;
        v95 = 0.0;
        do
        {
          v96 = v557[v92];
          v501 = v92;
          if (v96)
          {
            v97 = 0;
            v483 = 339548 * v92 + 581056;
            v484 = v557[v92];
            v485 = v499 + 578700 + 339548 * v92 + 4;
            do
            {
              v98 = 169772 * v97;
              v500 = v97;
              if (v97)
                v99 = 1;
              else
                v99 = v96;
              v502 = v99;
              v552 = 0;
              v554 = 0;
              v556 = 0;
              v100 = (_DWORD *)(v485 + v98);
              v550 = 0;
              *(_DWORD *)&v544[12] = 0;
              v101 = *(_QWORD *)(v485 + 169772 * v97);
              *(_DWORD *)&v544[8] = *(_DWORD *)(v485 + v98 + 8);
              *(_QWORD *)v544 = v101;
              if (v544 != (_BYTE *)(v485 + v98))
              {
                v102 = v100[3];
                if (v102)
                {
                  v103 = 0;
                  LOBYTE(v104) = 0;
                  v105 = 0;
                  do
                  {
                    v106 = v103 >> 5;
                    v107 = 1 << v103;
                    v108 = ((*(_DWORD *)((char *)v100 + ((v105 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 16) >> v104) & 1) << v103++;
                    *(_DWORD *)&v544[4 * v106 + 16] = v108 | *(_DWORD *)&v544[4 * v106 + 16] & ~v107;
                    v104 = v105 + 1;
                    v105 = (v105 + 1);
                  }
                  while (v102 != v104);
                  *(_DWORD *)&v544[12] = v103;
                }
                v109 = v100[511];
                v550 = 0;
                if ((_DWORD)v109)
                {
                  v110 = 0;
                  v111 = (char *)(v100 + 436);
                  do
                  {
                    v112 = *v111++;
                    v549[v110] = v112;
                    v110 = ++v550;
                    --v109;
                  }
                  while (v109);
                }
                v113 = v100[587];
                v552 = 0;
                if ((_DWORD)v113)
                {
                  v114 = 0;
                  v115 = (char *)(v100 + 512);
                  do
                  {
                    v116 = *v115++;
                    v551[v114] = v116;
                    v114 = ++v552;
                    --v113;
                  }
                  while (v113);
                }
                v117 = v100[739];
                if ((_DWORD)v117)
                  memcpy(v553, (const void *)(v499 + v483 + v98), 2 * v117);
                v554 = v117;
                v118 = v100[1040];
                v556 = 0;
                if ((_DWORD)v118)
                {
                  v119 = 0;
                  v120 = v100 + 740;
                  v121 = 4 * v118;
                  do
                  {
                    v122 = *v120++;
                    v555[v119] = v122;
                    v119 = ++v556;
                    v121 -= 4;
                  }
                  while (v121);
                }
              }
              v123 = vaddq_f64(*(float64x2_t *)(v499 + 43824), (float64x2_t)0);
              *(float64x2_t *)(v499 + 43808) = vaddq_f64(*(float64x2_t *)(v499 + 43808), (float64x2_t)0);
              *(float64x2_t *)(v499 + 43824) = v123;
              v503 = *(unsigned int *)v544;
              if (*(_DWORD *)v544)
              {
                v124 = 0;
                v491 = v502 > 1;
                v125 = v485 + 169772 * v500;
                v490 = v125 + 4164;
                v488 = v125 + 114568;
                v489 = v125 + 2352;
                do
                {
                  while (1)
                  {
                    v126 = (unsigned __int16)v553[v124];
                    v127 = v126 >> 1;
                    if (((*(_DWORD *)&v544[4 * ((v126 >> 1) >> 5) + 16] >> (v126 >> 1)) & 1) != 0)
                      break;
                    if (++v124 == v503)
                      goto LABEL_95;
                  }
                  v128 = v555[v124];
                  v129 = v551[v124];
                  v130 = v549[v124];
                  v504 = v124 + 1;
                  v131 = (unsigned __int16)v553[v124 + 1] - (_DWORD)v126;
                  v132 = v131 >> 1;
                  if (v131 >= 2)
                  {
                    v133 = *(unsigned __int16 *)(v489 + 2 * v124);
                    v134 = (const void *)(v488 + 4 * v133);
                    memcpy(&v542, (const void *)(v490 + 8 * v133), 8 * ((_DWORD)v132 << v491));
                    memcpy(v541, v134, 4 * ((_DWORD)v132 << v491));
                  }
                  if (v502 <= 1)
                    v135 = 0;
                  else
                    v135 = &v543[8 * v132 - 8];
                  if (v502 <= 1)
                    v136 = 0;
                  else
                    v136 = (char *)v541 + 4 * v132;
                  v137 = vaddq_f64(*(float64x2_t *)(v499 + 43824), (float64x2_t)0);
                  *(float64x2_t *)(v499 + 43808) = vaddq_f64(*(float64x2_t *)(v499 + 43808), (float64x2_t)0);
                  *(float64x2_t *)(v499 + 43824) = v137;
                  v138 = &v566[6 * (v500 + *(_DWORD *)&object[4 * v501 + 8] + v565 * v130)];
                  v140 = *(float64x2_t *)v138;
                  v139 = *((float64x2_t *)v138 + 1);
                  v142 = *((float64x2_t *)v138 + 2);
                  v141 = *((int64x2_t *)v138 + 3);
                  *(_QWORD *)&v140.f64[1] = vdupq_laneq_s64(*(int64x2_t *)v138, 1).u64[0];
                  v144 = *((float64x2_t *)v138 + 4);
                  v143 = *((int64x2_t *)v138 + 5);
                  v145 = v499 + 21320 + 32 * v128;
                  v84.f64[0] = *(float64_t *)(v145 + 16);
                  v85.f64[0] = *(float64_t *)(v145 + 24);
                  *(_QWORD *)&v146 = *(_OWORD *)&vmlaq_f64(vnegq_f64((float64x2_t)vdupq_laneq_s64(v143, 1)), v84, v85);
                  v147 = vmlaq_n_f64(vnegq_f64((float64x2_t)vzip2q_s64((int64x2_t)v139, v141)), *(float64x2_t *)v145, v85.f64[0]);
                  v539 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v140, v147.f64[0]), v142, v147, 1), v144, v146);
                  v540 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v139, v147).f64[0], v147.f64[1], *(double *)v141.i64), v146, *(double *)v143.i64);
                  LODWORD(v537) = 0;
                  BYTE4(v537) = 0;
                  *((_QWORD *)&v537 + 1) = 0;
                  LODWORD(v538) = 0;
                  BYTE4(v538) = 1;
                  *(double *)v532 = v495;
                  v532[1] = v80;
                  *(double *)&v532[2] = v12;
                  *(double *)&v532[3] = v493;
                  v532[4] = 0x7FEFFFFFFFFFFFFFLL;
                  v533 = v494;
                  v534 = 0;
                  v535 = v518;
                  v536 = v519;
                  v531[1] = *(_OWORD *)v515;
                  v531[2] = *(_OWORD *)&v515[16];
                  v531[0] = v514;
                  v148 = sub_20FBC9924((uint64_t)object, v501, v502, v129, v132, (uint64_t)&v544[16], v127, (uint64_t)&v542, *(double *)&v514, *(double *)v515, *(float64x2_t *)&v515[16], v147.f64[1], v142, (uint64_t)v135, (uint64_t)v541, (uint64_t)v136, &v539, (uint64_t)v532, (uint64_t)v531,
                           (int *)&v537);
                  LODWORD(v529) = 0;
                  BYTE4(v529) = 0;
                  *((_QWORD *)&v529 + 1) = 0;
                  LODWORD(v530) = 0;
                  BYTE4(v530) = 1;
                  if ((v148 & 1) != 0)
                  {
                    v529 = v537;
                    v530 = v538;
                  }
                  else
                  {
                    v154 = (unint64_t)(unsigned __int16)v553[v124] >> 1;
                    *(double *)v523 = v487;
                    v523[1] = v80;
                    *(double *)&v523[2] = v12;
                    v524 = xmmword_2102DCC90;
                    v525 = v486;
                    v526 = 0;
                    v527 = v516;
                    v528 = v517;
                    sub_20FBCA4B0((uint64_t *)object, v501, v502, v129, v132, (uint64_t)&v544[16], v154, (uint64_t)&v542, 0.0, v149, v150, v151, v152, v153, (uint64_t)v135, (uint64_t)v541, (uint64_t)v136, &v539, (uint64_t)v523,
                      1u,
                      (int *)&v529);
                  }
                  *v497 += v537;
                  *v498 += BYTE4(v537);
                  v155 = *((double *)&v537 + 1);
                  if ((v148 & 1) != 0)
                  {
                    if (*((double *)&v537 + 1) >= -1.0)
                      v156 = *((double *)&v537 + 1);
                    else
                      v156 = -1.0;
                    v157 = fmin(v156, 1.0);
                    v93 = v93 + acos(v157) * 57.2957795;
                    v158 = v157 * v157;
                    v80 = *(_QWORD *)&v11;
                    v159 = 1.0 - v158;
                    v94 = v94 + sqrt(v159);
                    v95 = v95 + v159;
                    ++v496;
                  }
                  v160 = NAN;
                  if (BYTE4(v538))
                    v161 = v155;
                  else
                    v161 = NAN;
                  v162 = *((double *)&v529 + 1);
                  _ZF = BYTE4(v530) == 0;
                  ++v124;
                  *(_DWORD *)v505 = v128;
                  if (!_ZF)
                    v160 = v162;
                  *((_BYTE *)v505 + 4) = v148 & 1;
                  *((_BYTE *)v505 + 5) = (v148 & 2) != 0;
                  *((_BYTE *)v505 + 6) = v492 == v130;
                  v505[1] = v161;
                  v505[2] = v160;
                  v505 += 3;
                }
                while (v504 != v503);
              }
LABEL_95:
              v97 = v500 + 1;
              v96 = v484;
            }
            while (v500 + 1 != v484);
          }
          v92 = v501 + 1;
        }
        while (v501 + 1 != v474);
        goto LABEL_145;
      }
      v496 = 0;
    }
    else
    {
      v496 = 0;
      v163 = vaddq_f64(*(float64x2_t *)(v499 + 43824), (float64x2_t)0);
      *(float64x2_t *)(v499 + 43808) = vaddq_f64(*(float64x2_t *)(v499 + 43808), (float64x2_t)0);
      *(float64x2_t *)(v499 + 43824) = v163;
    }
    v93 = 0.0;
    v94 = 0.0;
    v95 = 0.0;
LABEL_145:
    v164 = vaddq_f64(*(float64x2_t *)(v499 + 44016), (float64x2_t)0);
    *(float64x2_t *)(v499 + 44000) = vaddq_f64(*(float64x2_t *)(v499 + 44000), (float64x2_t)0);
    *(float64x2_t *)(v499 + 44016) = v164;
    goto LABEL_146;
  }
  sub_20EDC8014(&v511, (char *)(v499 + 35536), (char *)(v499 + 35536 + 24 * *((unsigned int *)v77 + 1840)), *((unsigned int *)v77 + 1840));
  *v497 = *((_DWORD *)v77 + 1854);
  *v498 = *((_DWORD *)v77 + 1855);
  v93 = *((double *)v77 + 928);
  v94 = *((double *)v77 + 929);
  v95 = *((double *)v77 + 930);
  v496 = *((_DWORD *)v77 + 1853);
  ++*((_DWORD *)v18 + 47);
  v80 = *(_QWORD *)&v11;
LABEL_146:
  kdebug_trace();
  v165 = v482 + 1029;
  v166 = v95;
  v167 = (unsigned int *)v511;
  v168 = v512;
  if (v511 != v512)
  {
    __dst = v512;
    while (1)
    {
      v170 = *(_DWORD *)(*v481 + 1000 * *v167);
      v171 = (char *)*((_QWORD *)v482 + 1550);
      v172 = (uint64_t *)*((_QWORD *)v482 + 1551);
      v173 = v171;
      if (v171 != (char *)v172)
      {
        while (v170 != *(_DWORD *)(*(_QWORD *)v173 + 32))
        {
          v173 += 8;
          if (v173 == (char *)v172)
            goto LABEL_151;
        }
      }
      if (v173 == (char *)v172)
        goto LABEL_151;
      v174 = v173 - v171;
      v175 = v174 >> 3;
      v176 = *(_QWORD *)v173;
      *(_DWORD *)(*v480 + (v174 >> 1)) = v170;
      if (*(_BYTE *)(v176 + 488))
        v177 = v176 + 40;
      else
        v177 = 0;
      v178 = *(_QWORD *)(v177 + 24);
      v179 = *v476 + 4 * v174;
      *(_OWORD *)v179 = *(_OWORD *)(v177 + 8);
      *(_QWORD *)(v179 + 16) = v178;
      *(_QWORD *)(v179 + 24) = 0x3FF0000000000000;
      v180 = *((_QWORD *)v167 + 1);
      v181 = *v165 + 2 * v174;
      *(_QWORD *)v181 = v180;
      *(_BYTE *)(v181 + 12) = (v180 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (*((_BYTE *)v167 + 4))
      {
        v182 = v479;
        v184 = (char *)v479[1];
        v183 = v479[2];
        if ((unint64_t)v184 < v183)
        {
          *(_QWORD *)v184 = v176;
          v184 += 8;
          v185 = (uint64_t)v184;
          goto LABEL_198;
        }
        v189 = (char *)*v479;
        v190 = (uint64_t)&v184[-*v479];
        v191 = v190 >> 3;
        v192 = (v190 >> 3) + 1;
        if (v192 >> 61)
          goto LABEL_543;
        v193 = v183 - (_QWORD)v189;
        if (v193 >> 2 > v192)
          v192 = v193 >> 2;
        if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8)
          v194 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v194 = v192;
        v508 = v175;
        if (v194)
        {
          if (v194 >> 61)
            goto LABEL_544;
          v195 = v194;
          v196 = operator new(8 * v194);
          v194 = v195;
          v197 = &v196[8 * v191];
          *v197 = v176;
          v185 = (uint64_t)(v197 + 1);
          v198 = (char *)(v184 - v189);
          if (v184 != v189)
          {
LABEL_174:
            v199 = (unint64_t)(v198 - 8);
            if (v199 < 0x58)
            {
              v168 = __dst;
              goto LABEL_194;
            }
            v212 = v184 - &v196[v190];
            v168 = __dst;
            if (v212 < 0x20)
              goto LABEL_564;
            v213 = (v199 >> 3) + 1;
            v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
            v215 = &v184[-v214];
            v197 = (_QWORD *)((char *)v197 - v214);
            v216 = &v196[8 * v191 - 16];
            v217 = v184 - 16;
            v218 = v213 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v219 = *(_OWORD *)v217;
              *(v216 - 1) = *((_OWORD *)v217 - 1);
              *v216 = v219;
              v216 -= 2;
              v217 -= 32;
              v218 -= 4;
            }
            while (v218);
            v184 = v215;
            if (v213 != (v213 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_564:
              do
              {
LABEL_194:
                v220 = *((_QWORD *)v184 - 1);
                v184 -= 8;
                *--v197 = v220;
              }
              while (v184 != v189);
            }
            v211 = v479;
            v184 = (char *)*v479;
            *v479 = v197;
            v479[1] = v185;
            v479[2] = &v196[8 * v194];
            if (v184)
            {
LABEL_196:
              operator delete(v184);
              v182 = v479;
              goto LABEL_197;
            }
LABEL_189:
            v182 = v211;
LABEL_197:
            v175 = v508;
LABEL_198:
            v182[1] = v185;
            if (*(_BYTE *)(v176 + 488))
              v221 = v176 + 40;
            else
              v221 = 0;
            *(_WORD *)(v221 + 57) = 257;
            if (*(_BYTE *)(v176 + 488))
              v222 = v176 + 40;
            else
              v222 = 0;
            *(_BYTE *)(v222 + 56) = 0;
            v165 = v482 + 1029;
            v223 = (uint64_t *)(*((_QWORD *)v482 + 1029) + 16 * v175);
            v224 = (char *)*v477 + 16 * v175;
            v225 = *v223;
            *(_QWORD *)((char *)v224 + 5) = *(uint64_t *)((char *)v223 + 5);
            *v224 = v225;
            if (!*((_BYTE *)v167 + 5))
              goto LABEL_151;
            goto LABEL_224;
          }
        }
        else
        {
          v196 = 0;
          v197 = (_QWORD *)(8 * v191);
          *(_QWORD *)(8 * v191) = v176;
          v185 = 8 * v191 + 8;
          v198 = (char *)(v184 - v189);
          if (v184 != v189)
            goto LABEL_174;
        }
        v211 = v479;
        v168 = __dst;
        *v479 = v197;
        v479[1] = v185;
        v479[2] = &v196[8 * v194];
        if (v184)
          goto LABEL_196;
        goto LABEL_189;
      }
      v186 = v475;
      v184 = (char *)v475[1];
      v187 = v475[2];
      if ((unint64_t)v184 < v187)
      {
        *(_QWORD *)v184 = v176;
        v184 += 8;
        v188 = (uint64_t)v184;
        goto LABEL_217;
      }
      v200 = (char *)*v475;
      v201 = (uint64_t)&v184[-*v475];
      v202 = v201 >> 3;
      v203 = (v201 >> 3) + 1;
      if (v203 >> 61)
LABEL_543:
        sub_20E867F44();
      v204 = v187 - (_QWORD)v200;
      if (v204 >> 2 > v203)
        v203 = v204 >> 2;
      v205 = (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v203;
      v509 = v175;
      if (v205)
      {
        if (v205 >> 61)
LABEL_544:
          sub_20E877A38();
        v206 = v205;
        v207 = operator new(8 * v205);
        v205 = v206;
        v208 = &v207[8 * v202];
        *v208 = v176;
        v188 = (uint64_t)(v208 + 1);
        v209 = (char *)(v184 - v200);
        if (v184 == v200)
        {
LABEL_207:
          v226 = v475;
          v168 = __dst;
          *v475 = v208;
          v475[1] = v188;
          v475[2] = &v207[8 * v205];
          if (v184)
            goto LABEL_215;
          goto LABEL_208;
        }
      }
      else
      {
        v207 = 0;
        v208 = (_QWORD *)(8 * v202);
        *(_QWORD *)(8 * v202) = v176;
        v188 = 8 * v202 + 8;
        v209 = (char *)(v184 - v200);
        if (v184 == v200)
          goto LABEL_207;
      }
      v210 = (unint64_t)(v209 - 8);
      if (v210 < 0x58)
        break;
      v227 = v184 - &v207[v201];
      v168 = __dst;
      if (v227 < 0x20)
        goto LABEL_213;
      v228 = (v210 >> 3) + 1;
      v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
      v230 = &v184[-v229];
      v208 = (_QWORD *)((char *)v208 - v229);
      v231 = &v207[8 * v202 - 16];
      v232 = v184 - 16;
      v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v234 = *(_OWORD *)v232;
        *(v231 - 1) = *((_OWORD *)v232 - 1);
        *v231 = v234;
        v231 -= 2;
        v232 -= 32;
        v233 -= 4;
      }
      while (v233);
      v184 = v230;
      if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_213;
LABEL_214:
      v226 = v475;
      v184 = (char *)*v475;
      *v475 = v208;
      v475[1] = v188;
      v475[2] = &v207[8 * v205];
      if (v184)
      {
LABEL_215:
        operator delete(v184);
        v186 = v475;
        goto LABEL_216;
      }
LABEL_208:
      v186 = v226;
LABEL_216:
      v175 = v509;
LABEL_217:
      v186[1] = v188;
      if (*(_BYTE *)(v176 + 488))
        v236 = v176 + 40;
      else
        v236 = 0;
      *(_WORD *)(v236 + 57) = 256;
      if (*(_BYTE *)(v176 + 488))
        v237 = v176 + 40;
      else
        v237 = 0;
      *(_BYTE *)(v237 + 56) = 1;
      v238 = *((_QWORD *)v167 + 2);
      v239 = (uint64_t)*v477 + 16 * v175;
      *(_QWORD *)v239 = v238;
      *(_BYTE *)(v239 + 12) = (v238 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v165 = v482 + 1029;
      if (!*((_BYTE *)v167 + 5))
        goto LABEL_151;
LABEL_224:
      if (!*((_BYTE *)v167 + 6))
        goto LABEL_151;
      v240 = 0;
      v241 = *(uint64_t **)(*((_QWORD *)v482 + 994) + 16);
      v242 = *(_QWORD *)(v176 + 32);
      _X10 = *v241;
      __asm { PRFM            #4, [X10] }
      v248 = (0x9DDFEA08EB382D69 * v242 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                  * v242
                                                                                  + 0x376ADF16980614E5) >> 32);
      v249 = v241[3];
      v250 = (v248 >> 7) ^ 0x13701D;
      v251 = 0x101010101010101 * (v248 & 0x7F);
      while (1)
      {
        v252 = v250 & v249;
        v253 = *(_QWORD *)(_X10 + v252);
        v254 = ((v253 ^ v251) - 0x101010101010101) & ~(v253 ^ v251) & 0x8080808080808080;
        if (v254)
          break;
LABEL_232:
        if ((v253 & (~v253 << 6) & 0x8080808080808080) != 0)
          goto LABEL_235;
        v240 += 8;
        v250 = v240 + v252;
      }
      while (1)
      {
        v184 = (char *)(v241[1] + 32 * ((v252 + (__clz(__rbit64(v254)) >> 3)) & v249));
        _ZF = *(_QWORD *)v184 == *(_QWORD *)(v176 + 24) && *((_DWORD *)v184 + 2) == (_DWORD)v242;
        if (_ZF)
          break;
        v254 &= v254 - 1;
        if (!v254)
          goto LABEL_232;
      }
      if (!_X10)
      {
LABEL_235:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5767, (uint64_t)"iter != viodatabase_->track_list()->end()", 41, (uint64_t)"Cannot find the track.", 22, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      if (!*((_BYTE *)v482 + 1985))
      {
        v286 = *((_QWORD *)v184 + 2);
        v287 = *((_QWORD *)v184 + 3);
        *(_QWORD *)object = v286;
        *(_QWORD *)&object[8] = v287;
        if (v287)
        {
          v288 = (unint64_t *)(v287 + 8);
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 1, v288));
        }
        v290 = *(_QWORD **)(v472 + 8);
        if ((unint64_t)v290 >= *(_QWORD *)(v472 + 16))
        {
          v291 = sub_20EAFDCA4((char **)v472, (uint64_t)object);
          v292 = *(std::__shared_weak_count **)&object[8];
          *(_QWORD *)(v472 + 8) = v291;
          if (v292)
          {
            v293 = (unint64_t *)&v292->__shared_owners_;
            do
              v294 = __ldaxr(v293);
            while (__stlxr(v294 - 1, v293));
            if (!v294)
            {
              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
              std::__shared_weak_count::__release_weak(v292);
            }
          }
        }
        else
        {
          *v290 = v286;
          v290[1] = v287;
          *(_QWORD *)(v472 + 8) = v290 + 2;
        }
        goto LABEL_151;
      }
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_QWORD *)object = &object[8];
      v256 = *(uint64_t **)(v176 + 496);
      v257 = *(uint64_t **)(v176 + 504);
      if (v256 == v257)
        goto LABEL_150;
      v258 = 0;
      do
      {
        v259 = &object[8];
        v260 = &object[8];
        if (*(_QWORD *)&object[8])
        {
          v261 = *((_DWORD *)v256 + 4);
          v262 = *v256;
          v263 = *(_QWORD *)&object[8];
          v264 = *((_DWORD *)v256 + 2);
          while (1)
          {
            while (1)
            {
              v260 = (_BYTE *)v263;
              v265 = *(_DWORD *)(v263 + 48);
              if (v261 == v265)
                break;
              if (v261 >= v265)
              {
                if (v265 >= v261)
                  goto LABEL_243;
                goto LABEL_257;
              }
LABEL_246:
              v263 = *(_QWORD *)v260;
              v259 = v260;
              if (!*(_QWORD *)v260)
                goto LABEL_259;
            }
            v266 = *((_QWORD *)v260 + 4);
            if (v262 < v266)
              goto LABEL_246;
            if (v262 != v266)
            {
              if (v266 >= v262)
                goto LABEL_243;
              goto LABEL_257;
            }
            v267 = *((_DWORD *)v260 + 10);
            if (v264 < v267)
              goto LABEL_246;
            if (v267 >= v264)
              goto LABEL_243;
LABEL_257:
            v263 = *((_QWORD *)v260 + 1);
            if (!v263)
            {
              v259 = v260 + 8;
              break;
            }
          }
        }
LABEL_259:
        v268 = operator new(0x38uLL);
        v269 = *(_OWORD *)v256;
        v268[6] = v256[2];
        *((_OWORD *)v268 + 2) = v269;
        *v268 = 0;
        v268[1] = 0;
        v268[2] = v260;
        *v259 = v268;
        if (**(_QWORD **)object)
        {
          *(_QWORD *)object = **(_QWORD **)object;
          v268 = (_QWORD *)*v259;
        }
        v270 = *(_BYTE **)&object[8];
        _ZF = v268 == *(_QWORD **)&object[8];
        *((_BYTE *)v268 + 24) = v268 == *(_QWORD **)&object[8];
        if (!_ZF)
        {
          do
          {
            v271 = v268[2];
            if (*(_BYTE *)(v271 + 24))
              break;
            v272 = *(_BYTE **)(v271 + 16);
            v273 = *(_QWORD *)v272;
            if (*(_QWORD *)v272 == v271)
            {
              v276 = *((_QWORD *)v272 + 1);
              if (!v276 || (v277 = *(unsigned __int8 *)(v276 + 24), v274 = (_BYTE *)(v276 + 24), v277))
              {
                if (*(_QWORD **)v271 == v268)
                {
                  *(_BYTE *)(v271 + 24) = 1;
                  v272[24] = 0;
                  v280 = *(_QWORD *)(v271 + 8);
                  *(_QWORD *)v272 = v280;
                  if (v280)
                    goto LABEL_276;
                }
                else
                {
                  v278 = *(uint64_t **)(v271 + 8);
                  v279 = *v278;
                  *(_QWORD *)(v271 + 8) = *v278;
                  if (v279)
                  {
                    *(_QWORD *)(v279 + 16) = v271;
                    v272 = *(_BYTE **)(v271 + 16);
                  }
                  v278[2] = (uint64_t)v272;
                  *(_QWORD *)(*(_QWORD *)(v271 + 16) + 8 * (**(_QWORD **)(v271 + 16) != v271)) = v278;
                  *v278 = v271;
                  *(_QWORD *)(v271 + 16) = v278;
                  v272 = (_BYTE *)v278[2];
                  v271 = *(_QWORD *)v272;
                  *((_BYTE *)v278 + 24) = 1;
                  v272[24] = 0;
                  v280 = *(_QWORD *)(v271 + 8);
                  *(_QWORD *)v272 = v280;
                  if (v280)
LABEL_276:
                    *(_QWORD *)(v280 + 16) = v272;
                }
                *(_QWORD *)(v271 + 16) = *((_QWORD *)v272 + 2);
                *(_QWORD *)(*((_QWORD *)v272 + 2) + 8 * (**((_QWORD **)v272 + 2) != (_QWORD)v272)) = v271;
                *(_QWORD *)(v271 + 8) = v272;
LABEL_241:
                *((_QWORD *)v272 + 2) = v271;
                break;
              }
            }
            else if (!v273 || (v275 = *(unsigned __int8 *)(v273 + 24), v274 = (_BYTE *)(v273 + 24), v275))
            {
              if (*(_QWORD **)v271 == v268)
              {
                v282 = v268[1];
                *(_QWORD *)v271 = v282;
                if (v282)
                {
                  *(_QWORD *)(v282 + 16) = v271;
                  v272 = *(_BYTE **)(v271 + 16);
                }
                v268[2] = v272;
                *(_QWORD *)(*(_QWORD *)(v271 + 16) + 8 * (**(_QWORD **)(v271 + 16) != v271)) = v268;
                v268[1] = v271;
                *(_QWORD *)(v271 + 16) = v268;
                v272 = (_BYTE *)v268[2];
                *((_BYTE *)v268 + 24) = 1;
                v272[24] = 0;
                v271 = *((_QWORD *)v272 + 1);
                v281 = *(_QWORD **)v271;
                *((_QWORD *)v272 + 1) = *(_QWORD *)v271;
                if (!v281)
                  goto LABEL_240;
              }
              else
              {
                *(_BYTE *)(v271 + 24) = 1;
                v272[24] = 0;
                v271 = *((_QWORD *)v272 + 1);
                v281 = *(_QWORD **)v271;
                *((_QWORD *)v272 + 1) = *(_QWORD *)v271;
                if (!v281)
                  goto LABEL_240;
              }
              v281[2] = v272;
LABEL_240:
              *(_QWORD *)(v271 + 16) = *((_QWORD *)v272 + 2);
              *(_QWORD *)(*((_QWORD *)v272 + 2) + 8 * (**((_QWORD **)v272 + 2) != (_QWORD)v272)) = v271;
              *(_QWORD *)v271 = v272;
              goto LABEL_241;
            }
            *(_BYTE *)(v271 + 24) = 1;
            v268 = v272;
            v272[24] = v272 == v270;
            *v274 = 1;
          }
          while (v272 != v270);
        }
        *(_QWORD *)&object[16] = ++v258;
LABEL_243:
        v256 += 8;
      }
      while (v256 != v257);
      v283 = *(_BYTE **)object;
      v165 = v482 + 1029;
      v168 = __dst;
      if (*(_BYTE **)object != &object[8])
      {
        while (*((unsigned __int16 *)v283 + 25) != *((_DWORD *)v482 + 497))
        {
          v284 = (_QWORD *)*((_QWORD *)v283 + 1);
          if (v284)
          {
            do
            {
              v285 = v284;
              v284 = (_QWORD *)*v284;
            }
            while (v284);
          }
          else
          {
            do
            {
              v285 = (_BYTE *)*((_QWORD *)v283 + 2);
              _ZF = *(_QWORD *)v285 == (_QWORD)v283;
              v283 = v285;
            }
            while (!_ZF);
          }
          v283 = v285;
          if (v285 == &object[8])
            goto LABEL_150;
        }
        if (v283 != &object[8])
        {
          v295 = *((_QWORD *)v184 + 2);
          v296 = *((_QWORD *)v184 + 3);
          *(_QWORD *)v544 = v295;
          *(_QWORD *)&v544[8] = v296;
          if (v296)
          {
            v297 = (unint64_t *)(v296 + 8);
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v299 = *(_QWORD **)(v472 + 8);
          if ((unint64_t)v299 < *(_QWORD *)(v472 + 16))
          {
            *v299 = v295;
            v299[1] = v296;
            *(_QWORD *)(v472 + 8) = v299 + 2;
          }
          else
          {
            v300 = sub_20EAFDCA4((char **)v472, (uint64_t)v544);
            v301 = *(std::__shared_weak_count **)&v544[8];
            *(_QWORD *)(v472 + 8) = v300;
            if (v301)
            {
              v302 = (unint64_t *)&v301->__shared_owners_;
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
              }
            }
          }
        }
      }
LABEL_150:
      sub_20E86872C((uint64_t)object, *(_QWORD **)&object[8]);
LABEL_151:
      v167 += 6;
      if (v167 == v168)
      {
        v167 = (unsigned int *)v511;
        v169 = v512;
        goto LABEL_318;
      }
    }
    v168 = __dst;
    do
    {
LABEL_213:
      v235 = *((_QWORD *)v184 - 1);
      v184 -= 8;
      *--v208 = v235;
    }
    while (v184 != v200);
    goto LABEL_214;
  }
  v169 = v511;
LABEL_318:
  if (v473 > 0xAAAAAAAAAAAAAAABLL * ((v169 - (_BYTE *)v167) >> 3))
  {
    v304 = (uint64_t)(v482 + 1887);
    v305 = (_QWORD *)**((_QWORD **)v482 + 994);
    v306 = *(_OWORD *)(v482 + 1463);
    *(_OWORD *)(v482 + 1887) = *(_OWORD *)(v482 + 1461);
    *(_OWORD *)(v482 + 1889) = v306;
    *(_OWORD *)(v482 + 1891) = *(_OWORD *)(v482 + 1465);
    sub_20F38F148((uint64_t)(v482 + 1887), v305);
    v307 = (uint64_t *)*((_QWORD *)v482 + 1550);
    v308 = (uint64_t *)*((_QWORD *)v482 + 1551);
    if (v307 != v308)
    {
      v309 = 0;
      v506 = (uint64_t *)*((_QWORD *)v482 + 1551);
      while (1)
      {
        v310 = v309;
        if (*(_DWORD *)(*v480 + 4 * v309) != 0x7FFFFFFF)
          goto LABEL_322;
        v311 = *v307;
        *(_DWORD *)(*v480 + 4 * v310) = *(_QWORD *)(*v307 + 32);
        if (*(_BYTE *)(v311 + 488))
          v312 = v311 + 40;
        else
          v312 = 0;
        v313 = *(_QWORD *)(v312 + 24);
        v314 = *v476 + 32 * v310;
        *(_OWORD *)v314 = *(_OWORD *)(v312 + 8);
        *(_QWORD *)(v314 + 16) = v313;
        *(_QWORD *)(v314 + 24) = 0x3FF0000000000000;
        LODWORD(v542) = 0;
        BYTE4(v542) = 0;
        *(_QWORD *)v543 = 0;
        *(_DWORD *)&v543[8] = 0;
        v543[12] = 1;
        v315 = *v307;
        *(double *)object = v495;
        *(_QWORD *)&object[8] = v80;
        *(double *)&object[16] = v12;
        *(double *)&v560 = v493;
        *((_QWORD *)&v560 + 1) = 0x7FEFFFFFFFFFFFFFLL;
        LODWORD(__p[0]) = v494;
        BYTE4(__p[0]) = 0;
        *(_WORD *)((char *)__p + 5) = v518;
        HIBYTE(__p[0]) = v519;
        *(_OWORD *)v544 = v514;
        *(_OWORD *)&v544[16] = *(_OWORD *)v515;
        v545 = *(_OWORD *)&v515[16];
        v316 = sub_20FB99654(v304, v315, (uint64_t)object, (uint64_t)v544, (uint64_t)&v542);
        v317 = v542;
        v318 = BYTE4(v542);
        v319 = (_QWORD *)(*v165 + 16 * v310);
        *v319 = *(_QWORD *)v543;
        *(_QWORD *)((char *)v319 + 5) = *(_QWORD *)&v543[5];
        *v497 += v317;
        *v498 += v318;
        if ((v316 & 1) == 0)
        {
          v320 = v475;
          v322 = (char *)v475[1];
          v321 = v475[2];
          if ((unint64_t)v322 < v321)
          {
            *(_QWORD *)v322 = *v307;
            v323 = (uint64_t)(v322 + 8);
LABEL_368:
            v320[1] = v323;
            v359 = 1;
            v360 = 256;
            goto LABEL_378;
          }
          v328 = (char *)*v475;
          v329 = (uint64_t)&v322[-*v475];
          v330 = v329 >> 3;
          v331 = (v329 >> 3) + 1;
          if (v331 >> 61)
            goto LABEL_546;
          v332 = v321 - (_QWORD)v328;
          if (v332 >> 2 > v331)
            v331 = v332 >> 2;
          if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8)
            v333 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v333 = v331;
          if (v333)
          {
            if (v333 >> 61)
              goto LABEL_547;
            v334 = operator new(8 * v333);
            v335 = (uint64_t *)&v334[8 * v330];
            *v335 = *v307;
            v323 = (uint64_t)(v335 + 1);
            v336 = (char *)(v322 - v328);
            if (v322 != v328)
            {
LABEL_341:
              v337 = (unint64_t)(v336 - 8);
              if (v337 < 0x58)
              {
                v304 = (uint64_t)(v482 + 1887);
                goto LABEL_364;
              }
              v350 = v322 - v334 - v329;
              v304 = (uint64_t)(v482 + 1887);
              if (v350 < 0x20)
                goto LABEL_565;
              v351 = (v337 >> 3) + 1;
              v352 = 8 * (v351 & 0x3FFFFFFFFFFFFFFCLL);
              v353 = &v322[-v352];
              v335 = (uint64_t *)((char *)v335 - v352);
              v354 = &v334[8 * v330 - 16];
              v355 = v322 - 16;
              v356 = v351 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v357 = *(_OWORD *)v355;
                *(v354 - 1) = *((_OWORD *)v355 - 1);
                *v354 = v357;
                v354 -= 2;
                v355 -= 32;
                v356 -= 4;
              }
              while (v356);
              v322 = v353;
              if (v351 != (v351 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_565:
                do
                {
LABEL_364:
                  v358 = *((_QWORD *)v322 - 1);
                  v322 -= 8;
                  *--v335 = v358;
                }
                while (v322 != v328);
              }
              v348 = v475;
              v322 = (char *)*v475;
              *v475 = v335;
              v475[1] = v323;
              v475[2] = &v334[8 * v333];
              if (v322)
              {
LABEL_366:
                operator delete(v322);
                v320 = v475;
                goto LABEL_367;
              }
LABEL_356:
              v320 = v348;
LABEL_367:
              v308 = v506;
              goto LABEL_368;
            }
          }
          else
          {
            v334 = 0;
            v335 = (uint64_t *)(8 * v330);
            *(_QWORD *)(8 * v330) = *v307;
            v323 = 8 * v330 + 8;
            v336 = (char *)(v322 - v328);
            if (v322 != v328)
              goto LABEL_341;
          }
          v348 = v475;
          v304 = (uint64_t)(v482 + 1887);
          *v475 = v335;
          v475[1] = v323;
          v475[2] = &v334[8 * v333];
          if (v322)
            goto LABEL_366;
          goto LABEL_356;
        }
        v324 = v479;
        v326 = (char *)v479[1];
        v325 = v479[2];
        if ((unint64_t)v326 >= v325)
          break;
        *(_QWORD *)v326 = *v307;
        v327 = (uint64_t)(v326 + 8);
LABEL_377:
        v359 = 0;
        v324[1] = v327;
        v360 = 257;
LABEL_378:
        if (*(_BYTE *)(*v307 + 488))
          v370 = *v307 + 40;
        else
          v370 = 0;
        *(_WORD *)(v370 + 57) = v360;
        v371 = *v307;
        v372 = *v307 + 40;
        if (!*(_BYTE *)(*v307 + 488))
          v372 = 0;
        *(_BYTE *)(v372 + 56) = v359;
        v165 = v482 + 1029;
        if ((v316 & 1) != 0)
        {
          v374 = (char *)*v477 + 16 * v310;
          *v374 = *(_QWORD *)v543;
          *(_QWORD *)((char *)v374 + 5) = *(_QWORD *)&v543[5];
          v375 = *(double *)v543;
          if (*(double *)v543 < -1.0)
            v375 = -1.0;
          v376 = fmin(v375, 1.0);
          v93 = v93 + acos(v376) * 57.2957795;
          v377 = v376 * v376;
          v80 = *(_QWORD *)&v11;
          v378 = 1.0 - v377;
          v94 = v94 + sqrt(v378);
          v166 = v166 + v378;
          ++v496;
          if ((unsigned __int16)v316 < 0x100u)
            goto LABEL_322;
        }
        else
        {
          *(_DWORD *)v544 = 0;
          v544[4] = 0;
          *(_QWORD *)&v544[8] = 0;
          *(_DWORD *)&v544[16] = 0;
          v544[20] = 1;
          *(double *)object = v487;
          *(_QWORD *)&object[8] = v80;
          *(double *)&object[16] = v12;
          v560 = xmmword_2102DCC90;
          LODWORD(__p[0]) = v486;
          BYTE4(__p[0]) = 0;
          *(_WORD *)((char *)__p + 5) = v516;
          HIBYTE(__p[0]) = v517;
          sub_20FB98350(v304, v371, (uint64_t)object, 1, (int *)v544);
          v373 = (char *)*v477 + 16 * v310;
          *v373 = *(_QWORD *)&v544[8];
          *(_QWORD *)((char *)v373 + 5) = *(_QWORD *)&v544[13];
          if ((unsigned __int16)v316 < 0x100u)
            goto LABEL_322;
        }
        v379 = *v307;
        v380 = *(_QWORD *)(*v307 + 496);
        v381 = *(_QWORD *)(*v307 + 504);
        if (v380 != v381)
        {
          while (*(_QWORD *)v380 || *(_DWORD *)(v380 + 8) != v478)
          {
            v380 += 64;
            if (v380 == v381)
              goto LABEL_322;
          }
        }
        if (v380 == v381)
          goto LABEL_322;
        v382 = 0;
        v383 = *(uint64_t **)(*((_QWORD *)v482 + 994) + 16);
        v384 = *(_QWORD *)(v379 + 24);
        v385 = *(_QWORD *)(v379 + 32);
        _X10 = *v383;
        __asm { PRFM            #4, [X10] }
        v388 = (0x9DDFEA08EB382D69 * v385 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69
                                                                                    * v385
                                                                                    + 0x376ADF16980614E5) >> 32);
        v389 = v383[3];
        v390 = (v388 >> 7) ^ 0x13701D;
        v391 = 0x101010101010101 * (v388 & 0x7F);
        while (1)
        {
          v392 = v390 & v389;
          v393 = *(_QWORD *)(_X10 + v392);
          v394 = ((v393 ^ v391) - 0x101010101010101) & ~(v393 ^ v391) & 0x8080808080808080;
          if (v394)
            break;
LABEL_402:
          if ((v393 & (~v393 << 6) & 0x8080808080808080) != 0)
            goto LABEL_405;
          v382 += 8;
          v390 = v382 + v392;
        }
        while (1)
        {
          v316 = v383[1] + 32 * ((v392 + (__clz(__rbit64(v394)) >> 3)) & v389);
          if (*(_QWORD *)v316 == v384 && *(_DWORD *)(v316 + 8) == (_DWORD)v385)
            break;
          v394 &= v394 - 1;
          if (!v394)
            goto LABEL_402;
        }
        if (!_X10)
        {
LABEL_405:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5862, (uint64_t)"iter != viodatabase_->track_list()->end()", 41, (uint64_t)"Cannot find the track.", 22, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        if (*((_BYTE *)v482 + 1985))
        {
          v396 = *(_QWORD *)(*v307 + 496);
          v397 = *(_QWORD *)(*v307 + 504);
          if (v396 != v397)
          {
            while (*(unsigned __int16 *)(v396 + 18) != *((_DWORD *)v482 + 497))
            {
              v396 += 64;
              if (v396 == v397)
                goto LABEL_322;
            }
          }
          if (v396 == v397)
            goto LABEL_322;
          if (*((_DWORD *)v482 + 497) != *(unsigned __int16 *)(v396 + 18)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 5878, (uint64_t)"found_cam_stream_id.camera_id == config_.camera_used_for_mapping", 64, (uint64_t)"We should not use tracks from this camera for mapping", 53, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v398 = *(_QWORD *)(v316 + 16);
          v399 = *(_QWORD *)(v316 + 24);
          *(_QWORD *)object = v398;
          *(_QWORD *)&object[8] = v399;
          if (v399)
          {
            v400 = (unint64_t *)(v399 + 8);
            do
              v401 = __ldxr(v400);
            while (__stxr(v401 + 1, v400));
          }
          v402 = v472;
          v403 = *(_QWORD **)(v472 + 8);
          if ((unint64_t)v403 < *(_QWORD *)(v472 + 16))
          {
LABEL_321:
            *v403 = v398;
            v403[1] = v399;
            *(_QWORD *)(v402 + 8) = v403 + 2;
            goto LABEL_322;
          }
          v404 = sub_20EAFDCA4((char **)v472, (uint64_t)object);
          v405 = *(std::__shared_weak_count **)&object[8];
          *(_QWORD *)(v472 + 8) = v404;
          if (v405)
          {
            v406 = (unint64_t *)&v405->__shared_owners_;
            do
              v407 = __ldaxr(v406);
            while (__stlxr(v407 - 1, v406));
            goto LABEL_429;
          }
        }
        else
        {
          v398 = *(_QWORD *)(v316 + 16);
          v399 = *(_QWORD *)(v316 + 24);
          *(_QWORD *)object = v398;
          *(_QWORD *)&object[8] = v399;
          if (v399)
          {
            v408 = (unint64_t *)(v399 + 8);
            do
              v409 = __ldxr(v408);
            while (__stxr(v409 + 1, v408));
          }
          v402 = v472;
          v403 = *(_QWORD **)(v472 + 8);
          if ((unint64_t)v403 < *(_QWORD *)(v472 + 16))
            goto LABEL_321;
          v410 = sub_20EAFDCA4((char **)v472, (uint64_t)object);
          v405 = *(std::__shared_weak_count **)&object[8];
          *(_QWORD *)(v472 + 8) = v410;
          if (v405)
          {
            v411 = (unint64_t *)&v405->__shared_owners_;
            do
              v407 = __ldaxr(v411);
            while (__stlxr(v407 - 1, v411));
LABEL_429:
            if (!v407)
            {
              ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
              std::__shared_weak_count::__release_weak(v405);
            }
          }
        }
LABEL_322:
        v309 = v310 + 1;
        if (++v307 == v308)
          goto LABEL_431;
      }
      v338 = (char *)*v479;
      v339 = (uint64_t)&v326[-*v479];
      v340 = v339 >> 3;
      v341 = (v339 >> 3) + 1;
      if (v341 >> 61)
LABEL_546:
        sub_20E867F44();
      v342 = v325 - (_QWORD)v338;
      if (v342 >> 2 > v341)
        v341 = v342 >> 2;
      if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF8)
        v343 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v343 = v341;
      if (v343)
      {
        if (v343 >> 61)
LABEL_547:
          sub_20E877A38();
        v344 = operator new(8 * v343);
        v345 = (uint64_t *)&v344[8 * v340];
        *v345 = *v307;
        v327 = (uint64_t)(v345 + 1);
        v346 = (char *)(v326 - v338);
        if (v326 != v338)
        {
LABEL_352:
          v347 = (unint64_t)(v346 - 8);
          if (v347 >= 0x58)
          {
            v361 = v326 - v344 - v339;
            v304 = (uint64_t)(v482 + 1887);
            if (v361 >= 0x20)
            {
              v362 = (v347 >> 3) + 1;
              v363 = 8 * (v362 & 0x3FFFFFFFFFFFFFFCLL);
              v364 = &v326[-v363];
              v345 = (uint64_t *)((char *)v345 - v363);
              v365 = &v344[8 * v340 - 16];
              v366 = v326 - 16;
              v367 = v362 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v368 = *(_OWORD *)v366;
                *(v365 - 1) = *((_OWORD *)v366 - 1);
                *v365 = v368;
                v365 -= 2;
                v366 -= 32;
                v367 -= 4;
              }
              while (v367);
              v326 = v364;
              if (v362 == (v362 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_374:
                v349 = v479;
                v326 = (char *)*v479;
                *v479 = v345;
                v479[1] = v327;
                v479[2] = &v344[8 * v343];
                if (v326)
                  goto LABEL_375;
                goto LABEL_359;
              }
            }
          }
          else
          {
            v304 = (uint64_t)(v482 + 1887);
          }
          do
          {
            v369 = *((_QWORD *)v326 - 1);
            v326 -= 8;
            *--v345 = v369;
          }
          while (v326 != v338);
          goto LABEL_374;
        }
      }
      else
      {
        v344 = 0;
        v345 = (uint64_t *)(8 * v340);
        *(_QWORD *)(8 * v340) = *v307;
        v327 = 8 * v340 + 8;
        v346 = (char *)(v326 - v338);
        if (v326 != v338)
          goto LABEL_352;
      }
      v349 = v479;
      v304 = (uint64_t)(v482 + 1887);
      *v479 = v345;
      v479[1] = v327;
      v479[2] = &v344[8 * v343];
      if (v326)
      {
LABEL_375:
        operator delete(v326);
        v324 = v479;
        goto LABEL_376;
      }
LABEL_359:
      v324 = v349;
LABEL_376:
      v308 = v506;
      goto LABEL_377;
    }
  }
LABEL_431:
  if (v496)
    v412 = (double)v496;
  else
    v412 = 1.0;
  v413 = v94 / v412 * 57.2957795;
  *v471 = v413;
  sub_20F82FD50(v532);
  if (**(int **)(v532[0] + 56) <= 2)
  {
    v414 = *(unsigned __int8 *)(v532[0] + 72);
    v415 = sub_20E8C31DC(v532[0], "OSLogSurrogateAppender", 1, 0);
    v416 = v415;
    if (v414 || v415)
    {
      *(_QWORD *)v544 = v532;
      *(std::chrono::steady_clock::time_point *)&v544[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v544[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v544[24] = 2;
      *(_QWORD *)&v545 = "unknown file";
      DWORD2(v545) = 5898;
      v548 = 0;
      v546 = "unknown function";
      v547 = 0;
      v417 = **(_QWORD **)v544;
      v418 = (const char *)(**(_QWORD **)v544 + 16);
      v510 = v418;
      if (*(char *)(**(_QWORD **)v544 + 39) < 0)
      {
        v418 = *(const char **)(v417 + 16);
        v419 = *(_QWORD *)(v417 + 24);
        v421 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v421 & 1) != 0)
          goto LABEL_443;
      }
      else
      {
        v419 = *(unsigned __int8 *)(**(_QWORD **)v544 + 39);
        v420 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v420 & 1) != 0)
          goto LABEL_443;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v560 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_443:
      if (byte_254A4A4F8[23] >= 0)
        v422 = byte_254A4A4F8;
      else
        v422 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v423 = byte_254A4A4F8[23];
      else
        v423 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v422, v418);
      v424 = &object[8];
      if (v423 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v423 >= 0x17)
      {
        v425 = (v423 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v423 | 7) != 0x17)
          v425 = v423 | 7;
        v426 = v425 + 1;
        v424 = operator new(v425 + 1);
        *(_QWORD *)&v560 = v426 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v424;
        *(_QWORD *)&object[16] = v423;
      }
      else
      {
        BYTE7(v560) = v423;
        if (!v423)
        {
LABEL_457:
          v424[v423] = 0;
          BYTE8(v560) = 1;
          v427 = __p;
          if (v419 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v419 >= 0x17)
          {
            v429 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v419 | 7) != 0x17)
              v429 = v419 | 7;
            v430 = v429 + 1;
            v427 = operator new(v429 + 1);
            v562 = v430 | 0x8000000000000000;
            __p[0] = v427;
            __p[1] = (void *)v419;
          }
          else
          {
            HIBYTE(v562) = v419;
            if (!v419)
            {
              LOBYTE(__p[0]) = 0;
              v563 = 1;
              v428 = *(NSObject **)object;
              if ((SHIBYTE(v562) & 0x80000000) == 0)
                goto LABEL_461;
              goto LABEL_467;
            }
          }
          memmove(v427, v418, v419);
          *((_BYTE *)v427 + v419) = 0;
          v563 = 1;
          v428 = *(NSObject **)object;
          if ((SHIBYTE(v562) & 0x80000000) == 0)
          {
LABEL_461:
            if (!BYTE8(v560))
              goto LABEL_470;
            goto LABEL_468;
          }
LABEL_467:
          operator delete(__p[0]);
          if (!BYTE8(v560))
          {
LABEL_470:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v431 = sqrt(v166 / v412);
            v432 = v93 / v412;
            v433 = v431 * 57.2957795;
            if (v416 && *(_QWORD *)(v416 + 24))
            {
              v434 = _os_log_pack_size();
              v435 = (std::__shared_weak_count_vtbl *)operator new(v434, (std::align_val_t)8uLL);
              v436 = (std::__shared_weak_count *)operator new();
              v437 = v436;
              v436->__shared_owners_ = 0;
              v438 = (unint64_t *)&v436->__shared_owners_;
              v436->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v436->__shared_weak_owners_ = 0;
              v436[1].__vftable = v435;
              *(_QWORD *)object = v435;
              *(_QWORD *)&object[8] = v435;
              *(_QWORD *)&object[16] = v436;
              do
                v439 = __ldxr(v438);
              while (__stxr(v439 + 1, v438));
              v560 = 0uLL;
              __p[0] = 0;
              do
                v440 = __ldaxr(v438);
              while (__stlxr(v440 - 1, v438));
              if (!v440)
              {
                ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                std::__shared_weak_count::__release_weak(v437);
              }
              v441 = *(_QWORD *)object;
              v442 = _os_log_pack_fill();
              *(_DWORD *)v442 = 134219008;
              *(double *)(v442 + 4) = v432;
              *(_WORD *)(v442 + 12) = 2048;
              *(double *)(v442 + 14) = v413;
              *(_WORD *)(v442 + 22) = 2048;
              *(double *)(v442 + 24) = v433;
              *(_WORD *)(v442 + 32) = 1024;
              *(_DWORD *)(v442 + 34) = v496;
              *(_WORD *)(v442 + 38) = 2048;
              *(_QWORD *)(v442 + 40) = v473;
              v443 = operator new();
              v444 = *(unsigned __int8 *)(v417 + 39);
              v445 = v510;
              if ((v444 & 0x80u) != 0)
              {
                v445 = *(const char **)(v417 + 16);
                v444 = *(_QWORD *)(v417 + 24);
              }
              *(_QWORD *)v443 = v441;
              *(_OWORD *)(v443 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v443 + 24) = v560;
              v560 = 0uLL;
              *(_QWORD *)(v443 + 40) = v445;
              *(_QWORD *)(v443 + 48) = v444;
              *(_BYTE *)(v443 + 56) = 2;
              v541[0] = 0;
              v542 = v443;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v416 + 24) + 40))(*(_QWORD *)(v416 + 24), &v542);
              v446 = v542;
              v542 = 0;
              if (v446)
              {
                v447 = *(std::__shared_weak_count **)(v446 + 32);
                if (v447)
                {
                  v448 = (unint64_t *)&v447->__shared_owners_;
                  do
                    v449 = __ldaxr(v448);
                  while (__stlxr(v449 - 1, v448));
                  if (!v449)
                  {
                    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                    std::__shared_weak_count::__release_weak(v447);
                  }
                }
                v450 = *(std::__shared_weak_count **)(v446 + 16);
                if (v450)
                {
                  v451 = (unint64_t *)&v450->__shared_owners_;
                  do
                    v452 = __ldaxr(v451);
                  while (__stlxr(v452 - 1, v451));
                  if (!v452)
                  {
                    ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                    std::__shared_weak_count::__release_weak(v450);
                  }
                }
                MEMORY[0x212BC6398](v446, 0x10F0C40B62ED6C6);
                v453 = v541[0];
                v541[0] = 0;
                if (v453)
                {
                  v454 = *(std::__shared_weak_count **)(v453 + 32);
                  if (v454)
                  {
                    v455 = (unint64_t *)&v454->__shared_owners_;
                    do
                      v456 = __ldaxr(v455);
                    while (__stlxr(v456 - 1, v455));
                    if (!v456)
                    {
                      ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                      std::__shared_weak_count::__release_weak(v454);
                    }
                  }
                  v457 = *(std::__shared_weak_count **)(v453 + 16);
                  if (v457)
                  {
                    v458 = (unint64_t *)&v457->__shared_owners_;
                    do
                      v459 = __ldaxr(v458);
                    while (__stlxr(v459 - 1, v458));
                    if (!v459)
                    {
                      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                      std::__shared_weak_count::__release_weak(v457);
                    }
                  }
                  MEMORY[0x212BC6398](v453, 0x10F0C40B62ED6C6);
                }
              }
              v460 = (std::__shared_weak_count *)*((_QWORD *)&v560 + 1);
              if (*((_QWORD *)&v560 + 1))
              {
                v461 = (unint64_t *)(*((_QWORD *)&v560 + 1) + 8);
                do
                  v462 = __ldaxr(v461);
                while (__stlxr(v462 - 1, v461));
                if (!v462)
                {
                  ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                  std::__shared_weak_count::__release_weak(v460);
                }
              }
              v463 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v464 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v465 = __ldaxr(v464);
                while (__stlxr(v465 - 1, v464));
                if (!v465)
                {
                  ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                  std::__shared_weak_count::__release_weak(v463);
                }
              }
            }
            else
            {
              os_log_type_enabled(v428, OS_LOG_TYPE_DEBUG);
              *(_DWORD *)object = 134219008;
              *(double *)&object[4] = v432;
              *(_WORD *)&object[12] = 2048;
              *(double *)&object[14] = v413;
              *(_WORD *)&object[22] = 2048;
              *(double *)&v560 = v433;
              WORD4(v560) = 1024;
              *(_DWORD *)((char *)&v560 + 10) = v496;
              HIWORD(v560) = 2048;
              __p[0] = (void *)v473;
              v466 = (void *)_os_log_send_and_compose_impl();
              if (v466)
                free(v466);
            }
            if (v414)
            {
              sub_20E8C003C((uint64_t)v544, "vergence angle: %f, %f, %f (%u / %zu)", v432, v413, v433, v496, v473);
              sub_20E863570((uint64_t)v544);
            }
            sub_20E863570((uint64_t)v544);
            v467 = v548;
            if (v548)
            {
              v468 = (unint64_t *)&v548->__shared_owners_;
              do
                v469 = __ldaxr(v468);
              while (__stlxr(v469 - 1, v468));
              if (!v469)
              {
                ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                std::__shared_weak_count::__release_weak(v467);
              }
            }
            goto LABEL_524;
          }
LABEL_468:
          if (SBYTE7(v560) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_470;
        }
      }
      memmove(v424, v422, v423);
      goto LABEL_457;
    }
  }
LABEL_524:
  if (v511)
    operator delete(v511);
}

void sub_20F898E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;

  if (*(_BYTE *)(v67 + 24) && *(char *)(v67 + 23) < 0)
    operator delete((void *)STACK[0x1470]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x420]);
  if (!a67)
    _Unwind_Resume(a1);
  operator delete(a67);
  _Unwind_Resume(a1);
}

void sub_20F899044(uint64_t a1, _QWORD *a2, uint64_t **a3, _DWORD *a4)
{
  char **v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  __int128 v169;
  uint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  uint64_t v173;
  char v174;
  __int16 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t *v203;
  char *v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _BYTE *v212;
  uint64_t *v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  char *v219;
  uint64_t *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  _OWORD *v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t *v234;
  __int128 v237;

  v4 = (char **)a3;
  *a4 = 0;
  v7 = *(_QWORD *)(a1 + 8216);
  v8 = (char *)*a2;
  if (!*(_BYTE *)v7)
  {
    v18 = *(_QWORD *)(v7 + 16);
    a2[1] = v8;
    a3[1] = *a3;
    v19 = *(_QWORD *)(v18 + 56) - *(_QWORD *)(v18 + 48);
    v20 = v19 >> 3;
    v21 = (char *)*a2;
    if (v19 >> 3 <= (unint64_t)((uint64_t)(a2[2] - *a2) >> 3))
      goto LABEL_122;
    if (v19 < 0)
      goto LABEL_220;
    v22 = (_BYTE *)a2[1];
    v23 = (char *)operator new(v19);
    v24 = v22 - v21;
    v25 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
    v26 = v25;
    if (v22 != v21)
    {
      if ((unint64_t)(v24 - 8) < 0x58)
      {
        v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_119:
          v138 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v26 - 1) = v138;
          v26 -= 8;
        }
        while (v22 != v21);
        goto LABEL_120;
      }
      v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v22 - &v23[v24 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_119;
      v130 = v24 >> 3;
      v131 = ((unint64_t)(v24 - 8) >> 3) + 1;
      v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
      v133 = &v22[-v132];
      v26 = &v25[-v132];
      v134 = &v23[8 * v130 - 16];
      v135 = (__int128 *)(v22 - 16);
      v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v137 = *v135;
        *((_OWORD *)v134 - 1) = *(v135 - 1);
        *(_OWORD *)v134 = v137;
        v134 -= 32;
        v135 -= 2;
        v136 -= 4;
      }
      while (v136);
      v22 = v133;
      if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
LABEL_120:
    *a2 = v26;
    a2[1] = v25;
    a2[2] = &v23[8 * v20];
    if (v21)
      operator delete(v21);
LABEL_122:
    v139 = *(_QWORD *)(v18 + 56) - *(_QWORD *)(v18 + 48);
    v140 = v139 >> 3;
    v141 = *v4;
    if (v139 >> 3 <= (unint64_t)((v4[2] - *v4) >> 3))
    {
LABEL_134:
      v157 = *(_QWORD *)(v18 + 48);
      v156 = *(_QWORD *)(v18 + 56);
      v158 = (v156 - v157) >> 3;
      v159 = *(_QWORD *)(a1 + 2600);
      v160 = (*(_QWORD *)(a1 + 2608) - v159) >> 2;
      if (v158 <= v160)
      {
        if (v158 < v160)
          *(_QWORD *)(a1 + 2608) = v159 + 4 * v158;
      }
      else
      {
        sub_20EAC24FC(a1 + 2600, v158 - v160);
      }
      v161 = (v156 - v157) >> 2;
      *(_QWORD *)&v237 = 0;
      DWORD2(v237) = 0;
      BYTE12(v237) = 1;
      v162 = *(_QWORD *)(a1 + 8352);
      v163 = (*(_QWORD *)(a1 + 8360) - v162) >> 4;
      if (v161 <= v163)
      {
        if (v161 < v163)
          *(_QWORD *)(a1 + 8360) = v162 + 16 * v161;
      }
      else
      {
        sub_20FB436E4((void **)(a1 + 8352), v161 - v163, &v237);
      }
      v164 = *(_QWORD *)(a1 + 2352);
      v165 = (*(_QWORD *)(a1 + 2360) - v164) >> 5;
      if (v161 <= v165)
      {
        if (v161 < v165)
          *(_QWORD *)(a1 + 2360) = v164 + 32 * v161;
      }
      else
      {
        sub_20F156988((char **)(a1 + 2352), v161 - v165);
      }
      v166 = *(_QWORD *)(a1 + 2400);
      if (*(_QWORD *)(a1 + 2408) != v166)
        *(_QWORD *)(a1 + 2408) = v166;
      if (v156 == v157)
        return;
      v167 = a1 + 15096;
      v168 = **(_QWORD ***)(a1 + 7952);
      v169 = *(_OWORD *)(a1 + 11704);
      *(_OWORD *)(a1 + 15096) = *(_OWORD *)(a1 + 11688);
      *(_OWORD *)(a1 + 15112) = v169;
      *(_OWORD *)(a1 + 15128) = *(_OWORD *)(a1 + 11720);
      sub_20F38F148(a1 + 15096, v168);
      v171 = *(uint64_t **)(v18 + 48);
      v170 = *(uint64_t **)(v18 + 56);
      if (v171 == v170)
        return;
      v172 = 0;
      v234 = *(uint64_t **)(v18 + 56);
      while (1)
      {
        v181 = *v171;
        *(_DWORD *)(*(_QWORD *)(a1 + 2600) + 4 * v172) = *(_QWORD *)(*v171 + 32);
        if (*(_BYTE *)(v181 + 968))
          v182 = v181 + 40;
        else
          v182 = 0;
        v183 = *(_QWORD *)(v182 + 24);
        v184 = 2 * v172;
        v185 = *(_QWORD *)(a1 + 2352) + 32 * v184;
        *(_OWORD *)v185 = *(_OWORD *)(v182 + 8);
        *(_QWORD *)(v185 + 16) = v183;
        *(_QWORD *)(v185 + 24) = 0x3FF0000000000000;
        if (*(_BYTE *)(*v171 + 968))
          v186 = *v171 + 40;
        else
          v186 = 0;
        v187 = (_OWORD *)(v186 + 456);
        v188 = *(_QWORD *)(v186 + 472);
        v189 = (2 * v172) | 1;
        v190 = *(_QWORD *)(a1 + 2352) + 32 * v189;
        *(_OWORD *)v190 = *v187;
        *(_QWORD *)(v190 + 16) = v188;
        *(_QWORD *)(v190 + 24) = 0x3FF0000000000000;
        LODWORD(v237) = 0;
        v191 = sub_20FB9AC50(v167, *v171, *(_QWORD *)(a1 + 1784), 0, (int *)&v237, *(_QWORD *)(a1 + 8352) + 16 * v184, *(_QWORD *)(a1 + 8352) + 16 * v189, *(double *)(a1 + 496), *(double *)(a1 + 592), *(double *)(a1 + 568), *(double *)(a1 + 616));
        *a4 += v237;
        if (v191)
        {
          v193 = (char *)a2[1];
          v192 = a2[2];
          if ((unint64_t)v193 < v192)
          {
            *(_QWORD *)v193 = *v171;
            v194 = (uint64_t)(v193 + 8);
LABEL_217:
            v174 = 0;
            a2[1] = v194;
            v175 = 257;
            goto LABEL_153;
          }
          v206 = (char *)*a2;
          v207 = (uint64_t)&v193[-*a2];
          v208 = v207 >> 3;
          v209 = (v207 >> 3) + 1;
          if (v209 >> 61)
            goto LABEL_220;
          v210 = v192 - (_QWORD)v206;
          if (v210 >> 2 > v209)
            v209 = v210 >> 2;
          if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8)
            v211 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v211 = v209;
          if (v211)
          {
            if (v211 >> 61)
LABEL_219:
              sub_20E877A38();
            v212 = operator new(8 * v211);
            v213 = (uint64_t *)&v212[8 * v208];
            *v213 = *v171;
            v194 = (uint64_t)(v213 + 1);
            v214 = (char *)(v193 - v206);
            if (v193 != v206)
            {
LABEL_193:
              v215 = (unint64_t)(v214 - 8);
              if (v215 < 0x58)
              {
                v167 = a1 + 15096;
                goto LABEL_213;
              }
              v224 = v193 - v212 - v207;
              v167 = a1 + 15096;
              if (v224 < 0x20)
                goto LABEL_225;
              v225 = (v215 >> 3) + 1;
              v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
              v227 = &v193[-v226];
              v213 = (uint64_t *)((char *)v213 - v226);
              v228 = &v212[8 * v208 - 16];
              v229 = v193 - 16;
              v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v231 = *(_OWORD *)v229;
                *(v228 - 1) = *((_OWORD *)v229 - 1);
                *v228 = v231;
                v228 -= 2;
                v229 -= 32;
                v230 -= 4;
              }
              while (v230);
              v193 = v227;
              if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_225:
                do
                {
LABEL_213:
                  v232 = *((_QWORD *)v193 - 1);
                  v193 -= 8;
                  *--v213 = v232;
                }
                while (v193 != v206);
              }
              v193 = (char *)*a2;
              *a2 = v213;
              a2[1] = v194;
              a2[2] = &v212[8 * v211];
              v4 = (char **)a3;
              if (v193)
LABEL_215:
                operator delete(v193);
LABEL_216:
              v170 = v234;
              goto LABEL_217;
            }
          }
          else
          {
            v212 = 0;
            v213 = (uint64_t *)(8 * v208);
            *(_QWORD *)(8 * v208) = *v171;
            v194 = 8 * v208 + 8;
            v214 = (char *)(v193 - v206);
            if (v193 != v206)
              goto LABEL_193;
          }
          v167 = a1 + 15096;
          v4 = (char **)a3;
          *a2 = v213;
          a2[1] = v194;
          a2[2] = &v212[8 * v211];
          if (v193)
            goto LABEL_215;
          goto LABEL_216;
        }
        v196 = (uint64_t *)v4[1];
        v195 = (unint64_t)v4[2];
        if ((unint64_t)v196 >= v195)
          break;
        *v196 = *v171;
        v173 = (uint64_t)(v196 + 1);
LABEL_152:
        v4[1] = (char *)v173;
        v174 = 1;
        v175 = 256;
LABEL_153:
        if (*(_BYTE *)(*v171 + 968))
          v176 = *v171 + 40;
        else
          v176 = 0;
        *(_WORD *)(v176 + 57) = v175;
        if (*(_BYTE *)(*v171 + 968))
          v177 = *v171 + 40;
        else
          v177 = 0;
        *(_WORD *)(v177 + 505) = v175;
        v178 = *v171++;
        v179 = v178 + 40;
        if (*(_BYTE *)(v178 + 968))
          v180 = v179;
        else
          v180 = 0;
        *(_BYTE *)(v180 + 56) = v174;
        *(_BYTE *)(v180 + 504) = v174;
        ++v172;
        if (v171 == v170)
          return;
      }
      v197 = *v4;
      v198 = ((char *)v196 - v197) >> 3;
      v199 = v198 + 1;
      if ((unint64_t)(v198 + 1) >> 61)
LABEL_221:
        sub_20E867F44();
      v200 = v195 - (_QWORD)v197;
      if (v200 >> 2 > v199)
        v199 = v200 >> 2;
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
        v201 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v201 = v199;
      if (v201)
      {
        if (v201 >> 61)
          goto LABEL_219;
        v202 = (char *)operator new(8 * v201);
        v203 = (uint64_t *)&v202[8 * v198];
        *v203 = *v171;
        v173 = (uint64_t)(v203 + 1);
        v204 = (char *)((char *)v196 - v197);
        if (v196 != (uint64_t *)v197)
        {
LABEL_182:
          v205 = (unint64_t)(v204 - 8);
          if (v205 >= 0x58)
          {
            v167 = a1 + 15096;
            if ((unint64_t)(v197 - v202) >= 0x20)
            {
              v216 = (v205 >> 3) + 1;
              v217 = 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
              v218 = &v196[v217 / 0xFFFFFFFFFFFFFFF8];
              v203 = (uint64_t *)((char *)v203 - v217);
              v219 = &v202[8 * v198 - 16];
              v220 = v196 - 2;
              v221 = v216 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v222 = *(_OWORD *)v220;
                *((_OWORD *)v219 - 1) = *((_OWORD *)v220 - 1);
                *(_OWORD *)v219 = v222;
                v219 -= 32;
                v220 -= 4;
                v221 -= 4;
              }
              while (v221);
              v196 = v218;
              if (v216 == (v216 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_206:
                v4 = (char **)a3;
                v196 = *a3;
                *a3 = v203;
                a3[1] = (uint64_t *)v173;
                a3[2] = (uint64_t *)&v202[8 * v201];
                if (!v196)
                {
LABEL_208:
                  v170 = v234;
                  goto LABEL_152;
                }
LABEL_207:
                operator delete(v196);
                goto LABEL_208;
              }
            }
          }
          else
          {
            v167 = a1 + 15096;
          }
          do
          {
            v223 = *--v196;
            *--v203 = v223;
          }
          while (v196 != (uint64_t *)v197);
          goto LABEL_206;
        }
      }
      else
      {
        v202 = 0;
        v203 = (uint64_t *)(8 * v198);
        *(_QWORD *)(8 * v198) = *v171;
        v173 = 8 * v198 + 8;
        v204 = (char *)((char *)v196 - v197);
        if (v196 != (uint64_t *)v197)
          goto LABEL_182;
      }
      v167 = a1 + 15096;
      v4 = (char **)a3;
      *a3 = v203;
      a3[1] = (uint64_t *)v173;
      a3[2] = (uint64_t *)&v202[8 * v201];
      if (!v196)
        goto LABEL_208;
      goto LABEL_207;
    }
    if (v139 < 0)
      goto LABEL_222;
    v142 = v4[1];
    v143 = (char *)operator new(v139);
    v144 = v142 - v141;
    v145 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
    v146 = v145;
    if (v142 != v141)
    {
      if ((unint64_t)(v144 - 8) < 0x58)
      {
        v146 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_131:
          v155 = *((_QWORD *)v142 - 1);
          v142 -= 8;
          *((_QWORD *)v146 - 1) = v155;
          v146 -= 8;
        }
        while (v142 != v141);
        goto LABEL_132;
      }
      v146 = &v143[(v142 - v141) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v142 - &v143[v144 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_131;
      v147 = v144 >> 3;
      v148 = ((unint64_t)(v144 - 8) >> 3) + 1;
      v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
      v150 = &v142[-v149];
      v146 = &v145[-v149];
      v151 = &v143[8 * v147 - 16];
      v152 = (__int128 *)(v142 - 16);
      v153 = v148 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v154 = *v152;
        *((_OWORD *)v151 - 1) = *(v152 - 1);
        *(_OWORD *)v151 = v154;
        v151 -= 32;
        v152 -= 2;
        v153 -= 4;
      }
      while (v153);
      v142 = v150;
      if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_131;
    }
LABEL_132:
    *v4 = v146;
    v4[1] = v145;
    v4[2] = &v143[8 * v140];
    if (v141)
      operator delete(v141);
    goto LABEL_134;
  }
  v9 = *(_QWORD *)(v7 + 8);
  a2[1] = v8;
  a3[1] = *a3;
  v10 = *(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48);
  v11 = v10 >> 3;
  v12 = (char *)*a2;
  if (v10 >> 3 <= (unint64_t)((uint64_t)(a2[2] - *a2) >> 3))
    goto LABEL_19;
  if (v10 < 0)
LABEL_220:
    sub_20E867F44();
  v13 = (_BYTE *)a2[1];
  v14 = (char *)operator new(v10);
  v15 = v13 - v12;
  v16 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
  v17 = v16;
  if (v13 == v12)
    goto LABEL_17;
  if ((unint64_t)(v15 - 8) < 0x58)
  {
    v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_16:
      v35 = *((_QWORD *)v13 - 1);
      v13 -= 8;
      *((_QWORD *)v17 - 1) = v35;
      v17 -= 8;
    }
    while (v13 != v12);
    goto LABEL_17;
  }
  v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
  if ((unint64_t)(v13 - &v14[v15 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
    goto LABEL_16;
  v27 = v15 >> 3;
  v28 = ((unint64_t)(v15 - 8) >> 3) + 1;
  v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
  v30 = &v13[-v29];
  v17 = &v16[-v29];
  v31 = &v14[8 * v27 - 16];
  v32 = (__int128 *)(v13 - 16);
  v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v34 = *v32;
    *((_OWORD *)v31 - 1) = *(v32 - 1);
    *(_OWORD *)v31 = v34;
    v31 -= 32;
    v32 -= 2;
    v33 -= 4;
  }
  while (v33);
  v13 = v30;
  if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_16;
LABEL_17:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = &v14[8 * v11];
  if (v12)
    operator delete(v12);
LABEL_19:
  v36 = *(_QWORD *)(v9 + 56) - *(_QWORD *)(v9 + 48);
  v37 = v36 >> 3;
  v38 = *v4;
  if (v36 >> 3 <= (unint64_t)((v4[2] - *v4) >> 3))
    goto LABEL_31;
  if (v36 < 0)
LABEL_222:
    sub_20E867F44();
  v39 = v4[1];
  v40 = (char *)operator new(v36);
  v41 = v39 - v38;
  v42 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFF8];
  v43 = v42;
  if (v39 == v38)
    goto LABEL_29;
  if ((unint64_t)(v41 - 8) < 0x58)
  {
    v43 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_28:
      v52 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *((_QWORD *)v43 - 1) = v52;
      v43 -= 8;
    }
    while (v39 != v38);
    goto LABEL_29;
  }
  v43 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFF8];
  if ((unint64_t)(v39 - &v40[v41 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
    goto LABEL_28;
  v44 = v41 >> 3;
  v45 = ((unint64_t)(v41 - 8) >> 3) + 1;
  v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
  v47 = &v39[-v46];
  v43 = &v42[-v46];
  v48 = &v40[8 * v44 - 16];
  v49 = (__int128 *)(v39 - 16);
  v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v51 = *v49;
    *((_OWORD *)v48 - 1) = *(v49 - 1);
    *(_OWORD *)v48 = v51;
    v48 -= 32;
    v49 -= 2;
    v50 -= 4;
  }
  while (v50);
  v39 = v47;
  if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_28;
LABEL_29:
  *v4 = v43;
  v4[1] = v42;
  v4[2] = &v40[8 * v37];
  if (v38)
    operator delete(v38);
LABEL_31:
  v54 = *(_QWORD *)(v9 + 48);
  v53 = *(_QWORD *)(v9 + 56);
  v55 = (v53 - v54) >> 3;
  v56 = *(_QWORD *)(a1 + 2600);
  v57 = (*(_QWORD *)(a1 + 2608) - v56) >> 2;
  if (v55 <= v57)
  {
    if (v55 < v57)
      *(_QWORD *)(a1 + 2608) = v56 + 4 * v55;
  }
  else
  {
    sub_20EAC24FC(a1 + 2600, v55 - v57);
  }
  v58 = (v53 - v54) >> 2;
  *(_QWORD *)&v237 = 0;
  DWORD2(v237) = 0;
  BYTE12(v237) = 1;
  v59 = *(_QWORD *)(a1 + 8352);
  v60 = (*(_QWORD *)(a1 + 8360) - v59) >> 4;
  if (v58 <= v60)
  {
    if (v58 < v60)
      *(_QWORD *)(a1 + 8360) = v59 + 16 * v58;
  }
  else
  {
    sub_20FB436E4((void **)(a1 + 8352), v58 - v60, &v237);
  }
  v61 = *(_QWORD *)(a1 + 2352);
  v62 = (*(_QWORD *)(a1 + 2360) - v61) >> 5;
  if (v58 <= v62)
  {
    if (v58 < v62)
      *(_QWORD *)(a1 + 2360) = v61 + 32 * v58;
  }
  else
  {
    sub_20F156988((char **)(a1 + 2352), v58 - v62);
  }
  v63 = *(_QWORD *)(a1 + 2400);
  if (*(_QWORD *)(a1 + 2408) != v63)
    *(_QWORD *)(a1 + 2408) = v63;
  if (v53 != v54)
  {
    v64 = a1 + 15096;
    v65 = **(_QWORD ***)(a1 + 7952);
    v66 = *(_OWORD *)(a1 + 11704);
    *(_OWORD *)(a1 + 15096) = *(_OWORD *)(a1 + 11688);
    *(_OWORD *)(a1 + 15112) = v66;
    *(_OWORD *)(a1 + 15128) = *(_OWORD *)(a1 + 11720);
    sub_20F38F148(a1 + 15096, v65);
    v68 = *(uint64_t **)(v9 + 48);
    v67 = *(uint64_t **)(v9 + 56);
    if (v68 != v67)
    {
      v69 = 0;
      v233 = *(uint64_t **)(v9 + 56);
      while (1)
      {
        v78 = *v68;
        *(_DWORD *)(*(_QWORD *)(a1 + 2600) + 4 * v69) = *(_QWORD *)(*v68 + 32);
        if (*(_BYTE *)(v78 + 968))
          v79 = v78 + 40;
        else
          v79 = 0;
        v80 = *(_QWORD *)(v79 + 24);
        v81 = 2 * v69;
        v82 = *(_QWORD *)(a1 + 2352) + 32 * v81;
        *(_OWORD *)v82 = *(_OWORD *)(v79 + 8);
        *(_QWORD *)(v82 + 16) = v80;
        *(_QWORD *)(v82 + 24) = 0x3FF0000000000000;
        if (*(_BYTE *)(*v68 + 968))
          v83 = *v68 + 40;
        else
          v83 = 0;
        v84 = (_OWORD *)(v83 + 456);
        v85 = *(_QWORD *)(v83 + 472);
        v86 = (2 * v69) | 1;
        v87 = *(_QWORD *)(a1 + 2352) + 32 * v86;
        *(_OWORD *)v87 = *v84;
        *(_QWORD *)(v87 + 16) = v85;
        *(_QWORD *)(v87 + 24) = 0x3FF0000000000000;
        LODWORD(v237) = 0;
        v88 = sub_20FB9AC50(v64, *v68, *(_QWORD *)(a1 + 1784), 0, (int *)&v237, *(_QWORD *)(a1 + 8352) + 16 * v81, *(_QWORD *)(a1 + 8352) + 16 * v86, *(double *)(a1 + 496), *(double *)(a1 + 592), *(double *)(a1 + 568), *(double *)(a1 + 616));
        *a4 += v237;
        if (v88)
        {
          v90 = (char *)a2[1];
          v89 = a2[2];
          if ((unint64_t)v90 < v89)
          {
            *(_QWORD *)v90 = *v68;
            v91 = (uint64_t)(v90 + 8);
LABEL_114:
            v71 = 0;
            a2[1] = v91;
            v72 = 257;
            goto LABEL_50;
          }
          v103 = (char *)*a2;
          v104 = (uint64_t)&v90[-*a2];
          v105 = v104 >> 3;
          v106 = (v104 >> 3) + 1;
          if (v106 >> 61)
            goto LABEL_220;
          v107 = v89 - (_QWORD)v103;
          if (v107 >> 2 > v106)
            v106 = v107 >> 2;
          if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
            v108 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v108 = v106;
          if (v108)
          {
            if (v108 >> 61)
              goto LABEL_219;
            v109 = operator new(8 * v108);
            v110 = (uint64_t *)&v109[8 * v105];
            *v110 = *v68;
            v91 = (uint64_t)(v110 + 1);
            v111 = (char *)(v90 - v103);
            if (v90 != v103)
            {
LABEL_90:
              v112 = (unint64_t)(v111 - 8);
              if (v112 < 0x58)
              {
                v64 = a1 + 15096;
                goto LABEL_110;
              }
              v121 = v90 - v109 - v104;
              v64 = a1 + 15096;
              if (v121 < 0x20)
                goto LABEL_226;
              v122 = (v112 >> 3) + 1;
              v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              v124 = &v90[-v123];
              v110 = (uint64_t *)((char *)v110 - v123);
              v125 = &v109[8 * v105 - 16];
              v126 = v90 - 16;
              v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v128 = *(_OWORD *)v126;
                *(v125 - 1) = *((_OWORD *)v126 - 1);
                *v125 = v128;
                v125 -= 2;
                v126 -= 32;
                v127 -= 4;
              }
              while (v127);
              v90 = v124;
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_226:
                do
                {
LABEL_110:
                  v129 = *((_QWORD *)v90 - 1);
                  v90 -= 8;
                  *--v110 = v129;
                }
                while (v90 != v103);
              }
              v90 = (char *)*a2;
              *a2 = v110;
              a2[1] = v91;
              a2[2] = &v109[8 * v108];
              v4 = (char **)a3;
              if (v90)
LABEL_112:
                operator delete(v90);
LABEL_113:
              v67 = v233;
              goto LABEL_114;
            }
          }
          else
          {
            v109 = 0;
            v110 = (uint64_t *)(8 * v105);
            *(_QWORD *)(8 * v105) = *v68;
            v91 = 8 * v105 + 8;
            v111 = (char *)(v90 - v103);
            if (v90 != v103)
              goto LABEL_90;
          }
          v64 = a1 + 15096;
          v4 = (char **)a3;
          *a2 = v110;
          a2[1] = v91;
          a2[2] = &v109[8 * v108];
          if (v90)
            goto LABEL_112;
          goto LABEL_113;
        }
        v93 = (uint64_t *)v4[1];
        v92 = (unint64_t)v4[2];
        if ((unint64_t)v93 >= v92)
          break;
        *v93 = *v68;
        v70 = (uint64_t)(v93 + 1);
LABEL_49:
        v4[1] = (char *)v70;
        v71 = 1;
        v72 = 256;
LABEL_50:
        if (*(_BYTE *)(*v68 + 968))
          v73 = *v68 + 40;
        else
          v73 = 0;
        *(_WORD *)(v73 + 57) = v72;
        if (*(_BYTE *)(*v68 + 968))
          v74 = *v68 + 40;
        else
          v74 = 0;
        *(_WORD *)(v74 + 505) = v72;
        v75 = *v68++;
        v76 = v75 + 40;
        if (*(_BYTE *)(v75 + 968))
          v77 = v76;
        else
          v77 = 0;
        *(_BYTE *)(v77 + 56) = v71;
        *(_BYTE *)(v77 + 504) = v71;
        ++v69;
        if (v68 == v67)
          return;
      }
      v94 = *v4;
      v95 = ((char *)v93 - v94) >> 3;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61)
        goto LABEL_221;
      v97 = v92 - (_QWORD)v94;
      if (v97 >> 2 > v96)
        v96 = v97 >> 2;
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v98 = v96;
      if (v98)
      {
        if (v98 >> 61)
          goto LABEL_219;
        v99 = (char *)operator new(8 * v98);
        v100 = (uint64_t *)&v99[8 * v95];
        *v100 = *v68;
        v70 = (uint64_t)(v100 + 1);
        v101 = (char *)((char *)v93 - v94);
        if (v93 != (uint64_t *)v94)
        {
LABEL_79:
          v102 = (unint64_t)(v101 - 8);
          if (v102 >= 0x58)
          {
            v64 = a1 + 15096;
            if ((unint64_t)(v94 - v99) >= 0x20)
            {
              v113 = (v102 >> 3) + 1;
              v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
              v115 = &v93[v114 / 0xFFFFFFFFFFFFFFF8];
              v100 = (uint64_t *)((char *)v100 - v114);
              v116 = &v99[8 * v95 - 16];
              v117 = v93 - 2;
              v118 = v113 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v119 = *(_OWORD *)v117;
                *((_OWORD *)v116 - 1) = *((_OWORD *)v117 - 1);
                *(_OWORD *)v116 = v119;
                v116 -= 32;
                v117 -= 4;
                v118 -= 4;
              }
              while (v118);
              v93 = v115;
              if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_103:
                v4 = (char **)a3;
                v93 = *a3;
                *a3 = v100;
                a3[1] = (uint64_t *)v70;
                a3[2] = (uint64_t *)&v99[8 * v98];
                if (!v93)
                {
LABEL_105:
                  v67 = v233;
                  goto LABEL_49;
                }
LABEL_104:
                operator delete(v93);
                goto LABEL_105;
              }
            }
          }
          else
          {
            v64 = a1 + 15096;
          }
          do
          {
            v120 = *--v93;
            *--v100 = v120;
          }
          while (v93 != (uint64_t *)v94);
          goto LABEL_103;
        }
      }
      else
      {
        v99 = 0;
        v100 = (uint64_t *)(8 * v95);
        *(_QWORD *)(8 * v95) = *v68;
        v70 = 8 * v95 + 8;
        v101 = (char *)((char *)v93 - v94);
        if (v93 != (uint64_t *)v94)
          goto LABEL_79;
      }
      v64 = a1 + 15096;
      v4 = (char **)a3;
      *a3 = v100;
      a3[1] = (uint64_t *)v70;
      a3[2] = (uint64_t *)&v99[8 * v98];
      if (!v93)
        goto LABEL_105;
      goto LABEL_104;
    }
  }
}

void sub_20F899ECC(uint64_t **a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  float64x2_t v14;
  int8x16_t **v15;
  uint64_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  float64x2_t v52;
  int8x16_t **v53;
  uint64_t v54;
  float64x2_t v55;
  int8x16_t v56;
  float64x2_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t *v80;
  float64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int8x16_t **v95;
  int8x16_t **v96;
  unint64_t v97;
  unint64_t v98;
  float64_t v99;
  float64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64_t v103;
  float64_t v104;
  float64_t v105;
  float64_t v106;
  unint64_t v107;
  unint64_t v108;
  float64_t v109;
  float64_t v110;
  float64_t v111;
  float64_t v112;
  float64_t v113;
  float64_t v114;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  _OWORD v119[2];
  float64x2_t v120;
  float64_t v121;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(_QWORD *)(a2 + 8216);
  if (*(_BYTE *)v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v9 = *(_QWORD *)(v7 + 72);
    v8 = *(_QWORD *)(v7 + 80);
    a1[1] = 0;
    v10 = v8 - v9;
    *a3 = (unint64_t)(v8 - v9) >> 3;
    if (v8 == v9)
    {
      v14.f64[1] = 0.0;
      v121 = 0.0;
      v113 = 0.0;
      v107 = 0;
      v109 = 0.0;
      v120 = 0u;
      v118 = 0u;
      memset(v119, 0, sizeof(v119));
      *a4 = 0;
LABEL_76:
      v111 = 0.0;
      v99 = 0.0;
      v103 = 0.0;
      v105 = 0.0;
      v97 = 0;
      v14.f64[0] = 0.0;
      v101 = v14;
LABEL_77:
      if (*(_BYTE *)(a2 + 11600))
      {
        v83 = *(_QWORD *)(a2 + 11576);
        if (*(_QWORD *)(a2 + 11568) != v83)
        {
          v14.f64[0] = *(float64_t *)(v83 - 8);
          v84.f64[0] = v105;
          *(_QWORD *)&v84.f64[1] = v97;
          v85 = vaddq_f64(v84, *(float64x2_t *)(v83 - 24));
          v86.f64[0] = v99;
          v86.f64[1] = v103;
          v87 = vaddq_f64(v86, *(float64x2_t *)(v83 - 40));
          v86.f64[0] = v109;
          v86.f64[1] = v111;
          v88 = vaddq_f64(v86, *(float64x2_t *)(v83 - 56));
          v84.f64[0] = v113;
          *(_QWORD *)&v84.f64[1] = v107;
          v118 = vaddq_f64(v84, *(float64x2_t *)(v83 - 72));
          v119[0] = v88;
          v119[1] = v87;
          v120 = v85;
          *(_QWORD *)&v121 = *(_OWORD *)&vaddq_f64(v101, v14);
        }
        sub_20FC6AD98(a2 + 11544, (__int128 *)&v118, *(double *)(*(_QWORD *)(a2 + 2512) - 8));
      }
      return;
    }
    if ((v10 & 0x8000000000000000) == 0)
    {
      v11 = (char *)operator new(v10);
      *a1 = (uint64_t *)v11;
      a1[1] = (uint64_t *)v11;
      a1[2] = (uint64_t *)&v11[8 * (v10 >> 3)];
      v12 = *(uint64_t **)(v7 + 72);
      v13 = *(uint64_t **)(v7 + 80);
      v121 = 0.0;
      v14.f64[1] = 0.0;
      v120 = 0u;
      v118 = 0u;
      memset(v119, 0, sizeof(v119));
      *a4 = 0;
      if (v12 != v13)
      {
        v113 = 0.0;
        v15 = (int8x16_t **)(v7 + 8);
        v107 = 0;
        v109 = 0.0;
        v111 = 0.0;
        v99 = 0.0;
        v103 = 0.0;
        v105 = 0.0;
        v97 = 0;
        v14.f64[0] = 0.0;
        v101 = v14;
        v95 = v15;
        while (1)
        {
          if (!sub_20FC6A33C(*v12, v15, *(_QWORD *)(a2 + 1784), &v116, *(double *)(a2 + 512)))
            goto LABEL_8;
          v26 = (unint64_t)a1[2];
          if ((unint64_t)v11 < v26)
          {
            *(_QWORD *)v11 = *v12;
            v16 = (uint64_t)(v11 + 8);
            goto LABEL_7;
          }
          v27 = (char *)*a1;
          v28 = v11 - (char *)*a1;
          v29 = v28 >> 3;
          v30 = (v28 >> 3) + 1;
          if (v30 >> 61)
            goto LABEL_89;
          v31 = v26 - (_QWORD)v27;
          if (v31 >> 2 > v30)
            v30 = v31 >> 2;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 61)
              goto LABEL_90;
            v33 = operator new(8 * v32);
            v34 = (uint64_t *)&v33[8 * v29];
            *v34 = *v12;
            v16 = (uint64_t)(v34 + 1);
            v35 = (char *)(v11 - v27);
            if (v11 == v27)
            {
LABEL_20:
              *a1 = v34;
              a1[1] = (uint64_t *)v16;
              a1[2] = (uint64_t *)&v33[8 * v32];
              if (!v11)
                goto LABEL_7;
LABEL_27:
              operator delete(v11);
              goto LABEL_7;
            }
          }
          else
          {
            v33 = 0;
            v34 = (uint64_t *)(8 * v29);
            *(_QWORD *)(8 * v29) = *v12;
            v16 = 8 * v29 + 8;
            v35 = (char *)(v11 - v27);
            if (v11 == v27)
              goto LABEL_20;
          }
          v36 = (unint64_t)(v35 - 8);
          if (v36 < 0x168)
          {
            v37 = v11;
            goto LABEL_25;
          }
          v39 = (v11 - 8 - v27) & 0xFFFFFFFFFFFFFFF8;
          if (&v33[v28 - 8 - v39] > &v33[v28 - 8])
            break;
          if (&v11[-v39 - 8] > v11 - 8)
          {
            v37 = v11;
            goto LABEL_25;
          }
          if ((unint64_t)(v11 - v33 - v28) < 0x20)
          {
            v37 = v11;
            goto LABEL_25;
          }
          v40 = (v36 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v11[-v41];
          v34 = (uint64_t *)((char *)v34 - v41);
          v42 = (float64x2_t *)&v33[8 * v29 - 16];
          v43 = (float64x2_t *)(v11 - 16);
          v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = v43[-1];
            v14 = *v43;
            v42[-1] = v21;
            *v42 = v14;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_25;
LABEL_26:
          v11 = (char *)*a1;
          *a1 = v34;
          a1[1] = (uint64_t *)v16;
          a1[2] = (uint64_t *)&v33[8 * v32];
          if (v11)
            goto LABEL_27;
LABEL_7:
          a1[1] = (uint64_t *)v16;
          v14.f64[0] = *(float64_t *)v119;
          v21.f64[0] = *((float64_t *)&v119[1] + 1);
          v25.f64[0] = v121;
          v22.f64[0] = v117;
          v17 = v116;
          v23.f64[0] = v117 * v116.f64[0];
          v24.f64[0] = vmuld_lane_f64(v117, v116, 1);
          v14 = vaddq_f64(v14, v23);
          v18 = (int8x16_t)vmlaq_n_f64(v118, v17, v17.f64[0]);
          v19 = vmlaq_laneq_f64(*(float64x2_t *)((char *)v119 + 8), v17, v17, 1);
          v20 = (int8x16_t)vmlaq_n_f64(v120, v116, v117);
          v99 = v19.f64[1];
          v101 = vmlaq_f64(v25, v22, v22);
          v107 = vextq_s8(v18, v18, 8uLL).u64[0];
          v109 = v14.f64[0];
          v97 = vextq_s8(v20, v20, 8uLL).u64[0];
          v111 = v19.f64[0];
          v113 = *(double *)v18.i64;
          v118 = (float64x2_t)v18;
          *(float64_t *)v119 = v14.f64[0];
          *(float64x2_t *)((char *)v119 + 8) = v19;
          *(_QWORD *)&v103 = *(_OWORD *)&vaddq_f64(v21, v24);
          v105 = *(double *)v20.i64;
          *((float64_t *)&v119[1] + 1) = v103;
          v120 = (float64x2_t)v20;
          v121 = v101.f64[0];
          ++*a4;
          v11 = (char *)v16;
          v15 = v95;
LABEL_8:
          if (++v12 == v13)
            goto LABEL_77;
        }
        v37 = v11;
        do
        {
LABEL_25:
          v38 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v34 = v38;
        }
        while (v37 != v27);
        goto LABEL_26;
      }
      v113 = 0.0;
      v107 = 0;
      v109 = 0.0;
      goto LABEL_76;
    }
LABEL_89:
    sub_20E867F44();
  }
  v45 = *(_QWORD *)(v6 + 16);
  v47 = *(_QWORD *)(v45 + 72);
  v46 = *(_QWORD *)(v45 + 80);
  a1[1] = 0;
  v48 = v46 - v47;
  *a3 = (unint64_t)(v46 - v47) >> 3;
  if (v46 == v47)
  {
    v52.f64[1] = 0.0;
    v121 = 0.0;
    v114 = 0.0;
    v108 = 0;
    v110 = 0.0;
    v120 = 0u;
    v118 = 0u;
    memset(v119, 0, sizeof(v119));
    *a4 = 0;
  }
  else
  {
    if (v48 < 0)
      goto LABEL_89;
    v49 = (char *)operator new(v48);
    *a1 = (uint64_t *)v49;
    a1[1] = (uint64_t *)v49;
    a1[2] = (uint64_t *)&v49[8 * (v48 >> 3)];
    v50 = *(uint64_t **)(v45 + 72);
    v51 = *(uint64_t **)(v45 + 80);
    v121 = 0.0;
    v52.f64[1] = 0.0;
    v120 = 0u;
    v118 = 0u;
    memset(v119, 0, sizeof(v119));
    *a4 = 0;
    if (v50 != v51)
    {
      v114 = 0.0;
      v53 = (int8x16_t **)(v45 + 8);
      v108 = 0;
      v110 = 0.0;
      v112 = 0.0;
      v100 = 0.0;
      v104 = 0.0;
      v106 = 0.0;
      v98 = 0;
      v52.f64[0] = 0.0;
      v102 = v52;
      v96 = v53;
      while (1)
      {
        if (!sub_20FC6A33C(*v50, v53, *(_QWORD *)(a2 + 1784), &v116, *(double *)(a2 + 512)))
          goto LABEL_44;
        v64 = (unint64_t)a1[2];
        if ((unint64_t)v49 < v64)
        {
          *(_QWORD *)v49 = *v50;
          v54 = (uint64_t)(v49 + 8);
          goto LABEL_43;
        }
        v65 = (char *)*a1;
        v66 = v49 - (char *)*a1;
        v67 = v66 >> 3;
        v68 = (v66 >> 3) + 1;
        if (v68 >> 61)
          goto LABEL_89;
        v69 = v64 - (_QWORD)v65;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
LABEL_90:
            sub_20E877A38();
          v71 = operator new(8 * v70);
          v72 = (uint64_t *)&v71[8 * v67];
          *v72 = *v50;
          v54 = (uint64_t)(v72 + 1);
          v73 = (char *)(v49 - v65);
          if (v49 == v65)
          {
LABEL_56:
            *a1 = v72;
            a1[1] = (uint64_t *)v54;
            a1[2] = (uint64_t *)&v71[8 * v70];
            if (!v49)
              goto LABEL_43;
LABEL_63:
            operator delete(v49);
            goto LABEL_43;
          }
        }
        else
        {
          v71 = 0;
          v72 = (uint64_t *)(8 * v67);
          *(_QWORD *)(8 * v67) = *v50;
          v54 = 8 * v67 + 8;
          v73 = (char *)(v49 - v65);
          if (v49 == v65)
            goto LABEL_56;
        }
        v74 = (unint64_t)(v73 - 8);
        if (v74 < 0x168)
        {
          v75 = v49;
          goto LABEL_61;
        }
        v77 = (v49 - 8 - v65) & 0xFFFFFFFFFFFFFFF8;
        if (&v71[v66 - 8 - v77] > &v71[v66 - 8])
          break;
        if (&v49[-v77 - 8] > v49 - 8)
        {
          v75 = v49;
          goto LABEL_61;
        }
        if ((unint64_t)(v49 - v71 - v66) < 0x20)
        {
          v75 = v49;
          goto LABEL_61;
        }
        v78 = (v74 >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v49[-v79];
        v72 = (uint64_t *)((char *)v72 - v79);
        v80 = (float64x2_t *)&v71[8 * v67 - 16];
        v81 = (float64x2_t *)(v49 - 16);
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v81[-1];
          v52 = *v81;
          v80[-1] = v59;
          *v80 = v52;
          v80 -= 2;
          v81 -= 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_61;
LABEL_62:
        v49 = (char *)*a1;
        *a1 = v72;
        a1[1] = (uint64_t *)v54;
        a1[2] = (uint64_t *)&v71[8 * v70];
        if (v49)
          goto LABEL_63;
LABEL_43:
        a1[1] = (uint64_t *)v54;
        v52.f64[0] = *(float64_t *)v119;
        v59.f64[0] = *((float64_t *)&v119[1] + 1);
        v63.f64[0] = v121;
        v60.f64[0] = v117;
        v55 = v116;
        v61.f64[0] = v117 * v116.f64[0];
        v62.f64[0] = vmuld_lane_f64(v117, v116, 1);
        v52 = vaddq_f64(v52, v61);
        v56 = (int8x16_t)vmlaq_n_f64(v118, v55, v55.f64[0]);
        v57 = vmlaq_laneq_f64(*(float64x2_t *)((char *)v119 + 8), v55, v55, 1);
        v58 = (int8x16_t)vmlaq_n_f64(v120, v116, v117);
        v100 = v57.f64[1];
        v102 = vmlaq_f64(v63, v60, v60);
        v108 = vextq_s8(v56, v56, 8uLL).u64[0];
        v110 = v52.f64[0];
        v98 = vextq_s8(v58, v58, 8uLL).u64[0];
        v112 = v57.f64[0];
        v114 = *(double *)v56.i64;
        v118 = (float64x2_t)v56;
        *(float64_t *)v119 = v52.f64[0];
        *(float64x2_t *)((char *)v119 + 8) = v57;
        *(_QWORD *)&v104 = *(_OWORD *)&vaddq_f64(v59, v62);
        v106 = *(double *)v58.i64;
        *((float64_t *)&v119[1] + 1) = v104;
        v120 = (float64x2_t)v58;
        v121 = v102.f64[0];
        ++*a4;
        v49 = (char *)v54;
        v53 = v96;
LABEL_44:
        if (++v50 == v51)
          goto LABEL_84;
      }
      v75 = v49;
      do
      {
LABEL_61:
        v76 = *((_QWORD *)v75 - 1);
        v75 -= 8;
        *--v72 = v76;
      }
      while (v75 != v65);
      goto LABEL_62;
    }
    v114 = 0.0;
    v108 = 0;
    v110 = 0.0;
  }
  v112 = 0.0;
  v100 = 0.0;
  v104 = 0.0;
  v106 = 0.0;
  v98 = 0;
  v52.f64[0] = 0.0;
  v102 = v52;
LABEL_84:
  if (*(_BYTE *)(a2 + 11600))
  {
    v89 = *(_QWORD *)(a2 + 11576);
    if (*(_QWORD *)(a2 + 11568) != v89)
    {
      v52.f64[0] = *(float64_t *)(v89 - 8);
      v90.f64[0] = v106;
      *(_QWORD *)&v90.f64[1] = v98;
      v91 = vaddq_f64(v90, *(float64x2_t *)(v89 - 24));
      v92.f64[0] = v100;
      v92.f64[1] = v104;
      v93 = vaddq_f64(v92, *(float64x2_t *)(v89 - 40));
      v92.f64[0] = v110;
      v92.f64[1] = v112;
      v94 = vaddq_f64(v92, *(float64x2_t *)(v89 - 56));
      v90.f64[0] = v114;
      *(_QWORD *)&v90.f64[1] = v108;
      v118 = vaddq_f64(v90, *(float64x2_t *)(v89 - 72));
      v119[0] = v94;
      v119[1] = v93;
      v120 = v91;
      *(_QWORD *)&v121 = *(_OWORD *)&vaddq_f64(v102, v52);
    }
    sub_20FC6AD98(a2 + 11544, (__int128 *)&v118, *(double *)(*(_QWORD *)(a2 + 2512) - 8));
  }
}

void sub_20F89A754(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F89A778(uint64_t a1, _QWORD *a2, uint64_t *a3, char **a4, unsigned int a5, unsigned int a6, int a7, int a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  _QWORD *v14;
  float64x2_t v15;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  const char *v41;
  size_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  float64_t *v47;
  uint64_t v48;
  uint64_t v49;
  float64_t *v50;
  float64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  int v60;
  unint64_t v61;
  float64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  __int128 v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  float64_t v85;
  unint64_t *v86;
  unint64_t v87;
  float64_t v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  int v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t prime;
  uint64_t v108;
  int8x8_t v109;
  unint64_t v110;
  uint8x8_t v111;
  uint64_t v112;
  uint64_t *i;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  char *v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t j;
  void *v127;
  double v128;
  uint64_t v129;
  double v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v144;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t *v161;
  char v162;
  unsigned int *v163;
  unsigned int *v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  double v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  double v179;
  double v180;
  double v181;
  double v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  double v193;
  double v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  unint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  int8x16_t v223;
  float64x2_t v224;
  int8x16_t v225;
  int8x16_t v226;
  float64x2_t v227;
  float64x2_t v228;
  int v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  size_t v233;
  const char *v234;
  unsigned __int8 v235;
  unsigned __int8 v236;
  const char *v237;
  size_t v238;
  float64_t *v239;
  uint64_t v240;
  uint64_t v241;
  float64_t *v242;
  uint64_t v243;
  uint64_t v244;
  float64_t v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  float64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  void *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  float64_t v274;
  unint64_t *v275;
  unint64_t v276;
  float64_t v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  __int128 *v284;
  __int128 *v285;
  __int128 v286;
  __int128 v287;
  char v288;
  int v289;
  BOOL v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  double *v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  double *v304;
  double v305;
  uint64_t v306;
  double v307;
  float64x2_t v311;
  float64x2_t v313;
  double v314;
  double v316;
  double v318;
  float64x2_t v319;
  int v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  double v332;
  uint64_t v333;
  uint64_t v334;
  BOOL v335;
  unsigned int v336;
  uint64_t v337;
  unint64_t k;
  unsigned __int8 v339;
  uint64_t m;
  uint64_t v341;
  unsigned __int8 v342;
  unsigned __int8 v343;
  uint64_t n;
  uint64_t v345;
  unsigned __int8 v346;
  uint64_t v347;
  unsigned int v348;
  _QWORD *v349;
  unsigned int v350;
  uint64_t *v352;
  uint64_t v353;
  double v356;
  double v358;
  double v359;
  double v360;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v365;
  double v368;
  float64x2_t v369;
  double v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  double *v379;
  __int128 v380;
  double v382;
  uint64_t v385;
  double v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  char *v396;
  uint64_t v397;
  int v398;
  unint64_t v399;
  _BYTE *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  size_t v416;
  void *v417;
  float64_t v418;
  float64_t v419;
  uint64_t v420;
  uint64_t v421;
  void **v422;
  uint64_t v423;
  size_t v424;
  const char *v425;
  unsigned __int8 v426;
  unsigned __int8 v427;
  const char *v428;
  size_t v429;
  _BYTE *v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  size_t v437;
  std::__shared_weak_count_vtbl *v438;
  std::__shared_weak_count *v439;
  size_t v440;
  size_t v441;
  uint64_t *v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  _QWORD *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  char *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  void **v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  float64_t v493;
  double *v496;
  _BYTE *v497;
  unsigned int v498;
  uint64_t v500;
  const char *v501;
  double v502;
  uint64_t v503;
  _QWORD *v506;
  int v507;
  double v508;
  uint64_t v509;
  uint64_t v510;
  int8x16_t v511;
  uint64_t v512;
  void *v513[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v515;
  const char *v516;
  int v517;
  const char *v518;
  uint64_t v519;
  std::__shared_weak_count *v520;
  void *v521[2];
  int64_t v522;
  uint64_t v523;
  __int128 v524;
  std::__shared_weak_count *v525;
  char *v526;
  std::__shared_weak_count *v527;
  uint64_t *v528;
  __int128 v529;
  float64x2_t object[3];
  float64x2_t v531;
  double v532;
  float64x2_t v533;
  void *v534;
  int v535;
  char v536;
  float64_t v537;
  int v538;
  uint64_t v539;
  _BYTE v540[24];
  __int128 v541;
  char *v542;
  const char *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  _QWORD v546[5];

  v14 = a2;
  v546[2] = *MEMORY[0x24BDAC8D0];
  v15.f64[1] = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_QWORD *)(a1 + 128) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 166) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 197) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  v496 = (double *)(a1 + 224);
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_DWORD *)(a1 + 208) = a7;
  *(_DWORD *)(a1 + 212) = a8;
  v19 = *(_QWORD *)(a2[994] + 16);
  v498 = *(_DWORD *)(v19 + 16);
  v20 = *(_QWORD **)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(unsigned __int8 *)v20;
  if ((char)v22 <= -2)
  {
    do
    {
      v23 = (__clz(__rbit64(((*v20 >> 7) & ~*v20 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v20 = (_QWORD *)((char *)v20 + v23);
      v21 += 32 * v23;
    }
    while (*(char *)v20 < -1);
    v22 = *(unsigned __int8 *)v20;
  }
  if (v22 == 255)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v21 + 16) + 504) - *(_QWORD *)(*(_QWORD *)(v21 + 16) + 496) < 0x140uLL)
        ++v24;
      v26 = *((char *)v20 + 1);
      v20 = (_QWORD *)((char *)v20 + 1);
      LOBYTE(v25) = v26;
      v21 += 32;
      if (v26 <= -2)
      {
        do
        {
          v27 = (__clz(__rbit64(((*v20 >> 7) & ~*v20 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v20 = (_QWORD *)((char *)v20 + v27);
          v21 += 32 * v27;
          v25 = *(char *)v20;
        }
        while (v25 < -1);
      }
    }
    while (v25 != 255);
  }
  v510 = a1 + 376;
  v28 = *a3;
  v29 = a3[1];
  if (*a3 == v29)
  {
    v30 = 0;
  }
  else
  {
    v30 = 0;
    v31 = a1 + 336;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)v28 + 496);
      v32 = *(_QWORD *)(*(_QWORD *)v28 + 504);
      *(_QWORD *)v540 = ((unint64_t)*(unsigned int *)(v33 + 16) >> 16) | ((unint64_t)(unsigned __int16)*(_DWORD *)(v33 + 16) << 32);
      *(_QWORD *)&object[0].f64[0] = v540;
      v34 = sub_20F2CE5F0(v31, (unsigned int *)v540, (uint64_t)&unk_2102DB95C, object);
      v30 += (unint64_t)(v32 - v33) >> 6;
      ++*((_DWORD *)v34 + 5);
      v28 += 8;
    }
    while (v28 != v29);
  }
  v497 = v14 + 1450;
  v35 = (uint64_t *)(a1 + 352);
  v506 = v14;
  while (1)
  {
    v35 = (uint64_t *)*v35;
    if (!v35)
      break;
    sub_20F82FD50(&v528);
    if (*(int *)v528[7] > 2)
      goto LABEL_19;
    v36 = *((unsigned __int8 *)v528 + 72);
    v37 = sub_20E8C31DC((uint64_t)v528, "OSLogSurrogateAppender", 1, 0);
    v38 = v37;
    if (!v36 && v37 == 0)
      goto LABEL_19;
    *(_QWORD *)v540 = &v528;
    *(std::chrono::steady_clock::time_point *)&v540[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v540[16] = std::chrono::system_clock::now();
    LODWORD(v541) = 2;
    *((_QWORD *)&v541 + 1) = "unknown file";
    LODWORD(v542) = 6063;
    v543 = "unknown function";
    v544 = 0;
    v545 = 0;
    v40 = **(_QWORD **)v540;
    v41 = (const char *)(**(_QWORD **)v540 + 16);
    v501 = v41;
    if (*(char *)(**(_QWORD **)v540 + 39) < 0)
    {
      v41 = *(const char **)(v40 + 16);
      v42 = *(_QWORD *)(v40 + 24);
      v500 = **(_QWORD **)v540;
      v507 = v36;
      v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v44 & 1) != 0)
        goto LABEL_30;
    }
    else
    {
      v42 = *(unsigned __int8 *)(**(_QWORD **)v540 + 39);
      v500 = **(_QWORD **)v540;
      v507 = v36;
      v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v43 & 1) != 0)
        goto LABEL_30;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v513);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v513);
      if ((_BYTE)v515 && SHIBYTE(rep) < 0)
        operator delete(v513[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_30:
    if (byte_254A4A4F8[23] >= 0)
      v45 = byte_254A4A4F8;
    else
      v45 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v46 = byte_254A4A4F8[23];
    else
      v46 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)&object[0].f64[0] = os_log_create(v45, v41);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v46 >= 0x17)
    {
      v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v48 = v46 | 7;
      v49 = v48 + 1;
      v47 = (float64_t *)operator new(v48 + 1);
      *(_QWORD *)&object[1].f64[0] = v46;
      *(_QWORD *)&object[1].f64[1] = v49 | 0x8000000000000000;
      *(_QWORD *)&object[0].f64[1] = v47;
LABEL_43:
      memmove(v47, v45, v46);
      goto LABEL_44;
    }
    HIBYTE(object[1].f64[1]) = v46;
    v47 = &object[0].f64[1];
    if (v46)
      goto LABEL_43;
LABEL_44:
    *((_BYTE *)v47 + v46) = 0;
    LOBYTE(object[2].f64[0]) = 1;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v14 = v506;
    if (v42 >= 0x17)
    {
      v52 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v52 = v42 | 7;
      v53 = v52 + 1;
      v50 = (float64_t *)operator new(v52 + 1);
      *(_QWORD *)&v531.f64[0] = v42;
      *(_QWORD *)&v531.f64[1] = v53 | 0x8000000000000000;
      *(_QWORD *)&object[2].f64[1] = v50;
    }
    else
    {
      HIBYTE(v531.f64[1]) = v42;
      v50 = &object[2].f64[1];
      if (!v42)
      {
        LOBYTE(object[2].f64[1]) = 0;
        LOBYTE(v532) = 1;
        v51 = object[0].f64[0];
        if ((SHIBYTE(v531.f64[1]) & 0x80000000) == 0)
          goto LABEL_48;
        goto LABEL_54;
      }
    }
    memmove(v50, v41, v42);
    *((_BYTE *)v50 + v42) = 0;
    LOBYTE(v532) = 1;
    v51 = object[0].f64[0];
    if ((SHIBYTE(v531.f64[1]) & 0x80000000) == 0)
    {
LABEL_48:
      if (!LOBYTE(object[2].f64[0]))
        goto LABEL_57;
      goto LABEL_55;
    }
LABEL_54:
    operator delete(*(void **)&object[2].f64[1]);
    if (!LOBYTE(object[2].f64[0]))
      goto LABEL_57;
LABEL_55:
    if (SHIBYTE(object[1].f64[1]) < 0)
      operator delete(*(void **)&object[0].f64[1]);
LABEL_57:
    if (*(_QWORD *)&object[0].f64[0])
      os_release(*(void **)&object[0].f64[0]);
    if (!v38 || !*(_QWORD *)(v38 + 24))
    {
      os_log_type_enabled(*(os_log_t *)&v51, OS_LOG_TYPE_DEBUG);
      v91 = *((_DWORD *)v35 + 4);
      v92 = *((_DWORD *)v35 + 5);
      LODWORD(object[0].f64[0]) = 67109376;
      HIDWORD(object[0].f64[0]) = v91;
      LOWORD(object[0].f64[1]) = 1024;
      *(_DWORD *)((char *)&object[0].f64[1] + 2) = v92;
      v93 = (void *)_os_log_send_and_compose_impl();
      v60 = v507;
      if (v93)
        free(v93);
      goto LABEL_104;
    }
    v54 = _os_log_pack_size();
    v55 = (std::__shared_weak_count_vtbl *)operator new(v54, (std::align_val_t)8uLL);
    v56 = (std::__shared_weak_count *)operator new();
    v57 = v56;
    v56->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    v56->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v56->__shared_weak_owners_ = 0;
    v56[1].__vftable = v55;
    *(_QWORD *)&object[0].f64[0] = v55;
    *(_QWORD *)&object[0].f64[1] = v55;
    *(_QWORD *)&object[1].f64[0] = v56;
    do
      v59 = __ldxr(p_shared_owners);
    while (__stxr(v59 + 1, p_shared_owners));
    object[1].f64[1] = 0.0;
    object[2] = 0uLL;
    v60 = v507;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v57);
    }
    v62 = object[0].f64[0];
    v63 = _os_log_pack_fill();
    v64 = *((_DWORD *)v35 + 4);
    v65 = *((_DWORD *)v35 + 5);
    *(_DWORD *)v63 = 67109376;
    *(_DWORD *)(v63 + 4) = v64;
    *(_WORD *)(v63 + 8) = 1024;
    *(_DWORD *)(v63 + 10) = v65;
    v66 = (char *)operator new();
    v67 = *(unsigned __int8 *)(v500 + 39);
    v68 = *(const char **)(v500 + 16);
    v69 = *(_QWORD *)(v500 + 24);
    v70 = *(__int128 *)((char *)&object[1] + 8);
    *(float64x2_t *)(v66 + 8) = *(float64x2_t *)((char *)object + 8);
    if ((v67 & 0x80u) != 0)
      v67 = v69;
    else
      v68 = v501;
    *(float64_t *)v66 = v62;
    object[0].f64[1] = 0.0;
    object[1].f64[0] = 0.0;
    *(_OWORD *)(v66 + 24) = v70;
    object[1].f64[1] = 0.0;
    object[2].f64[0] = 0.0;
    *((_QWORD *)v66 + 5) = v68;
    *((_QWORD *)v66 + 6) = v67;
    v66[56] = 2;
    *(_QWORD *)&v524 = 0;
    v513[0] = v66;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), v513);
    v71 = v513[0];
    v513[0] = 0;
    if (v71)
    {
      v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 4);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)v71 + 2);
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
      v78 = v524;
      *(_QWORD *)&v524 = 0;
      if (v78)
      {
        v79 = *(std::__shared_weak_count **)(v78 + 32);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = *(std::__shared_weak_count **)(v78 + 16);
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
      }
    }
    v85 = object[2].f64[0];
    if (!*(_QWORD *)&object[2].f64[0])
      goto LABEL_97;
    v86 = (unint64_t *)(*(_QWORD *)&object[2].f64[0] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v85 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v85));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v85);
      v88 = object[1].f64[0];
      if (*(_QWORD *)&object[1].f64[0])
      {
LABEL_98:
        v89 = (unint64_t *)(*(_QWORD *)&v88 + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v88 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v88));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v88);
        }
      }
    }
    else
    {
LABEL_97:
      v88 = object[1].f64[0];
      if (*(_QWORD *)&object[1].f64[0])
        goto LABEL_98;
    }
LABEL_104:
    if (v60)
    {
      sub_20E8C003C((uint64_t)v540, "[CA] Camera %u has %d tracks", *((_DWORD *)v35 + 4), *((_DWORD *)v35 + 5));
      sub_20E863570((uint64_t)v540);
    }
    sub_20E863570((uint64_t)v540);
    v94 = v545;
    if (v545)
    {
      v95 = (unint64_t *)&v545->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
LABEL_19:
    kdebug_trace();
  }
  v98 = *a4;
  v97 = a4[1];
  if (*a4 != v97)
  {
    v99 = v97 - v98 - 8;
    if (v99 < 8)
    {
      v100 = *a4;
      goto LABEL_124;
    }
    v101 = 0;
    v102 = (v99 >> 3) + 1;
    v100 = &v98[8 * (v102 & 0x3FFFFFFFFFFFFFFELL)];
    v103 = v98 + 8;
    v104 = v102 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v30 += (*(_QWORD *)(*(v103 - 1) + 504) - *(_QWORD *)(*(v103 - 1) + 496)) >> 6;
      v101 += (*(_QWORD *)(*v103 + 504) - *(_QWORD *)(*v103 + 496)) >> 6;
      v103 += 2;
      v104 -= 2;
    }
    while (v104);
    v30 += v101;
    if (v102 != (v102 & 0x3FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_124:
        v105 = *(_QWORD *)v100;
        v100 += 8;
        v30 += (*(_QWORD *)(v105 + 504) - *(_QWORD *)(v105 + 496)) >> 6;
      }
      while (v100 != v97);
    }
  }
  v106 = *(_QWORD *)v14[994];
  prime = vcvtps_u32_f32((float)*(unint64_t *)(v106 + 344) / *(float *)(a1 + 264));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v108 = a1 + 232;
  v109 = *(int8x8_t *)(a1 + 240);
  if (prime > *(_QWORD *)&v109)
    goto LABEL_130;
  if (prime < *(_QWORD *)&v109)
  {
    v110 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
    if (*(_QWORD *)&v109 < 3uLL || (v111 = (uint8x8_t)vcnt_s8(v109), v111.i16[0] = vaddlv_u8(v111), v111.u32[0] > 1uLL))
    {
      v110 = std::__next_prime(v110);
    }
    else
    {
      v112 = 1 << -(char)__clz(v110 - 1);
      if (v110 >= 2)
        v110 = v112;
    }
    if (prime <= v110)
      prime = v110;
    if (prime < *(_QWORD *)&v109)
LABEL_130:
      sub_20E8D2B3C(v108, prime);
  }
  for (i = *(uint64_t **)(v106 + 336); i; i = (uint64_t *)*i)
  {
    v114 = *((_DWORD *)i + 4);
    LODWORD(v513[0]) = v114;
    v115 = *a3;
    v116 = a3[1];
    if (*a3 == v116)
    {
      v117 = 0;
    }
    else
    {
      v117 = 0;
      do
      {
        v118 = *(_QWORD *)(*(_QWORD *)v115 + 496);
        v119 = *(_QWORD *)(*(_QWORD *)v115 + 504);
        if (v118 != v119)
        {
          while (*(_DWORD *)(v118 + 16) != v114)
          {
            v118 += 64;
            if (v118 == v119)
            {
              v118 = *(_QWORD *)(*(_QWORD *)v115 + 504);
              break;
            }
          }
        }
        if (v118 != v119)
          ++v117;
        v115 += 8;
      }
      while (v115 != v116);
    }
    v120 = sub_20F873114(v14, v114) || sub_20F873254(v14, v513[0]);
    LODWORD(object[0].f64[0]) = v117;
    BYTE4(object[0].f64[0]) = v120;
    *(float64x2_t *)((char *)object + 8) = 0u;
    *(float64x2_t *)((char *)&object[1] + 8) = 0u;
    LODWORD(object[2].f64[1]) = 1065353216;
    *(_QWORD *)v540 = v513;
    v121 = sub_20F3E4A48(v108, (unsigned int *)v513, (uint64_t)&unk_2102DB95C, (_DWORD **)v540);
    v122 = v121;
    *((_DWORD *)v121 + 6) = LODWORD(object[0].f64[0]);
    v121[28] = BYTE4(object[0].f64[0]);
    if (*((_QWORD *)v121 + 7))
    {
      v123 = (_QWORD *)*((_QWORD *)v121 + 6);
      if (v123)
      {
        do
        {
          v124 = (_QWORD *)*v123;
          operator delete(v123);
          v123 = v124;
        }
        while (v124);
      }
      *((_QWORD *)v122 + 6) = 0;
      v125 = *((_QWORD *)v122 + 5);
      if (v125)
      {
        for (j = 0; j != v125; ++j)
          *(_QWORD *)(*((_QWORD *)v122 + 4) + 8 * j) = 0;
      }
      *((_QWORD *)v122 + 7) = 0;
      v14 = v506;
    }
    v127 = (void *)*((_QWORD *)v122 + 4);
    *((_QWORD *)v122 + 4) = 0;
    if (v127)
      operator delete(v127);
    *((_QWORD *)v122 + 5) = 0;
    *((_QWORD *)v122 + 6) = 0;
    *((_QWORD *)v122 + 7) = 0;
    *((_DWORD *)v122 + 16) = 1065353216;
    *(_QWORD *)&object[0].f64[0] = v513;
    *((_DWORD *)sub_20F2CE5F0(v510, (unsigned int *)v513, (uint64_t)&unk_2102DB95C, object) + 5) = 0;
  }
  *(_DWORD *)(a1 + 176) = v30;
  *(_DWORD *)(a1 + 180) = v498;
  *(_DWORD *)(a1 + 188) = a6;
  if (a6 < (unint64_t)((a3[1] - *a3) >> 3)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6095, (uint64_t)"num_tracks_has_sufficient_inlier_measurements >= inlier_tracks.size()", 69, (uint64_t)"Number of good tracks cannot be smaller than num inlier tracks.", 63, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_611;
  }
  v128 = (double)v498;
  if (!v498)
    v128 = 1.0;
  v129 = a1;
  *(_DWORD *)(a1 + 184) = (v14[1534] - v14[1533]) >> 3;
  *(double *)(a1 + 16) = (double)a6 / v128;
  *(double *)(a1 + 24) = (double)v24 / v128;
  v130 = (double)v30;
  if (!v30)
    v130 = 1.0;
  v131 = (double)a5 / v130;
  *(double *)a1 = v131;
  *(double *)(a1 + 8) = 1.0 - v131;
  v132 = v14[644];
  v133 = 0x2492492492492493 * ((uint64_t)(v14[633] - v14[632]) >> 3)
       + ((uint64_t)(v14[636] - v14[635]) >> 4)
       + ((uint64_t)(v14[639] - v14[638]) >> 3)
       + ((uint64_t)(v14[642] - v14[641]) >> 3)
       + 1;
  v134 = *(double *)(v132 + 24 * v133);
  v135 = *(double *)(v132 + 32 * v133);
  if (*(double *)(v132 + 40 * v133) < v135)
    v135 = *(double *)(v132 + 40 * v133);
  if (v135 < v134)
    v134 = v135;
  *(double *)(a1 + 40) = v134;
  v136 = *(double *)(v132 + 72 * v133);
  v137 = *(double *)(v132 + 80 * v133);
  v138 = 88 * v133;
  if (*(double *)(v132 + v138) < v137)
    v137 = *(double *)(v132 + v138);
  if (v137 < v136)
    v136 = v137;
  *(double *)(a1 + 32) = v136;
  if (*(_BYTE *)(v14[320] - 40))
  {
    *(_QWORD *)(a1 + 48) = 0;
    v139 = *(_QWORD **)(v14[994] + 72);
    if (v139)
      goto LABEL_185;
LABEL_183:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6128, (uint64_t)"viodatabase()->inertial_measurements()", 38, (uint64_t)"No imu measurmeent available", 28, (void (*)(void **))sub_21023DDB0))
    {
      v139 = *(_QWORD **)(v14[994] + 72);
      v129 = a1;
      goto LABEL_185;
    }
LABEL_611:
    abort();
  }
  v140 = v14[285];
  _Q1 = *(_OWORD *)(v140 + 96);
  _D3 = *(_QWORD *)(v140 + 104);
  __asm { FMLA            D2, D3, V1.D[1] }
  *(double *)(a1 + 48) = sqrt(_D2 + *(double *)(v140 + 112) * *(double *)(v140 + 112));
  v139 = *(_QWORD **)(v14[994] + 72);
  if (!v139)
    goto LABEL_183;
LABEL_185:
  v144 = *v139 + 56 * v139[3];
  _Q1 = *(float64x2_t *)(v144 + 8);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = *(_QWORD *)(v144 + 16);
  __asm { FMLA            D2, D3, V1.D[1] }
  *(double *)(v129 + 56) = sqrt(_Q2.f64[0] + *(double *)(v144 + 24) * *(double *)(v144 + 24));
  *(double *)(v129 + 80) = a9;
  v148 = v14[303];
  v149 = (v14[304] - v148) >> 5;
  v150 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v14[286] - v14[285]) >> 3);
  if (v149 == v150)
  {
    v151 = a1;
    *(_BYTE *)(a1 + 168) = (*(_BYTE *)(v148 + 24) & 0x20) != 0;
    v152 = v14[310];
    v153 = v14[311];
    if (v152 == v153)
      goto LABEL_264;
  }
  else
  {
    v151 = a1;
    *(_BYTE *)(a1 + 168) = 0;
    v152 = v14[310];
    v153 = v14[311];
    if (v152 == v153)
      goto LABEL_264;
  }
  v154 = ((unint64_t)(v153 - v152) >> 2) - 1;
  v155 = *(_DWORD *)(v152 + 4 * v154);
  *(_QWORD *)(v151 + 88) = *(_QWORD *)(v14[313] + 8 * v154);
  if (v149 == v150)
    v156 = (*(unsigned __int8 *)(v148 + 32 * v154 + 24) >> 5) & 1;
  else
    LOBYTE(v156) = 0;
  *(_BYTE *)(a1 + 170) = v156;
  *(_DWORD *)(a1 + 192) = 0;
  v157 = *a3;
  v158 = a3[1];
  if (*a3 != v158)
  {
    do
    {
      v159 = *(unsigned int **)(*(_QWORD *)v157 + 496);
      v160 = *(unsigned int **)(*(_QWORD *)v157 + 504);
      if (v160 != v159)
      {
        if (v159[4] == *(v160 - 12))
        {
          if (*(v160 - 14) == v155)
          {
            ++*(_DWORD *)(a1 + 192);
            *(_QWORD *)&object[0].f64[0] = v160 - 12;
            v161 = sub_20F2CE5F0(v510, v160 - 12, (uint64_t)&unk_2102DB95C, object);
            ++*((_DWORD *)v161 + 5);
          }
        }
        else
        {
          v162 = 0;
          v163 = v159 + 4;
          do
          {
            if (*(v163 - 2) == v155)
            {
              *(_QWORD *)&object[0].f64[0] = v163;
              v165 = sub_20F2CE5F0(v510, v163, (uint64_t)&unk_2102DB95C, object);
              ++*((_DWORD *)v165 + 5);
              v162 = 1;
            }
            v164 = v163 + 12;
            v163 += 16;
          }
          while (v164 != v160);
          *(_DWORD *)(a1 + 192) += v162 & 1;
        }
      }
      v157 += 8;
    }
    while (v157 != v158);
  }
  v166 = (_QWORD *)(a1 + 392);
  while (1)
  {
    v166 = (_QWORD *)*v166;
    if (!v166)
      break;
    kdebug_trace();
  }
  v167 = v14[285] + 168 * v154;
  _Q1 = *(float64x2_t *)(v167 + 96);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = *(_QWORD *)(v167 + 104);
  __asm { FMLA            D2, D3, V1.D[1] }
  *(double *)(a1 + 64) = sqrt(_Q2.f64[0] + *(double *)(v167 + 112) * *(double *)(v167 + 112));
  v169 = *(double *)(v167 + 144);
  *((double *)v14 + 1726) = v169 + *((double *)v14 + 1726);
  *((double *)v14 + 1727) = v169 * v169 + *((double *)v14 + 1727);
  ++v14[1732];
  _Q1.f64[0] = v169 + *((double *)v14 + 1728);
  v14[1728] = *(_QWORD *)&_Q1.f64[0];
  _Q2.f64[0] = v169 * v169 + *((double *)v14 + 1729);
  v14[1729] = *(_QWORD *)&_Q2.f64[0];
  v170 = v14[1722];
  v171 = v14[1717];
  v172 = (v14[1718] - v171) >> 3;
  if (v170 >= v172)
  {
    v173 = *(double *)(v171 + 8 * v14[1720]);
    *((double *)v14 + 1728) = _Q1.f64[0] - v173;
    *((double *)v14 + 1729) = _Q2.f64[0] - v173 * v173;
  }
  v174 = v14[1721];
  *(double *)(v171 + 8 * v174) = v169;
  v175 = v174 + 1;
  if (v174 + 1 >= v172)
    v176 = v172;
  else
    v176 = 0;
  v14[1721] = v175 - v176;
  if (v170 == v172)
  {
    v177 = v14[1720] + 1;
    if (v177 >= v170)
      v178 = v170;
    else
      v178 = 0;
    v14[1720] = v177 - v178;
  }
  else
  {
    v14[1722] = ++v170;
  }
  v179 = *((double *)v14 + 1730);
  if (v179 < v169)
    v179 = v169;
  *((double *)v14 + 1730) = v179;
  if (*((double *)v14 + 1731) <= v169)
    v169 = *((double *)v14 + 1731);
  *((double *)v14 + 1731) = v169;
  v180 = *(double *)(v167 + 152);
  *((double *)v14 + 1743) = v180 + *((double *)v14 + 1743);
  *((double *)v14 + 1744) = v180 * v180 + *((double *)v14 + 1744);
  ++v14[1749];
  v181 = v180 + *((double *)v14 + 1745);
  *((double *)v14 + 1745) = v181;
  v182 = v180 * v180 + *((double *)v14 + 1746);
  *((double *)v14 + 1746) = v182;
  v183 = v14[1739];
  v184 = v14[1734];
  v185 = (v14[1735] - v184) >> 3;
  if (v183 >= v185)
  {
    v186 = *(double *)(v184 + 8 * v14[1737]);
    *((double *)v14 + 1745) = v181 - v186;
    *((double *)v14 + 1746) = v182 - v186 * v186;
  }
  v187 = v14[1738];
  *(double *)(v184 + 8 * v187) = v180;
  v188 = v187 + 1;
  if (v187 + 1 >= v185)
    v189 = v185;
  else
    v189 = 0;
  v14[1738] = v188 - v189;
  if (v183 == v185)
  {
    v190 = v14[1737] + 1;
    if (v190 >= v183)
      v191 = v183;
    else
      v191 = 0;
    v14[1737] = v190 - v191;
  }
  else
  {
    v14[1739] = ++v183;
  }
  v192 = *((double *)v14 + 1747);
  if (v192 < v180)
    v192 = v180;
  *((double *)v14 + 1747) = v192;
  if (*((double *)v14 + 1748) <= v180)
    v180 = *((double *)v14 + 1748);
  *((double *)v14 + 1748) = v180;
  v193 = *(double *)(v167 + 160);
  *((double *)v14 + 1760) = v193 + *((double *)v14 + 1760);
  *((double *)v14 + 1761) = v193 * v193 + *((double *)v14 + 1761);
  ++v14[1766];
  v194 = v193 + *((double *)v14 + 1762);
  *((double *)v14 + 1762) = v194;
  _Q2.f64[0] = v193 * v193 + *((double *)v14 + 1763);
  v14[1763] = *(_QWORD *)&_Q2.f64[0];
  v195 = v14[1756];
  v196 = v14[1751];
  v197 = (v14[1752] - v196) >> 3;
  if (v195 >= v197)
  {
    v198 = *(double *)(v196 + 8 * v14[1754]);
    *((double *)v14 + 1762) = v194 - v198;
    *((double *)v14 + 1763) = _Q2.f64[0] - v198 * v198;
  }
  v199 = v14[1755];
  *(double *)(v196 + 8 * v199) = v193;
  v200 = v199 + 1;
  if (v199 + 1 >= v197)
    v201 = v197;
  else
    v201 = 0;
  v14[1755] = v200 - v201;
  if (v195 == v197)
  {
    v202 = v14[1754] + 1;
    if (v202 < v195)
      v195 = 0;
    v14[1754] = v202 - v195;
  }
  else
  {
    v14[1756] = v195 + 1;
  }
  v203 = *((double *)v14 + 1764);
  if (v203 < v193)
    v203 = v193;
  *((double *)v14 + 1764) = v203;
  _Q1.f64[0] = (float64_t)v14[1765];
  if (_Q1.f64[0] <= v193)
    v193 = *((double *)v14 + 1765);
  *((double *)v14 + 1765) = v193;
  v151 = a1;
  if (v14[1556] && *(_BYTE *)(a1 + 170))
  {
    v204 = 0.0;
    if (v170 < 2
      || (v205 = 1.0 / (double)v170 * *((double *)v14 + 1729)
               - 1.0 / (double)v170 * *((double *)v14 + 1728) * (1.0 / (double)v170 * *((double *)v14 + 1728)),
          v205 < 0.0))
    {
      v205 = 0.0;
    }
    if (v183 >= 2
      && (v206 = 1.0 / (double)v183,
          v207 = v206 * *((double *)v14 + 1745),
          v208 = v206 * *((double *)v14 + 1746),
          v209 = v207 * v207,
          v208 - v209 >= 0.0))
    {
      v204 = v208 - v209;
      v210 = v14[1756];
      v211 = 0.0;
      if (v210 >= 2)
        goto LABEL_259;
    }
    else
    {
      v210 = v14[1756];
      v211 = 0.0;
      if (v210 >= 2)
      {
LABEL_259:
        v212 = 1.0 / (double)v210;
        v213 = v212 * *((double *)v14 + 1762);
        v214 = v212 * *((double *)v14 + 1763);
        v215 = v213 * v213;
        if (v214 - v215 >= 0.0)
          v211 = v214 - v215;
      }
    }
    v151 = a1;
    sub_20F806290((uint64_t *)v14[1556], sqrt(v205), sqrt(v204), sqrt(v211));
  }
LABEL_264:
  v216 = *((unsigned int *)v14 + 1327);
  v217 = *((_DWORD *)v14 + 1326);
  *(_DWORD *)(v151 + 196) = v216;
  *(_DWORD *)(v151 + 200) = v217;
  *(_BYTE *)(v151 + 204) = v14[162] < v216;
  if (*v497)
  {
    v218 = v14[1447];
    v219 = (float64x2_t *)v14[1446];
    if (0x8E38E38E38E38E39 * ((v218 - (uint64_t)v219) >> 3) >= 2)
    {
      v15.f64[0] = *(float64_t *)(v218 - 8);
      a13.f64[0] = v219[4].f64[0];
      v220 = *v219;
      v221 = v219[1];
      v222 = v219[2];
      v223 = (int8x16_t)vsubq_f64(v15, a13);
      v224 = vsubq_f64(*(float64x2_t *)(v218 - 40), v222);
      v225 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v218 - 56), v221);
      v226 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v218 - 72), *v219);
      v535 = 2;
      object[0] = (float64x2_t)v226;
      v226.i64[0] = v225.i64[0];
      object[2] = v224;
      *(_QWORD *)&v224.f64[0] = v225.i64[0];
      v531 = v224;
      object[1] = (float64x2_t)v226;
      v532 = *(double *)v223.i64;
      sub_20EB7DFF4(object[0].f64, v533.f64, v223, v226, v225, v224, a13.f64[0], v220.f64[0], v221.f64[0], v222);
      *(_QWORD *)&v227.f64[0] = v534;
      v228.f64[0] = 1.0;
      if (*(double *)&v534 != 0.0)
        v228.f64[0] = 1.0 / *(double *)&v534;
      *(_QWORD *)&v508 = *(_OWORD *)&vmulq_f64(v227, v228);
      v511 = (int8x16_t)vmulq_n_f64(v533, v228.f64[0]);
      *(_QWORD *)&v502 = vextq_s8(v511, v511, 8uLL).u64[0];
    }
    else
    {
      v15.f64[0] = 0.0;
      v511 = (int8x16_t)v15;
      v502 = 0.0;
      v508 = 0.0;
    }
    sub_20F82FD50(&v528);
    if (*(int *)v528[7] <= 2)
    {
      v229 = *((unsigned __int8 *)v528 + 72);
      v230 = sub_20E8C31DC((uint64_t)v528, "OSLogSurrogateAppender", 1, 0);
      v231 = v230;
      if (v229 || v230)
      {
        *(_QWORD *)v540 = &v528;
        *(std::chrono::steady_clock::time_point *)&v540[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v540[16] = std::chrono::system_clock::now();
        LODWORD(v541) = 2;
        *((_QWORD *)&v541 + 1) = "unknown file";
        LODWORD(v542) = 6222;
        v544 = 0;
        v545 = 0;
        v543 = "unknown function";
        v232 = **(_QWORD **)v540;
        if (*(char *)(**(_QWORD **)v540 + 39) < 0)
        {
          v234 = *(const char **)(v232 + 16);
          v233 = *(_QWORD *)(v232 + 24);
          v236 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v236 & 1) == 0)
          {
LABEL_615:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if (LOBYTE(object[1].f64[1]) && SHIBYTE(object[1].f64[0]) < 0)
                operator delete(*(void **)&object[0].f64[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v233 = *(unsigned __int8 *)(**(_QWORD **)v540 + 39);
          v234 = (const char *)(v232 + 16);
          v235 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v235 & 1) == 0)
            goto LABEL_615;
        }
        if (byte_254A4A4F8[23] >= 0)
          v237 = byte_254A4A4F8;
        else
          v237 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v238 = byte_254A4A4F8[23];
        else
          v238 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)&object[0].f64[0] = os_log_create(v237, v234);
        v239 = &object[0].f64[1];
        if (v238 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v238 >= 0x17)
        {
          v240 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v238 | 7) != 0x17)
            v240 = v238 | 7;
          v241 = v240 + 1;
          v239 = (float64_t *)operator new(v240 + 1);
          *(_QWORD *)&object[1].f64[0] = v238;
          *(_QWORD *)&object[1].f64[1] = v241 | 0x8000000000000000;
          *(_QWORD *)&object[0].f64[1] = v239;
        }
        else
        {
          HIBYTE(object[1].f64[1]) = v238;
          if (!v238)
          {
LABEL_291:
            *((_BYTE *)v239 + v238) = 0;
            LOBYTE(object[2].f64[0]) = 1;
            v242 = &object[2].f64[1];
            if (v233 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v233 >= 0x17)
            {
              v243 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v233 | 7) != 0x17)
                v243 = v233 | 7;
              v244 = v243 + 1;
              v242 = (float64_t *)operator new(v243 + 1);
              *(_QWORD *)&v531.f64[0] = v233;
              *(_QWORD *)&v531.f64[1] = v244 | 0x8000000000000000;
              *(_QWORD *)&object[2].f64[1] = v242;
            }
            else
            {
              HIBYTE(v531.f64[1]) = v233;
              if (!v233)
              {
LABEL_299:
                *((_BYTE *)v242 + v233) = 0;
                LOBYTE(v532) = 1;
                v245 = object[0].f64[0];
                if (SHIBYTE(v531.f64[1]) < 0)
                  operator delete(*(void **)&object[2].f64[1]);
                if (LOBYTE(object[2].f64[0]) && SHIBYTE(object[1].f64[1]) < 0)
                  operator delete(*(void **)&object[0].f64[1]);
                if (*(_QWORD *)&object[0].f64[0])
                  os_release(*(void **)&object[0].f64[0]);
                if (v231 && *(_QWORD *)(v231 + 24))
                {
                  v246 = _os_log_pack_size();
                  v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
                  v248 = (std::__shared_weak_count *)operator new();
                  v249 = v248;
                  v248->__shared_owners_ = 0;
                  v250 = (unint64_t *)&v248->__shared_owners_;
                  v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v248->__shared_weak_owners_ = 0;
                  v248[1].__vftable = v247;
                  *(_QWORD *)&object[0].f64[0] = v247;
                  *(_QWORD *)&object[0].f64[1] = v247;
                  *(_QWORD *)&object[1].f64[0] = v248;
                  do
                    v251 = __ldxr(v250);
                  while (__stxr(v251 + 1, v250));
                  object[1].f64[1] = 0.0;
                  object[2] = 0uLL;
                  do
                    v252 = __ldaxr(v250);
                  while (__stlxr(v252 - 1, v250));
                  if (!v252)
                  {
                    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                    std::__shared_weak_count::__release_weak(v249);
                  }
                  v253 = object[0].f64[0];
                  v254 = _os_log_pack_fill();
                  *(_DWORD *)v254 = 134218496;
                  *(_QWORD *)(v254 + 4) = v511.i64[0];
                  *(_WORD *)(v254 + 12) = 2048;
                  *(double *)(v254 + 14) = v502;
                  *(_WORD *)(v254 + 22) = 2048;
                  *(double *)(v254 + 24) = v508;
                  v255 = (char *)operator new();
                  v256 = *(unsigned __int8 *)(v232 + 39);
                  v257 = *(_QWORD *)(v232 + 16);
                  v258 = *(_QWORD *)(v232 + 24);
                  v259 = *(__int128 *)((char *)&object[1] + 8);
                  *(float64x2_t *)(v255 + 8) = *(float64x2_t *)((char *)object + 8);
                  if ((v256 & 0x80u) != 0)
                    v256 = v258;
                  else
                    v257 = v232 + 16;
                  *(float64_t *)v255 = v253;
                  object[0].f64[1] = 0.0;
                  object[1].f64[0] = 0.0;
                  *(_OWORD *)(v255 + 24) = v259;
                  object[1].f64[1] = 0.0;
                  object[2].f64[0] = 0.0;
                  *((_QWORD *)v255 + 5) = v257;
                  *((_QWORD *)v255 + 6) = v256;
                  v255[56] = 2;
                  *(_QWORD *)&v524 = 0;
                  v513[0] = v255;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v231 + 24) + 40))(*(_QWORD *)(v231 + 24), v513);
                  v260 = v513[0];
                  v513[0] = 0;
                  v14 = v506;
                  if (v260)
                  {
                    v261 = (std::__shared_weak_count *)*((_QWORD *)v260 + 4);
                    if (v261)
                    {
                      v262 = (unint64_t *)&v261->__shared_owners_;
                      do
                        v263 = __ldaxr(v262);
                      while (__stlxr(v263 - 1, v262));
                      if (!v263)
                      {
                        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                        std::__shared_weak_count::__release_weak(v261);
                      }
                    }
                    v264 = (std::__shared_weak_count *)*((_QWORD *)v260 + 2);
                    if (v264)
                    {
                      v265 = (unint64_t *)&v264->__shared_owners_;
                      do
                        v266 = __ldaxr(v265);
                      while (__stlxr(v266 - 1, v265));
                      if (!v266)
                      {
                        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                        std::__shared_weak_count::__release_weak(v264);
                      }
                    }
                    MEMORY[0x212BC6398](v260, 0x10F0C40B62ED6C6);
                    v267 = v524;
                    *(_QWORD *)&v524 = 0;
                    if (v267)
                    {
                      v268 = *(std::__shared_weak_count **)(v267 + 32);
                      if (v268)
                      {
                        v269 = (unint64_t *)&v268->__shared_owners_;
                        do
                          v270 = __ldaxr(v269);
                        while (__stlxr(v270 - 1, v269));
                        if (!v270)
                        {
                          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                          std::__shared_weak_count::__release_weak(v268);
                        }
                      }
                      v271 = *(std::__shared_weak_count **)(v267 + 16);
                      if (v271)
                      {
                        v272 = (unint64_t *)&v271->__shared_owners_;
                        do
                          v273 = __ldaxr(v272);
                        while (__stlxr(v273 - 1, v272));
                        if (!v273)
                        {
                          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                          std::__shared_weak_count::__release_weak(v271);
                        }
                      }
                      MEMORY[0x212BC6398](v267, 0x10F0C40B62ED6C6);
                    }
                  }
                  v274 = object[2].f64[0];
                  if (*(_QWORD *)&object[2].f64[0])
                  {
                    v275 = (unint64_t *)(*(_QWORD *)&object[2].f64[0] + 8);
                    do
                      v276 = __ldaxr(v275);
                    while (__stlxr(v276 - 1, v275));
                    if (!v276)
                    {
                      (*(void (**)(float64_t))(**(_QWORD **)&v274 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v274));
                      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v274);
                    }
                  }
                  v277 = object[1].f64[0];
                  if (*(_QWORD *)&object[1].f64[0])
                  {
                    v278 = (unint64_t *)(*(_QWORD *)&object[1].f64[0] + 8);
                    do
                      v279 = __ldaxr(v278);
                    while (__stlxr(v279 - 1, v278));
                    if (!v279)
                    {
                      (*(void (**)(float64_t))(**(_QWORD **)&v277 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v277));
                      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v277);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(*(os_log_t *)&v245, OS_LOG_TYPE_DEBUG);
                  LODWORD(object[0].f64[0]) = 134218496;
                  *(_QWORD *)((char *)object[0].f64 + 4) = v511.i64[0];
                  WORD2(object[0].f64[1]) = 2048;
                  *(double *)((unint64_t)object | 0xE) = v502;
                  HIWORD(object[1].f64[0]) = 2048;
                  object[1].f64[1] = v508;
                  v280 = (void *)_os_log_send_and_compose_impl();
                  v14 = v506;
                  if (v280)
                    free(v280);
                }
                if (v229)
                {
                  sub_20E8C003C((uint64_t)v540, "VIO Health Eigen vals for plane normal matrix %f, %f, %f", *(double *)v511.i64, v502, v508);
                  sub_20E863570((uint64_t)v540);
                }
                sub_20E863570((uint64_t)v540);
                v281 = v545;
                if (v545)
                {
                  v282 = (unint64_t *)&v545->__shared_owners_;
                  do
                    v283 = __ldaxr(v282);
                  while (__stlxr(v283 - 1, v282));
                  if (!v283)
                  {
                    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                    std::__shared_weak_count::__release_weak(v281);
                  }
                }
                goto LABEL_359;
              }
            }
            memmove(v242, v234, v233);
            goto LABEL_299;
          }
        }
        memmove(v239, v237, v238);
        goto LABEL_291;
      }
    }
LABEL_359:
    _Q1 = (float64x2_t)v511;
    *(_BYTE *)(a1 + 169) = *(double *)v511.i64 > *((double *)v14 + 79);
  }
  v284 = (__int128 *)v14[303];
  v285 = (__int128 *)v14[304];
  if (v284 != v285)
  {
    v286 = *v284;
    *(_OWORD *)(a1 + 284) = *(__int128 *)((char *)v284 + 12);
    *(_OWORD *)(a1 + 272) = v286;
    v287 = *(v285 - 2);
    _Q1 = *(float64x2_t *)((char *)v285 - 20);
    *(float64x2_t *)(a1 + 316) = _Q1;
    *(_OWORD *)(a1 + 304) = v287;
  }
  v288 = *((_BYTE *)v14 + 1306);
  if (v288)
    v288 = *(_BYTE *)(v14[1476] + 28) != 0;
  *(_BYTE *)(a1 + 171) = v288;
  v289 = v497[64];
  *(_BYTE *)(a1 + 172) = v289;
  if (v289)
    v290 = 0;
  else
    v290 = *((unsigned int *)v14 + 484) == (uint64_t)(v14[358] - v14[357]) >> 2;
  *(_BYTE *)(a1 + 173) = v290;
  sub_20F82B6B4((_QWORD *)v14[1555], (uint64_t)object, _Q1, _Q2);
  v293 = object[1];
  *(float64x2_t *)(a1 + 96) = object[0];
  *(float64x2_t *)(a1 + 112) = v293;
  v294.f64[1] = object[2].f64[1];
  *(float64x2_t *)(a1 + 128) = object[2];
  v295 = v14[1556];
  if (v295)
    sub_20F804DEC(v295, *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 136));
  v296 = v14[286];
  if (v14[285] == v296)
    goto LABEL_383;
  v297 = v14[1555];
  v298 = *(_QWORD *)(v297 + 72);
  if (!v298)
    goto LABEL_383;
  v299 = (double *)(a1 + 144);
  v300 = *(_QWORD *)(v297 + 56);
  v301 = *(_QWORD *)(v297 + 32);
  v302 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v297 + 40) - v301) >> 6);
  while (1)
  {
    v303 = v301 + 192 * (v300 % v302);
    v305 = *(double *)(v303 + 176);
    v304 = (double *)(v303 + 176);
    if (v305 - *(v304 - 1) <= *(double *)(v297 + 16))
      break;
    ++v300;
    if (!--v298)
    {
      *v299 = 0.0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      goto LABEL_378;
    }
  }
  v306 = v301 + 192 * (v300 % v302);
  if (*(_DWORD *)(v306 + 188) != *(_DWORD *)(v14[311] - 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PropagatedPoseAccumulator.cpp", 209, (uint64_t)"propagated_latest_pose.propagates_state_id == target_state_id", 61, (uint64_t)&unk_2102B27AE, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v294.f64[0] = *(float64_t *)(v296 - 8);
  v291.f64[0] = *(float64_t *)(v306 + 160);
  *(_QWORD *)&v307 = *(_OWORD *)&vsubq_f64(v294, v291);
  _Q1 = vsubq_f64(*(float64x2_t *)(v296 - 24), *(float64x2_t *)(v306 + 144));
  v291.f64[0] = *(float64_t *)(v296 - 152);
  _Q3 = *(float64x2_t *)(v296 - 168);
  _D4 = *(double *)(v296 - 128);
  v311 = *(float64x2_t *)(v296 - 144);
  _D6 = *(double *)(v296 - 104);
  v313 = *(float64x2_t *)(v296 - 120);
  v292.f64[0] = *(float64_t *)(v306 + 16);
  v314 = *(double *)(v306 + 40);
  _Q19 = *(float64x2_t *)(v306 + 24);
  v316 = *(double *)(v306 + 64);
  _Q21 = *(float64x2_t *)(v306 + 48);
  v318 = vmlad_n_f64(vmlad_n_f64(v291.f64[0] * *(double *)v306, _D4, _Q19.f64[0]), _D6, _Q21.f64[0]);
  v319 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q3, *(float64x2_t *)v306, 1), v311, _Q19, 1), v313, _Q21, 1);
  __asm
  {
    FMLA            D17, D4, V19.D[1]
    FMLA            D17, D6, V21.D[1]
  }
  object[0] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q3, *(double *)v306), v311, _Q19.f64[0]), v313, _Q21.f64[0]);
  *(float64x2_t *)((char *)&object[1] + 8) = v319;
  object[1].f64[0] = v318;
  object[2].f64[1] = _D17;
  v531 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q3, v292.f64[0]), v311, v314), v313, v316);
  v532 = vmulq_f64(v291, v292).f64[0] + _D4 * v314 + _D6 * v316;
  _Q3.f64[0] = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  *v299 = sqrt(vmlad_n_f64(_D2, v307, v307));
  memset(v540, 0, sizeof(v540));
  sub_20E9733B8(object, (double *)v540);
  _V1.D[1] = *(_QWORD *)&v540[8];
  _D3 = *(_QWORD *)&v540[8];
  __asm { FMLA            D2, D3, V1.D[1] }
  *(double *)(a1 + 152) = sqrt(_D2 + *(double *)&v540[16] * *(double *)&v540[16]) * 180.0 / 3.14159265;
  *(double *)(a1 + 160) = *v304 - *(v304 - 1);
LABEL_378:
  sub_20F82FD50(&v523);
  if (**(int **)(v523 + 56) > 2
    || (v326 = *(unsigned __int8 *)(v523 + 72),
        v327 = sub_20E8C31DC(v523, "OSLogSurrogateAppender", 1, 0),
        v328 = v327,
        !v326)
    && !v327)
  {
    v329 = v14[1556];
    if (v329)
      goto LABEL_382;
    goto LABEL_383;
  }
  sub_20E863438((uint64_t)object);
  sub_20E86A980((float64x2_t *)object[1].f64, (uint64_t)"propagated state against BA: ", 29);
  v408 = (_QWORD *)std::ostream::operator<<();
  v409 = sub_20E86A980(v408, (uint64_t)", ", 2);
  sub_20E86A980(v409, (uint64_t)" t: ", 4);
  v410 = (_QWORD *)std::ostream::operator<<();
  v411 = sub_20E86A980(v410, (uint64_t)", ", 2);
  sub_20E86A980(v411, (uint64_t)" dt(s): ", 8);
  v412 = (_QWORD *)std::ostream::operator<<();
  v413 = sub_20E86A980(v412, (uint64_t)", ", 2);
  sub_20E86A980(v413, (uint64_t)" dp(m): ", 8);
  v414 = (_QWORD *)std::ostream::operator<<();
  v415 = sub_20E86A980(v414, (uint64_t)", ", 2);
  sub_20E86A980(v415, (uint64_t)" dR(deg): ", 10);
  std::ostream::operator<<();
  if ((v538 & 0x10) != 0)
  {
    v418 = v537;
    if (*(_QWORD *)&v537 < *(_QWORD *)&v533.f64[0])
    {
      v537 = v533.f64[0];
      v418 = v533.f64[0];
    }
    v419 = v532;
    v416 = *(_QWORD *)&v418 - *(_QWORD *)&v532;
    if (*(_QWORD *)&v418 - *(_QWORD *)&v532 > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_529;
  }
  else
  {
    if ((v538 & 8) == 0)
    {
      v416 = 0;
      HIBYTE(v522) = 0;
      v417 = v521;
      goto LABEL_484;
    }
    v419 = object[2].f64[1];
    v416 = *(_QWORD *)&v531.f64[1] - *(_QWORD *)&object[2].f64[1];
    if (*(_QWORD *)&v531.f64[1] - *(_QWORD *)&object[2].f64[1] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_529:
      sub_20E860B7C();
  }
  if (v416 >= 0x17)
  {
    v420 = (v416 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v416 | 7) != 0x17)
      v420 = v416 | 7;
    v421 = v420 + 1;
    v417 = operator new(v420 + 1);
    v521[1] = (void *)v416;
    v522 = v421 | 0x8000000000000000;
    v521[0] = v417;
    goto LABEL_483;
  }
  HIBYTE(v522) = v416;
  v417 = v521;
  if (v416)
LABEL_483:
    memmove(v417, *(const void **)&v419, v416);
LABEL_484:
  *((_BYTE *)v417 + v416) = 0;
  v513[0] = &v523;
  v513[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v515 = 2;
  v516 = "unknown file";
  v517 = 6271;
  v519 = 0;
  v520 = 0;
  v518 = "unknown function";
  if (v522 >= 0)
    v422 = v521;
  else
    v422 = (void **)v521[0];
  v423 = *(_QWORD *)v513[0];
  if (*(char *)(*(_QWORD *)v513[0] + 39) < 0)
  {
    v425 = *(const char **)(v423 + 16);
    v424 = *(_QWORD *)(v423 + 24);
    v512 = *(_QWORD *)v513[0] + 16;
    v427 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v427 & 1) == 0)
    {
LABEL_623:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v540);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v540);
        if ((_BYTE)v541 && (v540[23] & 0x80000000) != 0)
          operator delete(*(void **)v540);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v14 = v506;
      }
    }
  }
  else
  {
    v424 = *(unsigned __int8 *)(*(_QWORD *)v513[0] + 39);
    v425 = (const char *)(*(_QWORD *)v513[0] + 16);
    v512 = (uint64_t)v425;
    v426 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v426 & 1) == 0)
      goto LABEL_623;
  }
  if (byte_254A4A4F8[23] >= 0)
    v428 = byte_254A4A4F8;
  else
    v428 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v429 = byte_254A4A4F8[23];
  else
    v429 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v540 = os_log_create(v428, v425);
  v430 = &v540[8];
  if (v429 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v429 >= 0x17)
  {
    v431 = (v429 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v429 | 7) != 0x17)
      v431 = v429 | 7;
    v432 = v431 + 1;
    v430 = operator new(v431 + 1);
    *(_QWORD *)&v540[16] = v429;
    *(_QWORD *)&v541 = v432 | 0x8000000000000000;
    *(_QWORD *)&v540[8] = v430;
    v14 = v506;
    goto LABEL_504;
  }
  BYTE7(v541) = v429;
  if (v429)
LABEL_504:
    memmove(v430, v428, v429);
  v430[v429] = 0;
  BYTE8(v541) = 1;
  v433 = (char *)&v542;
  if (v424 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v424 >= 0x17)
  {
    v434 = (v424 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v424 | 7) != 0x17)
      v434 = v424 | 7;
    v435 = v434 + 1;
    v433 = (char *)operator new(v434 + 1);
    v543 = (const char *)v424;
    v544 = v435 | 0x8000000000000000;
    v542 = v433;
    goto LABEL_512;
  }
  HIBYTE(v544) = v424;
  if (v424)
LABEL_512:
    memmove(v433, v425, v424);
  v433[v424] = 0;
  LOBYTE(v545) = 1;
  v436 = *(NSObject **)v540;
  if (SHIBYTE(v544) < 0)
    operator delete(v542);
  if (BYTE8(v541) && SBYTE7(v541) < 0)
    operator delete(*(void **)&v540[8]);
  if (*(_QWORD *)v540)
    os_release(*(void **)v540);
  if (v328 && *(_QWORD *)(v328 + 24))
  {
    v437 = _os_log_pack_size();
    v438 = (std::__shared_weak_count_vtbl *)operator new(v437, (std::align_val_t)8uLL);
    v439 = (std::__shared_weak_count *)operator new();
    v439->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v439->__shared_owners_ = 0;
    v439->__shared_weak_owners_ = 0;
    v439[1].__vftable = v438;
    *(_QWORD *)&v524 = v438;
    *((_QWORD *)&v524 + 1) = v438;
    v526 = 0;
    v527 = 0;
    v525 = v439;
    v440 = strlen((const char *)v422);
    if (v440 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v441 = v440;
    if (v440 >= 0x17)
    {
      v444 = (v440 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v440 | 7) != 0x17)
        v444 = v440 | 7;
      v445 = v444 + 1;
      v442 = (uint64_t *)operator new(v444 + 1);
      *(_QWORD *)&v529 = v441;
      *((_QWORD *)&v529 + 1) = v445 | 0x8000000000000000;
      v528 = v442;
    }
    else
    {
      HIBYTE(v529) = v440;
      v442 = (uint64_t *)&v528;
      if (!v440)
        goto LABEL_534;
    }
    memcpy(v442, v422, v441);
LABEL_534:
    *((_BYTE *)v442 + v441) = 0;
    v446 = (uint64_t)v528;
    v546[0] = v529;
    *(_QWORD *)((char *)v546 + 7) = *(_QWORD *)((char *)&v529 + 7);
    v447 = HIBYTE(v529);
    v448 = operator new(0x38uLL);
    v448[1] = 0;
    v448[2] = 0;
    v448[3] = off_24C9ABC20;
    *v448 = &off_24C9ABBD0;
    v449 = v546[0];
    v448[4] = v446;
    v448[5] = v449;
    *(_QWORD *)((char *)v448 + 47) = *(_QWORD *)((char *)v546 + 7);
    *((_BYTE *)v448 + 55) = v447;
    v546[0] = 0;
    *(_QWORD *)((char *)v546 + 7) = 0;
    v450 = v527;
    v526 = (char *)(v448 + 3);
    v527 = (std::__shared_weak_count *)v448;
    if (v450)
    {
      v451 = (unint64_t *)&v450->__shared_owners_;
      do
        v452 = __ldaxr(v451);
      while (__stlxr(v452 - 1, v451));
      if (!v452)
      {
        ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
        std::__shared_weak_count::__release_weak(v450);
      }
    }
    *(_OWORD *)v540 = v524;
    v453 = v526;
    *(_QWORD *)&v540[16] = v525;
    if (v525)
    {
      v454 = (unint64_t *)&v525->__shared_owners_;
      do
        v455 = __ldxr(v454);
      while (__stxr(v455 + 1, v454));
    }
    v456 = v527;
    *(_QWORD *)&v541 = v453;
    *((_QWORD *)&v541 + 1) = v527;
    if (v527)
    {
      v457 = (unint64_t *)&v527->__shared_owners_;
      do
        v458 = __ldxr(v457);
      while (__stxr(v458 + 1, v457));
      v542 = v453;
      do
        v459 = __ldaxr(v457);
      while (__stlxr(v459 - 1, v457));
      if (!v459)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    else
    {
      v542 = v453;
    }
    v460 = v525;
    if (v525)
    {
      v461 = (unint64_t *)&v525->__shared_owners_;
      do
        v462 = __ldaxr(v461);
      while (__stlxr(v462 - 1, v461));
      if (!v462)
      {
        ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
        std::__shared_weak_count::__release_weak(v460);
      }
    }
    v463 = *(_QWORD *)v540;
    if (v542[31] >= 0)
      v464 = v542 + 8;
    else
      v464 = (char *)*((_QWORD *)v542 + 1);
    v465 = _os_log_pack_fill();
    *(_DWORD *)v465 = 136315138;
    *(_QWORD *)(v465 + 4) = v464;
    v466 = operator new();
    v467 = *(unsigned __int8 *)(v423 + 39);
    v468 = v512;
    if ((v467 & 0x80u) != 0)
    {
      v468 = *(_QWORD *)(v423 + 16);
      v467 = *(_QWORD *)(v423 + 24);
    }
    *(_QWORD *)v466 = v463;
    *(_OWORD *)(v466 + 8) = *(_OWORD *)&v540[8];
    *(_QWORD *)&v540[8] = 0;
    *(_QWORD *)&v540[16] = 0;
    *(_OWORD *)(v466 + 24) = v541;
    v541 = 0uLL;
    *(_QWORD *)(v466 + 40) = v468;
    *(_QWORD *)(v466 + 48) = v467;
    *(_BYTE *)(v466 + 56) = 2;
    v528 = 0;
    *(_QWORD *)&v524 = v466;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v328 + 24) + 40))(*(_QWORD *)(v328 + 24), &v524);
    v469 = v524;
    *(_QWORD *)&v524 = 0;
    if (v469)
    {
      v470 = *(std::__shared_weak_count **)(v469 + 32);
      if (v470)
      {
        v471 = (unint64_t *)&v470->__shared_owners_;
        do
          v472 = __ldaxr(v471);
        while (__stlxr(v472 - 1, v471));
        if (!v472)
        {
          ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
          std::__shared_weak_count::__release_weak(v470);
        }
      }
      v473 = *(std::__shared_weak_count **)(v469 + 16);
      if (v473)
      {
        v474 = (unint64_t *)&v473->__shared_owners_;
        do
          v475 = __ldaxr(v474);
        while (__stlxr(v475 - 1, v474));
        if (!v475)
        {
          ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
          std::__shared_weak_count::__release_weak(v473);
        }
      }
      MEMORY[0x212BC6398](v469, 0x10F0C40B62ED6C6);
      v476 = (uint64_t)v528;
      v528 = 0;
      if (v476)
      {
        v477 = *(std::__shared_weak_count **)(v476 + 32);
        if (v477)
        {
          v478 = (unint64_t *)&v477->__shared_owners_;
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
          }
        }
        v480 = *(std::__shared_weak_count **)(v476 + 16);
        if (v480)
        {
          v481 = (unint64_t *)&v480->__shared_owners_;
          do
            v482 = __ldaxr(v481);
          while (__stlxr(v482 - 1, v481));
          if (!v482)
          {
            ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
            std::__shared_weak_count::__release_weak(v480);
          }
        }
        MEMORY[0x212BC6398](v476, 0x10F0C40B62ED6C6);
      }
    }
    v483 = (std::__shared_weak_count *)*((_QWORD *)&v541 + 1);
    if (*((_QWORD *)&v541 + 1))
    {
      v484 = (unint64_t *)(*((_QWORD *)&v541 + 1) + 8);
      do
        v485 = __ldaxr(v484);
      while (__stlxr(v485 - 1, v484));
      if (!v485)
      {
        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
        std::__shared_weak_count::__release_weak(v483);
      }
    }
    v486 = *(std::__shared_weak_count **)&v540[16];
    if (*(_QWORD *)&v540[16])
    {
      v487 = (unint64_t *)(*(_QWORD *)&v540[16] + 8);
      do
        v488 = __ldaxr(v487);
      while (__stlxr(v488 - 1, v487));
      if (!v488)
      {
        ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
        std::__shared_weak_count::__release_weak(v486);
      }
    }
  }
  else
  {
    os_log_type_enabled(v436, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v540 = 136315138;
    *(_QWORD *)&v540[4] = v422;
    v443 = (void *)_os_log_send_and_compose_impl();
    if (v443)
      free(v443);
  }
  if (v326)
  {
    v489 = v521;
    if (v522 < 0)
      v489 = (void **)v521[0];
    sub_20E8C003C((uint64_t)v513, "%s", (const char *)v489);
    sub_20E863570((uint64_t)v513);
  }
  sub_20E863570((uint64_t)v513);
  v490 = v520;
  if (v520)
  {
    v491 = (unint64_t *)&v520->__shared_owners_;
    do
      v492 = __ldaxr(v491);
    while (__stlxr(v492 - 1, v491));
    if (!v492)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }
  if (SHIBYTE(v522) < 0)
    operator delete(v521[0]);
  object[0].f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
  v493 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
  *(float64_t *)((char *)object[0].f64 + *(_QWORD *)(*(_QWORD *)&object[0].f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
  object[1].f64[0] = v493;
  *(_QWORD *)&object[1].f64[1] = MEMORY[0x24BEDB848] + 16;
  if (v536 < 0)
    operator delete(v534);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v539);
  v329 = v14[1556];
  if (v329)
LABEL_382:
    sub_20F8052C8(v329, *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 160));
LABEL_383:
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(v14[320] - 40) ^ 1;
  v330 = v14[379];
  v503 = v14[380];
  if (v330 != v503)
  {
    v331 = (_QWORD *)(*(_QWORD *)v14[994] + 304);
    v332 = 0.0;
    while (1)
    {
      v333 = *(_QWORD *)(v330 + 8);
      v334 = *(_QWORD *)(v330 + 16);
      v509 = v330;
      if (v333 != v334)
      {
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v334 - v333) >> 7)) >= 3)
        {
          v335 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/SlidingWindowFilterFGUtil.hpp", 290, (uint64_t)"camera_set_model.vision_models.size() <= 2", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v330 = v509;
          if (v335)
            goto LABEL_611;
        }
        v336 = *(_DWORD *)v330;
        if (*(_DWORD *)v330 >= 0x10000u
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
LABEL_608:
          abort();
        }
        v337 = -991146299 * ((*(_QWORD *)(v509 + 16) - *(_QWORD *)(v509 + 8)) >> 7);
        if ((_DWORD)v337)
        {
          for (k = 0; k != v337; ++k)
          {
            if (v336 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v339 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v339 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v341 = qword_254A6DE40;
                for (m = qword_254A6DE48; v341 != m; v341 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v341)(*(_QWORD *)(v341 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v342 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v342 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_608;
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (k >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v343 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v345 = qword_254A6DE40;
                for (n = qword_254A6DE48; v345 != n; v345 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v345)(*(_QWORD *)(v345 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v346 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_608;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v347 = *v331;
            if (*v331)
            {
              v348 = (unsigned __int16)k | (v336 << 16);
              v349 = v331;
              do
              {
                v350 = *(_DWORD *)(v347 + 32);
                _CF = v350 >= v348;
                if (v350 >= v348)
                  v352 = (uint64_t *)v347;
                else
                  v352 = (uint64_t *)(v347 + 8);
                if (_CF)
                  v349 = (_QWORD *)v347;
                v347 = *v352;
              }
              while (*v352);
              if (v349 != v331 && *((_DWORD *)v349 + 8) <= v348)
              {
                v353 = *(_QWORD *)(v509 + 8) + 1664 * k;
                _Q0.f64[0] = *(float64_t *)(v353 + 16);
                _Q2 = *(int64x2_t *)(v353 + 24);
                v356 = *(double *)(v353 + 64);
                _Q4 = *(_OWORD *)(v353 + 48);
                v358 = *((double *)v349 + 7);
                v359 = *((double *)v349 + 10);
                v360 = *((double *)v349 + 13);
                v361 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v353, _Q2);
                _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v353, _Q2);
                _Q0.f64[1] = *(float64_t *)(v353 + 40);
                v363 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v361, *((double *)v349 + 5)), _Q1, *(float64x2_t *)(v349 + 5), 1), _Q0, v358);
                _D6 = v349[6];
                __asm { FMLA            D2, D6, V4.D[1] }
                *(double *)_Q2.i64 = *(double *)_Q2.i64 + v356 * v358;
                v365 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v361, *((double *)v349 + 8)), _Q1, *((float64x2_t *)v349 + 4), 1), _Q0, v359);
                _D16 = v349[9];
                __asm { FMLA            D6, D16, V4.D[1] }
                v368 = _D6 + v356 * v359;
                v369 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v361, *((double *)v349 + 11)), _Q1, *(float64x2_t *)(v349 + 11), 1), _Q0, v360);
                _Q1.f64[0] = (float64_t)v349[12];
                __asm { FMLA            D0, D1, V4.D[1] }
                object[0] = v363;
                *(_QWORD *)&object[1].f64[0] = _Q2.i64[0];
                object[2].f64[1] = v368;
                *(float64x2_t *)((char *)&object[1] + 8) = v365;
                v532 = _Q0.f64[0] + v356 * v360;
                v531 = v369;
                memset(v540, 0, sizeof(v540));
                sub_20E9733B8(object, (double *)v540);
                _V1.D[1] = *(_QWORD *)&v540[8];
                _D3 = *(_QWORD *)&v540[8];
                __asm { FMLA            D2, D3, V1.D[1] }
                v373 = sqrt(_D2 + *(double *)&v540[16] * *(double *)&v540[16]);
                if (v373 >= v332)
                  v332 = v373;
              }
            }
          }
        }
      }
      v14 = v506;
      v330 = v509 + 32;
      if (v509 + 32 == v503)
        goto LABEL_435;
    }
  }
  v332 = 0.0;
LABEL_435:
  *v496 = v332;
  v374 = v14[1556];
  if (v374)
  {
    v375 = *(uint64_t **)(v14[994] + 72);
    v376 = v375[4];
    v377 = *v375;
    if (!v376)
      v376 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)(v14[994] + 72) + 8) - v377) >> 3);
    v378 = v377 + 56 * v376;
    v380 = *(_OWORD *)(v378 - 48);
    v379 = (double *)(v378 - 48);
    _V0.D[1] = *((_QWORD *)&v380 + 1);
    v382 = v379[2];
    _D3 = *((_QWORD *)&v380 + 1);
    __asm { FMLA            D2, D3, V0.D[1] }
    *(double *)(a1 + 72) = sqrt(_D2 + v382 * v382);
    v385 = v14[1477];
    if (*(_BYTE *)(v385 + 9))
    {
      LODWORD(v382) = *(_DWORD *)(*(_QWORD *)v385 + 20);
      v386 = (double)*(int *)(v385 + 16) / (double)*(unint64_t *)&v382;
    }
    else
    {
      v386 = 0.0;
    }
    sub_20F8057A4(v379, v374, *(double *)(a1 + 64), v386);
    sub_20F8060EC(v14[1556], *v496);
    v387 = v14[1556];
    if (v387)
    {
      v388 = v14[1027];
      if (!*(_BYTE *)v388)
        sub_20F804914(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v388 + 16) + 62760) + 68), *(_DWORD *)(*(_QWORD *)(v388 + 16) + 62872), *(_DWORD *)(*(_QWORD *)(v388 + 16) + 62880), v387);
    }
  }
  if (*((_BYTE *)v14 + 1932))
  {
    v389 = (void *)v14[46];
    v14[47] = v389;
    v390 = a3[1] - *a3;
    v391 = v390 >> 3;
    if (v390 >> 3 > (unint64_t)((uint64_t)(v14[48] - (_QWORD)v389) >> 4))
    {
      if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFF9)
        sub_20E867F44();
      v392 = (char *)operator new(2 * v390);
      v14[46] = v392;
      v14[47] = v392;
      v14[48] = &v392[16 * v391];
      if (v389)
        operator delete(v389);
    }
    v393 = *a3;
    v394 = a3[1];
    if (*a3 != v394)
    {
      v395 = (char *)v14[47];
      do
      {
        v397 = *(_QWORD *)(*(_QWORD *)v393 + 24);
        v398 = *(_DWORD *)(*(_QWORD *)v393 + 32);
        v399 = v14[48];
        if ((unint64_t)v395 < v399)
        {
          *(_QWORD *)v395 = v397;
          *((_DWORD *)v395 + 2) = v398;
          v396 = v395 + 16;
        }
        else
        {
          v400 = (_BYTE *)v14[46];
          v401 = (v395 - v400) >> 4;
          v402 = v401 + 1;
          if ((unint64_t)(v401 + 1) >> 60)
            sub_20E867F44();
          v403 = v399 - (_QWORD)v400;
          if (v403 >> 3 > v402)
            v402 = v403 >> 3;
          if ((unint64_t)v403 >= 0x7FFFFFFFFFFFFFF0)
            v404 = 0xFFFFFFFFFFFFFFFLL;
          else
            v404 = v402;
          if (v404)
          {
            if (v404 >> 60)
              sub_20E877A38();
            v405 = (char *)operator new(16 * v404);
            v406 = (uint64_t)&v405[16 * v401];
            *(_QWORD *)v406 = v397;
            *(_DWORD *)(v406 + 8) = v398;
            v407 = v406;
            if (v395 != v400)
            {
LABEL_463:
              v14 = v506;
              do
              {
                *(_OWORD *)(v407 - 16) = *((_OWORD *)v395 - 1);
                v407 -= 16;
                v395 -= 16;
              }
              while (v395 != v400);
              v395 = (char *)v506[46];
              v396 = (char *)(v406 + 16);
              v506[46] = v407;
              v506[47] = v406 + 16;
              v506[48] = &v405[16 * v404];
              if (!v395)
                goto LABEL_452;
LABEL_469:
              operator delete(v395);
              goto LABEL_452;
            }
          }
          else
          {
            v405 = 0;
            v406 = 16 * v401;
            *(_QWORD *)v406 = v397;
            *(_DWORD *)(v406 + 8) = v398;
            v407 = 16 * v401;
            if (v395 != v400)
              goto LABEL_463;
          }
          v14 = v506;
          v396 = (char *)(v406 + 16);
          v506[46] = v407;
          v506[47] = v406 + 16;
          v506[48] = &v405[16 * v404];
          if (v395)
            goto LABEL_469;
        }
LABEL_452:
        v14[47] = v396;
        v393 += 8;
        v395 = v396;
      }
      while (v393 != v394);
    }
  }
}

void sub_20F89DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *object)
{
  uint64_t v62;

  if (*(_BYTE *)(v62 - 200) && *(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a38);
  if (a52 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  sub_20F04F084(a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20F89DD80(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v29;
  double v30;
  uint64_t v32;
  double v33;
  double v35;
  double v37;
  float64x2_t *v39;
  float64x2_t v41;
  float64x2_t *v46;
  double v47;
  float64x2_t v48;
  int64x2_t v49;
  float64x2_t v51;
  int64x2_t v52;
  double v54;
  float64x2_t v56;
  uint64_t v58;
  float64x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  float64x2_t v77;
  _QWORD *v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v83;
  double v84;
  uint64_t v86;
  double v87;
  double v89;
  double v91;
  float64x2_t *v93;
  float64x2_t v95;
  float64x2_t *v97;
  double v98;
  float64x2_t v99;
  int64x2_t v100;
  float64x2_t v102;
  int64x2_t v103;
  double v105;
  float64x2_t v107;
  uint64_t v109;
  float64x2_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;

  if (!*(_BYTE *)(a2 + 488))
    return result;
  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = a2 + 40;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 40) + 24))(a2 + 40);
  if (!(_DWORD)result)
    return result;
  result = *v3;
  v6 = *(_QWORD *)*v3;
  v7 = *(_DWORD *)(*v3 + 8);
  v8 = *(_QWORD *)(a2 + 496);
  v9 = *(_QWORD *)(a2 + 504);
  if (v8 != v9)
  {
    while (*(_QWORD *)v8 != v6 || *(_DWORD *)(v8 + 8) != v7)
    {
      v8 += 64;
      if (v8 == v9)
        return result;
    }
  }
  if (v8 == v9)
    return result;
  v10 = *(unsigned __int8 *)(a2 + 488);
  if (*(_BYTE *)(a2 + 488))
    v11 = v5;
  else
    v11 = 0;
  if (*(_QWORD *)(v11 + 32) == v6 && *(_DWORD *)(v11 + 40) == v7)
  {
    sub_20FB4381C(result, **(_QWORD **)(v4 + 7952), a2);
    v10 = *(unsigned __int8 *)(a2 + 488);
  }
  *(_QWORD *)v3[2] = *(_QWORD *)v3[3];
  *(_QWORD *)v3[4] = *(_QWORD *)v3[5];
  if (v10)
    v12 = v5;
  else
    v12 = 0;
  v120 = *(_OWORD *)(v12 + 32);
  v121 = *(_QWORD *)(v12 + 48);
  result = (uint64_t)sub_20E9DF85C((_QWORD *)(**(_QWORD **)(v4 + 7952) + 1784), (uint64_t *)&v120);
  v15 = *(_QWORD *)(a2 + 496);
  v16 = *(_QWORD *)(a2 + 504);
  if (v16 != v15)
  {
    v17 = (v16 - v15) >> 6;
    while (1)
    {
      v18 = v17 >> 1;
      v19 = v15 + (v17 >> 1 << 6);
      v20 = *(_DWORD *)(v19 + 16);
      _CF = v20 >= v121;
      if (v20 != (_DWORD)v121)
        goto LABEL_26;
      if (*(_QWORD *)v19 >= (unint64_t)v120)
        break;
LABEL_20:
      v15 = v19 + 64;
      v18 = v17 + ~v18;
LABEL_21:
      v17 = v18;
      if (!v18)
        goto LABEL_29;
    }
    if (*(_QWORD *)v19 != (_QWORD)v120)
      goto LABEL_21;
    _CF = *(_DWORD *)(v19 + 8) >= DWORD2(v120);
LABEL_26:
    if (_CF)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_29:
  if (v15 != v16 && *(_DWORD *)(v15 + 16) == (_DWORD)v121 && *(_QWORD *)v15 == (_QWORD)v120)
  {
    v22 = *(_DWORD *)(v15 + 8);
    v23 = v15 + 24;
    if (v22 == DWORD2(v120))
      v24 = v23;
    else
      v24 = 0;
  }
  else
  {
    v24 = 0;
  }
  if (!result)
  {
LABEL_73:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6587, (uint64_t)"obs_pose_ref", 12, (uint64_t)"missing pose ref", 16, (void (*)(void **))sub_21023DDB0);
    goto LABEL_74;
  }
  v25 = (uint64_t **)v3[6];
  v26 = *(_QWORD *)(result + 40);
  v27 = *(float64x2_t *)v26;
  _D2 = *(_QWORD *)(v26 + 40);
  v29 = *(float64x2_t *)(v26 + 24);
  v30 = *(double *)(v26 + 64);
  _Q5 = *(float64x2_t *)(v26 + 48);
  v32 = *(_QWORD *)(result + 72);
  v33 = *(double *)(v32 + 16);
  _Q7 = *(float64x2_t *)v32;
  v35 = *(double *)(v32 + 40);
  _Q17 = *(float64x2_t *)(v32 + 24);
  v37 = *(double *)(v32 + 64);
  _Q19 = *(float64x2_t *)(v32 + 48);
  v39 = *(float64x2_t **)(result + 88);
  v14.f64[0] = v39[1].f64[0];
  _Q21 = *v39;
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v39->f64[0]), v29, *v39, 1), _Q5, v14.f64[0]);
  __asm { FMLA            D23, D2, V21.D[1] }
  v14.f64[0] = _D23 + v30 * v14.f64[0];
  v46 = *(float64x2_t **)(result + 56);
  _Q21.f64[0] = v46[1].f64[0];
  *(_QWORD *)&v47 = *(_OWORD *)&vaddq_f64(v14, _Q21);
  v48 = vaddq_f64(v41, *v46);
  v49 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, _Q7.f64[0]), v29, _Q7, 1), _Q5, v33);
  __asm { FMLA            D23, D2, V7.D[1] }
  v51.f64[0] = _D23 + v30 * v33;
  v52 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, _Q17.f64[0]), v29, _Q17, 1), _Q5, v35);
  __asm { FMLA            D23, D2, V17.D[1] }
  v54 = _D23 + v30 * v35;
  _Q1 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, _Q19.f64[0]), v29, _Q19, 1), _Q5, v37);
  __asm { FMLA            D0, D2, V19.D[1] }
  *(double *)_Q0.i64 = *(double *)_Q0.i64 + v30 * v37;
  v56 = (float64x2_t)vzip1q_s64(v49, v52);
  _Q4 = (float64x2_t)vzip2q_s64(v49, v52);
  v58 = **v25;
  *(float64_t *)(v58 + 16) = v51.f64[0];
  v51.f64[1] = v54;
  v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v56, v48.f64[0]), _Q4, v48, 1), v51, v47);
  _Q5.f64[0] = v48.f64[1];
  __asm { FMLA            D4, D5, V1.D[1] }
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], *(double *)_Q0.i64, v47);
  v60 = (int8x16_t)vnegq_f64(v59);
  *(int64x2_t *)v58 = v49;
  v61 = vextq_s8(v60, _Q1, 8uLL);
  v60.i64[1] = *(_QWORD *)&v56.f64[1];
  *(int8x16_t *)(v58 + 24) = v60;
  *(int64x2_t *)(v58 + 40) = vzip2q_s64(v52, vdupq_lane_s64(*(uint64_t *)&v54, 0));
  *(int8x16_t *)(v58 + 56) = v61;
  *(int8x16_t *)(v58 + 72) = vextq_s8(_Q1, _Q0, 8uLL);
  *(_QWORD *)(v58 + 88) = *(_OWORD *)&vnegq_f64(_Q4);
  *(_QWORD *)*v25[2] = v58;
  if (!v24)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6593, (uint64_t)"obs", 3, (uint64_t)"missing anchor observation", 26, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
LABEL_74:
      abort();
  }
  *(_OWORD *)*v25[1] = *(_OWORD *)(v24 + 16);
  *(_QWORD *)*v25[3] = *v25[1];
  *v25[2] += 8;
  *v25[3] += 8;
  v62 = (uint64_t *)v3[7];
  v63 = *v62;
  v64 = v62[1];
  v65 = 1;
  if (*v62 != v64)
  {
    while (*(_BYTE *)(v4 + 1999))
    {
      v66 = *(_DWORD *)(v63 + 16);
      if (v66 != (_DWORD)v121)
        goto LABEL_41;
      v68 = *(_QWORD *)(a2 + 496);
      v67 = *(_QWORD *)(a2 + 504);
      v69 = *(_QWORD *)v63;
      v70 = *(_DWORD *)(v63 + 8);
      v71 = v67 - v68;
      if (v67 != v68)
        goto LABEL_47;
LABEL_57:
      if (v68 != v67 && *(_DWORD *)(v68 + 16) == v66 && *(_QWORD *)v68 == v69 && *(_DWORD *)(v68 + 8) == v70)
      {
        result = (uint64_t)sub_20E9DF85C((_QWORD *)(**(_QWORD **)(v4 + 7952) + 1784), (uint64_t *)v63);
        if (!result)
          goto LABEL_73;
        v79 = (_QWORD *)v3[6];
        v80 = *(_QWORD *)(result + 40);
        v81 = *(float64x2_t *)v80;
        _D4 = *(_QWORD *)(v80 + 40);
        v83 = *(float64x2_t *)(v80 + 24);
        v84 = *(double *)(v80 + 64);
        _Q7 = *(float64x2_t *)(v80 + 48);
        v86 = *(_QWORD *)(result + 72);
        v87 = *(double *)(v86 + 16);
        _Q17 = *(float64x2_t *)v86;
        v89 = *(double *)(v86 + 40);
        _Q19 = *(float64x2_t *)(v86 + 24);
        v91 = *(double *)(v86 + 64);
        _Q21 = *(float64x2_t *)(v86 + 48);
        v93 = *(float64x2_t **)(result + 88);
        v77.f64[0] = v93[1].f64[0];
        _Q1 = *v93;
        v95 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v93->f64[0]), v83, *v93, 1), _Q7, v77.f64[0]);
        __asm { FMLA            D23, D4, V1.D[1] }
        v77.f64[0] = _D23 + v84 * v77.f64[0];
        v97 = *(float64x2_t **)(result + 56);
        _Q1.f64[0] = v97[1].f64[0];
        *(_QWORD *)&v98 = *(_OWORD *)&vaddq_f64(v77, _Q1);
        v99 = vaddq_f64(v95, *v97);
        v100 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, _Q17.f64[0]), v83, _Q17, 1), _Q7, v87);
        __asm { FMLA            D23, D4, V17.D[1] }
        v102.f64[0] = _D23 + v84 * v87;
        v103 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, _Q19.f64[0]), v83, _Q19, 1), _Q7, v89);
        __asm { FMLA            D23, D4, V19.D[1] }
        v105 = _D23 + v84 * v89;
        _Q3 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, _Q21.f64[0]), v83, _Q21, 1), _Q7, v91);
        __asm { FMLA            D2, D4, V21.D[1] }
        *(double *)_Q2.i64 = *(double *)_Q2.i64 + v84 * v91;
        v107 = (float64x2_t)vzip1q_s64(v100, v103);
        _Q6 = (float64x2_t)vzip2q_s64(v100, v103);
        v109 = *(_QWORD *)*v79 + 96 * v65;
        *(float64_t *)(v109 + 16) = v102.f64[0];
        v102.f64[1] = v105;
        v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v107, v99.f64[0]), _Q6, v99, 1), v102, v98);
        _Q7.f64[0] = v99.f64[1];
        __asm { FMLA            D6, D7, V3.D[1] }
        _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], *(double *)_Q2.i64, v98);
        v111 = (int8x16_t)vnegq_f64(v110);
        *(int64x2_t *)v109 = v100;
        v112 = vextq_s8(v111, _Q3, 8uLL);
        v111.i64[1] = *(_QWORD *)&v107.f64[1];
        *(int8x16_t *)(v109 + 24) = v111;
        *(int64x2_t *)(v109 + 40) = vzip2q_s64(v103, vdupq_lane_s64(*(uint64_t *)&v105, 0));
        *(int8x16_t *)(v109 + 56) = v112;
        *(int8x16_t *)(v109 + 72) = vextq_s8(_Q3, _Q2, 8uLL);
        *(_QWORD *)(v109 + 88) = *(_OWORD *)&vnegq_f64(_Q6);
        **(_QWORD **)v79[2] = v109;
        v113 = 16 * v65;
        *(_OWORD *)(*(_QWORD *)v79[1] + v113) = *(_OWORD *)(v68 + 40);
        **(_QWORD **)v79[3] = *(_QWORD *)v79[1] + v113;
        *(_QWORD *)v79[2] += 8;
        *(_QWORD *)v79[3] += 8;
        ++v65;
      }
LABEL_41:
      v63 += 24;
      if (v63 == v64)
        goto LABEL_63;
    }
    v66 = *(_DWORD *)(v63 + 16);
    v68 = *(_QWORD *)(a2 + 496);
    v67 = *(_QWORD *)(a2 + 504);
    v69 = *(_QWORD *)v63;
    v70 = *(_DWORD *)(v63 + 8);
    v71 = v67 - v68;
    if (v67 == v68)
      goto LABEL_57;
LABEL_47:
    v72 = v71 >> 6;
    while (1)
    {
      v73 = v72 >> 1;
      v74 = v68 + (v72 >> 1 << 6);
      v75 = *(_DWORD *)(v74 + 16);
      v76 = v75 >= v66;
      if (v75 != v66)
        goto LABEL_54;
      if (*(_QWORD *)v74 >= v69)
        break;
LABEL_48:
      v68 = v74 + 64;
      v73 = v72 + ~v73;
LABEL_49:
      v72 = v73;
      if (!v73)
        goto LABEL_57;
    }
    if (*(_QWORD *)v74 != v69)
      goto LABEL_49;
    v76 = *(_DWORD *)(v74 + 8) >= v70;
LABEL_54:
    if (v76)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_63:
  v118 = 0;
  v119 = 0;
  if (*(_BYTE *)(a2 + 488))
    v114 = v5;
  else
    v114 = 0;
  v119 = *(_QWORD *)(v114 + 376);
  v118 = *(_QWORD *)(v114 + 384);
  if (v65 >= 2)
  {
    result = sub_20F2B04C8(&v117, (double *)&v119, (float64_t *)&v118, *(double ***)v3[5], *(float64_t ***)v3[3], v65, 0);
    if ((_DWORD)result)
    {
      v115 = v118;
      if (*(_BYTE *)(a2 + 488))
        v116 = v5;
      else
        v116 = 0;
      *(_QWORD *)(v116 + 376) = v119;
      *(_QWORD *)(v116 + 384) = v115;
    }
  }
  return result;
}

uint64_t sub_20F89E430(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  v2 = (_QWORD *)(a1 + 68168);
  v3 = *(_QWORD *)(a1 + 68216);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8077774924);
  v4 = (_QWORD *)(a1 + 67072);
  v5 = v2[3];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  if (*v2)
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
  sub_20F89E908(a1 + 67928);
  sub_20F89E908(a1 + 67688);
  sub_20F89E908(a1 + 67440);
  sub_20F89E908(a1 + 67200);
  v6 = *(_QWORD *)(a1 + 67176);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 67144);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(_QWORD *)(a1 + 67120);
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = (uint64_t *)(a1 + 63592);
  v10 = *(_QWORD *)(a1 + 67096);
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  if (*v4)
    MEMORY[0x212BC6368](*v4, 0x1000C8000313F17);
  sub_20F89E908(a1 + 66832);
  sub_20F89E908(a1 + 66592);
  sub_20F89E908(a1 + 66352);
  sub_20F89E908(a1 + 66112);
  sub_20F89E908(a1 + 65872);
  sub_20F89E908(a1 + 65632);
  sub_20E86872C(a1 + 65608, *(_QWORD **)(a1 + 65616));
  sub_20F89E9C8(a1 + 65584, *(_QWORD **)(a1 + 65592));
  sub_20E8E9428(a1 + 63896);
  v11 = *(std::__shared_weak_count **)(a1 + 63888);
  if (!v11)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *(std::__shared_weak_count **)(a1 + 63872);
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = *(std::__shared_weak_count **)(a1 + 63872);
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  v17 = *(_QWORD **)(a1 + 63840);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)(a1 + 63824);
  *(_QWORD *)(a1 + 63824) = 0;
  if (v19)
    operator delete(v19);
  v20 = *(_QWORD **)(a1 + 63744);
  if (v20 == (_QWORD *)(a1 + 63720))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 63720);
  }
  else
  {
    if (!v20)
      goto LABEL_36;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_36:
  v22 = *(_QWORD **)(a1 + 63712);
  if (v22 == (_QWORD *)(a1 + 63688))
  {
    v23 = 4;
    v22 = (_QWORD *)(a1 + 63688);
  }
  else
  {
    if (!v22)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_41:
  v24 = *(_QWORD **)(a1 + 63680);
  if (v24 == (_QWORD *)(a1 + 63656))
  {
    v25 = 4;
    v24 = (_QWORD *)(a1 + 63656);
  }
  else
  {
    if (!v24)
      goto LABEL_46;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_46:
  v26 = *(_QWORD **)(a1 + 63648);
  if (v26 == (_QWORD *)(a1 + 63624))
  {
    v27 = 4;
    v26 = (_QWORD *)(a1 + 63624);
    goto LABEL_50;
  }
  if (v26)
  {
    v27 = 5;
LABEL_50:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  *(_QWORD *)(a1 + 63608) = 0;
  v28 = *v9;
  if (*v9 != a1 + 63080 && v28)
    MEMORY[0x212BC6368](v28, 0x1000C8000313F17);
  sub_20F89EA1C(a1 + 4856);
  sub_20F89E908(a1 + 4608);
  sub_20F89E908(a1 + 4368);
  v29 = *(void **)(a1 + 3192);
  if (v29)
    operator delete(v29);
  v30 = *(void **)(a1 + 3168);
  if (v30)
  {
    *(_QWORD *)(a1 + 3176) = v30;
    operator delete(v30);
  }
  v31 = *(_QWORD **)(a1 + 3120);
  if (v31)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  v33 = *(void **)(a1 + 3104);
  *(_QWORD *)(a1 + 3104) = 0;
  if (v33)
    operator delete(v33);
  sub_20F0287BC((_QWORD *)(a1 + 2192));
  sub_20F6304A4(a1 + 528);
  v34 = *(std::__shared_weak_count **)(a1 + 512);
  if (!v34)
    goto LABEL_66;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = *(char **)(a1 + 480);
    if (!v37)
      goto LABEL_77;
  }
  else
  {
LABEL_66:
    v37 = *(char **)(a1 + 480);
    if (!v37)
      goto LABEL_77;
  }
  v38 = *(char **)(a1 + 488);
  v39 = v37;
  if (v38 != v37)
  {
    do
    {
      v40 = (std::__shared_weak_count *)*((_QWORD *)v38 - 1);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v38 -= 16;
    }
    while (v38 != v37);
    v39 = *(char **)(a1 + 480);
  }
  *(_QWORD *)(a1 + 488) = v37;
  operator delete(v39);
LABEL_77:
  v43 = *(void **)(a1 + 152);
  if (v43)
  {
    *(_QWORD *)(a1 + 160) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(a1 + 72);
  if (v44)
  {
    *(_QWORD *)(a1 + 80) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(a1 + 48);
  if (v45)
  {
    *(_QWORD *)(a1 + 56) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(a1 + 24);
  if (v46)
  {
    *(_QWORD *)(a1 + 32) = v46;
    operator delete(v46);
  }
  return a1;
}

uint64_t sub_20F89E908(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 120);
  if (v6)
  {
    *(_QWORD *)(a1 + 128) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = v10;
    operator delete(v10);
  }
  v11 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_20F89E9C8(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_20F89E9C8(a1, *a2);
    sub_20F89E9C8(a1, a2[1]);
    v4 = (void *)a2[98];
    if (v4)
    {
      a2[99] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_20F89EA1C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  _QWORD *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char *v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  uint64_t v57;

  v2 = a1 + 57840;
  *(_QWORD *)a1 = off_24CA030C0;
  if (*(_BYTE *)(a1 + 58055))
  {
    printf("LPFG solver offloaded %zu frames, %zu did fallback (total %zu)\n", *(_QWORD *)(a1 + 58016), *(_QWORD *)(a1 + 58024), *(_QWORD *)(a1 + 58024) + *(_QWORD *)(a1 + 58016));
    if (*(_QWORD *)(v2 + 232))
      v3 = "";
    else
      v3 = " (empty)";
    printf("LPFG injected factor statistics:%s\n", v3);
    v4 = *(_QWORD **)(v2 + 216);
    if (v4 != (_QWORD *)(a1 + 58064))
    {
      do
      {
        v5 = (const char *)(v4 + 4);
        if (*((char *)v4 + 55) < 0)
          v5 = *(const char **)v5;
        printf("  %s: seen %zu times in %zu frames (%.3f obs / frame)\n", v5, v4[8], v4[7], (double)(unint64_t)v4[8] / (double)(unint64_t)v4[7]);
        v6 = (_QWORD *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v4[2];
            v8 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != (_QWORD *)(a1 + 58064));
    }
    if (vaddvq_s32(*(int32x4_t *)(v2 + 240)) + *(_DWORD *)(v2 + 256))
      v9 = "";
    else
      v9 = " (empty)";
    printf("LPFG batched marginalization statistics:%s\n", v9);
    if (*(_DWORD *)(v2 + 240))
      printf("  batched: %u frames\n", *(_DWORD *)(v2 + 240));
    if (*(_DWORD *)(v2 + 244))
      printf("  disabled: %u frames\n", *(_DWORD *)(v2 + 244));
    if (*(_DWORD *)(v2 + 248))
      printf("  intermediates not prepared: %u frames\n", *(_DWORD *)(v2 + 248));
    v10 = (_DWORD *)(a1 + 58100);
    if (*(_DWORD *)(v2 + 252))
      printf("  had injected costs: %u frames\n", *(_DWORD *)(v2 + 252));
    if (*(_DWORD *)(v2 + 256))
      printf("  invalid linearization mode: %u frames\n", *(_DWORD *)(v2 + 256));
    if (vaddvq_s32(*(int32x4_t *)(a1 + 58100)) + *(_DWORD *)(a1 + 58116) + *(_DWORD *)(a1 + 58120))
      v11 = "";
    else
      v11 = " (empty)";
    printf("LPFG batched track classification statistics:%s\n", v11);
    if (*v10)
      printf("  batched: %u frames\n", *v10);
    if (*(_DWORD *)(a1 + 58104))
      printf("  wasted compute: %u frames\n", *(_DWORD *)(a1 + 58104));
    if (*(_DWORD *)(a1 + 58108))
      printf("  disabled: %u frames\n", *(_DWORD *)(a1 + 58108));
    if (*(_DWORD *)(a1 + 58112))
      printf("  costs not computed: %u frames\n", *(_DWORD *)(a1 + 58112));
    if (*(_DWORD *)(a1 + 58116))
      printf("  bundle not updated: %u frames\n", *(_DWORD *)(a1 + 58116));
    if (*(_DWORD *)(a1 + 58120))
      printf("  other missed: %u frames\n", *(_DWORD *)(a1 + 58120));
    if (vaddvq_s32(vaddq_s32(*(int32x4_t *)(a1 + 58124), *(int32x4_t *)(a1 + 58140))) + *(_DWORD *)(a1 + 58156))
      v12 = "";
    else
      v12 = " (empty)";
    printf("LPFG fallback reasons statistics:%s\n", v12);
    if (*(_DWORD *)(a1 + 58124))
      printf("  multiple iterations: %u times\n", *(_DWORD *)(a1 + 58124));
    if (*(_DWORD *)(a1 + 58128))
      printf("  still initializing: %u times\n", *(_DWORD *)(a1 + 58128));
    if (*(_DWORD *)(a1 + 58132))
      printf("  always fallback enabled: %u times\n", *(_DWORD *)(a1 + 58132));
    if (*(_DWORD *)(a1 + 58136))
      printf("  IMU buffer too large: %u times\n", *(_DWORD *)(a1 + 58136));
    if (*(_DWORD *)(a1 + 58140))
      printf("  lines or planes: %u times\n", *(_DWORD *)(a1 + 58140));
    if (*(_DWORD *)(a1 + 58144))
      printf("  SLAM features: %u times\n", *(_DWORD *)(a1 + 58144));
    if (*(_DWORD *)(a1 + 58152))
      printf("  injected factors: %u times\n", *(_DWORD *)(a1 + 58152));
    if (*(_DWORD *)(a1 + 58148))
      printf("  light BA: %u times\n", *(_DWORD *)(a1 + 58148));
    if (*(_DWORD *)(a1 + 58156))
      printf("  other: %u times\n", *(_DWORD *)(a1 + 58156));
  }
  sub_20E866BE0(a1 + 58056, *(char **)(v2 + 224));
  v13 = *(_QWORD *)(v2 + 136);
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  v14 = *(_QWORD *)(v2 + 112);
  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  v15 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v15)
  {
    v57 = v15;
    v16 = *(_QWORD *)(v2 + 104);
    if (!v16)
      sub_20E86D37C();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v57);
  }
  v17 = *(_QWORD **)(v2 + 104);
  if (v17 == (_QWORD *)(v2 + 80))
  {
    v18 = 4;
    v17 = (_QWORD *)(v2 + 80);
    goto LABEL_76;
  }
  if (v17)
  {
    v18 = 5;
LABEL_76:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v19 = *(std::__shared_weak_count **)(v2 + 56);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void **)(a1 + 57584);
  v23 = *(_QWORD *)(v2 + 24);
  if (v23)
    MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
  if (*(_QWORD *)v2)
    MEMORY[0x212BC6368](*(_QWORD *)v2, 0x1000C8000313F17);
  v24 = *(_QWORD *)(a1 + 57816);
  if (v24)
    MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
  v25 = *(void **)(a1 + 57792);
  if (v25)
  {
    *(_QWORD *)(a1 + 57800) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 57768);
  if (v26)
  {
    *(_QWORD *)(a1 + 57776) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 57736);
  if (v27)
  {
    *(_QWORD *)(a1 + 57744) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 57712);
  if (v28)
  {
    *(_QWORD *)(a1 + 57720) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 57688);
  if (v29)
  {
    *(_QWORD *)(a1 + 57696) = v29;
    operator delete(v29);
  }
  v30 = *(_QWORD *)(a1 + 57656);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 57664);
    v32 = *(void **)(a1 + 57656);
    if (v31 != v30)
    {
      v33 = *(_QWORD *)(a1 + 57664);
      do
      {
        v35 = *(void **)(v33 - 24);
        v33 -= 24;
        v34 = v35;
        if (v35)
        {
          *(_QWORD *)(v31 - 16) = v34;
          operator delete(v34);
        }
        v31 = v33;
      }
      while (v33 != v30);
      v32 = *(void **)(a1 + 57656);
    }
    *(_QWORD *)(a1 + 57664) = v30;
    operator delete(v32);
  }
  v36 = *(void **)(a1 + 57632);
  if (v36)
  {
    *(_QWORD *)(a1 + 57640) = v36;
    operator delete(v36);
  }
  v37 = (_QWORD *)(a1 + 57320);
  v38 = *(void **)(a1 + 57608);
  if (v38)
  {
    *(_QWORD *)(a1 + 57616) = v38;
    operator delete(v38);
  }
  v39 = *v22;
  if (*v22)
  {
    *(_QWORD *)(a1 + 57592) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(a1 + 57560);
  if (v40)
  {
    *(_QWORD *)(a1 + 57568) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(a1 + 57536);
  if (v41)
  {
    *(_QWORD *)(a1 + 57544) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(a1 + 57512);
  if (v42)
  {
    *(_QWORD *)(a1 + 57520) = v42;
    operator delete(v42);
  }
  v43 = *(char **)(a1 + 57488);
  if (v43)
  {
    v44 = *(_BYTE **)(a1 + 57496);
    if (v44 != v43)
    {
      v45 = v44 - v43 - 1000;
      v46 = *(char **)(a1 + 57496);
      if (v45 < 0x3E8)
        goto LABEL_144;
      v47 = v45 / 0x3E8 + 1;
      v46 = &v44[-1000 * (v47 & 0xFFFFFFFFFFFFFELL)];
      v48 = v44 - 1008;
      v49 = v47 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v48[250] = 0;
        *v48 = 0;
        v48 -= 500;
        v49 -= 2;
      }
      while (v49);
      if (v47 != (v47 & 0xFFFFFFFFFFFFFELL))
      {
LABEL_144:
        do
        {
          *((_DWORD *)v46 - 2) = 0;
          v46 -= 1000;
        }
        while (v46 != v43);
      }
    }
    *(_QWORD *)(a1 + 57496) = v43;
    operator delete(v43);
  }
  v50 = *(_QWORD *)(a1 + 57384);
  if (v50)
    MEMORY[0x212BC6368](v50, 0x1000C8000313F17);
  v51 = *(_QWORD **)(a1 + 57376);
  if (v51 == (_QWORD *)(a1 + 57352))
  {
    v52 = 4;
    v51 = (_QWORD *)(a1 + 57352);
  }
  else
  {
    if (!v51)
      goto LABEL_133;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_133:
  v53 = *(_QWORD **)(a1 + 57344);
  if (v53 == v37)
  {
    v54 = 4;
  }
  else
  {
    if (!v53)
      goto LABEL_138;
    v54 = 5;
    v37 = *(_QWORD **)(a1 + 57344);
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v54))(v37);
LABEL_138:
  sub_20F8A3D80((_QWORD *)(a1 + 22864));
  sub_20F8ADC44((_QWORD *)(a1 + 21120));
  sub_20F89E908(a1 + 20880);
  sub_20F89E908(a1 + 20640);
  v55 = *(void **)(a1 + 20536);
  if (v55)
  {
    *(_QWORD *)(a1 + 20544) = v55;
    operator delete(v55);
  }
  sub_20F89E908(a1 + 20296);
  sub_20F8ADD80((_QWORD *)(a1 + 18576));
  return sub_20F89F264(a1);
}

uint64_t sub_20F89F16C(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = *(char **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
    {
      v4 = v3 - v2 - 1000;
      v5 = *(char **)(a1 + 8);
      if (v4 < 0x3E8)
        goto LABEL_12;
      v6 = v4 / 0x3E8 + 1;
      v5 = &v3[-1000 * (v6 & 0xFFFFFFFFFFFFFELL)];
      v7 = v3 - 1008;
      v8 = v6 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v7[250] = 0;
        *v7 = 0;
        v7 -= 500;
        v8 -= 2;
      }
      while (v8);
      if (v6 != (v6 & 0xFFFFFFFFFFFFFELL))
      {
LABEL_12:
        do
        {
          *((_DWORD *)v5 - 2) = 0;
          v5 -= 1000;
        }
        while (v5 != v2);
      }
    }
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20F89F220(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 + 104;
  sub_20F89E908(a1 + 344);
  sub_20F89E908(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20F89F264(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24CA03E90;
  sub_20F89E908(a1 + 18312);
  sub_20F8A4000((_QWORD *)(a1 + 3112));
  v2 = *(_QWORD *)(a1 + 3008);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA03F48;
  *(_QWORD *)(a1 + 312) = &off_24CA03FB8;
  sub_20F8ADA70(a1 + 2704);
  sub_20F8ADA70(a1 + 2440);
  sub_20F8ADA70(a1 + 2176);
  sub_20F8ADA70(a1 + 1912);
  v3 = *(void **)(a1 + 1832);
  if (v3)
  {
    *(_QWORD *)(a1 + 1840) = v3;
    operator delete(v3);
  }
  sub_20F8AE430((void **)(a1 + 1376));
  sub_20F8AF650(a1 + 320);
  return a1;
}

void sub_20F89F31C(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  *((_BYTE *)&v3.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v3, "ARCholesky");
  v2 = std::string::insert(&v3, 0, "DenseSchur", 0xAuLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_20F89F3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F89F3D0(uint64_t a1)
{
  uint64_t v2;

  kdebug_trace();
  v2 = sub_20F8B1D74(a1);
  kdebug_trace();
  return v2;
}

void sub_20F89F468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F89F480(uint64_t a1, const void **a2)
{
  const void **v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  int v10;

  kdebug_trace();
  v4 = (const void **)(a1 + 57952);
  *(_DWORD *)(a1 + 58012) = 0;
  *(_BYTE *)(a1 + 58160) = 0;
  *(_QWORD *)(a1 + 58000) = 0;
  *(_BYTE *)(a1 + 58008) = 0;
  if (!sub_20F8B1D74(a1))
  {
    *(_BYTE *)(a1 + 2968) = 1;
    if (v4 == a2)
    {
LABEL_12:
      v5 = 0;
      *(_BYTE *)(a1 + 2973) = 0;
      goto LABEL_13;
    }
    v6 = *(unsigned int *)(a1 + 57968);
    if ((unint64_t)a2[1] >= v6)
    {
      if (!(_DWORD)v6)
      {
        v10 = 0;
        goto LABEL_11;
      }
      v9 = (void *)*a2;
      v7 = 8 * v6;
    }
    else
    {
      if (*a2)
        MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v7 = 8 * v6;
      v8 = (v7 + 31) & 0xFFFFFFFE0;
      *a2 = 0;
      a2[1] = (const void *)(v8 >> 3);
      v9 = operator new(v8, (std::align_val_t)0x20uLL);
      *a2 = v9;
    }
    memcpy(v9, *v4, v7);
    v10 = *(_DWORD *)(a1 + 57968);
LABEL_11:
    *((_DWORD *)a2 + 4) = v10;
    goto LABEL_12;
  }
  *(_BYTE *)(a1 + 2968) = 0;
  *(_BYTE *)(a1 + 2973) = 0;
  v5 = 1;
  *(_BYTE *)(a1 + 58008) = 1;
LABEL_13:
  kdebug_trace();
  return v5;
}

void sub_20F89F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F89F600(uint64_t a1)
{
  return a1 + 57952;
}

double sub_20F89F60C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  double **v4;
  _QWORD *v5;
  float64x2_t v6;
  double v7;
  double v8;
  __n128 v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  unint64_t v16;
  double *v17;
  double result;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  float64x2_t *v31;
  uint64_t i;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double *v42;
  uint64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t v46;
  float64x2_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  float64x2_t *v52;
  float64x2_t *v53;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  double *v68;
  double v69;

  v1 = (uint64_t)(a1 + 4775);
  if (!(((a1[4779] - a1[4778]) >> 2)
       + ((a1[4776] - a1[4775]) >> 2)
       + ((a1[4782] - a1[4781]) >> 2)
       + ((a1[4785] - a1[4784]) >> 2)
       + ((a1[4788] - a1[4787]) >> 2)
       + ((a1[4791] - a1[4790]) >> 2)
       + ((a1[4794] - a1[4793]) >> 2)
       + ((a1[4797] - a1[4796]) >> 2)
       + ((a1[4800] - a1[4799]) >> 2)
       + ((a1[4803] - a1[4802]) >> 2)))
    return 0.0;
  v3 = (uint64_t)(a1 + 4993);
  v4 = (double **)(a1 + 5005);
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(a1[2858] + 32))(a1 + 2858);
  sub_20F927604(v5, v3 + 96, v1, (uint64_t)(a1 + 2859), v6, v7, v8, v9);
  sub_20F926890(a1 + 2875, (void **)v3);
  sub_20F20B6B0(v3);
  v10 = *(unsigned int *)(v3 + 112);
  if (!(_DWORD)v10)
    return -0.0;
  v11 = *v4;
  v12 = (double *)a1[2862];
  v13 = **v4;
  v14 = v13 * *v12;
  if ((_DWORD)v10 != 1)
  {
    v15 = v11 + 1;
    v16 = (v10 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v16 < 3)
    {
      v17 = (double *)a1[2862];
LABEL_12:
      v26 = v17 + 1;
      do
      {
        v27 = *v15++;
        v28 = v27;
        v29 = *v26++;
        v14 = v14 + v28 * v29;
      }
      while (v15 != &v11[v10]);
      goto LABEL_14;
    }
    v19 = v16 + 1;
    v20 = (v16 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v15 += v20;
    v17 = &v12[v20];
    v21 = (float64x2_t *)(v12 + 3);
    v22 = (float64x2_t *)(v11 + 3);
    v23 = v20;
    do
    {
      v24 = vmulq_f64(v22[-1], v21[-1]);
      v25 = vmulq_f64(*v22, *v21);
      v14 = v14 + v24.f64[0] + v24.f64[1] + v25.f64[0] + v25.f64[1];
      v21 += 2;
      v22 += 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != v20)
      goto LABEL_12;
  }
LABEL_14:
  result = -v14;
  v30 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v30)
  {
    if (v10 >= 4)
    {
      v33 = v10 & 0xFFFFFFFC;
      v62 = (float64x2_t *)(v11 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v64 = v33;
      do
      {
        v65 = vmulq_f64(vmulq_f64(v62[-1], _Q1), (float64x2_t)0);
        v66 = vmulq_f64(vmulq_f64(*v62, _Q1), (float64x2_t)0);
        result = result + v65.f64[0] + v65.f64[1] + v66.f64[0] + v66.f64[1];
        v62 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v33 == v10)
        return result;
    }
    else
    {
      v33 = 0;
    }
    v67 = v10 - v33;
    v68 = &v11[v33];
    do
    {
      v69 = *v68++;
      result = result + v69 * 0.5 * 0.0;
      --v67;
    }
    while (v67);
    return result;
  }
  v31 = *(float64x2_t **)v3;
  if ((_DWORD)v30 != 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = (v30 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v38 = &v31->f64[(v30 * v35)];
      v40 = *v38;
      v39 = v38 + 1;
      v41 = v13 * v40;
      if (v36 >= 3)
      {
        v39 += v37;
        v43 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v44 = (float64x2_t *)(v11 + 3);
        v45 = (float64x2_t *)((char *)v31 + 8 * v34 + 24);
        do
        {
          v46 = vmulq_f64(v45[-1], v44[-1]);
          v47 = vmulq_f64(*v45, *v44);
          v41 = v41 + v46.f64[0] + v46.f64[1] + v47.f64[0] + v47.f64[1];
          v44 += 2;
          v45 += 2;
          v43 -= 4;
        }
        while (v43);
        v42 = &v11[v37];
        if (v36 + 1 == v37)
          goto LABEL_21;
      }
      else
      {
        v42 = *v4;
      }
      v48 = v42 + 1;
      do
      {
        v49 = *v39++;
        v50 = v49;
        v51 = *v48++;
        v41 = v41 + v50 * v51;
      }
      while (v39 != &v31->f64[(v30 * v35) + v30]);
LABEL_21:
      result = result + v11[v35++] * 0.5 * v41;
      v34 += v30;
      if (v35 == v10)
        return result;
    }
  }
  if (v10 < 4)
  {
    for (i = 0; i != v10; ++i)
LABEL_33:
      result = result + v11[i] * 0.5 * (v13 * v31->f64[i]);
    return result;
  }
  i = v10 & 0xFFFFFFFC;
  v52 = (float64x2_t *)(v11 + 2);
  v53 = v31 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v59 = i;
  do
  {
    v60 = vmulq_f64(vmulq_f64(v52[-1], _Q2), vmulq_n_f64(v53[-1], v13));
    v61 = vmulq_f64(vmulq_f64(*v52, _Q2), vmulq_n_f64(*v53, v13));
    result = result + v60.f64[0] + v60.f64[1] + v61.f64[0] + v61.f64[1];
    v52 += 2;
    v53 += 2;
    v59 -= 4;
  }
  while (v59);
  if (i != v10)
    goto LABEL_33;
  return result;
}

double sub_20F89FA3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t v25;
  uint64_t k;
  uint64_t v27;
  uint64_t v33;
  uint64_t m;
  uint64_t v35;
  uint64_t n;
  uint64_t v42;
  uint64_t ii;
  uint64_t v47;
  uint64_t jj;
  uint64_t v49;
  uint64_t kk;
  uint64_t v55;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t mm;
  uint64_t v67;
  unsigned int v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  double v76;

  v2 = a1[40];
  v3 = a1[41];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v72 = 3;
      v73 = v5 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[52]; j != a1[53]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  v25 = a1[64];
  for (k = a1[65]; v25 != k; v25 += 16)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v27 + 4) & 2) == 0 && *(_BYTE *)(v27 + 20))
    {
      v72 = 3;
      v73 = v27 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v27 + 120) * *(double *)(v27 + 120);
    }
  }
  v33 = a1[76];
  for (m = a1[77]; v33 != m; v33 += 16)
  {
    v35 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v35 + 4) & 2) == 0 && *(_BYTE *)(v35 + 20))
    {
      v72 = 3;
      v73 = v35 + 32;
      v74 = 0;
      v76 = 0.0;
      v75 = 0uLL;
      sub_20F053450(&v72, (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D5 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v35 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v35 + 120) * *(double *)(v35 + 120);
    }
  }
  for (n = a1[88]; n != a1[89]; n += 16)
  {
    v42 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v42 + 48) * *(double *)(v42 + 48);
    }
  }
  for (ii = a1[100]; ii != a1[101]; ii += 16)
  {
    v47 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v47 + 4) & 2) == 0 && *(_BYTE *)(v47 + 20))
      i = i + *(double *)(v47 + 32) * *(double *)(v47 + 32);
  }
  for (jj = a1[112]; jj != a1[113]; jj += 16)
  {
    v49 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      _Q1 = *(_OWORD *)(v49 + 32);
      _D3 = *(_QWORD *)(v49 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v49 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (kk = a1[124]; kk != a1[125]; kk += 16)
  {
    v55 = *(_QWORD *)(kk + 8);
    if ((*(_BYTE *)(v55 + 4) & 2) == 0 && *(_BYTE *)(v55 + 20))
    {
      _Q1 = *(_OWORD *)(v55 + 32);
      _D3 = *(_QWORD *)(v55 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v55 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v60 = a1[136];
  v61 = a1[137];
  while (v60 != v61)
  {
    v62 = *(_QWORD *)(v60 + 8);
    if ((*(_BYTE *)(v62 + 4) & 2) == 0 && *(_BYTE *)(v62 + 20))
    {
      v75 = 0uLL;
      v76 = 0.0;
      sub_20E9733B8((float64x2_t *)(v62 + 32), (double *)&v75);
      _V1.D[1] = *((_QWORD *)&v75 + 1);
      _D3 = *((_QWORD *)&v75 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v76 * v76;
    }
    v60 += 16;
  }
  for (mm = a1[148]; mm != a1[149]; mm += 16)
  {
    v67 = *(_QWORD *)(mm + 8);
    if ((*(_BYTE *)(v67 + 4) & 2) == 0 && *(_BYTE *)(v67 + 20))
    {
      _Q1 = *(_OWORD *)(v67 + 32);
      _D3 = *(_QWORD *)(v67 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v67 + 48) * *(double *)(v67 + 48);
    }
  }
  return i;
}

uint64_t sub_20F89FE7C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  __int128 *v20;
  _QWORD *v21;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  __int128 *v52;
  _QWORD *v53;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  __int128 *v65;
  _QWORD *v66;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  double *v124;
  float64x2_t v128;
  float64x2_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t i;
  unsigned int *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  float64x2_t v137;
  double v141;
  __double2 v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  float64x2_t v155;
  double v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  float64x2_t v160;
  uint64_t v161;
  uint64_t v162;
  float64x2_t *v163;
  uint64_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64_t v174;
  uint64_t j;
  unsigned int *v176;
  uint64_t v177;
  float64x2_t v178;
  __int128 v179;
  uint64_t v180;
  double v184;
  __double2 v185;
  float64x2_t v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  float64x2_t v196;
  double v197;
  float64x2_t v198;
  float64x2_t v199;
  double v200;
  float64x2_t v201;
  double v202;
  float64x2_t v203;
  uint64_t v204;
  uint64_t k;
  unsigned int *v206;
  uint64_t v207;
  float64x2_t v208;
  __int128 v209;
  uint64_t v210;
  double v214;
  __double2 v215;
  float64x2_t v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  float64x2_t v226;
  double v227;
  float64x2_t v228;
  float64x2_t v229;
  double v230;
  float64x2_t v231;
  double v232;
  float64x2_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  float64x2_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  double *v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  float64x2_t *v253;
  float64x2_t *v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  float64x2_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  float64x2_t v272;
  float64x2_t *v273;
  __n128 v274;
  uint64_t **m;
  uint64_t v276;
  uint64_t n;
  double v278;
  double cosval;
  __double2 v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  float64x2_t v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  float64x2_t v296;
  float64x2_t v297;
  double v298;
  double v300;
  double v302;
  double v304;
  float64x2_t v306;
  double v308;
  unsigned int *v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  double v319;
  uint64_t v320;
  uint64_t v321;
  float64x2_t *v322;
  uint64_t v323;
  float64x2_t v324;
  float64x2_t *v325;
  uint64_t v326;
  _BYTE *v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  __int128 *v333;
  uint64_t v334;
  unsigned int v335;
  _DWORD *v336;
  _DWORD *v337;
  unint64_t v338;
  unint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  _DWORD *v342;
  uint64_t v343;
  __int128 v344;
  char v345;
  float64x2_t v346;
  float64x2_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  double *v357;
  _DWORD *v358;
  _DWORD *v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  _DWORD *v363;
  unint64_t v364;
  unint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  _DWORD *v368;
  double v369;
  double v370;
  uint64_t v371;
  double v372;
  double v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  uint64_t v409;
  __int128 v410;
  __int128 v411;
  char *v412;
  char *v413;
  int v414;
  uint64_t v415;
  uint64_t nn;
  unsigned int *v417;
  uint64_t v418;
  float64x2_t v419;
  __int128 v420;
  uint64_t v421;
  double v425;
  __double2 v426;
  float64x2_t v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  float64x2_t v437;
  double v438;
  float64x2_t v439;
  float64x2_t v440;
  double v441;
  float64x2_t v442;
  double v443;
  float64x2_t v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int *v447;
  uint64_t v448;
  float64x2_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  __int128 v461;
  char *v462;
  char *v463;
  unsigned int v464;
  int v465;
  char *v466;
  _OWORD *v467;
  __int128 v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int *v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  float64x2_t v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  float64x2_t v483;
  float64x2_t *v484;
  __n128 v485;
  uint64_t **i1;
  uint64_t v487;
  uint64_t i2;
  double v489;
  double v490;
  __double2 v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  float64x2_t v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  float64x2_t v507;
  float64x2_t v508;
  double v509;
  double v511;
  double v513;
  double v515;
  float64x2_t v517;
  double v519;
  unsigned int *v522;
  uint64_t v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  double v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  __int128 v538;
  uint64_t v539;
  _BOOL4 v540;
  unsigned int *v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  float64x2_t v545;
  double v549;
  __double2 v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  double v557;
  double v558;
  double v559;
  double v560;
  double v561;
  double v562;
  float64x2_t v563;
  double v564;
  float64x2_t v565;
  double v566;
  float64x2_t v567;
  float64x2_t v568;
  uint64_t v569;
  uint64_t v570;
  float64x2_t *v571;
  uint64_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  uint64_t v579;
  float64x2_t v580;
  float64x2_t v581;
  uint64_t v582;
  uint64_t ii;
  unsigned int *v584;
  uint64_t v585;
  float64x2_t v586;
  __int128 v587;
  uint64_t v588;
  double v592;
  __double2 v593;
  float64x2_t v594;
  double v595;
  double v596;
  double v597;
  double v598;
  double v599;
  double v600;
  double v601;
  double v602;
  double v603;
  float64x2_t v604;
  double v605;
  float64x2_t v606;
  float64x2_t v607;
  double v608;
  float64x2_t v609;
  double v610;
  float64x2_t v611;
  uint64_t v612;
  uint64_t jj;
  unsigned int *v614;
  uint64_t v615;
  float64x2_t v616;
  __int128 v617;
  uint64_t v618;
  double v622;
  __double2 v623;
  float64x2_t v624;
  double v625;
  double v626;
  double v627;
  double v628;
  double v629;
  double v630;
  double v631;
  double v632;
  double v633;
  float64x2_t v634;
  double v635;
  float64x2_t v636;
  float64x2_t v637;
  double v638;
  float64x2_t v639;
  double v640;
  float64x2_t v641;
  uint64_t v642;
  uint64_t v643;
  unsigned int *v644;
  uint64_t v645;
  float64x2_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  double *v651;
  uint64_t v652;
  double v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned int *v657;
  uint64_t v658;
  __int128 v659;
  uint64_t v660;
  float64x2_t *v661;
  float64x2_t *v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  uint64_t v666;
  uint64_t v667;
  unsigned int *v668;
  uint64_t v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  float64x2_t v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  float64x2_t v680;
  float64x2_t *v681;
  __n128 v682;
  uint64_t **kk;
  uint64_t v684;
  uint64_t mm;
  double v686;
  double v687;
  __double2 v688;
  double v689;
  double v690;
  double v691;
  double v692;
  double v693;
  double v694;
  float64x2_t v695;
  double v696;
  double v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  float64x2_t v704;
  float64x2_t v705;
  double v706;
  double v708;
  double v710;
  double v712;
  float64x2_t v714;
  double v716;
  unsigned int *v719;
  uint64_t v720;
  __int128 v721;
  __int128 v722;
  uint64_t v723;
  double v727;
  uint64_t v728;
  uint64_t v729;
  float64x2_t *v730;
  uint64_t v731;
  float64x2_t v732;
  float64x2_t *v733;
  uint64_t v734;
  uint64_t result;
  __int128 v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  double v740;
  double *v741;
  unsigned int v742;
  _DWORD *v743;
  _DWORD *v744;
  unint64_t v745;
  unint64_t v746;
  unsigned int *v747;
  unsigned int v748;
  _DWORD *v749;
  double v750;
  _QWORD *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unsigned int *v755;
  unsigned int *v756;
  __int128 *v757;
  _QWORD *v758;
  uint64_t v766;
  uint64_t v767;
  unsigned int *v768;
  unsigned int *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v781;
  uint64_t v782;
  unsigned int *v783;
  unsigned int *v784;
  __int128 *v785;
  _QWORD *v786;
  uint64_t v794;
  uint64_t v795;
  unsigned int *v796;
  unsigned int *v797;
  __int128 *v798;
  _QWORD *v799;
  uint64_t v807;
  uint64_t v808;
  unsigned int *v809;
  unsigned int *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v816;
  uint64_t v817;
  unsigned int *v818;
  unsigned int *v819;
  uint64_t v820;
  uint64_t v821;
  unsigned int *v822;
  unsigned int *v823;
  uint64_t v824;
  __int128 *v825;
  uint64_t v831;
  uint64_t v832;
  unsigned int *v833;
  unsigned int *v834;
  uint64_t v835;
  __int128 *v836;
  uint64_t v842;
  uint64_t v843;
  unsigned int *v844;
  unsigned int *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v851;
  uint64_t v852;
  unsigned int *v853;
  unsigned int *v854;
  uint64_t v855;
  uint64_t v856;
  double *v857;
  char v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  double v869;
  double v870;
  double v871;
  double v872;
  double v873;
  double v874;
  double v875;

  v4 = (uint64_t *)(a1 + 57912);
  v5 = a1 + 57488;
  ++*(_DWORD *)(a1 + 58000);
  v6 = *(_QWORD *)(a1 + 57912);
  v7 = v6 + 31048;
  if (*(_DWORD *)(v6 + 31048) && !*(_BYTE *)(a1 + 58050))
  {
    if (*(_DWORD *)(a1 + 58012))
    {
      v331 = *(_QWORD *)(a1 + 1280);
      v332 = *(_QWORD *)(a1 + 1288);
      if (v331 != v332)
      {
        v333 = (__int128 *)(v6 + 21320);
        if (*(_DWORD *)(v7 + 8))
        {
          do
          {
            v334 = *(_QWORD *)(v331 + 8);
            v335 = *(_DWORD *)(v334 + 16);
            v337 = *(_DWORD **)v5;
            v336 = *(_DWORD **)(v5 + 8);
            if (v336 != *(_DWORD **)v5)
            {
              v338 = 0x1CAC083126E978D5 * (((uint64_t)v336 - *(_QWORD *)v5) >> 3);
              do
              {
                v339 = v338 >> 1;
                v340 = &v337[250 * (v338 >> 1)];
                v341 = *v340;
                v342 = v340 + 250;
                v338 += ~(v338 >> 1);
                if (v341 < v335)
                  v337 = v342;
                else
                  v338 = v339;
              }
              while (v338);
            }
            if (v337 != v336 && *v337 == v335)
            {
              *(_QWORD *)(v334 + 40) = *(_QWORD *)(v334 + 32);
              *(_QWORD *)(v334 + 32) = *((_QWORD *)v333 + 3);
              v343 = *(_QWORD *)(v334 + 24);
              if ((*(_QWORD *)v333 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              {
                *(_WORD *)(v343 + 57) = 256;
              }
              else
              {
                v344 = *v333;
                *(_QWORD *)(v343 + 80) = *((_QWORD *)v333 + 2);
                *(_OWORD *)(v343 + 64) = v344;
              }
              v333 += 2;
            }
            v331 += 16;
          }
          while (v331 != v332);
        }
        else
        {
          do
          {
            while (1)
            {
              v737 = *(_QWORD **)(v331 + 8);
              v737[5] = v737[4];
              v737[4] = *((_QWORD *)v333 + 3);
              v738 = v737[3];
              if ((*(_QWORD *)v333 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                break;
              v736 = *v333;
              *(_QWORD *)(v738 + 80) = *((_QWORD *)v333 + 2);
              *(_OWORD *)(v738 + 64) = v736;
              v333 += 2;
              v331 += 16;
              if (v331 == v332)
                goto LABEL_3;
            }
            *(_WORD *)(v738 + 57) = 256;
            v333 += 2;
            v331 += 16;
          }
          while (v331 != v332);
        }
      }
    }
    else
    {
      v355 = *(_QWORD *)(a1 + 1280);
      v356 = *(_QWORD *)(a1 + 1288);
      if (v355 != v356)
      {
        v357 = *(double **)(a1 + 57976);
        if (*(_DWORD *)(v7 + 8))
        {
          v358 = *(_DWORD **)v5;
          v359 = *(_DWORD **)(a1 + 57496);
          if (v359 != *(_DWORD **)v5)
          {
            v360 = 0x1CAC083126E978D5 * (((uint64_t)v359 - *(_QWORD *)v5) >> 3);
            do
            {
              v361 = *(_QWORD *)(v355 + 8);
              v362 = *(_DWORD *)(v361 + 16);
              v363 = v358;
              v364 = v360;
              do
              {
                v365 = v364 >> 1;
                v366 = &v363[250 * (v364 >> 1)];
                v367 = *v366;
                v368 = v366 + 250;
                v364 += ~(v364 >> 1);
                if (v367 < v362)
                  v363 = v368;
                else
                  v364 = v365;
              }
              while (v364);
              if (v363 != v359 && *v363 == v362)
              {
                v369 = *(double *)(v361 + 32);
                *(double *)(v361 + 40) = v369;
                v370 = *v357++;
                *(double *)(v361 + 32) = v369 - v370;
              }
              v355 += 16;
            }
            while (v355 != v356);
          }
        }
        else
        {
          do
          {
            v371 = *(_QWORD *)(v355 + 8);
            v372 = *(double *)(v371 + 32);
            *(double *)(v371 + 40) = v372;
            v373 = *v357++;
            *(double *)(v371 + 32) = v372 - v373;
            v355 += 16;
          }
          while (v355 != v356);
        }
      }
    }
  }
LABEL_3:
  if (*((_BYTE *)v4 + 138))
  {
    kdebug_trace();
    v8 = *(_QWORD *)(a1 + 21992);
    v9 = *(_QWORD *)(a1 + 22000);
    if (v8 != v9)
    {
      v10 = *a2;
      do
      {
        v12 = *(double **)v8;
        if (**(_DWORD **)v8 != -1)
        {
          v13 = *(double *)(v8 + 16);
          v14 = *(_QWORD **)(v8 + 128);
          v15 = *(_QWORD *)(v8 + 24);
          v16 = *(_QWORD *)(v8 + 48);
          if (v16)
          {
            v17 = v14[46];
            v18 = (unsigned int *)(v17 + 16 * (v16 + v15));
            v19 = (unsigned int *)(v17 + 16 * v15);
            do
            {
              v20 = (__int128 *)(v14[6] + 8 * *((_QWORD *)v19 + 1));
              v21 = (_QWORD *)(v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22384) + 4 * *v19));
              _Q2 = v20[1];
              _Q1 = v20[2];
              _Q3 = *v20;
              _D5 = v21[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v21[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v21[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v13 = v13 - _D7;
              v19 += 4;
            }
            while (v19 != v18);
          }
          v33 = *(_QWORD *)(v8 + 56);
          if (v33)
          {
            v34 = v14[49];
            v35 = (unsigned int *)(v34 + 16 * (v33 + v15));
            v36 = (unsigned int *)(v34 + 16 * v15);
            do
            {
              v37 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22408) + 4 * *v36);
              v38 = v14[9] + 8 * *((_QWORD *)v36 + 1);
              _Q3 = *(_OWORD *)v38;
              _Q2 = *(_OWORD *)(v38 + 16);
              _Q16 = *(_OWORD *)(v38 + 32);
              _Q7 = *(_OWORD *)(v38 + 48);
              _D5 = *(_QWORD *)(v37 + 8);
              __asm { FMLA            D6, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = *(_QWORD *)(v37 + 24);
              __asm { FMLA            D6, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v37 + 40);
              __asm { FMLA            D6, D2, V16.D[1] }
              *(_QWORD *)&_Q3 = *(_QWORD *)(v37 + 56);
              __asm { FMLA            D6, D3, V7.D[1] }
              v13 = v13 - (_D6 + *(double *)(v38 + 64) * *(double *)(v37 + 64));
              v36 += 4;
            }
            while (v36 != v35);
          }
          v48 = *(_QWORD *)(v8 + 64);
          if (v48)
          {
            v49 = v14[52];
            v50 = (unsigned int *)(v49 + 16 * (v48 + v15));
            v51 = (unsigned int *)(v49 + 16 * v15);
            do
            {
              v52 = (__int128 *)(v14[12] + 8 * *((_QWORD *)v51 + 1));
              v53 = (_QWORD *)(v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22432) + 4 * *v51));
              _Q2 = v52[1];
              _Q1 = v52[2];
              _Q3 = *v52;
              _D5 = v53[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v53[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v53[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v13 = v13 - _D7;
              v51 += 4;
            }
            while (v51 != v50);
          }
          v61 = *(_QWORD *)(v8 + 72);
          if (v61)
          {
            v62 = v14[55];
            v63 = (unsigned int *)(v62 + 16 * (v61 + v15));
            v64 = (unsigned int *)(v62 + 16 * v15);
            do
            {
              v65 = (__int128 *)(v14[15] + 8 * *((_QWORD *)v64 + 1));
              v66 = (_QWORD *)(v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22456) + 4 * *v64));
              _Q2 = v65[1];
              _Q1 = v65[2];
              _Q3 = *v65;
              _D5 = v66[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v66[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v66[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v13 = v13 - _D7;
              v64 += 4;
            }
            while (v64 != v63);
          }
          v74 = *(_QWORD *)(v8 + 80);
          if (v74)
          {
            v75 = v14[58];
            v76 = (unsigned int *)(v75 + 16 * (v74 + v15));
            v77 = (unsigned int *)(v75 + 16 * v15);
            do
            {
              v78 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22480) + 4 * *v77);
              v79 = v14[18] + 8 * *((_QWORD *)v77 + 1);
              _Q2 = *(_OWORD *)v79;
              _D4 = *(_QWORD *)(v78 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v13 = v13 - (_D5 + *(double *)(v79 + 16) * *(double *)(v78 + 16));
              v77 += 4;
            }
            while (v77 != v76);
          }
          v83 = *(_QWORD *)(v8 + 88);
          if (v83)
          {
            v84 = v14[61];
            v85 = (unsigned int *)(v84 + 16 * (v83 + v15));
            v86 = (unsigned int *)(v84 + 16 * v15);
            do
            {
              v13 = v13
                  - *(double *)(v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22504) + 4 * *v86))
                  * *(double *)(v14[21] + 8 * *((_QWORD *)v86 + 1));
              v86 += 4;
            }
            while (v86 != v85);
          }
          v87 = *(_QWORD *)(v8 + 96);
          if (v87)
          {
            v88 = v14[64];
            v89 = (unsigned int *)(v88 + 16 * (v87 + v15));
            v90 = (unsigned int *)(v88 + 16 * v15);
            do
            {
              v91 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22528) + 4 * *v90);
              v92 = (__int128 *)(v14[24] + 8 * *((_QWORD *)v90 + 1));
              _Q2 = *v92;
              _Q1 = v92[1];
              _D4 = *(_QWORD *)(v91 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v91 + 24);
              __asm { FMLA            D5, D2, V1.D[1] }
              v13 = v13 - _D5;
              v90 += 4;
            }
            while (v90 != v89);
          }
          v98 = *(_QWORD *)(v8 + 104);
          if (v98)
          {
            v99 = v14[67];
            v100 = (unsigned int *)(v99 + 16 * (v98 + v15));
            v101 = (unsigned int *)(v99 + 16 * v15);
            do
            {
              v102 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22552) + 4 * *v101);
              v103 = (__int128 *)(v14[27] + 8 * *((_QWORD *)v101 + 1));
              _Q2 = *v103;
              _Q1 = v103[1];
              _D4 = *(_QWORD *)(v102 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v102 + 24);
              __asm { FMLA            D5, D2, V1.D[1] }
              v13 = v13 - _D5;
              v101 += 4;
            }
            while (v101 != v100);
          }
          v109 = *(_QWORD *)(v8 + 112);
          if (v109)
          {
            v110 = v14[70];
            v111 = (unsigned int *)(v110 + 16 * (v109 + v15));
            v112 = (unsigned int *)(v110 + 16 * v15);
            do
            {
              v113 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22576) + 4 * *v112);
              v114 = v14[30] + 8 * *((_QWORD *)v112 + 1);
              _Q2 = *(_OWORD *)v114;
              _D4 = *(_QWORD *)(v113 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v13 = v13 - (_D5 + *(double *)(v114 + 16) * *(double *)(v113 + 16));
              v112 += 4;
            }
            while (v112 != v111);
          }
          v118 = *(_QWORD *)(v8 + 120);
          if (v118)
          {
            v119 = v14[73];
            v120 = (unsigned int *)(v119 + 16 * (v118 + v15));
            v121 = (unsigned int *)(v119 + 16 * v15);
            v122 = v14[33];
            do
            {
              v123 = v10 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22600) + 4 * *v121);
              v124 = (double *)(v122 + 8 * *((_QWORD *)v121 + 1));
              _Q2 = *(_OWORD *)v124;
              _D4 = *(_QWORD *)(v123 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v13 = v13 - (_D5 + v124[2] * *(double *)(v123 + 16));
              v121 += 4;
            }
            while (v121 != v120);
          }
          v11 = v12[4];
          v12[4] = v11 + v13 * *(double *)(v8 + 8);
          v12[5] = v11;
        }
        v8 += 136;
      }
      while (v8 != v9);
    }
    kdebug_trace();
    kdebug_trace();
    v130 = *(_QWORD **)(a1 + 21120);
    v131 = v130[1];
    for (i = v130[2]; v131 != i; v131 += 16)
    {
      v133 = *(unsigned int **)(v131 + 8);
      v134 = *v133;
      if ((_DWORD)v134 != -1)
      {
        v137 = *((float64x2_t *)v133 + 2);
        *(_OWORD *)(v133 + 50) = *((_OWORD *)v133 + 3);
        v135 = *((_OWORD *)v133 + 5);
        *(_OWORD *)(v133 + 54) = *((_OWORD *)v133 + 4);
        *(_OWORD *)(v133 + 58) = v135;
        *((_QWORD *)v133 + 31) = *((_QWORD *)v133 + 12);
        *(float64x2_t *)(v133 + 46) = v137;
        *((_OWORD *)v133 + 16) = *(_OWORD *)(v133 + 26);
        *((_QWORD *)v133 + 34) = *((_QWORD *)v133 + 15);
        v136 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22384) + 4 * v134);
        v137.f64[0] = *(float64_t *)(v136 + 16);
        _Q2 = *(float64x2_t *)v136;
        _D3 = *(_QWORD *)(v136 + 8);
        __asm { FMLA            D0, D3, V2.D[1] }
        v141 = sqrt(_D0 + v137.f64[0] * v137.f64[0]);
        v128.f64[0] = 1.0 / v141;
        if (v141 == 0.0)
          v128.f64[0] = 1.0;
        v862 = vmulq_n_f64(_Q2, v128.f64[0]);
        v869 = vmulq_f64(v137, v128).f64[0];
        v142 = __sincos_stret(v141);
        v129 = v862;
        v128.f64[0] = v142.__cosval + (1.0 - v142.__cosval) * vmuld_n_f64(v129.f64[0], v129.f64[0]);
        v143 = (1.0 - v142.__cosval) * vmuld_lane_f64(v129.f64[0], v129, 1);
        v144 = v143 - v142.__sinval * v869;
        v145 = (1.0 - v142.__cosval) * vmuld_n_f64(v862.f64[0], v869);
        v146 = vmuld_lane_f64(v142.__sinval, v862, 1);
        v147 = v146 + v145;
        v148 = v142.__sinval * v869 + v143;
        v149 = v142.__cosval + (1.0 - v142.__cosval) * vmuld_lane_f64(v862.f64[1], v862, 1);
        v150 = (1.0 - v142.__cosval) * vmuld_lane_f64(v869, v862, 1);
        v129.f64[0] = v150 - v142.__sinval * v862.f64[0];
        v151 = v145 - v146;
        v152 = v142.__sinval * v862.f64[0] + v150;
        v153 = v142.__cosval + (1.0 - v142.__cosval) * vmuld_n_f64(v869, v869);
        v154 = *((double *)v133 + 6);
        v155 = *((float64x2_t *)v133 + 2);
        v156 = *((double *)v133 + 9);
        v157 = *(float64x2_t *)(v133 + 14);
        v158 = *((double *)v133 + 12);
        v159 = *((float64x2_t *)v133 + 5);
        *((float64x2_t *)v133 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v155, v128.f64[0]), v157, v148), v159, v151);
        *((double *)v133 + 6) = v154 * v128.f64[0] + v156 * v148 + v158 * v151;
        *(float64x2_t *)(v133 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v155, v144), v157, v149), v159, v152);
        *((double *)v133 + 9) = v154 * v144 + v156 * v149 + v158 * v152;
        *((float64x2_t *)v133 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v155, v147), v157, v129.f64[0]), v159, v153);
        *((double *)v133 + 12) = v154 * v147 + v156 * v129.f64[0] + v158 * v153;
        v160.f64[0] = *((float64_t *)v133 + 15);
        v128.f64[0] = *(float64_t *)(v136 + 40);
        *(float64x2_t *)(v133 + 26) = vaddq_f64(*(float64x2_t *)(v133 + 26), *(float64x2_t *)(v136 + 24));
        *((_QWORD *)v133 + 15) = *(_OWORD *)&vaddq_f64(v160, v128);
        *((_BYTE *)v133 + 128) = 0;
      }
    }
    v161 = v130[13];
    v162 = v130[14];
    while (v161 != v162)
    {
      v163 = *(float64x2_t **)(v161 + 8);
      v164 = LODWORD(v163->f64[0]);
      if ((_DWORD)v164 != -1)
      {
        v165 = v163[3];
        v167 = v163[4];
        v166 = v163[5];
        v163[9] = v167;
        v163[10] = v166;
        v163[11].f64[0] = v163[6].f64[0];
        v168 = v163[2];
        v169 = v163[3];
        v170 = v168;
        v163[7] = v168;
        v163[8] = v169;
        v171 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22408) + 4 * v164);
        v168.f64[0] = v163[6].f64[0];
        v129.f64[0] = *(float64_t *)(v171 + 64);
        v172 = vaddq_f64(v163[5], *(float64x2_t *)(v171 + 48));
        v128 = vaddq_f64(v167, *(float64x2_t *)(v171 + 32));
        v173 = vaddq_f64(v165, *(float64x2_t *)(v171 + 16));
        v163[2] = vaddq_f64(v170, *(float64x2_t *)v171);
        v163[3] = v173;
        v163[4] = v128;
        v163[5] = v172;
        *(_QWORD *)&v163[6].f64[0] = *(_OWORD *)&vaddq_f64(v168, v129);
        LOBYTE(v163[6].f64[1]) = 0;
      }
      v161 += 16;
    }
    v174 = v130[25];
    for (j = v130[26]; v174 != j; v174 += 16)
    {
      v176 = *(unsigned int **)(v174 + 8);
      v177 = *v176;
      if ((_DWORD)v177 != -1)
      {
        v178 = *((float64x2_t *)v176 + 3);
        *(_OWORD *)(v176 + 34) = *((_OWORD *)v176 + 2);
        v179 = *((_OWORD *)v176 + 4);
        *(_OWORD *)(v176 + 46) = *((_OWORD *)v176 + 5);
        *(_OWORD *)(v176 + 42) = v179;
        *((_QWORD *)v176 + 25) = *((_QWORD *)v176 + 12);
        *(float64x2_t *)(v176 + 38) = v178;
        *((_OWORD *)v176 + 13) = *(_OWORD *)(v176 + 26);
        *((_QWORD *)v176 + 28) = *((_QWORD *)v176 + 15);
        if (*((_BYTE *)v176 + 20))
        {
          if (*((_BYTE *)v176 + 129))
          {
            v180 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22432) + 4 * v177);
            v178.f64[0] = *(float64_t *)(v180 + 16);
            _Q2 = *(float64x2_t *)v180;
            _D3 = *(_QWORD *)(v180 + 8);
            __asm { FMLA            D0, D3, V2.D[1] }
            v184 = sqrt(_D0 + v178.f64[0] * v178.f64[0]);
            v128.f64[0] = 1.0 / v184;
            if (v184 == 0.0)
              v128.f64[0] = 1.0;
            v863 = vmulq_n_f64(_Q2, v128.f64[0]);
            v870 = vmulq_f64(v178, v128).f64[0];
            v185 = __sincos_stret(v184);
            v186 = v863;
            v128.f64[0] = v185.__cosval + (1.0 - v185.__cosval) * vmuld_n_f64(v186.f64[0], v186.f64[0]);
            v187 = (1.0 - v185.__cosval) * vmuld_lane_f64(v186.f64[0], v186, 1);
            v188 = v187 - v185.__sinval * v870;
            v189 = (1.0 - v185.__cosval) * vmuld_n_f64(v863.f64[0], v870);
            v190 = vmuld_lane_f64(v185.__sinval, v863, 1);
            v191 = v190 + v189;
            v192 = v185.__sinval * v870 + v187;
            v193 = v185.__cosval + (1.0 - v185.__cosval) * vmuld_lane_f64(v863.f64[1], v863, 1);
            v194 = (1.0 - v185.__cosval) * vmuld_lane_f64(v870, v863, 1);
            v186.f64[0] = v194 - v185.__sinval * v863.f64[0];
            v195 = v189 - v190;
            v196.f64[0] = v185.__sinval * v863.f64[0] + v194;
            v197 = v185.__cosval + (1.0 - v185.__cosval) * vmuld_n_f64(v870, v870);
            v198.f64[0] = *((float64_t *)v176 + 6);
            v199 = *((float64x2_t *)v176 + 2);
            v200 = *((double *)v176 + 9);
            v201 = *(float64x2_t *)(v176 + 14);
            v202 = *((double *)v176 + 12);
            v203 = *((float64x2_t *)v176 + 5);
            *((float64x2_t *)v176 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v128.f64[0]), v201, v192), v203, v195);
            *((double *)v176 + 6) = v198.f64[0] * v128.f64[0] + v200 * v192 + v202 * v195;
            *(float64x2_t *)(v176 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v188), v201, v193), v203, v196.f64[0]);
            *((double *)v176 + 9) = v198.f64[0] * v188 + v200 * v193 + v202 * v196.f64[0];
            *((float64x2_t *)v176 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v191), v201, v186.f64[0]), v203, v197);
            *((double *)v176 + 12) = v198.f64[0] * v191 + v200 * v186.f64[0] + v202 * v197;
            if (*((_BYTE *)v176 + 128))
            {
              v196.f64[0] = *((float64_t *)v176 + 15);
              v198.f64[0] = *(float64_t *)(v180 + 40);
              v128 = *(float64x2_t *)(v180 + 24);
              *(float64x2_t *)(v176 + 26) = vaddq_f64(*(float64x2_t *)(v176 + 26), v128);
              *((_QWORD *)v176 + 15) = *(_OWORD *)&vaddq_f64(v196, v198);
            }
          }
        }
      }
    }
    v204 = v130[37];
    for (k = v130[38]; v204 != k; v204 += 16)
    {
      v206 = *(unsigned int **)(v204 + 8);
      v207 = *v206;
      if ((_DWORD)v207 != -1)
      {
        v208 = *((float64x2_t *)v206 + 3);
        *(_OWORD *)(v206 + 34) = *((_OWORD *)v206 + 2);
        v209 = *((_OWORD *)v206 + 4);
        *(_OWORD *)(v206 + 46) = *((_OWORD *)v206 + 5);
        *(_OWORD *)(v206 + 42) = v209;
        *((_QWORD *)v206 + 25) = *((_QWORD *)v206 + 12);
        *(float64x2_t *)(v206 + 38) = v208;
        *((_OWORD *)v206 + 13) = *(_OWORD *)(v206 + 26);
        *((_QWORD *)v206 + 28) = *((_QWORD *)v206 + 15);
        if (*((_BYTE *)v206 + 20))
        {
          if (*((_BYTE *)v206 + 129))
          {
            v210 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22456) + 4 * v207);
            v208.f64[0] = *(float64_t *)(v210 + 16);
            _Q2 = *(float64x2_t *)v210;
            _D3 = *(_QWORD *)(v210 + 8);
            __asm { FMLA            D0, D3, V2.D[1] }
            v214 = sqrt(_D0 + v208.f64[0] * v208.f64[0]);
            v128.f64[0] = 1.0 / v214;
            if (v214 == 0.0)
              v128.f64[0] = 1.0;
            v864 = vmulq_n_f64(_Q2, v128.f64[0]);
            v871 = vmulq_f64(v208, v128).f64[0];
            v215 = __sincos_stret(v214);
            v216 = v864;
            v128.f64[0] = v215.__cosval + (1.0 - v215.__cosval) * vmuld_n_f64(v216.f64[0], v216.f64[0]);
            v217 = (1.0 - v215.__cosval) * vmuld_lane_f64(v216.f64[0], v216, 1);
            v218 = v217 - v215.__sinval * v871;
            v219 = (1.0 - v215.__cosval) * vmuld_n_f64(v864.f64[0], v871);
            v220 = vmuld_lane_f64(v215.__sinval, v864, 1);
            v221 = v220 + v219;
            v222 = v215.__sinval * v871 + v217;
            v223 = v215.__cosval + (1.0 - v215.__cosval) * vmuld_lane_f64(v864.f64[1], v864, 1);
            v224 = (1.0 - v215.__cosval) * vmuld_lane_f64(v871, v864, 1);
            v216.f64[0] = v224 - v215.__sinval * v864.f64[0];
            v225 = v219 - v220;
            v226.f64[0] = v215.__sinval * v864.f64[0] + v224;
            v227 = v215.__cosval + (1.0 - v215.__cosval) * vmuld_n_f64(v871, v871);
            v228.f64[0] = *((float64_t *)v206 + 6);
            v229 = *((float64x2_t *)v206 + 2);
            v230 = *((double *)v206 + 9);
            v231 = *(float64x2_t *)(v206 + 14);
            v232 = *((double *)v206 + 12);
            v233 = *((float64x2_t *)v206 + 5);
            *((float64x2_t *)v206 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v229, v128.f64[0]), v231, v222), v233, v225);
            *((double *)v206 + 6) = v228.f64[0] * v128.f64[0] + v230 * v222 + v232 * v225;
            *(float64x2_t *)(v206 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v229, v218), v231, v223), v233, v226.f64[0]);
            *((double *)v206 + 9) = v228.f64[0] * v218 + v230 * v223 + v232 * v226.f64[0];
            *((float64x2_t *)v206 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v229, v221), v231, v216.f64[0]), v233, v227);
            *((double *)v206 + 12) = v228.f64[0] * v221 + v230 * v216.f64[0] + v232 * v227;
            if (*((_BYTE *)v206 + 128))
            {
              v226.f64[0] = *((float64_t *)v206 + 15);
              v228.f64[0] = *(float64_t *)(v210 + 40);
              v128 = *(float64x2_t *)(v210 + 24);
              *(float64x2_t *)(v206 + 26) = vaddq_f64(*(float64x2_t *)(v206 + 26), v128);
              *((_QWORD *)v206 + 15) = *(_OWORD *)&vaddq_f64(v226, v228);
            }
          }
        }
      }
    }
    v234 = v130[49];
    v235 = v130[50];
    while (v234 != v235)
    {
      v236 = *(unsigned int **)(v234 + 8);
      v237 = *v236;
      if ((_DWORD)v237 != -1)
      {
        v238 = *((float64x2_t *)v236 + 2);
        *(float64x2_t *)(v236 + 14) = v238;
        *((_QWORD *)v236 + 9) = *((_QWORD *)v236 + 6);
        v239 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22480) + 4 * v237);
        v238.f64[0] = *((float64_t *)v236 + 6);
        v128.f64[0] = *(float64_t *)(v239 + 16);
        *((float64x2_t *)v236 + 2) = vaddq_f64(*((float64x2_t *)v236 + 2), *(float64x2_t *)v239);
        *((_QWORD *)v236 + 6) = *(_OWORD *)&vaddq_f64(v238, v128);
      }
      v234 += 16;
    }
    v240 = v130[61];
    v241 = v130[62];
    if (v240 != v241)
    {
      v242 = *a2;
      do
      {
        v243 = *(double **)(v240 + 8);
        v244 = *(unsigned int *)v243;
        if ((_DWORD)v244 != -1)
        {
          v245 = v243[4];
          v246 = *(unsigned int *)(*(_QWORD *)(a1 + 22504) + 4 * v244);
          v243[6] = v245;
          v243[4] = v245 + *(double *)(v242 + 8 * v246);
          *((_BYTE *)v243 + 40) = 0;
        }
        v240 += 16;
      }
      while (v240 != v241);
    }
    v247 = v130[73];
    v248 = v130[74];
    while (v247 != v248)
    {
      v249 = *(unsigned int **)(v247 + 8);
      v250 = *v249;
      if ((_DWORD)v250 != -1)
      {
        v251 = *((_OWORD *)v249 + 2);
        *(_OWORD *)(v249 + 42) = *((_OWORD *)v249 + 3);
        *(_OWORD *)(v249 + 38) = v251;
        *((_QWORD *)v249 + 23) = *((_QWORD *)v249 + 8);
        *((_BYTE *)v249 + 192) = *((_BYTE *)v249 + 72);
        if (*((_BYTE *)v249 + 20))
        {
          if (*((_BYTE *)v249 + 144))
          {
            v252 = (uint64_t)(v249 + 4);
            v253 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22528) + 4 * v250));
            v255 = *((float64x2_t *)v249 + 2);
            v256 = *((float64x2_t *)v249 + 3);
            v254 = (float64x2_t *)(v249 + 8);
            v257 = vaddq_f64(v256, v253[1]);
            *v254 = vaddq_f64(v255, *v253);
            v254[1] = v257;
            sub_20F6169C8(v252);
            sub_20F616F2C(v252);
          }
        }
      }
      v247 += 16;
    }
    v258 = v130[85];
    v259 = v130[86];
    while (v258 != v259)
    {
      v260 = *(unsigned int **)(v258 + 8);
      v261 = *v260;
      if ((_DWORD)v261 != -1)
      {
        v262 = *((_OWORD *)v260 + 5);
        v263 = *((_OWORD *)v260 + 7);
        v264 = *((_OWORD *)v260 + 8);
        *(_OWORD *)(v260 + 98) = *((_OWORD *)v260 + 6);
        *(_OWORD *)(v260 + 102) = v263;
        v265 = *((float64x2_t *)v260 + 3);
        *(_OWORD *)(v260 + 90) = *((_OWORD *)v260 + 4);
        *(_OWORD *)(v260 + 94) = v262;
        v266 = *((_OWORD *)v260 + 9);
        v267 = *((_OWORD *)v260 + 11);
        v268 = *((_OWORD *)v260 + 12);
        *(_OWORD *)(v260 + 114) = *((_OWORD *)v260 + 10);
        *(_OWORD *)(v260 + 118) = v267;
        *(_OWORD *)(v260 + 106) = v264;
        *(_OWORD *)(v260 + 110) = v266;
        v269 = *((_OWORD *)v260 + 15);
        v270 = *((_OWORD *)v260 + 13);
        *(_OWORD *)(v260 + 130) = *((_OWORD *)v260 + 14);
        *(_OWORD *)(v260 + 134) = v269;
        *(_OWORD *)(v260 + 122) = v268;
        *(_OWORD *)(v260 + 126) = v270;
        v271 = *((_OWORD *)v260 + 3);
        v272 = *((float64x2_t *)v260 + 2);
        *(float64x2_t *)(v260 + 82) = v272;
        *(_OWORD *)(v260 + 86) = v271;
        v273 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22552) + 4 * v261));
        v274 = (__n128)vaddq_f64(v265, v273[1]);
        *((float64x2_t *)v260 + 2) = vaddq_f64(v272, *v273);
        *((__n128 *)v260 + 3) = v274;
        for (m = (uint64_t **)*((_QWORD *)v260 + 37); m; m = (uint64_t **)*m)
          v274.n128_f64[0] = sub_20F6182A0((char *)m[5], (float64x2_t *)v260 + 2, v274);
        sub_20F6178A8((uint64_t)(v260 + 4));
      }
      v258 += 16;
    }
    v276 = v130[97];
    for (n = v130[98]; v276 != n; v276 += 16)
    {
      v311 = *(unsigned int **)(v276 + 8);
      v312 = *v311;
      if ((_DWORD)v312 != -1)
      {
        *((_QWORD *)v311 + 30) = *((_QWORD *)v311 + 12);
        v313 = *((_OWORD *)v311 + 5);
        *((_OWORD *)v311 + 13) = *((_OWORD *)v311 + 4);
        *((_OWORD *)v311 + 14) = v313;
        v314 = *((_OWORD *)v311 + 3);
        *((_OWORD *)v311 + 11) = *((_OWORD *)v311 + 2);
        *((_OWORD *)v311 + 12) = v314;
        if (*((_BYTE *)v311 + 20))
        {
          v315 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22576) + 4 * v312);
          _Q1 = *(_OWORD *)v315;
          _D3 = *(_QWORD *)(v315 + 8);
          __asm { FMLA            D2, D3, V1.D[1] }
          v319 = _D2 + *(double *)(v315 + 16) * *(double *)(v315 + 16);
          if (v319 >= 0.0000002635)
          {
            v278 = sqrt(v319);
            v280 = __sincos_stret(v278);
            cosval = v280.__cosval;
            v281 = v280.__sinval / v278;
            v282 = 1.0 / v319 * (1.0 - v280.__cosval);
          }
          else
          {
            v282 = 0.5 - v319 * (v319 / -720.0 + 0.0416666667);
            v281 = 1.0 - v319 * (0.166666667 - v319 * (v319 / -5040.0 + 0.00833333333));
            cosval = 1.0 - v319 * v282;
          }
          v283 = *(double *)(v315 + 8);
          v284 = v282 * *(double *)v315;
          v285 = v282 * v283;
          v286 = *(double *)(v315 + 16);
          v287.f64[0] = cosval + *(double *)v315 * v284;
          v288 = cosval + v283 * (v282 * v283);
          v289 = cosval + v286 * (v282 * v286);
          v290 = v284 * v283;
          v291 = v284 * v286;
          v292 = v285 * v286;
          v293 = v281 * *(double *)v315;
          v294 = v281 * v283;
          v295 = v281 * v286;
          v296.f64[0] = v290 - v295;
          v297.f64[0] = v294 + v291;
          v287.f64[1] = v290 + v295;
          v298 = v292 - v293;
          v296.f64[1] = v288;
          _D3 = v293 + v292;
          v297.f64[1] = v298;
          v300 = *((double *)v311 + 6);
          _Q4 = *((float64x2_t *)v311 + 2);
          v302 = *((double *)v311 + 9);
          _Q6 = *(float64x2_t *)(v311 + 14);
          v304 = *((double *)v311 + 12);
          _Q19 = *((float64x2_t *)v311 + 5);
          v306 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v287, _Q4.f64[0]), v296, _Q4, 1), v297, v300);
          __asm { FMLA            D21, D3, V4.D[1] }
          v308 = _D21 + v289 * v300;
          __asm
          {
            FMLA            D21, D3, V6.D[1]
            FMLA            D2, D3, V19.D[1]
          }
          *((double *)v311 + 6) = v308;
          *((float64x2_t *)v311 + 2) = v306;
          *((double *)v311 + 9) = _D21 + v289 * v302;
          *(float64x2_t *)(v311 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v287, _Q6.f64[0]), v296, _Q6, 1), v297, v302);
          *((double *)v311 + 12) = _D2 + v289 * v304;
          *((float64x2_t *)v311 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v287, _Q19.f64[0]), v296, _Q19, 1), v297, v304);
          sub_20F811C04((uint64_t)(v311 + 4));
        }
      }
    }
    v320 = v130[109];
    v321 = v130[110];
    while (v320 != v321)
    {
      v322 = *(float64x2_t **)(v320 + 8);
      v323 = LODWORD(v322->f64[0]);
      if ((_DWORD)v323 != -1)
      {
        v324 = v322[2];
        v322[4] = v324;
        v322[5].f64[0] = v322[3].f64[0];
        if (LOBYTE(v322[3].f64[1]))
        {
          v325 = v322 + 2;
          v326 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 22600) + 4 * v323);
          v324.f64[0] = v325[1].f64[0];
          v128.f64[0] = *(float64_t *)(v326 + 16);
          *v325 = vaddq_f64(*v325, *(float64x2_t *)v326);
          *(_QWORD *)&v325[1].f64[0] = *(_OWORD *)&vaddq_f64(v324, v128);
        }
      }
      v320 += 16;
    }
    goto LABEL_330;
  }
  v327 = (_BYTE *)(a1 + 18568);
  if (!*(_DWORD *)(*v4 + 31056))
  {
    v861 = 0;
    goto LABEL_139;
  }
  kdebug_trace();
  if (!*((_BYTE *)v4 + 138))
  {
    if (*v327)
      goto LABEL_137;
    v328 = (_QWORD *)(a1 + 19576);
    v329 = *(_QWORD *)(a1 + 19424);
    v330 = *(_QWORD *)(a1 + 19432);
    if (v329 == v330)
      goto LABEL_137;
LABEL_337:
    v345 = 0;
    v739 = *a2;
    do
    {
      v741 = *(double **)v329;
      if (**(_DWORD **)v329 != -1)
      {
        v742 = *((_DWORD *)v741 + 4);
        v743 = *(_DWORD **)v5;
        v744 = *(_DWORD **)(v5 + 8);
        if (v744 != *(_DWORD **)v5)
        {
          v745 = 0x1CAC083126E978D5 * (((uint64_t)v744 - *(_QWORD *)v5) >> 3);
          do
          {
            v746 = v745 >> 1;
            v747 = &v743[250 * (v745 >> 1)];
            v748 = *v747;
            v749 = v747 + 250;
            v745 += ~(v745 >> 1);
            if (v748 < v742)
              v743 = v749;
            else
              v745 = v746;
          }
          while (v745);
        }
        if (v743 == v744 || *v743 != v742)
        {
          v750 = *(double *)(v329 + 16);
          v751 = *(_QWORD **)(v329 + 120);
          v752 = *(_QWORD *)(v329 + 24);
          v753 = *(_QWORD *)(v329 + 40);
          if (v753)
          {
            v754 = v751[43];
            v755 = (unsigned int *)(v754 + 16 * (v753 + v752));
            v756 = (unsigned int *)(v754 + 16 * v752);
            do
            {
              v757 = (__int128 *)(v751[3] + 8 * *((_QWORD *)v756 + 1));
              v758 = (_QWORD *)(v739 + 8 * *(unsigned int *)(v328[30] + 4 * *v756));
              _Q2 = v757[1];
              _Q1 = v757[2];
              _Q3 = *v757;
              _D5 = v758[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v758[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v758[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v750 = v750 - _D7;
              v756 += 4;
            }
            while (v756 != v755);
          }
          v766 = *(_QWORD *)(v329 + 48);
          if (v766)
          {
            v767 = v751[46];
            v768 = (unsigned int *)(v767 + 16 * (v766 + v752));
            v769 = (unsigned int *)(v767 + 16 * v752);
            do
            {
              v770 = v739 + 8 * *(unsigned int *)(v328[33] + 4 * *v769);
              v771 = v751[6] + 8 * *((_QWORD *)v769 + 1);
              _Q3 = *(_OWORD *)v771;
              _Q2 = *(_OWORD *)(v771 + 16);
              _Q16 = *(_OWORD *)(v771 + 32);
              _Q7 = *(_OWORD *)(v771 + 48);
              _D5 = *(_QWORD *)(v770 + 8);
              __asm { FMLA            D6, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = *(_QWORD *)(v770 + 24);
              __asm { FMLA            D6, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v770 + 40);
              __asm { FMLA            D6, D2, V16.D[1] }
              *(_QWORD *)&_Q3 = *(_QWORD *)(v770 + 56);
              __asm { FMLA            D6, D3, V7.D[1] }
              v750 = v750 - (_D6 + *(double *)(v771 + 64) * *(double *)(v770 + 64));
              v769 += 4;
            }
            while (v769 != v768);
          }
          v781 = *(_QWORD *)(v329 + 56);
          if (v781)
          {
            v782 = v751[49];
            v783 = (unsigned int *)(v782 + 16 * (v781 + v752));
            v784 = (unsigned int *)(v782 + 16 * v752);
            do
            {
              v785 = (__int128 *)(v751[9] + 8 * *((_QWORD *)v784 + 1));
              v786 = (_QWORD *)(v739 + 8 * *(unsigned int *)(v328[36] + 4 * *v784));
              _Q2 = v785[1];
              _Q1 = v785[2];
              _Q3 = *v785;
              _D5 = v786[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v786[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v786[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v750 = v750 - _D7;
              v784 += 4;
            }
            while (v784 != v783);
          }
          v794 = *(_QWORD *)(v329 + 64);
          if (v794)
          {
            v795 = v751[52];
            v796 = (unsigned int *)(v795 + 16 * (v794 + v752));
            v797 = (unsigned int *)(v795 + 16 * v752);
            do
            {
              v798 = (__int128 *)(v751[12] + 8 * *((_QWORD *)v797 + 1));
              v799 = (_QWORD *)(v739 + 8 * *(unsigned int *)(v328[39] + 4 * *v797));
              _Q2 = v798[1];
              _Q1 = v798[2];
              _Q3 = *v798;
              _D5 = v799[1];
              __asm { FMLA            D7, D5, V3.D[1] }
              *(_QWORD *)&_Q3 = v799[3];
              __asm { FMLA            D7, D3, V2.D[1] }
              *(_QWORD *)&_Q2 = v799[5];
              __asm { FMLA            D7, D2, V1.D[1] }
              v750 = v750 - _D7;
              v797 += 4;
            }
            while (v797 != v796);
          }
          v807 = *(_QWORD *)(v329 + 72);
          if (v807)
          {
            v808 = v751[55];
            v809 = (unsigned int *)(v808 + 16 * (v807 + v752));
            v810 = (unsigned int *)(v808 + 16 * v752);
            do
            {
              v811 = v739 + 8 * *(unsigned int *)(v328[42] + 4 * *v810);
              v812 = v751[15] + 8 * *((_QWORD *)v810 + 1);
              _Q2 = *(_OWORD *)v812;
              _D4 = *(_QWORD *)(v811 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v750 = v750 - (_D5 + *(double *)(v812 + 16) * *(double *)(v811 + 16));
              v810 += 4;
            }
            while (v810 != v809);
          }
          v816 = *(_QWORD *)(v329 + 80);
          if (v816)
          {
            v817 = v751[58];
            v818 = (unsigned int *)(v817 + 16 * (v816 + v752));
            v819 = (unsigned int *)(v817 + 16 * v752);
            do
            {
              v750 = v750
                   - *(double *)(v739 + 8 * *(unsigned int *)(v328[45] + 4 * *v819))
                   * *(double *)(v751[18] + 8 * *((_QWORD *)v819 + 1));
              v819 += 4;
            }
            while (v819 != v818);
          }
          v820 = *(_QWORD *)(v329 + 88);
          if (v820)
          {
            v821 = v751[61];
            v822 = (unsigned int *)(v821 + 16 * (v820 + v752));
            v823 = (unsigned int *)(v821 + 16 * v752);
            do
            {
              v824 = v739 + 8 * *(unsigned int *)(v328[48] + 4 * *v823);
              v825 = (__int128 *)(v751[21] + 8 * *((_QWORD *)v823 + 1));
              _Q2 = *v825;
              _Q1 = v825[1];
              _D4 = *(_QWORD *)(v824 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v824 + 24);
              __asm { FMLA            D5, D2, V1.D[1] }
              v750 = v750 - _D5;
              v823 += 4;
            }
            while (v823 != v822);
          }
          v831 = *(_QWORD *)(v329 + 96);
          if (v831)
          {
            v832 = v751[64];
            v833 = (unsigned int *)(v832 + 16 * (v831 + v752));
            v834 = (unsigned int *)(v832 + 16 * v752);
            do
            {
              v835 = v739 + 8 * *(unsigned int *)(v328[51] + 4 * *v834);
              v836 = (__int128 *)(v751[24] + 8 * *((_QWORD *)v834 + 1));
              _Q2 = *v836;
              _Q1 = v836[1];
              _D4 = *(_QWORD *)(v835 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              *(_QWORD *)&_Q2 = *(_QWORD *)(v835 + 24);
              __asm { FMLA            D5, D2, V1.D[1] }
              v750 = v750 - _D5;
              v834 += 4;
            }
            while (v834 != v833);
          }
          v842 = *(_QWORD *)(v329 + 104);
          if (v842)
          {
            v843 = v751[67];
            v844 = (unsigned int *)(v843 + 16 * (v842 + v752));
            v845 = (unsigned int *)(v843 + 16 * v752);
            do
            {
              v846 = v739 + 8 * *(unsigned int *)(v328[54] + 4 * *v845);
              v847 = v751[27] + 8 * *((_QWORD *)v845 + 1);
              _Q2 = *(_OWORD *)v847;
              _D4 = *(_QWORD *)(v846 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v750 = v750 - (_D5 + *(double *)(v847 + 16) * *(double *)(v846 + 16));
              v845 += 4;
            }
            while (v845 != v844);
          }
          v851 = *(_QWORD *)(v329 + 112);
          if (v851)
          {
            v852 = v751[70];
            v853 = (unsigned int *)(v852 + 16 * (v851 + v752));
            v854 = (unsigned int *)(v852 + 16 * v752);
            v855 = v751[30];
            do
            {
              v856 = v739 + 8 * *(unsigned int *)(v328[57] + 4 * *v854);
              v857 = (double *)(v855 + 8 * *((_QWORD *)v854 + 1));
              _Q2 = *(_OWORD *)v857;
              _D4 = *(_QWORD *)(v856 + 8);
              __asm { FMLA            D5, D4, V2.D[1] }
              v750 = v750 - (_D5 + v857[2] * *(double *)(v856 + 16));
              v854 += 4;
            }
            while (v854 != v853);
          }
          v740 = v741[4];
          v741[4] = v740 + v750 * *(double *)(v329 + 8);
          v741[5] = v740;
          v345 = 1;
        }
      }
      v329 += 128;
    }
    while (v329 != v330);
    goto LABEL_138;
  }
  if (!*v327)
  {
    v328 = (_QWORD *)(a1 + 22144);
    v329 = *(_QWORD *)(a1 + 19424);
    v330 = *(_QWORD *)(a1 + 19432);
    if (v329 != v330)
      goto LABEL_337;
  }
LABEL_137:
  v345 = 0;
LABEL_138:
  kdebug_trace();
  v861 = v345 & 1;
LABEL_139:
  kdebug_trace();
  if (!*((_DWORD *)v4 + 25))
  {
    if (*((_BYTE *)v4 + 138))
    {
      v352 = (_QWORD *)(a1 + 22144);
      v353 = *(_QWORD *)(a1 + 320);
      v354 = *(_QWORD *)(a1 + 328);
      if (v353 == v354)
        goto LABEL_265;
    }
    else
    {
      if (*v327)
        v352 = (_QWORD *)(a1 + 20640);
      else
        v352 = (_QWORD *)(a1 + 19576);
      v353 = *(_QWORD *)(a1 + 320);
      v354 = *(_QWORD *)(a1 + 328);
      if (v353 == v354)
      {
LABEL_265:
        v569 = *(_QWORD *)(a1 + 416);
        v570 = *(_QWORD *)(a1 + 424);
        while (v569 != v570)
        {
          v571 = *(float64x2_t **)(v569 + 8);
          v572 = LODWORD(v571->f64[0]);
          if ((_DWORD)v572 != -1)
          {
            v573 = v571[3];
            v575 = v571[4];
            v574 = v571[5];
            v571[9] = v575;
            v571[10] = v574;
            v571[11].f64[0] = v571[6].f64[0];
            v576 = v571[2];
            v577 = v571[3];
            v578 = v576;
            v571[7] = v576;
            v571[8] = v577;
            v579 = *a2 + 8 * *(unsigned int *)(v352[33] + 4 * v572);
            v576.f64[0] = v571[6].f64[0];
            v347.f64[0] = *(float64_t *)(v579 + 64);
            v580 = vaddq_f64(v571[5], *(float64x2_t *)(v579 + 48));
            v346 = vaddq_f64(v575, *(float64x2_t *)(v579 + 32));
            v581 = vaddq_f64(v573, *(float64x2_t *)(v579 + 16));
            v571[2] = vaddq_f64(v578, *(float64x2_t *)v579);
            v571[3] = v581;
            v571[4] = v346;
            v571[5] = v580;
            *(_QWORD *)&v571[6].f64[0] = *(_OWORD *)&vaddq_f64(v576, v347);
            LOBYTE(v571[6].f64[1]) = 0;
          }
          v569 += 16;
        }
        v582 = *(_QWORD *)(a1 + 512);
        for (ii = *(_QWORD *)(a1 + 520); v582 != ii; v582 += 16)
        {
          v584 = *(unsigned int **)(v582 + 8);
          v585 = *v584;
          if ((_DWORD)v585 != -1)
          {
            v586 = *((float64x2_t *)v584 + 3);
            *(_OWORD *)(v584 + 34) = *((_OWORD *)v584 + 2);
            v587 = *((_OWORD *)v584 + 4);
            *(_OWORD *)(v584 + 46) = *((_OWORD *)v584 + 5);
            *(_OWORD *)(v584 + 42) = v587;
            *((_QWORD *)v584 + 25) = *((_QWORD *)v584 + 12);
            *(float64x2_t *)(v584 + 38) = v586;
            *((_OWORD *)v584 + 13) = *(_OWORD *)(v584 + 26);
            *((_QWORD *)v584 + 28) = *((_QWORD *)v584 + 15);
            if (*((_BYTE *)v584 + 20))
            {
              if (*((_BYTE *)v584 + 129))
              {
                v588 = *a2 + 8 * *(unsigned int *)(v352[36] + 4 * v585);
                v586.f64[0] = *(float64_t *)(v588 + 16);
                _Q2 = *(float64x2_t *)v588;
                _D3 = *(_QWORD *)(v588 + 8);
                __asm { FMLA            D0, D3, V2.D[1] }
                v592 = sqrt(_D0 + v586.f64[0] * v586.f64[0]);
                v346.f64[0] = 1.0 / v592;
                if (v592 == 0.0)
                  v346.f64[0] = 1.0;
                v867 = vmulq_n_f64(_Q2, v346.f64[0]);
                v874 = vmulq_f64(v586, v346).f64[0];
                v593 = __sincos_stret(v592);
                v594 = v867;
                v346.f64[0] = v593.__cosval + (1.0 - v593.__cosval) * vmuld_n_f64(v594.f64[0], v594.f64[0]);
                v595 = (1.0 - v593.__cosval) * vmuld_lane_f64(v594.f64[0], v594, 1);
                v596 = v595 - v593.__sinval * v874;
                v597 = (1.0 - v593.__cosval) * vmuld_n_f64(v867.f64[0], v874);
                v598 = vmuld_lane_f64(v593.__sinval, v867, 1);
                v599 = v598 + v597;
                v600 = v593.__sinval * v874 + v595;
                v601 = v593.__cosval + (1.0 - v593.__cosval) * vmuld_lane_f64(v867.f64[1], v867, 1);
                v602 = (1.0 - v593.__cosval) * vmuld_lane_f64(v874, v867, 1);
                v594.f64[0] = v602 - v593.__sinval * v867.f64[0];
                v603 = v597 - v598;
                v604.f64[0] = v593.__sinval * v867.f64[0] + v602;
                v605 = v593.__cosval + (1.0 - v593.__cosval) * vmuld_n_f64(v874, v874);
                v606.f64[0] = *((float64_t *)v584 + 6);
                v607 = *((float64x2_t *)v584 + 2);
                v608 = *((double *)v584 + 9);
                v609 = *(float64x2_t *)(v584 + 14);
                v610 = *((double *)v584 + 12);
                v611 = *((float64x2_t *)v584 + 5);
                *((float64x2_t *)v584 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v607, v346.f64[0]), v609, v600), v611, v603);
                *((double *)v584 + 6) = v606.f64[0] * v346.f64[0] + v608 * v600 + v610 * v603;
                *(float64x2_t *)(v584 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v607, v596), v609, v601), v611, v604.f64[0]);
                *((double *)v584 + 9) = v606.f64[0] * v596 + v608 * v601 + v610 * v604.f64[0];
                *((float64x2_t *)v584 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v607, v599), v609, v594.f64[0]), v611, v605);
                *((double *)v584 + 12) = v606.f64[0] * v599 + v608 * v594.f64[0] + v610 * v605;
                if (*((_BYTE *)v584 + 128))
                {
                  v604.f64[0] = *((float64_t *)v584 + 15);
                  v606.f64[0] = *(float64_t *)(v588 + 40);
                  v346 = *(float64x2_t *)(v588 + 24);
                  *(float64x2_t *)(v584 + 26) = vaddq_f64(*(float64x2_t *)(v584 + 26), v346);
                  *((_QWORD *)v584 + 15) = *(_OWORD *)&vaddq_f64(v604, v606);
                }
              }
            }
          }
        }
        v612 = *(_QWORD *)(a1 + 608);
        for (jj = *(_QWORD *)(a1 + 616); v612 != jj; v612 += 16)
        {
          v614 = *(unsigned int **)(v612 + 8);
          v615 = *v614;
          if ((_DWORD)v615 != -1)
          {
            v616 = *((float64x2_t *)v614 + 3);
            *(_OWORD *)(v614 + 34) = *((_OWORD *)v614 + 2);
            v617 = *((_OWORD *)v614 + 4);
            *(_OWORD *)(v614 + 46) = *((_OWORD *)v614 + 5);
            *(_OWORD *)(v614 + 42) = v617;
            *((_QWORD *)v614 + 25) = *((_QWORD *)v614 + 12);
            *(float64x2_t *)(v614 + 38) = v616;
            *((_OWORD *)v614 + 13) = *(_OWORD *)(v614 + 26);
            *((_QWORD *)v614 + 28) = *((_QWORD *)v614 + 15);
            if (*((_BYTE *)v614 + 20))
            {
              if (*((_BYTE *)v614 + 129))
              {
                v618 = *a2 + 8 * *(unsigned int *)(v352[39] + 4 * v615);
                v616.f64[0] = *(float64_t *)(v618 + 16);
                _Q2 = *(float64x2_t *)v618;
                _D3 = *(_QWORD *)(v618 + 8);
                __asm { FMLA            D0, D3, V2.D[1] }
                v622 = sqrt(_D0 + v616.f64[0] * v616.f64[0]);
                v346.f64[0] = 1.0 / v622;
                if (v622 == 0.0)
                  v346.f64[0] = 1.0;
                v868 = vmulq_n_f64(_Q2, v346.f64[0]);
                v875 = vmulq_f64(v616, v346).f64[0];
                v623 = __sincos_stret(v622);
                v624 = v868;
                v346.f64[0] = v623.__cosval + (1.0 - v623.__cosval) * vmuld_n_f64(v624.f64[0], v624.f64[0]);
                v625 = (1.0 - v623.__cosval) * vmuld_lane_f64(v624.f64[0], v624, 1);
                v626 = v625 - v623.__sinval * v875;
                v627 = (1.0 - v623.__cosval) * vmuld_n_f64(v868.f64[0], v875);
                v628 = vmuld_lane_f64(v623.__sinval, v868, 1);
                v629 = v628 + v627;
                v630 = v623.__sinval * v875 + v625;
                v631 = v623.__cosval + (1.0 - v623.__cosval) * vmuld_lane_f64(v868.f64[1], v868, 1);
                v632 = (1.0 - v623.__cosval) * vmuld_lane_f64(v875, v868, 1);
                v624.f64[0] = v632 - v623.__sinval * v868.f64[0];
                v633 = v627 - v628;
                v634.f64[0] = v623.__sinval * v868.f64[0] + v632;
                v635 = v623.__cosval + (1.0 - v623.__cosval) * vmuld_n_f64(v875, v875);
                v636.f64[0] = *((float64_t *)v614 + 6);
                v637 = *((float64x2_t *)v614 + 2);
                v638 = *((double *)v614 + 9);
                v639 = *(float64x2_t *)(v614 + 14);
                v640 = *((double *)v614 + 12);
                v641 = *((float64x2_t *)v614 + 5);
                *((float64x2_t *)v614 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v637, v346.f64[0]), v639, v630), v641, v633);
                *((double *)v614 + 6) = v636.f64[0] * v346.f64[0] + v638 * v630 + v640 * v633;
                *(float64x2_t *)(v614 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v637, v626), v639, v631), v641, v634.f64[0]);
                *((double *)v614 + 9) = v636.f64[0] * v626 + v638 * v631 + v640 * v634.f64[0];
                *((float64x2_t *)v614 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v637, v629), v639, v624.f64[0]), v641, v635);
                *((double *)v614 + 12) = v636.f64[0] * v629 + v638 * v624.f64[0] + v640 * v635;
                if (*((_BYTE *)v614 + 128))
                {
                  v634.f64[0] = *((float64_t *)v614 + 15);
                  v636.f64[0] = *(float64_t *)(v618 + 40);
                  v346 = *(float64x2_t *)(v618 + 24);
                  *(float64x2_t *)(v614 + 26) = vaddq_f64(*(float64x2_t *)(v614 + 26), v346);
                  *((_QWORD *)v614 + 15) = *(_OWORD *)&vaddq_f64(v634, v636);
                }
              }
            }
          }
        }
        v642 = *(_QWORD *)(a1 + 704);
        v643 = *(_QWORD *)(a1 + 712);
        while (v642 != v643)
        {
          v644 = *(unsigned int **)(v642 + 8);
          v645 = *v644;
          if ((_DWORD)v645 != -1)
          {
            v646 = *((float64x2_t *)v644 + 2);
            *(float64x2_t *)(v644 + 14) = v646;
            *((_QWORD *)v644 + 9) = *((_QWORD *)v644 + 6);
            v647 = *a2 + 8 * *(unsigned int *)(v352[42] + 4 * v645);
            v646.f64[0] = *((float64_t *)v644 + 6);
            v346.f64[0] = *(float64_t *)(v647 + 16);
            *((float64x2_t *)v644 + 2) = vaddq_f64(*((float64x2_t *)v644 + 2), *(float64x2_t *)v647);
            *((_QWORD *)v644 + 6) = *(_OWORD *)&vaddq_f64(v646, v346);
          }
          v642 += 16;
        }
        v648 = *(_QWORD *)(a1 + 800);
        v649 = *(_QWORD *)(a1 + 808);
        if (v648 != v649)
        {
          v650 = *a2;
          do
          {
            v651 = *(double **)(v648 + 8);
            v652 = *(unsigned int *)v651;
            if ((_DWORD)v652 != -1)
            {
              v653 = v651[4];
              v654 = *(unsigned int *)(v352[45] + 4 * v652);
              v651[6] = v653;
              v651[4] = v653 + *(double *)(v650 + 8 * v654);
              *((_BYTE *)v651 + 40) = 0;
            }
            v648 += 16;
          }
          while (v648 != v649);
        }
        v655 = *(_QWORD *)(a1 + 896);
        v656 = *(_QWORD *)(a1 + 904);
        while (v655 != v656)
        {
          v657 = *(unsigned int **)(v655 + 8);
          v658 = *v657;
          if ((_DWORD)v658 != -1)
          {
            v659 = *((_OWORD *)v657 + 2);
            *(_OWORD *)(v657 + 42) = *((_OWORD *)v657 + 3);
            *(_OWORD *)(v657 + 38) = v659;
            *((_QWORD *)v657 + 23) = *((_QWORD *)v657 + 8);
            *((_BYTE *)v657 + 192) = *((_BYTE *)v657 + 72);
            if (*((_BYTE *)v657 + 20))
            {
              if (*((_BYTE *)v657 + 144))
              {
                v660 = (uint64_t)(v657 + 4);
                v661 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(v352[48] + 4 * v658));
                v663 = *((float64x2_t *)v657 + 2);
                v664 = *((float64x2_t *)v657 + 3);
                v662 = (float64x2_t *)(v657 + 8);
                v665 = vaddq_f64(v664, v661[1]);
                *v662 = vaddq_f64(v663, *v661);
                v662[1] = v665;
                sub_20F6169C8(v660);
                sub_20F616F2C(v660);
              }
            }
          }
          v655 += 16;
        }
        v666 = *(_QWORD *)(a1 + 992);
        v667 = *(_QWORD *)(a1 + 1000);
        while (v666 != v667)
        {
          v668 = *(unsigned int **)(v666 + 8);
          v669 = *v668;
          if ((_DWORD)v669 != -1)
          {
            v670 = *((_OWORD *)v668 + 5);
            v671 = *((_OWORD *)v668 + 7);
            v672 = *((_OWORD *)v668 + 8);
            *(_OWORD *)(v668 + 98) = *((_OWORD *)v668 + 6);
            *(_OWORD *)(v668 + 102) = v671;
            v673 = *((float64x2_t *)v668 + 3);
            *(_OWORD *)(v668 + 90) = *((_OWORD *)v668 + 4);
            *(_OWORD *)(v668 + 94) = v670;
            v674 = *((_OWORD *)v668 + 9);
            v675 = *((_OWORD *)v668 + 11);
            v676 = *((_OWORD *)v668 + 12);
            *(_OWORD *)(v668 + 114) = *((_OWORD *)v668 + 10);
            *(_OWORD *)(v668 + 118) = v675;
            *(_OWORD *)(v668 + 106) = v672;
            *(_OWORD *)(v668 + 110) = v674;
            v677 = *((_OWORD *)v668 + 15);
            v678 = *((_OWORD *)v668 + 13);
            *(_OWORD *)(v668 + 130) = *((_OWORD *)v668 + 14);
            *(_OWORD *)(v668 + 134) = v677;
            *(_OWORD *)(v668 + 122) = v676;
            *(_OWORD *)(v668 + 126) = v678;
            v679 = *((_OWORD *)v668 + 3);
            v680 = *((float64x2_t *)v668 + 2);
            *(float64x2_t *)(v668 + 82) = v680;
            *(_OWORD *)(v668 + 86) = v679;
            v681 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(v352[51] + 4 * v669));
            v682 = (__n128)vaddq_f64(v673, v681[1]);
            *((float64x2_t *)v668 + 2) = vaddq_f64(v680, *v681);
            *((__n128 *)v668 + 3) = v682;
            for (kk = (uint64_t **)*((_QWORD *)v668 + 37); kk; kk = (uint64_t **)*kk)
              v682.n128_f64[0] = sub_20F6182A0((char *)kk[5], (float64x2_t *)v668 + 2, v682);
            sub_20F6178A8((uint64_t)(v668 + 4));
          }
          v666 += 16;
        }
        v684 = *(_QWORD *)(a1 + 1088);
        for (mm = *(_QWORD *)(a1 + 1096); v684 != mm; v684 += 16)
        {
          v719 = *(unsigned int **)(v684 + 8);
          v720 = *v719;
          if ((_DWORD)v720 != -1)
          {
            *((_QWORD *)v719 + 30) = *((_QWORD *)v719 + 12);
            v721 = *((_OWORD *)v719 + 5);
            *((_OWORD *)v719 + 13) = *((_OWORD *)v719 + 4);
            *((_OWORD *)v719 + 14) = v721;
            v722 = *((_OWORD *)v719 + 3);
            *((_OWORD *)v719 + 11) = *((_OWORD *)v719 + 2);
            *((_OWORD *)v719 + 12) = v722;
            if (*((_BYTE *)v719 + 20))
            {
              v723 = *a2 + 8 * *(unsigned int *)(v352[54] + 4 * v720);
              _Q1 = *(_OWORD *)v723;
              _D3 = *(_QWORD *)(v723 + 8);
              __asm { FMLA            D2, D3, V1.D[1] }
              v727 = _D2 + *(double *)(v723 + 16) * *(double *)(v723 + 16);
              if (v727 >= 0.0000002635)
              {
                v686 = sqrt(v727);
                v688 = __sincos_stret(v686);
                v687 = v688.__cosval;
                v689 = v688.__sinval / v686;
                v690 = 1.0 / v727 * (1.0 - v688.__cosval);
              }
              else
              {
                v690 = 0.5 - v727 * (v727 / -720.0 + 0.0416666667);
                v689 = 1.0 - v727 * (0.166666667 - v727 * (v727 / -5040.0 + 0.00833333333));
                v687 = 1.0 - v727 * v690;
              }
              v691 = *(double *)(v723 + 8);
              v692 = v690 * *(double *)v723;
              v693 = v690 * v691;
              v694 = *(double *)(v723 + 16);
              v695.f64[0] = v687 + *(double *)v723 * v692;
              v696 = v687 + v691 * (v690 * v691);
              v697 = v687 + v694 * (v690 * v694);
              v698 = v692 * v691;
              v699 = v692 * v694;
              v700 = v693 * v694;
              v701 = v689 * *(double *)v723;
              v702 = v689 * v691;
              v703 = v689 * v694;
              v704.f64[0] = v698 - v703;
              v705.f64[0] = v702 + v699;
              v695.f64[1] = v698 + v703;
              v706 = v700 - v701;
              v704.f64[1] = v696;
              _D3 = v701 + v700;
              v705.f64[1] = v706;
              v708 = *((double *)v719 + 6);
              _Q4 = *((float64x2_t *)v719 + 2);
              v710 = *((double *)v719 + 9);
              _Q6 = *(float64x2_t *)(v719 + 14);
              v712 = *((double *)v719 + 12);
              _Q19 = *((float64x2_t *)v719 + 5);
              v714 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695, _Q4.f64[0]), v704, _Q4, 1), v705, v708);
              __asm { FMLA            D21, D3, V4.D[1] }
              v716 = _D21 + v697 * v708;
              __asm
              {
                FMLA            D21, D3, V6.D[1]
                FMLA            D2, D3, V19.D[1]
              }
              *((double *)v719 + 6) = v716;
              *((float64x2_t *)v719 + 2) = v714;
              *((double *)v719 + 9) = _D21 + v697 * v710;
              *(float64x2_t *)(v719 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695, _Q6.f64[0]), v704, _Q6, 1), v705, v710);
              *((double *)v719 + 12) = _D2 + v697 * v712;
              *((float64x2_t *)v719 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v695, _Q19.f64[0]), v704, _Q19, 1), v705, v712);
              sub_20F811C04((uint64_t)(v719 + 4));
            }
          }
        }
        v728 = *(_QWORD *)(a1 + 1184);
        v729 = *(_QWORD *)(a1 + 1192);
        while (v728 != v729)
        {
          v730 = *(float64x2_t **)(v728 + 8);
          v731 = LODWORD(v730->f64[0]);
          if ((_DWORD)v731 != -1)
          {
            v732 = v730[2];
            v730[4] = v732;
            v730[5].f64[0] = v730[3].f64[0];
            if (LOBYTE(v730[3].f64[1]))
            {
              v733 = v730 + 2;
              v734 = *a2 + 8 * *(unsigned int *)(v352[57] + 4 * v731);
              v732.f64[0] = v733[1].f64[0];
              v346.f64[0] = *(float64_t *)(v734 + 16);
              *v733 = vaddq_f64(*v733, *(float64x2_t *)v734);
              *(_QWORD *)&v733[1].f64[0] = *(_OWORD *)&vaddq_f64(v732, v346);
            }
          }
          v728 += 16;
        }
        goto LABEL_330;
      }
    }
    do
    {
      v541 = *(unsigned int **)(v353 + 8);
      v542 = *v541;
      if ((_DWORD)v542 != -1)
      {
        v545 = *((float64x2_t *)v541 + 2);
        *(_OWORD *)(v541 + 50) = *((_OWORD *)v541 + 3);
        v543 = *((_OWORD *)v541 + 5);
        *(_OWORD *)(v541 + 54) = *((_OWORD *)v541 + 4);
        *(_OWORD *)(v541 + 58) = v543;
        *((_QWORD *)v541 + 31) = *((_QWORD *)v541 + 12);
        *(float64x2_t *)(v541 + 46) = v545;
        *((_OWORD *)v541 + 16) = *(_OWORD *)(v541 + 26);
        *((_QWORD *)v541 + 34) = *((_QWORD *)v541 + 15);
        v544 = *a2 + 8 * *(unsigned int *)(v352[30] + 4 * v542);
        v545.f64[0] = *(float64_t *)(v544 + 16);
        _Q2 = *(float64x2_t *)v544;
        _D3 = *(_QWORD *)(v544 + 8);
        __asm { FMLA            D0, D3, V2.D[1] }
        v549 = sqrt(_D0 + v545.f64[0] * v545.f64[0]);
        v346.f64[0] = 1.0 / v549;
        if (v549 == 0.0)
          v346.f64[0] = 1.0;
        v866 = vmulq_n_f64(_Q2, v346.f64[0]);
        v873 = vmulq_f64(v545, v346).f64[0];
        v550 = __sincos_stret(v549);
        v347 = v866;
        v346.f64[0] = v550.__cosval + (1.0 - v550.__cosval) * vmuld_n_f64(v347.f64[0], v347.f64[0]);
        v551 = (1.0 - v550.__cosval) * vmuld_lane_f64(v347.f64[0], v347, 1);
        v552 = v551 - v550.__sinval * v873;
        v553 = (1.0 - v550.__cosval) * vmuld_n_f64(v866.f64[0], v873);
        v554 = vmuld_lane_f64(v550.__sinval, v866, 1);
        v555 = v554 + v553;
        v556 = v550.__sinval * v873 + v551;
        v557 = v550.__cosval + (1.0 - v550.__cosval) * vmuld_lane_f64(v866.f64[1], v866, 1);
        v558 = (1.0 - v550.__cosval) * vmuld_lane_f64(v873, v866, 1);
        v347.f64[0] = v558 - v550.__sinval * v866.f64[0];
        v559 = v553 - v554;
        v560 = v550.__sinval * v866.f64[0] + v558;
        v561 = v550.__cosval + (1.0 - v550.__cosval) * vmuld_n_f64(v873, v873);
        v562 = *((double *)v541 + 6);
        v563 = *((float64x2_t *)v541 + 2);
        v564 = *((double *)v541 + 9);
        v565 = *(float64x2_t *)(v541 + 14);
        v566 = *((double *)v541 + 12);
        v567 = *((float64x2_t *)v541 + 5);
        *((float64x2_t *)v541 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v346.f64[0]), v565, v556), v567, v559);
        *((double *)v541 + 6) = v562 * v346.f64[0] + v564 * v556 + v566 * v559;
        *(float64x2_t *)(v541 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v552), v565, v557), v567, v560);
        *((double *)v541 + 9) = v562 * v552 + v564 * v557 + v566 * v560;
        *((float64x2_t *)v541 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v555), v565, v347.f64[0]), v567, v561);
        *((double *)v541 + 12) = v562 * v555 + v564 * v347.f64[0] + v566 * v561;
        v568.f64[0] = *((float64_t *)v541 + 15);
        v346.f64[0] = *(float64_t *)(v544 + 40);
        *(float64x2_t *)(v541 + 26) = vaddq_f64(*(float64x2_t *)(v541 + 26), *(float64x2_t *)(v544 + 24));
        *((_QWORD *)v541 + 15) = *(_OWORD *)&vaddq_f64(v568, v346);
        *((_BYTE *)v541 + 128) = 0;
      }
      v353 += 16;
    }
    while (v353 != v354);
    goto LABEL_265;
  }
  if (!*((_BYTE *)v4 + 138))
  {
    if (*v327)
      v348 = (_QWORD *)(a1 + 20640);
    else
      v348 = (_QWORD *)(a1 + 19576);
    v349 = *v4;
    v350 = *(_QWORD *)(a1 + 320);
    v351 = *(_QWORD *)(a1 + 328);
    if (v350 == v351)
      goto LABEL_170;
LABEL_165:
    v374 = 0;
    v375 = v349 + 64;
    do
    {
      v376 = *(_QWORD *)(v350 + 8);
      if (*(_BYTE *)(v376 + 20))
      {
        v377 = v375 + 168 * v374;
        v378 = *(_OWORD *)(v376 + 32);
        *(_OWORD *)(v376 + 200) = *(_OWORD *)(v376 + 48);
        v379 = *(_OWORD *)(v376 + 80);
        *(_OWORD *)(v376 + 216) = *(_OWORD *)(v376 + 64);
        *(_OWORD *)(v376 + 232) = v379;
        *(_QWORD *)(v376 + 248) = *(_QWORD *)(v376 + 96);
        *(_OWORD *)(v376 + 184) = v378;
        *(_OWORD *)(v376 + 256) = *(_OWORD *)(v376 + 104);
        *(_QWORD *)(v376 + 272) = *(_QWORD *)(v376 + 120);
        v380 = *(_QWORD *)(v377 + 64);
        v382 = *(_OWORD *)(v377 + 32);
        v381 = *(_OWORD *)(v377 + 48);
        v346 = *(float64x2_t *)(v377 + 16);
        *(_OWORD *)(v376 + 32) = *(_OWORD *)v377;
        *(float64x2_t *)(v376 + 48) = v346;
        *(_OWORD *)(v376 + 64) = v382;
        *(_OWORD *)(v376 + 80) = v381;
        *(_QWORD *)(v376 + 96) = v380;
        v383 = *(_QWORD *)(v377 + 160);
        *(_OWORD *)(v376 + 104) = *(_OWORD *)(v377 + 144);
        *(_QWORD *)(v376 + 120) = v383;
        ++v374;
      }
      v350 += 16;
    }
    while (v350 != v351);
    v349 = *v4;
    goto LABEL_170;
  }
  v348 = (_QWORD *)(a1 + 22144);
  v349 = *v4;
  v350 = *(_QWORD *)(a1 + 320);
  v351 = *(_QWORD *)(a1 + 328);
  if (v350 != v351)
    goto LABEL_165;
LABEL_170:
  v384 = *(_QWORD *)(a1 + 416);
  v385 = *(_QWORD *)(a1 + 424);
  if (v384 != v385)
  {
    v386 = 0;
    v387 = v349 + 64;
    do
    {
      v388 = *(_QWORD *)(v384 + 8);
      if (*(_BYTE *)(v388 + 20))
      {
        v389 = v387 + 168 * v386;
        v390 = *(_QWORD *)(v389 + 112);
        v391 = *(_OWORD *)(v389 + 96);
        v392 = *(_QWORD *)(v389 + 88);
        v346 = *(float64x2_t *)(v389 + 72);
        v393 = *(_QWORD *)(v389 + 136);
        v394 = *(_OWORD *)(v389 + 120);
        *(_QWORD *)(v388 + 176) = *(_QWORD *)(v388 + 96);
        v395 = *(_OWORD *)(v388 + 80);
        *(_OWORD *)(v388 + 144) = *(_OWORD *)(v388 + 64);
        *(_OWORD *)(v388 + 160) = v395;
        v396 = *(_OWORD *)(v388 + 48);
        *(_OWORD *)(v388 + 112) = *(_OWORD *)(v388 + 32);
        *(_OWORD *)(v388 + 128) = v396;
        *(_OWORD *)(v388 + 32) = v391;
        *(_QWORD *)(v388 + 48) = v390;
        *(float64x2_t *)(v388 + 56) = v346;
        *(_QWORD *)(v388 + 72) = v392;
        *(_OWORD *)(v388 + 80) = v394;
        ++v386;
        *(_QWORD *)(v388 + 96) = v393;
      }
      v384 += 16;
    }
    while (v384 != v385);
  }
  v397 = *(_QWORD *)(a1 + 512);
  v398 = *(_QWORD *)(a1 + 520);
  if (v397 != v398)
  {
    v399 = *v4 + 2080;
    do
    {
      v409 = *(_QWORD *)(v397 + 8);
      if (*(_BYTE *)(v409 + 20))
      {
        v410 = *(_OWORD *)(v409 + 32);
        *(_OWORD *)(v409 + 152) = *(_OWORD *)(v409 + 48);
        v411 = *(_OWORD *)(v409 + 80);
        *(_OWORD *)(v409 + 168) = *(_OWORD *)(v409 + 64);
        *(_OWORD *)(v409 + 184) = v411;
        *(_QWORD *)(v409 + 200) = *(_QWORD *)(v409 + 96);
        *(_OWORD *)(v409 + 136) = v410;
        *(_OWORD *)(v409 + 208) = *(_OWORD *)(v409 + 104);
        *(_QWORD *)(v409 + 224) = *(_QWORD *)(v409 + 120);
        if (*(_BYTE *)(v409 + 129))
        {
          v412 = *(char **)(v5 + 24);
          v413 = *(char **)(v5 + 32);
          if (v412 == v413)
          {
            v400 = 0;
            v401 = *(char **)(v5 + 24);
          }
          else
          {
            v414 = *(_DWORD *)(v409 + 16);
            v401 = *(char **)(v5 + 24);
            while (1)
            {
              if (*(_DWORD *)v401 == v414)
              {
                v400 = 0;
                goto LABEL_178;
              }
              if (*((_DWORD *)v401 + 1) == v414)
                break;
              v401 += 8;
              if (v401 == v413)
              {
                v400 = 0;
                v401 = *(char **)(v5 + 32);
                goto LABEL_178;
              }
            }
            v400 = 1;
          }
LABEL_178:
          v402 = v409 + 32;
          v403 = v409 + 104;
          v404 = v399 + 4080 * ((unint64_t)(v401 - v412) >> 3) + 1016 * v400;
          *(_OWORD *)v402 = *(_OWORD *)(v404 + 8);
          v405 = *(_OWORD *)(v404 + 24);
          v406 = *(_OWORD *)(v404 + 40);
          v407 = *(_OWORD *)(v404 + 56);
          *(_QWORD *)(v402 + 64) = *(_QWORD *)(v404 + 72);
          *(_OWORD *)(v402 + 32) = v406;
          *(_OWORD *)(v402 + 48) = v407;
          *(_OWORD *)(v402 + 16) = v405;
          v408 = *(_OWORD *)(v404 + 80);
          *(_QWORD *)(v403 + 16) = *(_QWORD *)(v404 + 96);
          *(_OWORD *)v403 = v408;
        }
      }
      v397 += 16;
    }
    while (v397 != v398);
  }
  v415 = *(_QWORD *)(a1 + 608);
  for (nn = *(_QWORD *)(a1 + 616); v415 != nn; v415 += 16)
  {
    v417 = *(unsigned int **)(v415 + 8);
    v418 = *v417;
    if ((_DWORD)v418 != -1)
    {
      v419 = *((float64x2_t *)v417 + 3);
      *(_OWORD *)(v417 + 34) = *((_OWORD *)v417 + 2);
      v420 = *((_OWORD *)v417 + 4);
      *(_OWORD *)(v417 + 46) = *((_OWORD *)v417 + 5);
      *(_OWORD *)(v417 + 42) = v420;
      *((_QWORD *)v417 + 25) = *((_QWORD *)v417 + 12);
      *(float64x2_t *)(v417 + 38) = v419;
      *((_OWORD *)v417 + 13) = *(_OWORD *)(v417 + 26);
      *((_QWORD *)v417 + 28) = *((_QWORD *)v417 + 15);
      if (*((_BYTE *)v417 + 20))
      {
        if (*((_BYTE *)v417 + 129))
        {
          v421 = *a2 + 8 * *(unsigned int *)(v348[39] + 4 * v418);
          v419.f64[0] = *(float64_t *)(v421 + 16);
          _Q2 = *(float64x2_t *)v421;
          _D3 = *(_QWORD *)(v421 + 8);
          __asm { FMLA            D0, D3, V2.D[1] }
          v425 = sqrt(_D0 + v419.f64[0] * v419.f64[0]);
          v346.f64[0] = 1.0 / v425;
          if (v425 == 0.0)
            v346.f64[0] = 1.0;
          v865 = vmulq_n_f64(_Q2, v346.f64[0]);
          v872 = vmulq_f64(v419, v346).f64[0];
          v426 = __sincos_stret(v425);
          v427 = v865;
          v346.f64[0] = v426.__cosval + (1.0 - v426.__cosval) * vmuld_n_f64(v427.f64[0], v427.f64[0]);
          v428 = (1.0 - v426.__cosval) * vmuld_lane_f64(v427.f64[0], v427, 1);
          v429 = v428 - v426.__sinval * v872;
          v430 = (1.0 - v426.__cosval) * vmuld_n_f64(v865.f64[0], v872);
          v431 = vmuld_lane_f64(v426.__sinval, v865, 1);
          v432 = v431 + v430;
          v433 = v426.__sinval * v872 + v428;
          v434 = v426.__cosval + (1.0 - v426.__cosval) * vmuld_lane_f64(v865.f64[1], v865, 1);
          v435 = (1.0 - v426.__cosval) * vmuld_lane_f64(v872, v865, 1);
          v427.f64[0] = v435 - v426.__sinval * v865.f64[0];
          v436 = v430 - v431;
          v437.f64[0] = v426.__sinval * v865.f64[0] + v435;
          v438 = v426.__cosval + (1.0 - v426.__cosval) * vmuld_n_f64(v872, v872);
          v439.f64[0] = *((float64_t *)v417 + 6);
          v440 = *((float64x2_t *)v417 + 2);
          v441 = *((double *)v417 + 9);
          v442 = *(float64x2_t *)(v417 + 14);
          v443 = *((double *)v417 + 12);
          v444 = *((float64x2_t *)v417 + 5);
          *((float64x2_t *)v417 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v440, v346.f64[0]), v442, v433), v444, v436);
          *((double *)v417 + 6) = v439.f64[0] * v346.f64[0] + v441 * v433 + v443 * v436;
          *(float64x2_t *)(v417 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v440, v429), v442, v434), v444, v437.f64[0]);
          *((double *)v417 + 9) = v439.f64[0] * v429 + v441 * v434 + v443 * v437.f64[0];
          *((float64x2_t *)v417 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v440, v432), v442, v427.f64[0]), v444, v438);
          *((double *)v417 + 12) = v439.f64[0] * v432 + v441 * v427.f64[0] + v443 * v438;
          if (*((_BYTE *)v417 + 128))
          {
            v437.f64[0] = *((float64_t *)v417 + 15);
            v439.f64[0] = *(float64_t *)(v421 + 40);
            v346 = *(float64x2_t *)(v421 + 24);
            *(float64x2_t *)(v417 + 26) = vaddq_f64(*(float64x2_t *)(v417 + 26), v346);
            *((_QWORD *)v417 + 15) = *(_OWORD *)&vaddq_f64(v437, v439);
          }
        }
      }
    }
  }
  v445 = *(_QWORD *)(a1 + 704);
  v446 = *(_QWORD *)(a1 + 712);
  while (v445 != v446)
  {
    v447 = *(unsigned int **)(v445 + 8);
    v448 = *v447;
    if ((_DWORD)v448 != -1)
    {
      v449 = *((float64x2_t *)v447 + 2);
      *(float64x2_t *)(v447 + 14) = v449;
      *((_QWORD *)v447 + 9) = *((_QWORD *)v447 + 6);
      v450 = *a2 + 8 * *(unsigned int *)(v348[42] + 4 * v448);
      v449.f64[0] = *((float64_t *)v447 + 6);
      v346.f64[0] = *(float64_t *)(v450 + 16);
      *((float64x2_t *)v447 + 2) = vaddq_f64(*((float64x2_t *)v447 + 2), *(float64x2_t *)v450);
      *((_QWORD *)v447 + 6) = *(_OWORD *)&vaddq_f64(v449, v346);
    }
    v445 += 16;
  }
  v451 = *(_QWORD *)(a1 + 800);
  v452 = *(_QWORD *)(a1 + 808);
  v453 = *v4;
  if (v451 != v452)
  {
    v454 = 0;
    do
    {
      v455 = *(_QWORD *)(v451 + 8);
      if (*(_BYTE *)(v455 + 20))
      {
        v456 = *(_QWORD *)(v453 + 2056 + 8 * v454);
        *(_QWORD *)(v455 + 48) = *(_QWORD *)(v455 + 32);
        *(_QWORD *)(v455 + 32) = v456;
        ++v454;
      }
      v451 += 16;
    }
    while (v451 != v452);
  }
  v457 = *(_QWORD *)(a1 + 896);
  v458 = *(_QWORD *)(a1 + 904);
  if (v457 != v458)
  {
    v459 = v453 + 18408;
    do
    {
      v460 = *(_QWORD *)(v457 + 8);
      if (*(_BYTE *)(v460 + 20))
      {
        v461 = *(_OWORD *)(v460 + 48);
        *(_OWORD *)(v460 + 152) = *(_OWORD *)(v460 + 32);
        *(_OWORD *)(v460 + 168) = v461;
        *(_QWORD *)(v460 + 184) = *(_QWORD *)(v460 + 64);
        *(_BYTE *)(v460 + 192) = *(_BYTE *)(v460 + 72);
        if (*(_BYTE *)(v460 + 144))
        {
          v462 = *(char **)(v5 + 24);
          v463 = *(char **)(v5 + 32);
          if (v462 == v463)
          {
            v466 = *(char **)(v5 + 24);
          }
          else
          {
            v464 = 0;
            v465 = *(_DWORD *)(v460 + 16);
            v466 = *(char **)(v5 + 24);
            while (*(_DWORD *)v466 != v465)
            {
              if (*((_DWORD *)v466 + 1) == v465)
              {
                v467 = (_OWORD *)(v459 + ((unint64_t)v464 << 6) + 32);
                goto LABEL_225;
              }
              v466 += 8;
              ++v464;
              if (v466 == v463)
              {
                v466 = *(char **)(v5 + 32);
                break;
              }
            }
          }
          v467 = (_OWORD *)(v459 + ((unint64_t)((unint64_t)(v466 - v462) >> 3) << 6));
LABEL_225:
          v468 = v467[1];
          *(_OWORD *)(v460 + 32) = *v467;
          *(_OWORD *)(v460 + 48) = v468;
          sub_20F6169C8(v460 + 16);
          if ((v861 & 1) != 0)
            sub_20F616F2C(v460 + 16);
          else
            *(_BYTE *)(v460 + 145) = 0;
        }
      }
      v457 += 16;
    }
    while (v457 != v458);
  }
  v469 = *(_QWORD *)(a1 + 992);
  v470 = *(_QWORD *)(a1 + 1000);
  while (v469 != v470)
  {
    v471 = *(unsigned int **)(v469 + 8);
    v472 = *v471;
    if ((_DWORD)v472 != -1)
    {
      v473 = *((_OWORD *)v471 + 5);
      v474 = *((_OWORD *)v471 + 7);
      v475 = *((_OWORD *)v471 + 8);
      *(_OWORD *)(v471 + 98) = *((_OWORD *)v471 + 6);
      *(_OWORD *)(v471 + 102) = v474;
      v476 = *((float64x2_t *)v471 + 3);
      *(_OWORD *)(v471 + 90) = *((_OWORD *)v471 + 4);
      *(_OWORD *)(v471 + 94) = v473;
      v477 = *((_OWORD *)v471 + 9);
      v478 = *((_OWORD *)v471 + 11);
      v479 = *((_OWORD *)v471 + 12);
      *(_OWORD *)(v471 + 114) = *((_OWORD *)v471 + 10);
      *(_OWORD *)(v471 + 118) = v478;
      *(_OWORD *)(v471 + 106) = v475;
      *(_OWORD *)(v471 + 110) = v477;
      v480 = *((_OWORD *)v471 + 15);
      v481 = *((_OWORD *)v471 + 13);
      *(_OWORD *)(v471 + 130) = *((_OWORD *)v471 + 14);
      *(_OWORD *)(v471 + 134) = v480;
      *(_OWORD *)(v471 + 122) = v479;
      *(_OWORD *)(v471 + 126) = v481;
      v482 = *((_OWORD *)v471 + 3);
      v483 = *((float64x2_t *)v471 + 2);
      *(float64x2_t *)(v471 + 82) = v483;
      *(_OWORD *)(v471 + 86) = v482;
      v484 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(v348[51] + 4 * v472));
      v485 = (__n128)vaddq_f64(v476, v484[1]);
      *((float64x2_t *)v471 + 2) = vaddq_f64(v483, *v484);
      *((__n128 *)v471 + 3) = v485;
      for (i1 = (uint64_t **)*((_QWORD *)v471 + 37); i1; i1 = (uint64_t **)*i1)
        v485.n128_f64[0] = sub_20F6182A0((char *)i1[5], (float64x2_t *)v471 + 2, v485);
      sub_20F6178A8((uint64_t)(v471 + 4));
    }
    v469 += 16;
  }
  v487 = *(_QWORD *)(a1 + 1088);
  for (i2 = *(_QWORD *)(a1 + 1096); v487 != i2; v487 += 16)
  {
    v522 = *(unsigned int **)(v487 + 8);
    v523 = *v522;
    if ((_DWORD)v523 != -1)
    {
      *((_QWORD *)v522 + 30) = *((_QWORD *)v522 + 12);
      v524 = *((_OWORD *)v522 + 5);
      *((_OWORD *)v522 + 13) = *((_OWORD *)v522 + 4);
      *((_OWORD *)v522 + 14) = v524;
      v525 = *((_OWORD *)v522 + 3);
      *((_OWORD *)v522 + 11) = *((_OWORD *)v522 + 2);
      *((_OWORD *)v522 + 12) = v525;
      if (*((_BYTE *)v522 + 20))
      {
        v526 = *a2 + 8 * *(unsigned int *)(v348[54] + 4 * v523);
        _Q1 = *(_OWORD *)v526;
        _D3 = *(_QWORD *)(v526 + 8);
        __asm { FMLA            D2, D3, V1.D[1] }
        v530 = _D2 + *(double *)(v526 + 16) * *(double *)(v526 + 16);
        if (v530 >= 0.0000002635)
        {
          v489 = sqrt(v530);
          v491 = __sincos_stret(v489);
          v490 = v491.__cosval;
          v492 = v491.__sinval / v489;
          v493 = 1.0 / v530 * (1.0 - v491.__cosval);
        }
        else
        {
          v493 = 0.5 - v530 * (v530 / -720.0 + 0.0416666667);
          v492 = 1.0 - v530 * (0.166666667 - v530 * (v530 / -5040.0 + 0.00833333333));
          v490 = 1.0 - v530 * v493;
        }
        v494 = *(double *)(v526 + 8);
        v495 = v493 * *(double *)v526;
        v496 = v493 * v494;
        v497 = *(double *)(v526 + 16);
        v498.f64[0] = v490 + *(double *)v526 * v495;
        v499 = v490 + v494 * (v493 * v494);
        v500 = v490 + v497 * (v493 * v497);
        v501 = v495 * v494;
        v502 = v495 * v497;
        v503 = v496 * v497;
        v504 = v492 * *(double *)v526;
        v505 = v492 * v494;
        v506 = v492 * v497;
        v507.f64[0] = v501 - v506;
        v508.f64[0] = v505 + v502;
        v498.f64[1] = v501 + v506;
        v509 = v503 - v504;
        v507.f64[1] = v499;
        _D3 = v504 + v503;
        v508.f64[1] = v509;
        v511 = *((double *)v522 + 6);
        _Q4 = *((float64x2_t *)v522 + 2);
        v513 = *((double *)v522 + 9);
        _Q6 = *(float64x2_t *)(v522 + 14);
        v515 = *((double *)v522 + 12);
        _Q19 = *((float64x2_t *)v522 + 5);
        v517 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q4.f64[0]), v507, _Q4, 1), v508, v511);
        __asm { FMLA            D21, D3, V4.D[1] }
        v519 = _D21 + v500 * v511;
        __asm
        {
          FMLA            D21, D3, V6.D[1]
          FMLA            D2, D3, V19.D[1]
        }
        *((double *)v522 + 6) = v519;
        *((float64x2_t *)v522 + 2) = v517;
        *((double *)v522 + 9) = _D21 + v500 * v513;
        *(float64x2_t *)(v522 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q6.f64[0]), v507, _Q6, 1), v508, v513);
        *((double *)v522 + 12) = _D2 + v500 * v515;
        *((float64x2_t *)v522 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q19.f64[0]), v507, _Q19, 1), v508, v515);
        sub_20F811C04((uint64_t)(v522 + 4));
      }
    }
  }
  v531 = *(_QWORD *)(a1 + 1184);
  v532 = *(_QWORD *)(a1 + 1192);
  if (v531 != v532)
  {
    v533 = *v4 + 1888;
    v534 = *v4 + 1864;
    v535 = *v4 + 1840;
    v536 = *v4 + 1816;
    do
    {
      v539 = *(_QWORD *)(v531 + 8);
      if (!*(_BYTE *)(v539 + 20))
        break;
      *(_OWORD *)(v539 + 64) = *(_OWORD *)(v539 + 32);
      *(_QWORD *)(v539 + 80) = *(_QWORD *)(v539 + 48);
      if (!*(_BYTE *)(v539 + 56))
        break;
      v537 = v536;
      switch(*(_DWORD *)(v539 + 16))
      {
        case 3:
          break;
        case 4:
          v537 = v535;
          break;
        case 5:
          v537 = v534;
          break;
        case 6:
          v537 = v533;
          break;
        default:
          v540 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 620, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v537 = v534;
          if (v540)
            abort();
          return result;
      }
      v538 = *(_OWORD *)v537;
      *(_QWORD *)(v539 + 48) = *(_QWORD *)(v537 + 16);
      *(_OWORD *)(v539 + 32) = v538;
      v531 += 16;
    }
    while (v531 != v532);
  }
LABEL_330:
  result = kdebug_trace();
  *(_BYTE *)(a1 + 2970) = *(_BYTE *)(a1 + 2969);
  *(_BYTE *)(a1 + 2973) = 0;
  *(_WORD *)(a1 + 2968) = 0;
  *(_WORD *)(a1 + 2971) = 0;
  return result;
}

void sub_20F8A2B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20EDB4084((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F8A2BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20EDB4084((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F8A2BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20EDB4084((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F8A2C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18)
{
  sub_20EDB4084((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F8A2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20EDB4084((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8A2C3C(uint64_t a1, char **a2)
{
  _BYTE *v4;
  char *v5;
  unsigned int v6;
  char *v7;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  unint64_t v18;
  size_t v19;
  size_t v20;
  char v21;
  size_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  double v50;
  int v51;
  double *v52;
  uint64_t v53;
  int v54;
  double v55;
  int v56;
  double *v57;
  unsigned int v58;
  unsigned int v59;
  size_t v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  _OWORD *v65;
  void *v66;
  size_t v67;
  unint64_t v68;
  void *__dst;
  size_t v70;
  size_t v71;
  _DWORD v72[2];
  char *v73;
  unsigned int v74;

  v4 = (_BYTE *)(a1 + 57912);
  *(_DWORD *)(a1 + 57992) = 0;
  kdebug_trace();
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 152))(a1, a2);
  __dst = 0;
  v70 = 0;
  v71 = 0;
  if (!*(_DWORD *)(*(_QWORD *)v4 + 31048))
  {
    if (v4[138])
    {
      v11 = a1 + 22144;
    }
    else if (*(_BYTE *)(a1 + 18568))
    {
      v11 = a1 + 20640;
    }
    else
    {
      v11 = a1 + 19576;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    sub_20F9B8CF0((_QWORD *)(a1 + 3008), (uint64_t *)(v11 + 240), &__dst, v21);
    goto LABEL_52;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    v12 = *(_QWORD *)v4;
    v13 = (char *)(*(_QWORD *)v4 + 44352);
    v14 = *(unsigned int *)(v12 + 31048);
    v15 = 196 - ((v14 + 3) & 0xFFFFFFFC);
    v16 = (char *)__dst;
    if ((_DWORD)v14 != (_DWORD)v71 || (_DWORD)v14 != HIDWORD(v71))
    {
      if (v13 == __dst)
      {
        v42 = (char *)operator new((8 * (v14 * v14) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v36 = v42;
        v37 = ((8 * (v14 * v14) + 31) & 0xFFFFFFFE0uLL) >> 3;
        if ((_DWORD)v14)
        {
          v43 = v42;
          v44 = v14;
          do
          {
            memmove(v43, &v13[8 * v15], 8 * v14);
            v15 += 196;
            v43 += 8 * v14;
            --v44;
          }
          while (v44);
        }
LABEL_46:
        __dst = v36;
        v70 = v37;
        LODWORD(v71) = v14;
        HIDWORD(v71) = v14;
        v24 = v13;
        goto LABEL_51;
      }
      LODWORD(v71) = *(_DWORD *)(v12 + 31048);
      HIDWORD(v71) = v14;
      v18 = v14 * (unint64_t)v14;
      if (v70 < v18)
      {
        v19 = (8 * v18 + 31) & 0xFFFFFFFFFFFFFFE0;
        v70 = v19 >> 3;
        v16 = (char *)operator new(v19, (std::align_val_t)0x20uLL);
        __dst = v16;
      }
    }
    if (v13 != v16)
    {
      if ((_DWORD)v14)
      {
        v20 = 8 * v14;
        do
        {
          memmove(v16, &v13[8 * v15], v20);
          v15 += 196;
          v16 += v20;
          --v14;
        }
        while (v14);
      }
      goto LABEL_52;
    }
    v35 = (char *)operator new((8 * (v14 * v14) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v36 = v35;
    v37 = ((8 * (v14 * v14) + 31) & 0xFFFFFFFE0uLL) >> 3;
    if ((_DWORD)v14)
    {
      v38 = v35;
      v39 = v14;
      do
      {
        memmove(v38, &v13[8 * v15], 8 * v14);
        v15 += 196;
        v38 += 8 * v14;
        --v39;
      }
      while (v39);
    }
    goto LABEL_46;
  }
  v5 = (char *)(*(_QWORD *)v4 + 44352);
  v6 = *(_DWORD *)(*(_QWORD *)v4 + 31048);
  v72[0] = v6;
  v72[1] = v6;
  v73 = &v5[8 * (196 - ((v6 + 3) & 0xFFFFFFFC))];
  v74 = 196 - ((v6 + 3) & 0xFFFFFFFC);
  v7 = (char *)__dst;
  if (v6 == (_DWORD)v71 && v6 == HIDWORD(v71))
    goto LABEL_10;
  if (v5 != __dst)
  {
    LODWORD(v71) = v6;
    HIDWORD(v71) = v6;
    v9 = v6 * (unint64_t)v6;
    if (v70 < v9)
    {
      v10 = (8 * v9 + 31) & 0xFFFFFFFFFFFFFFE0;
      v70 = v10 >> 3;
      v7 = (char *)operator new(v10, (std::align_val_t)0x20uLL);
      __dst = v7;
    }
LABEL_10:
    if (v5 != v7)
    {
      sub_20F8F0C10((uint64_t)&__dst, (uint64_t)v72);
      goto LABEL_52;
    }
    v22 = (8 * v6 * v6 + 31) & 0xFFFFFFFE0;
    v66 = (void *)(v22 >> 3);
    v65 = operator new(v22, (std::align_val_t)0x20uLL);
    LODWORD(v67) = v6;
    HIDWORD(v67) = v6;
    sub_20F8F0C10((uint64_t)&v65, (uint64_t)v72);
    v23 = (HIDWORD(v71) * v71);
    v24 = v65;
    if ((_DWORD)v23)
    {
      v25 = (char *)__dst;
      v26 = (v23 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v26 < 3)
      {
        v27 = (uint64_t *)v65;
        v28 = (char *)__dst;
      }
      else
      {
        v27 = (uint64_t *)v65;
        v28 = (char *)__dst;
        if ((unint64_t)((_BYTE *)__dst - (_BYTE *)v65) >= 0x20)
        {
          v29 = v26 + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v27 = (uint64_t *)((char *)v65 + v30);
          v28 = (char *)__dst + v30;
          v31 = (char *)__dst + 16;
          v32 = v65 + 1;
          v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *v32;
            *(v31 - 1) = *(v32 - 1);
            *v31 = v34;
            v31 += 2;
            v32 += 2;
            v33 -= 4;
          }
          while (v33);
          if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_50;
        }
      }
      v45 = &v25[8 * v23];
      do
      {
        v46 = *v27++;
        *(_QWORD *)v28 = v46;
        v28 += 8;
      }
      while (v28 != v45);
    }
LABEL_50:
    if (!v24)
      goto LABEL_52;
    goto LABEL_51;
  }
  v40 = (8 * v6 * v6 + 31) & 0xFFFFFFFE0;
  v66 = (void *)(v40 >> 3);
  v65 = operator new(v40, (std::align_val_t)0x20uLL);
  LODWORD(v67) = v6;
  HIDWORD(v67) = v6;
  sub_20F8F0C10((uint64_t)&v65, (uint64_t)v72);
  v24 = __dst;
  v41 = (void *)v70;
  __dst = v65;
  v70 = (size_t)v66;
  v65 = v24;
  v66 = v41;
  v71 = v67;
  if (v24)
LABEL_51:
    MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
LABEL_52:
  if (*(_BYTE *)(a1 + 2984))
  {
    v47 = *(_DWORD *)(a1 + 3000);
    if (v47 == 1)
    {
      if (HIDWORD(v71) >= v71)
        v53 = v71;
      else
        v53 = HIDWORD(v71);
      if ((_DWORD)v53)
      {
        v54 = 0;
        v55 = *(double *)(a1 + 2992) + 1.0;
        v56 = v71 + 1;
        v57 = (double *)__dst;
        do
        {
          v57[v54] = v55 * v57[v54];
          v54 += v56;
          --v53;
        }
        while (v53);
      }
    }
    else if (!v47)
    {
      v48 = HIDWORD(v71) >= v71 ? v71 : HIDWORD(v71);
      if ((_DWORD)v48)
      {
        v49 = 0;
        v50 = *(double *)(a1 + 2992);
        v51 = v71 + 1;
        v52 = (double *)__dst;
        do
        {
          v52[v49] = v50 + v52[v49];
          v49 += v51;
          --v48;
        }
        while (v48);
      }
    }
  }
  kdebug_trace();
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v58 = v71;
  v59 = HIDWORD(v71);
  if (HIDWORD(v71) * (_DWORD)v71)
  {
    v60 = 8 * (HIDWORD(v71) * v71);
    v61 = (v60 + 31) & 0xFFFFFFFE0;
    v67 = v61 >> 3;
    v62 = operator new(v61, (std::align_val_t)0x20uLL);
    v66 = v62;
    memcpy(v62, __dst, v60);
  }
  else
  {
    v62 = 0;
  }
  v68 = __PAIR64__(v59, v58);
  v63 = 1;
  LOWORD(v65) = 1;
  *(_BYTE *)(a1 + 2968) = v58 == v59;
  if (v58 == v59)
  {
    sub_20FA2A730((uint64_t)&v65, (uint64_t)a2, a2);
    v63 = 0;
    v62 = v66;
  }
  if (v62)
    MEMORY[0x212BC6368](v62, 0x1000C8000313F17);
  kdebug_trace();
  if (__dst)
    MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
  kdebug_trace();
  return v63;
}

void sub_20F8A3268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10)
  {
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
    if (!a14)
    {
LABEL_3:
      sub_20EDB4004((uint64_t)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!a14)
  {
    goto LABEL_3;
  }
  MEMORY[0x212BC6368]();
  sub_20EDB4004((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8A333C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6B838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6B838))
    return byte_254A6B802;
  v2 = atomic_load((unsigned __int8 *)&qword_254A6B840);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6B840))
    {
      byte_254A6B803 = (int)sub_20E8BE300() > 1;
      __cxa_guard_release(&qword_254A6B840);
    }
  }
  byte_254A6B802 = byte_254A6B803 ^ 1;
  __cxa_guard_release(&qword_254A6B838);
  return byte_254A6B802;
}

void sub_20F8A33F0(_Unwind_Exception *a1)
{
  __guard *v1;

  __cxa_guard_abort(v1 + 1);
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8A340C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6B848);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6B848))
    return byte_254A6B804;
  v2 = atomic_load((unsigned __int8 *)&qword_254A6B840);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6B840))
    {
      byte_254A6B803 = (int)sub_20E8BE300() > 1;
      __cxa_guard_release(&qword_254A6B840);
    }
  }
  byte_254A6B804 = byte_254A6B803;
  __cxa_guard_release(&qword_254A6B848);
  return byte_254A6B804;
}

void sub_20F8A34B8(_Unwind_Exception *a1)
{
  __guard *v1;

  __cxa_guard_abort(v1);
  __cxa_guard_abort(v1 + 1);
  _Unwind_Resume(a1);
}

void sub_20F8A34D4(uint64_t a1)
{
  sub_20F89EA1C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F8A34F8(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  float64_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  float64_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  float64_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  float64_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  float64_t *v49;
  float64x2_t v50;
  double v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  float64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  float64_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  float64_t *v77;
  float64x2_t v78;
  double v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  float64_t *v84;
  float64x2_t v85;
  double v86;

  v7 = *(unsigned int *)(result + 3120);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0.0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(result + 3200) + 8 * v8);
      if (v10 != -1)
      {
        v11 = *(_QWORD *)(result + 3128);
        if (v11)
        {
          v12 = (float64_t *)(v11 + 8 * v10);
          v13.f64[0] = *v12;
          v14.f64[0] = v12[14];
          v15.f64[0] = v12[28];
          v13.f64[1] = v12[7];
          v15.f64[1] = v12[35];
          v14.f64[1] = v12[21];
          a4 = vabsq_f64(v14);
          v16 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v13), vabsq_f64(v15)), a4));
          if (v9 < v16)
            v9 = v16;
        }
      }
      v8 += *(_DWORD *)(result + 3224) + 1;
      --v7;
    }
    while (v7);
  }
  else
  {
    v9 = 0.0;
  }
  v17 = *(unsigned int *)(result + 4704);
  if ((_DWORD)v17)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(result + 4784) + 8 * v18);
      if (v19 != -1)
      {
        v20 = *(_QWORD *)(result + 4712);
        if (v20)
        {
          v21 = (float64_t *)(v20 + 8 * v19);
          v22.f64[0] = *v21;
          v23.f64[0] = v21[20];
          v24.f64[0] = v21[40];
          v25.f64[0] = v21[60];
          v23.f64[1] = v21[30];
          v25.f64[1] = v21[70];
          v22.f64[1] = v21[10];
          a7.f64[0] = v21[80];
          v24.f64[1] = v21[50];
          *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
          a4 = vmaxnmq_f64(vabsq_f64(v23), vabsq_f64(v25));
          a7.f64[1] = NAN;
          v26 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v22), a7), vabsq_f64(v24)), a4));
          if (v9 < v26)
            v9 = v26;
        }
      }
      v18 += *(_DWORD *)(result + 4808) + 1;
      --v17;
    }
    while (v17);
  }
  v27 = *(unsigned int *)(result + 6288);
  if ((_DWORD)v27)
  {
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)(result + 6368) + 8 * v28);
      if (v29 != -1)
      {
        v30 = *(_QWORD *)(result + 6296);
        if (v30)
        {
          v31 = (float64_t *)(v30 + 8 * v29);
          v32.f64[0] = *v31;
          v33.f64[0] = v31[14];
          v34.f64[0] = v31[28];
          v32.f64[1] = v31[7];
          v34.f64[1] = v31[35];
          v33.f64[1] = v31[21];
          a4 = vabsq_f64(v33);
          v35 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v32), vabsq_f64(v34)), a4));
          if (v9 < v35)
            v9 = v35;
        }
      }
      v28 += *(_DWORD *)(result + 6392) + 1;
      --v27;
    }
    while (v27);
  }
  v36 = *(unsigned int *)(result + 7872);
  if ((_DWORD)v36)
  {
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(*(_QWORD *)(result + 7952) + 8 * v37);
      if (v38 != -1)
      {
        v39 = *(_QWORD *)(result + 7880);
        if (v39)
        {
          v40 = (float64_t *)(v39 + 8 * v38);
          v41.f64[0] = *v40;
          v42.f64[0] = v40[14];
          v43.f64[0] = v40[28];
          v41.f64[1] = v40[7];
          v43.f64[1] = v40[35];
          v42.f64[1] = v40[21];
          a4 = vabsq_f64(v42);
          v44 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v41), vabsq_f64(v43)), a4));
          if (v9 < v44)
            v9 = v44;
        }
      }
      v37 += *(_DWORD *)(result + 7976) + 1;
      --v36;
    }
    while (v36);
  }
  v45 = *(unsigned int *)(result + 9456);
  if ((_DWORD)v45)
  {
    v46 = 0;
    do
    {
      v47 = *(_QWORD *)(*(_QWORD *)(result + 9536) + 8 * v46);
      if (v47 != -1)
      {
        v48 = *(_QWORD *)(result + 9464);
        if (v48)
        {
          v49 = (float64_t *)(v48 + 8 * v47);
          v50.f64[0] = *v49;
          a4.f64[0] = v49[8];
          v50.f64[1] = v49[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v51 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v50), a4));
          if (v9 < v51)
            v9 = v51;
        }
      }
      v46 += *(_DWORD *)(result + 9560) + 1;
      --v45;
    }
    while (v45);
  }
  v52 = *(unsigned int *)(result + 11040);
  if ((_DWORD)v52)
  {
    v53 = 0;
    do
    {
      v54 = *(_QWORD *)(*(_QWORD *)(result + 11120) + 8 * v53);
      if (v54 != -1)
      {
        v55 = *(_QWORD *)(result + 11048);
        if (v55)
        {
          v56 = fabs(*(double *)(v55 + 8 * v54));
          if (v9 < v56)
            v9 = v56;
        }
      }
      v53 += *(_DWORD *)(result + 11144) + 1;
      --v52;
    }
    while (v52);
  }
  v57 = *(unsigned int *)(result + 12624);
  if ((_DWORD)v57)
  {
    v58 = 0;
    do
    {
      v59 = *(_QWORD *)(*(_QWORD *)(result + 12704) + 8 * v58);
      if (v59 != -1)
      {
        v60 = *(_QWORD *)(result + 12632);
        if (v60)
        {
          v61 = (float64_t *)(v60 + 8 * v59);
          v62.f64[0] = *v61;
          v63.f64[0] = v61[10];
          v62.f64[1] = v61[5];
          v63.f64[1] = v61[15];
          a4 = vabsq_f64(v63);
          v64 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v62), a4));
          if (v9 < v64)
            v9 = v64;
        }
      }
      v58 += *(_DWORD *)(result + 12728) + 1;
      --v57;
    }
    while (v57);
  }
  v65 = *(unsigned int *)(result + 14208);
  if ((_DWORD)v65)
  {
    v66 = 0;
    do
    {
      v67 = *(_QWORD *)(*(_QWORD *)(result + 14288) + 8 * v66);
      if (v67 != -1)
      {
        v68 = *(_QWORD *)(result + 14216);
        if (v68)
        {
          v69 = (float64_t *)(v68 + 8 * v67);
          v70.f64[0] = *v69;
          v71.f64[0] = v69[10];
          v70.f64[1] = v69[5];
          v71.f64[1] = v69[15];
          a4 = vabsq_f64(v71);
          v72 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v70), a4));
          if (v9 < v72)
            v9 = v72;
        }
      }
      v66 += *(_DWORD *)(result + 14312) + 1;
      --v65;
    }
    while (v65);
  }
  v73 = *(unsigned int *)(result + 15792);
  if ((_DWORD)v73)
  {
    v74 = 0;
    do
    {
      v75 = *(_QWORD *)(*(_QWORD *)(result + 15872) + 8 * v74);
      if (v75 != -1)
      {
        v76 = *(_QWORD *)(result + 15800);
        if (v76)
        {
          v77 = (float64_t *)(v76 + 8 * v75);
          v78.f64[0] = *v77;
          a4.f64[0] = v77[8];
          v78.f64[1] = v77[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v79 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v78), a4));
          if (v9 < v79)
            v9 = v79;
        }
      }
      v74 += *(_DWORD *)(result + 15896) + 1;
      --v73;
    }
    while (v73);
  }
  v80 = *(unsigned int *)(result + 17376);
  if ((_DWORD)v80)
  {
    v81 = 0;
    do
    {
      v82 = *(_QWORD *)(*(_QWORD *)(result + 17456) + 8 * v81);
      if (v82 != -1)
      {
        v83 = *(_QWORD *)(result + 17384);
        if (v83)
        {
          v84 = (float64_t *)(v83 + 8 * v82);
          v85.f64[0] = *v84;
          a4.f64[0] = v84[8];
          v85.f64[1] = v84[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v86 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v85), a4));
          if (v9 < v86)
            v9 = v86;
        }
      }
      v81 += *(_DWORD *)(result + 17480) + 1;
      --v80;
    }
    while (v80);
  }
  return result;
}

uint64_t sub_20F8A39F8(uint64_t result, double a2)
{
  if (*(double *)(result + 2992) != a2)
    *(_BYTE *)(result + 2969) = 0;
  *(double *)(result + 2992) = a2;
  return result;
}

uint64_t sub_20F8A3A18(uint64_t result, char a2)
{
  *(_BYTE *)(result + 38440) = a2;
  return result;
}

uint64_t sub_20F8A3A24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 38440);
}

BOOL sub_20F8A3A30(_QWORD *a1)
{
  return ((a1[4779] - a1[4778]) >> 2)
       + ((a1[4776] - a1[4775]) >> 2)
       + ((a1[4782] - a1[4781]) >> 2)
       + ((a1[4785] - a1[4784]) >> 2)
       + ((a1[4788] - a1[4787]) >> 2)
       + ((a1[4791] - a1[4790]) >> 2)
       + ((a1[4794] - a1[4793]) >> 2)
       + ((a1[4797] - a1[4796]) >> 2)
       + ((a1[4800] - a1[4799]) >> 2)
       + ((a1[4803] - a1[4802]) >> 2) != 0;
}

uint64_t sub_20F8A3ADC(uint64_t a1)
{
  return a1 + 22896;
}

uint64_t sub_20F8A3AE8(uint64_t a1)
{
  return a1 + 22896;
}

double sub_20F8A3AF4(uint64_t a1, void **a2)
{
  _BYTE *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  double result;

  v4 = (_BYTE *)(a1 + 58050);
  v5 = *(unsigned int *)(a1 + 3024);
  *((_DWORD *)a2 + 4) = v5;
  v6 = (size_t)a2[1];
  if (v6 < v5)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v7 = (8 * v5 + 31) & 0xFFFFFFFE0;
    v6 = v7 >> 3;
    *a2 = 0;
    a2[1] = (void *)(v7 >> 3);
    *a2 = operator new(v7, (std::align_val_t)0x20uLL);
  }
  if (*v4)
  {
    v8 = a1 + 22144;
    v9 = *(unsigned int *)(a1 + 3024);
    if (*((_DWORD *)a2 + 4) == (_DWORD)v9)
      goto LABEL_16;
  }
  else
  {
    if (*(_BYTE *)(a1 + 18568))
      v8 = a1 + 20640;
    else
      v8 = a1 + 19576;
    v9 = *(unsigned int *)(a1 + 3024);
    if (*((_DWORD *)a2 + 4) == (_DWORD)v9)
      goto LABEL_16;
  }
  *((_DWORD *)a2 + 4) = v9;
  if (v6 < v9)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v10 = (8 * v9 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v10 >> 3);
    *a2 = operator new(v10, (std::align_val_t)0x20uLL);
  }
LABEL_16:
  *(_QWORD *)&result = sub_20F9BDC70((_QWORD *)(v8 + 240), a1 + 3008, a2).n128_u64[0];
  return result;
}

uint64_t sub_20F8A3C28(uint64_t a1, void **a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;

  kdebug_trace();
  v4 = (unsigned int *)(a1 + 57400);
  if (*(_BYTE *)(a1 + 58050))
  {
    v5 = a1 + 22144;
    v6 = *v4;
    if (*((_DWORD *)a2 + 4) == (_DWORD)v6)
      goto LABEL_12;
  }
  else
  {
    if (*(_BYTE *)(a1 + 18568))
      v5 = a1 + 20640;
    else
      v5 = a1 + 19576;
    v6 = *v4;
    if (*((_DWORD *)a2 + 4) == (_DWORD)v6)
      goto LABEL_12;
  }
  *((_DWORD *)a2 + 4) = v6;
  if ((unint64_t)a2[1] < v6)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v7 >> 3);
    *a2 = operator new(v7, (std::align_val_t)0x20uLL);
  }
LABEL_12:
  sub_20F9BDC70((_QWORD *)(v5 + 240), a1 + 57384, a2);
  return kdebug_trace();
}

void sub_20F8A3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F8A3D80(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1 + 4288;
  *a1 = &off_24CA031B8;
  v3 = a1 + 4302;
  v4 = (_QWORD *)a1[4305];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v2[11];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = (void *)v2[8];
  if (v7)
  {
    v2[9] = v7;
    operator delete(v7);
  }
  v8 = (void *)v2[5];
  if (v8)
  {
    v2[6] = v8;
    operator delete(v8);
  }
  if (*v2)
    MEMORY[0x212BC6368](*v2, 0x1000C8000313F17);
  sub_20F89E908((uint64_t)(a1 + 4258));
  sub_20F8A4000(a1 + 2358);
  v9 = a1[2345];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  v10 = (void *)a1[2341];
  if (v10)
  {
    a1[2342] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[2338];
  if (v11)
  {
    a1[2339] = v11;
    operator delete(v11);
  }
  sub_20F89E908((uint64_t)(a1 + 2308));
  sub_20F89E908((uint64_t)(a1 + 2278));
  sub_20F89E908((uint64_t)(a1 + 2248));
  v12 = (void *)a1[2235];
  if (v12)
  {
    a1[2236] = v12;
    operator delete(v12);
  }
  sub_20F8ADA70((uint64_t)(a1 + 2201));
  *a1 = off_24CA03E50;
  sub_20F8ADB48(a1 + 1952);
  v13 = (_QWORD *)a1[1951];
  if (v13 == a1 + 1948)
  {
    v14 = 4;
    v13 = a1 + 1948;
  }
  else
  {
    if (!v13)
      goto LABEL_27;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_27:
  sub_20F89E908((uint64_t)(a1 + 1917));
  sub_20F8A4000(a1 + 17);
  v15 = a1[4];
  if (v15)
    MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  v16 = a1[1];
  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  return a1;
}

void sub_20F8A3F70(_QWORD *a1)
{
  sub_20F8A3D80(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F8A3F94()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.h", 809, (uint64_t)"", 0, (uint64_t)"This does nothing.", 18, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20F8A3FD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 34328) + 312;
}

uint64_t sub_20F8A3FE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 34328) + 312;
}

uint64_t sub_20F8A3FF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 34328) + 3008;
}

_QWORD *sub_20F8A4000(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;

  a1[1782] = off_24CA032B0;
  v2 = (void *)a1[1797];
  if (v2)
  {
    a1[1798] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1793];
  if (v3)
  {
    a1[1794] = v3;
    operator delete(v3);
  }
  a1[1782] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1787));
  v4 = (void *)a1[1784];
  if (v4)
  {
    a1[1785] = v4;
    operator delete(v4);
  }
  a1[1764] = off_24CA032B0;
  v5 = (void *)a1[1779];
  if (v5)
  {
    a1[1780] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1775];
  if (v6)
  {
    a1[1776] = v6;
    operator delete(v6);
  }
  a1[1764] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1769));
  v7 = (void *)a1[1766];
  if (v7)
  {
    a1[1767] = v7;
    operator delete(v7);
  }
  a1[1746] = off_24CA032B0;
  v8 = (void *)a1[1761];
  if (v8)
  {
    a1[1762] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1757];
  if (v9)
  {
    a1[1758] = v9;
    operator delete(v9);
  }
  a1[1746] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1751));
  v10 = (void *)a1[1748];
  if (v10)
  {
    a1[1749] = v10;
    operator delete(v10);
  }
  a1[1728] = off_24CA032B0;
  v11 = (void *)a1[1743];
  if (v11)
  {
    a1[1744] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[1739];
  if (v12)
  {
    a1[1740] = v12;
    operator delete(v12);
  }
  a1[1728] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1733));
  v13 = (void *)a1[1730];
  if (v13)
  {
    a1[1731] = v13;
    operator delete(v13);
  }
  a1[1710] = off_24CA032B0;
  v14 = (void *)a1[1725];
  if (v14)
  {
    a1[1726] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[1721];
  if (v15)
  {
    a1[1722] = v15;
    operator delete(v15);
  }
  a1[1710] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1715));
  v16 = (void *)a1[1712];
  if (v16)
  {
    a1[1713] = v16;
    operator delete(v16);
  }
  a1[1692] = off_24CA032B0;
  v17 = (void *)a1[1707];
  if (v17)
  {
    a1[1708] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[1703];
  if (v18)
  {
    a1[1704] = v18;
    operator delete(v18);
  }
  a1[1692] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1697));
  v19 = (void *)a1[1694];
  if (v19)
  {
    a1[1695] = v19;
    operator delete(v19);
  }
  a1[1674] = off_24CA032B0;
  v20 = (void *)a1[1689];
  if (v20)
  {
    a1[1690] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[1685];
  if (v21)
  {
    a1[1686] = v21;
    operator delete(v21);
  }
  a1[1674] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1679));
  v22 = (void *)a1[1676];
  if (v22)
  {
    a1[1677] = v22;
    operator delete(v22);
  }
  a1[1656] = off_24CA032B0;
  v23 = (void *)a1[1671];
  if (v23)
  {
    a1[1672] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[1667];
  if (v24)
  {
    a1[1668] = v24;
    operator delete(v24);
  }
  a1[1656] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1661));
  v25 = (void *)a1[1658];
  if (v25)
  {
    a1[1659] = v25;
    operator delete(v25);
  }
  a1[1638] = off_24CA032B0;
  v26 = (void *)a1[1653];
  if (v26)
  {
    a1[1654] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[1649];
  if (v27)
  {
    a1[1650] = v27;
    operator delete(v27);
  }
  a1[1638] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1643));
  v28 = (void *)a1[1640];
  if (v28)
  {
    a1[1641] = v28;
    operator delete(v28);
  }
  a1[1620] = off_24CA032B0;
  v29 = (void *)a1[1635];
  if (v29)
  {
    a1[1636] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[1631];
  if (v30)
  {
    a1[1632] = v30;
    operator delete(v30);
  }
  a1[1620] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1625));
  v31 = (void *)a1[1622];
  if (v31)
  {
    a1[1623] = v31;
    operator delete(v31);
  }
  a1[1602] = off_24CA032B0;
  v32 = (void *)a1[1617];
  if (v32)
  {
    a1[1618] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[1613];
  if (v33)
  {
    a1[1614] = v33;
    operator delete(v33);
  }
  a1[1602] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1607));
  v34 = (void *)a1[1604];
  if (v34)
  {
    a1[1605] = v34;
    operator delete(v34);
  }
  a1[1584] = off_24CA032B0;
  v35 = (void *)a1[1599];
  if (v35)
  {
    a1[1600] = v35;
    operator delete(v35);
  }
  v36 = (void *)a1[1595];
  if (v36)
  {
    a1[1596] = v36;
    operator delete(v36);
  }
  a1[1584] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1589));
  v37 = (void *)a1[1586];
  if (v37)
  {
    a1[1587] = v37;
    operator delete(v37);
  }
  a1[1566] = off_24CA032B0;
  v38 = (void *)a1[1581];
  if (v38)
  {
    a1[1582] = v38;
    operator delete(v38);
  }
  v39 = (void *)a1[1577];
  if (v39)
  {
    a1[1578] = v39;
    operator delete(v39);
  }
  a1[1566] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1571));
  v40 = (void *)a1[1568];
  if (v40)
  {
    a1[1569] = v40;
    operator delete(v40);
  }
  a1[1548] = off_24CA032B0;
  v41 = (void *)a1[1563];
  if (v41)
  {
    a1[1564] = v41;
    operator delete(v41);
  }
  v42 = (void *)a1[1559];
  if (v42)
  {
    a1[1560] = v42;
    operator delete(v42);
  }
  a1[1548] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1553));
  v43 = (void *)a1[1550];
  if (v43)
  {
    a1[1551] = v43;
    operator delete(v43);
  }
  a1[1530] = off_24CA032B0;
  v44 = (void *)a1[1545];
  if (v44)
  {
    a1[1546] = v44;
    operator delete(v44);
  }
  v45 = (void *)a1[1541];
  if (v45)
  {
    a1[1542] = v45;
    operator delete(v45);
  }
  a1[1530] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1535));
  v46 = (void *)a1[1532];
  if (v46)
  {
    a1[1533] = v46;
    operator delete(v46);
  }
  a1[1512] = off_24CA032B0;
  v47 = (void *)a1[1527];
  if (v47)
  {
    a1[1528] = v47;
    operator delete(v47);
  }
  v48 = (void *)a1[1523];
  if (v48)
  {
    a1[1524] = v48;
    operator delete(v48);
  }
  a1[1512] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1517));
  v49 = (void *)a1[1514];
  if (v49)
  {
    a1[1515] = v49;
    operator delete(v49);
  }
  a1[1494] = off_24CA032B0;
  v50 = (void *)a1[1509];
  if (v50)
  {
    a1[1510] = v50;
    operator delete(v50);
  }
  v51 = (void *)a1[1505];
  if (v51)
  {
    a1[1506] = v51;
    operator delete(v51);
  }
  a1[1494] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1499));
  v52 = (void *)a1[1496];
  if (v52)
  {
    a1[1497] = v52;
    operator delete(v52);
  }
  a1[1476] = off_24CA032B0;
  v53 = (void *)a1[1491];
  if (v53)
  {
    a1[1492] = v53;
    operator delete(v53);
  }
  v54 = (void *)a1[1487];
  if (v54)
  {
    a1[1488] = v54;
    operator delete(v54);
  }
  a1[1476] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1481));
  v55 = (void *)a1[1478];
  if (v55)
  {
    a1[1479] = v55;
    operator delete(v55);
  }
  a1[1458] = off_24CA032B0;
  v56 = (void *)a1[1473];
  if (v56)
  {
    a1[1474] = v56;
    operator delete(v56);
  }
  v57 = (void *)a1[1469];
  if (v57)
  {
    a1[1470] = v57;
    operator delete(v57);
  }
  a1[1458] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1463));
  v58 = (void *)a1[1460];
  if (v58)
  {
    a1[1461] = v58;
    operator delete(v58);
  }
  a1[1440] = off_24CA032B0;
  v59 = (void *)a1[1455];
  if (v59)
  {
    a1[1456] = v59;
    operator delete(v59);
  }
  v60 = (void *)a1[1451];
  if (v60)
  {
    a1[1452] = v60;
    operator delete(v60);
  }
  a1[1440] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1445));
  v61 = (void *)a1[1442];
  if (v61)
  {
    a1[1443] = v61;
    operator delete(v61);
  }
  a1[1422] = off_24CA032B0;
  v62 = (void *)a1[1437];
  if (v62)
  {
    a1[1438] = v62;
    operator delete(v62);
  }
  v63 = (void *)a1[1433];
  if (v63)
  {
    a1[1434] = v63;
    operator delete(v63);
  }
  a1[1422] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1427));
  v64 = (void *)a1[1424];
  if (v64)
  {
    a1[1425] = v64;
    operator delete(v64);
  }
  a1[1404] = off_24CA032B0;
  v65 = (void *)a1[1419];
  if (v65)
  {
    a1[1420] = v65;
    operator delete(v65);
  }
  v66 = (void *)a1[1415];
  if (v66)
  {
    a1[1416] = v66;
    operator delete(v66);
  }
  a1[1404] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1409));
  v67 = (void *)a1[1406];
  if (v67)
  {
    a1[1407] = v67;
    operator delete(v67);
  }
  a1[1386] = off_24CA032B0;
  v68 = (void *)a1[1401];
  if (v68)
  {
    a1[1402] = v68;
    operator delete(v68);
  }
  v69 = (void *)a1[1397];
  if (v69)
  {
    a1[1398] = v69;
    operator delete(v69);
  }
  a1[1386] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1391));
  v70 = (void *)a1[1388];
  if (v70)
  {
    a1[1389] = v70;
    operator delete(v70);
  }
  a1[1368] = off_24CA032B0;
  v71 = (void *)a1[1383];
  if (v71)
  {
    a1[1384] = v71;
    operator delete(v71);
  }
  v72 = (void *)a1[1379];
  if (v72)
  {
    a1[1380] = v72;
    operator delete(v72);
  }
  a1[1368] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1373));
  v73 = (void *)a1[1370];
  if (v73)
  {
    a1[1371] = v73;
    operator delete(v73);
  }
  a1[1350] = off_24CA032B0;
  v74 = (void *)a1[1365];
  if (v74)
  {
    a1[1366] = v74;
    operator delete(v74);
  }
  v75 = (void *)a1[1361];
  if (v75)
  {
    a1[1362] = v75;
    operator delete(v75);
  }
  a1[1350] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1355));
  v76 = (void *)a1[1352];
  if (v76)
  {
    a1[1353] = v76;
    operator delete(v76);
  }
  a1[1332] = off_24CA032B0;
  v77 = (void *)a1[1347];
  if (v77)
  {
    a1[1348] = v77;
    operator delete(v77);
  }
  v78 = (void *)a1[1343];
  if (v78)
  {
    a1[1344] = v78;
    operator delete(v78);
  }
  a1[1332] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1337));
  v79 = (void *)a1[1334];
  if (v79)
  {
    a1[1335] = v79;
    operator delete(v79);
  }
  a1[1314] = off_24CA032B0;
  v80 = (void *)a1[1329];
  if (v80)
  {
    a1[1330] = v80;
    operator delete(v80);
  }
  v81 = (void *)a1[1325];
  if (v81)
  {
    a1[1326] = v81;
    operator delete(v81);
  }
  a1[1314] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1319));
  v82 = (void *)a1[1316];
  if (v82)
  {
    a1[1317] = v82;
    operator delete(v82);
  }
  a1[1296] = off_24CA032B0;
  v83 = (void *)a1[1311];
  if (v83)
  {
    a1[1312] = v83;
    operator delete(v83);
  }
  v84 = (void *)a1[1307];
  if (v84)
  {
    a1[1308] = v84;
    operator delete(v84);
  }
  a1[1296] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1301));
  v85 = (void *)a1[1298];
  if (v85)
  {
    a1[1299] = v85;
    operator delete(v85);
  }
  a1[1278] = off_24CA032B0;
  v86 = (void *)a1[1293];
  if (v86)
  {
    a1[1294] = v86;
    operator delete(v86);
  }
  v87 = (void *)a1[1289];
  if (v87)
  {
    a1[1290] = v87;
    operator delete(v87);
  }
  a1[1278] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1283));
  v88 = (void *)a1[1280];
  if (v88)
  {
    a1[1281] = v88;
    operator delete(v88);
  }
  a1[1260] = off_24CA032B0;
  v89 = (void *)a1[1275];
  if (v89)
  {
    a1[1276] = v89;
    operator delete(v89);
  }
  v90 = (void *)a1[1271];
  if (v90)
  {
    a1[1272] = v90;
    operator delete(v90);
  }
  a1[1260] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1265));
  v91 = (void *)a1[1262];
  if (v91)
  {
    a1[1263] = v91;
    operator delete(v91);
  }
  a1[1242] = off_24CA032B0;
  v92 = (void *)a1[1257];
  if (v92)
  {
    a1[1258] = v92;
    operator delete(v92);
  }
  v93 = (void *)a1[1253];
  if (v93)
  {
    a1[1254] = v93;
    operator delete(v93);
  }
  a1[1242] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1247));
  v94 = (void *)a1[1244];
  if (v94)
  {
    a1[1245] = v94;
    operator delete(v94);
  }
  a1[1224] = off_24CA032B0;
  v95 = (void *)a1[1239];
  if (v95)
  {
    a1[1240] = v95;
    operator delete(v95);
  }
  v96 = (void *)a1[1235];
  if (v96)
  {
    a1[1236] = v96;
    operator delete(v96);
  }
  a1[1224] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1229));
  v97 = (void *)a1[1226];
  if (v97)
  {
    a1[1227] = v97;
    operator delete(v97);
  }
  a1[1206] = off_24CA032B0;
  v98 = (void *)a1[1221];
  if (v98)
  {
    a1[1222] = v98;
    operator delete(v98);
  }
  v99 = (void *)a1[1217];
  if (v99)
  {
    a1[1218] = v99;
    operator delete(v99);
  }
  a1[1206] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1211));
  v100 = (void *)a1[1208];
  if (v100)
  {
    a1[1209] = v100;
    operator delete(v100);
  }
  a1[1188] = off_24CA032B0;
  v101 = (void *)a1[1203];
  if (v101)
  {
    a1[1204] = v101;
    operator delete(v101);
  }
  v102 = (void *)a1[1199];
  if (v102)
  {
    a1[1200] = v102;
    operator delete(v102);
  }
  a1[1188] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1193));
  v103 = (void *)a1[1190];
  if (v103)
  {
    a1[1191] = v103;
    operator delete(v103);
  }
  a1[1170] = off_24CA032B0;
  v104 = (void *)a1[1185];
  if (v104)
  {
    a1[1186] = v104;
    operator delete(v104);
  }
  v105 = (void *)a1[1181];
  if (v105)
  {
    a1[1182] = v105;
    operator delete(v105);
  }
  a1[1170] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1175));
  v106 = (void *)a1[1172];
  if (v106)
  {
    a1[1173] = v106;
    operator delete(v106);
  }
  a1[1152] = off_24CA032B0;
  v107 = (void *)a1[1167];
  if (v107)
  {
    a1[1168] = v107;
    operator delete(v107);
  }
  v108 = (void *)a1[1163];
  if (v108)
  {
    a1[1164] = v108;
    operator delete(v108);
  }
  a1[1152] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1157));
  v109 = (void *)a1[1154];
  if (v109)
  {
    a1[1155] = v109;
    operator delete(v109);
  }
  a1[1134] = off_24CA032B0;
  v110 = (void *)a1[1149];
  if (v110)
  {
    a1[1150] = v110;
    operator delete(v110);
  }
  v111 = (void *)a1[1145];
  if (v111)
  {
    a1[1146] = v111;
    operator delete(v111);
  }
  a1[1134] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1139));
  v112 = (void *)a1[1136];
  if (v112)
  {
    a1[1137] = v112;
    operator delete(v112);
  }
  a1[1116] = off_24CA032B0;
  v113 = (void *)a1[1131];
  if (v113)
  {
    a1[1132] = v113;
    operator delete(v113);
  }
  v114 = (void *)a1[1127];
  if (v114)
  {
    a1[1128] = v114;
    operator delete(v114);
  }
  a1[1116] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1121));
  v115 = (void *)a1[1118];
  if (v115)
  {
    a1[1119] = v115;
    operator delete(v115);
  }
  a1[1098] = off_24CA032B0;
  v116 = (void *)a1[1113];
  if (v116)
  {
    a1[1114] = v116;
    operator delete(v116);
  }
  v117 = (void *)a1[1109];
  if (v117)
  {
    a1[1110] = v117;
    operator delete(v117);
  }
  a1[1098] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1103));
  v118 = (void *)a1[1100];
  if (v118)
  {
    a1[1101] = v118;
    operator delete(v118);
  }
  a1[1080] = off_24CA032B0;
  v119 = (void *)a1[1095];
  if (v119)
  {
    a1[1096] = v119;
    operator delete(v119);
  }
  v120 = (void *)a1[1091];
  if (v120)
  {
    a1[1092] = v120;
    operator delete(v120);
  }
  a1[1080] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1085));
  v121 = (void *)a1[1082];
  if (v121)
  {
    a1[1083] = v121;
    operator delete(v121);
  }
  a1[1062] = off_24CA032B0;
  v122 = (void *)a1[1077];
  if (v122)
  {
    a1[1078] = v122;
    operator delete(v122);
  }
  v123 = (void *)a1[1073];
  if (v123)
  {
    a1[1074] = v123;
    operator delete(v123);
  }
  a1[1062] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1067));
  v124 = (void *)a1[1064];
  if (v124)
  {
    a1[1065] = v124;
    operator delete(v124);
  }
  a1[1044] = off_24CA032B0;
  v125 = (void *)a1[1059];
  if (v125)
  {
    a1[1060] = v125;
    operator delete(v125);
  }
  v126 = (void *)a1[1055];
  if (v126)
  {
    a1[1056] = v126;
    operator delete(v126);
  }
  a1[1044] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1049));
  v127 = (void *)a1[1046];
  if (v127)
  {
    a1[1047] = v127;
    operator delete(v127);
  }
  a1[1026] = off_24CA032B0;
  v128 = (void *)a1[1041];
  if (v128)
  {
    a1[1042] = v128;
    operator delete(v128);
  }
  v129 = (void *)a1[1037];
  if (v129)
  {
    a1[1038] = v129;
    operator delete(v129);
  }
  a1[1026] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1031));
  v130 = (void *)a1[1028];
  if (v130)
  {
    a1[1029] = v130;
    operator delete(v130);
  }
  a1[1008] = off_24CA032B0;
  v131 = (void *)a1[1023];
  if (v131)
  {
    a1[1024] = v131;
    operator delete(v131);
  }
  v132 = (void *)a1[1019];
  if (v132)
  {
    a1[1020] = v132;
    operator delete(v132);
  }
  a1[1008] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 1013));
  v133 = (void *)a1[1010];
  if (v133)
  {
    a1[1011] = v133;
    operator delete(v133);
  }
  a1[990] = off_24CA032B0;
  v134 = (void *)a1[1005];
  if (v134)
  {
    a1[1006] = v134;
    operator delete(v134);
  }
  v135 = (void *)a1[1001];
  if (v135)
  {
    a1[1002] = v135;
    operator delete(v135);
  }
  a1[990] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 995));
  v136 = (void *)a1[992];
  if (v136)
  {
    a1[993] = v136;
    operator delete(v136);
  }
  a1[972] = off_24CA032B0;
  v137 = (void *)a1[987];
  if (v137)
  {
    a1[988] = v137;
    operator delete(v137);
  }
  v138 = (void *)a1[983];
  if (v138)
  {
    a1[984] = v138;
    operator delete(v138);
  }
  a1[972] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 977));
  v139 = (void *)a1[974];
  if (v139)
  {
    a1[975] = v139;
    operator delete(v139);
  }
  a1[954] = off_24CA032B0;
  v140 = (void *)a1[969];
  if (v140)
  {
    a1[970] = v140;
    operator delete(v140);
  }
  v141 = (void *)a1[965];
  if (v141)
  {
    a1[966] = v141;
    operator delete(v141);
  }
  a1[954] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 959));
  v142 = (void *)a1[956];
  if (v142)
  {
    a1[957] = v142;
    operator delete(v142);
  }
  a1[936] = off_24CA032B0;
  v143 = (void *)a1[951];
  if (v143)
  {
    a1[952] = v143;
    operator delete(v143);
  }
  v144 = (void *)a1[947];
  if (v144)
  {
    a1[948] = v144;
    operator delete(v144);
  }
  a1[936] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 941));
  v145 = (void *)a1[938];
  if (v145)
  {
    a1[939] = v145;
    operator delete(v145);
  }
  a1[918] = off_24CA032B0;
  v146 = (void *)a1[933];
  if (v146)
  {
    a1[934] = v146;
    operator delete(v146);
  }
  v147 = (void *)a1[929];
  if (v147)
  {
    a1[930] = v147;
    operator delete(v147);
  }
  a1[918] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 923));
  v148 = (void *)a1[920];
  if (v148)
  {
    a1[921] = v148;
    operator delete(v148);
  }
  a1[900] = off_24CA032B0;
  v149 = (void *)a1[915];
  if (v149)
  {
    a1[916] = v149;
    operator delete(v149);
  }
  v150 = (void *)a1[911];
  if (v150)
  {
    a1[912] = v150;
    operator delete(v150);
  }
  a1[900] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 905));
  v151 = (void *)a1[902];
  if (v151)
  {
    a1[903] = v151;
    operator delete(v151);
  }
  a1[882] = off_24CA032B0;
  v152 = (void *)a1[897];
  if (v152)
  {
    a1[898] = v152;
    operator delete(v152);
  }
  v153 = (void *)a1[893];
  if (v153)
  {
    a1[894] = v153;
    operator delete(v153);
  }
  a1[882] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 887));
  v154 = (void *)a1[884];
  if (v154)
  {
    a1[885] = v154;
    operator delete(v154);
  }
  a1[864] = off_24CA032B0;
  v155 = (void *)a1[879];
  if (v155)
  {
    a1[880] = v155;
    operator delete(v155);
  }
  v156 = (void *)a1[875];
  if (v156)
  {
    a1[876] = v156;
    operator delete(v156);
  }
  a1[864] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 869));
  v157 = (void *)a1[866];
  if (v157)
  {
    a1[867] = v157;
    operator delete(v157);
  }
  a1[846] = off_24CA032B0;
  v158 = (void *)a1[861];
  if (v158)
  {
    a1[862] = v158;
    operator delete(v158);
  }
  v159 = (void *)a1[857];
  if (v159)
  {
    a1[858] = v159;
    operator delete(v159);
  }
  a1[846] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 851));
  v160 = (void *)a1[848];
  if (v160)
  {
    a1[849] = v160;
    operator delete(v160);
  }
  a1[828] = off_24CA032B0;
  v161 = (void *)a1[843];
  if (v161)
  {
    a1[844] = v161;
    operator delete(v161);
  }
  v162 = (void *)a1[839];
  if (v162)
  {
    a1[840] = v162;
    operator delete(v162);
  }
  a1[828] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 833));
  v163 = (void *)a1[830];
  if (v163)
  {
    a1[831] = v163;
    operator delete(v163);
  }
  a1[810] = off_24CA032B0;
  v164 = (void *)a1[825];
  if (v164)
  {
    a1[826] = v164;
    operator delete(v164);
  }
  v165 = (void *)a1[821];
  if (v165)
  {
    a1[822] = v165;
    operator delete(v165);
  }
  a1[810] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 815));
  v166 = (void *)a1[812];
  if (v166)
  {
    a1[813] = v166;
    operator delete(v166);
  }
  a1[792] = off_24CA032B0;
  v167 = (void *)a1[807];
  if (v167)
  {
    a1[808] = v167;
    operator delete(v167);
  }
  v168 = (void *)a1[803];
  if (v168)
  {
    a1[804] = v168;
    operator delete(v168);
  }
  a1[792] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 797));
  v169 = (void *)a1[794];
  if (v169)
  {
    a1[795] = v169;
    operator delete(v169);
  }
  a1[774] = off_24CA032B0;
  v170 = (void *)a1[789];
  if (v170)
  {
    a1[790] = v170;
    operator delete(v170);
  }
  v171 = (void *)a1[785];
  if (v171)
  {
    a1[786] = v171;
    operator delete(v171);
  }
  a1[774] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 779));
  v172 = (void *)a1[776];
  if (v172)
  {
    a1[777] = v172;
    operator delete(v172);
  }
  a1[756] = off_24CA032B0;
  v173 = (void *)a1[771];
  if (v173)
  {
    a1[772] = v173;
    operator delete(v173);
  }
  v174 = (void *)a1[767];
  if (v174)
  {
    a1[768] = v174;
    operator delete(v174);
  }
  a1[756] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 761));
  v175 = (void *)a1[758];
  if (v175)
  {
    a1[759] = v175;
    operator delete(v175);
  }
  a1[738] = off_24CA032B0;
  v176 = (void *)a1[753];
  if (v176)
  {
    a1[754] = v176;
    operator delete(v176);
  }
  v177 = (void *)a1[749];
  if (v177)
  {
    a1[750] = v177;
    operator delete(v177);
  }
  a1[738] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 743));
  v178 = (void *)a1[740];
  if (v178)
  {
    a1[741] = v178;
    operator delete(v178);
  }
  a1[720] = off_24CA032B0;
  v179 = (void *)a1[735];
  if (v179)
  {
    a1[736] = v179;
    operator delete(v179);
  }
  v180 = (void *)a1[731];
  if (v180)
  {
    a1[732] = v180;
    operator delete(v180);
  }
  a1[720] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 725));
  v181 = (void *)a1[722];
  if (v181)
  {
    a1[723] = v181;
    operator delete(v181);
  }
  a1[702] = off_24CA032B0;
  v182 = (void *)a1[717];
  if (v182)
  {
    a1[718] = v182;
    operator delete(v182);
  }
  v183 = (void *)a1[713];
  if (v183)
  {
    a1[714] = v183;
    operator delete(v183);
  }
  a1[702] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 707));
  v184 = (void *)a1[704];
  if (v184)
  {
    a1[705] = v184;
    operator delete(v184);
  }
  a1[684] = off_24CA032B0;
  v185 = (void *)a1[699];
  if (v185)
  {
    a1[700] = v185;
    operator delete(v185);
  }
  v186 = (void *)a1[695];
  if (v186)
  {
    a1[696] = v186;
    operator delete(v186);
  }
  a1[684] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 689));
  v187 = (void *)a1[686];
  if (v187)
  {
    a1[687] = v187;
    operator delete(v187);
  }
  a1[666] = off_24CA032B0;
  v188 = (void *)a1[681];
  if (v188)
  {
    a1[682] = v188;
    operator delete(v188);
  }
  v189 = (void *)a1[677];
  if (v189)
  {
    a1[678] = v189;
    operator delete(v189);
  }
  a1[666] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 671));
  v190 = (void *)a1[668];
  if (v190)
  {
    a1[669] = v190;
    operator delete(v190);
  }
  a1[648] = off_24CA032B0;
  v191 = (void *)a1[663];
  if (v191)
  {
    a1[664] = v191;
    operator delete(v191);
  }
  v192 = (void *)a1[659];
  if (v192)
  {
    a1[660] = v192;
    operator delete(v192);
  }
  a1[648] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 653));
  v193 = (void *)a1[650];
  if (v193)
  {
    a1[651] = v193;
    operator delete(v193);
  }
  a1[630] = off_24CA032B0;
  v194 = (void *)a1[645];
  if (v194)
  {
    a1[646] = v194;
    operator delete(v194);
  }
  v195 = (void *)a1[641];
  if (v195)
  {
    a1[642] = v195;
    operator delete(v195);
  }
  a1[630] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 635));
  v196 = (void *)a1[632];
  if (v196)
  {
    a1[633] = v196;
    operator delete(v196);
  }
  a1[612] = off_24CA032B0;
  v197 = (void *)a1[627];
  if (v197)
  {
    a1[628] = v197;
    operator delete(v197);
  }
  v198 = (void *)a1[623];
  if (v198)
  {
    a1[624] = v198;
    operator delete(v198);
  }
  a1[612] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 617));
  v199 = (void *)a1[614];
  if (v199)
  {
    a1[615] = v199;
    operator delete(v199);
  }
  a1[594] = off_24CA032B0;
  v200 = (void *)a1[609];
  if (v200)
  {
    a1[610] = v200;
    operator delete(v200);
  }
  v201 = (void *)a1[605];
  if (v201)
  {
    a1[606] = v201;
    operator delete(v201);
  }
  a1[594] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 599));
  v202 = (void *)a1[596];
  if (v202)
  {
    a1[597] = v202;
    operator delete(v202);
  }
  a1[576] = off_24CA032B0;
  v203 = (void *)a1[591];
  if (v203)
  {
    a1[592] = v203;
    operator delete(v203);
  }
  v204 = (void *)a1[587];
  if (v204)
  {
    a1[588] = v204;
    operator delete(v204);
  }
  a1[576] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 581));
  v205 = (void *)a1[578];
  if (v205)
  {
    a1[579] = v205;
    operator delete(v205);
  }
  a1[558] = off_24CA032B0;
  v206 = (void *)a1[573];
  if (v206)
  {
    a1[574] = v206;
    operator delete(v206);
  }
  v207 = (void *)a1[569];
  if (v207)
  {
    a1[570] = v207;
    operator delete(v207);
  }
  a1[558] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 563));
  v208 = (void *)a1[560];
  if (v208)
  {
    a1[561] = v208;
    operator delete(v208);
  }
  a1[540] = off_24CA032B0;
  v209 = (void *)a1[555];
  if (v209)
  {
    a1[556] = v209;
    operator delete(v209);
  }
  v210 = (void *)a1[551];
  if (v210)
  {
    a1[552] = v210;
    operator delete(v210);
  }
  a1[540] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 545));
  v211 = (void *)a1[542];
  if (v211)
  {
    a1[543] = v211;
    operator delete(v211);
  }
  a1[522] = off_24CA032B0;
  v212 = (void *)a1[537];
  if (v212)
  {
    a1[538] = v212;
    operator delete(v212);
  }
  v213 = (void *)a1[533];
  if (v213)
  {
    a1[534] = v213;
    operator delete(v213);
  }
  a1[522] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 527));
  v214 = (void *)a1[524];
  if (v214)
  {
    a1[525] = v214;
    operator delete(v214);
  }
  a1[504] = off_24CA032B0;
  v215 = (void *)a1[519];
  if (v215)
  {
    a1[520] = v215;
    operator delete(v215);
  }
  v216 = (void *)a1[515];
  if (v216)
  {
    a1[516] = v216;
    operator delete(v216);
  }
  a1[504] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 509));
  v217 = (void *)a1[506];
  if (v217)
  {
    a1[507] = v217;
    operator delete(v217);
  }
  a1[486] = off_24CA032B0;
  v218 = (void *)a1[501];
  if (v218)
  {
    a1[502] = v218;
    operator delete(v218);
  }
  v219 = (void *)a1[497];
  if (v219)
  {
    a1[498] = v219;
    operator delete(v219);
  }
  a1[486] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 491));
  v220 = (void *)a1[488];
  if (v220)
  {
    a1[489] = v220;
    operator delete(v220);
  }
  a1[468] = off_24CA032B0;
  v221 = (void *)a1[483];
  if (v221)
  {
    a1[484] = v221;
    operator delete(v221);
  }
  v222 = (void *)a1[479];
  if (v222)
  {
    a1[480] = v222;
    operator delete(v222);
  }
  a1[468] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 473));
  v223 = (void *)a1[470];
  if (v223)
  {
    a1[471] = v223;
    operator delete(v223);
  }
  a1[450] = off_24CA032B0;
  v224 = (void *)a1[465];
  if (v224)
  {
    a1[466] = v224;
    operator delete(v224);
  }
  v225 = (void *)a1[461];
  if (v225)
  {
    a1[462] = v225;
    operator delete(v225);
  }
  a1[450] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 455));
  v226 = (void *)a1[452];
  if (v226)
  {
    a1[453] = v226;
    operator delete(v226);
  }
  a1[432] = off_24CA032B0;
  v227 = (void *)a1[447];
  if (v227)
  {
    a1[448] = v227;
    operator delete(v227);
  }
  v228 = (void *)a1[443];
  if (v228)
  {
    a1[444] = v228;
    operator delete(v228);
  }
  a1[432] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 437));
  v229 = (void *)a1[434];
  if (v229)
  {
    a1[435] = v229;
    operator delete(v229);
  }
  a1[414] = off_24CA032B0;
  v230 = (void *)a1[429];
  if (v230)
  {
    a1[430] = v230;
    operator delete(v230);
  }
  v231 = (void *)a1[425];
  if (v231)
  {
    a1[426] = v231;
    operator delete(v231);
  }
  a1[414] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 419));
  v232 = (void *)a1[416];
  if (v232)
  {
    a1[417] = v232;
    operator delete(v232);
  }
  a1[396] = off_24CA032B0;
  v233 = (void *)a1[411];
  if (v233)
  {
    a1[412] = v233;
    operator delete(v233);
  }
  v234 = (void *)a1[407];
  if (v234)
  {
    a1[408] = v234;
    operator delete(v234);
  }
  a1[396] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 401));
  v235 = (void *)a1[398];
  if (v235)
  {
    a1[399] = v235;
    operator delete(v235);
  }
  a1[378] = off_24CA032B0;
  v236 = (void *)a1[393];
  if (v236)
  {
    a1[394] = v236;
    operator delete(v236);
  }
  v237 = (void *)a1[389];
  if (v237)
  {
    a1[390] = v237;
    operator delete(v237);
  }
  a1[378] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 383));
  v238 = (void *)a1[380];
  if (v238)
  {
    a1[381] = v238;
    operator delete(v238);
  }
  a1[360] = off_24CA032B0;
  v239 = (void *)a1[375];
  if (v239)
  {
    a1[376] = v239;
    operator delete(v239);
  }
  v240 = (void *)a1[371];
  if (v240)
  {
    a1[372] = v240;
    operator delete(v240);
  }
  a1[360] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 365));
  v241 = (void *)a1[362];
  if (v241)
  {
    a1[363] = v241;
    operator delete(v241);
  }
  a1[342] = off_24CA032B0;
  v242 = (void *)a1[357];
  if (v242)
  {
    a1[358] = v242;
    operator delete(v242);
  }
  v243 = (void *)a1[353];
  if (v243)
  {
    a1[354] = v243;
    operator delete(v243);
  }
  a1[342] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 347));
  v244 = (void *)a1[344];
  if (v244)
  {
    a1[345] = v244;
    operator delete(v244);
  }
  a1[324] = off_24CA032B0;
  v245 = (void *)a1[339];
  if (v245)
  {
    a1[340] = v245;
    operator delete(v245);
  }
  v246 = (void *)a1[335];
  if (v246)
  {
    a1[336] = v246;
    operator delete(v246);
  }
  a1[324] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 329));
  v247 = (void *)a1[326];
  if (v247)
  {
    a1[327] = v247;
    operator delete(v247);
  }
  a1[306] = off_24CA032B0;
  v248 = (void *)a1[321];
  if (v248)
  {
    a1[322] = v248;
    operator delete(v248);
  }
  v249 = (void *)a1[317];
  if (v249)
  {
    a1[318] = v249;
    operator delete(v249);
  }
  a1[306] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 311));
  v250 = (void *)a1[308];
  if (v250)
  {
    a1[309] = v250;
    operator delete(v250);
  }
  a1[288] = off_24CA032B0;
  v251 = (void *)a1[303];
  if (v251)
  {
    a1[304] = v251;
    operator delete(v251);
  }
  v252 = (void *)a1[299];
  if (v252)
  {
    a1[300] = v252;
    operator delete(v252);
  }
  a1[288] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 293));
  v253 = (void *)a1[290];
  if (v253)
  {
    a1[291] = v253;
    operator delete(v253);
  }
  a1[270] = off_24CA032B0;
  v254 = (void *)a1[285];
  if (v254)
  {
    a1[286] = v254;
    operator delete(v254);
  }
  v255 = (void *)a1[281];
  if (v255)
  {
    a1[282] = v255;
    operator delete(v255);
  }
  a1[270] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 275));
  v256 = (void *)a1[272];
  if (v256)
  {
    a1[273] = v256;
    operator delete(v256);
  }
  a1[252] = off_24CA032B0;
  v257 = (void *)a1[267];
  if (v257)
  {
    a1[268] = v257;
    operator delete(v257);
  }
  v258 = (void *)a1[263];
  if (v258)
  {
    a1[264] = v258;
    operator delete(v258);
  }
  a1[252] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 257));
  v259 = (void *)a1[254];
  if (v259)
  {
    a1[255] = v259;
    operator delete(v259);
  }
  a1[234] = off_24CA032B0;
  v260 = (void *)a1[249];
  if (v260)
  {
    a1[250] = v260;
    operator delete(v260);
  }
  v261 = (void *)a1[245];
  if (v261)
  {
    a1[246] = v261;
    operator delete(v261);
  }
  a1[234] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 239));
  v262 = (void *)a1[236];
  if (v262)
  {
    a1[237] = v262;
    operator delete(v262);
  }
  a1[216] = off_24CA032B0;
  v263 = (void *)a1[231];
  if (v263)
  {
    a1[232] = v263;
    operator delete(v263);
  }
  v264 = (void *)a1[227];
  if (v264)
  {
    a1[228] = v264;
    operator delete(v264);
  }
  a1[216] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 221));
  v265 = (void *)a1[218];
  if (v265)
  {
    a1[219] = v265;
    operator delete(v265);
  }
  a1[198] = off_24CA032B0;
  v266 = (void *)a1[213];
  if (v266)
  {
    a1[214] = v266;
    operator delete(v266);
  }
  v267 = (void *)a1[209];
  if (v267)
  {
    a1[210] = v267;
    operator delete(v267);
  }
  a1[198] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 203));
  v268 = (void *)a1[200];
  if (v268)
  {
    a1[201] = v268;
    operator delete(v268);
  }
  a1[180] = off_24CA032B0;
  v269 = (void *)a1[195];
  if (v269)
  {
    a1[196] = v269;
    operator delete(v269);
  }
  v270 = (void *)a1[191];
  if (v270)
  {
    a1[192] = v270;
    operator delete(v270);
  }
  a1[180] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 185));
  v271 = (void *)a1[182];
  if (v271)
  {
    a1[183] = v271;
    operator delete(v271);
  }
  a1[162] = off_24CA032B0;
  v272 = (void *)a1[177];
  if (v272)
  {
    a1[178] = v272;
    operator delete(v272);
  }
  v273 = (void *)a1[173];
  if (v273)
  {
    a1[174] = v273;
    operator delete(v273);
  }
  a1[162] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 167));
  v274 = (void *)a1[164];
  if (v274)
  {
    a1[165] = v274;
    operator delete(v274);
  }
  a1[144] = off_24CA032B0;
  v275 = (void *)a1[159];
  if (v275)
  {
    a1[160] = v275;
    operator delete(v275);
  }
  v276 = (void *)a1[155];
  if (v276)
  {
    a1[156] = v276;
    operator delete(v276);
  }
  a1[144] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 149));
  v277 = (void *)a1[146];
  if (v277)
  {
    a1[147] = v277;
    operator delete(v277);
  }
  a1[126] = off_24CA032B0;
  v278 = (void *)a1[141];
  if (v278)
  {
    a1[142] = v278;
    operator delete(v278);
  }
  v279 = (void *)a1[137];
  if (v279)
  {
    a1[138] = v279;
    operator delete(v279);
  }
  a1[126] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 131));
  v280 = (void *)a1[128];
  if (v280)
  {
    a1[129] = v280;
    operator delete(v280);
  }
  a1[108] = off_24CA032B0;
  v281 = (void *)a1[123];
  if (v281)
  {
    a1[124] = v281;
    operator delete(v281);
  }
  v282 = (void *)a1[119];
  if (v282)
  {
    a1[120] = v282;
    operator delete(v282);
  }
  a1[108] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 113));
  v283 = (void *)a1[110];
  if (v283)
  {
    a1[111] = v283;
    operator delete(v283);
  }
  a1[90] = off_24CA032B0;
  v284 = (void *)a1[105];
  if (v284)
  {
    a1[106] = v284;
    operator delete(v284);
  }
  v285 = (void *)a1[101];
  if (v285)
  {
    a1[102] = v285;
    operator delete(v285);
  }
  a1[90] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 95));
  v286 = (void *)a1[92];
  if (v286)
  {
    a1[93] = v286;
    operator delete(v286);
  }
  a1[72] = off_24CA032B0;
  v287 = (void *)a1[87];
  if (v287)
  {
    a1[88] = v287;
    operator delete(v287);
  }
  v288 = (void *)a1[83];
  if (v288)
  {
    a1[84] = v288;
    operator delete(v288);
  }
  a1[72] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 77));
  v289 = (void *)a1[74];
  if (v289)
  {
    a1[75] = v289;
    operator delete(v289);
  }
  a1[54] = off_24CA032B0;
  v290 = (void *)a1[69];
  if (v290)
  {
    a1[70] = v290;
    operator delete(v290);
  }
  v291 = (void *)a1[65];
  if (v291)
  {
    a1[66] = v291;
    operator delete(v291);
  }
  a1[54] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 59));
  v292 = (void *)a1[56];
  if (v292)
  {
    a1[57] = v292;
    operator delete(v292);
  }
  a1[36] = off_24CA032B0;
  v293 = (void *)a1[51];
  if (v293)
  {
    a1[52] = v293;
    operator delete(v293);
  }
  v294 = (void *)a1[47];
  if (v294)
  {
    a1[48] = v294;
    operator delete(v294);
  }
  a1[36] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 41));
  v295 = (void *)a1[38];
  if (v295)
  {
    a1[39] = v295;
    operator delete(v295);
  }
  a1[18] = off_24CA032B0;
  v296 = (void *)a1[33];
  if (v296)
  {
    a1[34] = v296;
    operator delete(v296);
  }
  v297 = (void *)a1[29];
  if (v297)
  {
    a1[30] = v297;
    operator delete(v297);
  }
  a1[18] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 23));
  v298 = (void *)a1[20];
  if (v298)
  {
    a1[21] = v298;
    operator delete(v298);
  }
  *a1 = off_24CA032B0;
  v299 = (void *)a1[15];
  if (v299)
  {
    a1[16] = v299;
    operator delete(v299);
  }
  v300 = (void *)a1[11];
  if (v300)
  {
    a1[12] = v300;
    operator delete(v300);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v301 = (void *)a1[2];
  if (v301)
  {
    a1[3] = v301;
    operator delete(v301);
  }
  return a1;
}

_QWORD *sub_20F8A5A54(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A5AC4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20F8A5B44(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[1] = 0;
  v2 = (void **)a1[6];
  v3 = a1[7];
  a1[10] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[7];
      v2 = (void **)(a1[6] + 8);
      a1[6] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[9] = v6;
  }
  a1[3] = a1[2];
  a1[12] = a1[11];
  a1[16] = a1[15];
}

void sub_20F8A5BD4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t i;
  uint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v128;

  v3 = a3;
  v4 = a2;
  v7 = *(_BYTE **)(a1 + 88);
  v8 = *(_BYTE **)(a1 + 96);
  v6 = (_QWORD *)(a1 + 88);
  if (v7 == v8)
  {
    v13 = a3 * a2;
    if ((_DWORD)v13)
      sub_20F4F5E74(a1 + 88, v13, qword_2103B8D40);
    *(_DWORD *)(a1 + 112) = v4;
    goto LABEL_148;
  }
  if (!(a3 | a2))
  {
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = v7;
    goto LABEL_148;
  }
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 112);
  if (v9 == a2)
  {
    v11 = v10 * a3;
    v12 = (v8 - v7) >> 3;
    if (v11 <= v12)
    {
      if (v11 < v12)
        *(_QWORD *)(a1 + 96) = &v7[8 * v11];
    }
    else
    {
      sub_20F4F5E74(a1 + 88, v11 - v12, qword_2103B8D40);
    }
    goto LABEL_148;
  }
  if (v10 < a2)
  {
    if (2 * v10 <= a2)
      v14 = a2;
    else
      v14 = 2 * v10;
    v15 = v14 - v10;
    v16 = *(_DWORD *)(a1 + 12);
    if (v16 <= a3)
    {
      v32 = v16 - 1;
      if (v16 == 1)
      {
        v33 = 1;
      }
      else
      {
        do
        {
          sub_20F8A6928((uint64_t)v6, (void *)(*v6 + 8 * v10), v15);
          v10 += v14;
          --v32;
        }
        while (v32);
        v33 = *(_DWORD *)(a1 + 12);
        v8 = *(_BYTE **)(a1 + 96);
      }
      sub_20F8A6928((uint64_t)v6, v8, v15 + (v3 - v33) * v14);
    }
    else
    {
      v17 = a3;
      do
      {
        v18 = *(_DWORD *)(a1 + 8);
        if (v18)
        {
          v19 = *(_DWORD *)(a1 + 112) * v17;
          v20 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v19);
          v21 = 8 * (v18 + v19) - 8 * v19;
          do
          {
            v22 = *v20;
            if (*v20 != -1)
            {
              v23 = *(_QWORD *)(a1 + 56);
              v24 = *(_QWORD *)(a1 + 48);
              v25 = ((v23 - v24) << 6) - 1;
              if (v23 == v24)
                v25 = 0;
              v26 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              if (v25 == v26)
              {
                sub_20EDB36DC(a1 + 40);
                v24 = *(_QWORD *)(a1 + 48);
                v26 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                v22 = *v20;
              }
              *(_QWORD *)(*(_QWORD *)(v24 + ((v26 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v26 & 0x1FF)) = v22;
              ++*(_QWORD *)(a1 + 80);
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
        ++v17;
      }
      while (v17 != v16);
      v3 = a3;
      v34 = *(_QWORD *)(a1 + 88) + 8 * v10 * a3;
      if (v34 != *(_QWORD *)(a1 + 96))
        *(_QWORD *)(a1 + 96) = v34;
      if (a3)
      {
        v35 = a3;
        do
        {
          sub_20F8A6928((uint64_t)v6, (void *)(*v6 + 8 * v10), v15);
          v10 += v14;
          --v35;
        }
        while (v35);
      }
    }
    *(_DWORD *)(a1 + 112) = v14;
    v4 = a2;
    goto LABEL_148;
  }
  if (v9 < a2)
  {
    v27 = v10 * a3;
    if (v27 <= (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v7) >> 3)
      goto LABEL_55;
    v28 = v8 - v7;
    v29 = operator new(8 * v27);
    v30 = &v29[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v8 - v7 - 8) >= 0x58)
    {
      v31 = &v29[v28 & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v8[-(v28 & 0xFFFFFFFFFFFFFFF8)] - v29) >= 0x20)
      {
        v41 = ((unint64_t)(v28 - 8) >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v8[-v42];
        v31 = &v30[-v42];
        v44 = &v29[8 * (v28 >> 3) - 16];
        v45 = (__int128 *)(v8 - 16);
        v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        v8 = v43;
        if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          *(_QWORD *)(a1 + 88) = v31;
          *(_QWORD *)(a1 + 96) = v30;
          *(_QWORD *)(a1 + 104) = &v29[8 * v27];
          v4 = a2;
          if (v7)
            operator delete(v7);
LABEL_55:
          v49 = *(_DWORD *)(a1 + 12);
          v50 = v3 - v49;
          if (v3 < v49)
          {
            v51 = v3;
            v52 = *(_DWORD *)(a1 + 8);
            if (v52)
            {
              v53 = v3;
LABEL_59:
              v54 = *(_DWORD *)(a1 + 112) * v53;
              v55 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v54);
              v56 = 8 * (v52 + v54) - 8 * v54;
              do
              {
                v57 = *v55;
                if (*v55 != -1)
                {
                  v58 = *(_QWORD *)(a1 + 56);
                  v59 = *(_QWORD *)(a1 + 48);
                  v60 = ((v58 - v59) << 6) - 1;
                  if (v58 == v59)
                    v60 = 0;
                  v61 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                  if (v60 == v61)
                  {
                    sub_20EDB36DC(a1 + 40);
                    v59 = *(_QWORD *)(a1 + 48);
                    v61 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
                    v57 = *v55;
                  }
                  *(_QWORD *)(*(_QWORD *)(v59 + ((v61 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v61 & 0x1FF)) = v57;
                  ++*(_QWORD *)(a1 + 80);
                }
                ++v55;
                v56 -= 8;
              }
              while (v56);
              while (++v53 != v49)
              {
                v52 = *(_DWORD *)(a1 + 8);
                if (v52)
                  goto LABEL_59;
              }
            }
            v3 = v51;
            v62 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * v51;
            v4 = a2;
            if (v62 != *(_QWORD *)(a1 + 96))
              *(_QWORD *)(a1 + 96) = v62;
            goto LABEL_148;
          }
LABEL_147:
          sub_20F8A6928((uint64_t)v6, *(void **)(a1 + 96), (*(_DWORD *)(a1 + 112) * v50));
          goto LABEL_148;
        }
      }
    }
    else
    {
      v31 = &v29[v28 & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v48 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v31 - 1) = v48;
      v31 -= 8;
    }
    while (v8 != v7);
    goto LABEL_53;
  }
  if (v9 <= a2)
    goto LABEL_148;
  v36 = v10 * a3;
  if (v36 > (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v7) >> 3)
  {
    v37 = v8 - v7;
    v38 = (char *)operator new(8 * v36);
    v39 = &v38[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v8 - v7 - 8) >= 0x58)
    {
      v40 = &v38[v37 & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v8 - v40) >= 0x20)
      {
        v63 = ((unint64_t)(v37 - 8) >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v65 = &v8[-v64];
        v40 = &v39[-v64];
        v66 = &v38[8 * (v37 >> 3) - 16];
        v67 = (__int128 *)(v8 - 16);
        v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *v67;
          *((_OWORD *)v66 - 1) = *(v67 - 1);
          *(_OWORD *)v66 = v69;
          v66 -= 32;
          v67 -= 2;
          v68 -= 4;
        }
        while (v68);
        v8 = v65;
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_75:
          *(_QWORD *)(a1 + 88) = v40;
          *(_QWORD *)(a1 + 96) = v39;
          *(_QWORD *)(a1 + 104) = &v38[8 * v36];
          v4 = a2;
          if (v7)
            operator delete(v7);
          goto LABEL_77;
        }
      }
    }
    else
    {
      v40 = &v38[v37 & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v70 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v40 - 1) = v70;
      v40 -= 8;
    }
    while (v8 != v7);
    goto LABEL_75;
  }
LABEL_77:
  v71 = *(unsigned int *)(a1 + 12);
  if (v71 <= v3)
  {
    if (!(_DWORD)v71)
    {
      v122 = 0;
LABEL_146:
      v50 = v3 - v122;
      goto LABEL_147;
    }
    v102 = 0;
    v103 = v4;
    v126 = 8 * v4 - 8;
    v104 = -8 * v4;
    while (1)
    {
      v105 = *(_QWORD *)(a1 + 88);
      v106 = *(_DWORD *)(a1 + 112) * v102;
      v107 = (_QWORD *)(v105 + 8 * v106);
      v108 = &v107[v103];
      if (v4 && *v107 == -1)
      {
        v113 = v126;
        while (v113)
        {
          v109 = v107 + 1;
          v114 = v107[1];
          v113 -= 8;
          ++v107;
          if (v114 != -1)
            goto LABEL_124;
        }
      }
      else
      {
        v109 = (uint64_t *)(v105 + 8 * v106);
LABEL_124:
        if (v109 != v108)
        {
          v110 = 0;
LABEL_126:
          ++v110;
          v111 = v109 + 1;
          while (v111 != v108)
          {
            v112 = *v111++;
            if (v112 != -1)
            {
              v109 = v111 - 1;
              goto LABEL_126;
            }
          }
          goto LABEL_135;
        }
      }
      v110 = 0;
LABEL_135:
      v115 = *(_DWORD *)(a1 + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v102) = v110;
      if (v108 != (uint64_t *)(v105 + 8 * (v106 + v115)))
      {
        v116 = v104 + 8 * (v115 + v106) - 8 * v106;
        do
        {
          v117 = *v108;
          if (*v108 != -1)
          {
            v118 = *(_QWORD *)(a1 + 56);
            v119 = *(_QWORD *)(a1 + 48);
            v120 = ((v118 - v119) << 6) - 1;
            if (v118 == v119)
              v120 = 0;
            v121 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v120 == v121)
            {
              sub_20EDB36DC(a1 + 40);
              v119 = *(_QWORD *)(a1 + 48);
              v121 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v117 = *v108;
            }
            *(_QWORD *)(*(_QWORD *)(v119 + ((v121 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v121 & 0x1FF)) = v117;
            ++*(_QWORD *)(a1 + 80);
          }
          ++v108;
          v116 -= 8;
        }
        while (v116);
      }
      ++v102;
      v4 = a2;
      if (v102 == v71)
      {
        v122 = *(_DWORD *)(a1 + 12);
        goto LABEL_146;
      }
    }
  }
  v72 = v3;
  v73 = *(_DWORD *)(a1 + 8);
  if (v73)
  {
    v74 = v3;
LABEL_81:
    v75 = *(_DWORD *)(a1 + 112) * v74;
    v76 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8 * v75);
    v77 = 8 * (v73 + v75) - 8 * v75;
    do
    {
      v78 = *v76;
      if (*v76 != -1)
      {
        v79 = *(_QWORD *)(a1 + 56);
        v80 = *(_QWORD *)(a1 + 48);
        v81 = ((v79 - v80) << 6) - 1;
        if (v79 == v80)
          v81 = 0;
        v82 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
        if (v81 == v82)
        {
          sub_20EDB36DC(a1 + 40);
          v80 = *(_QWORD *)(a1 + 48);
          v82 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          v78 = *v76;
        }
        *(_QWORD *)(*(_QWORD *)(v80 + ((v82 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v82 & 0x1FF)) = v78;
        ++*(_QWORD *)(a1 + 80);
      }
      ++v76;
      v77 -= 8;
    }
    while (v77);
    while (++v74 != (_DWORD)v71)
    {
      v73 = *(_DWORD *)(a1 + 8);
      if (v73)
        goto LABEL_81;
    }
  }
  v3 = v72;
  v83 = *(_QWORD *)(a1 + 88) + 8 * *(_DWORD *)(a1 + 112) * v72;
  v4 = a2;
  if (v83 != *(_QWORD *)(a1 + 96))
    *(_QWORD *)(a1 + 96) = v83;
  if (v72)
  {
    for (i = 0; i != v72; ++i)
    {
      v85 = *(_QWORD *)(a1 + 88);
      v86 = *(_DWORD *)(a1 + 112) * i;
      v87 = (_QWORD *)(v85 + 8 * v86);
      v88 = &v87[a2];
      if (v4 && *v87 == -1)
      {
        v93 = 8 * a2 - 8;
        while (v93)
        {
          v89 = v87 + 1;
          v94 = v87[1];
          v93 -= 8;
          ++v87;
          if (v94 != -1)
            goto LABEL_98;
        }
      }
      else
      {
        v89 = (uint64_t *)(v85 + 8 * v86);
LABEL_98:
        if (v89 != v88)
        {
          v90 = 0;
LABEL_100:
          ++v90;
          v91 = v89 + 1;
          while (v91 != v88)
          {
            v92 = *v91++;
            if (v92 != -1)
            {
              v89 = v91 - 1;
              goto LABEL_100;
            }
          }
          goto LABEL_109;
        }
      }
      v90 = 0;
LABEL_109:
      v95 = *(_DWORD *)(a1 + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * i) = v90;
      if (v88 != (uint64_t *)(v85 + 8 * (v86 + v95)))
      {
        v96 = -8 * a2 + 8 * (v95 + v86) - 8 * v86;
        do
        {
          v97 = *v88;
          if (*v88 != -1)
          {
            v98 = *(_QWORD *)(a1 + 56);
            v99 = *(_QWORD *)(a1 + 48);
            v100 = ((v98 - v99) << 6) - 1;
            if (v98 == v99)
              v100 = 0;
            v101 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
            if (v100 == v101)
            {
              sub_20EDB36DC(a1 + 40);
              v99 = *(_QWORD *)(a1 + 48);
              v101 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
              v97 = *v88;
            }
            *(_QWORD *)(*(_QWORD *)(v99 + ((v101 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v101 & 0x1FF)) = v97;
            ++*(_QWORD *)(a1 + 80);
          }
          ++v88;
          v96 -= 8;
        }
        while (v96);
      }
      v4 = a2;
    }
  }
LABEL_148:
  v123 = *(_QWORD *)(a1 + 120);
  v124 = (*(_QWORD *)(a1 + 128) - v123) >> 3;
  if (v3 != v124)
  {
    v128 = 0;
    if (v3 <= v124)
    {
      if (v3 < v124)
        *(_QWORD *)(a1 + 128) = v123 + 8 * v3;
    }
    else
    {
      sub_20F4F5E74(a1 + 120, v3 - v124, &v128);
    }
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
}

BOOL sub_20F8A6528(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A664C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A667C()
{
  return 3;
}

uint64_t sub_20F8A6684()
{
  return 3;
}

uint64_t sub_20F8A668C(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  __int128 v14;
  int8x16_t v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  __int8 *v23;
  int8x16_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v28 = 8 * (v8 + v6) - 8 * v6 - 8;
        v29 = v5 + 8 * v6;
        while (v28)
        {
          v7 = (uint64_t *)(v29 + 8);
          ++v9;
          v30 = *(_QWORD *)(v29 + 8);
          v28 -= 8;
          v29 += 8;
          if (v30 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v19 = *(_QWORD *)(v11 + 64);
            v18 = *(int8x16_t *)(v11 + 32);
            v15 = *(int8x16_t *)(v11 + 48);
            v13 = *(int8x16_t *)v11;
            v17 = *(int8x16_t *)(v11 + 16);
            v20 = vextq_s8(v15, v15, 8uLL).u64[0];
            v16 = vextq_s8(v18, v18, 8uLL).u64[0];
            *(_QWORD *)&v14 = vextq_s8(v17, v17, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13 = *(int8x16_t *)v11;
            v14 = *(_OWORD *)(v11 + 24);
            v15 = *(int8x16_t *)(v11 + 48);
            v16 = *(_QWORD *)(v11 + 40);
            v17.i64[0] = *(_QWORD *)(v11 + 16);
            v18.i64[0] = *(_QWORD *)(v11 + 32);
            v19 = *(_QWORD *)(v11 + 64);
            v20 = vextq_s8(v15, v15, 8uLL).u64[0];
          }
          v21 = *((unsigned int *)a2 + 4);
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          *((_QWORD *)&v14 + 1) = v18.i64[0];
          v15.i64[1] = v20;
          v22 = (int8x16_t *)(v12 + 8 * (3 * v9 + (_DWORD)a3 + v21 * (3 * i + HIDWORD(a3))));
          v22[1].i64[0] = v17.i64[0];
          *v22 = v13;
          v23 = &v22->i8[8 * v21];
          *((_QWORD *)v23 + 2) = v16;
          *(_OWORD *)v23 = v14;
          v24 = &v22[v21];
          v24[1].i64[0] = v19;
          *v24 = v15;
          v25 = v7 + 1;
          while (v25 != v10)
          {
            ++v9;
            v27 = *v25++;
            v26 = v27;
            if (v27 != -1)
            {
              v7 = v25 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v26;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8A6800(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v20 = 8 * (v8 + v6) - 8 * v6 - 8;
        v21 = v5 + 8 * v6;
        while (v20)
        {
          v7 = (uint64_t *)(v21 + 8);
          ++v9;
          v22 = *(_QWORD *)(v21 + 8);
          v20 -= 8;
          v21 += 8;
          if (v22 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          if (i == v9)
          {
            v11 = *v7;
LABEL_18:
            v17 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
            v18 = *a2 + 8 * (3 * i + a3);
            *(_QWORD *)&v19 = *v17;
            if (v17 == (_QWORD *)*a2)
            {
              *((_QWORD *)&v19 + 1) = v17[4];
              *(_QWORD *)(v18 + 16) = v17[8];
              *(_OWORD *)v18 = v19;
              v3 = *(unsigned int *)(result + 12);
            }
            else
            {
              *(_QWORD *)v18 = v19;
              *(_QWORD *)(v18 + 8) = v17[4];
              *(_QWORD *)(v18 + 16) = v17[8];
            }
          }
          else
          {
            v12 = v9 + 1;
            v13 = v7 + 1;
            while (v13 != v10)
            {
              v14 = *v13++;
              v11 = v14;
              v15 = v12++;
              if (v14 != -1 && i == v15)
                goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20F8A6928(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64x2_t v52;
  int64x2_t *v53;
  unint64_t v54;

  if (!a3)
    return;
  v6 = *(_QWORD *)a1;
  v7 = *(char **)(a1 + 8);
  v8 = (uint64_t)a2 - *(_QWORD *)a1;
  v9 = (unint64_t *)(*(_QWORD *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8));
  v10 = *(_QWORD *)(a1 + 16);
  if (a3 <= (v10 - (uint64_t)v7) >> 3)
  {
    v15 = v8 >> 3;
    v16 = (v7 - (char *)v9) >> 3;
    v17 = 8 * a3;
    if (a3 <= v16)
    {
      v18 = *(unint64_t **)(a1 + 8);
      v16 = a3;
    }
    else
    {
      memset(*(void **)(a1 + 8), 255, ((v17 - (v7 - (char *)v9) - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      v18 = (unint64_t *)&v7[8 * (a3 - v16)];
      *(_QWORD *)(a1 + 8) = v18;
      if (v7 == (char *)v9)
        return;
    }
    v19 = (char *)v18 - (char *)&v9[(unint64_t)v17 / 8];
    v20 = v19 >> 3;
    v21 = (char *)&v18[v17 / 0xFFFFFFFFFFFFFFF8];
    v22 = v18;
    if (&v18[v17 / 0xFFFFFFFFFFFFFFF8] < (unint64_t *)v7)
    {
      v23 = (v8 & 0xFFFFFFFFFFFFFFF8) + v19;
      v24 = v23 + v6 + 8;
      if ((unint64_t)v7 > v24)
        v24 = (unint64_t)v7;
      v25 = v24 + ~v6 - v23;
      if (v25 < 0x58)
      {
        v22 = v18;
        do
        {
LABEL_39:
          v47 = *(_QWORD *)v21;
          v21 += 8;
          *v22++ = v47;
        }
        while (v21 < v7);
        goto LABEL_40;
      }
      v22 = v18;
      if ((unint64_t)&v9[(unint64_t)v17 / 8] - (v8 & 0xFFFFFFFFFFFFFFF8) - v6 < 0x20)
        goto LABEL_39;
      v41 = (v25 >> 3) + 1;
      v42 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      v21 += v42 * 8;
      v22 = &v18[v42];
      v43 = v18 + 2;
      v44 = (__int128 *)(8 * v20 + 8 * v15 + v6 + 16);
      v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v46 = *v44;
        *(v43 - 1) = *(v44 - 1);
        *v43 = v46;
        v43 += 2;
        v44 += 2;
        v45 -= 4;
      }
      while (v45);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_39;
    }
LABEL_40:
    *(_QWORD *)(a1 + 8) = v22;
    if (v18 != &v9[(unint64_t)v17 / 8])
      memmove(&v18[-v20], v9, v19);
    v48 = qword_2103B8D40;
    if (v9 <= (unint64_t *)qword_2103B8D40)
    {
      if (*(_QWORD *)(a1 + 8) <= (unint64_t)qword_2103B8D40)
        v49 = 0;
      else
        v49 = a3;
      v48 = &qword_2103B8D40[v49];
    }
    v50 = *v48;
    if (v16 >= 4)
    {
      v9 += v16 & 0xFFFFFFFFFFFFFFFCLL;
      v51 = v16 & 3;
      v52 = vdupq_n_s64(v50);
      v53 = (int64x2_t *)(v6 + 8 * v15 + 16);
      v54 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v53[-1] = v52;
        *v53 = v52;
        v53 += 2;
        v54 -= 4;
      }
      while (v54);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFFCLL))
        return;
    }
    else
    {
      v51 = v16;
    }
    do
    {
      *v9++ = v50;
      --v51;
    }
    while (v51);
    return;
  }
  v11 = a3 + ((uint64_t)&v7[-v6] >> 3);
  if (v11 >> 61)
    sub_20E867F44();
  v12 = v10 - v6;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_20E877A38();
    v14 = operator new(8 * v13);
  }
  else
  {
    v14 = 0;
  }
  v26 = 8 * a3;
  v27 = &v14[8 * (v8 >> 3)];
  memset(v27, 255, v26);
  if ((void *)v6 == a2)
  {
    v28 = &v14[8 * (v8 >> 3)];
  }
  else
  {
    if ((unint64_t)(v8 - 8) >= 0x68)
    {
      v29 = v9;
      v28 = &v14[8 * (v8 >> 3)];
      if ((v8 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v14[v8 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v30 = ((unint64_t)(v8 - 8) >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v9[v31 / 0xFFFFFFFFFFFFFFF8];
        v28 = &v27[-v31];
        v32 = 8 * (v8 >> 3) - 16;
        v33 = &v14[v32];
        v34 = (__int128 *)(v6 + v32);
        v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *v34;
          *(v33 - 1) = *(v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 2;
          v35 -= 4;
        }
        while (v35);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
    }
    else
    {
      v29 = v9;
      v28 = &v14[8 * (v8 >> 3)];
    }
    do
    {
      v37 = *--v29;
      *((_QWORD *)v28 - 1) = v37;
      v28 -= 8;
    }
    while (v29 != (unint64_t *)v6);
  }
LABEL_31:
  v38 = &v27[v26];
  v39 = &v14[8 * v13];
  v40 = v7 - (char *)v9;
  if (v40)
    memmove(v38, v9, v40);
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = &v38[v40];
  *(_QWORD *)(a1 + 16) = v39;
  if (v6)
    operator delete((void *)v6);
}

_QWORD *sub_20F8A6CB8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A6D28(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A6DA8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A6ED0(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A6EF8()
{
  return 4;
}

uint64_t sub_20F8A6F00()
{
  return 3;
}

uint64_t sub_20F8A6F08(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v26 = 8 * (v8 + v6) - 8 * v6 - 8;
        v27 = v5 + 8 * v6;
        while (v26)
        {
          v7 = (uint64_t *)(v27 + 8);
          ++v9;
          v28 = *(_QWORD *)(v27 + 8);
          v26 -= 8;
          v27 += 8;
          if (v28 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v18 = v11[4];
            v17 = v11[5];
            v16 = v11[2];
            v15 = v11[3];
            v14 = *v11;
            v13 = v11[1];
          }
          else
          {
LABEL_10:
            v14 = *v11;
            v13 = v11[1];
            v16 = v11[2];
            v15 = v11[3];
            v18 = v11[4];
            v17 = v11[5];
          }
          v19 = *(unsigned int *)(a2 + 16);
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v20 = (int8x16_t *)((char *)&v12[2 * v9] + 8 * (_DWORD)a3 + 8 * v19 * (3 * i + HIDWORD(a3)));
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          *v20 = v14;
          v20[1] = v13;
          v21 = (int8x16_t *)((char *)v20 + 8 * v19);
          *v21 = v16;
          v21[1] = v15;
          v22 = &v20[v19];
          *v22 = v18;
          v22[1] = v17;
          v23 = v7 + 1;
          while (v23 != v10)
          {
            ++v9;
            v25 = *v23++;
            v24 = v25;
            if (v25 != -1)
            {
              v7 = v23 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v24);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A7070(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A70E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A7160(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A7284(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A72AC()
{
  return 1;
}

uint64_t sub_20F8A72B4()
{
  return 3;
}

uint64_t sub_20F8A72BC(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v21 = 8 * (v8 + v6) - 8 * v6 - 8;
        v22 = v5 + 8 * v6;
        while (v21)
        {
          v7 = (uint64_t *)(v22 + 8);
          ++v9;
          v23 = *(_QWORD *)(v22 + 8);
          v21 -= 8;
          v22 += 8;
          if (v23 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v15 = *(_QWORD *)(v11 + 16);
            v13 = *(int8x16_t *)v11;
            v14 = vextq_s8(v13, v13, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13.i64[0] = *(_QWORD *)v11;
            v14 = *(_QWORD *)(v11 + 8);
            v15 = *(_QWORD *)(v11 + 16);
          }
          v16 = *((unsigned int *)a2 + 4);
          v17 = (_QWORD *)(v12 + 8 * (v9 + (_DWORD)a3 + v16 * (3 * i + HIDWORD(a3))));
          *v17 = v13.i64[0];
          v17[v16] = v14;
          v17[2 * v16] = v15;
          v18 = v7 + 1;
          while (v18 != v10)
          {
            ++v9;
            v20 = *v18++;
            v19 = v20;
            if (v20 != -1)
            {
              v7 = v18 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v19;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A73EC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A745C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A74DC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A7604(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A7634()
{
  return 6;
}

uint64_t sub_20F8A763C()
{
  return 3;
}

uint64_t sub_20F8A7644(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v32 = 8 * (v8 + v6) - 8 * v6 - 8;
        v33 = v5 + 8 * v6;
        while (v32)
        {
          v7 = (uint64_t *)(v33 + 8);
          ++v9;
          v34 = *(_QWORD *)(v33 + 8);
          v32 -= 8;
          v33 += 8;
          if (v34 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v17 = v11[7];
            v19 = v11[8];
            v23 = v11[5];
            v18 = v11[6];
            v15 = v11[3];
            v24 = v11[4];
            v13 = v11[1];
            v16 = v11[2];
            v20 = vextq_s8(v19, v19, 8uLL).u64[0];
            v21 = vextq_s8(v17, v17, 8uLL).u64[0];
            v22 = vextq_s8(v18, v18, 8uLL).u64[0];
            v14 = *v11;
          }
          else
          {
LABEL_10:
            v14 = *v11;
            v13 = v11[1];
            v16 = v11[2];
            v15 = v11[3];
            v18 = v11[6];
            v17 = v11[7];
            v19 = v11[8];
            v20 = vextq_s8(v19, v19, 8uLL).u64[0];
            v21 = vextq_s8(v17, v17, 8uLL).u64[0];
            v22 = vextq_s8(v18, v18, 8uLL).u64[0];
            v24 = v11[4];
            v23 = v11[5];
          }
          v25 = *(unsigned int *)(a2 + 16);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v26 = (int8x16_t *)((char *)&v12[3 * v9] + 8 * (_DWORD)a3 + 8 * v25 * (3 * i + HIDWORD(a3)));
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v19.i64[1] = v20;
          v17.i64[1] = v21;
          v18.i64[1] = v22;
          *v26 = v14;
          v26[1] = v13;
          v26[2] = v16;
          v27 = (int8x16_t *)((char *)v26 + 8 * v25);
          *v27 = v15;
          v27[1] = v24;
          v27[2] = v23;
          v28 = &v26[v25];
          *v28 = v18;
          v28[1] = v17;
          v28[2] = v19;
          v29 = v7 + 1;
          while (v29 != v10)
          {
            ++v9;
            v31 = *v29++;
            v30 = v31;
            if (v31 != -1)
            {
              v7 = v29 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v30);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A77F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A7860(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A78E0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A7A08(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A7A38()
{
  return 9;
}

uint64_t sub_20F8A7A40()
{
  return 3;
}

uint64_t sub_20F8A7A48(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t *v39;
  __int8 *v40;
  int8x16_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v45 = 8 * (v8 + v6) - 8 * v6 - 8;
        v46 = v5 + 8 * v6;
        while (v45)
        {
          v7 = (uint64_t *)(v46 + 8);
          ++v9;
          v47 = *(_QWORD *)(v46 + 8);
          v45 -= 8;
          v46 += 8;
          if (v47 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v22 = *(int8x16_t *)(v11 + 176);
            v21 = *(int8x16_t *)(v11 + 192);
            v20 = *(int8x16_t *)(v11 + 144);
            v19 = *(int8x16_t *)(v11 + 160);
            v24 = *(int8x16_t *)(v11 + 112);
            v23 = *(int8x16_t *)(v11 + 128);
            v26 = *(int8x16_t *)(v11 + 80);
            v25 = *(int8x16_t *)(v11 + 96);
            v30 = *(int8x16_t *)(v11 + 48);
            v36 = *(int8x16_t *)(v11 + 64);
            v27 = vextq_s8(v21, v21, 8uLL).u64[0];
            v28 = vextq_s8(v22, v22, 8uLL).u64[0];
            v29 = vextq_s8(v19, v19, 8uLL).u64[0];
            v32 = vextq_s8(v20, v20, 8uLL).u64[0];
            v33 = vextq_s8(v23, v23, 8uLL).u64[0];
            *(_QWORD *)&v18 = vextq_s8(v24, v24, 8uLL).u64[0];
            *(_QWORD *)&v17 = vextq_s8(v25, v25, 8uLL).u64[0];
            *(_QWORD *)&v16 = vextq_s8(v26, v26, 8uLL).u64[0];
            v13 = *(int8x16_t *)(v11 + 16);
            v31 = *(int8x16_t *)(v11 + 32);
            *(_QWORD *)&v15 = vextq_s8(v36, v36, 8uLL).u64[0];
            v34 = vextq_s8(v30, v30, 8uLL).u64[0];
            v35 = vextq_s8(v31, v31, 8uLL).u64[0];
            v14 = *(int8x16_t *)v11;
          }
          else
          {
LABEL_10:
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v15 = *(_OWORD *)(v11 + 72);
            v16 = *(_OWORD *)(v11 + 88);
            v17 = *(_OWORD *)(v11 + 104);
            v18 = *(_OWORD *)(v11 + 120);
            v20 = *(int8x16_t *)(v11 + 144);
            v19 = *(int8x16_t *)(v11 + 160);
            v22 = *(int8x16_t *)(v11 + 176);
            v21 = *(int8x16_t *)(v11 + 192);
            v23.i64[0] = *(_QWORD *)(v11 + 128);
            v24.i64[0] = *(_QWORD *)(v11 + 112);
            v25.i64[0] = *(_QWORD *)(v11 + 96);
            v26.i64[0] = *(_QWORD *)(v11 + 80);
            v27 = vextq_s8(v21, v21, 8uLL).u64[0];
            v28 = vextq_s8(v22, v22, 8uLL).u64[0];
            v29 = vextq_s8(v19, v19, 8uLL).u64[0];
            v31 = *(int8x16_t *)(v11 + 32);
            v30 = *(int8x16_t *)(v11 + 48);
            v32 = vextq_s8(v20, v20, 8uLL).u64[0];
            v33 = *(_QWORD *)(v11 + 136);
            v34 = vextq_s8(v30, v30, 8uLL).u64[0];
            v35 = vextq_s8(v31, v31, 8uLL).u64[0];
            v36.i64[0] = *(_QWORD *)(v11 + 64);
          }
          v37 = *(_QWORD *)(v11 + 208);
          v38 = *((unsigned int *)a2 + 4);
          v30.i64[1] = v34;
          v31.i64[1] = v35;
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v39 = (int8x16_t *)(v12 + 8 * (9 * v9 + (_DWORD)a3 + v38 * (3 * i + HIDWORD(a3))));
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          *((_QWORD *)&v18 + 1) = v23.i64[0];
          *((_QWORD *)&v17 + 1) = v24.i64[0];
          *((_QWORD *)&v16 + 1) = v25.i64[0];
          *((_QWORD *)&v15 + 1) = v26.i64[0];
          v21.i64[1] = v27;
          v22.i64[1] = v28;
          v19.i64[1] = v29;
          v20.i64[1] = v32;
          *v39 = v14;
          v39[1] = v13;
          v39[4].i64[0] = v36.i64[0];
          v39[2] = v31;
          v39[3] = v30;
          v40 = &v39->i8[8 * v38];
          *(_OWORD *)v40 = v15;
          *((_OWORD *)v40 + 1) = v16;
          *((_QWORD *)v40 + 8) = v33;
          *((_OWORD *)v40 + 2) = v17;
          *((_OWORD *)v40 + 3) = v18;
          v41 = &v39[v38];
          *v41 = v20;
          v41[1] = v19;
          v41[4].i64[0] = v37;
          v42 = v7 + 1;
          v41[2] = v22;
          v41[3] = v21;
          while (v42 != v10)
          {
            ++v9;
            v44 = *v42++;
            v43 = v44;
            if (v44 != -1)
            {
              v7 = v42 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v43;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A7C68(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A7CD8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A7D58(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A7E80(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A7EA8()
{
  return 3;
}

uint64_t sub_20F8A7EB0()
{
  return 4;
}

uint64_t sub_20F8A7EB8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v32 = 8 * (v8 + v6) - 8 * v6 - 8;
        v33 = v5 + 8 * v6;
        while (v32)
        {
          v7 = (uint64_t *)(v33 + 8);
          ++v9;
          v34 = *(_QWORD *)(v33 + 8);
          v32 -= 8;
          v33 += 8;
          if (v34 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v17 = *(int8x16_t *)(v11 + 64);
            v21 = *(int8x16_t *)(v11 + 80);
            v23 = *(int8x16_t *)(v11 + 32);
            v18 = *(int8x16_t *)(v11 + 48);
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v19 = vextq_s8(v21, v21, 8uLL).u64[0];
            v20.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
            v22 = vextq_s8(v18, v18, 8uLL).u64[0];
            v15 = vextq_s8(v23, v23, 8uLL).u64[0];
            v16.i64[0] = vextq_s8(v13, v13, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13.i64[0] = *(_QWORD *)(v11 + 16);
            v14 = *(int8x16_t *)v11;
            v15 = *(_QWORD *)(v11 + 40);
            v16 = *(int8x16_t *)(v11 + 24);
            v17.i64[0] = *(_QWORD *)(v11 + 64);
            v18 = *(int8x16_t *)(v11 + 48);
            v19 = *(_QWORD *)(v11 + 88);
            v20 = *(int8x16_t *)(v11 + 72);
            v21.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
            v22 = vextq_s8(v18, v18, 8uLL).u64[0];
            v23.i64[0] = vextq_s8(v16, v16, 8uLL).u64[0];
          }
          v24 = *((unsigned int *)a2 + 4);
          v25 = (int8x16_t *)(v12 + 8 * (3 * v9 + (_DWORD)a3 + v24 * (HIDWORD(a3) + 4 * i)));
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v16.i64[1] = v23.i64[0];
          v18.i64[1] = v22;
          v20.i64[1] = v21.i64[0];
          v25[1].i64[0] = v13.i64[0];
          *v25 = v14;
          v26 = (int8x16_t *)((char *)v25 + 8 * v24);
          v26[1].i64[0] = v15;
          *v26 = v16;
          v27 = &v25[v24];
          v27[1].i64[0] = v17.i64[0];
          *v27 = v18;
          v28 = (int8x16_t *)((char *)v25 + 24 * v24);
          v28[1].i64[0] = v19;
          *v28 = v20;
          v29 = v7 + 1;
          while (v29 != v10)
          {
            ++v9;
            v31 = *v29++;
            v30 = v31;
            if (v31 != -1)
            {
              v7 = v29 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v30;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A8054(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A80C4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A8144(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (16 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A8268(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 7) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A8280()
{
  return 4;
}

uint64_t sub_20F8A8288()
{
  return 4;
}

uint64_t sub_20F8A8290(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v29 = 8 * (v8 + v6) - 8 * v6 - 8;
        v30 = v5 + 8 * v6;
        while (v29)
        {
          v7 = (uint64_t *)(v30 + 8);
          ++v9;
          v31 = *(_QWORD *)(v30 + 8);
          v29 -= 8;
          v30 += 8;
          if (v31 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(__int128 **)a2;
          if (v11 == *(__int128 **)a2)
          {
LABEL_11:
            v20 = v11[6];
            v19 = v11[7];
            v18 = v11[4];
            v17 = v11[5];
            v16 = v11[2];
            v15 = v11[3];
            v14 = *v11;
            v13 = v11[1];
          }
          else
          {
LABEL_10:
            v14 = *v11;
            v13 = v11[1];
            v16 = v11[2];
            v15 = v11[3];
            v18 = v11[4];
            v17 = v11[5];
            v20 = v11[6];
            v19 = v11[7];
          }
          v21 = *(unsigned int *)(a2 + 16);
          v22 = (__int128 *)((char *)&v12[2 * v9] + 8 * (_DWORD)a3 + 8 * v21 * (HIDWORD(a3) + 4 * i));
          *v22 = v14;
          v22[1] = v13;
          v23 = (_OWORD *)((char *)v22 + 8 * v21);
          *v23 = v16;
          v23[1] = v15;
          v24 = &v22[v21];
          *v24 = v18;
          v24[1] = v17;
          v25 = (_OWORD *)((char *)v22 + 24 * v21);
          *v25 = v20;
          v25[1] = v19;
          v26 = v7 + 1;
          while (v26 != v10)
          {
            ++v9;
            v28 = *v26++;
            v27 = v28;
            if (v28 != -1)
            {
              v7 = v26 - 1;
              v11 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * v27);
              v12 = *(__int128 **)a2;
              if (v11 != *(__int128 **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8A83D4(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v21 = 8 * (v8 + v6) - 8 * v6 - 8;
        v22 = v5 + 8 * v6;
        while (v21)
        {
          v7 = (uint64_t *)(v22 + 8);
          ++v9;
          v23 = *(_QWORD *)(v22 + 8);
          v21 -= 8;
          v22 += 8;
          if (v23 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          if (i == v9)
          {
            v11 = *v7;
LABEL_18:
            v17 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
            v18 = *a2 + 8 * (a3 + 4 * i);
            *(_QWORD *)&v19 = *v17;
            if (v17 == (_QWORD *)*a2)
            {
              *(_QWORD *)&v20 = v17[10];
              *((_QWORD *)&v19 + 1) = v17[5];
              *((_QWORD *)&v20 + 1) = v17[15];
              *(_OWORD *)v18 = v19;
              *(_OWORD *)(v18 + 16) = v20;
              v3 = *(unsigned int *)(result + 12);
            }
            else
            {
              *(_QWORD *)v18 = v19;
              *(_QWORD *)(v18 + 8) = v17[5];
              *(_QWORD *)(v18 + 16) = v17[10];
              *(_QWORD *)(v18 + 24) = v17[15];
            }
          }
          else
          {
            v12 = v9 + 1;
            v13 = v7 + 1;
            while (v13 != v10)
            {
              v14 = *v13++;
              v11 = v14;
              v15 = v12++;
              if (v14 != -1 && i == v15)
                goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A84FC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A856C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A85EC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A8710(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A8728()
{
  return 1;
}

uint64_t sub_20F8A8730()
{
  return 4;
}

uint64_t sub_20F8A8738(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v20 = 8 * (v8 + v6) - 8 * v6 - 8;
        v21 = v5 + 8 * v6;
        while (v20)
        {
          v7 = (uint64_t *)(v21 + 8);
          ++v9;
          v22 = *(_QWORD *)(v21 + 8);
          v20 -= 8;
          v21 += 8;
          if (v22 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v13 = *v11;
            v14 = v11[1];
          }
          else
          {
LABEL_10:
            v13 = *v11;
            v14 = v11[1];
          }
          v15 = *(unsigned int *)(a2 + 16);
          v16 = &v12->i64[v9 + (_DWORD)a3 + v15 * (HIDWORD(a3) + 4 * i)];
          *v16 = v13.i64[0];
          v16[v15] = vextq_s8(v13, v13, 8uLL).u64[0];
          v16[2 * v15] = v14.i64[0];
          v16[3 * v15] = vextq_s8(v14, v14, 8uLL).u64[0];
          v17 = v7 + 1;
          while (v17 != v10)
          {
            ++v9;
            v19 = *v17++;
            v18 = v19;
            if (v19 != -1)
            {
              v7 = v17 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v18);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A8878(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A88E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A8968(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A8A90(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A8AB8()
{
  return 6;
}

uint64_t sub_20F8A8AC0()
{
  return 4;
}

uint64_t sub_20F8A8AC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v33 = 8 * (v8 + v6) - 8 * v6 - 8;
        v34 = v5 + 8 * v6;
        while (v33)
        {
          v7 = (uint64_t *)(v34 + 8);
          ++v9;
          v35 = *(_QWORD *)(v34 + 8);
          v33 -= 8;
          v34 += 8;
          if (v35 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v22 = v11[10];
            v21 = v11[11];
            v20 = v11[8];
            v19 = v11[9];
            v18 = v11[6];
            v17 = v11[7];
            v16 = v11[4];
            v15 = v11[5];
            v14 = v11[2];
            v13 = v11[3];
          }
          else
          {
LABEL_10:
            v14 = v11[2];
            v13 = v11[3];
            v16 = v11[4];
            v15 = v11[5];
            v18 = v11[6];
            v17 = v11[7];
            v20 = v11[8];
            v19 = v11[9];
            v22 = v11[10];
            v21 = v11[11];
          }
          v24 = *v11;
          v23 = v11[1];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v25 = *(unsigned int *)(a2 + 16);
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v26 = (int8x16_t *)((char *)&v12[3 * v9] + 8 * (_DWORD)a3 + 8 * v25 * (HIDWORD(a3) + 4 * i));
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v20.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v21.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          *v26 = v24;
          v26[1] = v23;
          v26[2] = v14;
          v27 = (int8x16_t *)((char *)v26 + 8 * v25);
          *v27 = v13;
          v27[1] = v16;
          v27[2] = v15;
          v28 = &v26[v25];
          *v28 = v18;
          v28[1] = v17;
          v28[2] = v20;
          v29 = (int8x16_t *)((char *)v26 + 24 * v25);
          *v29 = v19;
          v29[1] = v22;
          v29[2] = v21;
          v30 = v7 + 1;
          while (v30 != v10)
          {
            ++v9;
            v32 = *v30++;
            v31 = v32;
            if (v32 != -1)
            {
              v7 = v30 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v31);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A8C90(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A8D00(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A8D80(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A8EA8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A8ED8()
{
  return 9;
}

uint64_t sub_20F8A8EE0()
{
  return 4;
}

uint64_t sub_20F8A8EE8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t v41;
  unint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v53 = 8 * (v8 + v6) - 8 * v6 - 8;
        v54 = v5 + 8 * v6;
        while (v53)
        {
          v7 = (uint64_t *)(v54 + 8);
          ++v9;
          v55 = *(_QWORD *)(v54 + 8);
          v53 -= 8;
          v54 += 8;
          if (v55 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v43 = *(int8x16_t *)(v11 + 272);
            v44 = *(int8x16_t *)(v11 + 224);
            v18 = *(int8x16_t *)(v11 + 192);
            v38 = *(int8x16_t *)(v11 + 208);
            v25 = *(int8x16_t *)(v11 + 160);
            v19 = *(int8x16_t *)(v11 + 176);
            v30 = *(int8x16_t *)(v11 + 128);
            v26 = *(int8x16_t *)(v11 + 144);
            v56 = vextq_s8(v43, v43, 8uLL).u64[0];
            v57 = *(int8x16_t *)(v11 + 240);
            v58 = *(int8x16_t *)(v11 + 256);
            v41.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
            v21.i64[0] = vextq_s8(v57, v57, 8uLL).u64[0];
            v22.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
            v20.i64[0] = vextq_s8(v38, v38, 8uLL).u64[0];
            v23 = vextq_s8(v18, v18, 8uLL).u64[0];
            v24 = vextq_s8(v19, v19, 8uLL).u64[0];
            v27 = vextq_s8(v25, v25, 8uLL).u64[0];
            v34 = *(int8x16_t *)(v11 + 96);
            v32 = *(int8x16_t *)(v11 + 112);
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v36 = vextq_s8(v30, v30, 8uLL).u64[0];
            v28.i64[0] = vextq_s8(v32, v32, 8uLL).u64[0];
            v35 = *(int8x16_t *)(v11 + 80);
            v31.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
            v33.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
            v59 = *(int8x16_t *)(v11 + 64);
            v17.i64[0] = vextq_s8(v59, v59, 8uLL).u64[0];
            v15 = *(int8x16_t *)(v11 + 32);
            v16 = *(int8x16_t *)(v11 + 48);
            v37 = vextq_s8(v16, v16, 8uLL).u64[0];
            v39 = vextq_s8(v15, v15, 8uLL).u64[0];
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v40 = vextq_s8(v13, v13, 8uLL).u64[0];
            v42 = vextq_s8(v14, v14, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v59.i64[0] = *(_QWORD *)(v11 + 64);
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v15 = *(int8x16_t *)(v11 + 32);
            v16 = *(int8x16_t *)(v11 + 48);
            v17 = *(int8x16_t *)(v11 + 72);
            v19 = *(int8x16_t *)(v11 + 176);
            v18 = *(int8x16_t *)(v11 + 192);
            v20 = *(int8x16_t *)(v11 + 216);
            v21 = *(int8x16_t *)(v11 + 248);
            v22 = *(int8x16_t *)(v11 + 232);
            v57.i64[0] = vextq_s8(v22, v22, 8uLL).u64[0];
            v58.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = vextq_s8(v18, v18, 8uLL).u64[0];
            v24 = vextq_s8(v19, v19, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v11 + 144);
            v25 = *(int8x16_t *)(v11 + 160);
            v27 = vextq_s8(v25, v25, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v11 + 120);
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v30.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
            v31 = *(int8x16_t *)(v11 + 104);
            v32.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
            v33 = *(int8x16_t *)(v11 + 88);
            v34.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
            v35.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
            v36 = *(_QWORD *)(v11 + 136);
            v37 = vextq_s8(v16, v16, 8uLL).u64[0];
            v38.i64[0] = *(_QWORD *)(v11 + 208);
            v39 = vextq_s8(v15, v15, 8uLL).u64[0];
            v40 = vextq_s8(v13, v13, 8uLL).u64[0];
            v41 = *(int8x16_t *)(v11 + 264);
            v42 = vextq_s8(v14, v14, 8uLL).u64[0];
            v43.i64[0] = vextq_s8(v41, v41, 8uLL).u64[0];
            v56 = *(_QWORD *)(v11 + 280);
            v44.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
          }
          v16.i64[1] = v37;
          v15.i64[1] = v39;
          v13.i64[1] = v40;
          v14.i64[1] = v42;
          v45 = *((unsigned int *)a2 + 4);
          v46 = (int8x16_t *)(v12 + 8 * (9 * v9 + (_DWORD)a3 + v45 * (HIDWORD(a3) + 4 * i)));
          v28.i64[1] = v30.i64[0];
          v31.i64[1] = v32.i64[0];
          v33.i64[1] = v34.i64[0];
          v17.i64[1] = v35.i64[0];
          v18.i64[1] = v23;
          v19.i64[1] = v24;
          v25.i64[1] = v27;
          v26.i64[1] = v29;
          v41.i64[1] = v43.i64[0];
          v21.i64[1] = v58.i64[0];
          v22.i64[1] = v57.i64[0];
          v20.i64[1] = v44.i64[0];
          *v46 = v14;
          v46[1] = v13;
          v46[4].i64[0] = v59.i64[0];
          v46[2] = v15;
          v46[3] = v16;
          v47 = (int8x16_t *)((char *)v46 + 8 * v45);
          *v47 = v17;
          v47[1] = v33;
          v47[4].i64[0] = v36;
          v47[2] = v31;
          v47[3] = v28;
          v48 = &v46[v45];
          *v48 = v26;
          v48[1] = v25;
          v48[4].i64[0] = v38.i64[0];
          v48[2] = v19;
          v48[3] = v18;
          v49 = (int8x16_t *)((char *)v46 + 24 * v45);
          *v49 = v20;
          v49[1] = v22;
          v49[4].i64[0] = v56;
          v50 = v7 + 1;
          v49[2] = v21;
          v49[3] = v41;
          while (v50 != v10)
          {
            ++v9;
            v52 = *v50++;
            v51 = v52;
            if (v52 != -1)
            {
              v7 = v50 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v51;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A91BC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A922C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A92AC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A93D0(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A93F8()
{
  return 3;
}

uint64_t sub_20F8A9400()
{
  return 1;
}

uint64_t sub_20F8A9408(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v18 = 8 * (v8 + v6) - 8 * v6 - 8;
        v19 = v5 + 8 * v6;
        while (v18)
        {
          v7 = (uint64_t *)(v19 + 8);
          ++v9;
          v20 = *(_QWORD *)(v19 + 8);
          v18 -= 8;
          v19 += 8;
          if (v20 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *v7;
LABEL_10:
          v12 = *(_QWORD *)(result + 16) + 8 * v11;
          v13 = *(_OWORD *)v12;
          v14 = *(_QWORD *)(v12 + 16);
          v15 = *(_QWORD *)a2 + 8 * (3 * v9 + (_DWORD)a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          *(_QWORD *)(v15 + 16) = v14;
          *(_OWORD *)v15 = v13;
          v16 = v7 + 1;
          while (v16 != v10)
          {
            ++v9;
            v17 = *v16++;
            v11 = v17;
            if (v17 != -1)
            {
              v7 = v16 - 1;
              goto LABEL_10;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A9504(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A9574(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A95F4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A9718(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A9730()
{
  return 4;
}

uint64_t sub_20F8A9738()
{
  return 1;
}

uint64_t sub_20F8A9740(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v18 = 8 * (v8 + v6) - 8 * v6 - 8;
        v19 = v5 + 8 * v6;
        while (v18)
        {
          v7 = (uint64_t *)(v19 + 8);
          ++v9;
          v20 = *(_QWORD *)(v19 + 8);
          v18 -= 8;
          v19 += 8;
          if (v20 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *v7;
LABEL_10:
          v12 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * v11);
          v13 = *v12;
          v14 = v12[1];
          v15 = (_OWORD *)(*(_QWORD *)a2 + 8 * ((_DWORD)a3 + 4 * v9 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          *v15 = v13;
          v15[1] = v14;
          v16 = v7 + 1;
          while (v16 != v10)
          {
            ++v9;
            v17 = *v16++;
            v11 = v17;
            if (v17 != -1)
            {
              v7 = v16 - 1;
              goto LABEL_10;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A9830(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A98A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A9920(_QWORD *a1, unsigned int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = a2;
  v6 = a3 * a2;
  if (v4 >= a2 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v10 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A9A44(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A9A5C()
{
  return 1;
}

uint64_t sub_20F8A9A64()
{
  return 1;
}

uint64_t sub_20F8A9A6C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v14 = 8 * (v8 + v6) - 8 * v6 - 8;
        v15 = v5 + 8 * v6;
        while (v14)
        {
          v7 = (uint64_t *)(v15 + 8);
          ++v9;
          v16 = *(_QWORD *)(v15 + 8);
          v14 -= 8;
          v15 += 8;
          if (v16 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *v7;
LABEL_10:
          *(_QWORD *)(*(_QWORD *)a2 + 8 * (v9 + (_DWORD)a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)))) = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
          v12 = v7 + 1;
          while (v12 != v10)
          {
            ++v9;
            v13 = *v12++;
            v11 = v13;
            if (v13 != -1)
            {
              v7 = v12 - 1;
              goto LABEL_10;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8A9B50(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v20 = 8 * (v8 + v6) - 8 * v6 - 8;
        v21 = v5 + 8 * v6;
        while (v20)
        {
          v7 = (uint64_t *)(v21 + 8);
          ++v9;
          v22 = *(_QWORD *)(v21 + 8);
          v20 -= 8;
          v21 += 8;
          if (v22 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          if (i == v9)
          {
            v11 = *v7;
LABEL_18:
            v17 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
            v18 = (i + a3);
            v19 = (_QWORD *)*a2;
            if (v17 == (_QWORD *)*a2)
            {
              v19[v18] = *v17;
              v3 = *(unsigned int *)(result + 12);
            }
            else
            {
              v19[v18] = *v17;
            }
          }
          else
          {
            v12 = v9 + 1;
            v13 = v7 + 1;
            while (v13 != v10)
            {
              v14 = *v13++;
              v11 = v14;
              v15 = v12++;
              if (v14 != -1 && i == v15)
                goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A9C4C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8A9CBC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8A9D3C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8A9E64(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8A9E8C()
{
  return 6;
}

uint64_t sub_20F8A9E94()
{
  return 1;
}

uint64_t sub_20F8A9E9C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v18 = 8 * (v8 + v6) - 8 * v6 - 8;
        v19 = v5 + 8 * v6;
        while (v18)
        {
          v7 = (uint64_t *)(v19 + 8);
          ++v9;
          v20 = *(_QWORD *)(v19 + 8);
          v18 -= 8;
          v19 += 8;
          if (v20 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *v7;
LABEL_10:
          v12 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * v11);
          v13 = (_OWORD *)(*(_QWORD *)a2 + 8 * ((_DWORD)a3 + 6 * v9 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v14 = v12[2];
          v15 = *v12;
          v13[1] = v12[1];
          v13[2] = v14;
          *v13 = v15;
          v16 = v7 + 1;
          while (v16 != v10)
          {
            ++v9;
            v17 = *v16++;
            v11 = v17;
            if (v17 != -1)
            {
              v7 = v16 - 1;
              goto LABEL_10;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8A9F98(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AA008(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AA088(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AA1AC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AA1DC()
{
  return 9;
}

uint64_t sub_20F8AA1E4()
{
  return 1;
}

uint64_t sub_20F8AA1EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v20 = 8 * (v8 + v6) - 8 * v6 - 8;
        v21 = v5 + 8 * v6;
        while (v20)
        {
          v7 = (uint64_t *)(v21 + 8);
          ++v9;
          v22 = *(_QWORD *)(v21 + 8);
          v20 -= 8;
          v21 += 8;
          if (v22 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *v7;
LABEL_10:
          v12 = *(_QWORD *)(result + 16) + 8 * v11;
          v13 = *(_QWORD *)a2 + 8 * (9 * v9 + (_DWORD)a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          v14 = *(_QWORD *)(v12 + 64);
          v15 = *(_OWORD *)(v12 + 48);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(v13 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(v13 + 48) = v15;
          *(_QWORD *)(v13 + 64) = v14;
          *(_OWORD *)v13 = v16;
          *(_OWORD *)(v13 + 16) = v17;
          v18 = v7 + 1;
          while (v18 != v10)
          {
            ++v9;
            v19 = *v18++;
            v11 = v19;
            if (v19 != -1)
            {
              v7 = v18 - 1;
              goto LABEL_10;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AA2F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AA360(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AA3E0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AA508(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AA538()
{
  return 3;
}

uint64_t sub_20F8AA540()
{
  return 6;
}

uint64_t sub_20F8AA548(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  __int128 v14;
  int8x16_t v15;
  __int128 v16;
  int8x16_t v17;
  __int128 v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t *v32;
  __int8 *v33;
  int8x16_t *v34;
  __int8 *v35;
  int8x16_t *v36;
  __int8 *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v41 = 8 * (v8 + v6) - 8 * v6 - 8;
        v42 = v5 + 8 * v6;
        while (v41)
        {
          v7 = (uint64_t *)(v42 + 8);
          ++v9;
          v43 = *(_QWORD *)(v42 + 8);
          v41 -= 8;
          v42 += 8;
          if (v43 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v30 = *(int8x16_t *)(v11 + 112);
            v25 = *(int8x16_t *)(v11 + 128);
            v24 = *(int8x16_t *)(v11 + 80);
            v17 = *(int8x16_t *)(v11 + 96);
            v15 = *(int8x16_t *)(v11 + 48);
            v23 = *(int8x16_t *)(v11 + 64);
            v20 = *(int8x16_t *)(v11 + 16);
            v21 = *(int8x16_t *)(v11 + 32);
            v27 = vextq_s8(v25, v25, 8uLL).u64[0];
            *(_QWORD *)&v18 = vextq_s8(v30, v30, 8uLL).u64[0];
            v26 = vextq_s8(v17, v17, 8uLL).u64[0];
            v13 = *(int8x16_t *)v11;
            v22 = vextq_s8(v24, v24, 8uLL).u64[0];
            *(_QWORD *)&v16 = vextq_s8(v23, v23, 8uLL).u64[0];
            v28 = vextq_s8(v15, v15, 8uLL).u64[0];
            v19 = vextq_s8(v21, v21, 8uLL).u64[0];
            *(_QWORD *)&v14 = vextq_s8(v20, v20, 8uLL).u64[0];
            v29 = vextq_s8(v13, v13, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13 = *(int8x16_t *)v11;
            v14 = *(_OWORD *)(v11 + 24);
            v15 = *(int8x16_t *)(v11 + 48);
            v16 = *(_OWORD *)(v11 + 72);
            v17 = *(int8x16_t *)(v11 + 96);
            v18 = *(_OWORD *)(v11 + 120);
            v19 = *(_QWORD *)(v11 + 40);
            v20.i64[0] = *(_QWORD *)(v11 + 16);
            v21.i64[0] = *(_QWORD *)(v11 + 32);
            v22 = *(_QWORD *)(v11 + 88);
            v23.i64[0] = *(_QWORD *)(v11 + 64);
            v24.i64[0] = *(_QWORD *)(v11 + 80);
            v25.i64[0] = *(_QWORD *)(v11 + 128);
            v26 = vextq_s8(v17, v17, 8uLL).u64[0];
            v27 = *(_QWORD *)(v11 + 136);
            v28 = vextq_s8(v15, v15, 8uLL).u64[0];
            v29 = vextq_s8(v13, v13, 8uLL).u64[0];
            v30.i64[0] = *(_QWORD *)(v11 + 112);
          }
          v31 = *((unsigned int *)a2 + 4);
          v17.i64[1] = v26;
          v13.i64[1] = v29;
          v32 = (int8x16_t *)(v12 + 8 * (3 * v9 + (_DWORD)a3 + v31 * (HIDWORD(a3) + 6 * i)));
          *((_QWORD *)&v14 + 1) = v21.i64[0];
          v15.i64[1] = v28;
          *((_QWORD *)&v16 + 1) = v24.i64[0];
          *((_QWORD *)&v18 + 1) = v25.i64[0];
          v32[1].i64[0] = v20.i64[0];
          *v32 = v13;
          v33 = &v32->i8[8 * v31];
          *((_QWORD *)v33 + 2) = v19;
          *(_OWORD *)v33 = v14;
          v34 = &v32[v31];
          v34[1].i64[0] = v23.i64[0];
          *v34 = v15;
          v35 = &v32->i8[24 * v31];
          *((_QWORD *)v35 + 2) = v22;
          *(_OWORD *)v35 = v16;
          v36 = &v32[2 * v31];
          v36[1].i64[0] = v30.i64[0];
          *v36 = v17;
          v37 = &v32->i8[40 * v31];
          *((_QWORD *)v37 + 2) = v27;
          *(_OWORD *)v37 = v18;
          v38 = v7 + 1;
          while (v38 != v10)
          {
            ++v9;
            v40 = *v38++;
            v39 = v40;
            if (v40 != -1)
            {
              v7 = v38 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v39;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AA73C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AA7AC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AA82C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (24 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AA954(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x18uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AA97C()
{
  return 4;
}

uint64_t sub_20F8AA984()
{
  return 6;
}

uint64_t sub_20F8AA98C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v35 = 8 * (v8 + v6) - 8 * v6 - 8;
        v36 = v5 + 8 * v6;
        while (v35)
        {
          v7 = (uint64_t *)(v36 + 8);
          ++v9;
          v37 = *(_QWORD *)(v36 + 8);
          v35 -= 8;
          v36 += 8;
          if (v37 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v22 = v11[10];
            v21 = v11[11];
            v20 = v11[8];
            v19 = v11[9];
            v18 = v11[6];
            v17 = v11[7];
            v16 = v11[4];
            v15 = v11[5];
            v14 = v11[2];
            v13 = v11[3];
          }
          else
          {
LABEL_10:
            v14 = v11[2];
            v13 = v11[3];
            v16 = v11[4];
            v15 = v11[5];
            v18 = v11[6];
            v17 = v11[7];
            v20 = v11[8];
            v19 = v11[9];
            v22 = v11[10];
            v21 = v11[11];
          }
          v24 = *v11;
          v23 = v11[1];
          v25 = *(unsigned int *)(a2 + 16);
          v21.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          v26 = (int8x16_t *)((char *)&v12[2 * v9] + 8 * (_DWORD)a3 + 8 * v25 * (HIDWORD(a3) + 6 * i));
          v20.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
          v17.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          *v26 = v24;
          v26[1] = v23;
          v27 = (int8x16_t *)((char *)v26 + 8 * v25);
          *v27 = v14;
          v27[1] = v13;
          v28 = &v26[v25];
          *v28 = v16;
          v28[1] = v15;
          v29 = (int8x16_t *)((char *)v26 + 24 * v25);
          *v29 = v18;
          v29[1] = v17;
          v30 = &v26[2 * v25];
          *v30 = v20;
          v30[1] = v19;
          v31 = (int8x16_t *)((char *)v26 + 40 * v25);
          *v31 = v22;
          v31[1] = v21;
          v32 = v7 + 1;
          while (v32 != v10)
          {
            ++v9;
            v34 = *v32++;
            v33 = v34;
            if (v34 != -1)
            {
              v7 = v32 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v33);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AAB58(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AABC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AAC48(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AAD70(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AAD98()
{
  return 1;
}

uint64_t sub_20F8AADA0()
{
  return 6;
}

uint64_t sub_20F8AADA8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v24 = 8 * (v8 + v6) - 8 * v6 - 8;
        v25 = v5 + 8 * v6;
        while (v24)
        {
          v7 = (uint64_t *)(v25 + 8);
          ++v9;
          v26 = *(_QWORD *)(v25 + 8);
          v24 -= 8;
          v25 += 8;
          if (v26 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v15 = *(int8x16_t *)(v11 + 16);
            v17 = *(int8x16_t *)(v11 + 32);
            v13 = *(int8x16_t *)v11;
            v18 = vextq_s8(v17, v17, 8uLL).u64[0];
            v16 = vextq_s8(v15, v15, 8uLL).u64[0];
            v14 = vextq_s8(v13, v13, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13.i64[0] = *(_QWORD *)v11;
            v14 = *(_QWORD *)(v11 + 8);
            v15.i64[0] = *(_QWORD *)(v11 + 16);
            v16 = *(_QWORD *)(v11 + 24);
            v17.i64[0] = *(_QWORD *)(v11 + 32);
            v18 = *(_QWORD *)(v11 + 40);
          }
          v19 = *((unsigned int *)a2 + 4);
          v20 = (_QWORD *)(v12 + 8 * (v9 + (_DWORD)a3 + v19 * (HIDWORD(a3) + 6 * i)));
          *v20 = v13.i64[0];
          v20[v19] = v14;
          v20[2 * v19] = v15.i64[0];
          v20[3 * v19] = v16;
          v20[4 * v19] = v17.i64[0];
          v20[5 * v19] = v18;
          v21 = v7 + 1;
          while (v21 != v10)
          {
            ++v9;
            v23 = *v21++;
            v22 = v23;
            if (v23 != -1)
            {
              v7 = v21 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v22;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AAF04(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AAF74(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AAFF4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AB11C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AB14C()
{
  return 6;
}

uint64_t sub_20F8AB154()
{
  return 6;
}

uint64_t sub_20F8AB15C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v45 = 8 * (v8 + v6) - 8 * v6 - 8;
        v46 = v5 + 8 * v6;
        while (v45)
        {
          v7 = (uint64_t *)(v46 + 8);
          ++v9;
          v47 = *(_QWORD *)(v46 + 8);
          v45 -= 8;
          v46 += 8;
          if (v47 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v22 = v11[16];
            v21 = v11[17];
            v20 = v11[14];
            v19 = v11[15];
            v18 = v11[12];
            v17 = v11[13];
            v16 = v11[10];
            v15 = v11[11];
            v28 = v11[8];
            v27 = v11[9];
            v50 = vextq_s8(v22, v22, 8uLL).u64[0];
            v51 = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = vextq_s8(v20, v20, 8uLL).u64[0];
            v24 = vextq_s8(v17, v17, 8uLL).u64[0];
            v25 = vextq_s8(v18, v18, 8uLL).u64[0];
            v48 = vextq_s8(v15, v15, 8uLL).u64[0];
            v49 = vextq_s8(v19, v19, 8uLL).u64[0];
            v26 = vextq_s8(v16, v16, 8uLL).u64[0];
            v14 = v11[6];
            v13 = v11[7];
          }
          else
          {
LABEL_10:
            v14 = v11[6];
            v13 = v11[7];
            v16 = v11[10];
            v15 = v11[11];
            v18 = v11[12];
            v17 = v11[13];
            v20 = v11[14];
            v19 = v11[15];
            v22 = v11[16];
            v21 = v11[17];
            v50 = vextq_s8(v22, v22, 8uLL).u64[0];
            v51 = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = vextq_s8(v20, v20, 8uLL).u64[0];
            v24 = vextq_s8(v17, v17, 8uLL).u64[0];
            v25 = vextq_s8(v18, v18, 8uLL).u64[0];
            v48 = vextq_s8(v15, v15, 8uLL).u64[0];
            v49 = vextq_s8(v19, v19, 8uLL).u64[0];
            v26 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = v11[8];
            v27 = v11[9];
          }
          v30 = v11[4];
          v29 = v11[5];
          v32 = v11[2];
          v31 = v11[3];
          v34 = *v11;
          v33 = v11[1];
          v20.i64[1] = v23;
          v17.i64[1] = v24;
          v18.i64[1] = v25;
          v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
          v35 = *(unsigned int *)(a2 + 16);
          v36 = (int8x16_t *)((char *)&v12[3 * v9] + 8 * (_DWORD)a3 + 8 * v35 * (HIDWORD(a3) + 6 * i));
          v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
          v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
          v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v15.i64[1] = v48;
          v16.i64[1] = v26;
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v21.i64[1] = v51;
          v22.i64[1] = v50;
          v19.i64[1] = v49;
          *v36 = v34;
          v36[1] = v33;
          v36[2] = v32;
          v37 = (int8x16_t *)((char *)v36 + 8 * v35);
          *v37 = v31;
          v37[1] = v30;
          v37[2] = v29;
          v38 = &v36[v35];
          *v38 = v14;
          v38[1] = v13;
          v38[2] = v28;
          v39 = (int8x16_t *)((char *)v36 + 24 * v35);
          *v39 = v27;
          v39[1] = v16;
          v39[2] = v15;
          v40 = &v36[2 * v35];
          *v40 = v18;
          v40[1] = v17;
          v40[2] = v20;
          v41 = (int8x16_t *)((char *)v36 + 40 * v35);
          *v41 = v19;
          v41[1] = v22;
          v42 = v7 + 1;
          v41[2] = v21;
          while (v42 != v10)
          {
            ++v9;
            v44 = *v42++;
            v43 = v44;
            if (v44 != -1)
            {
              v7 = v42 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v43);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8AB3E4(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v22 = 8 * (v8 + v6) - 8 * v6 - 8;
        v23 = v5 + 8 * v6;
        while (v22)
        {
          v7 = (uint64_t *)(v23 + 8);
          ++v9;
          v24 = *(_QWORD *)(v23 + 8);
          v22 -= 8;
          v23 += 8;
          if (v24 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          if (i == v9)
          {
            v11 = *v7;
LABEL_18:
            v17 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
            v18 = *a2 + 8 * (a3 + 6 * i);
            *(_QWORD *)&v19 = *v17;
            if (v17 == (_QWORD *)*a2)
            {
              *(_QWORD *)&v20 = v17[14];
              *(_QWORD *)&v21 = v17[28];
              *((_QWORD *)&v19 + 1) = v17[7];
              *((_QWORD *)&v20 + 1) = v17[21];
              *((_QWORD *)&v21 + 1) = v17[35];
              *(_OWORD *)(v18 + 16) = v20;
              *(_OWORD *)(v18 + 32) = v21;
              *(_OWORD *)v18 = v19;
              v3 = *(unsigned int *)(result + 12);
            }
            else
            {
              *(_QWORD *)v18 = v19;
              *(_QWORD *)(v18 + 8) = v17[7];
              *(_QWORD *)(v18 + 16) = v17[14];
              *(_QWORD *)(v18 + 24) = v17[21];
              *(_QWORD *)(v18 + 32) = v17[28];
              *(_QWORD *)(v18 + 40) = v17[35];
            }
          }
          else
          {
            v12 = v9 + 1;
            v13 = v7 + 1;
            while (v13 != v10)
            {
              v14 = *v13++;
              v11 = v14;
              v15 = v12++;
              if (v14 != -1 && i == v15)
                goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AB530(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AB5A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AB620(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AB748(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AB778()
{
  return 9;
}

uint64_t sub_20F8AB780()
{
  return 6;
}

uint64_t sub_20F8AB788(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int8x16_t *v47;
  __int8 *v48;
  int8x16_t *v49;
  __int8 *v50;
  int8x16_t *v51;
  __int8 *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  unint64_t v74;
  int8x16_t v75;
  unint64_t v76;
  int8x16_t v77;
  __int128 v78;
  __int128 v79;
  int8x16_t v80;
  int8x16_t v81;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v56 = 8 * (v8 + v6) - 8 * v6 - 8;
        v57 = v5 + 8 * v6;
        while (v56)
        {
          v7 = (uint64_t *)(v57 + 8);
          ++v9;
          v58 = *(_QWORD *)(v57 + 8);
          v56 -= 8;
          v57 += 8;
          if (v58 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v27 = *(int8x16_t *)(v11 + 336);
            v29 = *(int8x16_t *)(v11 + 304);
            v28 = *(int8x16_t *)(v11 + 320);
            v71 = *(int8x16_t *)(v11 + 400);
            v72 = *(int8x16_t *)(v11 + 416);
            v37 = vextq_s8(v72, v72, 8uLL).u64[0];
            *(_QWORD *)&v79 = vextq_s8(v71, v71, 8uLL).u64[0];
            v80 = *(int8x16_t *)(v11 + 368);
            v30 = *(int8x16_t *)(v11 + 288);
            v81 = *(int8x16_t *)(v11 + 384);
            *(_QWORD *)&v40 = vextq_s8(v81, v81, 8uLL).u64[0];
            *(_QWORD *)&v41 = vextq_s8(v80, v80, 8uLL).u64[0];
            v77 = *(int8x16_t *)(v11 + 352);
            *(_QWORD *)&v42 = vextq_s8(v77, v77, 8uLL).u64[0];
            v62 = vextq_s8(v27, v27, 8uLL).u64[0];
            v61 = vextq_s8(v28, v28, 8uLL).u64[0];
            v60 = vextq_s8(v29, v29, 8uLL).u64[0];
            v24 = *(int8x16_t *)(v11 + 176);
            v23 = *(int8x16_t *)(v11 + 192);
            v59 = vextq_s8(v30, v30, 8uLL).u64[0];
            v69 = *(int8x16_t *)(v11 + 272);
            v70 = *(int8x16_t *)(v11 + 256);
            v75 = *(int8x16_t *)(v11 + 208);
            v76 = vextq_s8(v69, v69, 8uLL).u64[0];
            *(_QWORD *)&v78 = vextq_s8(v70, v70, 8uLL).u64[0];
            v22 = *(int8x16_t *)(v11 + 144);
            v21 = *(int8x16_t *)(v11 + 160);
            v67 = *(int8x16_t *)(v11 + 224);
            v68 = *(int8x16_t *)(v11 + 240);
            *(_QWORD *)&v26 = vextq_s8(v68, v68, 8uLL).u64[0];
            *(_QWORD *)&v25 = vextq_s8(v67, v67, 8uLL).u64[0];
            *(_QWORD *)&v43 = vextq_s8(v75, v75, 8uLL).u64[0];
            v31 = vextq_s8(v23, v23, 8uLL).u64[0];
            v32 = vextq_s8(v24, v24, 8uLL).u64[0];
            v33 = vextq_s8(v21, v21, 8uLL).u64[0];
            v34 = vextq_s8(v22, v22, 8uLL).u64[0];
            v65 = *(int8x16_t *)(v11 + 112);
            v66 = *(int8x16_t *)(v11 + 128);
            v74 = vextq_s8(v66, v66, 8uLL).u64[0];
            *(_QWORD *)&v20 = vextq_s8(v65, v65, 8uLL).u64[0];
            v15 = *(int8x16_t *)(v11 + 48);
            v63 = *(int8x16_t *)(v11 + 80);
            v64 = *(int8x16_t *)(v11 + 96);
            *(_QWORD *)&v19 = vextq_s8(v64, v64, 8uLL).u64[0];
            *(_QWORD *)&v18 = vextq_s8(v63, v63, 8uLL).u64[0];
            v73 = *(int8x16_t *)(v11 + 64);
            *(_QWORD *)&v17 = vextq_s8(v73, v73, 8uLL).u64[0];
            v13 = *(int8x16_t *)(v11 + 16);
            v16 = *(int8x16_t *)(v11 + 32);
            v35 = vextq_s8(v15, v15, 8uLL).u64[0];
            v36 = vextq_s8(v16, v16, 8uLL).u64[0];
            v14 = *(int8x16_t *)v11;
            v38 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v14, v14, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v16 = *(int8x16_t *)(v11 + 32);
            v15 = *(int8x16_t *)(v11 + 48);
            v17 = *(_OWORD *)(v11 + 72);
            v18 = *(_OWORD *)(v11 + 88);
            v19 = *(_OWORD *)(v11 + 104);
            v20 = *(_OWORD *)(v11 + 120);
            v22 = *(int8x16_t *)(v11 + 144);
            v21 = *(int8x16_t *)(v11 + 160);
            v24 = *(int8x16_t *)(v11 + 176);
            v23 = *(int8x16_t *)(v11 + 192);
            v66.i64[0] = *(_QWORD *)(v11 + 128);
            v25 = *(_OWORD *)(v11 + 232);
            v65.i64[0] = *(_QWORD *)(v11 + 112);
            v26 = *(_OWORD *)(v11 + 248);
            v64.i64[0] = *(_QWORD *)(v11 + 96);
            v63.i64[0] = *(_QWORD *)(v11 + 80);
            v70.i64[0] = *(_QWORD *)(v11 + 256);
            v68.i64[0] = *(_QWORD *)(v11 + 240);
            v67.i64[0] = *(_QWORD *)(v11 + 224);
            v78 = *(_OWORD *)(v11 + 264);
            v69.i64[0] = *(_QWORD *)(v11 + 272);
            v79 = *(_OWORD *)(v11 + 408);
            v72.i64[0] = *(_QWORD *)(v11 + 416);
            v71.i64[0] = *(_QWORD *)(v11 + 400);
            v28 = *(int8x16_t *)(v11 + 320);
            v27 = *(int8x16_t *)(v11 + 336);
            v80.i64[0] = *(_QWORD *)(v11 + 368);
            v81.i64[0] = *(_QWORD *)(v11 + 384);
            v61 = vextq_s8(v28, v28, 8uLL).u64[0];
            v62 = vextq_s8(v27, v27, 8uLL).u64[0];
            v30 = *(int8x16_t *)(v11 + 288);
            v29 = *(int8x16_t *)(v11 + 304);
            v59 = vextq_s8(v30, v30, 8uLL).u64[0];
            v60 = vextq_s8(v29, v29, 8uLL).u64[0];
            v74 = *(_QWORD *)(v11 + 136);
            v31 = vextq_s8(v23, v23, 8uLL).u64[0];
            v73.i64[0] = *(_QWORD *)(v11 + 64);
            v32 = vextq_s8(v24, v24, 8uLL).u64[0];
            v33 = vextq_s8(v21, v21, 8uLL).u64[0];
            v76 = *(_QWORD *)(v11 + 280);
            v34 = vextq_s8(v22, v22, 8uLL).u64[0];
            v75.i64[0] = *(_QWORD *)(v11 + 208);
            v35 = vextq_s8(v15, v15, 8uLL).u64[0];
            v36 = vextq_s8(v16, v16, 8uLL).u64[0];
            v37 = *(_QWORD *)(v11 + 424);
            v38 = vextq_s8(v13, v13, 8uLL).u64[0];
            v39 = vextq_s8(v14, v14, 8uLL).u64[0];
            v77.i64[0] = *(_QWORD *)(v11 + 352);
            v40 = *(_OWORD *)(v11 + 392);
            v41 = *(_OWORD *)(v11 + 376);
            v42 = *(_OWORD *)(v11 + 360);
            v43 = *(_OWORD *)(v11 + 216);
          }
          v15.i64[1] = v35;
          v16.i64[1] = v36;
          v13.i64[1] = v38;
          v14.i64[1] = v39;
          *((_QWORD *)&v20 + 1) = v66.i64[0];
          *((_QWORD *)&v19 + 1) = v65.i64[0];
          *((_QWORD *)&v18 + 1) = v64.i64[0];
          *((_QWORD *)&v17 + 1) = v63.i64[0];
          v23.i64[1] = v31;
          v24.i64[1] = v32;
          v21.i64[1] = v33;
          v22.i64[1] = v34;
          *(_QWORD *)&v45 = v78;
          *(_QWORD *)&v44 = v79;
          *((_QWORD *)&v45 + 1) = v69.i64[0];
          *((_QWORD *)&v26 + 1) = v70.i64[0];
          *((_QWORD *)&v25 + 1) = v68.i64[0];
          *((_QWORD *)&v43 + 1) = v67.i64[0];
          v27.i64[1] = v62;
          v28.i64[1] = v61;
          v29.i64[1] = v60;
          v30.i64[1] = v59;
          *((_QWORD *)&v44 + 1) = v72.i64[0];
          *((_QWORD *)&v40 + 1) = v71.i64[0];
          v46 = *((unsigned int *)a2 + 4);
          v47 = (int8x16_t *)(v12 + 8 * (9 * v9 + (_DWORD)a3 + v46 * (HIDWORD(a3) + 6 * i)));
          *((_QWORD *)&v41 + 1) = v81.i64[0];
          *((_QWORD *)&v42 + 1) = v80.i64[0];
          *v47 = v14;
          v47[1] = v13;
          v47[4].i64[0] = v73.i64[0];
          v47[2] = v16;
          v47[3] = v15;
          v48 = &v47->i8[8 * v46];
          *(_OWORD *)v48 = v17;
          *((_OWORD *)v48 + 1) = v18;
          *((_QWORD *)v48 + 8) = v74;
          *((_OWORD *)v48 + 2) = v19;
          *((_OWORD *)v48 + 3) = v20;
          v49 = &v47[v46];
          *v49 = v22;
          v49[1] = v21;
          v49[4].i64[0] = v75.i64[0];
          v49[2] = v24;
          v49[3] = v23;
          v50 = &v47->i8[24 * v46];
          *(_OWORD *)v50 = v43;
          *((_OWORD *)v50 + 1) = v25;
          *((_QWORD *)v50 + 8) = v76;
          *((_OWORD *)v50 + 2) = v26;
          *((_OWORD *)v50 + 3) = v45;
          v51 = &v47[2 * v46];
          *v51 = v30;
          v51[1] = v29;
          v51[4].i64[0] = v77.i64[0];
          v51[2] = v28;
          v51[3] = v27;
          v52 = &v47->i8[40 * v46];
          *(_OWORD *)v52 = v42;
          *((_OWORD *)v52 + 1) = v41;
          *((_QWORD *)v52 + 8) = v37;
          v53 = v7 + 1;
          *((_OWORD *)v52 + 2) = v40;
          *((_OWORD *)v52 + 3) = v44;
          while (v53 != v10)
          {
            ++v9;
            v55 = *v53++;
            v54 = v55;
            if (v55 != -1)
            {
              v7 = v53 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v54;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8ABBE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8ABC58(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8ABCD8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8ABE00(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8ABE30()
{
  return 3;
}

uint64_t sub_20F8ABE38()
{
  return 9;
}

uint64_t sub_20F8ABE40(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  __int128 v14;
  int8x16_t v15;
  __int128 v16;
  int8x16_t v17;
  __int128 v18;
  int8x16_t v19;
  __int128 v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t *v40;
  __int8 *v41;
  int8x16_t *v42;
  __int8 *v43;
  int8x16_t *v44;
  __int8 *v45;
  int8x16_t *v46;
  __int8 *v47;
  int8x16_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v52 = 8 * (v8 + v6) - 8 * v6 - 8;
        v53 = v5 + 8 * v6;
        while (v52)
        {
          v7 = (uint64_t *)(v53 + 8);
          ++v9;
          v54 = *(_QWORD *)(v53 + 8);
          v52 -= 8;
          v53 += 8;
          if (v54 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v30 = *(int8x16_t *)(v11 + 176);
            v21 = *(int8x16_t *)(v11 + 192);
            v19 = *(int8x16_t *)(v11 + 144);
            v36 = *(int8x16_t *)(v11 + 160);
            v31 = *(int8x16_t *)(v11 + 112);
            v29 = *(int8x16_t *)(v11 + 128);
            v27 = *(int8x16_t *)(v11 + 80);
            v17 = *(int8x16_t *)(v11 + 96);
            v15 = *(int8x16_t *)(v11 + 48);
            v26 = *(int8x16_t *)(v11 + 64);
            v32 = vextq_s8(v21, v21, 8uLL).u64[0];
            v33 = vextq_s8(v30, v30, 8uLL).u64[0];
            *(_QWORD *)&v20 = vextq_s8(v36, v36, 8uLL).u64[0];
            v34 = vextq_s8(v19, v19, 8uLL).u64[0];
            v28 = vextq_s8(v29, v29, 8uLL).u64[0];
            *(_QWORD *)&v18 = vextq_s8(v31, v31, 8uLL).u64[0];
            v35 = vextq_s8(v17, v17, 8uLL).u64[0];
            v25 = vextq_s8(v27, v27, 8uLL).u64[0];
            v23 = *(int8x16_t *)(v11 + 16);
            v24 = *(int8x16_t *)(v11 + 32);
            *(_QWORD *)&v16 = vextq_s8(v26, v26, 8uLL).u64[0];
            v37 = vextq_s8(v15, v15, 8uLL).u64[0];
            v22 = vextq_s8(v24, v24, 8uLL).u64[0];
            v13 = *(int8x16_t *)v11;
            *(_QWORD *)&v14 = vextq_s8(v23, v23, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13 = *(int8x16_t *)v11;
            v14 = *(_OWORD *)(v11 + 24);
            v15 = *(int8x16_t *)(v11 + 48);
            v16 = *(_OWORD *)(v11 + 72);
            v17 = *(int8x16_t *)(v11 + 96);
            v18 = *(_OWORD *)(v11 + 120);
            v19 = *(int8x16_t *)(v11 + 144);
            v20 = *(_OWORD *)(v11 + 168);
            v21 = *(int8x16_t *)(v11 + 192);
            v22 = *(_QWORD *)(v11 + 40);
            v23.i64[0] = *(_QWORD *)(v11 + 16);
            v24.i64[0] = *(_QWORD *)(v11 + 32);
            v25 = *(_QWORD *)(v11 + 88);
            v26.i64[0] = *(_QWORD *)(v11 + 64);
            v27.i64[0] = *(_QWORD *)(v11 + 80);
            v28 = *(_QWORD *)(v11 + 136);
            v29.i64[0] = *(_QWORD *)(v11 + 128);
            v30.i64[0] = *(_QWORD *)(v11 + 176);
            v31.i64[0] = *(_QWORD *)(v11 + 112);
            v32 = vextq_s8(v21, v21, 8uLL).u64[0];
            v33 = *(_QWORD *)(v11 + 184);
            v34 = vextq_s8(v19, v19, 8uLL).u64[0];
            v35 = vextq_s8(v17, v17, 8uLL).u64[0];
            v36.i64[0] = *(_QWORD *)(v11 + 160);
            v37 = vextq_s8(v15, v15, 8uLL).u64[0];
          }
          v38 = *(_QWORD *)(v11 + 208);
          v21.i64[1] = v32;
          v39 = *((unsigned int *)a2 + 4);
          v17.i64[1] = v35;
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          *((_QWORD *)&v14 + 1) = v24.i64[0];
          v15.i64[1] = v37;
          *((_QWORD *)&v16 + 1) = v27.i64[0];
          *((_QWORD *)&v18 + 1) = v29.i64[0];
          v19.i64[1] = v34;
          v40 = (int8x16_t *)(v12 + 8 * (3 * v9 + (_DWORD)a3 + v39 * (9 * i + HIDWORD(a3))));
          *((_QWORD *)&v20 + 1) = v30.i64[0];
          v40[1].i64[0] = v23.i64[0];
          *v40 = v13;
          v41 = &v40->i8[8 * v39];
          *((_QWORD *)v41 + 2) = v22;
          *(_OWORD *)v41 = v14;
          v42 = &v40[v39];
          v42[1].i64[0] = v26.i64[0];
          *v42 = v15;
          v43 = &v40->i8[24 * v39];
          *((_QWORD *)v43 + 2) = v25;
          *(_OWORD *)v43 = v16;
          v44 = &v40[2 * v39];
          v44[1].i64[0] = v31.i64[0];
          *v44 = v17;
          v45 = &v40->i8[40 * v39];
          *((_QWORD *)v45 + 2) = v28;
          *(_OWORD *)v45 = v18;
          v46 = &v40[3 * v39];
          v46[1].i64[0] = v36.i64[0];
          *v46 = v19;
          v47 = &v40->i8[56 * v39];
          *((_QWORD *)v47 + 2) = v33;
          *(_OWORD *)v47 = v20;
          v48 = &v40[4 * v39];
          v48[1].i64[0] = v38;
          *v48 = v21;
          v49 = v7 + 1;
          while (v49 != v10)
          {
            ++v9;
            v51 = *v49++;
            v50 = v51;
            if (v51 != -1)
            {
              v7 = v49 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v50;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AC0B4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AC124(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AC1A4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AC2CC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AC2FC()
{
  return 4;
}

uint64_t sub_20F8AC304()
{
  return 9;
}

uint64_t sub_20F8AC30C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v48 = 8 * (v8 + v6) - 8 * v6 - 8;
        v49 = v5 + 8 * v6;
        while (v48)
        {
          v7 = (uint64_t *)(v49 + 8);
          ++v9;
          v50 = *(_QWORD *)(v49 + 8);
          v48 -= 8;
          v49 += 8;
          if (v50 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v22 = v11[16];
            v21 = v11[17];
            v20 = v11[14];
            v19 = v11[15];
            v18 = v11[12];
            v17 = v11[13];
            v16 = v11[10];
            v15 = v11[11];
            v28 = v11[8];
            v27 = v11[9];
            v23 = vextq_s8(v21, v21, 8uLL).u64[0];
            v24 = vextq_s8(v22, v22, 8uLL).u64[0];
            v25 = vextq_s8(v19, v19, 8uLL).u64[0];
            v26 = vextq_s8(v20, v20, 8uLL).u64[0];
            v53 = vextq_s8(v18, v18, 8uLL).u64[0];
            v54 = vextq_s8(v17, v17, 8uLL).u64[0];
            v51 = vextq_s8(v16, v16, 8uLL).u64[0];
            v52 = vextq_s8(v15, v15, 8uLL).u64[0];
            v14 = v11[6];
            v13 = v11[7];
          }
          else
          {
LABEL_10:
            v14 = v11[6];
            v13 = v11[7];
            v16 = v11[10];
            v15 = v11[11];
            v18 = v11[12];
            v17 = v11[13];
            v20 = v11[14];
            v19 = v11[15];
            v22 = v11[16];
            v21 = v11[17];
            v23 = vextq_s8(v21, v21, 8uLL).u64[0];
            v24 = vextq_s8(v22, v22, 8uLL).u64[0];
            v25 = vextq_s8(v19, v19, 8uLL).u64[0];
            v26 = vextq_s8(v20, v20, 8uLL).u64[0];
            v53 = vextq_s8(v18, v18, 8uLL).u64[0];
            v54 = vextq_s8(v17, v17, 8uLL).u64[0];
            v51 = vextq_s8(v16, v16, 8uLL).u64[0];
            v52 = vextq_s8(v15, v15, 8uLL).u64[0];
            v28 = v11[8];
            v27 = v11[9];
          }
          v30 = v11[4];
          v29 = v11[5];
          v32 = v11[2];
          v31 = v11[3];
          v34 = *v11;
          v33 = v11[1];
          v21.i64[1] = v23;
          v22.i64[1] = v24;
          v19.i64[1] = v25;
          v20.i64[1] = v26;
          v35 = *(unsigned int *)(a2 + 16);
          v17.i64[1] = v54;
          v18.i64[1] = v53;
          v15.i64[1] = v52;
          v16.i64[1] = v51;
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          v30.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
          v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
          v32.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
          v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
          v36 = (int8x16_t *)((char *)&v12[2 * v9] + 8 * (_DWORD)a3 + 8 * v35 * (9 * i + HIDWORD(a3)));
          v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          *v36 = v34;
          v36[1] = v33;
          v37 = (int8x16_t *)((char *)v36 + 8 * v35);
          *v37 = v32;
          v37[1] = v31;
          v38 = &v36[v35];
          *v38 = v30;
          v38[1] = v29;
          v39 = (int8x16_t *)((char *)v36 + 24 * v35);
          *v39 = v14;
          v39[1] = v13;
          v40 = &v36[2 * v35];
          *v40 = v28;
          v40[1] = v27;
          v41 = (int8x16_t *)((char *)v36 + 40 * v35);
          *v41 = v16;
          v41[1] = v15;
          v42 = &v36[3 * v35];
          *v42 = v18;
          v42[1] = v17;
          v43 = (int8x16_t *)((char *)v36 + 56 * v35);
          *v43 = v20;
          v43[1] = v19;
          v44 = &v36[4 * v35];
          v45 = v7 + 1;
          *v44 = v22;
          v44[1] = v21;
          while (v45 != v10)
          {
            ++v9;
            v47 = *v45++;
            v46 = v47;
            if (v47 != -1)
            {
              v7 = v45 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v46);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AC5A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AC610(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AC690(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AC7B4(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AC7E4()
{
  return 1;
}

uint64_t sub_20F8AC7EC()
{
  return 9;
}

uint64_t sub_20F8AC7F4(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v27 = 8 * (v8 + v6) - 8 * v6 - 8;
        v28 = v5 + 8 * v6;
        while (v27)
        {
          v7 = (uint64_t *)(v28 + 8);
          ++v9;
          v29 = *(_QWORD *)(v28 + 8);
          v27 -= 8;
          v28 += 8;
          if (v29 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v21 = *(_QWORD *)(v11 + 64);
            v17 = *(int8x16_t *)(v11 + 32);
            v19 = *(int8x16_t *)(v11 + 48);
            v13 = *(int8x16_t *)v11;
            v15 = *(int8x16_t *)(v11 + 16);
            v20 = vextq_s8(v19, v19, 8uLL).u64[0];
            v18 = vextq_s8(v17, v17, 8uLL).u64[0];
            v16 = vextq_s8(v15, v15, 8uLL).u64[0];
            v14 = vextq_s8(v13, v13, 8uLL).u64[0];
          }
          else
          {
LABEL_10:
            v13.i64[0] = *(_QWORD *)v11;
            v14 = *(_QWORD *)(v11 + 8);
            v15.i64[0] = *(_QWORD *)(v11 + 16);
            v16 = *(_QWORD *)(v11 + 24);
            v17.i64[0] = *(_QWORD *)(v11 + 32);
            v18 = *(_QWORD *)(v11 + 40);
            v19.i64[0] = *(_QWORD *)(v11 + 48);
            v20 = *(_QWORD *)(v11 + 56);
            v21 = *(_QWORD *)(v11 + 64);
          }
          v22 = *((unsigned int *)a2 + 4);
          v23 = (_QWORD *)(v12 + 8 * (v9 + (_DWORD)a3 + v22 * (9 * i + HIDWORD(a3))));
          *v23 = v13.i64[0];
          v23[v22] = v14;
          v23[2 * v22] = v15.i64[0];
          v23[3 * v22] = v16;
          v23[4 * v22] = v17.i64[0];
          v23[5 * v22] = v18;
          v23[6 * v22] = v19.i64[0];
          v23[7 * v22] = v20;
          v23[8 * v22] = v21;
          v24 = v7 + 1;
          while (v24 != v10)
          {
            ++v9;
            v26 = *v24++;
            v25 = v26;
            if (v26 != -1)
            {
              v7 = v24 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v25;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AC980(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AC9F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8ACA70(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8ACB98(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8ACBC8()
{
  return 6;
}

uint64_t sub_20F8ACBD0()
{
  return 9;
}

uint64_t sub_20F8ACBD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  __int8 *v57;
  int8x16_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v62 = 8 * (v8 + v6) - 8 * v6 - 8;
        v63 = v5 + 8 * v6;
        while (v62)
        {
          v7 = (uint64_t *)(v63 + 8);
          ++v9;
          v64 = *(_QWORD *)(v63 + 8);
          v62 -= 8;
          v63 += 8;
          if (v64 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *v7);
          v12 = *(int8x16_t **)a2;
          if (v11 == *(int8x16_t **)a2)
          {
LABEL_11:
            v18 = v11[17];
            v88 = v11[25];
            v89 = v11[26];
            v17 = vextq_s8(v89, v89, 8uLL).u64[0];
            v75 = vextq_s8(v88, v88, 8uLL).u64[0];
            v20 = v11[15];
            v19 = v11[16];
            v86 = v11[19];
            v87 = v11[24];
            v74 = vextq_s8(v87, v87, 8uLL).u64[0];
            v83 = v11[22];
            v84 = v11[23];
            v80 = vextq_s8(v84, v84, 8uLL).u64[0];
            v81 = v11[20];
            v79 = vextq_s8(v83, v83, 8uLL).u64[0];
            v15 = v11[13];
            v21 = v11[14];
            v82 = v11[21];
            v78 = vextq_s8(v82, v82, 8uLL).u64[0];
            v73 = vextq_s8(v81, v81, 8uLL).u64[0];
            v77 = vextq_s8(v86, v86, 8uLL).u64[0];
            v22 = v11[11];
            v16 = v11[12];
            v85 = v11[18];
            v76 = vextq_s8(v85, v85, 8uLL).u64[0];
            v72 = vextq_s8(v18, v18, 8uLL).u64[0];
            v71 = vextq_s8(v19, v19, 8uLL).u64[0];
            v24 = v11[9];
            v23 = v11[10];
            v70 = vextq_s8(v20, v20, 8uLL).u64[0];
            v69 = vextq_s8(v21, v21, 8uLL).u64[0];
            v68 = vextq_s8(v15, v15, 8uLL).u64[0];
            v13 = v11[7];
            v25 = v11[8];
            v66 = vextq_s8(v16, v16, 8uLL).u64[0];
            v67 = vextq_s8(v22, v22, 8uLL).u64[0];
            v65 = vextq_s8(v23, v23, 8uLL).u64[0];
            v29 = v11[5];
            v14 = v11[6];
            v26 = vextq_s8(v24, v24, 8uLL).u64[0];
            v27 = vextq_s8(v25, v25, 8uLL).u64[0];
            v28 = vextq_s8(v13, v13, 8uLL).u64[0];
            v34 = v11[3];
            v30 = v11[4];
            v31 = vextq_s8(v14, v14, 8uLL).u64[0];
            v32 = vextq_s8(v29, v29, 8uLL).u64[0];
            v33 = vextq_s8(v30, v30, 8uLL).u64[0];
            v38 = v11[1];
            v35 = v11[2];
            v36 = vextq_s8(v34, v34, 8uLL).u64[0];
            v37 = vextq_s8(v35, v35, 8uLL).u64[0];
            v39 = *v11;
          }
          else
          {
LABEL_10:
            v14 = v11[6];
            v13 = v11[7];
            v16 = v11[12];
            v15 = v11[13];
            v88 = v11[25];
            v89 = v11[26];
            v17 = vextq_s8(v89, v89, 8uLL).u64[0];
            v86 = v11[19];
            v87 = v11[24];
            v74 = vextq_s8(v87, v87, 8uLL).u64[0];
            v75 = vextq_s8(v88, v88, 8uLL).u64[0];
            v83 = v11[22];
            v84 = v11[23];
            v79 = vextq_s8(v83, v83, 8uLL).u64[0];
            v80 = vextq_s8(v84, v84, 8uLL).u64[0];
            v81 = v11[20];
            v82 = v11[21];
            v77 = vextq_s8(v86, v86, 8uLL).u64[0];
            v78 = vextq_s8(v82, v82, 8uLL).u64[0];
            v19 = v11[16];
            v18 = v11[17];
            v85 = v11[18];
            v76 = vextq_s8(v85, v85, 8uLL).u64[0];
            v72 = vextq_s8(v18, v18, 8uLL).u64[0];
            v73 = vextq_s8(v81, v81, 8uLL).u64[0];
            v21 = v11[14];
            v20 = v11[15];
            v70 = vextq_s8(v20, v20, 8uLL).u64[0];
            v71 = vextq_s8(v19, v19, 8uLL).u64[0];
            v68 = vextq_s8(v15, v15, 8uLL).u64[0];
            v69 = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = v11[10];
            v22 = v11[11];
            v66 = vextq_s8(v16, v16, 8uLL).u64[0];
            v67 = vextq_s8(v22, v22, 8uLL).u64[0];
            v65 = vextq_s8(v23, v23, 8uLL).u64[0];
            v25 = v11[8];
            v24 = v11[9];
            v26 = vextq_s8(v24, v24, 8uLL).u64[0];
            v27 = vextq_s8(v25, v25, 8uLL).u64[0];
            v28 = vextq_s8(v13, v13, 8uLL).u64[0];
            v30 = v11[4];
            v29 = v11[5];
            v31 = vextq_s8(v14, v14, 8uLL).u64[0];
            v32 = vextq_s8(v29, v29, 8uLL).u64[0];
            v33 = vextq_s8(v30, v30, 8uLL).u64[0];
            v35 = v11[2];
            v34 = v11[3];
            v36 = vextq_s8(v34, v34, 8uLL).u64[0];
            v37 = vextq_s8(v35, v35, 8uLL).u64[0];
            v39 = *v11;
            v38 = v11[1];
          }
          v40.i64[0] = v89.i64[0];
          v40.i64[1] = v17;
          v41.i64[0] = v88.i64[0];
          v41.i64[1] = v75;
          v42.i64[0] = v87.i64[0];
          v42.i64[1] = v74;
          v21.i64[1] = v69;
          v15.i64[1] = v68;
          v16.i64[1] = v66;
          v35.i64[1] = v37;
          v38.i64[1] = vextq_s8(v38, v38, 8uLL).u64[0];
          v39.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
          v29.i64[1] = v32;
          v30.i64[1] = v33;
          v34.i64[1] = v36;
          v25.i64[1] = v27;
          v13.i64[1] = v28;
          v14.i64[1] = v31;
          v22.i64[1] = v67;
          v23.i64[1] = v65;
          v24.i64[1] = v26;
          v18.i64[1] = v72;
          v19.i64[1] = v71;
          v20.i64[1] = v70;
          v43.i64[0] = v81.i64[0];
          v43.i64[1] = v73;
          v44 = *(unsigned int *)(a2 + 16);
          v45 = (int8x16_t *)((char *)&v12[3 * v9] + 8 * (_DWORD)a3 + 8 * v44 * (9 * i + HIDWORD(a3)));
          v46.i64[0] = v86.i64[0];
          v46.i64[1] = v77;
          v47.i64[0] = v85.i64[0];
          v47.i64[1] = v76;
          *(_QWORD *)&v48 = v84.i64[0];
          *((_QWORD *)&v48 + 1) = v80;
          *(_QWORD *)&v49 = v83.i64[0];
          *((_QWORD *)&v49 + 1) = v79;
          *(_QWORD *)&v50 = v82.i64[0];
          *((_QWORD *)&v50 + 1) = v78;
          *v45 = v39;
          v45[1] = v38;
          v45[2] = v35;
          v51 = (int8x16_t *)((char *)v45 + 8 * v44);
          *v51 = v34;
          v51[1] = v30;
          v51[2] = v29;
          v52 = &v45[v44];
          *v52 = v14;
          v52[1] = v13;
          v52[2] = v25;
          v53 = (int8x16_t *)((char *)v45 + 24 * v44);
          *v53 = v24;
          v53[1] = v23;
          v53[2] = v22;
          v54 = &v45[2 * v44];
          *v54 = v16;
          v54[1] = v15;
          v54[2] = v21;
          v55 = (int8x16_t *)((char *)v45 + 40 * v44);
          *v55 = v20;
          v55[1] = v19;
          v55[2] = v18;
          v56 = &v45[3 * v44];
          *v56 = v47;
          v56[1] = v46;
          v56[2] = v43;
          v57 = &v45->i8[56 * v44];
          *(_OWORD *)v57 = v50;
          *((_OWORD *)v57 + 1) = v49;
          *((_OWORD *)v57 + 2) = v48;
          v58 = &v45[4 * v44];
          *v58 = v42;
          v58[1] = v41;
          v59 = v7 + 1;
          v58[2] = v40;
          while (v59 != v10)
          {
            ++v9;
            v61 = *v59++;
            v60 = v61;
            if (v61 != -1)
            {
              v7 = v59 - 1;
              v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * v60);
              v12 = *(int8x16_t **)a2;
              if (v11 != *(int8x16_t **)a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F8AD01C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20F8AD08C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24CA032B0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F8AD10C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (81 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F8AD234(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x51uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F8AD26C()
{
  return 9;
}

uint64_t sub_20F8AD274()
{
  return 9;
}

uint64_t sub_20F8AD27C(uint64_t result, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  int8x16_t *v62;
  __int8 *v63;
  int8x16_t *v64;
  __int8 *v65;
  int8x16_t *v66;
  __int8 *v67;
  int8x16_t *v68;
  __int8 *v69;
  int8x16_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int8x16_t v84;
  unint64_t v85;
  int8x16_t v86;
  __int128 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  uint64_t v102;
  unint64_t v103;
  int8x16_t v104;
  unint64_t v105;
  unint64_t v106;
  int8x16_t v107;
  unint64_t v108;
  int8x16_t v109;
  int8x16_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int8x16_t v114;
  int8x16_t v115;
  __int128 v116;
  __int128 v117;
  int8x16_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;

  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v74 = 8 * (v8 + v6) - 8 * v6 - 8;
        v75 = v5 + 8 * v6;
        while (v74)
        {
          v7 = (uint64_t *)(v75 + 8);
          ++v9;
          v76 = *(_QWORD *)(v75 + 8);
          v74 -= 8;
          v75 += 8;
          if (v76 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          v11 = *(_QWORD *)(result + 16) + 8 * *v7;
          v12 = *a2;
          if (v11 == *a2)
          {
LABEL_11:
            v129 = *(int8x16_t *)(v11 + 608);
            v130 = *(int8x16_t *)(v11 + 624);
            v90 = vextq_s8(v130, v130, 8uLL).u64[0];
            v89 = vextq_s8(v129, v129, 8uLL).u64[0];
            v127 = *(int8x16_t *)(v11 + 576);
            v128 = *(int8x16_t *)(v11 + 592);
            v88 = vextq_s8(v128, v128, 8uLL).u64[0];
            v85 = vextq_s8(v127, v127, 8uLL).u64[0];
            v99 = *(int8x16_t *)(v11 + 544);
            v100 = *(int8x16_t *)(v11 + 560);
            v108 = vextq_s8(v100, v100, 8uLL).u64[0];
            *(_QWORD *)&v121 = vextq_s8(v99, v99, 8uLL).u64[0];
            v97 = *(int8x16_t *)(v11 + 512);
            v98 = *(int8x16_t *)(v11 + 528);
            v118 = *(int8x16_t *)(v11 + 496);
            *(_QWORD *)&v119 = vextq_s8(v98, v98, 8uLL).u64[0];
            *(_QWORD *)&v122 = vextq_s8(v97, v97, 8uLL).u64[0];
            v30 = *(int8x16_t *)(v11 + 320);
            v29 = *(int8x16_t *)(v11 + 336);
            *(_QWORD *)&v120 = vextq_s8(v118, v118, 8uLL).u64[0];
            v114 = *(int8x16_t *)(v11 + 464);
            v115 = *(int8x16_t *)(v11 + 480);
            v83 = vextq_s8(v115, v115, 8uLL).u64[0];
            v82 = vextq_s8(v114, v114, 8uLL).u64[0];
            v33 = *(int8x16_t *)(v11 + 416);
            v27 = *(int8x16_t *)(v11 + 288);
            v26 = *(int8x16_t *)(v11 + 304);
            v109 = *(int8x16_t *)(v11 + 432);
            v110 = *(int8x16_t *)(v11 + 448);
            v81 = vextq_s8(v110, v110, 8uLL).u64[0];
            v80 = vextq_s8(v109, v109, 8uLL).u64[0];
            v32 = *(int8x16_t *)(v11 + 400);
            v106 = vextq_s8(v33, v33, 8uLL).u64[0];
            v107 = *(int8x16_t *)(v11 + 352);
            *(_QWORD *)&v126 = vextq_s8(v32, v32, 8uLL).u64[0];
            v95 = *(int8x16_t *)(v11 + 368);
            v96 = *(int8x16_t *)(v11 + 384);
            *(_QWORD *)&v125 = vextq_s8(v96, v96, 8uLL).u64[0];
            *(_QWORD *)&v124 = vextq_s8(v95, v95, 8uLL).u64[0];
            *(_QWORD *)&v123 = vextq_s8(v107, v107, 8uLL).u64[0];
            v79 = vextq_s8(v29, v29, 8uLL).u64[0];
            v77 = vextq_s8(v30, v30, 8uLL).u64[0];
            v22 = *(int8x16_t *)(v11 + 192);
            v34 = vextq_s8(v26, v26, 8uLL).u64[0];
            v35 = vextq_s8(v27, v27, 8uLL).u64[0];
            v93 = *(_QWORD *)(v11 + 272);
            v94 = *(int8x16_t *)(v11 + 256);
            v104 = *(int8x16_t *)(v11 + 208);
            v105 = vextq_s8(*(int8x16_t *)(v11 + 272), *(int8x16_t *)(v11 + 272), 8uLL).u64[0];
            v20 = *(int8x16_t *)(v11 + 160);
            v23 = *(int8x16_t *)(v11 + 176);
            *(_QWORD *)&v24 = vextq_s8(v94, v94, 8uLL).u64[0];
            v91 = *(int8x16_t *)(v11 + 224);
            v92 = *(int8x16_t *)(v11 + 240);
            *(_QWORD *)&v116 = vextq_s8(v92, v92, 8uLL).u64[0];
            *(_QWORD *)&v25 = vextq_s8(v91, v91, 8uLL).u64[0];
            v31 = *(int8x16_t *)(v11 + 128);
            v21 = *(int8x16_t *)(v11 + 144);
            *(_QWORD *)&v113 = vextq_s8(v104, v104, 8uLL).u64[0];
            v36 = vextq_s8(v22, v22, 8uLL).u64[0];
            v37 = vextq_s8(v23, v23, 8uLL).u64[0];
            v38 = vextq_s8(v20, v20, 8uLL).u64[0];
            v39 = vextq_s8(v21, v21, 8uLL).u64[0];
            v103 = vextq_s8(v31, v31, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v11 + 80);
            v86 = *(int8x16_t *)(v11 + 112);
            *(_QWORD *)&v19 = vextq_s8(v86, v86, 8uLL).u64[0];
            v84 = *(int8x16_t *)(v11 + 96);
            *(_QWORD *)&v111 = vextq_s8(v84, v84, 8uLL).u64[0];
            *(_QWORD *)&v18 = vextq_s8(v28, v28, 8uLL).u64[0];
            v16 = *(int8x16_t *)(v11 + 32);
            v15 = *(int8x16_t *)(v11 + 48);
            v101 = *(int8x16_t *)(v11 + 64);
            *(_QWORD *)&v17 = vextq_s8(v101, v101, 8uLL).u64[0];
            v40 = vextq_s8(v15, v15, 8uLL).u64[0];
            v41 = vextq_s8(v16, v16, 8uLL).u64[0];
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
          }
          else
          {
LABEL_10:
            v14 = *(int8x16_t *)v11;
            v13 = *(int8x16_t *)(v11 + 16);
            v16 = *(int8x16_t *)(v11 + 32);
            v15 = *(int8x16_t *)(v11 + 48);
            v17 = *(_OWORD *)(v11 + 72);
            v18 = *(_OWORD *)(v11 + 88);
            v19 = *(_OWORD *)(v11 + 120);
            v21 = *(int8x16_t *)(v11 + 144);
            v20 = *(int8x16_t *)(v11 + 160);
            v23 = *(int8x16_t *)(v11 + 176);
            v22 = *(int8x16_t *)(v11 + 192);
            v24 = *(_OWORD *)(v11 + 264);
            v25 = *(_OWORD *)(v11 + 232);
            v27 = *(int8x16_t *)(v11 + 288);
            v26 = *(int8x16_t *)(v11 + 304);
            v111 = *(_OWORD *)(v11 + 104);
            v113 = *(_OWORD *)(v11 + 216);
            v86.i64[0] = *(_QWORD *)(v11 + 112);
            v84.i64[0] = *(_QWORD *)(v11 + 96);
            v28.i64[0] = *(_QWORD *)(v11 + 80);
            v30 = *(int8x16_t *)(v11 + 320);
            v29 = *(int8x16_t *)(v11 + 336);
            v116 = *(_OWORD *)(v11 + 248);
            v94.i64[0] = *(_QWORD *)(v11 + 256);
            v92.i64[0] = *(_QWORD *)(v11 + 240);
            v91.i64[0] = *(_QWORD *)(v11 + 224);
            v93 = *(_QWORD *)(v11 + 272);
            v125 = *(_OWORD *)(v11 + 392);
            v126 = *(_OWORD *)(v11 + 408);
            v123 = *(_OWORD *)(v11 + 360);
            v124 = *(_OWORD *)(v11 + 376);
            v96.i64[0] = *(_QWORD *)(v11 + 384);
            v95.i64[0] = *(_QWORD *)(v11 + 368);
            v121 = *(_OWORD *)(v11 + 552);
            v122 = *(_OWORD *)(v11 + 520);
            v100.i64[0] = *(_QWORD *)(v11 + 560);
            v119 = *(_OWORD *)(v11 + 536);
            v120 = *(_OWORD *)(v11 + 504);
            v99.i64[0] = *(_QWORD *)(v11 + 544);
            v98.i64[0] = *(_QWORD *)(v11 + 528);
            v97.i64[0] = *(_QWORD *)(v11 + 512);
            v129 = *(int8x16_t *)(v11 + 608);
            v130 = *(int8x16_t *)(v11 + 624);
            v90 = vextq_s8(v130, v130, 8uLL).u64[0];
            v89 = vextq_s8(v129, v129, 8uLL).u64[0];
            v127 = *(int8x16_t *)(v11 + 576);
            v128 = *(int8x16_t *)(v11 + 592);
            v88 = vextq_s8(v128, v128, 8uLL).u64[0];
            v31.i64[0] = *(_QWORD *)(v11 + 128);
            v85 = vextq_s8(v127, v127, 8uLL).u64[0];
            v32.i64[0] = *(_QWORD *)(v11 + 400);
            v114 = *(int8x16_t *)(v11 + 464);
            v115 = *(int8x16_t *)(v11 + 480);
            v83 = vextq_s8(v115, v115, 8uLL).u64[0];
            v82 = vextq_s8(v114, v114, 8uLL).u64[0];
            v109 = *(int8x16_t *)(v11 + 432);
            v110 = *(int8x16_t *)(v11 + 448);
            v81 = vextq_s8(v110, v110, 8uLL).u64[0];
            v103 = *(_QWORD *)(v11 + 136);
            v80 = vextq_s8(v109, v109, 8uLL).u64[0];
            v33.i64[0] = *(_QWORD *)(v11 + 416);
            v79 = vextq_s8(v29, v29, 8uLL).u64[0];
            v101.i64[0] = *(_QWORD *)(v11 + 64);
            v77 = vextq_s8(v30, v30, 8uLL).u64[0];
            v105 = *(_QWORD *)(v11 + 280);
            v34 = vextq_s8(v26, v26, 8uLL).u64[0];
            v35 = vextq_s8(v27, v27, 8uLL).u64[0];
            v104.i64[0] = *(_QWORD *)(v11 + 208);
            v36 = vextq_s8(v22, v22, 8uLL).u64[0];
            v106 = *(_QWORD *)(v11 + 424);
            v37 = vextq_s8(v23, v23, 8uLL).u64[0];
            v38 = vextq_s8(v20, v20, 8uLL).u64[0];
            v107.i64[0] = *(_QWORD *)(v11 + 352);
            v39 = vextq_s8(v21, v21, 8uLL).u64[0];
            v108 = *(_QWORD *)(v11 + 568);
            v40 = vextq_s8(v15, v15, 8uLL).u64[0];
            v41 = vextq_s8(v16, v16, 8uLL).u64[0];
            v118.i64[0] = *(_QWORD *)(v11 + 496);
          }
          v102 = *(_QWORD *)(v11 + 640);
          v15.i64[1] = v40;
          v16.i64[1] = v41;
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          *((_QWORD *)&v19 + 1) = v31.i64[0];
          v78 = v19;
          *(_QWORD *)&v42 = v111;
          *(_QWORD *)&v43 = v113;
          *((_QWORD *)&v42 + 1) = v86.i64[0];
          *((_QWORD *)&v18 + 1) = v84.i64[0];
          v87 = v18;
          *((_QWORD *)&v17 + 1) = v28.i64[0];
          v22.i64[1] = v36;
          v23.i64[1] = v37;
          v20.i64[1] = v38;
          v21.i64[1] = v39;
          *((_QWORD *)&v24 + 1) = v93;
          v112 = v24;
          *(_QWORD *)&v44 = v116;
          *((_QWORD *)&v44 + 1) = v94.i64[0];
          *((_QWORD *)&v25 + 1) = v92.i64[0];
          v117 = v25;
          *((_QWORD *)&v43 + 1) = v91.i64[0];
          v29.i64[1] = v79;
          v30.i64[1] = v77;
          v26.i64[1] = v34;
          v27.i64[1] = v35;
          *(_QWORD *)&v46 = v125;
          *(_QWORD *)&v45 = v126;
          *((_QWORD *)&v45 + 1) = v33.i64[0];
          *((_QWORD *)&v46 + 1) = v32.i64[0];
          *(_QWORD *)&v48 = v123;
          *(_QWORD *)&v47 = v124;
          *((_QWORD *)&v47 + 1) = v96.i64[0];
          *((_QWORD *)&v48 + 1) = v95.i64[0];
          v50.i64[0] = v114.i64[0];
          v49.i64[0] = v115.i64[0];
          v49.i64[1] = v83;
          v50.i64[1] = v82;
          v52.i64[0] = v109.i64[0];
          v51.i64[0] = v110.i64[0];
          v51.i64[1] = v81;
          v52.i64[1] = v80;
          *(_QWORD *)&v53 = v121;
          *(_QWORD *)&v54 = v122;
          *((_QWORD *)&v53 + 1) = v100.i64[0];
          *(_QWORD *)&v56 = v119;
          *(_QWORD *)&v55 = v120;
          *((_QWORD *)&v56 + 1) = v99.i64[0];
          *((_QWORD *)&v54 + 1) = v98.i64[0];
          *((_QWORD *)&v55 + 1) = v97.i64[0];
          v57.i64[0] = v130.i64[0];
          v57.i64[1] = v90;
          v58.i64[0] = v129.i64[0];
          v58.i64[1] = v89;
          v59.i64[0] = v128.i64[0];
          v59.i64[1] = v88;
          v60.i64[0] = v127.i64[0];
          v60.i64[1] = v85;
          v61 = *((unsigned int *)a2 + 4);
          v62 = (int8x16_t *)(v12 + 8 * (9 * v9 + (_DWORD)a3 + v61 * (9 * i + HIDWORD(a3))));
          *v62 = v14;
          v62[1] = v13;
          v62[4].i64[0] = v101.i64[0];
          v62[2] = v16;
          v62[3] = v15;
          v63 = &v62->i8[8 * v61];
          *(_OWORD *)v63 = v17;
          *((_OWORD *)v63 + 1) = v87;
          *((_QWORD *)v63 + 8) = v103;
          *((_OWORD *)v63 + 2) = v42;
          *((_OWORD *)v63 + 3) = v78;
          v64 = &v62[v61];
          *v64 = v21;
          v64[1] = v20;
          v64[4].i64[0] = v104.i64[0];
          v64[2] = v23;
          v64[3] = v22;
          v65 = &v62->i8[24 * v61];
          *(_OWORD *)v65 = v43;
          *((_OWORD *)v65 + 1) = v117;
          *((_QWORD *)v65 + 8) = v105;
          *((_OWORD *)v65 + 2) = v44;
          *((_OWORD *)v65 + 3) = v112;
          v66 = &v62[2 * v61];
          *v66 = v27;
          v66[1] = v26;
          v66[4].i64[0] = v107.i64[0];
          v66[2] = v30;
          v66[3] = v29;
          v67 = &v62->i8[40 * v61];
          *(_OWORD *)v67 = v48;
          *((_OWORD *)v67 + 1) = v47;
          *((_QWORD *)v67 + 8) = v106;
          *((_OWORD *)v67 + 2) = v46;
          *((_OWORD *)v67 + 3) = v45;
          v68 = &v62[3 * v61];
          *v68 = v52;
          v68[1] = v51;
          v68[4].i64[0] = v118.i64[0];
          v68[2] = v50;
          v68[3] = v49;
          v69 = &v62->i8[56 * v61];
          *(_OWORD *)v69 = v55;
          *((_OWORD *)v69 + 1) = v54;
          *((_QWORD *)v69 + 8) = v108;
          *((_OWORD *)v69 + 2) = v56;
          *((_OWORD *)v69 + 3) = v53;
          v70 = &v62[4 * v61];
          *v70 = v60;
          v70[1] = v59;
          v70[4].i64[0] = v102;
          v71 = v7 + 1;
          v70[2] = v58;
          v70[3] = v57;
          while (v71 != v10)
          {
            ++v9;
            v73 = *v71++;
            v72 = v73;
            if (v73 != -1)
            {
              v7 = v71 - 1;
              v11 = *(_QWORD *)(result + 16) + 8 * v72;
              v12 = *a2;
              if (v11 != *a2)
                goto LABEL_10;
              goto LABEL_11;
            }
          }
          v3 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8AD8F8(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(result + 88);
      v6 = *(_DWORD *)(result + 112) * i;
      v7 = (uint64_t *)(v5 + 8 * v6);
      v8 = *(_DWORD *)(result + 8);
      if (v8 && *v7 == -1)
      {
        v9 = 0;
        v23 = 8 * (v8 + v6) - 8 * v6 - 8;
        v24 = v5 + 8 * v6;
        while (v23)
        {
          v7 = (uint64_t *)(v24 + 8);
          ++v9;
          v25 = *(_QWORD *)(v24 + 8);
          v23 -= 8;
          v24 += 8;
          if (v25 != -1)
            goto LABEL_8;
        }
      }
      else
      {
        v9 = 0;
LABEL_8:
        v10 = (uint64_t *)(v5 + 8 * (v6 + v8));
        if (v7 != v10)
        {
          if (i == v9)
          {
            v11 = *v7;
LABEL_18:
            v17 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v11);
            v18 = *a2 + 8 * (9 * i + a3);
            *(_QWORD *)&v19 = *v17;
            if (v17 == (_QWORD *)*a2)
            {
              *(_QWORD *)&v20 = v17[20];
              *(_QWORD *)&v21 = v17[40];
              *(_QWORD *)&v22 = v17[60];
              *((_QWORD *)&v19 + 1) = v17[10];
              *((_QWORD *)&v20 + 1) = v17[30];
              *((_QWORD *)&v21 + 1) = v17[50];
              *((_QWORD *)&v22 + 1) = v17[70];
              *(_QWORD *)(v18 + 64) = v17[80];
              *(_OWORD *)(v18 + 32) = v21;
              *(_OWORD *)(v18 + 48) = v22;
              *(_OWORD *)v18 = v19;
              *(_OWORD *)(v18 + 16) = v20;
              v3 = *(unsigned int *)(result + 12);
            }
            else
            {
              *(_QWORD *)v18 = v19;
              *(_QWORD *)(v18 + 8) = v17[10];
              *(_QWORD *)(v18 + 16) = v17[20];
              *(_QWORD *)(v18 + 24) = v17[30];
              *(_QWORD *)(v18 + 32) = v17[40];
              *(_QWORD *)(v18 + 40) = v17[50];
              *(_QWORD *)(v18 + 48) = v17[60];
              *(_QWORD *)(v18 + 56) = v17[70];
              *(_QWORD *)(v18 + 64) = v17[80];
            }
          }
          else
          {
            v12 = v9 + 1;
            v13 = v7 + 1;
            while (v13 != v10)
            {
              v14 = *v13++;
              v11 = v14;
              v15 = v12++;
              if (v14 != -1 && i == v15)
                goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F8ADA70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(_QWORD *)(a1 + 248) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 216);
  if (v3)
  {
    *(_QWORD *)(a1 + 224) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 144);
  if (v6)
  {
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(_QWORD *)(a1 + 128) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(_QWORD *)(a1 + 80) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 24);
  if (v11)
  {
    *(_QWORD *)(a1 + 32) = v11;
    operator delete(v11);
  }
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_20F8ADB48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20F89E908((uint64_t)(a1 + 198));
  v2 = a1[195];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[192];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[189];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[186];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[183];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[180];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  sub_20F89E908((uint64_t)(a1 + 150));
  sub_20F89E908((uint64_t)(a1 + 120));
  sub_20F89E908((uint64_t)(a1 + 90));
  sub_20F89E908((uint64_t)(a1 + 60));
  sub_20F89E908((uint64_t)(a1 + 30));
  return sub_20F89E908((uint64_t)a1);
}

_QWORD *sub_20F8ADC44(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  sub_20F89E908((uint64_t)(a1 + 188));
  sub_20F89E908((uint64_t)(a1 + 158));
  sub_20F89E908((uint64_t)(a1 + 128));
  v2 = (void *)a1[115];
  if (v2)
  {
    a1[116] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[112];
  if (v3)
  {
    a1[113] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[109];
  if (v4)
  {
    a1[110] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[106];
  if (v5)
  {
    a1[107] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[103];
  if (v6)
  {
    a1[104] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[100];
  if (v7)
  {
    a1[101] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[97];
  if (v8)
  {
    a1[98] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[94];
  if (v9)
  {
    a1[95] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[91];
  if (v10)
  {
    a1[92] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[88];
  if (v11)
  {
    a1[89] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[85];
  if (v12)
  {
    a1[86] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[82];
  if (v13)
  {
    a1[83] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[79];
  if (v14)
  {
    a1[80] = v14;
    operator delete(v14);
  }
  sub_20F89E908((uint64_t)(a1 + 39));
  v15 = (void *)a1[36];
  if (v15)
  {
    a1[37] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[33];
  if (v16)
  {
    a1[34] = v16;
    operator delete(v16);
  }
  sub_20F89E908((uint64_t)(a1 + 3));
  return a1;
}

_QWORD *sub_20F8ADD80(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  sub_20F89E908((uint64_t)(a1 + 185));
  sub_20F89E908((uint64_t)(a1 + 155));
  sub_20F89E908((uint64_t)(a1 + 125));
  v2 = (void *)a1[112];
  if (v2)
  {
    a1[113] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[109];
  if (v3)
  {
    a1[110] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[106];
  if (v4)
  {
    a1[107] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[103];
  if (v5)
  {
    a1[104] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[100];
  if (v6)
  {
    a1[101] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[97];
  if (v7)
  {
    a1[98] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[94];
  if (v8)
  {
    a1[95] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[91];
  if (v9)
  {
    a1[92] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[88];
  if (v10)
  {
    a1[89] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[85];
  if (v11)
  {
    a1[86] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[82];
  if (v12)
  {
    a1[83] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[79];
  if (v13)
  {
    a1[80] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[76];
  if (v14)
  {
    a1[77] = v14;
    operator delete(v14);
  }
  sub_20F89E908((uint64_t)(a1 + 36));
  v15 = (void *)a1[33];
  if (v15)
  {
    a1[34] = v15;
    operator delete(v15);
  }
  sub_20F89E908((uint64_t)(a1 + 3));
  return a1;
}

double sub_20F8ADEAC()
{
  return 0.0;
}

double sub_20F8ADEB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t v25;
  uint64_t k;
  uint64_t v27;
  uint64_t v33;
  uint64_t m;
  uint64_t v35;
  uint64_t n;
  uint64_t v42;
  uint64_t ii;
  uint64_t v47;
  uint64_t jj;
  uint64_t v49;
  uint64_t kk;
  uint64_t v55;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t mm;
  uint64_t v67;
  uint64_t nn;
  uint64_t v72;
  unsigned int v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  double v78;

  v2 = a1[40];
  v3 = a1[41];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v74 = 3;
      v75 = v5 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[52]; j != a1[53]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  v25 = a1[64];
  for (k = a1[65]; v25 != k; v25 += 16)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if ((*(_BYTE *)(v27 + 4) & 2) == 0 && *(_BYTE *)(v27 + 20))
    {
      v74 = 3;
      v75 = v27 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v27 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v27 + 120) * *(double *)(v27 + 120);
    }
  }
  v33 = a1[76];
  for (m = a1[77]; v33 != m; v33 += 16)
  {
    v35 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v35 + 4) & 2) == 0 && *(_BYTE *)(v35 + 20))
    {
      v74 = 3;
      v75 = v35 + 32;
      v76 = 0;
      v78 = 0.0;
      v77 = 0uLL;
      sub_20F053450(&v74, (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D5 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v35 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v35 + 120) * *(double *)(v35 + 120);
    }
  }
  for (n = a1[88]; n != a1[89]; n += 16)
  {
    v42 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v42 + 48) * *(double *)(v42 + 48);
    }
  }
  for (ii = a1[100]; ii != a1[101]; ii += 16)
  {
    v47 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v47 + 4) & 2) == 0 && *(_BYTE *)(v47 + 20))
      i = i + *(double *)(v47 + 32) * *(double *)(v47 + 32);
  }
  for (jj = a1[112]; jj != a1[113]; jj += 16)
  {
    v49 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      _Q1 = *(_OWORD *)(v49 + 32);
      _D3 = *(_QWORD *)(v49 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v49 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (kk = a1[124]; kk != a1[125]; kk += 16)
  {
    v55 = *(_QWORD *)(kk + 8);
    if ((*(_BYTE *)(v55 + 4) & 2) == 0 && *(_BYTE *)(v55 + 20))
    {
      _Q1 = *(_OWORD *)(v55 + 32);
      _D3 = *(_QWORD *)(v55 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v55 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v60 = a1[136];
  v61 = a1[137];
  while (v60 != v61)
  {
    v62 = *(_QWORD *)(v60 + 8);
    if ((*(_BYTE *)(v62 + 4) & 2) == 0 && *(_BYTE *)(v62 + 20))
    {
      v77 = 0uLL;
      v78 = 0.0;
      sub_20E9733B8((float64x2_t *)(v62 + 32), (double *)&v77);
      _V1.D[1] = *((_QWORD *)&v77 + 1);
      _D3 = *((_QWORD *)&v77 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v78 * v78;
    }
    v60 += 16;
  }
  for (mm = a1[148]; mm != a1[149]; mm += 16)
  {
    v67 = *(_QWORD *)(mm + 8);
    if ((*(_BYTE *)(v67 + 4) & 2) == 0 && *(_BYTE *)(v67 + 20))
    {
      _Q1 = *(_OWORD *)(v67 + 32);
      _D3 = *(_QWORD *)(v67 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + *(double *)(v67 + 48) * *(double *)(v67 + 48);
    }
  }
  for (nn = a1[160]; nn != a1[161]; nn += 16)
  {
    v72 = *(_QWORD *)(nn + 8);
    if ((*(_BYTE *)(v72 + 4) & 2) == 0 && *(_BYTE *)(v72 + 20))
      i = i + *(double *)(v72 + 32) * *(double *)(v72 + 32);
  }
  return i;
}

uint64_t sub_20F8AE340(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA03FB8;
  sub_20F8ADA70(a1 + 2392);
  sub_20F8ADA70(a1 + 2128);
  sub_20F8ADA70(a1 + 1864);
  sub_20F8ADA70(a1 + 1600);
  v2 = *(void **)(a1 + 1520);
  if (v2)
  {
    *(_QWORD *)(a1 + 1528) = v2;
    operator delete(v2);
  }
  sub_20F8AE430((void **)(a1 + 1064));
  sub_20F8AF650(a1 + 8);
  return a1;
}

void sub_20F8AE3B0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA03FB8;
  sub_20F8ADA70(a1 + 2392);
  sub_20F8ADA70(a1 + 2128);
  sub_20F8ADA70(a1 + 1864);
  sub_20F8ADA70(a1 + 1600);
  v2 = *(void **)(a1 + 1520);
  if (v2)
  {
    *(_QWORD *)(a1 + 1528) = v2;
    operator delete(v2);
  }
  sub_20F8AE430((void **)(a1 + 1064));
  sub_20F8AF650(a1 + 8);
  JUMPOUT(0x212BC6398);
}

void **sub_20F8AE430(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  char *v119;
  char *v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;

  v2 = (char *)a1[54];
  if (v2)
  {
    v3 = (char *)a1[55];
    v4 = a1[54];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = a1[54];
    }
    a1[55] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[51];
  if (v8)
  {
    v9 = (char *)a1[52];
    v10 = a1[51];
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 2);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 184;
      }
      while (v9 != v8);
      v10 = a1[51];
    }
    a1[52] = v8;
    operator delete(v10);
  }
  v14 = (char *)a1[48];
  if (v14)
  {
    v15 = (char *)a1[49];
    v16 = a1[48];
    if (v15 != v14)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 2);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 216;
      }
      while (v15 != v14);
      v16 = a1[48];
    }
    a1[49] = v14;
    operator delete(v16);
  }
  v20 = (char *)a1[45];
  if (v20)
  {
    v21 = (char *)a1[46];
    v22 = a1[45];
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 2);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 176;
      }
      while (v21 != v20);
      v22 = a1[45];
    }
    a1[46] = v20;
    operator delete(v22);
  }
  v26 = (char *)a1[42];
  if (v26)
  {
    v27 = (char *)a1[43];
    v28 = a1[42];
    if (v27 != v26)
    {
      do
      {
        v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 2);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 176;
      }
      while (v27 != v26);
      v28 = a1[42];
    }
    a1[43] = v26;
    operator delete(v28);
  }
  v32 = (char *)a1[39];
  if (v32)
  {
    v33 = (char *)a1[40];
    v34 = a1[39];
    if (v33 != v32)
    {
      do
      {
        v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 2);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 208;
      }
      while (v33 != v32);
      v34 = a1[39];
    }
    a1[40] = v32;
    operator delete(v34);
  }
  v38 = (char *)a1[36];
  if (v38)
  {
    v39 = (char *)a1[37];
    v40 = a1[36];
    if (v39 != v38)
    {
      do
      {
        v41 = (std::__shared_weak_count *)*((_QWORD *)v39 - 2);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v39 -= 208;
      }
      while (v39 != v38);
      v40 = a1[36];
    }
    a1[37] = v38;
    operator delete(v40);
  }
  v44 = (char *)a1[33];
  if (v44)
  {
    v45 = (char *)a1[34];
    v46 = a1[33];
    if (v45 != v44)
    {
      do
      {
        v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 2);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v45 -= 112;
      }
      while (v45 != v44);
      v46 = a1[33];
    }
    a1[34] = v44;
    operator delete(v46);
  }
  v50 = (char *)a1[30];
  if (v50)
  {
    v51 = (char *)a1[31];
    v52 = a1[30];
    if (v51 != v50)
    {
      do
      {
        v53 = (std::__shared_weak_count *)*((_QWORD *)v51 - 2);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v51 -= 360;
      }
      while (v51 != v50);
      v52 = a1[30];
    }
    a1[31] = v50;
    operator delete(v52);
  }
  v56 = (char *)a1[27];
  if (v56)
  {
    v57 = (char *)a1[28];
    v58 = a1[27];
    if (v57 != v56)
    {
      do
      {
        v59 = (std::__shared_weak_count *)*((_QWORD *)v57 - 2);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v57 -= 304;
      }
      while (v57 != v56);
      v58 = a1[27];
    }
    a1[28] = v56;
    operator delete(v58);
  }
  v62 = (char *)a1[24];
  if (v62)
  {
    v63 = (char *)a1[25];
    v64 = a1[24];
    if (v63 == v62)
    {
LABEL_127:
      a1[25] = v62;
      operator delete(v64);
      goto LABEL_128;
    }
    while (1)
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)v63 - 2);
      if (!v65)
        goto LABEL_119;
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
        v68 = (std::__shared_weak_count *)*((_QWORD *)v63 - 15);
        if (v68)
        {
LABEL_120:
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      else
      {
LABEL_119:
        v68 = (std::__shared_weak_count *)*((_QWORD *)v63 - 15);
        if (v68)
          goto LABEL_120;
      }
      v63 -= 152;
      if (v63 == v62)
      {
        v64 = a1[24];
        goto LABEL_127;
      }
    }
  }
LABEL_128:
  v71 = (char *)a1[21];
  if (!v71)
    goto LABEL_145;
  v72 = (char *)a1[22];
  v73 = a1[21];
  if (v72 != v71)
  {
    while (1)
    {
      v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 2);
      if (!v74)
        goto LABEL_136;
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
        v77 = (std::__shared_weak_count *)*((_QWORD *)v72 - 14);
        if (v77)
        {
LABEL_137:
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
      }
      else
      {
LABEL_136:
        v77 = (std::__shared_weak_count *)*((_QWORD *)v72 - 14);
        if (v77)
          goto LABEL_137;
      }
      v72 -= 144;
      if (v72 == v71)
      {
        v73 = a1[21];
        break;
      }
    }
  }
  a1[22] = v71;
  operator delete(v73);
LABEL_145:
  v80 = (char *)a1[18];
  if (v80)
  {
    v81 = (char *)a1[19];
    v82 = a1[18];
    if (v81 != v80)
    {
      do
      {
        v83 = (std::__shared_weak_count *)*((_QWORD *)v81 - 2);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v81 -= 5336;
      }
      while (v81 != v80);
      v82 = a1[18];
    }
    a1[19] = v80;
    operator delete(v82);
  }
  v86 = (char *)a1[15];
  if (v86)
  {
    v87 = (char *)a1[16];
    v88 = a1[15];
    if (v87 != v86)
    {
      do
      {
        v89 = (std::__shared_weak_count *)*((_QWORD *)v87 - 2);
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v87 -= 8016;
      }
      while (v87 != v86);
      v88 = a1[15];
    }
    a1[16] = v86;
    operator delete(v88);
  }
  v92 = (char *)a1[12];
  if (v92)
  {
    v93 = (char *)a1[13];
    v94 = a1[12];
    if (v93 == v92)
    {
LABEL_183:
      a1[13] = v92;
      operator delete(v94);
      goto LABEL_184;
    }
    while (1)
    {
      v95 = (std::__shared_weak_count *)*((_QWORD *)v93 - 2);
      if (!v95)
        goto LABEL_175;
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        v98 = (std::__shared_weak_count *)*((_QWORD *)v93 - 13);
        if (v98)
        {
LABEL_176:
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
      }
      else
      {
LABEL_175:
        v98 = (std::__shared_weak_count *)*((_QWORD *)v93 - 13);
        if (v98)
          goto LABEL_176;
      }
      v93 -= 160;
      if (v93 == v92)
      {
        v94 = a1[12];
        goto LABEL_183;
      }
    }
  }
LABEL_184:
  v101 = (char *)a1[9];
  if (!v101)
    goto LABEL_201;
  v102 = (char *)a1[10];
  v103 = a1[9];
  if (v102 != v101)
  {
    while (1)
    {
      v104 = (std::__shared_weak_count *)*((_QWORD *)v102 - 2);
      if (!v104)
        goto LABEL_192;
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        v107 = (std::__shared_weak_count *)*((_QWORD *)v102 - 19);
        if (v107)
        {
LABEL_193:
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
      }
      else
      {
LABEL_192:
        v107 = (std::__shared_weak_count *)*((_QWORD *)v102 - 19);
        if (v107)
          goto LABEL_193;
      }
      v102 -= 280;
      if (v102 == v101)
      {
        v103 = a1[9];
        break;
      }
    }
  }
  a1[10] = v101;
  operator delete(v103);
LABEL_201:
  v110 = (char *)a1[6];
  if (!v110)
    goto LABEL_218;
  v111 = (char *)a1[7];
  v112 = a1[6];
  if (v111 != v110)
  {
    while (1)
    {
      v113 = (std::__shared_weak_count *)*((_QWORD *)v111 - 2);
      if (!v113)
        goto LABEL_209;
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
        v116 = (std::__shared_weak_count *)*((_QWORD *)v111 - 19);
        if (v116)
        {
LABEL_210:
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
      }
      else
      {
LABEL_209:
        v116 = (std::__shared_weak_count *)*((_QWORD *)v111 - 19);
        if (v116)
          goto LABEL_210;
      }
      v111 -= 280;
      if (v111 == v110)
      {
        v112 = a1[6];
        break;
      }
    }
  }
  a1[7] = v110;
  operator delete(v112);
LABEL_218:
  v119 = (char *)a1[3];
  if (!v119)
    goto LABEL_235;
  v120 = (char *)a1[4];
  v121 = a1[3];
  if (v120 != v119)
  {
    while (1)
    {
      v122 = (std::__shared_weak_count *)*((_QWORD *)v120 - 2);
      if (!v122)
        goto LABEL_226;
      v123 = (unint64_t *)&v122->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
        v125 = (std::__shared_weak_count *)*((_QWORD *)v120 - 19);
        if (v125)
        {
LABEL_227:
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
      }
      else
      {
LABEL_226:
        v125 = (std::__shared_weak_count *)*((_QWORD *)v120 - 19);
        if (v125)
          goto LABEL_227;
      }
      v120 -= 280;
      if (v120 == v119)
      {
        v121 = a1[3];
        break;
      }
    }
  }
  a1[4] = v119;
  operator delete(v121);
LABEL_235:
  v128 = (char *)*a1;
  if (*a1)
  {
    v129 = (char *)a1[1];
    v130 = *a1;
    if (v129 == v128)
    {
LABEL_251:
      a1[1] = v128;
      operator delete(v130);
      return a1;
    }
    while (1)
    {
      v131 = (std::__shared_weak_count *)*((_QWORD *)v129 - 2);
      if (!v131)
        goto LABEL_243;
      v132 = (unint64_t *)&v131->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
        v134 = (std::__shared_weak_count *)*((_QWORD *)v129 - 38);
        if (v134)
        {
LABEL_244:
          v135 = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
      }
      else
      {
LABEL_243:
        v134 = (std::__shared_weak_count *)*((_QWORD *)v129 - 38);
        if (v134)
          goto LABEL_244;
      }
      v129 -= 504;
      if (v129 == v128)
      {
        v130 = *a1;
        goto LABEL_251;
      }
    }
  }
  return a1;
}

uint64_t sub_20F8AEE9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 184);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AEF04(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 168);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AEF6C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 160);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AEFD4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 152);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF03C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF0A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF10C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 344);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF174(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 336);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF1E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 280);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F8AF248(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF2F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF3A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF44C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF4F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 56);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF5A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 48);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20F8AF650(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  sub_20F393270(a1 + 984);
  v2 = *(void **)(a1 + 960);
  if (v2)
  {
    *(_QWORD *)(a1 + 968) = v2;
    operator delete(v2);
  }
  sub_20F8AF748(a1 + 888);
  v3 = *(void **)(a1 + 864);
  if (v3)
  {
    *(_QWORD *)(a1 + 872) = v3;
    operator delete(v3);
  }
  sub_20F4EEA20(a1 + 768);
  sub_20F4EFD04(a1 + 672);
  sub_20F4F0FE8(a1 + 576);
  sub_20F4F2E90(a1 + 504);
  v4 = *(void **)(a1 + 480);
  if (v4)
  {
    *(_QWORD *)(a1 + 488) = v4;
    operator delete(v4);
  }
  sub_20F8B047C(a1 + 408);
  v5 = *(void **)(a1 + 384);
  if (v5)
  {
    *(_QWORD *)(a1 + 392) = v5;
    operator delete(v5);
  }
  sub_20F8B11B0(a1 + 312);
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  sub_20F4F22CC(a1 + 216);
  v7 = *(void **)(a1 + 192);
  if (v7)
  {
    *(_QWORD *)(a1 + 200) = v7;
    operator delete(v7);
  }
  sub_20F4F3BC4(a1 + 120);
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
  }
  sub_20F3C8180(a1 + 24);
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_20F8AF748(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F8AF9D0((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F8AF860(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F8AF860(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 88 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 88 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F8AF9D0(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F8B0174(v10, v57);
          v10 = v57 + 1;
          result = sub_20F8B0174(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F8AF9D0(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F8B0174(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F8B047C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F8B0704((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F8B0594(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F8B0594(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 80 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 80 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F8B0704(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F8B0EA8(v10, v57);
          v10 = v57 + 1;
          result = sub_20F8B0EA8(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F8B0704(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F8B0EA8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F8B11B0(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F8B12C8((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F3C8FCC(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F8B12C8(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F8B1A6C(v10, v57);
          v10 = v57 + 1;
          result = sub_20F8B1A6C(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F8B12C8(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F8B1A6C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t sub_20F8B1D74(uint64_t a1)
{
  uint64_t v1;
  double *v2;
  _QWORD *v3;
  double *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL *v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  std::string *v36;
  int64x2_t v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  char v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  float64x2_t *v66;
  unsigned int *v67;
  float64x2_t *v68;
  double *f64;
  uint64_t v70;
  double *v71;
  int v72;
  unsigned int v73;
  double v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  unint64_t v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char **v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  char **v115;
  char *v116;
  char *v117;
  char **v118;
  char *v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int v122;
  int64_t v123;
  int v124;
  uint64_t j;
  uint64_t v126;
  uint64_t k;
  uint64_t v128;
  uint64_t m;
  uint64_t v130;
  uint64_t n;
  uint64_t v132;
  uint64_t ii;
  uint64_t v134;
  uint64_t jj;
  uint64_t v136;
  uint64_t kk;
  uint64_t v138;
  uint64_t mm;
  uint64_t v140;
  uint64_t nn;
  uint64_t v142;
  uint64_t i1;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  _QWORD *v219;
  void *v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int64x2_t *v231;
  uint64_t v232;
  _BYTE *v233;
  _BYTE *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  float64x2_t *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  float64x2_t *v260;
  int64x2_t *v261;
  int64x2_t v262;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v285;
  float64x2_t v292;
  int8x16_t v293;
  int8x16_t v294;
  uint64_t v295;
  float64x2_t *v296;
  float64x2_t *v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  uint64_t v306;
  unsigned int v307;
  float64x2_t *v308;
  int64x2_t *v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  float64x2_t v313;
  int64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  float64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t *v367;
  int64x2_t *v368;
  float64x2_t *v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  float64x2_t v373;
  int64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t *v389;
  uint64_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  uint64_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t *v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  double v460;
  double v461;
  double v462;
  float64x2_t v463;
  float64_t v464;
  float64x2_t v465;
  double v466;
  double v467;
  double v468;
  double v469;
  int v470;
  float64x2_t *v471;
  double *v472;
  unint64_t v473;
  _OWORD *v474;
  unsigned int v475;
  unsigned int v476;
  unint64_t v477;
  int v478;
  unsigned int v479;
  double *v480;
  unsigned int v481;
  double v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  double v492;
  uint64_t v498;
  double *v499;
  double *v500;
  double *v506;
  double v507;
  uint64_t v508;
  _OWORD *v509;
  double v514;
  double *v520;
  int v525;
  float64x2_t v526;
  unint64_t v527;
  float64x2_t *v528;
  double v529;
  unsigned int v530;
  int v531;
  double v532;
  uint64_t v533;
  unint64_t v534;
  int v535;
  double v541;
  double v547;
  double v553;
  int v559;
  uint64_t v560;
  int v566;
  unint64_t v567;
  unint64_t v568;
  int v569;
  uint64_t v570;
  unsigned int v571;
  uint64_t v572;
  int32x4_t v573;
  int32x4_t v574;
  uint64_t v575;
  char **v576;
  _DWORD *v577;
  _DWORD *v578;
  char *v579;
  char *v580;
  unsigned int v582;
  unsigned int v583;
  _QWORD *v584;
  uint64_t v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  BOOL v589;
  unsigned int v590;
  unsigned int v591;
  int32x4_t v592;
  unsigned int v593;
  int32x4_t *v594;
  char v595;
  int v596;
  int v597;
  float64x2_t *v598;
  unsigned int v599;
  uint64_t v600;
  double v601;
  unsigned int v602;
  unsigned int v603;
  unsigned int v604;
  int v605;
  uint64_t v606;
  double *v607;
  uint64_t v613;
  float64x2_t v614;
  unint64_t v615;
  uint64_t v616;
  double *v617;
  uint64_t v618;
  float64x2_t *v619;
  __int8 *v620;
  uint64_t v621;
  float64x2_t *v622;
  float64x2_t v623;
  float64x2_t v624;
  double v625;
  double v626;
  int64x2_t *v627;
  unint64_t v628;
  double *v629;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float64x2_t v650;
  uint64_t v651;
  double *v652;
  uint64_t v653;
  double **v654;
  double *v655;
  uint64_t v656;
  unint64_t v657;
  double *v658;
  size_t v659;
  float64x2_t *v660;
  unint64_t v661;
  double *v662;
  double *v663;
  unint64_t v664;
  uint64_t v665;
  float64x2_t *v666;
  float64x2_t *v667;
  uint64_t v668;
  float64x2_t v669;
  double v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  _BYTE *v676;
  int64x2_t *v677;
  char v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unsigned int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  _QWORD *v721;
  _QWORD *v722;
  uint64_t v723;
  _QWORD *v724;
  _QWORD *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  _QWORD *v740;
  _QWORD *v741;
  uint64_t v742;
  _QWORD *v743;
  _QWORD *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unsigned int *v822;
  uint64_t v823;
  uint64_t v824;
  _QWORD *v825;
  unint64_t *v826;
  _QWORD *v827;
  unsigned int v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  size_t v836;
  unsigned int v837;
  uint64_t v838;
  unsigned int v839;
  uint64_t v840;
  uint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  size_t v848;
  unsigned int v849;
  uint64_t v850;
  uint64_t *v851;
  unsigned int v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  size_t v858;
  unsigned int v859;
  uint64_t v860;
  unsigned int v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  size_t v867;
  unsigned int v868;
  uint64_t v869;
  unsigned int v870;
  uint64_t v871;
  uint64_t v872;
  _QWORD *v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  size_t v879;
  unsigned int v880;
  uint64_t v881;
  unsigned int v882;
  uint64_t v883;
  uint64_t v884;
  _QWORD *v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  size_t v891;
  unsigned int v892;
  uint64_t v893;
  unsigned int v894;
  uint64_t v895;
  uint64_t v896;
  _QWORD *v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  size_t v903;
  unsigned int v904;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  uint64_t v908;
  _QWORD *v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  size_t v915;
  unsigned int v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  _QWORD *v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  size_t v927;
  unsigned int v928;
  uint64_t v929;
  unsigned int v930;
  uint64_t v931;
  uint64_t v932;
  char *v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  size_t v939;
  unsigned int v940;
  char *v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  unint64_t v949;
  uint64_t v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  unint64_t v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  unint64_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  unint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  unint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t i;
  uint64_t v1005;
  int8x16_t *v1006;
  unsigned int v1007;
  int8x16_t *v1008;
  int8x16_t *v1009;
  unint64_t v1010;
  size_t v1011;
  size_t v1012;
  int8x16_t *v1013;
  void *v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  _QWORD *v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t *v1089;
  unint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  int8x16_t *v1096;
  uint64_t v1097;
  unsigned int v1098;
  int8x16_t *v1099;
  int v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  void *v1112;
  uint64_t v1113;
  char *v1114;
  char *v1115;
  int64_t v1116;
  uint64_t v1117;
  char *v1118;
  char *v1119;
  char *v1120;
  char *v1121;
  unint64_t v1122;
  uint64_t v1123;
  _BYTE *v1124;
  _QWORD *v1125;
  char *v1126;
  unint64_t v1127;
  char *v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  _OWORD *v1132;
  char *v1133;
  uint64_t v1134;
  __int128 v1135;
  uint64_t v1136;
  size_t v1137;
  _BYTE *v1138;
  char *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  _QWORD *v1161;
  unint64_t v1162;
  unint64_t v1163;
  unint64_t *v1164;
  unint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unsigned int v1169;
  uint64_t v1170;
  int8x16_t v1171;
  int8x16_t v1172;
  int8x16_t v1173;
  int8x16_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  int8x16_t v1183;
  int8x16_t v1184;
  unint64_t v1185;
  int8x16_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  uint64_t v1193;
  unsigned int v1194;
  int8x16_t *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  void *v1209;
  int64x2_t *v1210;
  int64x2_t v1211;
  int64x2_t v1212;
  int64x2_t v1213;
  int8x16_t *v1214;
  int64x2_t v1215;
  int64x2_t v1216;
  int64x2_t *v1217;
  int64x2_t v1218;
  int64x2_t v1219;
  int64x2_t v1220;
  int64x2_t *v1221;
  int64x2_t *v1222;
  int64x2_t v1223;
  int64x2_t *v1224;
  int64x2_t *v1225;
  int64x2_t v1226;
  int64x2_t *v1227;
  int8x16_t v1228;
  int8x16_t v1229;
  int64x2_t v1230;
  int64x2_t v1231;
  int64x2_t v1232;
  int64x2_t v1233;
  int8x16_t v1234;
  int8x16_t v1235;
  int64x2_t v1236;
  int8x16_t v1237;
  int8x16_t v1238;
  int64x2_t v1239;
  int64x2_t v1240;
  int64x2_t v1241;
  int8x16_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int8x16_t v1245;
  int8x16_t v1246;
  int8x16_t v1247;
  int8x16_t *v1248;
  int8x16_t v1249;
  int8x16_t v1250;
  int8x16_t v1251;
  int8x16_t v1252;
  int8x16_t v1253;
  int8x16_t v1254;
  char *v1255;
  unint64_t v1256;
  int64_t v1257;
  uint64_t v1258;
  _BYTE *v1259;
  uint64_t v1260;
  unint64_t v1261;
  uint64_t v1262;
  char *v1263;
  uint64_t v1264;
  uint64_t v1265;
  char *v1266;
  int64_t v1267;
  uint64_t v1268;
  char *v1269;
  char *v1270;
  unint64_t v1271;
  unint64_t v1272;
  unint64_t v1273;
  char *v1274;
  unint64_t v1275;
  char *v1276;
  char *v1277;
  unint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  char *v1281;
  __int128 *v1282;
  uint64_t v1283;
  __int128 v1284;
  uint64_t v1285;
  char *v1286;
  size_t v1287;
  char *v1288;
  uint64_t v1289;
  uint64_t v1290;
  _OWORD *v1291;
  __int128 *v1292;
  uint64_t v1293;
  __int128 v1294;
  uint64_t v1295;
  int8x16_t *v1296;
  int8x16_t v1297;
  int8x16_t v1298;
  int8x16_t *v1299;
  int8x16_t v1300;
  int8x16_t v1301;
  int8x16_t *v1302;
  int8x16_t v1303;
  int8x16_t v1304;
  int8x16_t v1305;
  int8x16_t v1306;
  int8x16_t *v1307;
  int8x16_t v1308;
  int8x16_t v1309;
  int8x16_t v1310;
  int8x16_t *v1311;
  int8x16_t *v1312;
  int8x16_t *v1313;
  int8x16_t *v1314;
  int8x16_t *v1315;
  unint64_t v1316;
  unint64_t v1317;
  int8x16_t v1318;
  int8x16_t v1319;
  unint64_t v1320;
  _QWORD *v1321;
  unint64_t *v1322;
  uint64_t v1323;
  uint64_t v1324;
  unsigned int v1325;
  uint64_t v1326;
  unsigned int v1327;
  int8x16_t *v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  _QWORD *v1343;
  void *v1344;
  uint64_t *v1345;
  __int128 v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  char *v1350;
  unint64_t v1351;
  int64_t v1352;
  uint64_t v1353;
  char *v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t v1357;
  _BYTE *v1358;
  uint64_t v1359;
  uint64_t v1360;
  char *v1361;
  int64_t v1362;
  uint64_t v1363;
  char *v1364;
  char *v1365;
  unint64_t v1366;
  unint64_t v1367;
  unint64_t v1368;
  unint64_t v1369;
  char *v1370;
  char *v1371;
  char *v1372;
  unint64_t v1373;
  uint64_t v1374;
  _OWORD *v1375;
  __int128 *v1376;
  uint64_t v1377;
  __int128 v1378;
  uint64_t v1379;
  char *v1380;
  size_t v1381;
  unint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  _OWORD *v1385;
  __int128 *v1386;
  uint64_t v1387;
  __int128 v1388;
  uint64_t v1389;
  char *v1390;
  int8x16_t *v1391;
  uint64_t v1392;
  int8x16_t v1393;
  unint64_t v1394;
  int8x16_t v1395;
  int8x16_t v1396;
  int8x16_t v1397;
  uint64_t v1398;
  double *v1399;
  double *v1400;
  unsigned int v1401;
  size_t v1402;
  uint64_t v1403;
  _QWORD *v1404;
  unint64_t v1405;
  double *v1406;
  size_t v1407;
  float64x2_t *v1408;
  unint64_t v1409;
  double *v1410;
  double *v1411;
  unint64_t v1412;
  uint64_t v1413;
  float64x2_t *v1414;
  float64x2_t *v1415;
  uint64_t v1416;
  float64x2_t v1417;
  double v1418;
  size_t v1419;
  uint64_t v1420;
  int8x16_t *v1421;
  unint64_t v1422;
  uint64_t *v1423;
  int8x16_t *v1424;
  unint64_t v1425;
  uint64_t v1426;
  int8x16_t *v1427;
  __int128 *v1428;
  uint64_t v1429;
  __int128 v1430;
  float64x2_t *v1431;
  unint64_t v1432;
  double *v1433;
  double *v1434;
  unint64_t v1435;
  uint64_t v1436;
  float64x2_t *v1437;
  float64x2_t *v1438;
  uint64_t v1439;
  float64x2_t v1440;
  double v1441;
  float64x2_t *v1442;
  unint64_t v1443;
  double *v1444;
  double *v1445;
  unint64_t v1446;
  uint64_t v1447;
  float64x2_t *v1448;
  float64x2_t *v1449;
  uint64_t v1450;
  float64x2_t v1451;
  double v1452;
  unint64_t v1453;
  uint64_t v1454;
  double *v1455;
  float64x2_t *v1456;
  float64x2_t *v1457;
  uint64_t v1458;
  float64x2_t v1459;
  double *v1460;
  double v1461;
  uint64_t v1462;
  void *v1463;
  uint64_t v1464;
  void **v1465;
  size_t v1466;
  void *v1467;
  void *v1468;
  void *v1469;
  void *v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  uint64_t v1473;
  unsigned int v1474;
  uint64_t v1475;
  int v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1480;
  uint64_t v1481;
  float64x2_t *v1482;
  float64x2_t *v1484;
  uint64_t v1486;
  double v1488;
  double cosval;
  __double2 v1490;
  double v1491;
  double v1492;
  double v1493;
  double v1494;
  double v1495;
  double v1496;
  double v1497;
  double v1498;
  float64x2_t v1499;
  double v1500;
  double v1501;
  double v1502;
  double v1503;
  float64x2_t v1504;
  double v1505;
  float64x2_t v1506;
  double v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  float64x2_t v1513;
  int8x16_t v1514;
  int8x16_t v1515;
  int8x16_t v1516;
  uint64_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  uint64_t v1522;
  double *v1523;
  uint64_t v1524;
  unsigned int *v1525;
  double v1526;
  uint64_t v1527;
  unsigned int v1528;
  double v1529;
  double v1530;
  _BOOL4 v1531;
  BOOL v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unsigned int v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  float64x2_t *v1541;
  uint64_t v1542;
  uint64_t v1543;
  double v1547;
  __double2 v1548;
  float64x2_t v1549;
  double v1550;
  double v1551;
  double v1552;
  double v1553;
  double v1554;
  double v1555;
  double v1556;
  double v1557;
  double v1558;
  double v1559;
  double v1560;
  double v1561;
  float64x2_t v1562;
  double v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  double v1567;
  float64x2_t v1568;
  float64x2_t *v1569;
  uint64_t v1570;
  float64x2_t *v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t *v1574;
  unint64_t v1575;
  uint64_t v1576;
  double *v1577;
  float64x2_t *v1578;
  float64x2_t *v1579;
  uint64_t v1580;
  float64x2_t v1581;
  double v1582;
  uint64_t v1583;
  uint64_t v1584;
  unsigned int v1585;
  uint64_t v1586;
  __int128 *v1587;
  _OWORD *v1588;
  __int128 v1589;
  __int128 v1590;
  uint64_t v1591;
  uint64_t v1592;
  unsigned int v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  uint64_t v1601;
  uint64_t v1602;
  unsigned int v1603;
  uint64_t v1604;
  __int128 *v1605;
  _OWORD *v1606;
  __int128 v1607;
  __int128 v1608;
  uint64_t v1609;
  uint64_t v1610;
  unsigned int v1611;
  uint64_t v1612;
  __int128 *v1613;
  _OWORD *v1614;
  __int128 v1615;
  __int128 v1616;
  uint64_t v1617;
  uint64_t v1618;
  unsigned int v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  __int128 v1623;
  uint64_t v1624;
  uint64_t v1625;
  int v1626;
  uint64_t v1627;
  uint64_t v1628;
  int v1629;
  uint64_t v1630;
  _OWORD *v1631;
  _OWORD *v1632;
  __int128 v1633;
  uint64_t v1634;
  uint64_t v1635;
  int v1636;
  uint64_t v1637;
  _OWORD *v1638;
  _OWORD *v1639;
  __int128 v1640;
  uint64_t v1641;
  uint64_t v1642;
  unsigned int v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  __int128 v1647;
  uint64_t v1648;
  uint64_t v1649;
  unsigned int v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  __int128 v1654;
  uint64_t v1655;
  unsigned int v1656;
  uint64_t v1657;
  float64x2_t *v1658;
  uint64_t v1659;
  float64x2_t *v1660;
  float64x2_t *v1661;
  uint64_t v1662;
  unsigned int v1663;
  uint64_t v1664;
  float64x2_t *v1665;
  int *v1666;
  uint64_t v1667;
  unsigned int v1668;
  uint64_t v1669;
  int v1670;
  float64x2_t v1671;
  float64x2_t v1672;
  uint64_t v1673;
  uint64_t *v1674;
  uint64_t *v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  int v1679;
  unsigned __int32 v1680;
  int v1681;
  unint64_t v1682;
  unsigned __int32 v1683;
  int v1684;
  int v1685;
  uint64_t v1686;
  int v1687;
  char *v1688;
  char v1689;
  uint64_t v1690;
  unsigned int v1691;
  char *v1692;
  char v1693;
  uint64_t v1694;
  uint64_t v1695;
  unsigned int v1696;
  int *v1697;
  uint64_t v1698;
  int v1699;
  float64x2_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  unint64_t v1703;
  uint64_t *v1704;
  uint64_t *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  unsigned int v1709;
  uint64_t v1710;
  int v1711;
  uint64_t v1712;
  int8x16_t v1713;
  float64x2_t v1714;
  int v1715;
  int v1716;
  void *v1717;
  unsigned int v1718;
  unsigned __int8 v1719;
  uint64_t v1720;
  uint64_t v1721;
  unsigned __int8 v1722;
  double *v1723;
  float64x2_t v1724;
  double v1725;
  double v1726;
  float64x2_t v1727;
  double v1728;
  double v1729;
  double v1730;
  double v1731;
  double v1732;
  double *size;
  float64x2_t *v1734;
  float64x2_t *v1735;
  _BYTE *v1736;
  double *v1737;
  float64x2_t *v1738;
  double v1742;
  uint64_t v1743;
  float v1744;
  double v1745;
  unint64_t v1746;
  double v1747;
  int64x2_t v1748;
  int64x2_t v1749;
  float64x2_t v1750;
  float64x2_t v1751;
  float64x2_t v1752;
  double v1753;
  float64x2_t v1754;
  double v1755;
  double v1756;
  float64x2_t v1757;
  double v1758;
  float64x2_t v1759;
  double v1760;
  double v1761;
  float64x2_t v1762;
  double v1763;
  float64x2_t v1764;
  double v1765;
  double v1766;
  float64x2_t v1767;
  double v1768;
  float64x2_t v1769;
  double v1770;
  double v1771;
  float64x2_t v1772;
  double v1773;
  float64x2_t v1774;
  double v1775;
  float64_t v1776;
  double v1777;
  float64x2_t v1778;
  float64x2_t v1780;
  int v1781;
  uint64_t v1782;
  int v1783;
  int8x16_t v1784;
  double v1785;
  unsigned __int8 v1786;
  uint64_t v1787;
  uint64_t i2;
  unsigned __int8 v1789;
  unsigned int v1790;
  int8x16_t v1791;
  uint64_t v1795;
  std::string::size_type v1796;
  float64x2_t *v1797;
  uint64_t v1798;
  float64x2_t *v1799;
  double v1803;
  uint64_t v1804;
  float v1805;
  double v1806;
  unint64_t v1807;
  double v1808;
  int64x2_t v1809;
  int64x2_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t v1813;
  double v1814;
  float64x2_t v1815;
  double v1816;
  double v1817;
  float64x2_t v1818;
  double v1819;
  float64x2_t v1820;
  double v1821;
  double v1822;
  float64x2_t v1823;
  double v1824;
  float64x2_t v1825;
  double v1826;
  double v1827;
  float64x2_t v1828;
  double v1829;
  float64x2_t v1830;
  double v1831;
  double v1832;
  float64x2_t v1833;
  double v1834;
  float64x2_t v1835;
  double v1836;
  double v1837;
  float64_t v1838;
  double v1839;
  float64x2_t v1840;
  float64x2_t v1841;
  float64x2_t v1843;
  uint64_t v1844;
  int v1845;
  float64x2_t v1846;
  int8x16_t v1847;
  double v1848;
  int64x2_t *v1849;
  float64x2_t v1850;
  int8x16_t v1851;
  int8x16_t v1852;
  int64x2_t v1853;
  int64x2_t v1854;
  double v1855;
  float64x2_t v1856;
  double v1857;
  double v1858;
  float64x2_t v1859;
  float64x2_t v1860;
  float64x2_t v1861;
  uint64_t v1862;
  float64x2_t *v1863;
  uint64_t v1864;
  float64x2_t v1865;
  float64x2_t v1866;
  float64x2_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  double *v1870;
  double *v1871;
  double v1872;
  float64x2_t v1873;
  int8x16_t *v1874;
  uint64_t v1875;
  unsigned int v1876;
  _QWORD *v1877;
  unint64_t v1878;
  _QWORD *v1879;
  _QWORD *v1880;
  _QWORD *v1881;
  _QWORD *v1882;
  _QWORD *v1883;
  _QWORD *v1884;
  _QWORD *v1885;
  _QWORD *v1886;
  unint64_t v1887;
  unint64_t v1888;
  _QWORD *v1889;
  uint64_t v1890;
  uint64_t v1891;
  _QWORD *v1892;
  unint64_t *v1893;
  unint64_t *v1894;
  unint64_t *v1895;
  uint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  unint64_t v1899;
  unint64_t v1900;
  int8x16_t v1901;
  int8x16_t v1902;
  int8x16_t v1903;
  int8x16_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  int64x2_t v1908;
  uint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  unint64_t v1915;
  unint64_t v1916;
  unint64_t v1917;
  _WORD *v1918;
  unint64_t v1919;
  int32x2_t *v1920;
  unint64_t v1921;
  _QWORD *v1922;
  unint64_t v1923;
  char **v1924;
  unint64_t v1925;
  uint64_t *v1926;
  unint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t v1931;
  unint64_t v1932;
  uint64_t v1933;
  int8x16_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  unint64_t v1938;
  _DWORD *v1939;
  uint64_t v1940;
  unint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  double *v1946;
  unint64_t v1947;
  uint64_t v1948;
  unint64_t v1949;
  double *v1950;
  uint64_t v1951;
  int8x16_t v1952;
  uint64_t v1953;
  _QWORD *v1954;
  unint64_t v1955;
  uint64_t v1956;
  unint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  int8x16_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  unint64_t v1963;
  uint64_t v1964;
  unint64_t v1965;
  _DWORD *v1966;
  uint64_t v1967;
  unint64_t v1968;
  uint64_t v1969;
  int64x2_t v1970;
  uint64_t v1971;
  unint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  unint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  unint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  _BYTE *v1984;
  uint64_t v1985;
  uint64_t v1986;
  BOOL *v1987;
  BOOL *v1988;
  unint64_t v1989;
  unsigned int v1990;
  _QWORD *v1991;
  uint64_t *v1992;
  int64x2_t v1993;
  unint64_t v1994;
  double *v1995;
  int64x2_t v1996;
  uint64_t v1997;
  float64x2_t *v1998;
  uint64_t v1999;
  uint64_t *__dst;
  uint64_t __dsta;
  uint64_t __dstb;
  uint64_t v2003;
  float64x2_t *v2004;
  char *v2005;
  int8x16_t v2006;
  _BYTE *v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  _QWORD *v2011;
  _QWORD *v2012;
  float64x2_t *v2013;
  unint64_t v2014;
  int64x2_t v2015;
  unint64_t v2016;
  unint64_t v2017;
  uint64_t v2018;
  float64x2_t v2019;
  int v2020;
  uint64_t v2021;
  float64x2_t *v2022;
  _QWORD *v2023;
  uint64_t v2024;
  unint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  double v2029;
  uint64_t v2030;
  int v2031;
  float64x2_t v2032;
  uint64_t v2033;
  int64x2_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  float64x2_t v2037;
  float64x2_t v2038;
  uint64_t v2039;
  float64x2_t v2040;
  uint64_t v2041;
  float64x2_t v2042;
  unint64_t v2043;
  int64x2_t v2044;
  uint64_t v2045;
  char *v2046;
  uint64_t v2047;
  uint64_t v2048;
  float64x2_t v2049;
  double v2050;
  uint64_t v2051;
  float64x2_t v2052;
  float64x2_t v2053;
  float64_t v2054;
  void *__p[2];
  std::string::size_type v2056;
  _BYTE v2057[80];
  __int128 v2058;
  __int128 v2059;
  __int128 v2060;
  __int128 v2061;
  __int128 v2062;
  __int128 v2063;
  _QWORD v2064[361];
  int v2065;
  _DWORD v2066[2];
  int v2067;
  double v2068;
  double v2069;
  std::string v2070;
  float64x2_t *v2071;
  uint64_t v2072;
  int64x2_t v2073;
  int64x2_t v2074[4];
  int64x2_t v2075;
  int64x2_t v2076;
  int64x2_t v2077;
  __int128 v2078;
  __int128 v2079;
  __int128 v2080;
  __int128 v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  _BYTE v2085[300];
  int v2086;
  uint64_t v2087;
  int v2088;
  _WORD v2089[302];
  int v2090;
  uint64_t v2091;
  int v2092;
  uint64_t v2093;

  MEMORY[0x24BDAC7A8](a1);
  v1946 = v2;
  v1954 = v3;
  v1995 = v4;
  __dst = v5;
  v2031 = v6;
  v7 = v1;
  v2093 = *MEMORY[0x24BDAC8D0];
  v8 = (_WORD *)(v1 + 58053);
  v9 = v1 + 57384;
  v10 = (_QWORD *)(v1 + 41568);
  v2003 = v1 + 40304;
  v11 = v1 + 38200;
  if (*(_BYTE *)(v1 + 58054))
    *(_BYTE *)(v1 + 58054) = 0;
  v12 = (BOOL *)(v1 + 18568);
  kdebug_trace();
  v13 = (int32x2_t *)(v7 + 22864);
  v15 = *(_QWORD *)v11;
  v14 = *(_QWORD *)(v11 + 8);
  v17 = *(_QWORD *)(v11 + 24);
  v16 = *(_QWORD *)(v11 + 32);
  v19 = *(_QWORD *)(v11 + 48);
  v18 = *(_QWORD *)(v11 + 56);
  v20 = *(_QWORD *)(v11 + 72);
  v21 = *(_QWORD *)(v11 + 80);
  v23 = *(_QWORD *)(v11 + 96);
  v22 = *(_QWORD *)(v11 + 104);
  v25 = *(_QWORD *)(v11 + 120);
  v24 = *(_QWORD *)(v11 + 128);
  v26 = *(_QWORD *)(v11 + 144);
  v27 = *(_QWORD *)(v11 + 152);
  v29 = *(_QWORD *)(v11 + 168);
  v28 = *(_QWORD *)(v11 + 176);
  v31 = *(_QWORD *)(v11 + 192);
  v30 = *(_QWORD *)(v11 + 200);
  v33 = *(_QWORD *)(v11 + 216);
  v32 = *(_QWORD *)(v11 + 224);
  v2011 = (_QWORD *)(v7 + 312);
  v1892 = (_QWORD *)v7;
  v2041 = v9;
  if (!*(_BYTE *)(v7 + 1904))
  {
    v1929 = *(_QWORD *)v11;
    v1931 = *(_QWORD *)(v11 + 32);
    v1933 = *(_QWORD *)(v11 + 8);
    v1935 = *(_QWORD *)(v11 + 48);
    v1937 = *(_QWORD *)(v11 + 72);
    v1940 = *(_QWORD *)(v11 + 56);
    v1943 = *(_QWORD *)(v11 + 80);
    v1948 = *(_QWORD *)(v11 + 96);
    v1951 = *(_QWORD *)(v11 + 120);
    v1956 = *(_QWORD *)(v11 + 104);
    v1959 = *(_QWORD *)(v11 + 128);
    v1962 = *(_QWORD *)(v11 + 144);
    v1964 = *(_QWORD *)(v11 + 152);
    v1967 = *(_QWORD *)(v11 + 168);
    v1971 = *(_QWORD *)(v11 + 192);
    v1975 = *(_QWORD *)(v11 + 176);
    v1979 = *(_QWORD *)(v11 + 200);
    v1983 = *(_QWORD *)(v11 + 216);
    v2009 = *(_QWORD *)(v11 + 224);
    v1991 = v10;
    kdebug_trace();
    if (!*(_BYTE *)(v7 + 1905))
      goto LABEL_31;
    if (*(_BYTE *)(v9 + 666))
    {
      v34 = *(_DWORD *)(v7 + 3004);
LABEL_25:
      v43 = 22144;
LABEL_26:
      v44 = v7 + v43;
      if (v34 == 1)
        v45 = 3;
      else
        v45 = 1;
      if (sub_20F8C8D70((_QWORD *)(v7 + 22864), v45, v7, v7, v44 + 240))
      {
        kdebug_trace();
LABEL_748:
        v797 = 1;
        goto LABEL_1297;
      }
LABEL_31:
      v1987 = v12;
      sub_20F8D0830((uint64_t)v2011);
      v46 = *(unsigned __int8 *)(v9 + 656);
      *(_BYTE *)(v9 + 666) = v46;
      v47 = *(_DWORD *)(v9 + 660);
      if (v47)
      {
        v48 = v47 - 1;
        _ZF = v48 == 0;
        *(_DWORD *)(v9 + 660) = v48;
        v49 = v12;
        if (!_ZF)
          goto LABEL_36;
        sub_20F8D5014(v7, "debug: enabling offload again.");
        v46 = *(unsigned __int8 *)(v9 + 666);
      }
      v49 = v12;
LABEL_36:
      if (v46)
      {
        *v49 = 0;
        v50 = *(_DWORD *)(v7 + 2980);
        v51 = *(_DWORD *)(v7 + 3000);
        sub_20F8D5138(*(_QWORD *)(v7 + 21120), (_QWORD *)(v7 + 22624));
        sub_20F8C6ED8(v7 + 21120, (char **)(v7 + 22624), v50, v51);
LABEL_38:
        kdebug_trace();
        v9 = v2041;
        v12 = v1987;
        v32 = v2009;
        v33 = v1983;
        v30 = v1979;
        v28 = v1975;
        v31 = v1971;
        v29 = v1967;
        v27 = v1964;
        v26 = v1962;
        v24 = v1959;
        v22 = v1956;
        v25 = v1951;
        v23 = v1948;
        v21 = v1943;
        v18 = v1940;
        v20 = v1937;
        v19 = v1935;
        v14 = v1933;
        v16 = v1931;
        v15 = v1929;
        goto LABEL_39;
      }
      v124 = *(_DWORD *)(v7 + 3000);
      if (v124)
      {
        *v49 = 0;
      }
      else
      {
        LOBYTE(v2053.f64[0]) = 0;
        *(_DWORD *)v2057 = 0;
        v2073.i64[0] = v7 + 312;
        v2073.i64[1] = (uint64_t)v2057;
        v2074[0].i64[0] = v7;
        v2074[0].i64[1] = (uint64_t)&v2053;
        sub_20F920D80(&v2073);
        sub_20F9209FC(&v2073);
        sub_20F920678(&v2073);
        sub_20F9204D8(&v2073);
        sub_20F92014C(&v2073);
        sub_20F91FDC4(&v2073);
        sub_20F91FC24(&v2073);
        sub_20F91FA84(&v2073);
        v208 = *(_DWORD *)v2057;
        *v12 = *(_DWORD *)v2057 == 0;
        if (!v208)
        {
          sub_20F8D5138((uint64_t)v2011, (_QWORD *)(v7 + 20296));
          sub_20F8D63EC((_QWORD *)(v7 + 3008), (char **)(v7 + 20296));
          sub_20F8C5EE0(v7 + 20536, (unsigned int **)(v7 + 20296), *(_DWORD *)(v7 + 2980));
          goto LABEL_38;
        }
        v124 = *(_DWORD *)(v7 + 3000);
      }
      v209 = *(_DWORD *)(v7 + 2980);
      sub_20F8D5138(*(_QWORD *)(v7 + 18576), (_QWORD *)(v7 + 20056));
      sub_20F8D63EC(*(_QWORD **)(v7 + 18584), (char **)(v7 + 20056));
      if (v124 == 1)
      {
        v210 = *(_QWORD *)(v7 + 18592);
        v211 = *(_QWORD *)(v7 + 18584);
        v212 = *(_OWORD *)(v211 + 40);
        v213 = *(_QWORD *)(v211 + 56);
        *(_OWORD *)(v210 + 24) = *(_OWORD *)(v211 + 24);
        *(_QWORD *)(v210 + 56) = v213;
        *(_OWORD *)(v210 + 40) = v212;
        LODWORD(v213) = *(_DWORD *)(v210 + 28);
        LODWORD(v211) = 6 * *(_DWORD *)(v210 + 24);
        *(_DWORD *)(v210 + 64) = 0;
        *(_DWORD *)(v210 + 68) = v211;
        LODWORD(v211) = 9 * v213 + v211;
        v214 = *(_DWORD *)(v210 + 36);
        v215 = v211 + 6 * *(_DWORD *)(v210 + 32);
        *(_DWORD *)(v210 + 72) = v211;
        *(_DWORD *)(v210 + 76) = v215;
        LODWORD(v211) = v215 + 6 * v214;
        v216 = *(_DWORD *)(v210 + 44);
        LODWORD(v213) = 3 * *(_DWORD *)(v210 + 40) + v211;
        *(_DWORD *)(v210 + 80) = v211;
        *(_DWORD *)(v210 + 84) = v213;
        LODWORD(v211) = v216 + v213;
        LODWORD(v213) = *(_DWORD *)(v210 + 48);
        v217 = *(_DWORD *)(v210 + 52);
        *(_DWORD *)(v210 + 88) = v211;
        *(_DWORD *)(v210 + 92) = v211 + 4 * v213;
        LODWORD(v211) = v211 + 4 * (v217 + v213);
        v218 = *(_DWORD *)(v210 + 60);
        LODWORD(v213) = 3 * *(_DWORD *)(v210 + 56) + v211;
        *(_DWORD *)(v210 + 96) = v211;
        *(_DWORD *)(v210 + 100) = v213;
        sub_20F20CEEC((_DWORD *)v210, 3 * v218 + v213, 1u);
      }
      sub_20F8C5EE0(v7 + 19472, (unsigned int **)(v7 + 20056), v209);
      v219 = *(_QWORD **)(v7 + 18576);
      v2073.i64[0] = 0;
      v220 = *(void **)(v7 + 19424);
      *(_QWORD *)(v7 + 19432) = v220;
      *(_QWORD *)(v7 + 19456) = *(_QWORD *)(v7 + 19448);
      v1922 = v219;
      v221 = ((v219[122] - v219[121]) >> 4);
      if (v221 > (uint64_t)(*(_QWORD *)(v7 + 19440) - (_QWORD)v220) >> 7)
      {
        v222 = (char *)operator new(v221 << 7);
        *(_QWORD *)(v7 + 19424) = v222;
        *(_QWORD *)(v7 + 19432) = v222;
        *(_QWORD *)(v7 + 19440) = &v222[128 * v221];
        if (v220)
          operator delete(v220);
      }
      v223 = v7 + 18840;
      v224 = (uint64_t *)(v7 + 19424);
      v1924 = (char **)(v7 + 19448);
      *(_QWORD *)v2057 = 0;
      v225 = v1922[121];
      v226 = v1922[122];
      if (v225 == v226)
      {
        v247 = 0;
        goto LABEL_750;
      }
      while (1)
      {
        v227 = *(_QWORD *)(v225 + 8);
        if (*(_DWORD *)v227 == -1)
        {
          if ((*(_BYTE *)(v227 + 4) & 2) != 0)
            goto LABEL_329;
          v231 = (int64x2_t *)v2057;
          v229 = *(_QWORD *)v2057;
          v230 = 1;
        }
        else
        {
          sub_20F921BB8((char **)(v7 + 19424), *(_QWORD *)(v225 + 8), v7 + 18840);
          v228 = *(_QWORD *)(v7 + 19432);
          v229 = v2073.i64[0];
          *(_QWORD *)(v228 - 104) = v2073.i64[0];
          *(_OWORD *)(v228 - 96) = 0u;
          *(_OWORD *)(v228 - 80) = 0u;
          *(_OWORD *)(v228 - 64) = 0u;
          *(_OWORD *)(v228 - 48) = 0u;
          *(_OWORD *)(v228 - 32) = 0u;
          *(_QWORD *)(v228 - 16) = 0;
          v230 = (11 * *(_DWORD *)(v227 + 8));
          v231 = &v2073;
        }
        v231->i64[0] = v230 + v229;
LABEL_329:
        v225 += 16;
        if (v225 == v226)
        {
          v232 = *(_QWORD *)v2057;
          if (*(_QWORD *)v2057)
          {
            v233 = *(_BYTE **)(v7 + 19448);
            if (*(_QWORD *)v2057 > (unint64_t)((uint64_t)(*(_QWORD *)(v7 + 19464) - (_QWORD)v233) >> 7))
            {
              if (*(_QWORD *)v2057 >> 57)
                sub_20E867F44();
              v234 = *(_BYTE **)(v7 + 19456);
              v235 = (char *)operator new(*(_QWORD *)v2057 << 7);
              v236 = &v235[v234 - v233];
              v237 = v236;
              if (v234 != v233)
              {
                v238 = 0;
                do
                {
                  v239 = &v236[v238];
                  *((_QWORD *)v239 - 16) = *(_QWORD *)&v234[v238 - 128];
                  *((_QWORD *)v239 - 15) = *(_QWORD *)&v234[v238 - 120];
                  *((_QWORD *)v239 - 14) = *(_QWORD *)&v234[v238 - 112];
                  v240 = *(_OWORD *)&v234[v238 - 104];
                  v241 = *(_OWORD *)&v234[v238 - 88];
                  *(_OWORD *)(v239 - 72) = *(_OWORD *)&v234[v238 - 72];
                  *(_OWORD *)(v239 - 88) = v241;
                  *(_OWORD *)(v239 - 104) = v240;
                  v242 = *(_OWORD *)&v234[v238 - 56];
                  v243 = *(_OWORD *)&v234[v238 - 40];
                  v244 = *(_OWORD *)&v234[v238 - 24];
                  *((_QWORD *)v239 - 1) = *(_QWORD *)&v234[v238 - 8];
                  *(_OWORD *)(v239 - 24) = v244;
                  *(_OWORD *)(v239 - 40) = v243;
                  *(_OWORD *)(v239 - 56) = v242;
                  v238 -= 128;
                }
                while (&v234[v238] != v233);
                v237 = &v236[v238];
              }
              *(_QWORD *)(v7 + 19448) = v237;
              *(_QWORD *)(v7 + 19456) = v236;
              *(_QWORD *)(v7 + 19464) = &v235[128 * v232];
              if (v233)
                operator delete(v233);
            }
            v245 = v1922[121];
            v246 = v1922[122];
            v247 = v2073.i64[0];
            if (v245 == v246)
            {
              v7 = (uint64_t)v1892;
            }
            else
            {
              do
              {
                v248 = *(_QWORD *)(v245 + 8);
                if (*(_DWORD *)v248 == -1 && (*(_BYTE *)(v248 + 4) & 2) == 0)
                {
                  sub_20F921BB8(v1924, *(_QWORD *)(v245 + 8), v223);
                  v249 = v1892[2432];
                  *(_QWORD *)(v249 - 104) = v247;
                  *(_OWORD *)(v249 - 96) = 0u;
                  *(_OWORD *)(v249 - 80) = 0u;
                  *(_OWORD *)(v249 - 64) = 0u;
                  *(_OWORD *)(v249 - 48) = 0u;
                  *(_OWORD *)(v249 - 32) = 0u;
                  *(_QWORD *)(v249 - 16) = 0;
                  v247 += (11 * *(_DWORD *)(v248 + 8));
                  *(_DWORD *)v248 = ((v1892[2432] - v1892[2431]) >> 7) - 1;
                }
                v245 += 16;
              }
              while (v245 != v246);
              v2073.i64[0] = v247;
              v7 = (uint64_t)v1892;
            }
          }
          else
          {
            v247 = v2073.i64[0];
          }
LABEL_750:
          *(_QWORD *)(v7 + 18848) = *(_QWORD *)(v7 + 18840);
          *(_QWORD *)(v7 + 18872) = *(_QWORD *)(v7 + 18864);
          *(_QWORD *)(v7 + 18896) = *(_QWORD *)(v7 + 18888);
          *(_QWORD *)(v7 + 18920) = *(_QWORD *)(v7 + 18912);
          *(_QWORD *)(v7 + 18944) = *(_QWORD *)(v7 + 18936);
          *(_QWORD *)(v7 + 18968) = *(_QWORD *)(v7 + 18960);
          *(_QWORD *)(v7 + 18992) = *(_QWORD *)(v7 + 18984);
          *(_QWORD *)(v7 + 19016) = *(_QWORD *)(v7 + 19008);
          *(_QWORD *)(v7 + 19040) = *(_QWORD *)(v7 + 19032);
          *(_QWORD *)(v7 + 19064) = *(_QWORD *)(v7 + 19056);
          *(_QWORD *)(v7 + 19088) = *(_QWORD *)(v7 + 19080);
          *(_OWORD *)(v7 + 19168) = 0u;
          *(_OWORD *)(v7 + 19152) = 0u;
          *(_OWORD *)(v7 + 19136) = 0u;
          *(_OWORD *)(v7 + 19120) = 0u;
          *(_OWORD *)(v7 + 19104) = 0u;
          v798 = *(_QWORD *)(v7 + 19184);
          *(_QWORD *)(v7 + 19192) = v798;
          *(_QWORD *)(v7 + 19216) = *(_QWORD *)(v7 + 19208);
          *(_QWORD *)(v7 + 19240) = *(_QWORD *)(v7 + 19232);
          *(_QWORD *)(v7 + 19264) = *(_QWORD *)(v7 + 19256);
          *(_QWORD *)(v7 + 19288) = *(_QWORD *)(v7 + 19280);
          *(_QWORD *)(v7 + 19312) = *(_QWORD *)(v7 + 19304);
          *(_QWORD *)(v7 + 19336) = *(_QWORD *)(v7 + 19328);
          *(_QWORD *)(v7 + 19360) = *(_QWORD *)(v7 + 19352);
          *(_QWORD *)(v7 + 19384) = *(_QWORD *)(v7 + 19376);
          *(_QWORD *)(v7 + 19408) = *(_QWORD *)(v7 + 19400);
          if (v247)
          {
            sub_20EAC9ECC(v223, v247);
            v798 = *(_QWORD *)(v7 + 19184);
            v799 = (*(_QWORD *)(v7 + 19192) - v798) >> 4;
            _CF = v247 >= v799;
            if (v247 > v799)
            {
              sub_20F5BB76C((uint64_t *)(v7 + 19184), v247 - v799);
              goto LABEL_756;
            }
          }
          else
          {
            _CF = 1;
          }
          if (!_CF)
            *(_QWORD *)(v7 + 19192) = v798 + 16 * v247;
LABEL_756:
          v801 = *(_QWORD *)(v7 + 19208);
          v802 = (*(_QWORD *)(v7 + 19216) - v801) >> 4;
          if (v247 <= v802)
          {
            if (v247 < v802)
              *(_QWORD *)(v7 + 19216) = v801 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19208), v247 - v802);
          }
          v803 = *(_QWORD *)(v7 + 19232);
          v804 = (*(_QWORD *)(v7 + 19240) - v803) >> 4;
          if (v247 <= v804)
          {
            if (v247 < v804)
              *(_QWORD *)(v7 + 19240) = v803 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19232), v247 - v804);
          }
          v805 = *(_QWORD *)(v7 + 19256);
          v806 = (*(_QWORD *)(v7 + 19264) - v805) >> 4;
          if (v247 <= v806)
          {
            if (v247 < v806)
              *(_QWORD *)(v7 + 19264) = v805 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19256), v247 - v806);
          }
          v807 = *(_QWORD *)(v7 + 19280);
          v808 = (*(_QWORD *)(v7 + 19288) - v807) >> 4;
          if (v247 <= v808)
          {
            if (v247 < v808)
              *(_QWORD *)(v7 + 19288) = v807 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19280), v247 - v808);
          }
          v809 = *(_QWORD *)(v7 + 19304);
          v810 = (*(_QWORD *)(v7 + 19312) - v809) >> 4;
          if (v247 <= v810)
          {
            if (v247 < v810)
              *(_QWORD *)(v7 + 19312) = v809 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19304), v247 - v810);
          }
          v811 = *(_QWORD *)(v7 + 19328);
          v812 = (*(_QWORD *)(v7 + 19336) - v811) >> 4;
          if (v247 <= v812)
          {
            if (v247 < v812)
              *(_QWORD *)(v7 + 19336) = v811 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19328), v247 - v812);
          }
          v813 = *(_QWORD *)(v7 + 19352);
          v814 = (*(_QWORD *)(v7 + 19360) - v813) >> 4;
          if (v247 <= v814)
          {
            if (v247 < v814)
              *(_QWORD *)(v7 + 19360) = v813 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19352), v247 - v814);
          }
          v815 = *(_QWORD *)(v7 + 19376);
          v816 = (*(_QWORD *)(v7 + 19384) - v815) >> 4;
          if (v247 <= v816)
          {
            if (v247 < v816)
              *(_QWORD *)(v7 + 19384) = v815 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19376), v247 - v816);
          }
          v817 = *(_QWORD *)(v7 + 19400);
          v818 = (*(_QWORD *)(v7 + 19408) - v817) >> 4;
          if (v247 <= v818)
          {
            if (v247 < v818)
              *(_QWORD *)(v7 + 19408) = v817 + 16 * v247;
          }
          else
          {
            sub_20F5BB76C((uint64_t *)(v7 + 19400), v247 - v818);
          }
          v1926 = v224;
          v1918 = v8;
          v1920 = v13;
          v819 = v1922[187];
          v2024 = v1922[188];
          if (v819 == v2024)
          {
LABEL_911:
            v7 = (uint64_t)v1892;
            v943 = 6 * v1892[2388];
            v944 = v1892[2358];
            v945 = (v1892[2359] - v944) >> 3;
            if (v943 <= v945)
            {
              v10 = v1991;
              v13 = v1920;
              v8 = v1918;
              if (v943 < v945)
                v1892[2359] = v944 + 48 * v1892[2388];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2358), v943 - v945);
              v10 = v1991;
              v13 = v1920;
              v8 = v1918;
            }
            v946 = v1892[2398];
            v947 = v1892[2399];
            if (v946 != v947)
            {
              v948 = 0;
              do
              {
                if (*(_DWORD *)v946 != -1)
                {
                  *(_QWORD *)(v946 + 8) = v948;
                  v948 += 6;
                }
                v946 += 16;
              }
              while (v946 != v947);
            }
            v949 = 9 * v1892[2389];
            v950 = v1892[2361];
            v951 = (v1892[2362] - v950) >> 3;
            if (v949 <= v951)
            {
              if (v949 < v951)
                v1892[2362] = v950 + 72 * v1892[2389];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2361), v949 - v951);
            }
            v952 = v1892[2401];
            v953 = v1892[2402];
            if (v952 != v953)
            {
              v954 = 0;
              do
              {
                if (*(_DWORD *)v952 != -1)
                {
                  *(_QWORD *)(v952 + 8) = v954;
                  v954 += 9;
                }
                v952 += 16;
              }
              while (v952 != v953);
            }
            v955 = 6 * v1892[2390];
            v956 = v1892[2364];
            v957 = (v1892[2365] - v956) >> 3;
            if (v955 <= v957)
            {
              if (v955 < v957)
                v1892[2365] = v956 + 48 * v1892[2390];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2364), v955 - v957);
            }
            v958 = v1892[2404];
            v959 = v1892[2405];
            if (v958 != v959)
            {
              v960 = 0;
              do
              {
                if (*(_DWORD *)v958 != -1)
                {
                  *(_QWORD *)(v958 + 8) = v960;
                  v960 += 6;
                }
                v958 += 16;
              }
              while (v958 != v959);
            }
            v961 = 6 * v1892[2391];
            v962 = v1892[2367];
            v963 = (v1892[2368] - v962) >> 3;
            if (v961 <= v963)
            {
              if (v961 < v963)
                v1892[2368] = v962 + 48 * v1892[2391];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2367), v961 - v963);
            }
            v964 = v1892[2407];
            v965 = v1892[2408];
            if (v964 != v965)
            {
              v966 = 0;
              do
              {
                if (*(_DWORD *)v964 != -1)
                {
                  *(_QWORD *)(v964 + 8) = v966;
                  v966 += 6;
                }
                v964 += 16;
              }
              while (v964 != v965);
            }
            v967 = 3 * v1892[2392];
            v968 = v1892[2370];
            v969 = (v1892[2371] - v968) >> 3;
            if (v967 <= v969)
            {
              if (v967 < v969)
                v1892[2371] = v968 + 24 * v1892[2392];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2370), v967 - v969);
            }
            v970 = v1892[2410];
            v971 = v1892[2411];
            if (v970 != v971)
            {
              v972 = 0;
              do
              {
                if (*(_DWORD *)v970 != -1)
                {
                  *(_QWORD *)(v970 + 8) = v972;
                  v972 += 3;
                }
                v970 += 16;
              }
              while (v970 != v971);
            }
            v973 = v1892[2393];
            v974 = v1892[2373];
            v975 = (v1892[2374] - v974) >> 3;
            if (v973 <= v975)
            {
              if (v973 < v975)
                v1892[2374] = v974 + 8 * v973;
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2373), v973 - v975);
            }
            v976 = v1892[2413];
            v977 = v1892[2414];
            if (v976 != v977)
            {
              v978 = 0;
              do
              {
                if (*(_DWORD *)v976 != -1)
                  *(_QWORD *)(v976 + 8) = v978++;
                v976 += 16;
              }
              while (v976 != v977);
            }
            v979 = 4 * v1892[2394];
            v980 = v1892[2376];
            v981 = (v1892[2377] - v980) >> 3;
            if (v979 <= v981)
            {
              if (v979 < v981)
                v1892[2377] = v980 + 32 * v1892[2394];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2376), v979 - v981);
            }
            v982 = v1892[2416];
            v983 = v1892[2417];
            if (v982 != v983)
            {
              v984 = 0;
              do
              {
                if (*(_DWORD *)v982 != -1)
                {
                  *(_QWORD *)(v982 + 8) = v984;
                  v984 += 4;
                }
                v982 += 16;
              }
              while (v982 != v983);
            }
            v985 = 4 * v1892[2395];
            v986 = v1892[2379];
            v987 = (v1892[2380] - v986) >> 3;
            if (v985 <= v987)
            {
              if (v985 < v987)
                v1892[2380] = v986 + 32 * v1892[2395];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2379), v985 - v987);
            }
            v988 = v1892[2419];
            v989 = v1892[2420];
            if (v988 != v989)
            {
              v990 = 0;
              do
              {
                if (*(_DWORD *)v988 != -1)
                {
                  *(_QWORD *)(v988 + 8) = v990;
                  v990 += 4;
                }
                v988 += 16;
              }
              while (v988 != v989);
            }
            v991 = 3 * v1892[2396];
            v992 = v1892[2382];
            v993 = (v1892[2383] - v992) >> 3;
            if (v991 <= v993)
            {
              if (v991 < v993)
                v1892[2383] = v992 + 24 * v1892[2396];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2382), v991 - v993);
            }
            v994 = v1892[2422];
            v995 = v1892[2423];
            if (v994 != v995)
            {
              v996 = 0;
              do
              {
                if (*(_DWORD *)v994 != -1)
                {
                  *(_QWORD *)(v994 + 8) = v996;
                  v996 += 3;
                }
                v994 += 16;
              }
              while (v994 != v995);
            }
            v997 = 3 * v1892[2397];
            v998 = v1892[2385];
            v999 = (v1892[2386] - v998) >> 3;
            if (v997 <= v999)
            {
              if (v997 < v999)
                v1892[2386] = v998 + 24 * v1892[2397];
            }
            else
            {
              sub_20E93D8FC((uint64_t)(v1892 + 2385), v997 - v999);
            }
            v1000 = v1892[2425];
            v1001 = v1892[2426];
            if (v1000 != v1001)
            {
              v1002 = 0;
              do
              {
                if (*(_DWORD *)v1000 != -1)
                {
                  *(_QWORD *)(v1000 + 8) = v1002;
                  v1002 += 3;
                }
                v1000 += 16;
              }
              while (v1000 != v1001);
            }
            if (*(_QWORD *)v2057)
            {
              v1003 = v1922[121];
              for (i = v1922[122]; v1003 != i; v1003 += 16)
              {
                v1005 = *(_QWORD *)(v1003 + 8);
                if (!*(_BYTE *)(v1005 + 20))
                  *(_DWORD *)v1005 = -1;
              }
            }
            goto LABEL_38;
          }
          v820 = 0;
          while (2)
          {
            if (sub_20F556208((_QWORD *)(v819 + 64)))
            {
              v822 = *(unsigned int **)(v819 + 144);
              v823 = *v822;
              if (*((_BYTE *)v822 + 20))
              {
                v824 = *v1926;
                v825 = (_QWORD *)(*v1926 + (v823 << 7));
                v826 = v825 + 3;
                v827 = (_QWORD *)v825[15];
                *(_QWORD *)(*v827 + 8 * (v825[4] + v825[3])) = v820;
                ++v825[4];
                v828 = **(_DWORD **)(v819 + 64);
                if (v828 != -1)
                {
                  v831 = v825[7];
                  v830 = v825 + 7;
                  v829 = v831;
                  v832 = v831 + *v826;
                  v833 = v827[49];
                  if (v832 <= *v826)
                  {
LABEL_805:
                    v838 = v833 + 16 * v832;
                    goto LABEL_806;
                  }
                  v834 = 16 * *v826;
                  v835 = v829 + 1;
                  v836 = 16 * v829 + 16;
                  while (1)
                  {
                    v837 = *(_DWORD *)(v833 + v834);
                    if (v837 >= v828)
                      break;
                    v834 += 16;
                    --v835;
                    v836 -= 16;
                    if (v835 == 1)
                      goto LABEL_805;
                  }
                  if (v837 > v828)
                  {
                    if (v835)
                    {
                      memmove((void *)(v833 + 16 * v832 - v836 + 32), (const void *)(v833 + v834), v836);
                      v833 = v827[49];
                    }
                    v838 = v833 + v834;
LABEL_806:
                    *(_DWORD *)v838 = v828;
                    *(_QWORD *)(v838 + 8) = -1;
                    ++v827[35];
                    ++*v830;
                  }
                }
                v839 = **(_DWORD **)(v819 + 72);
                if (v839 != -1)
                {
                  v840 = v824 + (v823 << 7);
                  v843 = *(_QWORD *)(v840 + 56);
                  v842 = (_QWORD *)(v840 + 56);
                  v841 = v843;
                  v844 = v843 + *v826;
                  v845 = v827[49];
                  if (v844 <= *v826)
                  {
LABEL_812:
                    v850 = v845 + 16 * v844;
                    goto LABEL_813;
                  }
                  v846 = 16 * *v826;
                  v847 = v841 + 1;
                  v848 = 16 * v841 + 16;
                  while (1)
                  {
                    v849 = *(_DWORD *)(v845 + v846);
                    if (v849 >= v839)
                      break;
                    v846 += 16;
                    --v847;
                    v848 -= 16;
                    if (v847 == 1)
                      goto LABEL_812;
                  }
                  if (v849 > v839)
                  {
                    if (v847)
                    {
                      memmove((void *)(v845 + 16 * v844 - v848 + 32), (const void *)(v845 + v846), v848);
                      v845 = v827[49];
                    }
                    v850 = v845 + v846;
LABEL_813:
                    *(_DWORD *)v850 = v839;
                    *(_QWORD *)(v850 + 8) = -1;
                    ++v827[35];
                    ++*v842;
                  }
                }
                v851 = (uint64_t *)(v826 + 2);
                v852 = **(_DWORD **)(v819 + 80);
                if (v852 != -1)
                {
                  v853 = *v851;
                  v854 = *v851 + *v826;
                  v855 = v827[43];
                  if (v854 <= *v826)
                  {
LABEL_819:
                    v860 = v855 + 16 * v854;
                    goto LABEL_820;
                  }
                  v856 = 16 * *v826;
                  v857 = v853 + 1;
                  v858 = 16 * v853 + 16;
                  while (1)
                  {
                    v859 = *(_DWORD *)(v855 + v856);
                    if (v859 >= v852)
                      break;
                    v856 += 16;
                    --v857;
                    v858 -= 16;
                    if (v857 == 1)
                      goto LABEL_819;
                  }
                  if (v859 > v852)
                  {
                    if (v857)
                    {
                      memmove((void *)(v855 + 16 * v854 - v858 + 32), (const void *)(v855 + v856), v858);
                      v855 = v827[43];
                    }
                    v860 = v855 + v856;
LABEL_820:
                    *(_DWORD *)v860 = v852;
                    *(_QWORD *)(v860 + 8) = -1;
                    ++v827[33];
                    ++*v851;
                  }
                }
                v861 = **(_DWORD **)(v819 + 88);
                if (v861 != -1)
                {
                  v862 = *v851;
                  v863 = *v851 + *v826;
                  v864 = v827[43];
                  if (v863 <= *v826)
                  {
LABEL_826:
                    v869 = v864 + 16 * v863;
                    goto LABEL_827;
                  }
                  v865 = 16 * *v826;
                  v866 = v862 + 1;
                  v867 = 16 * v862 + 16;
                  while (1)
                  {
                    v868 = *(_DWORD *)(v864 + v865);
                    if (v868 >= v861)
                      break;
                    v865 += 16;
                    --v866;
                    v867 -= 16;
                    if (v866 == 1)
                      goto LABEL_826;
                  }
                  if (v868 > v861)
                  {
                    if (v866)
                    {
                      memmove((void *)(v864 + 16 * v863 - v867 + 32), (const void *)(v864 + v865), v867);
                      v864 = v827[43];
                    }
                    v869 = v864 + v865;
LABEL_827:
                    *(_DWORD *)v869 = v861;
                    *(_QWORD *)(v869 + 8) = -1;
                    ++v827[33];
                    ++*v851;
                  }
                }
                v870 = **(_DWORD **)(v819 + 96);
                if (v870 != -1)
                {
                  v871 = v824 + (v823 << 7);
                  v874 = *(_QWORD *)(v871 + 88);
                  v873 = (_QWORD *)(v871 + 88);
                  v872 = v874;
                  v875 = v874 + *v826;
                  v876 = v827[61];
                  if (v875 <= *v826)
                  {
LABEL_833:
                    v881 = v876 + 16 * v875;
                    goto LABEL_834;
                  }
                  v877 = 16 * *v826;
                  v878 = v872 + 1;
                  v879 = 16 * v872 + 16;
                  while (1)
                  {
                    v880 = *(_DWORD *)(v876 + v877);
                    if (v880 >= v870)
                      break;
                    v877 += 16;
                    --v878;
                    v879 -= 16;
                    if (v878 == 1)
                      goto LABEL_833;
                  }
                  if (v880 > v870)
                  {
                    if (v878)
                    {
                      memmove((void *)(v876 + 16 * v875 - v879 + 32), (const void *)(v876 + v877), v879);
                      v876 = v827[61];
                    }
                    v881 = v876 + v877;
LABEL_834:
                    *(_DWORD *)v881 = v870;
                    *(_QWORD *)(v881 + 8) = -1;
                    ++v827[39];
                    ++*v873;
                  }
                }
                v882 = **(_DWORD **)(v819 + 104);
                if (v882 != -1)
                {
                  v883 = v824 + (v823 << 7);
                  v886 = *(_QWORD *)(v883 + 88);
                  v885 = (_QWORD *)(v883 + 88);
                  v884 = v886;
                  v887 = v886 + *v826;
                  v888 = v827[61];
                  if (v887 <= *v826)
                  {
LABEL_840:
                    v893 = v888 + 16 * v887;
                    goto LABEL_841;
                  }
                  v889 = 16 * *v826;
                  v890 = v884 + 1;
                  v891 = 16 * v884 + 16;
                  while (1)
                  {
                    v892 = *(_DWORD *)(v888 + v889);
                    if (v892 >= v882)
                      break;
                    v889 += 16;
                    --v890;
                    v891 -= 16;
                    if (v890 == 1)
                      goto LABEL_840;
                  }
                  if (v892 > v882)
                  {
                    if (v890)
                    {
                      memmove((void *)(v888 + 16 * v887 - v891 + 32), (const void *)(v888 + v889), v891);
                      v888 = v827[61];
                    }
                    v893 = v888 + v889;
LABEL_841:
                    *(_DWORD *)v893 = v882;
                    *(_QWORD *)(v893 + 8) = -1;
                    ++v827[39];
                    ++*v885;
                  }
                }
                v894 = **(_DWORD **)(v819 + 112);
                if (v894 != -1)
                {
                  v895 = v824 + (v823 << 7);
                  v898 = *(_QWORD *)(v895 + 96);
                  v897 = (_QWORD *)(v895 + 96);
                  v896 = v898;
                  v899 = v898 + *v826;
                  v900 = v827[64];
                  if (v899 <= *v826)
                  {
LABEL_847:
                    v905 = v900 + 16 * v899;
                    goto LABEL_848;
                  }
                  v901 = 16 * *v826;
                  v902 = v896 + 1;
                  v903 = 16 * v896 + 16;
                  while (1)
                  {
                    v904 = *(_DWORD *)(v900 + v901);
                    if (v904 >= v894)
                      break;
                    v901 += 16;
                    --v902;
                    v903 -= 16;
                    if (v902 == 1)
                      goto LABEL_847;
                  }
                  if (v904 > v894)
                  {
                    if (v902)
                    {
                      memmove((void *)(v900 + 16 * v899 - v903 + 32), (const void *)(v900 + v901), v903);
                      v900 = v827[64];
                    }
                    v905 = v900 + v901;
LABEL_848:
                    *(_DWORD *)v905 = v894;
                    *(_QWORD *)(v905 + 8) = -1;
                    ++v827[40];
                    ++*v897;
                  }
                }
                v906 = **(_DWORD **)(v819 + 120);
                if (v906 != -1)
                {
                  v907 = v824 + (v823 << 7);
                  v910 = *(_QWORD *)(v907 + 96);
                  v909 = (_QWORD *)(v907 + 96);
                  v908 = v910;
                  v911 = v910 + *v826;
                  v912 = v827[64];
                  if (v911 <= *v826)
                  {
LABEL_854:
                    v917 = v912 + 16 * v911;
                    goto LABEL_855;
                  }
                  v913 = 16 * *v826;
                  v914 = v908 + 1;
                  v915 = 16 * v908 + 16;
                  while (1)
                  {
                    v916 = *(_DWORD *)(v912 + v913);
                    if (v916 >= v906)
                      break;
                    v913 += 16;
                    --v914;
                    v915 -= 16;
                    if (v914 == 1)
                      goto LABEL_854;
                  }
                  if (v916 > v906)
                  {
                    if (v914)
                    {
                      memmove((void *)(v912 + 16 * v911 - v915 + 32), (const void *)(v912 + v913), v915);
                      v912 = v827[64];
                    }
                    v917 = v912 + v913;
LABEL_855:
                    *(_DWORD *)v917 = v906;
                    *(_QWORD *)(v917 + 8) = -1;
                    ++v827[40];
                    ++*v909;
                  }
                }
                v918 = **(_DWORD **)(v819 + 128);
                if (v918 != -1)
                {
                  v919 = v824 + (v823 << 7);
                  v922 = *(_QWORD *)(v919 + 104);
                  v921 = (_QWORD *)(v919 + 104);
                  v920 = v922;
                  v923 = v922 + *v826;
                  v924 = v827[67];
                  if (v923 <= *v826)
                  {
LABEL_861:
                    v929 = v924 + 16 * v923;
                    goto LABEL_862;
                  }
                  v925 = 16 * *v826;
                  v926 = v920 + 1;
                  v927 = 16 * v920 + 16;
                  while (1)
                  {
                    v928 = *(_DWORD *)(v924 + v925);
                    if (v928 >= v918)
                      break;
                    v925 += 16;
                    --v926;
                    v927 -= 16;
                    if (v926 == 1)
                      goto LABEL_861;
                  }
                  if (v928 > v918)
                  {
                    if (v926)
                    {
                      memmove((void *)(v924 + 16 * v923 - v927 + 32), (const void *)(v924 + v925), v927);
                      v924 = v827[67];
                    }
                    v929 = v924 + v925;
LABEL_862:
                    *(_DWORD *)v929 = v918;
                    *(_QWORD *)(v929 + 8) = -1;
                    ++v827[41];
                    ++*v921;
                  }
                }
                v930 = **(_DWORD **)(v819 + 136);
                if (v930 != -1)
                {
                  v931 = v824 + (v823 << 7);
                  v934 = *(_QWORD *)(v931 + 104);
                  v933 = (char *)(v931 + 104);
                  v932 = v934;
                  v935 = v934 + *v826;
                  v936 = v827[67];
                  if (v935 <= *v826)
                  {
LABEL_794:
                    v821 = v936 + 16 * v935;
                    goto LABEL_795;
                  }
                  v937 = 16 * *v826;
                  v938 = v932 + 1;
                  v939 = 16 * v932 + 16;
                  while (1)
                  {
                    v940 = *(_DWORD *)(v936 + v937);
                    if (v940 >= v930)
                      break;
                    v937 += 16;
                    --v938;
                    v939 -= 16;
                    if (v938 == 1)
                      goto LABEL_794;
                  }
                  if (v940 > v930)
                  {
                    if (v938)
                    {
                      memmove((void *)(v936 + 16 * v935 - v939 + 32), (const void *)(v936 + v937), v939);
                      v936 = v827[67];
                    }
                    v821 = v936 + v937;
LABEL_795:
                    *(_DWORD *)v821 = v930;
                    *(_QWORD *)(v821 + 8) = -1;
                    ++v827[41];
LABEL_796:
                    ++*(_QWORD *)v933;
                  }
                }
              }
              else if ((v822[1] & 2) == 0)
              {
                v941 = &(*v1924)[128 * v823];
                v942 = *((_QWORD *)v941 + 4);
                v933 = v941 + 32;
                *(_QWORD *)(**((_QWORD **)v933 + 11) + 8 * (v942 + *((_QWORD *)v933 - 1))) = v820;
                goto LABEL_796;
              }
            }
            v819 += 208;
            ++v820;
            if (v819 == v2024)
              goto LABEL_911;
            continue;
          }
        }
      }
    }
    if (!*(_BYTE *)v2003 || (sub_20F8C5B7C(v7 + 22864) & 1) != 0)
      goto LABEL_24;
    v35 = sub_20F8C5B7C(v7 + 22864);
    std::to_string((std::string *)v2057, v35);
    v36 = std::string::insert((std::string *)v2057, 0, "warning: running marginalize with no valid batch results (", 0x3AuLL);
    v37 = *(int64x2_t *)&v36->__r_.__value_.__l.__data_;
    v2074[0].i64[0] = v36->__r_.__value_.__r.__words[2];
    v2073 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append((std::string *)&v2073, ").", 2uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v2056 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = v10[1976];
    if (v40)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 48))(v40, __p);
    if (SHIBYTE(v2056) < 0)
    {
      operator delete(__p[0]);
      if ((v2074[0].i8[7] & 0x80000000) == 0)
      {
LABEL_13:
        if ((v2057[23] & 0x80000000) == 0)
          goto LABEL_14;
        goto LABEL_18;
      }
    }
    else if ((v2074[0].i8[7] & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete((void *)v2073.i64[0]);
    if ((v2057[23] & 0x80000000) == 0)
    {
LABEL_14:
      if (!*(_BYTE *)(v9 + 667))
      {
LABEL_24:
        v34 = *(_DWORD *)(v7 + 3004);
        if (*(_BYTE *)(v9 + 666))
          goto LABEL_25;
LABEL_1377:
        if (*v12)
          v43 = 20640;
        else
          v43 = 19576;
        goto LABEL_26;
      }
LABEL_19:
      *(_BYTE *)(v9 + 656) = 1;
      *(_BYTE *)(v9 + 666) = 1;
      *(_BYTE *)v2003 = 0;
      sub_20F8C5EE0(v7 + 20536, (unsigned int **)(v7 + 20296), *(_DWORD *)(v7 + 2980));
      *v12 = 0;
      sub_20F8C6ED8(v7 + 21120, (char **)(v7 + 20296), *(_DWORD *)(v7 + 2980), *(_DWORD *)(v7 + 3000));
      *(_DWORD *)(v9 + 660) = 50;
      std::to_string((std::string *)v2057, 0x32u);
      sub_20E8B0848("debug: falling back to host for ", (std::string *)v2057, (std::string *)&v2073);
      v41 = sub_20E8B07EC(" frames.", (std::string *)&v2073, &v2070);
      v42 = v10[1976];
      if (v42)
        (*(void (**)(uint64_t, std::string *, __n128))(*(_QWORD *)v42 + 48))(v42, &v2070, v41);
      if (SHIBYTE(v2070.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v2070.__r_.__value_.__l.__data_);
        if ((v2074[0].i8[7] & 0x80000000) == 0)
        {
LABEL_23:
          if ((v2057[23] & 0x80000000) == 0)
            goto LABEL_24;
          goto LABEL_1376;
        }
      }
      else if ((v2074[0].i8[7] & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete((void *)v2073.i64[0]);
      if ((v2057[23] & 0x80000000) == 0)
        goto LABEL_24;
LABEL_1376:
      operator delete(*(void **)v2057);
      v34 = *(_DWORD *)(v7 + 3004);
      if (*(_BYTE *)(v9 + 666))
        goto LABEL_25;
      goto LABEL_1377;
    }
LABEL_18:
    operator delete(*(void **)v2057);
    if (!*(_BYTE *)(v9 + 667))
      goto LABEL_24;
    goto LABEL_19;
  }
LABEL_39:
  if (((unint64_t)(v16 - v17) >> 2)
     + ((unint64_t)(v14 - v15) >> 2)
     + ((unint64_t)(v18 - v19) >> 2)
     + ((unint64_t)(v21 - v20) >> 2)
     + ((unint64_t)(v22 - v23) >> 2)
     + ((unint64_t)(v24 - v25) >> 2)
     + ((unint64_t)(v27 - v26) >> 2)
     + ((unint64_t)(v28 - v29) >> 2)
     + ((unint64_t)(v30 - v31) >> 2)
     + ((unint64_t)(v32 - v33) >> 2))
  {
    goto LABEL_40;
  }
  if (*(_BYTE *)(v7 + 1904))
  {
    v60 = *(_QWORD *)(v7 + 320);
    v61 = *(_QWORD *)(v7 + 328);
    if (v60 == v61)
    {
      v62 = 0;
    }
    else
    {
      v62 = 0;
      do
      {
        v63 = *(_QWORD *)(v60 + 8);
        if ((*(_BYTE *)(v63 + 4) & 6) == 0 && *(_BYTE *)(v63 + 20))
          v62 += 6;
        v60 += 16;
      }
      while (v60 != v61);
    }
    for (j = *(_QWORD *)(v7 + 416); j != *(_QWORD *)(v7 + 424); j += 16)
    {
      v126 = *(_QWORD *)(j + 8);
      if ((*(_BYTE *)(v126 + 4) & 6) == 0 && *(_BYTE *)(v126 + 20))
        v62 += 9;
    }
    for (k = *(_QWORD *)(v7 + 512); k != *(_QWORD *)(v7 + 520); k += 16)
    {
      v128 = *(_QWORD *)(k + 8);
      if ((*(_BYTE *)(v128 + 4) & 6) == 0 && *(_BYTE *)(v128 + 20))
        v62 += 6;
    }
    for (m = *(_QWORD *)(v7 + 608); m != *(_QWORD *)(v7 + 616); m += 16)
    {
      v130 = *(_QWORD *)(m + 8);
      if ((*(_BYTE *)(v130 + 4) & 6) == 0 && *(_BYTE *)(v130 + 20))
        v62 += 6;
    }
    for (n = *(_QWORD *)(v7 + 704); n != *(_QWORD *)(v7 + 712); n += 16)
    {
      v132 = *(_QWORD *)(n + 8);
      if ((*(_BYTE *)(v132 + 4) & 6) == 0 && *(_BYTE *)(v132 + 20))
        v62 += 3;
    }
    for (ii = *(_QWORD *)(v7 + 800); ii != *(_QWORD *)(v7 + 808); ii += 16)
    {
      v134 = *(_QWORD *)(ii + 8);
      if ((*(_BYTE *)(v134 + 4) & 6) == 0)
        v62 += *(unsigned __int8 *)(v134 + 20);
    }
    for (jj = *(_QWORD *)(v7 + 896); jj != *(_QWORD *)(v7 + 904); jj += 16)
    {
      v136 = *(_QWORD *)(jj + 8);
      if ((*(_BYTE *)(v136 + 4) & 6) == 0 && *(_BYTE *)(v136 + 20))
        v62 += 4;
    }
    for (kk = *(_QWORD *)(v7 + 992); kk != *(_QWORD *)(v7 + 1000); kk += 16)
    {
      v138 = *(_QWORD *)(kk + 8);
      if ((*(_BYTE *)(v138 + 4) & 6) == 0 && *(_BYTE *)(v138 + 20))
        v62 += 4;
    }
    for (mm = *(_QWORD *)(v7 + 1088); mm != *(_QWORD *)(v7 + 1096); mm += 16)
    {
      v140 = *(_QWORD *)(mm + 8);
      if ((*(_BYTE *)(v140 + 4) & 6) == 0 && *(_BYTE *)(v140 + 20))
        v62 += 3;
    }
    for (nn = *(_QWORD *)(v7 + 1184); nn != *(_QWORD *)(v7 + 1192); nn += 16)
    {
      v142 = *(_QWORD *)(nn + 8);
      if ((*(_BYTE *)(v142 + 4) & 6) == 0 && *(_BYTE *)(v142 + 20))
        v62 += 3;
    }
    for (i1 = *(_QWORD *)(v7 + 1280); i1 != *(_QWORD *)(v7 + 1288); i1 += 16)
    {
      v144 = *(_QWORD *)(i1 + 8);
      if ((*(_BYTE *)(v144 + 4) & 6) == 0)
        v62 += *(unsigned __int8 *)(v144 + 20);
    }
  }
  else
  {
    v2073 = 0u;
    memset(v2074, 0, 28);
    if (sub_20F8DEE48(v2011, v2073.i32, v2057, 0))
    {
      *(_QWORD *)(v7 + 2712) = *(_QWORD *)(v7 + 2704);
      *(_QWORD *)(v7 + 2736) = *(_QWORD *)(v7 + 2728);
      *(_QWORD *)(v7 + 2760) = *(_QWORD *)(v7 + 2752);
      *(_QWORD *)(v7 + 2784) = *(_QWORD *)(v7 + 2776);
      *(_QWORD *)(v7 + 2808) = *(_QWORD *)(v7 + 2800);
      *(_QWORD *)(v7 + 2832) = *(_QWORD *)(v7 + 2824);
      *(_QWORD *)(v7 + 2856) = *(_QWORD *)(v7 + 2848);
      *(_QWORD *)(v7 + 2880) = *(_QWORD *)(v7 + 2872);
      *(_QWORD *)(v7 + 2904) = *(_QWORD *)(v7 + 2896);
      *(_QWORD *)(v7 + 2928) = *(_QWORD *)(v7 + 2920);
      *(_QWORD *)(v7 + 2952) = *(_QWORD *)(v7 + 2944);
      v104 = *(_QWORD *)(v7 + 1376);
      v105 = *(_QWORD *)(v7 + 1384);
      while (v104 != v105)
      {
        v106 = *(_QWORD *)(v104 + 208);
        if (*(_BYTE *)(v104 + 496)
          || (*(_BYTE *)(v106 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v104 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v7 + 2704, v106);
          sub_20F3D35E0((_QWORD *)(v7 + 2704), *(_QWORD *)(v104 + 216));
        }
        v104 += 504;
      }
      v148 = *(_QWORD *)(v7 + 1400);
      v149 = *(_QWORD *)(v7 + 1408);
      while (v148 != v149)
      {
        v150 = *(_QWORD *)(v148 + 136);
        if (*(_BYTE *)(v148 + 272) || (*(_BYTE *)(v150 + 4) & 6) != 0)
          sub_20F394A20(v7 + 2704, v150);
        v148 += 280;
      }
      v151 = *(_QWORD *)(v7 + 1424);
      v152 = *(_QWORD *)(v7 + 1432);
      while (v151 != v152)
      {
        v153 = *(_QWORD *)(v151 + 136);
        if (*(_BYTE *)(v151 + 272) || (*(_BYTE *)(v153 + 4) & 6) != 0)
          sub_20F599C88((_QWORD *)(v7 + 2704), v153);
        v151 += 280;
      }
      v154 = *(_QWORD *)(v7 + 1448);
      v155 = *(_QWORD *)(v7 + 1456);
      while (v154 != v155)
      {
        v156 = *(_QWORD *)(v154 + 136);
        if (*(_BYTE *)(v154 + 272) || (*(_BYTE *)(v156 + 4) & 6) != 0)
          sub_20F59A480((_QWORD *)(v7 + 2704), v156);
        v154 += 280;
      }
      v157 = *(_QWORD *)(v7 + 1472);
      v158 = *(_QWORD *)(v7 + 1480);
      while (v157 != v158)
      {
        v159 = *(_QWORD *)(v157 + 64);
        if (*(_BYTE *)(v157 + 152) || (*(_BYTE *)(v159 + 4) & 6) != 0)
          sub_20F59A2E8((_QWORD *)(v7 + 2704), v159);
        v157 += 160;
      }
      sub_20F8DF7FC(*(_QWORD *)(v7 + 1496), *(_QWORD *)(v7 + 1504), (_QWORD *)(v7 + 2704));
      sub_20F5B85BC(*(_QWORD *)(v7 + 1520), *(_QWORD *)(v7 + 1528), (_QWORD *)(v7 + 2704));
      v160 = *(_QWORD *)(v7 + 1544);
      v161 = *(_QWORD *)(v7 + 1552);
      while (v160 != v161)
      {
        v162 = *(_QWORD *)(v160 + 48);
        if (*(_BYTE *)(v160 + 136) || (*(_BYTE *)(v162 + 4) & 6) != 0)
          sub_20F3D35E0((_QWORD *)(v7 + 2704), v162);
        v160 += 144;
      }
      v163 = *(_QWORD *)(v7 + 1568);
      v164 = *(_QWORD *)(v7 + 1576);
      while (v163 != v164)
      {
        v165 = *(_QWORD *)(v163 + 48);
        if (*(_BYTE *)(v163 + 144)
          || (*(_BYTE *)(v165 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v163 + 56) + 4) & 6) != 0)
        {
          sub_20F394A20(v7 + 2704, v165);
          sub_20F394A20(v7 + 2704, *(_QWORD *)(v163 + 56));
        }
        v163 += 152;
      }
      sub_20F8DF748(*(_QWORD *)(v7 + 1592), *(_QWORD *)(v7 + 1600), (_QWORD *)(v7 + 2704));
      sub_20F8DF65C(*(_QWORD *)(v7 + 1616), *(_QWORD *)(v7 + 1624), (_QWORD *)(v7 + 2704));
      v166 = *(_QWORD *)(v7 + 1640);
      v167 = *(_QWORD *)(v7 + 1648);
      while (v166 != v167)
      {
        v168 = *(_QWORD *)(v166 + 48);
        if (*(_BYTE *)(v166 + 104) || (*(_BYTE *)(v168 + 4) & 6) != 0)
          sub_20F59A150((_QWORD *)(v7 + 2704), v168);
        v166 += 112;
      }
      v169 = *(_QWORD *)(v7 + 1664);
      v170 = *(_QWORD *)(v7 + 1672);
      while (v169 != v170)
      {
        v171 = *(_QWORD *)(v169 + 96);
        if (*(_BYTE *)(v169 + 200) || (*(_BYTE *)(v171 + 4) & 6) != 0)
          sub_20F599FB8((_QWORD *)(v7 + 2704), v171);
        v169 += 208;
      }
      v172 = *(_QWORD *)(v7 + 1688);
      v173 = *(_QWORD *)(v7 + 1696);
      while (v172 != v173)
      {
        v174 = *(_QWORD *)(v172 + 96);
        if (*(_BYTE *)(v172 + 200) || (*(_BYTE *)(v174 + 4) & 6) != 0)
          sub_20F599E20((_QWORD *)(v7 + 2704), v174);
        v172 += 208;
      }
      v175 = *(_QWORD *)(v7 + 1712);
      v176 = *(_QWORD *)(v7 + 1720);
      while (v175 != v176)
      {
        v177 = *(_QWORD *)(v175 + 80);
        if (*(_BYTE *)(v175 + 168) || (*(_BYTE *)(v177 + 4) & 6) != 0)
          sub_20F8DAC28((_QWORD *)(v7 + 2704), v177);
        v175 += 176;
      }
      v178 = *(_QWORD *)(v7 + 1736);
      v179 = *(_QWORD *)(v7 + 1744);
      while (v178 != v179)
      {
        v180 = *(_QWORD *)(v178 + 80);
        if (*(_BYTE *)(v178 + 168) || (*(_BYTE *)(v180 + 4) & 6) != 0)
          sub_20F8DADC0((_QWORD *)(v7 + 2704), v180);
        v178 += 176;
      }
      sub_20F8DF4E4(*(_QWORD *)(v7 + 1760), *(_QWORD *)(v7 + 1768), (_QWORD *)(v7 + 2704));
      sub_20F8DF3F8(*(_QWORD *)(v7 + 1784), *(_QWORD *)(v7 + 1792), (_QWORD *)(v7 + 2704));
      sub_20F8DF280(*(_QWORD *)(v7 + 1808), *(_QWORD *)(v7 + 1816), (_QWORD *)(v7 + 2704));
      v181 = (*(_QWORD *)(v7 + 2712) - *(_QWORD *)(v7 + 2704)) >> 2;
      if (v2073.i32[0] > v181)
        LODWORD(v181) = v2073.i32[0];
      _CF = *(_DWORD *)v2057 >= v181;
      v182 = *(_DWORD *)v2057 - v181;
      if (!_CF)
        v182 = 0;
      v183 = (*(_QWORD *)(v7 + 2736) - *(_QWORD *)(v7 + 2728)) >> 2;
      if (v2073.i32[1] > v183)
        LODWORD(v183) = v2073.i32[1];
      _CF = *(_DWORD *)&v2057[4] >= v183;
      v184 = *(_DWORD *)&v2057[4] - v183;
      if (!_CF)
        v184 = 0;
      v185 = (*(_QWORD *)(v7 + 2760) - *(_QWORD *)(v7 + 2752)) >> 2;
      if (v2073.i32[2] > v185)
        LODWORD(v185) = v2073.i32[2];
      _CF = *(_DWORD *)&v2057[8] >= v185;
      v186 = *(_DWORD *)&v2057[8] - v185;
      if (!_CF)
        v186 = 0;
      v187 = (*(_QWORD *)(v7 + 2784) - *(_QWORD *)(v7 + 2776)) >> 2;
      if (v2073.i32[3] > v187)
        LODWORD(v187) = v2073.i32[3];
      _CF = *(_DWORD *)&v2057[12] >= v187;
      v188 = *(_DWORD *)&v2057[12] - v187;
      if (!_CF)
        v188 = 0;
      v189 = (*(_QWORD *)(v7 + 2808) - *(_QWORD *)(v7 + 2800)) >> 2;
      if (v2074[0].i32[0] > v189)
        LODWORD(v189) = v2074[0].i32[0];
      _CF = *(_DWORD *)&v2057[16] >= v189;
      v190 = *(_DWORD *)&v2057[16] - v189;
      if (_CF)
        v191 = v190;
      else
        v191 = 0;
      v192 = (*(_QWORD *)(v7 + 2832) - *(_QWORD *)(v7 + 2824)) >> 2;
      if (v2074[0].i32[1] > v192)
        LODWORD(v192) = v2074[0].i32[1];
      _CF = *(_DWORD *)&v2057[20] >= v192;
      v193 = *(_DWORD *)&v2057[20] - v192;
      if (!_CF)
        v193 = 0;
      v194 = (*(_QWORD *)(v7 + 2856) - *(_QWORD *)(v7 + 2848)) >> 2;
      if (v2074[0].i32[2] > v194)
        LODWORD(v194) = v2074[0].i32[2];
      _CF = *(_DWORD *)&v2057[24] >= v194;
      v195 = *(_DWORD *)&v2057[24] - v194;
      if (!_CF)
        v195 = 0;
      v196 = (*(_QWORD *)(v7 + 2880) - *(_QWORD *)(v7 + 2872)) >> 2;
      if (v2074[0].i32[3] > v196)
        LODWORD(v196) = v2074[0].i32[3];
      _CF = *(_DWORD *)&v2057[28] >= v196;
      v197 = *(_DWORD *)&v2057[28] - v196;
      if (!_CF)
        v197 = 0;
      v198 = (*(_QWORD *)(v7 + 2904) - *(_QWORD *)(v7 + 2896)) >> 2;
      if (v2074[1].i32[0] > v198)
        LODWORD(v198) = v2074[1].i32[0];
      _CF = *(_DWORD *)&v2057[32] >= v198;
      v199 = *(_DWORD *)&v2057[32] - v198;
      if (!_CF)
        v199 = 0;
      v200 = (*(_QWORD *)(v7 + 2928) - *(_QWORD *)(v7 + 2920)) >> 2;
      if (v2074[1].i32[1] > v200)
        LODWORD(v200) = v2074[1].i32[1];
      _CF = *(_DWORD *)&v2057[36] >= v200;
      v201 = *(_DWORD *)&v2057[36] - v200;
      if (!_CF)
        v201 = 0;
      v202 = (*(_QWORD *)(v7 + 2952) - *(_QWORD *)(v7 + 2944)) >> 2;
      if (v2074[1].i32[2] > v202)
        LODWORD(v202) = v2074[1].i32[2];
      _CF = *(_DWORD *)&v2057[40] >= v202;
      v203 = *(_DWORD *)&v2057[40] - v202;
      if (!_CF)
        v203 = 0;
      v62 = 9 * v184 + 6 * (v186 + v182 + v188) + v193 + 4 * (v197 + v195) + 3 * (v199 + v191 + v201) + v203;
      sub_20F8DB0F0(v2011);
      if (!v62)
        goto LABEL_748;
      goto LABEL_181;
    }
    v62 = *(_DWORD *)&v2057[20]
        + 9 * *(_DWORD *)&v2057[4]
        + 6 * (*(_DWORD *)&v2057[8] + *(_DWORD *)v2057 + *(_DWORD *)&v2057[12])
        + 4 * (*(_DWORD *)&v2057[28] + *(_DWORD *)&v2057[24])
        + *(_DWORD *)&v2057[40]
        + 3 * (*(_DWORD *)&v2057[32] + *(_DWORD *)&v2057[16] + *(_DWORD *)&v2057[36]);
  }
  if (!v62)
    goto LABEL_748;
LABEL_181:
  if (!*(_BYTE *)(v7 + 1904) && sub_20F9210FC(v2011))
  {
    v145 = *(_QWORD *)(v7 + 1376);
    v146 = *(_QWORD *)(v7 + 1384);
    if (v145 == v146)
    {
      v147 = 0;
    }
    else
    {
      v147 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v145 + 208) + 4) & 6) == 0
          && (*(_BYTE *)(*(_QWORD *)(v145 + 216) + 4) & 6) == 0)
        {
          ++v147;
        }
        v145 += 504;
      }
      while (v145 != v146);
    }
    v2073.i64[0] = 15 * v147;
    v671 = *(_QWORD *)(v7 + 1400);
    v672 = *(_QWORD *)(v7 + 1408);
    if (v671 == v672)
    {
      v674 = 0;
      goto LABEL_562;
    }
    v673 = v672 - v671 - 280;
    if (v673 >= 0x118)
    {
      v689 = 0;
      v690 = 0;
      v691 = v673 / 0x118 + 1;
      v675 = v671 + 280 * (v691 & 0x1FFFFFFFFFFFFFELL);
      v692 = v691 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v671 + 136) + 4) & 6) == 0)
          ++v689;
        if ((*(_BYTE *)(*(_QWORD *)(v671 + 416) + 4) & 6) == 0)
          ++v690;
        v671 += 560;
        v692 -= 2;
      }
      while (v692);
      v674 = v690 + v689;
      if (v691 == (v691 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_562:
        v2073.i64[1] = 6 * v674;
        v693 = *(_QWORD *)(v7 + 1424);
        v694 = *(_QWORD *)(v7 + 1432);
        if (v693 == v694)
        {
          v696 = 0;
          goto LABEL_576;
        }
        v695 = v694 - v693 - 280;
        if (v695 >= 0x118)
        {
          v698 = 0;
          v699 = 0;
          v700 = v695 / 0x118 + 1;
          v697 = v693 + 280 * (v700 & 0x1FFFFFFFFFFFFFELL);
          v701 = v700 & 0x1FFFFFFFFFFFFFELL;
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)(v693 + 136) + 4) & 6) == 0)
              ++v698;
            if ((*(_BYTE *)(*(_QWORD *)(v693 + 416) + 4) & 6) == 0)
              ++v699;
            v693 += 560;
            v701 -= 2;
          }
          while (v701);
          v696 = v699 + v698;
          if (v700 == (v700 & 0x1FFFFFFFFFFFFFELL))
          {
LABEL_576:
            v2074[0].i64[0] = 6 * v696;
            v702 = *(_QWORD *)(v7 + 1448);
            v703 = *(_QWORD *)(v7 + 1456);
            if (v702 == v703)
            {
              v705 = 0;
              goto LABEL_590;
            }
            v704 = v703 - v702 - 280;
            if (v704 >= 0x118)
            {
              v707 = 0;
              v708 = 0;
              v709 = v704 / 0x118 + 1;
              v706 = v702 + 280 * (v709 & 0x1FFFFFFFFFFFFFELL);
              v710 = v709 & 0x1FFFFFFFFFFFFFELL;
              do
              {
                if ((*(_BYTE *)(*(_QWORD *)(v702 + 136) + 4) & 6) == 0)
                  ++v707;
                if ((*(_BYTE *)(*(_QWORD *)(v702 + 416) + 4) & 6) == 0)
                  ++v708;
                v702 += 560;
                v710 -= 2;
              }
              while (v710);
              v705 = v708 + v707;
              if (v709 == (v709 & 0x1FFFFFFFFFFFFFELL))
              {
LABEL_590:
                v2074[0].i64[1] = 6 * v705;
                v711 = *(_QWORD *)(v7 + 1472);
                v712 = *(_QWORD *)(v7 + 1480);
                if (v711 == v712)
                {
                  v714 = 0;
                  goto LABEL_604;
                }
                v713 = v712 - v711 - 160;
                if (v713 >= 0xA0)
                {
                  v716 = 0;
                  v717 = 0;
                  v718 = v713 / 0xA0 + 1;
                  v715 = v711 + 160 * (v718 & 0x3FFFFFFFFFFFFFELL);
                  v719 = v711 + 224;
                  v720 = v718 & 0x3FFFFFFFFFFFFFELL;
                  do
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(v719 - 160) + 4) & 6) == 0)
                      ++v716;
                    if ((*(_BYTE *)(*(_QWORD *)v719 + 4) & 6) == 0)
                      ++v717;
                    v719 += 320;
                    v720 -= 2;
                  }
                  while (v720);
                  v714 = v717 + v716;
                  if (v718 == (v718 & 0x3FFFFFFFFFFFFFELL))
                  {
LABEL_604:
                    v2074[1].i64[0] = 3 * v714;
                    v721 = *(_QWORD **)(v7 + 1496);
                    v722 = *(_QWORD **)(v7 + 1504);
                    if (v721 == v722)
                    {
                      v723 = 0;
                    }
                    else
                    {
                      v723 = 0;
                      do
                      {
                        if ((*(_BYTE *)(v721[962] + 4) & 6) == 0
                          && (*(_BYTE *)(v721[963] + 4) & 6) == 0
                          && (*(_BYTE *)(v721[964] + 4) & 6) == 0
                          && (*(_BYTE *)(v721[965] + 4) & 6) == 0
                          && (*(_BYTE *)(v721[966] + 4) & 6) == 0)
                        {
                          ++v723;
                        }
                        v721 += 1002;
                      }
                      while (v721 != v722);
                    }
                    v2074[1].i64[1] = 15 * v723;
                    v724 = *(_QWORD **)(v7 + 1520);
                    v725 = *(_QWORD **)(v7 + 1528);
                    if (v724 == v725)
                    {
                      v726 = 0;
                    }
                    else
                    {
                      v726 = 0;
                      do
                      {
                        if ((*(_BYTE *)(v724[628] + 4) & 6) == 0
                          && (*(_BYTE *)(v724[629] + 4) & 6) == 0
                          && (*(_BYTE *)(v724[630] + 4) & 6) == 0
                          && (*(_BYTE *)(v724[631] + 4) & 6) == 0)
                        {
                          ++v726;
                        }
                        v724 += 667;
                      }
                      while (v724 != v725);
                    }
                    v2074[2].i64[0] = 15 * v726;
                    v727 = *(_QWORD *)(v7 + 1544);
                    v728 = *(_QWORD *)(v7 + 1552);
                    if (v727 == v728)
                    {
                      v730 = 0;
                      goto LABEL_639;
                    }
                    v729 = v728 - v727 - 144;
                    if (v729 >= 0x90)
                    {
                      v732 = 0;
                      v733 = 0;
                      v734 = v729 / 0x90 + 1;
                      v731 = v727 + 144 * (v734 & 0x3FFFFFFFFFFFFFELL);
                      v735 = v727 + 192;
                      v736 = v734 & 0x3FFFFFFFFFFFFFELL;
                      do
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(v735 - 144) + 4) & 6) == 0)
                          ++v732;
                        if ((*(_BYTE *)(*(_QWORD *)v735 + 4) & 6) == 0)
                          ++v733;
                        v735 += 288;
                        v736 -= 2;
                      }
                      while (v736);
                      v730 = v733 + v732;
                      if (v734 == (v734 & 0x3FFFFFFFFFFFFFELL))
                      {
LABEL_639:
                        v2074[2].i64[1] = 3 * v730;
                        v737 = *(_QWORD *)(v7 + 1568);
                        v738 = *(_QWORD *)(v7 + 1576);
                        if (v737 == v738)
                        {
                          v739 = 0;
                        }
                        else
                        {
                          v739 = 0;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v737 + 48) + 4) & 6) == 0
                              && (*(_BYTE *)(*(_QWORD *)(v737 + 56) + 4) & 6) == 0)
                            {
                              ++v739;
                            }
                            v737 += 152;
                          }
                          while (v737 != v738);
                        }
                        v2074[3].i64[0] = 3 * v739;
                        v740 = *(_QWORD **)(v7 + 1592);
                        v741 = *(_QWORD **)(v7 + 1600);
                        if (v740 == v741)
                        {
                          v742 = 0;
                        }
                        else
                        {
                          v742 = 0;
                          do
                          {
                            if ((*(_BYTE *)(v740[25] + 4) & 6) == 0
                              && (*(_BYTE *)(v740[26] + 4) & 6) == 0
                              && (*(_BYTE *)(v740[27] + 4) & 6) == 0
                              && (*(_BYTE *)(v740[28] + 4) & 6) == 0)
                            {
                              ++v742;
                            }
                            v740 += 38;
                          }
                          while (v740 != v741);
                        }
                        v2074[3].i64[1] = 2 * v742;
                        v743 = *(_QWORD **)(v7 + 1616);
                        v744 = *(_QWORD **)(v7 + 1624);
                        if (v743 == v744)
                        {
                          v745 = 0;
                        }
                        else
                        {
                          v745 = 0;
                          do
                          {
                            if ((*(_BYTE *)(v743[28] + 4) & 6) == 0
                              && (*(_BYTE *)(v743[29] + 4) & 6) == 0
                              && (*(_BYTE *)(v743[30] + 4) & 6) == 0
                              && (*(_BYTE *)(v743[31] + 4) & 6) == 0
                              && (*(_BYTE *)(v743[32] + 4) & 6) == 0
                              && (*(_BYTE *)(v743[33] + 4) & 6) == 0)
                            {
                              ++v745;
                            }
                            v743 += 45;
                          }
                          while (v743 != v744);
                        }
                        v2075 = (int64x2_t)(unint64_t)(3 * v745);
                        v746 = *(_QWORD *)(v7 + 1640);
                        v747 = *(_QWORD *)(v7 + 1648);
                        if (v746 != v747)
                        {
                          v748 = 0;
                          v749 = 0;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v746 + 48) + 4) & 6) == 0)
                              v748 = ++v749;
                            v746 += 112;
                          }
                          while (v746 != v747);
                          v2075.i64[1] = v748;
                        }
                        v750 = *(_QWORD *)(v7 + 1664);
                        v751 = *(_QWORD *)(v7 + 1672);
                        if (v750 == v751)
                        {
                          v755 = 0;
                          goto LABEL_690;
                        }
                        v752 = v751 - v750 - 208;
                        if (v752 >= 0xD0)
                        {
                          v756 = 0;
                          v757 = 0;
                          v758 = v752 / 0xD0 + 1;
                          v754 = v750 + 208 * (v758 & 0x3FFFFFFFFFFFFFELL);
                          v759 = v750 + 304;
                          v760 = v758 & 0x3FFFFFFFFFFFFFELL;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v759 - 208) + 4) & 6) == 0)
                              ++v756;
                            if ((*(_BYTE *)(*(_QWORD *)v759 + 4) & 6) == 0)
                              ++v757;
                            v759 += 416;
                            v760 -= 2;
                          }
                          while (v760);
                          v753 = v757 + v756;
                          if (v758 == (v758 & 0x3FFFFFFFFFFFFFELL))
                            goto LABEL_689;
                        }
                        else
                        {
                          v753 = 0;
                          v754 = *(_QWORD *)(v7 + 1664);
                        }
                        do
                        {
                          if ((*(_BYTE *)(*(_QWORD *)(v754 + 96) + 4) & 6) == 0)
                            ++v753;
                          v754 += 208;
                        }
                        while (v754 != v751);
LABEL_689:
                        v755 = 4 * v753;
LABEL_690:
                        v2076.i64[0] = v755;
                        v761 = *(_QWORD *)(v7 + 1688);
                        v762 = *(_QWORD *)(v7 + 1696);
                        if (v761 == v762)
                        {
                          v766 = 0;
                          goto LABEL_705;
                        }
                        v763 = v762 - v761 - 208;
                        if (v763 >= 0xD0)
                        {
                          v767 = 0;
                          v768 = 0;
                          v769 = v763 / 0xD0 + 1;
                          v765 = v761 + 208 * (v769 & 0x3FFFFFFFFFFFFFELL);
                          v770 = v761 + 304;
                          v771 = v769 & 0x3FFFFFFFFFFFFFELL;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v770 - 208) + 4) & 6) == 0)
                              ++v767;
                            if ((*(_BYTE *)(*(_QWORD *)v770 + 4) & 6) == 0)
                              ++v768;
                            v770 += 416;
                            v771 -= 2;
                          }
                          while (v771);
                          v764 = v768 + v767;
                          if (v769 == (v769 & 0x3FFFFFFFFFFFFFELL))
                            goto LABEL_704;
                        }
                        else
                        {
                          v764 = 0;
                          v765 = *(_QWORD *)(v7 + 1688);
                        }
                        do
                        {
                          if ((*(_BYTE *)(*(_QWORD *)(v765 + 96) + 4) & 6) == 0)
                            ++v764;
                          v765 += 208;
                        }
                        while (v765 != v762);
LABEL_704:
                        v766 = 4 * v764;
LABEL_705:
                        v2076.i64[1] = v766;
                        v772 = *(_QWORD *)(v7 + 1712);
                        v773 = *(_QWORD *)(v7 + 1720);
                        if (v772 == v773)
                        {
                          v777 = 0;
                          goto LABEL_720;
                        }
                        v774 = v773 - v772 - 176;
                        if (v774 >= 0xB0)
                        {
                          v778 = 0;
                          v779 = 0;
                          v780 = v774 / 0xB0 + 1;
                          v776 = v772 + 176 * (v780 & 0x3FFFFFFFFFFFFFELL);
                          v781 = v772 + 256;
                          v782 = v780 & 0x3FFFFFFFFFFFFFELL;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v781 - 176) + 4) & 6) == 0)
                              ++v778;
                            if ((*(_BYTE *)(*(_QWORD *)v781 + 4) & 6) == 0)
                              ++v779;
                            v781 += 352;
                            v782 -= 2;
                          }
                          while (v782);
                          v775 = v779 + v778;
                          if (v780 == (v780 & 0x3FFFFFFFFFFFFFELL))
                            goto LABEL_719;
                        }
                        else
                        {
                          v775 = 0;
                          v776 = *(_QWORD *)(v7 + 1712);
                        }
                        do
                        {
                          if ((*(_BYTE *)(*(_QWORD *)(v776 + 80) + 4) & 6) == 0)
                            ++v775;
                          v776 += 176;
                        }
                        while (v776 != v773);
LABEL_719:
                        v777 = 3 * v775;
LABEL_720:
                        v2077.i64[0] = v777;
                        v783 = *(_QWORD *)(v7 + 1736);
                        v784 = *(_QWORD *)(v7 + 1744);
                        if (v783 == v784)
                        {
                          v788 = 0;
                          goto LABEL_735;
                        }
                        v785 = v784 - v783 - 176;
                        if (v785 >= 0xB0)
                        {
                          v789 = 0;
                          v790 = 0;
                          v791 = v785 / 0xB0 + 1;
                          v787 = v783 + 176 * (v791 & 0x3FFFFFFFFFFFFFELL);
                          v792 = v783 + 256;
                          v793 = v791 & 0x3FFFFFFFFFFFFFELL;
                          do
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v792 - 176) + 4) & 6) == 0)
                              ++v789;
                            if ((*(_BYTE *)(*(_QWORD *)v792 + 4) & 6) == 0)
                              ++v790;
                            v792 += 352;
                            v793 -= 2;
                          }
                          while (v793);
                          v786 = v790 + v789;
                          if (v791 == (v791 & 0x3FFFFFFFFFFFFFELL))
                            goto LABEL_734;
                        }
                        else
                        {
                          v786 = 0;
                          v787 = *(_QWORD *)(v7 + 1736);
                        }
                        do
                        {
                          if ((*(_BYTE *)(*(_QWORD *)(v787 + 80) + 4) & 6) == 0)
                            ++v786;
                          v787 += 176;
                        }
                        while (v787 != v784);
LABEL_734:
                        v788 = 3 * v786;
LABEL_735:
                        v2077.i64[1] = v788;
                        sub_20F9235BC(*(_QWORD **)(v7 + 1760), *(_QWORD **)(v7 + 1768), (uint64_t)&v2073);
                        *(_QWORD *)&v2078 = 2 * v2078;
                        v794 = *(_QWORD **)(v7 + 1784);
                        v795 = *(_QWORD **)(v7 + 1792);
                        if (v794 == v795)
                        {
                          v796 = 0;
                        }
                        else
                        {
                          v796 = 0;
                          do
                          {
                            if ((*(_BYTE *)(v794[8] + 4) & 6) == 0
                              && (*(_BYTE *)(v794[9] + 4) & 6) == 0
                              && (*(_BYTE *)(v794[10] + 4) & 6) == 0
                              && (*(_BYTE *)(v794[11] + 4) & 6) == 0
                              && (*(_BYTE *)(v794[12] + 4) & 6) == 0
                              && (*(_BYTE *)(v794[13] + 4) & 6) == 0)
                            {
                              ++v796;
                            }
                            v794 += 23;
                          }
                          while (v794 != v795);
                        }
                        *((_QWORD *)&v2078 + 1) = 2 * v796;
                        sub_20F921AD8(*(_QWORD **)(v7 + 1808), *(_QWORD **)(v7 + 1816), (uint64_t)&v2073);
                        _CF = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v2073, v2074[3]), vaddq_s64(v2074[1], v2076)), vaddq_s64(vaddq_s64(v2074[0], v2075), vaddq_s64(v2074[2], v2077))))+ (uint64_t)v2078+ *((_QWORD *)&v2078 + 1)+ (_QWORD)v2079 >= (unint64_t)v62;
                        v9 = v2041;
                        if (!_CF)
                          goto LABEL_748;
                        goto LABEL_40;
                      }
                    }
                    else
                    {
                      v730 = 0;
                      v731 = *(_QWORD *)(v7 + 1544);
                    }
                    do
                    {
                      if ((*(_BYTE *)(*(_QWORD *)(v731 + 48) + 4) & 6) == 0)
                        ++v730;
                      v731 += 144;
                    }
                    while (v731 != v728);
                    goto LABEL_639;
                  }
                }
                else
                {
                  v714 = 0;
                  v715 = *(_QWORD *)(v7 + 1472);
                }
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v715 + 64) + 4) & 6) == 0)
                    ++v714;
                  v715 += 160;
                }
                while (v715 != v712);
                goto LABEL_604;
              }
            }
            else
            {
              v705 = 0;
              v706 = *(_QWORD *)(v7 + 1448);
            }
            do
            {
              if ((*(_BYTE *)(*(_QWORD *)(v706 + 136) + 4) & 6) == 0)
                ++v705;
              v706 += 280;
            }
            while (v706 != v703);
            goto LABEL_590;
          }
        }
        else
        {
          v696 = 0;
          v697 = *(_QWORD *)(v7 + 1424);
        }
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v697 + 136) + 4) & 6) == 0)
            ++v696;
          v697 += 280;
        }
        while (v697 != v694);
        goto LABEL_576;
      }
    }
    else
    {
      v674 = 0;
      v675 = *(_QWORD *)(v7 + 1400);
    }
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v675 + 136) + 4) & 6) == 0)
        ++v674;
      v675 += 280;
    }
    while (v675 != v672);
    goto LABEL_562;
  }
  _CF = *(_QWORD *)(v7 + 1896) >= (unint64_t)v62;
  v9 = v2041;
  if (!_CF)
    goto LABEL_748;
LABEL_40:
  if (*(_BYTE *)(v9 + 666))
  {
    ++*(_QWORD *)(v9 + 640);
    kdebug_trace();
    if ((byte_254A6B800 & 1) == 0)
    {
      fwrite("warning: using linearization / solving fallback.\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      byte_254A6B800 = 1;
    }
    v52 = v2041;
    if (!*(_BYTE *)(v7 + 2969))
    {
      v2073.i64[0] = 0;
      sub_20F92369C((_QWORD *)(v7 + 3112), v2073.i64);
      v53 = *(unsigned int *)(v7 + 3024);
      if ((_DWORD)v53)
        bzero(*(void **)(v7 + 3008), 8 * v53);
      v54 = *(_DWORD *)(v7 + 3000);
      if (v54 == 1)
      {
        v55 = *(unsigned int *)(v2041 + 16);
        if ((_DWORD)v55)
          bzero(*(void **)v2041, 8 * v55);
      }
      if (((*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2)
         + ((*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2)
         + ((*(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 48)) >> 2)
         + ((*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 2)
         + ((*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 2)
         + ((*(_QWORD *)(v11 + 128) - *(_QWORD *)(v11 + 120)) >> 2)
         + ((*(_QWORD *)(v11 + 152) - *(_QWORD *)(v11 + 144)) >> 2)
         + ((*(_QWORD *)(v11 + 176) - *(_QWORD *)(v11 + 168)) >> 2)
         + ((*(_QWORD *)(v11 + 200) - *(_QWORD *)(v11 + 192)) >> 2)
         + ((*(_QWORD *)(v11 + 224) - *(_QWORD *)(v11 + 216)) >> 2))
      {
        kdebug_trace();
        sub_20F8BC0E8(v13, v7 + 3008);
        kdebug_trace();
        v54 = *(_DWORD *)(v7 + 3000);
      }
      v56 = *(void **)(v7 + 18560);
      v57 = *(_BYTE *)(v7 + 2984);
      *(_QWORD *)v2057 = *(_QWORD *)(v7 + 2992);
      __p[0] = v56;
      LOBYTE(v2068) = v57;
      LODWORD(v2070.__r_.__value_.__l.__data_) = 2;
      LODWORD(v2053.f64[0]) = v54;
      v2073.i64[0] = v7 + 21120;
      v2073.i64[1] = (uint64_t)&v2053;
      v2074[0].i64[0] = v7 + 8;
      v2074[0].i64[1] = (uint64_t)&v2070;
      v2074[1].i64[0] = (uint64_t)&v2068;
      v2074[1].i64[1] = (uint64_t)v2057;
      v2074[2].i64[0] = (uint64_t)__p;
      sub_20F928268(&v2073);
      v52 = v2041;
      sub_20F8BCDD8(v7);
      *(_WORD *)(v7 + 2969) = 1;
      if (*(_BYTE *)v2003
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 108, (uint64_t)"!m_marginalizer.batchedMarginalizationConfig().isEnabled", 56, (uint64_t)"Batched marginalization not expected to be enabled in fallback to host.", 71, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    if (v2031)
    {
      *v8 = 257;
      if (__dst)
      {
        v2073 = 0uLL;
        v2074[0].i64[0] = 0;
        kdebug_trace();
        *v8 = 257;
        *v1995 = sub_20F9D7008(v7, (double **)&v2073);
        v58 = (void *)v2073.i64[0];
        if (v2073.i64[1] != v2073.i64[0])
          memmove(__dst, (const void *)v2073.i64[0], v2073.i64[1] - v2073.i64[0]);
        if (v58)
        {
          v2073.i64[1] = (uint64_t)v58;
          operator delete(v58);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, v7 + 57952);
      *(_DWORD *)(v52 + 608) = 0;
      if (v1954)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v7 + 57952);
        v2073 = 0uLL;
        v2074[0].i64[0] = 0;
        kdebug_trace();
        *v8 = 257;
        *v1946 = sub_20F9D7008(v7, (double **)&v2073);
        v59 = (void *)v2073.i64[0];
        if (v2073.i64[1] != v2073.i64[0])
          memmove(v1954, (const void *)v2073.i64[0], v2073.i64[1] - v2073.i64[0]);
        if (v59)
        {
          v2073.i64[1] = (uint64_t)v59;
          operator delete(v59);
        }
      }
    }
    goto LABEL_1296;
  }
  v64 = v8;
  v65 = v7 + 57816;
  ++*(_QWORD *)(v9 + 632);
  v2010 = v7 + 57816;
  if (*(_BYTE *)(v7 + 2969))
  {
    if (!v2031)
      goto LABEL_1296;
    if ((byte_254A6B801 & 1) == 0)
    {
      fwrite("warning: linearization / solving fission occured.\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      byte_254A6B801 = 1;
    }
    *v64 = 257;
    if (__dst)
    {
      kdebug_trace();
      *v1995 = sub_20F8C5830(v7, (uint64_t)__dst);
    }
    kdebug_trace();
    v66 = *(float64x2_t **)(v7 + 57912);
    v67 = (unsigned int *)&v66[1940].f64[1];
    if (!LODWORD(v66[1940].f64[1]))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, v7 + 57952);
      *(_DWORD *)(v7 + 57992) = 0;
      goto LABEL_1291;
    }
    v68 = v66 + 134092;
    f64 = v66[22333].f64;
    LODWORD(v66[134092].f64[0]) = 1017;
    ++LODWORD(v66[22738].f64[1]);
    v2022 = v66;
    kdebug_trace();
    v70 = *v67;
    if ((_DWORD)v70)
    {
      v71 = v66[2772].f64;
      memmove(&v66[22333], &v66[22227].f64[1], 8 * v70);
      v72 = 0;
      v73 = 0;
      v74 = v66[1940].f64[0];
      v75 = 196 - ((v70 + 3) & 0xFFFFFFFC);
      v76 = (uint64_t)&v66[2772].f64[v75];
      do
      {
        if (v73)
        {
          v78 = 0;
          v77 = 196 * v73;
          v88 = v75;
          do
          {
            v89 = v72 + v78;
            v90 = v78 + 7;
            v78 += 4;
            v91 = (int64x2_t *)&v71[v88];
            v92 = (int64x2_t *)&v71[v89];
            v93 = v91[1];
            v94 = v91[99];
            v95 = v91[98];
            v96 = v91[197];
            v97 = v91[196];
            v98 = vzip1q_s64(*v91, v95);
            v99 = vzip1q_s64(v97, v91[294]);
            v97.i64[0] = vdupq_laneq_s64(v97, 1).u64[0];
            v97.i64[1] = v91[294].i64[1];
            v100 = vzip2q_s64(*v91, v95);
            v101 = vzip1q_s64(v93, v94);
            v102 = vzip1q_s64(v96, v91[295]);
            v103 = vzip2q_s64(v93, v94);
            v94.i64[0] = vdupq_laneq_s64(v96, 1).u64[0];
            v94.i64[1] = v91[295].i64[1];
            *v92 = v98;
            v92[1] = v99;
            v92[98] = v100;
            v92[99] = v97;
            v92[196] = v101;
            v92[197] = v102;
            v92[294] = v103;
            v92[295] = v94;
            v88 += 784;
          }
          while (v90 < v73);
        }
        else
        {
          v77 = 0;
          LODWORD(v78) = 0;
        }
        v71[(v78 + v77)] = *(double *)(v76 + 8 * (196 * (_DWORD)v78 + v73));
        v71[197 * v73] = v74 + v71[197 * v73];
        v79 = 196 * (v73 | 1);
        v71[(v78 + v79)] = *(double *)(v76 + 8 * (196 * (_DWORD)v78 + (v73 | 1)));
        v80 = v78 + 1;
        v81 = 196 * v78 + 196;
        v71[(v78 + 1 + v79)] = *(double *)(v76 + 8 * (v81 + (v73 | 1)));
        v71[197 * (v73 | 1)] = v74 + v71[197 * (v73 | 1)];
        v82 = 196 * (v73 | 2);
        v71[(v78 + v82)] = *(double *)(v76 + 8 * (196 * (_DWORD)v78 + (v73 | 2)));
        v71[(v78 + 1 + v82)] = *(double *)(v76 + 8 * (v81 + (v73 | 2)));
        v83 = v78 + 2;
        v84 = 196 * v78 + 392;
        v71[v83 + v82] = *(double *)(v76 + 8 * (v84 + (v73 | 2)));
        v71[197 * (v73 | 2)] = v74 + v71[197 * (v73 | 2)];
        v85 = v73 | 3;
        v86 = 196 * v78 + (v73 | 3);
        v87 = v78 + 196 * (v73 | 3);
        v71[v87] = *(double *)(v76 + 8 * v86);
        v71[v80 + 196 * v85] = *(double *)(v76 + 8 * (v81 + v85));
        v71[v83 + 196 * v85] = *(double *)(v76 + 8 * (v84 + v85));
        v71[v87 + 3] = *(double *)(v76 + 8 * (v86 + 588));
        v71[197 * v85] = v74 + v71[197 * v85];
        v73 += 4;
        v72 += 784;
        v75 += 4;
      }
      while (v73 < v70);
    }
    else
    {
      v71 = v66[2772].f64;
    }
    kdebug_trace();
    LODWORD(v68->f64[0]) = 1018;
    kdebug_trace();
    v250 = *v67;
    if (v250 >= 4)
    {
      v251 = 0;
      v253 = 0;
      LODWORD(v252) = 0;
      v254 = v66 + 2772;
      while (1)
      {
        v255 = v252;
        if (v253)
        {
          v256 = 0;
          v257 = 0;
          v258 = 0;
          v259 = v253 & 0xFFFFFFFE;
          v260 = (float64x2_t *)((char *)v254 + 8 * v252);
          do
          {
            v295 = v258;
            v296 = &v254[v256];
            v297 = (float64x2_t *)((char *)v296 + 8 * v255);
            v299 = *v297;
            v298 = v297[1];
            v300 = v297[99];
            v301 = v297[98];
            v302 = v297[197];
            v303 = v297[196];
            v304 = v297[295];
            v305 = v297[294];
            if (v257)
            {
              if (v257 == 1)
              {
                v306 = 0;
              }
              else
              {
                v306 = 0;
                v307 = v257 & 0xFFFFFFFE;
                v308 = v260;
                v309 = (int64x2_t *)&v254->f64[v258];
                do
                {
                  v310 = v309[1];
                  v311 = v309[99];
                  v312 = v309[98];
                  v313 = (float64x2_t)v309[196];
                  v314 = v309[197];
                  v315 = (float64x2_t)vzip1q_s64((int64x2_t)v313, v309[294]);
                  *(_QWORD *)&v316.f64[0] = vdupq_laneq_s64((int64x2_t)v313, 1).u64[0];
                  v317 = (float64x2_t)vzip1q_s64(v314, v309[295]);
                  *(_QWORD *)&v313.f64[0] = vdupq_laneq_s64(v314, 1).u64[0];
                  v318 = v308[1];
                  *(_QWORD *)&v316.f64[1] = v309[294].i64[1];
                  v319 = v308[99];
                  v320 = v308[98];
                  v321 = v308[197];
                  v322 = v308[196];
                  *(_QWORD *)&v313.f64[1] = v309[295].i64[1];
                  v323 = v308[295];
                  v324 = v308[294];
                  v325 = (float64x2_t)vzip1q_s64(*v309, v312);
                  v326 = (float64x2_t)vzip2q_s64(*v309, v312);
                  v327 = (float64x2_t)vzip1q_s64(v310, v311);
                  v328 = (float64x2_t)vzip2q_s64(v310, v311);
                  v329 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v325, v308->f64[0]), v326, *v308, 1), v327, v318.f64[0]), v328, v318, 1);
                  v330 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v325, v320.f64[0]), v326, v320, 1), v327, v319.f64[0]), v328, v319, 1);
                  v331 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v308->f64[0]), v316, *v308, 1), v317, v318.f64[0]);
                  v332 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v325, v322.f64[0]), v326, v322, 1), v327, v321.f64[0]), v328, v321, 1);
                  v333 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v320.f64[0]), v316, v320, 1), v317, v319.f64[0]);
                  v334 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v322.f64[0]), v316, v322, 1), v317, v321.f64[0]);
                  v335 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v325, v324.f64[0]), v326, v324, 1), v327, v323.f64[0]), v328, v323, 1);
                  v336 = vmlaq_laneq_f64(vmulq_n_f64(v315, v324.f64[0]), v316, v324, 1);
                  v337 = v309[2];
                  v338 = v309[3];
                  v339 = vmlaq_n_f64(v336, v317, v323.f64[0]);
                  v340 = v309[101];
                  v341 = v309[100];
                  v342 = v309[199];
                  v343 = v309[198];
                  v344 = vmlaq_laneq_f64(v331, v313, v318, 1);
                  *(_QWORD *)&v318.f64[0] = vdupq_laneq_s64(v343, 1).u64[0];
                  *(_QWORD *)&v318.f64[1] = v309[296].i64[1];
                  v345 = vmlaq_laneq_f64(v333, v313, v319, 1);
                  v346 = (float64x2_t)vzip1q_s64(v343, v309[296]);
                  *(_QWORD *)&v319.f64[0] = vdupq_laneq_s64(v342, 1).u64[0];
                  *(_QWORD *)&v319.f64[1] = v309[297].i64[1];
                  v347 = vmlaq_laneq_f64(v334, v313, v321, 1);
                  v348 = (float64x2_t)vzip1q_s64(v342, v309[297]);
                  v350 = v308[2];
                  v349 = v308[3];
                  v351 = v308[101];
                  v352 = v308[100];
                  v353 = vmlaq_laneq_f64(v339, v313, v323, 1);
                  v354 = (float64x2_t)vzip1q_s64(v337, v341);
                  v355 = (float64x2_t)vzip2q_s64(v337, v341);
                  v356 = (float64x2_t)vzip1q_s64(v338, v340);
                  v357 = vsubq_f64(v299, v329);
                  v358 = (float64x2_t)vzip2q_s64(v338, v340);
                  v359 = v308[199];
                  v360 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v350.f64[0]), v355, v350, 1), v356, v349.f64[0]), v358, v349, 1);
                  v361 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v346, v350.f64[0]), v318, v350, 1), v348, v349.f64[0]), v319, v349, 1);
                  v362 = v308[198];
                  v363 = vsubq_f64(v298, v344);
                  v364 = v308[297];
                  v365 = vsubq_f64(v300, v345);
                  v366 = v308[296];
                  v298 = vsubq_f64(v363, v361);
                  v299 = vsubq_f64(v357, v360);
                  v300 = vsubq_f64(v365, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v346, v352.f64[0]), v318, v352, 1), v348, v351.f64[0]), v319, v351, 1));
                  v301 = vsubq_f64(vsubq_f64(v301, v330), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v352.f64[0]), v355, v352, 1), v356, v351.f64[0]), v358, v351, 1));
                  v303 = vsubq_f64(vsubq_f64(v303, v332), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v362.f64[0]), v355, v362, 1), v356, v359.f64[0]), v358, v359, 1));
                  v302 = vsubq_f64(vsubq_f64(v302, v347), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v346, v362.f64[0]), v318, v362, 1), v348, v359.f64[0]), v319, v359, 1));
                  v305 = vsubq_f64(vsubq_f64(v305, v335), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v354, v366.f64[0]), v355, v366, 1), v356, v364.f64[0]), v358, v364, 1));
                  v304 = vsubq_f64(vsubq_f64(v304, v353), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v346, v366.f64[0]), v318, v366, 1), v348, v364.f64[0]), v319, v364, 1));
                  v306 += 4;
                  v309 += 4;
                  v308 += 4;
                  v307 -= 2;
                }
                while (v307);
              }
              if ((v257 & 1) != 0)
              {
                v367 = &v254[v306];
                v368 = (int64x2_t *)&v367->f64[v295];
                v369 = (float64x2_t *)((char *)v367 + 8 * v255);
                v370 = v368[1];
                v371 = v368[99];
                v372 = v368[98];
                v373 = (float64x2_t)v368[197];
                v374 = v368[196];
                *(_QWORD *)&v375.f64[0] = vdupq_laneq_s64(v374, 1).u64[0];
                v376 = (float64x2_t)vzip1q_s64(v374, v368[294]);
                *(_QWORD *)&v375.f64[1] = v368[294].i64[1];
                v377 = (float64x2_t)vzip1q_s64((int64x2_t)v373, v368[295]);
                *(_QWORD *)&v373.f64[0] = vdupq_laneq_s64((int64x2_t)v373, 1).u64[0];
                *(_QWORD *)&v373.f64[1] = v368[295].i64[1];
                v378 = v369[1];
                v379 = v369[99];
                v380 = v369[98];
                v381 = v369[197];
                v382 = v369[196];
                v383 = v369[295];
                v384 = v369[294];
                v385 = (float64x2_t)vzip1q_s64(*v368, v372);
                v386 = (float64x2_t)vzip2q_s64(*v368, v372);
                v387 = (float64x2_t)vzip1q_s64(v370, v371);
                v388 = (float64x2_t)vzip2q_s64(v370, v371);
                v298 = vsubq_f64(v298, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v376, v369->f64[0]), v375, *v369, 1), v377, v378.f64[0]), v373, v378, 1));
                v299 = vsubq_f64(v299, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v385, v369->f64[0]), v386, *v369, 1), v387, v378.f64[0]), v388, v378, 1));
                v300 = vsubq_f64(v300, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v376, v380.f64[0]), v375, v380, 1), v377, v379.f64[0]), v373, v379, 1));
                v301 = vsubq_f64(v301, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v385, v380.f64[0]), v386, v380, 1), v387, v379.f64[0]), v388, v379, 1));
                v302 = vsubq_f64(v302, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v376, v382.f64[0]), v375, v382, 1), v377, v381.f64[0]), v373, v381, 1));
                v303 = vsubq_f64(v303, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v385, v382.f64[0]), v386, v382, 1), v387, v381.f64[0]), v388, v381, 1));
                v304 = vsubq_f64(v304, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v376, v384.f64[0]), v375, v384, 1), v377, v383.f64[0]), v373, v383, 1));
                v305 = vsubq_f64(v305, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v385, v384.f64[0]), v386, v384, 1), v387, v383.f64[0]), v388, v383, 1));
              }
            }
            v261 = (int64x2_t *)&v296->f64[v295];
            v262 = *v261;
            _Q22 = v261[98];
            _Q19 = v261[197];
            _Q20 = v261[196];
            _Q17 = v261[295];
            _Q18 = v261[294];
            *v297 = v299;
            v297[1] = v298;
            v297[98] = v301;
            v297[99] = v300;
            v297[196] = v303;
            v297[197] = v302;
            v297[294] = v305;
            v297[295] = v304;
            v268.f64[0] = v297[196].f64[0];
            v269.f64[0] = v297->f64[0];
            v269.f64[1] = v297[98].f64[0];
            v268.f64[1] = v297[294].f64[0];
            _Q1 = (float64x2_t)vdupq_lane_s64(v262.i64[0], 0);
            _Q2 = (int64x2_t)vdivq_f64(v268, _Q1);
            _Q3 = vdivq_f64(v269, _Q1);
            __asm
            {
              FMLS            D4, D22, V3.D[0]
              FMLS            D1, D22, V3.D[1]
            }
            _Q4.f64[1] = _Q1.f64[0];
            _Q5 = (float64x2_t)vdupq_laneq_s64(_Q22, 1);
            _Q1 = (int64x2_t)vdivq_f64(_Q4, _Q5);
            *(int64x2_t *)v297 = vzip1q_s64((int64x2_t)_Q3, _Q1);
            __asm
            {
              FMLS            D6, D22, V2.D[0]
              FMLS            D7, D22, V2.D[1]
            }
            _Q6.f64[1] = _D7;
            v297[98] = (float64x2_t)vzip2q_s64((int64x2_t)_Q3, _Q1);
            _Q4 = (int64x2_t)vdivq_f64(_Q6, _Q5);
            v297[196] = (float64x2_t)vzip1q_s64(_Q2, _Q4);
            v297[294] = (float64x2_t)vzip2q_s64(_Q2, _Q4);
            __asm
            {
              FMLS            D5, D20, V3.D[0]
              FMLS            D7, D20, V3.D[1]
              FMLS            D3, D20, V2.D[0]
              FMLS            D16, D20, V2.D[1]
            }
            _Q2.i64[0] = _Q20.i64[1];
            __asm
            {
              FMLS            D5, D1, V20.D[1]
              FMLS            D7, D2, V1.D[1]
              FMLS            D3, D4, V20.D[1]
              FMLS            D16, D2, V4.D[1]
            }
            _Q5.f64[1] = _D7;
            _Q3.f64[1] = _D16;
            v285 = (float64x2_t)vdupq_lane_s64(_Q19.i64[0], 0);
            _Q3 = (int8x16_t)vdivq_f64(_Q3, v285);
            _Q2 = (int8x16_t)vdivq_f64(_Q5, v285);
            *(_QWORD *)&v297[99].f64[0] = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
            *(_QWORD *)&v297[197].f64[0] = _Q3.i64[0];
            *(_QWORD *)&v297[295].f64[0] = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
            _Q19.i64[0] = _Q18.i64[1];
            __asm
            {
              FMLS            D5, D1, V18.D[1]
              FMLS            D6, D19, V1.D[1]
              FMLS            D7, D4, V18.D[1]
              FMLS            D16, D19, V4.D[1]
              FMLS            D5, D17, V2.D[0]
              FMLS            D6, D17, V2.D[1]
              FMLS            D7, D17, V3.D[0]
            }
            _Q5.f64[1] = _Q6.f64[0];
            __asm { FMLS            D16, D17, V3.D[1] }
            _Q7.f64[1] = _D16;
            v292 = (float64x2_t)vdupq_laneq_s64(_Q17, 1);
            v293 = (int8x16_t)vdivq_f64(_Q7, v292);
            v294 = (int8x16_t)vdivq_f64(_Q5, v292);
            *(_QWORD *)&v297[1].f64[0] = _Q2.i64[0];
            *(_QWORD *)&v297[1].f64[1] = v294.i64[0];
            *(_QWORD *)&v297[99].f64[1] = vextq_s8(v294, v294, 8uLL).u64[0];
            *(_QWORD *)&v297[197].f64[1] = v293.i64[0];
            *(_QWORD *)&v297[295].f64[1] = vextq_s8(v293, v293, 8uLL).u64[0];
            v256 += 2;
            v258 = v295 + 784;
            ++v257;
          }
          while (v257 != v253);
          v389 = (float64x2_t *)((char *)v254 + 8 * v255);
          v390 = (uint64_t)&v389->f64[v251];
          v391 = *(float64x2_t *)v390;
          v392 = *(float64x2_t *)(v390 + 1568);
          v393 = *(float64x2_t *)(v390 + 3152);
          v394 = *(float64x2_t *)(v390 + 3136);
          v395 = *(float64x2_t *)(v390 + 4720);
          v396 = *(float64x2_t *)(v390 + 4704);
          if (v253 == 1)
          {
            v397 = 0;
          }
          else
          {
            v397 = 0;
            v398 = *(float64x2_t *)(v390 + 16);
            v399 = *(float64x2_t *)(v390 + 1584);
            do
            {
              v400 = v260[1];
              v401 = v260[99];
              v402 = v260[98];
              v403 = v260[197];
              v404 = v260[196];
              v405 = v260[295];
              v406 = v260[294];
              v407 = (float64x2_t)vzip1q_s64((int64x2_t)v404, (int64x2_t)v406);
              *(_QWORD *)&v408.f64[0] = vdupq_laneq_s64((int64x2_t)v404, 1).u64[0];
              v408.f64[1] = v260[294].f64[1];
              v409 = (float64x2_t)vzip1q_s64((int64x2_t)v403, (int64x2_t)v405);
              *(_QWORD *)&v410.f64[0] = vdupq_laneq_s64((int64x2_t)v403, 1).u64[0];
              v411 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v260, (int64x2_t)v402);
              v410.f64[1] = v260[295].f64[1];
              v412 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v260, (int64x2_t)v402);
              v413 = (float64x2_t)vzip1q_s64((int64x2_t)v400, (int64x2_t)v401);
              v414 = (float64x2_t)vzip2q_s64((int64x2_t)v400, (int64x2_t)v401);
              v415 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, v260->f64[0]), v412, *v260, 1), v413, v400.f64[0]), v414, v400, 1);
              v416 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, v402.f64[0]), v412, v402, 1), v413, v401.f64[0]), v414, v401, 1);
              v417 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v402.f64[0]), v408, v402, 1), v409, v401.f64[0]);
              v418 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, v404.f64[0]), v412, v404, 1), v413, v403.f64[0]), v414, v403, 1);
              v419 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v404.f64[0]), v408, v404, 1), v409, v403.f64[0]);
              v420 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, v406.f64[0]), v412, v406, 1), v413, v405.f64[0]), v414, v405, 1);
              v421 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v260->f64[0]), v408, *v260, 1), v409, v400.f64[0]), v410, v400, 1);
              v422 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v407, v406.f64[0]), v408, v406, 1), v409, v405.f64[0]);
              v424 = v260[2];
              v423 = v260[3];
              v425 = v260[101];
              v426 = vmlaq_laneq_f64(v417, v410, v401, 1);
              v427 = v260[100];
              v428 = v260[199];
              v429 = v260[198];
              v430 = v260[297];
              v431 = v260[296];
              v432 = vmlaq_laneq_f64(v419, v410, v403, 1);
              v433 = (float64x2_t)vzip1q_s64((int64x2_t)v429, (int64x2_t)v431);
              *(_QWORD *)&v414.f64[0] = vdupq_laneq_s64((int64x2_t)v429, 1).u64[0];
              v414.f64[1] = v260[296].f64[1];
              v434 = vmlaq_laneq_f64(v422, v410, v405, 1);
              v435 = (float64x2_t)vzip1q_s64((int64x2_t)v428, (int64x2_t)v430);
              *(_QWORD *)&v410.f64[0] = vdupq_laneq_s64((int64x2_t)v428, 1).u64[0];
              v410.f64[1] = v260[297].f64[1];
              v436 = vsubq_f64(v391, v415);
              v437 = (float64x2_t)vzip1q_s64((int64x2_t)v424, (int64x2_t)v427);
              v438 = (float64x2_t)vzip2q_s64((int64x2_t)v424, (int64x2_t)v427);
              v439 = (float64x2_t)vzip1q_s64((int64x2_t)v423, (int64x2_t)v425);
              v440 = vsubq_f64(v392, v416);
              v441 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, v424.f64[0]), v438, v424, 1), v439, v423.f64[0]);
              v442 = vmlaq_laneq_f64(vmulq_n_f64(v433, v424.f64[0]), v414, v424, 1);
              v443 = (float64x2_t)vzip2q_s64((int64x2_t)v423, (int64x2_t)v425);
              v398 = vsubq_f64(vsubq_f64(v398, v421), vmlaq_laneq_f64(vmlaq_n_f64(v442, v435, v423.f64[0]), v410, v423, 1));
              v391 = vsubq_f64(v436, vmlaq_laneq_f64(v441, v443, v423, 1));
              v399 = vsubq_f64(vsubq_f64(v399, v426), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v433, v427.f64[0]), v414, v427, 1), v435, v425.f64[0]), v410, v425, 1));
              v392 = vsubq_f64(v440, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, v427.f64[0]), v438, v427, 1), v439, v425.f64[0]), v443, v425, 1));
              v393 = vsubq_f64(vsubq_f64(v393, v432), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v433, v429.f64[0]), v414, v429, 1), v435, v428.f64[0]), v410, v428, 1));
              v394 = vsubq_f64(vsubq_f64(v394, v418), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, v429.f64[0]), v438, v429, 1), v439, v428.f64[0]), v443, v428, 1));
              v396 = vsubq_f64(vsubq_f64(v396, v420), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v437, v431.f64[0]), v438, v431, 1), v439, v430.f64[0]), v443, v430, 1));
              v395 = vsubq_f64(vsubq_f64(v395, v434), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v433, v431.f64[0]), v414, v431, 1), v435, v430.f64[0]), v410, v430, 1));
              v397 += 4;
              v260 += 4;
              v259 -= 2;
            }
            while (v259);
          }
          if ((v253 & 1) != 0)
          {
            v444 = &v389[v397];
            v445 = v444[1];
            v446 = v444[99];
            v447 = v444[98];
            v448 = v444[197];
            v449 = v444[196];
            v450 = v444[295];
            v451 = v444[294];
            *(_QWORD *)&v452.f64[0] = vdupq_laneq_s64((int64x2_t)v449, 1).u64[0];
            v453 = (float64x2_t)vzip1q_s64((int64x2_t)v449, (int64x2_t)v451);
            v452.f64[1] = v444[294].f64[1];
            v454 = (float64x2_t)vzip1q_s64((int64x2_t)v448, (int64x2_t)v450);
            *(_QWORD *)&v455.f64[0] = vdupq_laneq_s64((int64x2_t)v448, 1).u64[0];
            v455.f64[1] = v444[295].f64[1];
            v456 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v444, (int64x2_t)v447);
            v457 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v444, (int64x2_t)v447);
            v458 = (float64x2_t)vzip1q_s64((int64x2_t)v445, (int64x2_t)v446);
            v459 = (float64x2_t)vzip2q_s64((int64x2_t)v445, (int64x2_t)v446);
            *(_QWORD *)&v391.f64[0] = *(_OWORD *)&vsubq_f64(v391, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v456, v444->f64[0]), v457, *v444, 1), v458, v445.f64[0]), v459, v445, 1));
            v392 = vsubq_f64(v392, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v456, v447.f64[0]), v457, v447, 1), v458, v446.f64[0]), v459, v446, 1));
            *(_QWORD *)&v393.f64[0] = *(_OWORD *)&vsubq_f64(v393, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v453, v449.f64[0]), v452, v449, 1), v454, v448.f64[0]), v455, v448, 1));
            v394 = vsubq_f64(v394, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v456, v449.f64[0]), v457, v449, 1), v458, v448.f64[0]), v459, v448, 1));
            v395 = vsubq_f64(v395, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v453, v451.f64[0]), v452, v451, 1), v454, v450.f64[0]), v455, v450, 1));
            v396 = vsubq_f64(v396, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v456, v451.f64[0]), v457, v451, 1), v458, v450.f64[0]), v459, v450, 1));
          }
        }
        else
        {
          v390 = (uint64_t)&v254->f64[v251 + v252];
          v391 = *(float64x2_t *)v390;
          v392 = *(float64x2_t *)(v390 + 1568);
          v393 = *(float64x2_t *)(v390 + 3152);
          v394 = *(float64x2_t *)(v390 + 3136);
          v395 = *(float64x2_t *)(v390 + 4720);
          v396 = *(float64x2_t *)(v390 + 4704);
        }
        if (v391.f64[0] <= 0.0)
          break;
        v460 = sqrt(v391.f64[0]);
        v392.f64[0] = v392.f64[0] / v460;
        v461 = v392.f64[1] - v392.f64[0] * v392.f64[0];
        if (v461 <= 0.0)
          break;
        v462 = sqrt(v461);
        v463 = vdivq_f64((float64x2_t)vzip1q_s64((int64x2_t)v394, (int64x2_t)v396), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v460, 0));
        v464 = v393.f64[0] - vmulq_f64(v463, v463).f64[0];
        v465 = vdivq_f64(vsubq_f64((float64x2_t)vzip2q_s64((int64x2_t)v394, (int64x2_t)v396), vmulq_n_f64(v463, v392.f64[0])), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v462, 0));
        v466 = v464 - vmulq_f64(v465, v465).f64[0];
        if (v466 <= 0.0)
          break;
        v467 = sqrt(v466);
        v468 = (v395.f64[0] - vmuld_lane_f64(v463.f64[0], v463, 1) - vmuld_lane_f64(v465.f64[0], v465, 1)) / v467;
        v469 = v395.f64[1] - vmuld_lane_f64(v463.f64[1], v463, 1) - vmuld_lane_f64(v465.f64[1], v465, 1) - v468 * v468;
        if (v469 <= 0.0)
          break;
        *(double *)v390 = v460;
        *(_QWORD *)(v390 + 8) = 0;
        *(_OWORD *)(v390 + 16) = 0uLL;
        *(float64_t *)(v390 + 1568) = v392.f64[0];
        *(double *)(v390 + 1576) = v462;
        *(_OWORD *)(v390 + 1584) = 0uLL;
        *(float64_t *)(v390 + 3136) = v463.f64[0];
        *(float64_t *)(v390 + 3144) = v465.f64[0];
        *(double *)(v390 + 3152) = v467;
        *(_QWORD *)(v390 + 3160) = 0;
        *(float64_t *)(v390 + 4704) = v463.f64[1];
        *(float64_t *)(v390 + 4712) = v465.f64[1];
        *(double *)(v390 + 4720) = v468;
        *(double *)(v390 + 4728) = sqrt(v469);
        v251 += 4;
        v252 = (v255 + 784);
        if (++v253 == v250 >> 2)
          goto LABEL_378;
      }
LABEL_450:
      v569 = 0;
      HIDWORD(v66[22738].f64[1]) = 3;
    }
    else
    {
      LODWORD(v251) = 0;
      v252 = 0;
LABEL_378:
      if (v251 < v250)
      {
        v470 = 0;
        v471 = (float64x2_t *)((char *)v66 + 8 * v252);
        v472 = v471[2772].f64;
        v473 = v251;
        v474 = (_OWORD *)v471[2774].f64;
        do
        {
          v475 = v473 >> 2;
          if (v473 >> 2 <= 1)
            v475 = 1;
          v476 = (v251 + v470) >> 2;
          if (v476 <= 1)
            LOBYTE(v476) = 1;
          if (v473)
          {
            v477 = 0;
            v478 = v475 & 0x3FFFFFFE;
            v479 = 4 * v475;
            v480 = v71;
            do
            {
              v481 = v477 >> 2;
              if (v477 >> 2 <= 1)
                v481 = 1;
              v482 = v472[v477];
              if (v477 >= 4)
              {
                if (v477 >= 8)
                {
                  v485 = 0;
                  v484 = 0;
                  v486 = v481 & 0x3FFFFFFE;
                  do
                  {
                    _Q2 = *(_OWORD *)&v472[v485];
                    _Q1 = *(_OWORD *)&v472[v485 + 2];
                    _D4 = v480[v485 + 1];
                    __asm { FMLA            D5, D4, V2.D[1] }
                    *(double *)&_Q2 = v480[v485 + 3];
                    __asm { FMLA            D5, D2, V1.D[1] }
                    v492 = v482 - _D5;
                    _Q2 = *(_OWORD *)&v472[v485 + 4];
                    _Q1 = *(_OWORD *)&v472[v485 + 6];
                    _D4 = v480[v485 + 5];
                    __asm { FMLA            D5, D4, V2.D[1] }
                    *(double *)&_Q2 = v480[v485 + 7];
                    __asm { FMLA            D5, D2, V1.D[1] }
                    v482 = v492 - _D5;
                    v484 += 8;
                    v485 += 8;
                    v486 -= 2;
                  }
                  while (v486);
                }
                else
                {
                  v484 = 0;
                }
                v483 = 4 * v481;
                if ((v481 & 1) != 0)
                {
                  v498 = v484;
                  v499 = &v472[v484];
                  v500 = &v480[v498];
                  _Q2 = *(_OWORD *)v499;
                  _Q1 = *((_OWORD *)v499 + 1);
                  _D4 = *((_QWORD *)v500 + 1);
                  __asm { FMLA            D5, D4, V2.D[1] }
                  *(double *)&_Q2 = v500[3];
                  __asm { FMLA            D5, D2, V1.D[1] }
                  v482 = v482 - _D5;
                }
              }
              else
              {
                v483 = 0;
              }
              if ((v477 & 3) != 0)
                v482 = v482 - v472[v483] * v480[v483];
              if ((v477 & 2) != 0)
                v482 = v482 - v472[v483 | 1] * v480[v483 | 1];
              if ((v477 & 3) == 3)
                v482 = v482 - v472[v483 | 2] * v480[v483 | 2];
              v472[v477] = v482 / v480[v477];
              v480 += 196;
              ++v477;
            }
            while (v477 != v473);
            v506 = &v472[v473];
            v507 = *v506;
            if (v473 >= 4)
            {
              if ((v251 + v470) >= 8)
              {
                v508 = 0;
                v509 = v474;
                do
                {
                  _D4 = *((_QWORD *)v509 - 3);
                  __asm { FMLA            D3, D4, V2.D[1] }
                  _D2 = *((_QWORD *)v509 - 1);
                  __asm { FMLA            D3, D2, V1.D[1] }
                  v514 = v507 - _D3;
                  _Q2 = *v509;
                  _Q1 = v509[1];
                  v509 += 4;
                  _D4 = *((_QWORD *)&_Q2 + 1);
                  __asm { FMLA            D3, D4, V2.D[1] }
                  *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
                  __asm { FMLA            D3, D2, V1.D[1] }
                  v507 = v514 - _D3;
                  v508 += 8;
                  v478 -= 2;
                }
                while (v478);
              }
              else
              {
                v508 = 0;
              }
              if ((v476 & 1) != 0)
              {
                v520 = &v472[v508];
                _Q2 = *(_OWORD *)v520;
                _D4 = *((_QWORD *)v520 + 1);
                __asm { FMLA            D3, D4, V2.D[1] }
                *(double *)&_Q2 = v520[3];
                __asm { FMLA            D3, D2, V1.D[1] }
                v507 = v507 - _D3;
              }
            }
            else
            {
              v479 = 0;
            }
            v525 = v473 & 3;
            if ((v473 & 3) != 0)
              v507 = v507 - v472[v479] * v472[v479];
            if ((v473 & 2) != 0)
            {
              v507 = v507 - v472[v479 | 1] * v472[v479 | 1];
              if (v525 != 3)
              {
LABEL_420:
                if (v507 < 0.0)
                  goto LABEL_450;
                goto LABEL_421;
              }
            }
            else if (v525 != 3)
            {
              goto LABEL_420;
            }
            v507 = v507 - v472[v479 | 2] * v472[v479 | 2];
            if (v507 < 0.0)
              goto LABEL_450;
          }
          else
          {
            v507 = *v472;
            v506 = v472;
            if (*v472 < 0.0)
              goto LABEL_450;
          }
LABEL_421:
          *v506 = sqrt(v507);
          v472 += 196;
          ++v473;
          ++v470;
          v474 += 98;
        }
        while (v473 != v250);
      }
      v526 = vaddq_f64(v66[2755], (float64x2_t)0);
      v66[2754] = vaddq_f64(v66[2754], (float64x2_t)0);
      v66[2755] = v526;
      if ((_DWORD)v250)
      {
        v527 = 0;
        v528 = v66 + 22337;
        while (1)
        {
          if (v527 >> 2 <= 1)
            v530 = 1;
          else
            v530 = v527 >> 2;
          v531 = v527 & 3;
          if (v527 >= 4)
          {
            if (v530 >= 4)
            {
              v534 = 0;
              v533 = 0;
              v535 = v530 & 0x3FFFFFFC;
              v529 = 0.0;
              do
              {
                _Q4 = *(_OWORD *)&v71[v534 / 8];
                _Q3 = *(_OWORD *)&v71[v534 / 8 + 2];
                _D6 = *((_QWORD *)&v528[v534 / 0x10 - 3] - 1);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(_QWORD *)&_Q4 = *((_QWORD *)&v528[v534 / 0x10 - 2] - 1);
                __asm { FMLA            D7, D4, V3.D[1] }
                v541 = v529 + _D7;
                _Q4 = *(_OWORD *)&v71[v534 / 8 + 4];
                _Q3 = *(_OWORD *)&v71[v534 / 8 + 6];
                _D6 = *((_QWORD *)&v528[v534 / 0x10 - 1] - 1);
                __asm { FMLA            D7, D6, V4.D[1] }
                *(float64_t *)&_Q4 = v528[v534 / 0x10 - 1].f64[1];
                __asm { FMLA            D7, D4, V3.D[1] }
                v547 = v541 + _D7;
                _Q4 = *(_OWORD *)&v71[v534 / 8 + 8];
                _Q3 = *(_OWORD *)&v71[v534 / 8 + 10];
                _D6 = v528[v534 / 0x10].f64[1];
                __asm { FMLA            D7, D6, V4.D[1] }
                *(float64_t *)&_Q4 = v528[v534 / 0x10 + 1].f64[1];
                __asm { FMLA            D7, D4, V3.D[1] }
                v553 = v547 + _D7;
                _Q4 = *(_OWORD *)&v71[v534 / 8 + 12];
                _Q3 = *(_OWORD *)&v71[v534 / 8 + 14];
                _D6 = v528[v534 / 0x10 + 2].f64[1];
                __asm { FMLA            D7, D6, V4.D[1] }
                *(float64_t *)&_Q4 = v528[v534 / 0x10 + 3].f64[1];
                __asm { FMLA            D7, D4, V3.D[1] }
                v529 = v553 + _D7;
                v533 += 16;
                v534 += 128;
                v535 -= 4;
              }
              while (v535);
            }
            else
            {
              v533 = 0;
              v529 = 0.0;
            }
            v559 = v530 & 3;
            if ((v530 & 3) != 0)
            {
              v560 = v533;
              do
              {
                _Q4 = *(_OWORD *)&v71[v560];
                _Q3 = *(_OWORD *)&v71[v560 + 2];
                _D6 = f64[v560 + 1];
                __asm { FMLA            D7, D6, V4.D[1] }
                *(double *)&_Q4 = f64[v560 + 3];
                __asm { FMLA            D7, D4, V3.D[1] }
                v529 = v529 + _D7;
                v560 += 4;
                --v559;
              }
              while (v559);
            }
            v566 = 4 * (v530 - 1) + 4;
            if ((v527 & 3) != 0)
              v529 = v529 + v71[v566 & 0xFFFFFFFC] * f64[v566 & 0xFFFFFFFC];
            if ((v527 & 2) != 0)
            {
              v567 = (32 * (((unint64_t)(v566 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
              v529 = v529 + *(double *)((char *)v71 + v567) * *(double *)((char *)f64 + v567);
            }
            if (v531 != 3)
              goto LABEL_425;
            v568 = (32 * (((unint64_t)(v566 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 0x10;
            v532 = *(double *)((char *)v71 + v568) * *(double *)((char *)f64 + v568);
          }
          else if ((v527 & 3) != 0)
          {
            v529 = *v71 * *f64 + 0.0;
            if ((v527 & 2) != 0)
              v529 = v529 + v71[1] * v66[22333].f64[1];
            if (v531 != 3)
              goto LABEL_425;
            v532 = v71[2] * v66[22334].f64[0];
          }
          else
          {
            v529 = 0.0;
            if ((v527 & 2) == 0)
              goto LABEL_425;
            v529 = v71[1] * v66[22333].f64[1];
            v532 = 0.0;
          }
          v529 = v532 + v529;
LABEL_425:
          f64[v527] = (f64[v527] - v529) / v71[v527];
          v71 += 196;
          if (++v527 == v250)
          {
            v596 = 0;
            v597 = 196 * v250;
            v598 = v66 + 2772;
            v599 = 197 * v250 + 195;
            v600 = v250;
            while (1)
            {
              v602 = v600 - 1;
              v603 = 196 * v600;
              if ((int)v600 + 3 < v250)
              {
                v601 = 0.0;
                v604 = v599;
                v605 = v596;
                do
                {
                  v606 = (uint64_t)&v598->f64[v602 + v603];
                  v607 = &f64[(v250 + v605)];
                  _Q4 = *(_OWORD *)v607;
                  _Q3 = *((_OWORD *)v607 + 1);
                  _D6 = *(_QWORD *)(v606 + 1568);
                  __asm { FMLA            D5, D6, V4.D[1] }
                  *(_QWORD *)&_Q4 = *(_QWORD *)(v606 + 4704);
                  __asm { FMLA            D5, D4, V3.D[1] }
                  v601 = v601 + _D5;
                  v603 += 784;
                  v605 += 4;
                  v604 += 784;
                }
                while ((int)v250 + v605 + 3 < v250);
                if ((-v605 & 3) != 0)
                  v601 = v601 + f64[(v250 + v605)] * v598[-98].f64[v604];
                if ((-v605 & 2) != 0)
                  v601 = v601 + f64[(v250 + v605 + 1)] * v598->f64[v604];
                if ((-v605 & 3) != 3)
                  goto LABEL_481;
                v613 = (v250 + v605 + 2);
                goto LABEL_480;
              }
              if ((((_BYTE)v250 - (_BYTE)v600) & 3) == 0)
                break;
              v601 = f64[v600] * v598[v603 / 2].f64[v602] + 0.0;
              if ((((_BYTE)v250 - (_BYTE)v600) & 2) != 0)
                goto LABEL_493;
LABEL_494:
              if ((((_BYTE)v250 - (_BYTE)v600) & 3) != 3)
                goto LABEL_481;
              v613 = (v600 + 2);
LABEL_480:
              v601 = v601 + f64[v613] * v598[195].f64[(_DWORD)v600 + 1 + v603];
LABEL_481:
              v597 -= 196;
              f64[(v600 - 1)] = (f64[(v600 - 1)] - v601)
                                            / v598->f64[(v597 + v600 - 1)];
              --v596;
              v599 -= 197;
              --v600;
              if (!v602)
                goto LABEL_498;
            }
            v601 = 0.0;
            if ((((_BYTE)v250 - (_BYTE)v600) & 2) == 0)
              goto LABEL_494;
LABEL_493:
            v601 = v601 + f64[(v600 + 1)] * v598[97].f64[(_DWORD)v600 + 1 + v603];
            goto LABEL_494;
          }
        }
      }
LABEL_498:
      v614 = vaddq_f64(v66[2757], (float64x2_t)0);
      v66[2756] = vaddq_f64(v66[2756], (float64x2_t)0);
      v66[2757] = v614;
      v569 = 1;
    }
    kdebug_trace();
    if (v569)
    {
      v2004 = v66 + 134092;
      LODWORD(v68->f64[0]) = 1019;
      v615 = *v67;
      v616 = HIDWORD(v66[1940].f64[1]);
      v617 = &f64[v615];
      *(_OWORD *)v617 = 0u;
      *((_OWORD *)v617 + 1) = 0u;
      *((_OWORD *)v617 + 2) = 0u;
      *((_OWORD *)v617 + 3) = 0u;
      *((_OWORD *)v617 + 4) = 0u;
      *((_OWORD *)v617 + 5) = 0u;
      *((_OWORD *)v617 + 6) = 0u;
      *((_OWORD *)v617 + 7) = 0u;
      if ((_DWORD)v616)
      {
        v618 = 0;
        v619 = (float64x2_t *)((char *)v66 + 359016);
        v2013 = v66 + 78616;
        v620 = &v2073.i8[4 * v615];
        v621 = (uint64_t)&v66[21980].f64[v615];
        v622 = (float64x2_t *)((char *)v66 + 361416);
        v623 = v2022[2739];
        v624 = v2022[2738];
        do
        {
          if ((_DWORD)v615)
          {
            v627 = &v2073;
            v2042 = v623;
            v2032 = v624;
            memcpy(&v2073, (char *)v2013 + 4 * (195 * v618), 4 * v615);
            v628 = 0;
            v624 = vaddq_f64(v2032, (float64x2_t)0);
            v623 = vaddq_f64(v2042, (float64x2_t)0);
            v2022[2739] = v623;
            v2022[2738] = v624;
            *(_OWORD *)v620 = 0u;
            *((_OWORD *)v620 + 1) = 0u;
            *((_OWORD *)v620 + 2) = 0u;
            *((_OWORD *)v620 + 3) = 0u;
            v625 = *(double *)(v621 + 8 * v618);
            v626 = v622->f64[v618];
            v629 = f64;
            do
            {
              _Q3 = *((_OWORD *)v629 + 6);
              _Q2 = *((_OWORD *)v629 + 7);
              _Q5 = *((_OWORD *)v629 + 4);
              _Q4 = *((_OWORD *)v629 + 5);
              _Q7 = *((_OWORD *)v629 + 2);
              _Q6 = *((_OWORD *)v629 + 3);
              _Q17 = *(_OWORD *)v629;
              _Q16 = *((_OWORD *)v629 + 1);
              v629 += 16;
              v638 = (float32x4_t)v627[1];
              v639 = (float32x4_t)v627[2];
              v640 = (float32x4_t)v627[3];
              _D25 = vcvtq_f64_f32(*(float32x2_t *)v627).f64[1];
              __asm { FMLA            D26, D25, V17.D[1] }
              *(float64_t *)&_Q17 = vcvt_hight_f64_f32(*(float32x4_t *)v627).f64[1];
              __asm { FMLA            D26, D17, V16.D[1] }
              *(float64_t *)&_Q17 = vcvtq_f64_f32(*(float32x2_t *)&v638).f64[1];
              __asm { FMLA            D26, D17, V7.D[1] }
              *(float64_t *)&_Q7 = vcvt_hight_f64_f32(v638).f64[1];
              __asm { FMLA            D26, D7, V6.D[1] }
              *(float64_t *)&_Q7 = vcvtq_f64_f32(*(float32x2_t *)&v639).f64[1];
              __asm { FMLA            D26, D7, V5.D[1] }
              *(float64_t *)&_Q5 = vcvt_hight_f64_f32(v639).f64[1];
              __asm { FMLA            D26, D5, V4.D[1] }
              *(float64_t *)&_Q4 = vcvtq_f64_f32(*(float32x2_t *)&v640).f64[1];
              __asm { FMLA            D26, D4, V3.D[1] }
              *(float64_t *)&_Q3 = vcvt_hight_f64_f32(v640).f64[1];
              __asm { FMLA            D26, D3, V2.D[1] }
              v625 = v625 - _D26;
              v628 += 16;
              v627 += 4;
            }
            while (v628 < v615);
          }
          else
          {
            v623 = vaddq_f64(v623, (float64x2_t)0);
            v624 = vaddq_f64(v624, (float64x2_t)0);
            v2022[2738] = v624;
            v2022[2739] = v623;
            v625 = *(double *)(v621 + 8 * v618);
            v626 = v622->f64[v618];
          }
          v619->f64[v618++] = v626 * v625;
        }
        while (v618 != v616);
      }
      LODWORD(v2004->f64[0]) = 1020;
      v65 = v2010;
      v66 = v2022;
    }
    v650 = vaddq_f64(v66[2753], (float64x2_t)0);
    v66[2752] = vaddq_f64(v66[2752], (float64x2_t)0);
    v66[2753] = v650;
    v651 = *(_QWORD *)(v65 + 96);
    v652 = (double *)(v651 + 357328);
    v653 = *(unsigned int *)(v651 + 31048);
    v654 = (double **)(v65 + 136);
    if ((_DWORD)v653 != *(_DWORD *)(v65 + 152))
    {
      if (v652 == *v654)
      {
        v1431 = (float64x2_t *)operator new((8 * v653 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if ((_DWORD)v653)
        {
          v1432 = (v653 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v1433 = (double *)v1431;
          v1434 = (double *)(v651 + 357328);
          if (v1432 < 5)
            goto LABEL_1537;
          v1433 = (double *)v1431;
          v1434 = (double *)(v651 + 357328);
          if ((unint64_t)&v1431[-22333] - v651 < 0x20)
            goto LABEL_1537;
          v1435 = v1432 + 1;
          v1436 = v1435 & 0x3FFFFFFFFFFFFFFCLL;
          v1433 = &v1431->f64[v1436];
          v1434 = &v652[v1436];
          v1437 = (float64x2_t *)(v651 + 357344);
          v1438 = v1431 + 1;
          v1439 = v1435 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1440 = vnegq_f64(*v1437);
            v1438[-1] = vnegq_f64(v1437[-1]);
            *v1438 = v1440;
            v1437 += 2;
            v1438 += 2;
            v1439 -= 4;
          }
          while (v1439);
          if (v1435 != (v1435 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1537:
            do
            {
              v1441 = *v1434++;
              *v1433++ = -v1441;
            }
            while (v1433 != &v1431->f64[v653]);
          }
        }
        *(_QWORD *)(v65 + 136) = v1431;
        *(_QWORD *)(v65 + 144) = ((8 * v653 + 31) & 0xFFFFFFFE0uLL) >> 3;
        *(_DWORD *)(v65 + 152) = v653;
        goto LABEL_1263;
      }
      sub_20F901C54((_DWORD *)(v65 + 136), *(_DWORD *)(v651 + 31048));
      LODWORD(v653) = *(_DWORD *)(v65 + 152);
    }
    v655 = *v654;
    v656 = v653;
    if (v652 != *v654)
    {
      if (!(_DWORD)v653)
        goto LABEL_1279;
      v657 = (v653 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v657 >= 5)
      {
        v658 = *v654;
        if ((unint64_t)v655 - v651 - 357328 >= 0x20)
        {
          v1453 = v657 + 1;
          v1454 = v1453 & 0x3FFFFFFFFFFFFFFCLL;
          v658 = &v655[v1454];
          v1455 = &v652[v1454];
          v1456 = (float64x2_t *)(v651 + 357344);
          v1457 = (float64x2_t *)(v655 + 2);
          v1458 = v1453 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1459 = vnegq_f64(*v1456);
            v1457[-1] = vnegq_f64(v1456[-1]);
            *v1457 = v1459;
            v1456 += 2;
            v1457 += 2;
            v1458 -= 4;
          }
          while (v1458);
          v652 = v1455;
          if (v1453 == (v1453 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1279:
            v1462 = *(_QWORD *)(v65 + 96);
            v1463 = (void *)(v1462 + 359016);
            v1464 = *(unsigned int *)(v1462 + 31052);
            v1465 = (void **)(v65 + 160);
            if ((_DWORD)v1464 != *(_DWORD *)(v65 + 176))
            {
              if (v1463 == *v1465)
              {
                v1469 = operator new((8 * v1464 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
                v1470 = v1469;
                if ((_DWORD)v1464)
                  memmove(v1469, v1463, 8 * v1464);
                *(_QWORD *)(v65 + 160) = v1470;
                *(_QWORD *)(v65 + 168) = ((8 * v1464 + 31) & 0xFFFFFFFE0uLL) >> 3;
                *(_DWORD *)(v65 + 176) = v1464;
                MEMORY[0x212BC6368](v1463, 0x1000C8000313F17);
                v7 = (uint64_t)v1892;
LABEL_1291:
                if (v1954)
                {
                  kdebug_trace();
                  v1473 = *(_QWORD *)(v65 + 96);
                  v1939 = (_DWORD *)(v1473 + 2145472);
                  *(_DWORD *)(v1473 + 2145472) = 1032;
                  ++*(_DWORD *)(v1473 + 363816);
                  *(_BYTE *)(v1473 + 31280) = 1;
                  if (!*(_BYTE *)(v1473 + 31281))
                  {
                    *(_BYTE *)(v1473 + 31281) = 1;
                    sub_20F904994(v1473 + 363904, (__int128 *)(v1473 + 64));
                  }
                  v1966 = (_DWORD *)(v1473 + 64);
                  v1945 = v1473 + 31064;
                  v1474 = *(_DWORD *)(v1473 + 1744);
                  if (v1474)
                  {
                    v1475 = 0;
                    v1476 = *(unsigned __int8 *)(v1473 + 31074);
                    v1477 = 168 * v1474;
                    v1478 = 31116;
                    do
                    {
                      v1480 = *(unsigned int *)(v1473 + v1478 - 40);
                      if ((_DWORD)v1480 == -1)
                        break;
                      v1481 = *(_QWORD *)(v65 + 136);
                      v1482 = (float64x2_t *)(v1481 + 8 * v1480);
                      v1471.f64[0] = v1482[1].f64[0];
                      _Q2 = *v1482;
                      v1484 = (float64x2_t *)(v1481 + 8 * *(unsigned int *)(v1473 + v1478));
                      v2049 = *v1484;
                      _Q0.f64[1] = v1484->f64[1];
                      _Q0.f64[0] = v1484[1].f64[0];
                      v2037 = _Q0;
                      v1486 = v1473 + v1475;
                      _D3 = _Q2.f64[1];
                      __asm { FMLA            D0, D3, V2.D[1] }
                      v1488 = sqrt(_Q0.f64[0] + v1471.f64[0] * v1471.f64[0]);
                      v1472.f64[0] = 1.0 / v1488;
                      if (v1488 == 0.0)
                        v1472.f64[0] = 1.0;
                      v2029 = vmulq_f64(v1471, v1472).f64[0];
                      v2019 = vmulq_n_f64(_Q2, v1472.f64[0]);
                      v1490 = __sincos_stret(v1488);
                      cosval = v1490.__cosval;
                      v1499 = v2019;
                      v1472.f64[0] = cosval + (1.0 - cosval) * vmuld_n_f64(v1499.f64[0], v1499.f64[0]);
                      v1491 = (1.0 - v1490.__cosval) * vmuld_lane_f64(v1499.f64[0], v1499, 1);
                      v1492 = v1491 - v1490.__sinval * v2029;
                      v1493 = (1.0 - v1490.__cosval) * vmuld_n_f64(v2019.f64[0], v2029);
                      v1494 = vmuld_lane_f64(v1490.__sinval, v2019, 1);
                      v1495 = v1494 + v1493;
                      v1496 = v1490.__sinval * v2029 + v1491;
                      v1497 = cosval + (1.0 - cosval) * vmuld_lane_f64(v2019.f64[1], v2019, 1);
                      v1498 = (1.0 - v1490.__cosval) * vmuld_lane_f64(v2029, v2019, 1);
                      v1499.f64[0] = v1498 - v1490.__sinval * v2019.f64[0];
                      v1500 = v1493 - v1494;
                      v1501 = v1490.__sinval * v2019.f64[0] + v1498;
                      v1502 = cosval + (1.0 - cosval) * vmuld_n_f64(v2029, v2029);
                      v1503 = *(double *)(v1486 + 80);
                      v1504 = *(float64x2_t *)(v1486 + 64);
                      v1505 = *(double *)(v1486 + 104);
                      v1506 = *(float64x2_t *)(v1486 + 88);
                      v1507 = *(double *)(v1486 + 128);
                      v1508 = *(float64x2_t *)(v1486 + 112);
                      *(float64x2_t *)(v1486 + 64) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, v1472.f64[0]), v1506, v1496), v1508, v1500);
                      *(double *)(v1486 + 80) = v1503 * v1472.f64[0] + v1505 * v1496 + v1507 * v1500;
                      *(float64x2_t *)(v1486 + 88) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, v1492), v1506, v1497), v1508, v1501);
                      *(double *)(v1486 + 104) = v1503 * v1492 + v1505 * v1497 + v1507 * v1501;
                      *(float64x2_t *)(v1486 + 112) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, v1495), v1506, v1499.f64[0]), v1508, v1502);
                      *(double *)(v1486 + 128) = v1503 * v1495 + v1505 * v1499.f64[0] + v1507 * v1502;
                      v1509.f64[0] = *(float64_t *)(v1486 + 224);
                      v1471 = vaddq_f64(v2037, v1509);
                      v1510 = vaddq_f64(v2049, *(float64x2_t *)(v1486 + 208));
                      *(float64x2_t *)(v1486 + 208) = v1510;
                      *(float64_t *)(v1486 + 224) = v1471.f64[0];
                      if (v1476)
                      {
                        v1511 = *(unsigned int *)(v1473 + v1478 + 40);
                        if ((_DWORD)v1511 != -1)
                        {
                          v1512 = *(_QWORD *)(v65 + 136) + 8 * v1511;
                          v1510.f64[0] = *(float64_t *)(v1512 + 64);
                          v1514 = *(int8x16_t *)(v1512 + 32);
                          v1513 = *(float64x2_t *)(v1512 + 48);
                          v1515 = *(int8x16_t *)v1512;
                          v1516 = *(int8x16_t *)(v1512 + 16);
                          v1517 = v1473 + v1475;
                          v1499.f64[0] = *(float64_t *)(v1473 + v1475 + 200);
                          v1518 = (float64x2_t)vextq_s8(v1516, v1514, 8uLL);
                          v1519 = (float64x2_t)vextq_s8(v1514, v1515, 8uLL);
                          v1472 = vaddq_f64(*(float64x2_t *)(v1473 + v1475 + 168), (float64x2_t)vextq_s8(v1515, v1516, 8uLL));
                          v1520 = vaddq_f64(*(float64x2_t *)(v1473 + v1475 + 152), v1519);
                          v1521 = vaddq_f64(*(float64x2_t *)(v1473 + v1475 + 136), v1518);
                          v1471 = vaddq_f64(*(float64x2_t *)(v1473 + v1475 + 184), v1513);
                          *(float64x2_t *)(v1517 + 184) = v1471;
                          *(float64x2_t *)(v1517 + 136) = v1521;
                          *(float64x2_t *)(v1517 + 152) = v1520;
                          *(float64x2_t *)(v1517 + 168) = v1472;
                          *(_QWORD *)(v1517 + 200) = *(_OWORD *)&vaddq_f64(v1499, v1510);
                        }
                      }
                      v1475 += 168;
                      v1478 += 4;
                    }
                    while (v1477 != v1475);
                  }
                  v1522 = *(unsigned int *)(v1473 + 2072);
                  if ((_DWORD)v1522)
                  {
                    v1523 = (double *)(v1473 + 2056);
                    v1524 = v1473 + 31064;
                    v1525 = (unsigned int *)(v1473 + 31248);
                    v1526 = 0.0;
                    do
                    {
                      v1528 = *v1525++;
                      v1527 = v1528;
                      if (v1528 == -1)
                        break;
                      v1529 = *(double *)(*(_QWORD *)(v65 + 136) + 8 * v1527);
                      *v1523 = v1529 + *v1523;
                      ++v1523;
                      v1530 = fabs(v1529);
                      if (v1526 < v1530)
                        v1526 = v1530;
                      --v1522;
                    }
                    while (v1522);
                  }
                  else
                  {
                    v1526 = 0.0;
                    v1524 = v1473 + 31064;
                  }
                  *(double *)(v1473 + 31288) = v1526;
                  v2008 = v1473;
                  v1531 = *(_DWORD *)(v1473 + 18664) && *(_DWORD *)(v1524 + 4) && *(_BYTE *)(v1524 + 8) != 0;
                  if (*(_BYTE *)v1524)
                    v1532 = 0;
                  else
                    v1532 = !v1531;
                  if (!v1532)
                  {
                    v1977 = *(unsigned int *)(v1473 + 18400);
                    if (!(_DWORD)v1977)
                      goto LABEL_1391;
                    v1533 = v1473;
                    v1973 = v1473 + 2080;
                    v2030 = v1473 + 31228;
                    v1969 = v1473 + 18408;
                    if (*(_BYTE *)v1524)
                    {
                      v1534 = 0;
                      v1990 = 0;
                      v2020 = *(unsigned __int8 *)(v1473 + 31065);
                      v1535 = v1473 + 31196;
                      __dstb = v1473 + 31212;
                      do
                      {
                        v1986 = v1534;
                        v1981 = *(unsigned int *)(v1973 + 4080 * v1534 + 4072);
                        if ((_DWORD)v1981)
                        {
                          v1536 = 0;
                          v1998 = (float64x2_t *)(v1969 + (v1534 << 6));
                          v1537 = v1990;
                          do
                          {
                            v1538 = *(unsigned int *)(v1535 + 4 * v1537);
                            if ((_DWORD)v1538 != -1)
                            {
                              v1539 = *(unsigned int *)(__dstb + 4 * v1537);
                              v1540 = v1533 + v1536;
                              v1541 = (float64x2_t *)(v1533 + v1536 + 2088);
                              v1542 = *(_QWORD *)(v2010 + 136);
                              v1543 = v1542 + 8 * v1538;
                              v1471.f64[0] = *(float64_t *)(v1543 + 16);
                              _Q2 = *(float64x2_t *)v1543;
                              _D3 = *(_QWORD *)(v1543 + 8);
                              __asm { FMLA            D0, D3, V2.D[1] }
                              v1547 = sqrt(_D0 + v1471.f64[0] * v1471.f64[0]);
                              v1472.f64[0] = 1.0 / v1547;
                              if (v1547 == 0.0)
                                v1472.f64[0] = 1.0;
                              v2050 = vmulq_f64(v1471, v1472).f64[0];
                              v2038 = vmulq_n_f64(_Q2, v1472.f64[0]);
                              v1548 = __sincos_stret(v1547);
                              v1549 = v2038;
                              v1472.f64[0] = v1548.__cosval
                                           + (1.0 - v1548.__cosval) * vmuld_n_f64(v1549.f64[0], v1549.f64[0]);
                              v1550 = (1.0 - v1548.__cosval) * vmuld_lane_f64(v1549.f64[0], v1549, 1);
                              v1551 = v1550 - v1548.__sinval * v2050;
                              v1552 = (1.0 - v1548.__cosval) * vmuld_n_f64(v2038.f64[0], v2050);
                              v1553 = vmuld_lane_f64(v1548.__sinval, v2038, 1);
                              v1554 = v1553 + v1552;
                              v1555 = v1548.__sinval * v2050 + v1550;
                              v1556 = v1548.__cosval + (1.0 - v1548.__cosval) * vmuld_lane_f64(v2038.f64[1], v2038, 1);
                              v1557 = (1.0 - v1548.__cosval) * vmuld_lane_f64(v2050, v2038, 1);
                              v1549.f64[0] = v1557 - v1548.__sinval * v2038.f64[0];
                              v1558 = v1552 - v1553;
                              v1559 = v1548.__sinval * v2038.f64[0] + v1557;
                              v1471.f64[0] = v1548.__cosval + (1.0 - v1548.__cosval) * vmuld_n_f64(v2050, v2050);
                              v1560 = *(double *)(v1540 + 2104);
                              v1561 = *(double *)(v1540 + 2128);
                              v1562 = *(float64x2_t *)(v1540 + 2112);
                              v1563 = *(double *)(v1540 + 2152);
                              v1564 = *(float64x2_t *)(v1540 + 2136);
                              v1565 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v1541, v1472.f64[0]), v1562, v1555), v1564, v1558);
                              v1472.f64[0] = v1560 * v1472.f64[0] + v1561 * v1555 + v1563 * v1558;
                              v1566 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v1541, v1551), v1562, v1556), v1564, v1559);
                              v1567 = v1560 * v1551 + v1561 * v1556 + v1563 * v1559;
                              v1568 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v1541, v1554), v1562, v1549.f64[0]), v1564, v1471.f64[0]);
                              *v1541 = v1565;
                              *(float64_t *)(v1540 + 2104) = v1472.f64[0];
                              *(float64x2_t *)(v1540 + 2112) = v1566;
                              *(double *)(v1540 + 2128) = v1567;
                              *(float64x2_t *)(v1540 + 2136) = v1568;
                              *(double *)(v1540 + 2152) = v1560 * v1554 + v1561 * v1549.f64[0] + v1563 * v1471.f64[0];
                              if (v2020)
                              {
                                v1569 = (float64x2_t *)(v1542 + 8 * v1539);
                                v1471.f64[0] = *(float64_t *)(v1540 + 2176);
                                v1472.f64[0] = v1569[1].f64[0];
                                v1471 = vaddq_f64(v1471, v1472);
                                *(float64x2_t *)(v1540 + 2160) = vaddq_f64(*(float64x2_t *)(v1540 + 2160), *v1569);
                                *(float64_t *)(v1540 + 2176) = v1471.f64[0];
                              }
                            }
                            if (v1531)
                            {
                              v1570 = *(unsigned int *)(v2030 + 4 * v1537);
                              if ((_DWORD)v1570 != -1)
                              {
                                v1571 = (float64x2_t *)(*(_QWORD *)(v2010 + 136) + 8 * v1570);
                                v1572 = *v1571;
                                v1573 = v1571[1];
                                v1574 = v1998;
                                if (v1536)
                                  v1574 = v1998 + 2;
                                v1472 = v1574[1];
                                v1471 = vaddq_f64(v1573, v1472);
                                *v1574 = vaddq_f64(v1572, *v1574);
                                v1574[1] = v1471;
                              }
                            }
                            v1536 += 1016;
                            ++v1537;
                          }
                          while (1016 * v1981 != v1536);
                        }
                        v1990 += v1981;
                        v1534 = v1986 + 1;
                        v1533 += 4080;
                      }
                      while (v1986 + 1 != v1977);
                      goto LABEL_1391;
                    }
                    v7 = (uint64_t)v1892;
                    v65 = v2010;
                    if (v1531)
                    {
                      v1655 = 0;
                      v1656 = 0;
                      do
                      {
                        v1657 = *(unsigned int *)(v1973 + 4080 * v1655 + 4072);
                        if ((_DWORD)v1657)
                        {
                          v1658 = (float64x2_t *)(v1969 + (v1655 << 6));
                          v1659 = *(unsigned int *)(v2030 + 4 * v1656);
                          if ((_DWORD)v1659 != -1)
                          {
                            v1660 = (float64x2_t *)(*(_QWORD *)(v2010 + 136) + 8 * v1659);
                            v1471 = vaddq_f64(v1660[1], v1658[1]);
                            *v1658 = vaddq_f64(*v1660, *v1658);
                            v1658[1] = v1471;
                          }
                          if ((_DWORD)v1657 != 1)
                          {
                            v1661 = v1658 + 2;
                            v1662 = v1657 - 1;
                            v1663 = v1656 + 1;
                            do
                            {
                              v1664 = *(unsigned int *)(v2030 + 4 * v1663);
                              if ((_DWORD)v1664 != -1)
                              {
                                v1665 = (float64x2_t *)(*(_QWORD *)(v2010 + 136) + 8 * v1664);
                                v1471 = vaddq_f64(v1665[1], v1661[1]);
                                *v1661 = vaddq_f64(*v1665, *v1661);
                                v1661[1] = v1471;
                              }
                              ++v1663;
                              --v1662;
                            }
                            while (v1662);
                          }
                        }
                        v1656 += v1657;
                        ++v1655;
                      }
                      while (v1655 != v1977);
LABEL_1391:
                      v7 = (uint64_t)v1892;
                      v65 = v2010;
                      if (v1531)
                      {
                        *v1939 = 1034;
                        if (*(_DWORD *)(v1945 + 200))
                        {
                          v1666 = (int *)(v2008 + 578688);
                          v1667 = *(unsigned int *)(v2008 + 578696);
                          v2067 = 0;
                          v1668 = 0;
                          if ((_DWORD)v1667)
                          {
                            v1669 = 4 * v1667;
                            do
                            {
                              v1670 = *v1666++;
                              v2066[v1668] = v1670;
                              v1668 = ++v2067;
                              v1669 -= 4;
                            }
                            while (v1669);
                          }
                          v1671 = vaddq_f64(*(float64x2_t *)(v2008 + 43824), (float64x2_t)0);
                          *(float64x2_t *)(v2008 + 43808) = vaddq_f64(*(float64x2_t *)(v2008 + 43808), (float64x2_t)0);
                          *(float64x2_t *)(v2008 + 43824) = v1671;
                          *(_QWORD *)v2057 = 0;
                          DWORD2(v2063) = 0;
                          v2065 = 0;
                          sub_20FA191D0((uint64_t)v2057, v1966);
                          if (v1668)
                          {
                            v1673 = 0;
                            v1674 = &v2087;
                            v1675 = &v2091;
                            v1982 = v2008 + 21320;
                            v1942 = v1668;
                            v1970 = vdupq_n_s64(0x7FF8000000000000uLL);
                            while (1)
                            {
                              v1999 = v1673;
                              v1958 = v2066[v1673];
                              if ((_DWORD)v1958)
                                break;
LABEL_1398:
                              v1673 = v1999 + 1;
                              if (v1999 + 1 == v1942)
                                goto LABEL_1506;
                            }
                            v1676 = 0;
                            v1953 = 339548 * v1673 + 581056;
                            v1961 = v2008 + 578700 + 339548 * v1673 + 4;
                            while (1)
                            {
                              v2021 = v1676;
                              v1677 = 169772 * v1676;
                              v2086 = 0;
                              v2088 = 0;
                              v2090 = 0;
                              v2092 = 0;
                              v1678 = v1961 + 169772 * v1676;
                              v2073.i64[0] = *(_QWORD *)v1678;
                              v2073.i64[1] = *(unsigned int *)(v1678 + 8);
                              v1679 = *(_DWORD *)(v1678 + 12);
                              if (v1679)
                              {
                                v1680 = 0;
                                LOBYTE(v1681) = 0;
                                v1682 = 0;
                                do
                                {
                                  v1683 = v1680 >> 5;
                                  v1684 = 1 << v1680;
                                  v1685 = ((*(_DWORD *)(v1678 + 16 + ((v1682 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v1681) & 1) << v1680++;
                                  v2074[0].i32[v1683] = v1685 | v2074[0].i32[v1683] & ~v1684;
                                  v1681 = v1682 + 1;
                                  v1682 = (v1682 + 1);
                                }
                                while (v1679 != v1681);
                                v2073.i32[3] = v1680;
                              }
                              v1686 = *(unsigned int *)(v1678 + 2044);
                              v2086 = 0;
                              if ((_DWORD)v1686)
                              {
                                v1687 = 0;
                                v1688 = (char *)(v1678 + 1744);
                                do
                                {
                                  v1689 = *v1688++;
                                  v2085[v1687] = v1689;
                                  v1687 = ++v2086;
                                  --v1686;
                                }
                                while (v1686);
                              }
                              v1690 = *(unsigned int *)(v1678 + 2348);
                              v2088 = 0;
                              if ((_DWORD)v1690)
                              {
                                v1691 = 0;
                                v1692 = (char *)(v1678 + 2048);
                                do
                                {
                                  v1693 = *v1692++;
                                  *((_BYTE *)v1674 + v1691) = v1693;
                                  v1691 = ++v2088;
                                  --v1690;
                                }
                                while (v1690);
                              }
                              v1694 = *(unsigned int *)(v1678 + 2956);
                              if ((_DWORD)v1694)
                                memcpy(v2089, (const void *)(v2008 + v1953 + v1677), 2 * v1694);
                              v2090 = v1694;
                              v1695 = *(unsigned int *)(v1678 + 4160);
                              v2092 = 0;
                              if ((_DWORD)v1695)
                              {
                                v1696 = 0;
                                v1697 = (int *)(v1678 + 2960);
                                v1698 = 4 * v1695;
                                do
                                {
                                  v1699 = *v1697++;
                                  *((_DWORD *)v1675 + v1696) = v1699;
                                  v1696 = ++v2092;
                                  v1698 -= 4;
                                }
                                while (v1698);
                              }
                              v1700 = vaddq_f64(*(float64x2_t *)(v2008 + 43824), (float64x2_t)0);
                              *(float64x2_t *)(v2008 + 43808) = vaddq_f64(*(float64x2_t *)(v2008 + 43808), (float64x2_t)0);
                              *(float64x2_t *)(v2008 + 43824) = v1700;
                              v2039 = v2073.u32[0];
                              if (v2073.i32[0])
                                break;
LABEL_1401:
                              v1676 = v2021 + 1;
                              if (v2021 + 1 == v1958)
                                goto LABEL_1398;
                            }
                            v1701 = 0;
                            v1702 = v1961 + 169772 * v2021;
                            v1978 = v1702 + 4164;
                            v1974 = v1702 + 2352;
                            while (1)
                            {
                              while (1)
                              {
                                v1703 = (unsigned __int16)v2089[v1701];
                                if (((*(unsigned __int32 *)((char *)v2074[0].i32 + ((v1703 >> 4) & 0xFFC)) >> (v1703 >> 1)) & 1) != 0)
                                  break;
                                if (++v1701 == v2039)
                                  goto LABEL_1401;
                              }
                              v1704 = v1675;
                              v2051 = *((unsigned int *)v1675 + v1701);
                              v1705 = v1674;
                              v1706 = *((unsigned __int8 *)v1674 + v1701);
                              v1707 = v2085[v1701];
                              v1708 = v1701 + 1;
                              v1709 = (unsigned __int16)v2089[v1701 + 1] - (_DWORD)v1703;
                              v1710 = *(_QWORD *)v2057;
                              if (v1709 >= 2)
                                memcpy(__p, (const void *)(v1978 + 8 * *(unsigned __int16 *)(v1974 + 2 * v1701)), 8 * (v1709 >> 1));
                              v1711 = v2021;
                              v1712 = v1710 + 4080 * v1999 + 1016 * v2021 + 2120;
                              v1713.i64[1] = 0;
                              v1714 = vaddq_f64(*(float64x2_t *)(v2008 + 43824), (float64x2_t)0);
                              *(float64x2_t *)(v2008 + 43808) = vaddq_f64(*(float64x2_t *)(v2008 + 43808), (float64x2_t)0);
                              *(float64x2_t *)(v2008 + 43824) = v1714;
                              v1715 = *(_DWORD *)&v2057[4 * v1999 + 8];
                              v1716 = HIDWORD(v2063);
                              v1717 = __p[v1707 - v1706];
                              v1718 = *(_DWORD *)(v1712 + 472);
                              if (v1718 == -1)
                              {
                                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                                v1719 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                                if ((v1719 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                                {
                                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A6DE78);
                                }
                                if (!byte_254A6DE68 || byte_254A6DE70)
                                {
                                  v1721 = qword_254A6DE40;
                                  v1720 = qword_254A6DE48;
                                  while (v1721 != v1720)
                                  {
                                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1721)(*(_QWORD *)(v1721 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                                    v1721 += 16;
                                  }
                                }
                                v1722 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                                if ((v1722 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                                {
                                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A6DE78);
                                }
                                if (!byte_254A6DE68)
                                  goto LABEL_1528;
                                qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                                v1718 = *(_DWORD *)(v1712 + 472);
                                v1711 = v2021;
                              }
                              v1723 = (double *)&v2064[9 * (v1715 + v1711 + v1716 * v1707) + 1];
                              v1724 = vcvtq_f64_f32((float32x2_t)v1717);
                              if (v1718 <= 1)
                              {
                                if (!v1718)
                                  goto LABEL_1527;
                                v1674 = v1705;
                                v1675 = v1704;
                                v1725 = v1723[4];
                                v1726 = v1723[5];
                                v2068 = 1.0 / *v1723 * v1724.f64[0]
                                      - vmuld_lane_f64(v1723[1] / (*v1723 * v1725), v1724, 1)
                                      - (v1725 * v1723[2] - v1723[1] * v1726) / (*v1723 * v1725);
                                v2069 = vmuld_lane_f64(1.0 / v1725, v1724, 1) - v1726 / v1725;
                                v2070.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2053;
                                v2070.__r_.__value_.__l.__size_ = (std::string::size_type)&v2068;
                                v2071 = 0;
                                v2072 = 0;
                                v2070.__r_.__value_.__r.__words[2] = 0;
                                goto LABEL_1436;
                              }
                              v1728 = v1723[1];
                              v1672.f64[0] = v1723[4];
                              v1729 = v1723[5];
                              v1730 = *v1723 * v1672.f64[0];
                              v1731 = vmuld_lane_f64(v1728 / v1730, v1724, 1);
                              *(double *)v1713.i64 = (v1672.f64[0] * v1723[2] - v1728 * v1729) / v1730;
                              v2068 = 1.0 / *v1723 * v1724.f64[0] - v1731 - *(double *)v1713.i64;
                              v1732 = v1729 / v1672.f64[0];
                              v1724.f64[0] = vmuld_lane_f64(1.0 / v1672.f64[0], v1724, 1) - v1729 / v1672.f64[0];
                              v2069 = v1724.f64[0];
                              v2070.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2053;
                              v2070.__r_.__value_.__l.__size_ = (std::string::size_type)&v2068;
                              v2071 = 0;
                              v2072 = 0;
                              v2070.__r_.__value_.__r.__words[2] = 0;
                              v1674 = v1705;
                              v1675 = v1704;
                              if (v1718 != -1)
                                break;
                              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                              v1786 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                              if ((v1786 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                              {
                                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A6DE78);
                              }
                              if (!byte_254A6DE68 || byte_254A6DE70)
                              {
                                v1787 = qword_254A6DE40;
                                for (i2 = qword_254A6DE48; v1787 != i2; v1787 += 16)
                                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1787)(*(_QWORD *)(v1787 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                              }
                              v1789 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                              if ((v1789 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                              {
                                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A6DE78);
                              }
                              if (!byte_254A6DE68)
                                goto LABEL_1528;
                              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                              v1790 = *(_DWORD *)(v1712 + 472);
                              if (v1790 > 1)
                              {
                                v1796 = v2070.__r_.__value_.__r.__words[2];
                                size = (double *)v2070.__r_.__value_.__l.__size_;
                                v1734 = (float64x2_t *)v2070.__r_.__value_.__r.__words[0];
                                v1797 = v2071;
                                v1798 = v2072;
                                if (v2070.__r_.__value_.__r.__words[2])
                                {
                                  *(_QWORD *)v2070.__r_.__value_.__r.__words[2] = 0;
                                  *(_QWORD *)(v1796 + 8) = 0;
                                  *(_QWORD *)(v1796 + 16) = 0;
                                }
                                if (v1798)
                                {
                                  *(_QWORD *)(v1798 + 64) = 0;
                                  v1724 = 0uLL;
                                  *(_OWORD *)(v1798 + 32) = 0u;
                                  *(_OWORD *)(v1798 + 48) = 0u;
                                  *(_OWORD *)v1798 = 0u;
                                  *(_OWORD *)(v1798 + 16) = 0u;
                                }
                                v1735 = (float64x2_t *)(v1712 + 168);
                                v1736 = (_BYTE *)(v1712 + 468);
                                if (v1797)
                                {
                                  if (!*(_BYTE *)(v1712 + 468))
                                  {
                                    v1950 = size;
                                    v1799 = v1734;
                                    sub_20EB27C0C(v1712 + 204, v1735->f64, 0x32uLL, (int8x16_t)v1724, v1732, v1713, (int8x16_t)v1672);
                                    *v1736 = 1;
                                    v1735 = (float64x2_t *)(v1712 + 168);
                                    v1734 = v1799;
                                    size = v1950;
                                  }
                                  _Q1 = *(float64x2_t *)size;
                                  _D2 = *((_QWORD *)size + 1);
                                  __asm { FMLA            D0, D2, V1.D[1] }
                                  v1803 = sqrt(_D0);
                                  v1805 = *(float *)(v1712 + 204);
                                  v1804 = v1712 + 204;
                                  v1806 = v1803 * v1805;
                                  v1807 = (unint64_t)v1806;
                                  if ((unint64_t)v1806 >= 0x1F)
                                    v1807 = 31;
                                  v1808 = v1803 * *(float *)(v1804 + 4 * v1807 + 8)
                                        + *(float *)(v1804 + 4 * v1807 + 136);
                                  v1809 = *(int64x2_t *)(v1804 - 20);
                                  v1810 = *(int64x2_t *)(v1804 - 36);
                                  v1672 = (float64x2_t)vzip1q_s64(v1810, v1809);
                                  v1811 = (float64x2_t)vzip2q_s64(v1810, v1809);
                                  v1812 = vmulq_f64(v1811, (float64x2_t)xmmword_210312E20);
                                  v1813 = vmulq_f64(v1672, (float64x2_t)xmmword_210312E10);
                                  if (v1806 <= 32.0)
                                    goto LABEL_1484;
                                  v1814 = v1808 * v1808;
                                  v1815 = vmulq_n_f64(vaddq_f64(v1813, vmulq_n_f64(v1812, v1808 * v1808)), v1808 * v1808);
                                  v1816 = v1814 * v1814;
                                  v1817 = v1815.f64[0] + vmuld_lane_f64(v1814 * v1814, v1815, 1) + 1.0;
                                  if (v1817 != 0.0)
                                  {
                                    v1818 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1811, v1814)), v1814);
                                    v1808 = fmax(v1808+ (v1803 - (v1808 + v1808 * (v1818.f64[0] + vmuld_lane_f64(v1816, v1818, 1))))/ v1817, 0.0);
                                    v1819 = v1808 * v1808;
                                    v1820 = vmulq_n_f64(vaddq_f64(v1813, vmulq_n_f64(v1812, v1808 * v1808)), v1808 * v1808);
                                    v1821 = v1819 * v1819;
                                    v1822 = v1820.f64[0] + vmuld_lane_f64(v1819 * v1819, v1820, 1) + 1.0;
                                    if (v1822 != 0.0)
                                    {
                                      v1823 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1811, v1819)), v1819);
                                      v1808 = fmax(v1808+ (v1803- (v1808+ v1808 * (v1823.f64[0] + vmuld_lane_f64(v1821, v1823, 1))))/ v1822, 0.0);
                                      v1824 = v1808 * v1808;
                                      v1825 = vmulq_n_f64(vaddq_f64(v1813, vmulq_n_f64(v1812, v1808 * v1808)), v1808 * v1808);
                                      v1826 = v1824 * v1824;
                                      v1827 = v1825.f64[0] + vmuld_lane_f64(v1824 * v1824, v1825, 1) + 1.0;
                                      if (v1827 != 0.0)
                                      {
                                        v1828 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1811, v1824)), v1824);
                                        v1808 = fmax(v1808+ (v1803- (v1808+ v1808 * (v1828.f64[0] + vmuld_lane_f64(v1826, v1828, 1))))/ v1827, 0.0);
                                        v1829 = v1808 * v1808;
                                        v1830 = vmulq_n_f64(vaddq_f64(v1813, vmulq_n_f64(v1812, v1808 * v1808)), v1808 * v1808);
                                        v1831 = v1829 * v1829;
                                        v1832 = v1830.f64[0] + vmuld_lane_f64(v1829 * v1829, v1830, 1) + 1.0;
                                        if (v1832 != 0.0)
                                        {
                                          v1833 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1811, v1829)), v1829);
                                          v1808 = fmax(v1808+ (v1803- (v1808+ v1808 * (v1833.f64[0] + vmuld_lane_f64(v1831, v1833, 1))))/ v1832, 0.0);
LABEL_1484:
                                          v1834 = v1808 * v1808;
                                          v1835 = vmulq_n_f64(vaddq_f64(v1813, vmulq_n_f64(v1812, v1808 * v1808)), v1808 * v1808);
                                          v1836 = v1835.f64[0] + vmuld_lane_f64(v1834 * v1834, v1835, 1) + 1.0;
                                          if (v1836 != 0.0)
                                          {
                                            v1672 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1811, v1834)), v1834);
                                            v1808 = v1808
                                                  + (v1803
                                                   - (v1808
                                                    + v1808 * (v1672.f64[0] + vmuld_lane_f64(v1834 * v1834, v1672, 1))))
                                                  / v1836;
                                            v1672.f64[0] = 0.0;
                                            if (v1808 <= 0.0)
                                            {
LABEL_1487:
                                              v1837 = v1672.f64[0] * 0.636619772 + 6.75539944e15 + -6.75539944e15;
                                              v1838 = v1672.f64[0]
                                                    + v1837 * -1.57079633
                                                    + v1837 * -5.39030286e-15
                                                    + v1837 * -8.84372057e-29;
                                              v1839 = v1838 * v1838 * (v1838 * v1838);
                                              __asm { FMOV            V4.2D, #1.0 }
                                              v1840 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v1838 * v1838), _Q4), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v1838 * v1838), (float64x2_t)xmmword_210312E80), v1839));
                                              v1841 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v1838 * v1838), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v1838 * v1838), (float64x2_t)xmmword_210312E90), v1839)), v1839 * v1839);
                                              _Q4.f64[0] = v1838;
                                              v1843 = vaddq_f64(v1840, v1841);
                                              v1844 = (int)v1837 & 3;
                                              if (v1803 >= 0.0001)
                                              {
                                                LODWORD(v1840.f64[0]) = 0;
                                                v1841 = xmmword_2103B9450[v1844];
                                                v1850 = vmulq_f64(_Q4, v1841);
                                                v1847 = (int8x16_t)vmulq_f64(v1843, v1850);
                                                v1845 = (int)v1837 & 1;
                                                LODWORD(v1850.f64[0]) = v1845;
                                                v1851 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v1850, (int32x4_t)v1840), 0);
                                                v1846 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1847, 1);
                                                v1848 = *(double *)vbslq_s8(v1851, v1847, (int8x16_t)v1846).i64 / v1803;
                                              }
                                              else
                                              {
                                                v1845 = (int)v1837 & 1;
                                                v1846 = xmmword_2103B9450[v1844];
                                                v1847 = (int8x16_t)vmulq_f64(v1843, vmulq_f64(_Q4, v1846));
                                                v1848 = 1.0;
                                              }
                                              LODWORD(v1846.f64[0]) = 0;
                                              LODWORD(v1841.f64[0]) = v1845;
                                              v1852 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v1841, (int32x4_t)v1846), 0), v1847, (int8x16_t)vdupq_lane_s64(v1847.i64[0], 0));
                                              *(_QWORD *)&v1734[1].f64[0] = v1852.i64[1];
                                              *v1734 = vmulq_n_f64(_Q1, v1848);
                                              v1853 = (int64x2_t)vmulq_f64(v1735[1], (float64x2_t)xmmword_210312EA0);
                                              v1854 = (int64x2_t)vmulq_f64(*v1735, (float64x2_t)xmmword_210312EB0);
                                              v1855 = v1672.f64[0] * v1672.f64[0];
                                              v1856 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(v1854, v1853), vmulq_n_f64((float64x2_t)vzip2q_s64(v1854, v1853), v1855)), v1855);
                                              v1857 = v1856.f64[0] + vmuld_lane_f64(v1855 * v1855, v1856, 1) + 1.0;
                                              if (v1803 >= 0.0001)
                                                v1858 = (*(double *)&v1852.i64[1] / v1857 - v1848) / (v1803 * v1803);
                                              else
                                                v1858 = -0.333333333;
                                              v1859 = vmulq_n_f64(*(float64x2_t *)size, v1858);
                                              v1860.f64[0] = 0.0;
                                              v1860.f64[1] = v1848;
                                              v1672 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v1848, v1859, *size);
                                              v1861 = vmlaq_laneq_f64(v1860, v1859, *(float64x2_t *)size, 1);
                                              *v1797 = v1672;
                                              v1797[1] = v1861;
                                              v1727 = vdivq_f64(*v1734, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v1857), 0));
                                              v1797[2] = v1727;
                                              goto LABEL_1467;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  v1672.f64[0] = v1808;
                                  if (v1808 <= 3.14159265)
                                    goto LABEL_1487;
                                  goto LABEL_1489;
                                }
                                if (!*(_BYTE *)(v1712 + 468))
                                  goto LABEL_1441;
LABEL_1442:
                                _Q0 = *(float64x2_t *)size;
                                _D2 = *((_QWORD *)size + 1);
                                __asm { FMLA            D1, D2, V0.D[1] }
                                v1742 = sqrt(_D1);
                                v1744 = *(float *)(v1712 + 204);
                                v1743 = v1712 + 204;
                                v1745 = v1742 * v1744;
                                v1746 = (unint64_t)v1745;
                                if ((unint64_t)v1745 >= 0x1F)
                                  v1746 = 31;
                                v1747 = v1742 * *(float *)(v1743 + 4 * v1746 + 8) + *(float *)(v1743 + 4 * v1746 + 136);
                                v1748 = *(int64x2_t *)(v1743 - 20);
                                v1749 = *(int64x2_t *)(v1743 - 36);
                                v1672 = (float64x2_t)vzip1q_s64(v1749, v1748);
                                v1750 = (float64x2_t)vzip2q_s64(v1749, v1748);
                                v1751 = vmulq_f64(v1750, (float64x2_t)xmmword_210312E20);
                                v1752 = vmulq_f64(v1672, (float64x2_t)xmmword_210312E10);
                                if (v1745 <= 32.0)
                                  goto LABEL_1450;
                                v1753 = v1747 * v1747;
                                v1754 = vmulq_n_f64(vaddq_f64(v1752, vmulq_n_f64(v1751, v1747 * v1747)), v1747 * v1747);
                                v1755 = v1753 * v1753;
                                v1756 = v1754.f64[0] + vmuld_lane_f64(v1753 * v1753, v1754, 1) + 1.0;
                                if (v1756 != 0.0)
                                {
                                  v1757 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1750, v1753)), v1753);
                                  v1747 = fmax(v1747+ (v1742 - (v1747 + v1747 * (v1757.f64[0] + vmuld_lane_f64(v1755, v1757, 1))))/ v1756, 0.0);
                                  v1758 = v1747 * v1747;
                                  v1759 = vmulq_n_f64(vaddq_f64(v1752, vmulq_n_f64(v1751, v1747 * v1747)), v1747 * v1747);
                                  v1760 = v1758 * v1758;
                                  v1761 = v1759.f64[0] + vmuld_lane_f64(v1758 * v1758, v1759, 1) + 1.0;
                                  if (v1761 != 0.0)
                                  {
                                    v1762 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1750, v1758)), v1758);
                                    v1747 = fmax(v1747+ (v1742 - (v1747 + v1747 * (v1762.f64[0] + vmuld_lane_f64(v1760, v1762, 1))))/ v1761, 0.0);
                                    v1763 = v1747 * v1747;
                                    v1764 = vmulq_n_f64(vaddq_f64(v1752, vmulq_n_f64(v1751, v1747 * v1747)), v1747 * v1747);
                                    v1765 = v1763 * v1763;
                                    v1766 = v1764.f64[0] + vmuld_lane_f64(v1763 * v1763, v1764, 1) + 1.0;
                                    if (v1766 != 0.0)
                                    {
                                      v1767 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1750, v1763)), v1763);
                                      v1747 = fmax(v1747+ (v1742- (v1747+ v1747 * (v1767.f64[0] + vmuld_lane_f64(v1765, v1767, 1))))/ v1766, 0.0);
                                      v1768 = v1747 * v1747;
                                      v1769 = vmulq_n_f64(vaddq_f64(v1752, vmulq_n_f64(v1751, v1747 * v1747)), v1747 * v1747);
                                      v1770 = v1768 * v1768;
                                      v1771 = v1769.f64[0] + vmuld_lane_f64(v1768 * v1768, v1769, 1) + 1.0;
                                      if (v1771 != 0.0)
                                      {
                                        v1772 = vmulq_n_f64(vaddq_f64(v1672, vmulq_n_f64(v1750, v1768)), v1768);
                                        v1747 = fmax(v1747+ (v1742- (v1747+ v1747 * (v1772.f64[0] + vmuld_lane_f64(v1770, v1772, 1))))/ v1771, 0.0);
LABEL_1450:
                                        v1773 = v1747 * v1747;
                                        v1774 = vmulq_n_f64(vaddq_f64(v1752, vmulq_n_f64(v1751, v1747 * v1747)), v1747 * v1747);
                                        v1775 = v1774.f64[0] + vmuld_lane_f64(v1773 * v1773, v1774, 1) + 1.0;
                                        if (v1775 != 0.0)
                                        {
                                          v1750 = vmulq_n_f64(v1750, v1773);
                                          v1672 = vmulq_n_f64(vaddq_f64(v1672, v1750), v1773);
                                          v1747 = v1747
                                                + (v1742
                                                 - (v1747
                                                  + v1747 * (v1672.f64[0] + vmuld_lane_f64(v1773 * v1773, v1672, 1))))
                                                / v1775;
                                          v1672.f64[0] = 0.0;
                                          if (v1747 <= 0.0)
                                          {
LABEL_1453:
                                            v1750.f64[0] = v1672.f64[0] * 0.636619772 + 6.75539944e15 + -6.75539944e15;
                                            v1776 = v1672.f64[0]
                                                  + v1750.f64[0] * -1.57079633
                                                  + v1750.f64[0] * -5.39030286e-15
                                                  + v1750.f64[0] * -8.84372057e-29;
                                            v1777 = v1776 * v1776 * (v1776 * v1776);
                                            __asm { FMOV            V2.2D, #1.0 }
                                            v1778 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E30, v1776 * v1776), _Q2), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E70, v1776 * v1776), (float64x2_t)xmmword_210312E80), v1777));
                                            _Q2.f64[0] = v1776;
                                            v1780 = vaddq_f64(v1778, vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E40, v1776 * v1776), (float64x2_t)xmmword_210312E50), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210312E60, v1776 * v1776), (float64x2_t)xmmword_210312E90), v1777)), v1777 * v1777));
                                            v1781 = (int)v1750.f64[0];
                                            v1782 = (int)v1750.f64[0] & 3;
                                            HIDWORD(v1750.f64[0]) = 1058682594;
                                            if (v1742 >= 0.0001)
                                            {
                                              LODWORD(v1750.f64[0]) = 0;
                                              v1784 = (int8x16_t)vmulq_f64(v1780, vmulq_f64(_Q2, xmmword_2103B9450[v1782]));
                                              v1783 = v1781 & 1;
                                              LODWORD(v1780.f64[0]) = v1783;
                                              v1791 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v1780, (int32x4_t)v1750), 0);
                                              v1750 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1784, 1);
                                              v1780 = (float64x2_t)vbslq_s8(v1791, v1784, (int8x16_t)v1750);
                                              v1785 = v1780.f64[0] / v1742;
                                            }
                                            else
                                            {
                                              v1783 = v1781 & 1;
                                              v1784 = (int8x16_t)vmulq_f64(v1780, vmulq_f64(_Q2, xmmword_2103B9450[v1782]));
                                              v1785 = 1.0;
                                            }
                                            LODWORD(v1780.f64[0]) = 0;
                                            LODWORD(v1750.f64[0]) = v1783;
                                            v1672 = (float64x2_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v1750, (int32x4_t)v1780), 0);
                                            v1727 = vmulq_n_f64(_Q0, v1785);
                                            *v1734 = v1727;
                                            *(_QWORD *)&v1734[1].f64[0] = vbslq_s8(*(int8x16_t *)&v1672, v1784, (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v1784, 0)).i64[1];
                                            goto LABEL_1467;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                v1672.f64[0] = v1747;
                                if (v1747 <= 3.14159265)
                                  goto LABEL_1453;
LABEL_1489:
                                v1849 = (int64x2_t *)(v1982 + 32 * v2051);
                                *v1849 = v1970;
                                v1849[1].i64[0] = 0x7FF8000000000000;
                                v1701 = v1708;
                                v65 = v2010;
                                if (v1701 == v2039)
                                  goto LABEL_1401;
                              }
                              else
                              {
                                if (!v1790)
                                {
LABEL_1527:
                                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1528:
                                  abort();
                                }
LABEL_1436:
                                if ((sub_20FA1DC08((uint64_t)&v2070, v1712) & 1) == 0)
                                  goto LABEL_1489;
LABEL_1467:
                                v1727.f64[0] = v2054;
                                _Q1 = v2053;
                                _Q2 = vmulq_f64(_Q1, _Q1);
                                _D3 = v2053.f64[1];
                                __asm { FMLA            D2, D3, V1.D[1] }
                                _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v1727.f64[0] * v1727.f64[0]);
                                v1795 = v1982 + 32 * v2051;
                                *(float64x2_t *)v1795 = vmulq_n_f64(v2053, _Q2.f64[0]);
                                *(_QWORD *)(v1795 + 16) = *(_OWORD *)&vmulq_f64(v1727, _Q2);
                                v1701 = v1708;
                                v65 = v2010;
                                if (v1701 == v2039)
                                  goto LABEL_1401;
                              }
                            }
                            size = &v2068;
                            v1734 = &v2053;
                            if (*(_BYTE *)(v1712 + 468))
                              goto LABEL_1442;
                            v1735 = (float64x2_t *)(v1712 + 168);
                            v1736 = (_BYTE *)(v1712 + 468);
LABEL_1441:
                            v1737 = size;
                            v1738 = v1734;
                            sub_20EB27C0C(v1712 + 204, v1735->f64, 0x32uLL, (int8x16_t)v1724, v1732, v1713, (int8x16_t)v1672);
                            *v1736 = 1;
                            v1734 = v1738;
                            size = v1737;
                            goto LABEL_1442;
                          }
LABEL_1506:
                          v7 = (uint64_t)v1892;
                        }
                        *v1939 = 1035;
                        v1471 = vaddq_f64(*(float64x2_t *)(v2008 + 44272), (float64x2_t)0);
                        *(float64x2_t *)(v2008 + 44256) = vaddq_f64(*(float64x2_t *)(v2008 + 44256), (float64x2_t)0);
                        *(float64x2_t *)(v2008 + 44272) = v1471;
                      }
                    }
                  }
                  if (*(_BYTE *)(v1945 + 9))
                  {
                    v1862 = *(unsigned int *)(v1945 + 180);
                    if ((_DWORD)v1862 != -1)
                    {
                      v1863 = (float64x2_t *)(v2008 + 1816);
                      v1864 = *(_QWORD *)(v65 + 136) + 8 * v1862;
                      v2052 = *(float64x2_t *)v1864;
                      v1865.f64[1] = *(float64_t *)(v1864 + 8);
                      v1865.f64[0] = *(float64_t *)(v1864 + 16);
                      v2040 = v1865;
                      switch(*(_DWORD *)(v1945 + 192))
                      {
                        case 3:
                          break;
                        case 4:
                          v1863 = (float64x2_t *)(v2008 + 1840);
                          break;
                        case 5:
                          goto LABEL_1514;
                        case 6:
                          v1863 = (float64x2_t *)(v2008 + 1888);
                          break;
                        default:
                          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                          {
                            abort();
                          }
LABEL_1514:
                          v1863 = (float64x2_t *)(v2008 + 1864);
                          break;
                      }
                      v1866 = v2052;
                      v1471.f64[0] = v1863[1].f64[0];
                      *(_QWORD *)&v1866.f64[1] = vextq_s8((int8x16_t)v1866, (int8x16_t)v1866, 8uLL).u64[0];
                      *v1863 = vaddq_f64(v1866, *v1863);
                      *(_QWORD *)&v1863[1].f64[0] = *(_OWORD *)&vaddq_f64(v2040, v1471);
                    }
                  }
                  *v1939 = 1033;
                  v1867 = vaddq_f64(*(float64x2_t *)(v2008 + 44240), (float64x2_t)0);
                  *(float64x2_t *)(v2008 + 44224) = vaddq_f64(*(float64x2_t *)(v2008 + 44224), (float64x2_t)0);
                  *(float64x2_t *)(v2008 + 44240) = v1867;
                  v1868 = *(_QWORD *)(v65 + 96);
                  *(_DWORD *)(v1868 + 2145472) = 1030;
                  ++*(_DWORD *)(v1868 + 363816);
                  if (!*(_BYTE *)(v1868 + 31281))
                  {
                    *(_BYTE *)(v1868 + 31281) = 1;
                    sub_20F904994(v1868 + 363904, (__int128 *)(v1868 + 64));
                  }
                  v1869 = *(unsigned int *)(v1868 + 31052);
                  if ((_DWORD)v1869)
                  {
                    v1870 = *(double **)(v65 + 160);
                    v1871 = (double *)(v1868 + 21344);
                    do
                    {
                      v1872 = *v1870++;
                      *v1871 = *v1871 - v1872;
                      v1871 += 4;
                      --v1869;
                    }
                    while (v1869);
                  }
                  *(_DWORD *)(v1868 + 2145472) = 1031;
                  v1873 = vaddq_f64(*(float64x2_t *)(v1868 + 44208), (float64x2_t)0);
                  *(float64x2_t *)(v1868 + 44192) = vaddq_f64(*(float64x2_t *)(v1868 + 44192), (float64x2_t)0);
                  *(float64x2_t *)(v1868 + 44208) = v1873;
                  ++*(_DWORD *)(v65 + 196);
                  v797 = 0;
                  *v1946 = sub_20F8C5830(v7, (uint64_t)v1954);
                  goto LABEL_1297;
                }
LABEL_1296:
                v797 = 0;
                goto LABEL_1297;
              }
              sub_20F901C54((_DWORD *)(v65 + 160), v1464);
            }
            v7 = (uint64_t)v1892;
            if (v1463 == *v1465)
            {
              v1466 = (8 * *(unsigned int *)(v65 + 176) + 31) & 0xFFFFFFFE0;
              v1467 = operator new(v1466, (std::align_val_t)0x20uLL);
              v1468 = v1467;
              v7 = (uint64_t)v1892;
              if ((_DWORD)v1464)
                memmove(v1467, v1463, 8 * v1464);
              *(_QWORD *)(v65 + 160) = v1468;
              *(_QWORD *)(v65 + 168) = v1466 >> 3;
              MEMORY[0x212BC6368](v1463, 0x1000C8000313F17);
            }
            else if ((_DWORD)v1464)
            {
              memmove(*v1465, v1463, 8 * v1464);
            }
            goto LABEL_1291;
          }
        }
      }
      else
      {
        v658 = *v654;
      }
      v1460 = &v655[v653];
      do
      {
        v1461 = *v652++;
        *v658++ = -v1461;
      }
      while (v658 != v1460);
      goto LABEL_1279;
    }
    v659 = (8 * v653 + 31) & 0xFFFFFFFE0;
    v660 = (float64x2_t *)operator new(v659, (std::align_val_t)0x20uLL);
    if ((_DWORD)v656)
    {
      v661 = (v656 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v662 = (double *)v660;
      v663 = (double *)(v651 + 357328);
      if (v661 < 5)
        goto LABEL_1538;
      v662 = (double *)v660;
      v663 = (double *)(v651 + 357328);
      if ((unint64_t)&v660[-22333] - v651 < 0x20)
        goto LABEL_1538;
      v664 = v661 + 1;
      v665 = v664 & 0x3FFFFFFFFFFFFFFCLL;
      v662 = &v660->f64[v665];
      v663 = &v652[v665];
      v666 = (float64x2_t *)(v651 + 357344);
      v667 = v660 + 1;
      v668 = v664 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v669 = vnegq_f64(*v666);
        v667[-1] = vnegq_f64(v666[-1]);
        *v667 = v669;
        v666 += 2;
        v667 += 2;
        v668 -= 4;
      }
      while (v668);
      if (v664 != (v664 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1538:
        do
        {
          v670 = *v663++;
          *v662++ = -v670;
        }
        while (v662 != &v660->f64[v656]);
      }
    }
    *(_QWORD *)(v65 + 136) = v660;
    *(_QWORD *)(v65 + 144) = v659 >> 3;
LABEL_1263:
    MEMORY[0x212BC6368](v651 + 357328, 0x1000C8000313F17);
    goto LABEL_1279;
  }
  v2073.i64[0] = 0;
  sub_20F92369C((_QWORD *)(v7 + 3112), v2073.i64);
  v107 = *(unsigned int *)(v7 + 3024);
  if ((_DWORD)v107)
    bzero(*(void **)(v7 + 3008), 8 * v107);
  if (*(_DWORD *)(v7 + 3000) == 1)
  {
    v108 = *(unsigned int *)(v9 + 16);
    if ((_DWORD)v108)
      bzero(*(void **)v9, 8 * v108);
  }
  if (((*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2)
     + ((*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2)
     + ((*(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 48)) >> 2)
     + ((*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 2)
     + ((*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 2)
     + ((*(_QWORD *)(v11 + 128) - *(_QWORD *)(v11 + 120)) >> 2)
     + ((*(_QWORD *)(v11 + 152) - *(_QWORD *)(v11 + 144)) >> 2)
     + ((*(_QWORD *)(v11 + 176) - *(_QWORD *)(v11 + 168)) >> 2)
     + ((*(_QWORD *)(v11 + 200) - *(_QWORD *)(v11 + 192)) >> 2)
     + ((*(_QWORD *)(v11 + 224) - *(_QWORD *)(v11 + 216)) >> 2))
  {
    kdebug_trace();
    sub_20F8BC0E8(v13, v7 + 3008);
    kdebug_trace();
  }
  v1877 = (_QWORD *)(v7 + 3008);
  v1878 = v7 + 3112;
  v1992 = v10;
  if (*(_BYTE *)v2003)
  {
    v110 = (char **)((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)(v7 + 22864) + 40))(v13) + 15304);
    v111 = (_QWORD *)(v7 + 41328);
    if ((char **)(v7 + 41328) != v110)
      sub_20F8EE574((char **)(v7 + 41328), v110);
    v1988 = v12;
    v112 = 0;
    v2023 = (_QWORD *)(v7 + 56928);
    v1984 = (_BYTE *)(v7 + 40736);
    v2012 = (_QWORD *)(v7 + 40568);
    v113 = v2003 + 168;
    do
    {
      v114 = dword_2103B98E8[v112];
      if ((v114 & 0x80000000) == 0)
      {
        v115 = (char **)&v111[3 * v112];
        v116 = *v115;
        v119 = v115[1];
        v118 = v115 + 1;
        v117 = v119;
        if (v116 != v119)
        {
          v120 = *(unsigned int **)(v113 + 24 * v114 + 8);
          v121 = *(unsigned int **)(v113 + 24 * v114);
          v109 = v116;
          while (v121 != v120)
          {
            v122 = *(_DWORD *)v109;
            if (*(_DWORD *)v109 >= *v121)
            {
              v109 += 4 * (*v121++ >= v122);
              if (v109 == v117)
                goto LABEL_113;
            }
            else
            {
              *(_DWORD *)v116 = v122;
              v116 += 4;
              v109 += 4;
              if (v109 == v117)
              {
LABEL_113:
                if (v116 == v117)
                  goto LABEL_105;
LABEL_117:
                v109 = v117;
                *v118 = v116;
                v7 = (uint64_t)v1892;
                goto LABEL_105;
              }
            }
          }
          if (v109 != v116)
          {
            v123 = v117 - v109;
            memmove(v116, v109, v117 - v109);
            v116 += v123;
            v7 = (uint64_t)v1892;
            v117 = *v118;
            if (v116 != *v118)
              goto LABEL_117;
          }
        }
      }
LABEL_105:
      ++v112;
    }
    while (v112 != 10);
    v204 = (*(uint64_t (**)(int32x2_t *, char *))(*(_QWORD *)v13 + 40))(v13, v109);
    v65 = v2010;
    v9 = v2041;
    v12 = v1988;
    sub_20F8C5EE0(v7 + 40744, (unsigned int **)(v204 + 15304), *(_DWORD *)(v2003 + 4));
    if (!*(_BYTE *)(v11 + 240))
      goto LABEL_531;
    v205 = *(_QWORD *)(v2003 + 200) - *(_QWORD *)(v2003 + 192);
    v206 = 2 * v205
         + (v205 >> 2)
         + 6
         * (((uint64_t)(*(_QWORD *)(v2003 + 224) - *(_QWORD *)(v2003 + 216)) >> 2)
          + ((uint64_t)(*(_QWORD *)(v2003 + 176) - *(_QWORD *)(v2003 + 168)) >> 2)
          + ((uint64_t)(*(_QWORD *)(v2003 + 248) - *(_QWORD *)(v2003 + 240)) >> 2))
         + v2012[7]
         - v2012[6]
         + ((uint64_t)(v2012[4] - v2012[3]) >> 2)
         + v2012[10]
         - v2012[9]
         + 3
         * (((uint64_t)(v2012[13] - v2012[12]) >> 2)
          + ((uint64_t)(v2012[1] - *v2012) >> 2)
          + ((uint64_t)(v2012[16] - v2012[15]) >> 2));
    v207 = (v1992[1] - *v1992) >> 2;
    if (v206 <= v207)
    {
      if (v206 < v207)
        v1992[1] = *v1992 + 4 * v206;
    }
    else
    {
      sub_20E93DC84((uint64_t)v1992, v206 - v207);
    }
    v570 = 0;
    v571 = 0;
    v572 = v7 + 41088;
    v573.i64[0] = 0x400000004;
    v573.i64[1] = 0x400000004;
    v574.i64[0] = 0x800000008;
    v574.i64[1] = 0x800000008;
    while (1)
    {
      v575 = v113 + 24 * dword_2103B98E8[v570];
      v576 = &v110[3 * v570];
      v577 = *(_DWORD **)v575;
      v578 = *(_DWORD **)(v575 + 8);
      v579 = *v576;
      v580 = v576[1];
      _ZF = v577 == v578 || v579 == v580;
      if (!_ZF)
      {
        v582 = dword_2103B93C4[v570];
        if (v582)
          break;
      }
LABEL_454:
      if (++v570 == 10)
      {
        sub_20F8DFFE4((uint64_t *)(v7 + 41592), v111, (uint64_t)v110, v572);
        sub_20F20CEEC((_DWORD *)(v7 + 41624), 0, 1u);
        *(_OWORD *)(v7 + 41712) = 0u;
        *(_OWORD *)(v7 + 41696) = 0u;
        *(_OWORD *)(v7 + 41680) = 0u;
        *(_OWORD *)(v7 + 41664) = 0u;
        *(_OWORD *)(v7 + 41648) = 0u;
        sub_20F922E48((uint64_t)&v2073, (_QWORD *)(v7 + 41728));
        v2023[1] = *v2023;
        v2023[4] = v2023[3];
        v2023[7] = v2023[6];
        v2023[10] = v2023[9];
        v2023[13] = v2023[12];
        v2023[16] = v2023[15];
        v2023[19] = v2023[18];
        v2023[22] = v2023[21];
        v2023[25] = v2023[24];
        v2023[28] = v2023[27];
        sub_20F8D63EC((_QWORD *)(v7 + 41624), v110);
        if (((*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2)
           + ((*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2)
           + ((*(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 48)) >> 2)
           + ((*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 2)
           + ((*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 2)
           + ((*(_QWORD *)(v11 + 128) - *(_QWORD *)(v11 + 120)) >> 2)
           + ((*(_QWORD *)(v11 + 152) - *(_QWORD *)(v11 + 144)) >> 2)
           + ((*(_QWORD *)(v11 + 176) - *(_QWORD *)(v11 + 168)) >> 2)
           + ((*(_QWORD *)(v11 + 200) - *(_QWORD *)(v11 + 192)) >> 2)
           + ((*(_QWORD *)(v11 + 224) - *(_QWORD *)(v11 + 216)) >> 2))
        {
          v2083 = 0u;
          v2084 = 0u;
          v2081 = 0u;
          v2082 = 0u;
          v2079 = 0u;
          v2080 = 0u;
          v2077 = 0u;
          v2078 = 0u;
          v2075 = 0u;
          v2076 = 0u;
          memset(v2074, 0, sizeof(v2074));
          v2073 = 0u;
          memset(v2064, 0, 64);
          v2062 = 0u;
          v2063 = 0u;
          v2060 = 0u;
          v2061 = 0u;
          v2058 = 0u;
          v2059 = 0u;
          memset(v2057, 0, sizeof(v2057));
          sub_20F8ED370(v7 + 41624, v7 + 22896, (char **)&v2073, (int **)v2057);
          sub_20F89E908((uint64_t)v2057);
          sub_20F89E908((uint64_t)&v2073);
          v595 = 1;
        }
        else
        {
          v595 = 0;
        }
        v1984[880] = v595;
        v2023[32] = 0;
        *v1984 = 1;
        goto LABEL_531;
      }
    }
    v583 = 0;
    v585 = *v1992;
    v586 = v582 & 0xFFFFFFF8;
    while (*(_DWORD *)v579 != *v577)
    {
LABEL_462:
      ++v583;
      v579 += 4;
      if (v579 == v580)
        goto LABEL_454;
    }
    v584 = (_QWORD *)(v572 + 24 * v570);
    v587 = *(_DWORD *)(*v584 + 4 * v583);
    v588 = v571 + v582;
    v589 = __CFADD__(v571, v582 - 1);
    if (v582 < 8 || v589)
    {
      v590 = *(_DWORD *)(*v584 + 4 * v583);
      v591 = v571;
    }
    else
    {
      v590 = v587 + v586;
      v591 = v571 + v586;
      v592 = vaddq_s32(vdupq_n_s32(v587), (int32x4_t)xmmword_210365350);
      v593 = v582 & 0xFFFFFFF8;
      do
      {
        v594 = (int32x4_t *)(v585 + 4 * v571);
        *v594 = v592;
        v594[1] = vaddq_s32(v592, v573);
        v592 = vaddq_s32(v592, v574);
        v571 += 8;
        v593 -= 8;
      }
      while (v593);
      if (v582 == v586)
      {
LABEL_461:
        ++v577;
        v571 = v588;
        v9 = v2041;
        if (v577 == v578)
          goto LABEL_454;
        goto LABEL_462;
      }
    }
    do
      *(_DWORD *)(v585 + 4 * v591++) = v590++;
    while (v588 != v591);
    goto LABEL_461;
  }
LABEL_531:
  if (!*v12)
    sub_20F8C57DC(v7 + 18576, *(_BYTE *)(v7 + 2984), v7 + 8, *(_DWORD *)(v7 + 3000), *(double *)(v7 + 2992), *(double *)(v7 + 18560));
  sub_20F8BCDD8(v7);
  if (v1954)
    v676 = v2057;
  else
    v676 = 0;
  if (__dst)
    v677 = &v2073;
  else
    v677 = 0;
  v678 = sub_20FA153D4(v7, v2031, v677, v1995, v676, v1946);
  sub_20F8F2908((_QWORD *)v7, 2);
  if ((v678 & 1) == 0)
    goto LABEL_748;
  if (__dst)
  {
    *(_OWORD *)(__dst + 5) = 0u;
    *(_OWORD *)(__dst + 9) = 0u;
    *(_OWORD *)(__dst + 15) = 0u;
    *(_OWORD *)(__dst + 1) = 0u;
    *(_OWORD *)(__dst + 17) = 0u;
    *(_OWORD *)(__dst + 13) = 0u;
    *(_OWORD *)(__dst + 7) = 0u;
    *(_OWORD *)(__dst + 3) = 0u;
    v679 = v2073.i64[0];
    __dst[9] = v2073.i64[1];
    v680 = v2074[0].i64[0];
    *(int8x16_t *)(__dst + 11) = vextq_s8(*(int8x16_t *)((char *)v2074 + 8), *(int8x16_t *)((char *)v2074 + 8), 8uLL);
    v681 = v2074[2].i64[0];
    __dst[2] = v2074[1].i64[1];
    *__dst = v681;
    *(int64x2_t *)(__dst + 7) = *(int64x2_t *)((char *)&v2074[2] + 8);
    v682 = v2075.i64[0];
    __dst[15] = v2074[3].i64[1];
    __dst[16] = v680;
    __dst[5] = v679;
    __dst[6] = v682;
  }
  if (v1954)
  {
    *(_OWORD *)(v1954 + 5) = 0u;
    *(_OWORD *)(v1954 + 9) = 0u;
    *(_OWORD *)(v1954 + 15) = 0u;
    *(_OWORD *)(v1954 + 1) = 0u;
    *(_OWORD *)(v1954 + 17) = 0u;
    *(_OWORD *)(v1954 + 13) = 0u;
    *(_OWORD *)(v1954 + 7) = 0u;
    *(_OWORD *)(v1954 + 3) = 0u;
    v683 = *(_QWORD *)v2057;
    v1954[9] = *(_QWORD *)&v2057[8];
    v684 = *(_QWORD *)&v2057[16];
    *(int8x16_t *)(v1954 + 11) = vextq_s8(*(int8x16_t *)&v2057[24], *(int8x16_t *)&v2057[24], 8uLL);
    v685 = *(_QWORD *)&v2057[48];
    v1954[2] = *(_QWORD *)&v2057[40];
    *v1954 = v685;
    *(_OWORD *)(v1954 + 7) = *(_OWORD *)&v2057[56];
    v686 = v2058;
    v1954[15] = *(_QWORD *)&v2057[72];
    v1954[16] = v684;
    v1954[5] = v683;
    v1954[6] = v686;
  }
  if (*(_BYTE *)(v9 + 666))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 3989, (uint64_t)"!m_fallbackToHostForIteration", 29, (uint64_t)"There is no injection in fall-back mode.", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v687 = *(_DWORD *)(v7 + 3024);
    if (*(_BYTE *)(v9 + 666))
    {
      v1876 = *(_DWORD *)(v7 + 3024);
      v688 = 22144;
      goto LABEL_1008;
    }
  }
  else
  {
    v687 = *(_DWORD *)(v7 + 3024);
  }
  v1876 = v687;
  if (*v12)
    v688 = 20640;
  else
    v688 = 19576;
LABEL_1008:
  v1886 = (_QWORD *)(v7 + v688);
  v1006 = *(int8x16_t **)(v65 + 96);
  v1007 = v1006[1940].u32[2];
  v1008 = v1006 + 2772;
  LODWORD(v2070.__r_.__value_.__l.__data_) = v1007;
  HIDWORD(v2070.__r_.__value_.__r.__words[0]) = v1007;
  v2070.__r_.__value_.__l.__size_ = (std::string::size_type)&v1006[2772] + 8 * (196 - ((v1007 + 3) & 0xFFFFFFFC));
  LODWORD(v2070.__r_.__value_.__r.__words[2]) = 196 - ((v1007 + 3) & 0xFFFFFFFC);
  if (v1007 == *(_DWORD *)(v65 + 16) && v1007 == *(_DWORD *)(v65 + 20))
  {
    v1009 = *(int8x16_t **)v65;
  }
  else
  {
    v1009 = *(int8x16_t **)v65;
    if (v1008 == *(int8x16_t **)v65)
    {
      v1012 = (8 * v1007 * v1007 + 31) & 0xFFFFFFFE0;
      __p[1] = (void *)(v1012 >> 3);
      __p[0] = operator new(v1012, (std::align_val_t)0x20uLL);
      LODWORD(v2056) = v1007;
      HIDWORD(v2056) = v1007;
      sub_20F8F0C10((uint64_t)__p, (uint64_t)&v2070);
      v1013 = *(int8x16_t **)v65;
      v1014 = *(void **)(v65 + 8);
      v1015 = __p[1];
      *(void **)v65 = __p[0];
      *(_QWORD *)(v65 + 8) = v1015;
      __p[0] = v1013;
      __p[1] = v1014;
      *(_QWORD *)(v65 + 16) = v2056;
      if (!v1013)
        goto LABEL_1020;
      goto LABEL_1019;
    }
    *(_DWORD *)(v65 + 16) = v1007;
    *(_DWORD *)(v65 + 20) = v1007;
    v1010 = v1007 * (unint64_t)v1007;
    if (*(_QWORD *)(v65 + 8) < v1010)
    {
      if (v1009)
        MEMORY[0x212BC6368](v1009, 0x1000C8000313F17);
      v1011 = (8 * v1010 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = v1011 >> 3;
      v1009 = (int8x16_t *)operator new(v1011, (std::align_val_t)0x20uLL);
      *(_QWORD *)v65 = v1009;
    }
  }
  if (v1008 != v1009)
  {
    sub_20F8F0C10(v65, (uint64_t)&v2070);
    goto LABEL_1020;
  }
  v1419 = (8 * v1007 * v1007 + 31) & 0xFFFFFFFE0;
  __p[1] = (void *)(v1419 >> 3);
  __p[0] = operator new(v1419, (std::align_val_t)0x20uLL);
  LODWORD(v2056) = v1007;
  HIDWORD(v2056) = v1007;
  sub_20F8F0C10((uint64_t)__p, (uint64_t)&v2070);
  v1420 = (*(_DWORD *)(v65 + 20) * *(_DWORD *)(v65 + 16));
  v1013 = (int8x16_t *)__p[0];
  if ((_DWORD)v1420)
  {
    v1421 = *(int8x16_t **)v65;
    v1422 = (v1420 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1422 < 3)
    {
      v1423 = (uint64_t *)__p[0];
      v1424 = *(int8x16_t **)v65;
    }
    else
    {
      v1423 = (uint64_t *)__p[0];
      v1424 = *(int8x16_t **)v65;
      if ((unint64_t)((char *)v1421 - (char *)__p[0]) >= 0x20)
      {
        v1425 = v1422 + 1;
        v1426 = 8 * (v1425 & 0x3FFFFFFFFFFFFFFCLL);
        v1423 = (uint64_t *)((char *)__p[0] + v1426);
        v1424 = (int8x16_t *)((char *)v1421 + v1426);
        v1427 = v1421 + 1;
        v1428 = (__int128 *)((char *)__p[0] + 16);
        v1429 = v1425 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1430 = *v1428;
          v1427[-1] = (int8x16_t)*(v1428 - 1);
          *v1427 = (int8x16_t)v1430;
          v1427 += 2;
          v1428 += 2;
          v1429 -= 4;
        }
        while (v1429);
        if (v1425 == (v1425 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1525;
      }
    }
    v1874 = (int8x16_t *)((char *)v1421 + 8 * v1420);
    do
    {
      v1875 = *v1423++;
      v1424->i64[0] = v1875;
      v1424 = (int8x16_t *)((char *)v1424 + 8);
    }
    while (v1424 != v1874);
  }
LABEL_1525:
  if (v1013)
LABEL_1019:
    MEMORY[0x212BC6368](v1013, 0x1000C8000313F17);
LABEL_1020:
  v1016 = *(unsigned int *)(v7 + 4416);
  v1017 = *(unsigned int *)(v7 + 4420);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 4408) + 16))(v7 + 4408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 4408) + 24))(v7 + 4408, v1016, v1017);
  v1018 = *(unsigned int *)(v7 + 5856);
  v1019 = *(unsigned int *)(v7 + 5860);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5848) + 16))(v7 + 5848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5848) + 24))(v7 + 5848, v1018, v1019);
  v1020 = *(unsigned int *)(v7 + 7296);
  v1021 = *(unsigned int *)(v7 + 7300);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 7288) + 16))(v7 + 7288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 7288) + 24))(v7 + 7288, v1020, v1021);
  v1022 = *(unsigned int *)(v7 + 8736);
  v1023 = *(unsigned int *)(v7 + 8740);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8728) + 16))(v7 + 8728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8728) + 24))(v7 + 8728, v1022, v1023);
  v1024 = *(unsigned int *)(v7 + 10176);
  v1025 = *(unsigned int *)(v7 + 10180);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 10168) + 16))(v7 + 10168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 10168) + 24))(v7 + 10168, v1024, v1025);
  v1026 = *(unsigned int *)(v7 + 11616);
  v1027 = *(unsigned int *)(v7 + 11620);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 11608) + 16))(v7 + 11608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 11608) + 24))(v7 + 11608, v1026, v1027);
  v1028 = *(unsigned int *)(v7 + 13056);
  v1029 = *(unsigned int *)(v7 + 13060);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 13048) + 16))(v7 + 13048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 13048) + 24))(v7 + 13048, v1028, v1029);
  v1030 = *(unsigned int *)(v7 + 14496);
  v1031 = *(unsigned int *)(v7 + 14500);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 14488) + 16))(v7 + 14488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 14488) + 24))(v7 + 14488, v1030, v1031);
  v1032 = *(unsigned int *)(v7 + 15936);
  v1033 = *(unsigned int *)(v7 + 15940);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 15928) + 16))(v7 + 15928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 15928) + 24))(v7 + 15928, v1032, v1033);
  v1885 = v1886 + 57;
  sub_20FA1E1A4(v7 + 17368, v65, v1886 + 57, v1886 + 57, 1u, 1);
  v1034 = *(unsigned int *)(v7 + 4272);
  v1035 = *(unsigned int *)(v7 + 4276);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 4264) + 16))(v7 + 4264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 4264) + 24))(v7 + 4264, v1034, v1035);
  v1036 = *(unsigned int *)(v7 + 5712);
  v1037 = *(unsigned int *)(v7 + 5716);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5704) + 16))(v7 + 5704);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5704) + 24))(v7 + 5704, v1036, v1037);
  v1038 = *(unsigned int *)(v7 + 7152);
  v1039 = *(unsigned int *)(v7 + 7156);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 7144) + 16))(v7 + 7144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 7144) + 24))(v7 + 7144, v1038, v1039);
  v1040 = *(unsigned int *)(v7 + 8592);
  v1041 = *(unsigned int *)(v7 + 8596);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8584) + 16))(v7 + 8584);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8584) + 24))(v7 + 8584, v1040, v1041);
  v1042 = *(unsigned int *)(v7 + 10032);
  v1043 = *(unsigned int *)(v7 + 10036);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 10024) + 16))(v7 + 10024);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 10024) + 24))(v7 + 10024, v1042, v1043);
  v1044 = *(unsigned int *)(v7 + 11472);
  v1045 = *(unsigned int *)(v7 + 11476);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 11464) + 16))(v7 + 11464);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 11464) + 24))(v7 + 11464, v1044, v1045);
  v1046 = *(unsigned int *)(v7 + 12912);
  v1047 = *(unsigned int *)(v7 + 12916);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 12904) + 16))(v7 + 12904);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 12904) + 24))(v7 + 12904, v1046, v1047);
  v1048 = *(unsigned int *)(v7 + 14352);
  v1049 = *(unsigned int *)(v7 + 14356);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 14344) + 16))(v7 + 14344);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 14344) + 24))(v7 + 14344, v1048, v1049);
  v1884 = v1886 + 54;
  sub_20FA1E1A4(v7 + 15784, v65, v1886 + 54, v1886 + 54, 1u, 1);
  sub_20FA1E1A4(v7 + 17224, v65, v1886 + 54, v1886 + 57, 0, 1);
  v1050 = *(unsigned int *)(v7 + 4128);
  v1051 = *(unsigned int *)(v7 + 4132);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 4120) + 16))(v7 + 4120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 4120) + 24))(v7 + 4120, v1050, v1051);
  v1052 = *(unsigned int *)(v7 + 5568);
  v1053 = *(unsigned int *)(v7 + 5572);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5560) + 16))(v7 + 5560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5560) + 24))(v7 + 5560, v1052, v1053);
  v1054 = *(unsigned int *)(v7 + 7008);
  v1055 = *(unsigned int *)(v7 + 7012);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 7000) + 16))(v7 + 7000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 7000) + 24))(v7 + 7000, v1054, v1055);
  v1056 = *(unsigned int *)(v7 + 8448);
  v1057 = *(unsigned int *)(v7 + 8452);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8440) + 16))(v7 + 8440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8440) + 24))(v7 + 8440, v1056, v1057);
  v1058 = *(unsigned int *)(v7 + 9888);
  v1059 = *(unsigned int *)(v7 + 9892);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 9880) + 16))(v7 + 9880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 9880) + 24))(v7 + 9880, v1058, v1059);
  v1060 = *(unsigned int *)(v7 + 11328);
  v1061 = *(unsigned int *)(v7 + 11332);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 11320) + 16))(v7 + 11320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 11320) + 24))(v7 + 11320, v1060, v1061);
  v1062 = *(unsigned int *)(v7 + 12768);
  v1063 = *(unsigned int *)(v7 + 12772);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 12760) + 16))(v7 + 12760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 12760) + 24))(v7 + 12760, v1062, v1063);
  v1883 = v1886 + 51;
  sub_20FA1FFA8(v7 + 14200, v65, v1886 + 51, v1886 + 51, 1u, 1);
  sub_20FA1F834(v7 + 15640, v65, v1886 + 51, v1886 + 54, 1);
  sub_20FA1F834(v7 + 17080, v65, v1886 + 51, v1886 + 57, 1);
  v1064 = *(unsigned int *)(v7 + 3984);
  v1065 = *(unsigned int *)(v7 + 3988);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3976) + 16))(v7 + 3976);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3976) + 24))(v7 + 3976, v1064, v1065);
  v1066 = *(unsigned int *)(v7 + 5424);
  v1067 = *(unsigned int *)(v7 + 5428);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5416) + 16))(v7 + 5416);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5416) + 24))(v7 + 5416, v1066, v1067);
  v1068 = *(unsigned int *)(v7 + 6864);
  v1069 = *(unsigned int *)(v7 + 6868);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 6856) + 16))(v7 + 6856);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 6856) + 24))(v7 + 6856, v1068, v1069);
  v1070 = *(unsigned int *)(v7 + 8304);
  v1071 = *(unsigned int *)(v7 + 8308);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8296) + 16))(v7 + 8296);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8296) + 24))(v7 + 8296, v1070, v1071);
  v1072 = *(unsigned int *)(v7 + 9744);
  v1073 = *(unsigned int *)(v7 + 9748);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 9736) + 16))(v7 + 9736);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 9736) + 24))(v7 + 9736, v1072, v1073);
  v1074 = *(unsigned int *)(v7 + 11184);
  v1075 = *(unsigned int *)(v7 + 11188);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 11176) + 16))(v7 + 11176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 11176) + 24))(v7 + 11176, v1074, v1075);
  v1882 = v1886 + 48;
  sub_20FA1FFA8(v7 + 12616, v65, v1886 + 48, v1886 + 48, 1u, 1);
  sub_20FA1FFA8(v7 + 14056, v65, v1886 + 48, v1886 + 51, 0, 1);
  sub_20FA1F834(v7 + 15496, v65, v1886 + 48, v1886 + 54, 1);
  sub_20FA1F834(v7 + 16936, v65, v1886 + 48, v1886 + 57, 1);
  v1076 = *(unsigned int *)(v7 + 3840);
  v1077 = *(unsigned int *)(v7 + 3844);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3832) + 16))(v7 + 3832);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3832) + 24))(v7 + 3832, v1076, v1077);
  v1078 = *(unsigned int *)(v7 + 5280);
  v1079 = *(unsigned int *)(v7 + 5284);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5272) + 16))(v7 + 5272);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5272) + 24))(v7 + 5272, v1078, v1079);
  v1080 = *(unsigned int *)(v7 + 6720);
  v1081 = *(unsigned int *)(v7 + 6724);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 6712) + 16))(v7 + 6712);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 6712) + 24))(v7 + 6712, v1080, v1081);
  v1082 = *(unsigned int *)(v7 + 8160);
  v1083 = *(unsigned int *)(v7 + 8164);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8152) + 16))(v7 + 8152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8152) + 24))(v7 + 8152, v1082, v1083);
  v1084 = *(unsigned int *)(v7 + 9600);
  v1085 = *(unsigned int *)(v7 + 9604);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 9592) + 16))(v7 + 9592);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 9592) + 24))(v7 + 9592, v1084, v1085);
  v1086 = v1886 + 45;
  v1087 = *(unsigned int *)(v7 + 11044);
  v1889 = v1886 + 45;
  if ((_DWORD)v1087)
  {
    v1088 = 0;
    v1089 = (unint64_t *)(v7 + 11048);
    v1893 = (unint64_t *)(v7 + 11048);
    while (1)
    {
      v1091 = *(unsigned int *)(v7 + 11040);
      v1090 = v1088 + 1;
      v1092 = v1088 + 1 >= v1091 ? v1091 : v1090;
      if ((_DWORD)v1092)
        break;
LABEL_1023:
      v1088 = v1090;
      if (v1090 >= v1087)
        goto LABEL_1084;
    }
    v2025 = v1088 + 1;
    v1093 = 0;
    v1094 = *(_DWORD *)(*v1086 + 4 * v1088);
    v1095 = *(_QWORD *)(v7 + 11120) + 8 * (*(_DWORD *)(v7 + 11144) * v1088);
    v2043 = v1088;
    v2033 = v1092;
    while (1)
    {
      while (1)
      {
        v1098 = *(_DWORD *)(*v1086 + 4 * v1093);
        v1099 = *(int8x16_t **)v65;
        v1100 = *(_DWORD *)(v65 + 16);
        v1101 = *(_QWORD *)(v1095 + 8 * v1093);
        if (v1098 > v1094)
        {
          if (v1101 == -1)
          {
            v1102 = *(_QWORD *)(v7 + 11112);
            if (v1102)
            {
              v1103 = *(_QWORD *)(v7 + 11080);
              v1104 = *(_QWORD *)(v7 + 11088);
              v1105 = ((v1104 - v1103) << 6) - 1;
              v1106 = *(_QWORD *)(v7 + 11104);
              if (v1104 == v1103)
                v1105 = 0;
              v1096 = (int8x16_t *)(*(_QWORD *)(v7 + 11048)
                                  + 8
                                  * *(_QWORD *)(*(_QWORD *)(v1103
                                                          + (((unint64_t)(v1106 + v1102 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                              + 8 * ((v1106 + v1102 - 1) & 0x1FF)));
              *(_QWORD *)(v7 + 11112) = v1102 - 1;
              if ((unint64_t)(v1105 - (v1102 + v1106) + 1) >= 0x400)
              {
                operator delete(*(void **)(v1104 - 8));
                v1092 = v2033;
                v1088 = v2043;
                v1089 = v1893;
                *(_QWORD *)(v7 + 11088) -= 8;
              }
            }
            else
            {
              v1112 = *(void **)(v7 + 11056);
              __p[0] = 0;
              sub_20F1C5A3C(v1089, v1112, 1uLL, (uint64_t *)__p);
              v1096 = (int8x16_t *)(*(_QWORD *)(v7 + 11056) - 8);
              v65 = v2010;
              v1086 = v1886 + 45;
              v1089 = v1893;
              v1088 = v2043;
              v1092 = v2033;
            }
            *(_QWORD *)(v1095 + 8 * v1093) = ((uint64_t)v1096->i64 - *(_QWORD *)(v7 + 11048)) >> 3;
            ++*(_QWORD *)(*(_QWORD *)(v7 + 11152) + 8 * v1088);
          }
          else
          {
            v1096 = (int8x16_t *)(*v1089 + 8 * v1101);
          }
          v1097 = v1099->i64[v1094 + v1100 * v1098];
          goto LABEL_1032;
        }
        if (v1101 == -1)
          break;
        v1096 = (int8x16_t *)(*v1089 + 8 * v1101);
        v1097 = v1099->i64[v1098 + v1100 * v1094];
        if (v1099 == v1096)
          goto LABEL_1082;
LABEL_1032:
        v1096->i64[0] = v1097;
        if (++v1093 == v1092)
          goto LABEL_1022;
      }
      v1107 = *(_QWORD *)(v7 + 11112);
      if (!v1107)
        break;
      v1108 = *(_QWORD *)(v7 + 11080);
      v1109 = *(_QWORD *)(v7 + 11088);
      v1110 = ((v1109 - v1108) << 6) - 1;
      v1111 = *(_QWORD *)(v7 + 11104);
      if (v1109 == v1108)
        v1110 = 0;
      v1096 = (int8x16_t *)(*(_QWORD *)(v7 + 11048)
                          + 8
                          * *(_QWORD *)(*(_QWORD *)(v1108
                                                  + (((unint64_t)(v1111 + v1107 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v1111 + v1107 - 1) & 0x1FF)));
      *(_QWORD *)(v7 + 11112) = v1107 - 1;
      if ((unint64_t)(v1110 - (v1107 + v1111) + 1) >= 0x400)
      {
        operator delete(*(void **)(v1109 - 8));
        v1092 = v2033;
        v1088 = v2043;
        v1089 = v1893;
        *(_QWORD *)(v7 + 11088) -= 8;
      }
LABEL_1081:
      *(_QWORD *)(v1095 + 8 * v1093) = ((uint64_t)v1096->i64 - *(_QWORD *)(v7 + 11048)) >> 3;
      ++*(_QWORD *)(*(_QWORD *)(v7 + 11152) + 8 * v1088);
      v1097 = v1099->i64[v1098 + v1100 * v1094];
      if (v1099 != v1096)
        goto LABEL_1032;
LABEL_1082:
      v1099->i64[0] = v1097;
      if (++v1093 == v1092)
      {
LABEL_1022:
        v1087 = *(unsigned int *)(v7 + 11044);
        v1090 = v2025;
        goto LABEL_1023;
      }
    }
    v1113 = v7;
    v1114 = *(char **)(v7 + 11056);
    v1115 = *(char **)(v1113 + 11048);
    v1116 = v1114 - v1115;
    v1117 = (v1114 - v1115) >> 3;
    v1118 = &v1115[(v1114 - v1115) & 0xFFFFFFFFFFFFFFF8];
    v1119 = *(char **)(v1113 + 11064);
    if (v1119 != v1114)
    {
      if (v1114 == v1118)
      {
        *(_QWORD *)v1114 = 0;
        v1892[1382] = v1114 + 8;
        v7 = (uint64_t)v1892;
        v65 = v2010;
      }
      else
      {
        v1120 = v1114 - 8;
        if ((unint64_t)v1114 < 8)
        {
          v1121 = v1114;
          v65 = v2010;
        }
        else
        {
          v1121 = v1114;
          v65 = v2010;
          do
          {
            v1140 = *(_QWORD *)v1120;
            v1120 += 8;
            *(_QWORD *)v1121 = v1140;
            v1121 += 8;
          }
          while (v1120 < v1114);
        }
        v1892[1382] = v1121;
        if (v1114 != v1118 + 8)
        {
          memmove(&v1114[-8 * ((v1114 - (v1118 + 8)) >> 3)], v1118, v1114 - (v1118 + 8));
          v1118 = &v1115[(v1114 - v1115) & 0xFFFFFFFFFFFFFFF8];
          v1092 = v2033;
        }
        *(_QWORD *)v1118 = 0;
        v7 = (uint64_t)v1892;
        v1089 = v1893;
        v1088 = v2043;
      }
LABEL_1080:
      v1096 = (int8x16_t *)(*(_QWORD *)(v7 + 11056) - 8);
      v1086 = v1886 + 45;
      goto LABEL_1081;
    }
    v1122 = v1117 + 1;
    if ((unint64_t)(v1117 + 1) >> 61)
LABEL_1529:
      sub_20E867F44();
    v1123 = v1119 - v1115;
    if (v1123 >> 2 > v1122)
      v1122 = v1123 >> 2;
    if ((unint64_t)v1123 >= 0x7FFFFFFFFFFFFFF8)
      v1122 = 0x1FFFFFFFFFFFFFFFLL;
    v2014 = v1122;
    if (v1122)
    {
      if (v1122 >> 61)
LABEL_1530:
        sub_20E877A38();
      v1124 = operator new(8 * v1122);
      v1089 = v1893;
      v1088 = v2043;
      v1092 = v2033;
      v1118 = &v1115[(v1114 - v1115) & 0xFFFFFFFFFFFFFFF8];
      v1117 = (v1114 - v1115) >> 3;
      v1125 = &v1124[8 * v1117];
      *v1125 = 0;
      v1126 = (char *)(v1125 + 1);
      if (v1115 != v1114)
        goto LABEL_1061;
    }
    else
    {
      v1124 = 0;
      v1125 = (_QWORD *)(8 * v1117);
      *(_QWORD *)(8 * v1117) = 0;
      v1126 = (char *)(8 * v1117 + 8);
      if (v1115 != v1114)
      {
LABEL_1061:
        v1127 = v1116 - 8;
        if ((unint64_t)(v1116 - 8) >= 0x68)
        {
          v1129 = &v1115[v1116 & 0xFFFFFFFFFFFFFFF8] - &v1124[v1116 & 0xFFFFFFFFFFFFFFF8];
          v1128 = v1118;
          v65 = v2010;
          if (v1129 >= 0x20)
          {
            v1130 = (v1127 >> 3) + 1;
            v1131 = 8 * (v1130 & 0x3FFFFFFFFFFFFFFCLL);
            v1128 = &v1118[-v1131];
            v1125 = (_QWORD *)((char *)v1125 - v1131);
            v1132 = &v1124[8 * v1117 - 16];
            v1133 = &v1115[8 * v1117 - 16];
            v1134 = v1130 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1135 = *(_OWORD *)v1133;
              *(v1132 - 1) = *((_OWORD *)v1133 - 1);
              *v1132 = v1135;
              v1132 -= 2;
              v1133 -= 32;
              v1134 -= 4;
            }
            while (v1134);
            if (v1130 == (v1130 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1072;
          }
        }
        else
        {
          v1128 = v1118;
          v65 = v2010;
        }
        do
        {
          v1136 = *((_QWORD *)v1128 - 1);
          v1128 -= 8;
          *--v1125 = v1136;
        }
        while (v1128 != v1115);
LABEL_1072:
        v1137 = v1114 - v1118;
        if (v1137)
        {
          v1138 = v1124;
          v2005 = v1126;
          memmove(v1126, v1118, v1137);
          v1126 = v2005;
          v1124 = v1138;
          v65 = v2010;
          v1092 = v2033;
          v1088 = v2043;
          v1089 = v1893;
        }
        v1892[1381] = v1125;
        v1139 = &v1126[v1137];
        v7 = (uint64_t)v1892;
        v1892[1382] = v1139;
        v1892[1383] = &v1124[8 * v2014];
        if (v1115)
        {
          operator delete(v1115);
          v1092 = v2033;
          v1088 = v2043;
          v1089 = v1893;
        }
        goto LABEL_1080;
      }
    }
    v65 = v2010;
    goto LABEL_1072;
  }
LABEL_1084:
  sub_20FA20E60(v7 + 12472, v65, v1086, v1882, 1);
  sub_20FA20E60(v7 + 13912, v65, v1889, v1883, 1);
  sub_20FA20744(v7 + 15352, v65, v1889, v1884, 1);
  sub_20FA20744(v7 + 16792, v65, v1889, v1885, 1);
  v1141 = *(unsigned int *)(v7 + 3696);
  v1142 = *(unsigned int *)(v7 + 3700);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3688) + 16))(v7 + 3688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3688) + 24))(v7 + 3688, v1141, v1142);
  v1143 = *(unsigned int *)(v7 + 5136);
  v1144 = *(unsigned int *)(v7 + 5140);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 5128) + 16))(v7 + 5128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 5128) + 24))(v7 + 5128, v1143, v1144);
  v1145 = *(unsigned int *)(v7 + 6576);
  v1146 = *(unsigned int *)(v7 + 6580);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 6568) + 16))(v7 + 6568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 6568) + 24))(v7 + 6568, v1145, v1146);
  v1147 = *(unsigned int *)(v7 + 8016);
  v1148 = *(unsigned int *)(v7 + 8020);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8008) + 16))(v7 + 8008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8008) + 24))(v7 + 8008, v1147, v1148);
  v1881 = v1886 + 42;
  sub_20FA1E1A4(v7 + 9448, v65, v1886 + 42, v1886 + 42, 1u, 1);
  sub_20FA1E940(v7 + 10888, v65, v1886 + 42, v1889, 1);
  sub_20FA1F084(v7 + 12328, v65, v1886 + 42, v1882, 1);
  sub_20FA1F084(v7 + 13768, v65, v1886 + 42, v1883, 1);
  sub_20FA1E1A4(v7 + 15208, v65, v1886 + 42, v1884, 0, 1);
  sub_20FA1E1A4(v7 + 16648, v65, v1886 + 42, v1885, 0, 1);
  v1149 = *(unsigned int *)(v7 + 3552);
  v1150 = *(unsigned int *)(v7 + 3556);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3544) + 16))(v7 + 3544);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3544) + 24))(v7 + 3544, v1149, v1150);
  v1151 = *(unsigned int *)(v7 + 4992);
  v1152 = *(unsigned int *)(v7 + 4996);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 4984) + 16))(v7 + 4984);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 4984) + 24))(v7 + 4984, v1151, v1152);
  v1153 = *(unsigned int *)(v7 + 6432);
  v1154 = *(unsigned int *)(v7 + 6436);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 6424) + 16))(v7 + 6424);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 6424) + 24))(v7 + 6424, v1153, v1154);
  v1880 = v1886 + 39;
  sub_20FA21588(v7 + 7864, v65, v1886 + 39, v1886 + 39, 1u, 1);
  sub_20FA22A24(v7 + 9304, v65, v1886 + 39, v1886 + 42, 1);
  sub_20FA2321C(v7 + 10744, v65, v1886 + 39, v1889, 1);
  sub_20FA23994(v7 + 12184, v65, v1886 + 39, v1882, 1);
  sub_20FA23994(v7 + 13624, v65, v1886 + 39, v1883, 1);
  sub_20FA22A24(v7 + 15064, v65, v1886 + 39, v1884, 1);
  sub_20FA22A24(v7 + 16504, v65, v1886 + 39, v1885, 1);
  v1155 = *(unsigned int *)(v7 + 3408);
  v1156 = *(unsigned int *)(v7 + 3412);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3400) + 16))(v7 + 3400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3400) + 24))(v7 + 3400, v1155, v1156);
  v1157 = *(unsigned int *)(v7 + 4848);
  v1158 = *(unsigned int *)(v7 + 4852);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 4840) + 16))(v7 + 4840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 4840) + 24))(v7 + 4840, v1157, v1158);
  v1879 = v1886 + 36;
  sub_20FA21588(v7 + 6280, v65, v1886 + 36, v1886 + 36, 1u, 1);
  sub_20FA21588(v7 + 7720, v65, v1886 + 36, v1886 + 39, 0, 1);
  sub_20FA22A24(v7 + 9160, v65, v1886 + 36, v1886 + 42, 1);
  sub_20FA2321C(v7 + 10600, v65, v1886 + 36, v1889, 1);
  sub_20FA23994(v7 + 12040, v65, v1886 + 36, v1882, 1);
  sub_20FA23994(v7 + 13480, v65, v1886 + 36, v1883, 1);
  sub_20FA22A24(v7 + 14920, v65, v1886 + 36, v1884, 1);
  sub_20FA22A24(v7 + 16360, v65, v1886 + 36, v1885, 1);
  v1159 = *(unsigned int *)(v7 + 3264);
  v1160 = *(unsigned int *)(v7 + 3268);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 3256) + 16))(v7 + 3256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 3256) + 24))(v7 + 3256, v1159, v1160);
  v1161 = v1886 + 33;
  v1162 = *(unsigned int *)(v7 + 4708);
  if ((_DWORD)v1162)
  {
    v1163 = 0;
    v1164 = (unint64_t *)(v7 + 4712);
    v1894 = (unint64_t *)(v7 + 4712);
    while (1)
    {
      v1166 = *(unsigned int *)(v7 + 4704);
      v1165 = v1163 + 1;
      v1167 = v1163 + 1 >= v1166 ? v1166 : v1165;
      if ((_DWORD)v1167)
        break;
LABEL_1087:
      v1163 = v1165;
      if (v1165 >= v1162)
        goto LABEL_1157;
    }
    v1887 = v1163 + 1;
    v1888 = v1163;
    v1168 = 0;
    v1169 = *(_DWORD *)(*v1161 + 4 * v1163);
    v1170 = *(_QWORD *)(v7 + 4784) + 8 * (*(_DWORD *)(v7 + 4808) * v1163);
    v1890 = v1170;
    v1891 = v1167;
    while (1)
    {
      v1194 = *(_DWORD *)(*v1161 + 4 * v1168);
      v1195 = *(int8x16_t **)v65;
      v1196 = *(unsigned int *)(v65 + 16);
      v1197 = *(_QWORD *)(v1170 + 8 * v1168);
      if (v1194 > v1169)
      {
        if (v1197 == -1)
        {
          v1199 = *(_QWORD *)(v7 + 4776);
          if (v1199)
          {
            v1200 = *(_QWORD *)(v7 + 4744);
            v1201 = *(_QWORD *)(v7 + 4752);
            v1202 = ((v1201 - v1200) << 6) - 1;
            v1203 = *(_QWORD *)(v7 + 4768);
            if (v1201 == v1200)
              v1202 = 0;
            v1198 = *(_QWORD *)(v7 + 4712)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v1200 + (((unint64_t)(v1203 + v1199 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v1203 + v1199 - 1) & 0x1FF));
            *(_QWORD *)(v7 + 4776) = v1199 - 1;
            if ((unint64_t)(v1202 - (v1199 + v1203) + 1) >= 0x400)
            {
              operator delete(*(void **)(v1201 - 8));
              v1170 = v1890;
              v1167 = v1891;
              v1164 = v1894;
              *(_QWORD *)(v7 + 4752) -= 8;
            }
          }
          else
          {
            v1209 = *(void **)(v7 + 4720);
            __p[0] = 0;
            sub_20F1C5A3C(v1164, v1209, 0x51uLL, (uint64_t *)__p);
            v1198 = *(_QWORD *)(v7 + 4720) - 648;
            v65 = v2010;
            v1161 = v1886 + 33;
            v1170 = v1890;
            v1164 = v1894;
            v1163 = v1888;
            v1167 = v1891;
          }
          *(_QWORD *)(v1170 + 8 * v1168) = (v1198 - *(_QWORD *)(v7 + 4712)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v7 + 4816) + 8 * v1163);
        }
        else
        {
          v1198 = *v1164 + 8 * v1197;
        }
        v1210 = (int64x2_t *)((char *)v1195 + 8 * v1169 + 8 * (_DWORD)v1196 * v1194);
        v1212 = v1210[2];
        v1211 = v1210[3];
        v1213 = v1210[1];
        v1214 = (int8x16_t *)((char *)v1210 + 8 * v1196);
        v1254 = v1214[2];
        v1215 = (int64x2_t)v1214[3];
        v1216 = (int64x2_t)v1214[1];
        v1217 = &v1210[v1196];
        v1219 = v1217[2];
        v1218 = v1217[3];
        v1220 = v1217[1];
        v1221 = (int64x2_t *)((char *)v1210 + 24 * v1196);
        v1222 = &v1210[2 * v1196];
        v1223 = v1222[1];
        v1224 = (int64x2_t *)((char *)v1210 + 40 * v1196);
        v1225 = &v1210[3 * v1196];
        v1226 = v1225[1];
        v1227 = (int64x2_t *)((char *)v1210 + 56 * v1196);
        v2015 = vzip1q_s64(*v1217, *v1221);
        v1993 = vzip1q_s64(*v1225, *v1227);
        v1996 = vzip1q_s64(*v1222, *v1224);
        v2044 = vzip2q_s64(*v1210, *(int64x2_t *)v1214);
        v1228.i64[0] = vdupq_laneq_s64(*v1217, 1).u64[0];
        v1228.i64[1] = v1221->i64[1];
        v1229.i64[0] = vdupq_laneq_s64(*v1222, 1).u64[0];
        v1229.i64[1] = v1224->i64[1];
        v1178.i64[0] = vdupq_laneq_s64(*v1225, 1).u64[0];
        v1178.i64[1] = v1227->i64[1];
        v1230 = vzip1q_s64(v1213, v1216);
        v1232 = v1222[2];
        v1231 = v1222[3];
        v1174 = (int8x16_t)vzip1q_s64(v1220, v1221[1]);
        v2034 = vzip1q_s64(v1223, v1224[1]);
        v1233 = vzip1q_s64(v1226, v1227[1]);
        v1234.i64[0] = vdupq_laneq_s64(v1220, 1).u64[0];
        v1234.i64[1] = v1221[1].i64[1];
        v1235.i64[0] = vdupq_laneq_s64(v1223, 1).u64[0];
        v1235.i64[1] = v1224[1].i64[1];
        v1182.i64[0] = vdupq_laneq_s64(v1226, 1).u64[0];
        v1182.i64[1] = v1227[1].i64[1];
        v1236 = vzip2q_s64(v1213, v1216);
        v1184 = (int8x16_t)vzip1q_s64(v1212, (int64x2_t)v1254);
        v1237 = (int8x16_t)vzip1q_s64(v1219, v1221[2]);
        v1238 = (int8x16_t)vzip1q_s64(v1232, v1224[2]);
        v1183.i64[0] = vdupq_laneq_s64(v1219, 1).u64[0];
        v1239 = vzip2q_s64(v1212, (int64x2_t)v1254);
        v1183.i64[1] = v1221[2].i64[1];
        v1241 = v1225[2];
        v1240 = v1225[3];
        v1180 = (int8x16_t)vzip1q_s64(v1211, v1215);
        v1177 = (int8x16_t)vzip2q_s64(v1211, v1215);
        v1172 = (int8x16_t)v1233;
        v1186.i64[0] = vdupq_laneq_s64(v1232, 1).u64[0];
        v1186.i64[1] = v1224[2].i64[1];
        v1242 = (int8x16_t)vzip1q_s64(v1241, v1227[2]);
        v1243.i64[0] = vdupq_laneq_s64(v1241, 1).u64[0];
        v1175 = (int8x16_t)v1236;
        v1243.i64[1] = v1227[2].i64[1];
        v1908 = vzip1q_s64(v1218, v1221[3]);
        v1244.i64[0] = vdupq_laneq_s64(v1218, 1).u64[0];
        v1173 = (int8x16_t)v1230;
        v1244.i64[1] = v1221[3].i64[1];
        v1246.i64[0] = vdupq_laneq_s64(v1231, 1).u64[0];
        v1245 = (int8x16_t)vzip1q_s64(v1231, v1224[3]);
        v1179 = (int8x16_t)v1239;
        v1246.i64[1] = v1224[3].i64[1];
        v1247.i64[0] = vdupq_laneq_s64(v1240, 1).u64[0];
        v1181 = (int8x16_t)vzip1q_s64(v1240, v1227[3]);
        v1176 = (int8x16_t)v2034;
        v1247.i64[1] = v1227[3].i64[1];
        v1248 = (int8x16_t *)&v1210[4 * v1196];
        v1952.i64[0] = v1210[4].i64[0];
        v1968 = v1214[4].u64[0];
        v1934.i64[0] = v1217[4].i64[0];
        v1965 = v1221[4].u64[0];
        v2006.i64[0] = v1222[4].i64[0];
        v1972 = v1224[4].u64[0];
        v1960.i64[0] = v1225[4].i64[0];
        v1976 = v1227[4].u64[0];
        __dsta = v1248[4].i64[0];
        v1250 = v1248[2];
        v1249 = v1248[3];
        v1251 = *v1248;
        v1252 = v1248[1];
        *(int64x2_t *)v1198 = vzip1q_s64(*v1210, *(int64x2_t *)v1214);
        *(int64x2_t *)(v1198 + 16) = v2015;
        *(int64x2_t *)(v1198 + 32) = v1996;
        *(int64x2_t *)(v1198 + 48) = v1993;
        *(_QWORD *)(v1198 + 64) = v1251.i64[0];
        v2016 = vextq_s8(v1251, v1251, 8uLL).u64[0];
        v1171 = (int8x16_t)v2044;
        v1963 = vextq_s8(v1178, v1178, 8uLL).u64[0];
        v1957 = vextq_s8(v1229, v1229, 8uLL).u64[0];
        v1949 = vextq_s8(v1228, v1228, 8uLL).u64[0];
        v1947 = vextq_s8(v1171, v1171, 8uLL).u64[0];
        v1955 = vextq_s8(v1172, v1172, 8uLL).u64[0];
        v1944 = vextq_s8(v1176, v1176, 8uLL).u64[0];
        v1941 = vextq_s8(v1174, v1174, 8uLL).u64[0];
        v1936 = vextq_s8(v1173, v1173, 8uLL).u64[0];
        v1938 = vextq_s8(v1182, v1182, 8uLL).u64[0];
        v1932 = vextq_s8(v1235, v1235, 8uLL).u64[0];
        v1930 = vextq_s8(v1234, v1234, 8uLL).u64[0];
        v2026 = v1252.i64[0];
        v1985 = v1250.i64[0];
        v1989 = vextq_s8(v1252, v1252, 8uLL).u64[0];
        v1919 = vextq_s8(v1175, v1175, 8uLL).u64[0];
        v1928 = vextq_s8(v1242, v1242, 8uLL).u64[0];
        v1927 = vextq_s8(v1238, v1238, 8uLL).u64[0];
        v1923 = vextq_s8(v1237, v1237, 8uLL).u64[0];
        v1185 = vextq_s8(v1184, v1184, 8uLL).u64[0];
        v1925 = vextq_s8(v1243, v1243, 8uLL).u64[0];
        v1921 = vextq_s8(v1186, v1186, 8uLL).u64[0];
        v1980 = vextq_s8(v1250, v1250, 8uLL).u64[0];
        v1916 = vextq_s8(v1179, v1179, 8uLL).u64[0];
        v1917 = vextq_s8(v1183, v1183, 8uLL).u64[0];
        v1254.i64[0] = vextq_s8(v1245, v1245, 8uLL).u64[0];
        v1252.i64[0] = v1245.i64[0];
        v1253 = (int8x16_t)v1908;
        v1914 = v1254.i64[0];
        v1915 = vextq_s8(v1181, v1181, 8uLL).u64[0];
        v1912 = vextq_s8(v1180, v1180, 8uLL).u64[0];
        v1913 = vextq_s8(v1253, v1253, 8uLL).u64[0];
        v1910 = vextq_s8(v1246, v1246, 8uLL).u64[0];
        v1911 = vextq_s8(v1247, v1247, 8uLL).u64[0];
        v1188 = vextq_s8(v1244, v1244, 8uLL).u64[0];
        v1997 = v1249.i64[0];
        v1994 = vextq_s8(v1249, v1249, 8uLL).u64[0];
        v1254.i64[0] = v1177.i64[0];
        v1187 = vextq_s8(v1177, v1177, 8uLL).u64[0];
        v1177.i64[0] = v1252.i64[0];
        goto LABEL_1095;
      }
      if (v1197 == -1)
        break;
      v1198 = *v1164 + 8 * v1197;
LABEL_1155:
      v1296 = (int8x16_t *)((char *)v1195 + 8 * v1194 + 8 * (_DWORD)v1196 * v1169);
      v1897 = v1296[4].i64[0];
      v1298 = v1296[2];
      v1297 = v1296[3];
      v1318 = *v1296;
      v1319 = v1296[1];
      v1299 = (int8x16_t *)((char *)v1296 + 8 * v1196);
      v1228 = v1299[2];
      v1183 = v1299[3];
      v1301 = *v1299;
      v1300 = v1299[1];
      v2016 = v1299[4].u64[0];
      v1302 = &v1296[v1196];
      v1304 = v1302[2];
      v1303 = v1302[3];
      v1305 = *v1302;
      v1306 = v1302[1];
      v2026 = v1302[4].i64[0];
      v1307 = (int8x16_t *)((char *)v1296 + 24 * v1196);
      v1234 = v1307[2];
      v1308 = v1307[3];
      v1310 = *v1307;
      v1309 = v1307[1];
      v1989 = v1307[4].u64[0];
      v1311 = &v1296[2 * v1196];
      v1312 = (int8x16_t *)((char *)v1296 + 40 * v1196);
      v1313 = &v1296[3 * v1196];
      v1314 = (int8x16_t *)((char *)v1296 + 56 * v1196);
      v1315 = &v1296[4 * v1196];
      v1985 = v1311[4].i64[0];
      v1980 = v1312[4].u64[0];
      v1316 = vextq_s8(v1297, v1297, 8uLL).u64[0];
      v1317 = vextq_s8(v1298, v1298, 8uLL).u64[0];
      v1963 = vextq_s8(v1183, v1183, 8uLL).u64[0];
      v1229.i64[0] = v1228.i64[0];
      v1957 = vextq_s8(v1228, v1228, 8uLL).u64[0];
      v1228.i64[0] = v1300.i64[0];
      v1949 = vextq_s8(v1300, v1300, 8uLL).u64[0];
      v2047 = v1301.i64[0];
      v1947 = vextq_s8(v1301, v1301, 8uLL).u64[0];
      v1907 = v1305.i64[0];
      v1909 = v1303.i64[0];
      v1955 = vextq_s8(v1303, v1303, 8uLL).u64[0];
      v1944 = vextq_s8(v1304, v1304, 8uLL).u64[0];
      v1905 = v1310.i64[0];
      v1906 = v1306.i64[0];
      v1941 = vextq_s8(v1306, v1306, 8uLL).u64[0];
      v1936 = vextq_s8(v1305, v1305, 8uLL).u64[0];
      v1896 = v1308.i64[0];
      v1938 = vextq_s8(v1308, v1308, 8uLL).u64[0];
      v1235.i64[0] = v1234.i64[0];
      v1932 = vextq_s8(v1234, v1234, 8uLL).u64[0];
      v1234.i64[0] = v1309.i64[0];
      v1930 = vextq_s8(v1309, v1309, 8uLL).u64[0];
      v1919 = vextq_s8(v1310, v1310, 8uLL).u64[0];
      v1242 = v1311[3];
      v1928 = vextq_s8(v1242, v1242, 8uLL).u64[0];
      v1238 = v1311[2];
      v1927 = vextq_s8(v1238, v1238, 8uLL).u64[0];
      v1237 = v1311[1];
      v1923 = vextq_s8(v1237, v1237, 8uLL).u64[0];
      v1902 = v1312[1];
      v1903 = *v1311;
      v1900 = vextq_s8(v1903, v1903, 8uLL).u64[0];
      v1901 = v1312[2];
      v1243 = v1312[3];
      v1925 = vextq_s8(v1243, v1243, 8uLL).u64[0];
      v1921 = vextq_s8(v1901, v1901, 8uLL).u64[0];
      v1917 = vextq_s8(v1902, v1902, 8uLL).u64[0];
      v1180 = *v1312;
      v1916 = vextq_s8(v1180, v1180, 8uLL).u64[0];
      v1182 = v1313[3];
      v1915 = vextq_s8(v1182, v1182, 8uLL).u64[0];
      v1904 = v1313[2];
      v1914 = vextq_s8(v1904, v1904, 8uLL).u64[0];
      v1253 = v1313[1];
      v1181 = *v1313;
      v1912 = vextq_s8(v1181, v1181, 8uLL).u64[0];
      v1913 = vextq_s8(v1253, v1253, 8uLL).u64[0];
      v1994 = v1314[4].u64[0];
      v1997 = v1313[4].i64[0];
      v1247 = v1314[3];
      v1911 = vextq_s8(v1247, v1247, 8uLL).u64[0];
      v1246 = v1314[2];
      v1910 = vextq_s8(v1246, v1246, 8uLL).u64[0];
      v1244 = v1314[1];
      v1899 = vextq_s8(v1244, v1244, 8uLL).u64[0];
      v1254 = *v1314;
      v1898 = vextq_s8(v1254, v1254, 8uLL).u64[0];
      v2006 = v1315[2];
      v1972 = vextq_s8(v2006, v2006, 8uLL).u64[0];
      v1976 = vextq_s8(v1315[3], v1315[3], 8uLL).u64[0];
      v1965 = vextq_s8(v1315[1], v1315[1], 8uLL).u64[0];
      v1968 = vextq_s8(*v1315, *v1315, 8uLL).u64[0];
      __dsta = v1315[4].i64[0];
      v1960 = v1315[3];
      v1952 = *v1315;
      v1934 = v1315[1];
      v1318.i64[1] = vextq_s8(v1318, v1318, 8uLL).u64[0];
      v1319.i64[1] = vextq_s8(v1319, v1319, 8uLL).u64[0];
      if (v1195 == (int8x16_t *)v1198)
      {
        *v1195 = v1318;
        v1195[1] = v1319;
        v1298.i64[1] = v1317;
        v1195[4].i64[0] = v1897;
        v1297.i64[1] = v1316;
        v1195[2] = v1298;
        v1195[3] = v1297;
        v1198 = (uint64_t)v1195;
      }
      else
      {
        v1298.i64[1] = v1317;
        *(int8x16_t *)v1198 = v1318;
        *(int8x16_t *)(v1198 + 16) = v1319;
        *(_QWORD *)(v1198 + 64) = v1897;
        v1297.i64[1] = v1316;
        *(int8x16_t *)(v1198 + 32) = v1298;
        *(int8x16_t *)(v1198 + 48) = v1297;
      }
      v1171.i64[0] = v2047;
      v1173.i64[0] = v1907;
      v1172.i64[0] = v1909;
      v1175.i64[0] = v1905;
      v1174.i64[0] = v1906;
      v1176.i64[0] = v1304.i64[0];
      v1177.i64[0] = v1904.i64[0];
      v1178.i64[0] = v1183.i64[0];
      v1179.i64[0] = v1180.i64[0];
      v1180.i64[0] = v1181.i64[0];
      v1181.i64[0] = v1182.i64[0];
      v1182.i64[0] = v1896;
      v1183.i64[0] = v1902.i64[0];
      v1184.i64[0] = v1903.i64[0];
      v1185 = v1900;
      v1186.i64[0] = v1901.i64[0];
      v1187 = v1898;
      v1188 = v1899;
LABEL_1095:
      v1175.i64[1] = v1919;
      v1184.i64[1] = v1185;
      v1254.i64[1] = v1187;
      v1229.i64[1] = v1957;
      v1228.i64[1] = v1949;
      v1171.i64[1] = v1947;
      v1178.i64[1] = v1963;
      v1176.i64[1] = v1944;
      v1174.i64[1] = v1941;
      v1173.i64[1] = v1936;
      v1172.i64[1] = v1955;
      v1235.i64[1] = v1932;
      v1234.i64[1] = v1930;
      v1182.i64[1] = v1938;
      v1237.i64[1] = v1923;
      v1238.i64[1] = v1927;
      v1242.i64[1] = v1928;
      v1183.i64[1] = v1917;
      v1179.i64[1] = v1916;
      v1186.i64[1] = v1921;
      v1243.i64[1] = v1925;
      v1253.i64[1] = v1913;
      v1180.i64[1] = v1912;
      v1177.i64[1] = v1914;
      v1181.i64[1] = v1915;
      v1244.i64[1] = v1188;
      v1246.i64[1] = v1910;
      v1247.i64[1] = v1911;
      *(_QWORD *)&v1189 = v1934.i64[0];
      *((_QWORD *)&v1189 + 1) = v1965;
      *(_QWORD *)&v1190 = v1952.i64[0];
      *((_QWORD *)&v1190 + 1) = v1968;
      *(_QWORD *)&v1191 = v2006.i64[0];
      *((_QWORD *)&v1191 + 1) = v1972;
      *(_QWORD *)&v1192 = v1960.i64[0];
      *((_QWORD *)&v1192 + 1) = v1976;
      *(int8x16_t *)(v1198 + 216) = v1175;
      v1193 = v1198 + 216;
      *(int8x16_t *)(v1193 + 72) = v1184;
      v1193 += 72;
      *(int8x16_t *)(v1193 + 216) = v1254;
      v1193 += 216;
      *(int8x16_t *)(v1193 - 256) = v1235;
      *(int8x16_t *)(v1193 - 240) = v1182;
      *(_QWORD *)(v1193 - 224) = v1989;
      *(int8x16_t *)(v1193 - 200) = v1237;
      *(int8x16_t *)(v1193 - 184) = v1238;
      *(int8x16_t *)(v1193 - 400) = v1229;
      *(int8x16_t *)(v1193 - 416) = v1228;
      *(int8x16_t *)(v1193 - 432) = v1171;
      *(_QWORD *)(v1193 - 368) = v2016;
      *(int8x16_t *)(v1193 - 384) = v1178;
      *(int8x16_t *)(v1193 - 328) = v1176;
      *(int8x16_t *)(v1193 - 344) = v1174;
      *(int8x16_t *)(v1193 - 360) = v1173;
      *(_QWORD *)(v1193 - 296) = v2026;
      *(int8x16_t *)(v1193 - 312) = v1172;
      *(int8x16_t *)(v1193 - 272) = v1234;
      *(_QWORD *)(v1193 - 152) = v1985;
      *(int8x16_t *)(v1193 - 168) = v1242;
      *(int8x16_t *)(v1193 - 144) = v1179;
      *(int8x16_t *)(v1193 - 128) = v1183;
      *(_QWORD *)(v1193 - 80) = v1980;
      *(int8x16_t *)(v1193 - 112) = v1186;
      *(int8x16_t *)(v1193 - 96) = v1243;
      *(int8x16_t *)(v1193 - 56) = v1253;
      *(int8x16_t *)(v1193 - 72) = v1180;
      *(int8x16_t *)(v1193 - 40) = v1177;
      *(_QWORD *)(v1193 - 8) = v1997;
      *(int8x16_t *)(v1193 - 24) = v1181;
      *(int8x16_t *)(v1193 + 16) = v1244;
      *(int8x16_t *)(v1193 + 32) = v1246;
      *(_QWORD *)(v1193 + 64) = v1994;
      *(int8x16_t *)(v1193 + 48) = v1247;
      *(_OWORD *)(v1193 + 88) = v1189;
      *(_OWORD *)(v1193 + 72) = v1190;
      *(_OWORD *)(v1193 + 104) = v1191;
      *(_QWORD *)(v1193 + 136) = __dsta;
      ++v1168;
      *(_OWORD *)(v1193 + 120) = v1192;
      if (v1168 == v1167)
      {
        v1162 = *(unsigned int *)(v7 + 4708);
        v1165 = v1887;
        goto LABEL_1087;
      }
    }
    v1204 = *(_QWORD *)(v7 + 4776);
    if (v1204)
    {
      v1205 = *(_QWORD *)(v7 + 4744);
      v1206 = *(_QWORD *)(v7 + 4752);
      v1207 = ((v1206 - v1205) << 6) - 1;
      v1208 = *(_QWORD *)(v7 + 4768);
      if (v1206 == v1205)
        v1207 = 0;
      v1198 = *(_QWORD *)(v7 + 4712)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v1205 + (((unint64_t)(v1208 + v1204 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v1208 + v1204 - 1) & 0x1FF));
      *(_QWORD *)(v7 + 4776) = v1204 - 1;
      if ((unint64_t)(v1207 - (v1204 + v1208) + 1) >= 0x400)
      {
        operator delete(*(void **)(v1206 - 8));
        v1170 = v1890;
        v1167 = v1891;
        v1164 = v1894;
        *(_QWORD *)(v7 + 4752) -= 8;
      }
      goto LABEL_1154;
    }
    v1255 = *(char **)(v7 + 4720);
    v1256 = *(_QWORD *)(v7 + 4712);
    v1257 = (int64_t)&v1255[-v1256];
    v1258 = (uint64_t)&v1255[-v1256] >> 3;
    v1259 = (_BYTE *)(v1256 + ((unint64_t)&v1255[-v1256] & 0xFFFFFFFFFFFFFFF8));
    v1260 = *(_QWORD *)(v7 + 4728);
    if ((unint64_t)(v1260 - (_QWORD)v1255) < 0x288)
    {
      v1261 = v1258 + 81;
      if ((unint64_t)(v1258 + 81) >> 61)
        goto LABEL_1529;
      v1262 = v1260 - v1256;
      if (v1262 >> 2 > v1261)
        v1261 = v1262 >> 2;
      if ((unint64_t)v1262 >= 0x7FFFFFFFFFFFFFF8)
        v1261 = 0x1FFFFFFFFFFFFFFFLL;
      v2035 = v1261;
      if (v1261)
      {
        if (v1261 >> 61)
          goto LABEL_1530;
        v1263 = (char *)operator new(8 * v1261);
        v1258 = (uint64_t)&v1255[-v1256] >> 3;
      }
      else
      {
        v1263 = 0;
      }
      v2027 = v1258;
      v2046 = v1263;
      v1274 = &v1263[8 * v1258];
      bzero(v1274, 0x288uLL);
      if ((char *)v1256 == v1255)
      {
        v1277 = v1274;
        v1170 = v1890;
        v1167 = v1891;
      }
      else
      {
        v1275 = v1257 - 8;
        if ((unint64_t)(v1257 - 8) >= 0x68)
        {
          v1278 = v1256 + (v1257 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v2046[v1257 & 0xFFFFFFFFFFFFFFF8];
          v1276 = (char *)(v1256 + ((unint64_t)&v1255[-v1256] & 0xFFFFFFFFFFFFFFF8));
          v1277 = v1274;
          v1170 = v1890;
          v1167 = v1891;
          if (v1278 >= 0x20)
          {
            v1279 = (v1275 >> 3) + 1;
            v1280 = 8 * (v1279 & 0x3FFFFFFFFFFFFFFCLL);
            v1276 = &v1259[-v1280];
            v1277 = &v1274[-v1280];
            v1281 = &v2046[8 * v2027 - 16];
            v1282 = (__int128 *)(v1256 + 8 * v2027 - 16);
            v1283 = v1279 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1284 = *v1282;
              *((_OWORD *)v1281 - 1) = *(v1282 - 1);
              *(_OWORD *)v1281 = v1284;
              v1281 -= 32;
              v1282 -= 2;
              v1283 -= 4;
            }
            while (v1283);
            if (v1279 == (v1279 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1142;
          }
        }
        else
        {
          v1276 = (char *)(v1256 + ((unint64_t)&v1255[-v1256] & 0xFFFFFFFFFFFFFFF8));
          v1277 = v1274;
          v1170 = v1890;
          v1167 = v1891;
        }
        do
        {
          v1285 = *((_QWORD *)v1276 - 1);
          v1276 -= 8;
          *((_QWORD *)v1277 - 1) = v1285;
          v1277 -= 8;
        }
        while (v1276 != (char *)v1256);
      }
LABEL_1142:
      v1286 = v1274 + 648;
      v1287 = v1255 - v1259;
      if (v1287)
      {
        memmove(v1286, v1259, v1287);
        v1170 = v1890;
        v1167 = v1891;
      }
      v1892[589] = v1277;
      v1288 = &v1286[v1287];
      v7 = (uint64_t)v1892;
      v1892[590] = v1288;
      v1892[591] = &v2046[8 * v2035];
      if (v1256)
      {
        operator delete((void *)v1256);
        v1170 = v1890;
        v1167 = v1891;
      }
      goto LABEL_1153;
    }
    v1264 = v1255 - v1259;
    if ((unint64_t)(v1255 - v1259) > 0x287)
    {
      v1266 = *(char **)(v7 + 4720);
      v2045 = 81;
    }
    else
    {
      v2045 = v1264 >> 3;
      v1265 = 81 - (v1264 >> 3);
      bzero(v1255, 648 - (v1264 & 0xFFFFFFFFFFFFFFF8));
      v1170 = v1890;
      v1167 = v1891;
      v1266 = &v1255[8 * v1265];
      v7 = (uint64_t)v1892;
      v1892[590] = v1266;
      if (v1255 == v1259)
      {
LABEL_1153:
        v1198 = *(_QWORD *)(v7 + 4720) - 648;
        v65 = v2010;
        v1161 = v1886 + 33;
        v1164 = v1894;
        v1163 = v1888;
LABEL_1154:
        *(_QWORD *)(v1170 + 8 * v1168) = (v1198 - *(_QWORD *)(v7 + 4712)) >> 3;
        ++*(_QWORD *)(*(_QWORD *)(v7 + 4816) + 8 * v1163);
        goto LABEL_1155;
      }
      v1258 = (uint64_t)&v1255[-v1256] >> 3;
    }
    v1267 = v1266 - (v1259 + 648);
    v1268 = v1267 >> 3;
    v1269 = v1266 - 648;
    v1270 = v1266;
    if (v1266 - 648 < v1255)
    {
      v1271 = (v1257 & 0xFFFFFFFFFFFFFFF8) + v1267;
      v1272 = v1256 + v1271 + 8;
      if ((unint64_t)v1255 > v1272)
        v1272 = (unint64_t)v1255;
      v1273 = v1272 + ~v1256 - v1271;
      if (v1273 >= 0x58)
      {
        v1289 = (v1273 >> 3) + 1;
        v1290 = 8 * (v1289 & 0x3FFFFFFFFFFFFFFCLL);
        v1269 += v1290;
        v1270 = &v1266[v1290];
        v1291 = v1266 + 16;
        v1292 = (__int128 *)(v1256 + 8 * v1268 + 8 * v1258 + 16);
        v1293 = v1289 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1294 = *v1292;
          *(v1291 - 1) = *(v1292 - 1);
          *v1291 = v1294;
          v1291 += 2;
          v1292 += 2;
          v1293 -= 4;
        }
        while (v1293);
        if (v1289 == (v1289 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1150;
      }
      else
      {
        v1270 = v1266;
      }
      do
      {
        v1295 = *(_QWORD *)v1269;
        v1269 += 8;
        *(_QWORD *)v1270 = v1295;
        v1270 += 8;
      }
      while (v1269 < v1255);
    }
LABEL_1150:
    *(_QWORD *)(v7 + 4720) = v1270;
    if (v1266 != v1259 + 648)
      memmove(&v1266[-8 * v1268], (const void *)(v1256 + ((unint64_t)&v1255[-v1256] & 0xFFFFFFFFFFFFFFF8)), v1267);
    bzero((void *)(v1256 + ((unint64_t)&v1255[-v1256] & 0xFFFFFFFFFFFFFFF8)), 8 * v2045);
    v1170 = v1890;
    v1167 = v1891;
    goto LABEL_1153;
  }
LABEL_1157:
  sub_20FA241FC(v7 + 6136, v65, v1161, v1879, 1);
  sub_20FA241FC(v7 + 7576, v65, v1161, v1880, 1);
  sub_20FA24D2C(v7 + 9016, v65, v1161, v1881, 1);
  v1320 = *(unsigned int *)(v7 + 10468);
  v1321 = v1886 + 45;
  if ((_DWORD)v1320 && *(_DWORD *)(v7 + 10464))
  {
    v2048 = 0;
    v1322 = (unint64_t *)(v7 + 10472);
    v1895 = (unint64_t *)(v7 + 10472);
    while (1)
    {
      v1323 = *(unsigned int *)(v7 + 10464);
      if ((_DWORD)v1323)
        break;
LABEL_1161:
      if (++v2048 >= v1320)
        goto LABEL_1230;
    }
    v1324 = 0;
    v1325 = *(_DWORD *)(*v1321 + 4 * v2048);
    v1326 = *(_QWORD *)(v7 + 10544) + 8 * (*(_DWORD *)(v7 + 10568) * v2048);
    v2036 = *(unsigned int *)(v7 + 10464);
    v2028 = v1326;
    while (1)
    {
      while (1)
      {
        v1327 = *(_DWORD *)(*v1161 + 4 * v1324);
        v1328 = *(int8x16_t **)v65;
        v1329 = *(unsigned int *)(v65 + 16);
        v1330 = *(_QWORD *)(v1326 + 8 * v1324);
        if (v1327 <= v1325)
          break;
        if (v1330 == -1)
        {
          v1333 = *(_QWORD *)(v7 + 10536);
          if (v1333)
          {
            v1334 = *(_QWORD *)(v7 + 10504);
            v1335 = *(_QWORD *)(v7 + 10512);
            v1336 = ((v1335 - v1334) << 6) - 1;
            v1337 = *(_QWORD *)(v7 + 10528);
            if (v1335 == v1334)
              v1336 = 0;
            v1331 = *(_QWORD *)(v7 + 10472)
                  + 8
                  * *(_QWORD *)(*(_QWORD *)(v1334 + (((unint64_t)(v1337 + v1333 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((v1337 + v1333 - 1) & 0x1FF));
            *(_QWORD *)(v7 + 10536) = v1333 - 1;
            if ((unint64_t)(v1336 - (v1333 + v1337) + 1) >= 0x400)
            {
              operator delete(*(void **)(v1335 - 8));
              v1323 = v2036;
              v1322 = v1895;
              *(_QWORD *)(v7 + 10512) -= 8;
            }
          }
          else
          {
            v1344 = *(void **)(v7 + 10480);
            __p[0] = 0;
            sub_20F1C5A3C(v1322, v1344, 9uLL, (uint64_t *)__p);
            v1331 = *(_QWORD *)(v7 + 10480) - 72;
            v65 = v2010;
            v1161 = v1886 + 33;
            v1322 = v1895;
            v1323 = v2036;
            v1326 = v2028;
          }
          *(_QWORD *)(v1326 + 8 * v1324) = (v1331 - *(_QWORD *)(v7 + 10472)) >> 3;
          ++*(_QWORD *)(*(_QWORD *)(v7 + 10576) + 8 * v2048);
        }
        else
        {
          v1331 = *v1322 + 8 * v1330;
        }
        v1345 = &v1328->i64[v1325 + (_DWORD)v1329 * v1327];
        *(_QWORD *)&v1346 = v1345[2 * v1329];
        *(_QWORD *)&v1347 = v1345[4 * v1329];
        *(_QWORD *)&v1348 = v1345[6 * v1329];
        *(_QWORD *)&v1349 = *v1345;
        *((_QWORD *)&v1346 + 1) = v1345[3 * v1329];
        *((_QWORD *)&v1347 + 1) = v1345[5 * v1329];
        *((_QWORD *)&v1348 + 1) = v1345[7 * v1329];
        *((_QWORD *)&v1349 + 1) = v1345[v1329];
        *(_QWORD *)(v1331 + 64) = v1345[8 * v1329];
        *(_OWORD *)(v1331 + 32) = v1347;
        *(_OWORD *)(v1331 + 48) = v1348;
        *(_OWORD *)v1331 = v1349;
        *(_OWORD *)(v1331 + 16) = v1346;
        if (++v1324 == v1323)
        {
LABEL_1160:
          v1320 = *(unsigned int *)(v7 + 10468);
          v1321 = v1886 + 45;
          goto LABEL_1161;
        }
      }
      if (v1330 == -1)
        break;
      v1332 = *v1322 + 8 * v1330;
LABEL_1227:
      v1391 = (int8x16_t *)((char *)v1328 + 8 * v1327 + 8 * (_DWORD)v1329 * v1325);
      v1392 = v1391[4].i64[0];
      v1397 = v1391[2];
      v1393 = v1391[3];
      v1395 = *v1391;
      v1396 = v1391[1];
      v1394 = vextq_s8(v1393, v1393, 8uLL).u64[0];
      v1395.i64[1] = vextq_s8(v1395, v1395, 8uLL).u64[0];
      v1396.i64[1] = vextq_s8(v1396, v1396, 8uLL).u64[0];
      v1397.i64[1] = vextq_s8(v1397, v1397, 8uLL).u64[0];
      if (v1328 == (int8x16_t *)v1332)
      {
        *v1328 = v1395;
        v1328[1] = v1396;
        v1328[4].i64[0] = v1392;
        v1393.i64[1] = v1394;
        v1328[2] = v1397;
        v1328[3] = v1393;
        v7 = (uint64_t)v1892;
        if (++v1324 == v1323)
          goto LABEL_1160;
      }
      else
      {
        *(int8x16_t *)v1332 = v1395;
        *(int8x16_t *)(v1332 + 16) = v1396;
        *(_QWORD *)(v1332 + 64) = v1392;
        v1393.i64[1] = v1394;
        *(int8x16_t *)(v1332 + 32) = v1397;
        *(int8x16_t *)(v1332 + 48) = v1393;
        v7 = (uint64_t)v1892;
        if (++v1324 == v1323)
          goto LABEL_1160;
      }
    }
    v1338 = *(_QWORD *)(v7 + 10536);
    if (v1338)
    {
      v1339 = *(_QWORD *)(v7 + 10504);
      v1340 = *(_QWORD *)(v7 + 10512);
      v1341 = ((v1340 - v1339) << 6) - 1;
      v1342 = *(_QWORD *)(v7 + 10528);
      if (v1340 == v1339)
        v1341 = 0;
      v1343 = (_QWORD *)v7;
      v1332 = *(_QWORD *)(v7 + 10472)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v1339 + (((unint64_t)(v1342 + v1338 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v1342 + v1338 - 1) & 0x1FF));
      v1343[1317] = v1338 - 1;
      if ((unint64_t)(v1341 - (v1338 + v1342) + 1) >= 0x400)
      {
        operator delete(*(void **)(v1340 - 8));
        v1323 = v2036;
        v1322 = v1895;
        v1343[1314] -= 8;
      }
      goto LABEL_1226;
    }
    v1350 = *(char **)(v7 + 10480);
    v1351 = *(_QWORD *)(v7 + 10472);
    v1352 = (int64_t)&v1350[-v1351];
    v1353 = (uint64_t)&v1350[-v1351] >> 3;
    v1354 = (char *)(v1351 + ((unint64_t)&v1350[-v1351] & 0xFFFFFFFFFFFFFFF8));
    v1355 = *(_QWORD *)(v7 + 10488);
    if ((unint64_t)(v1355 - (_QWORD)v1350) < 0x48)
    {
      v1356 = v1353 + 9;
      if ((unint64_t)(v1353 + 9) >> 61)
        goto LABEL_1529;
      v1357 = v1355 - v1351;
      if (v1357 >> 2 > v1356)
        v1356 = v1357 >> 2;
      if ((unint64_t)v1357 >= 0x7FFFFFFFFFFFFFF8)
        v1356 = 0x1FFFFFFFFFFFFFFFLL;
      v2017 = v1356;
      if (v1356)
      {
        if (v1356 >> 61)
          goto LABEL_1530;
        v1358 = operator new(8 * v1356);
        v1323 = v2036;
        v1354 = (char *)(v1351 + ((unint64_t)&v1350[-v1351] & 0xFFFFFFFFFFFFFFF8));
        v1353 = (uint64_t)&v1350[-v1351] >> 3;
        v1352 = (int64_t)&v1350[-v1351];
      }
      else
      {
        v1358 = 0;
      }
      v1370 = &v1358[8 * v1353];
      *((_QWORD *)v1370 + 8) = 0;
      *((_OWORD *)v1370 + 2) = 0u;
      *((_OWORD *)v1370 + 3) = 0u;
      *(_OWORD *)v1370 = 0u;
      *((_OWORD *)v1370 + 1) = 0u;
      if ((char *)v1351 == v1350)
      {
        v1372 = &v1358[8 * v1353];
        v1326 = v2028;
      }
      else
      {
        v1326 = v2028;
        if ((unint64_t)(v1352 - 8) >= 0x68)
        {
          v1371 = v1354;
          v1372 = &v1358[8 * v1353];
          if (v1351 + (v1352 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v1358[v1352 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v1373 = ((unint64_t)(v1352 - 8) >> 3) + 1;
            v1374 = 8 * (v1373 & 0x3FFFFFFFFFFFFFFCLL);
            v1371 = &v1354[-v1374];
            v1372 = &v1370[-v1374];
            v1375 = &v1358[8 * v1353 - 16];
            v1376 = (__int128 *)(v1351 + 8 * v1353 - 16);
            v1377 = v1373 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1378 = *v1376;
              *(v1375 - 1) = *(v1376 - 1);
              *v1375 = v1378;
              v1375 -= 2;
              v1376 -= 2;
              v1377 -= 4;
            }
            while (v1377);
            if (v1373 == (v1373 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1212;
          }
        }
        else
        {
          v1371 = v1354;
          v1372 = &v1358[8 * v1353];
        }
        do
        {
          v1379 = *((_QWORD *)v1371 - 1);
          v1371 -= 8;
          *((_QWORD *)v1372 - 1) = v1379;
          v1372 -= 8;
        }
        while (v1371 != (char *)v1351);
      }
LABEL_1212:
      v1380 = v1370 + 72;
      v1381 = v1350 - v1354;
      if (v1381)
      {
        v2007 = v1358;
        memmove(v1370 + 72, v1354, v1381);
        v1358 = v2007;
        v1323 = v2036;
      }
      v1892[1309] = v1372;
      v1892[1310] = &v1380[v1381];
      v1892[1311] = &v1358[8 * v2017];
      if (!v1351)
        goto LABEL_1225;
      operator delete((void *)v1351);
      goto LABEL_1224;
    }
    v1359 = v1350 - v1354;
    if ((unint64_t)(v1350 - v1354) > 0x47)
    {
      v1361 = *(char **)(v7 + 10480);
      v1360 = 9;
    }
    else
    {
      v1360 = v1359 >> 3;
      v2018 = 9 - (v1359 >> 3);
      bzero(v1350, 72 - (v1359 & 0xFFFFFFFFFFFFFFF8));
      v1323 = v2036;
      v1361 = &v1350[8 * v2018];
      v1892[1310] = v1361;
      if (v1350 == (char *)(v1351 + ((unint64_t)&v1350[-v1351] & 0xFFFFFFFFFFFFFFF8)))
      {
LABEL_1225:
        v1343 = v1892;
        v1322 = v1895;
        v1332 = v1892[1310] - 72;
        v65 = v2010;
        v1161 = v1886 + 33;
LABEL_1226:
        *(_QWORD *)(v1326 + 8 * v1324) = (v1332 - v1343[1309]) >> 3;
        ++*(_QWORD *)(v1343[1322] + 8 * v2048);
        goto LABEL_1227;
      }
      v1354 = (char *)(v1351 + ((unint64_t)&v1350[-v1351] & 0xFFFFFFFFFFFFFFF8));
      v1353 = (uint64_t)&v1350[-v1351] >> 3;
      v1352 = (int64_t)&v1350[-v1351];
    }
    v1362 = v1361 - (v1354 + 72);
    v1363 = v1362 >> 3;
    v1364 = v1361 - 72;
    v1365 = v1361;
    if (v1361 - 72 < v1350)
    {
      v1366 = v1352 & 0xFFFFFFFFFFFFFFF8;
      v1367 = (v1352 & 0xFFFFFFFFFFFFFFF8) + v1362;
      v1368 = v1351 + v1367 + 8;
      if ((unint64_t)v1350 > v1368)
        v1368 = (unint64_t)v1350;
      v1369 = v1368 + ~v1351 - v1367;
      if (v1369 >= 0x58)
      {
        v1382 = (unint64_t)&v1354[-v1366 + 72 - v1351];
        v1365 = v1361;
        if (v1382 >= 0x20)
        {
          v1383 = (v1369 >> 3) + 1;
          v1384 = 8 * (v1383 & 0x3FFFFFFFFFFFFFFCLL);
          v1364 += v1384;
          v1365 = &v1361[v1384];
          v1385 = v1361 + 16;
          v1386 = (__int128 *)(v1351 + 8 * v1363 + 8 * v1353 + 16);
          v1387 = v1383 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1388 = *v1386;
            *(v1385 - 1) = *(v1386 - 1);
            *v1385 = v1388;
            v1385 += 2;
            v1386 += 2;
            v1387 -= 4;
          }
          while (v1387);
          if (v1383 == (v1383 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_1221;
        }
      }
      else
      {
        v1365 = v1361;
      }
      do
      {
        v1389 = *(_QWORD *)v1364;
        v1364 += 8;
        *(_QWORD *)v1365 = v1389;
        v1365 += 8;
      }
      while (v1364 < v1350);
    }
LABEL_1221:
    v1892[1310] = v1365;
    if (v1361 != v1354 + 72)
    {
      v1390 = v1354;
      memmove(&v1361[-8 * v1363], v1354, v1362);
      v1354 = v1390;
    }
    bzero(v1354, 8 * v1360);
LABEL_1224:
    v1323 = v2036;
    goto LABEL_1225;
  }
LABEL_1230:
  sub_20FA255C8(v7 + 11896, v65, v1161, v1882, 1);
  sub_20FA255C8(v7 + 13336, v65, v1161, v1883, 1);
  sub_20FA24D2C(v7 + 14776, v65, v1161, v1884, 1);
  sub_20FA24D2C(v7 + 16216, v65, v1161, v1885, 1);
  sub_20FA21588(v1878, v65, v1886 + 30, v1886 + 30, 1u, 1);
  sub_20FA21F14(v7 + 4552, v65, v1886 + 30, v1161, 1);
  sub_20FA21588(v7 + 5992, v65, v1886 + 30, v1879, 0, 1);
  sub_20FA21588(v7 + 7432, v65, v1886 + 30, v1880, 0, 1);
  sub_20FA22A24(v7 + 8872, v65, v1886 + 30, v1881, 1);
  sub_20FA2321C(v7 + 10312, v65, v1886 + 30, v1889, 1);
  sub_20FA23994(v7 + 11752, v65, v1886 + 30, v1882, 1);
  sub_20FA23994(v7 + 13192, v65, v1886 + 30, v1883, 1);
  sub_20FA22A24(v7 + 14632, v65, v1886 + 30, v1884, 1);
  sub_20FA22A24(v7 + 16072, v65, v1886 + 30, v1885, 1);
  v1398 = *(_QWORD *)(v65 + 96);
  v1399 = (double *)(v1398 + 355640);
  v1400 = *(double **)(v65 + 48);
  v1401 = v1876;
  if (v1876 != *(_DWORD *)(v65 + 64))
  {
    if (v1399 == v1400)
    {
      v1442 = (float64x2_t *)operator new((8 * v1876 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      if (v1876)
      {
        v1443 = (v1876 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v1444 = (double *)v1442;
        v1445 = (double *)(v1398 + 355640);
        if (v1443 < 5)
          goto LABEL_1539;
        v1444 = (double *)v1442;
        v1445 = (double *)(v1398 + 355640);
        if ((unint64_t)&v1442[-22227] - v1398 - 8 < 0x20)
          goto LABEL_1539;
        v1446 = v1443 + 1;
        v1447 = v1446 & 0x3FFFFFFFFFFFFFFCLL;
        v1444 = &v1442->f64[v1447];
        v1445 = &v1399[v1447];
        v1448 = (float64x2_t *)(v1398 + 355656);
        v1449 = v1442 + 1;
        v1450 = v1446 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1451 = vnegq_f64(*v1448);
          v1449[-1] = vnegq_f64(v1448[-1]);
          *v1449 = v1451;
          v1448 += 2;
          v1449 += 2;
          v1450 -= 4;
        }
        while (v1450);
        if (v1446 != (v1446 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1539:
          do
          {
            v1452 = *v1445++;
            *v1444++ = -v1452;
          }
          while (v1444 != &v1442->f64[v1876]);
        }
      }
      *(_QWORD *)(v65 + 48) = v1442;
      *(_QWORD *)(v65 + 56) = ((8 * v1876 + 31) & 0xFFFFFFFE0uLL) >> 3;
      *(_DWORD *)(v65 + 64) = v1876;
      goto LABEL_1272;
    }
    *(_DWORD *)(v65 + 64) = v1876;
    if (*(_QWORD *)(v65 + 56) < (unint64_t)v1876)
    {
      if (v1400)
        MEMORY[0x212BC6368](v1400, 0x1000C8000313F17);
      v1402 = (8 * v1876 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(v65 + 48) = 0;
      *(_QWORD *)(v65 + 56) = v1402 >> 3;
      v1400 = (double *)operator new(v1402, (std::align_val_t)0x20uLL);
      *(_QWORD *)(v65 + 48) = v1400;
      v1401 = *(_DWORD *)(v65 + 64);
    }
  }
  v1403 = v1401;
  if (v1399 == v1400)
  {
    v1407 = (8 * v1401 + 31) & 0xFFFFFFFE0;
    v1408 = (float64x2_t *)operator new(v1407, (std::align_val_t)0x20uLL);
    if ((_DWORD)v1403)
    {
      v1409 = (v1403 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v1410 = (double *)v1408;
      v1411 = (double *)(v1398 + 355640);
      if (v1409 < 5)
        goto LABEL_1540;
      v1410 = (double *)v1408;
      v1411 = (double *)(v1398 + 355640);
      if ((unint64_t)&v1408[-22227] - v1398 - 8 < 0x20)
        goto LABEL_1540;
      v1412 = v1409 + 1;
      v1413 = v1412 & 0x3FFFFFFFFFFFFFFCLL;
      v1410 = &v1408->f64[v1413];
      v1411 = &v1399[v1413];
      v1414 = (float64x2_t *)(v1398 + 355656);
      v1415 = v1408 + 1;
      v1416 = v1412 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1417 = vnegq_f64(*v1414);
        v1415[-1] = vnegq_f64(v1414[-1]);
        *v1415 = v1417;
        v1414 += 2;
        v1415 += 2;
        v1416 -= 4;
      }
      while (v1416);
      if (v1412 != (v1412 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1540:
        do
        {
          v1418 = *v1411++;
          *v1410++ = -v1418;
        }
        while (v1410 != &v1408->f64[v1403]);
      }
    }
    *(_QWORD *)(v65 + 48) = v1408;
    *(_QWORD *)(v65 + 56) = v1407 >> 3;
LABEL_1272:
    v1404 = v1886 + 57;
    MEMORY[0x212BC6368](v1398 + 355640, 0x1000C8000313F17);
    goto LABEL_1343;
  }
  v1404 = v1886 + 57;
  if (v1401)
  {
    v1405 = (v1401 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v1405 >= 5)
    {
      v1406 = v1400;
      if ((unint64_t)v1400 - v1398 - 355640 >= 0x20)
      {
        v1575 = v1405 + 1;
        v1576 = v1575 & 0x3FFFFFFFFFFFFFFCLL;
        v1406 = &v1400[v1576];
        v1577 = &v1399[v1576];
        v1578 = (float64x2_t *)(v1398 + 355656);
        v1579 = (float64x2_t *)(v1400 + 2);
        v1580 = v1575 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1581 = vnegq_f64(*v1578);
          v1579[-1] = vnegq_f64(v1578[-1]);
          *v1579 = v1581;
          v1578 += 2;
          v1579 += 2;
          v1580 -= 4;
        }
        while (v1580);
        v1399 = v1577;
        if (v1575 == (v1575 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1343;
      }
    }
    else
    {
      v1406 = v1400;
    }
    do
    {
      v1582 = *v1399++;
      *v1406++ = -v1582;
    }
    while (v1406 != &v1400[v1403]);
  }
LABEL_1343:
  v1583 = *(unsigned int *)(v7 + 3032);
  if ((_DWORD)v1583)
  {
    v1584 = 0;
    v1585 = *(_DWORD *)(v7 + 3072);
    v1586 = 4 * v1583;
    do
    {
      v1587 = (__int128 *)(*(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(v1886[30] + v1584));
      v1588 = (_OWORD *)(*v1877 + 8 * v1585);
      v1589 = v1587[2];
      v1590 = *v1587;
      v1588[1] = v1587[1];
      v1588[2] = v1589;
      *v1588 = v1590;
      v1584 += 4;
      v1585 += 6;
    }
    while (v1586 != v1584);
  }
  v1591 = *(unsigned int *)(v7 + 3036);
  if ((_DWORD)v1591)
  {
    v1592 = 0;
    v1593 = *(_DWORD *)(v7 + 3076);
    v1594 = 4 * v1591;
    do
    {
      v1595 = *(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1161 + v1592);
      v1596 = *v1877 + 8 * v1593;
      v1597 = *(_QWORD *)(v1595 + 64);
      v1598 = *(_OWORD *)(v1595 + 48);
      v1599 = *(_OWORD *)v1595;
      v1600 = *(_OWORD *)(v1595 + 16);
      *(_OWORD *)(v1596 + 32) = *(_OWORD *)(v1595 + 32);
      *(_OWORD *)(v1596 + 48) = v1598;
      *(_QWORD *)(v1596 + 64) = v1597;
      *(_OWORD *)v1596 = v1599;
      *(_OWORD *)(v1596 + 16) = v1600;
      v1592 += 4;
      v1593 += 9;
    }
    while (v1594 != v1592);
  }
  v1601 = *(unsigned int *)(v7 + 3040);
  if ((_DWORD)v1601)
  {
    v1602 = 0;
    v1603 = *(_DWORD *)(v7 + 3080);
    v1604 = 4 * v1601;
    do
    {
      v1605 = (__int128 *)(*(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1879 + v1602));
      v1606 = (_OWORD *)(*v1877 + 8 * v1603);
      v1607 = v1605[2];
      v1608 = *v1605;
      v1606[1] = v1605[1];
      v1606[2] = v1607;
      *v1606 = v1608;
      v1602 += 4;
      v1603 += 6;
    }
    while (v1604 != v1602);
  }
  v1609 = *(unsigned int *)(v7 + 3044);
  if ((_DWORD)v1609)
  {
    v1610 = 0;
    v1611 = *(_DWORD *)(v7 + 3084);
    v1612 = 4 * v1609;
    do
    {
      v1613 = (__int128 *)(*(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1880 + v1610));
      v1614 = (_OWORD *)(*v1877 + 8 * v1611);
      v1615 = v1613[2];
      v1616 = *v1613;
      v1614[1] = v1613[1];
      v1614[2] = v1615;
      *v1614 = v1616;
      v1610 += 4;
      v1611 += 6;
    }
    while (v1612 != v1610);
  }
  v1617 = *(unsigned int *)(v7 + 3048);
  if ((_DWORD)v1617)
  {
    v1618 = 0;
    v1619 = *(_DWORD *)(v7 + 3088);
    v1620 = 4 * v1617;
    do
    {
      v1621 = *(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1881 + v1618);
      v1622 = *v1877 + 8 * v1619;
      v1623 = *(_OWORD *)v1621;
      *(_QWORD *)(v1622 + 16) = *(_QWORD *)(v1621 + 16);
      *(_OWORD *)v1622 = v1623;
      v1618 += 4;
      v1619 += 3;
    }
    while (v1620 != v1618);
  }
  v1624 = *(unsigned int *)(v7 + 3052);
  if ((_DWORD)v1624)
  {
    v1625 = 0;
    v1626 = *(_DWORD *)(v7 + 3092);
    do
    {
      *(_QWORD *)(*v1877 + 8 * (v1626 + v1625)) = *(_QWORD *)(*(_QWORD *)(v65 + 48)
                                                                            + 8
                                                                            * *(unsigned int *)(*v1889 + 4 * v1625));
      ++v1625;
    }
    while (v1624 != v1625);
  }
  v1627 = *(unsigned int *)(v7 + 3056);
  if ((_DWORD)v1627)
  {
    v1628 = 0;
    v1629 = *(_DWORD *)(v7 + 3096);
    v1630 = 4 * v1627;
    do
    {
      v1631 = (_OWORD *)(*(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1882 + v1628));
      v1632 = (_OWORD *)(*v1877 + 8 * (v1629 + v1628));
      v1633 = v1631[1];
      *v1632 = *v1631;
      v1632[1] = v1633;
      v1628 += 4;
    }
    while (v1630 != v1628);
  }
  v1634 = *(unsigned int *)(v7 + 3060);
  if ((_DWORD)v1634)
  {
    v1635 = 0;
    v1636 = *(_DWORD *)(v7 + 3100);
    v1637 = 4 * v1634;
    do
    {
      v1638 = (_OWORD *)(*(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1883 + v1635));
      v1639 = (_OWORD *)(*v1877 + 8 * (v1636 + v1635));
      v1640 = v1638[1];
      *v1639 = *v1638;
      v1639[1] = v1640;
      v1635 += 4;
    }
    while (v1637 != v1635);
  }
  v1641 = *(unsigned int *)(v7 + 3064);
  if ((_DWORD)v1641)
  {
    v1642 = 0;
    v1643 = *(_DWORD *)(v7 + 3104);
    v1644 = 4 * v1641;
    do
    {
      v1645 = *(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1884 + v1642);
      v1646 = *v1877 + 8 * v1643;
      v1647 = *(_OWORD *)v1645;
      *(_QWORD *)(v1646 + 16) = *(_QWORD *)(v1645 + 16);
      *(_OWORD *)v1646 = v1647;
      v1642 += 4;
      v1643 += 3;
    }
    while (v1644 != v1642);
  }
  v1648 = *(unsigned int *)(v7 + 3068);
  if ((_DWORD)v1648)
  {
    v1649 = 0;
    v1650 = *(_DWORD *)(v7 + 3108);
    v1651 = 4 * v1648;
    do
    {
      v1652 = *(_QWORD *)(v65 + 48) + 8 * *(unsigned int *)(*v1404 + v1649);
      v1653 = *v1877 + 8 * v1650;
      v1654 = *(_OWORD *)v1652;
      *(_QWORD *)(v1653 + 16) = *(_QWORD *)(v1652 + 16);
      *(_OWORD *)v1653 = v1654;
      v1649 += 4;
      v1650 += 3;
    }
    while (v1651 != v1649);
  }
  v797 = 0;
  *(_WORD *)(v7 + 2969) = 1;
LABEL_1297:
  kdebug_trace();
  return v797;
}

void sub_20F8BBE0C(_Unwind_Exception *a1)
{
  unint64_t v2;
  float64x2_t v3;
  float64x2_t v4;

  v2 = STACK[0x3E0];
  v3 = vaddq_f64(*(float64x2_t *)(STACK[0x3E0] + 44272), (float64x2_t)0);
  *(float64x2_t *)(v2 + 44256) = vaddq_f64(*(float64x2_t *)(STACK[0x3E0] + 44256), (float64x2_t)0);
  *(float64x2_t *)(v2 + 44272) = v3;
  v4 = vaddq_f64(*(float64x2_t *)(v2 + 44240), (float64x2_t)0);
  *(float64x2_t *)(v2 + 44224) = vaddq_f64(*(float64x2_t *)(v2 + 44224), (float64x2_t)0);
  *(float64x2_t *)(v2 + 44240) = v4;
  sub_20EDB3030((uint64_t)&STACK[0x447]);
  _Unwind_Resume(a1);
}

float64_t sub_20F8BC0E8(int32x2_t *a1, uint64_t a2)
{
  __n128 v4;
  int32x2_t *v5;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  float64x2_t v9;
  _QWORD *v10;
  float64x2_t v11;
  double v12;
  double v13;
  __n128 v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int32x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int32x2_t v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  __int128 v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  int v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int32x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  int v61;
  int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  int32x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  int v74;
  int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  int32x2_t v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int *v85;
  int v86;
  int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  int32x2_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  int v97;
  int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  int32x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  int v108;
  int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  int32x2_t v113;
  float64x2_t *v114;
  float64x2_t v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int *v118;
  int v119;
  int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  int32x2_t v124;
  uint64_t v125;
  float64x2_t v126;
  float64x2_t v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int *v130;
  int v131;
  int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  int32x2_t v136;
  uint64_t v137;
  float64x2_t v138;
  float64x2_t v139;
  unsigned int v140;
  int32x2_t v142;
  uint64_t v143;
  unsigned int v144;
  float64x2_t *v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  __int128 v154;
  uint64_t v155;
  float64x2_t v156;
  float64x2_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20F8ED370(a2, (uint64_t)&a1[4], (char **)&a1[2042], (int **)&a1[2072]);
  v5 = a1 + 2132;
  v6 = 9 * ((*(_QWORD *)&a1[1921] - *(_QWORD *)&a1[1920]) >> 2)
     + 6
     * (((*(_QWORD *)&a1[1924] - *(_QWORD *)&a1[1923]) >> 2)
      + ((*(_QWORD *)&a1[1918] - *(_QWORD *)&a1[1917]) >> 2)
      + ((*(_QWORD *)&a1[1927] - *(_QWORD *)&a1[1926]) >> 2))
     + ((*(_QWORD *)&a1[1933] - *(_QWORD *)&a1[1932]) >> 2)
     + ((a1[1936].i32[0] - a1[1935].i32[0]) & 0xFFFFFFFC)
     + ((a1[1939].i32[0] - a1[1938].i32[0]) & 0xFFFFFFFC)
     + 3
     * (((*(_QWORD *)&a1[1942] - *(_QWORD *)&a1[1941]) >> 2)
      + ((*(_QWORD *)&a1[1930] - *(_QWORD *)&a1[1929]) >> 2)
      + ((*(_QWORD *)&a1[1945] - *(_QWORD *)&a1[1944]) >> 2));
  a1[2134].i32[0] = v6;
  if (*(_QWORD *)&a1[2133] < v6)
  {
    if (*v5)
      ((void (*)(_QWORD, _QWORD, __n128))MEMORY[0x212BC6368])(*v5, 0x1000C8000313F17, v4);
    a1[2132] = 0;
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    a1[2133] = (int32x2_t)(v7 >> 3);
    a1[2132] = (int32x2_t)operator new(v7, (std::align_val_t)0x20uLL);
  }
  v8 = (_QWORD *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 24))(a1);
  *(_QWORD *)&v9.f64[0] = sub_20F8DF948(v8, (uint64_t)&a1[1917], &a1[2132]).u64[0];
  if (((*(_QWORD *)&a1[1921] - *(_QWORD *)&a1[1920]) >> 2)
     + ((*(_QWORD *)&a1[1918] - *(_QWORD *)&a1[1917]) >> 2)
     + ((*(_QWORD *)&a1[1924] - *(_QWORD *)&a1[1923]) >> 2)
     + ((*(_QWORD *)&a1[1927] - *(_QWORD *)&a1[1926]) >> 2)
     + ((*(_QWORD *)&a1[1930] - *(_QWORD *)&a1[1929]) >> 2)
     + ((*(_QWORD *)&a1[1933] - *(_QWORD *)&a1[1932]) >> 2)
     + ((*(_QWORD *)&a1[1936] - *(_QWORD *)&a1[1935]) >> 2)
     + ((*(_QWORD *)&a1[1939] - *(_QWORD *)&a1[1938]) >> 2)
     + ((*(_QWORD *)&a1[1942] - *(_QWORD *)&a1[1941]) >> 2)
     + ((*(_QWORD *)&a1[1945] - *(_QWORD *)&a1[1944]) >> 2))
  {
    sub_20F926890(&a1[17], (void **)&a1[2135]);
    sub_20F20B6B0((uint64_t)&a1[2135]);
    v10 = (_QWORD *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1);
    sub_20F927604(v10, (uint64_t)&a1[2147], (uint64_t)&a1[1917], (uint64_t)&a1[1], v11, v12, v13, v14);
    v15 = (unsigned int *)a1[1917];
    v16 = (unsigned int *)a1[1918];
    if (v15 != v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = *(unsigned int **)(a2 + 15304);
      v20 = *v15;
      if (*v19 < *v15)
        goto LABEL_10;
      while (1)
      {
        v21 = a1[12].i32[0] + 6 * v18;
        v22 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v22 + 8 * v21;
        v144 = v21;
        v23 = (float64x2_t *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 64) + 6 * v17));
        v24 = *v23;
        v25 = v23[1];
        v153 = v23[2];
        v152 = v25;
        v151 = v24;
        v145 = &v151;
        *(_QWORD *)&v156.f64[1] = &v142;
        *(_QWORD *)&v157.f64[0] = &a1[2147];
        v157.f64[1] = 1.0;
        sub_20F3DA5F4(&v146, (uint64_t)&v156);
        v26 = vsubq_f64(*v145, v146);
        v9 = vsubq_f64(v145[2], v148);
        v23[1] = vsubq_f64(v145[1], v147);
        v23[2] = v9;
        *v23 = v26;
        ++v15;
        ++v18;
        if (v15 == v16)
          break;
        v20 = *v15;
        if (*v19 < *v15)
        {
          do
          {
LABEL_10:
            v27 = v19[1];
            ++v19;
            ++v17;
          }
          while (v27 < v20);
        }
      }
    }
    v28 = (unsigned int *)a1[1920];
    v29 = (unsigned int *)a1[1921];
    if (v28 != v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = *(unsigned int **)(a2 + 15328);
      v33 = *v28;
      if (*v32 < *v28)
        goto LABEL_16;
      while (1)
      {
        v34 = a1[12].i32[1] + 9 * v31;
        v35 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v35 + 8 * v34;
        v144 = v34;
        v36 = *(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 68) + 9 * v30);
        v37 = *(float64x2_t *)v36;
        v38 = *(float64x2_t *)(v36 + 16);
        v39 = *(float64x2_t *)(v36 + 32);
        v40 = *(_OWORD *)(v36 + 48);
        v155 = *(_QWORD *)(v36 + 64);
        v154 = v40;
        v153 = v39;
        v152 = v38;
        v151 = v37;
        v145 = &v151;
        *(_QWORD *)&v156.f64[1] = &v142;
        *(_QWORD *)&v157.f64[0] = &a1[2147];
        v157.f64[1] = 1.0;
        sub_20F5BCC94((uint64_t)&v146, (uint64_t)&v156);
        v9.f64[0] = v145[4].f64[0];
        v41.f64[0] = v150;
        *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vsubq_f64(v9, v41);
        v42 = vsubq_f64(*v145, v146);
        v43 = vsubq_f64(v145[3], v149);
        v44 = vsubq_f64(v145[1], v147);
        *(float64x2_t *)(v36 + 32) = vsubq_f64(v145[2], v148);
        *(float64x2_t *)(v36 + 48) = v43;
        *(float64x2_t *)v36 = v42;
        *(float64x2_t *)(v36 + 16) = v44;
        *(float64_t *)(v36 + 64) = v9.f64[0];
        ++v28;
        ++v31;
        if (v28 == v29)
          break;
        v33 = *v28;
        if (*v32 < *v28)
        {
          do
          {
LABEL_16:
            v45 = v32[1];
            ++v32;
            ++v30;
          }
          while (v45 < v33);
        }
      }
    }
    v46 = (unsigned int *)a1[1923];
    v47 = (unsigned int *)a1[1924];
    if (v46 != v47)
    {
      v48 = 0;
      v49 = 0;
      v50 = *(unsigned int **)(a2 + 15352);
      v51 = *v46;
      if (*v50 < *v46)
        goto LABEL_22;
      while (1)
      {
        v52 = a1[13].i32[0] + 6 * v49;
        v53 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v53 + 8 * v52;
        v144 = v52;
        v54 = (float64x2_t *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 72) + 6 * v48));
        v55 = *v54;
        v56 = v54[1];
        v153 = v54[2];
        v152 = v56;
        v151 = v55;
        v145 = &v151;
        *(_QWORD *)&v156.f64[1] = &v142;
        *(_QWORD *)&v157.f64[0] = &a1[2147];
        v157.f64[1] = 1.0;
        sub_20F3DA5F4(&v146, (uint64_t)&v156);
        v57 = vsubq_f64(*v145, v146);
        v9 = vsubq_f64(v145[2], v148);
        v54[1] = vsubq_f64(v145[1], v147);
        v54[2] = v9;
        *v54 = v57;
        ++v46;
        ++v49;
        if (v46 == v47)
          break;
        v51 = *v46;
        if (*v50 < *v46)
        {
          do
          {
LABEL_22:
            v58 = v50[1];
            ++v50;
            ++v48;
          }
          while (v58 < v51);
        }
      }
    }
    v59 = (unsigned int *)a1[1926];
    v60 = (unsigned int *)a1[1927];
    if (v59 != v60)
    {
      v61 = 0;
      v62 = 0;
      v63 = *(unsigned int **)(a2 + 15376);
      v64 = *v59;
      if (*v63 < *v59)
        goto LABEL_28;
      while (1)
      {
        v65 = a1[13].i32[1] + 6 * v62;
        v66 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v66 + 8 * v65;
        v144 = v65;
        v67 = (float64x2_t *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 76) + 6 * v61));
        v68 = *v67;
        v69 = v67[1];
        v153 = v67[2];
        v152 = v69;
        v151 = v68;
        v145 = &v151;
        *(_QWORD *)&v156.f64[1] = &v142;
        *(_QWORD *)&v157.f64[0] = &a1[2147];
        v157.f64[1] = 1.0;
        sub_20F3DA5F4(&v146, (uint64_t)&v156);
        v70 = vsubq_f64(*v145, v146);
        v9 = vsubq_f64(v145[2], v148);
        v67[1] = vsubq_f64(v145[1], v147);
        v67[2] = v9;
        *v67 = v70;
        ++v59;
        ++v62;
        if (v59 == v60)
          break;
        v64 = *v59;
        if (*v63 < *v59)
        {
          do
          {
LABEL_28:
            v71 = v63[1];
            ++v63;
            ++v61;
          }
          while (v71 < v64);
        }
      }
    }
    v72 = (unsigned int *)a1[1929];
    v73 = (unsigned int *)a1[1930];
    if (v72 != v73)
    {
      v74 = 0;
      v75 = 0;
      v76 = *(unsigned int **)(a2 + 15400);
      v77 = *v72;
      if (*v76 < *v72)
        goto LABEL_34;
      while (1)
      {
        v78 = a1[14].i32[0] + 3 * v75;
        v79 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v79 + 8 * v78;
        v144 = v78;
        v80 = *(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 80) + 3 * v74);
        v81 = *(float64x2_t *)v80;
        v157.f64[0] = *(float64_t *)(v80 + 16);
        v156 = v81;
        v145 = &v156;
        *(_QWORD *)&v151.f64[1] = &v142;
        *(_QWORD *)&v152.f64[0] = &a1[2147];
        v152.f64[1] = 1.0;
        sub_20F3A2AA0(&v146, (uint64_t)&v151);
        v9.f64[0] = v145[1].f64[0];
        v82.f64[0] = v147.f64[0];
        *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vsubq_f64(v9, v82);
        *(float64x2_t *)v80 = vsubq_f64(*v145, v146);
        *(float64_t *)(v80 + 16) = v9.f64[0];
        ++v72;
        ++v75;
        if (v72 == v73)
          break;
        v77 = *v72;
        if (*v76 < *v72)
        {
          do
          {
LABEL_34:
            v83 = v76[1];
            ++v76;
            ++v74;
          }
          while (v83 < v77);
        }
      }
    }
    v84 = (unsigned int *)a1[1932];
    v85 = (unsigned int *)a1[1933];
    if (v84 != v85)
    {
      v86 = 0;
      v87 = 0;
      v88 = *(unsigned int **)(a2 + 15424);
      v89 = *v84;
      if (*v88 < *v84)
        goto LABEL_40;
      while (1)
      {
        v90 = a1[14].i32[1] + v87;
        v91 = a1[2135];
        *(int32x2_t *)&v156.f64[0] = vrev64_s32(a1[2137]);
        *(_QWORD *)&v156.f64[1] = *(_QWORD *)&v91 + 8 * v90;
        LODWORD(v157.f64[0]) = v90;
        v92 = *(_QWORD *)a2;
        v93 = 8 * (*(_DWORD *)(a2 + 84) + v86);
        v142 = *(int32x2_t *)(*(_QWORD *)a2 + v93);
        *(_QWORD *)&v151.f64[0] = &v142;
        *(_QWORD *)&v146.f64[0] = &v156;
        *(_QWORD *)&v146.f64[1] = &a1[2147];
        v147.f64[0] = 1.0;
        sub_20F2BF1EC(&v151.f64[1], (uint64_t)&v145);
        v9.f64[0] = **(double **)&v151.f64[0] - v151.f64[1];
        *(float64_t *)(v92 + v93) = v9.f64[0];
        ++v84;
        ++v87;
        if (v84 == v85)
          break;
        v89 = *v84;
        if (*v88 < *v84)
        {
          do
          {
LABEL_40:
            v94 = v88[1];
            ++v88;
            ++v86;
          }
          while (v94 < v89);
        }
      }
    }
    v95 = (unsigned int *)a1[1935];
    v96 = (unsigned int *)a1[1936];
    if (v95 != v96)
    {
      v97 = 0;
      v98 = 0;
      v99 = *(unsigned int **)(a2 + 15448);
      v100 = *v95;
      if (*v99 < *v95)
        goto LABEL_46;
      while (1)
      {
        v101 = a1[15].i32[0] + 4 * v98;
        v102 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v102 + 8 * v101;
        v144 = v101;
        v103 = (float64x2_t *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 88) + 4 * v97));
        v104 = v103[1];
        v156 = *v103;
        v157 = v104;
        v145 = &v156;
        *(_QWORD *)&v151.f64[1] = &v142;
        *(_QWORD *)&v152.f64[0] = &a1[2147];
        v152.f64[1] = 1.0;
        sub_20F3DA534(&v146, (uint64_t)&v151);
        v9 = vsubq_f64(v145[1], v147);
        *v103 = vsubq_f64(*v145, v146);
        v103[1] = v9;
        ++v95;
        ++v98;
        if (v95 == v96)
          break;
        v100 = *v95;
        if (*v99 < *v95)
        {
          do
          {
LABEL_46:
            v105 = v99[1];
            ++v99;
            ++v97;
          }
          while (v105 < v100);
        }
      }
    }
    v106 = (unsigned int *)a1[1938];
    v107 = (unsigned int *)a1[1939];
    if (v106 != v107)
    {
      v108 = 0;
      v109 = 0;
      v110 = *(unsigned int **)(a2 + 15472);
      v111 = *v106;
      if (*v110 < *v106)
        goto LABEL_52;
      while (1)
      {
        v112 = a1[15].i32[1] + 4 * v109;
        v113 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v113 + 8 * v112;
        v144 = v112;
        v114 = (float64x2_t *)(*(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 92) + 4 * v108));
        v115 = v114[1];
        v156 = *v114;
        v157 = v115;
        v145 = &v156;
        *(_QWORD *)&v151.f64[1] = &v142;
        *(_QWORD *)&v152.f64[0] = &a1[2147];
        v152.f64[1] = 1.0;
        sub_20F3DA534(&v146, (uint64_t)&v151);
        v9 = vsubq_f64(v145[1], v147);
        *v114 = vsubq_f64(*v145, v146);
        v114[1] = v9;
        ++v106;
        ++v109;
        if (v106 == v107)
          break;
        v111 = *v106;
        if (*v110 < *v106)
        {
          do
          {
LABEL_52:
            v116 = v110[1];
            ++v110;
            ++v108;
          }
          while (v116 < v111);
        }
      }
    }
    v117 = (unsigned int *)a1[1941];
    v118 = (unsigned int *)a1[1942];
    if (v117 != v118)
    {
      v119 = 0;
      v120 = 0;
      v121 = *(unsigned int **)(a2 + 15496);
      v122 = *v117;
      if (*v121 < *v117)
        goto LABEL_58;
      while (1)
      {
        v123 = a1[16].i32[0] + 3 * v120;
        v124 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v124 + 8 * v123;
        v144 = v123;
        v125 = *(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 96) + 3 * v119);
        v126 = *(float64x2_t *)v125;
        v157.f64[0] = *(float64_t *)(v125 + 16);
        v156 = v126;
        v145 = &v156;
        *(_QWORD *)&v151.f64[1] = &v142;
        *(_QWORD *)&v152.f64[0] = &a1[2147];
        v152.f64[1] = 1.0;
        sub_20F3A2AA0(&v146, (uint64_t)&v151);
        v9.f64[0] = v145[1].f64[0];
        v127.f64[0] = v147.f64[0];
        *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vsubq_f64(v9, v127);
        *(float64x2_t *)v125 = vsubq_f64(*v145, v146);
        *(float64_t *)(v125 + 16) = v9.f64[0];
        ++v117;
        ++v120;
        if (v117 == v118)
          break;
        v122 = *v117;
        if (*v121 < *v117)
        {
          do
          {
LABEL_58:
            v128 = v121[1];
            ++v121;
            ++v119;
          }
          while (v128 < v122);
        }
      }
    }
    v129 = (unsigned int *)a1[1944];
    v130 = (unsigned int *)a1[1945];
    if (v129 != v130)
    {
      v131 = 0;
      v132 = 0;
      v133 = *(unsigned int **)(a2 + 15520);
      v134 = *v129;
      if (*v133 < *v129)
        goto LABEL_64;
      while (1)
      {
        v135 = a1[16].i32[1] + 3 * v132;
        v136 = a1[2135];
        v142 = vrev64_s32(a1[2137]);
        v143 = *(_QWORD *)&v136 + 8 * v135;
        v144 = v135;
        v137 = *(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 100) + 3 * v131);
        v138 = *(float64x2_t *)v137;
        v157.f64[0] = *(float64_t *)(v137 + 16);
        v156 = v138;
        v145 = &v156;
        *(_QWORD *)&v151.f64[1] = &v142;
        *(_QWORD *)&v152.f64[0] = &a1[2147];
        v152.f64[1] = 1.0;
        sub_20F3A2AA0(&v146, (uint64_t)&v151);
        v9.f64[0] = v145[1].f64[0];
        v139.f64[0] = v147.f64[0];
        *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vsubq_f64(v9, v139);
        *(float64x2_t *)v137 = vsubq_f64(*v145, v146);
        *(float64_t *)(v137 + 16) = v9.f64[0];
        ++v129;
        ++v132;
        if (v129 == v130)
          break;
        v134 = *v129;
        if (*v133 < *v129)
        {
          do
          {
LABEL_64:
            v140 = v133[1];
            ++v133;
            ++v131;
          }
          while (v140 < v134);
        }
      }
    }
  }
  return v9.f64[0];
}

void sub_20F8BCDD8(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  int v4;
  float64x2_t **v5;
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v42;
  BOOL v44;
  uint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  unint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float64x2_t **v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  char *v126;
  char *v127;
  void *v128;
  void *v129;
  char *v130;
  char *v131;
  void *v132;
  void *v133;
  size_t v134;
  char *v135;
  float64_t v136;
  uint64_t v137;
  __int128 *v138;
  _OWORD *v139;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 *v143;
  _OWORD *v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  float64x2_t v150;
  float64x2_t *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  float64_t v177;
  __int128 *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  __int128 *v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  _BYTE *v198;
  _BYTE *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  __int128 *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  BOOL v214;
  _DWORD *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  double v225;
  _DWORD *v226;
  unsigned int v227;
  char *v228;
  unint64_t v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  char *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  BOOL v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t i;
  char *v248;
  char *v249;
  unint64_t v250;
  __int128 v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  __int128 v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _DWORD *v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unsigned int v275;
  char *v276;
  __int128 v277;
  unsigned int v278;
  char *v279;
  unsigned int *v280;
  float64x2_t *v281;
  float64x2_t *v282;
  char *v283;
  float64x2_t v284;
  void *v285;
  unint64_t v286;
  _DWORD *v287;
  char *v288;
  unsigned int v289;
  float64x2_t *v290;
  float64x2_t *v291;
  uint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  __int128 v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  __int128 v305;
  unint64_t v306;
  char *v307;
  char *v308;
  int64_t v309;
  __int128 v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  __int128 v317;
  unint64_t v318;
  char *v319;
  unint64_t v320;
  char *v321;
  uint64_t v322;
  _DWORD *v323;
  uint64_t v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  BOOL v330;
  float v331;
  unsigned int v332;
  _DWORD *v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t v336;
  __int32 v337;
  uint64_t v338;
  float64_t v339;
  __int128 *v340;
  char *v341;
  __int32 *v342;
  __int32 *v343;
  __int32 *v344;
  uint64_t v345;
  _DWORD *v346;
  uint64_t v347;
  int v348;
  _DWORD *v349;
  _DWORD *v350;
  _QWORD *v352;
  uint64_t v353;
  int v354;
  float64x2_t *v355;
  uint64_t v356;
  char **v357;
  void **v358;
  __int32 *v359;
  __int32 *v360;
  uint64_t v361;
  _QWORD *v362;
  __int32 *v363;
  __int32 *v364;
  __int32 *v365;
  __int32 *v366;
  __int32 *v367;
  __int32 *v368;
  __int32 *v369;
  unint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  _BYTE *v378;
  _QWORD *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  _OWORD *v385;
  char *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  char *v390;
  char *v391;
  __int32 *v392;
  __int32 *v393;
  uint64_t v394;
  __int32 v395;
  __int32 *v396;
  __int32 *v397;
  __int32 *v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  unint64_t *v410;
  char *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  _OWORD *v416;
  char *v417;
  uint64_t v418;
  __int128 v419;
  unint64_t v420;
  char *v421;
  char *v422;
  __int32 *v423;
  __int32 *v424;
  uint64_t v425;
  __int32 v426;
  uint64_t v427;
  __int32 *v428;
  __int32 *v429;
  __int32 *v430;
  __int32 *v431;
  __int32 *v432;
  __int32 *v433;
  unint64_t v434;
  unint64_t v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  _BYTE *v443;
  unint64_t *v444;
  char *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  __int128 v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  unsigned int *v457;
  unint64_t v458;
  uint64_t v459;
  int8x16_t v460;
  float64x2_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  const float *v472;
  float64x2_t *v473;
  int32x4_t v474;
  unint64_t v475;
  const float *v476;
  unsigned __int128 v477;
  unsigned __int128 v478;
  int32x4_t v479;
  int32x4_t v480;
  unint64_t v481;
  int *v482;
  int *v483;
  int v484;
  int v485;
  uint64_t v486;
  char **v487;
  float64x2_t *v488;
  float64x2_t *v489;
  unsigned int *v490;
  uint64_t v491;
  int v492;
  char *v493;
  unsigned int *v494;
  unsigned int v495;
  unsigned int v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  float64x2_t *v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  BOOL v511;
  std::logic_error *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  BOOL v521;
  unint64_t v522;
  uint64_t v523;
  BOOL v524;
  std::logic_error *v525;
  unsigned int *v526;
  uint64_t v527;
  unsigned int v529;
  float64x2_t *v530;
  int v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  BOOL v540;
  unint64_t v541;
  uint64_t v542;
  BOOL v543;
  unint64_t v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  uint64_t v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  float64x2_t *v610;
  uint64_t j;
  uint64_t v612;
  unint64_t v613;
  unsigned int *v614;
  unsigned int *v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  float64x2_t *v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  uint64_t v627;
  char *v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  BOOL v639;
  int v640;
  unsigned int v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  __int128 v645;
  uint64_t v646;
  float64_t v647;
  __int128 *v648;
  char *v649;
  unsigned int v650;
  unsigned int *v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  int32x4_t v655;
  int32x4_t v656;
  uint64_t v657;
  unint64_t v658;
  int v659;
  float64x2_t *v660;
  float32x4_t *v661;
  float64x2_t *v663;
  float64x2_t *v664;
  _DWORD *v665;
  _DWORD *v666;
  float64x2_t *v667;
  _DWORD *v668;
  float64x2_t *v669;
  _DWORD *v670;
  _DWORD *v671;
  unsigned int *v672;
  int8x16_t *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unsigned int *v678;
  unint64_t v679;
  uint64_t v680;
  int8x16_t *v681;
  int8x16_t *v682;
  int8x16_t *v683;
  uint64_t v684;
  unsigned int v685;
  _QWORD *v686;
  unint64_t v687;
  uint64_t v688;
  float64_t v689;
  float64x2_t **v690;
  uint64_t v691;
  _DWORD *v692;
  _DWORD *v693;
  int v694;
  int *v695;
  int v696;
  int v697;
  _QWORD *v698;
  int v699;
  unsigned int v701;
  unsigned int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  char *v707;
  char *v708;
  unint64_t v709;
  unint64_t v710;
  unsigned int *v711;
  char *v712;
  unsigned int v713;
  uint64_t v714;
  uint64_t v715;
  unsigned int v716;
  float64x2_t *v717;
  double v718;
  unsigned int v719;
  char v720;
  double v721;
  double v722;
  uint64_t v723;
  double v725;
  double v727;
  double v728;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  const double *v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  double v740;
  double v741;
  double v742;
  double v746;
  double v747;
  double v748;
  double v749;
  double v750;
  int v751;
  int v752;
  BOOL v753;
  float64x2_t v754;
  double v755;
  double v757;
  double v758;
  double v759;
  double v760;
  double v764;
  double v765;
  double v766;
  double v767;
  double v768;
  int v769;
  int v770;
  BOOL v771;
  float64x2_t v772;
  double v773;
  double v775;
  double v776;
  float64x2_t v777;
  double v778;
  double v779;
  double v783;
  double v784;
  double v785;
  double v786;
  int v787;
  int v788;
  BOOL v789;
  float64x2_t v790;
  double v791;
  double v793;
  double v794;
  float64x2_t v795;
  double v796;
  double v797;
  double v798;
  double v799;
  double v800;
  double v801;
  double v802;
  int v803;
  unsigned int v804;
  unsigned int v805;
  unsigned int v806;
  unsigned int v807;
  uint64_t v808;
  uint64_t v809;
  _DWORD *v810;
  unsigned int v811;
  int v812;
  unsigned int v813;
  unsigned int v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  unsigned int v819;
  unsigned int v820;
  _DWORD *v821;
  unsigned int v822;
  int v823;
  uint64_t v824;
  unsigned int v825;
  uint64_t v826;
  unsigned int v827;
  uint64_t v828;
  _DWORD *v829;
  uint64_t v830;
  unsigned int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  int v835;
  uint64_t v836;
  uint64_t v837;
  _DWORD *v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int v841;
  uint64_t v842;
  float v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  char *v847;
  _QWORD *v848;
  char *v849;
  unsigned int v850;
  int v851;
  BOOL v852;
  _BOOL4 v853;
  double v855;
  double v858;
  float64x2_t v859;
  uint64_t v860;
  unsigned int *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  float64x2_t *v870;
  uint64_t v871;
  unint64_t v872;
  unint64_t v873;
  int v874;
  float64x2_t *v875;
  _DWORD *v876;
  unint64_t v877;
  uint64_t v878;
  _DWORD *v879;
  uint64_t v880;
  uint64_t v881;
  float64x2_t *v882;
  uint64_t v883;
  uint64_t v884;
  float64x2_t *v885;
  float64x2_t *v886;
  float64x2_t v887;
  uint64_t v888;
  unsigned int v889;
  _DWORD *v890;
  _DWORD *v891;
  unint64_t v892;
  unint64_t v893;
  unsigned int *v894;
  unsigned int v895;
  _DWORD *v896;
  uint64_t v897;
  uint64_t v898;
  unsigned int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  __int128 v905;
  uint64_t v906;
  __int128 v907;
  uint64_t v908;
  __int128 v909;
  uint64_t v910;
  __int128 v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  __int128 v919;
  uint64_t v920;
  __int128 v921;
  uint64_t v922;
  __int128 v923;
  uint64_t v924;
  __int128 v925;
  uint64_t v926;
  int *v927;
  int *v928;
  int v929;
  _QWORD *v930;
  uint64_t v931;
  unsigned int v932;
  char *v933;
  uint64_t v934;
  int *v935;
  int *v936;
  uint64_t v937;
  unsigned int v938;
  char *v939;
  uint64_t v940;
  int *v941;
  int *v942;
  int v943;
  uint64_t v944;
  int v945;
  float64x2_t *v946;
  _BOOL4 v947;
  float64x2_t v948;
  unsigned __int8 v949;
  float64x2_t *v950;
  __n128 v951;
  uint64_t v952;
  _QWORD *v953;
  unint64_t v954;
  float64x2_t **v955;
  uint64_t v956;
  unsigned int v957;
  unsigned int *v958;
  _OWORD *v959;
  _OWORD *v960;
  _OWORD *v961;
  __int128 v962;
  uint64_t v963;
  unint64_t v964;
  _DWORD *v965;
  unint64_t v966;
  uint64_t v967;
  _DWORD *v968;
  uint64_t v969;
  float64x2_t *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  float64x2_t *v975;
  uint64_t v976;
  _OWORD *v977;
  unint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  unint64_t v983;
  float64x2_t *v984;
  unsigned int v985;
  uint64_t v986;
  int v987;
  uint64_t v988;
  float64x2_t *v989;
  uint64_t v990;
  unint64_t v991;
  unsigned int *v992;
  unsigned int v993;
  uint64_t *v994;
  uint64_t *v995;
  uint64_t v996;
  uint64_t v997;
  __int128 *v998;
  unsigned int v999;
  char *v1000;
  char *v1001;
  unint64_t v1002;
  unint64_t v1003;
  unsigned int *v1004;
  char *v1005;
  unsigned int v1006;
  uint64_t v1007;
  int v1008;
  uint64_t v1009;
  int v1010;
  int v1011;
  char *v1012;
  char *v1013;
  unint64_t v1014;
  unint64_t v1015;
  unsigned int *v1016;
  char *v1017;
  unsigned int v1018;
  uint64_t v1019;
  _OWORD *v1020;
  _QWORD *v1021;
  float64x2_t *v1022;
  float64x2_t *v1023;
  uint64_t v1024;
  __int128 *v1025;
  float64x2_t v1026;
  _OWORD *v1027;
  int8x8_t v1028;
  unint64_t v1029;
  uint8x8_t v1030;
  unint64_t v1031;
  uint64_t **v1032;
  uint64_t *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  uint64_t *v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  int v1043;
  unsigned __int8 v1044;
  uint64_t v1045;
  uint64_t n;
  unsigned __int8 v1047;
  unsigned __int8 v1048;
  uint64_t v1049;
  uint64_t ii;
  unsigned __int8 v1051;
  uint64_t v1052;
  __int128 *v1053;
  float64x2_t *v1054;
  uint64_t *v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  int v1059;
  unsigned __int8 v1060;
  uint64_t k;
  uint64_t v1062;
  unsigned __int8 v1063;
  unsigned __int8 v1064;
  uint64_t m;
  uint64_t v1066;
  unsigned __int8 v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  int v1071;
  int v1072;
  int v1073;
  int v1074;
  uint64_t v1075;
  int v1076;
  uint64_t v1077;
  uint64_t *v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  __n128 *v1082;
  BOOL *v1083;
  BOOL v1084;
  _QWORD *v1085;
  uint64_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64_t v1098;
  __n128 *v1099;
  __n128 *v1100;
  uint64_t v1101;
  unsigned int v1102;
  uint64_t v1103;
  int64x2_t *v1104;
  int32x2_t *v1105;
  int32x2_t v1106;
  uint64_t v1107;
  float64_t *v1108;
  uint64_t v1109;
  uint64_t v1110;
  unsigned int v1111;
  float64_t *v1112;
  __int128 v1113;
  unsigned int v1114;
  uint64_t v1115;
  float64x2_t *v1116;
  uint64_t v1117;
  float64_t *v1118;
  __n128 *v1119;
  int v1120;
  __n128 v1121;
  __n128 *v1122;
  uint64_t v1123;
  uint64_t jj;
  unsigned __int32 v1125;
  unsigned __int8 v1126;
  __n128 *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  int v1131;
  int v1132;
  unint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  BOOL v1138;
  unint64_t v1139;
  uint64_t v1140;
  BOOL v1141;
  unsigned __int32 v1142;
  unsigned __int32 v1143;
  _DWORD *v1144;
  _DWORD *v1145;
  std::logic_error *v1146;
  char **v1147;
  unint64_t *v1148;
  unint64_t v1149;
  unint64_t v1150;
  uint64_t v1151;
  float64x2_t *v1152;
  unint64_t v1153;
  __n128 *v1154;
  uint64_t v1155;
  float64x2_t *v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64_t *v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  _OWORD *v1172;
  char *v1173;
  char *v1174;
  unint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  _OWORD **v1180;
  _OWORD *v1181;
  uint64_t v1182;
  __n128 *v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  __int128 v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  _OWORD *v1200;
  char *v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  char *v1218;
  __n128 *v1219;
  _OWORD *v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  __int128 v1235;
  __int128 v1236;
  int64_t v1237;
  uint64_t v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  double v1258;
  double v1259;
  double v1260;
  double v1261;
  uint64_t v1262;
  int64x2_t v1263;
  __int128 *v1264;
  uint64_t v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 *v1274;
  uint64_t v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  float64_t v1284;
  unsigned int **v1285;
  double *n128_f64;
  uint64_t v1287;
  double v1288;
  double v1289;
  double v1290;
  _OWORD *v1291;
  char *v1292;
  unint64_t v1293;
  _OWORD *v1294;
  unint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  char *v1298;
  char *v1299;
  char *v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  double v1317;
  double v1318;
  unsigned int v1319;
  uint64_t v1320;
  uint64_t v1321;
  float64x2_t *v1322;
  float64x2_t v1323;
  float64x2_t *v1324;
  float64x2_t v1325;
  float64x2_t *v1326;
  float64x2_t v1327;
  float64x2_t *v1328;
  __n128 *v1329;
  float64x2_t *v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  __n128 v1337;
  __n128 v1338;
  __n128 v1339;
  __n128 v1340;
  __n128 v1341;
  __n128 v1342;
  __int8 *v1343;
  float64_t *v1344;
  uint64_t v1345;
  uint64_t v1346;
  __int128 v1347;
  __int128 v1348;
  __int128 v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  unsigned int v1363;
  unsigned int *v1364;
  unsigned int *v1365;
  uint64_t v1366;
  uint64_t v1367;
  unsigned int v1368;
  uint64_t v1369;
  int v1370;
  __int128 v1371;
  uint64_t v1372;
  __int128 v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  unsigned int v1378;
  unsigned int *v1379;
  int v1380;
  uint64_t v1381;
  __int128 v1382;
  __int128 v1383;
  uint64_t v1384;
  int v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  std::logic_error *v1389;
  int *v1390;
  uint64_t v1391;
  uint64_t v1392;
  int v1393;
  _DWORD *v1394;
  _DWORD *v1395;
  uint64_t v1396;
  int v1397;
  unsigned int v1398;
  char *v1399;
  uint64_t v1400;
  unsigned int *v1401;
  uint64_t v1402;
  uint64_t v1403;
  unsigned int v1404;
  uint64_t v1405;
  int v1406;
  _OWORD *v1407;
  uint64_t v1408;
  uint64_t v1409;
  int v1410;
  int v1411;
  uint64_t v1412;
  uint64_t v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  _DWORD *v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  _DWORD *v1427;
  int v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  __int128 v1444;
  __int128 v1445;
  __int128 v1446;
  __int128 v1447;
  __int128 v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  _DWORD *v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  uint64_t v1461;
  int v1462;
  _QWORD *v1463;
  unint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  BOOL v1468;
  std::logic_error *v1469;
  unsigned int v1470;
  int v1471;
  int v1472;
  BOOL *v1473;
  double **v1474;
  unint64_t v1475;
  size_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  float64x2_t *v1479;
  uint64_t v1480;
  double *f64;
  double *v1482;
  int v1483;
  double v1484;
  char v1485;
  char **v1486;
  int v1487;
  uint64_t v1488;
  unsigned int v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  char *v1493;
  size_t v1494;
  unsigned int v1495;
  uint64_t v1496;
  unsigned int v1497;
  unsigned int v1498;
  size_t v1499;
  uint64_t v1500;
  float64_t v1501;
  size_t v1502;
  uint64_t v1503;
  float64_t v1504;
  _QWORD *v1505;
  uint64_t v1506;
  float64x2_t *v1507;
  int v1508;
  _BYTE *v1509;
  uint64_t v1510;
  _BYTE *v1511;
  int64_t v1512;
  unint64_t v1513;
  char *v1514;
  char *v1515;
  unint64_t v1516;
  char *v1517;
  int v1519;
  float64x2_t **v1520;
  float64x2_t *v1521;
  float64x2_t *v1522;
  uint64_t v1523;
  float64x2_t v1524;
  char *v1525;
  char *v1526;
  char *v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  uint64_t v1530;
  __int128 v1531;
  __int128 v1532;
  uint64_t v1533;
  __int128 v1534;
  __int128 v1535;
  uint64_t v1536;
  _BYTE *v1537;
  int v1538;
  uint64_t *v1539;
  double **v1540;
  unint64_t v1541;
  size_t v1542;
  float64x2_t *v1543;
  uint64_t v1544;
  float64x2_t *v1545;
  uint64_t v1546;
  double *v1547;
  double *v1548;
  int v1549;
  double v1550;
  float64x2_t *v1551;
  size_t v1552;
  char *v1553;
  char v1554;
  char **v1555;
  unsigned int v1556;
  uint64_t v1557;
  uint64_t v1558;
  char *v1559;
  size_t v1560;
  uint64_t v1561;
  unsigned int v1562;
  unsigned int v1563;
  size_t v1564;
  uint64_t v1565;
  float64_t v1566;
  size_t v1567;
  uint64_t v1568;
  float64_t v1569;
  float64x2_t *v1570;
  float64x2_t *v1571;
  uint64_t v1572;
  float64x2_t v1573;
  uint64_t v1574;
  int *v1575;
  int *v1576;
  unsigned int v1577;
  int v1578;
  char *v1579;
  char *v1580;
  char *v1581;
  int v1582;
  std::logic_error *v1583;
  std::logic_error *v1584;
  std::logic_error *v1585;
  std::logic_error *v1586;
  std::logic_error *exception;
  std::logic_error *v1588;
  std::logic_error *v1589;
  std::logic_error *v1590;
  std::logic_error *v1591;
  std::logic_error *v1592;
  std::logic_error *v1593;
  int v1594;
  unsigned int *v1595;
  uint64_t *v1596;
  unsigned int v1597;
  uint64_t v1598;
  float64x2_t *v1599;
  unint64_t *v1600;
  unint64_t v1601;
  uint64_t v1602;
  _QWORD *v1603;
  unint64_t v1604;
  double v1605;
  unsigned int v1606;
  double v1607;
  int **v1608;
  _DWORD *v1609;
  int **v1610;
  float64x2_t *v1611;
  int *v1612;
  int v1613;
  uint64_t v1614;
  int v1615;
  double v1616;
  uint64_t v1617;
  int v1618;
  unsigned int v1619;
  int v1620;
  double v1621;
  uint64_t v1622;
  _BYTE *v1623;
  uint64_t v1624;
  _DWORD *v1625;
  float64x2_t *v1626;
  _QWORD *v1627;
  char *v1628;
  unsigned int v1629;
  _BYTE *v1630;
  unsigned int v1631;
  double v1632;
  char v1633;
  _DWORD *v1634;
  __n128 *v1635;
  unsigned int v1636;
  double v1637;
  unint64_t *v1638;
  double v1639;
  unint64_t v1640;
  unsigned int v1641;
  double v1642;
  double v1643;
  unint64_t v1644;
  _QWORD *v1645;
  uint64_t v1646;
  double v1647;
  uint64_t v1648;
  uint64_t v1649;
  _DWORD *v1650;
  double v1651;
  uint64_t v1652;
  _DWORD *v1653;
  double v1654;
  float64_t v1655;
  unint64_t v1656;
  unsigned int v1657;
  uint64_t v1658;
  int64x2_t v1659;
  _DWORD *v1660;
  int v1661;
  uint64_t v1662;
  int v1663;
  uint64_t v1664;
  double v1665;
  uint64_t v1666;
  float64x2_t *v1667;
  _DWORD *v1668;
  uint64_t v1669;
  __int128 *v1670;
  double v1671;
  uint64_t v1672;
  float64x2_t **v1673;
  unint64_t v1674;
  __n128 *v1675;
  BOOL v1676;
  _DWORD *v1677;
  int v1678;
  unsigned int *v1679;
  float64x2_t *v1680;
  __int128 v1681;
  uint64_t v1682;
  __int128 v1683;
  __int128 v1684;
  _OWORD v1685[16];
  uint64_t v1686;
  __int128 v1687;
  uint64_t v1688;
  __int128 v1689;
  uint64_t v1690;
  __int128 v1691;
  uint64_t v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  uint64_t v1696;
  __int128 v1697;
  uint64_t v1698;
  __int128 v1699;
  __int128 v1700;
  __int128 v1701;
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  __int128 v1705;
  __int128 v1706;
  __int128 v1707;
  __int128 v1708;
  uint64_t v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  uint64_t v1714;
  float64x2_t __dst[246];
  double v1716;
  double v1717;
  double v1718;
  double v1719;
  double v1720;
  double v1721;
  double v1722;
  double v1723;
  double v1724;
  double v1725;
  double v1726;
  double v1727;
  double v1728;
  double v1729;
  double v1730;
  double v1731;
  int v1732;
  uint64_t v1733;
  __int128 v1734;
  uint64_t v1735;
  uint64_t v1736;
  __int128 v1737;
  uint64_t v1738;
  uint64_t v1739;
  _QWORD v1740[3];
  _DWORD v1741[120];
  __int128 v1742;
  unint64_t v1743;
  unint64_t v1744;
  _BYTE v1745[648];
  __int128 v1746;
  __int128 v1747;
  __int128 v1748;
  __int128 v1749;
  uint64_t v1750;
  __int128 v1751;
  __int128 v1752;
  __int128 v1753;
  __int128 v1754;
  uint64_t v1755;
  __int128 v1756;
  __int128 v1757;
  __int128 v1758;
  __int128 v1759;
  uint64_t v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  uint64_t v1765;
  __int128 v1766;
  __int128 v1767;
  __int128 v1768;
  __int128 v1769;
  uint64_t v1770;
  __int128 v1771;
  __int128 v1772;
  __int128 v1773;
  __int128 v1774;
  uint64_t v1775;
  __int128 v1776;
  __int128 v1777;
  __int128 v1778;
  __int128 v1779;
  uint64_t v1780;
  __int128 v1781;
  __int128 v1782;
  __int128 v1783;
  __int128 v1784;
  uint64_t v1785;
  uint64_t v1786;

  MEMORY[0x24BDAC7A8](a1);
  v1786 = *MEMORY[0x24BDAC8D0];
  v5 = (float64x2_t **)(*(_QWORD *)&v3 + 57912);
  if (*(_BYTE *)(*(_QWORD *)&v3 + 58050))
  {
    v6 = *v5;
    v7 = *v5 + 28160;
    v8 = (uint64_t)&(*v5)[1941].f64[1] + 4;
    *(_DWORD *)v8 = 0;
    v7 += 212;
    *(_WORD *)(v8 + 192) = 0;
    *(_BYTE *)(v8 + 6) = 0;
    *(_BYTE *)(v8 + 213) = 0;
    *(float64x2_t *)((char *)&v6[1940] + 8) = 0u;
    v6[1954] = 0u;
    v6[1955].f64[1] = -1.0;
    LOBYTE(v6[2211].f64[0]) = 0;
    BYTE4(v6[2220].f64[1]) = 0;
    LOBYTE(v6[2676].f64[1]) = 0;
    LODWORD(v7->f64[0]) = 0;
    LODWORD(v7[6].f64[1]) = 0;
    LODWORD(v6[134092].f64[0]) = 1000;
    HIDWORD(v6[22738].f64[1]) = 5;
    return;
  }
  v1613 = v4;
  v1655 = v3;
  if (*(_BYTE *)(*(_QWORD *)&v3 + 18568))
    v9 = (_QWORD *)(*(_QWORD *)&v3 + 20640);
  else
    v9 = (_QWORD *)(*(_QWORD *)&v3 + 19576);
  v10 = (int *)v9[30];
  v1596 = v9 + 30;
  v11 = (v9[31] - (_QWORD)v10) >> 2;
  v12 = *v5;
  v13 = v11;
  v1619 = v11;
  if (v11 >= 0xB)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 358, (uint64_t)"numStates <= kMaxStates", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1527;
    }
    v10 = (int *)*v1596;
  }
  else if (!(_DWORD)v11)
  {
    v1633 = 1;
    goto LABEL_16;
  }
  v14 = (_DWORD *)v12[1947].f64 + 1;
  v15 = (int *)v9[33];
  v16 = (int *)v9[34];
  v17 = v15;
  v18 = v13;
  do
  {
    while (1)
    {
      *(v14 - 20) = *v10;
      v19 = *v10++;
      *(v14 - 10) = v19 + 3;
      if (v15 != v16)
        break;
      *v14++ = -1;
      ++v17;
      if (!--v18)
        goto LABEL_15;
    }
    v20 = *v17++;
    *v14++ = v20;
    --v18;
  }
  while (v18);
LABEL_15:
  v1633 = 0;
LABEL_16:
  v21 = (*(_QWORD *)(*(_QWORD *)&v1655 + 328) - *(_QWORD *)(*(_QWORD *)&v1655 + 320)) >> 4;
  v1674 = v21;
  v1636 = v21;
  if (v1619 < v21)
  {
    v22 = v21 - v13;
    v23 = v13;
    if (v1674 - v13 < 4)
      goto LABEL_21;
    v23 = v13 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_OWORD *)((char *)v12[1942].f64 + 4 * v13 + 4);
    *(_QWORD *)&v25 = -1;
    *((_QWORD *)&v25 + 1) = -1;
    v26 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      *v24 = v25;
      *(_OWORD *)((char *)v24 + 40) = v25;
      v24[5] = v25;
      ++v24;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      v27 = v23 - v1674;
      v28 = (_DWORD *)&v12[1944].f64[1] + v23 + 1;
      do
      {
        *(v28 - 10) = -1;
        *v28 = -1;
        v28[10] = -1;
        ++v28;
        _CF = __CFADD__(v27++, 1);
      }
      while (!_CF);
    }
  }
  v1673 = v5;
  v29 = v9[36];
  v30 = v9[37] - v29;
  v31 = *(_QWORD *)(*(_QWORD *)&v1655 + 520);
  v32 = *(_QWORD *)(*(_QWORD *)&v1655 + 512);
  v33 = (v30 >> 2);
  v1656 = v30 >> 2;
  if ((v30 >> 2) >= 5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 393, (uint64_t)"numExtrinsics <= kMaxCamCalibrations", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1527;
    }
    v34 = *v1673;
    v35 = (unint64_t)&(*v1673)[1949].f64[1] + 4;
    v36 = (unint64_t)&(*v1673)[1950].f64[1] + 4;
    v29 = v9[36];
    if (v33 < 0xC)
    {
LABEL_27:
      v37 = 0;
      do
      {
LABEL_52:
        v54 = 4 * v37;
        *(_DWORD *)(v35 + v54) = *(_DWORD *)(v29 + 4 * v37);
        *(_DWORD *)(v36 + v54) = *(_DWORD *)(v29 + 4 * v37++) + 3;
      }
      while (v33 != v37);
      goto LABEL_53;
    }
  }
  else
  {
    v34 = *v1673;
    v35 = (unint64_t)&(*v1673)[1949].f64[1] + 4;
    v36 = (unint64_t)&(*v1673)[1950].f64[1] + 4;
    if (!(v30 >> 2))
      goto LABEL_53;
    if (v33 < 0xC)
      goto LABEL_27;
  }
  v37 = 0;
  v38 = v35 + 4 * v33;
  v39 = v36 + 4 * v33;
  v40 = v29 + 4 * v33;
  _CF = v35 >= v40 || v29 >= v38;
  v42 = !_CF;
  v44 = v36 < v40 && v29 < v39;
  if (v36 < v38 && v35 < v39)
    goto LABEL_52;
  if ((v42 & 1) != 0)
    goto LABEL_52;
  if (v44)
    goto LABEL_52;
  v46 = 0;
  v47 = (v30 >> 2) & 7;
  v37 = v33 - v47;
  v48.i64[0] = 0x300000003;
  v48.i64[1] = 0x300000003;
  v49 = v33 - v47;
  do
  {
    v50 = *(int32x4_t *)(v29 + v46);
    v51 = *(int32x4_t *)(v29 + v46 + 16);
    v52 = (int32x4_t *)(v35 + v46);
    *v52 = v50;
    v52[1] = v51;
    v53 = (int32x4_t *)(v36 + v46);
    *v53 = vaddq_s32(v50, v48);
    v53[1] = vaddq_s32(v51, v48);
    v46 += 32;
    v49 -= 8;
  }
  while (v49);
  if (v47)
    goto LABEL_52;
LABEL_53:
  if (v1656 < ((unint64_t)(v31 - v32) >> 4))
  {
    v55 = ((unint64_t)(v31 - v32) >> 4);
    v56 = v55 - v33;
    if (v55 - v33 < 0xC)
      goto LABEL_59;
    v57 = 4 * v33;
    if (4 * v33 + v36 - (4 * v33 + v35) < 0x20)
      goto LABEL_59;
    v33 += v56 & 0xFFFFFFFFFFFFFFF8;
    v58 = v57 + 16;
    v59 = (_OWORD *)(v35 + v57 + 16);
    v60 = (_OWORD *)(v36 + v58);
    *(_QWORD *)&v61 = -1;
    *((_QWORD *)&v61 + 1) = -1;
    v62 = v56 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(v59 - 1) = v61;
      *v59 = v61;
      v59 += 2;
      *(v60 - 1) = v61;
      *v60 = v61;
      v60 += 2;
      v62 -= 8;
    }
    while (v62);
    if (v56 != (v56 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_59:
      v63 = v33 - v55;
      v64 = (_DWORD *)(v36 + 4 * v33);
      v65 = (_DWORD *)(v35 + 4 * v33);
      do
      {
        *v65++ = -1;
        *v64++ = -1;
        _CF = __CFADD__(v63++, 1);
      }
      while (!_CF);
    }
  }
  v66 = v9[48];
  v67 = v9[49] - v66;
  v68 = v67 >> 2;
  v69 = *(_QWORD *)(*(_QWORD *)&v1655 + 904);
  v70 = *(_QWORD *)(*(_QWORD *)&v1655 + 896);
  v1644 = v67 >> 2;
  if ((v67 >> 2) >= 5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 415, (uint64_t)"numIntrinsics <= kMaxCamCalibrations", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1527;
    }
    v34 = *v1673;
    v66 = v9[48];
    LODWORD(v68) = v67 >> 2;
    v71 = v68;
    if (v68 < 8uLL)
      goto LABEL_69;
  }
  else
  {
    if (!(_DWORD)v68)
      goto LABEL_73;
    v71 = (v67 >> 2);
    if (v71 < 8)
      goto LABEL_69;
  }
  if ((unint64_t)&v34[1951].f64[1] - v66 + 4 < 0x20)
  {
LABEL_69:
    v72 = 0;
LABEL_70:
    v73 = v72 - v71;
    v74 = 4 * v72;
    v75 = 4 * v72 + 31228;
    v76 = (int *)(v66 + v74);
    do
    {
      v77 = *v76++;
      *(_DWORD *)((char *)v34->f64 + v75) = v77;
      v75 += 4;
      _CF = __CFADD__(v73++, 1);
    }
    while (!_CF);
    goto LABEL_73;
  }
  v137 = (v67 >> 2) & 7;
  v72 = v71 - v137;
  v138 = (__int128 *)(v66 + 16);
  v139 = (_OWORD *)((char *)&v34[1952].f64[1] + 4);
  v140 = v71 - v137;
  do
  {
    v141 = *v138;
    *(v139 - 1) = *(v138 - 1);
    *v139 = v141;
    v138 += 2;
    v139 += 2;
    v140 -= 8;
  }
  while (v140);
  if (v137)
    goto LABEL_70;
LABEL_73:
  v78 = (unint64_t)(v69 - v70) >> 4;
  if (v68 < v78)
    memset((char *)&v34[1951].f64[1] + (v67 & 0x3FFFFFFFCLL) + 4, 255, 4 * (v78 + ~(_DWORD)v68) + 4);
  v79 = v9[57];
  v80 = v9[58] - v79;
  v81 = v1673;
  if ((v80 >> 2) >= 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 434, (uint64_t)"numIMUIntrinsics <= kMaxIMUCalibrations", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1527;
    }
    v34 = *v1673;
    v79 = v9[57];
    v82 = (v80 >> 2);
    if (v82 < 8)
      goto LABEL_82;
  }
  else
  {
    if (!(v80 >> 2))
      goto LABEL_86;
    v82 = (v80 >> 2);
    if (v82 < 8)
      goto LABEL_82;
  }
  if ((unint64_t)&v34[1952].f64[1] - v79 + 4 < 0x20)
  {
LABEL_82:
    v83 = 0;
LABEL_83:
    v84 = v83 - v82;
    v85 = 4 * v83;
    v86 = 4 * v83 + 31244;
    v87 = (int *)(v79 + v85);
    do
    {
      v88 = *v87++;
      *(_DWORD *)((char *)v34->f64 + v86) = v88;
      v86 += 4;
      _CF = __CFADD__(v84++, 1);
    }
    while (!_CF);
    goto LABEL_86;
  }
  v142 = (v80 >> 2) & 7;
  v83 = v82 - v142;
  v143 = (__int128 *)(v79 + 16);
  v144 = (_OWORD *)((char *)&v34[1953].f64[1] + 4);
  v145 = v82 - v142;
  do
  {
    v146 = *v143;
    *(v144 - 1) = *(v143 - 1);
    *v144 = v146;
    v143 += 2;
    v144 += 2;
    v145 -= 8;
  }
  while (v145);
  if (v142)
    goto LABEL_83;
LABEL_86:
  v89 = v9[45];
  v90 = v9[46] - v89;
  v91 = v90 >> 2;
  if ((v90 >> 2) < 3)
  {
    v92 = v1655;
    v1608 = (int **)(*(_QWORD *)&v1655 + 808);
    v1610 = (int **)(*(_QWORD *)&v1655 + 800);
    v1601 = *(_QWORD *)(*(_QWORD *)&v1655 + 808) - *(_QWORD *)(*(_QWORD *)&v1655 + 800);
    v93 = v1601 >> 4;
    if (!(_DWORD)v91)
      goto LABEL_97;
    v94 = (v90 >> 2);
    if (v94 < 8)
      goto LABEL_93;
    goto LABEL_92;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 443, (uint64_t)"numTimeOffsets <= kMaxTimeOffsets", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1527:
    abort();
  }
  v34 = *v1673;
  v92 = v1655;
  v1608 = (int **)(*(_QWORD *)&v1655 + 808);
  v1610 = (int **)(*(_QWORD *)&v1655 + 800);
  v1601 = *(_QWORD *)(*(_QWORD *)&v1655 + 808) - *(_QWORD *)(*(_QWORD *)&v1655 + 800);
  v89 = v9[45];
  v93 = v1601 >> 4;
  v94 = (v90 >> 2);
  if (v94 < 8)
  {
LABEL_93:
    v95 = 0;
LABEL_94:
    v96 = v95 - v94;
    v97 = 4 * v95;
    v98 = 4 * v95 + 31248;
    v99 = (int *)(v89 + v97);
    do
    {
      v100 = *v99++;
      *(_DWORD *)((char *)v34->f64 + v98) = v100;
      v98 += 4;
      _CF = __CFADD__(v96++, 1);
    }
    while (!_CF);
    goto LABEL_97;
  }
LABEL_92:
  if ((unint64_t)&v34[1953] - v89 < 0x20)
    goto LABEL_93;
  v147 = 0;
  v148 = (v90 >> 2) & 7;
  v95 = v94 - v148;
  v149 = v94 - v148;
  do
  {
    v150 = *(float64x2_t *)(v89 + v147 * 16 + 16);
    v151 = &v34[v147];
    v151[1953] = *(float64x2_t *)(v89 + v147 * 16);
    v151[1954] = v150;
    v147 += 2;
    v149 -= 8;
  }
  while (v149);
  if (v148)
    goto LABEL_94;
LABEL_97:
  v1672 = *(_QWORD *)&v92 + 57488;
  if (v93 > v91)
    memset((char *)&v34[1953] + (v90 & 0x3FFFFFFFCLL), 255, 4 * (v93 + ~(_DWORD)v91) + 4);
  v1606 = v93;
  v102 = *(char **)v1672;
  v101 = *(_QWORD *)(v1672 + 8);
  if (v101 != *(_QWORD *)v1672)
  {
    v103 = v101 - *(_QWORD *)v1672 - 1000;
    v104 = *(char **)(v1672 + 8);
    if (v103 < 0x3E8)
      goto LABEL_1547;
    v105 = v103 / 0x3E8 + 1;
    v104 = (char *)(v101 - 1000 * (v105 & 0xFFFFFFFFFFFFFELL));
    v106 = (_DWORD *)(v101 - 1008);
    v107 = v105 & 0xFFFFFFFFFFFFFELL;
    do
    {
      v106[250] = 0;
      *v106 = 0;
      v106 -= 500;
      v107 -= 2;
    }
    while (v107);
    if (v105 != (v105 & 0xFFFFFFFFFFFFFELL))
    {
LABEL_1547:
      do
      {
        *((_DWORD *)v104 - 2) = 0;
        v104 -= 1000;
      }
      while (v104 != v102);
    }
  }
  *(_QWORD *)(v1672 + 8) = v102;
  v1640 = *(_QWORD *)(*(_QWORD *)&v1655 + 1288) - *(_QWORD *)(*(_QWORD *)&v1655 + 1280);
  v108 = (v1640 >> 4);
  if (0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(v1672 + 16) - (_QWORD)v102) >> 3) < v108)
  {
    v109 = (char *)operator new(1000 * v108);
    *(_QWORD *)v1672 = v109;
    *(_QWORD *)(v1672 + 8) = v109;
    *(_QWORD *)(v1672 + 16) = &v109[1000 * v108];
    if (v102)
      operator delete(v102);
  }
  v111 = *(char **)(v1672 + 168);
  v110 = *(char **)(v1672 + 176);
  v112 = 0xAAAAAAAAAAAAAAABLL * ((v110 - v111) >> 3);
  v113 = v1674 - v112;
  if (v1674 > v112)
  {
    v114 = *(_QWORD *)(v1672 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v114 - (uint64_t)v110) >> 3) >= v113)
    {
      v134 = 24 * ((24 * v113 - 24) / 0x18) + 24;
      bzero(*(void **)(v1672 + 176), v134);
      *(_QWORD *)(v1672 + 176) = &v110[v134];
      v130 = &v110[v134];
      v135 = *(char **)(v1672 + 168);
      v136 = v1655;
      if (v135 == v130)
        goto LABEL_155;
      goto LABEL_150;
    }
    v115 = 0xAAAAAAAAAAAAAAABLL * ((v114 - (uint64_t)v111) >> 3);
    v116 = 0x5555555555555556 * ((v114 - (uint64_t)v111) >> 3);
    if (v116 <= v1674)
      v116 = v1674;
    if (v115 >= 0x555555555555555)
      v117 = 0xAAAAAAAAAAAAAAALL;
    else
      v117 = v116;
    if (v117 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v118 = 24 * v117;
    v119 = (char *)operator new(24 * v117);
    v120 = &v119[8 * ((v110 - v111) >> 3)];
    v121 = &v119[v118];
    bzero(v120, 24 * ((24 * v113 - 24) / 0x18) + 24);
    v122 = &v120[24 * ((24 * v113 - 24) / 0x18) + 24];
    if (v110 == v111)
    {
      v125 = v1672;
      *(_QWORD *)(v1672 + 168) = v120;
      *(_QWORD *)(v1672 + 176) = v122;
      *(_QWORD *)(v1672 + 184) = v121;
      v81 = v1673;
      if (!v110)
        goto LABEL_149;
    }
    else
    {
      do
      {
        v123 = v120;
        *((_QWORD *)v120 - 2) = 0;
        *((_QWORD *)v120 - 1) = 0;
        v124 = *(_OWORD *)(v110 - 24);
        v110 -= 24;
        *(_OWORD *)(v120 - 24) = v124;
        v120 -= 24;
        *((_QWORD *)v123 - 1) = *((_QWORD *)v110 + 2);
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v110 + 1) = 0;
        *((_QWORD *)v110 + 2) = 0;
      }
      while (v110 != v111);
      v125 = v1672;
      v110 = *(char **)(v1672 + 168);
      v126 = *(char **)(v1672 + 176);
      *(_QWORD *)(v1672 + 168) = v120;
      *(_QWORD *)(v1672 + 176) = v122;
      *(_QWORD *)(v1672 + 184) = v121;
      if (v126 != v110)
      {
        v127 = v126;
        v81 = v1673;
        do
        {
          v129 = (void *)*((_QWORD *)v127 - 3);
          v127 -= 24;
          v128 = v129;
          if (v129)
          {
            *((_QWORD *)v126 - 2) = v128;
            operator delete(v128);
          }
          v126 = v127;
        }
        while (v127 != v110);
        v125 = v1672;
        if (v110)
          goto LABEL_148;
LABEL_149:
        v135 = *(char **)(v125 + 168);
        v130 = *(char **)(v125 + 176);
        v136 = v1655;
        if (v135 == v130)
          goto LABEL_155;
        goto LABEL_150;
      }
      v81 = v1673;
      if (!v110)
        goto LABEL_149;
    }
LABEL_148:
    operator delete(v110);
    goto LABEL_149;
  }
  if (v1674 >= v112)
  {
    v130 = *(char **)(v1672 + 176);
    v135 = *(char **)(v1672 + 168);
    v136 = v1655;
    if (v135 == v110)
      goto LABEL_155;
    goto LABEL_150;
  }
  v130 = &v111[24 * v1674];
  if (v110 != v130)
  {
    v131 = *(char **)(v1672 + 176);
    do
    {
      v133 = (void *)*((_QWORD *)v131 - 3);
      v131 -= 24;
      v132 = v133;
      if (v133)
      {
        *((_QWORD *)v110 - 2) = v132;
        operator delete(v132);
      }
      v110 = v131;
    }
    while (v131 != v130);
  }
  *(_QWORD *)(v1672 + 176) = v130;
  v135 = *(char **)(v1672 + 168);
  v136 = v1655;
  if (v135 != v130)
  {
LABEL_150:
    v152 = v130 - v135 - 24;
    v153 = v135;
    if (v152 < 0x18)
      goto LABEL_1548;
    v154 = v152 / 0x18 + 1;
    v153 = &v135[24 * (v154 & 0x1FFFFFFFFFFFFFFELL)];
    v155 = (uint64_t *)(v135 + 24);
    v156 = v154 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v157 = *v155;
      *(v155 - 2) = *(v155 - 3);
      v155[1] = v157;
      v155 += 6;
      v156 -= 2;
    }
    while (v156);
    if (v154 != (v154 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_1548:
      do
      {
        *((_QWORD *)v153 + 1) = *(_QWORD *)v153;
        v153 += 24;
      }
      while (v153 != v130);
    }
  }
LABEL_155:
  *(_QWORD *)(v1672 + 128) = *(_QWORD *)(v1672 + 120);
  v158 = *(_QWORD *)(v1672 + 144);
  *(_DWORD *)(v1672 + 192) = 0;
  v1612 = (int *)(v1672 + 192);
  *(_QWORD *)(v1672 + 152) = v158;
  *(_QWORD *)(v1672 + 208) = *(_QWORD *)(v1672 + 200);
  v159 = *(_QWORD *)(*(_QWORD *)&v136 + 320);
  v160 = *(_QWORD *)(*(_QWORD *)&v136 + 328);
  if (v159 == v160)
  {
    v161 = 0;
  }
  else
  {
    v161 = 0;
    do
    {
      v162 = *(_QWORD *)(v159 + 8);
      if (*(_BYTE *)(v162 + 20))
      {
        *(_DWORD *)v1745 = *(_DWORD *)(v162 + 16);
        sub_20F9B8FC4((uint64_t)__dst, v1612, *(unsigned int *)v1745, v1745);
        *(_DWORD *)(*(_QWORD *)&__dst[0].f64[1] + 4) = v161++;
        v81 = v1673;
      }
      v159 += 16;
    }
    while (v159 != v160);
  }
  if (v1619 < v1636)
  {
    v163 = *(_QWORD *)(*(_QWORD *)&v1655 + 320);
    v164 = *(_QWORD *)(*(_QWORD *)&v1655 + 328);
    while (v163 != v164)
    {
      v165 = *(_QWORD *)(v163 + 8);
      if (!*(_BYTE *)(v165 + 20))
      {
        *(_DWORD *)v1745 = *(_DWORD *)(v165 + 16);
        sub_20F9B8FC4((uint64_t)__dst, v1612, *(unsigned int *)v1745, v1745);
        *(_DWORD *)(*(_QWORD *)&__dst[0].f64[1] + 4) = v161++;
        v81 = v1673;
      }
      v163 += 16;
    }
  }
  v166 = *(_QWORD **)(*(_QWORD *)&v1655 + 1880);
  if (!v166)
  {
    v1676 = 0;
    v180 = *(_QWORD *)(*(_QWORD *)&v1655 + 1760);
    v181 = *(_QWORD *)(*(_QWORD *)&v1655 + 1768);
    if (v180 != v181)
    {
LABEL_217:
      v215 = 0;
      v216 = -1;
      v1666 = v181;
      while (1)
      {
        v217 = *(_QWORD *)(v180 + 56);
        v218 = *(_QWORD *)(v180 + 64);
        v219 = *(_QWORD *)(v180 + 72);
        v220 = *(_QWORD *)(v180 + 80);
        v222 = *(_QWORD *)(v180 + 88);
        v221 = *(_QWORD *)(v180 + 96);
        v223 = *(_QWORD *)(v180 + 136);
        if (((*(unsigned __int8 *)(*(_QWORD *)(v180 + 112) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(*(_QWORD *)(v180 + 120) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(*(_QWORD *)(v180 + 128) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v218 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v217 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v219 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v220 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v222 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v221 + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(*(_QWORD *)(v180 + 104) + 4) >> 2) & 1)
           + ((*(unsigned __int8 *)(v223 + 4) >> 2) & 1))
        {
          v224 = 1;
        }
        else
        {
          v224 = 2;
        }
        if ((v224 & v1613) == 0)
          goto LABEL_219;
        v225 = *(double *)(v180 + 48);
        v226 = (_DWORD *)(v217 + 16);
        v227 = *(_DWORD *)(v223 + 16);
        if (v216 != v227)
          break;
LABEL_317:
        v325 = *(_DWORD *)(v220 + 16);
        *(_DWORD *)v1745 = *(_DWORD *)(v218 + 16);
        if (!*v1612
          || (v326 = (v325 - *(_DWORD *)(v1672 + 196)),
              v328 = *(_QWORD *)(v1672 + 200),
              v327 = *(_QWORD *)(v1672 + 208),
              0xAAAAAAAAAAAAAAABLL * ((v327 - v328) >> 2) <= v326)
          || ((v329 = v328 + 12 * v326, v329 != v327) ? (v330 = *(_BYTE *)(v329 + 8) == 0) : (v330 = 1),
              v330))
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(exception, "Key does not exist in the map.");
          __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        v331 = v225;
        v332 = *(_DWORD *)(v329 + 4);
        v333 = &v215[12 * v215[246]];
        *(float *)&v334 = *(double *)(v180 + 16);
        *(float *)&v335 = *(double *)(v180 + 24);
        v336 = *(_QWORD *)(v180 + 40);
        v333[6] = v332;
        *((_QWORD *)v333 + 4) = v218 + 16;
        *((_QWORD *)v333 + 5) = v221 + 16;
        *((float *)v333 + 12) = v331;
        *(_QWORD *)(v333 + 13) = v334 | ((unint64_t)v335 << 32);
        *((_QWORD *)v333 + 8) = v336;
        ++v215[246];
        if (!v1676)
        {
          v338 = *(_QWORD *)(v1672 + 168) + 24 * v332;
          v337 = *(_DWORD *)v1745;
          v339 = *(double *)(v180 + 40);
          v341 = *(char **)v338;
          v340 = *(__int128 **)(v338 + 8);
          if (*(__int128 **)v338 != v340)
          {
            while (*(_DWORD *)v341 != *(_DWORD *)v1745)
            {
              v341 += 16;
              if (v341 == (char *)v340)
                goto LABEL_338;
            }
          }
          if (v341 == (char *)v340)
          {
LABEL_338:
            v345 = v218;
            v346 = v226;
            v347 = v217;
            LODWORD(__dst[0].f64[0]) = *(_DWORD *)v1745;
            __dst[0].f64[1] = v339;
            sub_20F9B971C((char **)v338, v340, (int *)__dst);
            v337 = *(_DWORD *)v1745;
            v81 = v1673;
            v226 = v346;
            if (v347 != v345)
              goto LABEL_339;
LABEL_332:
            v342 = *(__int32 **)(v1672 + 128);
            v343 = wmemchr(*(__int32 **)(v1672 + 120), v337, ((uint64_t)v342 - *(_QWORD *)(v1672 + 120)) >> 2);
            if (v343)
              v344 = v343;
            else
              v344 = v342;
            if (v344 != *(__int32 **)(v1672 + 128))
              goto LABEL_219;
            sub_20EDB3C7C((void **)(v1672 + 120), v344, v1745);
          }
          else
          {
            if (v217 == v218)
              goto LABEL_332;
LABEL_339:
            v348 = *v226;
            LODWORD(__dst[0].f64[0]) = *v226;
            HIDWORD(__dst[0].f64[0]) = v337;
            v350 = *(_DWORD **)(v1672 + 144);
            v349 = *(_DWORD **)(v1672 + 152);
            if (v350 != v349)
            {
              while (*v350 != v348 || v350[1] != v337)
              {
                v350 += 2;
                if (v350 == v349)
                {
                  v350 = *(_DWORD **)(v1672 + 152);
                  break;
                }
              }
            }
            if (v350 != v349)
              goto LABEL_219;
            sub_20F9B999C((unint64_t *)(v1672 + 144), *(_QWORD *)(v1672 + 152), (uint64_t)__dst);
          }
          v81 = v1673;
          goto LABEL_219;
        }
        if (v217 != v218)
        {
          v337 = *(_DWORD *)v1745;
          goto LABEL_339;
        }
LABEL_219:
        v180 += 216;
        if (v180 == v181)
          goto LABEL_346;
      }
      v228 = *(char **)v1672;
      v229 = *(_QWORD *)(v1672 + 8);
      if (*(_QWORD *)v1672 == v229)
      {
        v230 = *(char **)(v1672 + 8);
      }
      else
      {
        v230 = *(char **)(v1672 + 8);
        if (*(_DWORD *)(v229 - 1000) >= v227)
        {
          v231 = 0x1CAC083126E978D5 * ((uint64_t)(v229 - (_QWORD)v228) >> 3);
          v230 = *(char **)v1672;
          do
          {
            v232 = v231 >> 1;
            v233 = (unsigned int *)&v230[1000 * (v231 >> 1)];
            v234 = *v233;
            v235 = (char *)(v233 + 250);
            v231 += ~(v231 >> 1);
            if (v234 < v227)
              v230 = v235;
            else
              v231 = v232;
          }
          while (v231);
        }
        if ((char *)v229 != v230 && *(_DWORD *)v230 == v227)
          goto LABEL_316;
      }
      if (!*v1612
        || (v236 = (*(_DWORD *)(v219 + 16) - *(_DWORD *)(v1672 + 196)),
            v238 = *(_QWORD *)(v1672 + 200),
            v237 = *(_QWORD *)(v1672 + 208),
            0xAAAAAAAAAAAAAAABLL * ((v237 - v238) >> 2) <= v236)
        || ((v239 = v238 + 12 * v236, v239 != v237) ? (v240 = *(_BYTE *)(v239 + 8) == 0) : (v240 = 1),
            v240))
      {
        v1592 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1592, "Key does not exist in the map.");
        __cxa_throw(v1592, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v241 = *(_DWORD *)(v239 + 4);
      LODWORD(__dst[0].f64[0]) = v227;
      LODWORD(__dst[0].f64[1]) = v241;
      *(_QWORD *)&__dst[1].f64[0] = v217 + 16;
      *(_QWORD *)&__dst[1].f64[1] = v222 + 16;
      LODWORD(__dst[62].f64[0]) = 0;
      if ((char *)v229 != v230 && *(_DWORD *)v230 == v227)
      {
LABEL_315:
        v230 = (char *)v229;
LABEL_316:
        v215 = v230 + 8;
        v216 = v227;
        v181 = v1666;
        goto LABEL_317;
      }
      v242 = v230 - v228;
      v243 = 0x1CAC083126E978D5 * ((v230 - v228) >> 3);
      v244 = *(_QWORD *)(v1672 + 16);
      if (v229 < v244)
      {
        if (v230 == (char *)v229)
        {
          *(_DWORD *)v229 = v227;
          v276 = &v228[8 * ((v230 - v228) >> 3)];
          v277 = *(__int128 *)((char *)__dst + 8);
          *((_QWORD *)v276 + 3) = *(_QWORD *)&__dst[1].f64[1];
          *(_OWORD *)(v276 + 8) = v277;
          *((_DWORD *)v276 + 248) = 0;
          if (LODWORD(__dst[62].f64[0]))
          {
            v278 = 0;
            v279 = v276 + 32;
            v280 = (unsigned int *)(v276 + 992);
            v281 = &__dst[2];
            v282 = &__dst[3 * LODWORD(__dst[62].f64[0]) + 2];
            do
            {
              v283 = &v279[48 * v278];
              v284 = *v281;
              *(float64x2_t *)(v283 + 12) = *(float64x2_t *)((char *)v281 + 12);
              *(float64x2_t *)v283 = v284;
              *(float64_t *)(v283 + 28) = *(float64_t *)((char *)&v281[1].f64[1] + 4);
              *((_QWORD *)v283 + 5) = *(_QWORD *)&v281[2].f64[1];
              v278 = *v280 + 1;
              *v280 = v278;
              v281 += 3;
            }
            while (v281 != v282);
          }
          *(_QWORD *)(v1672 + 8) = v229 + 1000;
        }
        else
        {
          *(float64x2_t *)&v1745[4] = *(float64x2_t *)((char *)__dst + 8);
          *(float64_t *)&v1745[20] = __dst[1].f64[1];
          LODWORD(__dst[62].f64[0]) = 0;
          v245 = v229 - 1000;
          v246 = v229;
          for (i = v229 - 1000; i < v229; v246 += 1000)
          {
            *(_DWORD *)v246 = *(_DWORD *)i;
            v258 = *(_OWORD *)(i + 8);
            *(_QWORD *)(v246 + 24) = *(_QWORD *)(i + 24);
            *(_OWORD *)(v246 + 8) = v258;
            *(_DWORD *)(v246 + 992) = 0;
            v259 = *(_DWORD *)(i + 992);
            if (v259)
            {
              v260 = 0;
              v261 = i + 32;
              v262 = i + 32 + 48 * v259;
              do
              {
                v263 = v246 + 32 + 48 * v260;
                v264 = *(_OWORD *)v261;
                *(_OWORD *)(v263 + 12) = *(_OWORD *)(v261 + 12);
                *(_OWORD *)v263 = v264;
                *(_QWORD *)(v263 + 28) = *(_QWORD *)(v261 + 28);
                *(_QWORD *)(v263 + 40) = *(_QWORD *)(v261 + 40);
                v260 = *(_DWORD *)(v246 + 992) + 1;
                *(_DWORD *)(v246 + 992) = v260;
                v261 += 48;
              }
              while (v261 != v262);
            }
            *(_DWORD *)(i + 992) = 0;
            i += 1000;
          }
          *(_QWORD *)(v1672 + 8) = v246;
          if ((char *)v229 != v230 + 1000)
          {
            do
            {
              v249 = (char *)(v245 - 1000);
              v250 = v229 - 1000;
              *(_DWORD *)v250 = *(_DWORD *)(v245 - 1000);
              v251 = *(_OWORD *)(v245 - 992);
              *(_QWORD *)(v250 + 24) = *(_QWORD *)(v245 - 976);
              *(_OWORD *)(v250 + 8) = v251;
              v252 = *(_DWORD *)(v245 - 8);
              *(_DWORD *)(v229 - 8) = 0;
              if (v252)
              {
                v253 = 0;
                v254 = v245 - 968;
                v255 = v245 - 968 + 48 * v252;
                do
                {
                  v256 = v229 - 968 + 48 * v253;
                  v257 = *(_OWORD *)v254;
                  *(_OWORD *)(v256 + 12) = *(_OWORD *)(v254 + 12);
                  *(_OWORD *)v256 = v257;
                  *(_QWORD *)(v256 + 28) = *(_QWORD *)(v254 + 28);
                  *(_QWORD *)(v256 + 40) = *(_QWORD *)(v254 + 40);
                  v253 = *(_DWORD *)(v229 - 8) + 1;
                  *(_DWORD *)(v229 - 8) = v253;
                  v254 += 48;
                }
                while (v254 != v255);
              }
              *(_DWORD *)(v245 - 8) = 0;
              v229 -= 1000;
              v245 -= 1000;
            }
            while (v249 != v230);
          }
          *(_DWORD *)v230 = v227;
          v248 = &v228[8 * ((v230 - v228) >> 3)];
          *(_OWORD *)(v248 + 8) = *(_OWORD *)&v1745[4];
          *((_QWORD *)v248 + 3) = *(_QWORD *)&v1745[20];
          *((_DWORD *)v248 + 248) = 0;
          v229 = (unint64_t)v230;
        }
        goto LABEL_315;
      }
      v265 = 0x1CAC083126E978D5 * ((uint64_t)(v229 - (_QWORD)v228) >> 3) + 1;
      if (v265 > 0x4189374BC6A7EFLL)
        sub_20E867F44();
      v266 = 0x1CAC083126E978D5 * ((uint64_t)(v244 - (_QWORD)v228) >> 3);
      if (2 * v266 > v265)
        v265 = 2 * v266;
      if (v266 >= 0x20C49BA5E353F7)
        v267 = 0x4189374BC6A7EFLL;
      else
        v267 = v265;
      v1648 = v218;
      v1652 = v217;
      v1628 = v228;
      if (v267)
      {
        if (v267 > 0x4189374BC6A7EFLL)
          sub_20E877A38();
        v268 = 0x1CAC083126E978D5 * ((v230 - v228) >> 3);
        v269 = v220;
        v270 = v221;
        v271 = (_DWORD *)(v217 + 16);
        v272 = (char *)operator new(1000 * v267);
        v226 = v271;
        v221 = v270;
        v220 = v269;
        v243 = v268;
        v229 = (unint64_t)&v272[1000 * v268];
        v273 = &v272[1000 * v267];
        if (v268 == v267)
          goto LABEL_269;
      }
      else
      {
        v272 = 0;
        v229 = 1000 * v243;
        v273 = 0;
        if (!v243)
        {
LABEL_269:
          v81 = v1673;
          if (v242 < 1)
          {
            v285 = v272;
            v1624 = v221;
            if (v230 == v1628)
              v286 = 1;
            else
              v286 = 2 * v243;
            if (v286 > 0x4189374BC6A7EFLL)
              sub_20E877A38();
            v287 = v226;
            v288 = (char *)operator new(1000 * v286);
            v229 = (unint64_t)&v288[1000 * (v286 >> 2)];
            v273 = &v288[1000 * v286];
            if (v285)
            {
              operator delete(v285);
              v275 = LODWORD(__dst[0].f64[0]);
            }
            else
            {
              v275 = v227;
            }
            v81 = v1673;
            v226 = v287;
            v221 = v1624;
          }
          else
          {
            v274 = v243 + 2;
            if (v243 >= -1)
              v274 = v243 + 1;
            v229 -= 1000 * (v274 >> 1);
            v275 = v227;
          }
LABEL_287:
          *(_DWORD *)v229 = v275;
          *(float64_t *)(v229 + 24) = __dst[1].f64[1];
          *(float64x2_t *)(v229 + 8) = *(float64x2_t *)((char *)__dst + 8);
          *(_DWORD *)(v229 + 992) = 0;
          if (LODWORD(__dst[62].f64[0]))
          {
            v289 = 0;
            v290 = &__dst[2];
            v291 = &__dst[3 * LODWORD(__dst[62].f64[0]) + 2];
            do
            {
              v292 = v229 + 32 + 48 * v289;
              *(float64x2_t *)v292 = *v290;
              *(float64x2_t *)(v292 + 12) = *(float64x2_t *)((char *)v290 + 12);
              *(float64_t *)(v292 + 28) = *(float64_t *)((char *)&v290[1].f64[1] + 4);
              *(float64_t *)(v292 + 40) = v290[2].f64[1];
              v289 = *(_DWORD *)(v229 + 992) + 1;
              *(_DWORD *)(v229 + 992) = v289;
              v290 += 3;
            }
            while (v290 != v291);
          }
          LODWORD(__dst[62].f64[0]) = 0;
          v293 = *(char **)v1672;
          v294 = v229;
          if (*(char **)v1672 != v230)
          {
            v295 = v230;
            v296 = v229;
            do
            {
              v294 = v296 - 1000;
              v297 = v295 - 1000;
              *(_DWORD *)v294 = *((_DWORD *)v295 - 250);
              v298 = *((_OWORD *)v295 - 62);
              *(_QWORD *)(v294 + 24) = *((_QWORD *)v295 - 122);
              *(_OWORD *)(v294 + 8) = v298;
              *(_DWORD *)(v296 - 8) = 0;
              v299 = *((_DWORD *)v295 - 2);
              if (v299)
              {
                v300 = 0;
                v301 = (uint64_t)&v295[48 * v299 - 968];
                v302 = -968;
                do
                {
                  v303 = &v295[v302];
                  v304 = v296 - 968 + 48 * v300;
                  v305 = *(_OWORD *)&v295[v302];
                  *(_OWORD *)(v304 + 12) = *(_OWORD *)&v295[v302 + 12];
                  *(_OWORD *)v304 = v305;
                  *(_QWORD *)(v304 + 28) = *(_QWORD *)&v295[v302 + 28];
                  *(_QWORD *)(v304 + 40) = *(_QWORD *)&v295[v302 + 40];
                  v300 = *(_DWORD *)(v296 - 8) + 1;
                  *(_DWORD *)(v296 - 8) = v300;
                  v302 += 48;
                }
                while (v303 + 48 != (char *)v301);
              }
              v295 -= 1000;
              v296 -= 1000;
            }
            while (v297 != v293);
          }
          v306 = v229 + 1000;
          v307 = *(char **)(v1672 + 8);
          if (v307 == v230)
          {
            v308 = *(char **)v1672;
            *(_QWORD *)v1672 = v294;
            *(_QWORD *)(v1672 + 8) = v306;
            *(_QWORD *)(v1672 + 16) = v273;
            v309 = v230 - v308;
            if (v230 == v308)
              goto LABEL_312;
          }
          else
          {
            do
            {
              *(_DWORD *)v306 = *(_DWORD *)v230;
              v310 = *(_OWORD *)(v230 + 8);
              *(_QWORD *)(v306 + 24) = *((_QWORD *)v230 + 3);
              *(_OWORD *)(v306 + 8) = v310;
              *(_DWORD *)(v306 + 992) = 0;
              v311 = *((_DWORD *)v230 + 248);
              if (v311)
              {
                v312 = 0;
                v313 = (uint64_t)&v230[48 * v311 + 32];
                v314 = 32;
                do
                {
                  v315 = &v230[v314];
                  v316 = v306 + 32 + 48 * v312;
                  v317 = *(_OWORD *)&v230[v314];
                  *(_OWORD *)(v316 + 12) = *(_OWORD *)&v230[v314 + 12];
                  *(_OWORD *)v316 = v317;
                  *(_QWORD *)(v316 + 28) = *(_QWORD *)&v230[v314 + 28];
                  *(_QWORD *)(v316 + 40) = *(_QWORD *)&v230[v314 + 40];
                  v312 = *(_DWORD *)(v306 + 992) + 1;
                  *(_DWORD *)(v306 + 992) = v312;
                  v314 += 48;
                }
                while (v315 + 48 != (char *)v313);
              }
              v230 += 1000;
              v306 += 1000;
            }
            while (v230 != v307);
            v308 = *(char **)v1672;
            v230 = *(char **)(v1672 + 8);
            *(_QWORD *)v1672 = v294;
            *(_QWORD *)(v1672 + 8) = v306;
            *(_QWORD *)(v1672 + 16) = v273;
            v309 = v230 - v308;
            if (v230 == v308)
              goto LABEL_312;
          }
          v318 = v309 - 1000;
          if (v318 >= 0x3E8)
          {
            v320 = v318 / 0x3E8 + 1;
            v319 = &v230[-1000 * (v320 & 0xFFFFFFFFFFFFFELL)];
            v321 = v230 - 1008;
            v322 = v320 & 0xFFFFFFFFFFFFFELL;
            do
            {
              *((_DWORD *)v321 + 250) = 0;
              *(_DWORD *)v321 = 0;
              v321 -= 2000;
              v322 -= 2;
            }
            while (v322);
            if (v320 == (v320 & 0xFFFFFFFFFFFFFELL))
              goto LABEL_312;
          }
          else
          {
            v319 = v230;
          }
          do
          {
            *((_DWORD *)v319 - 2) = 0;
            v319 -= 1000;
          }
          while (v319 != v308);
LABEL_312:
          if (v308)
          {
            v323 = v226;
            v324 = v221;
            operator delete(v308);
            v221 = v324;
            v226 = v323;
          }
          v218 = v1648;
          v217 = v1652;
          goto LABEL_315;
        }
      }
      v275 = v227;
      v81 = v1673;
      goto LABEL_287;
    }
    goto LABEL_346;
  }
  v167 = v166[39];
  v168 = v166[8];
  v169 = (uint64_t *)v166[225];
  if (v169)
  {
    v170 = 0;
    do
    {
      if (*v1612)
      {
        v171 = (*((_DWORD *)v169 + 6) - *(_DWORD *)(v1672 + 196));
        v173 = *(_QWORD *)(v1672 + 200);
        v172 = *(_QWORD *)(v1672 + 208);
        if (0xAAAAAAAAAAAAAAABLL * ((v172 - v173) >> 2) > v171)
        {
          v174 = v173 + 12 * v171;
          if (v174 != v172 && *(_BYTE *)(v174 + 8) != 0)
          {
            v176 = *(_QWORD *)(v1672 + 168) + 24 * *(unsigned int *)(v174 + 4);
            v177 = *((double *)v169 + 13);
            v179 = *(char **)v176;
            v178 = *(__int128 **)(v176 + 8);
            if (*(__int128 **)v176 != v178)
            {
              while (*(_DWORD *)v179 != *((_DWORD *)v169 + 8))
              {
                v179 += 16;
                if (v179 == (char *)v178)
                  goto LABEL_182;
              }
            }
            if (v179 == (char *)v178)
            {
LABEL_182:
              LODWORD(__dst[0].f64[0]) = *((_DWORD *)v169 + 8);
              __dst[0].f64[1] = v177;
              sub_20F9B971C((char **)v176, v178, (int *)__dst);
            }
            ++v170;
          }
        }
      }
      v169 = (uint64_t *)*v169;
    }
    while (v169);
  }
  else
  {
    v170 = 0;
  }
  v182 = v1672;
  v183 = *(_BYTE **)(v1672 + 120);
  if (v167 > (uint64_t)(*(_QWORD *)(v1672 + 136) - (_QWORD)v183) >> 2)
  {
    if (v167 >> 62)
      sub_20E867F44();
    v184 = *(_BYTE **)(v1672 + 128);
    v185 = (char *)operator new(4 * v167);
    v186 = (v184 - v183) >> 2;
    v187 = &v185[4 * v186];
    v188 = v187;
    if (v184 == v183)
      goto LABEL_196;
    v189 = v184 - v183 - 4;
    if (v189 >= 0x2C)
    {
      v188 = &v185[4 * v186];
      if ((unint64_t)(v184 - &v185[(v184 - v183) & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v190 = (v189 >> 2) + 1;
        v191 = 4 * (v190 & 0x7FFFFFFFFFFFFFF8);
        v192 = &v184[-v191];
        v188 = &v187[-v191];
        v193 = &v185[4 * v186 - 16];
        v194 = (__int128 *)(v184 - 16);
        v195 = v190 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v196 = *v194;
          *((_OWORD *)v193 - 1) = *(v194 - 1);
          *(_OWORD *)v193 = v196;
          v193 -= 32;
          v194 -= 2;
          v195 -= 8;
        }
        while (v195);
        v184 = v192;
        if (v190 == (v190 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_196:
          v182 = v1672;
          *(_QWORD *)(v1672 + 120) = v188;
          *(_QWORD *)(v1672 + 128) = v187;
          *(_QWORD *)(v1672 + 136) = &v185[4 * v167];
          if (v183)
            operator delete(v183);
          goto LABEL_198;
        }
      }
    }
    else
    {
      v188 = &v185[4 * v186];
    }
    do
    {
      v197 = *((_DWORD *)v184 - 1);
      v184 -= 4;
      *((_DWORD *)v188 - 1) = v197;
      v188 -= 4;
    }
    while (v184 != v183);
    goto LABEL_196;
  }
LABEL_198:
  v198 = *(_BYTE **)(v182 + 144);
  if (v167 <= (uint64_t)(*(_QWORD *)(v182 + 160) - (_QWORD)v198) >> 3)
    goto LABEL_210;
  if (v167 >> 61)
    sub_20E92CED8();
  v199 = *(_BYTE **)(v1672 + 152);
  v200 = (char *)operator new(8 * v167);
  v201 = (v199 - v198) >> 3;
  v202 = &v200[8 * v201];
  v203 = v202;
  if (v199 != v198)
  {
    v204 = v199 - v198 - 8;
    if (v204 < 0x58)
    {
      v203 = &v200[8 * v201];
      do
      {
LABEL_207:
        v212 = *((_QWORD *)v199 - 1);
        v199 -= 8;
        *((_QWORD *)v203 - 1) = v212;
        v203 -= 8;
      }
      while (v199 != v198);
      goto LABEL_208;
    }
    v203 = &v200[8 * v201];
    if (v199 - v200 - ((v199 - v198) & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_207;
    v205 = (v204 >> 3) + 1;
    v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
    v207 = &v199[-v206];
    v203 = &v202[-v206];
    v208 = &v200[8 * v201 - 16];
    v209 = (__int128 *)(v199 - 16);
    v210 = v205 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v211 = *v209;
      *((_OWORD *)v208 - 1) = *(v209 - 1);
      *(_OWORD *)v208 = v211;
      v208 -= 32;
      v209 -= 2;
      v210 -= 4;
    }
    while (v210);
    v199 = v207;
    if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_207;
  }
LABEL_208:
  *(_QWORD *)(v1672 + 144) = v203;
  *(_QWORD *)(v1672 + 152) = v202;
  *(_QWORD *)(v1672 + 160) = &v200[8 * v167];
  if (v198)
    operator delete(v198);
LABEL_210:
  v81 = v1673;
  v214 = v168 >= v1674 && v170 == v167 * v1674;
  v1676 = v214;
  v180 = *(_QWORD *)(*(_QWORD *)&v1655 + 1760);
  v181 = *(_QWORD *)(*(_QWORD *)&v1655 + 1768);
  if (v180 != v181)
    goto LABEL_217;
LABEL_346:
  v352 = (_QWORD *)v1672;
  v353 = 0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(v1672 + 8) - *(_QWORD *)v1672) >> 3);
  v1604 = v1640 >> 4;
  v354 = 9 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17520) + 12)
       + 6
       * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17528) + 12)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17512) + 12)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17536) + 12))
       + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17552) + 12)
       + 4
       * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17568) + 12)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17560) + 12))
       + 3
       * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17576) + 12)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17544) + 12)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v1655 + 17584) + 12));
  v355 = *v81;
  v356 = (uint64_t)&(*v81)[1940].f64[1];
  *(_DWORD *)v356 = v354;
  *(_DWORD *)(v356 + 4) = v353;
  *(_DWORD *)(v356 + 8) = (v1640 >> 4) - v353;
  *(_DWORD *)(v356 + 12) = v1656;
  *(_DWORD *)(v356 + 20) = v1644;
  *(_BYTE *)(v356 + 26) = 1;
  *(_BYTE *)(v356 + 233) = 0;
  v355[1955].f64[1] = -1.0;
  LODWORD(v355[134092].f64[0]) = 1000;
  HIDWORD(v355[22738].f64[1]) = 5;
  bzero(&v355[2772], 0x4B080uLL);
  bzero(&v355[78616], 0x39210uLL);
  if ((_DWORD)v353)
    bzero(&v355[22588].f64[1], 8 * v353);
  v1594 = v354;
  v1597 = v353;
  if (v354 + (_DWORD)v353)
    bzero(&v355[21980], 8 * (v354 + v353));
  v357 = (char **)(v1672 + 24);
  *(_QWORD *)(v1672 + 32) = *(_QWORD *)(v1672 + 24);
  v358 = (void **)(v1672 + 96);
  *(_QWORD *)(v1672 + 104) = *(_QWORD *)(v1672 + 96);
  v359 = *(__int32 **)(v1672 + 144);
  v360 = *(__int32 **)(v1672 + 152);
  while (v359 != v360)
  {
    v362 = v352;
    v363 = (__int32 *)v352[12];
    v364 = (__int32 *)v352[13];
    v365 = wmemchr(v363, *v359, v364 - v363);
    if (v365)
      v366 = v365;
    else
      v366 = v364;
    v367 = (__int32 *)v362[13];
    if (v366 == v367)
    {
      sub_20EDB3C7C(v358, v366, (char *)v359);
      v362 = (_QWORD *)v1672;
      v367 = *(__int32 **)(v1672 + 104);
    }
    v368 = wmemchr((__int32 *)v362[12], v359[1], ((uint64_t)v367 - v362[12]) >> 2);
    if (v368)
      v369 = v368;
    else
      v369 = v367;
    if (v369 == (__int32 *)v362[13])
    {
      sub_20EDB3C7C(v358, v369, (char *)v359 + 4);
      v362 = (_QWORD *)v1672;
      v371 = *(char **)(v1672 + 32);
      v370 = *(_QWORD *)(v1672 + 40);
      if ((unint64_t)v371 < v370)
      {
LABEL_351:
        v352 = v362;
        *(_QWORD *)v371 = *(_QWORD *)v359;
        v361 = (uint64_t)(v371 + 8);
        goto LABEL_352;
      }
    }
    else
    {
      v371 = (char *)v362[4];
      v370 = v362[5];
      if ((unint64_t)v371 < v370)
        goto LABEL_351;
    }
    v372 = *v357;
    v373 = v371 - *v357;
    v374 = v373 >> 3;
    v375 = (v373 >> 3) + 1;
    if (v375 >> 61)
      sub_20E92CED8();
    v376 = v370 - (_QWORD)v372;
    if (v376 >> 2 > v375)
      v375 = v376 >> 2;
    if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
      v377 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v377 = v375;
    if (v377)
    {
      if (v377 >> 61)
        sub_20E877A38();
      v378 = operator new(8 * v377);
      v379 = &v378[8 * v374];
      *v379 = *(_QWORD *)v359;
      v361 = (uint64_t)(v379 + 1);
      v380 = (char *)(v371 - v372);
      if (v371 == v372)
      {
LABEL_384:
        v391 = &v378[8 * v377];
        v352 = (_QWORD *)v1672;
        *(_QWORD *)(v1672 + 24) = v379;
        *(_QWORD *)(v1672 + 32) = v361;
        *(_QWORD *)(v1672 + 40) = v391;
        if (!v371)
          goto LABEL_352;
LABEL_385:
        operator delete(v371);
        goto LABEL_352;
      }
    }
    else
    {
      v378 = 0;
      v379 = (_QWORD *)(8 * v374);
      *(_QWORD *)(8 * v374) = *(_QWORD *)v359;
      v361 = 8 * v374 + 8;
      v380 = (char *)(v371 - v372);
      if (v371 == v372)
        goto LABEL_384;
    }
    v381 = (unint64_t)(v380 - 8);
    if (v381 < 0x58)
      goto LABEL_1549;
    if ((unint64_t)(v371 - v378 - v373) < 0x20)
      goto LABEL_1549;
    v382 = (v381 >> 3) + 1;
    v383 = 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
    v384 = &v371[-v383];
    v379 = (_QWORD *)((char *)v379 - v383);
    v385 = &v378[8 * v374 - 16];
    v386 = v371 - 16;
    v387 = v382 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v388 = *(_OWORD *)v386;
      *(v385 - 1) = *((_OWORD *)v386 - 1);
      *v385 = v388;
      v385 -= 2;
      v386 -= 32;
      v387 -= 4;
    }
    while (v387);
    v371 = v384;
    if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1549:
      do
      {
        v389 = *((_QWORD *)v371 - 1);
        v371 -= 8;
        *--v379 = v389;
      }
      while (v371 != v372);
    }
    v371 = *v357;
    v390 = &v378[8 * v377];
    v352 = (_QWORD *)v1672;
    *(_QWORD *)(v1672 + 24) = v379;
    *(_QWORD *)(v1672 + 32) = v361;
    *(_QWORD *)(v1672 + 40) = v390;
    if (v371)
      goto LABEL_385;
LABEL_352:
    v352[4] = v361;
    v359 += 2;
  }
  v392 = (__int32 *)v352[15];
  v393 = (__int32 *)v352[16];
  while (v392 != v393)
  {
    v395 = *v392;
    v396 = *(__int32 **)(v1672 + 104);
    v397 = wmemchr(*(__int32 **)(v1672 + 96), *v392, ((uint64_t)v396 - *(_QWORD *)(v1672 + 96)) >> 2);
    if (v397)
      v398 = v397;
    else
      v398 = v396;
    if (v398 == *(__int32 **)(v1672 + 104))
    {
      v399 = *(_QWORD *)&v395 | 0xFFFFFFFF00000000;
      v400 = v1672;
      v402 = *(char **)(v1672 + 32);
      v401 = *(_QWORD *)(v1672 + 40);
      if ((unint64_t)v402 < v401)
      {
        *(_QWORD *)v402 = v399;
        v394 = (uint64_t)(v402 + 8);
        goto LABEL_388;
      }
      v403 = *v357;
      v404 = v402 - *v357;
      v405 = v404 >> 3;
      v406 = (v404 >> 3) + 1;
      if (v406 >> 61)
        sub_20E92CED8();
      v407 = v401 - (_QWORD)v403;
      if (v407 >> 2 > v406)
        v406 = v407 >> 2;
      if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF8)
        v408 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v408 = v406;
      if (v408)
      {
        if (v408 >> 61)
          sub_20E877A38();
        v409 = operator new(8 * v408);
        v410 = (unint64_t *)&v409[8 * v405];
        *v410 = v399;
        v394 = (uint64_t)(v410 + 1);
        v411 = (char *)(v402 - v403);
        if (v402 != v403)
        {
LABEL_405:
          v412 = (unint64_t)(v411 - 8);
          if (v412 < 0x58)
            goto LABEL_1550;
          if ((unint64_t)(v402 - &v409[v404]) < 0x20)
            goto LABEL_1550;
          v413 = (v412 >> 3) + 1;
          v414 = 8 * (v413 & 0x3FFFFFFFFFFFFFFCLL);
          v415 = &v402[-v414];
          v410 = (unint64_t *)((char *)v410 - v414);
          v416 = &v409[8 * v405 - 16];
          v417 = v402 - 16;
          v418 = v413 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v419 = *(_OWORD *)v417;
            *(v416 - 1) = *((_OWORD *)v417 - 1);
            *v416 = v419;
            v416 -= 2;
            v417 -= 32;
            v418 -= 4;
          }
          while (v418);
          v402 = v415;
          if (v413 != (v413 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1550:
            do
            {
              v420 = *((_QWORD *)v402 - 1);
              v402 -= 8;
              *--v410 = v420;
            }
            while (v402 != v403);
          }
          v402 = *v357;
          v421 = &v409[8 * v408];
          v400 = v1672;
          *(_QWORD *)(v1672 + 24) = v410;
          *(_QWORD *)(v1672 + 32) = v394;
          *(_QWORD *)(v1672 + 40) = v421;
          if (!v402)
            goto LABEL_388;
LABEL_415:
          operator delete(v402);
LABEL_388:
          *(_QWORD *)(v400 + 32) = v394;
          goto LABEL_389;
        }
      }
      else
      {
        v409 = 0;
        v410 = (unint64_t *)(8 * v405);
        *(_QWORD *)(8 * v405) = v399;
        v394 = 8 * v405 + 8;
        v411 = (char *)(v402 - v403);
        if (v402 != v403)
          goto LABEL_405;
      }
      v422 = &v409[8 * v408];
      v400 = v1672;
      *(_QWORD *)(v1672 + 24) = v410;
      *(_QWORD *)(v1672 + 32) = v394;
      *(_QWORD *)(v1672 + 40) = v422;
      if (v402)
        goto LABEL_415;
      goto LABEL_388;
    }
LABEL_389:
    ++v392;
  }
  v423 = *(__int32 **)(*(_QWORD *)&v1655 + 512);
  v424 = *(__int32 **)(*(_QWORD *)&v1655 + 520);
  while (v423 != v424)
  {
    v426 = *v423;
    v427 = v1672;
    v428 = *(__int32 **)(v1672 + 104);
    v429 = wmemchr(*(__int32 **)(v1672 + 96), *v423, ((uint64_t)v428 - *(_QWORD *)(v1672 + 96)) >> 2);
    if (v429)
      v430 = v429;
    else
      v430 = v428;
    if (v430 == *(__int32 **)(v1672 + 104))
    {
      v431 = *(__int32 **)(v1672 + 128);
      v432 = wmemchr(*(__int32 **)(v1672 + 120), v426, ((uint64_t)v431 - *(_QWORD *)(v1672 + 120)) >> 2);
      v433 = v432 ? v432 : v431;
      if (v433 == *(__int32 **)(v1672 + 128))
      {
        v434 = *(_QWORD *)&v426 | 0xFFFFFFFF00000000;
        v436 = *(char **)(v1672 + 32);
        v435 = *(_QWORD *)(v1672 + 40);
        if ((unint64_t)v436 < v435)
        {
          *(_QWORD *)v436 = v434;
          v425 = (uint64_t)(v436 + 8);
          goto LABEL_418;
        }
        v437 = *v357;
        v438 = v436 - *v357;
        v439 = v438 >> 3;
        v440 = (v438 >> 3) + 1;
        if (v440 >> 61)
          sub_20E92CED8();
        v441 = v435 - (_QWORD)v437;
        if (v441 >> 2 > v440)
          v440 = v441 >> 2;
        if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8)
          v442 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v442 = v440;
        if (v442)
        {
          if (v442 >> 61)
            sub_20E877A38();
          v443 = operator new(8 * v442);
          v444 = (unint64_t *)&v443[8 * v439];
          *v444 = v434;
          v425 = (uint64_t)(v444 + 1);
          v445 = (char *)(v436 - v437);
          if (v436 != v437)
          {
LABEL_439:
            v446 = (unint64_t)(v445 - 8);
            if (v446 < 0x58)
              goto LABEL_1551;
            if ((unint64_t)(v436 - &v443[v438]) < 0x20)
              goto LABEL_1551;
            v447 = (v446 >> 3) + 1;
            v448 = 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
            v449 = &v436[-v448];
            v444 = (unint64_t *)((char *)v444 - v448);
            v450 = &v443[8 * v439 - 16];
            v451 = v436 - 16;
            v452 = v447 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v453 = *(_OWORD *)v451;
              *(v450 - 1) = *((_OWORD *)v451 - 1);
              *v450 = v453;
              v450 -= 2;
              v451 -= 32;
              v452 -= 4;
            }
            while (v452);
            v436 = v449;
            if (v447 != (v447 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1551:
              do
              {
                v454 = *((_QWORD *)v436 - 1);
                v436 -= 8;
                *--v444 = v454;
              }
              while (v436 != v437);
            }
            v436 = *v357;
            v427 = v1672;
            *(_QWORD *)(v1672 + 24) = v444;
            *(_QWORD *)(v1672 + 32) = v425;
            *(_QWORD *)(v1672 + 40) = &v443[8 * v442];
            if (!v436)
              goto LABEL_418;
LABEL_449:
            operator delete(v436);
LABEL_418:
            *(_QWORD *)(v427 + 32) = v425;
            goto LABEL_419;
          }
        }
        else
        {
          v443 = 0;
          v444 = (unint64_t *)(8 * v439);
          *(_QWORD *)(8 * v439) = v434;
          v425 = 8 * v439 + 8;
          v445 = (char *)(v436 - v437);
          if (v436 != v437)
            goto LABEL_439;
        }
        v427 = v1672;
        *(_QWORD *)(v1672 + 24) = v444;
        *(_QWORD *)(v1672 + 32) = v425;
        *(_QWORD *)(v1672 + 40) = &v443[8 * v442];
        if (v436)
          goto LABEL_449;
        goto LABEL_418;
      }
    }
LABEL_419:
    v423 += 4;
  }
  v456 = (uint64_t *)(v1672 + 24);
  v455 = *(_QWORD *)(v1672 + 24);
  v457 = *(unsigned int **)(v1672 + 32);
  v458 = 126 - 2 * __clz(((uint64_t)v457 - v455) >> 3);
  if (v457 == (unsigned int *)v455)
    v459 = 0;
  else
    v459 = v458;
  sub_20F9BA068(v455, v457, (uint64_t)__dst, v459, 1);
  v463 = *(_QWORD *)(v1672 + 248);
  v464 = *v456;
  v465 = *(_QWORD *)(v1672 + 32) - *v456;
  v466 = (*(_QWORD *)(v1672 + 256) - v463) >> 2;
  v1638 = (unint64_t *)(v1672 + 248);
  if (v465 >> 3 <= v466)
  {
    if (v465 >> 3 < v466)
      *(_QWORD *)(v1672 + 256) = v463 + 4 * (v465 >> 3);
  }
  else
  {
    sub_20E93DC84(v1672 + 248, (v465 >> 3) - v466);
    v464 = *(_QWORD *)(v1672 + 24);
    v465 = *(_QWORD *)(v1672 + 32) - v464;
  }
  v467 = ((unint64_t)v465 >> 3);
  v468 = v465 & 0x7FFFFFFF8;
  if ((v465 & 0x7FFFFFFF8) != 0)
  {
    v469 = *v1638;
    if (v467 > 8 && (v469 >= v464 + v468 || v464 + 4 >= v469 + 4 * v467))
    {
      v471 = ((unint64_t)v465 >> 3) & 7;
      if (!v471)
        v471 = 8;
      v470 = v467 - v471;
      v472 = (const float *)(v464 + 36);
      v473 = (float64x2_t *)(v469 + 16);
      v474.i64[0] = -1;
      v474.i64[1] = -1;
      v460.i64[0] = 0x200000002;
      v460.i64[1] = 0x200000002;
      v475 = v470;
      do
      {
        v476 = v472 - 8;
        v477 = (unsigned __int128)vld2q_f32(v476);
        v478 = (unsigned __int128)vld2q_f32(v472);
        v479 = vceqq_s32((int32x4_t)v477, v474);
        v480 = vceqq_s32((int32x4_t)v478, v474);
        _Q2 = (float64x2_t)vsubq_s32((int32x4_t)vbicq_s8(v460, (int8x16_t)v479), v479);
        v462 = (float64x2_t)vsubq_s32((int32x4_t)vbicq_s8(v460, (int8x16_t)v480), v480);
        v473[-1] = _Q2;
        *v473 = v462;
        v472 += 16;
        v473 += 2;
        v475 -= 8;
      }
      while (v475);
    }
    else
    {
      v470 = 0;
    }
    v481 = v467 - v470;
    v482 = (int *)(v469 + 4 * v470);
    v483 = (int *)(v464 + 8 * v470 + 4);
    do
    {
      v484 = *v483;
      v483 += 2;
      if (v484 == -1)
        v485 = 1;
      else
        v485 = 2;
      *v482++ = v485;
      --v481;
    }
    while (v481);
  }
  v487 = (char **)(v1672 + 72);
  v486 = *(_QWORD *)(v1672 + 72);
  *(_QWORD *)(v1672 + 232) = *(_QWORD *)(v1672 + 224);
  v488 = *v1673;
  v489 = *v1673 + 28372;
  v490 = (unsigned int *)&(*v1673)[28281];
  LODWORD(v489->f64[0]) = 0;
  LODWORD(v489[6].f64[1]) = 0;
  *v490 = 0;
  v1595 = v490;
  v490[362] = 0;
  *(_QWORD *)(v1672 + 80) = v486;
  if (v468)
  {
    v491 = 0;
    v492 = 0;
    do
    {
      v494 = (unsigned int *)(*(_QWORD *)(v1672 + 24) + 8 * v491);
      v495 = *v494;
      v496 = v494[1];
      v497 = *(char **)(v1672 + 72);
      v498 = *(_QWORD *)(v1672 + 80);
      if (v497 != (char *)v498)
      {
        while (*(_DWORD *)v497 != v495)
        {
          v497 += 16;
          if (v497 == (char *)v498)
            goto LABEL_481;
        }
      }
      if (v497 == (char *)v498)
      {
LABEL_481:
        __dst[0] = (float64x2_t)v495;
        v497 = sub_20F9BB250(v487, v498, (uint64_t)__dst);
      }
      *((_DWORD *)v497 + 1) = v491;
      *((_DWORD *)v497 + 2) = 0;
      *((_DWORD *)v497 + 3) = v492;
      if (v496 != -1)
      {
        v493 = *(char **)(v1672 + 72);
        v499 = *(_QWORD *)(v1672 + 80);
        if (v493 != (char *)v499)
        {
          while (*(_DWORD *)v493 != v496)
          {
            v493 += 16;
            if (v493 == (char *)v499)
              goto LABEL_473;
          }
        }
        if (v493 == (char *)v499)
        {
LABEL_473:
          __dst[0] = (float64x2_t)v496;
          v493 = sub_20F9BB250(v487, v499, (uint64_t)__dst);
        }
        ++v492;
        *((_DWORD *)v493 + 1) = v491;
        *((_DWORD *)v493 + 2) = 1;
        *((_DWORD *)v493 + 3) = v492;
      }
      ++v491;
      ++v492;
    }
    while (v491 != v467);
    v500 = *v1673;
  }
  else
  {
    v500 = v488;
  }
  v501 = (*(_QWORD *)(*(_QWORD *)&v1655 + 328) - *(_QWORD *)(*(_QWORD *)&v1655 + 320)) >> 4;
  LODWORD(v500[2210].f64[0]) = 0;
  v502 = (uint64_t)v500[2210].f64 + 4;
  if ((_DWORD)v501)
  {
    v503 = 0;
    do
    {
      *(_DWORD *)(v502 + 4 * (v503 >> 5)) &= ~(1 << v503);
      ++v503;
    }
    while ((_DWORD)v501 != v503);
    v504 = 0;
    LODWORD(v500[2210].f64[0]) = v501;
    LODWORD(v500[2210].f64[1]) = 0;
    do
    {
      *((_DWORD *)&v500[2210].f64[1] + (v504 >> 5) + 1) &= ~(1 << v504);
      ++v504;
    }
    while ((_DWORD)v501 != v504);
  }
  LODWORD(v500[2210].f64[1]) = v501;
  v505 = *(_QWORD *)(*(_QWORD *)&v1655 + 1552);
  v506 = *(_QWORD *)(*(_QWORD *)&v1655 + 1544);
  if (v505 != v506)
  {
    v500[2209].f64[0] = *(float64_t *)(*(_QWORD *)(v506 + 24) + 16);
    do
    {
      if (*(_BYTE *)(v506 + 40))
      {
        if (!*v1612
          || (v507 = (*(_DWORD *)(v506 + 8) - *(_DWORD *)(v1672 + 196)),
              v508 = *(_QWORD *)(v1672 + 200),
              v509 = *(_QWORD *)(v1672 + 208),
              0xAAAAAAAAAAAAAAABLL * ((v509 - v508) >> 2) <= v507)
          || ((v510 = v508 + 12 * v507, v510 != v509) ? (v511 = *(_BYTE *)(v510 + 8) == 0) : (v511 = 1),
              v511))
        {
          v512 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(v512, "Key does not exist in the map.");
          __cxa_throw(v512, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        *(_DWORD *)(v502 + (((unint64_t)*(unsigned int *)(v510 + 4) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v510 + 4);
      }
      v506 += 144;
    }
    while (v506 != v505);
  }
  v513 = *(_QWORD *)(*(_QWORD *)&v1655 + 1576);
  v514 = *(_QWORD *)(*(_QWORD *)&v1655 + 1568);
  if (v513 != v514)
  {
    v500[2209].f64[1] = *(float64_t *)(*(_QWORD *)(v514 + 24) + 16);
    v515 = (uint64_t)&v500[2210].f64[1] + 4;
    do
    {
      if (*(_BYTE *)(v514 + 40))
      {
        if (!*v1612
          || (v516 = (*(_DWORD *)(*(_QWORD *)(v514 + 48) + 16) - *(_DWORD *)(v1672 + 196)),
              v518 = *(_QWORD *)(v1672 + 200),
              v517 = *(_QWORD *)(v1672 + 208),
              v519 = 0xAAAAAAAAAAAAAAABLL * ((v517 - v518) >> 2),
              v519 <= v516)
          || ((v520 = v518 + 12 * v516, v520 != v517) ? (v521 = *(_BYTE *)(v520 + 8) == 0) : (v521 = 1),
              v521))
        {
          v1588 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(v1588, "Key does not exist in the map.");
          __cxa_throw(v1588, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        *(_DWORD *)(v515 + (((unint64_t)*(unsigned int *)(v520 + 4) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v520 + 4);
        if (!*v1612
          || (v522 = (*(_DWORD *)(*(_QWORD *)(v514 + 56) + 16) - *(_DWORD *)(v1672 + 196)), v519 <= v522)
          || ((v523 = v518 + 12 * v522, v523 != v517) ? (v524 = *(_BYTE *)(v523 + 8) == 0) : (v524 = 1),
              v524))
        {
          v525 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(v525, "Key does not exist in the map.");
          __cxa_throw(v525, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        *(_DWORD *)(v515 + (((unint64_t)*(unsigned int *)(v523 + 4) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v523 + 4);
      }
      v514 += 152;
    }
    while (v514 != v513);
  }
  v1667 = v488;
  v526 = (unsigned int *)&v500[36167];
  LODWORD(v500[36167].f64[0]) = 0;
  v527 = *(_QWORD *)(*(_QWORD *)&v1655 + 1528);
  _X21 = *(_QWORD *)(*(_QWORD *)&v1655 + 1520);
  if (_X21 != v527)
  {
    v529 = 0;
    v530 = v500 + 34172;
    do
    {
      __asm { PRFM            #0, [X21,#0x2878] }
      if (!*v1612
        || (v534 = *(_DWORD *)(v1672 + 196),
            v535 = (*(_DWORD *)(*(_QWORD *)(_X21 + 5024) + 16) - v534),
            v537 = *(_QWORD *)(v1672 + 200),
            v536 = *(_QWORD *)(v1672 + 208),
            v538 = 0xAAAAAAAAAAAAAAABLL * ((v536 - v537) >> 2),
            v538 <= v535)
        || ((v539 = v537 + 12 * v535, v539 != v536) ? (v540 = *(_BYTE *)(v539 + 8) == 0) : (v540 = 1),
            v540))
      {
        v1585 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1585, "Key does not exist in the map.");
        __cxa_throw(v1585, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v541 = (*(_DWORD *)(*(_QWORD *)(_X21 + 5040) + 16) - v534);
      if (v538 <= v541
        || ((v542 = v537 + 12 * v541, v542 != v536) ? (v543 = *(_BYTE *)(v542 + 8) == 0) : (v543 = 1),
            v543))
      {
        v1586 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1586, "Key does not exist in the map.");
        __cxa_throw(v1586, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v544 = *(unsigned int *)(v539 + 4) | ((unint64_t)*(unsigned int *)(v542 + 4) << 32);
      v1697 = *(_OWORD *)(_X21 + 1840);
      v1698 = *(_QWORD *)(_X21 + 1856);
      v1696 = *(_QWORD *)(_X21 + 1880);
      v1695 = *(_OWORD *)(_X21 + 1864);
      v545 = *(_OWORD *)(_X21 + 1904);
      v1693 = *(_OWORD *)(_X21 + 1888);
      v1694 = v545;
      v1781 = *(_OWORD *)(_X21 + 1920);
      v546 = *(_OWORD *)(_X21 + 1936);
      v547 = *(_OWORD *)(_X21 + 1952);
      v548 = *(_OWORD *)(_X21 + 1968);
      v1785 = *(_QWORD *)(_X21 + 1984);
      v1783 = v547;
      v1784 = v548;
      v1782 = v546;
      v549 = *(_OWORD *)(_X21 + 1992);
      v550 = *(_OWORD *)(_X21 + 2008);
      v551 = *(_OWORD *)(_X21 + 2024);
      v552 = *(_OWORD *)(_X21 + 2040);
      v1780 = *(_QWORD *)(_X21 + 2056);
      v1779 = v552;
      v1778 = v551;
      v1776 = v549;
      v1777 = v550;
      v553 = *(_OWORD *)(_X21 + 2064);
      v554 = *(_OWORD *)(_X21 + 2080);
      v555 = *(_OWORD *)(_X21 + 2096);
      v556 = *(_OWORD *)(_X21 + 2112);
      v1775 = *(_QWORD *)(_X21 + 2128);
      v1774 = v556;
      v1773 = v555;
      v1771 = v553;
      v1772 = v554;
      v557 = *(_OWORD *)(_X21 + 2136);
      v558 = *(_OWORD *)(_X21 + 2152);
      v559 = *(_OWORD *)(_X21 + 2168);
      v560 = *(_OWORD *)(_X21 + 2184);
      v1770 = *(_QWORD *)(_X21 + 2200);
      v1769 = v560;
      v1768 = v559;
      v1766 = v557;
      v1767 = v558;
      v561 = *(_OWORD *)(_X21 + 2208);
      v562 = *(_OWORD *)(_X21 + 2224);
      v563 = *(_OWORD *)(_X21 + 2240);
      v564 = *(_OWORD *)(_X21 + 2256);
      v1765 = *(_QWORD *)(_X21 + 2272);
      v1764 = v564;
      v1763 = v563;
      v1761 = v561;
      v1762 = v562;
      v565 = *(_OWORD *)(_X21 + 2280);
      v566 = *(_OWORD *)(_X21 + 2296);
      v567 = *(_OWORD *)(_X21 + 2312);
      v568 = *(_OWORD *)(_X21 + 2328);
      v1760 = *(_QWORD *)(_X21 + 2344);
      v1759 = v568;
      v1758 = v567;
      v1756 = v565;
      v1757 = v566;
      v569 = *(_OWORD *)(_X21 + 2352);
      v570 = *(_OWORD *)(_X21 + 2368);
      v571 = *(_OWORD *)(_X21 + 2384);
      v572 = *(_OWORD *)(_X21 + 2400);
      v1755 = *(_QWORD *)(_X21 + 2416);
      v1754 = v572;
      v1753 = v571;
      v1751 = v569;
      v1752 = v570;
      v573 = *(_OWORD *)(_X21 + 2424);
      v574 = *(_OWORD *)(_X21 + 2440);
      v575 = *(_OWORD *)(_X21 + 2456);
      v576 = *(_OWORD *)(_X21 + 2472);
      v1750 = *(_QWORD *)(_X21 + 2488);
      v1749 = v576;
      v1748 = v575;
      v1746 = v573;
      v1747 = v574;
      memcpy(v1745, (const void *)(_X21 + 2496), sizeof(v1745));
      v1691 = *(_OWORD *)(_X21 + 3144);
      v1692 = *(_QWORD *)(_X21 + 3160);
      v1689 = *(_OWORD *)(_X21 + 3168);
      v1690 = *(_QWORD *)(_X21 + 3184);
      memcpy(__dst, (const void *)(_X21 + 3192), 0x708uLL);
      v1687 = *(_OWORD *)(_X21 + 4992);
      v1688 = *(_QWORD *)(_X21 + 5008);
      v577 = *(_QWORD *)(_X21 + 5016);
      v578 = (uint64_t)v530 + 3192 * v529;
      *(_QWORD *)v578 = v544;
      *(_QWORD *)(v578 + 24) = v1698;
      *(_OWORD *)(v578 + 8) = v1697;
      *(_QWORD *)(v578 + 48) = v1696;
      *(_OWORD *)(v578 + 32) = v1695;
      v579 = v1693;
      *(_OWORD *)(v578 + 72) = v1694;
      *(_OWORD *)(v578 + 56) = v579;
      *(_OWORD *)(v578 + 88) = v1781;
      v580 = v1782;
      v581 = v1783;
      v582 = v1784;
      *(_QWORD *)(v578 + 152) = v1785;
      *(_OWORD *)(v578 + 136) = v582;
      *(_OWORD *)(v578 + 120) = v581;
      *(_OWORD *)(v578 + 104) = v580;
      v583 = v1776;
      v584 = v1777;
      v585 = v1778;
      v586 = v1779;
      *(_QWORD *)(v578 + 224) = v1780;
      *(_OWORD *)(v578 + 192) = v585;
      *(_OWORD *)(v578 + 208) = v586;
      *(_OWORD *)(v578 + 160) = v583;
      *(_OWORD *)(v578 + 176) = v584;
      v587 = v1772;
      *(_OWORD *)(v578 + 232) = v1771;
      v588 = v1773;
      v589 = v1774;
      *(_QWORD *)(v578 + 296) = v1775;
      *(_OWORD *)(v578 + 264) = v588;
      *(_OWORD *)(v578 + 280) = v589;
      *(_OWORD *)(v578 + 248) = v587;
      v590 = v1766;
      v591 = v1767;
      v592 = v1768;
      v593 = v1769;
      *(_QWORD *)(v578 + 368) = v1770;
      *(_OWORD *)(v578 + 336) = v592;
      *(_OWORD *)(v578 + 352) = v593;
      *(_OWORD *)(v578 + 304) = v590;
      *(_OWORD *)(v578 + 320) = v591;
      v594 = v1761;
      v595 = v1762;
      v596 = v1763;
      v597 = v1764;
      *(_QWORD *)(v578 + 440) = v1765;
      *(_OWORD *)(v578 + 408) = v596;
      *(_OWORD *)(v578 + 424) = v597;
      *(_OWORD *)(v578 + 376) = v594;
      *(_OWORD *)(v578 + 392) = v595;
      v598 = v1756;
      v599 = v1757;
      v600 = v1758;
      v601 = v1759;
      *(_QWORD *)(v578 + 512) = v1760;
      *(_OWORD *)(v578 + 480) = v600;
      *(_OWORD *)(v578 + 496) = v601;
      *(_OWORD *)(v578 + 448) = v598;
      *(_OWORD *)(v578 + 464) = v599;
      v602 = v1751;
      v603 = v1752;
      v604 = v1753;
      v605 = v1754;
      *(_QWORD *)(v578 + 584) = v1755;
      *(_OWORD *)(v578 + 552) = v604;
      *(_OWORD *)(v578 + 568) = v605;
      *(_OWORD *)(v578 + 520) = v602;
      *(_OWORD *)(v578 + 536) = v603;
      v606 = v1746;
      v607 = v1747;
      v608 = v1748;
      v609 = v1749;
      *(_QWORD *)(v578 + 656) = v1750;
      *(_OWORD *)(v578 + 624) = v608;
      *(_OWORD *)(v578 + 640) = v609;
      *(_OWORD *)(v578 + 592) = v606;
      *(_OWORD *)(v578 + 608) = v607;
      memcpy((void *)(v578 + 664), v1745, 0x288uLL);
      *(_OWORD *)(v578 + 1312) = v1691;
      *(_QWORD *)(v578 + 1328) = v1692;
      *(_OWORD *)(v578 + 1336) = v1689;
      *(_QWORD *)(v578 + 1352) = v1690;
      memcpy((void *)(v578 + 1360), __dst, 0x708uLL);
      *(_OWORD *)(v578 + 3160) = v1687;
      *(_QWORD *)(v578 + 3176) = v1688;
      *(_QWORD *)(v578 + 3184) = v577;
      v529 = *v526 + 1;
      *v526 = v529;
      _X21 += 5336;
    }
    while (_X21 != v527);
  }
  v610 = *(float64x2_t **)(*(_QWORD *)&v1655 + 1872);
  j = *(_QWORD *)(*(_QWORD *)&v1655 + 1600);
  v612 = *(_QWORD *)(*(_QWORD *)&v1655 + 1592);
  v613 = 678152731 * ((unint64_t)(j - v612) >> 4);
  v615 = *(unsigned int **)(v1672 + 224);
  v614 = *(unsigned int **)(v1672 + 232);
  v616 = 0xAAAAAAAAAAAAAAABLL * (((char *)v614 - (char *)v615) >> 5);
  v617 = v613 - v616;
  if (v613 <= v616)
  {
    if (v613 < v616)
      *(_QWORD *)(v1672 + 232) = &v615[24 * v613];
    v622 = v1667;
    if (v612 != j)
      goto LABEL_567;
    goto LABEL_588;
  }
  v618 = *(_QWORD *)(v1672 + 240);
  if (0xAAAAAAAAAAAAAAABLL * ((v618 - (uint64_t)v614) >> 5) >= v617)
  {
    bzero(*(void **)(v1672 + 232), 96 * ((96 * v617 - 96) / 0x60) + 96);
    v622 = v1667;
    v631 = v1672;
    *(_QWORD *)(v1672 + 232) = &v614[24 * ((96 * v617 - 96) / 0x60) + 24];
    goto LABEL_562;
  }
  v619 = 0xAAAAAAAAAAAAAAABLL * ((v618 - (uint64_t)v615) >> 5);
  v620 = 0x5555555555555556 * ((v618 - (uint64_t)v615) >> 5);
  if (v620 > v613)
    v613 = v620;
  if (v619 >= 0x155555555555555)
    v621 = 0x2AAAAAAAAAAAAAALL;
  else
    v621 = v613;
  v622 = v1667;
  if (v621 > 0x2AAAAAAAAAAAAAALL)
    sub_20E877A38();
  v623 = (char *)operator new(96 * v621);
  v624 = &v623[32 * (((char *)v614 - (char *)v615) >> 5)];
  v625 = &v623[96 * v621];
  bzero(v624, 96 * ((96 * v617 - 96) / 0x60) + 96);
  v626 = &v624[96 * ((96 * v617 - 96) / 0x60) + 96];
  if (v614 == v615)
  {
    *(_QWORD *)(v1672 + 224) = v624;
    *(_QWORD *)(v1672 + 232) = v626;
    *(_QWORD *)(v1672 + 240) = v625;
    v631 = v1672;
    if (!v614)
      goto LABEL_562;
    goto LABEL_561;
  }
  v627 = 0;
  do
  {
    v628 = &v624[v627 * 4];
    *((_OWORD *)v628 - 6) = *(_OWORD *)&v614[v627 - 24];
    *((_QWORD *)v628 - 10) = *(_QWORD *)&v614[v627 - 20];
    v629 = *(_OWORD *)&v614[v627 - 18];
    *((_QWORD *)v628 - 7) = *(_QWORD *)&v614[v627 - 14];
    *(_OWORD *)(v628 - 72) = v629;
    v630 = *(_OWORD *)&v614[v627 - 12];
    v460 = *(int8x16_t *)&v614[v627 - 8];
    *((_DWORD *)v628 - 4) = v614[v627 - 4];
    *((_OWORD *)v628 - 3) = v630;
    *((int8x16_t *)v628 - 2) = v460;
    *((_QWORD *)v628 - 1) = *(_QWORD *)&v614[v627 - 2];
    v627 -= 24;
  }
  while (&v614[v627] != v615);
  v614 = *(unsigned int **)(v1672 + 224);
  *(_QWORD *)(v1672 + 224) = &v624[v627 * 4];
  *(_QWORD *)(v1672 + 232) = v626;
  *(_QWORD *)(v1672 + 240) = v625;
  v631 = v1672;
  if (v614)
LABEL_561:
    operator delete(v614);
LABEL_562:
  v615 = *(unsigned int **)(v631 + 224);
  v612 = *(_QWORD *)(*(_QWORD *)&v1655 + 1592);
  for (j = *(_QWORD *)(*(_QWORD *)&v1655 + 1600); v612 != j; v612 += 304)
  {
LABEL_567:
    v633 = *(_QWORD *)(v612 + 200);
    v632 = *(_QWORD *)(v612 + 208);
    if (((*(unsigned __int8 *)(v632 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v633 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v612 + 216) + 4) >> 2) & 1) == (char)(32
                                                                                  * *(_BYTE *)(*(_QWORD *)(v612 + 224)
                                                                                             + 4)) >> 7)
      v634 = 2;
    else
      v634 = 1;
    if ((v634 & v1613) != 0 && *(_QWORD *)(v612 + 168))
    {
      if (!*v1612
        || (v635 = (*(_DWORD *)(v632 + 16) - *(_DWORD *)(v1672 + 196)),
            v637 = *(_QWORD *)(v1672 + 200),
            v636 = *(_QWORD *)(v1672 + 208),
            0xAAAAAAAAAAAAAAABLL * ((v636 - v637) >> 2) <= v635)
        || ((v638 = v637 + 12 * v635, v638 != v636) ? (v639 = *(_BYTE *)(v638 + 8) == 0) : (v639 = 1),
            v639))
      {
        v1591 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1591, "Key does not exist in the map.");
        __cxa_throw(v1591, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v640 = *(_DWORD *)(v633 + 16);
      v641 = *(_DWORD *)(v638 + 4);
      v642 = *(_QWORD *)(v1672 + 72);
      v643 = *(_QWORD *)(v1672 + 80);
      if (v642 != v643)
      {
        while (*(_DWORD *)v642 != v640)
        {
          v642 += 16;
          if (v642 == v643)
            goto LABEL_1505;
        }
      }
      if (v642 == v643)
      {
LABEL_1505:
        v1583 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1583, "key not found in map");
        __cxa_throw(v1583, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v644 = *(_QWORD *)(v642 + 4);
      *v615 = v641;
      *(_QWORD *)(v615 + 1) = v644;
      *((float32x2_t *)v615 + 2) = vcvt_f32_f64(*(float64x2_t *)(v612 + 16));
      *(float *)&v644 = *(double *)(v612 + 160);
      v615[3] = v644;
      v645 = *(_OWORD *)(v612 + 32);
      *((_QWORD *)v615 + 5) = *(_QWORD *)(v612 + 48);
      *(_OWORD *)(v615 + 6) = v645;
      *((float32x4_t *)v615 + 3) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v612 + 56)), *(float64x2_t *)(v612 + 72));
      v460 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v612 + 88)), *(float64x2_t *)(v612 + 104));
      *((int8x16_t *)v615 + 4) = v460;
      *(float *)&v645 = *(double *)(v612 + 120);
      v615[20] = v645;
      *((_QWORD *)v615 + 11) = *(_QWORD *)(v632 + 24) + 456;
      if (!v1676)
      {
        v646 = *(_QWORD *)(v1672 + 168) + 24 * v641;
        v647 = *(double *)(v612 + 168);
        v649 = *(char **)v646;
        v648 = *(__int128 **)(v646 + 8);
        if (*(__int128 **)v646 != v648)
        {
          while (*(_DWORD *)v649 != v640)
          {
            v649 += 16;
            if (v649 == (char *)v648)
              goto LABEL_587;
          }
        }
        if (v649 == (char *)v648)
        {
LABEL_587:
          LODWORD(__dst[0].f64[0]) = v640;
          __dst[0].f64[1] = v647;
          sub_20F9B971C((char **)v646, v648, (int *)__dst);
        }
      }
      v615 += 24;
    }
  }
LABEL_588:
  if (v615 != *(unsigned int **)(v1672 + 232))
    *(_QWORD *)(v1672 + 232) = v615;
  v1595[362] = v1619;
  if ((v1633 & 1) == 0)
  {
    v650 = 0;
    do
    {
      *((_DWORD *)__dst[0].f64 + (v650 >> 5) + 1) &= ~(1 << v650);
      ++v650;
    }
    while (v1619 != v650);
    LODWORD(__dst[0].f64[0]) = v1619;
  }
  v651 = *(unsigned int **)(v1672 + 224);
  if (v651 != v615)
  {
    do
    {
      v658 = *v651;
      v659 = *((_DWORD *)__dst[0].f64 + (v658 >> 5) + 1);
      if (((1 << v658) & v659) == 0)
      {
        *((_DWORD *)__dst[0].f64 + (v658 >> 5) + 1) = (1 << v658) ^ v659;
        v660 = (float64x2_t *)*((_QWORD *)v651 + 11);
        v661 = (float32x4_t *)&v622[9 * v658 + 28281].f64[1];
        *v661 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v660), v660[1]);
        v661[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[2]), v660[3]);
        v661[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[4]), v660[5]);
        v661[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[6]), v660[7]);
        v661[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[8]), v660[9]);
        v661[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[10]), v660[11]);
        v661[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[12]), v660[13]);
        v661[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[14]), v660[15]);
        v661[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v660[16]), v660[17]);
      }
      v652 = v651[3];
      v653 = *((_QWORD *)v651 + 2);
      v460 = *(int8x16_t *)(v651 + 6);
      v654 = *((_QWORD *)v651 + 5);
      LODWORD(_Q2.f64[0]) = v651[20];
      v462 = *((float64x2_t *)v651 + 3);
      v655 = *((int32x4_t *)v651 + 4);
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)v655, (int8x16_t)_Q2, 0xCuLL);
      v656 = vuzp1q_s32((int32x4_t)v462, v655);
      v656.i32[1] = HIDWORD(v462.f64[1]);
      v657 = (uint64_t)&v622[24681] + 72 * *v1595;
      v462.f64[0] = *(float64_t *)(v651 + 1);
      *(_DWORD *)v657 = v658;
      *(float64_t *)(v657 + 4) = v462.f64[0];
      *(_DWORD *)(v657 + 12) = v652;
      *(_QWORD *)(v657 + 16) = v653;
      *(_QWORD *)(v657 + 40) = v654;
      *(int8x16_t *)(v657 + 24) = v460;
      *(int32x4_t *)(v657 + 48) = v656;
      *(float64_t *)(v657 + 64) = _Q2.f64[0];
      ++*v1595;
      v651 += 24;
    }
    while (v651 != v615);
    v615 = *(unsigned int **)(v1672 + 224);
  }
  *(_QWORD *)(v1672 + 232) = v615;
  if (v610)
    _Q0 = *v610;
  else
    __asm { FMOV            V0.2D, #1.0 }
  v663 = *v1673;
  v664 = *v1673 + 78612;
  v665 = (_DWORD *)&(*v1673)[75161].f64[1] + 1;
  v666 = (_DWORD *)(*v1673)[68129].f64 + 1;
  v667 = *v1673 + 64551;
  v668 = (_DWORD *)(*v1673)[57390].f64 + 1;
  v669 = *v1673 + 53940;
  v670 = (_DWORD *)&(*v1673)[46907].f64[1];
  v671 = (_DWORD *)(*v1673)[43329].f64 + 1;
  v672 = (unsigned int *)&(*v1673)[36168];
  (*v1673)[24680] = _Q0;
  v673 = *(int8x16_t **)(v1672 + 248);
  v674 = (*(_QWORD *)(v1672 + 256) - (_QWORD)v673) >> 2;
  v675 = v672[2];
  v676 = v674;
  if (v675 < v674)
  {
    v1677 = v666;
    v1668 = v668;
    bzero(&v672[v675], 4 * (v674 - v675));
    v676 = v674;
    v668 = v1668;
    v666 = v1677;
  }
  v672[2] = v674;
  if (v676)
  {
    v677 = (v676 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v677 < 7)
    {
      v678 = v672;
      goto LABEL_612;
    }
    v678 = v672;
    if ((unint64_t)((char *)v663 - (char *)v673 + 578688) < 0x20)
      goto LABEL_1552;
    v679 = v677 + 1;
    v680 = v679 & 0x7FFFFFFFFFFFFFF8;
    v681 = (int8x16_t *)((char *)v673 + v680 * 4);
    v678 = &v672[v680];
    v682 = (int8x16_t *)(v672 + 4);
    v683 = v673 + 1;
    v684 = v679 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v460 = *v683;
      v682[-1] = v683[-1];
      *v682 = v460;
      v682 += 2;
      v683 += 2;
      v684 -= 8;
    }
    while (v684);
    v673 = v681;
    if (v679 != (v679 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1552:
      do
      {
LABEL_612:
        v685 = v673->i32[0];
        v673 = (int8x16_t *)((char *)v673 + 4);
        *v678++ = v685;
      }
      while (v678 != &v672[v676]);
    }
  }
  *v671 = 0;
  v672[515] = 0;
  v672[591] = 0;
  v672[743] = 0;
  v672[1044] = 0;
  v663[36169] = 0u;
  LODWORD(v669->f64[0]) = 0;
  *v668 = 0;
  *v670 = 0;
  v670[76] = 0;
  v670[228] = 0;
  v670[529] = 0;
  LODWORD(v667->f64[0]) = 0;
  v668[513] = 0;
  v668[589] = 0;
  v668[741] = 0;
  v668[1042] = 0;
  *(float64x2_t *)((char *)&v663[57390] + 12) = 0u;
  *v665 = 0;
  LODWORD(v664->f64[0]) = 0;
  *v666 = 0;
  v666[76] = 0;
  v666[228] = 0;
  v666[529] = 0;
  LODWORD(v663[46780].f64[1]) = 0;
  *(float64x2_t *)((char *)&v663[46779] + 8) = 0u;
  *(float64x2_t *)((char *)&v663[68001] + 4) = 0u;
  HIDWORD(v663[68002].f64[0]) = 0;
  v686 = (_QWORD *)v1672;
  v687 = *(_QWORD *)(v1672 + 32) - *(_QWORD *)(v1672 + 24);
  if ((v687 & 0x7FFFFFFF8) != 0)
  {
    v688 = 0;
    v1614 = (v687 >> 3);
    v1617 = (uint64_t)&v663[36168].f64[1] + 4;
    v689 = v1655;
    v690 = v1673;
    while (1)
    {
      v691 = v1617 + 339548 * v688;
      v1649 = v691 + 4;
      *(_DWORD *)(v691 + 8) = v1619;
      if (*(_DWORD *)(*v1638 + 4 * v688) == 2)
        *(_DWORD *)(v691 + 169780) = v1619;
      v693 = (_DWORD *)*v686;
      v692 = (_DWORD *)v686[1];
      v1622 = v688;
      if ((_DWORD *)*v686 != v692)
        break;
LABEL_615:
      v688 = v1622 + 1;
      if (v1622 + 1 == v1614)
      {
        v860 = (v686[4] - v686[3]) >> 3;
        goto LABEL_859;
      }
    }
    v694 = 0;
    v695 = (int *)(v686[3] + 8 * v688);
    v697 = *v695;
    v696 = v695[1];
    v698 = v693 + 15;
    v1625 = (_DWORD *)v686[1];
    while (2)
    {
      v699 = **((_DWORD **)v693 + 2);
      v1678 = v699;
      if (v699 != v697 && v699 != v696)
      {
LABEL_621:
        ++v694;
        v693 += 250;
        v698 += 125;
        if (v693 == v692)
          goto LABEL_615;
        continue;
      }
      break;
    }
    v701 = *v693;
    v702 = v693[2];
    v703 = *((_QWORD *)v693 + 3);
    v704 = *(_QWORD *)(v703 + 64);
    v705 = *(_QWORD *)(v703 + 72);
    if (v704 != v705)
    {
      while (*(_DWORD *)v704 != v701)
      {
        v704 += 24;
        if (v704 == v705)
          goto LABEL_633;
      }
    }
    if (v704 != v705)
    {
      v706 = *(_QWORD *)(v704 + 8);
      v1 = *(float *)(v706 + 8);
      v2 = *(float *)(v706 + 12);
      goto LABEL_787;
    }
LABEL_633:
    v707 = *(char **)(*(_QWORD *)&v689 + 1280);
    v708 = *(char **)(*(_QWORD *)&v689 + 1288);
    if (v708 != v707)
    {
      v709 = (v708 - v707) >> 4;
      do
      {
        v710 = v709 >> 1;
        v711 = (unsigned int *)&v707[16 * (v709 >> 1)];
        v713 = *v711;
        v712 = (char *)(v711 + 4);
        v709 += ~(v709 >> 1);
        if (v713 < v701)
          v707 = v712;
        else
          v709 = v710;
      }
      while (v709);
    }
    if (v707 == v708 || *(_DWORD *)v707 != v701)
      v707 = v708;
    v714 = *(_QWORD *)(*((_QWORD *)v707 + 1) + 24);
    v715 = *((_QWORD *)v693 + 9);
    v716 = *(_DWORD *)(v715 + 992);
    if (v716 != -1)
    {
      v717 = (float64x2_t *)(v714 + 64);
      if (v716 <= 7)
        goto LABEL_644;
LABEL_652:
      if (v716 > 0xB)
      {
        if (v716 > 0xD)
        {
          if (v716 == 14)
            v720 = sub_20EB247C0(__dst, (uint64_t)v717, (double *)(v715 + 168), (*(double *)v715 + *(double *)(v715 + 32)) * 0.5);
          else
            v720 = sub_20EB3E39C(v715, __dst, v717);
          goto LABEL_759;
        }
        if (v716 != 13)
          goto LABEL_787;
        v723 = *(uint64_t *)(v714 + 80);
        if (*(double *)&v723 < 0.00000001)
          goto LABEL_787;
        _Q0 = vdivq_f64(*v717, (float64x2_t)vdupq_lane_s64(v723, 0));
        v725 = (*(double *)v715 + *(double *)(v715 + 32)) * 0.5;
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q2.f64[0] = v725 * (_Q2.f64[0] * v725);
        v462.f64[0] = _Q2.f64[0]
                    * (*(double *)(v715 + 176)
                     + v725 * *(double *)(v715 + 232)
                     + _Q2.f64[0]
                     * (*(double *)(v715 + 184)
                      + v725 * *(double *)(v715 + 240)
                      + _Q2.f64[0]
                      * (*(double *)(v715 + 192)
                       + v725 * *(double *)(v715 + 248)
                       + _Q2.f64[0]
                       * (*(double *)(v715 + 200)
                        + v725 * *(double *)(v715 + 256)
                        + _Q2.f64[0]
                        * (*(double *)(v715 + 208)
                         + v725 * *(double *)(v715 + 264)
                         + _Q2.f64[0] * (*(double *)(v715 + 216) + *(double *)(v715 + 272) * v725 + _Q2.f64[0] * 0.0))))));
        __dst[0] = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(_Q2.f64[0]* (*(double *)(v715 + 168) + v725 * *(double *)(v715 + 224) + v462.f64[0])/ 100.0+ 1.0), 0));
        v719 = *(_DWORD *)(v715 + 992);
        if (v719 == -1)
          goto LABEL_674;
LABEL_761:
        if (v719 > 7)
          goto LABEL_676;
      }
      else
      {
        if (v716 <= 9)
        {
          if (v716 == 9)
          {
            v720 = sub_20EB3641C(v715, __dst, v717);
            goto LABEL_759;
          }
          v742 = *(double *)(v714 + 80);
          _Q0 = *(float64x2_t *)(v714 + 64);
          _D1 = *(_QWORD *)(v714 + 72);
          __asm { FMLA            D6, D1, V0.D[1] }
          v746 = sqrt(_D6);
          v747 = fabs(v742);
          v748 = fabs(v746);
          v749 = v747 / v748;
          if (v747 >= v748)
            v749 = v748 / v747;
          if (v749 <= 0.414213562)
          {
            v751 = 1;
            v752 = 2;
            v750 = v749;
            if (_D6 >= 0.00000001)
              goto LABEL_687;
          }
          else
          {
            v750 = (v748 - v747) / (v747 + v748);
            if (v747 >= v748)
              v750 = -v750;
            v751 = -1;
            v752 = 1;
            if (_D6 >= 0.00000001)
            {
LABEL_687:
              if (v747 < v748)
                v751 = -v751;
              else
                v752 = v749 > 0.414213562;
              v753 = v746 == INFINITY && v747 == INFINITY;
              v754 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v750 * v750), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v750 * v750), (float64x2_t)xmmword_210315370), v750 * v750 * (v750 * v750))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v750 * v750), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v750 * v750), (float64x2_t)xmmword_210315380), v750 * v750 * (v750 * v750))),
                         v750 * v750 * (v750 * v750) * (v750 * v750 * (v750 * v750))));
              v755 = v750 + v750 * vdivq_f64(v754, (float64x2_t)vdupq_laneq_s64((int64x2_t)v754, 1)).f64[0];
              if (v753)
                v755 = 0.785398163;
              if (v746 == 0.0 && v742 == 0.0)
                v757 = 0.0;
              else
                v757 = v755;
              if (*(uint64_t *)(v714 + 80) < 0)
              {
                v752 = 4 - v752;
                v751 = -v751;
              }
              if (v746 < 0.0)
              {
                v752 = -v752;
                v751 = -v751;
              }
              v758 = (double)v752 * 3.061617e-17 + (double)v752 * 0.785398163 + v757 * (double)v751;
              v759 = 1.0
                   / v746
                   * (v758
                    * (v758
                     * v758
                     * (*(double *)(v715 + 168)
                      + v758
                      * v758
                      * (*(double *)(v715 + 176)
                       + v758
                       * v758
                       * (*(double *)(v715 + 184)
                        + v758
                        * v758
                        * (*(double *)(v715 + 192)
                         + v758
                         * v758
                         * (*(double *)(v715 + 200)
                          + v758 * v758 * (*(double *)(v715 + 208) + v758 * v758 * *(double *)(v715 + 216)))))))
                     + 1.0));
LABEL_776:
              v739 = vmulq_n_f64(_Q0, v759);
              __dst[0] = v739;
              v460.i64[0] = *(_QWORD *)&v739.f64[1];
LABEL_777:
              v462.f64[0] = *(float64_t *)(v715 + 8);
              v1 = *(double *)(v715 + 16) + *(double *)v715 * v739.f64[0] + v462.f64[0] * *(double *)v460.i64;
              _Q2.f64[0] = *(float64_t *)(v715 + 40);
              v2 = *(double *)v460.i64 * *(double *)(v715 + 32) + _Q2.f64[0];
LABEL_787:
              v1645 = v698;
              v1663 = v694;
              v803 = v693[248];
              v804 = v702;
              v805 = v702;
              v806 = v702;
              v807 = v702;
              if (v803)
              {
                v808 = (uint64_t)&v693[12 * v803 + 8];
                v809 = 8;
                v807 = v702;
                v806 = v702;
                v805 = v702;
                v804 = v702;
                do
                {
                  v810 = &v693[v809];
                  v811 = v693[v809];
                  v812 = **(_DWORD **)&v693[v809 + 2];
                  if (v811 >= v806)
                    v813 = v806;
                  else
                    v813 = v693[v809];
                  if (v804 <= v811)
                    v814 = v693[v809];
                  else
                    v814 = v804;
                  if (v811 >= v807)
                    v815 = v807;
                  else
                    v815 = v693[v809];
                  if (v805 > v811)
                    v811 = v805;
                  if (v812 == v697)
                    v805 = v811;
                  else
                    v804 = v814;
                  if (v812 == v697)
                    v807 = v815;
                  else
                    v806 = v813;
                  v809 += 12;
                }
                while (v810 + 12 != (_DWORD *)v808);
              }
              v1634 = v693 + 8;
              v1657 = v702;
              v1660 = v693;
              _CF = v805 >= v807;
              v816 = v805 - v807;
              v1629 = v816;
              if (_CF)
                v817 = v816 + 1;
              else
                v817 = 0;
              _CF = v804 >= v806;
              v818 = v804 - v806;
              if (_CF)
                v819 = v818 + 1;
              else
                v819 = 0;
              v1631 = v817;
              if (v1678 == v696)
              {
                v820 = v806;
              }
              else
              {
                v819 = v817;
                v820 = v807;
              }
              v821 = (_DWORD *)(v1649 + 169772 * (v1678 == v696));
              v822 = v821[2];
              v1653 = v821 + 28641;
              v1669 = v821[28641];
              v823 = *v821;
              v824 = (*v821 + 1);
              *v821 = v824;
              v825 = v819 + v822;
              v821[2] = v819 + v822;
              v826 = v821[1040];
              if (v826 < v824)
              {
                v827 = v819;
                bzero(&v821[v826 + 740], 4 * (v824 - v826));
                v819 = v827;
              }
              v821[1040] = v824;
              v1641 = v819;
              v828 = v1669 + 2 * v819;
              *v1653 = v828;
              v829 = (_DWORD *)(v1649 + 169772 * (v1678 == v696) + 169768);
              v830 = *v829;
              if (v830 < v828)
                bzero(&v821[v830 + 28642], 4 * (v828 - v830));
              *v829 = v828;
              v831 = v821[3];
              v821[3] = v825;
              if (v831 < v825)
              {
                do
                {
                  v821[(v831 >> 5) + 4] &= ~(1 << v831);
                  ++v831;
                }
                while (v825 != v831);
              }
              v832 = (v823 + 2);
              v833 = v821[739];
              if (v833 < v832)
                bzero((char *)v821 + 2 * v833 + 2352, 2 * (v832 - v833));
              v821[739] = v832;
              v834 = v821[587];
              if (v834 < v824)
                bzero((char *)v821 + v834 + 2048, (v823 - v834) + 1);
              v821[587] = v824;
              v835 = *v821;
              v836 = v821[511];
              if (v836 < *v821)
              {
                bzero((char *)v821 + v836 + 1744, (v835 + ~(_DWORD)v836) + 1);
                LODWORD(v824) = v821[587];
              }
              v821[511] = v835;
              *((_WORD *)v821 + (v821[739] - 1) + 1176) = *v1653;
              *((_BYTE *)v821 + (v824 - 1) + 2048) = v820;
              *((_BYTE *)v821 + (v835 - 1) + 1744) = v1657;
              v686 = (_QWORD *)v1672;
              v837 = (uint64_t)&v821[2 * v1669 + 1041];
              v838 = v821 + 4;
              v821[v821[1040] - 1 + 740] = v1663;
              v839 = v1641;
              if (v1678 == v696)
              {
LABEL_831:
                if (v839)
                {
                  v840 = v839;
                  v841 = v822;
                  do
                  {
                    v838[v841 >> 5] &= ~(1 << v841);
                    ++v841;
                    --v840;
                  }
                  while (v840);
                }
              }
              else if (v1631)
              {
                memset_pattern16((void *)(v837 + 8 * v1641), &unk_2103B8500, 8 * v1629 + 8);
                v839 = v1641;
                goto LABEL_831;
              }
              v838[(v1657 - v820 + v822) >> 5] |= 1 << (v1657 - v820 + v822);
              v842 = v837 + 8 * (v1657 - v820);
              v843 = v1;
              *(float *)v460.i32 = v2;
              *(float *)v842 = v843;
              *(_DWORD *)(v842 + 4) = v460.i32[0];
              v844 = v1660[248];
              if (v844)
              {
                v845 = v1649 + 169772 * (v1678 == v696) + 4 * v1669 + 114568;
                v846 = v845 + 4 * v839;
                v847 = (char *)&v1634[12 * v844];
                v848 = v1645;
                do
                {
                  while (1)
                  {
                    v849 = (char *)v848 - 28;
                    v850 = *((_DWORD *)v848 - 7) - v820;
                    v851 = **(_DWORD **)((char *)v848 - 20);
                    v852 = v1678 == v696 && v851 == v696;
                    v853 = v852;
                    if (v851 == v697 || v853)
                      break;
                    *(_QWORD *)(v837 + 8 * v1641 + 8 * v850) = *v848;
                    *(_DWORD *)(v846 + 4 * v850) = *((_DWORD *)v848 - 1);
                    v848 += 6;
                    if (v849 + 48 == v847)
                      goto LABEL_620;
                  }
                  v838[(v850 + v822) >> 5] |= 1 << (v850 + v822);
                  *(_QWORD *)(v837 + 8 * v850) = *v848;
                  *(_DWORD *)(v845 + 4 * v850) = *((_DWORD *)v848 - 1);
                  v848 += 6;
                }
                while (v849 + 48 != v847);
              }
LABEL_620:
              v689 = v1655;
              v690 = v1673;
              v692 = v1625;
              v694 = v1663;
              v693 = v1660;
              v698 = v1645;
              goto LABEL_621;
            }
          }
          v759 = 1.0 / v742;
          goto LABEL_776;
        }
        if (v716 == 10)
          v720 = sub_20EB24288(__dst, (uint64_t)v717, (double *)(v715 + 168), (*(double *)v715 + *(double *)(v715 + 32)) * 0.5);
        else
          v720 = sub_20EB3A2E4(v715, __dst, v717);
LABEL_759:
        if ((v720 & 1) == 0)
          goto LABEL_787;
        v719 = *(_DWORD *)(v715 + 992);
        if (v719 != -1)
          goto LABEL_761;
LABEL_674:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v719 = *(_DWORD *)(v715 + 992);
        if (v719 > 7)
        {
LABEL_676:
          v739.f64[0] = __dst[0].f64[0];
          if (v719 <= 9)
          {
            v460.i64[0] = *(_QWORD *)&__dst[0].f64[1];
            goto LABEL_777;
          }
          v740 = *(double *)(v715 + 8);
          v741 = *(double *)v715 * __dst[0].f64[0];
          goto LABEL_770;
        }
      }
      if (v719 <= 3)
      {
        if (v719 <= 1)
        {
          if (!v719)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          v462.f64[0] = __dst[0].f64[1];
          _Q2.f64[0] = __dst[0].f64[0];
          v1 = *(double *)(v715 + 16) + *(double *)v715 * __dst[0].f64[0] + *(double *)(v715 + 8) * __dst[0].f64[1];
          v460.i64[0] = *(_QWORD *)(v715 + 40);
          v2 = __dst[0].f64[1] * *(double *)(v715 + 32) + *(double *)v460.i64;
          goto LABEL_787;
        }
        v735 = __dst[0];
LABEL_786:
        v1 = *(double *)(v715 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v715, v735));
        v460.i64[0] = *(_QWORD *)(v715 + 32);
        _Q2.f64[0] = *(float64_t *)(v715 + 40);
        v2 = vmuld_lane_f64(*(double *)v460.i64, v735, 1) + _Q2.f64[0];
        goto LABEL_787;
      }
      v460.i64[0] = *(_QWORD *)&__dst[0].f64[0];
      if (v719 > 5)
      {
        v740 = *(double *)(v715 + 8);
        v741 = *(double *)v715 * __dst[0].f64[0];
LABEL_770:
        v460.i64[0] = *(_QWORD *)(v715 + 16);
        v462.f64[0] = *(float64_t *)(v715 + 32);
        _Q2.f64[0] = v740 * __dst[0].f64[1];
        v1 = *(double *)v460.i64 + v741 + _Q2.f64[0];
        v2 = *(double *)(v715 + 40) + v462.f64[0] * __dst[0].f64[1];
        goto LABEL_787;
      }
      v797 = __dst[0].f64[1];
LABEL_781:
      v462.f64[0] = *(float64_t *)(v715 + 8);
      v1 = *(double *)(v715 + 16) + *(double *)v715 * *(double *)v460.i64 + v462.f64[0] * v797;
      v460.i64[0] = *(_QWORD *)(v715 + 32);
      _Q2.f64[0] = *(float64_t *)(v715 + 40);
      v2 = v797 * *(double *)v460.i64 + _Q2.f64[0];
      goto LABEL_787;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v716 = *(_DWORD *)(v715 + 992);
    v717 = (float64x2_t *)(v714 + 64);
    if (v716 > 7)
      goto LABEL_652;
LABEL_644:
    if (v716 <= 3)
    {
      if (v716 <= 1)
      {
        if (!v716)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v718 = *(double *)(v714 + 80);
        if (v718 < 0.00000001)
          goto LABEL_787;
        __dst[0] = vmulq_n_f64(*v717, 1.0 / v718);
        v719 = *(_DWORD *)(v715 + 992);
        if (v719 != -1)
          goto LABEL_761;
        goto LABEL_674;
      }
      if (v716 == 2)
      {
        v727 = *(double *)(v714 + 80);
        if (*(_DWORD *)(v715 + 212))
        {
          if (v727 < 0.00000001)
            goto LABEL_787;
          v728 = 1.0 / v727;
          _Q2 = vmulq_n_f64(*v717, v728);
          _D0 = vmuld_lane_f64(v728, *v717, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v732 = vmulq_n_f64(_Q2, *(double *)(v715 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v715 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v715 + 184) * *(double *)&_D1)));
          v733 = *(float64x2_t *)(v715 + 192);
          v734 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8((int8x16_t)v733, (int8x16_t)v733, 8uLL));
          v462 = vmulq_n_f64(vaddq_f64(v733, v733), _Q2.f64[0]);
          _Q2 = vmulq_laneq_f64(v462, _Q2, 1);
          v735 = vaddq_f64(vaddq_f64(v734, _Q2), v732);
        }
        else
        {
          if (v727 < 0.00000001)
            goto LABEL_787;
          v855 = 1.0 / v727;
          _Q2 = vmulq_n_f64(*v717, v855);
          _D0 = vmuld_lane_f64(v855, *v717, 1);
          __asm { FMLA            D1, D0, V2.D[1] }
          v462.f64[0] = *(double *)(v715 + 176) + *(double *)(v715 + 184) * _D1;
          v735 = vmulq_n_f64(_Q2, *(double *)(v715 + 168) * _D1 + 1.0 + _D1 * _D1 * v462.f64[0]);
        }
        goto LABEL_785;
      }
      v779 = *(double *)(v714 + 80);
      _Q0 = *(float64x2_t *)(v714 + 64);
      _D1 = *(_QWORD *)(v714 + 72);
      __asm { FMLA            D6, D1, V0.D[1] }
      v783 = sqrt(_D6);
      v784 = fabs(v779);
      v785 = fabs(v783);
      v786 = v784 / v785;
      if (v784 >= v785)
        v786 = v785 / v784;
      if (v786 <= 0.414213562)
      {
        v787 = 1;
        v788 = 2;
        v462.f64[0] = v786;
        if (_D6 >= 0.00000001)
          goto LABEL_737;
      }
      else
      {
        v462.f64[0] = (v785 - v784) / (v784 + v785);
        if (v784 >= v785)
          v462.f64[0] = -v462.f64[0];
        v787 = -1;
        v788 = 1;
        if (_D6 >= 0.00000001)
        {
LABEL_737:
          if (v784 < v785)
            v787 = -v787;
          else
            v788 = v786 > 0.414213562;
          v789 = v783 == INFINITY && v784 == INFINITY;
          v790 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v462.f64[0] * v462.f64[0]), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v462.f64[0] * v462.f64[0]), (float64x2_t)xmmword_210315370), v462.f64[0] * v462.f64[0] * (v462.f64[0] * v462.f64[0]))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v462.f64[0] * v462.f64[0]), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v462.f64[0] * v462.f64[0]), (float64x2_t)xmmword_210315380), v462.f64[0] * v462.f64[0] * (v462.f64[0] * v462.f64[0]))),
                     v462.f64[0]
                   * v462.f64[0]
                   * (v462.f64[0]
                    * v462.f64[0])
                   * (v462.f64[0]
                    * v462.f64[0]
                    * (v462.f64[0]
                     * v462.f64[0]))));
          v791 = v462.f64[0] + v462.f64[0] * vdivq_f64(v790, (float64x2_t)vdupq_laneq_s64((int64x2_t)v790, 1)).f64[0];
          if (v789)
            v791 = 0.785398163;
          if (v783 == 0.0 && v779 == 0.0)
            v793 = 0.0;
          else
            v793 = v791;
          if (*(uint64_t *)(v714 + 80) < 0)
          {
            v788 = 4 - v788;
            v787 = -v787;
          }
          if (v783 < 0.0)
          {
            v788 = -v788;
            v787 = -v787;
          }
          v794 = (double)v788 * 3.061617e-17 + (double)v788 * 0.785398163 + v793 * (double)v787;
          v795 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), v794 * v794)), v794 * v794);
          v462.f64[0] = v794 * (v795.f64[0] + vmuld_lane_f64(v794 * v794 * (v794 * v794), v795, 1));
          v796 = 1.0 / v783 * (v794 + v462.f64[0]);
          goto LABEL_784;
        }
      }
      v796 = 1.0 / v779;
LABEL_784:
      v735 = vmulq_n_f64(_Q0, v796);
LABEL_785:
      __dst[0] = v735;
      goto LABEL_786;
    }
    if (v716 > 5)
    {
      if (v716 != 6)
      {
        v720 = sub_20EB31FFC(v715, __dst, v717);
        goto LABEL_759;
      }
      v736 = (const double *)(v714 + 80);
      v737 = vld1q_dup_f64(v736);
      _Q2 = *(float64x2_t *)(v715 + 208);
      v738 = vaddq_f64(vdivq_f64(*(float64x2_t *)(v714 + 64), v737), *(float64x2_t *)(v715 + 192));
      v737.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v738, v738)));
      v462.f64[0] = v737.f64[0]
                  * (*(double *)(v715 + 168)
                   + v737.f64[0] * (*(double *)(v715 + 176) + *(double *)(v715 + 184) * v737.f64[0]));
      __dst[0] = vaddq_f64(_Q2, vmulq_n_f64(v738, v737.f64[0] * v462.f64[0] + 1.0));
      v719 = *(_DWORD *)(v715 + 992);
      if (v719 != -1)
        goto LABEL_761;
      goto LABEL_674;
    }
    if (v716 == 5)
    {
      v460.i64[0] = *(_QWORD *)(v714 + 64);
      v721 = *(double *)(v714 + 72);
      v462.f64[0] = *(float64_t *)(v714 + 80);
      _Q2.f64[0] = *(double *)v460.i64 * *(double *)v460.i64 + v721 * v721;
      if (_Q2.f64[0] >= 0.00000001)
      {
        v798 = sqrt(_Q2.f64[0]);
        if (v798 <= v462.f64[0])
        {
          v858 = v798 / v462.f64[0] * 0.785398163
               - v798 / v462.f64[0] * (v798 / v462.f64[0] + -1.0) * (v798 / v462.f64[0] * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v798 <= -v462.f64[0])
          {
            v801 = v798 / v462.f64[0] * 0.785398163
                 - v798 / v462.f64[0] * (-1.0 - v798 / v462.f64[0]) * (v798 / v462.f64[0] * -0.0663008339 + 0.244711287);
            v802 = 3.14159265;
          }
          else
          {
            v799 = v462.f64[0] / v798;
            v800 = fabs(v799);
            v801 = v799 * (v800 + -1.0) * (v800 * 0.0663008339 + 0.244711287) + v799 * -0.785398163;
            v802 = 1.57079633;
          }
          v858 = v801 + v802;
        }
        v859 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), v858 * v858)), v858 * v858);
        v462.f64[0] = v858 + v858 * (v859.f64[0] + vmuld_lane_f64(v858 * v858 * (v858 * v858), v859, 1));
        v722 = v462.f64[0] / v798;
      }
      else
      {
        if (v462.f64[0] == 0.0)
          goto LABEL_787;
        v722 = 1.0 / v462.f64[0];
      }
      __dst[0].f64[0] = *(double *)v460.i64 * v722;
      __dst[0].f64[1] = v721 * v722;
      v719 = *(_DWORD *)(v715 + 992);
      if (v719 != -1)
        goto LABEL_761;
      goto LABEL_674;
    }
    v760 = *(double *)(v714 + 80);
    _Q0 = *(float64x2_t *)(v714 + 64);
    _D1 = *(_QWORD *)(v714 + 72);
    __asm { FMLA            D6, D1, V0.D[1] }
    v764 = sqrt(_D6);
    v765 = fabs(v760);
    v766 = fabs(v764);
    v767 = v765 / v766;
    if (v765 >= v766)
      v767 = v766 / v765;
    if (v767 <= 0.414213562)
    {
      v769 = 1;
      v770 = 2;
      v768 = v767;
      if (_D6 >= 0.00000001)
        goto LABEL_712;
    }
    else
    {
      v768 = (v766 - v765) / (v765 + v766);
      if (v765 >= v766)
        v768 = -v768;
      v769 = -1;
      v770 = 1;
      if (_D6 >= 0.00000001)
      {
LABEL_712:
        if (v765 < v766)
          v769 = -v769;
        else
          v770 = v767 > 0.414213562;
        v771 = v764 == INFINITY && v765 == INFINITY;
        v772 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v768 * v768), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v768 * v768), (float64x2_t)xmmword_210315370), v768 * v768 * (v768 * v768))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v768 * v768), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v768 * v768), (float64x2_t)xmmword_210315380), v768 * v768 * (v768 * v768))), v768 * v768 * (v768 * v768) * (v768 * v768 * (v768 * v768))));
        v773 = v768 + v768 * vdivq_f64(v772, (float64x2_t)vdupq_laneq_s64((int64x2_t)v772, 1)).f64[0];
        if (v771)
          v773 = 0.785398163;
        if (v764 == 0.0 && v760 == 0.0)
          v775 = 0.0;
        else
          v775 = v773;
        if (*(uint64_t *)(v714 + 80) < 0)
        {
          v770 = 4 - v770;
          v769 = -v769;
        }
        if (v764 < 0.0)
        {
          v770 = -v770;
          v769 = -v769;
        }
        v776 = (double)v770 * 3.061617e-17 + (double)v770 * 0.785398163 + v775 * (double)v769;
        v777 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v715 + 168), *(int64x2_t *)(v715 + 184)), v776 * v776)), v776 * v776);
        v778 = 1.0 / v764 * (v776 + v776 * (v777.f64[0] + vmuld_lane_f64(v776 * v776 * (v776 * v776), v777, 1)));
        goto LABEL_780;
      }
    }
    v778 = 1.0 / v760;
LABEL_780:
    v460 = (int8x16_t)vmulq_n_f64(_Q0, v778);
    __dst[0] = (float64x2_t)v460;
    v797 = *(double *)&v460.i64[1];
    goto LABEL_781;
  }
  LODWORD(v860) = 0;
  v690 = v1673;
LABEL_859:
  v861 = (unsigned int *)&(*v690)[1150];
  v1599 = *v690;
  v862 = (uint64_t)&(*v690)[4];
  v863 = LODWORD((*v690)[1932].f64[1]);
  if (v863 < v1597)
    bzero((void *)(v862 + 32 * v863 + 21256), 32 * (v1597 - v863));
  v861[3130] = v1597;
  v861[3148] = 0;
  v864 = LODWORD(v1599[109].f64[0]);
  if (v864 < v1636)
    bzero((void *)(v862 + 168 * v864), 168 * (v1674 - v864));
  LODWORD(v1599[109].f64[0]) = v1636;
  v865 = *v861;
  if (v865 < v860)
  {
    v866 = (v860 + ~(_DWORD)v865);
    if ((_DWORD)v860 + ~(_DWORD)v865)
    {
      v867 = v866 + 1;
      v868 = (v866 + 1) & 0x1FFFFFFFELL;
      v869 = v868 + v865;
      v870 = &v1599[255 * v865];
      v871 = v868;
      do
      {
        LODWORD(v870[130].f64[0]) = 0;
        LODWORD(v870[385].f64[0]) = 0;
        LODWORD(v870[384].f64[1]) = 0;
        LODWORD(v870[639].f64[1]) = 0;
        v870 += 510;
        v871 -= 2;
      }
      while (v871);
      if (v867 == v868)
        goto LABEL_881;
    }
    else
    {
      v869 = *v861;
    }
    v874 = v860 - v869;
    v875 = &v1599[255 * v869];
    do
    {
      LODWORD(v875[130].f64[0]) = 0;
      LODWORD(v875[384].f64[1]) = 0;
      v875 += 255;
      --v874;
    }
    while (v874);
    goto LABEL_881;
  }
  if (v865 <= v860)
    goto LABEL_881;
  v872 = v865 - v860;
  if (v872 < 2)
  {
    v873 = v860;
    goto LABEL_879;
  }
  v873 = (v872 & 0xFFFFFFFFFFFFFFFELL) + v860;
  v876 = (_DWORD *)&v1599[255 * v860 + 384].f64[1];
  v877 = v872 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *v876 = 0;
    v876[1020] = 0;
    v876 += 2040;
    v877 -= 2;
  }
  while (v877);
  if (v872 != (v872 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_879:
    v878 = v865 - v873;
    v879 = (_DWORD *)&v1599[255 * v873 + 384].f64[1];
    do
    {
      *v879 = 0;
      v879 += 1020;
      --v878;
    }
    while (v878);
  }
LABEL_881:
  *v861 = v860;
  memset(__dst, 0, 64);
  v880 = v861[66];
  if (v880 < v860)
  {
    v881 = v860 - v880;
    v882 = (float64x2_t *)&v1599[4 * v880 + 1152].f64[1];
    do
    {
      v882[-2] = 0uLL;
      v882[-1] = 0uLL;
      *v882 = __dst[2];
      v460.i64[0] = *(_QWORD *)&__dst[3].f64[0];
      v882[1] = __dst[3];
      v882 += 4;
      --v881;
    }
    while (v881);
  }
  v861[66] = v860;
  v883 = *(_QWORD *)(*(_QWORD *)&v1655 + 1280);
  v884 = *(_QWORD *)(*(_QWORD *)&v1655 + 1288);
  if (v883 != v884)
  {
    v885 = (float64x2_t *)((char *)v1599 + 21320);
    do
    {
      v888 = *(_QWORD *)(v883 + 8);
      if ((_DWORD)v1604 == v1597)
        goto LABEL_886;
      v889 = *(_DWORD *)(v888 + 16);
      v890 = (_DWORD *)*v686;
      v891 = (_DWORD *)v686[1];
      if (v891 != (_DWORD *)*v686)
      {
        v892 = 0x1CAC083126E978D5 * (((uint64_t)v891 - *v686) >> 3);
        do
        {
          v893 = v892 >> 1;
          v894 = &v890[250 * (v892 >> 1)];
          v895 = *v894;
          v896 = v894 + 250;
          v892 += ~(v892 >> 1);
          if (v895 < v889)
            v890 = v896;
          else
            v892 = v893;
        }
        while (v892);
      }
      if (v890 != v891 && *v890 == v889)
      {
LABEL_886:
        v885[1].f64[1] = *(float64_t *)(v888 + 32);
        v886 = *(float64x2_t **)(v888 + 24);
        v887 = v886[4];
        v885[1].f64[0] = v886[5].f64[0];
        *v885 = v887;
        v885 += 2;
      }
      v883 += 16;
    }
    while (v883 != v884);
  }
  v897 = *(_QWORD *)(*(_QWORD *)&v1655 + 320);
  v898 = *(_QWORD *)(*(_QWORD *)&v1655 + 328);
  if (v897 == v898)
  {
    v899 = 0;
  }
  else
  {
    v899 = 0;
    v900 = *(_QWORD *)(*(_QWORD *)&v1655 + 416) + 8;
    do
    {
      v901 = *(_QWORD *)(v897 + 8);
      if (*(_BYTE *)(v901 + 20))
      {
        v902 = *(_QWORD *)(v901 + 96);
        v903 = v862 + 168 * v899;
        _Q2 = *(float64x2_t *)(v901 + 64);
        v460 = *(int8x16_t *)(v901 + 80);
        v462 = *(float64x2_t *)(v901 + 48);
        v904 = *(_QWORD *)(v901 + 120);
        v905 = *(_OWORD *)(v901 + 104);
        v906 = *(_QWORD *)(*(_QWORD *)v900 + 48);
        v907 = *(_OWORD *)(*(_QWORD *)v900 + 32);
        v908 = *(_QWORD *)(*(_QWORD *)v900 + 72);
        v909 = *(_OWORD *)(*(_QWORD *)v900 + 56);
        v910 = *(_QWORD *)(*(_QWORD *)v900 + 96);
        v911 = *(_OWORD *)(*(_QWORD *)v900 + 80);
        *(_OWORD *)v903 = *(_OWORD *)(v901 + 32);
        *(float64x2_t *)(v903 + 16) = v462;
        *(float64x2_t *)(v903 + 32) = _Q2;
        *(int8x16_t *)(v903 + 48) = v460;
        *(_QWORD *)(v903 + 64) = v902;
        *(_OWORD *)(v903 + 72) = v909;
        *(_QWORD *)(v903 + 88) = v908;
        *(_OWORD *)(v903 + 96) = v907;
        *(_QWORD *)(v903 + 112) = v906;
        *(_OWORD *)(v903 + 120) = v911;
        *(_QWORD *)(v903 + 136) = v910;
        *(_OWORD *)(v903 + 144) = v905;
        ++v899;
        *(_QWORD *)(v903 + 160) = v904;
      }
      v897 += 16;
      v900 += 16;
    }
    while (v897 != v898);
  }
  if (v1619 < v1636)
  {
    v912 = *(_QWORD *)(*(_QWORD *)&v1655 + 320);
    v913 = *(_QWORD *)(*(_QWORD *)&v1655 + 328);
    if (v912 != v913)
    {
      v914 = *(_QWORD *)(*(_QWORD *)&v1655 + 416) + 8;
      do
      {
        v915 = *(_QWORD *)(v912 + 8);
        if (!*(_BYTE *)(v915 + 20))
        {
          v916 = *(_QWORD *)(v915 + 96);
          v917 = v862 + 168 * v899;
          _Q2 = *(float64x2_t *)(v915 + 64);
          v460 = *(int8x16_t *)(v915 + 80);
          v462 = *(float64x2_t *)(v915 + 48);
          v918 = *(_QWORD *)(v915 + 120);
          v919 = *(_OWORD *)(v915 + 104);
          v920 = *(_QWORD *)(*(_QWORD *)v914 + 48);
          v921 = *(_OWORD *)(*(_QWORD *)v914 + 32);
          v922 = *(_QWORD *)(*(_QWORD *)v914 + 72);
          v923 = *(_OWORD *)(*(_QWORD *)v914 + 56);
          v924 = *(_QWORD *)(*(_QWORD *)v914 + 96);
          v925 = *(_OWORD *)(*(_QWORD *)v914 + 80);
          *(_OWORD *)v917 = *(_OWORD *)(v915 + 32);
          *(float64x2_t *)(v917 + 16) = v462;
          *(float64x2_t *)(v917 + 32) = _Q2;
          *(int8x16_t *)(v917 + 48) = v460;
          *(_QWORD *)(v917 + 64) = v916;
          *(_OWORD *)(v917 + 72) = v923;
          *(_QWORD *)(v917 + 88) = v922;
          *(_OWORD *)(v917 + 96) = v921;
          *(_QWORD *)(v917 + 112) = v920;
          *(_OWORD *)(v917 + 120) = v925;
          *(_QWORD *)(v917 + 136) = v924;
          *(_OWORD *)(v917 + 144) = v919;
          ++v899;
          *(_QWORD *)(v917 + 160) = v918;
        }
        v912 += 16;
        v914 += 16;
      }
      while (v912 != v913);
    }
  }
  v1598 = v862;
  v1600 = v686 + 6;
  v686[7] = v686[6];
  v926 = LODWORD(v1599[129].f64[1]);
  if (v926 < v1606)
    bzero(&v1599[128].f64[v926 + 1], ((v1601 >> 1) & 0x7FFFFFFF8) - 8 * v926);
  v1679 = v861;
  LODWORD(v1599[129].f64[1]) = v1606;
  v927 = *v1610;
  v928 = *v1608;
  if (*v1610 != *v1608)
  {
    v929 = 0;
    v930 = (_QWORD *)&v1599[128].f64[1];
    do
    {
      v931 = *((_QWORD *)v927 + 1);
      if (*(_BYTE *)(v931 + 20))
      {
        v932 = *v927;
        *v930 = *(_QWORD *)(v931 + 32);
        v933 = *(char **)(v1672 + 48);
        v934 = *(_QWORD *)(v1672 + 56);
        if (v933 != (char *)v934)
        {
          while (*(_DWORD *)v933 != v932)
          {
            v933 += 8;
            if (v933 == (char *)v934)
              goto LABEL_921;
          }
        }
        if (v933 == (char *)v934)
        {
LABEL_921:
          *(_QWORD *)&__dst[0].f64[0] = v932;
          v933 = sub_20F9B999C(v1600, v934, (uint64_t)__dst);
          v690 = v1673;
        }
        *((_DWORD *)v933 + 1) = v929;
        ++v930;
        ++v929;
      }
      v927 += 4;
    }
    while (v927 != v928);
    v935 = *v1610;
    v936 = *v1608;
    while (v935 != v936)
    {
      v937 = *((_QWORD *)v935 + 1);
      if (!*(_BYTE *)(v937 + 20))
      {
        v938 = *v935;
        *v930 = *(_QWORD *)(v937 + 32);
        v939 = *(char **)(v1672 + 48);
        v940 = *(_QWORD *)(v1672 + 56);
        if (v939 != (char *)v940)
        {
          while (*(_DWORD *)v939 != v938)
          {
            v939 += 8;
            if (v939 == (char *)v940)
              goto LABEL_931;
          }
        }
        if (v939 == (char *)v940)
        {
LABEL_931:
          *(_QWORD *)&__dst[0].f64[0] = v938;
          v939 = sub_20F9B999C(v1600, v940, (uint64_t)__dst);
          v690 = v1673;
        }
        *((_DWORD *)v939 + 1) = v929;
        ++v930;
        ++v929;
      }
      v935 += 4;
    }
  }
  v1609 = (_DWORD *)&(*v690)[1953].f64[1];
  *v1609 = -1;
  v941 = *(int **)(*(_QWORD *)&v1655 + 1184);
  v942 = *(int **)(*(_QWORD *)&v1655 + 1192);
  if (v941 != v942)
  {
    v943 = 0;
    do
    {
      v944 = *((_QWORD *)v941 + 1);
      v945 = *v941;
      v946 = (float64x2_t *)((char *)v1599 + 1816);
      switch(*v941)
      {
        case 3:
          break;
        case 4:
          v946 = v1599 + 115;
          break;
        case 5:
          v946 = (float64x2_t *)((char *)v1599 + 1864);
          break;
        case 6:
          v946 = v1599 + 118;
          break;
        default:
          v947 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 600, (uint64_t)"false && \"Shall not reach to an undefined type.\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v946 = (float64x2_t *)((char *)v1599 + 1864);
          if (v947)
            abort();
          return;
      }
      v948 = *(float64x2_t *)(v944 + 32);
      v946[1].f64[0] = *(float64_t *)(v944 + 48);
      *v946 = v948;
      if (*(_BYTE *)(v944 + 20))
        v1609[v943++] = v945;
      v941 += 4;
    }
    while (v941 != v942);
  }
  v949 = atomic_load((unsigned __int8 *)&qword_254A6B828);
  if ((v949 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B828))
  {
    memset(&v1745[40], 0, 24);
    memset(&v1745[8], 0, 24);
    *(_QWORD *)v1745 = 0x3FF0000000000000;
    *(_QWORD *)&v1745[32] = 0x3FF0000000000000;
    *(_QWORD *)&v1745[64] = 0x3FF0000000000000;
    v1781 = 0u;
    v1782 = 0u;
    sub_20F9B8C18((uint64_t)__dst, (__int128 *)v1745, &v1781);
    xmmword_254A6BB60 = (__int128)__dst[2];
    unk_254A6BB70 = __dst[3];
    qword_254A6BB80 = *(_QWORD *)&__dst[4].f64[0];
    xmmword_254A6BB40 = (__int128)__dst[0];
    xmmword_254A6BB50 = (__int128)__dst[1];
    unk_254A6BB98 = *(float64x2_t *)((char *)&__dst[5] + 8);
    unk_254A6BBA8 = *(float64x2_t *)((char *)&__dst[6] + 8);
    unk_254A6BBB8 = *(float64x2_t *)((char *)&__dst[7] + 8);
    qword_254A6BBC8 = *(_QWORD *)&__dst[8].f64[1];
    unk_254A6BB88 = *(float64x2_t *)((char *)&__dst[4] + 8);
    xmmword_254A6BBD0 = (__int128)__dst[9];
    byte_254A6BBE0 = LOBYTE(__dst[10].f64[0]);
    memcpy(&unk_254A6BBE8, &__dst[10].f64[1], 0x12DuLL);
    dword_254A6BF20 = 4;
    xmmword_254A6BF28 = xmmword_2102E3C50;
    xmmword_254A6C0D0 = xmmword_2102E3C60;
    __cxa_atexit((void (*)(void *))sub_20EA79324, &xmmword_254A6BB40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6B828);
  }
  v1686 = 0;
  v950 = v1599 + 1167;
  v951 = 0uLL;
  memset(v1685, 0, sizeof(v1685));
  v952 = v1679[728];
  v953 = (_QWORD *)v1672;
  if (v952 >= v1636)
  {
    v955 = v1673;
    v954 = v1674;
    if (v952 <= v1636)
      goto LABEL_958;
    v963 = v952 - v1674;
    if (v952 - v1674 >= 2)
    {
      v964 = v1674 + (v963 & 0xFFFFFFFFFFFFFFFELL);
      v965 = (_DWORD *)&v1599[1183] + 66 * v1674;
      v966 = v963 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *v965 = 0;
        v965[66] = 0;
        v965 += 132;
        v966 -= 2;
      }
      while (v966);
      if (v963 == (v963 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_958;
    }
    else
    {
      v964 = v1674;
    }
    v967 = v952 - v964;
    v968 = (_DWORD *)&v1599[1183] + 66 * v964;
    do
    {
      *v968 = 0;
      v968 += 66;
      --v967;
    }
    while (v967);
    goto LABEL_958;
  }
  v955 = v1673;
  v954 = v1674;
  do
  {
    v956 = (uint64_t)v950 + 264 * v952;
    *(_DWORD *)(v956 + 256) = 0;
    if ((_DWORD)v1686)
    {
      v957 = 0;
      v958 = (unsigned int *)(v956 + 256);
      v959 = v1685;
      v960 = &v1685[4 * (unint64_t)v1686];
      do
      {
        v961 = (_OWORD *)(v956 + ((unint64_t)v957 << 6));
        v962 = v959[1];
        *v961 = *v959;
        v961[1] = v962;
        v460 = *((int8x16_t *)v959 + 2);
        v951 = *((__n128 *)v959 + 3);
        v961[2] = v460;
        v961[3] = v951;
        v957 = *v958 + 1;
        *v958 = v957;
        v959 += 4;
      }
      while (v959 != v960);
    }
    ++v952;
  }
  while (v952 != v1674);
LABEL_958:
  v1679[728] = v1636;
  LODWORD(v1686) = 0;
  if (v1636)
  {
    v969 = 0;
    v970 = v1599 + 1169;
    v951 = 0uLL;
    do
    {
      v971 = (*(_QWORD *)(v1672 + 32) - *(_QWORD *)(v1672 + 24)) >> 3;
      v972 = (uint64_t)v950 + 264 * v969;
      v973 = *(unsigned int *)(v972 + 256);
      if (v973 < v971)
      {
        v974 = v973 << 6;
        v975 = v970;
        v976 = v973 - v971;
        do
        {
          v977 = (_OWORD *)((char *)v975->f64 + v974);
          *(v977 - 2) = 0uLL;
          *(v977 - 1) = 0uLL;
          v460.i64[0] = 0;
          _Q2 = 0uLL;
          *v977 = 0uLL;
          v977[1] = 0uLL;
          v975 += 4;
          _CF = __CFADD__(v976++, 1);
        }
        while (!_CF);
      }
      *(_DWORD *)(v972 + 256) = v971;
      ++v969;
      v970 = (float64x2_t *)((char *)v970 + 264);
    }
    while (v969 != v954);
  }
  v978 = *(_QWORD *)(v1672 + 32) - *(_QWORD *)(v1672 + 24);
  v979 = v978 >> 3;
  v980 = v1679[66];
  v981 = v978 >> 3;
  if (v980 < (v978 >> 3))
  {
    bzero(&v1599[4 * v980 + 1150].f64[1], ((8 * v978) & 0x3FFFFFFFC0) - (v980 << 6));
    v981 = (*(_QWORD *)(v1672 + 32) - *(_QWORD *)(v1672 + 24)) >> 3;
  }
  v1679[66] = v979;
  if ((_DWORD)v981)
  {
    v982 = 0;
    v1615 = 0;
    v1618 = 0;
    v1620 = 0;
    v1602 = v981;
    v983 = *v1638;
    v1611 = v1599 + 193;
    while (1)
    {
      v984 = &v1599[255 * v982 + 130];
      LODWORD(v984->f64[0]) = v982;
      v985 = *(_DWORD *)(v983 + 4 * v982);
      v1741[118] = 0;
      v1742 = xmmword_2102E3C50;
      v1743 = 0xBFF0000000000000;
      v1744 = 0xFFEFFFFFFFFFFFFFLL;
      v951 = 0uLL;
      v1735 = 0;
      v1737 = 0u;
      v1738 = 0;
      v1734 = 0u;
      v1733 = 0x3FF0000000000000;
      v1736 = 0x3FF0000000000000;
      v1739 = 0x3FF0000000000000;
      memset(v1740, 0, sizeof(v1740));
      v986 = LODWORD(v984[254].f64[1]);
      v1664 = v982;
      if (v985 > v986)
      {
        v987 = v985 - v986;
        v988 = 1016 * v986;
        v989 = v1611;
        do
        {
          LODWORD(v989[-27].f64[(unint64_t)v988 / 8]) = 0;
          *(float64x2_t *)((char *)&v989[-26] + v988 - 8) = (float64x2_t)xmmword_2102E3C50;
          *(float64x2_t *)((char *)v989 + v988) = (float64x2_t)xmmword_2102E3C60;
          v951 = sub_20F9035B4((uint64_t)&v989[-62] + v988 - 8, (uint64_t)&v1733, v1740, (uint64_t)v1741);
          v989 = (float64x2_t *)((char *)v989 + 1016);
          --v987;
        }
        while (v987);
        v983 = *v1638;
        v955 = v1673;
        v982 = v1664;
      }
      LODWORD(v984[254].f64[1]) = v985;
      if (*(_DWORD *)(v983 + 4 * v982))
        break;
      v953 = (_QWORD *)v1672;
LABEL_971:
      ++v982;
      v1611 += 255;
      if (v982 == v1602)
        goto LABEL_1141;
    }
    v990 = 0;
    v1646 = (uint64_t)&v1599[4 * v982 + 1150].f64[1];
    v1650 = (_DWORD *)&v984->f64[1];
    v1626 = &v950[4 * v982];
    HIDWORD(v991) = v982;
    LODWORD(v991) = v982;
    v1661 = v991 >> 13;
    v953 = (_QWORD *)v1672;
    while (2)
    {
      v992 = (unsigned int *)(v953[3] + 8 * v982);
      v1658 = v990;
      if (v990)
        ++v992;
      v993 = *v992;
      v994 = (uint64_t *)v953[21];
      v995 = (uint64_t *)v953[22];
      if (v994 == v995)
      {
LABEL_986:
        v998 = &xmmword_254A6BB40;
        v999 = dword_254A6BF20;
        v1670 = &xmmword_254A6BB40;
        if (dword_254A6BF20 != -1)
          goto LABEL_991;
      }
      else
      {
        while (1)
        {
          v996 = *v994;
          v997 = v994[1];
          if (*v994 != v997)
            break;
LABEL_985:
          v994 += 3;
          if (v994 == v995)
            goto LABEL_986;
        }
        while (*(_DWORD *)v996 != v993)
        {
          v996 += 16;
          if (v996 == v997)
            goto LABEL_985;
        }
        v998 = *(__int128 **)(v996 + 8);
        v999 = *((_DWORD *)v998 + 248);
        v1670 = v998;
        if (v999 != -1)
        {
LABEL_991:
          if (v999 <= 7)
            goto LABEL_992;
          goto LABEL_1002;
        }
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v998 = v1670;
      v999 = *((_DWORD *)v1670 + 248);
      v955 = v1673;
      if (v999 <= 7)
      {
LABEL_992:
        if (v999 > 3)
        {
          if (v999 > 5)
          {
            if (v999 == 6 || *((_BYTE *)v998 + 468))
              goto LABEL_1002;
          }
          else if (v999 == 5 || *((_BYTE *)v998 + 468))
          {
            goto LABEL_1002;
          }
          sub_20EB27C0C((uint64_t)v998 + 204, (double *)v998 + 21, 0x32uLL, (int8x16_t)v951, *(double *)v460.i64, (int8x16_t)_Q2, (int8x16_t)v462);
          v998 = v1670;
          *((_BYTE *)v1670 + 468) = 1;
          v955 = v1673;
          goto LABEL_1002;
        }
        if (!v999)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
      }
LABEL_1002:
      v1000 = *(char **)(*(_QWORD *)&v1655 + 512);
      v1001 = *(char **)(*(_QWORD *)&v1655 + 520);
      if (v1001 != v1000)
      {
        v1002 = (v1001 - v1000) >> 4;
        do
        {
          v1003 = v1002 >> 1;
          v1004 = (unsigned int *)&v1000[16 * (v1002 >> 1)];
          v1006 = *v1004;
          v1005 = (char *)(v1004 + 4);
          v1002 += ~(v1002 >> 1);
          if (v1006 < v993)
            v1000 = v1005;
          else
            v1002 = v1003;
        }
        while (v1002);
      }
      v1007 = (uint64_t)&v1650[254 * v1658];
      if (v1000 == v1001)
      {
        v1008 = *((_DWORD *)v998 + 248);
      }
      else
      {
        v1008 = *((_DWORD *)v998 + 248);
        if (*(_DWORD *)v1000 == v993)
        {
          v1009 = *((_QWORD *)v1000 + 1);
          v1010 = *(unsigned __int8 *)(v1009 + 129);
          v1011 = *(unsigned __int8 *)(v1009 + 128);
          LODWORD(__dst[29].f64[1]) = 0;
          if (v1008)
          {
            sub_20F9BB554((char *)__dst, (uint64_t)v998);
            v998 = v1670;
          }
          __dst[30] = (float64x2_t)xmmword_2102E3C50;
          __dst[56].f64[1] = -1.0;
          __dst[57].f64[0] = -1.79769313e308;
          v951 = sub_20F9035B4(v1007, v1009 + 32, (_QWORD *)(v1009 + 104), (uint64_t)__dst);
          v1615 += v1010;
          v1618 += v1011;
          v955 = v1673;
LABEL_1017:
          v953 = (_QWORD *)v1672;
          v982 = v1664;
          v1012 = *(char **)(*(_QWORD *)&v1655 + 896);
          v1013 = *(char **)(*(_QWORD *)&v1655 + 904);
          if (v1013 != v1012)
          {
            v1014 = (v1013 - v1012) >> 4;
            do
            {
              v1015 = v1014 >> 1;
              v1016 = (unsigned int *)&v1012[16 * (v1014 >> 1)];
              v1018 = *v1016;
              v1017 = (char *)(v1016 + 4);
              v1014 += ~(v1014 >> 1);
              if (v1018 < v993)
                v1012 = v1017;
              else
                v1014 = v1015;
            }
            while (v1014);
          }
          if (v1012 == v1013 || *(_DWORD *)v1012 != v993)
          {
            v1021 = 0;
            if (!v1636)
              goto LABEL_978;
LABEL_1030:
            if (v1658)
              v1022 = (float64x2_t *)(v1646 + 32);
            else
              v1022 = (float64x2_t *)v1646;
            v1023 = v1626;
            if (v1658)
              v1023 = v1626 + 2;
            v1680 = v1023;
            if (!v1021)
            {
              v1052 = 0;
              while (1)
              {
                v1055 = (uint64_t *)(v953[21] + 24 * v1052);
                v1056 = *v1055;
                v1057 = v1055[1];
                if (v1056 != v1057)
                {
                  while (*(_DWORD *)v1056 != v993)
                  {
                    v1056 += 16;
                    if (v1056 == v1057)
                      goto LABEL_1114;
                  }
                }
                if (v1056 == v1057)
                {
LABEL_1114:
                  v1059 = *((_DWORD *)v998 + 248);
                  if (v1059 == -1)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v1060 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v1060 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v1062 = qword_254A6DE40;
                      for (k = qword_254A6DE48; v1062 != k; v1062 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1062)(*(_QWORD *)(v1062 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    }
                    v1063 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v1063 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    v998 = v1670;
                    v953 = (_QWORD *)v1672;
                    v1059 = *((_DWORD *)v1670 + 248);
                    v955 = v1673;
                    v982 = v1664;
                  }
                  v1053 = v998;
                  if (!v1059)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                }
                else
                {
                  v1053 = *(__int128 **)(v1056 + 8);
                  v1058 = *((_DWORD *)v1053 + 248);
                  if (v1058 == -1)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v1064 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v1064 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v1066 = qword_254A6DE40;
                      for (m = qword_254A6DE48; v1066 != m; v1066 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1066)(*(_QWORD *)(v1066 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    }
                    v1067 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v1067 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68)
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                    v953 = (_QWORD *)v1672;
                    v955 = v1673;
                    v982 = v1664;
                    v998 = v1670;
                    if (!*((_DWORD *)v1053 + 248))
                    {
LABEL_1500:
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                      abort();
                    }
                  }
                  else if (!v1058)
                  {
                    goto LABEL_1500;
                  }
                }
                v1054 = (float64x2_t *)((char *)v1680 + 264 * v1052);
                v460 = (int8x16_t)v1053[1];
                v951 = (__n128)v1053[2];
                _Q2 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1053, (int64x2_t)v951);
                v460.i64[1] = *((_QWORD *)v1053 + 5);
                *v1054 = _Q2;
                v1054[1] = (float64x2_t)v460;
                if (++v1052 == v1674)
                  goto LABEL_978;
              }
            }
            v1024 = 0;
LABEL_1039:
            while (1)
            {
              v1027 = (_OWORD *)&v1680->f64[33 * v1024];
              v1028 = (int8x8_t)v1021[1];
              if (v1028)
              {
                v1029 = v1661 ^ v1024;
                v1030 = (uint8x8_t)vcnt_s8(v1028);
                v1030.i16[0] = vaddlv_u8(v1030);
                if (v1030.u32[0] > 1uLL)
                {
                  v1031 = v1661 ^ v1024;
                  if (*(_QWORD *)&v1028 <= v1029)
                    v1031 = v1029 % *(_QWORD *)&v1028;
                }
                else
                {
                  v1031 = (v1028.i32[0] - 1) & v1029;
                }
                v1032 = *(uint64_t ***)(*v1021 + 8 * v1031);
                if (v1032)
                {
                  v1033 = *v1032;
                  if (v1033)
                    break;
                }
              }
LABEL_1069:
              v1039 = (uint64_t *)(v953[21] + 24 * v1024);
              v1040 = *v1039;
              v1041 = v1039[1];
              if (v1040 != v1041)
              {
                while (*(_DWORD *)v1040 != v993)
                {
                  v1040 += 16;
                  if (v1040 == v1041)
                    goto LABEL_1077;
                }
              }
              if (v1040 == v1041)
              {
LABEL_1077:
                v1043 = *((_DWORD *)v998 + 248);
                if (v1043 == -1)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v1044 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1044 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1045 = qword_254A6DE40;
                    for (n = qword_254A6DE48; v1045 != n; v1045 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1045)(*(_QWORD *)(v1045 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  }
                  v1047 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1047 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  v998 = v1670;
                  v953 = (_QWORD *)v1672;
                  v1043 = *((_DWORD *)v1670 + 248);
                  v982 = v1664;
                }
                v1025 = v998;
                if (!v1043)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
              }
              else
              {
                v1025 = *(__int128 **)(v1040 + 8);
                v1042 = *((_DWORD *)v1025 + 248);
                if (v1042 == -1)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v1048 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1048 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v1049 = qword_254A6DE40;
                    for (ii = qword_254A6DE48; v1049 != ii; v1049 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1049)(*(_QWORD *)(v1049 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  }
                  v1051 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v1051 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                  v998 = v1670;
                  v953 = (_QWORD *)v1672;
                  v982 = v1664;
                  if (!*((_DWORD *)v1025 + 248))
                  {
LABEL_1498:
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                }
                else if (!v1042)
                {
                  goto LABEL_1498;
                }
              }
              v1026 = (float64x2_t)v1025[1];
              _Q2 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1025, *((int64x2_t *)v1025 + 2));
              v1026.f64[1] = *((float64_t *)v1025 + 5);
              *v1027 = _Q2;
              v1027[1] = v1026;
              v462 = *v1022;
              v951 = (__n128)vsubq_f64(v1026, v1022[1]);
              v460 = (int8x16_t)vsubq_f64(_Q2, *v1022);
              *v1027 = v460;
              v1027[1] = v951;
              ++v1024;
              v955 = v1673;
              if (v1024 == v1674)
                goto LABEL_978;
            }
            if (v1030.u32[0] < 2uLL)
            {
              v1034 = *(_QWORD *)&v1028 - 1;
              while (1)
              {
                v1036 = v1033[1];
                if (v1036 == v1029)
                {
                  if (v982 == *((_DWORD *)v1033 + 8) && !v1033[2] && v1024 == *((_DWORD *)v1033 + 6))
                    goto LABEL_1063;
                }
                else if ((v1036 & v1034) != v1031)
                {
                  goto LABEL_1069;
                }
                v1033 = (uint64_t *)*v1033;
                if (!v1033)
                  goto LABEL_1069;
              }
            }
            while (1)
            {
              v1035 = v1033[1];
              if (v1035 == v1029)
              {
                if (v982 == *((_DWORD *)v1033 + 8) && !v1033[2] && v1024 == *((_DWORD *)v1033 + 6))
                {
LABEL_1063:
                  v1037 = v1033[6];
                  v1038 = *(_DWORD *)(v1037 + 992);
                  if (v1038 == -1)
                  {
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    v1038 = *(_DWORD *)(v1037 + 992);
                    v953 = (_QWORD *)v1672;
                    v982 = v1664;
                  }
                  if (!v1038)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  v951 = *(__n128 *)(v1037 + 16);
                  _Q2 = *(float64x2_t *)v1037;
                  v951.n128_u64[1] = *(_QWORD *)(v1037 + 40);
                  v460 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v1037, *(int64x2_t *)(v1037 + 32));
                  v998 = v1670;
                  *v1027 = v460;
                  v1027[1] = v951;
                  ++v1024;
                  v955 = v1673;
                  if (v1024 == v1674)
                    goto LABEL_978;
                  goto LABEL_1039;
                }
              }
              else
              {
                if (v1035 >= *(_QWORD *)&v1028)
                  v1035 %= *(_QWORD *)&v1028;
                if (v1035 != v1031)
                  goto LABEL_1069;
              }
              v1033 = (uint64_t *)*v1033;
              if (!v1033)
                goto LABEL_1069;
            }
          }
          v1019 = *((_QWORD *)v1012 + 1);
          v1620 += *(unsigned __int8 *)(v1019 + 144);
          v1020 = (_OWORD *)v1646;
          if (v1658)
            v1020 = (_OWORD *)(v1646 + 32);
          v951 = *(__n128 *)(v1019 + 32);
          v460 = *(int8x16_t *)(v1019 + 48);
          *v1020 = v951;
          v1020[1] = v460;
          v1021 = (_QWORD *)(v1019 + 104);
          if (v1636)
            goto LABEL_1030;
LABEL_978:
          v990 = v1658 + 1;
          v983 = *v1638;
          if (v1658 + 1 >= (unint64_t)*(unsigned int *)(*v1638 + 4 * v982))
            goto LABEL_971;
          continue;
        }
      }
      break;
    }
    memset(&v1745[40], 0, 24);
    memset(&v1745[8], 0, 24);
    *(_QWORD *)v1745 = 0x3FF0000000000000;
    *(_QWORD *)&v1745[32] = 0x3FF0000000000000;
    *(_QWORD *)&v1745[64] = 0x3FF0000000000000;
    v1781 = 0uLL;
    *(_QWORD *)&v1782 = 0;
    LODWORD(__dst[29].f64[1]) = 0;
    if (v1008)
    {
      sub_20F9BB554((char *)__dst, (uint64_t)v998);
      v955 = v1673;
      v998 = v1670;
    }
    __dst[30] = (float64x2_t)xmmword_2102E3C50;
    __dst[56].f64[1] = -1.0;
    __dst[57].f64[0] = -1.79769313e308;
    v951 = sub_20F9035B4(v1007, (uint64_t)v1745, &v1781, (uint64_t)__dst);
    goto LABEL_1017;
  }
  v1620 = 0;
  v1618 = 0;
  v1615 = 0;
LABEL_1141:
  v1068 = *(_QWORD *)(*(_QWORD *)&v1655 + 1184);
  v1069 = *(_QWORD *)(*(_QWORD *)&v1655 + 1192);
  if (v1068 == v1069)
  {
    v1074 = 0;
    v1071 = v1620;
    v1072 = v1618;
    v1073 = v1615;
  }
  else
  {
    v1070 = v1069 - v1068 - 16;
    v1071 = v1620;
    v1072 = v1618;
    v1073 = v1615;
    v1074 = 0;
    if (v1070 < 0x10)
    {
      v1075 = *(_QWORD *)(*(_QWORD *)&v1655 + 1184);
      goto LABEL_1148;
    }
    v1076 = 0;
    v1077 = (v1070 >> 4) + 1;
    v1075 = v1068 + 16 * (v1077 & 0x1FFFFFFFFFFFFFFELL);
    v1078 = (uint64_t *)(v1068 + 24);
    v1079 = v1077 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v1080 = *(v1078 - 2);
      v1081 = *v1078;
      v1078 += 4;
      v1074 += *(unsigned __int8 *)(v1080 + 56);
      v1076 += *(unsigned __int8 *)(v1081 + 56);
      v1079 -= 2;
    }
    while (v1079);
    v1074 += v1076;
    if (v1077 != (v1077 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_1148:
        v1074 += *(unsigned __int8 *)(*(_QWORD *)(v1075 + 8) + 56);
        v1075 += 16;
      }
      while (v1075 != v1069);
    }
  }
  v1082 = (__n128 *)*v955;
  v1083 = (BOOL *)&(*v955)[1941].f64[1];
  BYTE1((*v955)[1942].f64[0]) = v1074 != 0;
  v1084 = v1073 != 0;
  *v1083 = v1073 != 0;
  if (!v1072)
    v1084 = 0;
  v1083[1] = v1084;
  v1083[8] = v1071 != 0;
  v1085 = *(_QWORD **)(*(_QWORD *)&v1655 + 1856);
  v1086 = *(_QWORD *)(*(_QWORD *)&v1655 + 1864);
  if (v1086)
  {
    v1087 = *(float64x2_t *)(v1086 + 16);
    *(float64x2_t *)((char *)v1599 + 1752) = *(float64x2_t *)v1086;
    *(float64x2_t *)((char *)v1599 + 1768) = v1087;
    v1088 = *(float64x2_t *)(v1086 + 32);
    v1599[112].f64[1] = *(float64_t *)(v1086 + 48);
    *(float64x2_t *)((char *)v1599 + 1784) = v1088;
    v1599[113].f64[0] = *(float64_t *)(v1086 + 56);
    v1089 = *(float64x2_t *)(v1086 + 64);
    v1599[114].f64[1] = *(float64_t *)(v1086 + 80);
    *(float64x2_t *)((char *)v1599 + 1816) = v1089;
    v1090 = *(float64x2_t *)(v1086 + 88);
    v1599[116].f64[0] = *(float64_t *)(v1086 + 104);
    v1599[115] = v1090;
    v1091 = *(float64x2_t *)(v1086 + 112);
    v1599[117].f64[1] = *(float64_t *)(v1086 + 128);
    *(float64x2_t *)((char *)v1599 + 1864) = v1091;
    v1092 = *(float64x2_t *)(v1086 + 136);
    v1599[119].f64[0] = *(float64_t *)(v1086 + 152);
    v1599[118] = v1092;
    v1094 = *(float64x2_t *)(v1086 + 192);
    v1093 = *(float64x2_t *)(v1086 + 208);
    v1095 = *(float64x2_t *)(v1086 + 176);
    v1599[123].f64[1] = *(float64_t *)(v1086 + 224);
    *(float64x2_t *)((char *)v1599 + 1944) = v1094;
    *(float64x2_t *)((char *)v1599 + 1960) = v1093;
    *(float64x2_t *)((char *)v1599 + 1928) = v1095;
    *(float64x2_t *)((char *)v1599 + 1912) = *(float64x2_t *)(v1086 + 160);
    v1096 = *(float64x2_t *)(v1086 + 264);
    v1097 = *(float64x2_t *)(v1086 + 280);
    v1098 = *(double *)(v1086 + 296);
    v1599[125] = *(float64x2_t *)(v1086 + 248);
    v1599[128].f64[0] = v1098;
    v1599[127] = v1097;
    v1599[126] = v1096;
    v951 = *(__n128 *)(v1086 + 232);
    v1599[124] = (float64x2_t)v951;
    v1082 = (__n128 *)*v955;
  }
  v1099 = v1082 + 28406;
  v1082[28406].n128_u32[0] = 0;
  v1082[28454].n128_u32[2] = 0;
  v1100 = v1082 + 31955;
  v1082[31955].n128_u32[0] = 0;
  *(_QWORD *)(*(_QWORD *)&v1655 + 57760) = v1085;
  if (!v1085)
  {
    v1082[28454].n128_u32[2] = 0;
    v1100->n128_u32[0] = 0;
    goto LABEL_1170;
  }
  v1101 = v1085[5];
  LODWORD(__dst[48].f64[0]) = 0;
  v1102 = 0;
  if (v1101)
  {
    v1103 = 0;
    do
    {
      v1104 = (int64x2_t *)(*v1085 + 32 * ((v1103 + v1085[3]) % (unint64_t)((uint64_t)(v1085[1] - *v1085) >> 5)));
      v951.n128_u64[0] = v1104->u64[1];
      v1105 = (int32x2_t *)__dst + 3 * v1102;
      v1106 = vmovn_s64(v1104[1]);
      v1105->i32[0] = v1104->i32[0];
      v1105[1] = (int32x2_t)v951.n128_u64[0];
      v1105[2] = v1106;
      ++v1103;
      v1107 = v1085[5];
      v1102 = ++LODWORD(__dst[48].f64[0]);
    }
    while (v1103 != v1107);
  }
  v1108 = &__dst[48].f64[1];
  v1109 = v1085[6];
  v1110 = v1085[7];
  v1732 = 0;
  if (v1109 == v1110)
  {
    v1111 = 0;
    v1082[28454].n128_u32[2] = 0;
    if (v1102)
      goto LABEL_1161;
LABEL_1167:
    LODWORD(__dst[48].f64[0]) = 0;
    v1100->n128_u32[0] = 0;
    if (!v1111)
      goto LABEL_1170;
    goto LABEL_1168;
  }
  v1111 = 0;
  do
  {
    v1112 = &__dst[48].f64[7 * v1111 + 1];
    *v1112 = *(float64_t *)v1109;
    v1113 = *(_OWORD *)(v1109 + 8);
    v1112[3] = *(float64_t *)(v1109 + 24);
    *(_OWORD *)(v1112 + 1) = v1113;
    v951 = *(__n128 *)(v1109 + 32);
    v1112[6] = *(float64_t *)(v1109 + 48);
    *((__n128 *)v1112 + 2) = v951;
    v1732 = ++v1111;
    v1109 += 56;
  }
  while (v1109 != v1110);
  v1082[28454].n128_u32[2] = 0;
  if (!v1102)
    goto LABEL_1167;
LABEL_1161:
  v1114 = 0;
  v1115 = 24 * v1102;
  v1116 = __dst;
  do
  {
    v1117 = (uint64_t)&v1082[28406].n128_i64[3 * v1114 + 1];
    v951 = *(__n128 *)v1116;
    *(float64_t *)(v1117 + 16) = v1116[1].f64[0];
    *(__n128 *)v1117 = v951;
    v1116 = (float64x2_t *)((char *)v1116 + 24);
    v1114 = v1082[28454].n128_u32[2] + 1;
    v1082[28454].n128_u32[2] = v1114;
    v1115 -= 24;
  }
  while (v1115);
  v1111 = v1732;
  LODWORD(__dst[48].f64[0]) = 0;
  v1100->n128_u32[0] = 0;
  if (v1111)
  {
LABEL_1168:
    v1118 = &__dst[48].f64[7 * v1111 + 1];
    v1119 = v1082 + 28457;
    v1120 = 1;
    do
    {
      v1119[-2].n128_f64[0] = *v1108;
      v1121 = *(__n128 *)(v1108 + 1);
      v1119[-1].n128_f64[1] = v1108[3];
      *(__n128 *)((char *)v1119 - 24) = v1121;
      v951 = *(__n128 *)(v1108 + 4);
      v1119[1].n128_f64[0] = v1108[6];
      *v1119 = v951;
      v1119 = (__n128 *)((char *)v1119 + 56);
      v1100->n128_u32[0] = v1120++;
      v1108 += 7;
    }
    while (v1108 != v1118);
  }
LABEL_1170:
  v1122 = v1082 + 28388;
  v1123 = *(_QWORD *)(*(_QWORD *)&v1655 + 1504);
  for (jj = *(_QWORD *)(*(_QWORD *)&v1655 + 1496); jj != v1123; jj += 8016)
  {
    v1128 = *(_QWORD *)(jj + 7696);
    v1129 = *(_QWORD *)(jj + 7712);
    v1130 = *(_QWORD *)(jj + 7728);
    if (((*(unsigned __int8 *)(*(_QWORD *)(jj + 7704) + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v1128 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v1129 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(*(_QWORD *)(jj + 7720) + 4) >> 2) & 1) == (char)(32 * *(_BYTE *)(v1130 + 4)) >> 7)
      v1131 = 2;
    else
      v1131 = 1;
    if ((v1131 & v1613) != 0)
    {
      if (!*v1612
        || (v1132 = *(_DWORD *)(*(_QWORD *)&v1655 + 57684),
            v1133 = (*(_DWORD *)(v1128 + 16) - v1132),
            v1135 = v953[25],
            v1134 = v953[26],
            v1136 = 0xAAAAAAAAAAAAAAABLL * ((v1134 - v1135) >> 2),
            v1136 <= v1133)
        || ((v1137 = v1135 + 12 * v1133, v1137 != v1134)
          ? (v1138 = *(_BYTE *)(v1137 + 8) == 0)
          : (v1138 = 1),
            v1138))
      {
        v1589 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1589, "Key does not exist in the map.");
        __cxa_throw(v1589, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v1139 = (*(_DWORD *)(v1129 + 16) - v1132);
      if (v1136 <= v1139
        || ((v1140 = v1135 + 12 * v1139, v1140 != v1134)
          ? (v1141 = *(_BYTE *)(v1140 + 8) == 0)
          : (v1141 = 1),
            v1141))
      {
        v1590 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1590, "Key does not exist in the map.");
        __cxa_throw(v1590, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v1142 = *(_DWORD *)(v1137 + 4);
      v1143 = *(_DWORD *)(v1140 + 4);
      v1145 = (_DWORD *)v953[6];
      v1144 = (_DWORD *)v953[7];
      if (v1145 != v1144)
      {
        while (*v1145 != *(_DWORD *)(v1130 + 16))
        {
          v1145 += 2;
          if (v1145 == v1144)
            goto LABEL_1193;
        }
      }
      if (v1145 == v1144)
      {
LABEL_1193:
        v1146 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(v1146, "key not found in map");
        __cxa_throw(v1146, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v1125 = v1145[1];
      v1126 = *(_BYTE *)(v1130 + 20);
      v1127 = &v1122[2 * v1099->n128_u32[0]];
      v951 = *(__n128 *)(jj + 72);
      v1127->n128_u32[0] = v1142;
      v1127->n128_u32[1] = v1143;
      v1127->n128_u32[2] = v1125;
      v1127->n128_u8[12] = v1126;
      v1127[1] = v951;
      ++v1099->n128_u32[0];
    }
  }
  v1147 = (char **)(*(_QWORD *)&v1655 + 57768);
  v1630 = (_BYTE *)(*(_QWORD *)&v1655 + 40736);
  v1623 = (_BYTE *)(*(_QWORD *)&v1655 + 40304);
  v1627 = (_QWORD *)(*(_QWORD *)&v1655 + 3008);
  v1148 = &v1082[32202].n128_u64[1];
  v1635 = v1082 + 28406;
  v1149 = v1099->n128_u32[0];
  v1150 = 126 - 2 * __clz(v1149);
  if ((_DWORD)v1149)
    v1151 = v1150;
  else
    v1151 = 0;
  v1675 = v1082 + 28388;
  sub_20F9BC74C((uint64_t)&v1082[28388], &v1122[2 * v1149], v1151, 1, v951);
  v1152 = *v1673 + 1955;
  if (LOBYTE(v1152->f64[0]))
  {
    v1082[31956].n128_u64[1] = 0x7FF8000000000000;
    *v1148 = 0x7FF8000000000000;
    v1082[32448].n128_u64[1] = 0x7FF8000000000000;
    v1082[32694].n128_u64[1] = 0x7FF8000000000000;
    v1082[32940].n128_u64[1] = 0x7FF8000000000000;
    v1082[33186].n128_u64[1] = 0x7FF8000000000000;
    v1082[33432].n128_u64[1] = 0x7FF8000000000000;
    v1082[33678].n128_u64[1] = 0x7FF8000000000000;
    v1082[33924].n128_u64[1] = 0x7FF8000000000000;
    v1082[34170].n128_u64[0] = 0;
    v1082[34170].n128_u8[8] = 0;
    LOBYTE(v1152->f64[0]) = 0;
  }
  v1153 = 0;
  v1154 = v1082 + 31956;
  v1155 = 9;
  do
  {
    v1156 = &__dst[v1153];
    *v1156 = (float64x2_t)v1154[v1153];
    *(_QWORD *)&v1156[1].f64[0] = v1154[v1153 + 1].n128_u64[0];
    *(float64x2_t *)((char *)v1156 + 40) = *(float64x2_t *)((char *)&v1154[v1153 + 2] + 8);
    *(float64x2_t *)((char *)v1156 + 56) = *(float64x2_t *)((char *)&v1154[v1153 + 3] + 8);
    *(float64x2_t *)((char *)v1156 + 72) = *(float64x2_t *)((char *)&v1154[v1153 + 4] + 8);
    *(_QWORD *)&v1156[5].f64[1] = v1154[v1153 + 5].n128_u64[1];
    *(float64x2_t *)((char *)v1156 + 24) = *(float64x2_t *)((char *)&v1154[v1153 + 1] + 8);
    v1157 = (float64x2_t)v1154[v1153 + 6];
    v1158 = (float64x2_t)v1154[v1153 + 7];
    v1159 = (float64x2_t)v1154[v1153 + 9];
    v1156[8] = (float64x2_t)v1154[v1153 + 8];
    v1156[9] = v1159;
    v1156[6] = v1157;
    v1156[7] = v1158;
    v1160 = (float64x2_t)v1154[v1153 + 10];
    v1161 = (float64x2_t)v1154[v1153 + 11];
    v1162 = (float64x2_t)v1154[v1153 + 12];
    *(_QWORD *)&v1156[13].f64[0] = v1154[v1153 + 13].n128_u64[0];
    v1156[11] = v1161;
    v1156[12] = v1162;
    v1156[10] = v1160;
    v1163 = &__dst[v1153 + 13].f64[1];
    v1164 = *(float64x2_t *)((char *)&v1154[v1153 + 13] + 8);
    v1165 = *(float64x2_t *)((char *)&v1154[v1153 + 14] + 8);
    v1166 = *(float64x2_t *)((char *)&v1154[v1153 + 15] + 8);
    *((__n128 *)v1163 + 3) = *(__n128 *)((char *)&v1154[v1153 + 16] + 8);
    *(float64x2_t *)((char *)v1156 + 248) = v1166;
    *(float64x2_t *)((char *)v1156 + 232) = v1165;
    *(float64x2_t *)((char *)v1156 + 216) = v1164;
    v1167 = *(__int128 *)((char *)&v1154[v1153 + 17] + 8);
    v1168 = *(__int128 *)((char *)&v1154[v1153 + 18] + 8);
    v1169 = *(__int128 *)((char *)&v1154[v1153 + 19] + 8);
    *(_QWORD *)&v1156[20].f64[1] = v1154[v1153 + 20].n128_u64[1];
    *((_OWORD *)v1163 + 5) = v1168;
    *((_OWORD *)v1163 + 6) = v1169;
    *((_OWORD *)v1163 + 4) = v1167;
    memcpy(&__dst[v1153 + 21], &v1154[v1153 + 21], 0x168uLL);
    memcpy(&__dst[v1153 + 43].f64[1], &v1154[v1153 + 43].n128_i8[8], 0x168uLL);
    memcpy(&__dst[v1153 + 66], &v1154[v1153 + 66], 0x438uLL);
    memcpy(&__dst[v1153 + 133].f64[1], &v1154[v1153 + 133].n128_i8[8], 0x168uLL);
    memcpy(&__dst[v1153 + 156], &v1154[v1153 + 156], 0x168uLL);
    memcpy(&__dst[v1153 + 178].f64[1], &v1154[v1153 + 178].n128_i8[8], 0x438uLL);
    v1153 += 246;
    --v1155;
  }
  while (v1155);
  v1172 = *(_OWORD **)(*(_QWORD *)&v1655 + 57792);
  v1174 = *v1147;
  v1173 = *(char **)(*(_QWORD *)&v1655 + 57776);
  v1175 = 0xCF3CF3CF3CF3CF3DLL * ((v1173 - *v1147) >> 4);
  v1176 = *(_QWORD *)(*(_QWORD *)&v1655 + 57808);
  if (0xCF3CF3CF3CF3CF3DLL * ((v1176 - (uint64_t)v1172) >> 4) < v1175)
  {
    if (v1172)
    {
      *(_QWORD *)(*(_QWORD *)&v1655 + 57800) = v1172;
      operator delete(v1172);
      v1176 = 0;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57792) = 0;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57800) = 0;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57808) = 0;
    }
    if (v1175 > 0xC30C30C30C30C3)
      sub_20E867F44();
    v1177 = 0xCF3CF3CF3CF3CF3DLL * (v1176 >> 4);
    v1178 = 2 * v1177;
    if (2 * v1177 <= v1175)
      v1178 = v1175;
    if (v1177 >= 0x61861861861861)
      v1179 = 0xC30C30C30C30C3;
    else
      v1179 = v1178;
    if (v1179 > 0xC30C30C30C30C3)
      sub_20E867F44();
    v1172 = operator new(336 * v1179);
    *(_QWORD *)(*(_QWORD *)&v1655 + 57800) = v1172;
    v1180 = (_OWORD **)(*(_QWORD *)&v1655 + 57800);
    *(_QWORD *)(*(_QWORD *)&v1655 + 57792) = v1172;
    *(_QWORD *)(*(_QWORD *)&v1655 + 57808) = &v1172[21 * v1179];
    v1181 = v1172;
    v1182 = v1672;
    v1183 = v1082 + 28388;
    if (v1174 != v1173)
    {
      v1181 = v1172;
      do
      {
        v1184 = *(_OWORD *)v1174;
        v1185 = *((_OWORD *)v1174 + 2);
        v1181[1] = *((_OWORD *)v1174 + 1);
        v1181[2] = v1185;
        *v1181 = v1184;
        v1186 = *((_OWORD *)v1174 + 3);
        v1187 = *((_OWORD *)v1174 + 4);
        v1188 = *((_OWORD *)v1174 + 6);
        v1181[5] = *((_OWORD *)v1174 + 5);
        v1181[6] = v1188;
        v1181[3] = v1186;
        v1181[4] = v1187;
        v1189 = *((_OWORD *)v1174 + 7);
        v1190 = *((_OWORD *)v1174 + 8);
        v1191 = *((_OWORD *)v1174 + 9);
        *((_QWORD *)v1181 + 20) = *((_QWORD *)v1174 + 20);
        v1181[8] = v1190;
        v1181[9] = v1191;
        v1181[7] = v1189;
        v1192 = *(_OWORD *)(v1174 + 168);
        v1193 = *(_OWORD *)(v1174 + 184);
        *(_OWORD *)((char *)v1181 + 200) = *(_OWORD *)(v1174 + 200);
        *(_OWORD *)((char *)v1181 + 184) = v1193;
        *(_OWORD *)((char *)v1181 + 168) = v1192;
        v1194 = *(_OWORD *)(v1174 + 216);
        v1195 = *(_OWORD *)(v1174 + 232);
        v1196 = *(_OWORD *)(v1174 + 248);
        *(_OWORD *)((char *)v1181 + 264) = *(_OWORD *)(v1174 + 264);
        *(_OWORD *)((char *)v1181 + 248) = v1196;
        *(_OWORD *)((char *)v1181 + 232) = v1195;
        *(_OWORD *)((char *)v1181 + 216) = v1194;
        v1197 = *(_OWORD *)(v1174 + 280);
        v1198 = *(_OWORD *)(v1174 + 296);
        v1199 = *(_OWORD *)(v1174 + 312);
        *((_QWORD *)v1181 + 41) = *((_QWORD *)v1174 + 41);
        *(_OWORD *)((char *)v1181 + 296) = v1198;
        *(_OWORD *)((char *)v1181 + 312) = v1199;
        *(_OWORD *)((char *)v1181 + 280) = v1197;
        v1181 += 21;
        v1174 += 336;
      }
      while (v1174 != v1173);
    }
    goto LABEL_1226;
  }
  v1180 = (_OWORD **)(*(_QWORD *)&v1655 + 57800);
  v1200 = *(_OWORD **)(*(_QWORD *)&v1655 + 57800);
  v1183 = v1082 + 28388;
  if (0xCF3CF3CF3CF3CF3DLL * (v1200 - v1172) >= v1175)
  {
    v1182 = v1672;
    v1181 = *(_OWORD **)(*(_QWORD *)&v1655 + 57792);
    if (v1174 != v1173)
    {
      v1238 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
      do
      {
        v1239 = *(_OWORD *)v1174;
        v1240 = *((_OWORD *)v1174 + 2);
        *(_OWORD *)(v1238 + 16) = *((_OWORD *)v1174 + 1);
        *(_OWORD *)(v1238 + 32) = v1240;
        *(_OWORD *)v1238 = v1239;
        v1241 = *((_OWORD *)v1174 + 3);
        v1242 = *((_OWORD *)v1174 + 4);
        v1243 = *((_OWORD *)v1174 + 6);
        *(_OWORD *)(v1238 + 80) = *((_OWORD *)v1174 + 5);
        *(_OWORD *)(v1238 + 96) = v1243;
        *(_OWORD *)(v1238 + 48) = v1241;
        *(_OWORD *)(v1238 + 64) = v1242;
        v1244 = *((_OWORD *)v1174 + 7);
        v1245 = *((_OWORD *)v1174 + 8);
        v1246 = *((_OWORD *)v1174 + 9);
        *(_QWORD *)(v1238 + 160) = *((_QWORD *)v1174 + 20);
        *(_OWORD *)(v1238 + 128) = v1245;
        *(_OWORD *)(v1238 + 144) = v1246;
        *(_OWORD *)(v1238 + 112) = v1244;
        v1247 = *(_OWORD *)(v1174 + 168);
        v1248 = *(_OWORD *)(v1174 + 184);
        *(_OWORD *)(v1238 + 200) = *(_OWORD *)(v1174 + 200);
        *(_OWORD *)(v1238 + 184) = v1248;
        *(_OWORD *)(v1238 + 168) = v1247;
        v1249 = *(_OWORD *)(v1174 + 216);
        v1250 = *(_OWORD *)(v1174 + 232);
        v1251 = *(_OWORD *)(v1174 + 248);
        *(_OWORD *)(v1238 + 264) = *(_OWORD *)(v1174 + 264);
        *(_OWORD *)(v1238 + 248) = v1251;
        *(_OWORD *)(v1238 + 232) = v1250;
        *(_OWORD *)(v1238 + 216) = v1249;
        v1252 = *(_OWORD *)(v1174 + 280);
        v1253 = *(_OWORD *)(v1174 + 296);
        v1254 = *(_OWORD *)(v1174 + 312);
        *(_QWORD *)(v1238 + 328) = *((_QWORD *)v1174 + 41);
        *(_OWORD *)(v1238 + 296) = v1253;
        *(_OWORD *)(v1238 + 312) = v1254;
        *(_OWORD *)(v1238 + 280) = v1252;
        v1181 += 21;
        v1174 += 336;
        v1238 += 336;
      }
      while (v1174 != v1173);
    }
LABEL_1226:
    v1237 = (char *)v1181 - (char *)v1172;
    v1219 = v1082 + 28406;
  }
  else
  {
    v1201 = &v1174[16 * (v1200 - v1172)];
    v1182 = v1672;
    if (v1200 != v1172)
    {
      do
      {
        v1202 = *(_OWORD *)v1174;
        v1203 = *((_OWORD *)v1174 + 2);
        v1172[1] = *((_OWORD *)v1174 + 1);
        v1172[2] = v1203;
        *v1172 = v1202;
        v1204 = *((_OWORD *)v1174 + 3);
        v1205 = *((_OWORD *)v1174 + 4);
        v1206 = *((_OWORD *)v1174 + 6);
        v1172[5] = *((_OWORD *)v1174 + 5);
        v1172[6] = v1206;
        v1172[3] = v1204;
        v1172[4] = v1205;
        v1207 = *((_OWORD *)v1174 + 7);
        v1208 = *((_OWORD *)v1174 + 8);
        v1209 = *((_OWORD *)v1174 + 9);
        *((_QWORD *)v1172 + 20) = *((_QWORD *)v1174 + 20);
        v1172[8] = v1208;
        v1172[9] = v1209;
        v1172[7] = v1207;
        v1210 = *(_OWORD *)(v1174 + 168);
        v1211 = *(_OWORD *)(v1174 + 184);
        *(_OWORD *)((char *)v1172 + 200) = *(_OWORD *)(v1174 + 200);
        *(_OWORD *)((char *)v1172 + 184) = v1211;
        *(_OWORD *)((char *)v1172 + 168) = v1210;
        v1212 = *(_OWORD *)(v1174 + 216);
        v1213 = *(_OWORD *)(v1174 + 232);
        v1214 = *(_OWORD *)(v1174 + 248);
        *(_OWORD *)((char *)v1172 + 264) = *(_OWORD *)(v1174 + 264);
        *(_OWORD *)((char *)v1172 + 248) = v1214;
        *(_OWORD *)((char *)v1172 + 232) = v1213;
        *(_OWORD *)((char *)v1172 + 216) = v1212;
        v1215 = *(_OWORD *)(v1174 + 280);
        v1216 = *(_OWORD *)(v1174 + 296);
        v1217 = *(_OWORD *)(v1174 + 312);
        *((_QWORD *)v1172 + 41) = *((_QWORD *)v1174 + 41);
        *(_OWORD *)((char *)v1172 + 296) = v1216;
        *(_OWORD *)((char *)v1172 + 312) = v1217;
        *(_OWORD *)((char *)v1172 + 280) = v1215;
        v1174 += 336;
        v1172 += 21;
      }
      while (v1174 != v1201);
      v1172 = *v1180;
    }
    v1218 = (char *)v1172;
    v1219 = v1082 + 28406;
    if (v1201 != v1173)
    {
      v1218 = (char *)v1172;
      v1220 = v1172;
      do
      {
        v1221 = *(_OWORD *)v1201;
        v1222 = *((_OWORD *)v1201 + 2);
        v1220[1] = *((_OWORD *)v1201 + 1);
        v1220[2] = v1222;
        *v1220 = v1221;
        v1223 = *((_OWORD *)v1201 + 3);
        v1224 = *((_OWORD *)v1201 + 4);
        v1225 = *((_OWORD *)v1201 + 6);
        v1220[5] = *((_OWORD *)v1201 + 5);
        v1220[6] = v1225;
        v1220[3] = v1223;
        v1220[4] = v1224;
        v1226 = *((_OWORD *)v1201 + 7);
        v1227 = *((_OWORD *)v1201 + 8);
        v1228 = *((_OWORD *)v1201 + 9);
        *((_QWORD *)v1220 + 20) = *((_QWORD *)v1201 + 20);
        v1220[8] = v1227;
        v1220[9] = v1228;
        v1220[7] = v1226;
        v1229 = *(_OWORD *)(v1201 + 168);
        v1230 = *(_OWORD *)(v1201 + 184);
        *(_OWORD *)((char *)v1220 + 200) = *(_OWORD *)(v1201 + 200);
        *(_OWORD *)((char *)v1220 + 184) = v1230;
        *(_OWORD *)((char *)v1220 + 168) = v1229;
        v1231 = *(_OWORD *)(v1201 + 216);
        v1232 = *(_OWORD *)(v1201 + 232);
        v1233 = *(_OWORD *)(v1201 + 248);
        *(_OWORD *)((char *)v1220 + 264) = *(_OWORD *)(v1201 + 264);
        *(_OWORD *)((char *)v1220 + 248) = v1233;
        *(_OWORD *)((char *)v1220 + 232) = v1232;
        *(_OWORD *)((char *)v1220 + 216) = v1231;
        v1234 = *(_OWORD *)(v1201 + 280);
        v1235 = *(_OWORD *)(v1201 + 296);
        v1236 = *(_OWORD *)(v1201 + 312);
        *((_QWORD *)v1220 + 41) = *((_QWORD *)v1201 + 41);
        *(_OWORD *)((char *)v1220 + 296) = v1235;
        *(_OWORD *)((char *)v1220 + 312) = v1236;
        *(_OWORD *)((char *)v1220 + 280) = v1234;
        v1218 += 336;
        v1201 += 336;
        v1220 += 21;
      }
      while (v1201 != v1173);
    }
    v1237 = v1218 - (char *)v1172;
  }
  *v1180 = (_OWORD *)((char *)v1172 + v1237);
  v1082[31956].n128_u64[1] = 0x7FF8000000000000;
  *v1148 = 0x7FF8000000000000;
  v1082[32448].n128_u64[1] = 0x7FF8000000000000;
  v1082[32694].n128_u64[1] = 0x7FF8000000000000;
  v1082[32940].n128_u64[1] = 0x7FF8000000000000;
  v1082[33186].n128_u64[1] = 0x7FF8000000000000;
  v1082[33432].n128_u64[1] = 0x7FF8000000000000;
  v1082[33678].n128_u64[1] = 0x7FF8000000000000;
  v1082[33924].n128_u64[1] = 0x7FF8000000000000;
  v1082[34170].n128_u64[0] = 0;
  v1082[34170].n128_u8[8] = 0;
  v1255 = v1219->n128_u32[0];
  v1256 = v1598;
  if ((_DWORD)v1255)
  {
    v1257 = 0;
    v1258 = __dst[0].f64[1];
    v1259 = __dst[1].f64[0];
    v1260 = v1716;
    v1261 = v1718;
    v1665 = v1717;
    v1671 = v1720;
    v1651 = v1719;
    v1654 = v1722;
    v1643 = v1721;
    v1647 = v1724;
    v1632 = v1725;
    v1639 = v1723;
    v1642 = v1726;
    v1616 = v1727;
    v1637 = v1728;
    v1607 = v1729;
    v1262 = -336;
    v1621 = v1730;
    v1263 = vdupq_n_s64(0x7FF8000000000000uLL);
    v1605 = v1731;
    v1662 = v1219->n128_u32[0];
    v1659 = v1263;
    while (1)
    {
      n128_f64 = v1183[2 * v1257].n128_f64;
      v1287 = *((unsigned int *)n128_f64 + 2);
      if ((_DWORD)v1287 == -1)
        v1288 = 0.0;
      else
        v1288 = v1599[128].f64[v1287 + 1];
      v1289 = n128_f64[2];
      v1290 = n128_f64[3];
      v1292 = *v1147;
      v1291 = *(_OWORD **)(*(_QWORD *)&v1655 + 57776);
      if (0xCF3CF3CF3CF3CF3DLL * (((char *)v1291 - *v1147) >> 4) != v1257)
        goto LABEL_1250;
      v1293 = *(_QWORD *)(*(_QWORD *)&v1655 + 57784);
      if ((unint64_t)v1291 >= v1293)
        break;
      v1291[19] = 0u;
      v1291[20] = 0u;
      v1291[17] = 0u;
      v1291[18] = 0u;
      v1291[15] = 0u;
      v1291[16] = 0u;
      v1291[13] = 0u;
      v1291[14] = 0u;
      v1291[11] = 0u;
      v1291[12] = 0u;
      v1291[9] = 0u;
      v1291[10] = 0u;
      v1291[7] = 0u;
      v1291[8] = 0u;
      v1291[5] = 0u;
      v1291[6] = 0u;
      v1291[3] = 0u;
      v1291[4] = 0u;
      v1291[1] = 0u;
      v1291[2] = 0u;
      *v1291 = 0u;
      v1294 = v1291 + 21;
LABEL_1249:
      *(_QWORD *)(*(_QWORD *)&v1655 + 57776) = v1294;
LABEL_1250:
      v1317 = v1288 + v1289;
      v1318 = v1288 + v1290;
      if (vabdd_f64(v1258, v1288 + v1289) >= 1.0e-16 || vabdd_f64(v1259, v1318) >= 1.0e-16)
      {
        v1182 = v1672;
        if (vabdd_f64(v1260, v1317) < 1.0e-16 && vabdd_f64(v1665, v1318) < 1.0e-16)
        {
          v1319 = 1;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 1)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1261, v1317) < 1.0e-16 && vabdd_f64(v1651, v1318) < 1.0e-16)
        {
          v1319 = 2;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 2)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1671, v1317) < 1.0e-16 && vabdd_f64(v1643, v1318) < 1.0e-16)
        {
          v1319 = 3;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 3)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1654, v1317) < 1.0e-16 && vabdd_f64(v1639, v1318) < 1.0e-16)
        {
          v1319 = 4;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 4)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1647, v1317) < 1.0e-16 && vabdd_f64(v1632, v1318) < 1.0e-16)
        {
          v1319 = 5;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 5)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1642, v1317) < 1.0e-16 && vabdd_f64(v1616, v1318) < 1.0e-16)
        {
          v1319 = 6;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 6)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1637, v1317) < 1.0e-16 && vabdd_f64(v1607, v1318) < 1.0e-16)
        {
          v1319 = 7;
          v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
          if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) > 7)
            goto LABEL_1285;
          goto LABEL_1229;
        }
        if (vabdd_f64(v1621, v1317) >= 1.0e-16)
          goto LABEL_1229;
        if (vabdd_f64(v1605, v1318) >= 1.0e-16)
          goto LABEL_1229;
        v1319 = 8;
        v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
        if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4) <= 8)
          goto LABEL_1229;
LABEL_1285:
        v1321 = v1320 + 336 * v1319;
        v1322 = (float64x2_t *)(v1256 + 168 * *(unsigned int *)n128_f64);
        v1170.f64[0] = *(float64_t *)(v1321 + 160);
        v1171.f64[0] = v1322[10].f64[0];
        *(_QWORD *)&v1170.f64[0] = *(_OWORD *)&vabdq_f64(v1170, v1171);
        v1170.f64[1] = NAN;
        v1323 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(*(float64x2_t *)v1321, *v1322), vabdq_f64(*(float64x2_t *)(v1321 + 128), v1322[8])), vabdq_f64(*(float64x2_t *)(v1321 + 64), v1322[4])), vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(*(float64x2_t *)(v1321 + 32), v1322[2]), v1170), vabdq_f64(*(float64x2_t *)(v1321 + 96), v1322[6])));
        if (vmaxnmvq_f64(vmaxnmq_f64(v1323, vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(*(float64x2_t *)(v1321 + 16), v1322[1]), vabdq_f64(*(float64x2_t *)(v1321 + 144), v1322[9])), vabdq_f64(*(float64x2_t *)(v1321 + 80), v1322[5])), vmaxnmq_f64(vabdq_f64(*(float64x2_t *)(v1321 + 48), v1322[3]), vabdq_f64(*(float64x2_t *)(v1321 + 112), v1322[7]))))) >= 1.0e-16)goto LABEL_1229;
        v1325 = *(float64x2_t *)(v1321 + 168);
        v1324 = (float64x2_t *)(v1321 + 168);
        v1326 = (float64x2_t *)(v1256 + 168 * *((unsigned int *)n128_f64 + 1));
        v1323.f64[0] = v1324[10].f64[0];
        v1171.f64[0] = v1326[10].f64[0];
        *(_QWORD *)&v1327.f64[0] = *(_OWORD *)&vabdq_f64(v1323, v1171);
        v1170 = vabdq_f64(v1324[4], v1326[4]);
        v1327.f64[1] = NAN;
        if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(v1325, *v1326), vabdq_f64(v1324[8], v1326[8])), v1170), vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(v1324[2], v1326[2]), v1327), vabdq_f64(v1324[6], v1326[6]))), vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabdq_f64(v1324[1], v1326[1]), vabdq_f64(v1324[9], v1326[9])), vabdq_f64(v1324[5], v1326[5])), vmaxnmq_f64(vabdq_f64(v1324[3], v1326[3]), vabdq_f64(v1324[7], v1326[7]))))) >= 1.0e-16)goto LABEL_1229;
        v1328 = &__dst[246 * v1319];
        v1329 = &v1154[246 * v1257];
        *v1329 = *(__n128 *)v1328;
        v1329[1].n128_u64[0] = *(_QWORD *)&v1328[1].f64[0];
        v1330 = v1328;
        *(__n128 *)((char *)v1329 + 40) = *(__n128 *)((char *)&v1328[2] + 8);
        *(__n128 *)((char *)v1329 + 56) = *(__n128 *)((char *)&v1328[3] + 8);
        *(__n128 *)((char *)v1329 + 72) = *(__n128 *)((char *)&v1328[4] + 8);
        v1329[5].n128_u64[1] = *(_QWORD *)&v1328[5].f64[1];
        *(__n128 *)((char *)v1329 + 24) = *(__n128 *)((char *)&v1328[1] + 8);
        v1331 = v1328[6];
        v1332 = v1328[7];
        v1333 = v1328[9];
        v1329[8] = (__n128)v1328[8];
        v1329[9] = (__n128)v1333;
        v1329[6] = (__n128)v1331;
        v1329[7] = (__n128)v1332;
        v1334 = v1328[10];
        v1335 = v1328[11];
        v1336 = v1328[12];
        v1329[13].n128_u64[0] = *(_QWORD *)&v1328[13].f64[0];
        v1329[11] = (__n128)v1335;
        v1329[12] = (__n128)v1336;
        v1329[10] = (__n128)v1334;
        v1337 = *(__n128 *)((char *)&v1328[13] + 8);
        v1338 = *(__n128 *)((char *)&v1328[14] + 8);
        v1339 = *(__n128 *)((char *)&v1328[15] + 8);
        *(__n128 *)((char *)v1329 + 264) = *(__n128 *)((char *)&v1328[16] + 8);
        *(__n128 *)((char *)v1329 + 248) = v1339;
        *(__n128 *)((char *)v1329 + 232) = v1338;
        *(__n128 *)((char *)v1329 + 216) = v1337;
        v1340 = *(__n128 *)((char *)&v1328[17] + 8);
        v1341 = *(__n128 *)((char *)&v1328[18] + 8);
        v1342 = *(__n128 *)((char *)&v1328[19] + 8);
        v1329[20].n128_u64[1] = *(_QWORD *)&v1328[20].f64[1];
        *(__n128 *)((char *)v1329 + 312) = v1342;
        *(__n128 *)((char *)v1329 + 296) = v1341;
        *(__n128 *)((char *)v1329 + 280) = v1340;
        memcpy(&v1329[21], &v1328[21], 0x168uLL);
        memcpy(&v1329[43].n128_i8[8], &v1330[43].f64[1], 0x168uLL);
        memcpy(&v1329[66], &v1330[66], 0x438uLL);
        memcpy(&v1329[133].n128_i8[8], &v1330[133].f64[1], 0x168uLL);
        memcpy(&v1329[156], &v1330[156], 0x168uLL);
        v1343 = &v1329[178].n128_i8[8];
        v1182 = v1672;
        v1344 = &v1330[178].f64[1];
        v1256 = v1598;
        memcpy(v1343, v1344, 0x438uLL);
        v1263 = v1659;
        v1183 = v1675;
        v1345 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792) + 336 * v1319;
        v1346 = (uint64_t)&(*v1147)[336 * v1257];
        v1348 = *(_OWORD *)(v1345 + 128);
        v1347 = *(_OWORD *)(v1345 + 144);
        v1349 = *(_OWORD *)(v1345 + 112);
        *(_QWORD *)(v1346 + 160) = *(_QWORD *)(v1345 + 160);
        *(_OWORD *)(v1346 + 128) = v1348;
        *(_OWORD *)(v1346 + 144) = v1347;
        *(_OWORD *)(v1346 + 112) = v1349;
        v1350 = *(_OWORD *)(v1345 + 96);
        v1352 = *(_OWORD *)(v1345 + 48);
        v1351 = *(_OWORD *)(v1345 + 64);
        *(_OWORD *)(v1346 + 80) = *(_OWORD *)(v1345 + 80);
        *(_OWORD *)(v1346 + 96) = v1350;
        *(_OWORD *)(v1346 + 48) = v1352;
        *(_OWORD *)(v1346 + 64) = v1351;
        v1354 = *(_OWORD *)(v1345 + 16);
        v1353 = *(_OWORD *)(v1345 + 32);
        *(_OWORD *)v1346 = *(_OWORD *)v1345;
        *(_OWORD *)(v1346 + 16) = v1354;
        *(_OWORD *)(v1346 + 32) = v1353;
        v1355 = *(_OWORD *)(v1345 + 280);
        v1356 = *(_OWORD *)(v1345 + 296);
        v1357 = *(_OWORD *)(v1345 + 312);
        *(_QWORD *)(v1346 + 328) = *(_QWORD *)(v1345 + 328);
        v1255 = v1662;
        *(_OWORD *)(v1346 + 296) = v1356;
        *(_OWORD *)(v1346 + 312) = v1357;
        *(_OWORD *)(v1346 + 280) = v1355;
        v1358 = *(_OWORD *)(v1345 + 216);
        v1359 = *(_OWORD *)(v1345 + 232);
        v1360 = *(_OWORD *)(v1345 + 248);
        *(_OWORD *)(v1346 + 264) = *(_OWORD *)(v1345 + 264);
        *(_OWORD *)(v1346 + 248) = v1360;
        *(_OWORD *)(v1346 + 232) = v1359;
        *(_OWORD *)(v1346 + 216) = v1358;
        v1361 = *(_OWORD *)(v1345 + 184);
        v1362 = *(_OWORD *)(v1345 + 168);
        *(_OWORD *)(v1346 + 200) = *(_OWORD *)(v1345 + 200);
        *(_OWORD *)(v1346 + 168) = v1362;
        *(_OWORD *)(v1346 + 184) = v1361;
        v1284 = v1655;
        v1285 = (unsigned int **)v1673;
        ++v1257;
        v1262 += 336;
        if (v1257 == v1662)
        {
LABEL_1291:
          v1219 = v1635;
          v1363 = v1635->n128_u32[0];
          goto LABEL_1293;
        }
      }
      else
      {
        v1319 = 0;
        v1182 = v1672;
        v1320 = *(_QWORD *)(*(_QWORD *)&v1655 + 57792);
        if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*(_QWORD *)&v1655 + 57800) - v1320) >> 4))
          goto LABEL_1285;
LABEL_1229:
        v1264 = (__int128 *)(v1256 + 168 * *(unsigned int *)n128_f64);
        v1265 = (uint64_t)&(*v1147)[336 * v1257];
        v1266 = v1264[6];
        v1268 = v1264[3];
        v1267 = v1264[4];
        *(_OWORD *)(v1265 + 80) = v1264[5];
        *(_OWORD *)(v1265 + 96) = v1266;
        *(_OWORD *)(v1265 + 48) = v1268;
        *(_OWORD *)(v1265 + 64) = v1267;
        v1270 = v1264[8];
        v1269 = v1264[9];
        v1271 = v1264[7];
        *(_QWORD *)(v1265 + 160) = *((_QWORD *)v1264 + 20);
        *(_OWORD *)(v1265 + 128) = v1270;
        *(_OWORD *)(v1265 + 144) = v1269;
        *(_OWORD *)(v1265 + 112) = v1271;
        v1272 = *v1264;
        v1273 = v1264[2];
        *(_OWORD *)(v1265 + 16) = v1264[1];
        *(_OWORD *)(v1265 + 32) = v1273;
        *(_OWORD *)v1265 = v1272;
        v1274 = (__int128 *)(v1256 + 168 * *((unsigned int *)n128_f64 + 1));
        v1275 = (uint64_t)&(*v1147)[336 * v1257];
        v1276 = v1274[5];
        v1277 = v1274[6];
        v1278 = v1274[4];
        *(_OWORD *)(v1275 + 216) = v1274[3];
        *(_OWORD *)(v1275 + 264) = v1277;
        *(_OWORD *)(v1275 + 248) = v1276;
        *(_OWORD *)(v1275 + 232) = v1278;
        v1280 = v1274[8];
        v1279 = v1274[9];
        v1281 = v1274[7];
        *(_QWORD *)(v1275 + 328) = *((_QWORD *)v1274 + 20);
        *(_OWORD *)(v1275 + 296) = v1280;
        *(_OWORD *)(v1275 + 312) = v1279;
        *(_OWORD *)(v1275 + 280) = v1281;
        v1282 = *v1274;
        v1283 = v1274[1];
        *(_OWORD *)(v1275 + 200) = v1274[2];
        *(_OWORD *)(v1275 + 184) = v1283;
        *(_OWORD *)(v1275 + 168) = v1282;
        *(int64x2_t *)((char *)&v1154[246 * v1257] + 8) = v1263;
        v1284 = v1655;
        v1285 = (unsigned int **)v1673;
        ++v1257;
        v1262 += 336;
        if (v1257 == v1255)
          goto LABEL_1291;
      }
    }
    v1295 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v1293 - (_QWORD)v1292) >> 4);
    if (2 * v1295 <= v1257 + 1)
      v1296 = v1257 + 1;
    else
      v1296 = 2 * v1295;
    if (v1295 >= 0x61861861861861)
      v1297 = 0xC30C30C30C30C3;
    else
      v1297 = v1296;
    if (v1297 > 0xC30C30C30C30C3)
      sub_20E877A38();
    v1298 = (char *)operator new(336 * v1297);
    v1299 = &v1298[336 * v1257];
    *((_OWORD *)v1299 + 19) = 0u;
    *((_OWORD *)v1299 + 20) = 0u;
    *((_OWORD *)v1299 + 17) = 0u;
    *((_OWORD *)v1299 + 18) = 0u;
    *((_OWORD *)v1299 + 15) = 0u;
    *((_OWORD *)v1299 + 16) = 0u;
    *((_OWORD *)v1299 + 13) = 0u;
    *((_OWORD *)v1299 + 14) = 0u;
    *((_OWORD *)v1299 + 11) = 0u;
    *((_OWORD *)v1299 + 12) = 0u;
    *((_OWORD *)v1299 + 9) = 0u;
    *((_OWORD *)v1299 + 10) = 0u;
    *((_OWORD *)v1299 + 7) = 0u;
    *((_OWORD *)v1299 + 8) = 0u;
    *((_OWORD *)v1299 + 5) = 0u;
    *((_OWORD *)v1299 + 6) = 0u;
    *((_OWORD *)v1299 + 3) = 0u;
    *((_OWORD *)v1299 + 4) = 0u;
    *((_OWORD *)v1299 + 1) = 0u;
    *((_OWORD *)v1299 + 2) = 0u;
    *(_OWORD *)v1299 = 0u;
    if (v1291 == (_OWORD *)v1292)
    {
      v1294 = v1299 + 336;
      *v1147 = v1299;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57776) = v1299 + 336;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57784) = &v1298[336 * v1297];
      if (!v1291)
        goto LABEL_1248;
    }
    else
    {
      v1300 = &v1298[v1262];
      do
      {
        v1301 = *(v1291 - 14);
        v1302 = *(v1291 - 13);
        v1303 = *(v1291 - 12);
        *((_QWORD *)v1300 + 20) = *((_QWORD *)v1291 - 22);
        *((_OWORD *)v1300 + 8) = v1302;
        *((_OWORD *)v1300 + 9) = v1303;
        *((_OWORD *)v1300 + 7) = v1301;
        v1304 = *(v1291 - 21);
        v1305 = *(v1291 - 19);
        *((_OWORD *)v1300 + 1) = *(v1291 - 20);
        *((_OWORD *)v1300 + 2) = v1305;
        *(_OWORD *)v1300 = v1304;
        v1306 = *(v1291 - 18);
        v1307 = *(v1291 - 17);
        v1308 = *(v1291 - 15);
        *((_OWORD *)v1300 + 5) = *(v1291 - 16);
        *((_OWORD *)v1300 + 6) = v1308;
        *((_OWORD *)v1300 + 3) = v1306;
        *((_OWORD *)v1300 + 4) = v1307;
        v1309 = *(_OWORD *)((char *)v1291 - 168);
        v1310 = *(_OWORD *)((char *)v1291 - 152);
        *(_OWORD *)(v1300 + 200) = *(_OWORD *)((char *)v1291 - 136);
        *(_OWORD *)(v1300 + 184) = v1310;
        *(_OWORD *)(v1300 + 168) = v1309;
        v1311 = *(_OWORD *)((char *)v1291 - 120);
        v1312 = *(_OWORD *)((char *)v1291 - 104);
        v1313 = *(_OWORD *)((char *)v1291 - 88);
        *(_OWORD *)(v1300 + 264) = *(_OWORD *)((char *)v1291 - 72);
        *(_OWORD *)(v1300 + 248) = v1313;
        *(_OWORD *)(v1300 + 232) = v1312;
        *(_OWORD *)(v1300 + 216) = v1311;
        v1314 = *(_OWORD *)((char *)v1291 - 56);
        v1315 = *(_OWORD *)((char *)v1291 - 40);
        v1316 = *(_OWORD *)((char *)v1291 - 24);
        *((_QWORD *)v1300 + 41) = *((_QWORD *)v1291 - 1);
        *(_OWORD *)(v1300 + 296) = v1315;
        *(_OWORD *)(v1300 + 312) = v1316;
        *(_OWORD *)(v1300 + 280) = v1314;
        v1300 -= 336;
        v1291 -= 21;
      }
      while (v1291 != (_OWORD *)v1292);
      v1291 = v1292;
      v1294 = v1299 + 336;
      *v1147 = v1300 + 336;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57776) = v1299 + 336;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57784) = &v1298[336 * v1297];
      if (!v1291)
        goto LABEL_1248;
    }
    operator delete(v1291);
LABEL_1248:
    v1256 = v1598;
    v1183 = v1675;
    v1255 = v1662;
    v1263 = v1659;
    goto LABEL_1249;
  }
  v1363 = 0;
  v1284 = v1655;
  v1285 = (unsigned int **)v1673;
LABEL_1293:
  if (0xCF3CF3CF3CF3CF3DLL
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v1655 + 57776) - *(_QWORD *)(*(_QWORD *)&v1655 + 57768)) >> 4) > v1363)
    *(_QWORD *)(*(_QWORD *)&v1655 + 57776) = *(_QWORD *)(*(_QWORD *)&v1655 + 57768) + 336 * v1363;
  v1364 = *v1285;
  v1365 = *v1285 + 7922;
  *v1365 = 0;
  v1366 = *(_QWORD *)(*(_QWORD *)&v1284 + 1736);
  v1367 = *(_QWORD *)(*(_QWORD *)&v1284 + 1744);
  if (v1366 != v1367)
  {
    v1368 = 0;
    do
    {
      v1369 = *(_QWORD *)(v1366 + 80);
      if ((*(_BYTE *)(v1369 + 4) & 4) != 0)
        v1370 = 1;
      else
        v1370 = 2;
      if ((v1370 & v1613) != 0 && *(_BYTE *)(v1366 + 72))
      {
        v1371 = *(_OWORD *)(v1366 + 24);
        v1372 = *(_QWORD *)(v1366 + 40);
        v1373 = *(_OWORD *)(v1366 + 48);
        v1374 = *(_QWORD *)(v1366 + 64);
        v1375 = (uint64_t)&v1364[14 * v1368 + 7908];
        *(_QWORD *)v1375 = *(unsigned int *)(v1369 + 16) | ((unint64_t)(*(_DWORD *)(v1369 + 16) != *v1609) << 32);
        *(_OWORD *)(v1375 + 8) = v1371;
        *(_QWORD *)(v1375 + 24) = v1372;
        *(_OWORD *)(v1375 + 32) = v1373;
        *(_QWORD *)(v1375 + 48) = v1374;
        v1368 = *v1365 + 1;
        *v1365 = v1368;
      }
      v1366 += 176;
    }
    while (v1366 != v1367);
    v1364 = *v1285;
  }
  v1364[7906] = 0;
  v1376 = *(_QWORD *)(*(_QWORD *)&v1284 + 1664);
  v1377 = *(_QWORD *)(*(_QWORD *)&v1284 + 1672);
  if (v1376 != v1377)
  {
    v1378 = 0;
    v1379 = v1364 + 7906;
    do
    {
      v1384 = *(_QWORD *)(v1376 + 96);
      if ((*(_BYTE *)(v1384 + 4) & 4) != 0)
        v1385 = 1;
      else
        v1385 = 2;
      if ((v1385 & v1613) != 0 && *(_BYTE *)(v1376 + 88))
      {
        v1386 = *(_QWORD *)(v1182 + 72);
        v1387 = *(_QWORD *)(v1182 + 80);
        if (v1386 != v1387)
        {
          v1388 = *(_DWORD *)(v1384 + 16);
          while (*(_DWORD *)v1386 != v1388)
          {
            v1386 += 16;
            if (v1386 == v1387)
              goto LABEL_1319;
          }
        }
        if (v1386 == v1387)
        {
LABEL_1319:
          v1389 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(v1389, "key not found in map");
          __cxa_throw(v1389, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        v1380 = *(_DWORD *)(v1386 + 12);
        v1381 = (uint64_t)&v1364[20 * v1378 + 7826];
        v1382 = *(_OWORD *)(v1376 + 56);
        v1683 = *(_OWORD *)(v1376 + 72);
        v1383 = *(_OWORD *)(v1376 + 24);
        v1684 = *(_OWORD *)(v1376 + 40);
        *(_QWORD *)v1381 = *(_QWORD *)(v1386 + 4);
        *(_DWORD *)(v1381 + 8) = v1380;
        *(_OWORD *)(v1381 + 16) = v1383;
        *(_OWORD *)(v1381 + 32) = v1684;
        *(_OWORD *)(v1381 + 48) = v1382;
        *(_OWORD *)(v1381 + 64) = v1683;
        v1378 = *v1379 + 1;
        *v1379 = v1378;
      }
      v1376 += 208;
    }
    while (v1376 != v1377);
    v1364 = *v1285;
  }
  v1390 = (int *)(v1364 + 7930);
  v1364[7930] = 0;
  v1391 = *(_QWORD *)(*(_QWORD *)&v1655 + 1640);
  v1392 = *(_QWORD *)(*(_QWORD *)&v1655 + 1648);
  if (v1391 != v1392)
  {
    v1393 = 0;
    v1394 = v1364 + 7924;
    do
    {
      v1396 = *(_QWORD *)(v1391 + 48);
      if ((*(_BYTE *)(v1396 + 4) & 4) != 0)
        v1397 = 1;
      else
        v1397 = 2;
      if ((v1397 & v1613) != 0 && *(_BYTE *)(v1391 + 40))
      {
        v1398 = *(_DWORD *)(v1396 + 16);
        v1399 = *(char **)(v1672 + 48);
        v1400 = *(_QWORD *)(v1672 + 56);
        if (v1399 != (char *)v1400)
        {
          while (*(_DWORD *)v1399 != v1398)
          {
            v1399 += 8;
            if (v1399 == (char *)v1400)
              goto LABEL_1334;
          }
        }
        if (v1399 == (char *)v1400)
        {
LABEL_1334:
          *(_QWORD *)&__dst[0].f64[0] = v1398;
          v1399 = sub_20F9B999C(v1600, v1400, (uint64_t)__dst);
          v1393 = *v1390;
        }
        v1395 = &v1394[6 * v1393];
        *v1395 = *((_DWORD *)v1399 + 1);
        *(_OWORD *)(v1395 + 2) = *(_OWORD *)(v1391 + 24);
        *v1390 = ++v1393;
      }
      v1391 += 112;
    }
    while (v1391 != v1392);
    v1285 = (unsigned int **)v1673;
    v1364 = (unsigned int *)*v1673;
    v1219 = v1635;
  }
  v1401 = v1364 + 8092;
  v1364[8092] = 0;
  v1402 = *(_QWORD *)(*(_QWORD *)&v1655 + 1424);
  v1403 = *(_QWORD *)(*(_QWORD *)&v1655 + 1432);
  if (v1402 != v1403)
  {
    v1404 = 0;
    do
    {
      v1405 = *(_QWORD *)(v1402 + 136);
      if ((*(_BYTE *)(v1405 + 4) & 4) != 0)
        v1406 = 1;
      else
        v1406 = 2;
      if ((v1406 & v1613) != 0)
      {
        v1407 = *(_OWORD **)(v1402 + 120);
        if (v1407)
        {
          v1408 = *(_QWORD *)(v1672 + 72);
          v1409 = *(_QWORD *)(v1672 + 80);
          if (v1408 != v1409)
          {
            v1410 = *(_DWORD *)(v1405 + 16);
            while (*(_DWORD *)v1408 != v1410)
            {
              v1408 += 16;
              if (v1408 == v1409)
                goto LABEL_1506;
            }
          }
          if (v1408 == v1409)
          {
LABEL_1506:
            v1584 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_20E89FD70(v1584, "key not found in map");
            __cxa_throw(v1584, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
          }
          v1411 = *(_DWORD *)(v1408 + 12);
          v1412 = (uint64_t)&v1364[40 * v1404 + 7932];
          v1413 = *(_QWORD *)(v1408 + 4);
          v1681 = *(_OWORD *)(v1402 + 96);
          v1682 = *(_QWORD *)(v1402 + 112);
          v1414 = v1407[1];
          v1415 = v1407[2];
          v1416 = v1407[3];
          v1417 = *(_OWORD *)(v1402 + 40);
          v1418 = *(_OWORD *)(v1402 + 72);
          v1712 = *(_OWORD *)(v1402 + 56);
          v1713 = v1418;
          v1714 = *(_QWORD *)(v1402 + 88);
          v1419 = *(_OWORD *)(v1402 + 24);
          v1711 = v1417;
          v1710 = v1419;
          *(_QWORD *)v1412 = v1413;
          *(_DWORD *)(v1412 + 8) = v1411;
          *(_OWORD *)(v1412 + 16) = v1710;
          v1420 = v1713;
          v1421 = v1712;
          v1422 = v1711;
          *(_QWORD *)(v1412 + 80) = v1714;
          *(_OWORD *)(v1412 + 48) = v1421;
          *(_OWORD *)(v1412 + 64) = v1420;
          *(_OWORD *)(v1412 + 32) = v1422;
          *(_OWORD *)(v1412 + 88) = v1681;
          *(_QWORD *)(v1412 + 104) = v1682;
          *(_OWORD *)(v1412 + 112) = v1414;
          *(_OWORD *)(v1412 + 128) = v1415;
          *(_OWORD *)(v1412 + 144) = v1416;
          v1404 = *v1401 + 1;
          *v1401 = v1404;
        }
      }
      v1402 += 280;
    }
    while (v1402 != v1403);
    v1364 = *v1285;
  }
  v1423 = v1364 + 8834;
  v1364[8834] = 0;
  v1424 = *(_QWORD *)(*(_QWORD *)&v1655 + 1376);
  v1425 = *(_QWORD *)(*(_QWORD *)&v1655 + 1384);
  if (v1424 != v1425)
  {
    v1426 = 0;
    v1427 = v1364 + 8094;
    do
    {
      v1461 = *(_QWORD *)(v1424 + 208);
      if (((*(unsigned __int8 *)(*(_QWORD *)(v1424 + 216) + 4) >> 2) & 1) == (char)(32 * *(_BYTE *)(v1461 + 4)) >> 7)
        v1462 = 2;
      else
        v1462 = 1;
      if ((v1462 & v1613) != 0)
      {
        v1463 = *(_QWORD **)(v1424 + 192);
        if (v1463)
        {
          if (!*v1612
            || (v1464 = (*(_DWORD *)(v1461 + 16) - *(_DWORD *)(*(_QWORD *)&v1655 + 57684)),
                v1466 = *(_QWORD *)(v1672 + 200),
                v1465 = *(_QWORD *)(v1672 + 208),
                0xAAAAAAAAAAAAAAABLL * ((v1465 - v1466) >> 2) <= v1464)
            || ((v1467 = v1466 + 12 * v1464, v1467 != v1465)
              ? (v1468 = *(_BYTE *)(v1467 + 8) == 0)
              : (v1468 = 1),
                v1468))
          {
            v1469 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_20E89FD70(v1469, "Key does not exist in the map.");
            __cxa_throw(v1469, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
          }
          v1428 = *(_DWORD *)(v1467 + 4);
          v1429 = v1463[2];
          v1430 = v1463[18];
          v1431 = v1463[34];
          v1432 = v1463[50];
          v1433 = v1463[66];
          v1434 = v1463[82];
          v1435 = v1463[98];
          v1436 = v1463[114];
          v1437 = v1463[130];
          v1438 = v1463[146];
          v1439 = v1463[162];
          v1440 = v1463[178];
          v1441 = v1463[194];
          v1442 = v1463[210];
          v1443 = v1463[226];
          v1444 = *(_OWORD *)(v1424 + 24);
          v1445 = *(_OWORD *)(v1424 + 56);
          v1700 = *(_OWORD *)(v1424 + 40);
          v1699 = v1444;
          v1446 = *(_OWORD *)(v1424 + 72);
          v1447 = *(_OWORD *)(v1424 + 88);
          v1448 = *(_OWORD *)(v1424 + 120);
          v1704 = *(_OWORD *)(v1424 + 104);
          v1703 = v1447;
          v1701 = v1445;
          v1702 = v1446;
          v1449 = *(_OWORD *)(v1424 + 136);
          v1450 = *(_OWORD *)(v1424 + 152);
          v1451 = *(_OWORD *)(v1424 + 168);
          v1709 = *(_QWORD *)(v1424 + 184);
          v1708 = v1451;
          v1707 = v1450;
          v1705 = v1448;
          v1706 = v1449;
          v1452 = &v1427[74 * v1426];
          *v1452 = v1428;
          v1453 = v1699;
          v1454 = v1700;
          *(_OWORD *)(v1452 + 10) = v1701;
          *(_OWORD *)(v1452 + 6) = v1454;
          *(_OWORD *)(v1452 + 2) = v1453;
          v1455 = v1702;
          v1456 = v1703;
          v1457 = v1704;
          *(_OWORD *)(v1452 + 26) = v1705;
          *(_OWORD *)(v1452 + 22) = v1457;
          *(_OWORD *)(v1452 + 18) = v1456;
          *(_OWORD *)(v1452 + 14) = v1455;
          v1458 = v1706;
          v1459 = v1707;
          v1460 = v1708;
          *((_QWORD *)v1452 + 21) = v1709;
          *(_OWORD *)(v1452 + 38) = v1460;
          *(_OWORD *)(v1452 + 34) = v1459;
          *(_OWORD *)(v1452 + 30) = v1458;
          *((_QWORD *)v1452 + 22) = v1429;
          *((_QWORD *)v1452 + 23) = v1430;
          *((_QWORD *)v1452 + 24) = v1431;
          *((_QWORD *)v1452 + 25) = v1432;
          *((_QWORD *)v1452 + 26) = v1433;
          *((_QWORD *)v1452 + 27) = v1434;
          *((_QWORD *)v1452 + 28) = v1435;
          *((_QWORD *)v1452 + 29) = v1436;
          *((_QWORD *)v1452 + 30) = v1437;
          *((_QWORD *)v1452 + 31) = v1438;
          *((_QWORD *)v1452 + 32) = v1439;
          *((_QWORD *)v1452 + 33) = v1440;
          *((_QWORD *)v1452 + 34) = v1441;
          *((_QWORD *)v1452 + 35) = v1442;
          *((_QWORD *)v1452 + 36) = v1443;
          *v1423 = ++v1426;
        }
      }
      v1424 += 504;
    }
    while (v1424 != v1425);
    v1364 = *v1285;
  }
  v1364[7816] = v1597;
  v1364[7817] = *v1595;
  v1470 = v1364[144668];
  v1364[7818] = v1219->n128_u32[0];
  v1364[7819] = v1470;
  LOBYTE(v1781) = 1;
  *(_DWORD *)v1745 = 0;
  *(_QWORD *)&__dst[0].f64[0] = *(_QWORD *)&v1655 + 312;
  *(_QWORD *)&__dst[0].f64[1] = v1745;
  __dst[1].f64[0] = v1655;
  *(_QWORD *)&__dst[1].f64[1] = &v1781;
  sub_20F920D80(__dst);
  sub_20F9209FC(__dst);
  sub_20F920678(__dst);
  sub_20F9204D8(__dst);
  sub_20F92014C(__dst);
  sub_20F91FDC4(__dst);
  sub_20F91FC24(__dst);
  sub_20F91FA84(__dst);
  v1471 = *(_DWORD *)v1745;
  if (*(_DWORD *)v1745)
  {
    WORD2((*v1673)[1953].f64[1]) = 257;
  }
  else
  {
    v1603 = (_QWORD *)(*(_QWORD *)&v1655 + 38200);
    v1472 = ((v1603[4] - v1603[3]) >> 2)
          + ((v1603[1] - *v1603) >> 2)
          + ((v1603[7] - v1603[6]) >> 2)
          + ((v1603[10] - v1603[9]) >> 2)
          + ((v1603[13] - v1603[12]) >> 2)
          + ((v1603[16] - v1603[15]) >> 2)
          + ((v1603[19] - v1603[18]) >> 2)
          + ((v1603[22] - v1603[21]) >> 2)
          + ((v1603[25] - v1603[24]) >> 2)
          + ((v1603[28] - v1603[27]) >> 2);
    v1473 = (BOOL *)&(*v1673)[1953].f64[1] + 4;
    *v1473 = v1472 != 0;
    v1473[1] = v1472 != 0;
    if (!v1472)
      goto LABEL_1399;
  }
  v1474 = (double **)(*(_QWORD *)&v1655 + 57840);
  v1475 = *(unsigned int *)(*(_QWORD *)&v1655 + 3024);
  if (*(_DWORD *)(*(_QWORD *)&v1655 + 57856) != (_DWORD)v1475)
  {
    *(_DWORD *)(*(_QWORD *)&v1655 + 57856) = v1475;
    if (*(_QWORD *)(*(_QWORD *)&v1655 + 57848) < v1475)
    {
      if (*v1474)
        MEMORY[0x212BC6368](*v1474, 0x1000C8000313F17);
      v1476 = (8 * v1475 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57840) = 0;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57848) = v1476 >> 3;
      *(_QWORD *)(*(_QWORD *)&v1655 + 57840) = operator new(v1476, (std::align_val_t)0x20uLL);
    }
  }
  sub_20F9BDC70(v1596, (uint64_t)v1627, (_QWORD *)(*(_QWORD *)&v1655 + 57840));
  v1477 = (uint64_t)&(*v1673)[21980];
  v1478 = *(unsigned int *)(*(_QWORD *)&v1655 + 57856);
  if ((_DWORD)v1478)
  {
    v1479 = (float64x2_t *)*v1474;
    if (v1478 >= 6 && (unint64_t)((char *)*v1673 - (char *)v1479 + 351680) >= 0x20)
    {
      v1480 = v1478 & 0xFFFFFFFC;
      f64 = (double *)(v1477 + 8 * v1480);
      v1482 = &v1479->f64[v1480];
      v1521 = v1479 + 1;
      v1522 = *v1673 + 21981;
      v1523 = v1480;
      do
      {
        v1524 = vnegq_f64(*v1521);
        v1522[-1] = vnegq_f64(v1521[-1]);
        *v1522 = v1524;
        v1521 += 2;
        v1522 += 2;
        v1523 -= 4;
      }
      while (v1523);
      if (v1480 == v1478)
        goto LABEL_1383;
    }
    else
    {
      LODWORD(v1480) = 0;
      f64 = (*v1673)[21980].f64;
      v1482 = *v1474;
    }
    v1483 = v1478 - v1480;
    do
    {
      v1484 = *v1482++;
      *f64++ = -v1484;
      --v1483;
    }
    while (v1483);
  }
LABEL_1383:
  if (v1594 != (_DWORD)v1478)
    bzero((void *)(v1477 + 8 * v1478), 8 * (v1594 - v1478));
  v1485 = (*(uint64_t (**)(float64_t))(**(_QWORD **)&v1655 + 64))(COERCE_FLOAT64_T(*(_QWORD *)&v1655));
  v1486 = (char **)(*(_QWORD *)&v1655 + 57816);
  sub_20F9B8CF0(v1627, v1596, (void **)(*(_QWORD *)&v1655 + 57816), v1485);
  if (((*(uint64_t (**)(float64_t))(**(_QWORD **)&v1655 + 64))(COERCE_FLOAT64_T(*(_QWORD *)&v1655)) & 1) != 0)
  {
    v1487 = LODWORD((*v1673)[1940].f64[1]);
    v1488 = (uint64_t)&(*v1673)[2772];
    v1489 = 196 - ((v1487 + 3) & 0xFFFFFFFC);
    *(_DWORD *)v1745 = v1487;
    *(_DWORD *)&v1745[4] = v1487;
    *(_QWORD *)&v1745[8] = v1488 + 8 * v1489;
    *(_DWORD *)&v1745[16] = v1489;
    if (*v1486 == (char *)v1488)
    {
      v1498 = *(_DWORD *)(*(_QWORD *)&v1655 + 57832);
      v1497 = *(_DWORD *)(*(_QWORD *)&v1655 + 57836);
      v1499 = (8 * v1498 * v1497 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)&__dst[0].f64[1] = v1499 >> 3;
      *(_QWORD *)&__dst[0].f64[0] = operator new(v1499, (std::align_val_t)0x20uLL);
      *(_QWORD *)&__dst[1].f64[0] = __PAIR64__(v1498, v1497);
      sub_20F2B8274((unint64_t)__dst, (uint64_t *)(*(_QWORD *)&v1655 + 57816));
      if (LODWORD(__dst[1].f64[0]))
      {
        v1500 = HIDWORD(__dst[1].f64[0]);
        if (HIDWORD(__dst[1].f64[0]))
        {
          v1501 = __dst[0].f64[0];
          v1502 = 8 * LODWORD(__dst[1].f64[0]);
          v1503 = 8 * SLODWORD(__dst[1].f64[0]);
          do
          {
            memmove((void *)(v1488 + 8 * v1489), *(const void **)&v1501, v1502);
            v1489 += 196;
            *(_QWORD *)&v1501 += v1503;
            --v1500;
          }
          while (v1500);
        }
      }
      if (*(_QWORD *)&__dst[0].f64[0])
        MEMORY[0x212BC6368](*(_QWORD *)&__dst[0].f64[0], 0x1000C8000313F17);
    }
    else
    {
      sub_20F9D681C((uint64_t)v1745, (uint64_t *)(*(_QWORD *)&v1655 + 57816));
    }
  }
  else
  {
    v1490 = *(unsigned int *)(*(_QWORD *)&v1655 + 57832);
    if ((_DWORD)v1490)
    {
      v1491 = *(unsigned int *)(*(_QWORD *)&v1655 + 57836);
      if ((_DWORD)v1491)
      {
        v1492 = (uint64_t)&(*v1673)[2772];
        v1493 = *v1486;
        v1494 = 8 * v1490;
        v1495 = 196 - ((LODWORD((*v1673)[1940].f64[1]) + 3) & 0xFFFFFFFC);
        v1496 = 8 * (int)v1490;
        do
        {
          memmove((void *)(v1492 + 8 * v1495), v1493, v1494);
          v1495 += 196;
          v1493 += v1496;
          --v1491;
        }
        while (v1491);
      }
    }
  }
LABEL_1399:
  v1504 = v1655;
  if (*(_BYTE *)(*(_QWORD *)&v1655 + 2984))
  {
    v1505 = (_QWORD *)v1672;
    v1506 = *(_QWORD *)&v1655 + 40304;
    v1507 = *v1673;
    (*v1673)[1940].f64[0] = *(float64_t *)(*(_QWORD *)&v1655 + 2992);
    v1508 = *v1623;
    if (!*v1623)
      goto LABEL_1408;
  }
  else
  {
    v1505 = (_QWORD *)v1672;
    v1506 = *(_QWORD *)&v1655 + 40304;
    v1507 = *v1673;
    (*v1673)[1940].f64[0] = 0.0;
    v1508 = *v1623;
    if (!*v1623)
      goto LABEL_1408;
  }
  if (*(_BYTE *)(v1506 + 8))
  {
    v1510 = v1505[24];
    v1509 = (_BYTE *)v1505[25];
    v1511 = (_BYTE *)v1505[26];
    v1512 = v1511 - v1509;
    v1513 = 0xAAAAAAAAAAAAAAABLL * ((v1511 - v1509) >> 2);
    if (v1511 == v1509)
    {
      v1514 = 0;
      v1515 = 0;
      if (!(_DWORD)v1510)
        goto LABEL_1417;
    }
    else
    {
      if (v1513 > 0x1555555555555555)
        sub_20E867F44();
      v1514 = (char *)operator new(v1511 - v1509);
      memcpy(v1514, v1509, 12 * ((v1512 - 12) / 0xCuLL) + 12);
      v1515 = &v1514[12 * ((v1512 - 12) / 0xCuLL) + 12];
      v1506 = *(_QWORD *)&v1655 + 40304;
      if (!(_DWORD)v1510)
        goto LABEL_1417;
    }
    v1516 = (*(_DWORD *)(v1506 + 160) - HIDWORD(v1510));
    if (0xAAAAAAAAAAAAAAABLL * ((v1515 - v1514) >> 2) > v1516)
    {
      v1517 = &v1514[12 * v1516];
      if (v1517 == v1515 || v1517[8] == 0)
      {
        v1519 = -1;
        v1520 = v1673;
      }
      else
      {
        if (v1511 == v1509)
        {
          v1525 = 0;
          v1526 = 0;
        }
        else
        {
          if (v1513 > 0x1555555555555555)
            sub_20E867F44();
          v1525 = (char *)operator new(v1511 - v1509);
          memcpy(v1525, v1509, 12 * ((v1512 - 12) / 0xCuLL) + 12);
          v1526 = &v1525[12 * ((v1512 - 12) / 0xCuLL) + 12];
        }
        v1520 = v1673;
        if (0xAAAAAAAAAAAAAAABLL * ((v1526 - v1525) >> 2) <= v1516
          || (v1527 = &v1525[12 * v1516], v1527 == v1526)
          || !v1527[8])
        {
          v1593 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v1593, "Key does not exist in the map.");
          v1593->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
          __cxa_throw(v1593, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        v1519 = *((_DWORD *)v1527 + 1);
        operator delete(v1525);
      }
LABEL_1433:
      operator delete(v1514);
      v1507 = *v1520;
LABEL_1434:
      LOBYTE(v1507[2211].f64[0]) = 1;
      BYTE4(v1507[2220].f64[1]) = 0;
      LODWORD(v1507[2671].f64[0]) = 0;
      LODWORD(v1507[2671].f64[1]) = 0;
      v1504 = v1655;
      v1528 = *(float64x2_t *)(*(_QWORD *)&v1655 + 40320);
      v1529 = *(float64x2_t *)(*(_QWORD *)&v1655 + 40336);
      *(float64x2_t *)((char *)v1507 + 35413) = *(float64x2_t *)(*(_QWORD *)&v1655 + 40349);
      *(float64x2_t *)((char *)v1507 + 35400) = v1529;
      *(float64x2_t *)((char *)v1507 + 35384) = v1528;
      v1530 = (uint64_t)&(*v1520)[2211];
      v1531 = *(_OWORD *)(*(_QWORD *)&v1655 + 40368);
      v1532 = *(_OWORD *)(*(_QWORD *)&v1655 + 40384);
      *(_OWORD *)(v1530 + 85) = *(_OWORD *)(*(_QWORD *)&v1655 + 40397);
      *(_OWORD *)(v1530 + 72) = v1532;
      *(_OWORD *)(v1530 + 56) = v1531;
      v1533 = (uint64_t)&(*v1520)[2211];
      v1534 = *(_OWORD *)(*(_QWORD *)&v1655 + 40416);
      v1535 = *(_OWORD *)(*(_QWORD *)&v1655 + 40432);
      *(_OWORD *)(v1533 + 133) = *(_OWORD *)(*(_QWORD *)&v1655 + 40445);
      *(_OWORD *)(v1533 + 120) = v1535;
      *(_OWORD *)(v1533 + 104) = v1534;
      v1507 = *v1520;
      v1536 = (uint64_t)&(*v1520)[2211];
      *(_DWORD *)(v1536 + 152) = v1519;
      *(float64x2_t *)((char *)&v1507[2674] + 4) = 0u;
      *(float64x2_t *)((char *)&v1507[2675] + 4) = 0u;
      *(_DWORD *)(v1536 + 7444) = 0;
      v1508 = *v1623;
      goto LABEL_1435;
    }
LABEL_1417:
    v1519 = -1;
    v1520 = v1673;
    if (!v1514)
      goto LABEL_1434;
    goto LABEL_1433;
  }
LABEL_1408:
  LOBYTE(v1507[2211].f64[0]) = 0;
  BYTE4(v1507[2220].f64[1]) = 0;
LABEL_1435:
  v1537 = (_BYTE *)&v1507[2676].f64[1];
  *(_BYTE *)(*(_QWORD *)&v1655 + 58160) = v1508;
  if (!v1471 && v1508 && *v1630 && *(_DWORD *)(*(_QWORD *)&v1504 + 3004) == 1)
  {
    *v1537 = 1;
    v1538 = *(unsigned __int8 *)(*(_QWORD *)&v1655 + 41616);
    BYTE1(v1507[2676].f64[1]) = v1538;
    v1539 = (uint64_t *)(*(_QWORD *)&v1504 + 41088);
    if (!v1538)
    {
      v1551 = v1507 + 112452;
      v1552 = 3960;
      goto LABEL_1460;
    }
    v1540 = (double **)(*(_QWORD *)&v1655 + 57840);
    v1541 = *(unsigned int *)(*(_QWORD *)&v1655 + 41640);
    if (*(_DWORD *)(*(_QWORD *)&v1655 + 57856) != (_DWORD)v1541)
    {
      *(_DWORD *)(*(_QWORD *)&v1655 + 57856) = v1541;
      if (*(_QWORD *)(*(_QWORD *)&v1655 + 57848) < v1541)
      {
        if (*v1540)
          MEMORY[0x212BC6368](*v1540, 0x1000C8000313F17);
        v1542 = (8 * v1541 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(*(_QWORD *)&v1655 + 57840) = 0;
        *(_QWORD *)(*(_QWORD *)&v1655 + 57848) = v1542 >> 3;
        *(_QWORD *)(*(_QWORD *)&v1655 + 57840) = operator new(v1542, (std::align_val_t)0x20uLL);
      }
    }
    v1543 = v1507 + 112452;
    sub_20F9BDC70(v1539, *(_QWORD *)&v1655 + 41624, (_QWORD *)(*(_QWORD *)&v1655 + 57840));
    v1544 = *(unsigned int *)(*(_QWORD *)&v1655 + 57856);
    if ((_DWORD)v1544)
    {
      v1545 = (float64x2_t *)*v1540;
      if (v1544 >= 6 && (unint64_t)((char *)v1507 - (char *)v1545 + 1799232) >= 0x20)
      {
        v1546 = v1544 & 0xFFFFFFFC;
        v1547 = &v1543->f64[v1546];
        v1548 = &v1545->f64[v1546];
        v1570 = v1545 + 1;
        v1571 = v1507 + 112453;
        v1572 = v1546;
        do
        {
          v1573 = vnegq_f64(*v1570);
          v1571[-1] = vnegq_f64(v1570[-1]);
          *v1571 = v1573;
          v1570 += 2;
          v1571 += 2;
          v1572 -= 4;
        }
        while (v1572);
        if (v1546 == v1544)
          goto LABEL_1451;
      }
      else
      {
        LODWORD(v1546) = 0;
        v1547 = v1507[112452].f64;
        v1548 = *v1540;
      }
      v1549 = v1544 - v1546;
      do
      {
        v1550 = *v1548++;
        *v1547++ = -v1550;
        --v1549;
      }
      while (v1549);
    }
LABEL_1451:
    if (v1594 == (_DWORD)v1544)
      goto LABEL_1461;
    v1551 = (float64x2_t *)((char *)v1543 + 8 * v1544);
    v1552 = 8 * (v1594 - v1544);
LABEL_1460:
    bzero(v1551, v1552);
LABEL_1461:
    v1553 = (char *)&v1507[93244];
    if (*(_BYTE *)(*(_QWORD *)&v1655 + 41616))
    {
      v1554 = (*(uint64_t (**)(float64_t))(**(_QWORD **)&v1655 + 64))(COERCE_FLOAT64_T(*(_QWORD *)&v1655));
      v1555 = (char **)(*(_QWORD *)&v1655 + 57816);
      sub_20F9B8CF0((_QWORD *)(*(_QWORD *)&v1655 + 41624), v1539, (void **)(*(_QWORD *)&v1655 + 57816), v1554);
      v1556 = 196 - ((v1594 + 3) & 0xFFFFFFFC);
      *(_DWORD *)v1745 = v1594;
      *(_DWORD *)&v1745[4] = v1594;
      *(_QWORD *)&v1745[8] = &v1553[8 * v1556];
      *(_DWORD *)&v1745[16] = v1556;
      if (((*(uint64_t (**)(float64_t))(**(_QWORD **)&v1655 + 64))(COERCE_FLOAT64_T(*(_QWORD *)&v1655)) & 1) != 0)
      {
        if (*v1555 == v1553)
        {
          v1563 = *(_DWORD *)(*(_QWORD *)&v1655 + 57832);
          v1562 = *(_DWORD *)(*(_QWORD *)&v1655 + 57836);
          v1564 = (8 * v1563 * v1562 + 31) & 0xFFFFFFFE0;
          *(_QWORD *)&__dst[0].f64[1] = v1564 >> 3;
          *(_QWORD *)&__dst[0].f64[0] = operator new(v1564, (std::align_val_t)0x20uLL);
          *(_QWORD *)&__dst[1].f64[0] = __PAIR64__(v1563, v1562);
          sub_20F2B8274((unint64_t)__dst, (uint64_t *)(*(_QWORD *)&v1655 + 57816));
          if (LODWORD(__dst[1].f64[0]))
          {
            v1565 = HIDWORD(__dst[1].f64[0]);
            v1566 = __dst[0].f64[0];
            if (HIDWORD(__dst[1].f64[0]))
            {
              v1567 = 8 * LODWORD(__dst[1].f64[0]);
              v1568 = 8 * SLODWORD(__dst[1].f64[0]);
              v1569 = __dst[0].f64[0];
              do
              {
                memmove(&v1553[8 * v1556], *(const void **)&v1569, v1567);
                v1556 += 196;
                *(_QWORD *)&v1569 += v1568;
                --v1565;
              }
              while (v1565);
            }
          }
          else
          {
            v1566 = __dst[0].f64[0];
          }
          if (v1566 != 0.0)
            MEMORY[0x212BC6368](*(_QWORD *)&v1566, 0x1000C8000313F17);
        }
        else
        {
          sub_20F9D681C((uint64_t)v1745, (uint64_t *)(*(_QWORD *)&v1655 + 57816));
        }
      }
      else
      {
        v1557 = *(unsigned int *)(*(_QWORD *)&v1655 + 57832);
        if ((_DWORD)v1557)
        {
          v1558 = *(unsigned int *)(*(_QWORD *)&v1655 + 57836);
          if ((_DWORD)v1558)
          {
            v1559 = *v1555;
            v1560 = 8 * v1557;
            v1561 = 8 * (int)v1557;
            do
            {
              memmove(&v1553[8 * v1556], v1559, v1560);
              v1556 += 196;
              v1559 += v1561;
              --v1558;
            }
            while (v1558);
          }
        }
      }
    }
    else
    {
      bzero(&v1507[93244], 0x4B080uLL);
    }
    v1574 = (uint64_t)&v1507[2676].f64[1] + 4;
    v1575 = *(int **)(*(_QWORD *)&v1655 + 41568);
    v1576 = *(int **)(*(_QWORD *)&v1655 + 41576);
    LODWORD(v1507[2725].f64[1]) = 0;
    if (v1575 == v1576)
    {
      v1577 = 0;
      v1579 = *(char **)(*(_QWORD *)&v1655 + 41592);
      v1580 = *(char **)(*(_QWORD *)&v1655 + 41600);
      if (v1579 == v1580)
        goto LABEL_1495;
    }
    else
    {
      v1577 = 0;
      do
      {
        v1578 = *v1575++;
        *(_DWORD *)(v1574 + 4 * v1577) = v1578;
        v1577 = LODWORD(v1507[2725].f64[1]) + 1;
        LODWORD(v1507[2725].f64[1]) = v1577;
      }
      while (v1575 != v1576);
      v1579 = *(char **)(*(_QWORD *)&v1655 + 41592);
      v1580 = *(char **)(*(_QWORD *)&v1655 + 41600);
      if (v1579 == v1580)
      {
LABEL_1495:
        HIDWORD(v1507[2725].f64[1]) = (unint64_t)(v1580 - v1579) >> 2;
        if (v1613 == 2)
          ++*(_DWORD *)(*(_QWORD *)&v1655 + 58080);
        return;
      }
    }
    v1581 = v1579;
    do
    {
      v1582 = *(_DWORD *)v1581;
      v1581 += 4;
      *(_DWORD *)(v1574 + 4 * v1577) = v1582;
      v1577 = LODWORD(v1507[2725].f64[1]) + 1;
      LODWORD(v1507[2725].f64[1]) = v1577;
    }
    while (v1581 != v1580);
    goto LABEL_1495;
  }
  if (v1613 == 2)
  {
    if (v1508)
    {
      if (*v1630)
      {
        if (*(_DWORD *)(*(_QWORD *)&v1504 + 3004) == 1)
          ++*(_DWORD *)(*(_QWORD *)&v1655 + 58092);
        else
          ++*(_DWORD *)(*(_QWORD *)&v1655 + 58096);
      }
      else
      {
        ++*(_DWORD *)(*(_QWORD *)&v1655 + 58088);
      }
    }
    else
    {
      ++*(_DWORD *)(*(_QWORD *)&v1655 + 58084);
    }
  }
  *v1537 = 0;
  HIDWORD(v1507[2725].f64[1]) = 0;
  *v1630 = 0;
}

void sub_20F8C55F0(_Unwind_Exception *a1)
{
  if (STACK[0x570])
  {
    MEMORY[0x212BC6368](STACK[0x570], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F8C57DC(uint64_t a1, char a2, uint64_t a3, int a4, double a5, double a6)
{
  _QWORD v7[7];
  int v8;
  int v9;
  char v10;
  double v11;
  double v12;

  v11 = a6;
  v12 = a5;
  v10 = a2;
  v8 = a4;
  v9 = 2;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = a3;
  v7[3] = &v9;
  v7[4] = &v10;
  v7[5] = &v12;
  v7[6] = &v11;
  return sub_20F9D9FCC(v7);
}

double sub_20F8C5830(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64[15];
  char v65;
  int v66;
  int v67;
  char v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  char v77;
  char v79;

  v4 = (uint64_t *)(a1 + 57912);
  *(_WORD *)(a1 + 58053) = 257;
  v57 = 0;
  kdebug_trace();
  v5 = *v4;
  v6 = (_DWORD *)(*v4 + 2145472);
  v7 = *v4 + 31060;
  *v6 = 1010;
  ++*(_DWORD *)(v5 + 363816);
  v8 = *(_QWORD *)(v5 + 31040);
  v9 = *(_DWORD *)v7 != 0;
  v10 = *(_DWORD *)(v7 + 8) != 0;
  v64[0] = 0;
  v66 = 0;
  v67 = 0;
  v68 = 1;
  v69 = 0x40C3880000000000;
  v70 = xmmword_2103B8420;
  v71 = 0x3DDB7CDFD9D7BDBBLL;
  v72 = v8;
  v73 = 1;
  v74 = v9;
  v75 = v9;
  v76 = v10;
  v77 = *(_BYTE *)(v7 + 12);
  v11 = *(unsigned __int8 *)(v7 + 5);
  if (*(_BYTE *)(v7 + 4))
    v12 = v11 == 0;
  else
    v12 = 1;
  v13 = !v12;
  v79 = v13;
  sub_20FA191D0((uint64_t)v64, (_DWORD *)(v5 + 64));
  *v6 = 1011;
  v58 = v5;
  v59 = v5;
  v60 = v64;
  v61 = &v48;
  v62 = &v57;
  v63 = v5 + 64;
  sub_20FA25F3C((uint64_t)&v58, v14, v15, v16, v17, v18, v19, v20, v46, v48, v49, v50, v51.i64[0], v51.i64[1], v52, v53, v54, *((uint64_t *)&v54 + 1), v55,
    v56,
    v21,
    v22,
    v23,
    v24,
    v57);
  *v6 = 1014;
  if (!*(_DWORD *)(v7 + 212))
  {
    v48 = 0;
    *v6 = 1015;
    v56 = 0;
    if (*(_DWORD *)(v7 + 216))
      goto LABEL_9;
LABEL_11:
    v32 = 0;
    goto LABEL_12;
  }
  sub_20FA28D70((uint64_t)&v58, v25, v26, v27, v28, v29, v30, v31, v47, v48, v49, v50, v51.i64[0], v51.i64[1], v52, v53, v54, *((uint64_t *)&v54 + 1), v55,
    v56,
    v57,
    v5,
    v5,
    v5 + 64,
    (uint64_t)v64,
    (uint64_t)&v48,
    (uint64_t)&v57,
    v64[0],
    v64[1],
    v64[2],
    v64[3],
    v64[4],
    v64[5],
    v64[6],
    v64[7],
    v64[8],
    v64[9],
    v64[10],
    v64[11],
    v64[12],
    v64[13],
    v64[14],
    v65);
  *v6 = 1015;
  v56 = 0;
  if (!*(_DWORD *)(v7 + 216))
    goto LABEL_11;
LABEL_9:
  v58 = v5;
  v59 = v5;
  v60 = &v57;
  v61 = &v48;
  sub_20FA29844((uint64_t)&v58, v25, v26, v27, v28, v29, v30, v31, v47, v48, v49, v50, v51.i64[0]);
  v32 = v56;
LABEL_12:
  *v6 = 1016;
  v33 = vaddq_f64(*(float64x2_t *)(v5 + 43920), (float64x2_t)0);
  *(float64x2_t *)(v5 + 43904) = vaddq_f64(*(float64x2_t *)(v5 + 43904), (float64x2_t)0);
  *(float64x2_t *)(v5 + 43920) = v33;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v34 = v48;
  *(_QWORD *)(a2 + 72) = v49;
  *(int8x16_t *)(a2 + 88) = vextq_s8(v51, v51, 8uLL);
  v35 = v53;
  *(_QWORD *)(a2 + 16) = v52;
  *(_QWORD *)&v33.f64[0] = v50;
  *(_QWORD *)a2 = v35;
  *(_OWORD *)(a2 + 56) = v54;
  *(_QWORD *)(a2 + 120) = v55;
  *(float64_t *)(a2 + 128) = v33.f64[0];
  *(_QWORD *)(a2 + 40) = v34;
  *(_QWORD *)(a2 + 48) = v32;
  v36 = *v4;
  if (*(_DWORD *)(*v4 + 452496))
  {
    v37 = *(_QWORD *)(a1 + 1592);
    v38 = *(_QWORD *)(a1 + 1600);
    if (v37 != v38)
    {
      v39 = 0;
      v40 = v36 + 453956;
      v41 = v36 + 454060;
      do
      {
        while (*(_QWORD *)(v37 + 168))
        {
          v42 = v39 >> 5;
          v43 = 1 << v39++;
          v44 = 4 * v42;
          LOBYTE(v42) = (*(_DWORD *)(v40 + v44) & v43) != 0;
          LOBYTE(v43) = (*(_DWORD *)(v41 + v44) & v43) != 0;
          *(_BYTE *)(v37 + 176) = v42;
          *(_BYTE *)(v37 + 177) = v43;
          v37 += 304;
          if (v37 == v38)
            return *(double *)&v57;
        }
        *(_BYTE *)(v37 + 176) = 0;
        *(_BYTE *)(v37 + 177) = 0;
        v37 += 304;
      }
      while (v37 != v38);
    }
  }
  return *(double *)&v57;
}

void sub_20F8C5B4C(_Unwind_Exception *a1)
{
  float64x2_t *v1;
  float64x2_t v2;

  v2 = vaddq_f64(v1[2745], (float64x2_t)0);
  v1[2744] = vaddq_f64(v1[2744], (float64x2_t)0);
  v1[2745] = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20F8C5B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL8 v22;
  uint64_t v23;
  char **v24;
  _QWORD v35[30];

  if (!*(_BYTE *)(a1 + 17440))
    goto LABEL_30;
  v1 = *(_QWORD *)(a1 + 17608);
  v2 = *(_QWORD *)(a1 + 17616);
  if (*(_BYTE *)(a1 + 17872))
  {
    v3 = *(_QWORD *)(a1 + 17632);
    v4 = *(_QWORD *)(a1 + 17640);
    v5 = *(_QWORD *)(a1 + 17656);
    v6 = *(_QWORD *)(a1 + 17664);
    v7 = *(_QWORD *)(a1 + 17680);
    v8 = *(_QWORD *)(a1 + 17688);
    v9 = *(_QWORD *)(a1 + 17704);
    v10 = *(_QWORD *)(a1 + 17712);
    v11 = *(_QWORD *)(a1 + 17728);
    v12 = *(_QWORD *)(a1 + 17736);
    v13 = *(_QWORD *)(a1 + 17752);
    v14 = *(_QWORD *)(a1 + 17760);
    v15 = *(_QWORD *)(a1 + 17776);
    v16 = *(_QWORD *)(a1 + 17784);
    v17 = *(_QWORD *)(a1 + 17800);
    v18 = *(_QWORD *)(a1 + 17808);
    v19 = *(_QWORD *)(a1 + 17824);
    v20 = *(_QWORD *)(a1 + 17832);
    if (*(_QWORD *)(a1 + 17848) != *(_QWORD *)(a1 + 17856))
      goto LABEL_27;
  }
  else
  {
    if (v1 != v2)
      goto LABEL_30;
    v4 = *(_QWORD *)(a1 + 17632);
    if (v4 != *(_QWORD *)(a1 + 17640))
      goto LABEL_30;
    v6 = *(_QWORD *)(a1 + 17656);
    if (v6 != *(_QWORD *)(a1 + 17664))
      goto LABEL_30;
    v8 = *(_QWORD *)(a1 + 17680);
    if (v8 != *(_QWORD *)(a1 + 17688))
      goto LABEL_30;
    v10 = *(_QWORD *)(a1 + 17704);
    if (v10 != *(_QWORD *)(a1 + 17712))
      goto LABEL_30;
    v12 = *(_QWORD *)(a1 + 17728);
    if (v12 != *(_QWORD *)(a1 + 17736))
      goto LABEL_30;
    v14 = *(_QWORD *)(a1 + 17752);
    if (v14 != *(_QWORD *)(a1 + 17760))
      goto LABEL_30;
    v16 = *(_QWORD *)(a1 + 17776);
    if (v16 != *(_QWORD *)(a1 + 17784))
      goto LABEL_30;
    v18 = *(_QWORD *)(a1 + 17800);
    if (v18 != *(_QWORD *)(a1 + 17808))
      goto LABEL_30;
    v20 = *(_QWORD *)(a1 + 17824);
    if (v20 != *(_QWORD *)(a1 + 17832) || *(_QWORD *)(a1 + 17848) != *(_QWORD *)(a1 + 17856))
      goto LABEL_30;
    v19 = *(_QWORD *)(a1 + 17824);
    v17 = *(_QWORD *)(a1 + 17800);
    v15 = *(_QWORD *)(a1 + 17776);
    v13 = *(_QWORD *)(a1 + 17752);
    v11 = *(_QWORD *)(a1 + 17728);
    v9 = *(_QWORD *)(a1 + 17704);
    v7 = *(_QWORD *)(a1 + 17680);
    v5 = *(_QWORD *)(a1 + 17656);
    v3 = *(_QWORD *)(a1 + 17632);
    v2 = *(_QWORD *)(a1 + 17608);
  }
  if (v19 == v20
    && v17 == v18
    && v15 == v16
    && v13 == v14
    && v11 == v12
    && v9 == v10
    && v7 == v8
    && v5 == v6
    && v3 == v4
    && v1 == v2)
  {
    return 1;
  }
LABEL_27:
  v21 = *(_DWORD *)(a1 + 34320);
  if (v21 == *(_DWORD *)(a1 + 34324)
    && v21 == 9 * ((*(_QWORD *)(a1 + 18496) - *(_QWORD *)(a1 + 18488)) >> 2)
            + 6
            * (((*(_QWORD *)(a1 + 18520) - *(_QWORD *)(a1 + 18512)) >> 2)
             + ((*(_QWORD *)(a1 + 18472) - *(_QWORD *)(a1 + 18464)) >> 2)
             + ((*(_QWORD *)(a1 + 18544) - *(_QWORD *)(a1 + 18536)) >> 2))
            + ((*(_QWORD *)(a1 + 18592) - *(_QWORD *)(a1 + 18584)) >> 2)
            + ((*(_DWORD *)(a1 + 18616) - *(_DWORD *)(a1 + 18608)) & 0xFFFFFFFC)
            + ((*(_DWORD *)(a1 + 18640) - *(_DWORD *)(a1 + 18632)) & 0xFFFFFFFC)
            + 3
            * (((*(_QWORD *)(a1 + 18664) - *(_QWORD *)(a1 + 18656)) >> 2)
             + ((*(_QWORD *)(a1 + 18568) - *(_QWORD *)(a1 + 18560)) >> 2)
             + ((*(_QWORD *)(a1 + 18688) - *(_QWORD *)(a1 + 18680)) >> 2)))
  {
    return 1;
  }
LABEL_30:
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v24 = (char **)sub_20F8D7234(v23);
  sub_20F8DB994((uint64_t)v35, v24);
  v22 = v35[0] == v35[1]
     && v35[3] == v35[4]
     && v35[6] == v35[7]
     && v35[9] == v35[10]
     && v35[12] == v35[13]
     && v35[15] == v35[16]
     && v35[18] == v35[19]
     && v35[21] == v35[22]
     && v35[24] == v35[25]
     && v35[27] == v35[28];
  sub_20F89E908((uint64_t)v35);
  return v22;
}

void sub_20F8C5EE0(uint64_t a1, unsigned int **a2, int a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unint64_t v114;
  unsigned int *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int v143;
  unint64_t v144;
  unsigned int *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t **v171;
  unint64_t v172;
  int32x4_t *v173;
  int32x4_t **v174;
  int32x4_t *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int32x4_t *v179;
  uint64_t v180;
  int32x4_t *v181;
  uint64_t v182;
  int32x4_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _DWORD *v188;
  unint64_t v189;
  unsigned int *v190;
  unsigned int *v191;
  uint64_t v192;

  v4 = *(unsigned int **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_OWORD *)(a1 + 24) = 0u;
  v192 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = v4;
    v20 = a2[3];
    v21 = a2[4];
    if (v20 != v21)
    {
      do
      {
LABEL_24:
        while (1)
        {
          v23 = *v20;
          v24 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v7 >= v24)
            break;
          *v7 = 1;
          v7[1] = v23;
          v22 = v7 + 3;
          v7[2] = 9;
          *(_QWORD *)(a1 + 8) = v7 + 3;
          ++v20;
          v7 += 3;
          if (v20 == v21)
            goto LABEL_41;
        }
        v25 = *(unsigned int **)a1;
        v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(_QWORD *)a1) >> 2);
        v27 = v26 + 1;
        if (v26 + 1 > 0x1555555555555555)
LABEL_248:
          sub_20E867F44();
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v25) >> 2);
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0xAAAAAAAAAAAAAAALL)
          v29 = 0x1555555555555555;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 > 0x1555555555555555)
LABEL_249:
            sub_20E877A38();
          v30 = (char *)operator new(12 * v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[12 * v26];
        *(_DWORD *)v31 = 1;
        *((_DWORD *)v31 + 1) = v23;
        *((_DWORD *)v31 + 2) = 9;
        v32 = v31;
        if (v7 != v25)
        {
          do
          {
            v33 = *(_QWORD *)(v7 - 3);
            v7 -= 3;
            v34 = v7[2];
            *(_QWORD *)(v32 - 12) = v33;
            v32 -= 12;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v7 != v25);
          v7 = *(unsigned int **)a1;
        }
        v22 = (unsigned int *)(v31 + 12);
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v31 + 12;
        *(_QWORD *)(a1 + 16) = &v30[12 * v29];
        if (v7)
          operator delete(v7);
        *(_QWORD *)(a1 + 8) = v22;
        ++v20;
        v7 = v22;
      }
      while (v20 != v21);
LABEL_41:
      v35 = a2[6];
      v36 = a2[7];
      if (v35 != v36)
        goto LABEL_44;
      goto LABEL_211;
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v8 = *v5;
        v9 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v4 >= v9)
          break;
        *v4 = 0;
        v4[1] = v8;
        v7 = v4 + 3;
        v4[2] = 6;
        *(_QWORD *)(a1 + 8) = v4 + 3;
        ++v5;
        v4 += 3;
        if (v5 == v6)
          goto LABEL_21;
      }
      v10 = *(unsigned int **)a1;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 2);
      v12 = v11 + 1;
      if (v11 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v10) >> 2);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0xAAAAAAAAAAAAAAALL)
        v14 = 0x1555555555555555;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0x1555555555555555)
          goto LABEL_249;
        v15 = (char *)operator new(12 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[12 * v11];
      *(_DWORD *)v16 = 0;
      *((_DWORD *)v16 + 1) = v8;
      *((_DWORD *)v16 + 2) = 6;
      v17 = v16;
      if (v4 != v10)
      {
        do
        {
          v18 = *(_QWORD *)(v4 - 3);
          v4 -= 3;
          v19 = v4[2];
          *(_QWORD *)(v17 - 12) = v18;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v19;
        }
        while (v4 != v10);
        v4 = *(unsigned int **)a1;
      }
      v7 = (unsigned int *)(v16 + 12);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v16 + 12;
      *(_QWORD *)(a1 + 16) = &v15[12 * v14];
      if (v4)
        operator delete(v4);
      *(_QWORD *)(a1 + 8) = v7;
      ++v5;
      v4 = v7;
    }
    while (v5 != v6);
LABEL_21:
    v20 = a2[3];
    v21 = a2[4];
    if (v20 != v21)
      goto LABEL_24;
  }
  v22 = v7;
  v35 = a2[6];
  v36 = a2[7];
  if (v35 != v36)
  {
    do
    {
LABEL_44:
      while (1)
      {
        v38 = *v35;
        v39 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v22 >= v39)
          break;
        *v22 = 2;
        v22[1] = v38;
        v37 = v22 + 3;
        v22[2] = 6;
        *(_QWORD *)(a1 + 8) = v22 + 3;
        ++v35;
        v22 += 3;
        if (v35 == v36)
          goto LABEL_61;
      }
      v40 = *(unsigned int **)a1;
      v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *(_QWORD *)a1) >> 2);
      v42 = v41 + 1;
      if (v41 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v40) >> 2);
      if (2 * v43 > v42)
        v42 = 2 * v43;
      if (v43 >= 0xAAAAAAAAAAAAAAALL)
        v44 = 0x1555555555555555;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 > 0x1555555555555555)
          goto LABEL_249;
        v45 = (char *)operator new(12 * v44);
      }
      else
      {
        v45 = 0;
      }
      v46 = &v45[12 * v41];
      *(_DWORD *)v46 = 2;
      *((_DWORD *)v46 + 1) = v38;
      *((_DWORD *)v46 + 2) = 6;
      v47 = v46;
      if (v22 != v40)
      {
        do
        {
          v48 = *(_QWORD *)(v22 - 3);
          v22 -= 3;
          v49 = v22[2];
          *(_QWORD *)(v47 - 12) = v48;
          v47 -= 12;
          *((_DWORD *)v47 + 2) = v49;
        }
        while (v22 != v40);
        v22 = *(unsigned int **)a1;
      }
      v37 = (unsigned int *)(v46 + 12);
      *(_QWORD *)a1 = v47;
      *(_QWORD *)(a1 + 8) = v46 + 12;
      *(_QWORD *)(a1 + 16) = &v45[12 * v44];
      if (v22)
        operator delete(v22);
      *(_QWORD *)(a1 + 8) = v37;
      ++v35;
      v22 = v37;
    }
    while (v35 != v36);
LABEL_61:
    v50 = a2[9];
    v51 = a2[10];
    if (v50 != v51)
      goto LABEL_64;
    goto LABEL_212;
  }
LABEL_211:
  v37 = v22;
  v50 = a2[9];
  v51 = a2[10];
  if (v50 != v51)
  {
    do
    {
LABEL_64:
      while (1)
      {
        v53 = *v50;
        v54 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v37 >= v54)
          break;
        *v37 = 3;
        v37[1] = v53;
        v52 = v37 + 3;
        v37[2] = 6;
        *(_QWORD *)(a1 + 8) = v37 + 3;
        ++v50;
        v37 += 3;
        if (v50 == v51)
          goto LABEL_81;
      }
      v55 = *(unsigned int **)a1;
      v56 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v37 - *(_QWORD *)a1) >> 2);
      v57 = v56 + 1;
      if (v56 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (_QWORD)v55) >> 2);
      if (2 * v58 > v57)
        v57 = 2 * v58;
      if (v58 >= 0xAAAAAAAAAAAAAAALL)
        v59 = 0x1555555555555555;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 > 0x1555555555555555)
          goto LABEL_249;
        v60 = (char *)operator new(12 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[12 * v56];
      *(_DWORD *)v61 = 3;
      *((_DWORD *)v61 + 1) = v53;
      *((_DWORD *)v61 + 2) = 6;
      v62 = v61;
      if (v37 != v55)
      {
        do
        {
          v63 = *(_QWORD *)(v37 - 3);
          v37 -= 3;
          v64 = v37[2];
          *(_QWORD *)(v62 - 12) = v63;
          v62 -= 12;
          *((_DWORD *)v62 + 2) = v64;
        }
        while (v37 != v55);
        v37 = *(unsigned int **)a1;
      }
      v52 = (unsigned int *)(v61 + 12);
      *(_QWORD *)a1 = v62;
      *(_QWORD *)(a1 + 8) = v61 + 12;
      *(_QWORD *)(a1 + 16) = &v60[12 * v59];
      if (v37)
        operator delete(v37);
      *(_QWORD *)(a1 + 8) = v52;
      ++v50;
      v37 = v52;
    }
    while (v50 != v51);
LABEL_81:
    v65 = a2[12];
    v66 = a2[13];
    if (v65 != v66)
      goto LABEL_84;
    goto LABEL_213;
  }
LABEL_212:
  v52 = v37;
  v65 = a2[12];
  v66 = a2[13];
  if (v65 != v66)
  {
    do
    {
LABEL_84:
      while (1)
      {
        v68 = *v65;
        v69 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v52 >= v69)
          break;
        *v52 = 4;
        v52[1] = v68;
        v67 = v52 + 3;
        v52[2] = 3;
        *(_QWORD *)(a1 + 8) = v52 + 3;
        ++v65;
        v52 += 3;
        if (v65 == v66)
          goto LABEL_101;
      }
      v70 = *(unsigned int **)a1;
      v71 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - *(_QWORD *)a1) >> 2);
      v72 = v71 + 1;
      if (v71 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)v70) >> 2);
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0xAAAAAAAAAAAAAAALL)
        v74 = 0x1555555555555555;
      else
        v74 = v72;
      if (v74)
      {
        if (v74 > 0x1555555555555555)
          goto LABEL_249;
        v75 = (char *)operator new(12 * v74);
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[12 * v71];
      *(_DWORD *)v76 = 4;
      *((_DWORD *)v76 + 1) = v68;
      *((_DWORD *)v76 + 2) = 3;
      v77 = v76;
      if (v52 != v70)
      {
        do
        {
          v78 = *(_QWORD *)(v52 - 3);
          v52 -= 3;
          v79 = v52[2];
          *(_QWORD *)(v77 - 12) = v78;
          v77 -= 12;
          *((_DWORD *)v77 + 2) = v79;
        }
        while (v52 != v70);
        v52 = *(unsigned int **)a1;
      }
      v67 = (unsigned int *)(v76 + 12);
      *(_QWORD *)a1 = v77;
      *(_QWORD *)(a1 + 8) = v76 + 12;
      *(_QWORD *)(a1 + 16) = &v75[12 * v74];
      if (v52)
        operator delete(v52);
      *(_QWORD *)(a1 + 8) = v67;
      ++v65;
      v52 = v67;
    }
    while (v65 != v66);
LABEL_101:
    v80 = a2[15];
    v81 = a2[16];
    if (v80 != v81)
      goto LABEL_104;
    goto LABEL_214;
  }
LABEL_213:
  v67 = v52;
  v80 = a2[15];
  v81 = a2[16];
  if (v80 != v81)
  {
    do
    {
LABEL_104:
      while (1)
      {
        v83 = *v80;
        v84 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v67 >= v84)
          break;
        *v67 = 5;
        v67[1] = v83;
        v82 = v67 + 3;
        v67[2] = 1;
        *(_QWORD *)(a1 + 8) = v67 + 3;
        ++v80;
        v67 += 3;
        if (v80 == v81)
          goto LABEL_121;
      }
      v85 = *(unsigned int **)a1;
      v86 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v67 - *(_QWORD *)a1) >> 2);
      v87 = v86 + 1;
      if (v86 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - (_QWORD)v85) >> 2);
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0xAAAAAAAAAAAAAAALL)
        v89 = 0x1555555555555555;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 > 0x1555555555555555)
          goto LABEL_249;
        v90 = (char *)operator new(12 * v89);
      }
      else
      {
        v90 = 0;
      }
      v91 = &v90[12 * v86];
      *(_DWORD *)v91 = 5;
      *((_DWORD *)v91 + 1) = v83;
      *((_DWORD *)v91 + 2) = 1;
      v92 = v91;
      if (v67 != v85)
      {
        do
        {
          v93 = *(_QWORD *)(v67 - 3);
          v67 -= 3;
          v94 = v67[2];
          *(_QWORD *)(v92 - 12) = v93;
          v92 -= 12;
          *((_DWORD *)v92 + 2) = v94;
        }
        while (v67 != v85);
        v67 = *(unsigned int **)a1;
      }
      v82 = (unsigned int *)(v91 + 12);
      *(_QWORD *)a1 = v92;
      *(_QWORD *)(a1 + 8) = v91 + 12;
      *(_QWORD *)(a1 + 16) = &v90[12 * v89];
      if (v67)
        operator delete(v67);
      *(_QWORD *)(a1 + 8) = v82;
      ++v80;
      v67 = v82;
    }
    while (v80 != v81);
LABEL_121:
    v95 = a2[18];
    v96 = a2[19];
    if (v95 != v96)
      goto LABEL_124;
    goto LABEL_215;
  }
LABEL_214:
  v82 = v67;
  v95 = a2[18];
  v96 = a2[19];
  if (v95 != v96)
  {
    do
    {
LABEL_124:
      while (1)
      {
        v98 = *v95;
        v99 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v82 >= v99)
          break;
        *v82 = 6;
        v82[1] = v98;
        v97 = v82 + 3;
        v82[2] = 4;
        *(_QWORD *)(a1 + 8) = v82 + 3;
        ++v95;
        v82 += 3;
        if (v95 == v96)
          goto LABEL_141;
      }
      v100 = *(unsigned int **)a1;
      v101 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v82 - *(_QWORD *)a1) >> 2);
      v102 = v101 + 1;
      if (v101 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - (_QWORD)v100) >> 2);
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0xAAAAAAAAAAAAAAALL)
        v104 = 0x1555555555555555;
      else
        v104 = v102;
      if (v104)
      {
        if (v104 > 0x1555555555555555)
          goto LABEL_249;
        v105 = (char *)operator new(12 * v104);
      }
      else
      {
        v105 = 0;
      }
      v106 = &v105[12 * v101];
      *(_DWORD *)v106 = 6;
      *((_DWORD *)v106 + 1) = v98;
      *((_DWORD *)v106 + 2) = 4;
      v107 = v106;
      if (v82 != v100)
      {
        do
        {
          v108 = *(_QWORD *)(v82 - 3);
          v82 -= 3;
          v109 = v82[2];
          *(_QWORD *)(v107 - 12) = v108;
          v107 -= 12;
          *((_DWORD *)v107 + 2) = v109;
        }
        while (v82 != v100);
        v82 = *(unsigned int **)a1;
      }
      v97 = (unsigned int *)(v106 + 12);
      *(_QWORD *)a1 = v107;
      *(_QWORD *)(a1 + 8) = v106 + 12;
      *(_QWORD *)(a1 + 16) = &v105[12 * v104];
      if (v82)
        operator delete(v82);
      *(_QWORD *)(a1 + 8) = v97;
      ++v95;
      v82 = v97;
    }
    while (v95 != v96);
LABEL_141:
    v110 = a2[21];
    v111 = a2[22];
    if (v110 != v111)
      goto LABEL_144;
    goto LABEL_216;
  }
LABEL_215:
  v97 = v82;
  v110 = a2[21];
  v111 = a2[22];
  if (v110 != v111)
  {
    do
    {
LABEL_144:
      while (1)
      {
        v113 = *v110;
        v114 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v97 >= v114)
          break;
        *v97 = 7;
        v97[1] = v113;
        v112 = v97 + 3;
        v97[2] = 4;
        *(_QWORD *)(a1 + 8) = v97 + 3;
        ++v110;
        v97 += 3;
        if (v110 == v111)
          goto LABEL_161;
      }
      v115 = *(unsigned int **)a1;
      v116 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v97 - *(_QWORD *)a1) >> 2);
      v117 = v116 + 1;
      if (v116 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (_QWORD)v115) >> 2);
      if (2 * v118 > v117)
        v117 = 2 * v118;
      if (v118 >= 0xAAAAAAAAAAAAAAALL)
        v119 = 0x1555555555555555;
      else
        v119 = v117;
      if (v119)
      {
        if (v119 > 0x1555555555555555)
          goto LABEL_249;
        v120 = (char *)operator new(12 * v119);
      }
      else
      {
        v120 = 0;
      }
      v121 = &v120[12 * v116];
      *(_DWORD *)v121 = 7;
      *((_DWORD *)v121 + 1) = v113;
      *((_DWORD *)v121 + 2) = 4;
      v122 = v121;
      if (v97 != v115)
      {
        do
        {
          v123 = *(_QWORD *)(v97 - 3);
          v97 -= 3;
          v124 = v97[2];
          *(_QWORD *)(v122 - 12) = v123;
          v122 -= 12;
          *((_DWORD *)v122 + 2) = v124;
        }
        while (v97 != v115);
        v97 = *(unsigned int **)a1;
      }
      v112 = (unsigned int *)(v121 + 12);
      *(_QWORD *)a1 = v122;
      *(_QWORD *)(a1 + 8) = v121 + 12;
      *(_QWORD *)(a1 + 16) = &v120[12 * v119];
      if (v97)
        operator delete(v97);
      *(_QWORD *)(a1 + 8) = v112;
      ++v110;
      v97 = v112;
    }
    while (v110 != v111);
LABEL_161:
    v125 = a2[24];
    v126 = a2[25];
    if (v125 != v126)
      goto LABEL_164;
    goto LABEL_217;
  }
LABEL_216:
  v112 = v97;
  v125 = a2[24];
  v126 = a2[25];
  if (v125 != v126)
  {
    do
    {
LABEL_164:
      while (1)
      {
        v128 = *v125;
        v129 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v112 >= v129)
          break;
        *v112 = 8;
        v112[1] = v128;
        v127 = v112 + 3;
        v112[2] = 3;
        *(_QWORD *)(a1 + 8) = v112 + 3;
        ++v125;
        v112 += 3;
        if (v125 == v126)
          goto LABEL_181;
      }
      v130 = *(unsigned int **)a1;
      v131 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v112 - *(_QWORD *)a1) >> 2);
      v132 = v131 + 1;
      if (v131 + 1 > 0x1555555555555555)
        goto LABEL_248;
      v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - (_QWORD)v130) >> 2);
      if (2 * v133 > v132)
        v132 = 2 * v133;
      if (v133 >= 0xAAAAAAAAAAAAAAALL)
        v134 = 0x1555555555555555;
      else
        v134 = v132;
      if (v134)
      {
        if (v134 > 0x1555555555555555)
          goto LABEL_249;
        v135 = (char *)operator new(12 * v134);
      }
      else
      {
        v135 = 0;
      }
      v136 = &v135[12 * v131];
      *(_DWORD *)v136 = 8;
      *((_DWORD *)v136 + 1) = v128;
      *((_DWORD *)v136 + 2) = 3;
      v137 = v136;
      if (v112 != v130)
      {
        do
        {
          v138 = *(_QWORD *)(v112 - 3);
          v112 -= 3;
          v139 = v112[2];
          *(_QWORD *)(v137 - 12) = v138;
          v137 -= 12;
          *((_DWORD *)v137 + 2) = v139;
        }
        while (v112 != v130);
        v112 = *(unsigned int **)a1;
      }
      v127 = (unsigned int *)(v136 + 12);
      *(_QWORD *)a1 = v137;
      *(_QWORD *)(a1 + 8) = v136 + 12;
      *(_QWORD *)(a1 + 16) = &v135[12 * v134];
      if (v112)
        operator delete(v112);
      *(_QWORD *)(a1 + 8) = v127;
      ++v125;
      v112 = v127;
    }
    while (v125 != v126);
LABEL_181:
    v140 = a2[27];
    v141 = a2[28];
    if (v140 != v141)
      goto LABEL_184;
LABEL_218:
    v142 = v127;
    v155 = a3;
    if (a3 == 1)
      goto LABEL_219;
    goto LABEL_202;
  }
LABEL_217:
  v127 = v112;
  v140 = a2[27];
  v141 = a2[28];
  if (v140 == v141)
    goto LABEL_218;
  do
  {
LABEL_184:
    while (1)
    {
      v143 = *v140;
      v144 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v127 >= v144)
        break;
      *v127 = 9;
      v127[1] = v143;
      v142 = v127 + 3;
      v127[2] = 3;
      *(_QWORD *)(a1 + 8) = v127 + 3;
      ++v140;
      v127 += 3;
      if (v140 == v141)
        goto LABEL_201;
    }
    v145 = *(unsigned int **)a1;
    v146 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v127 - *(_QWORD *)a1) >> 2);
    v147 = v146 + 1;
    if (v146 + 1 > 0x1555555555555555)
      goto LABEL_248;
    v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - (_QWORD)v145) >> 2);
    if (2 * v148 > v147)
      v147 = 2 * v148;
    if (v148 >= 0xAAAAAAAAAAAAAAALL)
      v149 = 0x1555555555555555;
    else
      v149 = v147;
    if (v149)
    {
      if (v149 > 0x1555555555555555)
        goto LABEL_249;
      v150 = (char *)operator new(12 * v149);
    }
    else
    {
      v150 = 0;
    }
    v151 = &v150[12 * v146];
    *(_DWORD *)v151 = 9;
    *((_DWORD *)v151 + 1) = v143;
    *((_DWORD *)v151 + 2) = 3;
    v152 = v151;
    if (v127 != v145)
    {
      do
      {
        v153 = *(_QWORD *)(v127 - 3);
        v127 -= 3;
        v154 = v127[2];
        *(_QWORD *)(v152 - 12) = v153;
        v152 -= 12;
        *((_DWORD *)v152 + 2) = v154;
      }
      while (v127 != v145);
      v127 = *(unsigned int **)a1;
    }
    v142 = (unsigned int *)(v151 + 12);
    *(_QWORD *)a1 = v152;
    *(_QWORD *)(a1 + 8) = v151 + 12;
    *(_QWORD *)(a1 + 16) = &v150[12 * v149];
    if (v127)
      operator delete(v127);
    *(_QWORD *)(a1 + 8) = v142;
    ++v140;
    v127 = v142;
  }
  while (v140 != v141);
LABEL_201:
  v155 = a3;
  if (a3 == 1)
  {
LABEL_219:
    v161 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v142 - *(_QWORD *)a1) >> 2));
    if (v142 == *(unsigned int **)a1)
      v162 = 0;
    else
      v162 = v161;
    sub_20F8DD1D0(*(_QWORD *)a1, v142, v162, 1);
    v156 = v192;
    v159 = *(unsigned int **)a1;
    v160 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 == v160)
      goto LABEL_225;
    goto LABEL_223;
  }
LABEL_202:
  v156 = v192;
  if (!v155)
  {
    v157 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v142 - *(_QWORD *)a1) >> 2));
    if (v142 == *(unsigned int **)a1)
      v158 = 0;
    else
      v158 = v157;
    sub_20F8DBB08(*(_QWORD *)a1, v142, v158, 1);
  }
  v159 = *(unsigned int **)a1;
  v160 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v160)
    goto LABEL_225;
LABEL_223:
  v163 = 0;
  do
  {
    v164 = v159[2];
    v159[2] = v163;
    v165 = *v159;
    v159 += 3;
    v163 += v164;
    ++*(_QWORD *)(v156 + 8 * v165);
  }
  while (v159 != v160);
LABEL_225:
  v166 = 0;
  v167 = a1 + 104;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v168 = a1 + 344;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 560);
  v169.i64[0] = 0x400000004;
  v169.i64[1] = 0x400000004;
  v170.i64[0] = 0x800000008;
  v170.i64[1] = 0x800000008;
  do
  {
    v171 = (int32x4_t **)(v167 + 24 * v166);
    v172 = *(_QWORD *)(v156 + 8 * v166);
    v174 = v171 + 1;
    v173 = v171[1];
    v175 = *v171;
    v176 = ((char *)v173 - (char *)*v171) >> 2;
    if (v172 <= v176)
    {
      if (v172 < v176)
      {
        v173 = (int32x4_t *)((char *)v175 + 4 * v172);
        *v174 = v173;
      }
    }
    else
    {
      sub_20E93DC84(v167 + 24 * v166, v172 - v176);
      v170.i64[0] = 0x800000008;
      v170.i64[1] = 0x800000008;
      v169.i64[0] = 0x400000004;
      v169.i64[1] = 0x400000004;
      v175 = *v171;
      v173 = *v174;
    }
    if (v175 != v173)
    {
      v177 = (char *)v173 - (char *)v175 - 4;
      if (v177 < 0x1C)
      {
        LODWORD(v178) = 0;
        v179 = v175;
        do
        {
LABEL_237:
          v179->i32[0] = v178;
          v179 = (int32x4_t *)((char *)v179 + 4);
          LODWORD(v178) = v178 + 1;
        }
        while (v179 != v173);
        goto LABEL_238;
      }
      v180 = (v177 >> 2) + 1;
      v178 = v180 & 0x7FFFFFFFFFFFFFF8;
      v179 = (int32x4_t *)((char *)v175 + 4 * (v180 & 0x7FFFFFFFFFFFFFF8));
      v181 = v175 + 1;
      v182 = v180 & 0x7FFFFFFFFFFFFFF8;
      v183 = (int32x4_t)xmmword_210365350;
      do
      {
        v181[-1] = v183;
        *v181 = vaddq_s32(v183, v169);
        v183 = vaddq_s32(v183, v170);
        v181 += 2;
        v182 -= 8;
      }
      while (v182);
      if (v180 != v178)
        goto LABEL_237;
    }
LABEL_238:
    v184 = *(_QWORD *)(v156 + 8 * v166);
    v185 = v168 + 24 * v166;
    v187 = *(_QWORD *)(v185 + 8);
    v186 = (_QWORD *)(v185 + 8);
    v188 = *(_DWORD **)(v168 + 24 * v166);
    v189 = (v187 - (uint64_t)v188) >> 2;
    if (v184 <= v189)
    {
      if (v184 < v189)
        *v186 = &v188[v184];
    }
    else
    {
      sub_20E93DC84(v168 + 24 * v166, v184 - v189);
      v170.i64[0] = 0x800000008;
      v170.i64[1] = 0x800000008;
      v169.i64[0] = 0x400000004;
      v169.i64[1] = 0x400000004;
      v188 = *(_DWORD **)(v168 + 24 * v166);
    }
    v190 = *(unsigned int **)a1;
    v191 = *(unsigned int **)(a1 + 8);
    while (v190 != v191)
    {
      if (v166 == *v190)
        *v188++ = v190[2];
      v190 += 3;
    }
    ++v166;
  }
  while (v166 != 10);
}

void sub_20F8C6ED8(uint64_t a1, char **a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  size_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  size_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  size_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  size_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  size_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  size_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  uint64_t v244;
  _QWORD *v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  size_t v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t *v270;
  unsigned int v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  size_t v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  size_t v286;
  unsigned int v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  size_t v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  size_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  size_t v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  size_t v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  size_t v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t i;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;

  sub_20F8D63EC(*(_QWORD **)(a1 + 8), a2);
  if (a4 == 1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v10 = *(_OWORD *)(v9 + 40);
    v11 = *(_QWORD *)(v9 + 56);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_QWORD *)(v8 + 56) = v11;
    *(_OWORD *)(v8 + 40) = v10;
    LODWORD(v11) = *(_DWORD *)(v8 + 28);
    LODWORD(v9) = 6 * *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 64) = 0;
    *(_DWORD *)(v8 + 68) = v9;
    LODWORD(v9) = 9 * v11 + v9;
    v12 = *(_DWORD *)(v8 + 36);
    v13 = v9 + 6 * *(_DWORD *)(v8 + 32);
    *(_DWORD *)(v8 + 72) = v9;
    *(_DWORD *)(v8 + 76) = v13;
    LODWORD(v9) = v13 + 6 * v12;
    v14 = *(_DWORD *)(v8 + 44);
    LODWORD(v11) = 3 * *(_DWORD *)(v8 + 40) + v9;
    *(_DWORD *)(v8 + 80) = v9;
    *(_DWORD *)(v8 + 84) = v11;
    LODWORD(v9) = v14 + v11;
    LODWORD(v11) = *(_DWORD *)(v8 + 48);
    v15 = *(_DWORD *)(v8 + 52);
    *(_DWORD *)(v8 + 88) = v9;
    *(_DWORD *)(v8 + 92) = v9 + 4 * v11;
    LODWORD(v9) = v9 + 4 * (v15 + v11);
    v16 = *(_DWORD *)(v8 + 60);
    LODWORD(v11) = 3 * *(_DWORD *)(v8 + 56) + v9;
    *(_DWORD *)(v8 + 96) = v9;
    *(_DWORD *)(v8 + 100) = v11;
    sub_20F20CEEC((_DWORD *)v8, 3 * v16 + v11, 1u);
  }
  sub_20F8C5EE0(a1 + 920, (unsigned int **)a2, a3);
  v434 = *(_QWORD **)a1;
  v17 = *(_QWORD **)a1;
  v435 = a1 + 264;
  v439 = 0;
  v18 = *(void **)(a1 + 872);
  *(_QWORD *)(a1 + 880) = v18;
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a1 + 896);
  v19 = ((v17[122] - v17[121]) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 888) - (_QWORD)v18) >> 3) < v19)
  {
    v20 = 136 * v19;
    v21 = (char *)operator new(136 * v19);
    *(_QWORD *)(a1 + 872) = v21;
    *(_QWORD *)(a1 + 880) = v21;
    *(_QWORD *)(a1 + 888) = &v21[v20];
    if (v18)
      operator delete(v18);
  }
  v438 = 0;
  v22 = v434[121];
  v23 = v434[122];
  if (v22 == v23)
    goto LABEL_69;
  v24 = 0uLL;
  do
  {
    v28 = *(_QWORD *)(v22 + 8);
    if (*(_DWORD *)v28 != -1)
    {
      v29 = *(_QWORD **)(a1 + 880);
      v30 = *(_QWORD *)(a1 + 888);
      if ((unint64_t)v29 < v30)
      {
        *v29 = v28;
        v29[3] = -1;
        v29[16] = v435;
        *((_OWORD *)v29 + 2) = v24;
        *((_OWORD *)v29 + 3) = v24;
        *((_OWORD *)v29 + 4) = v24;
        *((_OWORD *)v29 + 5) = v24;
        v25 = (char *)(v29 + 17);
        *((_OWORD *)v29 + 6) = v24;
        *((_OWORD *)v29 + 7) = v24;
      }
      else
      {
        v31 = *(_QWORD **)(a1 + 872);
        v32 = 0xF0F0F0F0F0F0F0F1 * (v29 - v31) + 1;
        if (v32 > 0x1E1E1E1E1E1E1E1)
          sub_20E867F44();
        v33 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v30 - (_QWORD)v31) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0xF0F0F0F0F0F0F0)
          v34 = 0x1E1E1E1E1E1E1E1;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 > 0x1E1E1E1E1E1E1E1)
            sub_20E877A38();
          v35 = (char *)operator new(136 * v34);
          v24 = 0uLL;
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[8 * (v29 - v31)];
        *(_QWORD *)v36 = v28;
        *((_QWORD *)v36 + 3) = -1;
        *((_QWORD *)v36 + 16) = v435;
        *((_OWORD *)v36 + 2) = v24;
        *((_OWORD *)v36 + 3) = v24;
        *((_OWORD *)v36 + 4) = v24;
        *((_OWORD *)v36 + 5) = v24;
        *((_OWORD *)v36 + 6) = v24;
        *((_OWORD *)v36 + 7) = v24;
        if (v29 == v31)
        {
          *(_QWORD *)(a1 + 872) = v36;
          v25 = v36 + 136;
          *(_QWORD *)(a1 + 880) = v36 + 136;
          *(_QWORD *)(a1 + 888) = &v35[136 * v34];
          if (!v29)
            goto LABEL_9;
        }
        else
        {
          v37 = 0;
          do
          {
            v38 = &v36[v37 * 8];
            *((_QWORD *)v38 - 17) = v29[v37 - 17];
            *((_QWORD *)v38 - 16) = v29[v37 - 16];
            *((_QWORD *)v38 - 15) = v29[v37 - 15];
            v39 = *(_OWORD *)&v29[v37 - 14];
            v40 = *(_OWORD *)&v29[v37 - 10];
            *((_OWORD *)v38 - 6) = *(_OWORD *)&v29[v37 - 12];
            *((_OWORD *)v38 - 5) = v40;
            *((_OWORD *)v38 - 7) = v39;
            v41 = *(_OWORD *)&v29[v37 - 8];
            v42 = *(_OWORD *)&v29[v37 - 6];
            v43 = *(_OWORD *)&v29[v37 - 2];
            *((_OWORD *)v38 - 2) = *(_OWORD *)&v29[v37 - 4];
            *((_OWORD *)v38 - 1) = v43;
            *((_OWORD *)v38 - 4) = v41;
            *((_OWORD *)v38 - 3) = v42;
            v37 -= 17;
          }
          while (&v29[v37] != v31);
          v29 = *(_QWORD **)(a1 + 872);
          *(_QWORD *)(a1 + 872) = &v36[v37 * 8];
          v25 = v36 + 136;
          *(_QWORD *)(a1 + 880) = v36 + 136;
          *(_QWORD *)(a1 + 888) = &v35[136 * v34];
          if (!v29)
            goto LABEL_9;
        }
        operator delete(v29);
        v24 = 0uLL;
      }
LABEL_9:
      *(_QWORD *)(a1 + 880) = v25;
      *((_QWORD *)v25 - 14) = v439;
      *(_OWORD *)(v25 - 104) = v24;
      *(_OWORD *)(v25 - 88) = v24;
      *(_OWORD *)(v25 - 72) = v24;
      *(_OWORD *)(v25 - 56) = v24;
      *(_OWORD *)(v25 - 40) = v24;
      *(_OWORD *)(v25 - 24) = v24;
      v26 = (11 * *(_DWORD *)(v28 + 8));
      v27 = &v439;
LABEL_10:
      *v27 += v26;
      goto LABEL_11;
    }
    if ((*(_BYTE *)(v28 + 4) & 2) == 0)
    {
      v27 = &v438;
      v26 = 1;
      goto LABEL_10;
    }
LABEL_11:
    v22 += 16;
  }
  while (v22 != v23);
  v44 = v438;
  if (v438)
  {
    v45 = *(_BYTE **)(a1 + 896);
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 912) - (_QWORD)v45) >> 3) < v438)
    {
      if (v438 > 0x1E1E1E1E1E1E1E1)
        sub_20E867F44();
      v46 = *(_BYTE **)(a1 + 904);
      v47 = (char *)operator new(136 * v438);
      v48 = &v47[v46 - v45];
      v49 = v48;
      if (v46 != v45)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          *((_QWORD *)v51 - 17) = *(_QWORD *)&v46[v50 - 136];
          *((_QWORD *)v51 - 16) = *(_QWORD *)&v46[v50 - 128];
          *((_QWORD *)v51 - 15) = *(_QWORD *)&v46[v50 - 120];
          v52 = *(_OWORD *)&v46[v50 - 112];
          v53 = *(_OWORD *)&v46[v50 - 80];
          *((_OWORD *)v51 - 6) = *(_OWORD *)&v46[v50 - 96];
          *((_OWORD *)v51 - 5) = v53;
          *((_OWORD *)v51 - 7) = v52;
          v54 = *(_OWORD *)&v46[v50 - 64];
          v55 = *(_OWORD *)&v46[v50 - 48];
          v56 = *(_OWORD *)&v46[v50 - 16];
          *((_OWORD *)v51 - 2) = *(_OWORD *)&v46[v50 - 32];
          *((_OWORD *)v51 - 1) = v56;
          *((_OWORD *)v51 - 4) = v54;
          *((_OWORD *)v51 - 3) = v55;
          v50 -= 136;
        }
        while (&v46[v50] != v45);
        v49 = &v48[v50];
      }
      *(_QWORD *)(a1 + 896) = v49;
      *(_QWORD *)(a1 + 904) = v48;
      *(_QWORD *)(a1 + 912) = &v47[136 * v44];
      if (v45)
        operator delete(v45);
    }
    v57 = v434[121];
    v58 = v434[122];
    if (v57 != v58)
    {
      v59 = 0uLL;
      while (2)
      {
        v61 = *(_QWORD *)(v57 + 8);
        if (*(_DWORD *)v61 != -1 || (*(_BYTE *)(v61 + 4) & 2) != 0)
          goto LABEL_47;
        v62 = *(_QWORD **)(a1 + 904);
        v63 = *(_QWORD *)(a1 + 912);
        if ((unint64_t)v62 < v63)
        {
          *v62 = v61;
          v62[3] = -1;
          v62[16] = v435;
          *((_OWORD *)v62 + 2) = v59;
          *((_OWORD *)v62 + 3) = v59;
          *((_OWORD *)v62 + 4) = v59;
          *((_OWORD *)v62 + 5) = v59;
          v60 = (char *)(v62 + 17);
          *((_OWORD *)v62 + 6) = v59;
          *((_OWORD *)v62 + 7) = v59;
        }
        else
        {
          v64 = *(_QWORD **)(a1 + 896);
          v65 = 0xF0F0F0F0F0F0F0F1 * (v62 - v64) + 1;
          if (v65 > 0x1E1E1E1E1E1E1E1)
            sub_20E867F44();
          v66 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v63 - (_QWORD)v64) >> 3);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0xF0F0F0F0F0F0F0)
            v67 = 0x1E1E1E1E1E1E1E1;
          else
            v67 = v65;
          if (v67)
          {
            if (v67 > 0x1E1E1E1E1E1E1E1)
              sub_20E877A38();
            v68 = (char *)operator new(136 * v67);
            v59 = 0uLL;
          }
          else
          {
            v68 = 0;
          }
          v69 = &v68[8 * (v62 - v64)];
          *(_QWORD *)v69 = v61;
          *((_QWORD *)v69 + 3) = -1;
          *((_QWORD *)v69 + 16) = v435;
          *((_OWORD *)v69 + 2) = v59;
          *((_OWORD *)v69 + 3) = v59;
          *((_OWORD *)v69 + 4) = v59;
          *((_OWORD *)v69 + 5) = v59;
          *((_OWORD *)v69 + 6) = v59;
          *((_OWORD *)v69 + 7) = v59;
          if (v62 == v64)
          {
            *(_QWORD *)(a1 + 896) = v69;
            v60 = v69 + 136;
            *(_QWORD *)(a1 + 904) = v69 + 136;
            *(_QWORD *)(a1 + 912) = &v68[136 * v67];
            if (v62)
              goto LABEL_65;
          }
          else
          {
            v70 = 0;
            do
            {
              v71 = &v69[v70 * 8];
              *((_QWORD *)v71 - 17) = v62[v70 - 17];
              *((_QWORD *)v71 - 16) = v62[v70 - 16];
              *((_QWORD *)v71 - 15) = v62[v70 - 15];
              v72 = *(_OWORD *)&v62[v70 - 14];
              v73 = *(_OWORD *)&v62[v70 - 10];
              *((_OWORD *)v71 - 6) = *(_OWORD *)&v62[v70 - 12];
              *((_OWORD *)v71 - 5) = v73;
              *((_OWORD *)v71 - 7) = v72;
              v74 = *(_OWORD *)&v62[v70 - 8];
              v75 = *(_OWORD *)&v62[v70 - 6];
              v76 = *(_OWORD *)&v62[v70 - 2];
              *((_OWORD *)v71 - 2) = *(_OWORD *)&v62[v70 - 4];
              *((_OWORD *)v71 - 1) = v76;
              *((_OWORD *)v71 - 4) = v74;
              *((_OWORD *)v71 - 3) = v75;
              v70 -= 17;
            }
            while (&v62[v70] != v64);
            v62 = *(_QWORD **)(a1 + 896);
            *(_QWORD *)(a1 + 896) = &v69[v70 * 8];
            v60 = v69 + 136;
            *(_QWORD *)(a1 + 904) = v69 + 136;
            *(_QWORD *)(a1 + 912) = &v68[136 * v67];
            if (v62)
            {
LABEL_65:
              operator delete(v62);
              v59 = 0uLL;
            }
          }
        }
        *(_QWORD *)(a1 + 904) = v60;
        *((_QWORD *)v60 - 14) = v439;
        *(_OWORD *)(v60 - 104) = v59;
        *(_OWORD *)(v60 - 88) = v59;
        *(_OWORD *)(v60 - 72) = v59;
        *(_OWORD *)(v60 - 56) = v59;
        *(_OWORD *)(v60 - 40) = v59;
        *(_OWORD *)(v60 - 24) = v59;
        v439 += (11 * *(_DWORD *)(v61 + 8));
        *(_DWORD *)v61 = -1 - 252645135 * ((*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
LABEL_47:
        v57 += 16;
        if (v57 == v58)
          break;
        continue;
      }
    }
  }
LABEL_69:
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  v77 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 296) = v77;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a1 + 848);
  v78 = v439;
  if (v439)
  {
    sub_20EAC9ECC(v435, v439);
    v77 = *(_QWORD *)(a1 + 288);
    v79 = (*(_QWORD *)(a1 + 296) - v77) >> 3;
    v80 = v78 >= v79;
    if (v78 > v79)
    {
      sub_20EAC9ECC(a1 + 288, v78 - v79);
      goto LABEL_75;
    }
  }
  else
  {
    v80 = 1;
  }
  if (!v80)
    *(_QWORD *)(a1 + 296) = v77 + 8 * v78;
LABEL_75:
  v81 = *(_QWORD *)(a1 + 632);
  v82 = (*(_QWORD *)(a1 + 640) - v81) >> 4;
  if (v78 <= v82)
  {
    if (v78 < v82)
      *(_QWORD *)(a1 + 640) = v81 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 632), v78 - v82);
  }
  v83 = *(_QWORD *)(a1 + 656);
  v84 = (*(_QWORD *)(a1 + 664) - v83) >> 4;
  if (v78 <= v84)
  {
    if (v78 < v84)
      *(_QWORD *)(a1 + 664) = v83 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 656), v78 - v84);
  }
  v85 = *(_QWORD *)(a1 + 680);
  v86 = (*(_QWORD *)(a1 + 688) - v85) >> 4;
  if (v78 <= v86)
  {
    if (v78 < v86)
      *(_QWORD *)(a1 + 688) = v85 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 680), v78 - v86);
  }
  v87 = *(_QWORD *)(a1 + 704);
  v88 = (*(_QWORD *)(a1 + 712) - v87) >> 4;
  if (v78 <= v88)
  {
    if (v78 < v88)
      *(_QWORD *)(a1 + 712) = v87 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 704), v78 - v88);
  }
  v89 = *(_QWORD *)(a1 + 728);
  v90 = (*(_QWORD *)(a1 + 736) - v89) >> 4;
  if (v78 <= v90)
  {
    if (v78 < v90)
      *(_QWORD *)(a1 + 736) = v89 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 728), v78 - v90);
  }
  v91 = *(_QWORD *)(a1 + 752);
  v92 = (*(_QWORD *)(a1 + 760) - v91) >> 4;
  if (v78 <= v92)
  {
    if (v78 < v92)
      *(_QWORD *)(a1 + 760) = v91 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 752), v78 - v92);
  }
  v93 = *(_QWORD *)(a1 + 776);
  v94 = (*(_QWORD *)(a1 + 784) - v93) >> 4;
  if (v78 <= v94)
  {
    if (v78 < v94)
      *(_QWORD *)(a1 + 784) = v93 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 776), v78 - v94);
  }
  v95 = *(_QWORD *)(a1 + 800);
  v96 = (*(_QWORD *)(a1 + 808) - v95) >> 4;
  if (v78 <= v96)
  {
    if (v78 < v96)
      *(_QWORD *)(a1 + 808) = v95 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 800), v78 - v96);
  }
  v97 = *(_QWORD *)(a1 + 824);
  v98 = (*(_QWORD *)(a1 + 832) - v97) >> 4;
  if (v78 <= v98)
  {
    if (v78 < v98)
      *(_QWORD *)(a1 + 832) = v97 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 824), v78 - v98);
  }
  v99 = *(_QWORD *)(a1 + 848);
  v100 = (*(_QWORD *)(a1 + 856) - v99) >> 4;
  if (v78 <= v100)
  {
    if (v78 < v100)
      *(_QWORD *)(a1 + 856) = v99 + 16 * v78;
  }
  else
  {
    sub_20F5BB76C((uint64_t *)(a1 + 848), v78 - v100);
  }
  v101 = v434[181];
  v436 = v434[182];
  if (v101 != v436)
  {
    v102 = 0;
    while (2)
    {
      if (!sub_20F556208((_QWORD *)(v101 + 56)))
        goto LABEL_120;
      v104 = *(unsigned int **)(v101 + 136);
      v105 = *v104;
      if (*((_BYTE *)v104 + 20))
      {
        v106 = *(_QWORD *)(a1 + 872);
        v107 = v106 + 136 * v105;
        v109 = *(_QWORD *)(v107 + 24);
        v108 = (unint64_t *)(v107 + 24);
        v110 = (_QWORD *)v108[13];
        *(_QWORD *)(*v110 + 8 * (v108[1] + v109)) = v102;
        ++v108[1];
        v111 = **(_DWORD **)(v101 + 56);
        if (v111 != -1)
        {
          v112 = v106 + 136 * v105;
          v115 = *(_QWORD *)(v112 + 64);
          v114 = (_QWORD *)(v112 + 64);
          v113 = v115;
          v116 = v115 + *v108;
          v117 = v110[52];
          if (v116 <= *v108)
          {
LABEL_128:
            v122 = v117 + 16 * v116;
            goto LABEL_129;
          }
          v118 = 16 * *v108;
          v119 = v113 + 1;
          v120 = 16 * v113 + 16;
          while (1)
          {
            v121 = *(_DWORD *)(v117 + v118);
            if (v121 >= v111)
              break;
            v118 += 16;
            --v119;
            v120 -= 16;
            if (v119 == 1)
              goto LABEL_128;
          }
          if (v121 > v111)
          {
            if (v119)
            {
              v227 = v106;
              memmove((void *)(v117 + 16 * v116 - v120 + 32), (const void *)(v117 + v118), v120);
              v106 = v227;
              v117 = v110[52];
            }
            v122 = v117 + v118;
LABEL_129:
            *(_DWORD *)v122 = v111;
            *(_QWORD *)(v122 + 8) = -1;
            ++v110[38];
            ++*v114;
          }
        }
        v123 = **(_DWORD **)(v101 + 64);
        if (v123 != -1)
        {
          v124 = v106 + 136 * v105;
          v127 = *(_QWORD *)(v124 + 64);
          v126 = (_QWORD *)(v124 + 64);
          v125 = v127;
          v128 = v127 + *v108;
          v129 = v110[52];
          if (v128 <= *v108)
          {
LABEL_135:
            v134 = v129 + 16 * v128;
            goto LABEL_136;
          }
          v130 = 16 * *v108;
          v131 = v125 + 1;
          v132 = 16 * v125 + 16;
          while (1)
          {
            v133 = *(_DWORD *)(v129 + v130);
            if (v133 >= v123)
              break;
            v130 += 16;
            --v131;
            v132 -= 16;
            if (v131 == 1)
              goto LABEL_135;
          }
          if (v133 > v123)
          {
            if (v131)
            {
              v228 = v106;
              memmove((void *)(v129 + 16 * v128 - v132 + 32), (const void *)(v129 + v130), v132);
              v106 = v228;
              v129 = v110[52];
            }
            v134 = v129 + v130;
LABEL_136:
            *(_DWORD *)v134 = v123;
            *(_QWORD *)(v134 + 8) = -1;
            ++v110[38];
            ++*v126;
          }
        }
        v135 = (uint64_t *)(v108 + 3);
        v136 = **(_DWORD **)(v101 + 72);
        if (v136 != -1)
        {
          v137 = *v135;
          v138 = *v135 + *v108;
          v139 = v110[46];
          if (v138 <= *v108)
          {
LABEL_142:
            v144 = v139 + 16 * v138;
            goto LABEL_143;
          }
          v140 = 16 * *v108;
          v141 = v137 + 1;
          v142 = 16 * v137 + 16;
          while (1)
          {
            v143 = *(_DWORD *)(v139 + v140);
            if (v143 >= v136)
              break;
            v140 += 16;
            --v141;
            v142 -= 16;
            if (v141 == 1)
              goto LABEL_142;
          }
          if (v143 > v136)
          {
            if (v141)
            {
              v229 = v106;
              memmove((void *)(v139 + 16 * v138 - v142 + 32), (const void *)(v139 + v140), v142);
              v106 = v229;
              v139 = v110[46];
            }
            v144 = v139 + v140;
LABEL_143:
            *(_DWORD *)v144 = v136;
            *(_QWORD *)(v144 + 8) = -1;
            ++v110[36];
            ++*v135;
          }
        }
        v145 = **(_DWORD **)(v101 + 80);
        if (v145 != -1)
        {
          v146 = *v135;
          v147 = *v135 + *v108;
          v148 = v110[46];
          if (v147 <= *v108)
          {
LABEL_149:
            v153 = v148 + 16 * v147;
            goto LABEL_150;
          }
          v149 = 16 * *v108;
          v150 = v146 + 1;
          v151 = 16 * v146 + 16;
          while (1)
          {
            v152 = *(_DWORD *)(v148 + v149);
            if (v152 >= v145)
              break;
            v149 += 16;
            --v150;
            v151 -= 16;
            if (v150 == 1)
              goto LABEL_149;
          }
          if (v152 > v145)
          {
            if (v150)
            {
              v230 = v106;
              memmove((void *)(v148 + 16 * v147 - v151 + 32), (const void *)(v148 + v149), v151);
              v106 = v230;
              v148 = v110[46];
            }
            v153 = v148 + v149;
LABEL_150:
            *(_DWORD *)v153 = v145;
            *(_QWORD *)(v153 + 8) = -1;
            ++v110[36];
            ++*v135;
          }
        }
        v154 = **(_DWORD **)(v101 + 88);
        if (v154 != -1)
        {
          v155 = v106 + 136 * v105;
          v158 = *(_QWORD *)(v155 + 96);
          v157 = (_QWORD *)(v155 + 96);
          v156 = v158;
          v159 = v158 + *v108;
          v160 = v110[64];
          if (v159 <= *v108)
          {
LABEL_156:
            v165 = v160 + 16 * v159;
            goto LABEL_157;
          }
          v161 = 16 * *v108;
          v162 = v156 + 1;
          v163 = 16 * v156 + 16;
          while (1)
          {
            v164 = *(_DWORD *)(v160 + v161);
            if (v164 >= v154)
              break;
            v161 += 16;
            --v162;
            v163 -= 16;
            if (v162 == 1)
              goto LABEL_156;
          }
          if (v164 > v154)
          {
            if (v162)
            {
              v231 = v106;
              memmove((void *)(v160 + 16 * v159 - v163 + 32), (const void *)(v160 + v161), v163);
              v106 = v231;
              v160 = v110[64];
            }
            v165 = v160 + v161;
LABEL_157:
            *(_DWORD *)v165 = v154;
            *(_QWORD *)(v165 + 8) = -1;
            ++v110[42];
            ++*v157;
          }
        }
        v166 = **(_DWORD **)(v101 + 96);
        if (v166 != -1)
        {
          v167 = v106 + 136 * v105;
          v170 = *(_QWORD *)(v167 + 96);
          v169 = (_QWORD *)(v167 + 96);
          v168 = v170;
          v171 = v170 + *v108;
          v172 = v110[64];
          if (v171 <= *v108)
          {
LABEL_163:
            v177 = v172 + 16 * v171;
            goto LABEL_164;
          }
          v173 = 16 * *v108;
          v174 = v168 + 1;
          v175 = 16 * v168 + 16;
          while (1)
          {
            v176 = *(_DWORD *)(v172 + v173);
            if (v176 >= v166)
              break;
            v173 += 16;
            --v174;
            v175 -= 16;
            if (v174 == 1)
              goto LABEL_163;
          }
          if (v176 > v166)
          {
            if (v174)
            {
              v232 = v106;
              memmove((void *)(v172 + 16 * v171 - v175 + 32), (const void *)(v172 + v173), v175);
              v106 = v232;
              v172 = v110[64];
            }
            v177 = v172 + v173;
LABEL_164:
            *(_DWORD *)v177 = v166;
            *(_QWORD *)(v177 + 8) = -1;
            ++v110[42];
            ++*v169;
          }
        }
        v178 = **(_DWORD **)(v101 + 104);
        if (v178 != -1)
        {
          v179 = v106 + 136 * v105;
          v182 = *(_QWORD *)(v179 + 104);
          v181 = (_QWORD *)(v179 + 104);
          v180 = v182;
          v183 = v182 + *v108;
          v184 = v110[67];
          if (v183 <= *v108)
          {
LABEL_170:
            v189 = v184 + 16 * v183;
            goto LABEL_171;
          }
          v185 = 16 * *v108;
          v186 = v180 + 1;
          v187 = 16 * v180 + 16;
          while (1)
          {
            v188 = *(_DWORD *)(v184 + v185);
            if (v188 >= v178)
              break;
            v185 += 16;
            --v186;
            v187 -= 16;
            if (v186 == 1)
              goto LABEL_170;
          }
          if (v188 > v178)
          {
            if (v186)
            {
              v233 = v106;
              memmove((void *)(v184 + 16 * v183 - v187 + 32), (const void *)(v184 + v185), v187);
              v106 = v233;
              v184 = v110[67];
            }
            v189 = v184 + v185;
LABEL_171:
            *(_DWORD *)v189 = v178;
            *(_QWORD *)(v189 + 8) = -1;
            ++v110[43];
            ++*v181;
          }
        }
        v190 = **(_DWORD **)(v101 + 112);
        if (v190 != -1)
        {
          v191 = v106 + 136 * v105;
          v194 = *(_QWORD *)(v191 + 104);
          v193 = (_QWORD *)(v191 + 104);
          v192 = v194;
          v195 = v194 + *v108;
          v196 = v110[67];
          if (v195 <= *v108)
          {
LABEL_177:
            v201 = v196 + 16 * v195;
            goto LABEL_178;
          }
          v197 = 16 * *v108;
          v198 = v192 + 1;
          v199 = 16 * v192 + 16;
          while (1)
          {
            v200 = *(_DWORD *)(v196 + v197);
            if (v200 >= v190)
              break;
            v197 += 16;
            --v198;
            v199 -= 16;
            if (v198 == 1)
              goto LABEL_177;
          }
          if (v200 > v190)
          {
            if (v198)
            {
              v234 = v106;
              memmove((void *)(v196 + 16 * v195 - v199 + 32), (const void *)(v196 + v197), v199);
              v106 = v234;
              v196 = v110[67];
            }
            v201 = v196 + v197;
LABEL_178:
            *(_DWORD *)v201 = v190;
            *(_QWORD *)(v201 + 8) = -1;
            ++v110[43];
            ++*v193;
          }
        }
        v202 = **(_DWORD **)(v101 + 120);
        if (v202 != -1)
        {
          v203 = v106 + 136 * v105;
          v206 = *(_QWORD *)(v203 + 112);
          v205 = (_QWORD *)(v203 + 112);
          v204 = v206;
          v207 = v206 + *v108;
          v208 = v110[70];
          if (v207 <= *v108)
          {
LABEL_184:
            v213 = v208 + 16 * v207;
            goto LABEL_185;
          }
          v209 = 16 * *v108;
          v210 = v204 + 1;
          v211 = 16 * v204 + 16;
          while (1)
          {
            v212 = *(_DWORD *)(v208 + v209);
            if (v212 >= v202)
              break;
            v209 += 16;
            --v210;
            v211 -= 16;
            if (v210 == 1)
              goto LABEL_184;
          }
          if (v212 > v202)
          {
            if (v210)
            {
              v235 = v106;
              memmove((void *)(v208 + 16 * v207 - v211 + 32), (const void *)(v208 + v209), v211);
              v106 = v235;
              v208 = v110[70];
            }
            v213 = v208 + v209;
LABEL_185:
            *(_DWORD *)v213 = v202;
            *(_QWORD *)(v213 + 8) = -1;
            ++v110[44];
            ++*v205;
          }
        }
        v214 = **(_DWORD **)(v101 + 128);
        if (v214 == -1)
          goto LABEL_120;
        v215 = v106 + 136 * v105;
        v218 = *(_QWORD *)(v215 + 112);
        v217 = v215 + 112;
        v216 = v218;
        v219 = v218 + *v108;
        v220 = v110[70];
        if (v219 <= *v108)
        {
LABEL_117:
          v103 = v220 + 16 * v219;
        }
        else
        {
          v221 = 16 * *v108;
          v222 = v216 + 1;
          v223 = 16 * v216 + 16;
          while (1)
          {
            v224 = *(_DWORD *)(v220 + v221);
            if (v224 >= v214)
              break;
            v221 += 16;
            --v222;
            v223 -= 16;
            if (v222 == 1)
              goto LABEL_117;
          }
          if (v224 <= v214)
            goto LABEL_120;
          if (v222)
          {
            memmove((void *)(v220 + 16 * v219 - v223 + 32), (const void *)(v220 + v221), v223);
            v220 = v110[70];
          }
          v103 = v220 + v221;
        }
        *(_DWORD *)v103 = v214;
        *(_QWORD *)(v103 + 8) = -1;
        ++v110[44];
      }
      else
      {
        if ((v104[1] & 2) != 0)
          goto LABEL_120;
        v225 = *(_QWORD *)(a1 + 896) + 136 * v105;
        v226 = *(_QWORD *)(v225 + 32);
        v217 = v225 + 32;
        *(_QWORD *)(**(_QWORD **)(v217 + 96) + 8 * (v226 + *(_QWORD *)(v217 - 8))) = v102;
      }
      ++*(_QWORD *)v217;
LABEL_120:
      v101 += 216;
      ++v102;
      if (v101 == v436)
        break;
      continue;
    }
  }
  v236 = v434[187];
  v437 = v434[188];
  if (v236 != v437)
  {
    v237 = 0;
    while (2)
    {
      if (!sub_20F556208((_QWORD *)(v236 + 64)))
        goto LABEL_239;
      v239 = *(unsigned int **)(v236 + 144);
      v240 = *v239;
      if (*((_BYTE *)v239 + 20))
      {
        v241 = *(_QWORD *)(a1 + 872);
        v242 = v241 + 136 * v240;
        v244 = *(_QWORD *)(v242 + 24);
        v243 = (unint64_t *)(v242 + 24);
        v245 = (_QWORD *)v243[13];
        *(_QWORD *)(v245[3] + 8 * (v243[2] + v244)) = v237;
        ++v243[2];
        v246 = **(_DWORD **)(v236 + 64);
        if (v246 != -1)
        {
          v247 = v241 + 136 * v240;
          v250 = *(_QWORD *)(v247 + 64);
          v249 = (_QWORD *)(v247 + 64);
          v248 = v250;
          v251 = v250 + *v243;
          v252 = v245[52];
          if (v251 <= *v243)
          {
LABEL_247:
            v257 = v252 + 16 * v251;
            goto LABEL_248;
          }
          v253 = 16 * *v243;
          v254 = v248 + 1;
          v255 = 16 * v248 + 16;
          while (1)
          {
            v256 = *(_DWORD *)(v252 + v253);
            if (v256 >= v246)
              break;
            v253 += 16;
            --v254;
            v255 -= 16;
            if (v254 == 1)
              goto LABEL_247;
          }
          if (v256 > v246)
          {
            if (v254)
            {
              v362 = v241;
              memmove((void *)(v252 + 16 * v251 - v255 + 32), (const void *)(v252 + v253), v255);
              v241 = v362;
              v252 = v245[52];
            }
            v257 = v252 + v253;
LABEL_248:
            *(_DWORD *)v257 = v246;
            *(_QWORD *)(v257 + 8) = -1;
            ++v245[38];
            ++*v249;
          }
        }
        v258 = **(_DWORD **)(v236 + 72);
        if (v258 != -1)
        {
          v259 = v241 + 136 * v240;
          v262 = *(_QWORD *)(v259 + 64);
          v261 = (_QWORD *)(v259 + 64);
          v260 = v262;
          v263 = v262 + *v243;
          v264 = v245[52];
          if (v263 <= *v243)
          {
LABEL_254:
            v269 = v264 + 16 * v263;
            goto LABEL_255;
          }
          v265 = 16 * *v243;
          v266 = v260 + 1;
          v267 = 16 * v260 + 16;
          while (1)
          {
            v268 = *(_DWORD *)(v264 + v265);
            if (v268 >= v258)
              break;
            v265 += 16;
            --v266;
            v267 -= 16;
            if (v266 == 1)
              goto LABEL_254;
          }
          if (v268 > v258)
          {
            if (v266)
            {
              v363 = v241;
              memmove((void *)(v264 + 16 * v263 - v267 + 32), (const void *)(v264 + v265), v267);
              v241 = v363;
              v264 = v245[52];
            }
            v269 = v264 + v265;
LABEL_255:
            *(_DWORD *)v269 = v258;
            *(_QWORD *)(v269 + 8) = -1;
            ++v245[38];
            ++*v261;
          }
        }
        v270 = (uint64_t *)(v243 + 3);
        v271 = **(_DWORD **)(v236 + 80);
        if (v271 != -1)
        {
          v272 = *v270;
          v273 = *v270 + *v243;
          v274 = v245[46];
          if (v273 <= *v243)
          {
LABEL_261:
            v279 = v274 + 16 * v273;
            goto LABEL_262;
          }
          v275 = 16 * *v243;
          v276 = v272 + 1;
          v277 = 16 * v272 + 16;
          while (1)
          {
            v278 = *(_DWORD *)(v274 + v275);
            if (v278 >= v271)
              break;
            v275 += 16;
            --v276;
            v277 -= 16;
            if (v276 == 1)
              goto LABEL_261;
          }
          if (v278 > v271)
          {
            if (v276)
            {
              v364 = v241;
              memmove((void *)(v274 + 16 * v273 - v277 + 32), (const void *)(v274 + v275), v277);
              v241 = v364;
              v274 = v245[46];
            }
            v279 = v274 + v275;
LABEL_262:
            *(_DWORD *)v279 = v271;
            *(_QWORD *)(v279 + 8) = -1;
            ++v245[36];
            ++*v270;
          }
        }
        v280 = **(_DWORD **)(v236 + 88);
        if (v280 != -1)
        {
          v281 = *v270;
          v282 = *v270 + *v243;
          v283 = v245[46];
          if (v282 <= *v243)
          {
LABEL_268:
            v288 = v283 + 16 * v282;
            goto LABEL_269;
          }
          v284 = 16 * *v243;
          v285 = v281 + 1;
          v286 = 16 * v281 + 16;
          while (1)
          {
            v287 = *(_DWORD *)(v283 + v284);
            if (v287 >= v280)
              break;
            v284 += 16;
            --v285;
            v286 -= 16;
            if (v285 == 1)
              goto LABEL_268;
          }
          if (v287 > v280)
          {
            if (v285)
            {
              v365 = v241;
              memmove((void *)(v283 + 16 * v282 - v286 + 32), (const void *)(v283 + v284), v286);
              v241 = v365;
              v283 = v245[46];
            }
            v288 = v283 + v284;
LABEL_269:
            *(_DWORD *)v288 = v280;
            *(_QWORD *)(v288 + 8) = -1;
            ++v245[36];
            ++*v270;
          }
        }
        v289 = **(_DWORD **)(v236 + 96);
        if (v289 != -1)
        {
          v290 = v241 + 136 * v240;
          v293 = *(_QWORD *)(v290 + 96);
          v292 = (_QWORD *)(v290 + 96);
          v291 = v293;
          v294 = v293 + *v243;
          v295 = v245[64];
          if (v294 <= *v243)
          {
LABEL_275:
            v300 = v295 + 16 * v294;
            goto LABEL_276;
          }
          v296 = 16 * *v243;
          v297 = v291 + 1;
          v298 = 16 * v291 + 16;
          while (1)
          {
            v299 = *(_DWORD *)(v295 + v296);
            if (v299 >= v289)
              break;
            v296 += 16;
            --v297;
            v298 -= 16;
            if (v297 == 1)
              goto LABEL_275;
          }
          if (v299 > v289)
          {
            if (v297)
            {
              v366 = v241;
              memmove((void *)(v295 + 16 * v294 - v298 + 32), (const void *)(v295 + v296), v298);
              v241 = v366;
              v295 = v245[64];
            }
            v300 = v295 + v296;
LABEL_276:
            *(_DWORD *)v300 = v289;
            *(_QWORD *)(v300 + 8) = -1;
            ++v245[42];
            ++*v292;
          }
        }
        v301 = **(_DWORD **)(v236 + 104);
        if (v301 != -1)
        {
          v302 = v241 + 136 * v240;
          v305 = *(_QWORD *)(v302 + 96);
          v304 = (_QWORD *)(v302 + 96);
          v303 = v305;
          v306 = v305 + *v243;
          v307 = v245[64];
          if (v306 <= *v243)
          {
LABEL_282:
            v312 = v307 + 16 * v306;
            goto LABEL_283;
          }
          v308 = 16 * *v243;
          v309 = v303 + 1;
          v310 = 16 * v303 + 16;
          while (1)
          {
            v311 = *(_DWORD *)(v307 + v308);
            if (v311 >= v301)
              break;
            v308 += 16;
            --v309;
            v310 -= 16;
            if (v309 == 1)
              goto LABEL_282;
          }
          if (v311 > v301)
          {
            if (v309)
            {
              v367 = v241;
              memmove((void *)(v307 + 16 * v306 - v310 + 32), (const void *)(v307 + v308), v310);
              v241 = v367;
              v307 = v245[64];
            }
            v312 = v307 + v308;
LABEL_283:
            *(_DWORD *)v312 = v301;
            *(_QWORD *)(v312 + 8) = -1;
            ++v245[42];
            ++*v304;
          }
        }
        v313 = **(_DWORD **)(v236 + 112);
        if (v313 != -1)
        {
          v314 = v241 + 136 * v240;
          v317 = *(_QWORD *)(v314 + 104);
          v316 = (_QWORD *)(v314 + 104);
          v315 = v317;
          v318 = v317 + *v243;
          v319 = v245[67];
          if (v318 <= *v243)
          {
LABEL_289:
            v324 = v319 + 16 * v318;
            goto LABEL_290;
          }
          v320 = 16 * *v243;
          v321 = v315 + 1;
          v322 = 16 * v315 + 16;
          while (1)
          {
            v323 = *(_DWORD *)(v319 + v320);
            if (v323 >= v313)
              break;
            v320 += 16;
            --v321;
            v322 -= 16;
            if (v321 == 1)
              goto LABEL_289;
          }
          if (v323 > v313)
          {
            if (v321)
            {
              v368 = v241;
              memmove((void *)(v319 + 16 * v318 - v322 + 32), (const void *)(v319 + v320), v322);
              v241 = v368;
              v319 = v245[67];
            }
            v324 = v319 + v320;
LABEL_290:
            *(_DWORD *)v324 = v313;
            *(_QWORD *)(v324 + 8) = -1;
            ++v245[43];
            ++*v316;
          }
        }
        v325 = **(_DWORD **)(v236 + 120);
        if (v325 != -1)
        {
          v326 = v241 + 136 * v240;
          v329 = *(_QWORD *)(v326 + 104);
          v328 = (_QWORD *)(v326 + 104);
          v327 = v329;
          v330 = v329 + *v243;
          v331 = v245[67];
          if (v330 <= *v243)
          {
LABEL_296:
            v336 = v331 + 16 * v330;
            goto LABEL_297;
          }
          v332 = 16 * *v243;
          v333 = v327 + 1;
          v334 = 16 * v327 + 16;
          while (1)
          {
            v335 = *(_DWORD *)(v331 + v332);
            if (v335 >= v325)
              break;
            v332 += 16;
            --v333;
            v334 -= 16;
            if (v333 == 1)
              goto LABEL_296;
          }
          if (v335 > v325)
          {
            if (v333)
            {
              v369 = v241;
              memmove((void *)(v331 + 16 * v330 - v334 + 32), (const void *)(v331 + v332), v334);
              v241 = v369;
              v331 = v245[67];
            }
            v336 = v331 + v332;
LABEL_297:
            *(_DWORD *)v336 = v325;
            *(_QWORD *)(v336 + 8) = -1;
            ++v245[43];
            ++*v328;
          }
        }
        v337 = **(_DWORD **)(v236 + 128);
        if (v337 != -1)
        {
          v338 = v241 + 136 * v240;
          v341 = *(_QWORD *)(v338 + 112);
          v340 = (_QWORD *)(v338 + 112);
          v339 = v341;
          v342 = v341 + *v243;
          v343 = v245[70];
          if (v342 <= *v243)
          {
LABEL_303:
            v348 = v343 + 16 * v342;
            goto LABEL_304;
          }
          v344 = 16 * *v243;
          v345 = v339 + 1;
          v346 = 16 * v339 + 16;
          while (1)
          {
            v347 = *(_DWORD *)(v343 + v344);
            if (v347 >= v337)
              break;
            v344 += 16;
            --v345;
            v346 -= 16;
            if (v345 == 1)
              goto LABEL_303;
          }
          if (v347 > v337)
          {
            if (v345)
            {
              v370 = v241;
              memmove((void *)(v343 + 16 * v342 - v346 + 32), (const void *)(v343 + v344), v346);
              v241 = v370;
              v343 = v245[70];
            }
            v348 = v343 + v344;
LABEL_304:
            *(_DWORD *)v348 = v337;
            *(_QWORD *)(v348 + 8) = -1;
            ++v245[44];
            ++*v340;
          }
        }
        v349 = **(_DWORD **)(v236 + 136);
        if (v349 == -1)
          goto LABEL_239;
        v350 = v241 + 136 * v240;
        v353 = *(_QWORD *)(v350 + 112);
        v352 = (_QWORD *)(v350 + 112);
        v351 = v353;
        v354 = v353 + *v243;
        v355 = v245[70];
        if (v354 <= *v243)
        {
LABEL_236:
          v238 = v355 + 16 * v354;
        }
        else
        {
          v356 = 16 * *v243;
          v357 = v351 + 1;
          v358 = 16 * v351 + 16;
          while (1)
          {
            v359 = *(_DWORD *)(v355 + v356);
            if (v359 >= v349)
              break;
            v356 += 16;
            --v357;
            v358 -= 16;
            if (v357 == 1)
              goto LABEL_236;
          }
          if (v359 <= v349)
            goto LABEL_239;
          if (v357)
          {
            memmove((void *)(v355 + 16 * v354 - v358 + 32), (const void *)(v355 + v356), v358);
            v355 = v245[70];
          }
          v238 = v355 + v356;
        }
        *(_DWORD *)v238 = v349;
        *(_QWORD *)(v238 + 8) = -1;
        ++v245[44];
      }
      else
      {
        if ((v239[1] & 2) != 0)
          goto LABEL_239;
        v360 = *(_QWORD *)(a1 + 896) + 136 * v240;
        v361 = *(_QWORD *)(v360 + 40);
        v352 = (_QWORD *)(v360 + 40);
        *(_QWORD *)(*(_QWORD *)(v352[11] + 24) + 8 * (v361 + *(v352 - 2))) = v237;
      }
      ++*v352;
LABEL_239:
      v236 += 208;
      ++v237;
      if (v236 == v437)
        break;
      continue;
    }
  }
  v371 = 6 * *(_QWORD *)(a1 + 552);
  v372 = *(_QWORD *)(a1 + 312);
  v373 = (*(_QWORD *)(a1 + 320) - v372) >> 3;
  if (v371 <= v373)
  {
    if (v371 < v373)
      *(_QWORD *)(a1 + 320) = v372 + 48 * *(_QWORD *)(a1 + 552);
  }
  else
  {
    sub_20E93D8FC(a1 + 312, v371 - v373);
  }
  v374 = *(_QWORD *)(a1 + 632);
  v375 = *(_QWORD *)(a1 + 640);
  if (v374 != v375)
  {
    v376 = 0;
    do
    {
      if (*(_DWORD *)v374 != -1)
      {
        *(_QWORD *)(v374 + 8) = v376;
        v376 += 6;
      }
      v374 += 16;
    }
    while (v374 != v375);
  }
  v377 = 9 * *(_QWORD *)(a1 + 560);
  v378 = *(_QWORD *)(a1 + 336);
  v379 = (*(_QWORD *)(a1 + 344) - v378) >> 3;
  if (v377 <= v379)
  {
    if (v377 < v379)
      *(_QWORD *)(a1 + 344) = v378 + 72 * *(_QWORD *)(a1 + 560);
  }
  else
  {
    sub_20E93D8FC(a1 + 336, v377 - v379);
  }
  v380 = *(_QWORD *)(a1 + 656);
  v381 = *(_QWORD *)(a1 + 664);
  if (v380 != v381)
  {
    v382 = 0;
    do
    {
      if (*(_DWORD *)v380 != -1)
      {
        *(_QWORD *)(v380 + 8) = v382;
        v382 += 9;
      }
      v380 += 16;
    }
    while (v380 != v381);
  }
  v383 = 6 * *(_QWORD *)(a1 + 568);
  v384 = *(_QWORD *)(a1 + 360);
  v385 = (*(_QWORD *)(a1 + 368) - v384) >> 3;
  if (v383 <= v385)
  {
    if (v383 < v385)
      *(_QWORD *)(a1 + 368) = v384 + 48 * *(_QWORD *)(a1 + 568);
  }
  else
  {
    sub_20E93D8FC(a1 + 360, v383 - v385);
  }
  v386 = *(_QWORD *)(a1 + 680);
  v387 = *(_QWORD *)(a1 + 688);
  if (v386 != v387)
  {
    v388 = 0;
    do
    {
      if (*(_DWORD *)v386 != -1)
      {
        *(_QWORD *)(v386 + 8) = v388;
        v388 += 6;
      }
      v386 += 16;
    }
    while (v386 != v387);
  }
  v389 = 6 * *(_QWORD *)(a1 + 576);
  v390 = *(_QWORD *)(a1 + 384);
  v391 = (*(_QWORD *)(a1 + 392) - v390) >> 3;
  if (v389 <= v391)
  {
    if (v389 < v391)
      *(_QWORD *)(a1 + 392) = v390 + 48 * *(_QWORD *)(a1 + 576);
  }
  else
  {
    sub_20E93D8FC(a1 + 384, v389 - v391);
  }
  v392 = *(_QWORD *)(a1 + 704);
  v393 = *(_QWORD *)(a1 + 712);
  if (v392 != v393)
  {
    v394 = 0;
    do
    {
      if (*(_DWORD *)v392 != -1)
      {
        *(_QWORD *)(v392 + 8) = v394;
        v394 += 6;
      }
      v392 += 16;
    }
    while (v392 != v393);
  }
  v395 = 3 * *(_QWORD *)(a1 + 584);
  v396 = *(_QWORD *)(a1 + 408);
  v397 = (*(_QWORD *)(a1 + 416) - v396) >> 3;
  if (v395 <= v397)
  {
    if (v395 < v397)
      *(_QWORD *)(a1 + 416) = v396 + 24 * *(_QWORD *)(a1 + 584);
  }
  else
  {
    sub_20E93D8FC(a1 + 408, v395 - v397);
  }
  v398 = *(_QWORD *)(a1 + 728);
  v399 = *(_QWORD *)(a1 + 736);
  if (v398 != v399)
  {
    v400 = 0;
    do
    {
      if (*(_DWORD *)v398 != -1)
      {
        *(_QWORD *)(v398 + 8) = v400;
        v400 += 3;
      }
      v398 += 16;
    }
    while (v398 != v399);
  }
  v401 = *(_QWORD *)(a1 + 592);
  v402 = *(_QWORD *)(a1 + 432);
  v403 = (*(_QWORD *)(a1 + 440) - v402) >> 3;
  if (v401 <= v403)
  {
    if (v401 < v403)
      *(_QWORD *)(a1 + 440) = v402 + 8 * v401;
  }
  else
  {
    sub_20E93D8FC(a1 + 432, v401 - v403);
  }
  v404 = *(_QWORD *)(a1 + 752);
  v405 = *(_QWORD *)(a1 + 760);
  if (v404 != v405)
  {
    v406 = 0;
    do
    {
      if (*(_DWORD *)v404 != -1)
        *(_QWORD *)(v404 + 8) = v406++;
      v404 += 16;
    }
    while (v404 != v405);
  }
  v407 = 4 * *(_QWORD *)(a1 + 600);
  v408 = *(_QWORD *)(a1 + 456);
  v409 = (*(_QWORD *)(a1 + 464) - v408) >> 3;
  if (v407 <= v409)
  {
    if (v407 < v409)
      *(_QWORD *)(a1 + 464) = v408 + 32 * *(_QWORD *)(a1 + 600);
  }
  else
  {
    sub_20E93D8FC(a1 + 456, v407 - v409);
  }
  v410 = *(_QWORD *)(a1 + 776);
  v411 = *(_QWORD *)(a1 + 784);
  if (v410 != v411)
  {
    v412 = 0;
    do
    {
      if (*(_DWORD *)v410 != -1)
      {
        *(_QWORD *)(v410 + 8) = v412;
        v412 += 4;
      }
      v410 += 16;
    }
    while (v410 != v411);
  }
  v413 = 4 * *(_QWORD *)(a1 + 608);
  v414 = *(_QWORD *)(a1 + 480);
  v415 = (*(_QWORD *)(a1 + 488) - v414) >> 3;
  if (v413 <= v415)
  {
    if (v413 < v415)
      *(_QWORD *)(a1 + 488) = v414 + 32 * *(_QWORD *)(a1 + 608);
  }
  else
  {
    sub_20E93D8FC(a1 + 480, v413 - v415);
  }
  v416 = *(_QWORD *)(a1 + 800);
  v417 = *(_QWORD *)(a1 + 808);
  if (v416 != v417)
  {
    v418 = 0;
    do
    {
      if (*(_DWORD *)v416 != -1)
      {
        *(_QWORD *)(v416 + 8) = v418;
        v418 += 4;
      }
      v416 += 16;
    }
    while (v416 != v417);
  }
  v419 = 3 * *(_QWORD *)(a1 + 616);
  v420 = *(_QWORD *)(a1 + 504);
  v421 = (*(_QWORD *)(a1 + 512) - v420) >> 3;
  if (v419 <= v421)
  {
    if (v419 < v421)
      *(_QWORD *)(a1 + 512) = v420 + 24 * *(_QWORD *)(a1 + 616);
  }
  else
  {
    sub_20E93D8FC(a1 + 504, v419 - v421);
  }
  v422 = *(_QWORD *)(a1 + 824);
  v423 = *(_QWORD *)(a1 + 832);
  if (v422 != v423)
  {
    v424 = 0;
    do
    {
      if (*(_DWORD *)v422 != -1)
      {
        *(_QWORD *)(v422 + 8) = v424;
        v424 += 3;
      }
      v422 += 16;
    }
    while (v422 != v423);
  }
  v425 = 3 * *(_QWORD *)(a1 + 624);
  v426 = *(_QWORD *)(a1 + 528);
  v427 = (*(_QWORD *)(a1 + 536) - v426) >> 3;
  if (v425 <= v427)
  {
    if (v425 < v427)
      *(_QWORD *)(a1 + 536) = v426 + 24 * *(_QWORD *)(a1 + 624);
  }
  else
  {
    sub_20E93D8FC(a1 + 528, v425 - v427);
  }
  v428 = *(_QWORD *)(a1 + 848);
  v429 = *(_QWORD *)(a1 + 856);
  if (v428 != v429)
  {
    v430 = 0;
    do
    {
      if (*(_DWORD *)v428 != -1)
      {
        *(_QWORD *)(v428 + 8) = v430;
        v430 += 3;
      }
      v428 += 16;
    }
    while (v428 != v429);
  }
  if (v438)
  {
    v431 = v434[121];
    for (i = v434[122]; v431 != i; v431 += 16)
    {
      v433 = *(_QWORD *)(v431 + 8);
      if (!*(_BYTE *)(v433 + 20))
        *(_DWORD *)v433 = -1;
    }
  }
}

void sub_20F8C8D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t i;
  uint64_t v13;

  if (a11)
  {
    v11 = *(_QWORD *)(a9 + 968);
    for (i = *(_QWORD *)(a9 + 976); v11 != i; v11 += 16)
    {
      v13 = *(_QWORD *)(v11 + 8);
      if (!*(_BYTE *)(v13 + 20))
        *(_DWORD *)v13 = -1;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F8C8D70(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  size_t v46;
  _QWORD *v47;
  int64x2_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _BYTE *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char **v64;
  char *v65;
  unint64_t v66;
  unint64_t v68;
  char **v69;
  char *v70;
  char *v71;
  int64_t v72;
  unsigned int v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  char **v81;
  char *v82;
  unsigned int *v83;
  unsigned int *v84;
  char *v85;
  unsigned int v86;
  int64_t v87;
  uint64_t i;
  unsigned int v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  char **v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  unsigned int v98;
  int64_t v99;
  uint64_t v100;
  void **v101;
  char *v102;
  char **v103;
  char *v104;
  char *v105;
  char **v106;
  char *v107;
  char *v108;
  unint64_t v109;
  _QWORD *v110;
  _DWORD *v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  _QWORD *v115;
  int v116;
  _BOOL4 v117;
  size_t v118;
  void *v119;
  unint64_t v120;
  void **v121;
  _QWORD *v122;
  _QWORD *v123;
  int v124;
  size_t v125;
  _QWORD *v126;
  int64x2_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD **v139;
  uint64_t v140;
  _DWORD *v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  _DWORD *v146;
  int v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD *v161;
  int v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD **v169;
  uint64_t v170;
  _DWORD *v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _DWORD *v175;
  _DWORD *v176;
  int v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD *v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD *v191;
  int v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _DWORD **v199;
  uint64_t v200;
  _DWORD *v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  _DWORD *v206;
  int v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _DWORD **v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD *v221;
  int v223;
  uint64_t v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD **v229;
  uint64_t v230;
  _DWORD *v231;
  _DWORD *v232;
  uint64_t v233;
  uint64_t v234;
  _DWORD *v235;
  _DWORD *v236;
  int v238;
  uint64_t v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD **v244;
  uint64_t v245;
  _DWORD *v246;
  _DWORD *v247;
  uint64_t v248;
  uint64_t v249;
  _DWORD *v250;
  _DWORD *v251;
  int v253;
  uint64_t v254;
  int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _DWORD **v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  _DWORD *v266;
  int v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD **v274;
  uint64_t v275;
  _DWORD *v276;
  _DWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  std::string *v284;
  __int128 v285;
  std::string *v286;
  __int128 v287;
  std::string *v288;
  std::string::size_type size;
  std::string *v290;
  __int128 v291;
  uint64_t v292;
  void **v293;
  unsigned __int8 *v294;
  void **v295;
  int v296;
  std::string::size_type v297;
  char v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  std::string::pointer v305;
  std::string::pointer v306;
  std::string::size_type v307;
  size_t v308;
  std::string::size_type v309;
  std::string::size_type v311;
  uint64_t v313;
  char v314;
  int *v315;
  int *v316;
  int v317;
  int v318;
  uint64_t v319;
  size_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  char *v324;
  char *v325;
  char *v326;
  unint64_t j;
  int v328;
  unsigned int *v329;
  void *v330;
  unsigned int *v331;
  _BYTE *v332;
  int v333;
  uint64_t v334;
  int v335;
  size_t v336;
  unsigned __int8 v337;
  int v338;
  uint64_t v339;
  uint64_t *v340;
  _BOOL4 v341;
  unint64_t v342;
  uint64_t v343;
  _OWORD *v344;
  __int128 *v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  unsigned int *v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  size_t v353;
  _QWORD *v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  int v358;
  std::string::size_type v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  size_t v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  std::string::size_type v374;
  unsigned int v375;
  unsigned int *v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  _QWORD *v383;
  int v384;
  uint64_t v385;
  int v386;
  std::string::size_type v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  char v395;
  uint64_t v396;
  _DWORD *v397;
  uint64_t v398;
  _BYTE *v399;
  uint64_t v400;
  std::string::size_type v401;
  double *v402;
  double *v403;
  unsigned int v404;
  size_t v405;
  uint64_t v406;
  unint64_t v407;
  double *v408;
  size_t v409;
  float64x2_t *v410;
  unint64_t v411;
  double *v412;
  double *v413;
  unint64_t v414;
  uint64_t v415;
  float64x2_t *v416;
  float64x2_t *v417;
  uint64_t v418;
  float64x2_t v419;
  double v420;
  float64x2_t *v421;
  unint64_t v422;
  double *v423;
  double *v424;
  unint64_t v425;
  uint64_t v426;
  float64x2_t *v427;
  float64x2_t *v428;
  uint64_t v429;
  float64x2_t v430;
  double v431;
  uint64_t v432;
  int v433;
  unsigned int v434;
  uint64_t v435;
  std::string *v436;
  __int128 v437;
  std::string *v438;
  __int128 v439;
  uint64_t v440;
  unsigned int v441;
  std::string *v442;
  std::string::size_type v443;
  std::string *v444;
  __int128 v445;
  std::string *v446;
  __int128 v447;
  uint64_t v448;
  unsigned int v449;
  std::string *v450;
  __int128 v451;
  std::string *v452;
  __int128 v453;
  std::string *v454;
  std::string::size_type v455;
  std::string *v456;
  __int128 v457;
  uint64_t v458;
  std::string *v459;
  __int128 v460;
  std::string *v461;
  __int128 v462;
  std::string *v463;
  std::string::size_type v464;
  std::string *v465;
  __int128 v466;
  std::string *v467;
  __int128 v468;
  std::string *v469;
  std::string::size_type v470;
  std::string *v471;
  __int128 v472;
  uint64_t v473;
  _DWORD *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  char v478;
  char v479;
  std::string *v480;
  __int128 v481;
  _BYTE *v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int v486;
  _DWORD *v487;
  _DWORD *v488;
  uint64_t v489;
  unsigned int v490;
  char *v491;
  unint64_t v492;
  size_t v493;
  uint64_t v494;
  size_t v495;
  _QWORD *v496;
  int v497;
  int v498;
  size_t v499;
  char *v500;
  void *v501;
  uint64_t v502;
  size_t v503;
  char *v504;
  int v505;
  char *v506;
  uint64_t v507;
  size_t v508;
  char *v509;
  unint64_t v510;
  uint64_t v511;
  double *v512;
  float64x2_t *v513;
  float64x2_t *v514;
  uint64_t v515;
  float64x2_t v516;
  double v517;
  std::string *v518;
  __int128 v519;
  std::string *v520;
  __int128 v521;
  std::string *v522;
  std::string::size_type v523;
  std::string *v524;
  __int128 v525;
  std::string *v526;
  __int128 v527;
  std::string *v528;
  std::string::size_type v529;
  std::string *v530;
  __int128 v531;
  _BYTE *v532;
  uint64_t v533;
  BOOL v534;
  unsigned int v535;
  unint64_t v536;
  _QWORD *v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  uint64_t v553;
  uint64_t v554;
  unsigned int v555;
  uint64_t v556;
  int8x16_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  char *v571;
  unint64_t v572;
  int64_t v573;
  uint64_t v574;
  char *v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  _BYTE *v579;
  uint64_t v580;
  uint64_t v581;
  char *v582;
  uint64_t v583;
  int64_t v584;
  uint64_t v585;
  char *v586;
  char *v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  char *v592;
  char *v593;
  char *v594;
  unint64_t v595;
  uint64_t v596;
  _OWORD *v597;
  __int128 *v598;
  uint64_t v599;
  __int128 v600;
  uint64_t v601;
  char *v602;
  size_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _BYTE *v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _OWORD *v611;
  __int128 *v612;
  uint64_t v613;
  __int128 v614;
  uint64_t v615;
  char *v616;
  unsigned int v617;
  unint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unsigned int v624;
  uint64_t v625;
  uint64_t v626;
  _QWORD *v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  char *v634;
  _QWORD *v635;
  char *v636;
  int64_t v637;
  uint64_t v638;
  char *v639;
  char *v640;
  char *v641;
  char *v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  _BYTE *v646;
  _QWORD *v647;
  char *v648;
  unint64_t v649;
  char *v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  _OWORD *v654;
  char *v655;
  uint64_t v656;
  __int128 v657;
  uint64_t v658;
  size_t v659;
  _BYTE *v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  _QWORD *v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  __int128 v675;
  __int128 v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  unsigned int v682;
  unsigned int v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  unsigned int v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  unsigned int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  unint64_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  int8x16_t v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  uint64_t v731;
  uint64_t v732;
  int8x16_t v733;
  uint64_t v734;
  uint64_t v735;
  int8x16_t v736;
  uint64_t v737;
  uint64_t v738;
  int8x16_t v739;
  uint64_t v740;
  uint64_t v741;
  int8x16_t v742;
  uint64_t v743;
  uint64_t v744;
  int8x16_t v745;
  uint64_t v746;
  uint64_t v747;
  int8x16_t v748;
  uint64_t v749;
  uint64_t v750;
  int8x16_t v751;
  uint64_t v752;
  uint64_t v753;
  int8x16_t v754;
  uint64_t v755;
  uint64_t v756;
  int8x16_t v757;
  uint64_t v758;
  uint64_t v759;
  int8x16_t v760;
  uint64_t v761;
  uint64_t v762;
  int8x16_t v763;
  uint64_t v764;
  uint64_t v765;
  int8x16_t v766;
  uint64_t v767;
  uint64_t v768;
  int8x16_t v769;
  uint64_t v770;
  uint64_t v771;
  int8x16_t v772;
  uint64_t v773;
  uint64_t v774;
  int8x16_t v775;
  uint64_t v776;
  uint64_t v777;
  int8x16_t v778;
  uint64_t v779;
  uint64_t v780;
  int8x16_t v781;
  uint64_t v782;
  uint64_t v783;
  int8x16_t v784;
  uint64_t v785;
  uint64_t v786;
  int8x16_t v787;
  uint64_t v788;
  uint64_t v789;
  int8x16_t v790;
  uint64_t v791;
  uint64_t v792;
  int8x16_t v793;
  uint64_t v794;
  uint64_t v795;
  int8x16_t v796;
  uint64_t v797;
  uint64_t v798;
  int8x16_t v799;
  uint64_t v800;
  uint64_t v801;
  int8x16_t v802;
  uint64_t v803;
  uint64_t v804;
  int8x16_t v805;
  uint64_t v806;
  uint64_t v807;
  int8x16_t v808;
  uint64_t v809;
  __int128 v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  _QWORD *v817;
  uint64_t v818;
  _QWORD *v819;
  char *v820;
  unint64_t v821;
  int64_t v822;
  uint64_t v823;
  _BYTE *v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  char *v828;
  char *v829;
  uint64_t v830;
  uint64_t v831;
  char *v832;
  uint64_t v833;
  int64_t v834;
  uint64_t v835;
  char *v836;
  char *v837;
  unint64_t v838;
  unint64_t v839;
  unint64_t v840;
  char *v841;
  char *v842;
  char *v843;
  char *v844;
  unint64_t v845;
  uint64_t v846;
  char *v847;
  __int128 *v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  char *v852;
  size_t v853;
  uint64_t v854;
  uint64_t v855;
  _OWORD *v856;
  __int128 *v857;
  uint64_t v858;
  __int128 v859;
  uint64_t v860;
  _BYTE *v861;
  unsigned int v862;
  unint64_t v863;
  uint64_t v864;
  _QWORD *v865;
  unint64_t v866;
  unint64_t v867;
  uint64_t v868;
  unsigned int v869;
  int8x16_t v870;
  int8x16_t v871;
  int8x16_t v872;
  uint64_t v873;
  uint64_t v874;
  unsigned int v875;
  uint64_t v876;
  int8x16_t v877;
  unsigned int v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int v881;
  unsigned int v882;
  uint64_t v883;
  uint64_t v884;
  unsigned int v885;
  unsigned int v886;
  uint64_t v887;
  uint64_t v888;
  unsigned int v889;
  unsigned int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  _QWORD *v897;
  char *v898;
  unint64_t v899;
  int64_t v900;
  uint64_t v901;
  _BYTE *v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  unint64_t v906;
  _BYTE *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  char *v911;
  int64_t v912;
  uint64_t v913;
  char *v914;
  char *v915;
  unint64_t v916;
  unint64_t v917;
  unint64_t v918;
  char *v919;
  unint64_t v920;
  char *v921;
  char *v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  _OWORD *v926;
  __int128 *v927;
  uint64_t v928;
  __int128 v929;
  uint64_t v930;
  char *v931;
  size_t v932;
  uint64_t v933;
  uint64_t v934;
  _OWORD *v935;
  __int128 *v936;
  uint64_t v937;
  __int128 v938;
  uint64_t v939;
  uint64_t v940;
  _DWORD *v941;
  uint64_t v942;
  void **v944;
  uint64_t v945;
  char **v946;
  int v947;
  unsigned int v948;
  unsigned int v949;
  unint64_t v950;
  unsigned int v951;
  unsigned int v952;
  uint64_t v953;
  uint64_t v954;
  _QWORD *v955;
  _QWORD *v956;
  _QWORD *v957;
  _QWORD *v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  char *v972;
  _QWORD *v973;
  unint64_t v974;
  unint64_t v975;
  unint64_t v976;
  unint64_t v977;
  unint64_t v978;
  unint64_t v979;
  unint64_t v980;
  unint64_t v981;
  unint64_t v982;
  unint64_t v983;
  unint64_t v984;
  unint64_t v985;
  unint64_t v986;
  unint64_t v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unint64_t v991;
  unint64_t v992;
  unint64_t v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t v996;
  unint64_t v997;
  _OWORD *v998;
  unint64_t v999;
  unint64_t v1000;
  const char *v1001;
  int v1002;
  unint64_t v1003;
  unint64_t v1004;
  int v1005;
  unint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  unsigned int *v1009;
  unint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  unsigned int *v1014;
  unsigned int v1015;
  unint64_t v1016;
  char v1017;
  unint64_t v1018;
  _BYTE *v1019;
  uint64_t v1020;
  unint64_t v1021;
  int __val;
  unint64_t __vala;
  int v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  int v1029;
  uint64_t v1030;
  unint64_t v1031;
  unsigned int v1032;
  unsigned __int8 *v1033;
  unint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  _QWORD *v1037;
  int v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t *v1041;
  uint64_t v1042;
  unsigned int v1043;
  int v1044;
  uint64_t v1045;
  unint64_t v1046;
  unsigned int v1047;
  void *__p[2];
  std::string::size_type v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  void *__dst[18];
  int v1066;
  int v1067;
  int v1068;
  int v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  void *v1094[2];
  std::string::size_type v1095;
  void *v1096[2];
  std::string::size_type v1097;
  void *v1098[2];
  std::string::size_type v1099;
  std::string v1100;
  std::string v1101;
  std::string v1102;
  std::string v1103;
  std::string v1104;
  void *v1105;
  _BYTE v1106[32];
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  int v1124;
  std::string v1125;
  std::string v1126;
  std::string v1127;
  _BYTE v1128[32];
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;

  v9 = a1;
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) + 1592))
    return 1;
  v1040 = a5;
  v1044 = a2;
  v11 = v9 + 4288;
  v12 = v9 + 2234;
  v13 = *((unsigned __int8 *)v9 + 17440);
  v14 = *((unsigned __int8 *)v9 + 17872);
  if (!*((_BYTE *)v9 + 17440))
    goto LABEL_41;
  if (*((_BYTE *)v9 + 17872))
  {
    *v12 = 0;
    v15 = (char *)v9 + 17441;
    if (!*((_BYTE *)v9 + 17441))
    {
      v16 = a3;
      v17 = a4;
      v18 = v14;
      v19 = v13;
      v20 = (char *)v9 + 17441;
      v21 = v9 + 4288;
      v22 = v9[2201];
      v23 = v9[2202];
      v24 = v9[2204];
      v25 = v9[2205];
      v26 = v9[2207];
      v27 = v9[2208];
      v28 = v9[2210];
      v29 = v9[2211];
      v30 = v9[2213];
      v31 = v9[2214];
      v32 = v9[2216];
      v33 = v9[2217];
      v34 = v9[2219];
      v35 = v9[2220];
      v36 = v9[2222];
      v37 = v9[2223];
      v38 = v9[2225];
      v39 = v9[2226];
      v40 = v9[2228];
      v41 = v9[2229];
      if (v9[2231] != v9[2232])
      {
LABEL_31:
        v11 = v21;
        v42 = *((_DWORD *)v21 + 5) * *((_DWORD *)v21 + 4);
        v15 = v20;
        v13 = v19;
        v14 = v18;
        a4 = v17;
        a3 = v16;
        if (v42)
        {
          sub_20F8D63EC(v9 + 4, (char **)v9 + 2308);
          LODWORD(v1074) = 0;
          LODWORD(__dst[0]) = 0;
          v1109 = 0u;
          v1108 = 0u;
          v1107 = 0u;
          memset(v1106, 0, sizeof(v1106));
          v1131 = 0u;
          v1130 = 0u;
          v1129 = 0u;
          memset(v1128, 0, sizeof(v1128));
          sub_20F8E03B8(v9 + 17, (int *)&v1074, __dst, v1106, v1128);
          sub_20F8E0678((uint64_t)(v9 + 17), v9 + 4288, (unsigned int *)v1106, (unsigned int *)v1128);
          v43 = *((unsigned int *)v9 + 12);
          if ((_DWORD)v43)
            bzero((void *)v9[4], 8 * v43);
          v44 = 9 * ((v9[2312] - v9[2311]) >> 2)
              + 6
              * (((v9[2315] - v9[2314]) >> 2)
               + ((v9[2309] - v9[2308]) >> 2)
               + ((v9[2318] - v9[2317]) >> 2))
              + ((v9[2324] - v9[2323]) >> 2)
              + ((*((_DWORD *)v9 + 4654) - *((_DWORD *)v9 + 4652)) & 0xFFFFFFFC)
              + ((*((_DWORD *)v9 + 4660) - *((_DWORD *)v9 + 4658)) & 0xFFFFFFFC)
              + 3
              * (((v9[2333] - v9[2332]) >> 2)
               + ((v9[2321] - v9[2320]) >> 2)
               + ((v9[2336] - v9[2335]) >> 2));
          v45 = v9 + 1;
          *((_DWORD *)v9 + 6) = v44;
          if (v9[2] < v44)
          {
            if (*v45)
              MEMORY[0x212BC6368](*v45, 0x1000C8000313F17);
            v46 = (8 * v44 + 31) & 0xFFFFFFFE0;
            v9[1] = 0;
            v9[2] = v46 >> 3;
            v9[1] = operator new(v46, (std::align_val_t)0x20uLL);
          }
          v47 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
          v48 = sub_20F8DF948(v47, (uint64_t)(v9 + 2308), v9 + 1);
          v49 = (_QWORD *)(*(uint64_t (**)(_QWORD *, int64x2_t))(*v9 + 40))(v9, v48);
          sub_20F8D63EC(v49, (char **)v9 + 2308);
          v50 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
          *(_QWORD *)v1106 = 0;
          sub_20F92369C((_QWORD *)(v50 + 104), (uint64_t *)v1106);
          v51 = *(unsigned int *)(v50 + 16);
          if ((_DWORD)v51)
            bzero(*(void **)v50, 8 * v51);
          return 0;
        }
        goto LABEL_42;
      }
LABEL_21:
      if (v40 == v41
        && v38 == v39
        && v36 == v37
        && v34 == v35
        && v32 == v33
        && v30 == v31
        && v28 == v29
        && v26 == v27
        && v24 == v25
        && v22 == v23)
      {
        return 0;
      }
      goto LABEL_31;
    }
    goto LABEL_42;
  }
  v23 = v9[2201];
  if (v23 != v9[2202])
    goto LABEL_41;
  v25 = v9[2204];
  if (v25 != v9[2205])
    goto LABEL_41;
  v27 = v9[2207];
  if (v27 != v9[2208]
    || (v29 = v9[2210], v29 != v9[2211])
    || (v31 = v9[2213], v31 != v9[2214])
    || (v33 = v9[2216], v33 != v9[2217])
    || (v35 = v9[2219], v35 != v9[2220])
    || (v37 = v9[2222], v37 != v9[2223])
    || (v39 = v9[2225], v39 != v9[2226])
    || (v41 = v9[2228], v41 != v9[2229])
    || v9[2231] != v9[2232])
  {
LABEL_41:
    v15 = (char *)v9 + 17441;
    goto LABEL_42;
  }
  *v12 = 0;
  v15 = (char *)v9 + 17441;
  if (!*((_BYTE *)v9 + 17441))
  {
    v16 = a3;
    v17 = a4;
    v18 = v14;
    v19 = v13;
    v20 = (char *)v9 + 17441;
    v21 = v9 + 4288;
    v40 = v41;
    v38 = v39;
    v36 = v37;
    v34 = v35;
    v32 = v33;
    v30 = v31;
    v28 = v29;
    v26 = v27;
    v24 = v25;
    v22 = v23;
    goto LABEL_21;
  }
LABEL_42:
  v52 = (*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
  v53 = (char **)sub_20F8D7234(v52);
  sub_20F8DB994((uint64_t)&v1074, v53);
  v54 = v53 + 33;
  v973 = v9;
  if (v1074 == v1075
    && v1076 == v1077
    && v1078 == v1079
    && v1080 == v1081
    && v1082 == v1083
    && v1084 == v1085
    && v1086 == v1087
    && v1088 == v1089
    && v1090 == v1091
    && v1092 == v1093)
  {
    v55 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
    v56 = 0;
    v1141 = 0u;
    v57 = v55 + 15304;
    v1140 = 0u;
    v1139 = 0u;
    v1138 = 0u;
    v1137 = 0u;
    v1136 = 0u;
    v1135 = 0u;
    v1134 = 0u;
    v1133 = 0u;
    v1132 = 0u;
    v1131 = 0u;
    v1130 = 0u;
    v1129 = 0u;
    memset(v1128, 0, sizeof(v1128));
    do
    {
      v58 = dword_2103B98E8[v56];
      if ((v58 & 0x80000000) == 0)
      {
        v59 = &v1128[24 * v56];
        v60 = v57 + 24 * v56;
        v61 = *(char **)(v60 + 8);
        v62 = *(char **)v60;
        v63 = (uint64_t)&v61[-*(_QWORD *)v60] >> 2;
        v64 = (char **)(v59 + 8);
        v65 = *(char **)v59;
        v66 = (uint64_t)(*((_QWORD *)v59 + 1) - *(_QWORD *)v59) >> 2;
        _CF = v63 >= v66;
        v68 = v63 - v66;
        if (v68 != 0 && _CF)
        {
          sub_20E93DC84((uint64_t)&v1128[24 * v56], v68);
          v62 = *(char **)v60;
          v61 = *(char **)(v60 + 8);
          v65 = *(char **)v59;
        }
        else if (!_CF)
        {
          *v64 = &v65[4 * v63];
        }
        v9 = v973;
        v69 = &v54[3 * v58];
        v71 = *v69;
        v70 = v69[1];
        *(_QWORD *)v1106 = v71;
        __dst[0] = v65;
        if (v62 == v61)
        {
          v72 = 0;
        }
        else
        {
          while (*(char **)v1106 != v70)
          {
            v73 = *(_DWORD *)v62;
            if (*(_DWORD *)v62 >= **(_DWORD **)v1106)
            {
              v62 += 4 * (**(_DWORD **)v1106 >= v73);
              *(_QWORD *)v1106 += 4;
              if (v62 == v61)
                goto LABEL_66;
            }
            else
            {
              v74 = (char *)__dst[0];
              *(_DWORD *)__dst[0] = v73;
              v62 += 4;
              __dst[0] = v74 + 4;
              if (v62 == v61)
              {
LABEL_66:
                v72 = 0;
                v65 = (char *)__dst[0];
                goto LABEL_69;
              }
            }
          }
          v65 = (char *)__dst[0];
          v72 = v61 - v62;
          if (v62 != v61)
            memmove(__dst[0], v62, v61 - v62);
        }
LABEL_69:
        v75 = &v65[v72];
        if (v75 != *v64)
          *v64 = v75;
      }
      ++v56;
    }
    while (v56 != 10);
    sub_20F8DFDDC(__dst, (uint64_t)(v9 + 1917), (uint64_t)v1128);
    v1119 = 0u;
    v1118 = 0u;
    v1117 = 0u;
    v1116 = 0u;
    v1115 = 0u;
    v1114 = 0u;
    v1113 = 0u;
    v1112 = 0u;
    v1111 = 0u;
    v1110 = 0u;
    v1109 = 0u;
    v1108 = 0u;
    v1107 = 0u;
    memset(v1106, 0, sizeof(v1106));
    sub_20F8EA9E4((_DWORD *)v9 + 8, (uint64_t)__dst, (uint64_t)v1106);
    sub_20F89E908((uint64_t)v1106);
    sub_20F89E908((uint64_t)__dst);
    sub_20F89E908((uint64_t)v1128);
    v10 = 0;
    goto LABEL_1150;
  }
  v1030 = a4;
  __val = v14;
  v1024 = v13;
  v1019 = v15;
  v1037 = v11;
  v76 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
  sub_20F8ECF48(v1106, v76 + 15304);
  v77 = 0;
  v1033 = (unsigned __int8 *)(v9 + 1947);
  do
  {
    v78 = &v1106[24 * v77];
    v79 = *(char **)v78;
    v82 = (char *)*((_QWORD *)v78 + 1);
    v81 = (char **)(v78 + 8);
    v80 = v82;
    if (v79 != v82)
    {
      v83 = (unsigned int *)*(&v1074 + 3 * v77 + 1);
      v84 = (unsigned int *)*(&v1074 + 3 * v77);
      v85 = v79;
      while (v84 != v83)
      {
        v86 = *(_DWORD *)v85;
        if (*(_DWORD *)v85 >= *v84)
        {
          v85 += 4 * (*v84++ >= v86);
          if (v85 == v80)
            goto LABEL_79;
        }
        else
        {
          *(_DWORD *)v79 = v86;
          v79 += 4;
          v85 += 4;
          if (v85 == v80)
          {
LABEL_79:
            if (v79 == v80)
              goto LABEL_72;
            goto LABEL_83;
          }
        }
      }
      if (v85 != v79)
      {
        v87 = v80 - v85;
        memmove(v79, v85, v80 - v85);
        v79 += v87;
        if (v79 != *v81)
LABEL_83:
          *v81 = v79;
      }
    }
LABEL_72:
    ++v77;
  }
  while (v77 != 10);
  for (i = 0; i != 10; ++i)
  {
    v89 = dword_2103B98E8[i];
    if ((v89 & 0x80000000) == 0)
    {
      v90 = &v1106[24 * i];
      v91 = *(char **)v90;
      v94 = (char *)*((_QWORD *)v90 + 1);
      v93 = (char **)(v90 + 8);
      v92 = v94;
      if (v91 != v94)
      {
        v95 = v54[3 * v89 + 1];
        v96 = v54[3 * v89];
        v97 = v91;
        while (v96 != v95)
        {
          v98 = *(_DWORD *)v97;
          if (*(_DWORD *)v97 >= *(_DWORD *)v96)
          {
            v97 += 4 * (*(_DWORD *)v96 >= v98);
            v96 += 4;
            if (v97 == v92)
              goto LABEL_93;
          }
          else
          {
            *(_DWORD *)v91 = v98;
            v91 += 4;
            v97 += 4;
            if (v97 == v92)
            {
LABEL_93:
              if (v91 == v92)
                goto LABEL_85;
              goto LABEL_97;
            }
          }
        }
        if (v97 != v91)
        {
          v99 = v92 - v97;
          memmove(v91, v97, v92 - v97);
          v91 += v99;
          if (v91 != *v93)
          {
LABEL_97:
            *v93 = v91;
            continue;
          }
        }
      }
    }
LABEL_85:
    ;
  }
  v1026 = a3;
  v946 = v53;
  sub_20F8ECF48(__dst, (uint64_t)v1106);
  sub_20F89E908((uint64_t)v1106);
  v100 = 0;
  v1064 = 0u;
  v1063 = 0u;
  v1062 = 0u;
  v1061 = 0u;
  v1060 = 0u;
  v1059 = 0u;
  v1058 = 0u;
  v1057 = 0u;
  v1056 = 0u;
  v1055 = 0u;
  v1054 = 0u;
  v1052 = 0u;
  v1053 = 0u;
  v1050 = 0u;
  v1051 = 0u;
  do
  {
    v101 = &__dst[3 * v100];
    v103 = (char **)(v101 + 1);
    v102 = (char *)v101[1];
    v104 = (char *)&v1050 + 24 * v100;
    v105 = (char *)*v101;
    v106 = (char **)(&v1074 + 3 * v100);
    v107 = v106[1];
    v108 = *v106;
    v109 = ((v107 - *v106) >> 2) + ((v102 - (_BYTE *)*v101) >> 2);
    v110 = v104 + 8;
    v111 = *(_DWORD **)v104;
    v112 = (uint64_t)(*((_QWORD *)v104 + 1) - *(_QWORD *)v104) >> 2;
    v113 = v109 >= v112;
    v114 = v109 - v112;
    if (v114 != 0 && v113)
    {
      sub_20E93DC84((uint64_t)&v1050 + 24 * v100, v114);
      v105 = (char *)*v101;
      v102 = *v103;
      v108 = *v106;
      v107 = v106[1];
      v111 = *(_DWORD **)v104;
      v115 = v973;
      if (*v101 != *v103)
        goto LABEL_107;
    }
    else
    {
      if (!v113)
        *v110 = &v111[v109];
      v115 = v973;
      if (v105 != v102)
      {
LABEL_107:
        while (v108 != v107)
        {
          v116 = *(_DWORD *)v108;
          v117 = *(_DWORD *)v108 >= *(_DWORD *)v105;
          if (*(_DWORD *)v108 >= *(_DWORD *)v105)
            v116 = *(_DWORD *)v105;
          v108 += 4 * (*(_DWORD *)v105 >= *(_DWORD *)v108);
          v105 += 4 * v117;
          *v111++ = v116;
          if (v105 == v102)
            goto LABEL_111;
        }
        v118 = v102 - v105;
        v119 = v111;
        goto LABEL_114;
      }
    }
LABEL_111:
    v118 = v107 - v108;
    if (v108 == v107)
      goto LABEL_115;
    v119 = v111;
    v105 = v108;
LABEL_114:
    memmove(v119, v105, v118);
LABEL_115:
    if ((_DWORD *)((char *)v111 + v118) != (_DWORD *)*v110)
      *v110 = (char *)v111 + v118;
    ++v100;
  }
  while (v100 != 10);
  v120 = 9 * ((unint64_t)((char *)__dst[4] - (char *)__dst[3]) >> 2)
       + 6
       * (((unint64_t)((char *)__dst[7] - (char *)__dst[6]) >> 2)
        + ((unint64_t)((char *)__dst[1] - (char *)__dst[0]) >> 2)
        + ((unint64_t)((char *)__dst[10] - (char *)__dst[9]) >> 2))
       + ((unint64_t)((char *)__dst[16] - (char *)__dst[15]) >> 2)
       + ((v1067 - v1066) & 0xFFFFFFFC)
       + ((v1069 - v1068) & 0xFFFFFFFC)
       + 3
       * (((unint64_t)(v1071 - v1070) >> 2)
        + ((unint64_t)((char *)__dst[13] - (char *)__dst[12]) >> 2)
        + ((unint64_t)(v1073 - v1072) >> 2));
  v121 = (void **)(v115 + 1);
  *((_DWORD *)v115 + 6) = v120;
  v122 = v1037;
  v123 = (_QWORD *)v1030;
  v124 = v1044;
  if (v115[2] < v120)
  {
    if (*v121)
      MEMORY[0x212BC6368](*v121, 0x1000C8000313F17);
    v125 = (8 * v120 + 31) & 0xFFFFFFFE0;
    v115[1] = 0;
    v115[2] = v125 >> 3;
    *v121 = operator new(v125, (std::align_val_t)0x20uLL);
  }
  v126 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v115 + 24))(v115);
  v127 = sub_20F8DF948(v126, (uint64_t)__dst, v115 + 1);
  v128 = (_QWORD *)(*(uint64_t (**)(_QWORD *, int64x2_t))(*v115 + 24))(v115, v127);
  v130 = v128[1];
  v129 = v128[2];
  if (v130 != v129)
  {
    v132 = (_DWORD *)*((_QWORD *)&v1050 + 1);
    v131 = (_DWORD *)v1050;
    if ((_QWORD)v1050 != *((_QWORD *)&v1050 + 1))
    {
      v133 = 0;
      do
      {
        v134 = *(_QWORD *)(v130 + 8);
        if (*v131 == *(_DWORD *)v130)
        {
          if (*(_BYTE *)(v134 + 20))
            v135 = v133;
          else
            v135 = -1;
          v133 += *(unsigned __int8 *)(v134 + 20);
          ++v131;
        }
        else
        {
          v135 = -1;
        }
        *(_DWORD *)v134 = v135;
        v130 += 16;
      }
      while (v130 != v129 && v131 != v132);
    }
  }
  if (v130 != v129)
  {
    v136 = v129 - v130 - 16;
    if (v136 < 0x10)
    {
      v137 = v130;
      goto LABEL_139;
    }
    v138 = (v136 >> 4) + 1;
    v137 = v130 + 16 * (v138 & 0x1FFFFFFFFFFFFFFELL);
    v139 = (_DWORD **)(v130 + 24);
    v140 = v138 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v141 = *(v139 - 2);
      v142 = *v139;
      v139 += 4;
      *v141 = -1;
      *v142 = -1;
      v140 -= 2;
    }
    while (v140);
    if (v138 != (v138 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_139:
        **(_DWORD **)(v137 + 8) = -1;
        v137 += 16;
      }
      while (v137 != v129);
    }
  }
  v144 = v128[13];
  v143 = v128[14];
  v145 = (_DWORD *)*((_QWORD *)&v1051 + 1);
  v146 = (_DWORD *)v1052;
  if (v144 != v143 && *((_QWORD *)&v1051 + 1) != (_QWORD)v1052)
  {
    v148 = 0;
    do
    {
      v149 = *(_QWORD *)(v144 + 8);
      if (*v145 == *(_DWORD *)v144)
      {
        if (*(_BYTE *)(v149 + 20))
          v150 = v148;
        else
          v150 = -1;
        v148 += *(unsigned __int8 *)(v149 + 20);
        ++v145;
      }
      else
      {
        v150 = -1;
      }
      *(_DWORD *)v149 = v150;
      v144 += 16;
    }
    while (v144 != v143 && v145 != v146);
  }
  if (v144 != v143)
  {
    v151 = v143 - v144 - 16;
    if (v151 < 0x10)
    {
      v152 = v144;
      goto LABEL_159;
    }
    v153 = (v151 >> 4) + 1;
    v152 = v144 + 16 * (v153 & 0x1FFFFFFFFFFFFFFELL);
    v154 = (_DWORD **)(v144 + 24);
    v155 = v153 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v156 = *(v154 - 2);
      v157 = *v154;
      v154 += 4;
      *v156 = -1;
      *v157 = -1;
      v155 -= 2;
    }
    while (v155);
    if (v153 != (v153 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_159:
        **(_DWORD **)(v152 + 8) = -1;
        v152 += 16;
      }
      while (v152 != v143);
    }
  }
  v159 = v128[25];
  v158 = v128[26];
  v161 = (_DWORD *)*((_QWORD *)&v1053 + 1);
  v160 = (_DWORD *)v1053;
  if (v159 != v158 && (_QWORD)v1053 != *((_QWORD *)&v1053 + 1))
  {
    v163 = 0;
    do
    {
      v164 = *(_QWORD *)(v159 + 8);
      if (*v160 == *(_DWORD *)v159)
      {
        if (*(_BYTE *)(v164 + 20))
          v165 = v163;
        else
          v165 = -1;
        v163 += *(unsigned __int8 *)(v164 + 20);
        ++v160;
      }
      else
      {
        v165 = -1;
      }
      *(_DWORD *)v164 = v165;
      v159 += 16;
    }
    while (v159 != v158 && v160 != v161);
  }
  if (v159 != v158)
  {
    v166 = v158 - v159 - 16;
    if (v166 < 0x10)
    {
      v167 = v159;
      goto LABEL_179;
    }
    v168 = (v166 >> 4) + 1;
    v167 = v159 + 16 * (v168 & 0x1FFFFFFFFFFFFFFELL);
    v169 = (_DWORD **)(v159 + 24);
    v170 = v168 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v171 = *(v169 - 2);
      v172 = *v169;
      v169 += 4;
      *v171 = -1;
      *v172 = -1;
      v170 -= 2;
    }
    while (v170);
    if (v168 != (v168 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_179:
        **(_DWORD **)(v167 + 8) = -1;
        v167 += 16;
      }
      while (v167 != v158);
    }
  }
  v174 = v128[37];
  v173 = v128[38];
  v175 = (_DWORD *)*((_QWORD *)&v1054 + 1);
  v176 = (_DWORD *)v1055;
  if (v174 != v173 && *((_QWORD *)&v1054 + 1) != (_QWORD)v1055)
  {
    v178 = 0;
    do
    {
      v179 = *(_QWORD *)(v174 + 8);
      if (*v175 == *(_DWORD *)v174)
      {
        if (*(_BYTE *)(v179 + 20))
          v180 = v178;
        else
          v180 = -1;
        v178 += *(unsigned __int8 *)(v179 + 20);
        ++v175;
      }
      else
      {
        v180 = -1;
      }
      *(_DWORD *)v179 = v180;
      v174 += 16;
    }
    while (v174 != v173 && v175 != v176);
  }
  if (v174 != v173)
  {
    v181 = v173 - v174 - 16;
    if (v181 < 0x10)
    {
      v182 = v174;
      goto LABEL_199;
    }
    v183 = (v181 >> 4) + 1;
    v182 = v174 + 16 * (v183 & 0x1FFFFFFFFFFFFFFELL);
    v184 = (_DWORD **)(v174 + 24);
    v185 = v183 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v186 = *(v184 - 2);
      v187 = *v184;
      v184 += 4;
      *v186 = -1;
      *v187 = -1;
      v185 -= 2;
    }
    while (v185);
    if (v183 != (v183 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_199:
        **(_DWORD **)(v182 + 8) = -1;
        v182 += 16;
      }
      while (v182 != v173);
    }
  }
  v189 = v128[49];
  v188 = v128[50];
  v191 = (_DWORD *)*((_QWORD *)&v1056 + 1);
  v190 = (_DWORD *)v1056;
  if (v189 != v188 && (_QWORD)v1056 != *((_QWORD *)&v1056 + 1))
  {
    v193 = 0;
    do
    {
      v194 = *(_QWORD *)(v189 + 8);
      if (*v190 == *(_DWORD *)v189)
      {
        if (*(_BYTE *)(v194 + 20))
          v195 = v193;
        else
          v195 = -1;
        v193 += *(unsigned __int8 *)(v194 + 20);
        ++v190;
      }
      else
      {
        v195 = -1;
      }
      *(_DWORD *)v194 = v195;
      v189 += 16;
    }
    while (v189 != v188 && v190 != v191);
  }
  if (v189 != v188)
  {
    v196 = v188 - v189 - 16;
    if (v196 < 0x10)
    {
      v197 = v189;
      goto LABEL_219;
    }
    v198 = (v196 >> 4) + 1;
    v197 = v189 + 16 * (v198 & 0x1FFFFFFFFFFFFFFELL);
    v199 = (_DWORD **)(v189 + 24);
    v200 = v198 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v201 = *(v199 - 2);
      v202 = *v199;
      v199 += 4;
      *v201 = -1;
      *v202 = -1;
      v200 -= 2;
    }
    while (v200);
    if (v198 != (v198 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_219:
        **(_DWORD **)(v197 + 8) = -1;
        v197 += 16;
      }
      while (v197 != v188);
    }
  }
  v204 = v128[61];
  v203 = v128[62];
  v205 = (_DWORD *)*((_QWORD *)&v1057 + 1);
  v206 = (_DWORD *)v1058;
  if (v204 != v203 && *((_QWORD *)&v1057 + 1) != (_QWORD)v1058)
  {
    v208 = 0;
    do
    {
      v209 = *(_QWORD *)(v204 + 8);
      if (*v205 == *(_DWORD *)v204)
      {
        if (*(_BYTE *)(v209 + 20))
          v210 = v208;
        else
          v210 = -1;
        v208 += *(unsigned __int8 *)(v209 + 20);
        ++v205;
      }
      else
      {
        v210 = -1;
      }
      *(_DWORD *)v209 = v210;
      v204 += 16;
    }
    while (v204 != v203 && v205 != v206);
  }
  if (v204 != v203)
  {
    v211 = v203 - v204 - 16;
    if (v211 < 0x10)
    {
      v212 = v204;
      goto LABEL_239;
    }
    v213 = (v211 >> 4) + 1;
    v212 = v204 + 16 * (v213 & 0x1FFFFFFFFFFFFFFELL);
    v214 = (_DWORD **)(v204 + 24);
    v215 = v213 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v216 = *(v214 - 2);
      v217 = *v214;
      v214 += 4;
      *v216 = -1;
      *v217 = -1;
      v215 -= 2;
    }
    while (v215);
    if (v213 != (v213 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_239:
        **(_DWORD **)(v212 + 8) = -1;
        v212 += 16;
      }
      while (v212 != v203);
    }
  }
  v218 = v128[73];
  v219 = v128[74];
  v221 = (_DWORD *)*((_QWORD *)&v1059 + 1);
  v220 = (_DWORD *)v1059;
  if (v218 != v219 && (_QWORD)v1059 != *((_QWORD *)&v1059 + 1))
  {
    v223 = 0;
    do
    {
      v224 = *(_QWORD *)(v218 + 8);
      if (*v220 == *(_DWORD *)v218)
      {
        if (*(_BYTE *)(v224 + 20))
          v225 = v223;
        else
          v225 = -1;
        v223 += *(unsigned __int8 *)(v224 + 20);
        ++v220;
      }
      else
      {
        v225 = -1;
      }
      *(_DWORD *)v224 = v225;
      v218 += 16;
    }
    while (v218 != v219 && v220 != v221);
  }
  if (v218 != v219)
  {
    v226 = v219 - v218 - 16;
    if (v226 < 0x10)
    {
      v227 = v218;
      goto LABEL_259;
    }
    v228 = (v226 >> 4) + 1;
    v227 = v218 + 16 * (v228 & 0x1FFFFFFFFFFFFFFELL);
    v229 = (_DWORD **)(v218 + 24);
    v230 = v228 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v231 = *(v229 - 2);
      v232 = *v229;
      v229 += 4;
      *v231 = -1;
      *v232 = -1;
      v230 -= 2;
    }
    while (v230);
    if (v228 != (v228 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_259:
        **(_DWORD **)(v227 + 8) = -1;
        v227 += 16;
      }
      while (v227 != v219);
    }
  }
  v233 = v128[85];
  v234 = v128[86];
  v235 = (_DWORD *)*((_QWORD *)&v1060 + 1);
  v236 = (_DWORD *)v1061;
  if (v233 != v234 && *((_QWORD *)&v1060 + 1) != (_QWORD)v1061)
  {
    v238 = 0;
    do
    {
      v239 = *(_QWORD *)(v233 + 8);
      if (*v235 == *(_DWORD *)v233)
      {
        if (*(_BYTE *)(v239 + 20))
          v240 = v238;
        else
          v240 = -1;
        v238 += *(unsigned __int8 *)(v239 + 20);
        ++v235;
      }
      else
      {
        v240 = -1;
      }
      *(_DWORD *)v239 = v240;
      v233 += 16;
    }
    while (v233 != v234 && v235 != v236);
  }
  if (v233 != v234)
  {
    v241 = v234 - v233 - 16;
    if (v241 < 0x10)
    {
      v242 = v233;
      goto LABEL_279;
    }
    v243 = (v241 >> 4) + 1;
    v242 = v233 + 16 * (v243 & 0x1FFFFFFFFFFFFFFELL);
    v244 = (_DWORD **)(v233 + 24);
    v245 = v243 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v246 = *(v244 - 2);
      v247 = *v244;
      v244 += 4;
      *v246 = -1;
      *v247 = -1;
      v245 -= 2;
    }
    while (v245);
    if (v243 != (v243 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_279:
        **(_DWORD **)(v242 + 8) = -1;
        v242 += 16;
      }
      while (v242 != v234);
    }
  }
  v248 = v128[97];
  v249 = v128[98];
  v251 = (_DWORD *)*((_QWORD *)&v1062 + 1);
  v250 = (_DWORD *)v1062;
  if (v248 != v249 && (_QWORD)v1062 != *((_QWORD *)&v1062 + 1))
  {
    v253 = 0;
    do
    {
      v254 = *(_QWORD *)(v248 + 8);
      if (*v250 == *(_DWORD *)v248)
      {
        if (*(_BYTE *)(v254 + 20))
          v255 = v253;
        else
          v255 = -1;
        v253 += *(unsigned __int8 *)(v254 + 20);
        ++v250;
      }
      else
      {
        v255 = -1;
      }
      *(_DWORD *)v254 = v255;
      v248 += 16;
    }
    while (v248 != v249 && v250 != v251);
  }
  if (v248 != v249)
  {
    v256 = v249 - v248 - 16;
    if (v256 < 0x10)
    {
      v257 = v248;
      goto LABEL_299;
    }
    v258 = (v256 >> 4) + 1;
    v257 = v248 + 16 * (v258 & 0x1FFFFFFFFFFFFFFELL);
    v259 = (_DWORD **)(v248 + 24);
    v260 = v258 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v261 = *(v259 - 2);
      v262 = *v259;
      v259 += 4;
      *v261 = -1;
      *v262 = -1;
      v260 -= 2;
    }
    while (v260);
    if (v258 != (v258 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_299:
        **(_DWORD **)(v257 + 8) = -1;
        v257 += 16;
      }
      while (v257 != v249);
    }
  }
  v263 = v128[109];
  v264 = v128[110];
  v265 = (_DWORD *)*((_QWORD *)&v1063 + 1);
  v266 = (_DWORD *)v1064;
  if (v263 != v264 && *((_QWORD *)&v1063 + 1) != (_QWORD)v1064)
  {
    v268 = 0;
    do
    {
      v269 = *(_QWORD *)(v263 + 8);
      if (*v265 == *(_DWORD *)v263)
      {
        if (*(_BYTE *)(v269 + 20))
          v270 = v268;
        else
          v270 = -1;
        v268 += *(unsigned __int8 *)(v269 + 20);
        ++v265;
      }
      else
      {
        v270 = -1;
      }
      *(_DWORD *)v269 = v270;
      v263 += 16;
    }
    while (v263 != v264 && v265 != v266);
  }
  if (v263 != v264)
  {
    v271 = v264 - v263 - 16;
    if (v271 < 0x10)
    {
      v272 = v263;
      goto LABEL_319;
    }
    v273 = (v271 >> 4) + 1;
    v272 = v263 + 16 * (v273 & 0x1FFFFFFFFFFFFFFELL);
    v274 = (_DWORD **)(v263 + 24);
    v275 = v273 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v276 = *(v274 - 2);
      v277 = *v274;
      v274 += 4;
      *v276 = -1;
      *v277 = -1;
      v275 -= 2;
    }
    while (v275);
    if (v273 != (v273 & 0x1FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_319:
        **(_DWORD **)(v272 + 8) = -1;
        v272 += 16;
      }
      while (v272 != v264);
    }
  }
  v278 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  sub_20F8D63EC(v278, (char **)&v1050);
  v279 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  *(_QWORD *)v1106 = 0;
  sub_20F92369C((_QWORD *)(v279 + 104), (uint64_t *)v1106);
  v280 = *(unsigned int *)(v279 + 16);
  if ((_DWORD)v280)
    bzero(*(void **)v279, 8 * v280);
  if (((v115[1921] - v115[1920]) >> 2)
     + ((v115[1918] - v115[1917]) >> 2)
     + ((v115[1924] - v115[1923]) >> 2)
     + ((v115[1927] - v115[1926]) >> 2)
     + ((v115[1930] - v115[1929]) >> 2)
     + ((v115[1933] - v115[1932]) >> 2)
     + ((v115[1936] - v115[1935]) >> 2)
     + ((v115[1939] - v115[1938]) >> 2)
     + ((v115[1942] - v115[1941]) >> 2)
     + ((v115[1945] - v115[1944]) >> 2))
  {
    v281 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
    v1119 = 0u;
    v1118 = 0u;
    v1117 = 0u;
    v1116 = 0u;
    v1115 = 0u;
    v1114 = 0u;
    v1113 = 0u;
    v1112 = 0u;
    v1111 = 0u;
    v1110 = 0u;
    v1109 = 0u;
    v1108 = 0u;
    v1107 = 0u;
    memset(v1106, 0, sizeof(v1106));
    v1141 = 0u;
    v1140 = 0u;
    v1139 = 0u;
    v1138 = 0u;
    v1137 = 0u;
    v1136 = 0u;
    v1135 = 0u;
    v1134 = 0u;
    v1133 = 0u;
    v1132 = 0u;
    v1131 = 0u;
    v1130 = 0u;
    v1129 = 0u;
    memset(v1128, 0, sizeof(v1128));
    sub_20F8ED370(v281, (uint64_t)(v115 + 4), (char **)v1106, (int **)v1128);
    sub_20F89E908((uint64_t)v1128);
    sub_20F89E908((uint64_t)v1106);
  }
  if (!*v1033)
    goto LABEL_645;
  v282 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  sub_20F8DFFE4(v1037 + 5, &v1074, v282 + 15304, v1040);
  v283 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  sub_20F8DFFE4(v1037 + 8, __dst, v283 + 15304, v1040);
  if (!v1024)
    goto LABEL_339;
  std::to_string(&v1127, 9 * ((unint64_t)(v1077 - v1076) >> 2)+ 6* (((unint64_t)(v1079 - v1078) >> 2)+ ((unint64_t)(v1075 - v1074) >> 2)+ ((unint64_t)(v1081 - v1080) >> 2))+ ((unint64_t)(v1085 - v1084) >> 2)+ ((v1087 - v1086) & 0xFFFFFFFC)+ ((v1089 - v1088) & 0xFFFFFFFC)+ 3* (((unint64_t)(v1091 - v1090) >> 2)+ ((unint64_t)(v1083 - v1082) >> 2)+ ((unint64_t)(v1093 - v1092) >> 2)));
  v284 = std::string::insert(&v1127, 0, "marginalizer is using fallback while batched. marginalized variables DoF: ", 0x4AuLL);
  v285 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1128[16] = *((_QWORD *)&v284->__r_.__value_.__l + 2);
  *(_OWORD *)v1128 = v285;
  v284->__r_.__value_.__l.__size_ = 0;
  v284->__r_.__value_.__r.__words[2] = 0;
  v284->__r_.__value_.__r.__words[0] = 0;
  v286 = std::string::append((std::string *)v1128, ", valid: ", 9uLL);
  v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1106[16] = *((_QWORD *)&v286->__r_.__value_.__l + 2);
  *(_OWORD *)v1106 = v287;
  v286->__r_.__value_.__l.__size_ = 0;
  v286->__r_.__value_.__r.__words[2] = 0;
  v286->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1126, __val);
  if ((v1126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v288 = &v1126;
  else
    v288 = (std::string *)v1126.__r_.__value_.__r.__words[0];
  if ((v1126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v1126.__r_.__value_.__r.__words[2]);
  else
    size = v1126.__r_.__value_.__l.__size_;
  v290 = std::string::append((std::string *)v1106, (const std::string::value_type *)v288, size);
  v291 = *(_OWORD *)&v290->__r_.__value_.__l.__data_;
  v1049 = v290->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v291;
  v290->__r_.__value_.__l.__size_ = 0;
  v290->__r_.__value_.__r.__words[2] = 0;
  v290->__r_.__value_.__r.__words[0] = 0;
  v292 = v1037[17];
  if (v292)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v292 + 48))(v292, __p);
  if (SHIBYTE(v1049) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v1126.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_355;
LABEL_336:
    if ((v1106[23] & 0x80000000) == 0)
      goto LABEL_337;
LABEL_356:
    operator delete(*(void **)v1106);
    if ((v1128[23] & 0x80000000) != 0)
      goto LABEL_357;
LABEL_338:
    if ((SHIBYTE(v1127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_339;
LABEL_358:
    operator delete(v1127.__r_.__value_.__l.__data_);
    v293 = (void **)(v1037 + 11);
    v294 = v1033;
    if (!v1033[1])
      goto LABEL_359;
LABEL_340:
    v295 = v293;
    memset(&v1127, 0, 20);
    memset(&v1126, 0, 20);
    memset(&v1125, 0, sizeof(v1125));
    v296 = *v294;
    kdebug_trace();
    if (!*(_BYTE *)(v1026 + 18568))
    {
      v297 = *(_QWORD *)(v1026 + 57200);
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)v1106 = _Q1;
      *(_OWORD *)&v1106[16] = _Q1;
      v1107 = _Q1;
      v1108 = _Q1;
      v1109 = _Q1;
      v1110 = _Q1;
      v1111 = _Q1;
      v1112 = _Q1;
      v1113 = _Q1;
      v1114 = _Q1;
      v1115 = _Q1;
      v1116 = _Q1;
      v1117 = _Q1;
      v1118 = _Q1;
      v1119 = _Q1;
      v1120 = _Q1;
      v1121 = _Q1;
      v1122 = _Q1;
      v1123 = _Q1;
      v1104.__r_.__value_.__r.__words[0] = 0;
      v1103.__r_.__value_.__r.__words[0] = v297;
      v1100.__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v1102.__r_.__value_.__l.__data_) = v1044;
      LODWORD(v1101.__r_.__value_.__l.__data_) = 0;
      *(_QWORD *)v1128 = v1026 + 18576;
      *(_QWORD *)&v1128[8] = &v1101;
      *(_QWORD *)&v1128[16] = v1106;
      *(_QWORD *)&v1128[24] = &v1102;
      *(_QWORD *)&v1129 = &v1100;
      *((_QWORD *)&v1129 + 1) = &v1104;
      *(_QWORD *)&v1130 = &v1103;
      sub_20F9D9FCC(v1128);
    }
    sub_20F8BCDD8(v1026);
    v301 = sub_20FA153D4(v1026, 0, 0, 0, 0, 0);
    sub_20F8F2908((_QWORD *)v1026, v1044);
    if ((v301 & 1) == 0)
    {
      sub_20F8D5014(v1026, "error: linearizeLP() failed in lpLinearize.");
      goto LABEL_433;
    }
    v302 = v1026 + 57912;
    v303 = *(_QWORD *)(v1026 + 57912);
    v304 = *(_DWORD *)(v303 + 31048);
    if (!v304)
      goto LABEL_432;
    v305 = (std::string::pointer)(v303 + 44352);
    *(_DWORD *)v1128 = *(_DWORD *)(v303 + 31048);
    *(_DWORD *)&v1128[4] = v304;
    *(_QWORD *)&v1128[8] = v303 + 44352 + 8 * (196 - ((v304 + 3) & 0xFFFFFFFC));
    *(_DWORD *)&v1128[16] = 196 - ((v304 + 3) & 0xFFFFFFFC);
    v306 = (std::string::pointer)v1125.__r_.__value_.__r.__words[0];
    if (v304 != LODWORD(v1125.__r_.__value_.__r.__words[2]) || v304 != HIDWORD(v1125.__r_.__value_.__r.__words[2]))
    {
      if (v305 == v1125.__r_.__value_.__l.__data_)
      {
        v336 = (8 * v304 * v304 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)&v1106[8] = v336 >> 3;
        *(_QWORD *)v1106 = operator new(v336, (std::align_val_t)0x20uLL);
        *(_DWORD *)&v1106[16] = v304;
        *(_DWORD *)&v1106[20] = v304;
        sub_20F8F0C10((uint64_t)v1106, (uint64_t)v1128);
        v1125 = *(std::string *)v1106;
        v321 = v303 + 44352;
LABEL_431:
        MEMORY[0x212BC6368](v321, 0x1000C8000313F17);
LABEL_432:
        if (v296)
          goto LABEL_433;
        v400 = *(_QWORD *)v302;
        v401 = *(unsigned int *)(*(_QWORD *)v302 + 31048);
        if (!(_DWORD)v401)
          goto LABEL_433;
        v402 = (double *)(v400 + 355640);
        v403 = (double *)v1127.__r_.__value_.__r.__words[0];
        if ((_DWORD)v401 == LODWORD(v1127.__r_.__value_.__r.__words[2]))
          goto LABEL_486;
        if (v402 == (double *)v1127.__r_.__value_.__l.__data_)
        {
          v421 = (float64x2_t *)operator new((8 * v401 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v422 = (v401 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v423 = (double *)v421;
          v424 = (double *)(v400 + 355640);
          if (v422 < 5)
            goto LABEL_1171;
          v423 = (double *)v421;
          v424 = (double *)(v400 + 355640);
          if ((unint64_t)&v421[-22227] - v400 - 8 < 0x20)
            goto LABEL_1171;
          v425 = v422 + 1;
          v426 = v425 & 0x3FFFFFFFFFFFFFFCLL;
          v423 = &v421->f64[v426];
          v424 = &v402[v426];
          v427 = (float64x2_t *)(v400 + 355656);
          v428 = v421 + 1;
          v429 = v425 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v430 = vnegq_f64(*v427);
            v428[-1] = vnegq_f64(v427[-1]);
            *v428 = v430;
            v427 += 2;
            v428 += 2;
            v429 -= 4;
          }
          while (v429);
          if (v425 != (v425 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1171:
            do
            {
              v431 = *v424++;
              *v423++ = -v431;
            }
            while (v423 != &v421->f64[v401]);
          }
          v1127.__r_.__value_.__r.__words[0] = (std::string::size_type)v421;
          v1127.__r_.__value_.__l.__size_ = ((8 * v401 + 31) & 0xFFFFFFFE0) >> 3;
          LODWORD(v1127.__r_.__value_.__r.__words[2]) = v401;
          goto LABEL_506;
        }
        LODWORD(v1127.__r_.__value_.__r.__words[2]) = *(_DWORD *)(*(_QWORD *)v302 + 31048);
        if (v1127.__r_.__value_.__l.__size_ >= v401)
        {
LABEL_486:
          v404 = v401;
        }
        else
        {
          v404 = v401;
          if (v1127.__r_.__value_.__r.__words[0])
          {
            MEMORY[0x212BC6368](v1127.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            v404 = v1127.__r_.__value_.__r.__words[2];
          }
          v405 = (8 * v401 + 31) & 0xFFFFFFFE0;
          v1127.__r_.__value_.__r.__words[0] = 0;
          v1127.__r_.__value_.__l.__size_ = v405 >> 3;
          v403 = (double *)operator new(v405, (std::align_val_t)0x20uLL);
          v1127.__r_.__value_.__r.__words[0] = (std::string::size_type)v403;
        }
        v406 = v404;
        if (v402 != v403)
        {
          if (!v404)
            goto LABEL_433;
          v407 = (v404 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v407 < 5)
          {
            v408 = v403;
            do
            {
LABEL_672:
              v517 = *v402++;
              *v408++ = -v517;
            }
            while (v408 != &v403[v404]);
            goto LABEL_433;
          }
          v408 = v403;
          if ((unint64_t)v403 - v400 - 355640 < 0x20)
            goto LABEL_672;
          v510 = v407 + 1;
          v511 = v510 & 0x3FFFFFFFFFFFFFFCLL;
          v408 = &v403[v511];
          v512 = &v402[v511];
          v513 = (float64x2_t *)(v400 + 355656);
          v514 = (float64x2_t *)(v403 + 2);
          v515 = v510 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v516 = vnegq_f64(*v513);
            v514[-1] = vnegq_f64(v513[-1]);
            *v514 = v516;
            v513 += 2;
            v514 += 2;
            v515 -= 4;
          }
          while (v515);
          v402 = v512;
          if (v510 != (v510 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_672;
LABEL_433:
          v349 = (unsigned int *)v1037[5];
          v350 = v1037[6] - (_QWORD)v349;
          v351 = v350 >> 2;
          v352 = 2 * v350;
          v353 = (((2 * v350 * (v350 >> 2)) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0;
          *(_QWORD *)&v1106[8] = v353 >> 3;
          v354 = operator new(v353, (std::align_val_t)0x20uLL);
          *(_QWORD *)v1106 = v354;
          v355 = (v350 >> 2);
          *(_DWORD *)&v1106[16] = v350 >> 2;
          *(_DWORD *)&v1106[20] = *(_DWORD *)&v1106[16];
          if (*(_DWORD *)&v1106[16])
          {
            v356 = 0;
            v357 = 0;
            v358 = v1125.__r_.__value_.__r.__words[2];
            v359 = v1125.__r_.__value_.__r.__words[0];
            v360 = 1;
            do
            {
              v361 = 0;
              v362 = v349[v357];
              do
              {
                v363 = v349[v361];
                if (v363 <= v362)
                  v364 = v363 + v362 * v358;
                else
                  v364 = v362 + v363 * v358;
                v354[(v356 + v361++)] = *(_QWORD *)(v359 + 8 * v364);
              }
              while (v360 != v361);
              ++v357;
              ++v360;
              v356 += v351;
            }
            while (v357 != v355);
          }
          v365 = v1037[8];
          v366 = v1037[9] - v365;
          v367 = v366 >> 2;
          v368 = ((((v366 >> 2) * v352) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0;
          *(_QWORD *)&v1128[8] = v368 >> 3;
          v369 = operator new(v368, (std::align_val_t)0x20uLL);
          *(_QWORD *)v1128 = v369;
          v370 = (v366 >> 2);
          *(_DWORD *)&v1128[16] = v351;
          *(_DWORD *)&v1128[20] = v366 >> 2;
          if (*(_DWORD *)&v1128[20] && (_DWORD)v351)
          {
            v371 = 0;
            v372 = 0;
            v373 = v1125.__r_.__value_.__r.__words[2];
            v374 = v1125.__r_.__value_.__r.__words[0];
            do
            {
              v375 = *(_DWORD *)(v365 + 4 * v372);
              v376 = v349;
              v377 = v371;
              v378 = v355;
              do
              {
                v379 = *v376++;
                v380 = v375 + v379 * v373;
                v381 = v379 + v375 * v373;
                if (v379 <= v375)
                  v382 = v381;
                else
                  v382 = v380;
                v369[v377++] = *(_QWORD *)(v374 + 8 * v382);
                --v378;
              }
              while (v378);
              ++v372;
              v371 += v351;
            }
            while (v372 != v370);
          }
          v383 = operator new((((2 * v366 * v367) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v293 = v295;
          if ((_DWORD)v367)
          {
            v384 = 0;
            v385 = 0;
            v386 = v1125.__r_.__value_.__r.__words[2];
            v387 = v1125.__r_.__value_.__r.__words[0];
            v388 = 1;
            do
            {
              v389 = 0;
              v390 = *(_DWORD *)(v365 + 4 * v385);
              do
              {
                v391 = *(_DWORD *)(v365 + 4 * v389);
                if (v391 <= v390)
                  v392 = v391 + v390 * v386;
                else
                  v392 = v390 + v391 * v386;
                v383[(v384 + v389++)] = *(_QWORD *)(v387 + 8 * v392);
              }
              while (v388 != v389);
              ++v385;
              ++v388;
              v384 += v367;
            }
            while (v385 != v370);
          }
          v122 = v1037;
          v393 = v1037[11];
          v1037[11] = v383;
          v1037[12] = ((((2 * v366 * v367) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0) >> 3;
          *((_DWORD *)v1037 + 26) = v367;
          *((_DWORD *)v1037 + 27) = v367;
          if (v393)
            MEMORY[0x212BC6368](v393, 0x1000C8000313F17);
          v1104.__r_.__value_.__s.__data_[0] = 1;
          v115 = v973;
          v394 = v973[1951];
          if (!v394)
            sub_20E86D37C();
          v395 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *, _BYTE *, std::string *, void **, std::string *))(*(_QWORD *)v394 + 48))(v394, v1106, &v1127, v1128, &v1104, v295, &v1126);
          if (*(_QWORD *)v1128)
            MEMORY[0x212BC6368](*(_QWORD *)v1128, 0x1000C8000313F17);
          if (*(_QWORD *)v1106)
            MEMORY[0x212BC6368](*(_QWORD *)v1106, 0x1000C8000313F17);
          if (v1125.__r_.__value_.__r.__words[0])
            MEMORY[0x212BC6368](v1125.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          if (v1126.__r_.__value_.__r.__words[0])
            MEMORY[0x212BC6368](v1126.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          if (v1127.__r_.__value_.__r.__words[0])
            MEMORY[0x212BC6368](v1127.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          if ((v395 & 1) == 0)
            goto LABEL_645;
          goto LABEL_472;
        }
        v409 = (8 * v404 + 31) & 0xFFFFFFFE0;
        v410 = (float64x2_t *)operator new(v409, (std::align_val_t)0x20uLL);
        if ((_DWORD)v406)
        {
          v411 = (v406 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v412 = (double *)v410;
          v413 = (double *)(v400 + 355640);
          if (v411 < 5)
            goto LABEL_1172;
          v412 = (double *)v410;
          v413 = (double *)(v400 + 355640);
          if ((unint64_t)&v410[-22227] - v400 - 8 < 0x20)
            goto LABEL_1172;
          v414 = v411 + 1;
          v415 = v414 & 0x3FFFFFFFFFFFFFFCLL;
          v412 = &v410->f64[v415];
          v413 = &v402[v415];
          v416 = (float64x2_t *)(v400 + 355656);
          v417 = v410 + 1;
          v418 = v414 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v419 = vnegq_f64(*v416);
            v417[-1] = vnegq_f64(v416[-1]);
            *v417 = v419;
            v416 += 2;
            v417 += 2;
            v418 -= 4;
          }
          while (v418);
          if (v414 != (v414 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1172:
            do
            {
              v420 = *v413++;
              *v412++ = -v420;
            }
            while (v412 != &v410->f64[v406]);
          }
        }
        v1127.__r_.__value_.__r.__words[0] = (std::string::size_type)v410;
        v1127.__r_.__value_.__l.__size_ = v409 >> 3;
LABEL_506:
        MEMORY[0x212BC6368](v400 + 355640, 0x1000C8000313F17);
        goto LABEL_433;
      }
      LODWORD(v1125.__r_.__value_.__r.__words[2]) = v304;
      HIDWORD(v1125.__r_.__value_.__r.__words[2]) = v304;
      v307 = v304 * (unint64_t)v304;
      if (v1125.__r_.__value_.__l.__size_ < v307)
      {
        if (v1125.__r_.__value_.__r.__words[0])
          MEMORY[0x212BC6368](v1125.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
        v308 = (8 * v307 + 31) & 0xFFFFFFFFFFFFFFE0;
        v1125.__r_.__value_.__r.__words[0] = 0;
        v1125.__r_.__value_.__l.__size_ = v308 >> 3;
        v306 = (std::string::pointer)operator new(v308, (std::align_val_t)0x20uLL);
        v1125.__r_.__value_.__r.__words[0] = (std::string::size_type)v306;
      }
    }
    if (v305 != v306)
    {
      sub_20F8F0C10((uint64_t)&v1125, (uint64_t)v1128);
      goto LABEL_432;
    }
    v319 = v304 * v304;
    v320 = (8 * v319 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)&v1106[8] = v320 >> 3;
    *(_QWORD *)v1106 = operator new(v320, (std::align_val_t)0x20uLL);
    *(_DWORD *)&v1106[16] = v304;
    *(_DWORD *)&v1106[20] = v304;
    sub_20F8F0C10((uint64_t)v1106, (uint64_t)v1128);
    v321 = *(_QWORD *)v1106;
    if ((_DWORD)v319)
    {
      v322 = (v319 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v322 < 5)
      {
        v323 = *(uint64_t **)v1106;
        v324 = (char *)(v303 + 44352);
        do
        {
LABEL_429:
          v348 = *v323++;
          *(_QWORD *)v324 = v348;
          v324 += 8;
        }
        while (v324 != &v305[8 * v319]);
        goto LABEL_430;
      }
      v323 = *(uint64_t **)v1106;
      v324 = (char *)(v303 + 44352);
      if ((unint64_t)(v303 - *(_QWORD *)v1106 + 44352) < 0x20)
        goto LABEL_429;
      v342 = v322 + 1;
      v343 = 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL);
      v323 = (uint64_t *)(*(_QWORD *)v1106 + v343);
      v324 = &v305[v343];
      v344 = (_OWORD *)(v303 + 44368);
      v345 = (__int128 *)(*(_QWORD *)v1106 + 16);
      v346 = v342 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v347 = *v345;
        *(v344 - 1) = *(v345 - 1);
        *v344 = v347;
        v344 += 2;
        v345 += 2;
        v346 -= 4;
      }
      while (v346);
      if (v342 != (v342 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_429;
    }
LABEL_430:
    if (!v321)
      goto LABEL_432;
    goto LABEL_431;
  }
  if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_336;
LABEL_355:
  operator delete(v1126.__r_.__value_.__l.__data_);
  if ((v1106[23] & 0x80000000) != 0)
    goto LABEL_356;
LABEL_337:
  if ((v1128[23] & 0x80000000) == 0)
    goto LABEL_338;
LABEL_357:
  operator delete(*(void **)v1128);
  if (SHIBYTE(v1127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_358;
LABEL_339:
  v293 = (void **)(v1037 + 11);
  v294 = v1033;
  if (v1033[1])
    goto LABEL_340;
LABEL_359:
  if (*(_BYTE *)(v1030 + 58050))
  {
    v309 = *(_QWORD *)(v1030 + 57200);
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)v1106 = _Q1;
    *(_OWORD *)&v1106[16] = _Q1;
    v1107 = _Q1;
    v1108 = _Q1;
    v1109 = _Q1;
    v1110 = _Q1;
    v1111 = _Q1;
    v1112 = _Q1;
    v1113 = _Q1;
    v1114 = _Q1;
    v1115 = _Q1;
    v1116 = _Q1;
    v1117 = _Q1;
    v1118 = _Q1;
    v1119 = _Q1;
    v1120 = _Q1;
    v1121 = _Q1;
    v1122 = _Q1;
    v1123 = _Q1;
    v1127.__r_.__value_.__r.__words[0] = 0;
    v1126.__r_.__value_.__r.__words[0] = v309;
    v1103.__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v1125.__r_.__value_.__l.__data_) = v1044;
    LODWORD(v1104.__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)v1128 = v1030 + 21120;
    *(_QWORD *)&v1128[8] = &v1104;
    *(_QWORD *)&v1128[16] = v1106;
    *(_QWORD *)&v1128[24] = &v1125;
    *(_QWORD *)&v1129 = &v1103;
    *((_QWORD *)&v1129 + 1) = &v1127;
    *(_QWORD *)&v1130 = &v1126;
    sub_20F928268(v1128);
  }
  else if (!*(_BYTE *)(v1030 + 18568))
  {
    v311 = *(_QWORD *)(v1030 + 57200);
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)v1106 = _Q1;
    *(_OWORD *)&v1106[16] = _Q1;
    v1107 = _Q1;
    v1108 = _Q1;
    v1109 = _Q1;
    v1110 = _Q1;
    v1111 = _Q1;
    v1112 = _Q1;
    v1113 = _Q1;
    v1114 = _Q1;
    v1115 = _Q1;
    v1116 = _Q1;
    v1117 = _Q1;
    v1118 = _Q1;
    v1119 = _Q1;
    v1120 = _Q1;
    v1121 = _Q1;
    v1122 = _Q1;
    v1123 = _Q1;
    v1127.__r_.__value_.__r.__words[0] = 0;
    v1126.__r_.__value_.__r.__words[0] = v311;
    v1103.__r_.__value_.__s.__data_[0] = 0;
    LODWORD(v1125.__r_.__value_.__l.__data_) = v1044;
    LODWORD(v1104.__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)v1128 = v1030 + 18576;
    *(_QWORD *)&v1128[8] = &v1104;
    *(_QWORD *)&v1128[16] = v1106;
    *(_QWORD *)&v1128[24] = &v1125;
    *(_QWORD *)&v1129 = &v1103;
    *((_QWORD *)&v1129 + 1) = &v1127;
    *(_QWORD *)&v1130 = &v1126;
    sub_20F9D9FCC(v1128);
  }
  sub_20F8BCDD8(v1030);
  if (!*(_BYTE *)(v1030 + 58050))
  {
    v315 = (int *)v1037[5];
    v316 = (int *)v1037[6];
    v1124 = 0;
    if (v315 == v316)
    {
      v317 = 0;
    }
    else
    {
      v317 = 0;
      do
      {
        v318 = *v315++;
        *(_DWORD *)&v1106[4 * v317] = v318;
        v317 = ++v1124;
      }
      while (v315 != v316);
    }
    v325 = (char *)v1037[8];
    v326 = (char *)v1037[9];
    for (j = v326 - v325; v325 != v326; ++v1124)
    {
      v328 = *(_DWORD *)v325;
      v325 += 4;
      *(_DWORD *)&v1106[4 * v317] = v328;
      v317 = v1124 + 1;
    }
    bzero((void *)(*(_QWORD *)(v1030 + 57912) + 43616), 0x2C0uLL);
    kdebug_trace();
    kdebug_trace();
    v329 = *(unsigned int **)(v1030 + 57912);
    v1105 = 0;
    if (*(_BYTE *)(v1030 + 58052))
    {
      v330 = operator new(0x20BD00uLL, (std::align_val_t)0x40uLL);
      sub_20F901CC0((uint64_t)v330, (uint64_t)v329);
      v1105 = v330;
    }
    else
    {
      v330 = 0;
    }
    v331 = v329 + 90955;
    if ((v329[90956] != -1163005939
       || v329[90957] != -1163005939
       || v329[90958] != -1163005939
       || v329[90959] != -1163005939
       || v329[90960] != -1163005939
       || v329[90961] != -1163005939
       || v329[90962] != -1163005939
       || v329[90963] != -1163005939
       || v329[90964] != -1163005939
       || v329[90965] != -1163005939
       || v329[90966] != -1163005939
       || v329[90967] != -1163005939
       || v329[90968] != -1163005939
       || v329[90969] != -1163005939
       || v329[90970] != -1163005939
       || v329[90971] != -1163005939)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 4385, (uint64_t)"fullData.checkForOverwrites()", 29, (uint64_t)"LPS guard bytes overwritten before Schur complement.", 52, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v1007 = v1030 + 57912;
    v1041 = (uint64_t *)(v1030 + 57904);
    sub_20F9042D0((unsigned int *)&v1127, *(_QWORD *)(v1030 + 57904), (uint64_t)v329);
    v1027 = (uint64_t)v330;
    v1004 = j;
    v1034 = j >> 2;
    v1014 = v329 + 536368;
    v1009 = v329 + 7824;
    v332 = (_BYTE *)(v1030 + 58049);
    if (*(_BYTE *)(v1030 + 58049))
    {
      v1017 = 0;
LABEL_412:
      v333 = 0;
      goto LABEL_520;
    }
    v334 = *v1041;
    if (*(_BYTE *)(*v1041 + 40))
      *(_BYTE *)(v334 + 40) = 0;
    v335 = *(_DWORD *)(v334 + 68);
    if (v335 == 3)
    {
      v337 = atomic_load((unsigned __int8 *)&qword_254A6B810);
      if ((v337 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B810))
      {
        sub_20F9044CC(&qword_254A6B8D0);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A6B8D0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6B810);
      }
      v1126.__r_.__value_.__r.__words[0] = lacc_hardware::LaccHardware::operator lacc::CallInterface &();
      v998 = (_OWORD *)(v334 + 16);
      v1126.__r_.__value_.__l.__size_ = v334 + 16;
      lacc_hardware::LaccHardware::operator lacc::CallInterface &();
      v338 = byte_254A6B8E7;
      v339 = qword_254A6B8D0;
      lacc::LaccABI::LaccABI();
      if (v338 >= 0)
        v340 = &qword_254A6B8D0;
      else
        v340 = (uint64_t *)v339;
      v1001 = (const char *)v340;
      kdebug_trace();
      lacc::LaccABI::insert((lacc::LaccABI *)v1128, v329);
      lacc::LaccABI::insert((lacc::LaccABI *)v1128, &v1127);
      lacc::LaccABI::insert((lacc::LaccABI *)v1128, v1106);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      lacc::LaccABI::reserve((lacc::LaccABI *)v1128);
      kdebug_trace();
      lacc::LaccABI::allocate_stack((lacc::LaccABI *)v1128);
      kdebug_trace();
      lacc::LaccABI::write_stack_items((lacc::LaccABI *)v1128);
      lacc::LaccABI::push((lacc::LaccABI *)v1128);
      lacc::LaccABI::push((lacc::LaccABI *)v1128);
      lacc::LaccABI::push((lacc::LaccABI *)v1128);
      lacc::LaccABI::push((lacc::LaccABI *)v1128);
      lacc::LaccABI::push((lacc::LaccABI *)v1128);
      kdebug_trace();
      v1002 = lacc::LaccABI::call((lacc::LaccABI *)v1128, v1001);
      if (v1002)
      {
        kdebug_trace();
        lacc::LaccABI::pop((lacc::LaccABI *)v1128);
        lacc::LaccABI::pop((lacc::LaccABI *)v1128);
        lacc::LaccABI::pop((lacc::LaccABI *)v1128);
        lacc::LaccABI::pop((lacc::LaccABI *)v1128);
        lacc::LaccABI::pop((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::release((lacc::LaccABI *)v1128);
        lacc::LaccABI::extract((lacc::LaccABI *)v1128, v1106);
        lacc::LaccABI::extract((lacc::LaccABI *)v1128, &v1127);
        lacc::LaccABI::extract((lacc::LaccABI *)v1128, v329);
        v341 = lacc::LaccABI::get_return_u32((lacc::LaccABI *)v1128) != 0;
        kdebug_trace();
      }
      else
      {
        v341 = 0;
      }
      lacc::LaccABI::~LaccABI((lacc::LaccABI *)v1128);
      lacc::Counts::read_from();
      v122 = v1037;
      v123 = (_QWORD *)v1030;
      v124 = v1044;
      v432 = *(_QWORD *)&v1128[16];
      *v998 = *(_OWORD *)v1128;
      *(_QWORD *)(v334 + 32) = v432;
      *(_BYTE *)(v334 + 40) = 1;
      v433 = *(_DWORD *)(v334 + 16);
      if (v433)
        *(_DWORD *)v998 = v433 - 2;
      v434 = v341 | 0x100;
      if (!v1002)
        v434 = 0;
      v1017 = v434;
      v333 = v434 >> 8;
    }
    else
    {
      if (v335)
        abort();
      v1017 = sub_20FC92D7C((uint64_t)v329, (uint64_t)&v1127, (uint64_t)v1106, v1034, *(_BYTE *)(v1030 + 58048) != 0);
      v333 = 1;
    }
    if (*(_BYTE *)(v334 + 72))
      sub_2100F5CD4(v334, (uint64_t)"FlatWorld_marginalize_DMA]", 25, v333);
    if (*v332)
    {
      if (!v333)
      {
LABEL_520:
        kdebug_trace();
        if (!v333)
          goto LABEL_563;
        v435 = *v1041;
        if (*(_DWORD *)(*v1041 + 68) == 3 && *(_BYTE *)(v435 + 40))
          v123[7254] += *(unsigned int *)(v435 + 16);
        if (v1017)
          goto LABEL_543;
        std::to_string(&v1104, 0);
        v436 = std::string::insert(&v1104, 0, "error: LACC Schur complement returned ", 0x26uLL);
        v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
        v1125.__r_.__value_.__r.__words[2] = v436->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1125.__r_.__value_.__l.__data_ = v437;
        v436->__r_.__value_.__l.__size_ = 0;
        v436->__r_.__value_.__r.__words[2] = 0;
        v436->__r_.__value_.__r.__words[0] = 0;
        v438 = std::string::append(&v1125, ", ", 2uLL);
        v439 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
        v1126.__r_.__value_.__r.__words[2] = v438->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1126.__r_.__value_.__l.__data_ = v439;
        v438->__r_.__value_.__l.__size_ = 0;
        v438->__r_.__value_.__r.__words[2] = 0;
        v438->__r_.__value_.__r.__words[0] = 0;
        v440 = *v1041;
        if (*(_DWORD *)(*v1041 + 68) == 3 && *(_BYTE *)(v440 + 40))
          v441 = *(_DWORD *)(v440 + 16);
        else
          v441 = 0;
        std::to_string(&v1103, v441);
        if ((v1103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v442 = &v1103;
        else
          v442 = (std::string *)v1103.__r_.__value_.__r.__words[0];
        if ((v1103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v443 = HIBYTE(v1103.__r_.__value_.__r.__words[2]);
        else
          v443 = v1103.__r_.__value_.__l.__size_;
        v444 = std::string::append(&v1126, (const std::string::value_type *)v442, v443);
        v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
        *(_QWORD *)&v1128[16] = *((_QWORD *)&v444->__r_.__value_.__l + 2);
        *(_OWORD *)v1128 = v445;
        v444->__r_.__value_.__l.__size_ = 0;
        v444->__r_.__value_.__r.__words[2] = 0;
        v444->__r_.__value_.__r.__words[0] = 0;
        v446 = std::string::append((std::string *)v1128, " packets.", 9uLL);
        v447 = *(_OWORD *)&v446->__r_.__value_.__l.__data_;
        v1099 = v446->__r_.__value_.__r.__words[2];
        *(_OWORD *)v1098 = v447;
        v446->__r_.__value_.__l.__size_ = 0;
        v446->__r_.__value_.__r.__words[2] = 0;
        v446->__r_.__value_.__r.__words[0] = 0;
        v448 = v123[7172];
        if (v448)
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v448 + 48))(v448, v1098);
        if (SHIBYTE(v1099) < 0)
        {
          operator delete(v1098[0]);
          if ((v1128[23] & 0x80000000) == 0)
          {
LABEL_539:
            if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_540;
            goto LABEL_676;
          }
        }
        else if ((v1128[23] & 0x80000000) == 0)
        {
          goto LABEL_539;
        }
        operator delete(*(void **)v1128);
        if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_540:
          if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_541;
          goto LABEL_677;
        }
LABEL_676:
        operator delete(v1103.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_541:
          if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_542;
LABEL_678:
          operator delete(v1125.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1104.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_679;
LABEL_543:
          v449 = *v331;
          if (!*v331)
            goto LABEL_563;
          goto LABEL_544;
        }
LABEL_677:
        operator delete(v1126.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_542:
          if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_543;
LABEL_679:
          operator delete(v1104.__r_.__value_.__l.__data_);
          v449 = *v331;
          if (!*v331)
          {
LABEL_563:
            if (*v1014 == 1038)
              goto LABEL_586;
            sub_20F8F1460(&v1103, *v1014);
            v459 = std::string::insert(&v1103, 0, "error: LACC Schur complement not executed completely: ", 0x36uLL);
            v460 = *(_OWORD *)&v459->__r_.__value_.__l.__data_;
            v1104.__r_.__value_.__r.__words[2] = v459->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1104.__r_.__value_.__l.__data_ = v460;
            v459->__r_.__value_.__l.__size_ = 0;
            v459->__r_.__value_.__r.__words[2] = 0;
            v459->__r_.__value_.__r.__words[0] = 0;
            v461 = std::string::append(&v1104, " < ", 3uLL);
            v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
            v1125.__r_.__value_.__r.__words[2] = v461->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1125.__r_.__value_.__l.__data_ = v462;
            v461->__r_.__value_.__l.__size_ = 0;
            v461->__r_.__value_.__r.__words[2] = 0;
            v461->__r_.__value_.__r.__words[0] = 0;
            sub_20F8F1460(&v1102, 0x40Eu);
            if ((v1102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v463 = &v1102;
            else
              v463 = (std::string *)v1102.__r_.__value_.__r.__words[0];
            if ((v1102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v464 = HIBYTE(v1102.__r_.__value_.__r.__words[2]);
            else
              v464 = v1102.__r_.__value_.__l.__size_;
            v465 = std::string::append(&v1125, (const std::string::value_type *)v463, v464);
            v466 = *(_OWORD *)&v465->__r_.__value_.__l.__data_;
            v1126.__r_.__value_.__r.__words[2] = v465->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1126.__r_.__value_.__l.__data_ = v466;
            v465->__r_.__value_.__l.__size_ = 0;
            v465->__r_.__value_.__r.__words[2] = 0;
            v465->__r_.__value_.__r.__words[0] = 0;
            v467 = std::string::append(&v1126, ", last in ", 0xAuLL);
            v468 = *(_OWORD *)&v467->__r_.__value_.__l.__data_;
            *(_QWORD *)&v1128[16] = *((_QWORD *)&v467->__r_.__value_.__l + 2);
            *(_OWORD *)v1128 = v468;
            v467->__r_.__value_.__l.__size_ = 0;
            v467->__r_.__value_.__r.__words[2] = 0;
            v467->__r_.__value_.__r.__words[0] = 0;
            sub_20F8F162C(&v1101, *v1009);
            if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v469 = &v1101;
            else
              v469 = (std::string *)v1101.__r_.__value_.__r.__words[0];
            if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v470 = HIBYTE(v1101.__r_.__value_.__r.__words[2]);
            else
              v470 = v1101.__r_.__value_.__l.__size_;
            v471 = std::string::append((std::string *)v1128, (const std::string::value_type *)v469, v470);
            v472 = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
            v1095 = v471->__r_.__value_.__r.__words[2];
            *(_OWORD *)v1094 = v472;
            v471->__r_.__value_.__l.__size_ = 0;
            v471->__r_.__value_.__r.__words[2] = 0;
            v471->__r_.__value_.__r.__words[0] = 0;
            v473 = v123[7172];
            if (v473)
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v473 + 48))(v473, v1094);
            if (SHIBYTE(v1095) < 0)
            {
              operator delete(v1094[0]);
              if ((SHIBYTE(v1101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_580:
                if ((v1128[23] & 0x80000000) == 0)
                  goto LABEL_581;
                goto LABEL_605;
              }
            }
            else if ((SHIBYTE(v1101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_580;
            }
            operator delete(v1101.__r_.__value_.__l.__data_);
            if ((v1128[23] & 0x80000000) == 0)
            {
LABEL_581:
              if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_582;
              goto LABEL_606;
            }
LABEL_605:
            operator delete(*(void **)v1128);
            if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_582:
              if ((SHIBYTE(v1102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_583;
              goto LABEL_607;
            }
LABEL_606:
            operator delete(v1126.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_583:
              if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_584;
              goto LABEL_608;
            }
LABEL_607:
            operator delete(v1102.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_584:
              if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_585;
              goto LABEL_609;
            }
LABEL_608:
            operator delete(v1125.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_585:
              if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_586;
              goto LABEL_610;
            }
LABEL_609:
            operator delete(v1104.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_586:
              if (v329[90956] == -1163005939)
              {
LABEL_587:
                if (v329[90957] == -1163005939
                  && v329[90958] == -1163005939
                  && v329[90959] == -1163005939
                  && v329[90960] == -1163005939
                  && v329[90961] == -1163005939
                  && v329[90962] == -1163005939
                  && v329[90963] == -1163005939
                  && v329[90964] == -1163005939
                  && v329[90965] == -1163005939
                  && v329[90966] == -1163005939
                  && v329[90967] == -1163005939
                  && v329[90968] == -1163005939
                  && v329[90969] == -1163005939
                  && v329[90970] == -1163005939
                  && v329[90971] == -1163005939)
                {
LABEL_612:
                  v474 = (_DWORD *)v1027;
                  if (!*(_BYTE *)(v1030 + 58052))
                    goto LABEL_637;
                  v475 = sub_20F8F19BC((uint64_t)v329, v1027);
                  v476 = *v1041;
                  v477 = *(_DWORD *)(*v1041 + 68);
                  *(_DWORD *)(*v1041 + 68) = 0;
                  if (*v332)
                    goto LABEL_633;
                  if (*(_BYTE *)(v476 + 40))
                    *(_BYTE *)(v476 + 40) = 0;
                  v475 = sub_20FC92D7C((uint64_t)v329, (uint64_t)&v1127, (uint64_t)v1106, v1034, 0);
                  v478 = v475;
                  if (*(_BYTE *)(v476 + 72))
                    v475 = (uint64_t)sub_2100F5CD4(v476, (uint64_t)"FlatWorld_marginalize_DMA]", 25, 1);
                  v479 = *v332 ? 1 : v478;
                  if ((v479 & 1) != 0)
                  {
LABEL_633:
                    v474 = (_DWORD *)v1027;
                    if ((v477 - 1) >= 2)
                    {
                      v485 = *v1041;
                      if (v477 != 3
                        || lacc_hardware::LaccHardware::supported((lacc_hardware::LaccHardware *)v475))
                      {
                        *(_DWORD *)(v485 + 68) = v477;
                      }
                    }
LABEL_637:
                    if (v1017)
                      v486 = v333;
                    else
                      v486 = 0;
                    if (!*v332 && !v486)
                    {
                      if (v474)
                      {
                        v487 = sub_20F903EA8(v474);
                        MEMORY[0x212BC638C](v487, 64);
                      }
                      kdebug_trace();
                      goto LABEL_645;
                    }
                    if (v474)
                    {
                      v488 = sub_20F903EA8(v474);
                      MEMORY[0x212BC638C](v488, 64);
                    }
                    kdebug_trace();
                    v115 = v973;
                    v489 = *(_QWORD *)v1007 + 44352;
                    v490 = 197 * (*(_DWORD *)(*(_QWORD *)v1007 + 31048) - v1034);
                    v491 = (char *)v122[11];
                    if (*((_DWORD *)v122 + 26) != (_DWORD)v1034 || *((_DWORD *)v122 + 27) != (_DWORD)v1034)
                    {
                      if ((char *)v489 == v491)
                      {
                        v499 = (((2 * v1004 * v1034) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0;
                        v506 = (char *)operator new(v499, (std::align_val_t)0x20uLL);
                        v501 = v506;
                        if ((_DWORD)v1034)
                        {
                          v507 = (v1004 >> 2);
                          v508 = 8 * v507;
                          v509 = v506;
                          v122 = v1037;
                          do
                          {
                            memmove(v509, (const void *)(v489 + 8 * v490), v508);
                            v490 += 196;
                            v509 += v508;
                            --v507;
                          }
                          while (v507);
                          v505 = v1034;
                          v498 = v1034;
                          goto LABEL_715;
                        }
                        v505 = 0;
                        v498 = 0;
                        goto LABEL_714;
                      }
                      *((_DWORD *)v122 + 26) = v1034;
                      *((_DWORD *)v122 + 27) = v1034;
                      v492 = v1034 * (unint64_t)v1034;
                      if (v122[12] < v492)
                      {
                        if (v491)
                          MEMORY[0x212BC6368](v491, 0x1000C8000313F17);
                        v493 = (8 * v492 + 31) & 0xFFFFFFFFFFFFFFE0;
                        v122[11] = 0;
                        v122[12] = v493 >> 3;
                        v491 = (char *)operator new(v493, (std::align_val_t)0x20uLL);
                        *v293 = v491;
                        v115 = v973;
                        v122 = v1037;
                        v124 = v1044;
                      }
                    }
                    if ((char *)v489 != v491)
                    {
                      if ((_DWORD)v1034)
                      {
                        v494 = (v1004 >> 2);
                        v495 = 8 * v494;
                        do
                        {
                          memmove(v491, (const void *)(v489 + 8 * v490), v495);
                          v490 += 196;
                          v491 += v495;
                          --v494;
                        }
                        while (v494);
                      }
LABEL_716:
                      sub_20F8F2908(v123, v124);
                      if (__val)
                        goto LABEL_473;
                      goto LABEL_717;
                    }
                    v496 = v122;
                    v497 = *((_DWORD *)v122 + 26);
                    v498 = *((_DWORD *)v496 + 27);
                    v499 = (8 * (v498 * v497) + 31) & 0xFFFFFFFE0;
                    v500 = (char *)operator new(v499, (std::align_val_t)0x20uLL);
                    v501 = v500;
                    if ((_DWORD)v1034)
                    {
                      v502 = (v1004 >> 2);
                      v503 = 8 * v502;
                      v504 = v500;
                      do
                      {
                        memmove(v504, (const void *)(v489 + 8 * v490), v503);
                        v490 += 196;
                        v504 += v503;
                        --v502;
                      }
                      while (v502);
                      v505 = v497;
                      v122 = v1037;
                      v123 = (_QWORD *)v1030;
                      goto LABEL_715;
                    }
                    v505 = v497;
LABEL_714:
                    v122 = v1037;
LABEL_715:
                    v122[11] = v501;
                    v122[12] = v499 >> 3;
                    *((_DWORD *)v122 + 26) = v505;
                    *((_DWORD *)v122 + 27) = v498;
                    MEMORY[0x212BC6368](v489, 0x1000C8000313F17);
                    v115 = v973;
                    v124 = v1044;
                    goto LABEL_716;
                  }
                  std::to_string(&v1126, 0);
                  v480 = std::string::insert(&v1126, 0, "Call to marginalize failed: ", 0x1CuLL);
                  v481 = *(_OWORD *)&v480->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v1128[16] = *((_QWORD *)&v480->__r_.__value_.__l + 2);
                  *(_OWORD *)v1128 = v481;
                  v480->__r_.__value_.__l.__size_ = 0;
                  v480->__r_.__value_.__r.__words[2] = 0;
                  v480->__r_.__value_.__r.__words[0] = 0;
                  if (v1128[23] >= 0)
                    v482 = v1128;
                  else
                    v482 = *(_BYTE **)v1128;
                  if (v1128[23] >= 0)
                    v483 = v1128[23];
                  else
                    v483 = *(_QWORD *)&v1128[8];
                  v475 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 4469, (uint64_t)"(m_skipHWCalls || (ok2 && *ok2))", 32, (uint64_t)v482, v483, (void (*)(void **))sub_21023DDB0);
                  v484 = v475;
                  if ((v1128[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v1128);
                    if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_630:
                      if (!v484)
                        goto LABEL_631;
                      goto LABEL_712;
                    }
                  }
                  else if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_630;
                  }
                  operator delete(v1126.__r_.__value_.__l.__data_);
                  if (!v484)
                  {
LABEL_631:
                    if (!*v332)
                      sub_20F8D5014((uint64_t)v123, "error: Schur complement offload masking failed in lpMarginalize.");
                    goto LABEL_633;
                  }
LABEL_712:
                  abort();
                }
              }
LABEL_611:
              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 4443, (uint64_t)"fullData.checkForOverwrites()", 29, (uint64_t)"LPS guard bytes overwritten after Schur complement.", 51, (void (*)(void **))sub_21023DDB0))goto LABEL_612;
LABEL_1160:
              abort();
            }
LABEL_610:
            operator delete(v1103.__r_.__value_.__l.__data_);
            if (v329[90956] == -1163005939)
              goto LABEL_587;
            goto LABEL_611;
          }
LABEL_544:
          sub_20F8F17F4(&v1125, v449);
          v450 = std::string::insert(&v1125, 0, "error: LACC Schur complement failed: ", 0x25uLL);
          v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
          v1126.__r_.__value_.__r.__words[2] = v450->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v1126.__r_.__value_.__l.__data_ = v451;
          v450->__r_.__value_.__l.__size_ = 0;
          v450->__r_.__value_.__r.__words[2] = 0;
          v450->__r_.__value_.__r.__words[0] = 0;
          v452 = std::string::append(&v1126, " != ", 4uLL);
          v453 = *(_OWORD *)&v452->__r_.__value_.__l.__data_;
          *(_QWORD *)&v1128[16] = *((_QWORD *)&v452->__r_.__value_.__l + 2);
          *(_OWORD *)v1128 = v453;
          v452->__r_.__value_.__l.__size_ = 0;
          v452->__r_.__value_.__r.__words[2] = 0;
          v452->__r_.__value_.__r.__words[0] = 0;
          sub_20F8F17F4(&v1104, 0);
          if ((v1104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v454 = &v1104;
          else
            v454 = (std::string *)v1104.__r_.__value_.__r.__words[0];
          if ((v1104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v455 = HIBYTE(v1104.__r_.__value_.__r.__words[2]);
          else
            v455 = v1104.__r_.__value_.__l.__size_;
          v456 = std::string::append((std::string *)v1128, (const std::string::value_type *)v454, v455);
          v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
          v1097 = v456->__r_.__value_.__r.__words[2];
          *(_OWORD *)v1096 = v457;
          v456->__r_.__value_.__l.__size_ = 0;
          v456->__r_.__value_.__r.__words[2] = 0;
          v456->__r_.__value_.__r.__words[0] = 0;
          v458 = v123[7172];
          if (v458)
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v458 + 48))(v458, v1096);
          if (SHIBYTE(v1097) < 0)
          {
            operator delete(v1096[0]);
            if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_554:
              if ((v1128[23] & 0x80000000) == 0)
                goto LABEL_555;
              goto LABEL_560;
            }
          }
          else if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_554;
          }
          operator delete(v1104.__r_.__value_.__l.__data_);
          if ((v1128[23] & 0x80000000) == 0)
          {
LABEL_555:
            if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_556;
            goto LABEL_561;
          }
LABEL_560:
          operator delete(*(void **)v1128);
          if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_556:
            if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_563;
LABEL_562:
            operator delete(v1125.__r_.__value_.__l.__data_);
            goto LABEL_563;
          }
LABEL_561:
          operator delete(v1126.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_563;
          goto LABEL_562;
        }
        goto LABEL_678;
      }
LABEL_519:
      v333 = 1;
      goto LABEL_520;
    }
    if (v333)
      goto LABEL_519;
    sub_2100F5F00((_QWORD *)*v1041, (unsigned __int8 *)&v1102);
    v518 = std::string::insert(&v1102, 0, "Call to marginalize did not return as expected: ", 0x30uLL);
    v519 = *(_OWORD *)&v518->__r_.__value_.__l.__data_;
    v1103.__r_.__value_.__r.__words[2] = v518->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1103.__r_.__value_.__l.__data_ = v519;
    v518->__r_.__value_.__l.__size_ = 0;
    v518->__r_.__value_.__r.__words[2] = 0;
    v518->__r_.__value_.__r.__words[0] = 0;
    v520 = std::string::append(&v1103, ", cp: ", 6uLL);
    v521 = *(_OWORD *)&v520->__r_.__value_.__l.__data_;
    v1104.__r_.__value_.__r.__words[2] = v520->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1104.__r_.__value_.__l.__data_ = v521;
    v520->__r_.__value_.__l.__size_ = 0;
    v520->__r_.__value_.__r.__words[2] = 0;
    v520->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F1460(&v1101, *v1014);
    if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v522 = &v1101;
    else
      v522 = (std::string *)v1101.__r_.__value_.__r.__words[0];
    if ((v1101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v523 = HIBYTE(v1101.__r_.__value_.__r.__words[2]);
    else
      v523 = v1101.__r_.__value_.__l.__size_;
    v524 = std::string::append(&v1104, (const std::string::value_type *)v522, v523);
    v525 = *(_OWORD *)&v524->__r_.__value_.__l.__data_;
    v1125.__r_.__value_.__r.__words[2] = v524->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1125.__r_.__value_.__l.__data_ = v525;
    v524->__r_.__value_.__l.__size_ = 0;
    v524->__r_.__value_.__r.__words[2] = 0;
    v524->__r_.__value_.__r.__words[0] = 0;
    v526 = std::string::append(&v1125, ", ov: ", 6uLL);
    v527 = *(_OWORD *)&v526->__r_.__value_.__l.__data_;
    v1126.__r_.__value_.__r.__words[2] = v526->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1126.__r_.__value_.__l.__data_ = v527;
    v526->__r_.__value_.__l.__size_ = 0;
    v526->__r_.__value_.__r.__words[2] = 0;
    v526->__r_.__value_.__r.__words[0] = 0;
    sub_20F8F162C(&v1100, *v1009);
    if ((v1100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v528 = &v1100;
    else
      v528 = (std::string *)v1100.__r_.__value_.__r.__words[0];
    if ((v1100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v529 = HIBYTE(v1100.__r_.__value_.__r.__words[2]);
    else
      v529 = v1100.__r_.__value_.__l.__size_;
    v530 = std::string::append(&v1126, (const std::string::value_type *)v528, v529);
    v531 = *(_OWORD *)&v530->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1128[16] = *((_QWORD *)&v530->__r_.__value_.__l + 2);
    *(_OWORD *)v1128 = v531;
    v530->__r_.__value_.__l.__size_ = 0;
    v530->__r_.__value_.__r.__words[2] = 0;
    v530->__r_.__value_.__r.__words[0] = 0;
    if (v1128[23] >= 0)
      v532 = v1128;
    else
      v532 = *(_BYTE **)v1128;
    if (v1128[23] >= 0)
      v533 = v1128[23];
    else
      v533 = *(_QWORD *)&v1128[8];
    v534 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/LPFGInterface.hpp", 4410, (uint64_t)"(m_skipHWCalls || ok)", 21, (uint64_t)v532, v533, (void (*)(void **))sub_21023DDB0);
    if ((v1128[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v1128);
      if ((SHIBYTE(v1100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_702:
        if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_703;
        goto LABEL_1154;
      }
    }
    else if ((SHIBYTE(v1100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_702;
    }
    operator delete(v1100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_703:
      if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_704;
      goto LABEL_1155;
    }
LABEL_1154:
    operator delete(v1126.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_704:
      if ((SHIBYTE(v1101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_705;
      goto LABEL_1156;
    }
LABEL_1155:
    operator delete(v1125.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_705:
      if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_706;
      goto LABEL_1157;
    }
LABEL_1156:
    operator delete(v1101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_706:
      if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_707;
      goto LABEL_1158;
    }
LABEL_1157:
    operator delete(v1104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_707:
      if ((SHIBYTE(v1102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_708;
      goto LABEL_1159;
    }
LABEL_1158:
    operator delete(v1103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v1102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_708:
      if (v534)
        goto LABEL_1160;
      goto LABEL_412;
    }
LABEL_1159:
    operator delete(v1102.__r_.__value_.__l.__data_);
    if (v534)
      goto LABEL_1160;
    goto LABEL_412;
  }
  kdebug_trace();
  memset(&v1127, 0, sizeof(v1127));
  v1119 = 0u;
  v1118 = 0u;
  v1117 = 0u;
  v1116 = 0u;
  v1115 = 0u;
  v1114 = 0u;
  v1113 = 0u;
  v1112 = 0u;
  v1111 = 0u;
  v1110 = 0u;
  v1109 = 0u;
  v1108 = 0u;
  v1107 = 0u;
  memset(v1106, 0, sizeof(v1106));
  sub_20F8F2BC0((uint64_t)&v1074, v1030 + 18312, (uint64_t)dword_2103B93C4, (uint64_t)v1106);
  sub_20F8F2ED0(v1030 + 3112, (void **)&v1127.__r_.__value_.__l.__data_, (uint64_t)v1106, (_DWORD **)v1106);
  sub_20F89E908((uint64_t)v1106);
  memset(&v1126, 0, sizeof(v1126));
  memset(&v1125, 0, sizeof(v1125));
  v1119 = 0u;
  v1118 = 0u;
  v1117 = 0u;
  v1116 = 0u;
  v1115 = 0u;
  v1114 = 0u;
  v1113 = 0u;
  v1112 = 0u;
  v1111 = 0u;
  v1110 = 0u;
  v1109 = 0u;
  v1108 = 0u;
  v1107 = 0u;
  memset(v1106, 0, sizeof(v1106));
  v1141 = 0u;
  v1140 = 0u;
  v1139 = 0u;
  v1138 = 0u;
  v1137 = 0u;
  v1136 = 0u;
  v1135 = 0u;
  v1134 = 0u;
  v1133 = 0u;
  v1132 = 0u;
  v1131 = 0u;
  v1130 = 0u;
  v1129 = 0u;
  memset(v1128, 0, sizeof(v1128));
  sub_20F8F2BC0((uint64_t)&v1074, v1030 + 18312, (uint64_t)dword_2103B93C4, (uint64_t)v1106);
  sub_20F8F2BC0((uint64_t)__dst, v1030 + 18312, (uint64_t)dword_2103B93C4, (uint64_t)v1128);
  sub_20F8FAA7C(v1030 + 3112, (void **)&v1126.__r_.__value_.__l.__data_, (uint64_t)&v1125, (uint64_t)v1106, (uint64_t)v1128);
  sub_20F89E908((uint64_t)v1128);
  sub_20F89E908((uint64_t)v1106);
  v1119 = 0u;
  v1118 = 0u;
  v1117 = 0u;
  v1116 = 0u;
  v1115 = 0u;
  v1114 = 0u;
  v1113 = 0u;
  v1112 = 0u;
  v1111 = 0u;
  v1110 = 0u;
  v1109 = 0u;
  v1108 = 0u;
  v1107 = 0u;
  memset(v1106, 0, sizeof(v1106));
  sub_20F8F2BC0((uint64_t)__dst, v1030 + 18312, (uint64_t)dword_2103B93C4, (uint64_t)v1106);
  sub_20F8F2ED0(v1030 + 3112, v293, (uint64_t)v1106, (_DWORD **)v1106);
  sub_20F89E908((uint64_t)v1106);
  memset(v1106, 0, 20);
  if (*(_BYTE *)(v1030 + 57312))
  {
    v1128[0] = 1;
    v313 = *(_QWORD *)(v1030 + 57344);
    if (!v313)
      sub_20E86D37C();
    if (((*(uint64_t (**)(uint64_t, std::string *, _BYTE *, std::string *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v313 + 48))(v313, &v1127, v1106, &v1126, v1128, v293, v1106) & 1) != 0)
    {
LABEL_367:
      v314 = 1;
      goto LABEL_374;
    }
  }
  else if (sub_20F2B67A0((uint64_t)&v1127, (uint64_t)v1106, (uint64_t)&v1126, 1, (uint64_t)v293, (unint64_t *)v1106))
  {
    goto LABEL_367;
  }
  sub_20F8D5014(v1030, "error: Schur complement failed in lpMarginalize.");
  v314 = 0;
LABEL_374:
  if (*(_QWORD *)v1106)
    MEMORY[0x212BC6368](*(_QWORD *)v1106, 0x1000C8000313F17);
  if (v1125.__r_.__value_.__r.__words[0])
    MEMORY[0x212BC6368](v1125.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  if (v1126.__r_.__value_.__r.__words[0])
    MEMORY[0x212BC6368](v1126.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  if (v1127.__r_.__value_.__r.__words[0])
    MEMORY[0x212BC6368](v1127.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  if ((v314 & 1) == 0)
  {
LABEL_645:
    v10 = 1;
    goto LABEL_1149;
  }
LABEL_472:
  if (!__val)
    goto LABEL_717;
LABEL_473:
  if (!v1024 || !*v1019 || !(*((_DWORD *)v122 + 5) * *((_DWORD *)v122 + 4)))
  {
LABEL_717:
    v944 = (void **)(v115 + 4);
    sub_20F8D63EC(v115 + 4, (char **)__dst);
    v1127.__r_.__value_.__r.__words[0] = (std::string::size_type)v293;
    LODWORD(v1126.__r_.__value_.__l.__data_) = 0;
    LODWORD(v1125.__r_.__value_.__l.__data_) = 0;
    v1109 = 0u;
    v1108 = 0u;
    v1107 = 0u;
    memset(v1106, 0, sizeof(v1106));
    v1131 = 0u;
    v1130 = 0u;
    v1129 = 0u;
    memset(v1128, 0, sizeof(v1128));
    v945 = (uint64_t)(v115 + 17);
    sub_20F8E03B8(v115 + 17, (int *)&v1126, &v1125, v1106, v1128);
    sub_20F9106F4((uint64_t)(v115 + 179), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F91117C((uint64_t)(v115 + 359), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F9106F4((uint64_t)(v115 + 539), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F9106F4((uint64_t)(v115 + 719), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F911E38((uint64_t)(v115 + 899), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)v1129 << 32));
    sub_20F912608((uint64_t)(v115 + 1079), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F912C28((uint64_t)(v115 + 1259), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)v1130 << 32));
    sub_20F912C28((uint64_t)(v115 + 1439), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F911E38((uint64_t)(v115 + 1619), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)v1131 << 32));
    sub_20F911E38((uint64_t)(v115 + 1799), (uint64_t)&v1127, DWORD2(v1109) | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F9106F4((uint64_t)(v115 + 161), (uint64_t)&v1127, v1109 | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F91117C((uint64_t)(v115 + 341), (uint64_t)&v1127, v1109 | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F9106F4((uint64_t)(v115 + 521), (uint64_t)&v1127, v1109 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F9106F4((uint64_t)(v115 + 701), (uint64_t)&v1127, v1109 | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F911E38((uint64_t)(v115 + 881), (uint64_t)&v1127, v1109 | ((unint64_t)v1129 << 32));
    sub_20F912608((uint64_t)(v115 + 1061), (uint64_t)&v1127, v1109 | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F912C28((uint64_t)(v115 + 1241), (uint64_t)&v1127, v1109 | ((unint64_t)v1130 << 32));
    sub_20F912C28((uint64_t)(v115 + 1421), (uint64_t)&v1127, v1109 | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F911E38((uint64_t)(v115 + 1601), (uint64_t)&v1127, v1109 | ((unint64_t)v1131 << 32));
    sub_20F911E38((uint64_t)(v115 + 1781), (uint64_t)&v1127, v1109 | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F9134EC((uint64_t)(v115 + 143), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F9140DC((uint64_t)(v115 + 323), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F9134EC((uint64_t)(v115 + 503), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F9134EC((uint64_t)(v115 + 683), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F91501C((uint64_t)(v115 + 863), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)v1129 << 32));
    sub_20F9158EC((uint64_t)(v115 + 1043), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F915F30((uint64_t)(v115 + 1223), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)v1130 << 32));
    sub_20F915F30((uint64_t)(v115 + 1403), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F91501C((uint64_t)(v115 + 1583), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)v1131 << 32));
    sub_20F91501C((uint64_t)(v115 + 1763), (uint64_t)&v1127, DWORD2(v1108) | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F9134EC((uint64_t)(v115 + 125), (uint64_t)&v1127, v1108 | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F9140DC((uint64_t)(v115 + 305), (uint64_t)&v1127, v1108 | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F9134EC((uint64_t)(v115 + 485), (uint64_t)&v1127, v1108 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F9134EC((uint64_t)(v115 + 665), (uint64_t)&v1127, v1108 | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F91501C((uint64_t)(v115 + 845), (uint64_t)&v1127, v1108 | ((unint64_t)v1129 << 32));
    sub_20F9158EC((uint64_t)(v115 + 1025), (uint64_t)&v1127, v1108 | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F915F30((uint64_t)(v115 + 1205), (uint64_t)&v1127, v1108 | ((unint64_t)v1130 << 32));
    sub_20F915F30((uint64_t)(v115 + 1385), (uint64_t)&v1127, v1108 | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F91501C((uint64_t)(v115 + 1565), (uint64_t)&v1127, v1108 | ((unint64_t)v1131 << 32));
    sub_20F91501C((uint64_t)(v115 + 1745), (uint64_t)&v1127, v1108 | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F91689C((uint64_t)(v115 + 107), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)*(unsigned int *)v1128 << 32));
    v535 = DWORD2(v1107);
    v536 = *((unsigned int *)v115 + 577);
    if ((_DWORD)v536 && *((_DWORD *)v115 + 576))
    {
      v1045 = 0;
      v1005 = *(_DWORD *)&v1128[8];
      v537 = v115 + 289;
      LODWORD(v538) = 1;
      v955 = v115 + 289;
      v1015 = DWORD2(v1107);
      while (!(_DWORD)v538)
      {
LABEL_721:
        if (++v1045 >= v536)
        {
          v535 = DWORD2(v1107);
          goto LABEL_794;
        }
      }
      v539 = 0;
      v540 = v115[298] + 8 * (*((_DWORD *)v115 + 602) * v1045);
      v541 = 9 * v1045 + v1005;
      v542 = v541 + 1;
      v543 = v541 + 2;
      v544 = v541 + 3;
      v545 = v541 + 4;
      v546 = v541 + 5;
      v547 = v541 + 6;
      v548 = v541 + 7;
      v549 = v541 + 8;
      v1020 = v540;
      while (1)
      {
        v553 = *(_QWORD *)(v540 + 8 * v539);
        if (v553 != -1)
        {
          v554 = *v537 + 8 * v553;
          v555 = v535 + v539;
          v556 = 0;
          v557.i64[0] = 0;
          if (v541 < v535 + v539)
            goto LABEL_728;
LABEL_727:
          v557.i64[0] = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                                  + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v541));
          goto LABEL_728;
        }
        v565 = v115[297];
        if (!v565)
          break;
        v566 = v115[293];
        v567 = v115[294];
        v568 = ((v567 - v566) << 6) - 1;
        v569 = v115[296];
        if (v567 == v566)
          v568 = 0;
        v554 = v115[289]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v566 + (((unint64_t)(v569 + v565 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v569 + v565 - 1) & 0x1FF));
        v115[297] = v565 - 1;
        if ((unint64_t)(v568 - (v565 + v569) + 1) >= 0x400)
        {
          operator delete(*(void **)(v567 - 8));
          v545 = v541 + 4;
          v544 = v541 + 3;
          v543 = v541 + 2;
          v542 = v541 + 1;
          v540 = v1020;
          v115[294] -= 8;
        }
LABEL_791:
        *(_QWORD *)(v540 + 8 * v539) = (v554 - v115[289]) >> 3;
        ++*(_QWORD *)(v115[302] + 8 * v1045);
        v555 = v535 + v539;
        v556 = 0;
        v557.i64[0] = 0;
        if (v541 >= v535 + v539)
          goto LABEL_727;
LABEL_728:
        if (v542 >= v555)
        {
          v556 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v542));
          v558 = 0;
          v559 = 0;
          if (v543 < v555)
          {
LABEL_730:
            if (v544 < v555)
              goto LABEL_731;
            goto LABEL_739;
          }
        }
        else
        {
          v558 = 0;
          v559 = 0;
          if (v543 < v555)
            goto LABEL_730;
        }
        v559 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v543));
        if (v544 < v555)
        {
LABEL_731:
          v560 = 0;
          v561 = 0;
          if (v545 < v555)
            goto LABEL_732;
          goto LABEL_740;
        }
LABEL_739:
        v558 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v544));
        v560 = 0;
        v561 = 0;
        if (v545 < v555)
        {
LABEL_732:
          if (v546 < v555)
            goto LABEL_733;
          goto LABEL_741;
        }
LABEL_740:
        v561 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v545));
        if (v546 < v555)
        {
LABEL_733:
          v562 = 0;
          v563 = 0;
          if (v547 < v555)
            goto LABEL_734;
          goto LABEL_742;
        }
LABEL_741:
        v560 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * (_DWORD)v546));
        v562 = 0;
        v563 = 0;
        if (v547 < v555)
        {
LABEL_734:
          if (v548 < v555)
            goto LABEL_735;
          goto LABEL_743;
        }
LABEL_742:
        v563 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * (_DWORD)v547));
        if (v548 < v555)
        {
LABEL_735:
          v564 = 0;
          if (v549 >= v555)
            goto LABEL_744;
          goto LABEL_724;
        }
LABEL_743:
        v562 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * (_DWORD)v548));
        v564 = 0;
        if (v549 >= v555)
LABEL_744:
          v564 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v555 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v549));
LABEL_724:
        v557.i64[1] = v556;
        v550.i64[0] = v559;
        v550.i64[1] = v558;
        v551.i64[0] = v561;
        v551.i64[1] = v560;
        v552.i64[0] = v563;
        v552.i64[1] = v562;
        v552.i64[1] = vextq_s8(v552, v552, 8uLL).u64[0];
        v551.i64[1] = vextq_s8(v551, v551, 8uLL).u64[0];
        v550.i64[1] = vextq_s8(v550, v550, 8uLL).u64[0];
        v557.i64[1] = vextq_s8(v557, v557, 8uLL).u64[0];
        *(_QWORD *)(v554 + 64) = v564;
        *(int8x16_t *)v554 = v557;
        *(int8x16_t *)(v554 + 16) = v550;
        *(int8x16_t *)(v554 + 32) = v551;
        *(int8x16_t *)(v554 + 48) = v552;
        ++v539;
        v538 = *((unsigned int *)v115 + 576);
        if (v539 >= v538)
        {
          v536 = *((unsigned int *)v115 + 577);
          goto LABEL_721;
        }
      }
      v570 = v115;
      v571 = (char *)v115[290];
      v572 = v570[289];
      v573 = (int64_t)&v571[-v572];
      v574 = (uint64_t)&v571[-v572] >> 3;
      v575 = (char *)(v572 + ((unint64_t)&v571[-v572] & 0xFFFFFFFFFFFFFFF8));
      v576 = v570[291];
      if ((unint64_t)(v576 - (_QWORD)v571) < 0x48)
      {
        v577 = v574 + 9;
        if ((unint64_t)(v574 + 9) >> 61)
LABEL_1161:
          sub_20E867F44();
        v578 = v576 - v572;
        if (v578 >> 2 > v577)
          v577 = v578 >> 2;
        if ((unint64_t)v578 >= 0x7FFFFFFFFFFFFFF8)
          v577 = 0x1FFFFFFFFFFFFFFFLL;
        v1011 = v577;
        if (v577)
        {
          if (v577 >> 61)
LABEL_1162:
            sub_20E877A38();
          v579 = operator new(8 * v577);
          v542 = v541 + 1;
          v543 = v541 + 2;
          v544 = v541 + 3;
          v545 = v541 + 4;
          v575 = (char *)(v572 + ((unint64_t)&v571[-v572] & 0xFFFFFFFFFFFFFFF8));
          v574 = (uint64_t)&v571[-v572] >> 3;
          v573 = (int64_t)&v571[-v572];
        }
        else
        {
          v579 = 0;
        }
        v592 = &v579[8 * v574];
        *((_QWORD *)v592 + 8) = 0;
        *((_OWORD *)v592 + 2) = 0u;
        *((_OWORD *)v592 + 3) = 0u;
        *(_OWORD *)v592 = 0u;
        *((_OWORD *)v592 + 1) = 0u;
        if ((char *)v572 == v571)
        {
          v594 = &v579[8 * v574];
        }
        else
        {
          if ((unint64_t)(v573 - 8) >= 0x68)
          {
            v593 = v575;
            v594 = &v579[8 * v574];
            if (v572 + (v573 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v579[v573 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v595 = ((unint64_t)(v573 - 8) >> 3) + 1;
              v596 = 8 * (v595 & 0x3FFFFFFFFFFFFFFCLL);
              v593 = &v575[-v596];
              v594 = &v592[-v596];
              v597 = &v579[8 * v574 - 16];
              v598 = (__int128 *)(v572 + 8 * v574 - 16);
              v599 = v595 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v600 = *v598;
                *(v597 - 1) = *(v598 - 1);
                *v597 = v600;
                v597 -= 2;
                v598 -= 2;
                v599 -= 4;
              }
              while (v599);
              if (v595 == (v595 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_778;
            }
          }
          else
          {
            v593 = v575;
            v594 = &v579[8 * v574];
          }
          do
          {
            v601 = *((_QWORD *)v593 - 1);
            v593 -= 8;
            *((_QWORD *)v594 - 1) = v601;
            v594 -= 8;
          }
          while (v593 != (char *)v572);
        }
LABEL_778:
        v602 = v592 + 72;
        v603 = v571 - v575;
        if (v603)
        {
          v604 = v548;
          v605 = v547;
          v606 = v546;
          v607 = v579;
          memmove(v592 + 72, v575, v603);
          v579 = v607;
          v546 = v606;
          v547 = v605;
          v548 = v604;
          v549 = v541 + 8;
          v545 = v541 + 4;
          v544 = v541 + 3;
          v543 = v541 + 2;
          v542 = v541 + 1;
        }
        v973[289] = v594;
        v973[290] = &v602[v603];
        v973[291] = &v579[8 * v1011];
        if (v572)
        {
          operator delete((void *)v572);
          v545 = v541 + 4;
          v544 = v541 + 3;
          v543 = v541 + 2;
          v542 = v541 + 1;
        }
        goto LABEL_790;
      }
      v580 = v571 - v575;
      if ((unint64_t)(v571 - v575) > 0x47)
      {
        v582 = v571;
        v583 = 9;
      }
      else
      {
        v581 = v580 >> 3;
        v1012 = 9 - (v580 >> 3);
        bzero(v571, 72 - (v580 & 0xFFFFFFFFFFFFFFF8));
        v545 = v541 + 4;
        v544 = v541 + 3;
        v543 = v541 + 2;
        v542 = v541 + 1;
        v582 = &v571[8 * v1012];
        v973[290] = v582;
        if (v571 == (char *)(v572 + ((unint64_t)&v571[-v572] & 0xFFFFFFFFFFFFFFF8)))
        {
LABEL_790:
          v115 = v973;
          v554 = v973[290] - 72;
          v537 = v955;
          v535 = v1015;
          v540 = v1020;
          goto LABEL_791;
        }
        v575 = (char *)(v572 + ((unint64_t)&v571[-v572] & 0xFFFFFFFFFFFFFFF8));
        v574 = (uint64_t)&v571[-v572] >> 3;
        v583 = v581;
        v573 = (int64_t)&v571[-v572];
      }
      v584 = v582 - (v575 + 72);
      v585 = v584 >> 3;
      v586 = v582 - 72;
      v587 = v582;
      if (v582 - 72 < v571)
      {
        v588 = v573 & 0xFFFFFFFFFFFFFFF8;
        v589 = (v573 & 0xFFFFFFFFFFFFFFF8) + v584;
        v590 = v572 + v589 + 8;
        if ((unint64_t)v571 > v590)
          v590 = (unint64_t)v571;
        v591 = v590 + ~v572 - v589;
        if (v591 >= 0x58)
        {
          v608 = (unint64_t)&v575[-v588 + 72 - v572];
          v587 = v582;
          if (v608 >= 0x20)
          {
            v609 = (v591 >> 3) + 1;
            v610 = 8 * (v609 & 0x3FFFFFFFFFFFFFFCLL);
            v586 += v610;
            v587 = &v582[v610];
            v611 = v582 + 16;
            v612 = (__int128 *)(v572 + 8 * v585 + 8 * v574 + 16);
            v613 = v609 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v614 = *v612;
              *(v611 - 1) = *(v612 - 1);
              *v611 = v614;
              v611 += 2;
              v612 += 2;
              v613 -= 4;
            }
            while (v613);
            if (v609 == (v609 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_787;
          }
        }
        else
        {
          v587 = v582;
        }
        do
        {
          v615 = *(_QWORD *)v586;
          v586 += 8;
          *(_QWORD *)v587 = v615;
          v587 += 8;
        }
        while (v586 < v571);
      }
LABEL_787:
      v973[290] = v587;
      if (v582 != v575 + 72)
      {
        v616 = v575;
        memmove(&v582[-8 * v585], v575, v584);
        v575 = v616;
      }
      bzero(v575, 8 * v583);
      v542 = v541 + 1;
      v543 = v541 + 2;
      v544 = v541 + 3;
      v545 = v541 + 4;
      goto LABEL_790;
    }
LABEL_794:
    sub_20F91689C((uint64_t)(v115 + 467), (uint64_t)&v1127, v535 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F91689C((uint64_t)(v115 + 647), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F916FE0((uint64_t)(v115 + 827), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)v1129 << 32));
    v617 = DWORD2(v1107);
    v618 = *((unsigned int *)v115 + 2017);
    if ((_DWORD)v618 && *((_DWORD *)v115 + 2016))
    {
      v619 = 0;
      v1038 = DWORD2(v1129);
      v620 = v115 + 1009;
      LODWORD(v621) = 1;
      v956 = v115 + 1009;
      while (!(_DWORD)v621)
      {
LABEL_798:
        if (++v619 >= v618)
        {
          v617 = DWORD2(v1107);
          goto LABEL_847;
        }
      }
      v622 = 0;
      v623 = v115[1018] + 8 * (*((_DWORD *)v115 + 2042) * v619);
      v624 = v1038 + v619;
      v1042 = v619;
      while (1)
      {
        v626 = *(_QWORD *)(v623 + 8 * v622);
        if (v626 != -1)
        {
          v627 = (_QWORD *)(*v620 + 8 * v626);
          v628 = v617 + v622;
          v625 = 0;
          if (v624 < v617 + v622)
            goto LABEL_802;
          goto LABEL_801;
        }
        v629 = v115[1017];
        if (!v629)
          break;
        v630 = v115[1013];
        v631 = v115[1014];
        v632 = ((v631 - v630) << 6) - 1;
        v633 = v115[1016];
        if (v631 == v630)
          v632 = 0;
        v627 = (_QWORD *)(v115[1009]
                        + 8
                        * *(_QWORD *)(*(_QWORD *)(v630
                                                + (((unint64_t)(v633 + v629 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v633 + v629 - 1) & 0x1FF)));
        v115[1017] = v629 - 1;
        if ((unint64_t)(v632 - (v629 + v633) + 1) >= 0x400)
        {
          operator delete(*(void **)(v631 - 8));
          v115[1014] -= 8;
        }
LABEL_844:
        *(_QWORD *)(v623 + 8 * v622) = ((uint64_t)v627 - v115[1009]) >> 3;
        ++*(_QWORD *)(v115[1022] + 8 * v619);
        v628 = v617 + v622;
        v625 = 0;
        if (v624 < v617 + v622)
          goto LABEL_802;
LABEL_801:
        v625 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v628 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v624));
LABEL_802:
        *v627 = v625;
        ++v622;
        v621 = *((unsigned int *)v115 + 2016);
        if (v622 >= v621)
        {
          v618 = *((unsigned int *)v115 + 2017);
          goto LABEL_798;
        }
      }
      v634 = (char *)v115[1010];
      v635 = v115;
      v636 = (char *)v115[1009];
      v637 = v634 - v636;
      v638 = (v634 - v636) >> 3;
      v639 = &v636[(v634 - v636) & 0xFFFFFFFFFFFFFFF8];
      v640 = (char *)v635[1011];
      if (v640 != v634)
      {
        if (v634 == v639)
        {
          *(_QWORD *)v634 = 0;
          v973[1010] = v634 + 8;
          v620 = v956;
        }
        else
        {
          v641 = v634 - 8;
          if ((unint64_t)v634 < 8)
          {
            v642 = v634;
            v620 = v956;
          }
          else
          {
            v642 = v634;
            v620 = v956;
            do
            {
              v661 = *(_QWORD *)v641;
              v641 += 8;
              *(_QWORD *)v642 = v661;
              v642 += 8;
            }
            while (v641 < v634);
          }
          v973[1010] = v642;
          if (v634 != v639 + 8)
          {
            memmove(&v634[-8 * ((v634 - (v639 + 8)) >> 3)], v639, v634 - (v639 + 8));
            v639 = &v636[(v634 - v636) & 0xFFFFFFFFFFFFFFF8];
          }
          *(_QWORD *)v639 = 0;
        }
LABEL_843:
        v115 = v973;
        v627 = (_QWORD *)(v973[1010] - 8);
        goto LABEL_844;
      }
      v643 = v638 + 1;
      if ((unint64_t)(v638 + 1) >> 61)
        goto LABEL_1161;
      v644 = v640 - v636;
      if (v644 >> 2 > v643)
        v643 = v644 >> 2;
      if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
        v645 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v645 = v643;
      v1046 = v645;
      if (v645)
      {
        if (v645 >> 61)
          goto LABEL_1162;
        v646 = operator new(8 * v645);
        v639 = &v636[(v634 - v636) & 0xFFFFFFFFFFFFFFF8];
        v647 = &v646[8 * v638];
        *v647 = 0;
        v648 = (char *)(v647 + 1);
        if (v636 != v634)
          goto LABEL_824;
      }
      else
      {
        v646 = 0;
        v647 = (_QWORD *)(8 * v638);
        *(_QWORD *)(8 * v638) = 0;
        v648 = (char *)(8 * v638 + 8);
        if (v636 != v634)
        {
LABEL_824:
          v649 = v637 - 8;
          if ((unint64_t)(v637 - 8) >= 0x68)
          {
            v651 = &v636[v637 & 0xFFFFFFFFFFFFFFF8] - &v646[v637 & 0xFFFFFFFFFFFFFFF8];
            v650 = v639;
            v620 = v956;
            if (v651 >= 0x20)
            {
              v652 = (v649 >> 3) + 1;
              v653 = 8 * (v652 & 0x3FFFFFFFFFFFFFFCLL);
              v650 = &v639[-v653];
              v647 = (_QWORD *)((char *)v647 - v653);
              v654 = &v646[8 * v638 - 16];
              v655 = &v636[8 * v638 - 16];
              v656 = v652 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v657 = *(_OWORD *)v655;
                *(v654 - 1) = *((_OWORD *)v655 - 1);
                *v654 = v657;
                v654 -= 2;
                v655 -= 32;
                v656 -= 4;
              }
              while (v656);
              if (v652 == (v652 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_835;
            }
          }
          else
          {
            v650 = v639;
            v620 = v956;
          }
          do
          {
            v658 = *((_QWORD *)v650 - 1);
            v650 -= 8;
            *--v647 = v658;
          }
          while (v650 != v636);
LABEL_835:
          v659 = v634 - v639;
          if (v659)
          {
            v660 = v646;
            memmove(v648, v639, v659);
            v646 = v660;
          }
          v973[1009] = v647;
          v973[1010] = &v648[v659];
          v973[1011] = &v646[8 * v1046];
          v619 = v1042;
          if (v636)
            operator delete(v636);
          goto LABEL_843;
        }
      }
      v620 = v956;
      goto LABEL_835;
    }
LABEL_847:
    sub_20F91761C((uint64_t)(v115 + 1187), (uint64_t)&v1127, v617 | ((unint64_t)v1130 << 32));
    sub_20F91761C((uint64_t)(v115 + 1367), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F916FE0((uint64_t)(v115 + 1547), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)v1131 << 32));
    sub_20F916FE0((uint64_t)(v115 + 1727), (uint64_t)&v1127, DWORD2(v1107) | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F9106F4((uint64_t)(v115 + 89), (uint64_t)&v1127, v1107 | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F91117C((uint64_t)(v115 + 269), (uint64_t)&v1127, v1107 | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F9106F4((uint64_t)(v115 + 449), (uint64_t)&v1127, v1107 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F9106F4((uint64_t)(v115 + 629), (uint64_t)&v1127, v1107 | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F911E38((uint64_t)(v115 + 809), (uint64_t)&v1127, v1107 | ((unint64_t)v1129 << 32));
    sub_20F912608((uint64_t)(v115 + 989), (uint64_t)&v1127, v1107 | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F912C28((uint64_t)(v115 + 1169), (uint64_t)&v1127, v1107 | ((unint64_t)v1130 << 32));
    sub_20F912C28((uint64_t)(v115 + 1349), (uint64_t)&v1127, v1107 | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F911E38((uint64_t)(v115 + 1529), (uint64_t)&v1127, v1107 | ((unint64_t)v1131 << 32));
    sub_20F911E38((uint64_t)(v115 + 1709), (uint64_t)&v1127, v1107 | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F917C80((uint64_t)(v115 + 71), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F918BBC((uint64_t)(v115 + 251), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F917C80((uint64_t)(v115 + 431), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F917C80((uint64_t)(v115 + 611), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F919EC0((uint64_t)(v115 + 791), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)v1129 << 32));
    sub_20F91A930((uint64_t)(v115 + 971), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F91B038((uint64_t)(v115 + 1151), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)v1130 << 32));
    sub_20F91B038((uint64_t)(v115 + 1331), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F919EC0((uint64_t)(v115 + 1511), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)v1131 << 32));
    sub_20F919EC0((uint64_t)(v115 + 1691), (uint64_t)&v1127, *(unsigned int *)&v1106[24] | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F917C80((uint64_t)(v115 + 53), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)*(unsigned int *)v1128 << 32));
    sub_20F918BBC((uint64_t)(v115 + 233), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
    sub_20F917C80((uint64_t)(v115 + 413), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F917C80((uint64_t)(v115 + 593), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F919EC0((uint64_t)(v115 + 773), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)v1129 << 32));
    sub_20F91A930((uint64_t)(v115 + 953), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)DWORD2(v1129) << 32));
    sub_20F91B038((uint64_t)(v115 + 1133), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)v1130 << 32));
    sub_20F91B038((uint64_t)(v115 + 1313), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)DWORD2(v1130) << 32));
    sub_20F919EC0((uint64_t)(v115 + 1493), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)v1131 << 32));
    sub_20F919EC0((uint64_t)(v115 + 1673), (uint64_t)&v1127, *(unsigned int *)&v1106[16] | ((unint64_t)DWORD2(v1131) << 32));
    sub_20F91BC28((uint64_t)(v115 + 35), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)*(unsigned int *)v1128 << 32));
    v662 = *(unsigned int *)&v1106[8];
    v663 = *((unsigned int *)v115 + 433);
    if ((_DWORD)v663 && *((_DWORD *)v115 + 432))
    {
      v954 = 0;
      v664 = v115 + 217;
      v947 = *(_DWORD *)&v1128[8];
      LODWORD(v665) = 1;
      v957 = v115 + 217;
      v948 = *(_DWORD *)&v1106[8];
      while (!(_DWORD)v665)
      {
LABEL_851:
        if (++v954 >= v663)
        {
          LODWORD(v662) = *(_DWORD *)&v1106[8];
          goto LABEL_1068;
        }
      }
      v666 = 0;
      v667 = v115[226] + 8 * (*((_DWORD *)v115 + 458) * v954);
      v668 = 9 * v954 + v947;
      v669 = v668 + 1;
      v670 = v668 + 2;
      v671 = v668 + 3;
      v1047 = v668 + 4;
      v1043 = v668 + 5;
      v672 = v668 + 6;
      v673 = v668 + 7;
      v674 = v668 + 8;
      v953 = v667;
      v949 = v668 + 1;
      v951 = v668 + 3;
      v952 = v668 + 2;
      while (1)
      {
        v677 = *(_QWORD *)(v667 + 8 * v666);
        if (v677 != -1)
        {
          v678 = *v664 + 8 * v677;
          v679 = 9 * v666 + v662;
          v680 = 0;
          v681 = 0;
          if (v668 < v679)
            goto LABEL_858;
LABEL_857:
          v681 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
          goto LABEL_858;
        }
        v811 = v115[225];
        if (!v811)
          break;
        v812 = v115[221];
        v813 = v115[222];
        v814 = ((v813 - v812) << 6) - 1;
        v815 = v115[224];
        if (v813 == v812)
          v814 = 0;
        v678 = v115[217]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v812 + (((unint64_t)(v815 + v811 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v815 + v811 - 1) & 0x1FF));
        v115[225] = v811 - 1;
        if ((unint64_t)(v814 - (v811 + v815) + 1) >= 0x400)
        {
          v816 = v666;
          v817 = v115;
          v818 = v662;
          operator delete(*(void **)(v813 - 8));
          v662 = v818;
          v115 = v817;
          v671 = v951;
          v670 = v952;
          v667 = v953;
          v666 = v816;
          v668 = 9 * v954 + v947;
          v669 = v949;
          v817[222] -= 8;
        }
LABEL_1065:
        *(_QWORD *)(v667 + 8 * v666) = (v678 - v115[217]) >> 3;
        ++*(_QWORD *)(v115[230] + 8 * v954);
        v679 = 9 * v666 + v662;
        v680 = 0;
        v681 = 0;
        if (v668 >= v679)
          goto LABEL_857;
LABEL_858:
        v682 = v679 + 1;
        if (v679 + 1 <= v668)
        {
          v680 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
          v683 = v679 + 2;
          v684 = 0;
          v685 = 0;
          if (v679 + 2 > v668)
          {
LABEL_860:
            v686 = v679 + 3;
            if (v679 + 3 > v668)
              goto LABEL_861;
            goto LABEL_995;
          }
        }
        else
        {
          v683 = v679 + 2;
          v684 = 0;
          v685 = 0;
          if (v679 + 2 > v668)
            goto LABEL_860;
        }
        v685 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v686 = v679 + 3;
        if (v679 + 3 > v668)
        {
LABEL_861:
          v687 = v679 + 4;
          v688 = 0;
          v689 = 0;
          if (v679 + 4 > v668)
            goto LABEL_862;
          goto LABEL_996;
        }
LABEL_995:
        v684 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v687 = v679 + 4;
        v688 = 0;
        v689 = 0;
        if (v679 + 4 > v668)
        {
LABEL_862:
          v690 = v679 + 5;
          if (v679 + 5 > v668)
            goto LABEL_863;
          goto LABEL_997;
        }
LABEL_996:
        v689 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v690 = v679 + 5;
        if (v679 + 5 > v668)
        {
LABEL_863:
          v691 = v679 + 6;
          v692 = 0;
          v693 = 0;
          if (v679 + 6 > v668)
            goto LABEL_864;
          goto LABEL_998;
        }
LABEL_997:
        v688 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v691 = v679 + 6;
        v692 = 0;
        v693 = 0;
        if (v679 + 6 > v668)
        {
LABEL_864:
          v694 = v679 + 7;
          if (v679 + 7 > v668)
            goto LABEL_865;
          goto LABEL_999;
        }
LABEL_998:
        v693 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v694 = v679 + 7;
        if (v679 + 7 > v668)
        {
LABEL_865:
          v695 = v679 + 8;
          v696 = 0;
          v697 = 0;
          if (v679 + 8 > v668)
            goto LABEL_866;
          goto LABEL_1000;
        }
LABEL_999:
        v692 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        v695 = v679 + 8;
        v696 = 0;
        v697 = 0;
        if (v679 + 8 > v668)
        {
LABEL_866:
          if (v669 < v679)
            goto LABEL_867;
          goto LABEL_1001;
        }
LABEL_1000:
        v697 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v668));
        if (v669 < v679)
        {
LABEL_867:
          v698 = 0;
          v699 = 0;
          if (v682 > v669)
            goto LABEL_868;
          goto LABEL_1002;
        }
LABEL_1001:
        v696 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        v698 = 0;
        v699 = 0;
        if (v682 > v669)
        {
LABEL_868:
          if (v683 > v669)
            goto LABEL_869;
          goto LABEL_1003;
        }
LABEL_1002:
        v699 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        if (v683 > v669)
        {
LABEL_869:
          v700 = 0;
          v701 = 0;
          if (v686 > v669)
            goto LABEL_870;
          goto LABEL_1004;
        }
LABEL_1003:
        v698 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        v700 = 0;
        v701 = 0;
        if (v686 > v669)
        {
LABEL_870:
          if (v687 > v669)
            goto LABEL_871;
          goto LABEL_1005;
        }
LABEL_1004:
        v701 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        if (v687 > v669)
        {
LABEL_871:
          v702 = 0;
          v703 = 0;
          if (v690 > v669)
            goto LABEL_872;
          goto LABEL_1006;
        }
LABEL_1005:
        v700 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        v702 = 0;
        v703 = 0;
        if (v690 > v669)
        {
LABEL_872:
          if (v691 > v669)
            goto LABEL_873;
          goto LABEL_1007;
        }
LABEL_1006:
        v703 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        if (v691 > v669)
        {
LABEL_873:
          v704 = 0;
          v705 = 0;
          if (v694 > v669)
            goto LABEL_874;
          goto LABEL_1008;
        }
LABEL_1007:
        v702 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        v704 = 0;
        v705 = 0;
        if (v694 > v669)
        {
LABEL_874:
          if (v695 > v669)
            goto LABEL_875;
          goto LABEL_1009;
        }
LABEL_1008:
        v705 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        if (v695 > v669)
        {
LABEL_875:
          v706 = 0;
          v707 = 0;
          if (v670 < v679)
            goto LABEL_876;
          goto LABEL_1010;
        }
LABEL_1009:
        v704 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v669));
        v706 = 0;
        v707 = 0;
        if (v670 < v679)
        {
LABEL_876:
          if (v682 > v670)
            goto LABEL_877;
          goto LABEL_1011;
        }
LABEL_1010:
        v707 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        if (v682 > v670)
        {
LABEL_877:
          v708 = 0;
          v709 = 0;
          if (v683 > v670)
            goto LABEL_878;
          goto LABEL_1012;
        }
LABEL_1011:
        v706 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        v708 = 0;
        v709 = 0;
        if (v683 > v670)
        {
LABEL_878:
          if (v686 > v670)
            goto LABEL_879;
          goto LABEL_1013;
        }
LABEL_1012:
        v709 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        if (v686 > v670)
        {
LABEL_879:
          v710 = 0;
          v711 = 0;
          if (v687 > v670)
            goto LABEL_880;
          goto LABEL_1014;
        }
LABEL_1013:
        v708 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        v710 = 0;
        v711 = 0;
        if (v687 > v670)
        {
LABEL_880:
          if (v690 > v670)
            goto LABEL_881;
          goto LABEL_1015;
        }
LABEL_1014:
        v711 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        if (v690 > v670)
        {
LABEL_881:
          v712 = 0;
          v713 = 0;
          if (v691 > v670)
            goto LABEL_882;
          goto LABEL_1016;
        }
LABEL_1015:
        v710 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        v712 = 0;
        v713 = 0;
        if (v691 > v670)
        {
LABEL_882:
          if (v694 <= v670)
            goto LABEL_1017;
          goto LABEL_883;
        }
LABEL_1016:
        v713 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
        if (v694 <= v670)
        {
LABEL_1017:
          v712 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
          v714 = 0;
          v715 = 0;
          if (v695 > v670)
            goto LABEL_885;
LABEL_884:
          v715 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v670));
          goto LABEL_885;
        }
LABEL_883:
        v714 = 0;
        v715 = 0;
        if (v695 <= v670)
          goto LABEL_884;
LABEL_885:
        v716.i64[0] = v681;
        v716.i64[1] = v680;
        v717.i64[0] = v685;
        v717.i64[1] = v684;
        v718.i64[0] = v689;
        v718.i64[1] = v688;
        v719.i64[0] = v693;
        v719.i64[1] = v692;
        v720.i64[0] = v697;
        v720.i64[1] = v696;
        v721.i64[0] = v699;
        v721.i64[1] = v698;
        v722.i64[0] = v701;
        v722.i64[1] = v700;
        v724.i64[0] = v703;
        v970 = v717.i64[0];
        v723 = vextq_s8(v717, v717, 8uLL).u64[0];
        v724.i64[1] = v702;
        v980 = vextq_s8(v718, v718, 8uLL).u64[0];
        v725.i64[0] = v705;
        v977 = vextq_s8(v716, v716, 8uLL).u64[0];
        v978 = vextq_s8(v719, v719, 8uLL).u64[0];
        v725.i64[1] = v704;
        v726.i64[0] = v707;
        v982 = vextq_s8(v721, v721, 8uLL).u64[0];
        v983 = v723;
        v726.i64[1] = v706;
        v974 = vextq_s8(v720, v720, 8uLL).u64[0];
        v975 = vextq_s8(v722, v722, 8uLL).u64[0];
        v727.i64[0] = v709;
        v988 = vextq_s8(v724, v724, 8uLL).u64[0];
        v727.i64[1] = v708;
        v992 = vextq_s8(v725, v725, 8uLL).u64[0];
        v728.i64[0] = v711;
        v999 = vextq_s8(v726, v726, 8uLL).u64[0];
        v728.i64[1] = v710;
        v729.i64[0] = v713;
        v995 = vextq_s8(v727, v727, 8uLL).u64[0];
        v1025 = vextq_s8(v728, v728, 8uLL).u64[0];
        v729.i64[1] = v712;
        v1039 = vextq_s8(v729, v729, 8uLL).u64[0];
        if (v671 >= v679)
          v714 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v961 = v726.i64[0];
        v730.i64[0] = v715;
        v730.i64[1] = v714;
        v1035 = vextq_s8(v730, v730, 8uLL).u64[0];
        v731 = 0;
        v732 = 0;
        if (v682 <= v671)
          v732 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v733.i64[0] = v732;
        if (v683 <= v671)
          v731 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v968 = v689;
        v733.i64[1] = v731;
        v1031 = vextq_s8(v733, v733, 8uLL).u64[0];
        v734 = 0;
        v735 = 0;
        if (v686 <= v671)
          v735 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v736.i64[0] = v735;
        if (v687 <= v671)
          v734 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v736.i64[1] = v734;
        v1028 = vextq_s8(v736, v736, 8uLL).u64[0];
        v737 = 0;
        v738 = 0;
        if (v690 <= v671)
          v738 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v739.i64[0] = v738;
        if (v691 <= v671)
          v737 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v962 = v724.i64[0];
        v739.i64[1] = v737;
        __vala = vextq_s8(v739, v739, 8uLL).u64[0];
        v740 = 0;
        v741 = 0;
        if (v694 <= v671)
          v741 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v742.i64[0] = v741;
        if (v695 <= v671)
          v740 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v671));
        v966 = v693;
        v742.i64[1] = v740;
        v1021 = vextq_s8(v742, v742, 8uLL).u64[0];
        v743 = 0;
        v744 = 0;
        if (v1047 >= v679)
          v744 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v745.i64[0] = v744;
        if (v682 <= v1047)
          v743 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v965 = v697;
        v745.i64[1] = v743;
        v1018 = vextq_s8(v745, v745, 8uLL).u64[0];
        v746 = 0;
        v747 = 0;
        if (v683 <= v1047)
          v747 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v748.i64[0] = v747;
        if (v686 <= v1047)
          v746 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v963 = v701;
        v748.i64[1] = v746;
        v1016 = vextq_s8(v748, v748, 8uLL).u64[0];
        v749 = 0;
        v750 = 0;
        if (v687 <= v1047)
          v750 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v751.i64[0] = v750;
        if (v690 <= v1047)
          v749 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v751.i64[1] = v749;
        v1013 = vextq_s8(v751, v751, 8uLL).u64[0];
        v752 = 0;
        v753 = 0;
        if (v691 <= v1047)
          v753 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v754.i64[0] = v753;
        if (v694 <= v1047)
          v752 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v964 = v699;
        v754.i64[1] = v752;
        v1008 = vextq_s8(v754, v754, 8uLL).u64[0];
        v755 = 0;
        v756 = 0;
        if (v695 <= v1047)
          v756 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1047));
        v757.i64[0] = v756;
        if (v1043 >= v679)
          v755 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v757.i64[1] = v755;
        v1006 = vextq_s8(v757, v757, 8uLL).u64[0];
        v758 = 0;
        v759 = 0;
        if (v682 <= v1043)
          v759 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v760.i64[0] = v759;
        if (v683 <= v1043)
          v758 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v760.i64[1] = v758;
        v1003 = vextq_s8(v760, v760, 8uLL).u64[0];
        v761 = 0;
        v762 = 0;
        if (v686 <= v1043)
          v762 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        if (v687 <= v1043)
          v761 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v763.i64[0] = v762;
        v763.i64[1] = v761;
        v1010 = vextq_s8(v763, v763, 8uLL).u64[0];
        v764 = 0;
        v765 = 0;
        if (v690 <= v1043)
          v765 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v766.i64[0] = v765;
        if (v691 <= v1043)
          v764 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v766.i64[1] = v764;
        v1000 = vextq_s8(v766, v766, 8uLL).u64[0];
        v767 = 0;
        v768 = 0;
        if (v694 <= v1043)
          v768 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v769.i64[0] = v768;
        if (v695 <= v1043)
          v767 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v1043));
        v769.i64[1] = v767;
        v997 = vextq_s8(v769, v769, 8uLL).u64[0];
        v770 = 0;
        v771 = 0;
        if (v672 >= v679)
          v771 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v772.i64[0] = v771;
        if (v682 <= v672)
          v770 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v772.i64[1] = v770;
        v996 = vextq_s8(v772, v772, 8uLL).u64[0];
        v773 = 0;
        v774 = 0;
        if (v683 <= v672)
          v774 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v775.i64[0] = v774;
        if (v686 <= v672)
          v773 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v775.i64[1] = v773;
        v994 = vextq_s8(v775, v775, 8uLL).u64[0];
        v776 = 0;
        v777 = 0;
        if (v687 <= v672)
          v777 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v778.i64[0] = v777;
        if (v690 <= v672)
          v776 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v778.i64[1] = v776;
        v993 = vextq_s8(v778, v778, 8uLL).u64[0];
        v779 = 0;
        v780 = 0;
        if (v691 <= v672)
          v780 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v781.i64[0] = v780;
        if (v694 <= v672)
          v779 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v781.i64[1] = v779;
        v991 = vextq_s8(v781, v781, 8uLL).u64[0];
        v782 = 0;
        v783 = 0;
        if (v695 <= v672)
          v783 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v672));
        v784.i64[0] = v783;
        if (v673 >= v679)
          v782 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v784.i64[1] = v782;
        v990 = vextq_s8(v784, v784, 8uLL).u64[0];
        v785 = 0;
        v786 = 0;
        if (v682 <= v673)
          v786 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v959 = v730.i64[0];
        v787.i64[0] = v786;
        if (v683 <= v673)
          v785 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v787.i64[1] = v785;
        v989 = vextq_s8(v787, v787, 8uLL).u64[0];
        v788 = 0;
        v789 = 0;
        if (v686 <= v673)
          v789 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v960 = v729.i64[0];
        v790.i64[0] = v789;
        if (v687 <= v673)
          v788 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v790.i64[1] = v788;
        v987 = vextq_s8(v790, v790, 8uLL).u64[0];
        v791 = 0;
        v792 = 0;
        if (v690 <= v673)
          v792 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v793.i64[0] = v792;
        if (v691 <= v673)
          v791 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v793.i64[1] = v791;
        v986 = vextq_s8(v793, v793, 8uLL).u64[0];
        v794 = 0;
        v795 = 0;
        if (v694 <= v673)
          v795 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v796.i64[0] = v795;
        if (v695 <= v673)
          v794 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v673));
        v796.i64[1] = v794;
        v985 = vextq_s8(v796, v796, 8uLL).u64[0];
        v797 = 0;
        v798 = 0;
        if (v674 >= v679)
          v798 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v679 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v799.i64[0] = v798;
        if (v682 <= v674)
          v797 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v682 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v799.i64[1] = v797;
        v984 = vextq_s8(v799, v799, 8uLL).u64[0];
        v800 = 0;
        v801 = 0;
        if (v683 <= v674)
          v801 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v683 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v802.i64[0] = v801;
        if (v686 <= v674)
          v800 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v686 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v802.i64[1] = v800;
        v981 = vextq_s8(v802, v802, 8uLL).u64[0];
        v803 = 0;
        v804 = 0;
        if (v687 <= v674)
          v804 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v687 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v805.i64[0] = v804;
        if (v690 <= v674)
          v803 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v690 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v805.i64[1] = v803;
        v979 = vextq_s8(v805, v805, 8uLL).u64[0];
        v806 = 0;
        v807 = 0;
        if (v691 <= v674)
          v807 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v691 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v808.i64[0] = v807;
        if (v694 <= v674)
          v806 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v694 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        v808.i64[1] = v806;
        v976 = vextq_s8(v808, v808, 8uLL).u64[0];
        v809 = 0;
        *(_QWORD *)&v810 = v970;
        if (v695 <= v674)
          v809 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                           + 8 * (v695 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v674));
        *((_QWORD *)&v810 + 1) = v983;
        v716.i64[1] = v977;
        *(int8x16_t *)v678 = v716;
        *(_OWORD *)(v678 + 16) = v810;
        *(_QWORD *)&v676 = v966;
        *(_QWORD *)&v675 = v968;
        *((_QWORD *)&v676 + 1) = v978;
        *((_QWORD *)&v675 + 1) = v980;
        *(_OWORD *)(v678 + 32) = v675;
        *(_OWORD *)(v678 + 48) = v676;
        *(_QWORD *)&v675 = v964;
        *(_QWORD *)&v676 = v965;
        *((_QWORD *)&v675 + 1) = v982;
        *((_QWORD *)&v676 + 1) = v974;
        *(_OWORD *)(v678 + 64) = v676;
        *(_OWORD *)(v678 + 80) = v675;
        *(_QWORD *)&v676 = v962;
        *(_QWORD *)&v675 = v963;
        *((_QWORD *)&v676 + 1) = v988;
        *((_QWORD *)&v675 + 1) = v975;
        *(_OWORD *)(v678 + 96) = v675;
        *(_OWORD *)(v678 + 112) = v676;
        *(_QWORD *)&v675 = v961;
        *(_QWORD *)&v676 = v725.i64[0];
        *((_QWORD *)&v675 + 1) = v999;
        *((_QWORD *)&v676 + 1) = v992;
        *(_OWORD *)(v678 + 128) = v676;
        *(_OWORD *)(v678 + 144) = v675;
        *(_QWORD *)&v676 = v728.i64[0];
        *((_QWORD *)&v676 + 1) = v1025;
        *(_QWORD *)&v675 = v727.i64[0];
        *((_QWORD *)&v675 + 1) = v995;
        *(_OWORD *)(v678 + 160) = v675;
        *(_OWORD *)(v678 + 176) = v676;
        *(_QWORD *)&v675 = v959;
        *(_QWORD *)&v676 = v960;
        *((_QWORD *)&v675 + 1) = v1035;
        *((_QWORD *)&v676 + 1) = v1039;
        *(_OWORD *)(v678 + 192) = v676;
        *(_OWORD *)(v678 + 208) = v675;
        *(_QWORD *)&v676 = v736.i64[0];
        *((_QWORD *)&v676 + 1) = v1028;
        *(_QWORD *)&v675 = v733.i64[0];
        *((_QWORD *)&v675 + 1) = v1031;
        *(_OWORD *)(v678 + 224) = v675;
        *(_OWORD *)(v678 + 240) = v676;
        *(_QWORD *)&v675 = v742.i64[0];
        *((_QWORD *)&v675 + 1) = v1021;
        *(_QWORD *)&v676 = v739.i64[0];
        *((_QWORD *)&v676 + 1) = __vala;
        *(_OWORD *)(v678 + 256) = v676;
        *(_OWORD *)(v678 + 272) = v675;
        *(_QWORD *)&v676 = v748.i64[0];
        *((_QWORD *)&v676 + 1) = v1016;
        *(_QWORD *)&v675 = v745.i64[0];
        *((_QWORD *)&v675 + 1) = v1018;
        *(_OWORD *)(v678 + 288) = v675;
        *(_OWORD *)(v678 + 304) = v676;
        *(_QWORD *)&v675 = v754.i64[0];
        *((_QWORD *)&v675 + 1) = v1008;
        *(_QWORD *)&v676 = v751.i64[0];
        *((_QWORD *)&v676 + 1) = v1013;
        *(_OWORD *)(v678 + 320) = v676;
        *(_OWORD *)(v678 + 336) = v675;
        *(_QWORD *)&v676 = v760.i64[0];
        *((_QWORD *)&v676 + 1) = v1003;
        *(_QWORD *)&v675 = v757.i64[0];
        *((_QWORD *)&v675 + 1) = v1006;
        *(_OWORD *)(v678 + 352) = v675;
        *(_OWORD *)(v678 + 368) = v676;
        *(_QWORD *)&v675 = v766.i64[0];
        *((_QWORD *)&v675 + 1) = v1000;
        *(_QWORD *)&v676 = v763.i64[0];
        *((_QWORD *)&v676 + 1) = v1010;
        *(_OWORD *)(v678 + 384) = v676;
        *(_OWORD *)(v678 + 400) = v675;
        *(_QWORD *)&v676 = v772.i64[0];
        *((_QWORD *)&v676 + 1) = v996;
        *(_QWORD *)&v675 = v769.i64[0];
        *((_QWORD *)&v675 + 1) = v997;
        *(_OWORD *)(v678 + 416) = v675;
        *(_OWORD *)(v678 + 432) = v676;
        *(_QWORD *)&v675 = v778.i64[0];
        *((_QWORD *)&v675 + 1) = v993;
        *(_QWORD *)&v676 = v775.i64[0];
        *((_QWORD *)&v676 + 1) = v994;
        *(_OWORD *)(v678 + 448) = v676;
        *(_OWORD *)(v678 + 464) = v675;
        *(_QWORD *)&v676 = v784.i64[0];
        *((_QWORD *)&v676 + 1) = v990;
        *(_QWORD *)&v675 = v781.i64[0];
        *((_QWORD *)&v675 + 1) = v991;
        *(_OWORD *)(v678 + 480) = v675;
        *(_OWORD *)(v678 + 496) = v676;
        *(_QWORD *)&v675 = v790.i64[0];
        *((_QWORD *)&v675 + 1) = v987;
        *(_QWORD *)&v676 = v787.i64[0];
        *((_QWORD *)&v676 + 1) = v989;
        *(_OWORD *)(v678 + 512) = v676;
        *(_OWORD *)(v678 + 528) = v675;
        *(_QWORD *)&v676 = v796.i64[0];
        *((_QWORD *)&v676 + 1) = v985;
        *(_QWORD *)&v675 = v793.i64[0];
        *((_QWORD *)&v675 + 1) = v986;
        *(_OWORD *)(v678 + 544) = v675;
        *(_OWORD *)(v678 + 560) = v676;
        *(_QWORD *)&v675 = v802.i64[0];
        *((_QWORD *)&v675 + 1) = v981;
        *(_QWORD *)&v676 = v799.i64[0];
        *((_QWORD *)&v676 + 1) = v984;
        *(_OWORD *)(v678 + 576) = v676;
        *(_OWORD *)(v678 + 592) = v675;
        *(_QWORD *)&v676 = v808.i64[0];
        *((_QWORD *)&v676 + 1) = v976;
        *(_QWORD *)&v675 = v805.i64[0];
        *((_QWORD *)&v675 + 1) = v979;
        *(_OWORD *)(v678 + 608) = v675;
        *(_OWORD *)(v678 + 624) = v676;
        *(_QWORD *)(v678 + 640) = v809;
        ++v666;
        v665 = *((unsigned int *)v115 + 432);
        if (v666 >= v665)
        {
          v663 = *((unsigned int *)v115 + 433);
          goto LABEL_851;
        }
      }
      v819 = v115;
      v820 = (char *)v115[218];
      v821 = v819[217];
      v822 = (int64_t)&v820[-v821];
      v823 = (uint64_t)&v820[-v821] >> 3;
      v824 = (_BYTE *)(v821 + ((unint64_t)&v820[-v821] & 0xFFFFFFFFFFFFFFF8));
      v825 = v819[219];
      v950 = v666;
      if ((unint64_t)(v825 - (_QWORD)v820) < 0x288)
      {
        v826 = v823 + 81;
        if ((unint64_t)(v823 + 81) >> 61)
          goto LABEL_1161;
        v827 = v825 - v821;
        if (v827 >> 2 > v826)
          v826 = v827 >> 2;
        if ((unint64_t)v827 >= 0x7FFFFFFFFFFFFFF8)
          v826 = 0x1FFFFFFFFFFFFFFFLL;
        v969 = v826;
        if (v826)
        {
          if (v826 >> 61)
            goto LABEL_1162;
          v828 = (char *)(v821 + ((unint64_t)&v820[-v821] & 0xFFFFFFFFFFFFFFF8));
          v829 = (char *)operator new(8 * v826);
          v823 = (uint64_t)&v820[-v821] >> 3;
        }
        else
        {
          v828 = (char *)(v821 + ((unint64_t)&v820[-v821] & 0xFFFFFFFFFFFFFFF8));
          v829 = 0;
        }
        v967 = v823;
        v972 = v829;
        v841 = &v829[8 * v823];
        bzero(v841, 0x288uLL);
        if ((char *)v821 == v820)
        {
          v844 = v841;
          v842 = v841;
        }
        else
        {
          v842 = v841;
          if ((unint64_t)(v822 - 8) >= 0x68)
          {
            v843 = v828;
            v844 = v841;
            if (v821 + (v822 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v972[v822 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v845 = ((unint64_t)(v822 - 8) >> 3) + 1;
              v846 = 8 * (v845 & 0x3FFFFFFFFFFFFFFCLL);
              v843 = &v828[-v846];
              v844 = &v841[-v846];
              v847 = &v972[8 * v967 - 16];
              v848 = (__int128 *)(v821 + 8 * v967 - 16);
              v849 = v845 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v850 = *v848;
                *((_OWORD *)v847 - 1) = *(v848 - 1);
                *(_OWORD *)v847 = v850;
                v847 -= 32;
                v848 -= 2;
                v849 -= 4;
              }
              while (v849);
              if (v845 == (v845 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_1052;
            }
          }
          else
          {
            v843 = v828;
            v844 = v841;
          }
          do
          {
            v851 = *((_QWORD *)v843 - 1);
            v843 -= 8;
            *((_QWORD *)v844 - 1) = v851;
            v844 -= 8;
          }
          while (v843 != (char *)v821);
        }
LABEL_1052:
        v852 = v842 + 648;
        v853 = v820 - v828;
        if (v853)
          memmove(v842 + 648, v828, v853);
        v973[217] = v844;
        v973[218] = &v852[v853];
        v973[219] = &v972[8 * v969];
        v669 = v949;
        if (v821)
          operator delete((void *)v821);
        goto LABEL_1064;
      }
      v830 = v820 - v824;
      if ((unint64_t)(v820 - v824) > 0x287)
      {
        v832 = v820;
        v833 = 81;
      }
      else
      {
        v971 = v830 >> 3;
        v831 = 81 - (v830 >> 3);
        bzero(v820, 648 - (v830 & 0xFFFFFFFFFFFFFFF8));
        v832 = &v820[8 * v831];
        v669 = v949;
        v973[218] = v832;
        if (v820 == (char *)(v821 + ((unint64_t)&v820[-v821] & 0xFFFFFFFFFFFFFFF8)))
        {
LABEL_1064:
          v115 = v973;
          v678 = v973[218] - 648;
          v664 = v957;
          v662 = v948;
          v666 = v950;
          v667 = v953;
          v671 = v951;
          v670 = v952;
          goto LABEL_1065;
        }
        v824 = (_BYTE *)(v821 + ((unint64_t)&v820[-v821] & 0xFFFFFFFFFFFFFFF8));
        v823 = (uint64_t)&v820[-v821] >> 3;
        v833 = v971;
      }
      v834 = v832 - (v824 + 648);
      v835 = v834 >> 3;
      v836 = v832 - 648;
      v837 = v832;
      if (v832 - 648 < v820)
      {
        v838 = (v822 & 0xFFFFFFFFFFFFFFF8) + v834;
        v839 = v821 + v838 + 8;
        if ((unint64_t)v820 > v839)
          v839 = (unint64_t)v820;
        v840 = v839 + ~v821 - v838;
        if (v840 >= 0x58)
        {
          v837 = v832;
          if ((unint64_t)&v824[-(v822 & 0xFFFFFFFFFFFFFFF8) + 648 - v821] >= 0x20)
          {
            v854 = (v840 >> 3) + 1;
            v855 = 8 * (v854 & 0x3FFFFFFFFFFFFFFCLL);
            v836 += v855;
            v837 = &v832[v855];
            v856 = v832 + 16;
            v857 = (__int128 *)(v821 + 8 * v835 + 8 * v823 + 16);
            v858 = v854 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v859 = *v857;
              *(v856 - 1) = *(v857 - 1);
              *v856 = v859;
              v856 += 2;
              v857 += 2;
              v858 -= 4;
            }
            while (v858);
            if (v854 == (v854 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1061;
          }
        }
        else
        {
          v837 = v832;
        }
        do
        {
          v860 = *(_QWORD *)v836;
          v836 += 8;
          *(_QWORD *)v837 = v860;
          v837 += 8;
        }
        while (v836 < v820);
      }
LABEL_1061:
      v973[218] = v837;
      if (v832 != v824 + 648)
      {
        v861 = v824;
        memmove(&v832[-8 * v835], v824, v834);
        v824 = v861;
      }
      bzero(v824, 8 * v833);
      goto LABEL_1064;
    }
LABEL_1068:
    sub_20F91BC28((uint64_t)(v115 + 395), (uint64_t)&v1127, v662 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
    sub_20F91BC28((uint64_t)(v115 + 575), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
    sub_20F91CF24((uint64_t)(v115 + 755), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)v1129 << 32));
    v862 = *(_DWORD *)&v1106[8];
    v863 = *((unsigned int *)v115 + 1873);
    if (!(_DWORD)v863 || !*((_DWORD *)v115 + 1872))
    {
LABEL_1145:
      sub_20F91DBBC((uint64_t)(v115 + 1115), (uint64_t)&v1127, v862 | ((unint64_t)v1130 << 32));
      sub_20F91DBBC((uint64_t)(v115 + 1295), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)DWORD2(v1130) << 32));
      sub_20F91CF24((uint64_t)(v115 + 1475), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)v1131 << 32));
      sub_20F91CF24((uint64_t)(v115 + 1655), (uint64_t)&v1127, *(unsigned int *)&v1106[8] | ((unint64_t)DWORD2(v1131) << 32));
      sub_20F917C80(v945, (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)*(unsigned int *)v1128 << 32));
      sub_20F918BBC((uint64_t)(v115 + 197), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)*(unsigned int *)&v1128[8] << 32));
      sub_20F917C80((uint64_t)(v115 + 377), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)*(unsigned int *)&v1128[16] << 32));
      sub_20F917C80((uint64_t)(v115 + 557), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)*(unsigned int *)&v1128[24] << 32));
      sub_20F919EC0((uint64_t)(v115 + 737), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)v1129 << 32));
      sub_20F91A930((uint64_t)(v115 + 917), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)DWORD2(v1129) << 32));
      sub_20F91B038((uint64_t)(v115 + 1097), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)v1130 << 32));
      sub_20F91B038((uint64_t)(v115 + 1277), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)DWORD2(v1130) << 32));
      sub_20F919EC0((uint64_t)(v115 + 1457), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)v1131 << 32));
      sub_20F919EC0((uint64_t)(v115 + 1637), (uint64_t)&v1127, *(unsigned int *)v1106 | ((unint64_t)DWORD2(v1131) << 32));
      v940 = *((unsigned int *)v115 + 12);
      if ((_DWORD)v940)
        bzero(*v944, 8 * v940);
      sub_20F8DB994((uint64_t)v1128, v946 + 66);
      v941 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
      v1119 = 0u;
      v1118 = 0u;
      v1117 = 0u;
      v1116 = 0u;
      v1115 = 0u;
      v1114 = 0u;
      v1113 = 0u;
      v1112 = 0u;
      v1111 = 0u;
      v1110 = 0u;
      v1109 = 0u;
      v1108 = 0u;
      v1107 = 0u;
      memset(v1106, 0, sizeof(v1106));
      sub_20F8EA9E4(v941, (uint64_t)&v1074, (uint64_t)v1106);
      sub_20F89E908((uint64_t)v1106);
      v942 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
      v1119 = 0u;
      v1118 = 0u;
      v1117 = 0u;
      v1116 = 0u;
      v1115 = 0u;
      v1114 = 0u;
      v1113 = 0u;
      v1112 = 0u;
      v1111 = 0u;
      v1110 = 0u;
      v1109 = 0u;
      v1108 = 0u;
      v1107 = 0u;
      memset(v1106, 0, sizeof(v1106));
      sub_20F905738(v942, (uint64_t)v1128, v1106);
      sub_20F89E908((uint64_t)v1106);
      v399 = v1128;
      goto LABEL_1148;
    }
    v864 = 0;
    v1029 = DWORD2(v1129);
    v865 = v115 + 937;
    LODWORD(v866) = 1;
    v1032 = *(_DWORD *)&v1106[8];
    v958 = v115 + 937;
    while (!(_DWORD)v866)
    {
LABEL_1072:
      if (++v864 >= v863)
      {
        v862 = *(_DWORD *)&v1106[8];
        goto LABEL_1145;
      }
    }
    v867 = 0;
    v868 = v115[946] + 8 * (*((_DWORD *)v115 + 1898) * v864);
    v869 = v1029 + v864;
    v1036 = v864;
    while (1)
    {
      v873 = *(_QWORD *)(v868 + 8 * v867);
      if (v873 != -1)
      {
        v874 = *v865 + 8 * v873;
        v875 = 9 * v867 + v862;
        v876 = 0;
        v877.i64[0] = 0;
        if (v869 < v875)
          goto LABEL_1079;
LABEL_1078:
        v877.i64[0] = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                                + 8 * (v875 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
        goto LABEL_1079;
      }
      v892 = v115[945];
      if (!v892)
        break;
      v893 = v115[941];
      v894 = v115[942];
      v895 = ((v894 - v893) << 6) - 1;
      v896 = v115[944];
      if (v894 == v893)
        v895 = 0;
      v874 = v115[937]
           + 8
           * *(_QWORD *)(*(_QWORD *)(v893 + (((unint64_t)(v896 + v892 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v896 + v892 - 1) & 0x1FF));
      v115[945] = v892 - 1;
      if ((unint64_t)(v895 - (v892 + v896) + 1) >= 0x400)
      {
        operator delete(*(void **)(v894 - 8));
        v115[942] -= 8;
      }
LABEL_1142:
      *(_QWORD *)(v868 + 8 * v867) = (v874 - v115[937]) >> 3;
      ++*(_QWORD *)(v115[950] + 8 * v864);
      v875 = 9 * v867 + v862;
      v876 = 0;
      v877.i64[0] = 0;
      if (v869 >= v875)
        goto LABEL_1078;
LABEL_1079:
      if (v875 + 1 <= v869)
      {
        v876 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v875 + 1 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
        v878 = v875 + 2;
        v879 = 0;
        v880 = 0;
        if (v875 + 2 > v869)
        {
LABEL_1081:
          v881 = v875 + 3;
          if (v875 + 3 > v869)
            goto LABEL_1082;
          goto LABEL_1090;
        }
      }
      else
      {
        v878 = v875 + 2;
        v879 = 0;
        v880 = 0;
        if (v875 + 2 > v869)
          goto LABEL_1081;
      }
      v880 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v878 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v881 = v875 + 3;
      if (v875 + 3 > v869)
      {
LABEL_1082:
        v882 = v875 + 4;
        v883 = 0;
        v884 = 0;
        if (v875 + 4 > v869)
          goto LABEL_1083;
        goto LABEL_1091;
      }
LABEL_1090:
      v879 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v881 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v882 = v875 + 4;
      v883 = 0;
      v884 = 0;
      if (v875 + 4 > v869)
      {
LABEL_1083:
        v885 = v875 + 5;
        if (v875 + 5 > v869)
          goto LABEL_1084;
        goto LABEL_1092;
      }
LABEL_1091:
      v884 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v882 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v885 = v875 + 5;
      if (v875 + 5 > v869)
      {
LABEL_1084:
        v886 = v875 + 6;
        v887 = 0;
        v888 = 0;
        if (v875 + 6 > v869)
          goto LABEL_1085;
        goto LABEL_1093;
      }
LABEL_1092:
      v883 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v885 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v886 = v875 + 6;
      v887 = 0;
      v888 = 0;
      if (v875 + 6 > v869)
      {
LABEL_1085:
        v889 = v875 + 7;
        if (v875 + 7 > v869)
          goto LABEL_1086;
        goto LABEL_1094;
      }
LABEL_1093:
      v888 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v886 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v889 = v875 + 7;
      if (v875 + 7 > v869)
      {
LABEL_1086:
        v890 = v875 + 8;
        v891 = 0;
        if (v890 <= v869)
          goto LABEL_1095;
        goto LABEL_1075;
      }
LABEL_1094:
      v887 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                       + 8 * (v889 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
      v890 = v875 + 8;
      v891 = 0;
      if (v890 <= v869)
LABEL_1095:
        v891 = *(_QWORD *)(*(_QWORD *)v1127.__r_.__value_.__l.__data_
                         + 8 * (v890 + *(_DWORD *)(v1127.__r_.__value_.__r.__words[0] + 16) * v869));
LABEL_1075:
      v877.i64[1] = v876;
      v870.i64[0] = v880;
      v870.i64[1] = v879;
      v871.i64[0] = v884;
      v871.i64[1] = v883;
      v872.i64[0] = v888;
      v872.i64[1] = v887;
      v872.i64[1] = vextq_s8(v872, v872, 8uLL).u64[0];
      v871.i64[1] = vextq_s8(v871, v871, 8uLL).u64[0];
      v870.i64[1] = vextq_s8(v870, v870, 8uLL).u64[0];
      v877.i64[1] = vextq_s8(v877, v877, 8uLL).u64[0];
      *(_QWORD *)(v874 + 64) = v891;
      *(int8x16_t *)v874 = v877;
      *(int8x16_t *)(v874 + 16) = v870;
      *(int8x16_t *)(v874 + 32) = v871;
      *(int8x16_t *)(v874 + 48) = v872;
      ++v867;
      v866 = *((unsigned int *)v115 + 1872);
      if (v867 >= v866)
      {
        v863 = *((unsigned int *)v115 + 1873);
        goto LABEL_1072;
      }
    }
    v897 = v115;
    v898 = (char *)v115[938];
    v899 = v897[937];
    v900 = (int64_t)&v898[-v899];
    v901 = (uint64_t)&v898[-v899] >> 3;
    v902 = (_BYTE *)(v899 + ((unint64_t)&v898[-v899] & 0xFFFFFFFFFFFFFFF8));
    v903 = v897[939];
    if ((unint64_t)(v903 - (_QWORD)v898) < 0x48)
    {
      v904 = v901 + 9;
      if ((unint64_t)(v901 + 9) >> 61)
        goto LABEL_1161;
      v905 = v903 - v899;
      if (v905 >> 2 > v904)
        v904 = v905 >> 2;
      if ((unint64_t)v905 >= 0x7FFFFFFFFFFFFFF8)
        v906 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v906 = v904;
      if (v906)
      {
        if (v906 >> 61)
          goto LABEL_1162;
        v907 = operator new(8 * v906);
      }
      else
      {
        v907 = 0;
      }
      v919 = &v907[8 * v901];
      *((_QWORD *)v919 + 8) = 0;
      *((_OWORD *)v919 + 2) = 0u;
      *((_OWORD *)v919 + 3) = 0u;
      *(_OWORD *)v919 = 0u;
      *((_OWORD *)v919 + 1) = 0u;
      if ((char *)v899 == v898)
      {
        v922 = &v907[8 * v901];
      }
      else
      {
        v920 = v900 - 8;
        if ((unint64_t)(v900 - 8) >= 0x68)
        {
          v923 = v899 + (v900 & 0xFFFFFFFFFFFFFFF8) - (_QWORD)&v907[v900 & 0xFFFFFFFFFFFFFFF8];
          v921 = (char *)(v899 + ((unint64_t)&v898[-v899] & 0xFFFFFFFFFFFFFFF8));
          v922 = &v907[8 * v901];
          if (v923 >= 0x20)
          {
            v924 = (v920 >> 3) + 1;
            v925 = 8 * (v924 & 0x3FFFFFFFFFFFFFFCLL);
            v921 = &v902[-v925];
            v922 = &v919[-v925];
            v926 = &v907[8 * v901 - 16];
            v927 = (__int128 *)(v899 + 8 * v901 - 16);
            v928 = v924 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v929 = *v927;
              *(v926 - 1) = *(v927 - 1);
              *v926 = v929;
              v926 -= 2;
              v927 -= 2;
              v928 -= 4;
            }
            while (v928);
            if (v924 == (v924 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_1130;
          }
        }
        else
        {
          v921 = (char *)(v899 + ((unint64_t)&v898[-v899] & 0xFFFFFFFFFFFFFFF8));
          v922 = &v907[8 * v901];
        }
        do
        {
          v930 = *((_QWORD *)v921 - 1);
          v921 -= 8;
          *((_QWORD *)v922 - 1) = v930;
          v922 -= 8;
        }
        while (v921 != (char *)v899);
      }
LABEL_1130:
      v931 = v919 + 72;
      v932 = v898 - v902;
      if (v932)
        memmove(v919 + 72, v902, v932);
      v973[937] = v922;
      v973[938] = &v931[v932];
      v973[939] = &v907[8 * v906];
      if (v899)
        operator delete((void *)v899);
      goto LABEL_1141;
    }
    v908 = v898 - v902;
    if ((unint64_t)(v898 - v902) > 0x47)
    {
      v911 = v898;
      v909 = 9;
    }
    else
    {
      v909 = v908 >> 3;
      v910 = 9 - (v908 >> 3);
      bzero(v898, 72 - (v908 & 0xFFFFFFFFFFFFFFF8));
      v911 = &v898[8 * v910];
      v973[938] = v911;
      if (v898 == v902)
      {
LABEL_1141:
        v115 = v973;
        v874 = v973[938] - 72;
        v865 = v958;
        v862 = v1032;
        v864 = v1036;
        goto LABEL_1142;
      }
    }
    v912 = v911 - (v902 + 72);
    v913 = v912 >> 3;
    v914 = v911 - 72;
    v915 = v911;
    if (v911 - 72 < v898)
    {
      v916 = (v900 & 0xFFFFFFFFFFFFFFF8) + v912;
      v917 = v899 + v916 + 8;
      if ((unint64_t)v898 > v917)
        v917 = (unint64_t)v898;
      v918 = v917 + ~v899 - v916;
      if (v918 >= 0x58)
      {
        v933 = (v918 >> 3) + 1;
        v934 = 8 * (v933 & 0x3FFFFFFFFFFFFFFCLL);
        v914 += v934;
        v915 = &v911[v934];
        v935 = v911 + 16;
        v936 = (__int128 *)(v899 + 8 * v913 + 8 * v901 + 16);
        v937 = v933 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v938 = *v936;
          *(v935 - 1) = *(v936 - 1);
          *v935 = v938;
          v935 += 2;
          v936 += 2;
          v937 -= 4;
        }
        while (v937);
        if (v933 == (v933 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1138;
      }
      else
      {
        v915 = v911;
      }
      do
      {
        v939 = *(_QWORD *)v914;
        v914 += 8;
        *(_QWORD *)v915 = v939;
        v915 += 8;
      }
      while (v914 < v898);
    }
LABEL_1138:
    v973[938] = v915;
    if (v911 != v902 + 72)
      memmove(&v911[-8 * v913], (const void *)(v899 + ((unint64_t)&v898[-v899] & 0xFFFFFFFFFFFFFFF8)), v912);
    bzero((void *)(v899 + ((unint64_t)&v898[-v899] & 0xFFFFFFFFFFFFFFF8)), 8 * v909);
    goto LABEL_1141;
  }
  nullsub_1(v293);
  nullsub_1(v293);
  sub_20F8D63EC(v115 + 4, (char **)__dst);
  sub_20F8DF8DC(v115 + 17, v122);
  v396 = *((unsigned int *)v115 + 12);
  if ((_DWORD)v396)
    bzero((void *)v115[4], 8 * v396);
  sub_20F8DB994((uint64_t)v1106, v946 + 66);
  v397 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  sub_20F8DFD74(v397, (uint64_t)&v1074);
  v398 = (*(uint64_t (**)(_QWORD *))(*v115 + 40))(v115);
  sub_20F8E0350(v398, (uint64_t)v1106);
  v399 = v1106;
LABEL_1148:
  sub_20F89E908((uint64_t)v399);
  v10 = 0;
LABEL_1149:
  sub_20F89E908((uint64_t)&v1050);
  sub_20F89E908((uint64_t)__dst);
LABEL_1150:
  sub_20F89E908((uint64_t)&v1074);
  return v10;
}

