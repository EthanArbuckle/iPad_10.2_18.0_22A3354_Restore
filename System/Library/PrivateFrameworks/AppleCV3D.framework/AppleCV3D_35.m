BOOL sub_20F71C504(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD ***a4)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *a4;
  v8 = *a2;
  v9 = *a1;
  v10 = *(uint64_t **)(*a2 + 200);
  v11 = *(_QWORD *)(*a2 + 208);
  v12 = sub_20F625764(*a4, v10, v11, *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208));
  v13 = *a3;
  result = sub_20F625764(v7, *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208), v10, v11);
  if (v12)
  {
    if (result)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      v17 = *a3;
      result = sub_20F625764(*a4, *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208), *(uint64_t **)(v9 + 200), *(_QWORD *)(v9 + 208));
      if (!result)
        return result;
      *a2 = v17;
    }
    *a3 = v9;
  }
  else if (result)
  {
    *a2 = v13;
    *a3 = v8;
    v15 = *a2;
    v16 = *a1;
    result = sub_20F625764(*a4, *(uint64_t **)(*a2 + 200), *(_QWORD *)(*a2 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208));
    if (result)
    {
      *a1 = v15;
      *a2 = v16;
    }
  }
  return result;
}

BOOL sub_20F71C610(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 200), *(_QWORD *)(v8 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20F71C504(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20F71C504(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 200), *(_QWORD *)(v20 + 208), *(uint64_t **)(v21 + 200), *(_QWORD *)(v21 + 208)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 200), *(_QWORD *)(*v19 + 208), *(uint64_t **)(v23 + 200), *(_QWORD *)(v23 + 208)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 200), *(_QWORD *)(v22 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20F71C834(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20F71C504(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 200), *(_QWORD *)(*v11 + 208), *(uint64_t **)(v15 + 200), *(_QWORD *)(v15 + 208)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 200), *(_QWORD *)(v14 + 208), *(uint64_t **)(v15 + 200), *(_QWORD *)(v15 + 208));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

BOOL sub_20F71C834(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD ***a6)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;

  sub_20F71C504(a1, a2, a3, a6);
  v12 = *a6;
  v13 = *a4;
  v14 = *a3;
  if (sub_20F625764(*a6, *(uint64_t **)(*a4 + 200), *(_QWORD *)(*a4 + 208), *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208)))
  {
    *a3 = v13;
    *a4 = v14;
    v12 = *a6;
    v15 = *a3;
    v16 = *a2;
    if (sub_20F625764(*a6, *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208), *(uint64_t **)(*a2 + 200), *(_QWORD *)(*a2 + 208)))
    {
      *a2 = v15;
      *a3 = v16;
      v12 = *a6;
      v17 = *a2;
      v18 = *a1;
      if (sub_20F625764(*a6, *(uint64_t **)(*a2 + 200), *(_QWORD *)(*a2 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208)))
      {
        *a1 = v17;
        *a2 = v18;
        v12 = *a6;
      }
    }
  }
  v19 = *a5;
  v20 = *a4;
  result = sub_20F625764(v12, *(uint64_t **)(*a5 + 200), *(_QWORD *)(*a5 + 208), *(uint64_t **)(*a4 + 200), *(_QWORD *)(*a4 + 208));
  if (result)
  {
    *a4 = v19;
    *a5 = v20;
    v22 = *a4;
    v23 = *a3;
    result = sub_20F625764(*a6, *(uint64_t **)(*a4 + 200), *(_QWORD *)(*a4 + 208), *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208));
    if (result)
    {
      *a3 = v22;
      *a4 = v23;
      v24 = *a3;
      v25 = *a2;
      result = sub_20F625764(*a6, *(uint64_t **)(*a3 + 200), *(_QWORD *)(*a3 + 208), *(uint64_t **)(*a2 + 200), *(_QWORD *)(*a2 + 208));
      if (result)
      {
        *a2 = v24;
        *a3 = v25;
        v26 = *a6;
        v27 = *a2;
        v28 = *a1;
        result = sub_20F625764(v26, *(uint64_t **)(*a2 + 200), *(_QWORD *)(*a2 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208));
        if (result)
        {
          *a1 = v27;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

double sub_20F71C998(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20F71CC10((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20F71CC10((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20F71C998(a1, v14, v15, a4, a5);
        sub_20F71C998(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20F71CC10(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20F71C998(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20F71C998(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

double *sub_20F71CE5C(uint64_t a1, double *a2, char a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  __n128 v42;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double *result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  _QWORD v76[64];
  double *v77;
  __int128 v78;
  uint64_t v79;

  v77 = (double *)v76;
  v78 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v78 = v6;
    v7 = (double *)operator new[]();
    if (v77 != (double *)v76 && v77)
      MEMORY[0x212BC6368]();
    v77 = v7;
  }
  v8 = *a2;
  *((_QWORD *)&v78 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v79 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v79, v76);
  }
  else
  {
    v79 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v79, v76);
  }
  v16 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v17 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v18 = v77;
    v19 = v77[v17];
    if ((v16 & 1) == 0)
    {
      v20 = v17 - 1;
      if (v20 != v16)
      {
        sub_20E8FB210(v77, &v77[v20], &v77[v16]);
        v18 = v77;
      }
      v10 = 0.5;
      v19 = (v19 + v18[v20]) * 0.5;
    }
    v9.n128_f64[0] = sqrt(v19);
    v21 = v8 * v9.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v21 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v79 = a1 + 120;
      sub_20F62CB00((uint64_t)&v79, v76);
      goto LABEL_30;
    }
  }
  v79 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v79, v76, v9, v10, v11, v12, v13, v14, v15);
LABEL_30:
  v22 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v23 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v24 = v77;
    v25 = v77[v23];
    if ((v22 & 1) == 0)
    {
      v26 = v23 - 1;
      if (v26 != v22)
      {
        sub_20E8FB210(v77, &v77[v26], &v77[v22]);
        v24 = v77;
      }
      v25 = (v25 + v24[v26]) * 0.5;
    }
    v27 = v8 * sqrt(v25);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v27 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v79 = a1 + 120;
      sub_20F62D074((uint64_t)&v79, v76);
      goto LABEL_39;
    }
  }
  v79 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v79, v76);
LABEL_39:
  v35 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v36 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v37 = v77;
    v38 = v77[v36];
    if ((v35 & 1) == 0)
    {
      v39 = v36 - 1;
      if (v39 != v35)
      {
        sub_20E8FB210(v77, &v77[v39], &v77[v35]);
        v37 = v77;
      }
      v29 = 0.5;
      v38 = (v38 + v37[v39]) * 0.5;
    }
    v28 = sqrt(v38);
    v40 = v8 * v28;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v40 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v79 = a1 + 120;
      sub_20F62D57C((uint64_t)&v79, v76);
      goto LABEL_48;
    }
  }
  v79 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v79, v76, v28, v29, v30, v31, v32, v33, v34);
LABEL_48:
  v49 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v50 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v51 = v77;
    v52 = v77[v50];
    if ((v49 & 1) == 0)
    {
      v53 = v50 - 1;
      if (v53 != v49)
      {
        sub_20E8FB210(v77, &v77[v53], &v77[v49]);
        v51 = v77;
      }
      v42.n128_u64[0] = 0.5;
      v52 = (v52 + v51[v53]) * 0.5;
    }
    v41.n128_f64[0] = sqrt(v52);
    v54 = v8 * v41.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v54 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v79 = a1 + 120;
      sub_20F62DC70((uint64_t)&v79, v76);
      goto LABEL_57;
    }
  }
  v79 = a1 + 120;
  sub_20F721894((uint64_t)&v79, v76, v41, v42, v43, v44, v45, v46, v47, v48);
LABEL_57:
  v55 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v56 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v57 = v77;
    v58 = v77[v56];
    if ((v55 & 1) == 0)
    {
      v59 = v56 - 1;
      if (v59 != v55)
      {
        sub_20E8FB210(v77, &v77[v59], &v77[v55]);
        v57 = v77;
      }
      v58 = (v58 + v57[v59]) * 0.5;
    }
    v60 = v8 * sqrt(v58);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v60 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v79 = a1 + 120;
      sub_20F62E070((uint64_t)&v79, v76);
      goto LABEL_66;
    }
  }
  v79 = a1 + 120;
  sub_20F62E274((uint64_t)&v79, v76);
LABEL_66:
  v61 = *((_QWORD *)&v78 + 1);
  result = v77;
  if (!*((_QWORD *)&v78 + 1))
  {
    v66 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (v77 == (double *)v76)
      goto LABEL_76;
    goto LABEL_74;
  }
  v63 = *((_QWORD *)&v78 + 1) >> 1;
  sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
  result = v77;
  v64 = v77[v63];
  if ((v61 & 1) == 0)
  {
    v65 = v63 - 1;
    if (v65 != v61)
    {
      sub_20E8FB210(v77, &v77[v65], &v77[v61]);
      result = v77;
    }
    v64 = (v64 + result[v65]) * 0.5;
  }
  v66 = v8 * sqrt(v64);
  *((_QWORD *)&v78 + 1) = 0;
  if (result != (double *)v76)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v72 = 0x3DDB7CDFD9D7BDBBLL;
    v73 = 1.0e20;
    if (v21 > 0.0)
    {
      v72 = *(_QWORD *)&v21;
      v73 = 1.0 / (v21 * v21);
    }
    *(_QWORD *)(a1 + 8) = v72;
    *(double *)(a1 + 16) = v73;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v27 > 0.0)
    {
      *(double *)(a1 + 24) = v27;
      *(double *)(a1 + 32) = 1.0 / (v27 * v27);
      if (v40 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v54 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v40 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v40;
    *(double *)(a1 + 48) = 1.0 / (v40 * v40);
    if (v54 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v60 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v54;
    *(double *)(a1 + 64) = 1.0 / (v54 * v54);
    if (v60 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v60 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v74 = 1.0;
    v75 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v60;
  *(double *)(a1 + 80) = 1.0 / (v60 * v60);
  v74 = 1.0;
  v75 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v66 <= 0.0)
  {
    v75 = 1.0e20;
    v74 = 1.0e-10;
  }
  else
  {
    v74 = v66;
    v75 = 1.0 / (v66 * v66);
  }
LABEL_94:
  *(double *)(a1 + 104) = v74;
  *(double *)(a1 + 112) = v75;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F71D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F71D5F8(uint64_t a1, double **a2, char a3)
{
  unint64_t v6;
  double *v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  uint64_t v38;
  double v39;
  __n128 v40;
  __n128 v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *result;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  _QWORD v75[64];
  double *v76;
  __int128 v77;
  uint64_t v78;

  v76 = (double *)v75;
  v77 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v77 = v6;
    v7 = (double *)operator new[]();
    if (v76 != (double *)v75 && v76)
      MEMORY[0x212BC6368]();
    v76 = v7;
  }
  *((_QWORD *)&v77 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v78 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v78, v75);
  }
  else
  {
    v78 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v78, v75);
  }
  v15 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v16 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v17 = v76;
    v18 = v76[v16];
    if ((v15 & 1) == 0)
    {
      v19 = v16 - 1;
      if (v19 != v15)
      {
        sub_20E8FB210(v76, &v76[v19], &v76[v15]);
        v17 = v76;
      }
      v18 = (v18 + v17[v19]) * 0.5;
    }
    v8.n128_f64[0] = sqrt(v18);
    v9 = **a2;
    v20 = v8.n128_f64[0] * v9;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v20 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v78 = a1 + 120;
      sub_20F62CB00((uint64_t)&v78, v75);
      goto LABEL_30;
    }
  }
  v78 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v78, v75, v8, v9, v10, v11, v12, v13, v14);
LABEL_30:
  v21 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v22 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v23 = v76;
    v24 = v76[v22];
    if ((v21 & 1) == 0)
    {
      v25 = v22 - 1;
      if (v25 != v21)
      {
        sub_20E8FB210(v76, &v76[v25], &v76[v21]);
        v23 = v76;
      }
      v24 = (v24 + v23[v25]) * 0.5;
    }
    v26 = sqrt(v24) * (*a2)[1];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v26 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v78 = a1 + 120;
      sub_20F62D074((uint64_t)&v78, v75);
      goto LABEL_39;
    }
  }
  v78 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v78, v75);
LABEL_39:
  v34 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v35 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v36 = v76;
    v37 = v76[v35];
    if ((v34 & 1) == 0)
    {
      v38 = v35 - 1;
      if (v38 != v34)
      {
        sub_20E8FB210(v76, &v76[v38], &v76[v34]);
        v36 = v76;
      }
      v37 = (v37 + v36[v38]) * 0.5;
    }
    v27 = sqrt(v37);
    v28 = (*a2)[2];
    v39 = v27 * v28;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v39 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v78 = a1 + 120;
      sub_20F62D57C((uint64_t)&v78, v75);
      goto LABEL_48;
    }
  }
  v78 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v78, v75, v27, v28, v29, v30, v31, v32, v33);
LABEL_48:
  v48 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v49 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v50 = v76;
    v51 = v76[v49];
    if ((v48 & 1) == 0)
    {
      v52 = v49 - 1;
      if (v52 != v48)
      {
        sub_20E8FB210(v76, &v76[v52], &v76[v48]);
        v50 = v76;
      }
      v51 = (v51 + v50[v52]) * 0.5;
    }
    v40.n128_f64[0] = sqrt(v51);
    v41.n128_f64[0] = (*a2)[3];
    v53 = v40.n128_f64[0] * v41.n128_f64[0];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v53 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v78 = a1 + 120;
      sub_20F62DC70((uint64_t)&v78, v75);
      goto LABEL_57;
    }
  }
  v78 = a1 + 120;
  sub_20F721894((uint64_t)&v78, v75, v40, v41, v42, v43, v44, v45, v46, v47);
LABEL_57:
  v54 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v55 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v56 = v76;
    v57 = v76[v55];
    if ((v54 & 1) == 0)
    {
      v58 = v55 - 1;
      if (v58 != v54)
      {
        sub_20E8FB210(v76, &v76[v58], &v76[v54]);
        v56 = v76;
      }
      v57 = (v57 + v56[v58]) * 0.5;
    }
    v59 = sqrt(v57) * (*a2)[4];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v59 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v78 = a1 + 120;
      sub_20F62E070((uint64_t)&v78, v75);
      goto LABEL_66;
    }
  }
  v78 = a1 + 120;
  sub_20F62E274((uint64_t)&v78, v75);
LABEL_66:
  v60 = *((_QWORD *)&v77 + 1);
  result = v76;
  if (!*((_QWORD *)&v77 + 1))
  {
    v65 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (v76 == (double *)v75)
      goto LABEL_76;
    goto LABEL_74;
  }
  v62 = *((_QWORD *)&v77 + 1) >> 1;
  sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
  result = v76;
  v63 = v76[v62];
  if ((v60 & 1) == 0)
  {
    v64 = v62 - 1;
    if (v64 != v60)
    {
      sub_20E8FB210(v76, &v76[v64], &v76[v60]);
      result = v76;
    }
    v63 = (v63 + result[v64]) * 0.5;
  }
  v65 = sqrt(v63) * (*a2)[5];
  *((_QWORD *)&v77 + 1) = 0;
  if (result != (double *)v75)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v71 = 0x3DDB7CDFD9D7BDBBLL;
    v72 = 1.0e20;
    if (v20 > 0.0)
    {
      v71 = *(_QWORD *)&v20;
      v72 = 1.0 / (v20 * v20);
    }
    *(_QWORD *)(a1 + 8) = v71;
    *(double *)(a1 + 16) = v72;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v26 > 0.0)
    {
      *(double *)(a1 + 24) = v26;
      *(double *)(a1 + 32) = 1.0 / (v26 * v26);
      if (v39 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v53 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v39 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v39;
    *(double *)(a1 + 48) = 1.0 / (v39 * v39);
    if (v53 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v59 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v53;
    *(double *)(a1 + 64) = 1.0 / (v53 * v53);
    if (v59 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v59 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v73 = 1.0;
    v74 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v59;
  *(double *)(a1 + 80) = 1.0 / (v59 * v59);
  v73 = 1.0;
  v74 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v65 <= 0.0)
  {
    v74 = 1.0e20;
    v73 = 1.0e-10;
  }
  else
  {
    v73 = v65;
    v74 = 1.0 / (v65 * v65);
  }
LABEL_94:
  *(double *)(a1 + 104) = v73;
  *(double *)(a1 + 112) = v74;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F71DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F71DDC0(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  __int128 *v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  int64x2_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64x2_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  unint64_t v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _OWORD *v229;
  __int128 *v230;
  unint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  __int128 *v263;
  unint64_t v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  unint64_t v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _OWORD *v328;
  __int128 *v329;
  unint64_t v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _OWORD *v361;
  __int128 *v362;
  unint64_t v363;
  __int128 v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _OWORD *v393;
  __int128 *v394;
  unint64_t v395;
  __int128 v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  _QWORD *v400;
  uint64_t v401;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;

  v1 = (_QWORD *)result;
  v412 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)result;
  v2 = *(_QWORD **)(result + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 1096);
  if (*(_BYTE *)(*(_QWORD *)result + 1096) || (result = sub_20F5BB998((_QWORD *)(v3 + 120)), !(_DWORD)result))
  {
    v7 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v3 + 904) - *(_QWORD *)(v3 + 896)) >> 3);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 896);
    v6 = *(_QWORD *)(v3 + 904);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) == 0)
          v7 = ++v8;
        v5 += 504;
      }
      while (v5 != v6);
    }
  }
  v9 = v2 + 145;
  v2[144] += v7;
  v10 = v2[211];
  v11 = v10 + 1;
  v12 = v2[210];
  if (v10 + 1 <= v12)
  {
    v16 = v2[209];
    *(_QWORD *)(v16 + 8 * v10) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
    {
LABEL_37:
      v32 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v3 + 928) - *(_QWORD *)(v3 + 920)) >> 3);
      goto LABEL_38;
    }
  }
  else
  {
    v13 = 2 * v12;
    if (v13 > v11)
      v11 = v13;
    v2[210] = v11;
    v14 = v2[209];
    v15 = operator new[]();
    v16 = v15;
    if (v10)
    {
      v17 = 0;
      if (v10 < 4)
        goto LABEL_20;
      if ((unint64_t)(v15 - v14) < 0x20)
        goto LABEL_20;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (_OWORD *)(v15 + 16);
      v19 = (__int128 *)(v14 + 16);
      v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v10 != v17)
      {
LABEL_20:
        v22 = v10 - v17;
        v23 = 8 * v17;
        v24 = (uint64_t *)(v14 + 8 * v17);
        v25 = (_QWORD *)(v15 + v23);
        do
        {
          v26 = *v24++;
          *v25++ = v26;
          --v22;
        }
        while (v22);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v16;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v16 + 8 * v2[211]) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
      goto LABEL_37;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_37;
  v30 = *(_QWORD *)(v3 + 920);
  v31 = *(_QWORD *)(v3 + 928);
  if (v30 == v31)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v30 + 136) + 4) & 6) == 0)
        v32 = ++v33;
      v30 += 280;
    }
    while (v30 != v31);
  }
LABEL_38:
  v2[144] += v32;
  v34 = v28 + 2;
  v35 = v2[210];
  if (v28 + 2 <= v35)
  {
    v38 = v16;
    *(_QWORD *)(v16 + 8 * v29) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
    {
LABEL_68:
      v54 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(v3 + 952) - *(_QWORD *)(v3 + 944)) >> 4);
      goto LABEL_69;
    }
  }
  else
  {
    v36 = 2 * v35;
    if (v36 > v34)
      v34 = v36;
    v2[210] = v34;
    v37 = operator new[]();
    v38 = v37;
    if (v29)
    {
      v39 = 0;
      if (v29 < 4)
        goto LABEL_47;
      if ((unint64_t)(v37 - v16) < 0x20)
        goto LABEL_47;
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (_OWORD *)(v37 + 16);
      v41 = (__int128 *)(v16 + 16);
      v42 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v29 != v39)
      {
LABEL_47:
        v44 = v28 - v39 + 1;
        v45 = 8 * v39;
        v46 = (uint64_t *)(v16 + 8 * v39);
        v47 = (_QWORD *)(v37 + v45);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v44;
        }
        while (v44);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v38;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v38 + 8 * v2[211]) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
      goto LABEL_68;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_68;
  v52 = *(_QWORD **)(v3 + 944);
  v53 = *(_QWORD **)(v3 + 952);
  if (v52 == v53)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    do
    {
      if ((*(_BYTE *)(v52[962] + 4) & 6) == 0
        && (*(_BYTE *)(v52[963] + 4) & 6) == 0
        && (*(_BYTE *)(v52[964] + 4) & 6) == 0
        && (*(_BYTE *)(v52[965] + 4) & 6) == 0
        && (*(_BYTE *)(v52[966] + 4) & 6) == 0)
      {
        v54 = ++v55;
      }
      v52 += 1002;
    }
    while (v52 != v53);
  }
LABEL_69:
  v2[144] += v54;
  v56 = v50 + 2;
  v57 = v2[210];
  if (v50 + 2 <= v57)
  {
    v60 = v38;
    *(_QWORD *)(v38 + 8 * v51) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
    {
LABEL_98:
      v76 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(v3 + 976) - *(_QWORD *)(v3 + 968)) >> 3);
      goto LABEL_99;
    }
  }
  else
  {
    v58 = 2 * v57;
    if (v58 > v56)
      v56 = v58;
    v2[210] = v56;
    v59 = operator new[]();
    v60 = v59;
    if (v51)
    {
      v61 = 0;
      if (v51 < 4)
        goto LABEL_78;
      if ((unint64_t)(v59 - v38) < 0x20)
        goto LABEL_78;
      v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      v62 = (_OWORD *)(v59 + 16);
      v63 = (__int128 *)(v38 + 16);
      v64 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v63;
        *(v62 - 1) = *(v63 - 1);
        *v62 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v51 != v61)
      {
LABEL_78:
        v66 = v50 - v61 + 1;
        v67 = 8 * v61;
        v68 = (uint64_t *)(v38 + 8 * v61);
        v69 = (_QWORD *)(v59 + v67);
        do
        {
          v70 = *v68++;
          *v69++ = v70;
          --v66;
        }
        while (v66);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v60;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v60 + 8 * v2[211]) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
      goto LABEL_98;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_98;
  v74 = *(_QWORD **)(v3 + 968);
  v75 = *(_QWORD **)(v3 + 976);
  if (v74 == v75)
  {
    v76 = 0;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    do
    {
      if ((*(_BYTE *)(v74[628] + 4) & 6) == 0
        && (*(_BYTE *)(v74[629] + 4) & 6) == 0
        && (*(_BYTE *)(v74[630] + 4) & 6) == 0
        && (*(_BYTE *)(v74[631] + 4) & 6) == 0)
      {
        v76 = ++v77;
      }
      v74 += 667;
    }
    while (v74 != v75);
  }
LABEL_99:
  v2[144] += v76;
  v78 = v72 + 2;
  v79 = v2[210];
  if (v72 + 2 <= v79)
  {
    v82 = v60;
    *(_QWORD *)(v60 + 8 * v73) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  else
  {
    v80 = 2 * v79;
    if (v80 > v78)
      v78 = v80;
    v2[210] = v78;
    v81 = operator new[]();
    v82 = v81;
    if (v73)
    {
      v83 = 0;
      if (v73 < 4)
        goto LABEL_108;
      if ((unint64_t)(v81 - v60) < 0x20)
        goto LABEL_108;
      v83 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      v84 = (_OWORD *)(v81 + 16);
      v85 = (__int128 *)(v60 + 16);
      v86 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v87 = *v85;
        *(v84 - 1) = *(v85 - 1);
        *v84 = v87;
        v84 += 2;
        v85 += 2;
        v86 -= 4;
      }
      while (v86);
      if (v73 != v83)
      {
LABEL_108:
        v88 = v72 - v83 + 1;
        v89 = 8 * v83;
        v90 = (uint64_t *)(v60 + 8 * v83);
        v91 = (_QWORD *)(v81 + v89);
        do
        {
          v92 = *v90++;
          *v91++ = v92;
          --v88;
        }
        while (v88);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v82;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v82 + 8 * v2[211]) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if ((_DWORD)result)
  {
    result = (uint64_t)sub_20F5BBAFC(*(_QWORD **)(v3 + 992), *(_QWORD **)(v3 + 1000), (uint64_t)&v403);
    v96 = v411;
    goto LABEL_121;
  }
LABEL_120:
  v96 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v3 + 1000) - *(_QWORD *)(v3 + 992)) >> 3);
LABEL_121:
  v2[144] += v96;
  v97 = v94 + 2;
  v98 = v2[210];
  if (v94 + 2 <= v98)
  {
    v101 = v82;
    *(_QWORD *)(v82 + 8 * v95) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v4)
    {
LABEL_148:
      v118 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(v3 + 1024) - *(_QWORD *)(v3 + 1016)) >> 3);
      goto LABEL_149;
    }
  }
  else
  {
    v99 = 2 * v98;
    if (v99 > v97)
      v97 = v99;
    v2[210] = v97;
    v100 = operator new[]();
    v101 = v100;
    if (v95)
    {
      v102 = 0;
      if (v95 < 4)
        goto LABEL_130;
      if ((unint64_t)(v100 - v82) < 0x20)
        goto LABEL_130;
      v102 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      v103 = (_OWORD *)(v100 + 16);
      v104 = (__int128 *)(v82 + 16);
      v105 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *v104;
        *(v103 - 1) = *(v104 - 1);
        *v103 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v95 != v102)
      {
LABEL_130:
        v107 = v94 - v102 + 1;
        v108 = 8 * v102;
        v109 = (uint64_t *)(v82 + 8 * v102);
        v110 = (_QWORD *)(v100 + v108);
        do
        {
          v111 = *v109++;
          *v110++ = v111;
          --v107;
        }
        while (v107);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v101;
    v113 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v101 + 8 * v2[211]) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v113)
      goto LABEL_148;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_148;
  v116 = *(_QWORD *)(v3 + 1016);
  v117 = *(_QWORD *)(v3 + 1024);
  if (v116 == v117)
  {
    v118 = 0;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v116 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v116 + 744) + 4) & 6) == 0)
        v118 = ++v119;
      v116 += 888;
    }
    while (v116 != v117);
  }
LABEL_149:
  v2[144] += v118;
  v120 = v114 + 2;
  v121 = v2[210];
  if (v114 + 2 <= v121)
  {
    v124 = v101;
  }
  else
  {
    v122 = 2 * v121;
    if (v122 > v120)
      v120 = v122;
    v2[210] = v120;
    v123 = operator new[]();
    v124 = v123;
    if (v115)
    {
      v125 = 0;
      if (v115 < 4)
        goto LABEL_158;
      if ((unint64_t)(v123 - v101) < 0x20)
        goto LABEL_158;
      v125 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      v126 = (_OWORD *)(v123 + 16);
      v127 = (__int128 *)(v101 + 16);
      v128 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *v127;
        *(v126 - 1) = *(v127 - 1);
        *v126 = v129;
        v126 += 2;
        v127 += 2;
        v128 -= 4;
      }
      while (v128);
      if (v115 != v125)
      {
LABEL_158:
        v130 = v114 - v125 + 1;
        v131 = 8 * v125;
        v132 = (uint64_t *)(v101 + 8 * v125);
        v133 = (_QWORD *)(v123 + v131);
        do
        {
          v134 = *v132++;
          *v133++ = v134;
          --v130;
        }
        while (v130);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v124;
    v115 = v2[211];
  }
  *(_QWORD *)(v124 + 8 * v115) = v118;
  ++v2[211];
  v137 = *v1;
  v136 = (int64x2_t *)v1[1];
  v138 = (_QWORD *)(*v1 + 120);
  if (*(_BYTE *)(v137 + 1096))
  {
    v139 = *(_QWORD *)(v137 + 128);
    v140 = *(_QWORD *)(v137 + 136);
    if (v139 == v140)
    {
      v141 = 0;
    }
    else
    {
      v141 = 0;
      do
      {
        v142 = *(_QWORD *)(v139 + 8);
        if ((*(_BYTE *)(v142 + 4) & 6) == 0)
          v141 += *(unsigned __int8 *)(v142 + 20);
        v139 += 16;
      }
      while (v139 != v140);
    }
  }
  else
  {
    result = sub_20F62E4C0(v138, &v403);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
      *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
      *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
      *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
      *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
      *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
      *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
      *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
      v143 = *(_QWORD *)(v137 + 896);
      v144 = *(_QWORD *)(v137 + 904);
      while (v143 != v144)
      {
        v145 = *(_QWORD *)(v143 + 208);
        if (*(_BYTE *)(v143 + 496)
          || (*(_BYTE *)(v145 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v143 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v145);
          sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v143 + 216));
        }
        v143 += 504;
      }
      v146 = *(_QWORD *)(v137 + 920);
      v147 = *(_QWORD *)(v137 + 928);
      while (v146 != v147)
      {
        v148 = *(_QWORD *)(v146 + 136);
        if (*(_BYTE *)(v146 + 272) || (*(_BYTE *)(v148 + 4) & 6) != 0)
          sub_20F394A20(v137 + 1680, v148);
        v146 += 280;
      }
      sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
      sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
      sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
      v149 = *(_QWORD *)(v137 + 1016);
      v150 = *(_QWORD *)(v137 + 1024);
      while (v149 != v150)
      {
        v151 = *(_QWORD *)(v149 + 736);
        if (*(_BYTE *)(v149 + 880)
          || (*(_BYTE *)(v151 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v149 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v151);
          sub_20F394A20(v137 + 1680, *(_QWORD *)(v149 + 744));
        }
        v149 += 888;
      }
      v152 = (uint64_t)(*(_QWORD *)(v137 + 1688) - *(_QWORD *)(v137 + 1680)) >> 2;
      if (v152 <= v403)
        v141 = v403 - v152;
      else
        v141 = 0;
      result = sub_20F59A618(v138);
    }
    else
    {
      v141 = v403;
    }
  }
  v153 = v136 + 107;
  v154 = v141;
  v136[106].i64[0] += v141;
  v136[106].i64[1] += 6 * v141;
  v155 = v136[140].u64[0];
  v156 = v155 + 1;
  v157 = v136[139].u64[1];
  if (v155 + 1 <= v157)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v155) = v141;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_218:
      v174 = *(_QWORD *)(v137 + 224);
      v175 = *(_QWORD *)(v137 + 232);
      if (v174 == v175)
      {
        v176 = 0;
      }
      else
      {
        v176 = 0;
        do
        {
          v177 = *(_QWORD *)(v174 + 8);
          if ((*(_BYTE *)(v177 + 4) & 6) == 0)
            v176 += *(unsigned __int8 *)(v177 + 20);
          v174 += 16;
        }
        while (v174 != v175);
      }
      goto LABEL_252;
    }
  }
  else
  {
    v158 = 2 * v157;
    if (v158 > v156)
      v156 = v158;
    v136[139].i64[1] = v156;
    v159 = v136[139].i64[0];
    v160 = operator new[]();
    v161 = v160;
    if (v155)
    {
      v162 = 0;
      if (v155 < 4)
        goto LABEL_210;
      if ((unint64_t)(v160 - v159) < 0x20)
        goto LABEL_210;
      v162 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      v163 = (_OWORD *)(v160 + 16);
      v164 = (__int128 *)(v159 + 16);
      v165 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 += 2;
        v164 += 2;
        v165 -= 4;
      }
      while (v165);
      if (v155 != v162)
      {
LABEL_210:
        v167 = v155 - v162;
        v168 = 8 * v162;
        v169 = (uint64_t *)(v159 + 8 * v162);
        v170 = (_QWORD *)(v160 + v168);
        do
        {
          v171 = *v169++;
          *v170++ = v171;
          --v167;
        }
        while (v167);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v161;
    *(_QWORD *)(v161 + 8 * v136[140].i64[0]) = v154;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_218;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v178 = *(_QWORD *)(v137 + 896);
    v179 = *(_QWORD *)(v137 + 904);
    while (v178 != v179)
    {
      v180 = *(_QWORD *)(v178 + 208);
      if (*(_BYTE *)(v178 + 496)
        || (*(_BYTE *)(v180 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v178 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v180);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v178 + 216));
      }
      v178 += 504;
    }
    v181 = *(_QWORD *)(v137 + 920);
    v182 = *(_QWORD *)(v137 + 928);
    while (v181 != v182)
    {
      v183 = *(_QWORD *)(v181 + 136);
      if (*(_BYTE *)(v181 + 272) || (*(_BYTE *)(v183 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v183);
      v181 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v184 = *(_QWORD *)(v137 + 1016);
    v185 = *(_QWORD *)(v137 + 1024);
    while (v184 != v185)
    {
      v186 = *(_QWORD *)(v184 + 736);
      if (*(_BYTE *)(v184 + 880)
        || (*(_BYTE *)(v186 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v184 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v186);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v184 + 744));
      }
      v184 += 888;
    }
    v187 = (uint64_t)(*(_QWORD *)(v137 + 1712) - *(_QWORD *)(v137 + 1704)) >> 2;
    if (v187 <= v404)
      v176 = v404 - v187;
    else
      v176 = 0;
    result = sub_20F59A618(v138);
    v173 = v136[140].u64[0];
  }
  else
  {
    v176 = v404;
  }
LABEL_252:
  v188 = v176;
  v136[106].i64[0] += v176;
  v136[106].i64[1] += 9 * v176;
  v189 = v173 + 1;
  v190 = v136[139].u64[1];
  if (v173 + 1 <= v190)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v173) = v176;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_269:
      v207 = *(_QWORD *)(v137 + 320);
      v208 = *(_QWORD *)(v137 + 328);
      if (v207 == v208)
      {
        v209 = 0;
      }
      else
      {
        v209 = 0;
        do
        {
          v210 = *(_QWORD *)(v207 + 8);
          if ((*(_BYTE *)(v210 + 4) & 6) == 0)
            v209 += *(unsigned __int8 *)(v210 + 20);
          v207 += 16;
        }
        while (v207 != v208);
      }
      goto LABEL_303;
    }
  }
  else
  {
    v191 = 2 * v190;
    if (v191 > v189)
      v189 = v191;
    v136[139].i64[1] = v189;
    v192 = v136[139].i64[0];
    v193 = operator new[]();
    v194 = v193;
    if (v173)
    {
      v195 = 0;
      if (v173 < 4)
        goto LABEL_261;
      if ((unint64_t)(v193 - v192) < 0x20)
        goto LABEL_261;
      v195 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      v196 = (_OWORD *)(v193 + 16);
      v197 = (__int128 *)(v192 + 16);
      v198 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *v197;
        *(v196 - 1) = *(v197 - 1);
        *v196 = v199;
        v196 += 2;
        v197 += 2;
        v198 -= 4;
      }
      while (v198);
      if (v173 != v195)
      {
LABEL_261:
        v200 = v173 - v195;
        v201 = 8 * v195;
        v202 = (uint64_t *)(v192 + 8 * v195);
        v203 = (_QWORD *)(v193 + v201);
        do
        {
          v204 = *v202++;
          *v203++ = v204;
          --v200;
        }
        while (v200);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v194;
    *(_QWORD *)(v194 + 8 * v136[140].i64[0]) = v188;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_269;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v211 = *(_QWORD *)(v137 + 896);
    v212 = *(_QWORD *)(v137 + 904);
    while (v211 != v212)
    {
      v213 = *(_QWORD *)(v211 + 208);
      if (*(_BYTE *)(v211 + 496)
        || (*(_BYTE *)(v213 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v211 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v213);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v211 + 216));
      }
      v211 += 504;
    }
    v214 = *(_QWORD *)(v137 + 920);
    v215 = *(_QWORD *)(v137 + 928);
    while (v214 != v215)
    {
      v216 = *(_QWORD *)(v214 + 136);
      if (*(_BYTE *)(v214 + 272) || (*(_BYTE *)(v216 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v216);
      v214 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v217 = *(_QWORD *)(v137 + 1016);
    v218 = *(_QWORD *)(v137 + 1024);
    while (v217 != v218)
    {
      v219 = *(_QWORD *)(v217 + 736);
      if (*(_BYTE *)(v217 + 880)
        || (*(_BYTE *)(v219 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v217 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v219);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v217 + 744));
      }
      v217 += 888;
    }
    v220 = (uint64_t)(*(_QWORD *)(v137 + 1736) - *(_QWORD *)(v137 + 1728)) >> 2;
    if (v220 <= v405)
      v209 = v405 - v220;
    else
      v209 = 0;
    result = sub_20F59A618(v138);
    v206 = v136[140].u64[0];
  }
  else
  {
    v209 = v405;
  }
LABEL_303:
  v221 = v209;
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v209));
  v222 = v206 + 1;
  v223 = v136[139].u64[1];
  if (v206 + 1 <= v223)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v206) = v209;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_320:
      v240 = *(_QWORD *)(v137 + 416);
      v241 = *(_QWORD *)(v137 + 424);
      if (v240 == v241)
      {
        v242 = 0;
      }
      else
      {
        v242 = 0;
        do
        {
          v243 = *(_QWORD *)(v240 + 8);
          if ((*(_BYTE *)(v243 + 4) & 6) == 0)
            v242 += *(unsigned __int8 *)(v243 + 20);
          v240 += 16;
        }
        while (v240 != v241);
      }
      goto LABEL_354;
    }
  }
  else
  {
    v224 = 2 * v223;
    if (v224 > v222)
      v222 = v224;
    v136[139].i64[1] = v222;
    v225 = v136[139].i64[0];
    v226 = operator new[]();
    v227 = v226;
    if (v206)
    {
      v228 = 0;
      if (v206 < 4)
        goto LABEL_312;
      if ((unint64_t)(v226 - v225) < 0x20)
        goto LABEL_312;
      v228 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      v229 = (_OWORD *)(v226 + 16);
      v230 = (__int128 *)(v225 + 16);
      v231 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v232 = *v230;
        *(v229 - 1) = *(v230 - 1);
        *v229 = v232;
        v229 += 2;
        v230 += 2;
        v231 -= 4;
      }
      while (v231);
      if (v206 != v228)
      {
LABEL_312:
        v233 = v206 - v228;
        v234 = 8 * v228;
        v235 = (uint64_t *)(v225 + 8 * v228);
        v236 = (_QWORD *)(v226 + v234);
        do
        {
          v237 = *v235++;
          *v236++ = v237;
          --v233;
        }
        while (v233);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v227;
    *(_QWORD *)(v227 + 8 * v136[140].i64[0]) = v221;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_320;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v244 = *(_QWORD *)(v137 + 896);
    v245 = *(_QWORD *)(v137 + 904);
    while (v244 != v245)
    {
      v246 = *(_QWORD *)(v244 + 208);
      if (*(_BYTE *)(v244 + 496)
        || (*(_BYTE *)(v246 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v244 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v246);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v244 + 216));
      }
      v244 += 504;
    }
    v247 = *(_QWORD *)(v137 + 920);
    v248 = *(_QWORD *)(v137 + 928);
    while (v247 != v248)
    {
      v249 = *(_QWORD *)(v247 + 136);
      if (*(_BYTE *)(v247 + 272) || (*(_BYTE *)(v249 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v249);
      v247 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v250 = *(_QWORD *)(v137 + 1016);
    v251 = *(_QWORD *)(v137 + 1024);
    while (v250 != v251)
    {
      v252 = *(_QWORD *)(v250 + 736);
      if (*(_BYTE *)(v250 + 880)
        || (*(_BYTE *)(v252 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v250 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v252);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v250 + 744));
      }
      v250 += 888;
    }
    v253 = (uint64_t)(*(_QWORD *)(v137 + 1760) - *(_QWORD *)(v137 + 1752)) >> 2;
    if (v253 <= v406)
      v242 = v406 - v253;
    else
      v242 = 0;
    result = sub_20F59A618(v138);
    v239 = v136[140].u64[0];
  }
  else
  {
    v242 = v406;
  }
LABEL_354:
  v254 = v242;
  v136[106].i64[0] += v242;
  v136[106].i64[1] += 6 * v242;
  v255 = v239 + 1;
  v256 = v136[139].u64[1];
  if (v239 + 1 <= v256)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v239) = v242;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_371:
      v273 = *(_QWORD *)(v137 + 512);
      v274 = *(_QWORD *)(v137 + 520);
      if (v273 == v274)
      {
        v275 = 0;
      }
      else
      {
        v275 = 0;
        do
        {
          v276 = *(_QWORD *)(v273 + 8);
          if ((*(_BYTE *)(v276 + 4) & 6) == 0)
            v275 += *(unsigned __int8 *)(v276 + 20);
          v273 += 16;
        }
        while (v273 != v274);
      }
      goto LABEL_405;
    }
  }
  else
  {
    v257 = 2 * v256;
    if (v257 > v255)
      v255 = v257;
    v136[139].i64[1] = v255;
    v258 = v136[139].i64[0];
    v259 = operator new[]();
    v260 = v259;
    if (v239)
    {
      v261 = 0;
      if (v239 < 4)
        goto LABEL_363;
      if ((unint64_t)(v259 - v258) < 0x20)
        goto LABEL_363;
      v261 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      v262 = (_OWORD *)(v259 + 16);
      v263 = (__int128 *)(v258 + 16);
      v264 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v265 = *v263;
        *(v262 - 1) = *(v263 - 1);
        *v262 = v265;
        v262 += 2;
        v263 += 2;
        v264 -= 4;
      }
      while (v264);
      if (v239 != v261)
      {
LABEL_363:
        v266 = v239 - v261;
        v267 = 8 * v261;
        v268 = (uint64_t *)(v258 + 8 * v261);
        v269 = (_QWORD *)(v259 + v267);
        do
        {
          v270 = *v268++;
          *v269++ = v270;
          --v266;
        }
        while (v266);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v260;
    *(_QWORD *)(v260 + 8 * v136[140].i64[0]) = v254;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_371;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v277 = *(_QWORD *)(v137 + 896);
    v278 = *(_QWORD *)(v137 + 904);
    while (v277 != v278)
    {
      v279 = *(_QWORD *)(v277 + 208);
      if (*(_BYTE *)(v277 + 496)
        || (*(_BYTE *)(v279 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v277 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v279);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v277 + 216));
      }
      v277 += 504;
    }
    v280 = *(_QWORD *)(v137 + 920);
    v281 = *(_QWORD *)(v137 + 928);
    while (v280 != v281)
    {
      v282 = *(_QWORD *)(v280 + 136);
      if (*(_BYTE *)(v280 + 272) || (*(_BYTE *)(v282 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v282);
      v280 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v283 = *(_QWORD *)(v137 + 1016);
    v284 = *(_QWORD *)(v137 + 1024);
    while (v283 != v284)
    {
      v285 = *(_QWORD *)(v283 + 736);
      if (*(_BYTE *)(v283 + 880)
        || (*(_BYTE *)(v285 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v283 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v285);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v283 + 744));
      }
      v283 += 888;
    }
    v286 = (uint64_t)(*(_QWORD *)(v137 + 1784) - *(_QWORD *)(v137 + 1776)) >> 2;
    if (v286 <= v407)
      v275 = v407 - v286;
    else
      v275 = 0;
    result = sub_20F59A618(v138);
    v272 = v136[140].u64[0];
  }
  else
  {
    v275 = v407;
  }
LABEL_405:
  v287 = v275;
  v136[106].i64[0] += v275;
  v136[106].i64[1] += 4 * v275;
  v288 = v272 + 1;
  v289 = v136[139].u64[1];
  if (v272 + 1 <= v289)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v272) = v275;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_422:
      v306 = *(_QWORD *)(v137 + 608);
      v307 = *(_QWORD *)(v137 + 616);
      if (v306 == v307)
      {
        v308 = 0;
      }
      else
      {
        v308 = 0;
        do
        {
          v309 = *(_QWORD *)(v306 + 8);
          if ((*(_BYTE *)(v309 + 4) & 6) == 0)
            v308 += *(unsigned __int8 *)(v309 + 20);
          v306 += 16;
        }
        while (v306 != v307);
      }
      goto LABEL_456;
    }
  }
  else
  {
    v290 = 2 * v289;
    if (v290 > v288)
      v288 = v290;
    v136[139].i64[1] = v288;
    v291 = v136[139].i64[0];
    v292 = operator new[]();
    v293 = v292;
    if (v272)
    {
      v294 = 0;
      if (v272 < 4)
        goto LABEL_414;
      if ((unint64_t)(v292 - v291) < 0x20)
        goto LABEL_414;
      v294 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      v295 = (_OWORD *)(v292 + 16);
      v296 = (__int128 *)(v291 + 16);
      v297 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v298 = *v296;
        *(v295 - 1) = *(v296 - 1);
        *v295 = v298;
        v295 += 2;
        v296 += 2;
        v297 -= 4;
      }
      while (v297);
      if (v272 != v294)
      {
LABEL_414:
        v299 = v272 - v294;
        v300 = 8 * v294;
        v301 = (uint64_t *)(v291 + 8 * v294);
        v302 = (_QWORD *)(v292 + v300);
        do
        {
          v303 = *v301++;
          *v302++ = v303;
          --v299;
        }
        while (v299);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v293;
    *(_QWORD *)(v293 + 8 * v136[140].i64[0]) = v287;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_422;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v310 = *(_QWORD *)(v137 + 896);
    v311 = *(_QWORD *)(v137 + 904);
    while (v310 != v311)
    {
      v312 = *(_QWORD *)(v310 + 208);
      if (*(_BYTE *)(v310 + 496)
        || (*(_BYTE *)(v312 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v310 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v312);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v310 + 216));
      }
      v310 += 504;
    }
    v313 = *(_QWORD *)(v137 + 920);
    v314 = *(_QWORD *)(v137 + 928);
    while (v313 != v314)
    {
      v315 = *(_QWORD *)(v313 + 136);
      if (*(_BYTE *)(v313 + 272) || (*(_BYTE *)(v315 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v315);
      v313 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v316 = *(_QWORD *)(v137 + 1016);
    v317 = *(_QWORD *)(v137 + 1024);
    while (v316 != v317)
    {
      v318 = *(_QWORD *)(v316 + 736);
      if (*(_BYTE *)(v316 + 880)
        || (*(_BYTE *)(v318 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v316 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v318);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v316 + 744));
      }
      v316 += 888;
    }
    v319 = (uint64_t)(*(_QWORD *)(v137 + 1808) - *(_QWORD *)(v137 + 1800)) >> 2;
    if (v319 <= v408)
      v308 = v408 - v319;
    else
      v308 = 0;
    result = sub_20F59A618(v138);
    v305 = v136[140].u64[0];
  }
  else
  {
    v308 = v408;
  }
LABEL_456:
  v320 = v308;
  v136[106].i64[0] += v308;
  v136[106].i64[1] += 4 * v308;
  v321 = v305 + 1;
  v322 = v136[139].u64[1];
  if (v305 + 1 <= v322)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v305) = v308;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_473:
      v339 = *(_QWORD *)(v137 + 704);
      v340 = *(_QWORD *)(v137 + 712);
      if (v339 == v340)
      {
        v341 = 0;
      }
      else
      {
        v341 = 0;
        do
        {
          v342 = *(_QWORD *)(v339 + 8);
          if ((*(_BYTE *)(v342 + 4) & 6) == 0)
            v341 += *(unsigned __int8 *)(v342 + 20);
          v339 += 16;
        }
        while (v339 != v340);
      }
      goto LABEL_507;
    }
  }
  else
  {
    v323 = 2 * v322;
    if (v323 > v321)
      v321 = v323;
    v136[139].i64[1] = v321;
    v324 = v136[139].i64[0];
    v325 = operator new[]();
    v326 = v325;
    if (v305)
    {
      v327 = 0;
      if (v305 < 4)
        goto LABEL_465;
      if ((unint64_t)(v325 - v324) < 0x20)
        goto LABEL_465;
      v327 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      v328 = (_OWORD *)(v325 + 16);
      v329 = (__int128 *)(v324 + 16);
      v330 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v331 = *v329;
        *(v328 - 1) = *(v329 - 1);
        *v328 = v331;
        v328 += 2;
        v329 += 2;
        v330 -= 4;
      }
      while (v330);
      if (v305 != v327)
      {
LABEL_465:
        v332 = v305 - v327;
        v333 = 8 * v327;
        v334 = (uint64_t *)(v324 + 8 * v327);
        v335 = (_QWORD *)(v325 + v333);
        do
        {
          v336 = *v334++;
          *v335++ = v336;
          --v332;
        }
        while (v332);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v326;
    *(_QWORD *)(v326 + 8 * v136[140].i64[0]) = v320;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_473;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v343 = *(_QWORD *)(v137 + 896);
    v344 = *(_QWORD *)(v137 + 904);
    while (v343 != v344)
    {
      v345 = *(_QWORD *)(v343 + 208);
      if (*(_BYTE *)(v343 + 496)
        || (*(_BYTE *)(v345 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v343 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v345);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v343 + 216));
      }
      v343 += 504;
    }
    v346 = *(_QWORD *)(v137 + 920);
    v347 = *(_QWORD *)(v137 + 928);
    while (v346 != v347)
    {
      v348 = *(_QWORD *)(v346 + 136);
      if (*(_BYTE *)(v346 + 272) || (*(_BYTE *)(v348 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v348);
      v346 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v349 = *(_QWORD *)(v137 + 1016);
    v350 = *(_QWORD *)(v137 + 1024);
    while (v349 != v350)
    {
      v351 = *(_QWORD *)(v349 + 736);
      if (*(_BYTE *)(v349 + 880)
        || (*(_BYTE *)(v351 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v349 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v351);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v349 + 744));
      }
      v349 += 888;
    }
    v352 = (uint64_t)(*(_QWORD *)(v137 + 1832) - *(_QWORD *)(v137 + 1824)) >> 2;
    if (v352 <= v409)
      v341 = v409 - v352;
    else
      v341 = 0;
    result = sub_20F59A618(v138);
    v338 = v136[140].u64[0];
  }
  else
  {
    v341 = v409;
  }
LABEL_507:
  v353 = v341;
  v136[106].i64[0] += v341;
  v136[106].i64[1] += 3 * v341;
  v354 = v338 + 1;
  v355 = v136[139].u64[1];
  if (v338 + 1 <= v355)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v338) = v341;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_524:
      v372 = *(_QWORD *)(v137 + 800);
      v373 = *(_QWORD *)(v137 + 808);
      if (v372 == v373)
      {
        v374 = 0;
      }
      else
      {
        v374 = 0;
        do
        {
          v375 = *(_QWORD *)(v372 + 8);
          if ((*(_BYTE *)(v375 + 4) & 6) == 0)
            v374 += *(unsigned __int8 *)(v375 + 20);
          v372 += 16;
        }
        while (v372 != v373);
      }
      goto LABEL_558;
    }
  }
  else
  {
    v356 = 2 * v355;
    if (v356 > v354)
      v354 = v356;
    v136[139].i64[1] = v354;
    v357 = v136[139].i64[0];
    v358 = operator new[]();
    v359 = v358;
    if (v338)
    {
      v360 = 0;
      if (v338 < 4)
        goto LABEL_516;
      if ((unint64_t)(v358 - v357) < 0x20)
        goto LABEL_516;
      v360 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      v361 = (_OWORD *)(v358 + 16);
      v362 = (__int128 *)(v357 + 16);
      v363 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v364 = *v362;
        *(v361 - 1) = *(v362 - 1);
        *v361 = v364;
        v361 += 2;
        v362 += 2;
        v363 -= 4;
      }
      while (v363);
      if (v338 != v360)
      {
LABEL_516:
        v365 = v338 - v360;
        v366 = 8 * v360;
        v367 = (uint64_t *)(v357 + 8 * v360);
        v368 = (_QWORD *)(v358 + v366);
        do
        {
          v369 = *v367++;
          *v368++ = v369;
          --v365;
        }
        while (v365);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v359;
    *(_QWORD *)(v359 + 8 * v136[140].i64[0]) = v353;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_524;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v376 = *(_QWORD *)(v137 + 896);
    v377 = *(_QWORD *)(v137 + 904);
    while (v376 != v377)
    {
      v378 = *(_QWORD *)(v376 + 208);
      if (*(_BYTE *)(v376 + 496)
        || (*(_BYTE *)(v378 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v376 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v378);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v376 + 216));
      }
      v376 += 504;
    }
    v379 = *(_QWORD *)(v137 + 920);
    v380 = *(_QWORD *)(v137 + 928);
    while (v379 != v380)
    {
      v381 = *(_QWORD *)(v379 + 136);
      if (*(_BYTE *)(v379 + 272) || (*(_BYTE *)(v381 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v381);
      v379 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v382 = *(_QWORD *)(v137 + 1016);
    v383 = *(_QWORD *)(v137 + 1024);
    while (v382 != v383)
    {
      v384 = *(_QWORD *)(v382 + 736);
      if (*(_BYTE *)(v382 + 880)
        || (*(_BYTE *)(v384 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v382 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v384);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v382 + 744));
      }
      v382 += 888;
    }
    v385 = (uint64_t)(*(_QWORD *)(v137 + 1856) - *(_QWORD *)(v137 + 1848)) >> 2;
    if (v385 <= v410)
      v374 = v410 - v385;
    else
      v374 = 0;
    result = sub_20F59A618(v138);
    v371 = v136[140].u64[0];
  }
  else
  {
    v374 = v410;
  }
LABEL_558:
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v374));
  v386 = v371 + 1;
  v387 = v136[139].u64[1];
  if (v371 + 1 <= v387)
  {
    v391 = v136[139].i64[0];
  }
  else
  {
    v388 = 2 * v387;
    if (v388 > v386)
      v386 = v388;
    v136[139].i64[1] = v386;
    v389 = v136[139].i64[0];
    v390 = operator new[]();
    v391 = v390;
    if (v371)
    {
      v392 = 0;
      if (v371 < 4)
        goto LABEL_567;
      if ((unint64_t)(v390 - v389) < 0x20)
        goto LABEL_567;
      v392 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      v393 = (_OWORD *)(v390 + 16);
      v394 = (__int128 *)(v389 + 16);
      v395 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v396 = *v394;
        *(v393 - 1) = *(v394 - 1);
        *v393 = v396;
        v393 += 2;
        v394 += 2;
        v395 -= 4;
      }
      while (v395);
      if (v371 != v392)
      {
LABEL_567:
        v397 = v371 - v392;
        v398 = 8 * v392;
        v399 = (uint64_t *)(v389 + 8 * v392);
        v400 = (_QWORD *)(v390 + v398);
        do
        {
          v401 = *v399++;
          *v400++ = v401;
          --v397;
        }
        while (v397);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v391;
    v371 = v136[140].u64[0];
  }
  *(_QWORD *)(v391 + 8 * v371) = v374;
  ++v136[140].i64[0];
  return result;
}

void sub_20F72011C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720130(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720144(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720158(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F72016C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720180(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720194(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7201A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7201BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7201D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7201E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7201F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F72020C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720220(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720234(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720248(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F72025C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720270(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720284(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720298(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7202AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7202C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7202D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7202E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7202FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720310(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720324(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720338(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F72034C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720360(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720374(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F720388(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

double sub_20F72039C(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  double v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v36;
  double *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint64_t *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  double v64;
  double v66;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  int8x16_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t *v77;
  int8x16_t v78;
  float64_t v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  _OWORD *v85;
  int v86;
  uint64_t v89;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v104;
  __int128 *v105;
  __int128 *v106;
  __int128 v107;
  __int128 v110;
  double v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  double *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double *v140;
  int v141;
  uint64_t v142;
  double v145;
  long double v146;
  long double v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  _OWORD *v151;
  _BOOL4 v152;
  uint64_t v153;
  __int128 v154;
  double v161;
  double v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v175;
  uint64_t v176;
  uint64_t v178;
  double v179;
  double v180;
  uint64_t v181;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  double v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  unint64_t v232;
  double v233;
  unint64_t v234;
  double *v235;
  uint64_t v236;
  double v239;
  long double v240;
  long double v241;
  long double v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  __int128 v247;
  unint64_t v253;
  uint64_t v254;
  double v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v264;
  float64x2_t v265;
  _QWORD *v266;
  double *v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  float64_t v271;
  float64x2_t v272;
  double v273;
  float64x2_t v274;
  uint64_t v275;
  double v276;
  char v277;

  kdebug_trace();
  v11 = a2[66];
  if (v11 > 5)
    goto LABEL_15;
  v12 = a2[65];
  if (v12 >= 6)
  {
    v16 = (_QWORD *)a2[64];
  }
  else
  {
    v13 = 2 * v12;
    if (v13 <= 6)
      v13 = 6;
    a2[65] = v13;
    v14 = (_QWORD *)a2[64];
    v15 = (_QWORD *)operator new[]();
    v16 = v15;
    if (v11)
    {
      *v15 = *v14;
      if (v11 != 1)
      {
        v15[1] = v14[1];
        if (v11 != 2)
        {
          v15[2] = v14[2];
          if (v11 != 3)
          {
            v15[3] = v14[3];
            if (v11 != 4)
              v15[4] = v14[4];
          }
        }
      }
    }
    v17 = (_QWORD *)a2[64];
    if (v17 != a2 && v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    a2[64] = v16;
    v11 = a2[66];
    if (v11 > 5)
    {
LABEL_15:
      a2[66] = 6;
      if (*(_BYTE *)(a1 + 1876))
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  bzero(&v16[v11], 48 - 8 * v11);
  a2[66] = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
LABEL_16:
    v18 = *(_QWORD *)(a1 + 896);
    v19 = *(__int128 **)(a1 + 904);
    v20 = 0.0;
    v21 = 0.0;
    if ((__int128 *)v18 == v19)
      goto LABEL_72;
    if (*(_BYTE *)(a1 + 1875))
    {
      v22 = (unint64_t)v19 - v18 - 504;
      if (v22 < 0x1F8)
      {
        v23 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_71:
          v21 = v21 + *(double *)(v23 + 464);
          v23 += 504;
        }
        while ((__int128 *)v23 != v19);
        goto LABEL_72;
      }
      v163 = v22 / 0x1F8 + 1;
      v23 = v18 + 504 * (v163 & 0x1FFFFFFFFFFFFFELL);
      v164 = v163 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v21 = v21 + *(double *)(v18 + 464) + *(double *)(v18 + 968);
        v18 += 1008;
        v164 -= 2;
      }
      while (v164);
      if (v163 != (v163 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_71;
    }
    else
    {
      v105 = (__int128 *)(v18 + 344);
      do
      {
        if (*((_BYTE *)v105 + 128))
        {
          *((_QWORD *)v105 + 14) = *((_QWORD *)v105 - 1);
          v107 = *(__int128 *)((char *)v105 - 24);
          _Q5 = *(__int128 *)((char *)v105 - 56);
          v105[5] = *(__int128 *)((char *)v105 - 40);
          v105[6] = v107;
          _Q4 = *(__int128 *)((char *)v105 - 88);
          v105[3] = *(__int128 *)((char *)v105 - 72);
          v105[4] = _Q5;
          v110 = *(__int128 *)((char *)v105 - 120);
          v105[1] = *(__int128 *)((char *)v105 - 104);
          v105[2] = _Q4;
          *v105 = v110;
          _Q17 = *v105;
          _D19 = *((_QWORD *)v105 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v105 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v105 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v105 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v105 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v105 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v105 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v123 = *(double *)(a1 + 16) * (_D18 + *((double *)v105 + 14) * *((double *)v105 + 14));
          *((double *)v105 + 15) = v123;
          v21 = v21 + v123;
        }
        v106 = v105 + 10;
        v105 = (__int128 *)((char *)v105 + 504);
      }
      while (v106 != v19);
    }
LABEL_72:
    v134 = (double *)a2[64];
    *v134 = v21 * 0.5;
    v165 = *(_QWORD *)(a1 + 920);
    v166 = *(_QWORD *)(a1 + 928);
    if (v165 == v166)
      goto LABEL_85;
    if (*(_BYTE *)(a1 + 1875))
    {
      v167 = v166 - v165 - 280;
      v20 = 0.0;
      if (v167 < 0x118)
      {
        v168 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_84:
          v20 = v20 + *(double *)(v168 + 240);
          v168 += 280;
        }
        while (v168 != v166);
        goto LABEL_85;
      }
      v175 = v167 / 0x118 + 1;
      v168 = v165 + 280 * (v175 & 0x1FFFFFFFFFFFFFELL);
      v176 = v175 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v20 = v20 + *(double *)(v165 + 240) + *(double *)(v165 + 520);
        v165 += 560;
        v176 -= 2;
      }
      while (v176);
      if (v175 != (v175 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_84;
    }
    else
    {
      v20 = 0.0;
      do
      {
        if (*(_BYTE *)(v165 + 248))
        {
          v169 = *(_OWORD *)(v165 + 160);
          *(_OWORD *)(v165 + 192) = *(_OWORD *)(v165 + 144);
          *(_OWORD *)(v165 + 208) = v169;
          _Q3 = *(_OWORD *)(v165 + 192);
          *(_OWORD *)(v165 + 224) = *(_OWORD *)(v165 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v169 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v165 + 240) = v169;
          v20 = v20 + *(double *)&v169;
        }
        v165 += 280;
      }
      while (v165 != v166);
      v134 = (double *)a2[64];
    }
LABEL_85:
    v134[1] = v20 * 0.5;
    _X10 = *(_QWORD *)(a1 + 944);
    v178 = *(_QWORD *)(a1 + 952);
    v179 = 0.0;
    if (_X10 == v178)
    {
      v180 = 0.0;
      goto LABEL_99;
    }
    if (*(_BYTE *)(a1 + 1875))
    {
      v180 = 0.0;
      if ((unint64_t)(v178 - _X10 - 8016) >> 4 < 0x1F5)
      {
        v181 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_98:
          v180 = v180 + *(double *)(v181 + 7976);
          v181 += 8016;
        }
        while (v181 != v178);
        goto LABEL_99;
      }
      v203 = (v178 - _X10 - 8016) / 0x1F50uLL + 1;
      v181 = _X10 + 8016 * (v203 & 0x1FFFFFFFFFFFFELL);
      v204 = v203 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v180 = v180 + *(double *)(_X10 + 7976) + *(double *)(_X10 + 15992);
        _X10 += 16032;
        v204 -= 2;
      }
      while (v204);
      if (v203 != (v203 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_98;
    }
    else
    {
      v180 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x7D20] }
        if (*(_BYTE *)(_X10 + 7984))
        {
          _X14 = _X10 + 31904;
          *(_QWORD *)(_X10 + 7968) = *(_QWORD *)(_X10 + 7848);
          v184 = *(_OWORD *)(_X10 + 7816);
          *(_OWORD *)(_X10 + 7920) = *(_OWORD *)(_X10 + 7800);
          *(_OWORD *)(_X10 + 7936) = v184;
          *(_OWORD *)(_X10 + 7952) = *(_OWORD *)(_X10 + 7832);
          v185 = *(_OWORD *)(_X10 + 7752);
          *(_OWORD *)(_X10 + 7856) = *(_OWORD *)(_X10 + 7736);
          *(_OWORD *)(_X10 + 7872) = v185;
          v186 = *(_OWORD *)(_X10 + 7784);
          *(_OWORD *)(_X10 + 7888) = *(_OWORD *)(_X10 + 7768);
          *(_OWORD *)(_X10 + 7904) = v186;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X10 + 7856);
          _D19 = *(_QWORD *)(_X10 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X10 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X10 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v202 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X10 + 7968) * *(double *)(_X10 + 7968));
          *(double *)(_X10 + 7976) = v202;
          v180 = v180 + v202;
        }
        _X10 += 8016;
      }
      while (_X10 != v178);
      v134 = (double *)a2[64];
    }
LABEL_99:
    v134[2] = v180 * 0.5;
    _X10 = *(_QWORD *)(a1 + 968);
    v206 = *(_QWORD *)(a1 + 976);
    if (_X10 == v206)
      goto LABEL_112;
    if (*(_BYTE *)(a1 + 1875))
    {
      v207 = v206 - _X10 - 5336;
      v179 = 0.0;
      if (v207 >> 3 < 0x29B)
      {
        v208 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_111:
          v179 = v179 + *(double *)(v208 + 5296);
          v208 += 5336;
        }
        while (v208 != v206);
        goto LABEL_112;
      }
      v227 = v207 / 0x14D8 + 1;
      v208 = _X10 + 5336 * (v227 & 0x1FFFFFFFFFFFFELL);
      v228 = v227 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v179 = v179 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v228 -= 2;
      }
      while (v228);
      if (v227 != (v227 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_111;
    }
    else
    {
      v179 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v226 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v226;
          v179 = v179 + v226;
        }
        _X10 += 5336;
      }
      while (_X10 != v206);
      v134 = (double *)a2[64];
    }
LABEL_112:
    v134[3] = v179 * 0.5;
    v229 = *(_QWORD *)(a1 + 992);
    v230 = *(_QWORD *)(a1 + 1000);
    v231 = 0.0;
    if (v229 == v230)
    {
      v233 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 1875))
    {
      v232 = v230 - v229 - 216;
      v233 = 0.0;
      if (v232 < 0xD8)
        goto LABEL_143;
      v234 = v232 / 0xD8 + 1;
      v235 = (double *)(v229 + 392);
      v236 = v234 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v233 = v233 + *(v235 - 27) + *v235;
        v235 += 54;
        v236 -= 2;
      }
      while (v236);
      v229 += 216 * (v234 & 0x3FFFFFFFFFFFFFELL);
      if (v234 != (v234 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_143:
        do
        {
          v233 = v233 + *(double *)(v229 + 176);
          v229 += 216;
        }
        while (v229 != v230);
      }
    }
    else
    {
      v233 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 184))
        {
          *(_OWORD *)(v229 + 160) = *(_OWORD *)(v229 + 144);
          v265 = *(float64x2_t *)(v229 + 160);
          _D1 = v265.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v239 = *(double *)(a1 + 88);
          v240 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
          v241 = v240 + 1.0;
          v242 = v239 * log1p(v240);
          *(long double *)(v229 + 176) = v242;
          *(float64x2_t *)(v229 + 160) = vmulq_n_f64(v265, sqrt(1.0 / v241));
          v233 = v233 + v242;
        }
        v229 += 216;
      }
      while (v229 != v230);
      v134 = (double *)a2[64];
    }
    v134[4] = v233 * 0.5;
    v243 = *(_QWORD *)(a1 + 1016);
    v244 = *(_QWORD *)(a1 + 1024);
    if (v243 == v244)
      goto LABEL_139;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v231 = 0.0;
      do
      {
        if (*(_BYTE *)(v243 + 856))
        {
          v247 = *(_OWORD *)(v243 + 768);
          *(_OWORD *)(v243 + 800) = *(_OWORD *)(v243 + 752);
          *(_OWORD *)(v243 + 816) = v247;
          _Q2 = *(_OWORD *)(v243 + 800);
          *(_OWORD *)(v243 + 832) = *(_OWORD *)(v243 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v247 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v243 + 848) = v247;
          v231 = v231 + *(double *)&v247;
        }
        v243 += 888;
      }
      while (v243 != v244);
      v134 = (double *)a2[64];
      goto LABEL_139;
    }
    v245 = v244 - v243 - 888;
    v231 = 0.0;
    if (v245 >= 0x378)
    {
      v253 = v245 / 0x378 + 1;
      v246 = v243 + 888 * (v253 & 0xFFFFFFFFFFFFFELL);
      v254 = v253 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v231 = v231 + *(double *)(v243 + 848) + *(double *)(v243 + 1736);
        v243 += 1776;
        v254 -= 2;
      }
      while (v254);
      if (v253 == (v253 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_139;
    }
    else
    {
      v246 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v231 = v231 + *(double *)(v246 + 848);
      v246 += 888;
    }
    while (v246 != v244);
LABEL_139:
    v162 = v231 * 0.5;
    goto LABEL_140;
  }
LABEL_22:
  v24 = (double *)(a1 + 8);
  v25 = (_QWORD *)(a1 + 120);
  v266 = (_QWORD *)(a1 + 120);
  v267 = (double *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 896);
  v27 = *(_QWORD *)(a1 + 904);
  v28 = 0.0;
  v29 = 0.0;
  if (v26 != v27)
  {
    do
    {
      while (1)
      {
        v30 = (__int128 *)(v26 + 344);
        v31 = sub_20F4AFF88((char *)(v26 + 8), (float64x2_t **)(v26 + 208), v26 + 344);
        *(_BYTE *)(v26 + 472) = v31;
        if (v31)
          break;
        *(_QWORD *)(v26 + 464) = 0;
        v26 += 504;
        if (v26 == v27)
          goto LABEL_29;
      }
      v32 = *(_QWORD *)(v26 + 480);
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26 + 344);
      _Q1 = *(_OWORD *)(v26 + 408);
      v33 = *(_OWORD *)(v26 + 424);
      _Q3 = *(_OWORD *)(v26 + 392);
      *(_OWORD *)(v26 + 288) = _Q1;
      *(_OWORD *)(v26 + 304) = v33;
      _Q2 = *(float64x2_t *)(v26 + 424);
      *(_OWORD *)(v26 + 320) = *(_OWORD *)(v26 + 440);
      *(_QWORD *)(v26 + 336) = *(_QWORD *)(v26 + 456);
      v36 = *(_OWORD *)(v26 + 360);
      _Q5 = *v30;
      _V7.D[1] = *((_QWORD *)&v36 + 1);
      *(_OWORD *)(v26 + 224) = *v30;
      *(_OWORD *)(v26 + 240) = v36;
      _Q4 = *(_OWORD *)(v26 + 376);
      v4 = *(float64x2_t *)(v26 + 392);
      *(_OWORD *)(v26 + 256) = _Q4;
      *(float64x2_t *)(v26 + 272) = v4;
      _Q6 = *(float64x2_t *)(v26 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v26 + 456) * *(double *)(v26 + 456));
      *(float64_t *)(v26 + 464) = v4.f64[0];
      v29 = v29 + v4.f64[0];
      v26 += 504;
    }
    while (v26 != v27);
LABEL_29:
    v25 = v266;
    v24 = v267;
  }
  v52 = (double *)a2[64];
  *v52 = v29 * 0.5;
  v53 = (int8x16_t *)v25[100];
  v54 = (int8x16_t *)v25[101];
  if (v53 != v54)
  {
    v55 = v53 + 16;
    v28 = 0.0;
    do
    {
      while (!v55[-9].i64[1])
      {
        v55[-1].i8[8] = 0;
        v55[-1].i64[0] = 0;
        v56 = &v55[1].i64[1];
        v55 = (int8x16_t *)((char *)v55 + 280);
        if (v56 == (uint64_t *)v54)
          goto LABEL_37;
      }
      v57 = v55[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v57 + 48);
      v58 = *(float64x2_t *)(v57 + 32);
      _D2 = *(double *)(v57 + 72);
      v60 = *(float64x2_t *)(v57 + 56);
      _D4 = *(double *)(v57 + 96);
      v62 = *(float64x2_t *)(v57 + 80);
      *(_QWORD *)&_Q6.f64[0] = v55[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v55[-15] + 8);
      v64 = *(double *)v55[-12].i64;
      _Q17 = (float64x2_t)v55[-13];
      v66 = *(double *)&v55[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v55[-12] + 8);
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q7.f64[0]), v60, _Q17.f64[0]), v62, _Q19.f64[0]);
      v69 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v70 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v58, _Q7, 1), v60, _Q17, 1), v62, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v269 = v69;
      v268 = v68;
      v271 = _Q7.f64[0];
      v270 = v70;
      v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q6.f64[0]), v60, v64), v62, v66);
      v273 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v64 + _D4 * v66;
      v275 = 0;
      v274 = 0uLL;
      sub_20E9733B8(&v268, v274.f64);
      v71 = v55 - 4;
      v72 = v274;
      v55[-3].i64[0] = v275;
      v55[-4] = (int8x16_t)v72;
      v72.f64[0] = *(float64_t *)(v57 + 120);
      *(_QWORD *)&v73.f64[0] = v55[-9].i64[0];
      *(float64x2_t *)((char *)&v55[-3] + 8) = vsubq_f64(*(float64x2_t *)(v57 + 104), (float64x2_t)v55[-10]);
      v55[-2].i64[1] = *(_OWORD *)&vsubq_f64(v72, v73);
      v74 = (float64x2_t *)v55[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v55[-2], v74[3]);
      v75 = (int8x16_t)vmulq_f64((float64x2_t)v55[-3], v74[2]);
      v76 = (int8x16_t)vmulq_f64((float64x2_t)v55[-4], v74[1]);
      v55[-4] = v76;
      v55[-3] = v75;
      v55[-2] = (int8x16_t)v4;
      v55[-1].i8[8] = 1;
      if (v55->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v55->i64[0] + 24))(v55->i64[0], v55 - 4);
        v75 = v55[-3];
        v4 = (float64x2_t)v55[-2];
        v76 = *v71;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v75, v75, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v76, v76, 8uLL).i64;
      v77 = v55 - 7;
      v78 = v55[-3];
      *v77 = *v71;
      v77[1] = v78;
      _Q6 = (float64x2_t)v55[-2];
      v77[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v79 = _Q2.f64[0] + *(double *)v75.i64 * *(double *)v75.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v24[3];
      v80 = v5 * v79;
      *(double *)v55[-1].i64 = v80;
      v28 = v28 + v80;
      v81 = &v55[1].i64[1];
      v55 = (int8x16_t *)((char *)v55 + 280);
    }
    while (v81 != (uint64_t *)v54);
LABEL_37:
    v52 = (double *)a2[64];
    v25 = v266;
    v24 = v267;
  }
  v52[1] = v28 * 0.5;
  v82 = v25[103];
  v83 = v25[104];
  if (v82 == v83)
  {
    v84 = 0.0;
  }
  else
  {
    v84 = 0.0;
    do
    {
      while (1)
      {
        v85 = (_OWORD *)(v82 + 7856);
        v86 = sub_20F4B0BC8();
        *(_BYTE *)(v82 + 7984) = v86;
        if (v86)
          break;
        *(_QWORD *)(v82 + 7976) = 0;
        v82 += 8016;
        if (v82 == v83)
          goto LABEL_45;
      }
      _X8 = v82 + 24024;
      __asm { PRFM            #0, [X8] }
      v89 = *(_QWORD *)(v82 + 7992);
      if (v89)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v82 + 7856);
      _X8 = v82 + 23888;
      v91 = *(_OWORD *)(v82 + 7936);
      *(_OWORD *)(v82 + 7800) = *(_OWORD *)(v82 + 7920);
      *(_OWORD *)(v82 + 7816) = v91;
      _Q2 = *(float64x2_t *)(v82 + 7936);
      *(_OWORD *)(v82 + 7832) = *(_OWORD *)(v82 + 7952);
      *(_QWORD *)(v82 + 7848) = *(_QWORD *)(v82 + 7968);
      v92 = *(_OWORD *)(v82 + 7872);
      *(_OWORD *)(v82 + 7736) = *v85;
      *(_OWORD *)(v82 + 7752) = v92;
      v93 = *(_OWORD *)(v82 + 7904);
      *(_OWORD *)(v82 + 7768) = *(_OWORD *)(v82 + 7888);
      *(_OWORD *)(v82 + 7784) = v93;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v82 + 7872);
      _Q7 = *v85;
      _D17 = *(_QWORD *)(v82 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v82 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v82 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v82 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v82 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v24[5];
      v104 = v5 * (_D16 + *(double *)(v82 + 7968) * *(double *)(v82 + 7968));
      *(double *)(v82 + 7976) = v104;
      v84 = v84 + v104;
      v82 += 8016;
    }
    while (v82 != v83);
LABEL_45:
    v52 = (double *)a2[64];
    v24 = v267;
  }
  v52[2] = v84 * 0.5;
  v277 = *(_BYTE *)(a1 + 1875);
  v276 = 0.0;
  v124 = v266[106];
  v125 = v266[107];
  *(_QWORD *)&v268.f64[0] = &v277;
  *(_QWORD *)&v268.f64[1] = v24 + 6;
  v269 = COERCE_DOUBLE(&v266);
  *(_QWORD *)&v270.f64[0] = &v276;
  sub_20F4D78F4(&v274, v124, v125, (uint64_t)&v268, v84 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v133 = v276 * 0.5;
  v134 = (double *)a2[64];
  v134[3] = v276 * 0.5;
  v135 = v266;
  v136 = v266[109];
  v137 = v266[110];
  v138 = 0.0;
  v139 = 0.0;
  if (v136 != v137)
  {
    v140 = v267;
    do
    {
      while (1)
      {
        v141 = sub_20FC79C54(v136 + 8, (uint64_t *)(v136 + 56), v136 + 160, v133, v126.f64[0], v127, v128, v129, v130, v131, v132);
        *(_BYTE *)(v136 + 184) = v141;
        if (v141)
          break;
        *(_QWORD *)(v136 + 176) = 0;
        v136 += 216;
        if (v136 == v137)
          goto LABEL_58;
      }
      v142 = *(_QWORD *)(v136 + 192);
      if (v142)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 24))(v142, v136 + 160);
      *(_OWORD *)(v136 + 144) = *(_OWORD *)(v136 + 160);
      v264 = *(float64x2_t *)(v136 + 160);
      _D1 = v264.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v145 = v140[10];
      v146 = v140[11] * (v140[9] * _D0);
      v147 = v146 + 1.0;
      v133 = v145 * log1p(v146);
      *(double *)(v136 + 176) = v133;
      v127 = v264.f64[0];
      v126 = vmulq_n_f64(v264, sqrt(1.0 / v147));
      *(float64x2_t *)(v136 + 160) = v126;
      v139 = v139 + v133;
      v136 += 216;
    }
    while (v136 != v137);
LABEL_58:
    v134 = (double *)a2[64];
    v135 = v266;
  }
  v134[4] = v139 * 0.5;
  v148 = v135[112];
  v149 = v135[113];
  if (v148 != v149)
  {
    v138 = 0.0;
    v150 = v267;
    do
    {
      while (1)
      {
        v151 = (_OWORD *)(v148 + 800);
        v152 = sub_20F3E115C(v148 + 8, (_QWORD *)(v148 + 736), (float64x2_t *)(v148 + 800));
        *(_BYTE *)(v148 + 856) = v152;
        if (v152)
          break;
        *(_QWORD *)(v148 + 848) = 0;
        v148 += 888;
        if (v148 == v149)
          goto LABEL_66;
      }
      v153 = *(_QWORD *)(v148 + 864);
      if (v153)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 24))(v153, v148 + 800);
      v154 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 752) = *v151;
      *(_OWORD *)(v148 + 768) = v154;
      _Q2 = *v151;
      _Q1 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 784) = *(_OWORD *)(v148 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v148 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v161 = v150[13] * _D3;
      *(double *)(v148 + 848) = v161;
      v138 = v138 + v161;
      v148 += 888;
    }
    while (v148 != v149);
LABEL_66:
    v134 = (double *)a2[64];
  }
  v162 = v138 * 0.5;
LABEL_140:
  v134[5] = v162;
  *(_WORD *)(a1 + 1875) = 257;
  v255 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v256 = (double *)a2[64];
  v257 = *v256;
  v258 = v256[1];
  v259 = v256[2];
  v260 = v256[3];
  v261 = v256[4];
  v262 = v256[5];
  kdebug_trace();
  return v255 + v257 + v258 + v259 + v260 + v261 + v262;
}

void sub_20F721454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F721468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F721480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F721494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7214A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7214BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7214D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7214E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double *sub_20F7214F8(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  __n128 v23;
  __n128 v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  double *result;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD v36[64];
  double *v37;
  __int128 v38;
  uint64_t v39;

  v37 = (double *)v36;
  v38 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3)
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4)
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3)
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3)
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v38 = v6;
    v7 = (double *)operator new[]();
    if (v37 != (double *)v36 && v37)
      MEMORY[0x212BC6368]();
    v37 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v38 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62CB00((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62CCF4((uint64_t)&v39, v36, v9, v10, v11, v12, v13, v14, v15);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D074((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D2BC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D57C((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D7C4((uint64_t)&v39, v36, v16, v17, v18, v19, v20, v21, v22);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62DC70((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F721894((uint64_t)&v39, v36, v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62E070((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62E274((uint64_t)&v39, v36);
  }
  v31 = *((_QWORD *)&v38 + 1);
  result = v37;
  if (!*((_QWORD *)&v38 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v38 + 1) = 0;
    if (result == (double *)v36)
      return result;
    goto LABEL_34;
  }
  v33 = *((_QWORD *)&v38 + 1) >> 1;
  sub_20E8FB210(v37, &v37[*((_QWORD *)&v38 + 1) >> 1], &v37[*((_QWORD *)&v38 + 1)]);
  result = v37;
  v34 = v37[v33];
  if ((v31 & 1) == 0)
  {
    v35 = v33 - 1;
    if (v35 != v31)
    {
      sub_20E8FB210(v37, &v37[v35], &v37[v31]);
      result = v37;
    }
    v34 = (v34 + result[v35]) * 0.5;
  }
  *a2 = v8 * sqrt(v34);
  *((_QWORD *)&v38 + 1) = 0;
  if (result != (double *)v36)
  {
LABEL_34:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F721858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F721894(uint64_t a1, _QWORD *a2, __n128 _Q0, __n128 _Q1, double _D2, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  char v43;

  v12 = a2[66];
  v13 = v12
      - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  if (v12 >= v13)
    goto LABEL_22;
  v14 = a2[65];
  if (v14 >= v13)
  {
    v30 = a2[66];
    v31 = 0x84BDA12F684BDA13
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
    if (v13 <= v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v15 = 2 * v14;
  if (v15 <= v13)
    v15 = v12
        - 0x7B425ED097B425EDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 880) - *(_QWORD *)(*(_QWORD *)a1 + 872)) >> 3);
  a2[65] = v15;
  v16 = (__n128 *)a2[64];
  v17 = operator new[]();
  v18 = v17;
  if (v12)
  {
    v19 = 0;
    if (v12 < 4)
      goto LABEL_11;
    if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
      goto LABEL_11;
    v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = (__n128 *)(v17 + 16);
    v21 = v16 + 1;
    v22 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v21[-1];
      _Q1 = *v21;
      v20[-1] = _Q0;
      *v20 = _Q1;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v12 != v19)
    {
LABEL_11:
      v23 = v12 - v19;
      v24 = 8 * v19;
      v25 = &v16->n128_u64[v19];
      v26 = (unint64_t *)(v17 + v24);
      do
      {
        v27 = *v25++;
        _Q0.n128_u64[0] = v27;
        *v26++ = v27;
        --v23;
      }
      while (v23);
    }
  }
  v28 = (_QWORD *)a2[64];
  if (v28 != a2 && v28 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v18;
  v30 = a2[66];
  v31 = v13 - v30;
  if (v13 > v30)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v30), 8 * v31);
LABEL_22:
  a2[66] = v13;
  v32 = a2[64];
  v33 = (char *)(v32 + 8 * v12);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 872);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 880);
  if (v34 != v35)
  {
    do
    {
      v39 = sub_20FC79C54(v34 + 8, (uint64_t *)(v34 + 56), (uint64_t)&v42, _Q0.n128_f64[0], _Q1.n128_f64[0], _D2, a6, a7, a8, a9, a10);
      v43 = v39;
      if (v39)
      {
        v40 = *(_QWORD *)(v34 + 192);
        if (!v40 || ((*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v40 + 24))(v40, &v42), v43))
        {
          _Q1 = v42;
          _D2 = v42.n128_f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(_QWORD *)v33 = _Q0.n128_u64[0];
          v33 += 8;
        }
      }
      v34 += 216;
    }
    while (v34 != v35);
    v32 = a2[64];
    v13 = a2[66];
  }
  v41 = (char *)(v32 + 8 * v13);
  if (v33 != v41)
    a2[66] = v13 + ~((unint64_t)(v41 - v33 - 8) >> 3);
}

_QWORD **sub_20F721ABC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F7307F4(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C40DA2C9B81);
  }
  return a1;
}

uint64_t sub_20F721B00(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  __int128 *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  float64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  int v88;
  __int128 *v89;
  __int128 *v90;
  unint64_t v91;
  unint64_t v92;
  __int128 *v93;
  __int128 *v94;
  unsigned int v95;
  int v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _DWORD *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  __int128 *v140;
  unsigned __int8 v141;
  uint64_t v143;
  uint64_t i;
  unsigned __int8 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t j;
  uint64_t v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v186;
  int v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  __int128 v198;
  char *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  double v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _QWORD *v229;
  float64x2_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v242;
  char v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 *v256;
  __int128 *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int *v261;
  __int128 *v262;
  unsigned int v263;
  int v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  const char *v268;
  size_t v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  const char *v272;
  size_t v273;
  _BYTE *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t v280;
  size_t v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _DWORD *v289;
  char *v290;
  uint64_t v291;
  const char *v292;
  void *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  int v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  void *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  int v318;
  int v319;
  unint64_t v320;
  uint64_t v321;
  const char *v322;
  size_t v323;
  unsigned __int8 v324;
  unsigned __int8 v325;
  const char *v326;
  size_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE *v331;
  NSObject *v332;
  uint64_t v333;
  uint64_t v334;
  size_t v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  const char *v345;
  void *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  char v372;
  char *v373;
  float64x2_t v375;
  __int128 v376;
  float64x2_t v379;
  int8x16_t v380;
  int8x16_t v381;
  float64x2_t v382;
  float64x2_t v384;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  int8x16_t v394;
  char *v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  _DWORD *v406;
  int64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  _OWORD *v412;
  char *v413;
  uint64_t v414;
  __int128 v415;
  int v416;
  __int128 *v417;
  __int128 *v418;
  unint64_t v419;
  unint64_t v420;
  unsigned int *v421;
  __int128 *v422;
  unsigned int v423;
  uint64_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  char *v429;
  unint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  _DWORD *v440;
  int64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  _OWORD *v446;
  char *v447;
  uint64_t v448;
  __int128 v449;
  int v450;
  char v451;
  _QWORD *v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 v456;
  unsigned int v457;
  unint64_t v458;
  char v459;
  unsigned int v460;
  uint64_t v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v470;
  _QWORD *v471;
  uint64_t *v472;
  uint64_t *v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  _BOOL4 v483;
  int8x16_t v484;
  int8x16_t v485;
  _QWORD *v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v495;
  std::__shared_weak_count *v496;
  unint64_t *p_shared_owners;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unsigned int v505;
  unint64_t *v506;
  unint64_t v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  int8x16_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  __int128 v549;
  __int128 v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  __int128 v574;
  unint64_t *v575;
  unsigned int v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  __int8 v582;
  int v583;
  uint64_t v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  char *v589;
  char *v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  char *v595;
  uint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  int v600;
  __int16 v601;
  __int128 v602;
  unint64_t *v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  unint64_t v609;
  unint64_t v610;
  unsigned int *v611;
  char *v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  char *v616;
  char *v617;
  unint64_t v618;
  unint64_t v619;
  unsigned int *v620;
  char *v621;
  unsigned int v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unsigned int *v626;
  char *v627;
  unsigned int v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unsigned int *v632;
  char *v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  void **v649;
  void **v650;
  unint64_t v651;
  unint64_t v652;
  void **v653;
  void *v654;
  void **v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  unint64_t *v659;
  unint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  char *v664;
  unint64_t v665;
  unint64_t v666;
  unsigned int *v667;
  char *v668;
  unsigned int v669;
  uint64_t v670;
  char *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  unint64_t v675;
  unsigned int *v676;
  char *v677;
  unsigned int v678;
  uint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unsigned int *v682;
  char *v683;
  unsigned int v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unsigned int *v688;
  char *v689;
  unsigned int v690;
  uint64_t v691;
  void *v692;
  void **v693;
  char *v694;
  uint64_t v695;
  void **v696;
  unint64_t v697;
  void **v698;
  void **v699;
  uint64_t v700;
  void **v701;
  void **v702;
  __int128 v705;
  void *v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  void *v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  void *v733;
  void *v734;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  void *v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  void *v749;
  _QWORD *v750;
  char v752;
  uint64_t v753;
  uint64_t v754;
  void **v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t *v778;
  unint64_t v779;
  unint64_t *v780;
  unint64_t v781;
  int v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v786;
  size_t v787;
  unsigned __int8 v788;
  const char *v789;
  size_t v790;
  _BYTE *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _BYTE *v795;
  uint64_t v796;
  uint64_t v797;
  NSObject *v798;
  size_t v799;
  std::__shared_weak_count_vtbl *v800;
  std::__shared_weak_count *v801;
  int v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  char *v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  std::__shared_weak_count *v816;
  unint64_t *v817;
  unint64_t v818;
  uint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  void *v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  unint64_t *v838;
  uint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  char *v842;
  char *v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  unint64_t v847;
  unint64_t v848;
  char *v849;
  _QWORD *v850;
  unint64_t v851;
  char *v853;
  __int128 v854;
  __int128 v855;
  char *v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  uint64_t v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  uint64_t v869;
  char *v871;
  __int128 v875;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  uint64_t v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  char *v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  uint64_t v897;
  unint64_t v899;
  unint64_t v900;
  unint64_t v901;
  char *v902;
  char *v903;
  uint64_t v904;
  _QWORD *v905;
  __int128 v906;
  char *v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  uint64_t v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  char *v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  char *v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  uint64_t v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  uint64_t v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  char *v945;
  char *v946;
  char *v947;
  char *v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  char *v955;
  unint64_t v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  char *v980;
  char *v981;
  char *v982;
  uint64_t v983;
  char *v984;
  unint64_t v986;
  __int128 v987;
  __int128 v988;
  _OWORD *v989;
  __int128 v990;
  __int128 v991;
  uint64_t v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  uint64_t v1002;
  _OWORD *v1006;
  __int128 v1008;
  unint64_t v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  uint64_t v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  unint64_t v1023;
  char *v1024;
  unint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  unint64_t v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t v1039;
  __int128 v1040;
  __int128 v1041;
  _OWORD *v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  uint64_t v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  uint64_t v1055;
  uint64_t v1057;
  __int128 v1061;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  uint64_t v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  uint64_t v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  uint64_t v1083;
  char *v1085;
  uint64_t v1086;
  char *v1087;
  std::__shared_weak_count *v1088;
  unint64_t *v1089;
  unint64_t v1090;
  unint64_t *v1091;
  unint64_t v1092;
  char *v1093;
  __int128 v1094;
  uint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  uint64_t v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  uint64_t v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  uint64_t v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  uint64_t v1136;
  char *v1137;
  uint64_t v1138;
  unint64_t v1139;
  char *v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  uint64_t v1179;
  void **v1180;
  unint64_t v1181;
  void **v1182;
  char *v1185;
  char *v1186;
  uint64_t v1187;
  __int128 v1188;
  uint64_t v1189;
  uint64_t v1190;
  char *v1191;
  __int128 v1192;
  uint64_t v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  uint64_t v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  uint64_t v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  uint64_t v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  uint64_t v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  uint64_t v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  uint64_t v1225;
  __int128 v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  __int128 v1230;
  void **v1231;
  char *v1233;
  __int128 v1234;
  char *v1235;
  __int128 v1236;
  __int128 v1237;
  uint64_t v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  uint64_t v1248;
  void **v1250;
  uint64_t v1251;
  void **v1252;
  _QWORD *v1253;
  char *v1254;
  __int128 v1257;
  void *v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  void *v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  void *v1285;
  void *v1286;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  void *v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  void *v1301;
  _QWORD *v1302;
  char v1304;
  void **v1305;
  uint64_t v1306;
  std::__shared_weak_count *v1307;
  unint64_t *v1308;
  unint64_t v1309;
  unint64_t *v1310;
  unint64_t v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t *v1326;
  uint64_t *v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  _QWORD *v1332;
  unint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _QWORD *v1337;
  _QWORD *v1338;
  __int128 v1339;
  _QWORD *v1340;
  _QWORD *v1341;
  int v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t *v1353;
  uint64_t *v1354;
  uint64_t *v1355;
  unsigned int v1356;
  unint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  char *v1367;
  char *v1368;
  unint64_t v1369;
  unint64_t v1370;
  unsigned int *v1371;
  char *v1372;
  unsigned int v1373;
  uint64_t v1374;
  int v1375;
  uint64_t v1376;
  uint64_t *v1380;
  uint64_t v1381;
  double *v1382;
  uint64_t v1383;
  double *v1384;
  double v1386;
  float64x2_t v1389;
  double v1391;
  double v1392;
  double v1394;
  uint64_t v1405;
  unsigned int v1406;
  __int128 *v1407;
  uint64_t *v1410;
  std::string::size_type v1411;
  unint64_t *v1412;
  unint64_t v1413;
  void *v1414;
  uint64_t v1415;
  void (***v1416)(uint64_t);
  void (**v1417)(uint64_t);
  uint64_t v1418;
  double v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  uint64_t v1424;
  uint64_t v1425;
  float32x2_t *v1426;
  char *v1427;
  char *v1428;
  unint64_t v1429;
  unint64_t v1430;
  unsigned int *v1431;
  char *v1432;
  unsigned int v1433;
  int v1434;
  uint64_t v1435;
  void *v1436;
  int v1437;
  void *v1438;
  double *v1439;
  uint64_t *v1443;
  uint64_t v1444;
  double *v1445;
  uint64_t v1446;
  double *v1447;
  double v1449;
  float64x2_t v1452;
  double v1454;
  double v1455;
  double v1457;
  uint64_t v1468;
  void *v1469;
  unsigned int v1470;
  __int128 *v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  _QWORD *v1475;
  _QWORD *v1476;
  void *v1477;
  void *v1478;
  _QWORD *v1479;
  _QWORD *v1480;
  int v1481;
  uint64_t *v1484;
  std::string::size_type v1485;
  _QWORD *v1486;
  _QWORD *v1487;
  _QWORD *v1488;
  _QWORD *v1489;
  uint64_t v1490;
  uint64_t k;
  unsigned int v1492;
  char *v1493;
  char *v1494;
  unint64_t v1495;
  unint64_t v1496;
  unsigned int *v1497;
  char *v1498;
  unsigned int v1499;
  int v1500;
  uint64_t *v1501;
  uint64_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  BOOL v1506;
  uint64_t v1507;
  uint64_t v1508;
  _DWORD *v1509;
  unsigned int v1510;
  char *v1511;
  char *v1512;
  unint64_t v1513;
  unint64_t v1514;
  unsigned int *v1515;
  char *v1516;
  unsigned int v1517;
  int v1518;
  char v1519;
  _QWORD *v1520;
  _QWORD *v1521;
  _QWORD *v1522;
  _QWORD *v1523;
  uint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  unsigned int v1528;
  char *v1529;
  char *v1530;
  unint64_t v1531;
  unint64_t v1532;
  unsigned int *v1533;
  char *v1534;
  unsigned int v1535;
  unint64_t *v1536;
  unint64_t v1537;
  _QWORD *v1538;
  _QWORD *v1539;
  _QWORD *v1541;
  unint64_t v1542;
  _QWORD *v1543;
  uint64_t v1544;
  _QWORD *v1545;
  _QWORD *v1546;
  double v1547;
  double v1548;
  double v1549;
  double v1550;
  double v1551;
  unsigned int v1552;
  _QWORD *v1553;
  unint64_t v1554;
  _DWORD *v1555;
  _QWORD *v1556;
  _DWORD *v1557;
  _BYTE *v1558;
  int v1559;
  _QWORD *v1560;
  uint64_t v1561;
  unint64_t v1562;
  unint64_t v1563;
  _BYTE *v1564;
  _DWORD *v1565;
  int64_t v1566;
  unint64_t v1567;
  _DWORD *v1568;
  int v1569;
  _QWORD *v1570;
  unint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  _OWORD *v1574;
  __int128 *v1575;
  uint64_t v1576;
  __int128 v1577;
  uint64_t v1578;
  _QWORD *v1579;
  uint64_t *v1580;
  _QWORD *v1581;
  _QWORD *v1582;
  double *v1583;
  double *v1584;
  uint64_t v1585;
  uint64_t *v1586;
  uint64_t *v1587;
  unint64_t v1588;
  unint64_t v1589;
  uint64_t *v1590;
  unint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  char *v1602;
  char *v1603;
  unint64_t v1604;
  unint64_t v1605;
  unsigned int *v1606;
  char *v1607;
  unsigned int v1608;
  double *v1609;
  double v1610;
  uint64_t v1611;
  double *v1613;
  int64x2_t *v1614;
  double *v1615;
  double v1616;
  double v1617;
  float64x2_t v1618;
  float64x2_t v1620;
  double v1622;
  double v1624;
  double v1626;
  uint64_t v1627;
  float v1628;
  float v1629;
  float v1630;
  double v1631;
  int8x8_t v1632;
  unint64_t v1633;
  uint8x8_t v1634;
  unint64_t v1635;
  uint64_t **v1636;
  uint64_t *v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  char *v1642;
  char *v1643;
  unint64_t v1644;
  unint64_t v1645;
  unsigned int *v1646;
  char *v1647;
  unsigned int v1648;
  char *v1649;
  char *v1650;
  unint64_t v1651;
  unint64_t v1652;
  unsigned int *v1653;
  char *v1654;
  unsigned int v1655;
  uint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  double *v1661;
  int64x2_t *v1662;
  double *v1663;
  double v1664;
  double v1665;
  float64x2_t v1666;
  float64x2_t v1668;
  double v1670;
  double v1672;
  double v1674;
  double v1675;
  double *v1676;
  float v1677;
  float v1678;
  double v1679;
  unint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  double v1693;
  uint64_t v1694;
  uint64_t v1695;
  double *v1697;
  int64x2_t *v1698;
  double *v1699;
  double v1700;
  double v1701;
  float64x2_t v1702;
  float64x2_t v1704;
  double v1706;
  double v1708;
  double v1710;
  uint64_t v1711;
  double *v1712;
  float v1713;
  float v1714;
  float v1715;
  double v1716;
  unint64_t v1717;
  unint64_t v1718;
  unint64_t v1719;
  size_t v1720;
  __int128 v1721;
  double v1722;
  float32x2_t v1724;
  uint64_t *v1725;
  int v1726;
  double *v1727;
  double *v1728;
  uint64_t v1729;
  uint64_t v1730;
  __int32 v1731;
  unint64_t v1732;
  uint64_t v1733;
  uint64_t *v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  uint64_t *v1739;
  unsigned int v1740;
  _DWORD *v1741;
  unint64_t v1742;
  unint64_t v1743;
  unsigned int *v1744;
  _DWORD *v1745;
  unsigned int v1746;
  unint64_t v1747;
  unsigned int v1748;
  uint64_t *v1749;
  unint64_t v1750;
  unint64_t v1751;
  double *v1752;
  uint64_t v1753;
  uint64_t *v1754;
  uint64_t *v1755;
  uint64_t *v1756;
  double v1757;
  int v1758;
  double v1759;
  unsigned int v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  unsigned int v1764;
  BOOL v1765;
  uint64_t *v1766;
  uint64_t v1767;
  unsigned int v1768;
  float32x2_t *v1769;
  float32x2_t *v1770;
  char v1771;
  float32x2_t v1772;
  float v1773;
  float64x2_t v1774;
  float32x2_t v1775;
  float32x2_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  int v1780;
  __int32 *v1783;
  __int32 *v1784;
  __int32 *v1785;
  uint64_t v1786;
  unint64_t v1787;
  unint64_t v1788;
  char *v1789;
  uint64_t v1790;
  uint64_t v1791;
  double *v1792;
  uint64_t v1793;
  unint64_t v1794;
  unint64_t v1795;
  char *v1796;
  uint64_t v1797;
  uint64_t v1798;
  double *v1799;
  uint64_t v1800;
  int v1801;
  uint64_t v1802;
  unint64_t v1803;
  const std::nothrow_t *v1804;
  unint64_t v1805;
  double *v1806;
  double v1807;
  unint64_t v1808;
  unsigned int v1809;
  double *v1810;
  const std::nothrow_t *v1811;
  unint64_t v1812;
  double *v1813;
  void *v1814;
  int v1815;
  uint64_t v1816;
  uint64_t v1817;
  unsigned int v1818;
  unsigned int *v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  unsigned int v1823;
  unsigned int v1824;
  unsigned int v1825;
  double *v1826;
  unsigned int v1827;
  _DWORD *v1828;
  unint64_t v1829;
  char *v1830;
  char *v1831;
  unint64_t v1832;
  unint64_t v1833;
  unsigned int *v1834;
  char *v1835;
  unsigned int v1836;
  int8x8_t v1837;
  uint8x8_t v1838;
  unint64_t v1839;
  uint64_t **v1840;
  uint64_t *v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  _BOOL4 v1847;
  unsigned int *v1848;
  unint64_t v1849;
  char *v1850;
  char *v1851;
  unint64_t v1852;
  unint64_t v1853;
  unsigned int *v1854;
  char *v1855;
  unsigned int v1856;
  int8x8_t v1857;
  uint8x8_t v1858;
  unint64_t v1859;
  uint64_t **v1860;
  uint64_t *v1861;
  uint64_t v1862;
  unint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  BOOL v1867;
  uint64_t v1868;
  unint64_t v1869;
  uint64_t v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  __int128 v1887;
  __int128 v1888;
  __int128 v1889;
  __int128 v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  __int128 v1916;
  uint64_t v1917;
  uint64_t v1918;
  __int128 v1919;
  __int128 v1920;
  char *v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  __int128 v1926;
  uint64_t v1927;
  __int128 v1928;
  __int128 v1929;
  __int8 v1930;
  __int8 v1931;
  __int8 v1932;
  __int8 v1933;
  __int8 v1934;
  __int8 v1935;
  __int8 v1936;
  __int8 v1937;
  __int8 v1938;
  __int8 v1939;
  __int8 v1940;
  __int8 v1941;
  __int8 v1942;
  __int8 v1943;
  __int8 v1944;
  __int8 v1945;
  __int8 v1946;
  __int8 v1947;
  __int8 v1948;
  __int8 v1949;
  __int8 v1950;
  __int8 v1951;
  __int8 v1952;
  __int8 v1953;
  __int8 v1954;
  __int8 v1955;
  __int8 v1956;
  __int8 v1957;
  __int8 v1958;
  __int8 v1959;
  int v1960;
  int8x16_t v1961;
  int8x16_t v1962;
  uint64_t *v1963;
  void **v1964;
  void **v1965;
  void **v1966;
  int64x2_t v1967;
  uint64_t v1968;
  __int128 v1969;
  void *v1970;
  char *v1971;
  int64x2_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  char *v1975;
  uint64_t v1976;
  int64x2_t v1977;
  char v1978;
  uint64_t v1979;
  void **v1980;
  float64x2_t v1981;
  int8x16_t v1982;
  uint64_t v1983;
  char v1984;
  _QWORD *v1985;
  int8x16_t v1986;
  uint64_t v1987;
  int8x16_t v1988;
  double v1989;
  int8x16_t v1990;
  double v1991;
  char *categoryf[2];
  uint64_t category;
  uint64_t categoryg;
  double categoryh;
  std::__shared_weak_count *categorya;
  const char *categoryb;
  char *categoryc;
  void **categoryd;
  _QWORD *categorye;
  _DWORD *v2001;
  char **v2002;
  unsigned int v2003;
  void **v2004;
  _QWORD *v2005;
  _BYTE *v2006;
  char *v2007;
  char **v2008;
  char v2009;
  const char *v2010;
  int v2011;
  unsigned int v2012;
  _QWORD *v2013;
  uint64_t v2014;
  float64_t v2015;
  uint64_t *v2016;
  uint64_t v2017;
  int v2018;
  _BYTE *v2019;
  int64x2_t **v2020;
  uint64_t *v2021;
  uint64_t v2022;
  unint64_t v2023;
  void *__dsta[2];
  float64x2_t __dstb;
  uint64_t *__dst;
  float64x2_t v2027;
  int v2028;
  unint64_t v2029;
  double v2030;
  float64x2_t *v2031;
  _QWORD *v2032;
  unint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  __int32 v2036;
  int64x2_t v2037;
  unint64_t v2038;
  uint64_t *v2039;
  uint64_t v2040;
  uint64_t *v2041;
  int v2042;
  int64x2_t __szj;
  size_t __sz[2];
  int __sza;
  const char *__szb;
  void *__szc;
  uint64_t __szd;
  char *__sze;
  uint64_t __szf;
  unint64_t __szg;
  float64x2_t __szk;
  float64x2_t __szl;
  unint64_t __szh;
  double __szi;
  int64x2_t v2056;
  char *v2057;
  _QWORD *v2058;
  uint64_t v2059;
  unsigned int v2060;
  uint64_t v2061;
  double *v2062;
  uint64_t *v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  uint64_t v2066;
  unint64_t v2067;
  uint64_t v2068;
  std::__shared_weak_count *v2069;
  uint64_t v2070;
  std::__shared_weak_count *v2071;
  std::__shared_weak_count *v2072;
  std::__shared_weak_count *v2073;
  void *v2074;
  char v2075;
  __int128 v2076;
  void *v2077;
  __int128 v2078;
  void *v2079;
  __int128 v2080;
  void *v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  void *v2085;
  __int128 v2086;
  void *v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  __int128 v2095;
  void *v2096;
  __int128 v2097;
  __int128 v2098;
  uint64_t v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  __int128 v2105;
  void *v2106;
  _OWORD v2107[113];
  _OWORD v2108[41];
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  __int128 v2112;
  void *v2113;
  __int128 v2114;
  __int128 v2115;
  __int128 v2116;
  __int128 v2117;
  void *v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  __int128 v2122;
  void *v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  __int128 v2127;
  void *v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  __int128 v2132;
  void *v2133;
  __int128 v2134;
  __int128 v2135;
  __int128 v2136;
  __int128 v2137;
  void *v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  __int128 v2142;
  void *v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  __int128 v2147;
  void *v2148;
  _OWORD v2149[113];
  void *v2150[2];
  _BYTE v2151[1864];
  _OWORD v2152[247];
  uint64_t v2153;
  char v2154;
  __int8 v2155;
  _BYTE v2156[1800];
  uint64_t v2157;
  char v2158;
  __int16 v2159;
  __int128 v2160;
  __int128 v2161;
  uint64_t v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  __int128 v2168;
  __int128 v2169;
  uint64_t v2170;
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  __int128 v2177;
  uint64_t v2178;
  unint64_t v2179;
  char v2180;
  __int128 v2181;
  char v2182;
  _BYTE v2183[5728];
  __int128 v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int128 v2190;
  uint64_t v2191;
  char v2192;
  uint64_t (**v2193)();
  __int8 v2194;
  _BYTE v2195[1800];
  uint64_t v2196;
  char v2197;
  __int16 v2198;
  __int128 v2199;
  __int128 v2200;
  uint64_t v2201;
  __int128 v2202;
  __int128 v2203;
  __int128 v2204;
  __int128 v2205;
  __int128 v2206;
  __int128 v2207;
  __int128 v2208;
  uint64_t v2209;
  __int128 v2210;
  __int128 v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  __int128 v2216;
  uint64_t v2217;
  unint64_t v2218;
  char v2219;
  __int128 v2220;
  char v2221;
  _BYTE object[1888];
  _OWORD v2223[247];
  uint64_t v2224;
  char v2225;
  uint64_t (**v2226)();
  __int8 v2227;
  _BYTE v2228[1800];
  uint64_t v2229;
  char v2230;
  __int16 v2231;
  __int128 v2232;
  __int128 v2233;
  uint64_t v2234;
  __int128 v2235;
  __int128 v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  __int128 v2240;
  __int128 v2241;
  uint64_t v2242;
  __int128 v2243;
  __int128 v2244;
  __int128 v2245;
  __int128 v2246;
  __int128 v2247;
  __int128 v2248;
  __int128 v2249;
  uint64_t v2250;
  unint64_t v2251;
  char v2252;
  uint64_t v2253;
  std::__shared_weak_count *v2254;
  char v2255;
  uint64_t v2256;
  uint64_t v2257;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v2016 = v6;
  v2257 = *MEMORY[0x24BDAC8D0];
  v2019 = (_BYTE *)(v2 + 5856);
  if (*(_BYTE *)(v2 + 2146))
  {
    v7 = *(_QWORD *)(v2 + 120);
    v8 = v2 + 176;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)(v2 + 5824) = v7;
  *(_QWORD *)(v2 + 5832) = v8;
  v9 = *(_QWORD *)(v2 + 8);
  v10 = *(_QWORD **)(v9 + 296);
  v11 = (_QWORD *)(v9 + 304);
  v2068 = v2;
  if (v10 != (_QWORD *)(v9 + 304))
  {
    v2008 = (char **)(v2 + 5176);
    v2006 = (_BYTE *)(v2 + 6632);
    v2022 = v2 + 5200;
    v2004 = (void **)(v2 + 6320);
    while (1)
    {
      v12 = *((unsigned int *)v10 + 8);
      v13 = *(__int128 **)(v2068 + 5176);
      v14 = *(__int128 **)(v2068 + 5184);
      v15 = v13;
      if (v14 != v13)
      {
        v16 = v14 - v13;
        v15 = *(__int128 **)(v2068 + 5176);
        do
        {
          v17 = v16 >> 1;
          v18 = (unsigned int *)&v15[v16 >> 1];
          v20 = *v18;
          v19 = (__int128 *)(v18 + 4);
          v16 += ~(v16 >> 1);
          if (v20 < v12)
            v15 = v19;
          else
            v16 = v17;
        }
        while (v16);
      }
      if (v15 != v14 && *(_DWORD *)v15 == (_DWORD)v12)
        goto LABEL_49;
      if (v14 == v13)
      {
        v13 = *(__int128 **)(v2068 + 5184);
      }
      else
      {
        v21 = v14 - v13;
        do
        {
          v22 = v21 >> 1;
          v23 = (unsigned int *)&v13[v21 >> 1];
          v25 = *v23;
          v24 = (__int128 *)(v23 + 4);
          v21 += ~(v21 >> 1);
          if (v25 < v12)
            v13 = v24;
          else
            v21 = v22;
        }
        while (v21);
      }
      _D8 = *((double *)v10 + 13);
      v5 = *((int64x2_t *)v10 + 7);
      v27 = *(unsigned __int8 *)(v2068 + 1720);
      v1 = v1 & 0xFFFFFF0000000000 | v12 | (v27 << 32);
      v28 = *(unsigned __int8 *)(v2068 + 1788);
      if (v14 != v13 && (_DWORD)v12 == *(_DWORD *)v13)
        goto LABEL_49;
      *(_OWORD *)__dsta = *((_OWORD *)v10 + 4);
      v2027 = *((float64x2_t *)v10 + 7);
      v2030 = *((double *)v10 + 16);
      v2037 = *(int64x2_t *)(v10 + 5);
      __szj = *(int64x2_t *)(v10 + 11);
      v4.i64[0] = v10[10];
      v2056 = v4;
      v3.f64[0] = (float64_t)v10[7];
      v2064 = v3;
      v29 = (_DWORD)v27 == 0;
      v30 = sub_20F61B11C(v2022);
      v31 = (float64x2_t)vzip1q_s64(v2037, *(int64x2_t *)__dsta);
      _Q1 = (float64x2_t)vzip2q_s64(v2037, *(int64x2_t *)__dsta);
      _Q19 = (float64x2_t)__szj;
      _D18 = v2056.i64[0];
      v35 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
      v36 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v2027.f64[0]), _Q1, v2027, 1), (float64x2_t)vzip1q_s64((int64x2_t)v2064, v2056), v2030);
      _D2 = v2027.f64[1];
      __asm { FMLA            D1, D2, V19.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D8 * v2030;
      v41 = vnegq_f64(_Q0);
      v42 = (int64x2_t)vextq_s8(v36, v35, 8uLL);
      v43 = (float64x2_t)vzip1q_s64(v2037, v42);
      v44 = (float64x2_t)vzip2q_s64((int64x2_t)v31, v42);
      *(_QWORD *)&_Q19.f64[1] = vdupq_laneq_s64(__szj, 1).u64[0];
      v45 = vmlsq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, _Q0, 1);
      *(_DWORD *)v30 = -1;
      *(_BYTE *)(v30 + 4) = 1;
      *(_DWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = v1;
      *(_QWORD *)(v30 + 24) = v10 + 5;
      *(float64_t *)(v30 + 48) = v2064.f64[0];
      *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 32) = v43;
      v46 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v45, _Q19, _Q1.f64[0], 0));
      *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      *(_QWORD *)(v30 + 72) = v2056.i64[0];
      *(float64x2_t *)(v30 + 56) = v44;
      *(double *)(v30 + 96) = _D8;
      *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 80) = _Q19;
      v46.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
      _Q2 = vmulq_f64(v2064, v41);
      __asm
      {
        FMLS            D2, D18, V0.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      *(_QWORD *)(v30 + 120) = *(_OWORD *)&vnegq_f64(_Q2);
      *(int8x16_t *)(v30 + 104) = v46;
      *(_WORD *)(v30 + 128) = v28 | 0x100;
      *(_QWORD *)(v30 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 144) = 0;
      *(_QWORD *)(v30 + 152) = 0;
      *(_QWORD *)(v30 + 160) = 0;
      *(_QWORD *)(v30 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 176) = 0;
      *(_QWORD *)(v30 + 184) = 0;
      *(_QWORD *)(v30 + 192) = 0;
      *(_QWORD *)(v30 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 208) = 0;
      *(_QWORD *)(v30 + 216) = 0;
      *(_QWORD *)(v30 + 224) = 0;
      *(_DWORD *)object = v12;
      *(_QWORD *)&object[8] = v30;
      sub_20F61AEB4(v2008, v13, (uint64_t)object);
      if (!v29)
        break;
LABEL_48:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v2006 = 0;
      v2006[4] = 0;
LABEL_49:
      v68 = (_QWORD *)v10[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v10[2];
          _ZF = *v69 == (_QWORD)v10;
          v10 = v69;
        }
        while (!_ZF);
      }
      v10 = v69;
      if (v69 == v11)
      {
        v70 = v2068;
        v9 = *(_QWORD *)(v2068 + 8);
        goto LABEL_57;
      }
    }
    v48 = *(char **)(v2068 + 6328);
    v49 = *(_QWORD *)(v2068 + 6336);
    if ((unint64_t)v48 < v49)
    {
      *(_DWORD *)v48 = v12;
      v50 = (uint64_t)(v48 + 4);
LABEL_47:
      *(_QWORD *)(v2068 + 6328) = v50;
      goto LABEL_48;
    }
    v51 = (char *)*v2004;
    v52 = v48 - (_BYTE *)*v2004;
    v53 = v52 >> 2;
    v54 = (v52 >> 2) + 1;
    if (v54 >> 62)
      sub_20E867F44();
    v55 = v49 - (_QWORD)v51;
    if (v55 >> 1 > v54)
      v54 = v55 >> 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
      v56 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 62)
        sub_20E877A38();
      v57 = operator new(4 * v56);
      v58 = &v57[4 * v53];
      *v58 = v12;
      v50 = (uint64_t)(v58 + 1);
      v59 = v48 - v51;
      if (v48 == v51)
        goto LABEL_45;
    }
    else
    {
      v57 = 0;
      v58 = (_DWORD *)(4 * v53);
      *(_DWORD *)(4 * v53) = v12;
      v50 = 4 * v53 + 4;
      v59 = v48 - v51;
      if (v48 == v51)
      {
LABEL_45:
        *(_QWORD *)(v2068 + 6320) = v58;
        *(_QWORD *)(v2068 + 6328) = v50;
        *(_QWORD *)(v2068 + 6336) = &v57[4 * v56];
        if (v51)
          operator delete(v51);
        goto LABEL_47;
      }
    }
    v60 = v59 - 4;
    if (v60 < 0x2C)
      goto LABEL_1907;
    if ((unint64_t)(v48 - v57 - v52) < 0x20)
      goto LABEL_1907;
    v61 = (v60 >> 2) + 1;
    v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
    v63 = &v48[-v62];
    v58 = (_DWORD *)((char *)v58 - v62);
    v64 = (float64x2_t *)&v57[4 * v53 - 16];
    v65 = (float64x2_t *)(v48 - 16);
    v66 = v61 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v4 = (int64x2_t)v65[-1];
      v3 = *v65;
      v64[-1] = (float64x2_t)v4;
      *v64 = v3;
      v64 -= 2;
      v65 -= 2;
      v66 -= 8;
    }
    while (v66);
    v48 = v63;
    if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1907:
      do
      {
        v67 = *((_DWORD *)v48 - 1);
        v48 -= 4;
        *--v58 = v67;
      }
      while (v48 != v51);
    }
    goto LABEL_45;
  }
  v70 = v2;
LABEL_57:
  v2009 = *(_BYTE *)(v70 + 1730);
  v2005 = (_QWORD *)(v70 + 4880);
  if (*v2019)
  {
    if (!((*(_QWORD *)(v70 + 5280) - *(_QWORD *)(v70 + 5272)) >> 4))
      goto LABEL_91;
    goto LABEL_90;
  }
  memset(object, 0, 32);
  if (!sub_20F5B8114((_QWORD *)(v70 + 4880), (int *)object, v2183, 1))
  {
    if (!*(_DWORD *)&v2183[16])
      goto LABEL_91;
    goto LABEL_90;
  }
  *(_QWORD *)(v70 + 6448) = *(_QWORD *)(v70 + 6440);
  *(_QWORD *)(v70 + 6472) = *(_QWORD *)(v70 + 6464);
  *(_QWORD *)(v70 + 6496) = *(_QWORD *)(v70 + 6488);
  *(_QWORD *)(v70 + 6520) = *(_QWORD *)(v70 + 6512);
  *(_QWORD *)(v70 + 6544) = *(_QWORD *)(v70 + 6536);
  *(_QWORD *)(v70 + 6568) = *(_QWORD *)(v70 + 6560);
  *(_QWORD *)(v70 + 6592) = *(_QWORD *)(v70 + 6584);
  *(_QWORD *)(v70 + 6616) = *(_QWORD *)(v70 + 6608);
  v71 = *(_QWORD *)(v70 + 5656);
  v72 = *(_QWORD *)(v70 + 5664);
  while (v71 != v72)
  {
    v73 = *(_QWORD *)(v71 + 208);
    if (*(_BYTE *)(v71 + 496) || (*(_BYTE *)(v73 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v71 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6440, v73);
      sub_20F3D35E0((_QWORD *)(v70 + 6440), *(_QWORD *)(v71 + 216));
    }
    v71 += 504;
  }
  v74 = *(_QWORD *)(v70 + 5680);
  v75 = *(_QWORD *)(v70 + 5688);
  while (v74 != v75)
  {
    v76 = *(_QWORD *)(v74 + 136);
    if (*(_BYTE *)(v74 + 272) || (*(_BYTE *)(v76 + 4) & 6) != 0)
      sub_20F394A20(v70 + 6440, v76);
    v74 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v70 + 5704), *(_QWORD *)(v70 + 5712), (_QWORD *)(v70 + 6440));
  sub_20F5B85BC(*(_QWORD *)(v70 + 5728), *(_QWORD *)(v70 + 5736), (_QWORD *)(v70 + 6440));
  sub_20F5B8444(*(_QWORD *)(v70 + 5752), *(_QWORD *)(v70 + 5760), (_QWORD *)(v70 + 6440));
  v77 = *(_QWORD *)(v70 + 5776);
  v78 = *(_QWORD *)(v70 + 5784);
  while (v77 != v78)
  {
    v79 = *(_QWORD *)(v77 + 736);
    if (*(_BYTE *)(v77 + 880) || (*(_BYTE *)(v79 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v77 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6440, v79);
      sub_20F394A20(v70 + 6440, *(_QWORD *)(v77 + 744));
    }
    v77 += 888;
  }
  v80 = (*(_QWORD *)(v70 + 6544) - *(_QWORD *)(v70 + 6536)) >> 2;
  if (*(_DWORD *)&object[16] > v80)
    LODWORD(v80) = *(_DWORD *)&object[16];
  _CF = *(_DWORD *)&v2183[16] >= v80;
  v81 = *(_DWORD *)&v2183[16] - v80;
  if (_CF)
    v82 = v81;
  else
    v82 = 0;
  sub_20F59A618(v2005);
  if (v82)
  {
LABEL_90:
    v70 = v2068;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_91:
  v83 = *(double *)(v9 + 336);
  if (v83 != 0.0)
  {
    v2002 = (char **)(v70 + 5272);
    *(_QWORD *)&v2027.f64[0] = &v2183[32];
    v1990.i64[0] = (uint64_t)&object[72];
    v1988.i64[0] = (uint64_t)&object[160];
    v1986.i64[0] = (uint64_t)&object[192];
    v1966 = (void **)(v70 + 6344);
    v1976 = v70 + 6632;
    while (1)
    {
      LODWORD(v2150[0]) = *(_DWORD *)(*(_QWORD *)&v83 + 16);
      BYTE4(v2150[0]) = 1;
      v2150[1] = (void *)(*(_QWORD *)&v83 + 24);
      memset(&v2151[48], 0, 56);
      *(_DWORD *)&v2151[104] = 1065353216;
      *(_WORD *)&v2151[112] = 1;
      v84 = *(_OWORD *)(*(_QWORD *)&v83 + 40);
      *(_OWORD *)v2151 = *(_OWORD *)(*(_QWORD *)&v83 + 24);
      *(_OWORD *)&v2151[16] = v84;
      v85 = *(_QWORD *)(*(_QWORD *)&v83 + 56);
      v2064.f64[0] = v83;
      v2151[40] = *(_BYTE *)(*(_QWORD *)&v83 + 64);
      *(_QWORD *)&v2151[32] = v85;
      sub_20F6169C8((uint64_t)v2150);
      sub_20F616F2C((uint64_t)v2150);
      BYTE4(v2150[0]) = v2009;
      v86 = *((_OWORD *)v2150[1] + 1);
      *(_OWORD *)v2151 = *(_OWORD *)v2150[1];
      *(_OWORD *)&v2151[16] = v86;
      v87 = *((_BYTE *)v2150[1] + 40);
      *(_QWORD *)&v2151[32] = *((_QWORD *)v2150[1] + 4);
      v2151[40] = v87;
      sub_20F6169C8((uint64_t)v2150);
      sub_20F616F2C((uint64_t)v2150);
      v88 = (int)v2150[0];
      v89 = *(__int128 **)(v70 + 5272);
      v90 = *(__int128 **)(v70 + 5280);
      if (v90 == v89)
      {
        v89 = *(__int128 **)(v70 + 5280);
      }
      else
      {
        v91 = v90 - v89;
        do
        {
          v92 = v91 >> 1;
          v93 = &v89[v91 >> 1];
          v95 = *(_DWORD *)v93;
          v94 = v93 + 1;
          v91 += ~(v91 >> 1);
          if (v95 < LODWORD(v2150[0]))
            v89 = v94;
          else
            v91 = v92;
        }
        while (v91);
        if (v90 != v89 && LODWORD(v2150[0]) == *(_DWORD *)v89)
        {
          v2057 = *(char **)(v70 + 5280);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_155;
        }
      }
      v96 = BYTE4(v2150[0]);
      v2183[4] = 1;
      *(_DWORD *)v2183 = -1;
      *(_DWORD *)&v2183[8] = 0;
      v97 = v2150[0];
      v98 = v2150[1];
      *(_OWORD *)&v2183[16] = *(_OWORD *)v2150;
      *(_OWORD *)&v2183[32] = *(_OWORD *)v2151;
      *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[16];
      *(_OWORD *)&v2183[64] = *(_OWORD *)&v2151[32];
      v99 = *(_QWORD *)&v2151[48];
      v100 = *(_QWORD *)&v2151[56];
      *(_QWORD *)&v2183[80] = *(_QWORD *)&v2151[48];
      *(_QWORD *)&v2183[88] = *(_QWORD *)&v2151[56];
      memset(&v2151[48], 0, 40);
      v101 = *(_QWORD *)&v2151[64];
      v102 = *(_QWORD *)&v2151[72];
      *(_QWORD *)&v2183[96] = *(_QWORD *)&v2151[64];
      *(_QWORD *)&v2183[104] = *(_QWORD *)&v2151[72];
      v103 = *(_QWORD *)&v2151[80];
      v104 = *(_QWORD *)&v2151[88];
      *(_QWORD *)&v2183[112] = *(_QWORD *)&v2151[80];
      *(_QWORD *)&v2183[120] = *(_QWORD *)&v2151[88];
      v105 = *(_QWORD *)&v2151[96];
      *(_QWORD *)&v2183[128] = *(_QWORD *)&v2151[96];
      v106 = *(_DWORD *)&v2151[104];
      *(_DWORD *)&v2183[136] = *(_DWORD *)&v2151[104];
      if (*(_QWORD *)&v2151[96])
      {
        v107 = *(_QWORD *)(*(_QWORD *)&v2151[88] + 8);
        if ((*(_QWORD *)&v2151[80] & (*(_QWORD *)&v2151[80] - 1)) != 0)
        {
          if (v107 >= *(_QWORD *)&v2151[80])
            v107 %= *(_QWORD *)&v2151[80];
        }
        else
        {
          v107 &= *(_QWORD *)&v2151[80] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v2151[72] + 8 * v107) = &v2183[120];
        *(_QWORD *)&v2151[88] = 0;
        *(_QWORD *)&v2151[96] = 0;
        v98 = *(void **)&v2183[24];
        v97 = *(void **)&v2183[16];
        v99 = *(_QWORD *)&v2183[80];
        v100 = *(_QWORD *)&v2183[88];
        v101 = *(_QWORD *)&v2183[96];
        v102 = *(_QWORD *)&v2183[104];
        v103 = *(_QWORD *)&v2183[112];
        v104 = *(_QWORD *)&v2183[120];
        v105 = *(_QWORD *)&v2183[128];
        v106 = *(_DWORD *)&v2183[136];
      }
      v108 = *(_WORD *)&v2151[112];
      *(_WORD *)&v2183[144] = *(_WORD *)&v2151[112];
      v2183[192] = 0;
      memset(&v2183[152], 0, 33);
      *(_DWORD *)object = v88;
      *(_QWORD *)&object[8] = *(_QWORD *)v2183;
      *(_DWORD *)&object[16] = *(_DWORD *)&v2183[8];
      *(_QWORD *)&object[24] = v97;
      *(_QWORD *)&object[32] = v98;
      *(_OWORD *)&object[40] = *(_OWORD *)&v2183[32];
      *(_OWORD *)&object[56] = *(_OWORD *)&v2183[48];
      *(_OWORD *)&object[72] = *(_OWORD *)&v2183[64];
      *(_QWORD *)&object[88] = v99;
      *(_QWORD *)&object[96] = v100;
      memset(&v2183[80], 0, 40);
      *(_QWORD *)&object[104] = v101;
      *(_QWORD *)&object[112] = v102;
      *(_QWORD *)&object[120] = v103;
      *(_QWORD *)&object[128] = v104;
      *(_QWORD *)&object[136] = v105;
      *(_DWORD *)&object[144] = v106;
      if (v105)
      {
        v109 = *(_QWORD *)(v104 + 8);
        if ((v103 & (v103 - 1)) != 0)
        {
          if (v109 >= v103)
            v109 %= v103;
        }
        else
        {
          v109 &= v103 - 1;
        }
        *(_QWORD *)(v102 + 8 * v109) = &object[128];
        *(_QWORD *)&v2183[120] = 0;
        *(_QWORD *)&v2183[128] = 0;
        v108 = *(_WORD *)&v2183[144];
      }
      *(_WORD *)&object[152] = v108;
      *(_OWORD *)&object[160] = *(_OWORD *)&v2183[152];
      *(_OWORD *)&object[176] = *(_OWORD *)&v2183[168];
      *(_OWORD *)&object[192] = *(_OWORD *)&v2183[184];
      v2057 = sub_20F61B41C(v2002, v89, (int *)object);
      v110 = *(_QWORD **)&object[128];
      if (*(_QWORD *)&object[128])
      {
        do
        {
          v111 = (_QWORD *)*v110;
          operator delete(v110);
          v110 = v111;
        }
        while (v111);
      }
      v112 = *(void **)&object[112];
      *(_QWORD *)&object[112] = 0;
      if (v112)
        operator delete(v112);
      if (*(_QWORD *)&object[88])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[88];
        operator delete(*(void **)&object[88]);
      }
      v113 = *(_QWORD **)&v2183[120];
      if (*(_QWORD *)&v2183[120])
      {
        do
        {
          v114 = (_QWORD *)*v113;
          operator delete(v113);
          v113 = v114;
        }
        while (v114);
      }
      v115 = *(void **)&v2183[104];
      *(_QWORD *)&v2183[104] = 0;
      if (v115)
        operator delete(v115);
      if (*(_QWORD *)&v2183[80])
      {
        *(_QWORD *)&v2183[88] = *(_QWORD *)&v2183[80];
        operator delete(*(void **)&v2183[80]);
      }
      if (v96)
        break;
LABEL_154:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v1976 = 0;
      *(_BYTE *)(v1976 + 4) = 0;
LABEL_155:
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 1065353216;
      v137 = *(uint64_t ***)(v70 + 128);
      v138 = *v137;
      v139 = v137[1];
      while (v138 != v139)
      {
        v140 = (__int128 *)*v138;
        if (*(_QWORD *)(*v138 + 24))
        {
          if (*((_DWORD *)v140 + 4) != *(_DWORD *)(*(_QWORD *)&v83 + 16))
            goto LABEL_156;
LABEL_171:
          v146 = *v140;
          *(_QWORD *)&v2183[16] = *((_QWORD *)v140 + 2);
          *(_OWORD *)v2183 = v146;
          *(_OWORD *)&v2183[24] = *(__int128 *)((char *)v140 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)v2183, (uint64_t)v2183);
          goto LABEL_156;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v141 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          _ZF = byte_254A6DE70 == 0;
        else
          _ZF = 0;
        if (!_ZF)
        {
          v143 = qword_254A6DE40;
          for (i = qword_254A6DE48; v143 != i; v143 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v143)(*(_QWORD *)(v143 + 8), "frame->lens_model_", 18, "", 0);
        }
        v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v140 = (__int128 *)*v138;
        if (*(_DWORD *)(*v138 + 16) == *(_DWORD *)(*(_QWORD *)&v83 + 16))
          goto LABEL_171;
LABEL_156:
        v138 += 2;
      }
      v147 = *((_QWORD *)v2057 + 1);
      if (*(_QWORD *)(v147 + 128))
      {
        v148 = *(_QWORD **)(v147 + 120);
        if (v148)
        {
          do
          {
            v149 = (_QWORD *)*v148;
            operator delete(v148);
            v148 = v149;
          }
          while (v149);
        }
        *(_QWORD *)(v147 + 120) = 0;
        v150 = *(_QWORD *)(v147 + 112);
        if (v150)
        {
          for (j = 0; j != v150; ++j)
            *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * j) = 0;
        }
        *(_QWORD *)(v147 + 128) = 0;
      }
      v152 = *(_QWORD *)object;
      *(_QWORD *)object = 0;
      v153 = *(void **)(v147 + 104);
      *(_QWORD *)(v147 + 104) = v152;
      if (v153)
        operator delete(v153);
      v154 = *(_QWORD *)&object[8];
      v155 = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 120) = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 112) = v154;
      *(_QWORD *)&object[8] = 0;
      v156 = *(_QWORD *)&object[24];
      *(_QWORD *)(v147 + 128) = *(_QWORD *)&object[24];
      *(_DWORD *)(v147 + 136) = *(_DWORD *)&object[32];
      if (v156)
      {
        v157 = *(_QWORD *)(v155 + 8);
        if ((v154 & (v154 - 1)) != 0)
        {
          if (v157 >= v154)
            v157 %= v154;
        }
        else
        {
          v157 &= v154 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * v157) = v147 + 120;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)&object[24] = 0;
      }
      sub_20F6169C8(v147 + 16);
      sub_20F616F2C(v147 + 16);
      memset(v2183, 0, 24);
      v158 = *(_QWORD **)(v70 + 16);
      v159 = v158[2];
      if (v159)
      {
        if (v159 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v160 = (char *)operator new(24 * v159);
        *(_QWORD *)v2183 = v160;
        *(_QWORD *)&v2183[8] = v160;
        *(_QWORD *)&v2183[16] = &v160[24 * v159];
        v163 = (_QWORD *)*v158;
        v161 = v158 + 1;
        v162 = v163;
        if (v163 == v161)
          goto LABEL_196;
LABEL_211:
        while (2)
        {
          v174 = v162[6];
          if (*(_BYTE *)(v174 + 528))
            v175 = v174 + 40;
          else
            v175 = 0;
          if (*(_BYTE *)(v174 + 528))
          {
            v176 = *(_DWORD *)(v174 + 88);
            if (v176 == *(_DWORD *)(*(_QWORD *)&v83 + 16))
            {
              v177 = *(_QWORD *)(v174 + 536);
              v178 = *(_QWORD *)(v174 + 544);
              v179 = *(_QWORD *)(v174 + 72);
              v180 = *(_DWORD *)(v174 + 80);
              if (v178 != v177)
              {
                v181 = (v178 - v177) >> 5;
                while (1)
                {
                  v182 = v181 >> 1;
                  v183 = v177 + 32 * (v181 >> 1);
                  v184 = *(_DWORD *)(v183 + 16);
                  _CF = v184 >= v176;
                  if (v184 != v176)
                    goto LABEL_224;
                  if (*(_QWORD *)v183 >= v179)
                    break;
LABEL_218:
                  v177 = v183 + 32;
                  v182 = v181 + ~v182;
LABEL_219:
                  v181 = v182;
                  if (!v182)
                    goto LABEL_227;
                }
                if (*(_QWORD *)v183 != v179)
                  goto LABEL_219;
                _CF = *(_DWORD *)(v183 + 8) >= v180;
LABEL_224:
                if (_CF)
                  goto LABEL_219;
                goto LABEL_218;
              }
LABEL_227:
              if (v177 != v178
                && *(_DWORD *)(v177 + 16) == v176
                && *(_QWORD *)v177 == v179
                && *(_DWORD *)(v177 + 8) == v180)
              {
                v186 = *(_QWORD *)(v177 + 24);
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 >= *(_QWORD *)&v2183[16])
                  goto LABEL_232;
LABEL_242:
                *(_DWORD *)v160 = v187;
                v195 = v160 + 24;
                *((_QWORD *)v160 + 1) = v186;
                *((_QWORD *)v160 + 2) = v175;
                v83 = v2064.f64[0];
              }
              else
              {
                v186 = 0;
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 < *(_QWORD *)&v2183[16])
                  goto LABEL_242;
LABEL_232:
                v189 = *(char **)v2183;
                v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v160[-*(_QWORD *)v2183] >> 3);
                v191 = v190 + 1;
                if (v190 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v192 = 0xAAAAAAAAAAAAAAABLL * ((v188 - *(_QWORD *)v2183) >> 3);
                if (2 * v192 > v191)
                  v191 = 2 * v192;
                if (v192 >= 0x555555555555555)
                  v193 = 0xAAAAAAAAAAAAAAALL;
                else
                  v193 = v191;
                if (v193)
                {
                  if (v193 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v194 = (char *)operator new(24 * v193);
                }
                else
                {
                  v194 = 0;
                }
                v196 = &v194[24 * v190];
                *(_DWORD *)v196 = v187;
                *((_QWORD *)v196 + 1) = v186;
                *((_QWORD *)v196 + 2) = v175;
                v197 = v196;
                if (v160 == v189)
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                }
                else
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                  do
                  {
                    v198 = *(_OWORD *)(v160 - 24);
                    *((_QWORD *)v197 - 1) = *((_QWORD *)v160 - 1);
                    *(_OWORD *)(v197 - 24) = v198;
                    v197 -= 24;
                    v160 -= 24;
                  }
                  while (v160 != v189);
                  v160 = *(char **)v2183;
                }
                v199 = &v194[24 * v193];
                v195 = v196 + 24;
                *(_QWORD *)v2183 = v197;
                *(_QWORD *)&v2183[8] = v196 + 24;
                *(_QWORD *)&v2183[16] = v199;
                if (v160)
                  operator delete(v160);
              }
              *(_QWORD *)&v2183[8] = v195;
              v160 = v195;
            }
          }
          v200 = (_QWORD *)v162[1];
          if (v200)
          {
            do
            {
              v201 = v200;
              v200 = (_QWORD *)*v200;
            }
            while (v200);
          }
          else
          {
            do
            {
              v201 = (_QWORD *)v162[2];
              _ZF = *v201 == (_QWORD)v162;
              v162 = v201;
            }
            while (!_ZF);
          }
          v162 = v201;
          if (v201 == v161)
            goto LABEL_196;
          continue;
        }
      }
      v160 = 0;
      v164 = (_QWORD *)*v158;
      v161 = v158 + 1;
      v162 = v164;
      if (v164 != v161)
        goto LABEL_211;
LABEL_196:
      v165 = (_QWORD *)*((_QWORD *)v2057 + 1);
      v166 = (void *)v165[10];
      if (v166)
      {
        v165[11] = v166;
        operator delete(v166);
        v165[10] = 0;
        v165[11] = 0;
        v165[12] = 0;
        v160 = *(char **)&v2183[8];
      }
      v167 = *(_QWORD *)&v2183[16];
      v165[10] = *(_QWORD *)v2183;
      v165[11] = v160;
      v165[12] = v167;
      memset(v2183, 0, 24);
      sub_20F616F2C((uint64_t)(v165 + 2));
      if (*(_QWORD *)v2183)
      {
        *(_QWORD *)&v2183[8] = *(_QWORD *)v2183;
        operator delete(*(void **)v2183);
      }
      v168 = *(_QWORD **)&object[16];
      if (*(_QWORD *)&object[16])
      {
        do
        {
          v169 = (_QWORD *)*v168;
          operator delete(v168);
          v168 = v169;
        }
        while (v169);
      }
      v170 = *(void **)object;
      *(_QWORD *)object = 0;
      if (v170)
        operator delete(v170);
      v171 = *(_QWORD **)&v2151[88];
      if (*(_QWORD *)&v2151[88])
      {
        do
        {
          v172 = (_QWORD *)*v171;
          operator delete(v171);
          v171 = v172;
        }
        while (v172);
      }
      v173 = *(void **)&v2151[72];
      *(_QWORD *)&v2151[72] = 0;
      if (v173)
        operator delete(v173);
      if (*(_QWORD *)&v2151[48])
      {
        *(_QWORD *)&v2151[56] = *(_QWORD *)&v2151[48];
        operator delete(*(void **)&v2151[48]);
      }
      v83 = **(double **)&v83;
      if (v83 == 0.0)
        goto LABEL_258;
    }
    v116 = *(char **)(v70 + 6352);
    v117 = *(_QWORD *)(v70 + 6360);
    if ((unint64_t)v116 < v117)
    {
      *(_DWORD *)v116 = v88;
      v118 = (uint64_t)(v116 + 4);
LABEL_153:
      *(_QWORD *)(v70 + 6352) = v118;
      goto LABEL_154;
    }
    v119 = (char *)*v1966;
    v120 = v116 - (_BYTE *)*v1966;
    v121 = v120 >> 2;
    v122 = (v120 >> 2) + 1;
    if (v122 >> 62)
      sub_20E867F44();
    v123 = v117 - (_QWORD)v119;
    if (v123 >> 1 > v122)
      v122 = v123 >> 1;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
      v124 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (v124)
    {
      if (v124 >> 62)
        sub_20E877A38();
      v125 = operator new(4 * v124);
      v126 = &v125[4 * v121];
      *v126 = v88;
      v118 = (uint64_t)(v126 + 1);
      v127 = v116 - v119;
      if (v116 == v119)
        goto LABEL_150;
    }
    else
    {
      v125 = 0;
      v126 = (_DWORD *)(4 * v121);
      *(_DWORD *)(4 * v121) = v88;
      v118 = 4 * v121 + 4;
      v127 = v116 - v119;
      if (v116 == v119)
      {
LABEL_150:
        *(_QWORD *)(v70 + 6344) = v126;
        *(_QWORD *)(v70 + 6352) = v118;
        *(_QWORD *)(v70 + 6360) = &v125[4 * v124];
        if (v119)
          operator delete(v119);
        v83 = v2064.f64[0];
        goto LABEL_153;
      }
    }
    v128 = v127 - 4;
    if (v128 < 0x2C)
      goto LABEL_1908;
    if ((unint64_t)(v116 - v125 - v120) < 0x20)
      goto LABEL_1908;
    v129 = (v128 >> 2) + 1;
    v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    v131 = &v116[-v130];
    v126 = (_DWORD *)((char *)v126 - v130);
    v132 = &v125[4 * v121 - 16];
    v133 = v116 - 16;
    v134 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v135 = *(_OWORD *)v133;
      *(v132 - 1) = *((_OWORD *)v133 - 1);
      *v132 = v135;
      v132 -= 2;
      v133 -= 32;
      v134 -= 8;
    }
    while (v134);
    v116 = v131;
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1908:
      do
      {
        v136 = *((_DWORD *)v116 - 1);
        v116 -= 4;
        *--v126 = v136;
      }
      while (v116 != v119);
    }
    goto LABEL_150;
  }
LABEL_258:
  v202 = *(_QWORD *)v70;
  if (!*(_QWORD *)v70)
  {
LABEL_261:
    v228 = *(_QWORD *)(v70 + 8);
    v229 = *(_QWORD **)(v228 + 48);
    v2058 = (_QWORD *)(v228 + 56);
    if (v229 != (_QWORD *)(v228 + 56))
    {
LABEL_262:
      v1965 = (void **)(v2068 + 6248);
      v2001 = (_DWORD *)(v2068 + 6632);
      v1964 = (void **)(v2068 + 6272);
      v2031 = (float64x2_t *)(v2068 + 176);
      v1963 = (uint64_t *)(v2068 + 504);
      while (1)
      {
        v230 = v2064;
        LOBYTE(v230.f64[0]) = 0;
        v2064 = v230;
        v231 = *v2016;
        v232 = v2016[1];
        if (*v2016 != v232)
        {
          while (*(_DWORD *)v231 != *((_DWORD *)v229 + 10))
          {
            v231 += 48;
            if (v231 == v232)
              goto LABEL_278;
          }
        }
        if (v231 == v232)
        {
LABEL_278:
          v233 = 1;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
            goto LABEL_279;
        }
        else
        {
          *(_OWORD *)__sz = *(_OWORD *)(v231 + 32);
          v2065 = *(float64x2_t *)(v231 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v2065), (int32x4_t)vcgtzq_f64(*(float64x2_t *)__sz))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v233 = 0;
          v2027 = vmulq_f64(*(float64x2_t *)__sz, *(float64x2_t *)(v2068 + 192));
          v230 = vmulq_f64(v2065, *v2031);
          v2064 = v230;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
          {
LABEL_279:
            v247 = *(_QWORD *)(v236 + 8);
            v242 = v235;
            v243 = 0;
            v248 = *(uint64_t **)(v247 + 56);
            v244 = (uint64_t *)(v247 + 56);
            v245 = v248;
            if (!v248)
              goto LABEL_305;
            goto LABEL_282;
          }
        }
        v237 = *(_QWORD *)(v236 + 8);
        v238 = *(_QWORD *)(v237 + 48);
        v239 = *(_QWORD *)(v238 + 32);
        v240 = *(_DWORD *)(v238 + 40);
        if (v234 == v239 && (_DWORD)v235 == v240)
        {
          v243 = 1;
          v242 = v235;
          v249 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v249;
          if (!v249)
            goto LABEL_305;
        }
        else
        {
          v242 = v235;
          v243 = 0;
          v246 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v246;
          if (!v246)
            goto LABEL_305;
        }
LABEL_282:
        v250 = v244;
        do
        {
          v251 = v245[4];
          if (v251 < v234)
          {
            ++v245;
          }
          else if (v251 == v234)
          {
            if (*((_DWORD *)v245 + 10) < v242)
              ++v245;
            else
              v250 = v245;
          }
          else
          {
            v250 = v245;
          }
          v245 = (uint64_t *)*v245;
        }
        while (v245);
        if (v250 != v244)
        {
          v252 = v250[4];
          if (v234 >= v252 && (v234 != v252 || *((_DWORD *)v250 + 10) <= v242))
          {
            v253 = v250[6];
            if (v253)
            {
              v254 = v235;
              if ((v243 & 1) != 0
                || (v254 = v235 | 0x100000000, v255 = v235 | 0x100000000, !*(_BYTE *)(v2068 + 2146)))
              {
                v255 = v235;
                v256 = *(__int128 **)(v2068 + 4888);
                v257 = *(__int128 **)(v2068 + 4896);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                  goto LABEL_299;
              }
              else
              {
                v256 = *(__int128 **)(v2068 + 4888);
                v257 = *(__int128 **)(v2068 + 4896);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                {
LABEL_299:
                  v259 = v258 >> 4;
                  do
                  {
                    v260 = v259 >> 1;
                    v261 = (unsigned int *)&v256[v259 >> 1];
                    v263 = *v261;
                    v262 = (__int128 *)(v261 + 4);
                    v259 += ~(v259 >> 1);
                    if (v263 < v254)
                      v256 = v262;
                    else
                      v259 = v260;
                  }
                  while (v259);
LABEL_488:
                  __szc = (void *)v235;
                  v2011 = v233;
                  if (v257 != v256 && *(_DWORD *)v256 == (_DWORD)v254)
                  {
                    v372 = 0;
                    goto LABEL_515;
                  }
                  v1967 = *(int64x2_t *)(v253 + 24);
                  v1972 = *(int64x2_t *)v253;
                  v5.i64[0] = *(_QWORD *)(v253 + 16);
                  v1977 = v5;
                  v1981 = *(float64x2_t *)(v253 + 72);
                  v1986.i64[0] = *(_QWORD *)(v253 + 88);
                  v1988 = *(int8x16_t *)(v253 + 48);
                  v1990.i64[0] = *(_QWORD *)(v253 + 64);
                  v230.f64[0] = *(float64_t *)(v253 + 40);
                  *(float64x2_t *)categoryf = v230;
                  *(_OWORD *)v2183 = *(_OWORD *)(v253 + 792);
                  *(_QWORD *)&v2183[16] = *(_QWORD *)(v253 + 808);
                  *(_OWORD *)&object[7] = *(_OWORD *)(v253 + 768);
                  *(_QWORD *)&object[23] = *(_QWORD *)(v253 + 784);
                  v373 = (char *)sub_20F61BD6C(v2068 + 4912);
                  _D3 = vextq_s8(v1988, v1988, 8uLL).u64[0];
                  v375 = (float64x2_t)vzip1q_s64(v1972, v1967);
                  *(_QWORD *)&v376 = vextq_s8((int8x16_t)v375, (int8x16_t)v375, 8uLL).u64[0];
                  _Q5 = (float64x2_t)vzip2q_s64(v1972, v1967);
                  _D21 = categoryf[0];
                  v379 = (float64x2_t)vzip1q_s64(v1977, *(int64x2_t *)categoryf);
                  v380 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v1988, 1), 8uLL);
                  v381 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v380, 8uLL);
                  v382 = (float64x2_t)vzip1q_s64((int64x2_t)v375, (int64x2_t)v381);
                  *(_QWORD *)&v375.f64[1] = v376;
                  _V20.D[1] = v1981.f64[1];
                  *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
                  v384.f64[0] = v379.f64[0];
                  *(_QWORD *)&v384.f64[1] = vextq_s8((int8x16_t)v379, (int8x16_t)v379, 8uLL).u64[0];
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v1981.f64[0]), _Q5, v1981, 1), v384, *(double *)v1986.i64);
                  __asm { FMLA            D5, D3, V20.D[1] }
                  _D22 = v1990.i64[0];
                  _D3 = _Q5.f64[0] + *(double *)v1990.i64 * *(double *)v1986.i64;
                  v388 = vnegq_f64(_Q4);
                  *(_QWORD *)&v389.f64[0] = v376;
                  *(_QWORD *)&v389.f64[1] = vextq_s8(v381, v381, 8uLL).u64[0];
                  v390 = (float64x2_t)vzip1q_s64((int64x2_t)v1988, vdupq_laneq_s64((int64x2_t)v380, 1));
                  v391 = vmlsq_laneq_f64(vmulq_n_f64(v382, v388.f64[0]), v389, _Q4, 1);
                  *(_DWORD *)v373 = -1;
                  v373[4] = 1;
                  *((_DWORD *)v373 + 2) = 0;
                  *((_QWORD *)v373 + 2) = v254;
                  *((_QWORD *)v373 + 3) = v253;
                  *((_QWORD *)v373 + 6) = *(_QWORD *)&v379.f64[0];
                  *(_QWORD *)&v382.f64[1] = vextq_s8((int8x16_t)v382, (int8x16_t)v382, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 2) = v382;
                  *((_QWORD *)v373 + 9) = *(_QWORD *)&v384.f64[1];
                  *((_QWORD *)&v376 + 1) = *(_QWORD *)&v389.f64[1];
                  *(_OWORD *)(v373 + 56) = v376;
                  *((_QWORD *)v373 + 12) = v1990.i64[0];
                  v392 = vmlsq_lane_f64(v391, v390, _D3, 0);
                  *(_QWORD *)&v390.f64[1] = vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 5) = v390;
                  _Q0 = vmulq_f64(v379, v388);
                  __asm
                  {
                    FMLS            D0, D21, V4.D[1]
                    FMLS            D0, D22, V3.D[0]
                  }
                  *((_QWORD *)v373 + 15) = *(_OWORD *)&vnegq_f64(_Q0);
                  v394 = (int8x16_t)vnegq_f64(v392);
                  v394.i64[1] = vextq_s8(v394, v394, 8uLL).u64[0];
                  *(int8x16_t *)(v373 + 104) = v394;
                  v373[128] = 0;
                  *(_OWORD *)(v373 + 136) = *(_OWORD *)&object[7];
                  *((_QWORD *)v373 + 19) = *(_QWORD *)&object[23];
                  *((_OWORD *)v373 + 10) = *(_OWORD *)v2183;
                  *((_QWORD *)v373 + 22) = *(_QWORD *)&v2183[16];
                  *((_QWORD *)v373 + 23) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 24) = 0;
                  *((_QWORD *)v373 + 25) = 0;
                  *((_QWORD *)v373 + 26) = 0;
                  *((_QWORD *)v373 + 27) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 28) = 0;
                  *((_QWORD *)v373 + 29) = 0;
                  *((_QWORD *)v373 + 30) = 0;
                  *((_QWORD *)v373 + 31) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 33) = 0;
                  *((_QWORD *)v373 + 34) = 0;
                  *((_QWORD *)v373 + 32) = 0;
                  LODWORD(v2150[0]) = v254;
                  v2150[1] = v373;
                  sub_20F61BB04((char **)(v2068 + 4888), v256, (uint64_t)v2150);
                  if ((v254 & 0x100000000) != 0)
                  {
                    v395 = *(char **)(v2068 + 6256);
                    v396 = *(_QWORD *)(v2068 + 6264);
                    if ((unint64_t)v395 < v396)
                    {
                      *(_DWORD *)v395 = v254;
                      v397 = (uint64_t)(v395 + 4);
                      goto LABEL_513;
                    }
                    v398 = (char *)*v1965;
                    v399 = v395 - (_BYTE *)*v1965;
                    v400 = v399 >> 2;
                    v401 = (v399 >> 2) + 1;
                    if (v401 >> 62)
                      sub_20E867F44();
                    v402 = v396 - (_QWORD)v398;
                    if (v402 >> 1 > v401)
                      v401 = v402 >> 1;
                    if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL)
                      v403 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v403 = v401;
                    if (v403)
                    {
                      v1990.i64[0] = v395 - (_BYTE *)*v1965;
                      category = v399 >> 2;
                      if (v403 >> 62)
                        sub_20E877A38();
                      v404 = v403;
                      v405 = operator new(4 * v403);
                      v403 = v404;
                      v400 = category;
                      v399 = v1990.i64[0];
                      v406 = &v405[4 * category];
                      *v406 = v254;
                      v397 = (uint64_t)(v406 + 1);
                      v407 = v395 - v398;
                      if (v395 == v398)
                        goto LABEL_511;
LABEL_505:
                      v408 = v407 - 4;
                      if (v408 < 0x2C)
                        goto LABEL_1909;
                      if ((unint64_t)(v395 - v405 - v399) < 0x20)
                        goto LABEL_1909;
                      v409 = (v408 >> 2) + 1;
                      v410 = 4 * (v409 & 0x7FFFFFFFFFFFFFF8);
                      v411 = &v395[-v410];
                      v406 = (_DWORD *)((char *)v406 - v410);
                      v412 = &v405[4 * v400 - 16];
                      v413 = v395 - 16;
                      v414 = v409 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v415 = *(_OWORD *)v413;
                        *(v412 - 1) = *((_OWORD *)v413 - 1);
                        *v412 = v415;
                        v412 -= 2;
                        v413 -= 32;
                        v414 -= 8;
                      }
                      while (v414);
                      v395 = v411;
                      if (v409 != (v409 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1909:
                        do
                        {
                          v416 = *((_DWORD *)v395 - 1);
                          v395 -= 4;
                          *--v406 = v416;
                        }
                        while (v395 != v398);
                      }
                    }
                    else
                    {
                      v405 = 0;
                      v406 = (_DWORD *)(4 * v400);
                      *(_DWORD *)(4 * v400) = v254;
                      v397 = 4 * v400 + 4;
                      v407 = v395 - v398;
                      if (v395 != v398)
                        goto LABEL_505;
                    }
LABEL_511:
                    *(_QWORD *)(v2068 + 6248) = v406;
                    *(_QWORD *)(v2068 + 6256) = v397;
                    *(_QWORD *)(v2068 + 6264) = &v405[4 * v403];
                    if (v398)
                      operator delete(v398);
LABEL_513:
                    *(_QWORD *)(v2068 + 6256) = v397;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  v372 = 1;
                  *(_BYTE *)(v2068 + 6636) = 0;
LABEL_515:
                  v417 = *(__int128 **)(v2068 + 4984);
                  v418 = *(__int128 **)(v2068 + 4992);
                  if (v418 == v417)
                  {
                    v417 = *(__int128 **)(v2068 + 4992);
                    goto LABEL_525;
                  }
                  v419 = v418 - v417;
                  do
                  {
                    v420 = v419 >> 1;
                    v421 = (unsigned int *)&v417[v419 >> 1];
                    v423 = *v421;
                    v422 = (__int128 *)(v421 + 4);
                    v419 += ~(v419 >> 1);
                    if (v423 < v255)
                      v417 = v422;
                    else
                      v419 = v420;
                  }
                  while (v419);
                  if (v418 != v417 && *(_DWORD *)v417 == (_DWORD)v255)
                    goto LABEL_549;
LABEL_525:
                  v1982 = *(int8x16_t *)(v253 + 96);
                  v1986 = *(int8x16_t *)(v253 + 112);
                  v1988 = *(int8x16_t *)(v253 + 128);
                  v1990 = *(int8x16_t *)(v253 + 144);
                  categoryg = *(_QWORD *)(v253 + 160);
                  v1978 = v372;
                  v424 = sub_20F61C2D4(v2068 + 5008);
                  v425 = v1990;
                  v426 = v1988;
                  v427 = v1986;
                  *(_DWORD *)v424 = -1;
                  v428 = v1982;
                  *(_BYTE *)(v424 + 4) = 1;
                  *(_DWORD *)(v424 + 8) = 0;
                  *(_QWORD *)(v424 + 16) = v255;
                  *(_QWORD *)(v424 + 24) = v253;
                  v428.i64[1] = vextq_s8(v428, v428, 8uLL).u64[0];
                  v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
                  *(int8x16_t *)(v424 + 32) = v428;
                  *(int8x16_t *)(v424 + 48) = v427;
                  v426.i64[1] = vextq_s8(v426, v426, 8uLL).u64[0];
                  v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
                  *(_QWORD *)(v424 + 96) = categoryg;
                  *(int8x16_t *)(v424 + 64) = v426;
                  *(int8x16_t *)(v424 + 80) = v425;
                  *(_BYTE *)(v424 + 104) = 0;
                  *(_DWORD *)object = v255;
                  *(_QWORD *)&object[8] = v424;
                  sub_20F61C06C((char **)(v2068 + 4984), v417, (uint64_t)object);
                  if ((v255 & 0x100000000) != 0)
                  {
                    v429 = *(char **)(v2068 + 6280);
                    v430 = *(_QWORD *)(v2068 + 6288);
                    if ((unint64_t)v429 < v430)
                    {
                      *(_DWORD *)v429 = v255;
                      v431 = (uint64_t)(v429 + 4);
                      goto LABEL_547;
                    }
                    v432 = (char *)*v1964;
                    v433 = v429 - (_BYTE *)*v1964;
                    v434 = v433 >> 2;
                    v435 = (v433 >> 2) + 1;
                    if (v435 >> 62)
                      sub_20E867F44();
                    v436 = v430 - (_QWORD)v432;
                    if (v436 >> 1 > v435)
                      v435 = v436 >> 1;
                    if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL)
                      v437 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v437 = v435;
                    if (v437)
                    {
                      if (v437 >> 62)
                        sub_20E877A38();
                      v438 = v437;
                      v439 = operator new(4 * v437);
                      v437 = v438;
                      v440 = &v439[4 * v434];
                      *v440 = v255;
                      v431 = (uint64_t)(v440 + 1);
                      v441 = v429 - v432;
                      if (v429 == v432)
                        goto LABEL_545;
LABEL_539:
                      v442 = v441 - 4;
                      if (v442 < 0x2C)
                        goto LABEL_1910;
                      if ((unint64_t)(v429 - v439 - v433) < 0x20)
                        goto LABEL_1910;
                      v443 = (v442 >> 2) + 1;
                      v444 = 4 * (v443 & 0x7FFFFFFFFFFFFFF8);
                      v445 = &v429[-v444];
                      v440 = (_DWORD *)((char *)v440 - v444);
                      v446 = &v439[4 * v434 - 16];
                      v447 = v429 - 16;
                      v448 = v443 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v449 = *(_OWORD *)v447;
                        *(v446 - 1) = *((_OWORD *)v447 - 1);
                        *v446 = v449;
                        v446 -= 2;
                        v447 -= 32;
                        v448 -= 8;
                      }
                      while (v448);
                      v429 = v445;
                      if (v443 != (v443 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1910:
                        do
                        {
                          v450 = *((_DWORD *)v429 - 1);
                          v429 -= 4;
                          *--v440 = v450;
                        }
                        while (v429 != v432);
                      }
                    }
                    else
                    {
                      v439 = 0;
                      v440 = (_DWORD *)(4 * v434);
                      *(_DWORD *)(4 * v434) = v255;
                      v431 = 4 * v434 + 4;
                      v441 = v429 - v432;
                      if (v429 != v432)
                        goto LABEL_539;
                    }
LABEL_545:
                    *(_QWORD *)(v2068 + 6272) = v440;
                    *(_QWORD *)(v2068 + 6280) = v431;
                    *(_QWORD *)(v2068 + 6288) = &v439[4 * v437];
                    if (v432)
                      operator delete(v432);
LABEL_547:
                    *(_QWORD *)(v2068 + 6280) = v431;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  *(_BYTE *)(v2068 + 6636) = 0;
                  if ((v1978 & 1) == 0)
                  {
LABEL_549:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                  }
                  if (*(_BYTE *)(v2068 + 2146))
                    v451 = v243;
                  else
                    v451 = 1;
                  if ((v451 & 1) != 0)
                    goto LABEL_480;
                  v452 = *(_QWORD **)(v2068 + 8);
                  v453 = v452[8];
                  v454 = v452[39] * v453;
                  if (!v454)
                    goto LABEL_480;
                  v455 = 0;
                  v456 = 0;
                  v457 = 0;
                  v458 = 0;
                  v459 = 1;
                  v460 = __szc;
                  while (1)
                  {
                    v461 = v458 % v453;
                    if (((v458 % v453) & 0x8000000000000000) != 0)
                    {
                      v465 = (_QWORD *)v452[6];
                      do
                      {
                        v466 = (_QWORD *)*v465;
                        if (*v465)
                        {
                          do
                          {
                            v462 = v466;
                            v466 = (_QWORD *)v466[1];
                          }
                          while (v466);
                        }
                        else
                        {
                          do
                          {
                            v462 = (_QWORD *)v465[2];
                            _ZF = *v462 == (_QWORD)v465;
                            v465 = v462;
                          }
                          while (_ZF);
                        }
                        v465 = v462;
                        _CF = __CFADD__(v461++, 1);
                      }
                      while (!_CF);
                    }
                    else
                    {
                      v462 = (_QWORD *)v452[6];
                      if (v461)
                      {
                        v463 = (_QWORD *)v452[6];
                        do
                        {
                          v464 = (_QWORD *)v463[1];
                          if (v464)
                          {
                            do
                            {
                              v462 = v464;
                              v464 = (_QWORD *)*v464;
                            }
                            while (v464);
                          }
                          else
                          {
                            do
                            {
                              v462 = (_QWORD *)v463[2];
                              _ZF = *v462 == (_QWORD)v463;
                              v463 = v462;
                            }
                            while (!_ZF);
                          }
                          v463 = v462;
                          v1506 = v461-- <= 1;
                        }
                        while (!v1506);
                      }
                    }
                    v467 = v462[4];
                    v468 = v462[5];
                    if (v467 == v234 && v242 == (_DWORD)v468)
                      break;
                    v459 = 0;
                    v457 = v468;
                    v455 = v467 & 0xFFFFFFFFFFFFFF00;
                    ++v458;
                    v456 = v467;
                    if (v458 == v454)
                      goto LABEL_480;
                  }
                  if ((v459 & 1) != 0 || v234 != (v456 | v455))
                    goto LABEL_480;
                  if (v2011)
                    v470 = -1;
                  else
                    v470 = 0;
                  v473 = (uint64_t *)v452[7];
                  v471 = v452 + 7;
                  v472 = v473;
                  if (v473)
                  {
                    v474 = v471;
                    v475 = v471;
                    v476 = v472;
                    do
                    {
                      v477 = v476[4];
                      if (v477 < v234)
                      {
                        ++v476;
                      }
                      else if (v477 == v234)
                      {
                        if (*((_DWORD *)v476 + 10) < __szc)
                          ++v476;
                        else
                          v475 = v476;
                      }
                      else
                      {
                        v475 = v476;
                      }
                      v476 = (uint64_t *)*v476;
                    }
                    while (v476);
                    if (v475 == v471)
                    {
                      v479 = 0;
                    }
                    else
                    {
                      v478 = v475[4];
                      if (v234 >= v478)
                      {
                        if (v234 == v478 && *((_DWORD *)v475 + 10) > __szc)
                          v479 = 0;
                        else
                          v479 = v475[6];
                      }
                      else
                      {
                        v479 = 0;
                      }
                    }
                    do
                    {
                      v481 = v472[4];
                      if (v481 < v234)
                      {
                        ++v472;
                      }
                      else if (v481 == v234)
                      {
                        if (*((_DWORD *)v472 + 10) < v457)
                          ++v472;
                        else
                          v474 = v472;
                      }
                      else
                      {
                        v474 = v472;
                      }
                      v472 = (uint64_t *)*v472;
                    }
                    while (v472);
                    if (v474 != v471)
                    {
                      v482 = v474[4];
                      if (v234 >= v482 && (v234 != v482 || *((_DWORD *)v474 + 10) <= v457))
                      {
                        v480 = v474[6];
                        if (!v479 || !v480)
                          goto LABEL_614;
LABEL_615:
                        v484 = v1962;
                        v484.i8[0] = 0;
                        v485 = vdupq_n_s8(v470);
                        v1961 = vbslq_s8(v485, v1961, (int8x16_t)v2027);
                        v1962 = vbslq_s8(v485, v484, (int8x16_t)v2064);
                        v486 = (_QWORD *)v2068;
                        if (*(_BYTE *)(v2068 + 2148))
                        {
                          v487 = *(uint64_t **)(v2068 + 136);
                          if (v487)
                          {
                            v489 = *v487;
                            v488 = v487[1];
                            if (v488 != v489)
                            {
                              v490 = 0x80BFA02FE80BFA03 * ((v488 - v489) >> 4);
                              do
                              {
                                v491 = v490 >> 1;
                                v492 = v489 + 2736 * (v490 >> 1);
                                if (*(_QWORD *)v492 < v234 || *(_QWORD *)v492 == v234 && *(_DWORD *)(v492 + 8) < v460)
                                {
                                  v489 = v492 + 2736;
                                  v491 = v490 + ~v491;
                                }
                                v490 = v491;
                              }
                              while (v491);
                            }
                            v486 = (_QWORD *)v2068;
                            if (v489 != v488 && *(_QWORD *)v489 == v234 && *(_DWORD *)(v489 + 8) == v460)
                            {
                              v2071 = 0;
                              v2070 = 0;
                              if (*(_BYTE *)(v2068 + 1317))
                              {
                                v493 = *v1963;
                                if (!*v1963)
                                {
                                  __asm { FMOV            V0.2D, #1.0 }
                                  *(_OWORD *)&object[72] = _Q0;
                                  *(_OWORD *)&object[88] = _Q0;
                                  *(_OWORD *)&object[104] = _Q0;
                                  *(double *)object = *(double *)(v2068 + 1328) * *(double *)(v2068 + 1328);
                                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                                  *(_QWORD *)&object[16] = *(_QWORD *)object;
                                  *(_QWORD *)&object[24] = *(_QWORD *)object;
                                  *(_QWORD *)&object[32] = *(_QWORD *)object;
                                  *(_QWORD *)&object[40] = *(_QWORD *)object;
                                  *(double *)&object[48] = *(double *)(v2068 + 1320) * *(double *)(v2068 + 1320);
                                  *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
                                  *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
                                  LODWORD(v2150[0]) = 0;
                                  sub_20F61C5D4((double *)object, (unsigned int *)v2150, v2183);
                                  v495 = *(_OWORD *)v2183;
                                  *(_QWORD *)v2183 = 0;
                                  *(_QWORD *)&v2183[8] = 0;
                                  v496 = *(std::__shared_weak_count **)(v2068 + 512);
                                  *(_OWORD *)v1963 = v495;
                                  if (v496)
                                  {
                                    p_shared_owners = (unint64_t *)&v496->__shared_owners_;
                                    do
                                      v498 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v498 - 1, p_shared_owners));
                                    if (!v498)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                                      std::__shared_weak_count::__release_weak(v496);
                                    }
                                  }
                                  v499 = *(std::__shared_weak_count **)&v2183[8];
                                  if (*(_QWORD *)&v2183[8])
                                  {
                                    v500 = (unint64_t *)(*(_QWORD *)&v2183[8] + 8);
                                    do
                                      v501 = __ldaxr(v500);
                                    while (__stlxr(v501 - 1, v500));
                                    if (!v501)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                                      std::__shared_weak_count::__release_weak(v499);
                                    }
                                  }
                                  v493 = *v1963;
                                }
                                v502 = *(std::__shared_weak_count **)(v2068 + 512);
                                if (v502)
                                {
                                  v503 = (unint64_t *)&v502->__shared_owners_;
                                  do
                                    v504 = __ldxr(v503);
                                  while (__stxr(v504 + 1, v503));
                                }
                                v2070 = v493;
                                v2071 = v502;
                              }
                              else
                              {
                                v502 = 0;
                              }
                              v2012 = *(_DWORD *)(v489 + 40);
                              v505 = *(_DWORD *)(v489 + 24);
                              v2069 = v502;
                              if (v502)
                              {
                                v506 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v507 = __ldxr(v506);
                                while (__stxr(v507 + 1, v506));
                              }
                              v1991 = *(double *)(v489 + 2720);
                              categoryh = *(double *)(v489 + 2728);
                              v2150[0] = __szc;
                              v1989 = *(double *)(v489 + 1616);
                              bzero(&object[8], 0x6F8uLL);
                              *(_QWORD *)object = 0x3FF0000000000000;
                              *(_QWORD *)&object[128] = 0x3FF0000000000000;
                              *(_QWORD *)&object[256] = 0x3FF0000000000000;
                              *(_QWORD *)&object[384] = 0x3FF0000000000000;
                              *(_QWORD *)&object[512] = 0x3FF0000000000000;
                              *(_QWORD *)&object[640] = 0x3FF0000000000000;
                              *(_QWORD *)&object[768] = 0x3FF0000000000000;
                              *(_QWORD *)&object[896] = 0x3FF0000000000000;
                              *(_QWORD *)&object[1024] = 0x3FF0000000000000;
                              v1983 = *(_QWORD *)(v489 + 2112);
                              v508 = *(_OWORD *)(v489 + 2080);
                              v1928 = *(_OWORD *)(v489 + 2096);
                              v509 = *(_OWORD *)(v489 + 2064);
                              v1979 = *(_QWORD *)(v489 + 2184);
                              v1924 = *(_OWORD *)(v489 + 2168);
                              v1916 = *(_OWORD *)(v489 + 2152);
                              v510 = *(_OWORD *)(v489 + 2136);
                              v511 = *(_OWORD *)(v489 + 2120);
                              v1987 = *(_QWORD *)(v489 + 2256);
                              v1922 = *(_OWORD *)(v489 + 2240);
                              v512 = *(_OWORD *)(v489 + 2208);
                              v1914 = *(_OWORD *)(v489 + 2224);
                              v513 = *(_OWORD *)(v489 + 2192);
                              v1973 = *(_QWORD *)(v489 + 2328);
                              v514 = *(_OWORD *)(v489 + 2264);
                              v1913 = *(_OWORD *)(v489 + 2312);
                              v515 = *(_OWORD *)(v489 + 2296);
                              v516 = *(_OWORD *)(v489 + 2280);
                              v1968 = *(_QWORD *)(v489 + 2400);
                              v517 = *(_OWORD *)(v489 + 2368);
                              v1919 = *(_OWORD *)(v489 + 2384);
                              v518 = *(_OWORD *)(v489 + 2336);
                              v519 = *(_OWORD *)(v489 + 2352);
                              v521 = *(_OWORD *)(v489 + 2440);
                              v520 = *(_OWORD *)(v489 + 2456);
                              v523 = *(_OWORD *)(v489 + 2408);
                              v522 = *(_OWORD *)(v489 + 2424);
                              v524 = *(_QWORD *)(v489 + 2472);
                              v525 = *(_QWORD *)(v489 + 2544);
                              v526 = *(_OWORD *)(v489 + 2512);
                              v527 = *(_OWORD *)(v489 + 2528);
                              v528 = *(_OWORD *)(v489 + 2480);
                              v529 = *(_OWORD *)(v489 + 2496);
                              v530 = *(_QWORD *)(v489 + 2616);
                              v531 = *(_OWORD *)(v489 + 2584);
                              v532 = *(_OWORD *)(v489 + 2600);
                              v533 = *(_OWORD *)(v489 + 2552);
                              v534 = *(_OWORD *)(v489 + 2568);
                              v1917 = *(_QWORD *)(v489 + 2688);
                              v536 = *(_OWORD *)(v489 + 2656);
                              v535 = *(_OWORD *)(v489 + 2672);
                              v537 = *(_OWORD *)(v489 + 2624);
                              v538 = *(_OWORD *)(v489 + 2640);
                              *(_OWORD *)object = *(_OWORD *)(v489 + 2048);
                              *(_OWORD *)&object[16] = v509;
                              *(_OWORD *)&object[32] = v508;
                              *(_OWORD *)&object[48] = v1928;
                              *(_OWORD *)&object[120] = v511;
                              *(_OWORD *)&object[136] = v510;
                              *(_OWORD *)&object[152] = v1916;
                              *(_OWORD *)&object[168] = v1924;
                              *(_QWORD *)&object[64] = v1983;
                              *(_QWORD *)&object[184] = v1979;
                              *(_OWORD *)&object[240] = v513;
                              *(_OWORD *)&object[256] = v512;
                              *(_OWORD *)&object[272] = v1914;
                              *(_OWORD *)&object[288] = v1922;
                              *(_OWORD *)&object[360] = v514;
                              *(_OWORD *)&object[376] = v516;
                              *(_OWORD *)&object[392] = v515;
                              *(_OWORD *)&object[408] = v1913;
                              *(_QWORD *)&object[424] = v1973;
                              *(_OWORD *)&object[480] = v518;
                              *(_OWORD *)&object[496] = v519;
                              *(_OWORD *)&object[512] = v517;
                              *(_OWORD *)&object[528] = v1919;
                              *(_QWORD *)&object[544] = v1968;
                              *(_OWORD *)&object[600] = v523;
                              *(_OWORD *)&object[616] = v522;
                              *(_OWORD *)&object[632] = v521;
                              *(_OWORD *)&object[648] = v520;
                              *(_QWORD *)&object[664] = v524;
                              *(_OWORD *)&object[720] = v528;
                              *(_OWORD *)&object[736] = v529;
                              *(_OWORD *)&object[752] = v526;
                              *(_OWORD *)&object[768] = v527;
                              *(_QWORD *)&object[784] = v525;
                              *(_OWORD *)&object[840] = v533;
                              *(_OWORD *)&object[856] = v534;
                              *(_OWORD *)&object[872] = v531;
                              *(_OWORD *)&object[888] = v532;
                              *(_QWORD *)&object[904] = v530;
                              *(_OWORD *)&object[960] = v537;
                              *(_OWORD *)&object[976] = v538;
                              *(_OWORD *)&object[992] = v536;
                              *(_OWORD *)&object[1008] = v535;
                              *(_QWORD *)&object[1024] = v1917;
                              *(_QWORD *)&object[304] = v1987;
                              *(double *)&object[1152] = v1991 * v1991 * v1989;
                              *(double *)&object[1280] = *(double *)&object[1152];
                              *(double *)&object[1408] = *(double *)&object[1152];
                              *(double *)&object[1536] = categoryh * categoryh * v1989;
                              *(double *)&object[1664] = *(double *)&object[1536];
                              *(double *)&object[1792] = *(double *)&object[1536];
                              sub_20F61DEF0((float64x2_t *)object, (uint64_t)v2151);
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[256], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[384];
                              v1990 = v539;
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[496], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[624];
                              v1986 = v539;
                              v1988 = (int8x16_t)vzip2q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[736], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[864];
                              v1969 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[976], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1104];
                              v1925 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1216], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1344];
                              v1915 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1456], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1584];
                              v1910 = v540;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[272], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[400];
                              v1929 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[512], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[640];
                              v1920 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[752], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[880];
                              v1912 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[992], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[1120];
                              v1909 = v541;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1232], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1360];
                              v1907 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1472], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1600];
                              v1905 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[288], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[416];
                              v1911 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[528], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[656];
                              v1908 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[768], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[896];
                              v1904 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1008], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1136];
                              v1902 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1248], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1376];
                              v1899 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1488], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1616];
                              v1897 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[304], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[432];
                              v1906 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[544], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[672];
                              v1903 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[784], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[912];
                              v1900 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1024], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1152];
                              v1896 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1264], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1392];
                              v1893 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1504], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1632];
                              v1891 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[320], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[448];
                              v1901 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[560], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[688];
                              v1898 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[800], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[928];
                              v1894 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1040], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1168];
                              v1892 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1280], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1408];
                              v1888 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1520], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1648];
                              v1885 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[336], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[464];
                              v1895 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[576], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[704];
                              v1889 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[816], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[944];
                              v1887 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1056], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1184];
                              v1884 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1296], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1424];
                              v1882 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1536], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1664];
                              v1881 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[352], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[480];
                              v1890 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[592], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[720];
                              v1886 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[832], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[960];
                              v1883 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1072], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1200];
                              v1880 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1312], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1440];
                              v1879 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1552], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1680];
                              v1878 = v543;
                              v545 = *(_QWORD *)(v489 + 64);
                              *(_QWORD *)&v535 = *(_QWORD *)(v489 + 1616);
                              *(_OWORD *)&v2151[1816] = *(_OWORD *)(v489 + 48);
                              *(_QWORD *)&v2151[1832] = v545;
                              v546 = *(_QWORD *)(v489 + 88);
                              *(_OWORD *)&v2151[1840] = *(_OWORD *)(v489 + 72);
                              *(_QWORD *)&v2151[1856] = v546;
                              v547 = *(_OWORD *)(v489 + 112);
                              v2152[0] = *(_OWORD *)(v489 + 96);
                              v2152[1] = v547;
                              v2152[2] = *(_OWORD *)(v489 + 128);
                              v548 = *(_QWORD *)(v489 + 192);
                              v549 = *(_OWORD *)(v489 + 144);
                              v550 = *(_OWORD *)(v489 + 176);
                              v2152[4] = *(_OWORD *)(v489 + 160);
                              v2152[5] = v550;
                              v2152[3] = v549;
                              *(_QWORD *)&v2152[6] = v548;
                              *(_OWORD *)((char *)&v2152[6] + 8) = *(_OWORD *)(v489 + 200);
                              v551 = *(_QWORD *)(v489 + 264);
                              v552 = *(_OWORD *)(v489 + 216);
                              v553 = *(_OWORD *)(v489 + 248);
                              *(_OWORD *)((char *)&v2152[8] + 8) = *(_OWORD *)(v489 + 232);
                              *(_OWORD *)((char *)&v2152[9] + 8) = v553;
                              *(_OWORD *)((char *)&v2152[7] + 8) = v552;
                              *((_QWORD *)&v2152[10] + 1) = v551;
                              v2152[11] = *(_OWORD *)(v489 + 272);
                              v554 = *(_QWORD *)(v489 + 336);
                              v555 = *(_OWORD *)(v489 + 288);
                              v556 = *(_OWORD *)(v489 + 320);
                              v2152[13] = *(_OWORD *)(v489 + 304);
                              v2152[14] = v556;
                              v2152[12] = v555;
                              *(_QWORD *)&v2152[15] = v554;
                              *(_OWORD *)((char *)&v2152[15] + 8) = *(_OWORD *)(v489 + 344);
                              v557 = *(_QWORD *)(v489 + 408);
                              v558 = *(_OWORD *)(v489 + 360);
                              v559 = *(_OWORD *)(v489 + 392);
                              *(_OWORD *)((char *)&v2152[17] + 8) = *(_OWORD *)(v489 + 376);
                              *(_OWORD *)((char *)&v2152[18] + 8) = v559;
                              *(_OWORD *)((char *)&v2152[16] + 8) = v558;
                              *((_QWORD *)&v2152[19] + 1) = v557;
                              v2152[20] = *(_OWORD *)(v489 + 416);
                              v560 = *(_QWORD *)(v489 + 480);
                              v561 = *(_OWORD *)(v489 + 432);
                              v562 = *(_OWORD *)(v489 + 464);
                              v2152[22] = *(_OWORD *)(v489 + 448);
                              v2152[23] = v562;
                              v2152[21] = v561;
                              *(_QWORD *)&v2152[24] = v560;
                              *(_OWORD *)((char *)&v2152[24] + 8) = *(_OWORD *)(v489 + 488);
                              v563 = *(_QWORD *)(v489 + 552);
                              v564 = *(_OWORD *)(v489 + 504);
                              v565 = *(_OWORD *)(v489 + 536);
                              *(_OWORD *)((char *)&v2152[26] + 8) = *(_OWORD *)(v489 + 520);
                              *(_OWORD *)((char *)&v2152[27] + 8) = v565;
                              *(_OWORD *)((char *)&v2152[25] + 8) = v564;
                              *((_QWORD *)&v2152[28] + 1) = v563;
                              v2152[29] = *(_OWORD *)(v489 + 560);
                              v566 = *(_QWORD *)(v489 + 624);
                              v567 = *(_OWORD *)(v489 + 576);
                              v568 = *(_OWORD *)(v489 + 608);
                              v2152[31] = *(_OWORD *)(v489 + 592);
                              v2152[32] = v568;
                              v2152[30] = v567;
                              *(_QWORD *)&v2152[33] = v566;
                              *(_OWORD *)((char *)&v2152[33] + 8) = *(_OWORD *)(v489 + 632);
                              v569 = *(_QWORD *)(v489 + 696);
                              v570 = *(_OWORD *)(v489 + 648);
                              v571 = *(_OWORD *)(v489 + 680);
                              *(_OWORD *)((char *)&v2152[35] + 8) = *(_OWORD *)(v489 + 664);
                              *(_OWORD *)((char *)&v2152[36] + 8) = v571;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[128];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[248];
                              v1877 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[368];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[488];
                              v1876 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[608];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[728];
                              v1875 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[848];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[968];
                              v1874 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1088];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1208];
                              v1873 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1328];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1448];
                              v1872 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1568];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1688];
                              *(_OWORD *)((char *)&v2152[34] + 8) = v570;
                              *((_QWORD *)&v2152[37] + 1) = v569;
                              v1871 = v547;
                              memcpy(&v2152[38], (const void *)(v489 + 704), 0x288uLL);
                              v572 = *(_QWORD *)(v489 + 1368);
                              *(_OWORD *)((char *)&v2152[78] + 8) = *(_OWORD *)(v489 + 1352);
                              *((_QWORD *)&v2152[79] + 1) = v572;
                              v573 = *(_QWORD *)(v489 + 1392);
                              v2152[80] = *(_OWORD *)(v489 + 1376);
                              *(int64x2_t *)((char *)&v2152[86] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1216], *(int64x2_t *)&v2151[1336]);
                              *(int64x2_t *)((char *)&v2152[87] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1456], *(int64x2_t *)&v2151[1576]);
                              *(int64x2_t *)((char *)&v2152[84] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[736], *(int64x2_t *)&v2151[856]);
                              *(int64x2_t *)((char *)&v2152[85] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[976], *(int64x2_t *)&v2151[1096]);
                              *(_QWORD *)&v2152[96] = *(_QWORD *)&v2151[1704];
                              *((_QWORD *)&v2152[88] + 1) = *(_QWORD *)&v2151[1696];
                              *(int64x2_t *)((char *)&v2152[82] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[256], *(int64x2_t *)&v2151[376]);
                              *(int64x2_t *)((char *)&v2152[83] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[496], *(int64x2_t *)&v2151[616]);
                              *(int64x2_t *)((char *)&v2152[81] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              v2152[95] = v1910;
                              v2152[94] = v1915;
                              v2152[93] = v1925;
                              v2152[92] = v1969;
                              v2152[91] = v1986;
                              v2152[90] = v1990;
                              v2152[89] = v1988;
                              *(int64x2_t *)((char *)&v2152[101] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1232], *(int64x2_t *)&v2151[1352]);
                              *(int64x2_t *)((char *)&v2152[102] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1472], *(int64x2_t *)&v2151[1592]);
                              *(int64x2_t *)((char *)&v2152[99] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[752], *(int64x2_t *)&v2151[872]);
                              *(int64x2_t *)((char *)&v2152[100] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[992], *(int64x2_t *)&v2151[1112]);
                              *(_QWORD *)&v2152[111] = *(_QWORD *)&v2151[1720];
                              *((_QWORD *)&v2152[103] + 1) = *(_QWORD *)&v2151[1712];
                              *(int64x2_t *)((char *)&v2152[97] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[272], *(int64x2_t *)&v2151[392]);
                              *(int64x2_t *)((char *)&v2152[98] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[512], *(int64x2_t *)&v2151[632]);
                              *(int64x2_t *)((char *)&v2152[96] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              v2152[109] = v1907;
                              v2152[110] = v1905;
                              v2152[107] = v1912;
                              v2152[108] = v1909;
                              v2152[105] = v1929;
                              v2152[106] = v1920;
                              v2152[104] = vzip2q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              *(int64x2_t *)((char *)&v2152[116] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1248], *(int64x2_t *)&v2151[1368]);
                              *(int64x2_t *)((char *)&v2152[117] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1488], *(int64x2_t *)&v2151[1608]);
                              *(int64x2_t *)((char *)&v2152[114] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[768], *(int64x2_t *)&v2151[888]);
                              *(int64x2_t *)((char *)&v2152[115] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1008], *(int64x2_t *)&v2151[1128]);
                              *(_QWORD *)&v2152[126] = *(_QWORD *)&v2151[1736];
                              *((_QWORD *)&v2152[118] + 1) = *(_QWORD *)&v2151[1728];
                              *(int64x2_t *)((char *)&v2152[112] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[288], *(int64x2_t *)&v2151[408]);
                              *(int64x2_t *)((char *)&v2152[113] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[528], *(int64x2_t *)&v2151[648]);
                              *(int64x2_t *)((char *)&v2152[111] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              v2152[124] = v1899;
                              v2152[125] = v1897;
                              v2152[122] = v1904;
                              v2152[123] = v1902;
                              v2152[120] = v1911;
                              v2152[121] = v1908;
                              v2152[119] = vzip2q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              *(int64x2_t *)((char *)&v2152[131] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1264], *(int64x2_t *)&v2151[1384]);
                              *(int64x2_t *)((char *)&v2152[132] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1504], *(int64x2_t *)&v2151[1624]);
                              *(int64x2_t *)((char *)&v2152[129] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[784], *(int64x2_t *)&v2151[904]);
                              *(int64x2_t *)((char *)&v2152[130] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1024], *(int64x2_t *)&v2151[1144]);
                              *(_QWORD *)&v2152[141] = *(_QWORD *)&v2151[1752];
                              *((_QWORD *)&v2152[133] + 1) = *(_QWORD *)&v2151[1744];
                              *(int64x2_t *)((char *)&v2152[127] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[304], *(int64x2_t *)&v2151[424]);
                              *(int64x2_t *)((char *)&v2152[128] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[544], *(int64x2_t *)&v2151[664]);
                              *(int64x2_t *)((char *)&v2152[126] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              v2152[139] = v1893;
                              v2152[140] = v1891;
                              v2152[137] = v1900;
                              v2152[138] = v1896;
                              v2152[135] = v1906;
                              v2152[136] = v1903;
                              v2152[134] = vzip2q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              *(int64x2_t *)((char *)&v2152[146] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1280], *(int64x2_t *)&v2151[1400]);
                              *(int64x2_t *)((char *)&v2152[147] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1520], *(int64x2_t *)&v2151[1640]);
                              *(int64x2_t *)((char *)&v2152[144] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[800], *(int64x2_t *)&v2151[920]);
                              *(int64x2_t *)((char *)&v2152[145] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1040], *(int64x2_t *)&v2151[1160]);
                              *(_QWORD *)&v2152[156] = *(_QWORD *)&v2151[1768];
                              *((_QWORD *)&v2152[148] + 1) = *(_QWORD *)&v2151[1760];
                              *(int64x2_t *)((char *)&v2152[142] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[320], *(int64x2_t *)&v2151[440]);
                              *(int64x2_t *)((char *)&v2152[143] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[560], *(int64x2_t *)&v2151[680]);
                              *(int64x2_t *)((char *)&v2152[141] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              v2152[154] = v1888;
                              v2152[155] = v1885;
                              v2152[152] = v1894;
                              v2152[153] = v1892;
                              v2152[150] = v1901;
                              v2152[151] = v1898;
                              v2152[149] = vzip2q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              *(int64x2_t *)((char *)&v2152[161] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1296], *(int64x2_t *)&v2151[1416]);
                              *(int64x2_t *)((char *)&v2152[162] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1536], *(int64x2_t *)&v2151[1656]);
                              *(int64x2_t *)((char *)&v2152[159] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[816], *(int64x2_t *)&v2151[936]);
                              *(int64x2_t *)((char *)&v2152[160] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1056], *(int64x2_t *)&v2151[1176]);
                              *(_QWORD *)&v2152[171] = *(_QWORD *)&v2151[1784];
                              *((_QWORD *)&v2152[163] + 1) = *(_QWORD *)&v2151[1776];
                              *(int64x2_t *)((char *)&v2152[157] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[336], *(int64x2_t *)&v2151[456]);
                              *(int64x2_t *)((char *)&v2152[158] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[576], *(int64x2_t *)&v2151[696]);
                              *(int64x2_t *)((char *)&v2152[156] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              v2152[169] = v1882;
                              v2152[170] = v1881;
                              v2152[167] = v1887;
                              v2152[168] = v1884;
                              v2152[165] = v1895;
                              v2152[166] = v1889;
                              v2152[164] = vzip2q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              *(int64x2_t *)((char *)&v2152[176] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1312], *(int64x2_t *)&v2151[1432]);
                              *(int64x2_t *)((char *)&v2152[177] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1552], *(int64x2_t *)&v2151[1672]);
                              *(int64x2_t *)((char *)&v2152[174] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[832], *(int64x2_t *)&v2151[952]);
                              *(int64x2_t *)((char *)&v2152[175] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1072], *(int64x2_t *)&v2151[1192]);
                              *(_QWORD *)&v2152[186] = *(_QWORD *)&v2151[1800];
                              *((_QWORD *)&v2152[178] + 1) = *(_QWORD *)&v2151[1792];
                              *(int64x2_t *)((char *)&v2152[172] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[352], *(int64x2_t *)&v2151[472]);
                              *(int64x2_t *)((char *)&v2152[173] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[592], *(int64x2_t *)&v2151[712]);
                              *(int64x2_t *)((char *)&v2152[171] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              v2152[184] = v1879;
                              v2152[185] = v1878;
                              v2152[182] = v1883;
                              v2152[183] = v1880;
                              v2152[180] = v1890;
                              v2152[181] = v1886;
                              v2152[179] = vzip2q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              *((_QWORD *)&v2152[193] + 1) = *(_QWORD *)&v2151[1808];
                              *(_OWORD *)((char *)&v2152[191] + 8) = v1872;
                              *(_OWORD *)((char *)&v2152[192] + 8) = v1871;
                              *(_OWORD *)((char *)&v2152[189] + 8) = v1874;
                              *(_OWORD *)((char *)&v2152[190] + 8) = v1873;
                              *(_QWORD *)&v2152[81] = v573;
                              *(_OWORD *)((char *)&v2152[187] + 8) = v1876;
                              *(_OWORD *)((char *)&v2152[188] + 8) = v1875;
                              *(_OWORD *)((char *)&v2152[186] + 8) = v1877;
                              v574 = *(_OWORD *)(v489 + 2696);
                              *(_QWORD *)&v2152[195] = *(_QWORD *)(v489 + 2712);
                              v2152[194] = v574;
                              *((_QWORD *)&v2152[195] + 1) = v535;
                              v2072 = v502;
                              if (v502)
                              {
                                v575 = (unint64_t *)&v502->__shared_owners_;
                                v576 = v2012;
                                do
                                  v577 = __ldxr(v575);
                                while (__stxr(v577 + 1, v575));
                                v2073 = v502;
                                do
                                  v578 = __ldxr(v575);
                                while (__stxr(v578 + 1, v575));
                              }
                              else
                              {
                                v2073 = 0;
                                v576 = v2012;
                              }
                              v648 = v2150[0];
                              v649 = *(void ***)(v2068 + 5728);
                              v650 = *(void ***)(v2068 + 5736);
                              if (v649 == v650)
                              {
                                v650 = *(void ***)(v2068 + 5728);
                              }
                              else if (*(v650 - 667) >= v2150[0])
                              {
                                v651 = 0x4515E08719B71393 * (v650 - v649);
                                do
                                {
                                  v652 = v651 >> 1;
                                  v653 = &v649[667 * (v651 >> 1)];
                                  v654 = *v653;
                                  v655 = v653 + 667;
                                  v651 += ~(v651 >> 1);
                                  if (v654 < v2150[0])
                                    v649 = v655;
                                  else
                                    v651 = v652;
                                }
                                while (v651);
                                if (v649 != v650)
                                {
                                  v650 = v649;
                                  if (*v649 == v2150[0])
                                  {
                                    v656 = 0;
                                    goto LABEL_850;
                                  }
                                }
                              }
                              if (v502)
                              {
                                v657 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v658 = __ldxr(v657);
                                while (__stxr(v658 + 1, v657));
                              }
                              *(_OWORD *)v2183 = *(_OWORD *)v2150;
                              v2183[24] = v2151[8];
                              *(_QWORD *)&v2183[16] = &off_24CA00398;
                              memcpy(&v2183[32], &v2151[16], 0x708uLL);
                              *(_OWORD *)&v2183[1832] = *(_OWORD *)&v2151[1816];
                              *(_QWORD *)&v2183[1848] = *(_QWORD *)&v2151[1832];
                              *(_OWORD *)&v2183[1856] = *(_OWORD *)&v2151[1840];
                              *(_QWORD *)&v2183[1872] = *(_QWORD *)&v2151[1856];
                              *(_OWORD *)&v2183[1880] = v2152[0];
                              *(_OWORD *)&v2183[1896] = v2152[1];
                              *(_QWORD *)&v2183[1976] = *(_QWORD *)&v2152[6];
                              *(_OWORD *)&v2183[1944] = v2152[4];
                              *(_OWORD *)&v2183[1960] = v2152[5];
                              *(_OWORD *)&v2183[1912] = v2152[2];
                              *(_OWORD *)&v2183[1928] = v2152[3];
                              *(_QWORD *)&v2183[2048] = *((_QWORD *)&v2152[10] + 1);
                              *(_OWORD *)&v2183[2016] = *(_OWORD *)((char *)&v2152[8] + 8);
                              *(_OWORD *)&v2183[2032] = *(_OWORD *)((char *)&v2152[9] + 8);
                              *(_OWORD *)&v2183[1984] = *(_OWORD *)((char *)&v2152[6] + 8);
                              *(_OWORD *)&v2183[2000] = *(_OWORD *)((char *)&v2152[7] + 8);
                              *(_QWORD *)&v2183[2120] = *(_QWORD *)&v2152[15];
                              *(_OWORD *)&v2183[2088] = v2152[13];
                              *(_OWORD *)&v2183[2104] = v2152[14];
                              *(_OWORD *)&v2183[2056] = v2152[11];
                              *(_OWORD *)&v2183[2072] = v2152[12];
                              *(_QWORD *)&v2183[2192] = *((_QWORD *)&v2152[19] + 1);
                              *(_OWORD *)&v2183[2160] = *(_OWORD *)((char *)&v2152[17] + 8);
                              *(_OWORD *)&v2183[2176] = *(_OWORD *)((char *)&v2152[18] + 8);
                              *(_OWORD *)&v2183[2128] = *(_OWORD *)((char *)&v2152[15] + 8);
                              *(_OWORD *)&v2183[2144] = *(_OWORD *)((char *)&v2152[16] + 8);
                              *(_QWORD *)&v2183[2264] = *(_QWORD *)&v2152[24];
                              *(_OWORD *)&v2183[2232] = v2152[22];
                              *(_OWORD *)&v2183[2248] = v2152[23];
                              *(_OWORD *)&v2183[2200] = v2152[20];
                              *(_OWORD *)&v2183[2216] = v2152[21];
                              *(_QWORD *)&v2183[2336] = *((_QWORD *)&v2152[28] + 1);
                              *(_OWORD *)&v2183[2304] = *(_OWORD *)((char *)&v2152[26] + 8);
                              *(_OWORD *)&v2183[2320] = *(_OWORD *)((char *)&v2152[27] + 8);
                              *(_OWORD *)&v2183[2272] = *(_OWORD *)((char *)&v2152[24] + 8);
                              *(_OWORD *)&v2183[2288] = *(_OWORD *)((char *)&v2152[25] + 8);
                              *(_QWORD *)&v2183[2408] = *(_QWORD *)&v2152[33];
                              *(_OWORD *)&v2183[2376] = v2152[31];
                              *(_OWORD *)&v2183[2392] = v2152[32];
                              *(_OWORD *)&v2183[2344] = v2152[29];
                              *(_OWORD *)&v2183[2360] = v2152[30];
                              *(_QWORD *)&v2183[2480] = *((_QWORD *)&v2152[37] + 1);
                              *(_OWORD *)&v2183[2448] = *(_OWORD *)((char *)&v2152[35] + 8);
                              *(_OWORD *)&v2183[2464] = *(_OWORD *)((char *)&v2152[36] + 8);
                              *(_OWORD *)&v2183[2416] = *(_OWORD *)((char *)&v2152[33] + 8);
                              *(_OWORD *)&v2183[2432] = *(_OWORD *)((char *)&v2152[34] + 8);
                              memcpy(&v2183[2488], &v2152[38], 0x288uLL);
                              *(_OWORD *)&v2183[3136] = *(_OWORD *)((char *)&v2152[78] + 8);
                              *(_QWORD *)&v2183[3152] = *((_QWORD *)&v2152[79] + 1);
                              *(_OWORD *)&v2183[3160] = v2152[80];
                              *(_QWORD *)&v2183[3176] = *(_QWORD *)&v2152[81];
                              memcpy(&v2183[3184], (char *)&v2152[81] + 8, 0x708uLL);
                              *(_OWORD *)&v2183[4984] = v2152[194];
                              *(_OWORD *)&v2183[5000] = v2152[195];
                              memset(&v2183[5016], 0, 32);
                              *(_QWORD *)&v2183[5304] = v2070;
                              *(_QWORD *)&v2183[5312] = v502;
                              if (v502)
                              {
                                v659 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v660 = __ldxr(v659);
                                while (__stxr(v660 + 1, v659));
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                                do
                                  v661 = __ldaxr(v659);
                                while (__stlxr(v661 - 1, v659));
                                if (!v661)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              else
                              {
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                              }
                              v662 = *(char **)(v2068 + 4888);
                              v663 = *(char **)(v2068 + 4896);
                              v664 = v662;
                              if (v663 != v662)
                              {
                                v665 = (v663 - v662) >> 4;
                                v664 = *(char **)(v2068 + 4888);
                                do
                                {
                                  v666 = v665 >> 1;
                                  v667 = (unsigned int *)&v664[16 * (v665 >> 1)];
                                  v669 = *v667;
                                  v668 = (char *)(v667 + 4);
                                  v665 += ~(v665 >> 1);
                                  if (v669 < v505)
                                    v664 = v668;
                                  else
                                    v665 = v666;
                                }
                                while (v665);
                              }
                              if (v664 == v663 || *(_DWORD *)v664 != v505)
                                goto LABEL_836;
                              v670 = *((_QWORD *)v664 + 1);
                              *(_QWORD *)&v2183[5016] = v670;
                              ++*(_DWORD *)(*((_QWORD *)v664 + 1) + 8);
                              v671 = *(char **)(v2068 + 4984);
                              v672 = *(char **)(v2068 + 4992);
                              v673 = v671;
                              if (v672 != v671)
                              {
                                v674 = (v672 - v671) >> 4;
                                v673 = *(char **)(v2068 + 4984);
                                do
                                {
                                  v675 = v674 >> 1;
                                  v676 = (unsigned int *)&v673[16 * (v674 >> 1)];
                                  v678 = *v676;
                                  v677 = (char *)(v676 + 4);
                                  v674 += ~(v674 >> 1);
                                  if (v678 < v505)
                                    v673 = v677;
                                  else
                                    v674 = v675;
                                }
                                while (v674);
                              }
                              if (v673 == v672 || *(_DWORD *)v673 != v505)
                                goto LABEL_836;
                              v679 = *((_QWORD *)v673 + 1);
                              *(_QWORD *)&v2183[5024] = v679;
                              ++*(_DWORD *)(*((_QWORD *)v673 + 1) + 8);
                              if (v663 != v662)
                              {
                                v680 = (v663 - v662) >> 4;
                                do
                                {
                                  v681 = v680 >> 1;
                                  v682 = (unsigned int *)&v662[16 * (v680 >> 1)];
                                  v684 = *v682;
                                  v683 = (char *)(v682 + 4);
                                  v680 += ~(v680 >> 1);
                                  if (v684 < v576)
                                    v662 = v683;
                                  else
                                    v680 = v681;
                                }
                                while (v680);
                              }
                              if (v662 == v663 || *(_DWORD *)v662 != v576)
                                goto LABEL_836;
                              v685 = *((_QWORD *)v662 + 1);
                              *(_QWORD *)&v2183[5032] = v685;
                              ++*(_DWORD *)(*((_QWORD *)v662 + 1) + 8);
                              if (v672 != v671)
                              {
                                v686 = (v672 - v671) >> 4;
                                do
                                {
                                  v687 = v686 >> 1;
                                  v688 = (unsigned int *)&v671[16 * (v686 >> 1)];
                                  v690 = *v688;
                                  v689 = (char *)(v688 + 4);
                                  v686 += ~(v686 >> 1);
                                  if (v690 < v576)
                                    v671 = v689;
                                  else
                                    v686 = v687;
                                }
                                while (v686);
                              }
                              if (v671 == v672 || *(_DWORD *)v671 != v576)
                              {
LABEL_836:
                                if (*(_QWORD *)&v2183[5016])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5016] + 8);
                                if (*(_QWORD *)&v2183[5024])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5024] + 8);
                                if (*(_QWORD *)&v2183[5032])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5032] + 8);
                                v656 = 0;
                                if (*(_QWORD *)&v2183[5040])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5040] + 8);
                              }
                              else
                              {
                                v691 = *((_QWORD *)v671 + 1);
                                *(_QWORD *)&v2183[5040] = v691;
                                ++*(_DWORD *)(*((_QWORD *)v671 + 1) + 8);
                                if (*(_BYTE *)(v670 + 20)
                                  || *(_BYTE *)(v679 + 20)
                                  || *(_BYTE *)(v685 + 20)
                                  || *(_BYTE *)(v691 + 20))
                                {
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2183;
                                  v1984 = v2183[24];
                                  object[32] = v2183[24];
                                  *(_QWORD *)object = v648;
                                  *(_QWORD *)&object[24] = &off_24CA00398;
                                  memcpy(&object[40], &v2183[32], 0x708uLL);
                                  *(_OWORD *)&object[1840] = *(_OWORD *)&v2183[1832];
                                  *(_QWORD *)&object[1856] = *(_QWORD *)&v2183[1848];
                                  *(_OWORD *)&object[1864] = *(_OWORD *)&v2183[1856];
                                  *(_QWORD *)&object[1880] = *(_QWORD *)&v2183[1872];
                                  v2223[0] = *(_OWORD *)&v2183[1880];
                                  v2223[1] = *(_OWORD *)&v2183[1896];
                                  *(_QWORD *)&v2223[6] = *(_QWORD *)&v2183[1976];
                                  v2223[4] = *(_OWORD *)&v2183[1944];
                                  v2223[5] = *(_OWORD *)&v2183[1960];
                                  v2223[2] = *(_OWORD *)&v2183[1912];
                                  v2223[3] = *(_OWORD *)&v2183[1928];
                                  *((_QWORD *)&v2223[10] + 1) = *(_QWORD *)&v2183[2048];
                                  *(_OWORD *)((char *)&v2223[8] + 8) = *(_OWORD *)&v2183[2016];
                                  *(_OWORD *)((char *)&v2223[9] + 8) = *(_OWORD *)&v2183[2032];
                                  *(_OWORD *)((char *)&v2223[6] + 8) = *(_OWORD *)&v2183[1984];
                                  *(_OWORD *)((char *)&v2223[7] + 8) = *(_OWORD *)&v2183[2000];
                                  *(_QWORD *)&v2223[15] = *(_QWORD *)&v2183[2120];
                                  v2223[13] = *(_OWORD *)&v2183[2088];
                                  v2223[14] = *(_OWORD *)&v2183[2104];
                                  v2223[11] = *(_OWORD *)&v2183[2056];
                                  v2223[12] = *(_OWORD *)&v2183[2072];
                                  *((_QWORD *)&v2223[19] + 1) = *(_QWORD *)&v2183[2192];
                                  *(_OWORD *)((char *)&v2223[17] + 8) = *(_OWORD *)&v2183[2160];
                                  *(_OWORD *)((char *)&v2223[18] + 8) = *(_OWORD *)&v2183[2176];
                                  *(_OWORD *)((char *)&v2223[15] + 8) = *(_OWORD *)&v2183[2128];
                                  *(_OWORD *)((char *)&v2223[16] + 8) = *(_OWORD *)&v2183[2144];
                                  *(_QWORD *)&v2223[24] = *(_QWORD *)&v2183[2264];
                                  v2223[22] = *(_OWORD *)&v2183[2232];
                                  v2223[23] = *(_OWORD *)&v2183[2248];
                                  v2223[20] = *(_OWORD *)&v2183[2200];
                                  v2223[21] = *(_OWORD *)&v2183[2216];
                                  *((_QWORD *)&v2223[28] + 1) = *(_QWORD *)&v2183[2336];
                                  *(_OWORD *)((char *)&v2223[26] + 8) = *(_OWORD *)&v2183[2304];
                                  *(_OWORD *)((char *)&v2223[27] + 8) = *(_OWORD *)&v2183[2320];
                                  *(_OWORD *)((char *)&v2223[24] + 8) = *(_OWORD *)&v2183[2272];
                                  *(_OWORD *)((char *)&v2223[25] + 8) = *(_OWORD *)&v2183[2288];
                                  *(_QWORD *)&v2223[33] = *(_QWORD *)&v2183[2408];
                                  v2223[31] = *(_OWORD *)&v2183[2376];
                                  v2223[32] = *(_OWORD *)&v2183[2392];
                                  v2223[29] = *(_OWORD *)&v2183[2344];
                                  v2223[30] = *(_OWORD *)&v2183[2360];
                                  *((_QWORD *)&v2223[37] + 1) = *(_QWORD *)&v2183[2480];
                                  *(_OWORD *)((char *)&v2223[35] + 8) = *(_OWORD *)&v2183[2448];
                                  *(_OWORD *)((char *)&v2223[36] + 8) = *(_OWORD *)&v2183[2464];
                                  *(_OWORD *)((char *)&v2223[33] + 8) = *(_OWORD *)&v2183[2416];
                                  *(_OWORD *)((char *)&v2223[34] + 8) = *(_OWORD *)&v2183[2432];
                                  memcpy(&v2223[38], &v2183[2488], 0x288uLL);
                                  *(_OWORD *)((char *)&v2223[78] + 8) = *(_OWORD *)&v2183[3136];
                                  *((_QWORD *)&v2223[79] + 1) = *(_QWORD *)&v2183[3152];
                                  v2223[80] = *(_OWORD *)&v2183[3160];
                                  *(_QWORD *)&v2223[81] = *(_QWORD *)&v2183[3176];
                                  memcpy((char *)&v2223[81] + 8, &v2183[3184], 0x708uLL);
                                  v2223[194] = *(_OWORD *)&v2183[4984];
                                  v2223[195] = *(_OWORD *)&v2183[5000];
                                  v692 = *(void **)&v2183[5008];
                                  v2223[196] = *(_OWORD *)&v2183[5016];
                                  v2223[197] = *(_OWORD *)&v2183[5032];
                                  *(_QWORD *)&v2223[205] = *(_QWORD *)&v2183[5160];
                                  v5.i64[1] = *(_QWORD *)&v2183[5120];
                                  v2223[203] = *(_OWORD *)&v2183[5128];
                                  v2223[204] = *(_OWORD *)&v2183[5144];
                                  v2223[201] = *(_OWORD *)&v2183[5096];
                                  v2223[202] = *(_OWORD *)&v2183[5112];
                                  v2223[199] = *(_OWORD *)&v2183[5064];
                                  v2223[200] = *(_OWORD *)&v2183[5080];
                                  v2223[198] = *(_OWORD *)&v2183[5048];
                                  *(_OWORD *)((char *)&v2223[207] + 8) = *(_OWORD *)&v2183[5200];
                                  *(_OWORD *)((char *)&v2223[208] + 8) = *(_OWORD *)&v2183[5216];
                                  *(_OWORD *)((char *)&v2223[205] + 8) = *(_OWORD *)&v2183[5168];
                                  *(_OWORD *)((char *)&v2223[206] + 8) = *(_OWORD *)&v2183[5184];
                                  *((_QWORD *)&v2223[212] + 1) = *(_QWORD *)&v2183[5280];
                                  *(_OWORD *)((char *)&v2223[210] + 8) = *(_OWORD *)&v2183[5248];
                                  *(_OWORD *)((char *)&v2223[211] + 8) = *(_OWORD *)&v2183[5264];
                                  *(_OWORD *)((char *)&v2223[209] + 8) = *(_OWORD *)&v2183[5232];
                                  BYTE8(v2223[213]) = v2183[5296];
                                  *(_QWORD *)&v2223[213] = *(_QWORD *)&v2183[5288];
                                  v1970 = *(void **)&v2183[5304];
                                  v2223[214] = *(_OWORD *)&v2183[5304];
                                  categorya = *(std::__shared_weak_count **)&v2183[5312];
                                  *(_OWORD *)&v2183[5304] = 0uLL;
                                  v1986.i32[0] = v2183[5320];
                                  LOBYTE(v2223[215]) = v2183[5320];
                                  v693 = *(void ***)(v2068 + 5736);
                                  if (v693 == v650 || *v650 != v648)
                                  {
                                    v694 = *(char **)(v2068 + 5728);
                                    v695 = (char *)v650 - v694;
                                    v1980 = (void **)v694;
                                    v1974 = ((char *)v650 - v694) / 5336;
                                    v696 = (void **)&v694[5336 * v1974];
                                    v697 = *(_QWORD *)(v2068 + 5744);
                                    if ((unint64_t)v693 >= v697)
                                    {
                                      v952 = 0x4515E08719B71393 * (((char *)v693 - v694) >> 3) + 1;
                                      if (v952 > 0xC4827EA81BA25)
                                        sub_20E867F44();
                                      v953 = 0x4515E08719B71393 * ((uint64_t)(v697 - (_QWORD)v694) >> 3);
                                      if (2 * v953 > v952)
                                        v952 = 2 * v953;
                                      if (v953 >= 0x62413F540DD12)
                                        v954 = 0xC4827EA81BA25;
                                      else
                                        v954 = v952;
                                      *(_QWORD *)&v2149[2] = v2068 + 5744;
                                      if (v954)
                                      {
                                        if (v954 > 0xC4827EA81BA25)
                                          sub_20E877A38();
                                        v955 = (char *)operator new(5336 * v954);
                                      }
                                      else
                                      {
                                        v955 = 0;
                                      }
                                      v1137 = &v955[5336 * v1974];
                                      *(_QWORD *)&v2149[0] = v955;
                                      *((_QWORD *)&v2149[0] + 1) = v1137;
                                      *(_QWORD *)&v2149[1] = v1137;
                                      *((_QWORD *)&v2149[1] + 1) = &v955[5336 * v954];
                                      if (v1974 == v954)
                                      {
                                        if (v695 < 1)
                                        {
                                          if (v1980 == v650)
                                            v1139 = 1;
                                          else
                                            v1139 = 2 * v1974;
                                          if (v1139 > 0xC4827EA81BA25)
                                            sub_20E877A38();
                                          v1140 = (char *)operator new(5336 * v1139);
                                          v1137 = &v1140[5336 * (v1139 >> 2)];
                                          *(_QWORD *)&v2149[0] = v1140;
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                          *((_QWORD *)&v2149[1] + 1) = &v1140[5336 * v1139];
                                          if (v955)
                                            operator delete(v955);
                                        }
                                        else
                                        {
                                          v1138 = v1974 + 2;
                                          if (v1974 >= -1)
                                            v1138 = v1974 + 1;
                                          v1137 -= 5336 * (v1138 >> 1);
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                        }
                                      }
                                      *(_QWORD *)v1137 = v648;
                                      *(_OWORD *)(v1137 + 8) = *(_OWORD *)v2183;
                                      v1137[32] = object[32];
                                      *((_QWORD *)v1137 + 3) = &off_24CA00398;
                                      memcpy(v1137 + 40, &object[40], 0x708uLL);
                                      *((_QWORD *)v1137 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1137 + 115) = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1137 + 235) = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1137 + 1864) = *(_OWORD *)&object[1864];
                                      v1141 = v2223[1];
                                      *((_OWORD *)v1137 + 118) = v2223[0];
                                      *((_OWORD *)v1137 + 119) = v1141;
                                      v1142 = v2223[3];
                                      *((_OWORD *)v1137 + 120) = v2223[2];
                                      v1143 = v2223[4];
                                      v1144 = v2223[5];
                                      *((_QWORD *)v1137 + 248) = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1137 + 123) = v1144;
                                      *((_OWORD *)v1137 + 122) = v1143;
                                      *((_OWORD *)v1137 + 121) = v1142;
                                      v1145 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *(_OWORD *)(v1137 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1146 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1147 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      *((_QWORD *)v1137 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1137 + 2040) = v1147;
                                      *(_OWORD *)(v1137 + 2024) = v1146;
                                      *(_OWORD *)(v1137 + 2008) = v1145;
                                      v1148 = v2223[12];
                                      *((_OWORD *)v1137 + 129) = v2223[11];
                                      v1149 = v2223[13];
                                      v1150 = v2223[14];
                                      *((_QWORD *)v1137 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1137 + 132) = v1150;
                                      *((_OWORD *)v1137 + 131) = v1149;
                                      *((_OWORD *)v1137 + 130) = v1148;
                                      v1151 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      *(_OWORD *)(v1137 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1152 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1153 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1137 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1137 + 2184) = v1153;
                                      *(_OWORD *)(v1137 + 2168) = v1152;
                                      *(_OWORD *)(v1137 + 2152) = v1151;
                                      v1154 = v2223[21];
                                      *((_OWORD *)v1137 + 138) = v2223[20];
                                      v1155 = v2223[22];
                                      v1156 = v2223[23];
                                      *((_QWORD *)v1137 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1137 + 141) = v1156;
                                      *((_OWORD *)v1137 + 140) = v1155;
                                      *((_OWORD *)v1137 + 139) = v1154;
                                      v1157 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      *(_OWORD *)(v1137 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1158 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1159 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1137 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1137 + 2328) = v1159;
                                      *(_OWORD *)(v1137 + 2312) = v1158;
                                      *(_OWORD *)(v1137 + 2296) = v1157;
                                      v1160 = v2223[30];
                                      *((_OWORD *)v1137 + 147) = v2223[29];
                                      v1161 = v2223[31];
                                      v1162 = v2223[32];
                                      *((_QWORD *)v1137 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1137 + 150) = v1162;
                                      *((_OWORD *)v1137 + 149) = v1161;
                                      *((_OWORD *)v1137 + 148) = v1160;
                                      v1163 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      *(_OWORD *)(v1137 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      v1164 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1165 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1137 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1137 + 2472) = v1165;
                                      *(_OWORD *)(v1137 + 2456) = v1164;
                                      *(_OWORD *)(v1137 + 2440) = v1163;
                                      memcpy(v1137 + 2496, &v2223[38], 0x288uLL);
                                      *(_OWORD *)(v1137 + 3144) = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1137 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *((_OWORD *)v1137 + 198) = v2223[80];
                                      *((_QWORD *)v1137 + 398) = *(_QWORD *)&v2223[81];
                                      memcpy(v1137 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      *((_QWORD *)v1137 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1137 + 312) = v2223[194];
                                      *((_QWORD *)v1137 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1166 = v2223[197];
                                      *((_OWORD *)v1137 + 314) = v2223[196];
                                      *((_OWORD *)v1137 + 315) = v1166;
                                      v1167 = v2223[198];
                                      v1168 = v2223[199];
                                      v1169 = v2223[200];
                                      *((_OWORD *)v1137 + 319) = v2223[201];
                                      *((_OWORD *)v1137 + 318) = v1169;
                                      *((_OWORD *)v1137 + 317) = v1168;
                                      *((_OWORD *)v1137 + 316) = v1167;
                                      v1170 = v2223[202];
                                      v1171 = v2223[203];
                                      v1172 = v2223[204];
                                      *((_QWORD *)v1137 + 646) = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1137 + 322) = v1172;
                                      *((_OWORD *)v1137 + 321) = v1171;
                                      *((_OWORD *)v1137 + 320) = v1170;
                                      v1173 = *(_OWORD *)((char *)&v2223[205] + 8);
                                      v1174 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      v1175 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      *(_OWORD *)(v1137 + 5224) = *(_OWORD *)((char *)&v2223[208] + 8);
                                      *(_OWORD *)(v1137 + 5208) = v1175;
                                      *(_OWORD *)(v1137 + 5192) = v1174;
                                      *(_OWORD *)(v1137 + 5176) = v1173;
                                      v1176 = *(_OWORD *)((char *)&v2223[209] + 8);
                                      v1177 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1178 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      *((_QWORD *)v1137 + 661) = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1137 + 5272) = v1178;
                                      *(_OWORD *)(v1137 + 5256) = v1177;
                                      *(_OWORD *)(v1137 + 5240) = v1176;
                                      v1179 = *(_QWORD *)&v2223[213];
                                      v1137[5304] = BYTE8(v2223[213]);
                                      *((_QWORD *)v1137 + 662) = v1179;
                                      *((_OWORD *)v1137 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1137[5328] = v2223[215];
                                      v1971 = v1137 + 5336;
                                      *(_QWORD *)&v2149[1] = v1137 + 5336;
                                      v1180 = *(void ***)(v2068 + 5728);
                                      if (v1180 != v696)
                                      {
                                        v1181 = 0;
                                        v1182 = &v1980[667 * v1974];
                                        categoryd = v1182 - 667;
                                        v1990.i64[0] = (uint64_t)(v1182 - 1334);
                                        v1988.i64[0] = (uint64_t)(v1182 - 663);
                                        v1986.i64[0] = (uint64_t)(v1137 - 5336);
                                        do
                                        {
                                          _X26 = v1990.i64[0] + v1181;
                                          __asm { PRFM            #0, [X26] }
                                          *(_QWORD *)(v1986.i64[0] + v1181) = categoryd[v1181 / 8];
                                          v1185 = &v1137[v1181 - 5296];
                                          *((_OWORD *)v1185 - 2) = *(_OWORD *)(v1990.i64[0] + v1181 + 5344);
                                          v1137[v1181 - 5304] = *(_BYTE *)(v1988.i64[0] + v1181);
                                          *((_QWORD *)v1185 - 2) = &off_24CA00398;
                                          memcpy(v1185, (const void *)(v1990.i64[0] + v1181 + 5376), 0x708uLL);
                                          v1186 = &v1137[v1181];
                                          v1187 = (uint64_t)&v1137[v1181 - 3496];
                                          v1188 = *(_OWORD *)(v1990.i64[0] + v1181 + 7176);
                                          *(_QWORD *)(v1187 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 7192);
                                          *(_OWORD *)v1187 = v1188;
                                          v1189 = (uint64_t)&v1137[v1181 - 3472];
                                          v1190 = *(_QWORD *)(v1990.i64[0] + v1181 + 7216);
                                          *(_OWORD *)v1189 = *(_OWORD *)(v1990.i64[0] + v1181 + 7200);
                                          *(_QWORD *)(v1189 + 16) = v1190;
                                          v1191 = &v1137[v1181 - 3448];
                                          v1192 = *(_OWORD *)(v1990.i64[0] + v1181 + 7240);
                                          *(_OWORD *)v1191 = *(_OWORD *)(v1990.i64[0] + v1181 + 7224);
                                          *((_OWORD *)v1191 + 1) = v1192;
                                          v1193 = (uint64_t)&v1137[v1181 - 3416];
                                          *(_OWORD *)v1193 = *(_OWORD *)(v1990.i64[0] + v1181 + 7256);
                                          v1195 = *(_OWORD *)(v1990.i64[0] + v1181 + 7288);
                                          v1194 = *(_OWORD *)(v1990.i64[0] + v1181 + 7304);
                                          v1196 = *(_OWORD *)(v1990.i64[0] + v1181 + 7272);
                                          *(_QWORD *)(v1193 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7320);
                                          *(_OWORD *)(v1193 + 32) = v1195;
                                          *(_OWORD *)(v1193 + 48) = v1194;
                                          *(_OWORD *)(v1193 + 16) = v1196;
                                          v1197 = (uint64_t)&v1137[v1181 - 3344];
                                          v1198 = *(_OWORD *)(v1990.i64[0] + v1181 + 7360);
                                          v1199 = *(_OWORD *)(v1990.i64[0] + v1181 + 7376);
                                          v1200 = *(_OWORD *)(v1990.i64[0] + v1181 + 7344);
                                          *(_QWORD *)(v1197 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7392);
                                          *(_OWORD *)(v1197 + 32) = v1198;
                                          *(_OWORD *)(v1197 + 48) = v1199;
                                          *(_OWORD *)(v1197 + 16) = v1200;
                                          *(_OWORD *)v1197 = *(_OWORD *)(v1990.i64[0] + v1181 + 7328);
                                          v1201 = (uint64_t)&v1137[v1181 - 3272];
                                          v1202 = *(_OWORD *)(v1990.i64[0] + v1181 + 7416);
                                          v1203 = *(_OWORD *)(v1990.i64[0] + v1181 + 7432);
                                          v1204 = *(_OWORD *)(v1990.i64[0] + v1181 + 7448);
                                          *(_QWORD *)(v1201 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7464);
                                          *(_OWORD *)(v1201 + 32) = v1203;
                                          *(_OWORD *)(v1201 + 48) = v1204;
                                          *(_OWORD *)(v1201 + 16) = v1202;
                                          *(_OWORD *)v1201 = *(_OWORD *)(v1990.i64[0] + v1181 + 7400);
                                          v1205 = (uint64_t)&v1137[v1181 - 3200];
                                          v1206 = *(_OWORD *)(v1990.i64[0] + v1181 + 7488);
                                          v1207 = *(_OWORD *)(v1990.i64[0] + v1181 + 7504);
                                          v1208 = *(_OWORD *)(v1990.i64[0] + v1181 + 7520);
                                          *(_QWORD *)(v1205 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7536);
                                          *(_OWORD *)(v1205 + 32) = v1207;
                                          *(_OWORD *)(v1205 + 48) = v1208;
                                          *(_OWORD *)(v1205 + 16) = v1206;
                                          *(_OWORD *)v1205 = *(_OWORD *)(v1990.i64[0] + v1181 + 7472);
                                          v1209 = (uint64_t)&v1137[v1181 - 3128];
                                          v1210 = *(_OWORD *)(v1990.i64[0] + v1181 + 7560);
                                          v1211 = *(_OWORD *)(v1990.i64[0] + v1181 + 7576);
                                          v1212 = *(_OWORD *)(v1990.i64[0] + v1181 + 7592);
                                          *(_QWORD *)(v1209 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7608);
                                          *(_OWORD *)(v1209 + 32) = v1211;
                                          *(_OWORD *)(v1209 + 48) = v1212;
                                          *(_OWORD *)(v1209 + 16) = v1210;
                                          *(_OWORD *)v1209 = *(_OWORD *)(v1990.i64[0] + v1181 + 7544);
                                          v1213 = (uint64_t)&v1137[v1181 - 3056];
                                          v1214 = *(_OWORD *)(v1990.i64[0] + v1181 + 7632);
                                          v1215 = *(_OWORD *)(v1990.i64[0] + v1181 + 7648);
                                          v1216 = *(_OWORD *)(v1990.i64[0] + v1181 + 7664);
                                          *(_QWORD *)(v1213 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7680);
                                          *(_OWORD *)(v1213 + 32) = v1215;
                                          *(_OWORD *)(v1213 + 48) = v1216;
                                          *(_OWORD *)(v1213 + 16) = v1214;
                                          *(_OWORD *)v1213 = *(_OWORD *)(v1990.i64[0] + v1181 + 7616);
                                          v1217 = (uint64_t)&v1137[v1181 - 2984];
                                          v1218 = *(_OWORD *)(v1990.i64[0] + v1181 + 7704);
                                          v1219 = *(_OWORD *)(v1990.i64[0] + v1181 + 7720);
                                          v1220 = *(_OWORD *)(v1990.i64[0] + v1181 + 7736);
                                          *(_QWORD *)(v1217 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7752);
                                          *(_OWORD *)(v1217 + 32) = v1219;
                                          *(_OWORD *)(v1217 + 48) = v1220;
                                          *(_OWORD *)(v1217 + 16) = v1218;
                                          *(_OWORD *)v1217 = *(_OWORD *)(v1990.i64[0] + v1181 + 7688);
                                          v1221 = (uint64_t)&v1137[v1181 - 2912];
                                          v1222 = *(_OWORD *)(v1990.i64[0] + v1181 + 7776);
                                          v1223 = *(_OWORD *)(v1990.i64[0] + v1181 + 7792);
                                          v1224 = *(_OWORD *)(v1990.i64[0] + v1181 + 7808);
                                          *(_QWORD *)(v1221 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7824);
                                          *(_OWORD *)(v1221 + 32) = v1223;
                                          *(_OWORD *)(v1221 + 48) = v1224;
                                          *(_OWORD *)(v1221 + 16) = v1222;
                                          *(_OWORD *)v1221 = *(_OWORD *)(v1990.i64[0] + v1181 + 7760);
                                          memcpy(&v1137[v1181 - 2840], (const void *)(v1990.i64[0] + v1181 + 7832), 0x288uLL);
                                          v1225 = (uint64_t)&v1137[v1181 - 2192];
                                          v1226 = *(_OWORD *)(v1990.i64[0] + v1181 + 8480);
                                          *(_QWORD *)(v1225 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 8496);
                                          *(_OWORD *)v1225 = v1226;
                                          v1227 = (uint64_t)&v1137[v1181 - 2168];
                                          v1228 = *(_QWORD *)(v1990.i64[0] + v1181 + 8520);
                                          *(_OWORD *)v1227 = *(_OWORD *)(v1990.i64[0] + v1181 + 8504);
                                          *(_QWORD *)(v1227 + 16) = v1228;
                                          memcpy(&v1137[v1181 - 2144], (const void *)(v1990.i64[0] + v1181 + 8528), 0x708uLL);
                                          v1229 = (uint64_t)&v1137[v1181 - 344];
                                          v1230 = *(_OWORD *)(v1990.i64[0] + v1181 + 10328);
                                          *(_QWORD *)(v1229 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 10344);
                                          *(_OWORD *)v1229 = v1230;
                                          v1231 = &v696[v1181 / 8];
                                          __asm { PRFM            #0, [X26,#0x1398] }
                                          v1233 = &v1137[v1181 - 312];
                                          *((_QWORD *)v1186 - 40) = v696[v1181 / 8 - 40];
                                          v1234 = *(_OWORD *)(v1990.i64[0] + v1181 + 10376);
                                          v1235 = &v1137[v1181 - 280];
                                          *(_OWORD *)v1233 = *(_OWORD *)(v1990.i64[0] + v1181 + 10360);
                                          *((_OWORD *)v1233 + 1) = v1234;
                                          v1237 = *(_OWORD *)(v1990.i64[0] + v1181 + 10472);
                                          v1236 = *(_OWORD *)(v1990.i64[0] + v1181 + 10488);
                                          v1238 = *(_QWORD *)(v1990.i64[0] + v1181 + 10504);
                                          *(_OWORD *)(v1186 - 216) = *(_OWORD *)(v1990.i64[0] + v1181 + 10456);
                                          *((_QWORD *)v1186 - 21) = v1238;
                                          *(_OWORD *)(v1186 - 184) = v1236;
                                          *(_OWORD *)(v1186 - 200) = v1237;
                                          v1239 = *(_OWORD *)(v1990.i64[0] + v1181 + 10392);
                                          v1240 = *(_OWORD *)(v1990.i64[0] + v1181 + 10408);
                                          v1241 = *(_OWORD *)(v1990.i64[0] + v1181 + 10424);
                                          *(_OWORD *)(v1186 - 232) = *(_OWORD *)(v1990.i64[0] + v1181 + 10440);
                                          *(_OWORD *)(v1186 - 248) = v1241;
                                          *(_OWORD *)v1235 = v1239;
                                          *((_OWORD *)v1235 + 1) = v1240;
                                          v1242 = *(_OWORD *)(v1990.i64[0] + v1181 + 10592);
                                          v1243 = *(_OWORD *)(v1990.i64[0] + v1181 + 10608);
                                          v1244 = *(_OWORD *)(v1990.i64[0] + v1181 + 10576);
                                          *((_QWORD *)v1186 - 6) = *(_QWORD *)(v1990.i64[0] + v1181 + 10624);
                                          *((_OWORD *)v1186 - 5) = v1242;
                                          *((_OWORD *)v1186 - 4) = v1243;
                                          *((_OWORD *)v1186 - 6) = v1244;
                                          v1245 = *(_OWORD *)(v1990.i64[0] + v1181 + 10512);
                                          v1246 = *(_OWORD *)(v1990.i64[0] + v1181 + 10528);
                                          v1247 = *(_OWORD *)(v1990.i64[0] + v1181 + 10560);
                                          *((_OWORD *)v1186 - 8) = *(_OWORD *)(v1990.i64[0] + v1181 + 10544);
                                          *((_OWORD *)v1186 - 7) = v1247;
                                          *((_OWORD *)v1186 - 10) = v1245;
                                          *((_OWORD *)v1186 - 9) = v1246;
                                          v1248 = *(_QWORD *)(v1990.i64[0] + v1181 + 10632);
                                          *(v1186 - 32) = *(_BYTE *)(v1990.i64[0] + v1181 + 10640);
                                          *((_QWORD *)v1186 - 5) = v1248;
                                          __asm { PRFM            #0, [X26,#0x14C0] }
                                          *(_OWORD *)(v1186 - 24) = *(_OWORD *)&v696[v1181 / 8 - 3];
                                          *(v1231 - 3) = 0;
                                          *(v1231 - 2) = 0;
                                          *(v1186 - 8) = (char)v696[v1181 / 8 - 1];
                                          v1181 -= 5336;
                                        }
                                        while (&v696[v1181 / 8] != v1180);
                                        v1137 += v1181;
                                      }
                                      v1250 = *(void ***)(v2068 + 5736);
                                      if (v1250 != v696)
                                      {
                                        v1251 = 0;
                                        v1252 = &v1980[667 * v1974];
                                        categorye = v1252 + 666;
                                        v1253 = v1252 + 664;
                                        do
                                        {
                                          v1254 = &v1971[v1251 * 8];
                                          _X24 = &v696[v1251];
                                          __asm { PRFM            #0, [X24,#0x29B0] }
                                          *(_QWORD *)v1254 = v696[v1251];
                                          *(_OWORD *)(v1254 + 8) = *(_OWORD *)&v696[v1251 + 1];
                                          v1254[32] = (char)v696[v1251 + 4];
                                          *((_QWORD *)v1254 + 3) = &off_24CA00398;
                                          memcpy(&v1971[v1251 * 8 + 40], &v696[v1251 + 5], 0x708uLL);
                                          v1257 = *(_OWORD *)&v696[v1251 + 230];
                                          *((_QWORD *)v1254 + 232) = v696[v1251 + 232];
                                          *((_OWORD *)v1254 + 115) = v1257;
                                          v1258 = v696[v1251 + 235];
                                          *(_OWORD *)(v1254 + 1864) = *(_OWORD *)&v696[v1251 + 233];
                                          *((_QWORD *)v1254 + 235) = v1258;
                                          v1259 = *(_OWORD *)&v696[v1251 + 238];
                                          *((_OWORD *)v1254 + 118) = *(_OWORD *)&v696[v1251 + 236];
                                          *((_OWORD *)v1254 + 119) = v1259;
                                          *((_OWORD *)v1254 + 120) = *(_OWORD *)&v696[v1251 + 240];
                                          v1260 = *(_OWORD *)&v696[v1251 + 244];
                                          v1261 = *(_OWORD *)&v696[v1251 + 246];
                                          v1262 = v696[v1251 + 248];
                                          *((_OWORD *)v1254 + 121) = *(_OWORD *)&v696[v1251 + 242];
                                          *((_QWORD *)v1254 + 248) = v1262;
                                          *((_OWORD *)v1254 + 123) = v1261;
                                          *((_OWORD *)v1254 + 122) = v1260;
                                          v1264 = *(_OWORD *)&v696[v1251 + 253];
                                          v1263 = *(_OWORD *)&v696[v1251 + 255];
                                          v1265 = *(_OWORD *)&v696[v1251 + 251];
                                          *((_QWORD *)v1254 + 257) = v696[v1251 + 257];
                                          *(_OWORD *)(v1254 + 2024) = v1264;
                                          *(_OWORD *)(v1254 + 2040) = v1263;
                                          *(_OWORD *)(v1254 + 2008) = v1265;
                                          *(_OWORD *)(v1254 + 1992) = *(_OWORD *)&v696[v1251 + 249];
                                          v1266 = *(_OWORD *)&v696[v1251 + 260];
                                          v1267 = *(_OWORD *)&v696[v1251 + 262];
                                          v1268 = *(_OWORD *)&v696[v1251 + 264];
                                          *((_QWORD *)v1254 + 266) = v696[v1251 + 266];
                                          *((_OWORD *)v1254 + 132) = v1268;
                                          *((_OWORD *)v1254 + 131) = v1267;
                                          *((_OWORD *)v1254 + 130) = v1266;
                                          *((_OWORD *)v1254 + 129) = *(_OWORD *)&v696[v1251 + 258];
                                          v1269 = *(_OWORD *)&v696[v1251 + 269];
                                          v1270 = *(_OWORD *)&v696[v1251 + 271];
                                          v1271 = *(_OWORD *)&v696[v1251 + 273];
                                          *((_QWORD *)v1254 + 275) = v696[v1251 + 275];
                                          *(_OWORD *)(v1254 + 2168) = v1270;
                                          *(_OWORD *)(v1254 + 2184) = v1271;
                                          *(_OWORD *)(v1254 + 2152) = v1269;
                                          *(_OWORD *)(v1254 + 2136) = *(_OWORD *)&v696[v1251 + 267];
                                          v1272 = *(_OWORD *)&v696[v1251 + 278];
                                          v1273 = *(_OWORD *)&v696[v1251 + 280];
                                          v1274 = *(_OWORD *)&v696[v1251 + 282];
                                          *((_QWORD *)v1254 + 284) = v696[v1251 + 284];
                                          *((_OWORD *)v1254 + 141) = v1274;
                                          *((_OWORD *)v1254 + 140) = v1273;
                                          *((_OWORD *)v1254 + 139) = v1272;
                                          *((_OWORD *)v1254 + 138) = *(_OWORD *)&v696[v1251 + 276];
                                          v1275 = *(_OWORD *)&v696[v1251 + 287];
                                          v1276 = *(_OWORD *)&v696[v1251 + 289];
                                          v1277 = *(_OWORD *)&v696[v1251 + 291];
                                          *((_QWORD *)v1254 + 293) = v696[v1251 + 293];
                                          *(_OWORD *)(v1254 + 2312) = v1276;
                                          *(_OWORD *)(v1254 + 2328) = v1277;
                                          *(_OWORD *)(v1254 + 2296) = v1275;
                                          *(_OWORD *)(v1254 + 2280) = *(_OWORD *)&v696[v1251 + 285];
                                          v1278 = *(_OWORD *)&v696[v1251 + 296];
                                          v1279 = *(_OWORD *)&v696[v1251 + 298];
                                          v1280 = *(_OWORD *)&v696[v1251 + 300];
                                          *((_QWORD *)v1254 + 302) = v696[v1251 + 302];
                                          *((_OWORD *)v1254 + 150) = v1280;
                                          *((_OWORD *)v1254 + 149) = v1279;
                                          *((_OWORD *)v1254 + 148) = v1278;
                                          *((_OWORD *)v1254 + 147) = *(_OWORD *)&v696[v1251 + 294];
                                          v1281 = *(_OWORD *)&v696[v1251 + 305];
                                          v1282 = *(_OWORD *)&v696[v1251 + 307];
                                          v1283 = *(_OWORD *)&v696[v1251 + 309];
                                          *((_QWORD *)v1254 + 311) = v696[v1251 + 311];
                                          *(_OWORD *)(v1254 + 2456) = v1282;
                                          *(_OWORD *)(v1254 + 2472) = v1283;
                                          *(_OWORD *)(v1254 + 2440) = v1281;
                                          *(_OWORD *)(v1254 + 2424) = *(_OWORD *)&v696[v1251 + 303];
                                          memcpy(&v1971[v1251 * 8 + 2496], &v696[v1251 + 312], 0x288uLL);
                                          v1284 = *(_OWORD *)&v696[v1251 + 393];
                                          *((_QWORD *)v1254 + 395) = v696[v1251 + 395];
                                          *(_OWORD *)(v1254 + 3144) = v1284;
                                          v1285 = v696[v1251 + 398];
                                          *((_OWORD *)v1254 + 198) = *(_OWORD *)&v696[v1251 + 396];
                                          *((_QWORD *)v1254 + 398) = v1285;
                                          memcpy(&v1971[v1251 * 8 + 3192], &v696[v1251 + 399], 0x708uLL);
                                          v1286 = v696[v1251 + 626];
                                          *((_OWORD *)v1254 + 312) = *(_OWORD *)&v696[v1251 + 624];
                                          *((_QWORD *)v1254 + 626) = v1286;
                                          __asm { PRFM            #0, [X24,#0x3D48] }
                                          *((_QWORD *)v1254 + 627) = v696[v1251 + 627];
                                          v1288 = *(_OWORD *)&v696[v1251 + 628];
                                          *((_OWORD *)v1254 + 315) = *(_OWORD *)&v696[v1251 + 630];
                                          *((_OWORD *)v1254 + 314) = v1288;
                                          v1289 = *(_OWORD *)&v696[v1251 + 642];
                                          v1290 = *(_OWORD *)&v696[v1251 + 644];
                                          v1291 = v696[v1251 + 646];
                                          *((_OWORD *)v1254 + 320) = *(_OWORD *)&v696[v1251 + 640];
                                          *((_QWORD *)v1254 + 646) = v1291;
                                          *((_OWORD *)v1254 + 322) = v1290;
                                          *((_OWORD *)v1254 + 321) = v1289;
                                          v1292 = *(_OWORD *)&v696[v1251 + 632];
                                          v1293 = *(_OWORD *)&v696[v1251 + 634];
                                          v1294 = *(_OWORD *)&v696[v1251 + 636];
                                          *((_OWORD *)v1254 + 319) = *(_OWORD *)&v696[v1251 + 638];
                                          *((_OWORD *)v1254 + 318) = v1294;
                                          *((_OWORD *)v1254 + 317) = v1293;
                                          *((_OWORD *)v1254 + 316) = v1292;
                                          v1296 = *(_OWORD *)&v696[v1251 + 657];
                                          v1295 = *(_OWORD *)&v696[v1251 + 659];
                                          v1297 = *(_OWORD *)&v696[v1251 + 655];
                                          *((_QWORD *)v1254 + 661) = v696[v1251 + 661];
                                          *(_OWORD *)(v1254 + 5256) = v1296;
                                          *(_OWORD *)(v1254 + 5272) = v1295;
                                          *(_OWORD *)(v1254 + 5240) = v1297;
                                          v1298 = *(_OWORD *)&v696[v1251 + 647];
                                          v1299 = *(_OWORD *)&v696[v1251 + 649];
                                          v1300 = *(_OWORD *)&v696[v1251 + 653];
                                          *(_OWORD *)(v1254 + 5208) = *(_OWORD *)&v696[v1251 + 651];
                                          *(_OWORD *)(v1254 + 5224) = v1300;
                                          *(_OWORD *)(v1254 + 5176) = v1298;
                                          *(_OWORD *)(v1254 + 5192) = v1299;
                                          v1301 = v696[v1251 + 662];
                                          v1254[5304] = (char)v696[v1251 + 663];
                                          v1302 = &v1253[v1251];
                                          *((_QWORD *)v1254 + 662) = v1301;
                                          __asm { PRFM            #0, [X24,#0x3E70] }
                                          *((_OWORD *)v1254 + 332) = *(_OWORD *)&v1253[v1251];
                                          v1304 = categorye[v1251];
                                          *v1302 = 0;
                                          v1302[1] = 0;
                                          v1254[5328] = v1304;
                                          v1251 += 667;
                                        }
                                        while (&v696[v1251] != v1250);
                                        v696 = *(void ***)(v2068 + 5736);
                                        v1971 += v1251 * 8;
                                      }
                                      v1305 = *(void ***)(v2068 + 5728);
                                      *(_QWORD *)(v2068 + 5728) = v1137;
                                      *(_QWORD *)(v2068 + 5736) = v1971;
                                      v1306 = *(_QWORD *)(v2068 + 5744);
                                      *(_QWORD *)(v2068 + 5744) = *((_QWORD *)&v2149[1] + 1);
                                      *((_QWORD *)&v2149[1] + 1) = v1306;
                                      *((_QWORD *)&v2149[0] + 1) = v1305;
                                      *(_QWORD *)&v2149[0] = v1305;
                                      if (v696 != v1305)
                                      {
                                        do
                                        {
                                          *(_QWORD *)&v2149[1] = v696 - 667;
                                          v1307 = (std::__shared_weak_count *)*(v696 - 2);
                                          if (v1307)
                                          {
                                            v1308 = (unint64_t *)&v1307->__shared_owners_;
                                            do
                                              v1309 = __ldaxr(v1308);
                                            while (__stlxr(v1309 - 1, v1308));
                                            if (!v1309)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v1307->__on_zero_shared)(v1307);
                                              std::__shared_weak_count::__release_weak(v1307);
                                            }
                                          }
                                          v696 = *(void ***)&v2149[1];
                                        }
                                        while (*(void ***)&v2149[1] != v1305);
                                        v696 = *(void ***)&v2149[0];
                                      }
                                      if (v696)
                                        operator delete(v696);
                                    }
                                    else if (v696 == v693)
                                    {
                                      *v693 = v648;
                                      v1093 = &v694[5336 * v1974];
                                      *(_OWORD *)(v1093 + 8) = *(_OWORD *)&object[8];
                                      v1093[32] = object[32];
                                      *((_QWORD *)v1093 + 3) = &off_24CA00398;
                                      memcpy(v1093 + 40, &object[40], 0x708uLL);
                                      v1094 = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1093 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1093 + 115) = v1094;
                                      v1095 = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1093 + 1864) = *(_OWORD *)&object[1864];
                                      *((_QWORD *)v1093 + 235) = v1095;
                                      v1096 = v2223[1];
                                      *((_OWORD *)v1093 + 118) = v2223[0];
                                      *((_OWORD *)v1093 + 119) = v1096;
                                      *((_OWORD *)v1093 + 120) = v2223[2];
                                      v1098 = v2223[4];
                                      v1097 = v2223[5];
                                      v1099 = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1093 + 121) = v2223[3];
                                      *((_QWORD *)v1093 + 248) = v1099;
                                      *((_OWORD *)v1093 + 123) = v1097;
                                      *((_OWORD *)v1093 + 122) = v1098;
                                      v1101 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1100 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      v1102 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *((_QWORD *)v1093 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1093 + 2008) = v1102;
                                      *(_OWORD *)(v1093 + 2040) = v1100;
                                      *(_OWORD *)(v1093 + 2024) = v1101;
                                      *(_OWORD *)(v1093 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1103 = v2223[12];
                                      v1104 = v2223[13];
                                      v1105 = v2223[14];
                                      *((_QWORD *)v1093 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1093 + 132) = v1105;
                                      *((_OWORD *)v1093 + 131) = v1104;
                                      *((_OWORD *)v1093 + 130) = v1103;
                                      *((_OWORD *)v1093 + 129) = v2223[11];
                                      v1106 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      v1107 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1108 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1093 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1093 + 2184) = v1108;
                                      *(_OWORD *)(v1093 + 2168) = v1107;
                                      *(_OWORD *)(v1093 + 2152) = v1106;
                                      *(_OWORD *)(v1093 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1109 = v2223[21];
                                      v1110 = v2223[22];
                                      v1111 = v2223[23];
                                      *((_QWORD *)v1093 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1093 + 141) = v1111;
                                      *((_OWORD *)v1093 + 140) = v1110;
                                      *((_OWORD *)v1093 + 139) = v1109;
                                      *((_OWORD *)v1093 + 138) = v2223[20];
                                      v1112 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      v1113 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1114 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1093 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1093 + 2328) = v1114;
                                      *(_OWORD *)(v1093 + 2312) = v1113;
                                      *(_OWORD *)(v1093 + 2296) = v1112;
                                      *(_OWORD *)(v1093 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1115 = v2223[30];
                                      v1116 = v2223[31];
                                      v1117 = v2223[32];
                                      *((_QWORD *)v1093 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1093 + 150) = v1117;
                                      *((_OWORD *)v1093 + 149) = v1116;
                                      *((_OWORD *)v1093 + 148) = v1115;
                                      *((_OWORD *)v1093 + 147) = v2223[29];
                                      v1118 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      v1119 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1120 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1093 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1093 + 2472) = v1120;
                                      *(_OWORD *)(v1093 + 2456) = v1119;
                                      *(_OWORD *)(v1093 + 2440) = v1118;
                                      *(_OWORD *)(v1093 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      memcpy(v1093 + 2496, &v2223[38], 0x288uLL);
                                      v1121 = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1093 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *(_OWORD *)(v1093 + 3144) = v1121;
                                      v1122 = *(_QWORD *)&v2223[81];
                                      *((_OWORD *)v1093 + 198) = v2223[80];
                                      *((_QWORD *)v1093 + 398) = v1122;
                                      memcpy(v1093 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      v1123 = v2223[194];
                                      *((_QWORD *)v1093 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1093 + 312) = v1123;
                                      *((_QWORD *)v1093 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1124 = v2223[196];
                                      *((_OWORD *)v1093 + 315) = v2223[197];
                                      *((_OWORD *)v1093 + 314) = v1124;
                                      v1125 = v2223[200];
                                      v1126 = v2223[201];
                                      v1127 = v2223[199];
                                      *((_OWORD *)v1093 + 316) = v2223[198];
                                      *((_OWORD *)v1093 + 319) = v1126;
                                      *((_OWORD *)v1093 + 318) = v1125;
                                      *((_OWORD *)v1093 + 317) = v1127;
                                      v1129 = v2223[203];
                                      v1128 = v2223[204];
                                      v1130 = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1093 + 320) = v2223[202];
                                      *((_QWORD *)v1093 + 646) = v1130;
                                      *((_OWORD *)v1093 + 322) = v1128;
                                      *((_OWORD *)v1093 + 321) = v1129;
                                      v1131 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      v1132 = *(_OWORD *)((char *)&v2223[208] + 8);
                                      v1133 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      *(_OWORD *)(v1093 + 5176) = *(_OWORD *)((char *)&v2223[205] + 8);
                                      *(_OWORD *)(v1093 + 5224) = v1132;
                                      *(_OWORD *)(v1093 + 5208) = v1131;
                                      *(_OWORD *)(v1093 + 5192) = v1133;
                                      v1135 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1134 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      v1136 = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1093 + 5240) = *(_OWORD *)((char *)&v2223[209] + 8);
                                      *((_QWORD *)v1093 + 661) = v1136;
                                      *(_OWORD *)(v1093 + 5272) = v1134;
                                      *(_OWORD *)(v1093 + 5256) = v1135;
                                      LOBYTE(v1136) = BYTE8(v2223[213]);
                                      *((_QWORD *)v1093 + 662) = *(_QWORD *)&v2223[213];
                                      v1093[5304] = v1136;
                                      *((_OWORD *)v1093 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1093[5328] = v2223[215];
                                      *(_QWORD *)(v2068 + 5736) = v693 + 667;
                                    }
                                    else
                                    {
                                      v2088 = *(_OWORD *)v2183;
                                      memcpy((char *)v2149 + 7, &v2183[32], 0x708uLL);
                                      v2086 = *(_OWORD *)&v2183[1832];
                                      v2087 = *(void **)&v2183[1848];
                                      v2084 = *(_OWORD *)&v2183[1856];
                                      v2085 = *(void **)&v2183[1872];
                                      v2082 = *(_OWORD *)&v2183[1880];
                                      v2083 = *(_OWORD *)&v2183[1896];
                                      v2148 = *(void **)&v2183[1976];
                                      v2147 = *(_OWORD *)&v2183[1960];
                                      v2146 = *(_OWORD *)&v2183[1944];
                                      v2145 = *(_OWORD *)&v2183[1928];
                                      v2144 = *(_OWORD *)&v2183[1912];
                                      v2143 = *(void **)&v2183[2048];
                                      v2142 = *(_OWORD *)&v2183[2032];
                                      v2141 = *(_OWORD *)&v2183[2016];
                                      v2139 = *(_OWORD *)&v2183[1984];
                                      v2140 = *(_OWORD *)&v2183[2000];
                                      v2138 = *(void **)&v2183[2120];
                                      v2137 = *(_OWORD *)&v2183[2104];
                                      v2136 = *(_OWORD *)&v2183[2088];
                                      v2134 = *(_OWORD *)&v2183[2056];
                                      v2135 = *(_OWORD *)&v2183[2072];
                                      v2133 = *(void **)&v2183[2192];
                                      v2132 = *(_OWORD *)&v2183[2176];
                                      v2131 = *(_OWORD *)&v2183[2160];
                                      v2129 = *(_OWORD *)&v2183[2128];
                                      v2130 = *(_OWORD *)&v2183[2144];
                                      v2128 = *(void **)&v2183[2264];
                                      v2127 = *(_OWORD *)&v2183[2248];
                                      v2126 = *(_OWORD *)&v2183[2232];
                                      v2124 = *(_OWORD *)&v2183[2200];
                                      v2125 = *(_OWORD *)&v2183[2216];
                                      v2123 = *(void **)&v2183[2336];
                                      v2122 = *(_OWORD *)&v2183[2320];
                                      v2121 = *(_OWORD *)&v2183[2304];
                                      v2119 = *(_OWORD *)&v2183[2272];
                                      v2120 = *(_OWORD *)&v2183[2288];
                                      v2118 = *(void **)&v2183[2408];
                                      v2117 = *(_OWORD *)&v2183[2392];
                                      v2116 = *(_OWORD *)&v2183[2376];
                                      v2114 = *(_OWORD *)&v2183[2344];
                                      v2115 = *(_OWORD *)&v2183[2360];
                                      v2113 = *(void **)&v2183[2480];
                                      v2112 = *(_OWORD *)&v2183[2464];
                                      v2111 = *(_OWORD *)&v2183[2448];
                                      v2109 = *(_OWORD *)&v2183[2416];
                                      v2110 = *(_OWORD *)&v2183[2432];
                                      memcpy(v2108, &v2183[2488], 0x288uLL);
                                      v2080 = *(_OWORD *)&v2183[3136];
                                      v2081 = *(void **)&v2183[3152];
                                      v2078 = *(_OWORD *)&v2183[3160];
                                      v2079 = *(void **)&v2183[3176];
                                      memcpy(v2107, &v2183[3184], 0x708uLL);
                                      v2076 = *(_OWORD *)&v2183[4984];
                                      v2077 = *(void **)&v2183[5000];
                                      v1926 = v2223[196];
                                      v1923 = v2223[197];
                                      v2103 = *(_OWORD *)&v2183[5112];
                                      v2104 = *(_OWORD *)&v2183[5128];
                                      v2105 = *(_OWORD *)&v2183[5144];
                                      v2106 = *(void **)&v2183[5160];
                                      v2098 = *(_OWORD *)&v2183[5048];
                                      v2100 = *(_OWORD *)&v2183[5064];
                                      v2101 = *(_OWORD *)&v2183[5080];
                                      v2102 = *(_OWORD *)&v2183[5096];
                                      v2092 = *(_OWORD *)&v2183[5216];
                                      v2091 = *(_OWORD *)&v2183[5200];
                                      v2090 = *(_OWORD *)&v2183[5184];
                                      v2089 = *(_OWORD *)&v2183[5168];
                                      v2096 = *(void **)&v2183[5280];
                                      v2095 = *(_OWORD *)&v2183[5264];
                                      v2094 = *(_OWORD *)&v2183[5248];
                                      v2093 = *(_OWORD *)&v2183[5232];
                                      v2075 = v2183[5296];
                                      v2074 = *(void **)&v2183[5288];
                                      v698 = v693 - 667;
                                      v699 = v693;
                                      v2223[214] = 0uLL;
                                      if ((unint64_t)v693 >= 0x14D8)
                                      {
                                        v700 = 0;
                                        v701 = &v1980[667 * v1974] + v693 - (v696 + 667);
                                        v1990.i64[0] = (uint64_t)(v701 + 666);
                                        v1988.i64[0] = (uint64_t)(v701 + 664);
                                        do
                                        {
                                          v702 = &v693[v700];
                                          _X23 = &v698[v700];
                                          __asm { PRFM            #0, [X23,#0x29B0] }
                                          *v702 = v698[v700];
                                          *(_OWORD *)(v702 + 1) = *(_OWORD *)&v698[v700 + 1];
                                          *((_BYTE *)v702 + 32) = v698[v700 + 4];
                                          v702[3] = &off_24CA00398;
                                          memcpy(&v693[v700 + 5], &v698[v700 + 5], 0x708uLL);
                                          v705 = *(_OWORD *)&v698[v700 + 230];
                                          v702[232] = v698[v700 + 232];
                                          *((_OWORD *)v702 + 115) = v705;
                                          v706 = v698[v700 + 235];
                                          *(_OWORD *)(v702 + 233) = *(_OWORD *)&v698[v700 + 233];
                                          v702[235] = v706;
                                          v707 = *(_OWORD *)&v698[v700 + 238];
                                          *((_OWORD *)v702 + 118) = *(_OWORD *)&v698[v700 + 236];
                                          *((_OWORD *)v702 + 119) = v707;
                                          *((_OWORD *)v702 + 120) = *(_OWORD *)&v698[v700 + 240];
                                          v708 = *(_OWORD *)&v698[v700 + 244];
                                          v709 = *(_OWORD *)&v698[v700 + 246];
                                          v710 = v698[v700 + 248];
                                          *((_OWORD *)v702 + 121) = *(_OWORD *)&v698[v700 + 242];
                                          v702[248] = v710;
                                          *((_OWORD *)v702 + 123) = v709;
                                          *((_OWORD *)v702 + 122) = v708;
                                          v712 = *(_OWORD *)&v698[v700 + 253];
                                          v711 = *(_OWORD *)&v698[v700 + 255];
                                          v713 = *(_OWORD *)&v698[v700 + 251];
                                          v702[257] = v698[v700 + 257];
                                          *(_OWORD *)(v702 + 253) = v712;
                                          *(_OWORD *)(v702 + 255) = v711;
                                          *(_OWORD *)(v702 + 251) = v713;
                                          *(_OWORD *)(v702 + 249) = *(_OWORD *)&v698[v700 + 249];
                                          v714 = *(_OWORD *)&v698[v700 + 260];
                                          v715 = *(_OWORD *)&v698[v700 + 262];
                                          v716 = *(_OWORD *)&v698[v700 + 264];
                                          v702[266] = v698[v700 + 266];
                                          *((_OWORD *)v702 + 132) = v716;
                                          *((_OWORD *)v702 + 131) = v715;
                                          *((_OWORD *)v702 + 130) = v714;
                                          *((_OWORD *)v702 + 129) = *(_OWORD *)&v698[v700 + 258];
                                          v717 = *(_OWORD *)&v698[v700 + 269];
                                          v718 = *(_OWORD *)&v698[v700 + 271];
                                          v719 = *(_OWORD *)&v698[v700 + 273];
                                          v702[275] = v698[v700 + 275];
                                          *(_OWORD *)(v702 + 271) = v718;
                                          *(_OWORD *)(v702 + 273) = v719;
                                          *(_OWORD *)(v702 + 269) = v717;
                                          *(_OWORD *)(v702 + 267) = *(_OWORD *)&v698[v700 + 267];
                                          v720 = *(_OWORD *)&v698[v700 + 278];
                                          v721 = *(_OWORD *)&v698[v700 + 280];
                                          v722 = *(_OWORD *)&v698[v700 + 282];
                                          v702[284] = v698[v700 + 284];
                                          *((_OWORD *)v702 + 141) = v722;
                                          *((_OWORD *)v702 + 140) = v721;
                                          *((_OWORD *)v702 + 139) = v720;
                                          *((_OWORD *)v702 + 138) = *(_OWORD *)&v698[v700 + 276];
                                          v723 = *(_OWORD *)&v698[v700 + 287];
                                          v724 = *(_OWORD *)&v698[v700 + 289];
                                          v725 = *(_OWORD *)&v698[v700 + 291];
                                          v702[293] = v698[v700 + 293];
                                          *(_OWORD *)(v702 + 289) = v724;
                                          *(_OWORD *)(v702 + 291) = v725;
                                          *(_OWORD *)(v702 + 287) = v723;
                                          *(_OWORD *)(v702 + 285) = *(_OWORD *)&v698[v700 + 285];
                                          v726 = *(_OWORD *)&v698[v700 + 296];
                                          v727 = *(_OWORD *)&v698[v700 + 298];
                                          v728 = *(_OWORD *)&v698[v700 + 300];
                                          v702[302] = v698[v700 + 302];
                                          *((_OWORD *)v702 + 150) = v728;
                                          *((_OWORD *)v702 + 149) = v727;
                                          *((_OWORD *)v702 + 148) = v726;
                                          *((_OWORD *)v702 + 147) = *(_OWORD *)&v698[v700 + 294];
                                          v729 = *(_OWORD *)&v698[v700 + 305];
                                          v730 = *(_OWORD *)&v698[v700 + 307];
                                          v731 = *(_OWORD *)&v698[v700 + 309];
                                          v702[311] = v698[v700 + 311];
                                          *(_OWORD *)(v702 + 307) = v730;
                                          *(_OWORD *)(v702 + 309) = v731;
                                          *(_OWORD *)(v702 + 305) = v729;
                                          *(_OWORD *)(v702 + 303) = *(_OWORD *)&v698[v700 + 303];
                                          memcpy(&v693[v700 + 312], &v698[v700 + 312], 0x288uLL);
                                          v732 = *(_OWORD *)&v698[v700 + 393];
                                          v702[395] = v698[v700 + 395];
                                          *(_OWORD *)(v702 + 393) = v732;
                                          v733 = v698[v700 + 398];
                                          *((_OWORD *)v702 + 198) = *(_OWORD *)&v698[v700 + 396];
                                          v702[398] = v733;
                                          memcpy(&v693[v700 + 399], &v698[v700 + 399], 0x708uLL);
                                          v734 = v698[v700 + 626];
                                          *((_OWORD *)v702 + 312) = *(_OWORD *)&v698[v700 + 624];
                                          v702[626] = v734;
                                          __asm { PRFM            #0, [X23,#0x3D48] }
                                          v702[627] = v698[v700 + 627];
                                          v736 = *(_OWORD *)&v698[v700 + 628];
                                          *((_OWORD *)v702 + 315) = *(_OWORD *)&v698[v700 + 630];
                                          *((_OWORD *)v702 + 314) = v736;
                                          v737 = *(_OWORD *)&v698[v700 + 642];
                                          v738 = *(_OWORD *)&v698[v700 + 644];
                                          v739 = v698[v700 + 646];
                                          *((_OWORD *)v702 + 320) = *(_OWORD *)&v698[v700 + 640];
                                          v702[646] = v739;
                                          *((_OWORD *)v702 + 322) = v738;
                                          *((_OWORD *)v702 + 321) = v737;
                                          v740 = *(_OWORD *)&v698[v700 + 632];
                                          v741 = *(_OWORD *)&v698[v700 + 634];
                                          v742 = *(_OWORD *)&v698[v700 + 636];
                                          *((_OWORD *)v702 + 319) = *(_OWORD *)&v698[v700 + 638];
                                          *((_OWORD *)v702 + 318) = v742;
                                          *((_OWORD *)v702 + 317) = v741;
                                          *((_OWORD *)v702 + 316) = v740;
                                          v744 = *(_OWORD *)&v698[v700 + 657];
                                          v743 = *(_OWORD *)&v698[v700 + 659];
                                          v745 = *(_OWORD *)&v698[v700 + 655];
                                          v702[661] = v698[v700 + 661];
                                          *(_OWORD *)(v702 + 657) = v744;
                                          *(_OWORD *)(v702 + 659) = v743;
                                          *(_OWORD *)(v702 + 655) = v745;
                                          v746 = *(_OWORD *)&v698[v700 + 647];
                                          v747 = *(_OWORD *)&v698[v700 + 649];
                                          v748 = *(_OWORD *)&v698[v700 + 653];
                                          *(_OWORD *)(v702 + 651) = *(_OWORD *)&v698[v700 + 651];
                                          *(_OWORD *)(v702 + 653) = v748;
                                          *(_OWORD *)(v702 + 647) = v746;
                                          *(_OWORD *)(v702 + 649) = v747;
                                          v749 = v698[v700 + 662];
                                          *((_BYTE *)v702 + 5304) = v698[v700 + 663];
                                          v750 = (_QWORD *)(v1988.i64[0] + v700 * 8);
                                          v702[662] = v749;
                                          __asm { PRFM            #0, [X23,#0x3E70] }
                                          *((_OWORD *)v702 + 332) = *(_OWORD *)(v1988.i64[0] + v700 * 8);
                                          v752 = *(_BYTE *)(v1990.i64[0] + v700 * 8);
                                          *v750 = 0;
                                          v750[1] = 0;
                                          *((_BYTE *)v702 + 5328) = v752;
                                          v700 += 667;
                                        }
                                        while (&v698[v700] < v693);
                                        v699 = &v693[v700];
                                      }
                                      *(_QWORD *)(v2068 + 5736) = v699;
                                      if (v693 != v696 + 667)
                                      {
                                        v753 = (uint64_t)(v693 - 667);
                                        v754 = 8 * (v693 - (v696 + 667));
                                        do
                                        {
                                          v753 = sub_20F5B6B10(v753, (uint64_t)&v1980[667 * v1974 - 667] + v754) - 5336;
                                          v754 -= 5336;
                                        }
                                        while (v754);
                                      }
                                      *v696 = v648;
                                      v755 = &v1980[667 * v1974];
                                      *(_OWORD *)(v755 + 1) = v2088;
                                      *((_BYTE *)v755 + 32) = v1984;
                                      memcpy(v755 + 5, (char *)v2149 + 7, 0x708uLL);
                                      *((_OWORD *)v755 + 115) = v2086;
                                      *(_OWORD *)(v755 + 233) = v2084;
                                      *((_OWORD *)v755 + 118) = v2082;
                                      *((_OWORD *)v755 + 119) = v2083;
                                      v756 = v2145;
                                      *((_OWORD *)v755 + 120) = v2144;
                                      v757 = v2146;
                                      *((_OWORD *)v755 + 123) = v2147;
                                      *((_OWORD *)v755 + 122) = v757;
                                      *((_OWORD *)v755 + 121) = v756;
                                      v758 = v2140;
                                      *(_OWORD *)(v755 + 249) = v2139;
                                      v759 = v2141;
                                      *(_OWORD *)(v755 + 255) = v2142;
                                      *(_OWORD *)(v755 + 253) = v759;
                                      *(_OWORD *)(v755 + 251) = v758;
                                      v760 = v2137;
                                      *((_OWORD *)v755 + 131) = v2136;
                                      *((_OWORD *)v755 + 132) = v760;
                                      v761 = v2135;
                                      *((_OWORD *)v755 + 129) = v2134;
                                      *((_OWORD *)v755 + 130) = v761;
                                      v762 = v2130;
                                      *(_OWORD *)(v755 + 267) = v2129;
                                      v763 = v2131;
                                      *(_OWORD *)(v755 + 273) = v2132;
                                      *(_OWORD *)(v755 + 271) = v763;
                                      *(_OWORD *)(v755 + 269) = v762;
                                      v764 = v2127;
                                      *((_OWORD *)v755 + 140) = v2126;
                                      *((_OWORD *)v755 + 141) = v764;
                                      v765 = v2125;
                                      *((_OWORD *)v755 + 138) = v2124;
                                      *((_OWORD *)v755 + 139) = v765;
                                      v766 = v2120;
                                      *(_OWORD *)(v755 + 285) = v2119;
                                      v767 = v2121;
                                      *(_OWORD *)(v755 + 291) = v2122;
                                      *(_OWORD *)(v755 + 289) = v767;
                                      *(_OWORD *)(v755 + 287) = v766;
                                      v768 = v2117;
                                      *((_OWORD *)v755 + 149) = v2116;
                                      *((_OWORD *)v755 + 150) = v768;
                                      v769 = v2115;
                                      *((_OWORD *)v755 + 147) = v2114;
                                      *((_OWORD *)v755 + 148) = v769;
                                      v770 = v2110;
                                      *(_OWORD *)(v755 + 303) = v2109;
                                      v771 = v2111;
                                      *(_OWORD *)(v755 + 309) = v2112;
                                      *(_OWORD *)(v755 + 307) = v771;
                                      v755[232] = v2087;
                                      v755[235] = v2085;
                                      v755[248] = v2148;
                                      v755[257] = v2143;
                                      v755[266] = v2138;
                                      v755[275] = v2133;
                                      v755[284] = v2128;
                                      v755[293] = v2123;
                                      v755[302] = v2118;
                                      v755[311] = v2113;
                                      *(_OWORD *)(v755 + 305) = v770;
                                      memcpy(v755 + 312, v2108, 0x288uLL);
                                      *(_OWORD *)(v755 + 393) = v2080;
                                      v755[395] = v2081;
                                      *((_OWORD *)v755 + 198) = v2078;
                                      v755[398] = v2079;
                                      memcpy(v755 + 399, v2107, 0x708uLL);
                                      *((_OWORD *)v755 + 312) = v2076;
                                      v755[626] = v2077;
                                      v755[627] = v692;
                                      *((_OWORD *)v755 + 314) = v1926;
                                      *((_OWORD *)v755 + 315) = v1923;
                                      *((_OWORD *)v755 + 320) = v2103;
                                      *((_OWORD *)v755 + 321) = v2104;
                                      *((_OWORD *)v755 + 322) = v2105;
                                      v755[646] = v2106;
                                      *((_OWORD *)v755 + 316) = v2098;
                                      *((_OWORD *)v755 + 317) = v2100;
                                      *((_OWORD *)v755 + 318) = v2101;
                                      *((_OWORD *)v755 + 319) = v2102;
                                      v755[661] = v2096;
                                      *(_OWORD *)(v755 + 659) = v2095;
                                      *(_OWORD *)(v755 + 657) = v2094;
                                      *(_OWORD *)(v755 + 655) = v2093;
                                      *(_OWORD *)(v755 + 653) = v2092;
                                      *(_OWORD *)(v755 + 651) = v2091;
                                      *(_OWORD *)(v755 + 649) = v2090;
                                      *(_OWORD *)(v755 + 647) = v2089;
                                      *((_BYTE *)v755 + 5304) = v2075;
                                      v755[662] = v2074;
                                      v755[664] = v1970;
                                      v772 = (std::__shared_weak_count *)v755[665];
                                      v755[665] = categorya;
                                      if (v772)
                                      {
                                        v773 = (unint64_t *)&v772->__shared_owners_;
                                        do
                                          v774 = __ldaxr(v773);
                                        while (__stlxr(v774 - 1, v773));
                                        if (!v774)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                                          std::__shared_weak_count::__release_weak(v772);
                                        }
                                      }
                                      LOBYTE(v1980[667 * v1974 + 666]) = v1986.i8[0];
                                    }
                                    categorya = (std::__shared_weak_count *)*((_QWORD *)&v2223[214] + 1);
                                  }
                                  if (categorya)
                                  {
                                    v1310 = (unint64_t *)&categorya->__shared_owners_;
                                    do
                                      v1311 = __ldaxr(v1310);
                                    while (__stlxr(v1311 - 1, v1310));
                                    if (!v1311)
                                    {
                                      ((void (*)(std::__shared_weak_count *))categorya->__on_zero_shared)(categorya);
                                      std::__shared_weak_count::__release_weak(categorya);
                                    }
                                  }
                                  v2019[2] = 0;
                                  *v2019 = 0;
                                  *(int64x2_t *)(v2068 + 5840) = vaddq_s64(*(int64x2_t *)(v2068 + 5840), (int64x2_t)xmmword_2103B4900);
                                  v656 = 1;
                                }
                                else
                                {
                                  v656 = 0;
                                  --*(_DWORD *)(v670 + 8);
                                  --*(_DWORD *)(v679 + 8);
                                  *(_OWORD *)&v2183[5016] = 0u;
                                  --*(_DWORD *)(v685 + 8);
                                  --*(_DWORD *)(v691 + 8);
                                  *(_OWORD *)&v2183[5032] = 0u;
                                }
                              }
                              v775 = *(std::__shared_weak_count **)&v2183[5312];
                              if (*(_QWORD *)&v2183[5312])
                              {
                                v776 = (unint64_t *)(*(_QWORD *)&v2183[5312] + 8);
                                do
                                  v777 = __ldaxr(v776);
                                while (__stlxr(v777 - 1, v776));
                                if (!v777)
                                {
                                  ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                                  std::__shared_weak_count::__release_weak(v775);
                                }
                              }
                              v502 = v2073;
LABEL_850:
                              if (v502)
                              {
                                v778 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v779 = __ldaxr(v778);
                                while (__stlxr(v779 - 1, v778));
                                if (!v779)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              if (v656)
                              {
                                *(_BYTE *)(v2068 + 6636) = 0;
                                *v2001 = 0;
                              }
                              if (v2072)
                              {
                                v780 = (unint64_t *)&v2072->__shared_owners_;
                                do
                                  v781 = __ldaxr(v780);
                                while (__stlxr(v781 - 1, v780));
                                if (!v781)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2072->__on_zero_shared)(v2072);
                                  std::__shared_weak_count::__release_weak(v2072);
                                }
                              }
                              if (!v656)
                              {
                                sub_20F4AD5FC(v2107);
                                if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 4)
                                {
                                  v782 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
                                  v783 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
                                  v784 = v783;
                                  if (v782 || v783 != 0)
                                  {
                                    *(_QWORD *)v2183 = v2107;
                                    *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
                                    *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
                                    *(_DWORD *)&v2183[24] = 4;
                                    *(_QWORD *)&v2183[32] = "unknown file";
                                    *(_DWORD *)&v2183[40] = 184;
                                    *(_QWORD *)&v2183[48] = "unknown function";
                                    *(_QWORD *)&v2183[56] = 0;
                                    *(_QWORD *)&v2183[64] = 0;
                                    v786 = **(_QWORD **)v2183;
                                    if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
                                    {
                                      v787 = *(_QWORD *)(v786 + 24);
                                      categoryb = *(const char **)(v786 + 16);
                                    }
                                    else
                                    {
                                      v787 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
                                      categoryb = (const char *)(**(_QWORD **)v2183 + 16);
                                    }
                                    v1990.i64[0] = **(_QWORD **)v2183 + 16;
                                    v788 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                    if ((v788 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                    {
                                      sub_20E9E46F8((uint64_t)v2150);
                                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                                      if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                                        operator delete(v2150[0]);
                                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                      __cxa_guard_release(&qword_254A4A510);
                                    }
                                    if (byte_254A4A4F8[23] >= 0)
                                      v789 = byte_254A4A4F8;
                                    else
                                      v789 = *(const char **)byte_254A4A4F8;
                                    if (byte_254A4A4F8[23] >= 0)
                                      v790 = byte_254A4A4F8[23];
                                    else
                                      v790 = *(_QWORD *)&byte_254A4A4F8[8];
                                    *(_QWORD *)object = os_log_create(v789, categoryb);
                                    if (v790 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v790 >= 0x17)
                                    {
                                      v792 = v784;
                                      v793 = (v790 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v790 | 7) != 0x17)
                                        v793 = v790 | 7;
                                      v794 = v793 + 1;
                                      v791 = operator new(v793 + 1);
                                      *(_QWORD *)&object[24] = v794 | 0x8000000000000000;
                                      *(_QWORD *)&object[8] = v791;
                                      *(_QWORD *)&object[16] = v790;
                                      v784 = v792;
                                    }
                                    else
                                    {
                                      object[31] = v790;
                                      v791 = &object[8];
                                      if (!v790)
                                      {
LABEL_886:
                                        v791[v790] = 0;
                                        object[32] = 1;
                                        if (v787 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        if (v787 >= 0x17)
                                        {
                                          v796 = (v787 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v787 | 7) != 0x17)
                                            v796 = v787 | 7;
                                          v797 = v796 + 1;
                                          v795 = operator new(v796 + 1);
                                          *(_QWORD *)&object[56] = v797 | 0x8000000000000000;
                                          *(_QWORD *)&object[40] = v795;
                                          *(_QWORD *)&object[48] = v787;
                                        }
                                        else
                                        {
                                          object[63] = v787;
                                          v795 = &object[40];
                                          if (!v787)
                                          {
LABEL_894:
                                            v795[v787] = 0;
                                            object[64] = 1;
                                            v798 = *(NSObject **)object;
                                            if ((object[63] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[40]);
                                            if (object[32] && (object[31] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[8]);
                                            if (*(_QWORD *)object)
                                              os_release(*(void **)object);
                                            if (v784 && *(_QWORD *)(v784 + 24))
                                            {
                                              v799 = _os_log_pack_size();
                                              v800 = (std::__shared_weak_count_vtbl *)operator new(v799, (std::align_val_t)8uLL);
                                              v801 = (std::__shared_weak_count *)operator new();
                                              v802 = v2012;
                                              v803 = v801;
                                              v801->__shared_owners_ = 0;
                                              v804 = (unint64_t *)&v801->__shared_owners_;
                                              v801->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                              v801->__shared_weak_owners_ = 0;
                                              v801[1].__vftable = v800;
                                              *(_QWORD *)object = v800;
                                              *(_QWORD *)&object[8] = v800;
                                              *(_QWORD *)&object[16] = v801;
                                              do
                                                v805 = __ldxr(v804);
                                              while (__stxr(v805 + 1, v804));
                                              memset(&object[24], 0, 24);
                                              do
                                                v806 = __ldaxr(v804);
                                              while (__stlxr(v806 - 1, v804));
                                              if (!v806)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                                std::__shared_weak_count::__release_weak(v803);
                                              }
                                              v807 = *(_QWORD *)object;
                                              v808 = _os_log_pack_fill();
                                              *(_DWORD *)v808 = 134218496;
                                              *(_QWORD *)(v808 + 4) = __szc;
                                              *(_WORD *)(v808 + 12) = 1024;
                                              *(_DWORD *)(v808 + 14) = v505;
                                              *(_WORD *)(v808 + 18) = 1024;
                                              *(_DWORD *)(v808 + 20) = v2012;
                                              v809 = (char *)operator new();
                                              v810 = *(unsigned __int8 *)(v786 + 39);
                                              v811 = v1990.i64[0];
                                              if ((v810 & 0x80u) != 0)
                                              {
                                                v811 = *(_QWORD *)(v786 + 16);
                                                v810 = *(_QWORD *)(v786 + 24);
                                              }
                                              *(_QWORD *)v809 = v807;
                                              *(_OWORD *)(v809 + 8) = *(_OWORD *)&object[8];
                                              *(_QWORD *)&object[8] = 0;
                                              *(_QWORD *)&object[16] = 0;
                                              *(_OWORD *)(v809 + 24) = *(_OWORD *)&object[24];
                                              *(_QWORD *)&object[24] = 0;
                                              *(_QWORD *)&object[32] = 0;
                                              *((_QWORD *)v809 + 5) = v811;
                                              *((_QWORD *)v809 + 6) = v810;
                                              v809[56] = 16;
                                              *(_QWORD *)&v2149[0] = 0;
                                              v2150[0] = v809;
                                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v784 + 24) + 40))(*(_QWORD *)(v784 + 24), v2150);
                                              v812 = v2150[0];
                                              v2150[0] = 0;
                                              if (v812)
                                              {
                                                v813 = (std::__shared_weak_count *)*((_QWORD *)v812 + 4);
                                                if (v813)
                                                {
                                                  v814 = (unint64_t *)&v813->__shared_owners_;
                                                  do
                                                    v815 = __ldaxr(v814);
                                                  while (__stlxr(v815 - 1, v814));
                                                  if (!v815)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
                                                    std::__shared_weak_count::__release_weak(v813);
                                                  }
                                                }
                                                v816 = (std::__shared_weak_count *)*((_QWORD *)v812 + 2);
                                                if (v816)
                                                {
                                                  v817 = (unint64_t *)&v816->__shared_owners_;
                                                  do
                                                    v818 = __ldaxr(v817);
                                                  while (__stlxr(v818 - 1, v817));
                                                  if (!v818)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v816->__on_zero_shared)(v816);
                                                    std::__shared_weak_count::__release_weak(v816);
                                                  }
                                                }
                                                MEMORY[0x212BC6398](v812, 0x10F0C40B62ED6C6);
                                                v819 = *(_QWORD *)&v2149[0];
                                                *(_QWORD *)&v2149[0] = 0;
                                                v802 = v2012;
                                                if (v819)
                                                {
                                                  v820 = *(std::__shared_weak_count **)(v819 + 32);
                                                  if (v820)
                                                  {
                                                    v821 = (unint64_t *)&v820->__shared_owners_;
                                                    do
                                                      v822 = __ldaxr(v821);
                                                    while (__stlxr(v822 - 1, v821));
                                                    if (!v822)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
                                                      std::__shared_weak_count::__release_weak(v820);
                                                    }
                                                  }
                                                  v823 = *(std::__shared_weak_count **)(v819 + 16);
                                                  if (v823)
                                                  {
                                                    v824 = (unint64_t *)&v823->__shared_owners_;
                                                    do
                                                      v825 = __ldaxr(v824);
                                                    while (__stlxr(v825 - 1, v824));
                                                    if (!v825)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                                                      std::__shared_weak_count::__release_weak(v823);
                                                    }
                                                  }
                                                  MEMORY[0x212BC6398](v819, 0x10F0C40B62ED6C6);
                                                  v802 = v2012;
                                                }
                                              }
                                              v826 = *(std::__shared_weak_count **)&object[32];
                                              if (*(_QWORD *)&object[32])
                                              {
                                                v827 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                                do
                                                  v828 = __ldaxr(v827);
                                                while (__stlxr(v828 - 1, v827));
                                                if (!v828)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                                                  std::__shared_weak_count::__release_weak(v826);
                                                }
                                              }
                                              v829 = *(std::__shared_weak_count **)&object[16];
                                              if (*(_QWORD *)&object[16])
                                              {
                                                v830 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                                do
                                                  v831 = __ldaxr(v830);
                                                while (__stlxr(v831 - 1, v830));
                                                if (!v831)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
                                                  std::__shared_weak_count::__release_weak(v829);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              os_log_type_enabled(v798, OS_LOG_TYPE_ERROR);
                                              *(_DWORD *)object = 134218496;
                                              *(_QWORD *)&object[4] = __szc;
                                              *(_WORD *)&object[12] = 1024;
                                              *(_DWORD *)&object[14] = v505;
                                              *(_WORD *)&object[18] = 1024;
                                              v802 = v2012;
                                              *(_DWORD *)&object[20] = v2012;
                                              v832 = (void *)_os_log_send_and_compose_impl();
                                              if (v832)
                                                free(v832);
                                            }
                                            if (v782)
                                            {
                                              sub_20E8C003C((uint64_t)v2183, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", (size_t)__szc, v505, v802);
                                              sub_20E863570((uint64_t)v2183);
                                            }
                                            sub_20E863570((uint64_t)v2183);
                                            v833 = *(std::__shared_weak_count **)&v2183[64];
                                            if (*(_QWORD *)&v2183[64])
                                            {
                                              v834 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                                              do
                                                v835 = __ldaxr(v834);
                                              while (__stlxr(v835 - 1, v834));
                                              if (!v835)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
                                                std::__shared_weak_count::__release_weak(v833);
                                              }
                                            }
                                            goto LABEL_953;
                                          }
                                        }
                                        memmove(v795, categoryb, v787);
                                        goto LABEL_894;
                                      }
                                    }
                                    memmove(v791, v789, v790);
                                    goto LABEL_886;
                                  }
                                }
                              }
LABEL_953:
                              if (v2069)
                              {
                                v836 = (unint64_t *)&v2069->__shared_owners_;
                                do
                                  v837 = __ldaxr(v836);
                                while (__stlxr(v837 - 1, v836));
                                if (!v837)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
                                  std::__shared_weak_count::__release_weak(v2069);
                                }
                              }
                              v645 = v2071;
                              if (!v2071)
                                goto LABEL_480;
                              v838 = (unint64_t *)&v2071->__shared_owners_;
                              do
                                v647 = __ldaxr(v838);
                              while (__stlxr(v647 - 1, v838));
LABEL_753:
                              if (!v647)
                              {
                                ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                                std::__shared_weak_count::__release_weak(v645);
                              }
                              goto LABEL_480;
                            }
                          }
                        }
                        v579 = *(_QWORD *)(v479 + 824);
                        v580 = *(_QWORD *)(v480 + 824);
                        v486[728] = v486[15];
                        v486[729] = v2031;
                        sub_20F61F108(v2068 + 480, v2107);
                        if ((v2011 & 1) != 0)
                        {
                          v582 = 0;
                          v583 = v1960;
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                          {
LABEL_659:
                            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
                            {
                              abort();
                            }
                            v585 = *(_QWORD *)&v2107[0];
                          }
                        }
                        else
                        {
                          v582 = v1962.i8[0];
                          v583 = v1962.u8[15];
                          v1959 = v1962.i8[14];
                          v1958 = v1962.i8[13];
                          v1957 = v1962.i8[12];
                          v1956 = v1962.i8[11];
                          v1955 = v1962.i8[10];
                          v1954 = v1962.i8[9];
                          v1953 = v1962.i8[8];
                          v1952 = v1962.i8[7];
                          v1951 = v1962.i8[6];
                          v1950 = v1962.i8[5];
                          v1949 = v1962.i8[4];
                          v1948 = v1962.i8[3];
                          v1947 = v1962.i8[2];
                          v1946 = v1962.i8[1];
                          v1945 = v1961.i8[15];
                          v1944 = v1961.i8[14];
                          v1943 = v1961.i8[13];
                          v1942 = v1961.i8[12];
                          v1941 = v1961.i8[11];
                          v1940 = v1961.i8[10];
                          v1939 = v1961.i8[9];
                          v1938 = v1961.i8[8];
                          v1937 = v1961.i8[7];
                          v1936 = v1961.i8[6];
                          v1935 = v1961.i8[5];
                          v1934 = v1961.i8[4];
                          v1933 = v1961.i8[3];
                          v1932 = v1961.i8[2];
                          v1931 = v1961.i8[1];
                          v1930 = v1961.i8[0];
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                            goto LABEL_659;
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                        *(_QWORD *)&v2108[0] = v585;
                        *((_QWORD *)&v2108[0] + 1) = *((_QWORD *)&v2107[0] + 1);
                        v2107[0] = 0uLL;
                        v2149[0] = __PAIR128__(*((unint64_t *)&v2108[0] + 1), v585);
                        if (*((_QWORD *)&v2108[0] + 1))
                        {
                          v587 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v588 = __ldxr(v587);
                          while (__stxr(v588 + 1, v587));
                        }
                        v589 = *(char **)(v2068 + 5704);
                        v590 = *(char **)(v2068 + 5712);
                        v1960 = v583;
                        if (v589 == v590)
                        {
                          v590 = *(char **)(v2068 + 5704);
                        }
                        else if (*((_QWORD *)v590 - 1002) >= (unint64_t)__szc)
                        {
                          v591 = 0x2F028E0D4911E25DLL * ((v590 - v589) >> 4);
                          do
                          {
                            v592 = v591 >> 1;
                            v593 = (unint64_t *)&v589[8016 * (v591 >> 1)];
                            v594 = *v593;
                            v595 = (char *)(v593 + 1002);
                            v591 += ~(v591 >> 1);
                            if (v594 < (unint64_t)__szc)
                              v589 = v595;
                            else
                              v591 = v592;
                          }
                          while (v591);
                          if (v589 != v590)
                          {
                            v590 = v589;
                            if (*(void **)v589 == __szc)
                            {
                              v596 = 0;
LABEL_738:
                              if (v586)
                              {
                                v640 = (unint64_t *)&v586->__shared_owners_;
                                do
                                  v641 = __ldaxr(v640);
                                while (__stlxr(v641 - 1, v640));
                                if (!v641)
                                {
                                  ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                                  std::__shared_weak_count::__release_weak(v586);
                                }
                              }
                              if (v596)
                              {
                                *(_BYTE *)(v2068 + 6636) = 0;
                                *v2001 = 0;
                              }
                              v642 = (std::__shared_weak_count *)*((_QWORD *)&v2108[0] + 1);
                              if (*((_QWORD *)&v2108[0] + 1))
                              {
                                v643 = (unint64_t *)(*((_QWORD *)&v2108[0] + 1) + 8);
                                do
                                  v644 = __ldaxr(v643);
                                while (__stlxr(v644 - 1, v643));
                                if (!v644)
                                {
                                  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                                  std::__shared_weak_count::__release_weak(v642);
                                }
                              }
                              v645 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                              if (!*((_QWORD *)&v2107[0] + 1))
                                goto LABEL_480;
                              v646 = (unint64_t *)(*((_QWORD *)&v2107[0] + 1) + 8);
                              do
                                v647 = __ldaxr(v646);
                              while (__stlxr(v647 - 1, v646));
                              goto LABEL_753;
                            }
                          }
                        }
                        if (v586)
                        {
                          v597 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v598 = __ldxr(v597);
                          while (__stxr(v598 + 1, v597));
                        }
                        v2150[0] = __szc;
                        *(_QWORD *)v2151 = v584;
                        v2151[8] = 0;
                        v2151[40] = 0;
                        if ((v2011 & 1) == 0)
                        {
                          LOBYTE(v599) = v1931;
                          BYTE1(v599) = v1932;
                          BYTE2(v599) = v1933;
                          BYTE3(v599) = v1934;
                          BYTE4(v599) = v1935;
                          BYTE5(v599) = v1936;
                          BYTE6(v599) = v1937;
                          HIBYTE(v599) = v1938;
                          LOBYTE(v600) = v1939;
                          BYTE1(v600) = v1940;
                          BYTE2(v600) = v1941;
                          HIBYTE(v600) = v1942;
                          LOBYTE(v601) = v1943;
                          HIBYTE(v601) = v1944;
                          *(_WORD *)&v2151[37] = v601;
                          *(_DWORD *)&v2151[33] = v600;
                          v2151[8] = v582;
                          LOBYTE(v602) = v1946;
                          BYTE1(v602) = v1947;
                          BYTE2(v602) = v1948;
                          BYTE3(v602) = v1949;
                          BYTE4(v602) = v1950;
                          BYTE5(v602) = v1951;
                          BYTE6(v602) = v1952;
                          BYTE7(v602) = v1953;
                          BYTE8(v602) = v1954;
                          BYTE9(v602) = v1955;
                          BYTE10(v602) = v1956;
                          BYTE11(v602) = v1957;
                          BYTE12(v602) = v1958;
                          BYTE13(v602) = v1959;
                          BYTE14(v602) = v583;
                          HIBYTE(v602) = v1930;
                          *(_OWORD *)&v2151[9] = v602;
                          v2151[39] = v1945;
                          *(_QWORD *)&v2151[25] = v599;
                          v2151[40] = 1;
                        }
                        *(_QWORD *)&v2151[48] = v580;
                        *(_QWORD *)&v2151[56] = v579;
                        BYTE8(v2152[127]) = 0;
                        v2158 = 0;
                        v2159 = 257;
                        v2160 = 0u;
                        v2161 = 0u;
                        v2162 = 0;
                        *(_QWORD *)&v2181 = v585;
                        *((_QWORD *)&v2181 + 1) = v586;
                        if (v586)
                        {
                          v603 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v604 = __ldxr(v603);
                          while (__stxr(v604 + 1, v603));
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                          do
                            v605 = __ldaxr(v603);
                          while (__stlxr(v605 - 1, v603));
                          if (!v605)
                          {
                            ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                            std::__shared_weak_count::__release_weak(v586);
                          }
                        }
                        else
                        {
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                        }
                        v606 = *(char **)(v2068 + 4888);
                        v607 = *(char **)(v2068 + 4896);
                        v608 = v606;
                        if (v607 != v606)
                        {
                          v609 = (v607 - v606) >> 4;
                          v608 = *(char **)(v2068 + 4888);
                          do
                          {
                            v610 = v609 >> 1;
                            v611 = (unsigned int *)&v608[16 * (v609 >> 1)];
                            v613 = *v611;
                            v612 = (char *)(v611 + 4);
                            v609 += ~(v609 >> 1);
                            if (v613 < v457)
                              v608 = v612;
                            else
                              v609 = v610;
                          }
                          while (v609);
                        }
                        if (v608 == v607 || *(_DWORD *)v608 != v457)
                          goto LABEL_722;
                        v614 = *((_QWORD *)v608 + 1);
                        *(_QWORD *)&v2160 = v614;
                        ++*(_DWORD *)(*((_QWORD *)v608 + 1) + 8);
                        v615 = *(char **)(v2068 + 4984);
                        v616 = *(char **)(v2068 + 4992);
                        v617 = v615;
                        if (v616 != v615)
                        {
                          v618 = (v616 - v615) >> 4;
                          v617 = *(char **)(v2068 + 4984);
                          do
                          {
                            v619 = v618 >> 1;
                            v620 = (unsigned int *)&v617[16 * (v618 >> 1)];
                            v622 = *v620;
                            v621 = (char *)(v620 + 4);
                            v618 += ~(v618 >> 1);
                            if (v622 < v457)
                              v617 = v621;
                            else
                              v618 = v619;
                          }
                          while (v618);
                        }
                        if (v617 == v616 || *(_DWORD *)v617 != v457)
                          goto LABEL_722;
                        v623 = *((_QWORD *)v617 + 1);
                        *((_QWORD *)&v2160 + 1) = v623;
                        ++*(_DWORD *)(*((_QWORD *)v617 + 1) + 8);
                        if (v607 != v606)
                        {
                          v624 = (v607 - v606) >> 4;
                          v581 = __szc;
                          do
                          {
                            v625 = v624 >> 1;
                            v626 = (unsigned int *)&v606[16 * (v624 >> 1)];
                            v628 = *v626;
                            v627 = (char *)(v626 + 4);
                            v624 += ~(v624 >> 1);
                            if (v628 < __szc)
                              v606 = v627;
                            else
                              v624 = v625;
                          }
                          while (v624);
                        }
                        if (v606 == v607 || *(_DWORD *)v606 != (_DWORD)__szc)
                          goto LABEL_722;
                        v629 = *((_QWORD *)v606 + 1);
                        *(_QWORD *)&v2161 = v629;
                        ++*(_DWORD *)(*((_QWORD *)v606 + 1) + 8);
                        if (v616 != v615)
                        {
                          v630 = (v616 - v615) >> 4;
                          do
                          {
                            v631 = v630 >> 1;
                            v632 = (unsigned int *)&v615[16 * (v630 >> 1)];
                            v634 = *v632;
                            v633 = (char *)(v632 + 4);
                            v630 += ~(v630 >> 1);
                            if (v634 < __szc)
                              v615 = v633;
                            else
                              v630 = v631;
                          }
                          while (v630);
                        }
                        if (v615 == v616
                          || *(_DWORD *)v615 != (_DWORD)__szc
                          || (v635 = *((_QWORD *)v615 + 1),
                              *((_QWORD *)&v2161 + 1) = v635,
                              ++*(_DWORD *)(*((_QWORD *)v615 + 1) + 8),
                              v636 = *(_QWORD *)(v2068 + 5080),
                              *(_QWORD *)(v2068 + 5088) == v636)
                          || *(_DWORD *)v636)
                        {
LABEL_722:
                          if ((_QWORD)v2160)
                            --*(_DWORD *)(v2160 + 8);
                          if (*((_QWORD *)&v2160 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2160 + 1) + 8);
                          if ((_QWORD)v2161)
                            --*(_DWORD *)(v2161 + 8);
                          if (*((_QWORD *)&v2161 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2161 + 1) + 8);
                          v596 = 0;
                          if (v2162)
                            --*(_DWORD *)(v2162 + 8);
                        }
                        else
                        {
                          v839 = *(_QWORD *)(v636 + 8);
                          v2162 = v839;
                          ++*(_DWORD *)(*(_QWORD *)(v636 + 8) + 8);
                          if (*(_BYTE *)(v614 + 20)
                            || *(_BYTE *)(v623 + 20)
                            || *(_BYTE *)(v629 + 20)
                            || *(_BYTE *)(v635 + 20)
                            || *(_BYTE *)(v839 + 20))
                          {
                            *(_OWORD *)&v2183[8] = *(_OWORD *)v2150;
                            *(_QWORD *)v2183 = __szc;
                            *(_QWORD *)&v2183[24] = *(_QWORD *)v2151;
                            v2183[32] = 0;
                            v2183[64] = 0;
                            if (v2151[40])
                            {
                              *(_OWORD *)&v2183[32] = *(_OWORD *)&v2151[8];
                              *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[24];
                              v2183[64] = 1;
                            }
                            *(_OWORD *)&v2183[72] = *(_OWORD *)&v2151[48];
                            memcpy(&v2183[88], &v2151[64], 0x708uLL);
                            memcpy(&v2183[1888], v2152, 0x708uLL);
                            *(_OWORD *)&v2183[3752] = *(_OWORD *)((char *)&v2152[116] + 8);
                            *(_OWORD *)&v2183[3768] = *(_OWORD *)((char *)&v2152[117] + 8);
                            *(_OWORD *)&v2183[3784] = *(_OWORD *)((char *)&v2152[118] + 8);
                            *(_QWORD *)&v2183[3800] = *((_QWORD *)&v2152[119] + 1);
                            *(_OWORD *)&v2183[3688] = *(_OWORD *)((char *)&v2152[112] + 8);
                            *(_OWORD *)&v2183[3704] = *(_OWORD *)((char *)&v2152[113] + 8);
                            *(_OWORD *)&v2183[3720] = *(_OWORD *)((char *)&v2152[114] + 8);
                            *(_OWORD *)&v2183[3736] = *(_OWORD *)((char *)&v2152[115] + 8);
                            *(_OWORD *)&v2183[3872] = v2152[124];
                            *(_OWORD *)&v2183[3888] = v2152[125];
                            *(_OWORD *)&v2183[3904] = v2152[126];
                            *(_QWORD *)&v2183[3920] = *(_QWORD *)&v2152[127];
                            *(_OWORD *)&v2183[3808] = v2152[120];
                            *(_OWORD *)&v2183[3824] = v2152[121];
                            *(_OWORD *)&v2183[3840] = v2152[122];
                            *(_OWORD *)&v2183[3856] = v2152[123];
                            v2183[3928] = 0;
                            v2197 = 0;
                            if (v2158)
                            {
                              memcpy(&v2183[3928], (char *)&v2152[127] + 8, 0x708uLL);
                              v2188 = v2152[244];
                              v2189 = v2152[245];
                              v2190 = v2152[246];
                              v2191 = v2153;
                              v2184 = v2152[240];
                              v2185 = v2152[241];
                              v2186 = v2152[242];
                              v2187 = v2152[243];
                              v1990.i8[0] = v2154;
                              v2192 = v2154;
                              v1988.i8[0] = v2155;
                              v2194 = v2155;
                              v2193 = &off_24CA00398;
                              memcpy(v2195, v2156, sizeof(v2195));
                              v1986.i64[0] = v2157;
                              v2196 = v2157;
                              v2197 = 1;
                            }
                            v2198 = v2159;
                            v2199 = v2160;
                            v2200 = v2161;
                            v2201 = v2162;
                            v2206 = v2167;
                            v2207 = v2168;
                            v2208 = v2169;
                            v2209 = v2170;
                            v2202 = v2163;
                            v2203 = v2164;
                            v2204 = v2165;
                            v2205 = v2166;
                            v2217 = v2178;
                            v2215 = v2176;
                            v2216 = v2177;
                            v2213 = v2174;
                            v2214 = v2175;
                            v2211 = v2172;
                            v2212 = v2173;
                            v2210 = v2171;
                            v2219 = v2180;
                            v2218 = v2179;
                            v840 = v2181;
                            v2220 = v2181;
                            v841 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                            v2181 = 0uLL;
                            v2221 = v2182;
                            v842 = *(char **)(v2068 + 5712);
                            if (v842 == v590 || *(void **)v590 != __szc)
                            {
                              v843 = *(char **)(v2068 + 5704);
                              v844 = v590 - v843;
                              v1921 = v843;
                              v1918 = (v590 - v843) / 8016;
                              v845 = *(_QWORD *)(v2068 + 5720);
                              categoryc = &v843[8016 * v1918];
                              if ((unint64_t)v842 >= v845)
                              {
                                v899 = 0x2F028E0D4911E25DLL * ((v842 - v843) >> 4) + 1;
                                if (v899 > 0x82CF750393AC3)
                                  sub_20E867F44();
                                v900 = 0x2F028E0D4911E25DLL * ((uint64_t)(v845 - (_QWORD)v843) >> 4);
                                if (2 * v900 > v899)
                                  v899 = 2 * v900;
                                if (v900 >= 0x4167BA81C9D61)
                                  v901 = 0x82CF750393AC3;
                                else
                                  v901 = v899;
                                *(_QWORD *)&object[32] = v2068 + 5720;
                                if (v901)
                                {
                                  if (v901 > 0x82CF750393AC3)
                                    sub_20E877A38();
                                  v902 = (char *)operator new(8016 * v901);
                                }
                                else
                                {
                                  v902 = 0;
                                }
                                *(_QWORD *)object = v902;
                                *(_QWORD *)&object[8] = &v902[8016 * v1918];
                                v2014 = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[24] = &v902[8016 * v901];
                                if (v1918 == v901)
                                {
                                  if (v844 < 1)
                                  {
                                    if (v1921 == v590)
                                      v956 = 1;
                                    else
                                      v956 = 2 * v1918;
                                    if (v956 > 0x82CF750393AC3)
                                      sub_20E877A38();
                                    *(_QWORD *)object = operator new(8016 * v956);
                                    *(_QWORD *)&object[8] = *(_QWORD *)object + 8016 * (v956 >> 2);
                                    v2014 = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[24] = *(_QWORD *)object + 8016 * v956;
                                    if (v902)
                                      operator delete(v902);
                                  }
                                  else
                                  {
                                    v943 = v1918 + 2;
                                    if (v1918 >= -1)
                                      v943 = v1918 + 1;
                                    v2014 = *(_QWORD *)&object[8] - 8016 * (v943 >> 1);
                                    *(_QWORD *)&object[16] = v2014;
                                    *(_QWORD *)&object[8] = v2014;
                                  }
                                }
                                *(_QWORD *)v2014 = __szc;
                                *(_OWORD *)(v2014 + 8) = *(_OWORD *)v2150;
                                *(_QWORD *)(v2014 + 24) = *(_QWORD *)&v2183[24];
                                *(_BYTE *)(v2014 + 32) = 0;
                                *(_BYTE *)(v2014 + 64) = 0;
                                if (v2183[64])
                                {
                                  v957 = *(_OWORD *)&v2183[48];
                                  *(_OWORD *)(v2014 + 32) = *(_OWORD *)&v2183[32];
                                  *(_OWORD *)(v2014 + 48) = v957;
                                  *(_BYTE *)(v2014 + 64) = 1;
                                }
                                *(_OWORD *)(v2014 + 72) = *(_OWORD *)&v2183[72];
                                memcpy((void *)(v2014 + 88), &v2183[88], 0x708uLL);
                                memcpy((void *)(v2014 + 1888), &v2183[1888], 0x708uLL);
                                v958 = *(_OWORD *)&v2183[3720];
                                *(_OWORD *)(v2014 + 3736) = *(_OWORD *)&v2183[3736];
                                *(_OWORD *)(v2014 + 3720) = v958;
                                v959 = *(_OWORD *)&v2183[3688];
                                *(_OWORD *)(v2014 + 3704) = *(_OWORD *)&v2183[3704];
                                *(_OWORD *)(v2014 + 3688) = v959;
                                *(_QWORD *)(v2014 + 3800) = *(_QWORD *)&v2183[3800];
                                *(_OWORD *)(v2014 + 3784) = *(_OWORD *)&v2183[3784];
                                v960 = *(_OWORD *)&v2183[3752];
                                *(_OWORD *)(v2014 + 3768) = *(_OWORD *)&v2183[3768];
                                *(_OWORD *)(v2014 + 3752) = v960;
                                v961 = *(_OWORD *)&v2183[3824];
                                *(_OWORD *)(v2014 + 3808) = *(_OWORD *)&v2183[3808];
                                *(_OWORD *)(v2014 + 3824) = v961;
                                v962 = *(_OWORD *)&v2183[3856];
                                *(_OWORD *)(v2014 + 3840) = *(_OWORD *)&v2183[3840];
                                *(_OWORD *)(v2014 + 3856) = v962;
                                *(_OWORD *)(v2014 + 3904) = *(_OWORD *)&v2183[3904];
                                v963 = *(_OWORD *)&v2183[3872];
                                *(_OWORD *)(v2014 + 3888) = *(_OWORD *)&v2183[3888];
                                *(_QWORD *)(v2014 + 3920) = *(_QWORD *)&v2183[3920];
                                *(_OWORD *)(v2014 + 3872) = v963;
                                *(_BYTE *)(v2014 + 3928) = 0;
                                *(_BYTE *)(v2014 + 7680) = 0;
                                if (v2197)
                                {
                                  memcpy((void *)(v2014 + 3928), &v2183[3928], 0x708uLL);
                                  v964 = v2189;
                                  *(_OWORD *)(v2014 + 5792) = v2188;
                                  *(_OWORD *)(v2014 + 5808) = v964;
                                  *(_OWORD *)(v2014 + 5824) = v2190;
                                  v965 = v2185;
                                  *(_OWORD *)(v2014 + 5728) = v2184;
                                  *(_OWORD *)(v2014 + 5744) = v965;
                                  v966 = v2187;
                                  *(_OWORD *)(v2014 + 5760) = v2186;
                                  *(_QWORD *)(v2014 + 5840) = v2191;
                                  *(_OWORD *)(v2014 + 5776) = v966;
                                  *(_BYTE *)(v2014 + 5848) = v2192;
                                  *(_BYTE *)(v2014 + 5864) = v2194;
                                  *(_QWORD *)(v2014 + 5856) = &off_24CA00398;
                                  memcpy((void *)(v2014 + 5872), v2195, 0x708uLL);
                                  *(_QWORD *)(v2014 + 7672) = v2196;
                                  *(_BYTE *)(v2014 + 7680) = 1;
                                }
                                *(_WORD *)(v2014 + 7688) = v2198;
                                v967 = v2200;
                                *(_OWORD *)(v2014 + 7696) = v2199;
                                *(_OWORD *)(v2014 + 7712) = v967;
                                *(_QWORD *)(v2014 + 7728) = v2201;
                                v968 = v2203;
                                *(_OWORD *)(v2014 + 7736) = v2202;
                                *(_OWORD *)(v2014 + 7752) = v968;
                                v969 = v2205;
                                *(_OWORD *)(v2014 + 7768) = v2204;
                                *(_OWORD *)(v2014 + 7784) = v969;
                                *(_QWORD *)(v2014 + 7848) = v2209;
                                *(_OWORD *)(v2014 + 7832) = v2208;
                                v970 = v2206;
                                *(_OWORD *)(v2014 + 7816) = v2207;
                                *(_OWORD *)(v2014 + 7800) = v970;
                                v971 = v2210;
                                v972 = v2211;
                                v973 = v2212;
                                *(_OWORD *)(v2014 + 7904) = v2213;
                                *(_OWORD *)(v2014 + 7888) = v973;
                                *(_OWORD *)(v2014 + 7872) = v972;
                                *(_OWORD *)(v2014 + 7856) = v971;
                                v974 = v2214;
                                v975 = v2215;
                                v976 = v2216;
                                *(_QWORD *)(v2014 + 7968) = v2217;
                                *(_OWORD *)(v2014 + 7952) = v976;
                                *(_OWORD *)(v2014 + 7936) = v975;
                                *(_OWORD *)(v2014 + 7920) = v974;
                                v977 = v2218;
                                *(_BYTE *)(v2014 + 7984) = v2219;
                                *(_QWORD *)(v2014 + 7976) = v977;
                                *(_OWORD *)(v2014 + 7992) = v2220;
                                v2220 = 0uLL;
                                *(_BYTE *)(v2014 + 8008) = v2221;
                                v978 = v2014 + 8016;
                                *(_QWORD *)&object[16] = v2014 + 8016;
                                v1990.i64[0] = *(_QWORD *)(v2068 + 5704);
                                if ((char *)v1990.i64[0] != categoryc)
                                {
                                  v979 = 0;
                                  v980 = &v1921[8016 * v1918];
                                  v981 = v980 - 8016;
                                  v1988.i64[0] = (uint64_t)(v980 - 7952);
                                  v982 = v980 - 24048;
                                  __szd = v2014 - 8016;
                                  v1986.i64[0] = v2014 - 4208;
                                  v983 = v2014 - 7952;
                                  v1927 = v2014 - 7984;
                                  v984 = categoryc;
                                  do
                                  {
                                    _X22 = &v982[v979];
                                    __asm { PRFM            #0, [X22] }
                                    *(_QWORD *)(__szd + v979) = *(_QWORD *)&v981[v979];
                                    *(_OWORD *)(v2014 - 8008 + v979) = *(_OWORD *)&v982[v979 + 16040];
                                    *(_QWORD *)(v2014 - 7992 + v979) = *(_QWORD *)&v982[v979 + 16056];
                                    v1006 = (_OWORD *)(v1927 + v979);
                                    *(_BYTE *)(v1927 + v979) = 0;
                                    *(_BYTE *)(v983 + v979) = 0;
                                    __asm { PRFM            #0, [X22,#0x40] }
                                    if (*(_BYTE *)(v1988.i64[0] + v979))
                                    {
                                      v1008 = *((_OWORD *)_X22 + 1005);
                                      *v1006 = *((_OWORD *)_X22 + 1004);
                                      v1006[1] = v1008;
                                      *(_BYTE *)(v983 + v979) = 1;
                                    }
                                    _X21 = _X22 + 7680;
                                    *(_OWORD *)(v2014 - 7944 + v979) = *(_OWORD *)(_X22 + 16104);
                                    memcpy((void *)(v2014 - 7928 + v979), _X22 + 16120, 0x708uLL);
                                    memcpy((void *)(v2014 - 6128 + v979), _X22 + 17920, 0x708uLL);
                                    v1010 = v1986.i64[0] + v979;
                                    v1011 = *(_OWORD *)(_X22 + 19720);
                                    v1012 = *(_OWORD *)(_X22 + 19736);
                                    v1013 = *(_OWORD *)(_X22 + 19752);
                                    *(_OWORD *)(v1010 - 72) = *(_OWORD *)(_X22 + 19768);
                                    *(_OWORD *)(v1010 - 88) = v1013;
                                    *(_OWORD *)(v1010 - 104) = v1012;
                                    *(_OWORD *)(v1010 - 120) = v1011;
                                    v1014 = *(_OWORD *)(_X22 + 19784);
                                    v1015 = *(_OWORD *)(_X22 + 19800);
                                    v1016 = *(_OWORD *)(_X22 + 19816);
                                    *(_QWORD *)(v1010 - 8) = *((_QWORD *)_X22 + 2479);
                                    *(_OWORD *)(v1010 - 24) = v1016;
                                    *(_OWORD *)(v1010 - 40) = v1015;
                                    *(_OWORD *)(v1010 - 56) = v1014;
                                    v1017 = *((_QWORD *)_X22 + 2494);
                                    v1018 = *((_OWORD *)_X22 + 1244);
                                    v1019 = *((_OWORD *)_X22 + 1246);
                                    *(_OWORD *)(v1010 + 80) = *((_OWORD *)_X22 + 1245);
                                    *(_OWORD *)(v1010 + 96) = v1019;
                                    *(_OWORD *)(v1010 + 64) = v1018;
                                    *(_QWORD *)(v1010 + 112) = v1017;
                                    v1020 = *((_OWORD *)_X22 + 1240);
                                    v1021 = *((_OWORD *)_X22 + 1241);
                                    v1022 = *((_OWORD *)_X22 + 1243);
                                    *(_OWORD *)(v1010 + 32) = *((_OWORD *)_X22 + 1242);
                                    *(_OWORD *)(v1010 + 48) = v1022;
                                    *(_OWORD *)v1010 = v1020;
                                    *(_OWORD *)(v1010 + 16) = v1021;
                                    v1023 = v2014 + v979;
                                    *(_BYTE *)(v1023 - 4088) = 0;
                                    *(_BYTE *)(v1023 - 336) = 0;
                                    v1024 = &v984[v979];
                                    __asm { PRFM            #0, [X21] }
                                    if (v984[v979 - 336])
                                    {
                                      _X21 = _X22 + 5848;
                                      memcpy((void *)(v1023 - 4088), &v982[v979 + 19960], 0x708uLL);
                                      v1027 = v1023 - 2288;
                                      v1028 = *(_OWORD *)&v982[v979 + 21776];
                                      v1029 = *(_OWORD *)&v982[v979 + 21808];
                                      v1030 = *(_OWORD *)&v982[v979 + 21760];
                                      *(_OWORD *)(v1027 + 32) = *(_OWORD *)&v982[v979 + 21792];
                                      *(_OWORD *)(v1027 + 48) = v1029;
                                      *(_OWORD *)v1027 = v1030;
                                      *(_OWORD *)(v1027 + 16) = v1028;
                                      v1031 = *(_OWORD *)&v982[v979 + 21840];
                                      v1032 = *(_OWORD *)&v982[v979 + 21856];
                                      v1033 = *(_OWORD *)&v982[v979 + 21824];
                                      *(_QWORD *)(v1027 + 112) = *(_QWORD *)&v982[v979 + 21872];
                                      *(_OWORD *)(v1027 + 80) = v1031;
                                      *(_OWORD *)(v1027 + 96) = v1032;
                                      *(_OWORD *)(v1027 + 64) = v1033;
                                      __asm { PRFM            #0, [X21] }
                                      *(_BYTE *)(v1023 - 2168) = *(v1024 - 2168);
                                      *(_BYTE *)(v1023 - 2152) = *(v1024 - 2152);
                                      *(_QWORD *)(v1023 - 2160) = &off_24CA00398;
                                      v984 = categoryc;
                                      memcpy((void *)(v1023 - 2144), &v982[v979 + 21904], 0x708uLL);
                                      *(_QWORD *)(__szd + v979 + 7672) = *(_QWORD *)&v981[v979 + 7672];
                                      *(_BYTE *)(v1023 - 336) = 1;
                                    }
                                    _X8 = _X22 + 7992;
                                    *(_WORD *)(v1023 - 328) = *((_WORD *)v1024 - 164);
                                    v986 = v1023 - 320;
                                    v987 = *(_OWORD *)&v982[v979 + 23728];
                                    v988 = *(_OWORD *)&v982[v979 + 23744];
                                    *(_QWORD *)(v986 + 32) = *(_QWORD *)&v982[v979 + 23760];
                                    *(_OWORD *)v986 = v987;
                                    *(_OWORD *)(v986 + 16) = v988;
                                    v989 = (_OWORD *)(v1023 - 280);
                                    v991 = *(_OWORD *)&v982[v979 + 23848];
                                    v990 = *(_OWORD *)&v982[v979 + 23864];
                                    v992 = *(_QWORD *)&v982[v979 + 23880];
                                    *(_OWORD *)(v1023 - 216) = *(_OWORD *)&v982[v979 + 23832];
                                    *(_QWORD *)(v1023 - 168) = v992;
                                    *(_OWORD *)(v1023 - 184) = v990;
                                    *(_OWORD *)(v1023 - 200) = v991;
                                    v993 = *(_OWORD *)&v982[v979 + 23768];
                                    v994 = *(_OWORD *)&v982[v979 + 23784];
                                    v995 = *(_OWORD *)&v982[v979 + 23800];
                                    *(_OWORD *)(v1023 - 232) = *(_OWORD *)&v982[v979 + 23816];
                                    *(_OWORD *)(v1023 - 248) = v995;
                                    *v989 = v993;
                                    v989[1] = v994;
                                    v996 = *(_OWORD *)&v982[v979 + 23968];
                                    v997 = *(_OWORD *)&v982[v979 + 23984];
                                    v998 = *(_OWORD *)&v982[v979 + 23952];
                                    *(_QWORD *)(v1023 - 48) = *(_QWORD *)&v982[v979 + 24000];
                                    *(_OWORD *)(v1023 - 80) = v996;
                                    *(_OWORD *)(v1023 - 64) = v997;
                                    *(_OWORD *)(v1023 - 96) = v998;
                                    v999 = *(_OWORD *)&v982[v979 + 23888];
                                    v1000 = *(_OWORD *)&v982[v979 + 23904];
                                    v1001 = *(_OWORD *)&v982[v979 + 23936];
                                    *(_OWORD *)(v1023 - 128) = *(_OWORD *)&v982[v979 + 23920];
                                    *(_OWORD *)(v1023 - 112) = v1001;
                                    *(_OWORD *)(v1023 - 160) = v999;
                                    *(_OWORD *)(v1023 - 144) = v1000;
                                    v1002 = *(_QWORD *)&v982[v979 + 24008];
                                    *(_BYTE *)(v1023 - 32) = v982[v979 + 24016];
                                    *(_QWORD *)(v1023 - 40) = v1002;
                                    __asm { PRFM            #0, [X8] }
                                    *(_OWORD *)(v1023 - 24) = *(_OWORD *)(v1024 - 24);
                                    *((_QWORD *)v1024 - 3) = 0;
                                    *((_QWORD *)v1024 - 2) = 0;
                                    *(_BYTE *)(v1023 - 8) = *(v1024 - 8);
                                    v979 -= 8016;
                                    v983 = v2014 - 7952;
                                  }
                                  while (&v984[v979] != (char *)v1990.i64[0]);
                                  v978 = *(_QWORD *)&object[16];
                                  v2014 += v979;
                                }
                                __sze = *(char **)(v2068 + 5712);
                                if (__sze != categoryc)
                                {
                                  v1035 = 0;
                                  v1036 = &v1921[8016 * v1918];
                                  v1990.i64[0] = (uint64_t)(v1036 + 8008);
                                  v1986.i64[0] = (uint64_t)(v1036 + 5864);
                                  v1985 = v1036 + 5848;
                                  v1988.i64[0] = (uint64_t)(v1036 + 7680);
                                  v1037 = v978 + 7680;
                                  do
                                  {
                                    v1057 = v978 + v1035;
                                    _X19 = &categoryc[v1035];
                                    __asm { PRFM            #0, [X19,#0x3EA0] }
                                    *(_QWORD *)v1057 = *(_QWORD *)&categoryc[v1035];
                                    *(_OWORD *)(v1057 + 8) = *(_OWORD *)&categoryc[v1035 + 8];
                                    *(_QWORD *)(v1057 + 24) = *(_QWORD *)&categoryc[v1035 + 24];
                                    *(_BYTE *)(v978 + v1035 + 32) = 0;
                                    *(_BYTE *)(v1057 + 64) = 0;
                                    __asm { PRFM            #0, [X19,#0x3EE0] }
                                    if (categoryc[v1035 + 64])
                                    {
                                      v1061 = *((_OWORD *)_X19 + 3);
                                      *(_OWORD *)(v978 + v1035 + 32) = *((_OWORD *)_X19 + 2);
                                      *(_OWORD *)(v978 + v1035 + 48) = v1061;
                                      *(_BYTE *)(v1057 + 64) = 1;
                                    }
                                    _X22 = _X19 + 23712;
                                    *(_OWORD *)(v1057 + 72) = *(_OWORD *)(_X19 + 72);
                                    memcpy((void *)(v1057 + 88), _X19 + 88, 0x708uLL);
                                    memcpy((void *)(v1057 + 1888), _X19 + 1888, 0x708uLL);
                                    v1063 = *(_OWORD *)(_X19 + 3688);
                                    v1064 = *(_OWORD *)(_X19 + 3704);
                                    v1065 = *(_OWORD *)(_X19 + 3736);
                                    *(_OWORD *)(v1057 + 3720) = *(_OWORD *)(_X19 + 3720);
                                    *(_OWORD *)(v1057 + 3736) = v1065;
                                    *(_OWORD *)(v1057 + 3688) = v1063;
                                    *(_OWORD *)(v1057 + 3704) = v1064;
                                    v1066 = *(_OWORD *)(_X19 + 3752);
                                    v1067 = *(_OWORD *)(_X19 + 3768);
                                    v1068 = *(_OWORD *)(_X19 + 3784);
                                    *(_QWORD *)(v1057 + 3800) = *((_QWORD *)_X19 + 475);
                                    *(_OWORD *)(v1057 + 3768) = v1067;
                                    *(_OWORD *)(v1057 + 3784) = v1068;
                                    *(_OWORD *)(v1057 + 3752) = v1066;
                                    v1069 = *((_QWORD *)_X19 + 490);
                                    v1070 = *((_OWORD *)_X19 + 242);
                                    v1071 = *((_OWORD *)_X19 + 243);
                                    *(_OWORD *)(v1057 + 3904) = *((_OWORD *)_X19 + 244);
                                    *(_OWORD *)(v1057 + 3888) = v1071;
                                    *(_OWORD *)(v1057 + 3872) = v1070;
                                    *(_QWORD *)(v1057 + 3920) = v1069;
                                    v1072 = *((_OWORD *)_X19 + 238);
                                    v1073 = *((_OWORD *)_X19 + 239);
                                    v1074 = *((_OWORD *)_X19 + 240);
                                    *(_OWORD *)(v1057 + 3856) = *((_OWORD *)_X19 + 241);
                                    *(_OWORD *)(v1057 + 3840) = v1074;
                                    *(_OWORD *)(v1057 + 3824) = v1073;
                                    *(_OWORD *)(v1057 + 3808) = v1072;
                                    *(_BYTE *)(v1057 + 3928) = 0;
                                    *(_BYTE *)(v1037 + v1035) = 0;
                                    __asm { PRFM            #0, [X22] }
                                    if (*(_BYTE *)(v1988.i64[0] + v1035))
                                    {
                                      _X22 = _X19 + 21880;
                                      memcpy((void *)(v1057 + 3928), &categoryc[v1035 + 3928], 0x708uLL);
                                      v1077 = v978 + v1035;
                                      v1078 = *(_OWORD *)&categoryc[v1035 + 5744];
                                      v1079 = *(_OWORD *)&categoryc[v1035 + 5760];
                                      v1080 = *(_OWORD *)&categoryc[v1035 + 5776];
                                      *(_OWORD *)(v1077 + 5728) = *(_OWORD *)&categoryc[v1035 + 5728];
                                      *(_OWORD *)(v1077 + 5776) = v1080;
                                      *(_OWORD *)(v1077 + 5760) = v1079;
                                      *(_OWORD *)(v1077 + 5744) = v1078;
                                      v1081 = *(_OWORD *)&categoryc[v1035 + 5808];
                                      v1082 = *(_OWORD *)&categoryc[v1035 + 5824];
                                      v1083 = *(_QWORD *)&categoryc[v1035 + 5840];
                                      *(_OWORD *)(v1077 + 5792) = *(_OWORD *)&categoryc[v1035 + 5792];
                                      *(_QWORD *)(v1077 + 5840) = v1083;
                                      *(_OWORD *)(v1077 + 5824) = v1082;
                                      *(_OWORD *)(v1077 + 5808) = v1081;
                                      __asm { PRFM            #0, [X22] }
                                      *(_BYTE *)(v978 + 5848 + v1035) = v1985[v1035 / 8];
                                      *(_BYTE *)(v978 + 5864 + v1035) = *(_BYTE *)(v1986.i64[0] + v1035);
                                      *(_QWORD *)(v1077 + 5856) = &off_24CA00398;
                                      memcpy((void *)(v978 + v1035 + 5872), &categoryc[v1035 + 5872], 0x708uLL);
                                      *(_QWORD *)(v1077 + 7672) = *(_QWORD *)&categoryc[v1035 + 7672];
                                      *(_BYTE *)(v1037 + v1035) = 1;
                                    }
                                    _X8 = _X19 + 24024;
                                    v1039 = v978 + v1035;
                                    *(_WORD *)(v1039 + 7688) = *(_WORD *)&categoryc[v1035 + 7688];
                                    v1040 = *(_OWORD *)&categoryc[v1035 + 7696];
                                    v1041 = *(_OWORD *)&categoryc[v1035 + 7712];
                                    *(_QWORD *)(v1039 + 7728) = *(_QWORD *)&categoryc[v1035 + 7728];
                                    *(_OWORD *)(v1039 + 7712) = v1041;
                                    *(_OWORD *)(v1039 + 7696) = v1040;
                                    v1042 = (_OWORD *)(v978 + v1035 + 7736);
                                    v1044 = *(_OWORD *)&categoryc[v1035 + 7816];
                                    v1043 = *(_OWORD *)&categoryc[v1035 + 7832];
                                    v1045 = *(_OWORD *)&categoryc[v1035 + 7800];
                                    *(_QWORD *)(v1039 + 7848) = *(_QWORD *)&categoryc[v1035 + 7848];
                                    v1042[5] = v1044;
                                    v1042[6] = v1043;
                                    v1042[4] = v1045;
                                    v1046 = *(_OWORD *)&categoryc[v1035 + 7736];
                                    v1047 = *(_OWORD *)&categoryc[v1035 + 7752];
                                    v1048 = *(_OWORD *)&categoryc[v1035 + 7784];
                                    v1042[2] = *(_OWORD *)&categoryc[v1035 + 7768];
                                    v1042[3] = v1048;
                                    *v1042 = v1046;
                                    v1042[1] = v1047;
                                    v1049 = *(_OWORD *)&categoryc[v1035 + 7936];
                                    v1050 = *(_OWORD *)&categoryc[v1035 + 7952];
                                    v1051 = *(_QWORD *)&categoryc[v1035 + 7968];
                                    *(_OWORD *)(v1039 + 7920) = *(_OWORD *)&categoryc[v1035 + 7920];
                                    *(_QWORD *)(v1039 + 7968) = v1051;
                                    *(_OWORD *)(v1039 + 7952) = v1050;
                                    *(_OWORD *)(v1039 + 7936) = v1049;
                                    v1052 = *(_OWORD *)&categoryc[v1035 + 7856];
                                    v1053 = *(_OWORD *)&categoryc[v1035 + 7872];
                                    v1054 = *(_OWORD *)&categoryc[v1035 + 7888];
                                    *(_OWORD *)(v1039 + 7904) = *(_OWORD *)&categoryc[v1035 + 7904];
                                    *(_OWORD *)(v1039 + 7888) = v1054;
                                    *(_OWORD *)(v1039 + 7872) = v1053;
                                    *(_OWORD *)(v1039 + 7856) = v1052;
                                    v1055 = *(_QWORD *)&categoryc[v1035 + 7976];
                                    *(_BYTE *)(v978 + v1035 + 7984) = categoryc[v1035 + 7984];
                                    *(_QWORD *)(v1039 + 7976) = v1055;
                                    __asm { PRFM            #0, [X8] }
                                    *(_QWORD *)(v1039 + 7992) = *(_QWORD *)&categoryc[v1035 + 7992];
                                    *(_QWORD *)(v1039 + 8000) = *(_QWORD *)&categoryc[v1035 + 8000];
                                    *(_OWORD *)&categoryc[v1035 + 7992] = 0u;
                                    *(_BYTE *)(v978 + 8008 + v1035) = *(_BYTE *)(v1990.i64[0] + v1035);
                                    v1035 += 8016;
                                  }
                                  while (&categoryc[v1035] != __sze);
                                  categoryc = *(char **)(v2068 + 5712);
                                  v978 += v1035;
                                }
                                v1085 = *(char **)(v2068 + 5704);
                                *(_QWORD *)(v2068 + 5704) = v2014;
                                *(_QWORD *)(v2068 + 5712) = v978;
                                v1086 = *(_QWORD *)(v2068 + 5720);
                                *(_QWORD *)(v2068 + 5720) = *(_QWORD *)&object[24];
                                *(_QWORD *)&object[24] = v1086;
                                *(_QWORD *)&object[8] = v1085;
                                *(_QWORD *)object = v1085;
                                if (categoryc != v1085)
                                {
                                  v1087 = categoryc;
                                  do
                                  {
                                    *(_QWORD *)&object[16] = v1087 - 8016;
                                    v1088 = (std::__shared_weak_count *)*((_QWORD *)v1087 - 2);
                                    if (v1088)
                                    {
                                      v1089 = (unint64_t *)&v1088->__shared_owners_;
                                      do
                                        v1090 = __ldaxr(v1089);
                                      while (__stlxr(v1090 - 1, v1089));
                                      if (!v1090)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v1088->__on_zero_shared)(v1088);
                                        std::__shared_weak_count::__release_weak(v1088);
                                      }
                                    }
                                    v1087 = *(char **)&object[16];
                                  }
                                  while (*(char **)&object[16] != v1085);
                                  categoryc = *(char **)object;
                                }
                                if (categoryc)
                                  operator delete(categoryc);
                              }
                              else
                              {
                                v846 = *(_QWORD *)(v2068 + 5712);
                                v1975 = (char *)v846;
                                if (&v843[8016 * v1918] == v842)
                                {
                                  *(_QWORD *)v842 = __szc;
                                  v903 = &v843[8016 * v1918];
                                  *(_OWORD *)(v903 + 8) = *(_OWORD *)&v2183[8];
                                  v904 = *(_QWORD *)&v2183[24];
                                  v903[32] = 0;
                                  v905 = v903 + 32;
                                  *(v905 - 1) = v904;
                                  *((_BYTE *)v905 + 32) = 0;
                                  if (v2183[64])
                                  {
                                    v906 = *(_OWORD *)&v2183[48];
                                    *(_OWORD *)v905 = *(_OWORD *)&v2183[32];
                                    *((_OWORD *)v905 + 1) = v906;
                                    *((_BYTE *)v905 + 32) = 1;
                                  }
                                  v907 = &v843[8016 * v1918];
                                  *(_OWORD *)(v907 + 72) = *(_OWORD *)&v2183[72];
                                  memcpy(v907 + 88, &v2183[88], 0x708uLL);
                                  memcpy(v907 + 1888, &v2183[1888], 0x708uLL);
                                  v908 = *(_OWORD *)&v2183[3688];
                                  v909 = *(_OWORD *)&v2183[3704];
                                  v910 = *(_OWORD *)&v2183[3720];
                                  *(_OWORD *)(v907 + 3736) = *(_OWORD *)&v2183[3736];
                                  *(_OWORD *)(v907 + 3720) = v910;
                                  *(_OWORD *)(v907 + 3704) = v909;
                                  *(_OWORD *)(v907 + 3688) = v908;
                                  v911 = *(_OWORD *)&v2183[3752];
                                  v912 = *(_OWORD *)&v2183[3768];
                                  v913 = *(_OWORD *)&v2183[3784];
                                  *((_QWORD *)v907 + 475) = *(_QWORD *)&v2183[3800];
                                  *(_OWORD *)(v907 + 3784) = v913;
                                  *(_OWORD *)(v907 + 3768) = v912;
                                  *(_OWORD *)(v907 + 3752) = v911;
                                  v914 = *(_QWORD *)&v2183[3920];
                                  v915 = *(_OWORD *)&v2183[3872];
                                  v916 = *(_OWORD *)&v2183[3888];
                                  *((_OWORD *)v907 + 244) = *(_OWORD *)&v2183[3904];
                                  *((_OWORD *)v907 + 243) = v916;
                                  *((_OWORD *)v907 + 242) = v915;
                                  *((_QWORD *)v907 + 490) = v914;
                                  v917 = *(_OWORD *)&v2183[3808];
                                  v918 = *(_OWORD *)&v2183[3824];
                                  v919 = *(_OWORD *)&v2183[3840];
                                  *((_OWORD *)v907 + 241) = *(_OWORD *)&v2183[3856];
                                  *((_OWORD *)v907 + 240) = v919;
                                  *((_OWORD *)v907 + 239) = v918;
                                  *((_OWORD *)v907 + 238) = v917;
                                  v907[3928] = 0;
                                  v907[7680] = 0;
                                  if (v2197)
                                  {
                                    memcpy(v907 + 3928, &v2183[3928], 0x708uLL);
                                    v920 = &v1921[8016 * v1918];
                                    v921 = v2184;
                                    v922 = v2185;
                                    v923 = v2186;
                                    *((_OWORD *)v920 + 361) = v2187;
                                    *((_OWORD *)v920 + 360) = v923;
                                    *((_OWORD *)v920 + 359) = v922;
                                    *((_OWORD *)v920 + 358) = v921;
                                    v924 = v2188;
                                    v925 = v2189;
                                    v926 = v2190;
                                    *((_QWORD *)v920 + 730) = v2191;
                                    *((_OWORD *)v920 + 364) = v926;
                                    *((_OWORD *)v920 + 363) = v925;
                                    *((_OWORD *)v920 + 362) = v924;
                                    v920[5848] = v2192;
                                    v920[5864] = v2194;
                                    *((_QWORD *)v920 + 732) = &off_24CA00398;
                                    memcpy(v920 + 5872, v2195, 0x708uLL);
                                    *((_QWORD *)v920 + 959) = v2196;
                                    v907[7680] = 1;
                                  }
                                  v927 = &v1921[8016 * v1918];
                                  *((_WORD *)v927 + 3844) = v2198;
                                  v928 = v2199;
                                  v929 = v2200;
                                  *((_QWORD *)v927 + 966) = v2201;
                                  *((_OWORD *)v927 + 482) = v929;
                                  *((_OWORD *)v927 + 481) = v928;
                                  v931 = v2207;
                                  v930 = v2208;
                                  v932 = v2209;
                                  *(_OWORD *)(v927 + 7800) = v2206;
                                  *((_QWORD *)v927 + 981) = v932;
                                  *(_OWORD *)(v927 + 7832) = v930;
                                  *(_OWORD *)(v927 + 7816) = v931;
                                  v933 = v2202;
                                  v934 = v2203;
                                  v935 = v2204;
                                  *(_OWORD *)(v927 + 7784) = v2205;
                                  *(_OWORD *)(v927 + 7768) = v935;
                                  *(_OWORD *)(v927 + 7752) = v934;
                                  *(_OWORD *)(v927 + 7736) = v933;
                                  v937 = v2215;
                                  v936 = v2216;
                                  v938 = v2217;
                                  *((_OWORD *)v927 + 495) = v2214;
                                  *((_QWORD *)v927 + 996) = v938;
                                  *((_OWORD *)v927 + 497) = v936;
                                  *((_OWORD *)v927 + 496) = v937;
                                  v939 = v2210;
                                  v940 = v2211;
                                  v941 = v2212;
                                  *((_OWORD *)v927 + 494) = v2213;
                                  *((_OWORD *)v927 + 493) = v941;
                                  *((_OWORD *)v927 + 492) = v940;
                                  *((_OWORD *)v927 + 491) = v939;
                                  v942 = v2218;
                                  v927[7984] = v2219;
                                  *((_QWORD *)v927 + 997) = v942;
                                  *(_OWORD *)(v927 + 7992) = v2220;
                                  v2220 = 0uLL;
                                  v927[8008] = v2221;
                                  *(_QWORD *)(v2068 + 5712) = v846 + 8016;
                                }
                                else
                                {
                                  v2256 = v2068 + 5720;
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2150;
                                  *(_QWORD *)object = __szc;
                                  *(_QWORD *)&object[24] = *(_QWORD *)v2151;
                                  object[32] = 0;
                                  object[64] = 0;
                                  if (v2151[40])
                                  {
                                    *(_OWORD *)&object[32] = *(_OWORD *)&v2183[32];
                                    *(_OWORD *)&object[48] = *(_OWORD *)&v2183[48];
                                    object[64] = 1;
                                  }
                                  *(_OWORD *)&object[72] = *(_OWORD *)&v2151[48];
                                  memcpy(&object[88], &v2151[64], 0x708uLL);
                                  memcpy(v2223, v2152, 0x708uLL);
                                  *(_OWORD *)((char *)&v2223[116] + 8) = *(_OWORD *)((char *)&v2152[116] + 8);
                                  *(_OWORD *)((char *)&v2223[117] + 8) = *(_OWORD *)((char *)&v2152[117] + 8);
                                  *(_OWORD *)((char *)&v2223[118] + 8) = *(_OWORD *)((char *)&v2152[118] + 8);
                                  *((_QWORD *)&v2223[119] + 1) = *((_QWORD *)&v2152[119] + 1);
                                  *(_OWORD *)((char *)&v2223[112] + 8) = *(_OWORD *)((char *)&v2152[112] + 8);
                                  *(_OWORD *)((char *)&v2223[113] + 8) = *(_OWORD *)((char *)&v2152[113] + 8);
                                  *(_OWORD *)((char *)&v2223[114] + 8) = *(_OWORD *)((char *)&v2152[114] + 8);
                                  *(_OWORD *)((char *)&v2223[115] + 8) = *(_OWORD *)((char *)&v2152[115] + 8);
                                  v2223[124] = v2152[124];
                                  v2223[125] = v2152[125];
                                  v2223[126] = v2152[126];
                                  *(_QWORD *)&v2223[127] = *(_QWORD *)&v2152[127];
                                  v2223[120] = v2152[120];
                                  v2223[121] = v2152[121];
                                  v2223[122] = v2152[122];
                                  v2223[123] = v2152[123];
                                  BYTE8(v2223[127]) = 0;
                                  v2230 = 0;
                                  if (v2158)
                                  {
                                    memcpy((char *)&v2223[127] + 8, &v2183[3928], 0x708uLL);
                                    v2223[244] = v2188;
                                    v2223[245] = v2189;
                                    v2223[246] = v2190;
                                    v2224 = v2191;
                                    v2223[240] = v2184;
                                    v2223[241] = v2185;
                                    v2223[242] = v2186;
                                    v2223[243] = v2187;
                                    v2225 = v1990.i8[0];
                                    v2227 = v1988.i8[0];
                                    v2226 = &off_24CA00398;
                                    memcpy(v2228, v2195, sizeof(v2228));
                                    v2229 = v1986.i64[0];
                                    v2230 = 1;
                                  }
                                  v2231 = v2159;
                                  v2232 = v2160;
                                  v2233 = v2161;
                                  v2234 = v2162;
                                  v2239 = v2167;
                                  v2240 = v2168;
                                  v2241 = v2169;
                                  v2242 = v2170;
                                  v2235 = v2163;
                                  v2236 = v2164;
                                  v2237 = v2165;
                                  v2238 = v2166;
                                  v2245 = v2173;
                                  v2246 = v2174;
                                  v2243 = v2171;
                                  v2244 = v2172;
                                  v2250 = v2178;
                                  v2248 = v2176;
                                  v2249 = v2177;
                                  v2247 = v2175;
                                  v2252 = v2180;
                                  v2251 = v2179;
                                  v2253 = v840;
                                  v2254 = v841;
                                  v2220 = 0uLL;
                                  v847 = v846 - 8016;
                                  v2255 = v2182;
                                  if (v846 >= 0x1F50)
                                  {
                                    v848 = 0;
                                    v849 = &v1921[8016 * v1918
                                                + 16 * ((uint64_t)(v846 - (_QWORD)(categoryc + 8016)) >> 4)];
                                    v850 = v849 + 8008;
                                    v1988.i64[0] = (uint64_t)(v849 + 5864);
                                    v1986.i64[0] = (uint64_t)(v849 + 5848);
                                    v2013 = v849 + 7680;
                                    v1990.i64[0] = v846 + 8008;
                                    v851 = v846 + 7680;
                                    do
                                    {
                                      v871 = &v1975[v848];
                                      _X22 = v847 + v848;
                                      __asm { PRFM            #0, [X22,#0x3EA0] }
                                      *(_QWORD *)v871 = *(_QWORD *)(v847 + v848);
                                      *(_OWORD *)(v871 + 8) = *(_OWORD *)(v847 + v848 + 8);
                                      *((_QWORD *)v871 + 3) = *(_QWORD *)(v847 + v848 + 24);
                                      v1975[v848 + 32] = 0;
                                      v871[64] = 0;
                                      __asm { PRFM            #0, [X22,#0x3EE0] }
                                      if (*(_BYTE *)(v847 + v848 + 64))
                                      {
                                        v875 = *(_OWORD *)(_X22 + 48);
                                        *(_OWORD *)&v1975[v848 + 32] = *(_OWORD *)(_X22 + 32);
                                        *(_OWORD *)&v1975[v848 + 48] = v875;
                                        v871[64] = 1;
                                      }
                                      _X27 = _X22 + 23712;
                                      *(_OWORD *)(v871 + 72) = *(_OWORD *)(_X22 + 72);
                                      memcpy(v871 + 88, (const void *)(_X22 + 88), 0x708uLL);
                                      memcpy(v871 + 1888, (const void *)(_X22 + 1888), 0x708uLL);
                                      v877 = *(_OWORD *)(_X22 + 3688);
                                      v878 = *(_OWORD *)(_X22 + 3704);
                                      v879 = *(_OWORD *)(_X22 + 3736);
                                      *(_OWORD *)(v871 + 3720) = *(_OWORD *)(_X22 + 3720);
                                      *(_OWORD *)(v871 + 3736) = v879;
                                      *(_OWORD *)(v871 + 3688) = v877;
                                      *(_OWORD *)(v871 + 3704) = v878;
                                      v880 = *(_OWORD *)(_X22 + 3752);
                                      v881 = *(_OWORD *)(_X22 + 3768);
                                      v882 = *(_OWORD *)(_X22 + 3784);
                                      *((_QWORD *)v871 + 475) = *(_QWORD *)(_X22 + 3800);
                                      *(_OWORD *)(v871 + 3768) = v881;
                                      *(_OWORD *)(v871 + 3784) = v882;
                                      *(_OWORD *)(v871 + 3752) = v880;
                                      v883 = *(_QWORD *)(_X22 + 3920);
                                      v884 = *(_OWORD *)(_X22 + 3872);
                                      v885 = *(_OWORD *)(_X22 + 3888);
                                      *((_OWORD *)v871 + 244) = *(_OWORD *)(_X22 + 3904);
                                      *((_OWORD *)v871 + 243) = v885;
                                      *((_OWORD *)v871 + 242) = v884;
                                      *((_QWORD *)v871 + 490) = v883;
                                      v886 = *(_OWORD *)(_X22 + 3808);
                                      v887 = *(_OWORD *)(_X22 + 3824);
                                      v888 = *(_OWORD *)(_X22 + 3840);
                                      *((_OWORD *)v871 + 241) = *(_OWORD *)(_X22 + 3856);
                                      *((_OWORD *)v871 + 240) = v888;
                                      *((_OWORD *)v871 + 239) = v887;
                                      *((_OWORD *)v871 + 238) = v886;
                                      v871[3928] = 0;
                                      *(_BYTE *)(v851 + v848) = 0;
                                      __asm { PRFM            #0, [X27] }
                                      if (LOBYTE(v2013[v848 / 8]))
                                      {
                                        _X27 = _X22 + 21880;
                                        memcpy(v871 + 3928, (const void *)(v847 + v848 + 3928), 0x708uLL);
                                        v891 = &v1975[v848];
                                        v892 = *(_OWORD *)(v847 + v848 + 5744);
                                        v893 = *(_OWORD *)(v847 + v848 + 5760);
                                        v894 = *(_OWORD *)(v847 + v848 + 5776);
                                        *((_OWORD *)v891 + 358) = *(_OWORD *)(v847 + v848 + 5728);
                                        *((_OWORD *)v891 + 361) = v894;
                                        *((_OWORD *)v891 + 360) = v893;
                                        *((_OWORD *)v891 + 359) = v892;
                                        v895 = *(_OWORD *)(v847 + v848 + 5808);
                                        v896 = *(_OWORD *)(v847 + v848 + 5824);
                                        v897 = *(_QWORD *)(v847 + v848 + 5840);
                                        *((_OWORD *)v891 + 362) = *(_OWORD *)(v847 + v848 + 5792);
                                        *((_QWORD *)v891 + 730) = v897;
                                        *((_OWORD *)v891 + 364) = v896;
                                        *((_OWORD *)v891 + 363) = v895;
                                        __asm { PRFM            #0, [X27] }
                                        v1975[v848 + 5848] = *(_BYTE *)(v1986.i64[0] + v848);
                                        v1975[v848 + 5864] = *(_BYTE *)(v1988.i64[0] + v848);
                                        *((_QWORD *)v891 + 732) = &off_24CA00398;
                                        memcpy(&v1975[v848 + 5872], (const void *)(v847 + v848 + 5872), 0x708uLL);
                                        *((_QWORD *)v891 + 959) = *(_QWORD *)(v847 + v848 + 7672);
                                        *(_BYTE *)(v851 + v848) = 1;
                                      }
                                      _X8 = _X22 + 24024;
                                      v853 = &v1975[v848];
                                      *((_WORD *)v853 + 3844) = *(_WORD *)(v847 + v848 + 7688);
                                      v854 = *(_OWORD *)(v847 + v848 + 7696);
                                      v855 = *(_OWORD *)(v847 + v848 + 7712);
                                      *((_QWORD *)v853 + 966) = *(_QWORD *)(v847 + v848 + 7728);
                                      *((_OWORD *)v853 + 482) = v855;
                                      *((_OWORD *)v853 + 481) = v854;
                                      v856 = &v1975[v848 + 7736];
                                      v858 = *(_OWORD *)(v847 + v848 + 7816);
                                      v857 = *(_OWORD *)(v847 + v848 + 7832);
                                      v859 = *(_OWORD *)(v847 + v848 + 7800);
                                      *((_QWORD *)v853 + 981) = *(_QWORD *)(v847 + v848 + 7848);
                                      *((_OWORD *)v856 + 5) = v858;
                                      *((_OWORD *)v856 + 6) = v857;
                                      *((_OWORD *)v856 + 4) = v859;
                                      v860 = *(_OWORD *)(v847 + v848 + 7736);
                                      v861 = *(_OWORD *)(v847 + v848 + 7752);
                                      v862 = *(_OWORD *)(v847 + v848 + 7784);
                                      *((_OWORD *)v856 + 2) = *(_OWORD *)(v847 + v848 + 7768);
                                      *((_OWORD *)v856 + 3) = v862;
                                      *(_OWORD *)v856 = v860;
                                      *((_OWORD *)v856 + 1) = v861;
                                      v863 = *(_OWORD *)(v847 + v848 + 7936);
                                      v864 = *(_OWORD *)(v847 + v848 + 7952);
                                      v865 = *(_QWORD *)(v847 + v848 + 7968);
                                      *((_OWORD *)v853 + 495) = *(_OWORD *)(v847 + v848 + 7920);
                                      *((_QWORD *)v853 + 996) = v865;
                                      *((_OWORD *)v853 + 497) = v864;
                                      *((_OWORD *)v853 + 496) = v863;
                                      v866 = *(_OWORD *)(v847 + v848 + 7856);
                                      v867 = *(_OWORD *)(v847 + v848 + 7872);
                                      v868 = *(_OWORD *)(v847 + v848 + 7888);
                                      *((_OWORD *)v853 + 494) = *(_OWORD *)(v847 + v848 + 7904);
                                      *((_OWORD *)v853 + 493) = v868;
                                      *((_OWORD *)v853 + 492) = v867;
                                      *((_OWORD *)v853 + 491) = v866;
                                      v869 = *(_QWORD *)(v847 + v848 + 7976);
                                      v1975[v848 + 7984] = *(_BYTE *)(v847 + v848 + 7984);
                                      *((_QWORD *)v853 + 997) = v869;
                                      __asm { PRFM            #0, [X8] }
                                      *((_QWORD *)v853 + 999) = *(_QWORD *)(v847 + v848 + 7992);
                                      *((_QWORD *)v853 + 1000) = *(_QWORD *)(v847 + v848 + 8000);
                                      *(_OWORD *)(v847 + v848 + 7992) = 0u;
                                      *(_BYTE *)(v1990.i64[0] + v848) = v850[v848 / 8];
                                      v848 += 8016;
                                    }
                                    while (v847 + v848 < (unint64_t)v1975);
                                    v846 = (unint64_t)&v1975[v848];
                                  }
                                  *(_QWORD *)(v2068 + 5712) = v846;
                                  if (v1975 != categoryc + 8016)
                                  {
                                    v944 = 0;
                                    v945 = &v1921[8016 * v1918 + 16 * ((v1975 - (categoryc + 8016)) >> 4)];
                                    v946 = v945 - 8008;
                                    v947 = v945 - 8016;
                                    do
                                    {
                                      *(_QWORD *)&v1975[v944 - 8016] = *(_QWORD *)&v947[v944];
                                      sub_20F5B67C0((uint64_t)&v1975[v944 - 8008], (uint64_t)&v946[v944]);
                                      v1975[v944 - 8] = *(_BYTE *)(v847 + v944 - 8);
                                      v944 -= 8016;
                                    }
                                    while (-16 * ((v1975 - (categoryc + 8016)) >> 4) != v944);
                                  }
                                  *(_QWORD *)categoryc = __szc;
                                  v948 = &v1921[8016 * v1918];
                                  sub_20F5B67C0((uint64_t)(v948 + 8), (uint64_t)&object[8]);
                                  v948[8008] = v2255;
                                  v949 = v2254;
                                  if (v2254)
                                  {
                                    v950 = (unint64_t *)&v2254->__shared_owners_;
                                    do
                                      v951 = __ldaxr(v950);
                                    while (__stlxr(v951 - 1, v950));
                                    if (!v951)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
                                      std::__shared_weak_count::__release_weak(v949);
                                    }
                                  }
                                }
                              }
                              v841 = (std::__shared_weak_count *)*((_QWORD *)&v2220 + 1);
                            }
                            if (v841)
                            {
                              v1091 = (unint64_t *)&v841->__shared_owners_;
                              do
                                v1092 = __ldaxr(v1091);
                              while (__stlxr(v1092 - 1, v1091));
                              if (!v1092)
                              {
                                ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
                                std::__shared_weak_count::__release_weak(v841);
                              }
                            }
                            v2019[2] = 0;
                            *v2019 = 0;
                            *(int64x2_t *)(v2068 + 5840) = vaddq_s64(*(int64x2_t *)(v2068 + 5840), (int64x2_t)xmmword_2103B4900);
                            v596 = 1;
                          }
                          else
                          {
                            v596 = 0;
                            --*(_DWORD *)(v614 + 8);
                            --*(_DWORD *)(v623 + 8);
                            v2160 = 0u;
                            --*(_DWORD *)(v629 + 8);
                            --*(_DWORD *)(v635 + 8);
                            v2161 = 0u;
                            --*(_DWORD *)(v839 + 8);
                            v2162 = 0;
                          }
                        }
                        v637 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                        if (*((_QWORD *)&v2181 + 1))
                        {
                          v638 = (unint64_t *)(*((_QWORD *)&v2181 + 1) + 8);
                          do
                            v639 = __ldaxr(v638);
                          while (__stlxr(v639 - 1, v638));
                          if (!v639)
                          {
                            ((void (*)(std::__shared_weak_count *, void *))v637->__on_zero_shared)(v637, v581);
                            std::__shared_weak_count::__release_weak(v637);
                          }
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2149[0] + 1);
                        goto LABEL_738;
                      }
                    }
                    v480 = 0;
                  }
                  else
                  {
                    v480 = 0;
                    v479 = 0;
                  }
LABEL_614:
                  v483 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0);
                  v460 = __szc;
                  if (v483)
                    abort();
                  goto LABEL_615;
                }
              }
              v256 = v257;
              goto LABEL_488;
            }
          }
        }
LABEL_305:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) > 5)
          goto LABEL_392;
        v264 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
        v265 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
        v266 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
        if (((v266 == 0) & ~v265) != 0)
          goto LABEL_392;
        __sza = v264;
        *(_QWORD *)v2183 = v2107;
        *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v2183[24] = 5;
        *(_QWORD *)&v2183[32] = "unknown file";
        *(_DWORD *)&v2183[40] = 556;
        *(_QWORD *)&v2183[48] = "unknown function";
        *(_QWORD *)&v2183[56] = 0;
        *(_QWORD *)&v2183[64] = 0;
        v267 = **(_QWORD **)v2183;
        v268 = (const char *)(**(_QWORD **)v2183 + 16);
        v2010 = v268;
        if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
        {
          v268 = *(const char **)(v267 + 16);
          v269 = *(_QWORD *)(v267 + 24);
          v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v271 & 1) != 0)
            goto LABEL_311;
        }
        else
        {
          v269 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
          v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v270 & 1) != 0)
            goto LABEL_311;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2150);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
          if (v2151[8] && (v2151[7] & 0x80000000) != 0)
            operator delete(v2150[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_311:
        if (byte_254A4A4F8[23] >= 0)
          v272 = byte_254A4A4F8;
        else
          v272 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v273 = byte_254A4A4F8[23];
        else
          v273 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v272, v268);
        if (v273 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v273 >= 0x17)
        {
          v275 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v273 | 7) != 0x17)
            v275 = v273 | 7;
          v276 = v275 + 1;
          v274 = operator new(v275 + 1);
          *(_QWORD *)&object[24] = v276 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v274;
          *(_QWORD *)&object[16] = v273;
LABEL_324:
          memmove(v274, v272, v273);
          goto LABEL_325;
        }
        object[31] = v273;
        v274 = &object[8];
        if (v273)
          goto LABEL_324;
LABEL_325:
        v274[v273] = 0;
        object[32] = 1;
        if (v269 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v269 >= 0x17)
        {
          v279 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v269 | 7) != 0x17)
            v279 = v269 | 7;
          v280 = v279 + 1;
          v277 = operator new(v279 + 1);
          *(_QWORD *)&object[56] = v280 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v277;
          *(_QWORD *)&object[48] = v269;
        }
        else
        {
          object[63] = v269;
          v277 = &object[40];
          if (!v269)
          {
            object[40] = 0;
            object[64] = 1;
            v278 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_329;
            goto LABEL_335;
          }
        }
        memmove(v277, v268, v269);
        v277[v269] = 0;
        object[64] = 1;
        v278 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_329:
          if (object[32])
            goto LABEL_336;
          goto LABEL_338;
        }
LABEL_335:
        operator delete(*(void **)&object[40]);
        if (object[32])
        {
LABEL_336:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
        }
LABEL_338:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v266 && *(_QWORD *)(v266 + 24))
        {
          v281 = _os_log_pack_size();
          v282 = (std::__shared_weak_count_vtbl *)operator new(v281, (std::align_val_t)8uLL);
          v283 = (std::__shared_weak_count *)operator new();
          v284 = v283;
          v283->__shared_owners_ = 0;
          v285 = (unint64_t *)&v283->__shared_owners_;
          v283->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v283->__shared_weak_owners_ = 0;
          v283[1].__vftable = v282;
          *(_QWORD *)object = v282;
          *(_QWORD *)&object[8] = v282;
          *(_QWORD *)&object[16] = v283;
          do
            v286 = __ldxr(v285);
          while (__stxr(v286 + 1, v285));
          memset(&object[24], 0, 24);
          do
            v287 = __ldaxr(v285);
          while (__stlxr(v287 - 1, v285));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v284);
          }
          v288 = *(_QWORD *)object;
          v289 = (_DWORD *)_os_log_pack_fill();
          *v289 = 67109120;
          v289[1] = v242;
          v290 = (char *)operator new();
          v291 = *(unsigned __int8 *)(v267 + 39);
          v292 = v2010;
          if ((v291 & 0x80u) != 0)
          {
            v292 = *(const char **)(v267 + 16);
            v291 = *(_QWORD *)(v267 + 24);
          }
          *(_QWORD *)v290 = v288;
          *(_OWORD *)(v290 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v290 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v290 + 5) = v292;
          *((_QWORD *)v290 + 6) = v291;
          v290[56] = 16;
          *(_QWORD *)&v2149[0] = 0;
          v2150[0] = v290;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v266 + 24) + 40))(*(_QWORD *)(v266 + 24), v2150);
          v293 = v2150[0];
          v2150[0] = 0;
          if (v293)
          {
            v294 = (std::__shared_weak_count *)*((_QWORD *)v293 + 4);
            if (v294)
            {
              v295 = (unint64_t *)&v294->__shared_owners_;
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
            v297 = (std::__shared_weak_count *)*((_QWORD *)v293 + 2);
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldaxr(v298);
              while (__stlxr(v299 - 1, v298));
              if (!v299)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
            MEMORY[0x212BC6398](v293, 0x10F0C40B62ED6C6);
            v300 = *(_QWORD *)&v2149[0];
            *(_QWORD *)&v2149[0] = 0;
            if (v300)
            {
              v301 = *(std::__shared_weak_count **)(v300 + 32);
              if (v301)
              {
                v302 = (unint64_t *)&v301->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              v304 = *(std::__shared_weak_count **)(v300 + 16);
              if (v304)
              {
                v305 = (unint64_t *)&v304->__shared_owners_;
                do
                  v306 = __ldaxr(v305);
                while (__stlxr(v306 - 1, v305));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                  std::__shared_weak_count::__release_weak(v304);
                }
              }
              MEMORY[0x212BC6398](v300, 0x10F0C40B62ED6C6);
            }
          }
          v307 = *(std::__shared_weak_count **)&object[32];
          v308 = __sza;
          if (*(_QWORD *)&object[32])
          {
            v309 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v311 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v312 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
        }
        else
        {
          os_log_type_enabled(v278, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109120;
          *(_DWORD *)&object[4] = v242;
          v314 = (void *)_os_log_send_and_compose_impl();
          v308 = __sza;
          if (v314)
            free(v314);
        }
        if (v308)
        {
          sub_20E8C003C((uint64_t)v2183, "The requested IMU State (%d) does not exist in the StateSet", v242);
          sub_20E863570((uint64_t)v2183);
        }
        sub_20E863570((uint64_t)v2183);
        v315 = *(std::__shared_weak_count **)&v2183[64];
        if (*(_QWORD *)&v2183[64])
        {
          v316 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
LABEL_392:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 5)
        {
          v318 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
          v319 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
          v320 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
          if (((v320 == 0) & ~v319) == 0)
          {
            *(_QWORD *)v2183 = v2107;
            *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v2183[24] = 5;
            *(_QWORD *)&v2183[32] = "unknown file";
            *(_DWORD *)&v2183[40] = 244;
            *(_QWORD *)&v2183[48] = "unknown function";
            *(_QWORD *)&v2183[56] = 0;
            *(_QWORD *)&v2183[64] = 0;
            v321 = **(_QWORD **)v2183;
            v322 = (const char *)(**(_QWORD **)v2183 + 16);
            __szb = v322;
            if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
            {
              v322 = *(const char **)(v321 + 16);
              v323 = *(_QWORD *)(v321 + 24);
              v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v325 & 1) == 0)
              {
LABEL_1080:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2150);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                  if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                    operator delete(v2150[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v323 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
              v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v324 & 1) == 0)
                goto LABEL_1080;
            }
            if (byte_254A4A4F8[23] >= 0)
              v326 = byte_254A4A4F8;
            else
              v326 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v327 = byte_254A4A4F8[23];
            else
              v327 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v326, v322);
            if (v327 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v327 >= 0x17)
            {
              v329 = (v327 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v327 | 7) != 0x17)
                v329 = v327 | 7;
              v330 = v329 + 1;
              v328 = operator new(v329 + 1);
              *(_QWORD *)&object[24] = v330 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v328;
              *(_QWORD *)&object[16] = v327;
            }
            else
            {
              object[31] = v327;
              v328 = &object[8];
              if (!v327)
              {
LABEL_412:
                v328[v327] = 0;
                object[32] = 1;
                if (v323 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v323 >= 0x17)
                {
                  v333 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v323 | 7) != 0x17)
                    v333 = v323 | 7;
                  v334 = v333 + 1;
                  v331 = operator new(v333 + 1);
                  *(_QWORD *)&object[56] = v334 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v331;
                  *(_QWORD *)&object[48] = v323;
                }
                else
                {
                  object[63] = v323;
                  v331 = &object[40];
                  if (!v323)
                  {
                    object[40] = 0;
                    object[64] = 1;
                    v332 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_416;
LABEL_422:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_423;
                    goto LABEL_425;
                  }
                }
                memmove(v331, v322, v323);
                v331[v323] = 0;
                object[64] = 1;
                v332 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_422;
LABEL_416:
                if (object[32])
                {
LABEL_423:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_425:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v320 && *(_QWORD *)(v320 + 24))
                {
                  v335 = _os_log_pack_size();
                  v336 = (std::__shared_weak_count_vtbl *)operator new(v335, (std::align_val_t)8uLL);
                  v337 = (std::__shared_weak_count *)operator new();
                  v338 = v337;
                  v337->__shared_owners_ = 0;
                  v339 = (unint64_t *)&v337->__shared_owners_;
                  v337->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v337->__shared_weak_owners_ = 0;
                  v337[1].__vftable = v336;
                  *(_QWORD *)object = v336;
                  *(_QWORD *)&object[8] = v336;
                  *(_QWORD *)&object[16] = v337;
                  do
                    v340 = __ldxr(v339);
                  while (__stxr(v340 + 1, v339));
                  memset(&object[24], 0, 24);
                  do
                    v341 = __ldaxr(v339);
                  while (__stlxr(v341 - 1, v339));
                  if (!v341)
                  {
                    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                    std::__shared_weak_count::__release_weak(v338);
                  }
                  v342 = *(_QWORD *)object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v343 = (char *)operator new();
                  v344 = *(unsigned __int8 *)(v321 + 39);
                  v345 = __szb;
                  if ((v344 & 0x80u) != 0)
                  {
                    v345 = *(const char **)(v321 + 16);
                    v344 = *(_QWORD *)(v321 + 24);
                  }
                  *(_QWORD *)v343 = v342;
                  *(_OWORD *)(v343 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v343 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v343 + 5) = v345;
                  *((_QWORD *)v343 + 6) = v344;
                  v343[56] = 16;
                  *(_QWORD *)&v2149[0] = 0;
                  v2150[0] = v343;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v320 + 24) + 40))(*(_QWORD *)(v320 + 24), v2150);
                  v346 = v2150[0];
                  v2150[0] = 0;
                  if (v346)
                  {
                    v347 = (std::__shared_weak_count *)*((_QWORD *)v346 + 4);
                    if (v347)
                    {
                      v348 = (unint64_t *)&v347->__shared_owners_;
                      do
                        v349 = __ldaxr(v348);
                      while (__stlxr(v349 - 1, v348));
                      if (!v349)
                      {
                        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                        std::__shared_weak_count::__release_weak(v347);
                      }
                    }
                    v350 = (std::__shared_weak_count *)*((_QWORD *)v346 + 2);
                    if (v350)
                    {
                      v351 = (unint64_t *)&v350->__shared_owners_;
                      do
                        v352 = __ldaxr(v351);
                      while (__stlxr(v352 - 1, v351));
                      if (!v352)
                      {
                        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                        std::__shared_weak_count::__release_weak(v350);
                      }
                    }
                    MEMORY[0x212BC6398](v346, 0x10F0C40B62ED6C6);
                    v353 = *(_QWORD *)&v2149[0];
                    *(_QWORD *)&v2149[0] = 0;
                    if (v353)
                    {
                      v354 = *(std::__shared_weak_count **)(v353 + 32);
                      if (v354)
                      {
                        v355 = (unint64_t *)&v354->__shared_owners_;
                        do
                          v356 = __ldaxr(v355);
                        while (__stlxr(v356 - 1, v355));
                        if (!v356)
                        {
                          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                          std::__shared_weak_count::__release_weak(v354);
                        }
                      }
                      v357 = *(std::__shared_weak_count **)(v353 + 16);
                      if (v357)
                      {
                        v358 = (unint64_t *)&v357->__shared_owners_;
                        do
                          v359 = __ldaxr(v358);
                        while (__stlxr(v359 - 1, v358));
                        if (!v359)
                        {
                          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                          std::__shared_weak_count::__release_weak(v357);
                        }
                      }
                      MEMORY[0x212BC6398](v353, 0x10F0C40B62ED6C6);
                    }
                  }
                  v360 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v361 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  v363 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v364 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v365 = __ldaxr(v364);
                    while (__stlxr(v365 - 1, v364));
                    if (!v365)
                    {
                      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                      std::__shared_weak_count::__release_weak(v363);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v332, OS_LOG_TYPE_ERROR);
                  *(_WORD *)object = 0;
                  v366 = (void *)_os_log_send_and_compose_impl();
                  if (v366)
                    free(v366);
                }
                if (v318)
                {
                  sub_20E8C003C((uint64_t)v2183, "Unable to add IMU State");
                  sub_20E863570((uint64_t)v2183);
                }
                sub_20E863570((uint64_t)v2183);
                v367 = *(std::__shared_weak_count **)&v2183[64];
                if (*(_QWORD *)&v2183[64])
                {
                  v368 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                goto LABEL_479;
              }
            }
            memmove(v328, v326, v327);
            goto LABEL_412;
          }
        }
LABEL_479:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
LABEL_480:
        v370 = (_QWORD *)v229[1];
        if (v370)
        {
          do
          {
            v371 = v370;
            v370 = (_QWORD *)*v370;
          }
          while (v370);
        }
        else
        {
          do
          {
            v371 = (_QWORD *)v229[2];
            _ZF = *v371 == (_QWORD)v229;
            v229 = v371;
          }
          while (!_ZF);
        }
        v229 = v371;
        if (v371 == v2058)
          goto LABEL_1125;
      }
    }
    goto LABEL_1125;
  }
  if (*(_BYTE *)(v70 + 1317))
  {
    v203 = *(double *)v202;
    v204 = *(_QWORD *)(v202 + 8);
    v205 = *(double *)(v202 + 16);
    v206 = *(_QWORD *)(v202 + 24);
    *(_OWORD *)v2150 = *(_OWORD *)(v202 + 32);
    *(_QWORD *)v2151 = *(_QWORD *)(v202 + 48);
    v207 = *(_QWORD *)(v202 + 56);
    v2149[0] = *(_OWORD *)(v202 + 64);
    *(_QWORD *)&v2149[1] = *(_QWORD *)(v202 + 80);
    v208 = *(_OWORD *)(v202 + 88);
    *(_QWORD *)&v2107[1] = *(_QWORD *)(v202 + 104);
    v2107[0] = v208;
    v209 = *(_OWORD *)(v202 + 112);
    *(_QWORD *)&v2108[1] = *(_QWORD *)(v202 + 128);
    v2108[0] = v209;
    v2099 = *(_QWORD *)(v202 + 152);
    v2097 = *(_OWORD *)(v202 + 136);
    v210 = *(_OWORD *)(v202 + 160);
    v211 = *(_OWORD *)(v202 + 176);
    v212 = *(_OWORD *)(v202 + 192);
    v213 = *(_OWORD *)(v202 + 208);
    *(_QWORD *)&object[64] = *(_QWORD *)(v202 + 224);
    *(_OWORD *)&object[48] = v213;
    *(_OWORD *)&object[32] = v212;
    *(_OWORD *)object = v210;
    *(_OWORD *)&object[16] = v211;
    v214 = *(_OWORD *)(v202 + 232);
    v5 = *(int64x2_t *)(v202 + 248);
    v215 = *(_OWORD *)(v202 + 264);
    v216 = *(_OWORD *)(v202 + 280);
    *(_QWORD *)&v2183[64] = *(_QWORD *)(v202 + 296);
    *(_OWORD *)&v2183[48] = v216;
    *(_OWORD *)&v2183[32] = v215;
    *(double *)(v70 + 176) = v203 * *(double *)(v70 + 1320);
    *(_OWORD *)v2183 = v214;
    *(int64x2_t *)&v2183[16] = v5;
    v217 = v205 * *(double *)(v70 + 1328);
    *(_QWORD *)(v70 + 184) = v204;
    *(double *)(v70 + 192) = v217;
    *(_QWORD *)(v70 + 200) = v206;
    *(_OWORD *)(v70 + 208) = *(_OWORD *)v2150;
    *(_QWORD *)(v70 + 224) = *(_QWORD *)v2151;
    *(_QWORD *)(v70 + 232) = v207;
    v218 = v2149[0];
    *(_QWORD *)(v70 + 256) = *(_QWORD *)&v2149[1];
    *(_OWORD *)(v70 + 240) = v218;
    v219 = v2107[0];
    *(_QWORD *)(v70 + 280) = *(_QWORD *)&v2107[1];
    *(_OWORD *)(v70 + 264) = v219;
    v220 = v2108[0];
    *(_QWORD *)(v70 + 304) = *(_QWORD *)&v2108[1];
    *(_OWORD *)(v70 + 288) = v220;
    *(_QWORD *)(v70 + 328) = v2099;
    *(_OWORD *)(v70 + 312) = v2097;
    v221 = *(_OWORD *)object;
    v222 = *(_OWORD *)&object[16];
    v223 = *(_OWORD *)&object[32];
    v224 = *(_OWORD *)&object[48];
    *(_QWORD *)(v70 + 400) = *(_QWORD *)&object[64];
    *(_OWORD *)(v70 + 368) = v223;
    *(_OWORD *)(v70 + 384) = v224;
    *(_OWORD *)(v70 + 336) = v221;
    *(_OWORD *)(v70 + 352) = v222;
    v225 = *(_OWORD *)&v2183[16];
    *(_OWORD *)(v70 + 408) = *(_OWORD *)v2183;
    v226 = *(_OWORD *)&v2183[32];
    v227 = *(_OWORD *)&v2183[48];
    *(_QWORD *)(v70 + 472) = *(_QWORD *)&v2183[64];
    *(_OWORD *)(v70 + 440) = v226;
    *(_OWORD *)(v70 + 456) = v227;
    *(_OWORD *)(v70 + 424) = v225;
    goto LABEL_261;
  }
  v1312 = *(_OWORD *)(v202 + 16);
  *(_OWORD *)(v70 + 176) = *(_OWORD *)v202;
  *(_OWORD *)(v70 + 192) = v1312;
  v1313 = *(_OWORD *)(v202 + 32);
  *(_QWORD *)(v70 + 224) = *(_QWORD *)(v202 + 48);
  *(_OWORD *)(v70 + 208) = v1313;
  *(_QWORD *)(v70 + 232) = *(_QWORD *)(v202 + 56);
  v1314 = *(_OWORD *)(v202 + 64);
  *(_QWORD *)(v70 + 256) = *(_QWORD *)(v202 + 80);
  *(_OWORD *)(v70 + 240) = v1314;
  v1315 = *(_OWORD *)(v202 + 88);
  *(_QWORD *)(v70 + 280) = *(_QWORD *)(v202 + 104);
  *(_OWORD *)(v70 + 264) = v1315;
  v1316 = *(_OWORD *)(v202 + 112);
  *(_QWORD *)(v70 + 304) = *(_QWORD *)(v202 + 128);
  *(_OWORD *)(v70 + 288) = v1316;
  v1317 = *(_OWORD *)(v202 + 136);
  *(_QWORD *)(v70 + 328) = *(_QWORD *)(v202 + 152);
  *(_OWORD *)(v70 + 312) = v1317;
  v1319 = *(_OWORD *)(v202 + 192);
  v1318 = *(_OWORD *)(v202 + 208);
  v1320 = *(_OWORD *)(v202 + 176);
  *(_QWORD *)(v70 + 400) = *(_QWORD *)(v202 + 224);
  *(_OWORD *)(v70 + 368) = v1319;
  *(_OWORD *)(v70 + 384) = v1318;
  *(_OWORD *)(v70 + 352) = v1320;
  *(_OWORD *)(v70 + 336) = *(_OWORD *)(v202 + 160);
  v1321 = *(_OWORD *)(v202 + 264);
  v1322 = *(_OWORD *)(v202 + 280);
  v1323 = *(_QWORD *)(v202 + 296);
  *(_OWORD *)(v70 + 424) = *(_OWORD *)(v202 + 248);
  *(_QWORD *)(v70 + 472) = v1323;
  *(_OWORD *)(v70 + 440) = v1321;
  *(_OWORD *)(v70 + 456) = v1322;
  *(_OWORD *)(v70 + 408) = *(_OWORD *)(v202 + 232);
  v1324 = *(_QWORD *)(v70 + 8);
  v229 = *(_QWORD **)(v1324 + 48);
  v2058 = (_QWORD *)(v1324 + 56);
  if (v229 != (_QWORD *)(v1324 + 56))
    goto LABEL_262;
LABEL_1125:
  if (*(_BYTE *)(v2068 + 2144))
  {
    v1325 = v2068;
    if (!*(_BYTE *)(v2068 + 2149))
    {
      v1332 = *(_QWORD **)(v2068 + 8);
      v1333 = v1332[8];
      v2066 = v1332[39] * v1333;
      if (v2066)
      {
        v1334 = 0;
        v2038 = v1332[8];
        v2032 = *(_QWORD **)(v2068 + 8);
        while (1)
        {
          v1335 = v1334 / v1333;
          v1336 = v1334 % v1333;
          v1337 = (_QWORD *)v1332[6];
          if (((v1334 % v1333) & 0x8000000000000000) != 0)
          {
            do
            {
              v1349 = (_QWORD *)*v1337;
              if (*v1337)
              {
                do
                {
                  v1338 = v1349;
                  v1349 = (_QWORD *)v1349[1];
                }
                while (v1349);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (_ZF);
              }
              v1337 = v1338;
              _CF = __CFADD__(v1336++, 1);
            }
            while (!_CF);
          }
          else if (v1336)
          {
            do
            {
              v1348 = (_QWORD *)v1337[1];
              if (v1348)
              {
                do
                {
                  v1338 = v1348;
                  v1348 = (_QWORD *)*v1348;
                }
                while (v1348);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (!_ZF);
              }
              v1337 = v1338;
              v1506 = v1336-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1338 = (_QWORD *)v1332[6];
          }
          v1339 = *((_OWORD *)v1338 + 2);
          v1340 = (_QWORD *)v1332[37];
          if (v1335 < 0)
          {
            do
            {
              v1350 = (_QWORD *)*v1340;
              if (*v1340)
              {
                do
                {
                  v1341 = v1350;
                  v1350 = (_QWORD *)v1350[1];
                }
                while (v1350);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (_ZF);
              }
              v1340 = v1341;
              _CF = __CFADD__(v1335++, 1);
            }
            while (!_CF);
          }
          else if (v1333 <= v1334)
          {
            do
            {
              v1351 = (_QWORD *)v1340[1];
              if (v1351)
              {
                do
                {
                  v1341 = v1351;
                  v1351 = (_QWORD *)*v1351;
                }
                while (v1351);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (!_ZF);
              }
              v1340 = v1341;
              v1506 = v1335-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1341 = (_QWORD *)v1332[37];
          }
          v1342 = *((_DWORD *)v1341 + 8);
          *(_OWORD *)v2150 = v1339;
          *(_DWORD *)v2151 = v1342;
          v1343 = *(_QWORD *)(v1325 + 16);
          if (v1343)
            break;
LABEL_1136:
          if (++v1334 == v2066)
            goto LABEL_1127;
        }
        v1344 = *(unsigned int *)(v1325 + 2156);
        *(_OWORD *)object = *(_OWORD *)v2150;
        *(_QWORD *)&object[16] = *(_QWORD *)v2151;
        memset(&object[24], 0, 24);
        sub_20F61F394(v1343, (uint64_t)object);
        v1345 = *(_QWORD *)(v1325 + 5760);
        if (v1345 == *(_QWORD *)(v1325 + 5752))
        {
          v2060 = 0;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
            goto LABEL_1248;
        }
        else
        {
          v2060 = *(_DWORD *)(v1345 - 208) + 1;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
          {
LABEL_1248:
            if (v1346)
            {
              v1414 = (void *)v1346;
              if (*(_QWORD *)&object[32] != v1346)
              {
                v1415 = *(_QWORD *)&object[32] - 40;
                v1416 = (void (***)(uint64_t))(*(_QWORD *)&object[32] - 40);
                do
                {
                  v1417 = *v1416;
                  v1416 -= 5;
                  (*v1417)(v1415);
                  _ZF = v1415 == v1346;
                  v1415 = (uint64_t)v1416;
                }
                while (!_ZF);
                v1414 = *(void **)&object[24];
              }
              *(_QWORD *)&object[32] = v1346;
              operator delete(v1414);
            }
            v1333 = v2038;
            goto LABEL_1136;
          }
        }
        if (!*(_QWORD *)(*(_QWORD *)(v1325 + 16) + 8))
          goto LABEL_1248;
        while (1)
        {
          v1352 = *(_QWORD *)(v1325 + 16);
          v1355 = *(uint64_t **)(v1352 + 8);
          v1353 = (uint64_t *)(v1352 + 8);
          v1354 = v1355;
          if (v1355)
          {
            v1356 = *(_DWORD *)(v1346 + 16);
            v1357 = *(_QWORD *)(v1346 + 8);
            v1358 = v1353;
            do
            {
              v1359 = v1354[4];
              if (v1359 < v1357)
              {
                ++v1354;
              }
              else if (v1359 == v1357)
              {
                if (*((_DWORD *)v1354 + 10) < v1356)
                  ++v1354;
                else
                  v1358 = v1354;
              }
              else
              {
                v1358 = v1354;
              }
              v1354 = (uint64_t *)*v1354;
            }
            while (v1354);
            if (v1358 != v1353)
            {
              v1360 = v1358[4];
              if (v1357 >= v1360 && (v1357 != v1360 || v1356 >= *((_DWORD *)v1358 + 10)))
                break;
            }
          }
LABEL_1176:
          v1346 += 40;
          if (v1346 == v1347)
          {
            v1346 = *(_QWORD *)&object[24];
            goto LABEL_1248;
          }
        }
        v1361 = v1358[6];
        v1362 = (std::__shared_weak_count *)v1358[7];
        if (!v1362)
          goto LABEL_1197;
        v1363 = (unint64_t *)&v1362->__shared_owners_;
        do
          v1364 = __ldxr(v1363);
        while (__stxr(v1364 + 1, v1363));
        do
          v1365 = __ldxr(v1363);
        while (__stxr(v1365 + 1, v1363));
        do
          v1366 = __ldaxr(v1363);
        while (__stlxr(v1366 - 1, v1363));
        if (!v1366)
        {
          ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
          std::__shared_weak_count::__release_weak(v1362);
          if (!v1361)
            goto LABEL_1242;
        }
        else
        {
LABEL_1197:
          if (!v1361)
            goto LABEL_1242;
        }
        if (v1344 <= (uint64_t)(*(_QWORD *)(v1361 + 544) - *(_QWORD *)(v1361 + 536)) >> 5)
        {
          if (!*(_BYTE *)(v1361 + 528)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 132, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1367 = *(char **)(v1325 + 5560);
          v1368 = *(char **)(v1325 + 5568);
          if (v1368 != v1367)
          {
            v1369 = (v1368 - v1367) >> 4;
            do
            {
              v1370 = v1369 >> 1;
              v1371 = (unsigned int *)&v1367[16 * (v1369 >> 1)];
              v1373 = *v1371;
              v1372 = (char *)(v1371 + 4);
              v1369 += ~(v1369 >> 1);
              if (v1373 < v1356)
                v1367 = v1372;
              else
                v1369 = v1370;
            }
            while (v1369);
          }
          if (v1367 == v1368 || *(_DWORD *)v1367 != v1356)
          {
            v1374 = v1361 + 40;
            v1375 = *(unsigned __int8 *)(v1361 + 528);
            v1376 = *(_BYTE *)(v1361 + 528) ? v1361 + 40 : 0;
            *(_DWORD *)v2183 = v1356;
            v2183[4] = 1;
            *(_QWORD *)&v2183[8] = v1376;
            if (v1375)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                _Q1 = *(_OWORD *)(v1361 + 104);
                _D3 = *(_QWORD *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1876:
                  abort();
                }
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1876;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                v1380 = *(uint64_t **)(v1361 + 136);
                v1381 = *v1380;
                v1382 = (double *)v1380[2];
                v1383 = v1380[4];
                v1384 = (double *)v1380[6];
                _D1 = *(double *)(v1361 + 56) - v1382[1];
                v1386 = *(double *)(v1361 + 64) - v1382[2];
                _Q3.f64[0] = *(float64_t *)(v1381 + 16);
                _Q7 = *(_OWORD *)(v1381 + 48);
                _Q3.f64[1] = *(float64_t *)(v1381 + 40);
                v1389 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), *(double *)(v1361 + 48) - *v1382), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), _D1), _Q3, v1386);
                __asm { FMLA            D2, D1, V7.D[1] }
                v1391 = _D2 + *(double *)(v1381 + 64) * v1386;
                v1392 = v1389.f64[0] - *v1384;
                _D2 = v1389.f64[1] - v1384[1];
                v1394 = v1391 - v1384[2];
                _Q3.f64[0] = *(float64_t *)(v1383 + 16);
                _Q4 = *(int64x2_t *)v1383;
                _Q6 = *(int64x2_t *)(v1383 + 24);
                _Q16 = *(_OWORD *)(v1383 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v1383 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1383, _Q6), v1392), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1383, _Q6), _D2), _Q3, v1394);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v1394 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                *(_QWORD *)&v2183[16] = sqrt(_D2+ (_Q3.f64[0] + v1394 * *(double *)(v1383 + 64))* (_Q3.f64[0] + *(double *)(v1383 + 64) * v1394));
                _Q1 = *(_OWORD *)(v1361 + 104);
                _Q3.f64[0] = *(float64_t *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1876;
                }
                if (sub_20F76CD14((uint64_t)v2005, (unsigned int *)v2183))
                {
                  *(_BYTE *)(v2068 + 6636) = 0;
                  *(_DWORD *)(v2068 + 6632) = 0;
                }
              }
            }
          }
          v1405 = v1361 + 40;
          if (!*(_BYTE *)(v1361 + 528))
            v1405 = 0;
          v1406 = *(_DWORD *)(v1405 + 40);
          v1407 = (__int128 *)*(unsigned int *)(v1405 + 48);
          if ((_DWORD)v1407 == *(_DWORD *)v2151 && *(void **)(v1405 + 32) == v2150[0] && v1406 == LODWORD(v2150[1]))
            goto LABEL_1241;
          v1410 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
          if (v1410)
          {
            v1411 = v1410[13];
            if (v1356 == *(_DWORD *)(v1361 + 32))
              goto LABEL_1240;
          }
          else
          {
            v1411 = 0;
            if (v1356 == *(_DWORD *)(v1361 + 32))
            {
LABEL_1240:
              sub_20F76CFA4(v1406, v1407, v2150[1], *(unsigned int *)v2151, v1356, v1411, v2068 + 3144, v2060++, (__n128)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v1346 + 24) + 8)), *(float *)(*(_QWORD *)(v1346 + 24) + 32), v2068 + 4760);
LABEL_1241:
              v1325 = v2068;
              v1332 = v2032;
              goto LABEL_1242;
            }
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 144, (uint64_t)"landmarkID == track->ID().key()", 31, (uint64_t)"Landmark ID and track ID is different", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1356 = *(_DWORD *)(v1361 + 32);
          goto LABEL_1240;
        }
LABEL_1242:
        if (v1362)
        {
          v1412 = (unint64_t *)&v1362->__shared_owners_;
          do
            v1413 = __ldaxr(v1412);
          while (__stlxr(v1413 - 1, v1412));
          if (!v1413)
          {
            ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
            std::__shared_weak_count::__release_weak(v1362);
          }
        }
        goto LABEL_1176;
      }
    }
LABEL_1127:
    v1327 = *(uint64_t **)(v1325 + 24);
    v1326 = *(uint64_t **)(v1325 + 32);
    if (v1327 != v1326)
    {
      v2059 = *(_QWORD *)(v2068 + 8);
      __szf = *(_QWORD *)(v2059 + 64);
      if (__szf)
      {
        v1328 = *(_QWORD *)(v2059 + 312);
        if (v1328)
        {
          v1329 = *(unsigned int *)(v2068 + 2152);
          v1330 = *(_QWORD *)(v2068 + 5760);
          if (v1330 == *(_QWORD *)(v2068 + 5752))
            v1331 = 0;
          else
            v1331 = *(_DWORD *)(v1330 - 208) + 1;
          v1418 = v1328 * __szf;
          v1419 = *(double *)(v2068 + 2168);
          v2039 = *(uint64_t **)(v1325 + 32);
          v2033 = *(unsigned int *)(v2068 + 2152);
          while (1)
          {
            v1420 = *v1327;
            v1421 = *(_QWORD *)(*v1327 + 544);
            v1422 = *(_QWORD *)(*v1327 + 536);
            if (v1329 <= (v1421 - v1422) >> 6 && *(_DWORD *)(v1420 + 560) != 2)
              break;
LABEL_1257:
            if (++v1327 == v1326)
              goto LABEL_1340;
          }
          v1423 = *(_DWORD *)(v1420 + 32);
          v1424 = *(_QWORD *)(*(_QWORD *)(v2068 + 8) + 64);
          *(_QWORD *)v2183 = *(_QWORD *)(v2068 + 8);
          *(_QWORD *)&v2183[8] = v1424;
          *(_QWORD *)&v2183[16] = 0;
          *(_QWORD *)&v2149[0] = v1422;
          *(_QWORD *)object = v2183;
          *(_QWORD *)&object[8] = v2149;
          *(_QWORD *)&object[16] = v2059;
          *(_QWORD *)&object[24] = __szf;
          *(_QWORD *)&object[32] = v1418;
          *(_QWORD *)&object[40] = v1421;
          *(_QWORD *)&object[48] = v1420;
          v1425 = sub_20F6236F0((uint64_t **)object);
          if (!v1425)
            goto LABEL_1340;
          v1426 = (float32x2_t *)v1425;
          if (!*(_BYTE *)(*v1327 + 528)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1427 = *(char **)(v2068 + 5560);
          v1428 = *(char **)(v2068 + 5568);
          if (v1428 != v1427)
          {
            v1429 = (v1428 - v1427) >> 4;
            do
            {
              v1430 = v1429 >> 1;
              v1431 = (unsigned int *)&v1427[16 * (v1429 >> 1)];
              v1433 = *v1431;
              v1432 = (char *)(v1431 + 4);
              v1429 += ~(v1429 >> 1);
              if (v1433 < v1423)
                v1427 = v1432;
              else
                v1429 = v1430;
            }
            while (v1429);
          }
          if (v1427 == v1428)
          {
            v1435 = *v1327;
          }
          else
          {
            v1434 = *(_DWORD *)v1427;
            v1435 = *v1327;
            if (v1434 == v1423)
            {
LABEL_1289:
              if (*(_BYTE *)(v1435 + 528))
                v1468 = v1435 + 40;
              else
                v1468 = 0;
              v1469 = *(void **)(v1468 + 32);
              v1470 = *(_DWORD *)(v1468 + 40);
              v1471 = (__int128 *)*(unsigned int *)(v1468 + 48);
              do
              {
                v1472 = *(_QWORD *)&v2183[16];
                v1473 = *(_QWORD *)&v2183[16] / *(_QWORD *)&v2183[8];
                v1474 = *(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8];
                v1475 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                if (((*(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8]) & 0x8000000000000000) != 0)
                {
                  do
                  {
                    v1487 = (_QWORD *)*v1475;
                    if (*v1475)
                    {
                      do
                      {
                        v1476 = v1487;
                        v1487 = (_QWORD *)v1487[1];
                      }
                      while (v1487);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (_ZF);
                    }
                    v1475 = v1476;
                    _CF = __CFADD__(v1474++, 1);
                  }
                  while (!_CF);
                }
                else if (v1474)
                {
                  do
                  {
                    v1486 = (_QWORD *)v1475[1];
                    if (v1486)
                    {
                      do
                      {
                        v1476 = v1486;
                        v1486 = (_QWORD *)*v1486;
                      }
                      while (v1486);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (!_ZF);
                    }
                    v1475 = v1476;
                    v1506 = v1474-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1476 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                }
                v1477 = (void *)v1476[4];
                v1478 = (void *)v1476[5];
                v1479 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                if (v1473 < 0)
                {
                  do
                  {
                    v1488 = (_QWORD *)*v1479;
                    if (*v1479)
                    {
                      do
                      {
                        v1480 = v1488;
                        v1488 = (_QWORD *)v1488[1];
                      }
                      while (v1488);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (_ZF);
                    }
                    v1479 = v1480;
                    _CF = __CFADD__(v1473++, 1);
                  }
                  while (!_CF);
                }
                else if (*(_QWORD *)&v2183[8] <= *(_QWORD *)&v2183[16])
                {
                  do
                  {
                    v1489 = (_QWORD *)v1479[1];
                    if (v1489)
                    {
                      do
                      {
                        v1480 = v1489;
                        v1489 = (_QWORD *)*v1489;
                      }
                      while (v1489);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (!_ZF);
                    }
                    v1479 = v1480;
                    v1506 = v1473-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1480 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                }
                v1481 = *((_DWORD *)v1480 + 8);
                v2150[0] = v1477;
                v2150[1] = v1478;
                *(_DWORD *)v2151 = v1481;
                if ((_DWORD)v1471 != v1481 || v1469 != v1477 || v1470 != (_DWORD)v1478)
                {
                  v1484 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
                  if (v1484)
                    v1485 = v1484[13];
                  else
                    v1485 = 0;
                  sub_20F76CFA4(v1470, v1471, v2150[1], *(unsigned int *)v2151, v1423, v1485, v2068 + 3144, v1331++, (__n128)vcvtq_f64_f32(v1426[1]), v1419 * v1426[4].f32[0], v2068 + 4760);
                  v1472 = *(_QWORD *)&v2183[16];
                }
                *(_QWORD *)&v2183[16] = v1472 + 1;
                if (v1472 + 1 == v1418)
                  break;
                *(_QWORD *)&v2149[0] += 64;
                if (*(_QWORD *)&v2149[0] == v1421)
                  break;
                v1426 = (float32x2_t *)sub_20F6236F0((uint64_t **)object);
              }
              while (v1426);
              v1326 = v2039;
              v1329 = v2033;
              goto LABEL_1257;
            }
          }
          v1436 = (void *)(v1435 + 40);
          v1437 = *(unsigned __int8 *)(v1435 + 528);
          if (v1437)
            v1438 = v1436;
          else
            v1438 = 0;
          LODWORD(v2150[0]) = v1423;
          BYTE4(v2150[0]) = 1;
          v2150[1] = v1438;
          if (v1437)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v1436 + 24))(v1436))
            {
              v1439 = (double *)v2150[1];
              _Q1 = *((_OWORD *)v2150[1] + 4);
              _D3 = *((_QWORD *)v2150[1] + 9);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *((double *)v2150[1] + 10) * *((double *)v2150[1] + 10)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v1439 = (double *)v2150[1];
              if (!v2150[1])
                goto LABEL_1288;
            }
            if ((*(unsigned int (**)(double *))(*(_QWORD *)v1439 + 24))(v1439))
            {
              v1443 = (uint64_t *)*((_QWORD *)v1439 + 12);
              v1444 = *v1443;
              v1445 = (double *)v1443[2];
              v1446 = v1443[4];
              v1447 = (double *)v1443[6];
              _D1 = v1439[2] - v1445[1];
              v1449 = v1439[3] - v1445[2];
              _Q3.f64[0] = *(float64_t *)(v1444 + 16);
              _Q7 = *(_OWORD *)(v1444 + 48);
              _Q3.f64[1] = *(float64_t *)(v1444 + 40);
              v1452 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), v1439[1] - *v1445), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), _D1), _Q3, v1449);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1454 = _D2 + *(double *)(v1444 + 64) * v1449;
              v1455 = v1452.f64[0] - *v1447;
              _D2 = v1452.f64[1] - v1447[1];
              v1457 = v1454 - v1447[2];
              _Q3.f64[0] = *(float64_t *)(v1446 + 16);
              _Q4 = *(int64x2_t *)v1446;
              _Q6 = *(int64x2_t *)(v1446 + 24);
              _Q16 = *(_OWORD *)(v1446 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v1446 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1446, _Q6), v1455), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1446, _Q6), _D2), _Q3, v1457);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v1457 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)v2151 = sqrt(_D2+ (_Q3.f64[0] + v1457 * *(double *)(v1446 + 64))* (_Q3.f64[0] + *(double *)(v1446 + 64) * v1457));
              _Q1 = *((_OWORD *)v1439 + 4);
              _Q3.f64[0] = v1439[9];
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + v1439[10] * v1439[10]) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (sub_20F76CD14((uint64_t)v2005, (unsigned int *)v2150))
              {
                *(_BYTE *)(v2068 + 6636) = 0;
                *(_DWORD *)(v2068 + 6632) = 0;
              }
            }
          }
LABEL_1288:
          v1435 = *v1327;
          *(_DWORD *)(*v1327 + 560) = 1;
          goto LABEL_1289;
        }
      }
    }
  }
LABEL_1340:
  v2067 = *(unsigned int *)(v2068 + 2152);
  v2023 = *(unsigned int *)(v2068 + 1920);
  v1490 = *(_QWORD *)(v2068 + 24);
  for (k = *(_QWORD *)(v2068 + 32); v1490 != k; v1490 += 8)
  {
    if (v2067 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v1490 + 544) - *(_QWORD *)(*(_QWORD *)v1490 + 536)) >> 6)
    {
      v1492 = *(_DWORD *)(*(_QWORD *)v1490 + 32);
      v1493 = *(char **)(v2068 + 5560);
      v1494 = *(char **)(v2068 + 5568);
      if (v1494 != v1493)
      {
        v1495 = (v1494 - v1493) >> 4;
        do
        {
          v1496 = v1495 >> 1;
          v1497 = (unsigned int *)&v1493[16 * (v1495 >> 1)];
          v1499 = *v1497;
          v1498 = (char *)(v1497 + 4);
          v1495 += ~(v1495 >> 1);
          if (v1499 < v1492)
            v1493 = v1498;
          else
            v1495 = v1496;
        }
        while (v1495);
      }
      if (v1493 != v1494 && *(_DWORD *)v1493 == v1492)
      {
        if (sub_20F623A0C((uint64_t)v2005, v1492))
        {
          *(_WORD *)(v2068 + 6636) = 0;
          *(_DWORD *)(v2068 + 6632) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        *(_DWORD *)(*(_QWORD *)v1490 + 560) = 0;
      }
    }
  }
  v1500 = sub_20F770048((uint64_t)v2005);
  v1501 = (uint64_t *)v2068;
  v1503 = *(_QWORD *)(v2068 + 24);
  v1502 = *(_QWORD *)(v2068 + 32);
  v1504 = v1502 - v1503;
  v1505 = (v1502 - v1503) >> 3;
  v1506 = v1505 > v2023 && *(_DWORD *)(v2068 + 2184) + v1500 > v2023;
  if (v1506)
  {
    if (*(_BYTE *)(v2068 + 2104))
    {
      v1541 = *(_QWORD **)(v2068 + 8);
      v1542 = v1541[8];
      v1543 = (_QWORD *)v1541[6];
      if ((v1542 & 0x1FFFFFFFELL) != 0)
      {
        v1544 = (v1542 >> 1);
        do
        {
          v1545 = (_QWORD *)v1543[1];
          if (v1545)
          {
            do
            {
              v1546 = v1545;
              v1545 = (_QWORD *)*v1545;
            }
            while (v1545);
          }
          else
          {
            do
            {
              v1546 = (_QWORD *)v1543[2];
              _ZF = *v1546 == (_QWORD)v1543;
              v1543 = v1546;
            }
            while (!_ZF);
          }
          v1543 = v1546;
          v1506 = v1544-- <= 1;
        }
        while (!v1506);
      }
      else
      {
        v1546 = (_QWORD *)v1541[6];
      }
      v1578 = v1541[225];
      *(_OWORD *)object = *((_OWORD *)v1546 + 2);
      v1579 = (_QWORD *)v1541[37];
      if (v1579 == v1541 + 38)
      {
        v2020 = (int64x2_t **)(v1578 + 40);
      }
      else
      {
        v1501 = (uint64_t *)v2068;
        do
        {
          *(_DWORD *)&object[16] = *((_DWORD *)v1579 + 8);
          v1580 = sub_20E9DF85C(v1541 + 223, (uint64_t *)object);
          if (v1580)
          {
            v2020 = (int64x2_t **)(v1580 + 5);
            v1501 = (uint64_t *)v2068;
            goto LABEL_1479;
          }
          v1581 = (_QWORD *)v1579[1];
          if (v1581)
          {
            do
            {
              v1582 = v1581;
              v1581 = (_QWORD *)*v1581;
            }
            while (v1581);
          }
          else
          {
            do
            {
              v1582 = (_QWORD *)v1579[2];
              _ZF = *v1582 == (_QWORD)v1579;
              v1579 = v1582;
            }
            while (!_ZF);
          }
          v1541 = *(_QWORD **)(v2068 + 8);
          v1579 = v1582;
        }
        while (v1582 != v1541 + 38);
        v2020 = 0;
      }
LABEL_1479:
      v1586 = v1501 + 4;
      v1587 = v1501 + 3;
      v1588 = (v1501[4] - v1501[3]) >> 3;
      *(int64x2_t *)object = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v2041 = v1501 + 396;
      sub_20F623C14((uint64_t)(v1501 + 396), v1588, object);
      v2150[0] = *(void **)(*(_QWORD *)(v2068 + 8) + 48);
      v1589 = v1501[3];
      v1590 = (uint64_t *)v1501[4];
      v1591 = 126 - 2 * __clz((uint64_t)((uint64_t)v1590 - v1589) >> 3);
      *(_QWORD *)object = v2068;
      *(_QWORD *)&object[8] = v2150;
      *(_QWORD *)v2183 = object;
      if (v1590 == (uint64_t *)v1589)
        v1592 = 0;
      else
        v1592 = v1591;
      sub_20F7702C4(v1589, v1590, (_QWORD ***)v2183, v1592, 1);
      v2035 = v2068 + 3216;
      bzero((void *)(v2068 + 3216), 0x480uLL);
      v1593 = (*v1586 - *v1587) >> 3;
      v2183[0] = 0;
      v2063 = (uint64_t *)(v2068 + 3192);
      sub_20EDCA4D0(v2068 + 3192, v1593, v2183);
      v1594 = *v1587;
      if (*v1586 == *v1587)
      {
        v1596 = 0;
        v2017 = *v1586;
        v1594 = *v1586;
        v2029 = 0;
        if (v2023)
          goto LABEL_1558;
LABEL_1849:
        v1868 = v2017;
        v1501 = (uint64_t *)v2068;
        if (v2017 != v1594)
        {
          v1869 = 0;
          do
          {
            if (((*(_QWORD *)(*v2063 + ((v1869 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1869) & 1) == 0)
            {
              v1870 = *(_QWORD *)(v1594 + 8 * v1869);
              if (sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(v1870 + 32)))
              {
                *(_WORD *)(v2068 + 6636) = 0;
                *(_DWORD *)(v2068 + 6632) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              *(_DWORD *)(v1870 + 560) = 0;
              v1501 = (uint64_t *)v2068;
              v1594 = *(_QWORD *)(v2068 + 24);
              v1868 = *(_QWORD *)(v2068 + 32);
            }
            ++v1869;
          }
          while (v1869 < (v1868 - v1594) >> 3);
        }
        goto LABEL_1361;
      }
      v1595 = 0;
      v1596 = 0;
      v1597 = 0;
      if ((unint64_t)((*v1586 - *v1587) >> 3) <= 1)
        v1598 = 1;
      else
        v1598 = (*v1586 - *v1587) >> 3;
      v1599 = v2068;
LABEL_1489:
      v1600 = *(_QWORD *)(v1594 + 8 * v1597);
      v1601 = *(_QWORD *)(v1600 + 32);
      if (*(_DWORD *)(v1600 + 560) == 2)
      {
        v1602 = *(char **)(v2068 + 5560);
        v1603 = *(char **)(v2068 + 5568);
        if (v1603 != v1602)
        {
          v1604 = (v1603 - v1602) >> 4;
          do
          {
            v1605 = v1604 >> 1;
            v1606 = (unsigned int *)&v1602[16 * (v1604 >> 1)];
            v1608 = *v1606;
            v1607 = (char *)(v1606 + 4);
            v1604 += ~(v1604 >> 1);
            if (v1608 < v1601)
              v1602 = v1607;
            else
              v1604 = v1605;
          }
          while (v1604);
        }
        if (v1602 != v1603 && *(_DWORD *)v1602 == (_DWORD)v1601)
          goto LABEL_1498;
      }
      v1632 = *(int8x8_t *)(v2068 + 3112);
      if (!*(_QWORD *)&v1632)
        goto LABEL_1533;
      v1633 = *(_QWORD *)(v1600 + 32);
      v1634 = (uint8x8_t)vcnt_s8(v1632);
      v1634.i16[0] = vaddlv_u8(v1634);
      if (v1634.u32[0] > 1uLL)
      {
        v1635 = *(_QWORD *)(v1600 + 32);
        if (*(_QWORD *)&v1632 <= v1633)
          v1635 = v1633 % *(_QWORD *)&v1632;
      }
      else
      {
        v1635 = (v1632.i32[0] - 1) & v1633;
      }
      v1636 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1635);
      if (!v1636 || (v1637 = *v1636) == 0)
      {
LABEL_1533:
        v1649 = *(char **)(v2068 + 5560);
        v1650 = *(char **)(v2068 + 5568);
        if (v1650 != v1649)
        {
          v1651 = (v1650 - v1649) >> 4;
          do
          {
            v1652 = v1651 >> 1;
            v1653 = (unsigned int *)&v1649[16 * (v1651 >> 1)];
            v1655 = *v1653;
            v1654 = (char *)(v1653 + 4);
            v1651 += ~(v1651 >> 1);
            if (v1655 < v1601)
              v1649 = v1654;
            else
              v1651 = v1652;
          }
          while (v1651);
        }
        if (v1649 == v1650 || *(_DWORD *)v1649 != (_DWORD)v1601)
        {
          *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
          ++v1596;
        }
        goto LABEL_1488;
      }
      if (v1634.u32[0] < 2uLL)
      {
        v1638 = *(_QWORD *)&v1632 - 1;
        while (1)
        {
          v1640 = v1637[1];
          if (v1640 == v1633)
          {
            if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
              goto LABEL_1525;
          }
          else if ((v1640 & v1638) != v1635)
          {
            goto LABEL_1533;
          }
          v1637 = (uint64_t *)*v1637;
          if (!v1637)
            goto LABEL_1533;
        }
      }
      while (1)
      {
        v1639 = v1637[1];
        if (v1639 == v1633)
        {
          if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
          {
LABEL_1525:
            v1642 = *(char **)(v2068 + 5560);
            v1643 = *(char **)(v2068 + 5568);
            if (v1643 != v1642)
            {
              v1644 = (v1643 - v1642) >> 4;
              do
              {
                v1645 = v1644 >> 1;
                v1646 = (unsigned int *)&v1642[16 * (v1644 >> 1)];
                v1648 = *v1646;
                v1647 = (char *)(v1646 + 4);
                v1644 += ~(v1644 >> 1);
                if (v1648 < v1601)
                  v1642 = v1647;
                else
                  v1644 = v1645;
              }
              while (v1644);
            }
            if (v1642 == v1643 || *(_DWORD *)v1642 != (_DWORD)v1601)
              goto LABEL_1533;
LABEL_1498:
            v1609 = (double *)(*v2041 + 16 * v1597);
            v1610 = *v1609;
            if (*v1609 <= 6.28318531)
            {
              v1631 = v1609[1];
            }
            else
            {
              v1611 = v1600 + 40;
              if (!*(_BYTE *)(v1600 + 528))
                v1611 = 0;
              _Q1 = *(_OWORD *)(v1611 + 8);
              v1613 = (double *)v2020[2];
              v1614 = v2020[4];
              v1615 = (double *)v2020[6];
              v1616 = *(double *)&_Q1 - *v1613;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1613[1];
              v1617 = *(double *)(v1611 + 24) - v1613[2];
              *(_QWORD *)&v1618.f64[0] = (*v2020)[1].i64[0];
              _Q7 = (*v2020)[3];
              *(_QWORD *)&v1618.f64[1] = (*v2020)[2].i64[1];
              v1620 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1616), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1618, v1617);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1622 = _D2 + *(double *)(*v2020)[4].i64 * v1617;
              _D2 = v1620.f64[1] - v1615[1];
              v1624 = v1622 - v1615[2];
              *(_QWORD *)&v1618.f64[0] = v1614[1].i64[0];
              _Q7 = v1614[3];
              *(_QWORD *)&v1618.f64[1] = v1614[2].i64[1];
              __szk = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), v1620.f64[0] - *v1615), (float64x2_t)vzip2q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), _D2), v1618, v1624);
              __asm { FMLA            D1, D2, V7.D[1] }
              v1626 = *(double *)&_Q1 + *(double *)v1614[4].i64 * v1624;
              *(float *)&v1624 = __szk.f64[0];
              *(float *)&_Q1 = v1626;
              v1627 = v1594;
              v1610 = atan2f(*(float *)&v1624, *(float *)&_Q1) + 3.14159265;
              *v1609 = v1610;
              v1628 = __szk.f64[1];
              v1629 = sqrt(vmulq_f64(__szk, __szk).f64[0] + v1626 * v1626);
              v1630 = atan2f(v1628, v1629);
              v1594 = v1627;
              v1631 = v1630 + 1.57079633;
              v1609[1] = v1631;
            }
            v1641 = (unint64_t)(v1610 * 3.81971863) - ((unint64_t)(v1610 * 3.81971863) == 24);
            ++*(_DWORD *)(v2035
                        + 48 * v1641
                        + 4 * ((unint64_t)(v1631 * 3.81971863) - ((unint64_t)(v1631 * 3.81971863) == 12)));
            ++v1595;
            ++v1596;
            *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
LABEL_1488:
            if (++v1597 == v1598)
            {
              v1656 = 0;
              v1657 = 0;
              do
              {
                if ((*(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) & (1 << v1657)) == 0)
                {
                  v1682 = *(_QWORD *)(v1594 + 8 * v1657);
                  v1683 = *(_QWORD *)(v1682 + 544);
                  v1684 = *(_QWORD *)(v1682 + 536);
                  if (*(unsigned int *)(v1599 + 2112) <= (unint64_t)((v1683 - v1684) >> 6))
                  {
                    v1599 = v2068;
                    if (sub_20F623D44(v1684, v1683) >= (unint64_t)*(unsigned int *)(v2068 + 2108))
                    {
                      ++v1595;
                      ++v1596;
                      *(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) |= 1 << v1657;
                      if (v1595 >= v2023)
                      {
                        v1594 = *(_QWORD *)(v2068 + 24);
                        v2017 = *(_QWORD *)(v2068 + 32);
                        goto LABEL_1849;
                      }
                      v1685 = *v2041;
                      v1675 = *(double *)(*v2041 + v1656);
                      if (v1675 > 6.28318531)
                      {
                        v1658 = *(_QWORD *)(*(_QWORD *)(v2068 + 24) + 8 * v1657);
                        if (*(_BYTE *)(v1658 + 528))
                          v1659 = v1658 + 40;
                        else
                          v1659 = 0;
                        _Q1 = *(_OWORD *)(v1659 + 8);
                        v1661 = (double *)v2020[2];
                        v1662 = v2020[4];
                        v1663 = (double *)v2020[6];
                        v1664 = *(double *)&_Q1 - *v1661;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1661[1];
                        v1665 = *(double *)(v1659 + 24) - v1661[2];
                        *(_QWORD *)&v1666.f64[0] = (*v2020)[1].i64[0];
                        _Q7 = (*v2020)[3];
                        *(_QWORD *)&v1666.f64[1] = (*v2020)[2].i64[1];
                        v1668 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1664), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1666, v1665);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v1670 = _D2 + *(double *)(*v2020)[4].i64 * v1665;
                        _D2 = v1668.f64[1] - v1663[1];
                        v1672 = v1670 - v1663[2];
                        *(_QWORD *)&v1666.f64[0] = v1662[1].i64[0];
                        _Q7 = v1662[3];
                        *(_QWORD *)&v1666.f64[1] = v1662[2].i64[1];
                        __szl = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), v1668.f64[0] - *v1663), (float64x2_t)vzip2q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), _D2), v1666, v1672);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v1674 = *(double *)&_Q1 + *(double *)v1662[4].i64 * v1672;
                        *(float *)&v1672 = __szl.f64[0];
                        *(float *)&_Q1 = v1674;
                        v1675 = atan2f(*(float *)&v1672, *(float *)&_Q1) + 3.14159265;
                        v1676 = (double *)(v1685 + v1656);
                        *v1676 = v1675;
                        v1677 = __szl.f64[1];
                        v1678 = sqrt(vmulq_f64(__szl, __szl).f64[0] + v1674 * v1674);
                        v1679 = atan2f(v1677, v1678) + 1.57079633;
                        v1676[1] = v1679;
                      }
                      else
                      {
                        v1679 = *(double *)(v1685 + v1656 + 8);
                      }
                      v1680 = (unint64_t)(v1675 * 3.81971863) - ((unint64_t)(v1675 * 3.81971863) == 24);
                      v1681 = 4
                            * ((unint64_t)(v1679 * 3.81971863) - ((unint64_t)(v1679 * 3.81971863) == 12));
                      ++*(_DWORD *)(v2035 + 48 * v1680 + v1681);
                    }
                  }
                }
                ++v1657;
                v1594 = *(_QWORD *)(v1599 + 24);
                v1656 += 16;
              }
              while (v1657 < (*(_QWORD *)(v1599 + 32) - v1594) >> 3);
              v2017 = *(_QWORD *)(v1599 + 32);
              v2029 = v1595;
              if (v1595 >= v2023)
                goto LABEL_1849;
LABEL_1558:
              v1686 = (v2017 - v1594) >> 3;
              if (v2017 == v1594)
              {
                if (v1596 < v1686)
                {
                  while (1)
                    ;
                }
                goto LABEL_1849;
              }
              v1687 = 1;
LABEL_1563:
              if (v1596 >= v1686)
                goto LABEL_1849;
              __szh = v1596;
              v1688 = 0;
              v1689 = 0;
              v1690 = *v2063;
              while (1)
              {
                v1691 = *(_QWORD *)(v1690 + 8 * (v1689 >> 6));
                if ((v1691 & (1 << v1689)) == 0)
                {
                  v1692 = *v2041;
                  v1693 = *(double *)(*v2041 + v1688);
                  if (v1693 <= 6.28318531)
                  {
                    v1716 = *(double *)(v1692 + v1688 + 8);
                  }
                  else
                  {
                    v1694 = *(_QWORD *)(v1594 + 8 * v1689);
                    v1695 = *(_BYTE *)(v1694 + 528) ? v1694 + 40 : 0;
                    _Q1 = *(_OWORD *)(v1695 + 8);
                    v1697 = (double *)v2020[2];
                    v1698 = v2020[4];
                    v1699 = (double *)v2020[6];
                    v1700 = *(double *)&_Q1 - *v1697;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1697[1];
                    v1701 = *(double *)(v1695 + 24) - v1697[2];
                    *(_QWORD *)&v1702.f64[0] = (*v2020)[1].i64[0];
                    _Q7 = (*v2020)[3];
                    *(_QWORD *)&v1702.f64[1] = (*v2020)[2].i64[1];
                    v1704 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1700), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1702, v1701);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v1706 = _D2 + *(double *)(*v2020)[4].i64 * v1701;
                    _D2 = v1704.f64[1] - v1699[1];
                    v1708 = v1706 - v1699[2];
                    *(_QWORD *)&v1702.f64[0] = v1698[1].i64[0];
                    _Q7 = v1698[3];
                    *(_QWORD *)&v1702.f64[1] = v1698[2].i64[1];
                    __dstb = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), v1704.f64[0] - *v1699), (float64x2_t)vzip2q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), _D2), v1702, v1708);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v1710 = *(double *)&_Q1 + *(double *)v1698[4].i64 * v1708;
                    *(float *)&v1708 = __dstb.f64[0];
                    *(float *)&_Q1 = v1710;
                    v1711 = v1594;
                    v1693 = atan2f(*(float *)&v1708, *(float *)&_Q1) + 3.14159265;
                    v1712 = (double *)(v1692 + v1688);
                    *v1712 = v1693;
                    v1713 = __dstb.f64[1];
                    v1714 = sqrt(vmulq_f64(__dstb, __dstb).f64[0] + v1710 * v1710);
                    v1715 = atan2f(v1713, v1714);
                    v1594 = v1711;
                    v1716 = v1715 + 1.57079633;
                    v1712[1] = v1716;
                  }
                  v1717 = (unint64_t)(v1716 * 3.81971863) - ((unint64_t)(v1716 * 3.81971863) == 12);
                  v1718 = v2035
                        + 48 * ((unint64_t)(v1693 * 3.81971863) - ((unint64_t)(v1693 * 3.81971863) == 24));
                  v1719 = *(unsigned int *)(v1718 + 4 * v1717);
                  if (v1687 > v1719)
                  {
                    ++__szh;
                    *(_QWORD *)(v1690 + 8 * (v1689 >> 6)) = v1691 | (1 << v1689);
                    if (++v2029 >= v2023)
                    {
LABEL_1562:
                      ++v1687;
                      v1596 = __szh;
                      if (v2029 >= v2023)
                        goto LABEL_1849;
                      goto LABEL_1563;
                    }
                    *(_DWORD *)(v1718 + 4 * v1717) = v1719 + 1;
                  }
                }
                ++v1689;
                v1688 += 16;
                if (v1686 == v1689)
                  goto LABEL_1562;
              }
            }
            goto LABEL_1489;
          }
        }
        else
        {
          if (v1639 >= *(_QWORD *)&v1632)
            v1639 %= *(_QWORD *)&v1632;
          if (v1639 != v1635)
            goto LABEL_1533;
        }
        v1637 = (uint64_t *)*v1637;
        if (!v1637)
          goto LABEL_1533;
      }
    }
    v1547 = *(double *)(v2068 + 1992);
    v1548 = *(double *)(v2068 + 2000);
    v1549 = *(double *)(v2068 + 2008);
    v1550 = *(double *)(v2068 + 2016);
    v1551 = *(double *)(v2068 + 2024);
    v1552 = *(_DWORD *)(v2068 + 2100);
    v2028 = *(unsigned __int8 *)(v2068 + 2116);
    memset(v2183, 0, 24);
    v1553 = *(_QWORD **)(v2068 + 8);
    v1554 = v1553[39];
    v2003 = v1552;
    if (v1554)
    {
      if (v1554 >> 62)
        sub_20E867F44();
      v1555 = operator new(4 * v1554);
      v1554 = (unint64_t)&v1555[v1554];
      *(_QWORD *)v2183 = v1555;
      *(_QWORD *)&v2183[8] = v1555;
      *(_QWORD *)&v2183[16] = v1554;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
        goto LABEL_1424;
    }
    else
    {
      v1555 = 0;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
      {
LABEL_1424:
        v2034 = v1503;
        v2040 = v1502;
        __szg = v1502 - v1503;
        v2061 = (v1502 - v1503) >> 3;
        v1557 = v1555;
        v1558 = v1555;
        while (1)
        {
          if (!(unsigned __int16)*((_DWORD *)v1556 + 8))
            goto LABEL_1429;
          v1559 = HIWORD(*((_DWORD *)v1556 + 8));
          if ((unint64_t)v1557 < v1554)
          {
            *v1557++ = v1559;
            v1555 = v1557;
LABEL_1429:
            v1560 = (_QWORD *)v1556[1];
            if (v1560)
              goto LABEL_1448;
            goto LABEL_1450;
          }
          v1561 = ((char *)v1557 - v1558) >> 2;
          v1562 = v1561 + 1;
          if ((unint64_t)(v1561 + 1) >> 62)
          {
            *(_QWORD *)&v2183[8] = v1555;
            sub_20E867F44();
          }
          if ((uint64_t)(v1554 - (_QWORD)v1558) >> 1 > v1562)
            v1562 = (uint64_t)(v1554 - (_QWORD)v1558) >> 1;
          if (v1554 - (unint64_t)v1558 >= 0x7FFFFFFFFFFFFFFCLL)
            v1563 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1563 = v1562;
          if (v1563)
          {
            if (v1563 >> 62)
            {
              *(_QWORD *)&v2183[8] = v1555;
              sub_20E877A38();
            }
            v1564 = operator new(4 * v1563);
            v1565 = &v1564[4 * v1561];
            *v1565 = v1559;
            v1555 = v1565 + 1;
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1445;
          }
          else
          {
            v1564 = 0;
            v1565 = (_DWORD *)(4 * v1561);
            *(_DWORD *)(4 * v1561) = v1559;
            v1555 = (_DWORD *)(4 * v1561 + 4);
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1445;
          }
          v1567 = v1566 - 4;
          if (v1567 < 0xBC)
          {
            v1568 = v1557;
            goto LABEL_1444;
          }
          v1571 = ((char *)(v1557 - 1) - v1558) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v1564[(char *)v1557 - v1558 - 4 - v1571] > &v1564[(char *)v1557 - v1558 - 4])
          {
            v1568 = v1557;
            do
            {
LABEL_1444:
              v1569 = *--v1568;
              *--v1565 = v1569;
            }
            while (v1568 != (_DWORD *)v1558);
            goto LABEL_1445;
          }
          if ((_DWORD *)((char *)v1557 - v1571 - 4) > v1557 - 1)
          {
            v1568 = v1557;
            goto LABEL_1444;
          }
          if ((unint64_t)(v1558 - v1564) < 0x20)
          {
            v1568 = v1557;
            goto LABEL_1444;
          }
          v1572 = (v1567 >> 2) + 1;
          v1573 = 4 * (v1572 & 0x7FFFFFFFFFFFFFF8);
          v1568 = &v1557[v1573 / 0xFFFFFFFFFFFFFFFCLL];
          v1565 = (_DWORD *)((char *)v1565 - v1573);
          v1574 = &v1564[4 * v1561 - 16];
          v1575 = (__int128 *)(v1557 - 4);
          v1576 = v1572 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v1577 = *v1575;
            *(v1574 - 1) = *(v1575 - 1);
            *v1574 = v1577;
            v1574 -= 2;
            v1575 -= 2;
            v1576 -= 8;
          }
          while (v1576);
          if (v1572 != (v1572 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_1444;
LABEL_1445:
          v1554 = (unint64_t)&v1564[4 * v1563];
          *(_QWORD *)v2183 = v1565;
          *(_QWORD *)&v2183[16] = v1554;
          if (v1558)
            operator delete(v1558);
          v1557 = v1555;
          v1558 = v1565;
          v1560 = (_QWORD *)v1556[1];
          if (v1560)
          {
            do
            {
LABEL_1448:
              v1570 = v1560;
              v1560 = (_QWORD *)*v1560;
            }
            while (v1560);
            goto LABEL_1425;
          }
          do
          {
LABEL_1450:
            v1570 = (_QWORD *)v1556[2];
            _ZF = *v1570 == (_QWORD)v1556;
            v1556 = v1570;
          }
          while (!_ZF);
LABEL_1425:
          v1553 = *(_QWORD **)(v2068 + 8);
          v1556 = v1570;
          if (v1570 == v1553 + 38)
          {
            *(_QWORD *)&v2183[8] = v1555;
            v1505 = v2061;
            v1504 = __szg;
            memset(object, 0, 48);
            if (v2040 == v2034)
              goto LABEL_1476;
LABEL_1578:
            v1585 = v2068;
            if (v1504 >= 0x7FFFFFFFFFFFFFF9)
              sub_20E867F44();
            v1720 = 2 * v1504;
            v1584 = (double *)operator new(v1720);
            *(_QWORD *)object = v1584;
            *(_QWORD *)&object[8] = v1584;
            v2062 = &v1584[2 * v1505];
            *(_QWORD *)&object[16] = v2062;
            v1583 = (double *)operator new(v1720);
            *(_QWORD *)&object[24] = v1583;
            *(_QWORD *)&object[32] = v1583;
            v2007 = (char *)&v1583[2 * v1505];
            *(_QWORD *)&object[40] = v2007;
            goto LABEL_1580;
          }
        }
      }
    }
    memset(object, 0, 48);
    if (v1502 != v1503)
      goto LABEL_1578;
LABEL_1476:
    v2007 = 0;
    v2062 = 0;
    v1583 = 0;
    v1584 = 0;
    v1585 = v2068;
LABEL_1580:
    v2150[0] = operator new(0x10uLL);
    v2150[1] = v2150[0];
    *(_QWORD *)v2151 = (char *)v2150[0] + 16;
    v1725 = *(uint64_t **)(v1585 + 24);
    __dst = *(uint64_t **)(v1585 + 32);
    if (v1725 == __dst)
    {
      v1726 = 0;
      v2018 = 0;
      v1802 = (uint64_t)v1583;
      v1728 = v1583;
      v1727 = v1584;
      v1803 = 0;
      goto LABEL_1730;
    }
    v1726 = 0;
    v2018 = 0;
    v2021 = (uint64_t *)v1553[6];
    v1727 = v1584;
    v1728 = v1583;
    while (1)
    {
      v1730 = *(_QWORD *)(*v1725 + 536);
      v1731 = *(unsigned __int16 *)(v1730 + 18);
      v1732 = (unint64_t)(*(_QWORD *)(*v1725 + 544) - v1730) >> 6;
      if (!(_DWORD)v1732)
      {
        v1757 = -1000.0;
        v1758 = *(_DWORD *)(*v1725 + 32);
        if (!v2028)
          goto LABEL_1678;
        goto LABEL_1674;
      }
      v2042 = v1726;
      v2150[1] = v2150[0];
      v1733 = *v1725;
      v1734 = *(uint64_t **)(*v1725 + 536);
      v1735 = *(uint64_t **)(*v1725 + 544);
      if (v1734 != v1735)
        break;
      v1736 = *(_QWORD *)(v2068 + 8);
      v1737 = (uint64_t *)(v1736 + 56);
      v1738 = *(uint64_t **)(v1736 + 56);
      v1739 = v2021;
      if (!v1738)
        goto LABEL_1615;
LABEL_1604:
      v1747 = *v1734;
      v1748 = *((_DWORD *)v1734 + 2);
      v1749 = v1737;
      do
      {
        v1750 = v1738[4];
        if (v1750 < v1747)
        {
          ++v1738;
        }
        else if (v1750 == v1747)
        {
          if (*((_DWORD *)v1738 + 10) < v1748)
            ++v1738;
          else
            v1749 = v1738;
        }
        else
        {
          v1749 = v1738;
        }
        v1738 = (uint64_t *)*v1738;
      }
      while (v1738);
      if (v1749 == v1737 || (v1751 = v1749[4], v1747 < v1751) || v1747 == v1751 && *((_DWORD *)v1749 + 10) > v1748)
LABEL_1615:
        v1749 = v1737;
      v2036 = v1731;
      v1752 = v1583;
      if (v1739 == v1749)
      {
        v1753 = 0;
      }
      else
      {
        v1753 = 0;
        v1754 = v1739;
        do
        {
          v1755 = (uint64_t *)v1754[1];
          if (v1755)
          {
            do
            {
              v1756 = v1755;
              v1755 = (uint64_t *)*v1755;
            }
            while (v1755);
          }
          else
          {
            do
            {
              v1756 = (uint64_t *)v1754[2];
              _ZF = *v1756 == (_QWORD)v1754;
              v1754 = v1756;
            }
            while (!_ZF);
          }
          ++v1753;
          v1754 = v1756;
        }
        while (v1756 != v1749);
      }
      __szi = 0.0;
      if (v1550 == 0.0)
      {
        v1759 = 0.0;
LABEL_1646:
        v1726 = v2042;
        if (v1551 == 0.0)
          goto LABEL_1673;
LABEL_1668:
        v1777 = *(_QWORD *)(v1733 + 536);
        v1778 = *(_QWORD *)(v1733 + 544);
        while (v1778 != v1777)
        {
          v1779 = v1778 - 64;
          v1780 = *(_DWORD *)(v1778 - 48);
          v1778 -= 64;
          if (v1780 == *(_DWORD *)(v1777 + 16))
          {
            v1777 = v1779 + 64;
            break;
          }
        }
        _Q1 = *(_OWORD *)(v1777 - 24);
        _D2 = *(_QWORD *)(v1777 - 16);
        __asm { FMLA            D3, D2, V1.D[1] }
        __szi = *(double *)&_D3;
        goto LABEL_1673;
      }
      v1759 = 15.0;
      if (*(_QWORD *)(v1733 + 544) - (_QWORD)v1734 < 0x80uLL)
        goto LABEL_1646;
      v1760 = *((_DWORD *)v1734 + 4);
      v1761 = *(_QWORD *)(v1736 + 1768);
      if (!v1761)
        goto LABEL_1641;
      v1762 = v1736 + 1768;
      v1763 = v1736 + 1768;
      do
      {
        v1764 = *(_DWORD *)(v1761 + 32);
        v1765 = v1764 >= v1760;
        if (v1764 >= v1760)
          v1766 = (uint64_t *)v1761;
        else
          v1766 = (uint64_t *)(v1761 + 8);
        if (v1765)
          v1763 = v1761;
        v1761 = *v1766;
      }
      while (*v1766);
      if (v1763 != v1762 && *(_DWORD *)(v1763 + 32) <= v1760)
      {
        v1767 = *(_QWORD *)(v1763 + 40);
        v1768 = *(_DWORD *)(v1767 + 992);
        if (v1768 != -1)
        {
LABEL_1642:
          if (v1768 <= 7)
            goto LABEL_1643;
          goto LABEL_1654;
        }
      }
      else
      {
LABEL_1641:
        v1767 = 0;
        v1768 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_1642;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1887;
      }
      v1768 = *(_DWORD *)(v1767 + 992);
      if (v1768 <= 7)
      {
LABEL_1643:
        if (!v1768)
        {
LABEL_1882:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          goto LABEL_1888;
        }
LABEL_1655:
        v2015 = *(double *)(v1767 + 16);
        goto LABEL_1656;
      }
LABEL_1654:
      if (v1768 < 0xF)
        goto LABEL_1655;
      v2015 = *(double *)(v1767 + 16);
      if (v1768 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1887:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
LABEL_1888:
          abort();
        }
        if (!*(_DWORD *)(v1767 + 992))
          goto LABEL_1882;
      }
LABEL_1656:
      v1769 = *(float32x2_t **)(v1733 + 536);
      v1770 = *(float32x2_t **)(v1733 + 544);
      if (v1769 == v1770)
      {
        LODWORD(v1722) = 0;
        v1772 = 0;
      }
      else
      {
        v1771 = 0;
        v1772 = 0;
        v1773 = 1.0;
        LODWORD(v1722) = 0;
        do
        {
          while (v1769[2].i32[0] != v1760)
          {
            _D3 = v1724;
            v1769 += 8;
            if (v1769 == v1770)
              goto LABEL_1665;
          }
          _D3 = v1769[4];
          if ((v1771 & 1) != 0)
          {
            v1772 = vadd_f32(v1772, vmul_n_f32(vsub_f32(_D3, v1724), v1773));
            *(float *)&v1722 = *(float *)&v1722 + v1773;
            v1773 = v1773 * 1.2;
          }
          v1771 = 1;
          v1769 += 8;
          v1724 = _D3;
        }
        while (v1769 != v1770);
      }
LABEL_1665:
      v1774.f64[0] = v2015;
      v1774.f64[1] = *(float64_t *)(v1767 + 40);
      *(float32x2_t *)&v1774.f64[0] = vcvt_f32_f64(v1774);
      v1775 = vdiv_f32(v1772, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v1722, 0));
      v1776 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v1774.f64[0], *(float32x2_t *)&v1774.f64[0]), (int8x8_t)vcgtz_f32(v1775)), _D3), v1775);
      if (v1776.f32[1] < v1776.f32[0])
        v1776.f32[0] = v1776.f32[1];
      v1759 = fminf(fmaxf(v1776.f32[0], 0.0), 15.0);
      v1733 = *v1725;
      v1726 = v2042;
      if (v1551 != 0.0)
        goto LABEL_1668;
LABEL_1673:
      *(double *)&v1721 = v1550 * v1759
                        + v1549 * (double)v1753
                        + v1548 * (double)v1732
                        + v1547 * (double)(unint64_t)((((char *)v2150[1] - (char *)v2150[0]) >> 2) - 1);
      v1722 = v1551 * __szi;
      v1757 = v1551 * __szi + *(double *)&v1721;
      v1583 = v1752;
      v1731 = v2036;
      v1758 = *(_DWORD *)(v1733 + 32);
      if (!v2028)
        goto LABEL_1678;
LABEL_1674:
      v1783 = *(__int32 **)&v2183[8];
      v1784 = wmemchr(*(__int32 **)v2183, v1731, (uint64_t)(*(_QWORD *)&v2183[8] - *(_QWORD *)v2183) >> 2);
      if (v1784)
        v1785 = v1784;
      else
        v1785 = v1783;
      if (v1785 != v1783 || *(_QWORD *)v2183 == *(_QWORD *)&v2183[8])
      {
LABEL_1678:
        if (v1584 >= v2062)
        {
          v1786 = ((char *)v1584 - (char *)v1727) >> 4;
          v1787 = v1786 + 1;
          if ((unint64_t)(v1786 + 1) >> 60)
            goto LABEL_1872;
          if (v2062 - v1727 > v1787)
            v1787 = v2062 - v1727;
          if ((unint64_t)((char *)v2062 - (char *)v1727) >= 0x7FFFFFFFFFFFFFF0)
            v1788 = 0xFFFFFFFFFFFFFFFLL;
          else
            v1788 = v1787;
          if (v1788)
          {
            if (v1788 >> 60)
              goto LABEL_1874;
            v1789 = (char *)operator new(16 * v1788);
            v1790 = (uint64_t)&v1789[16 * v1786];
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
            {
LABEL_1688:
              v1791 = v1790;
              do
              {
                v1792 = (double *)(v1791 - 16);
                v1721 = *((_OWORD *)v1584 - 1);
                *(_OWORD *)(v1791 - 16) = v1721;
                v1584 -= 2;
                v1791 -= 16;
              }
              while (v1584 != v1727);
              v2062 = (double *)&v1789[16 * v1788];
              v1584 = (double *)(v1790 + 16);
              if (!v1727)
                goto LABEL_1692;
LABEL_1691:
              operator delete(v1727);
LABEL_1692:
              v1727 = v1792;
              goto LABEL_1583;
            }
          }
          else
          {
            v1789 = 0;
            v1790 = 16 * v1786;
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
              goto LABEL_1688;
          }
          v1792 = (double *)v1790;
          v2062 = (double *)&v1789[16 * v1788];
          v1584 = (double *)(v1790 + 16);
          if (!v1727)
            goto LABEL_1692;
          goto LABEL_1691;
        }
        *v1584 = v1757;
        *((_DWORD *)v1584 + 2) = v1758;
        v1584 += 2;
LABEL_1583:
        v1729 = *v1725++;
        if (*(_DWORD *)(v1729 + 560) == 2)
          ++v1726;
        if (v1725 == __dst)
        {
LABEL_1724:
          v1802 = (uint64_t)v1583;
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          v1803 = ((char *)v1584 - (char *)v1727) >> 4;
          if ((char *)v1584 - (char *)v1727 >= 1)
          {
            v1804 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1805 = ((char *)v1584 - (char *)v1727) >> 4;
            while (1)
            {
              v1806 = (double *)operator new(16 * v1805, v1804);
              if (v1806)
                break;
              v1506 = v1805 > 1;
              v1805 >>= 1;
              if (!v1506)
                goto LABEL_1730;
            }
            v1810 = v1806;
            sub_20F771E04((uint64_t)v1727, v1584, ((char *)v1584 - (char *)v1727) >> 4, v1806, v1805, *(double *)&v1721);
            operator delete(v1810);
            v1808 = ((uint64_t)v1728 - v1802) >> 4;
            v1809 = v2003;
            if ((uint64_t)v1728 - v1802 < 1)
            {
LABEL_1736:
              sub_20F771E04(v1802, v1728, v1808, 0, 0, v1807);
              v1814 = v2150[0];
              v1815 = v2018;
              if (!v2150[0])
              {
LABEL_1738:
                if (*(_QWORD *)v2183)
                {
                  *(_QWORD *)&v2183[8] = *(_QWORD *)v2183;
                  operator delete(*(void **)v2183);
                }
                v1816 = *(_QWORD *)&object[8];
                v1817 = *(_QWORD *)object;
                v1818 = ((*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4) - v1726;
                v1819 = *(unsigned int **)&object[24];
                v1820 = (*(_QWORD *)&object[32] - *(_QWORD *)&object[24]) >> 4;
                v1821 = v1820 - v1815;
                v1822 = v1820 - v1815 + v1818;
                v1823 = v2023 - (v1726 + v1815);
                v1824 = v1822 - v1823;
                if (v1822 > v1823)
                {
                  if ((_DWORD)v1820 == v1815)
                  {
                    v1825 = 0;
                  }
                  else if (v1821 < v1809 || v1824 > v1822 - v1809)
                  {
                    if (v1821 >= v1823)
                      v1825 = v1821 - v1823;
                    else
                      v1825 = 0;
                    v1824 -= v1825;
                  }
                  else
                  {
                    _CF = v1818 >= v1823 - v1809;
                    v1827 = v1818 - (v1823 - v1809);
                    if (!_CF)
                      v1827 = 0;
                    v1825 = v1824 - v1827;
                    v1824 = v1827;
                  }
                  v1828 = (_DWORD *)(v2068 + 6632);
                  if (*(_QWORD *)object != *(_QWORD *)&object[8] && v1824)
                  {
                    do
                    {
                      v1829 = *(unsigned int *)(v1817 + 8);
                      v1830 = *(char **)(v2068 + 5560);
                      v1831 = *(char **)(v2068 + 5568);
                      if (v1831 != v1830)
                      {
                        v1832 = (v1831 - v1830) >> 4;
                        do
                        {
                          v1833 = v1832 >> 1;
                          v1834 = (unsigned int *)&v1830[16 * (v1832 >> 1)];
                          v1836 = *v1834;
                          v1835 = (char *)(v1834 + 4);
                          v1832 += ~(v1832 >> 1);
                          if (v1836 < v1829)
                            v1830 = v1835;
                          else
                            v1832 = v1833;
                        }
                        while (v1832);
                      }
                      if (v1830 == v1831 || *(_DWORD *)v1830 != (_DWORD)v1829)
                        v1830 = *(char **)(v2068 + 5568);
                      v1837 = *(int8x8_t *)(v2068 + 3112);
                      if (v1837)
                      {
                        v1838 = (uint8x8_t)vcnt_s8(v1837);
                        v1838.i16[0] = vaddlv_u8(v1838);
                        if (v1838.u32[0] > 1uLL)
                        {
                          v1839 = *(unsigned int *)(v1817 + 8);
                          if (*(_QWORD *)&v1837 <= v1829)
                            v1839 = v1829 % *(_QWORD *)&v1837;
                        }
                        else
                        {
                          v1839 = (v1837.i32[0] - 1) & v1829;
                        }
                        v1840 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1839);
                        if (v1840)
                        {
                          v1841 = *v1840;
                          if (v1841)
                          {
                            if (v1838.u32[0] < 2uLL)
                            {
                              v1842 = *(_QWORD *)&v1837 - 1;
                              while (1)
                              {
                                v1844 = v1841[1];
                                if (v1844 == v1829)
                                {
                                  if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                    goto LABEL_1759;
                                }
                                else if ((v1844 & v1842) != v1839)
                                {
                                  goto LABEL_1789;
                                }
                                v1841 = (uint64_t *)*v1841;
                                if (!v1841)
                                  goto LABEL_1789;
                              }
                            }
                            do
                            {
                              v1843 = v1841[1];
                              if (v1843 == v1829)
                              {
                                if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                  goto LABEL_1759;
                              }
                              else
                              {
                                if (v1843 >= *(_QWORD *)&v1837)
                                  v1843 %= *(_QWORD *)&v1837;
                                if (v1843 != v1839)
                                  break;
                              }
                              v1841 = (uint64_t *)*v1841;
                            }
                            while (v1841);
                          }
                        }
                      }
LABEL_1789:
                      if (v1830 != v1831)
                      {
                        if (sub_20F623A0C((uint64_t)v2005, v1829))
                        {
                          *(_WORD *)(v2068 + 6636) = 0;
                          *v1828 = 0;
                        }
                        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                        {
LABEL_1880:
                          abort();
                        }
                        v1845 = *(_QWORD *)(v2068 + 24);
                        v1846 = *(_QWORD *)(v2068 + 32);
                        if (v1845 != v1846)
                        {
                          while (*(_DWORD *)(v1817 + 8) != *(_DWORD *)(*(_QWORD *)v1845 + 32))
                          {
                            v1845 += 8;
                            if (v1845 == v1846)
                              goto LABEL_1796;
                          }
                        }
                        if (v1845 == v1846)
                        {
LABEL_1796:
                          v1847 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                          v1845 = v1846;
                          if (v1847)
LABEL_1842:
                            abort();
                        }
                        *(_DWORD *)(*(_QWORD *)v1845 + 560) = 0;
                        if (!--v1824)
                          break;
                      }
LABEL_1759:
                      v1817 += 16;
                    }
                    while (v1817 != v1816);
                    v1819 = *(unsigned int **)&object[24];
                  }
                  if (v1825)
                  {
                    v1848 = *(unsigned int **)&object[32];
                    if (v1819 != *(unsigned int **)&object[32])
                    {
                      do
                      {
                        v1849 = v1819[2];
                        v1850 = *(char **)(v2068 + 5560);
                        v1851 = *(char **)(v2068 + 5568);
                        if (v1851 != v1850)
                        {
                          v1852 = (v1851 - v1850) >> 4;
                          do
                          {
                            v1853 = v1852 >> 1;
                            v1854 = (unsigned int *)&v1850[16 * (v1852 >> 1)];
                            v1856 = *v1854;
                            v1855 = (char *)(v1854 + 4);
                            v1852 += ~(v1852 >> 1);
                            if (v1856 < v1849)
                              v1850 = v1855;
                            else
                              v1852 = v1853;
                          }
                          while (v1852);
                        }
                        if (v1850 == v1851 || *(_DWORD *)v1850 != (_DWORD)v1849)
                          v1850 = *(char **)(v2068 + 5568);
                        v1857 = *(int8x8_t *)(v2068 + 3112);
                        if (v1857)
                        {
                          v1858 = (uint8x8_t)vcnt_s8(v1857);
                          v1858.i16[0] = vaddlv_u8(v1858);
                          if (v1858.u32[0] >= 2uLL)
                          {
                            v1859 = v1819[2];
                            if (*(_QWORD *)&v1857 <= v1849)
                              v1859 = v1849 % *(_QWORD *)&v1857;
                          }
                          else
                          {
                            v1859 = (v1857.i32[0] - 1) & v1849;
                          }
                          v1860 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1859);
                          if (v1860)
                          {
                            v1861 = *v1860;
                            if (v1861)
                            {
                              if (v1858.u32[0] < 2uLL)
                              {
                                v1862 = *(_QWORD *)&v1857 - 1;
                                while (1)
                                {
                                  v1864 = v1861[1];
                                  if (v1864 == v1849)
                                  {
                                    if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                      goto LABEL_1804;
                                  }
                                  else if ((v1864 & v1862) != v1859)
                                  {
                                    goto LABEL_1834;
                                  }
                                  v1861 = (uint64_t *)*v1861;
                                  if (!v1861)
                                    goto LABEL_1834;
                                }
                              }
                              do
                              {
                                v1863 = v1861[1];
                                if (v1863 == v1849)
                                {
                                  if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                    goto LABEL_1804;
                                }
                                else
                                {
                                  if (v1863 >= *(_QWORD *)&v1857)
                                    v1863 %= *(_QWORD *)&v1857;
                                  if (v1863 != v1859)
                                    break;
                                }
                                v1861 = (uint64_t *)*v1861;
                              }
                              while (v1861);
                            }
                          }
                        }
LABEL_1834:
                        if (v1850 != v1851)
                        {
                          if ((sub_20F623A0C((uint64_t)v2005, v1849) & 1) != 0)
                          {
                            *(_WORD *)(v2068 + 6636) = 0;
                            *v1828 = 0;
                          }
                          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                          {
                            goto LABEL_1880;
                          }
                          v1865 = *(_QWORD *)(v2068 + 24);
                          v1866 = *(_QWORD *)(v2068 + 32);
                          if (v1865 != v1866)
                          {
                            while (v1819[2] != *(_DWORD *)(*(_QWORD *)v1865 + 32))
                            {
                              v1865 += 8;
                              if (v1865 == v1866)
                                goto LABEL_1841;
                            }
                          }
                          if (v1865 == v1866)
                          {
LABEL_1841:
                            v1867 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                            v1865 = v1866;
                            if (v1867)
                              goto LABEL_1842;
                          }
                          *(_DWORD *)(*(_QWORD *)v1865 + 560) = 0;
                          if (!--v1825)
                            break;
                        }
LABEL_1804:
                        v1819 += 4;
                      }
                      while (v1819 != v1848);
                      v1819 = *(unsigned int **)&object[24];
                    }
                  }
                }
                v1501 = (uint64_t *)v2068;
                if (v1819)
                {
                  *(_QWORD *)&object[32] = v1819;
                  operator delete(v1819);
                }
                if (*(_QWORD *)object)
                {
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  operator delete(*(void **)object);
                }
                goto LABEL_1361;
              }
LABEL_1737:
              v2150[1] = v1814;
              operator delete(v1814);
              goto LABEL_1738;
            }
LABEL_1733:
            v1811 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1812 = v1808;
            while (1)
            {
              v1813 = (double *)operator new(16 * v1812, v1811);
              if (v1813)
                break;
              v1506 = v1812 > 1;
              v1812 >>= 1;
              if (!v1506)
                goto LABEL_1736;
            }
            v1826 = v1813;
            sub_20F771E04(v1802, v1728, v1808, v1813, v1812, v1807);
            operator delete(v1826);
            v1814 = v2150[0];
            v1815 = v2018;
            if (!v2150[0])
              goto LABEL_1738;
            goto LABEL_1737;
          }
LABEL_1730:
          v1807 = sub_20F771E04((uint64_t)v1727, v1584, v1803, 0, 0, *(double *)&v1721);
          v1808 = ((uint64_t)v1728 - v1802) >> 4;
          v1809 = v2003;
          if ((uint64_t)v1728 - v1802 < 1)
            goto LABEL_1736;
          goto LABEL_1733;
        }
      }
      else
      {
        if (v1728 >= (double *)v2007)
        {
          v1793 = ((char *)v1728 - (char *)v1583) >> 4;
          v1794 = v1793 + 1;
          if (!((unint64_t)(v1793 + 1) >> 60))
          {
            if ((v2007 - (char *)v1583) >> 3 > v1794)
              v1794 = (v2007 - (char *)v1583) >> 3;
            if ((unint64_t)(v2007 - (char *)v1583) >= 0x7FFFFFFFFFFFFFF0)
              v1795 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1795 = v1794;
            if (!v1795)
            {
              v1796 = 0;
              v1797 = 16 * v1793;
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
                goto LABEL_1708;
              goto LABEL_1722;
            }
            if (!(v1795 >> 60))
            {
              v1796 = (char *)operator new(16 * v1795);
              v1797 = (uint64_t)&v1796[16 * v1793];
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
              {
LABEL_1708:
                v1798 = v1797;
                do
                {
                  v1799 = (double *)(v1798 - 16);
                  v1721 = *((_OWORD *)v1728 - 1);
                  *(_OWORD *)(v1798 - 16) = v1721;
                  v1728 -= 2;
                  v1798 -= 16;
                }
                while (v1728 != v1583);
                v1728 = (double *)(v1797 + 16);
                *(_QWORD *)&object[24] = v1799;
                v2007 = &v1796[16 * v1795];
                *(_QWORD *)&object[40] = v2007;
                if (!v1583)
                  goto LABEL_1712;
LABEL_1711:
                operator delete(v1583);
LABEL_1712:
                v1583 = v1799;
                goto LABEL_1713;
              }
LABEL_1722:
              v1799 = (double *)v1797;
              v1728 = (double *)(v1797 + 16);
              *(_QWORD *)&object[24] = v1797;
              v2007 = &v1796[16 * v1795];
              *(_QWORD *)&object[40] = v2007;
              if (!v1583)
                goto LABEL_1712;
              goto LABEL_1711;
            }
LABEL_1874:
            *(_QWORD *)&object[32] = v1728;
            *(_QWORD *)&object[16] = v2062;
            *(_QWORD *)&object[8] = v1584;
            *(_QWORD *)object = v1727;
            sub_20E877A38();
          }
LABEL_1872:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_20E867F44();
        }
        *v1728 = v1757;
        *((_DWORD *)v1728 + 2) = v1758;
        v1728 += 2;
LABEL_1713:
        v1800 = *v1725++;
        v1801 = v2018;
        if (*(_DWORD *)(v1800 + 560) == 2)
          v1801 = v2018 + 1;
        v2018 = v1801;
        if (v1725 == __dst)
          goto LABEL_1724;
      }
    }
    while (1)
    {
      v1740 = *((_DWORD *)v1734 + 4);
      v1741 = v2150[0];
      if (v2150[1] == v2150[0])
      {
        v1741 = v2150[1];
      }
      else
      {
        v1742 = ((char *)v2150[1] - (char *)v2150[0]) >> 2;
        do
        {
          v1743 = v1742 >> 1;
          v1744 = &v1741[v1742 >> 1];
          v1746 = *v1744;
          v1745 = v1744 + 1;
          v1742 += ~(v1742 >> 1);
          if (v1746 < v1740)
            v1741 = v1745;
          else
            v1742 = v1743;
        }
        while (v1742);
        if (v2150[1] != v1741 && *v1741 == v1740)
          goto LABEL_1591;
      }
      sub_20EDB3C7C(v2150, v1741, (char *)v1734 + 16);
LABEL_1591:
      v1734 += 8;
      if (v1734 == v1735)
      {
        v1733 = *v1725;
        v1734 = *(uint64_t **)(*v1725 + 536);
        v1736 = *(_QWORD *)(v2068 + 8);
        v1737 = (uint64_t *)(v1736 + 56);
        v1738 = *(uint64_t **)(v1736 + 56);
        v1739 = v2021;
        if (v1738)
          goto LABEL_1604;
        goto LABEL_1615;
      }
    }
  }
LABEL_1361:
  v1507 = v1501[6];
  v1508 = v1501[7];
  if (v1507 != v1508)
  {
    v1509 = (_DWORD *)(v2068 + 6632);
    do
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1507 + 984) - *(_QWORD *)(*(_QWORD *)v1507 + 976)) >> 3) < v2067)
      {
        v1510 = *(_DWORD *)(*(_QWORD *)v1507 + 32);
        v1511 = *(char **)(v2068 + 5560);
        v1512 = *(char **)(v2068 + 5568);
        if (v1512 != v1511)
        {
          v1513 = (v1512 - v1511) >> 4;
          do
          {
            v1514 = v1513 >> 1;
            v1515 = (unsigned int *)&v1511[16 * (v1513 >> 1)];
            v1517 = *v1515;
            v1516 = (char *)(v1515 + 4);
            v1513 += ~(v1513 >> 1);
            if (v1517 < v1510)
              v1511 = v1516;
            else
              v1513 = v1514;
          }
          while (v1513);
        }
        if (v1511 != v1512 && *(_DWORD *)v1511 == v1510)
        {
          v1518 = sub_20F623A0C((uint64_t)v2005, v1510);
          v1519 = v1518;
          if (v1518)
          {
            *(_WORD *)(v2068 + 6636) = 0;
            *v1509 = 0;
          }
          if (!sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(*(_QWORD *)v1507 + 32) + 1)
            || (*(_WORD *)(v2068 + 6636) = 0, *v1509 = 0, (v1519 & 1) == 0))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
      }
      v1507 += 8;
    }
    while (v1507 != v1508);
  }
  v1520 = *(_QWORD **)(v2068 + 16);
  if (v1520)
  {
    v1523 = (_QWORD *)*v1520;
    v1521 = v1520 + 1;
    v1522 = v1523;
    if (v1523 != v1521)
    {
      do
      {
        v1524 = v1522[6];
        v1525 = (std::__shared_weak_count *)v1522[7];
        *(_QWORD *)object = v1524;
        *(_QWORD *)&object[8] = v1525;
        if (v1525)
        {
          v1526 = (unint64_t *)&v1525->__shared_owners_;
          do
            v1527 = __ldxr(v1526);
          while (__stxr(v1527 + 1, v1526));
        }
        if (v2067 > (uint64_t)(*(_QWORD *)(v1524 + 544) - *(_QWORD *)(v1524 + 536)) >> 5)
        {
          v1528 = *(_DWORD *)(v1524 + 32);
          v1529 = *(char **)(v2068 + 5560);
          v1530 = *(char **)(v2068 + 5568);
          if (v1530 != v1529)
          {
            v1531 = (v1530 - v1529) >> 4;
            do
            {
              v1532 = v1531 >> 1;
              v1533 = (unsigned int *)&v1529[16 * (v1531 >> 1)];
              v1535 = *v1533;
              v1534 = (char *)(v1533 + 4);
              v1531 += ~(v1531 >> 1);
              if (v1535 < v1528)
                v1529 = v1534;
              else
                v1531 = v1532;
            }
            while (v1531);
          }
          if (v1529 != v1530 && *(_DWORD *)v1529 == v1528 && (*(_BYTE *)(*((_QWORD *)v1529 + 1) + 4) & 2) == 0)
          {
            if (sub_20F623A0C((uint64_t)v2005, v1528))
            {
              *(_WORD *)(v2068 + 6636) = 0;
              *(_DWORD *)(v2068 + 6632) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 179, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a landmark variable.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
        if (!v1525)
          goto LABEL_1403;
        v1536 = (unint64_t *)&v1525->__shared_owners_;
        do
          v1537 = __ldaxr(v1536);
        while (__stlxr(v1537 - 1, v1536));
        if (!v1537)
        {
          ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
          std::__shared_weak_count::__release_weak(v1525);
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
          {
            do
            {
LABEL_1407:
              v1539 = (_QWORD *)v1522[2];
              _ZF = *v1539 == (_QWORD)v1522;
              v1522 = v1539;
            }
            while (!_ZF);
            goto LABEL_1382;
          }
        }
        else
        {
LABEL_1403:
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
            goto LABEL_1407;
        }
        do
        {
          v1539 = v1538;
          v1538 = (_QWORD *)*v1538;
        }
        while (v1538);
LABEL_1382:
        v1522 = v1539;
      }
      while (v1539 != v1521);
    }
  }
  sub_20F770048((uint64_t)v2005);
  return kdebug_trace();
}

void sub_20F72DAA8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2278]))
  {
    if (SLOBYTE(STACK[0x2277]) < 0)
      operator delete((void *)STACK[0x2260]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x41B0]);
  _Unwind_Resume(a1);
}

void sub_20F72DB8C()
{
  JUMPOUT(0x20F72DC2CLL);
}

void sub_20F72DB94()
{
  sub_20E86E8C4((uint64_t *)&STACK[0x2260]);
  sub_20E86E8C4((uint64_t *)&STACK[0x1B50]);
  sub_20E86E658((uint64_t)&STACK[0x6100]);
  JUMPOUT(0x20F72DC2CLL);
}

void sub_20F72DBC8()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20F72DC2CLL);
}

void sub_20F72DBE8()
{
  JUMPOUT(0x20F72DC2CLL);
}

void sub_20F72DBF4()
{
  JUMPOUT(0x20F72DC04);
}

void sub_20F72DCE0(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F72DCF4(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD10]);
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F72DD10(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F72DD24(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F72DD38()
{
  JUMPOUT(0x20F72E1A8);
}

void sub_20F72DD40()
{
  JUMPOUT(0x20F72E1B4);
}

void sub_20F72DD48(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F72DD60(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F72DD7C()
{
  JUMPOUT(0x20F72E1A8);
}

void sub_20F72DD84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = STACK[0x6118];
  if (STACK[0x6118])
  {
    v6 = STACK[0x6120];
    v7 = (void *)STACK[0x6118];
    if (STACK[0x6120] != v5)
    {
      v8 = (void (***)(_QWORD))(v6 - 40);
      v9 = (void (***)(_QWORD))(v6 - 40);
      do
      {
        v10 = *v9;
        v9 -= 5;
        (*v10)(v8);
        v11 = v8 == (void (***)(_QWORD))v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)STACK[0x6118];
    }
    STACK[0x6120] = v5;
    operator delete(v7);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F72E250);
}

void sub_20F72DFFC(_Unwind_Exception *a1)
{
  sub_20F59A618((_QWORD *)STACK[0xC50]);
  _Unwind_Resume(a1);
}

void sub_20F72E014()
{
  JUMPOUT(0x20F72E040);
}

void sub_20F72E01C()
{
  JUMPOUT(0x20F72E02CLL);
}

void sub_20F72E054()
{
  JUMPOUT(0x20F72E080);
}

void sub_20F72E05C()
{
  JUMPOUT(0x20F72E06CLL);
}

void sub_20F72E094(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F72E260(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0x6100]);
  sub_20F4F17C8(&STACK[0x2260]);
  _Unwind_Resume(a1);
}

void sub_20F72E288()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F72E29C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA01CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F72E2D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA01CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F72E2F4(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *p_p;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  std::chrono::steady_clock::time_point v50;
  double v51;
  uint64_t v52;
  double v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  _QWORD v58[3];
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _BYTE object[24];
  unint64_t v67;
  char v68;
  void *__p;
  size_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  sub_20F49BBF8(&v65);
  if (**(int **)(v65 + 56) > 3)
    return;
  v2 = *(unsigned __int8 *)(v65 + 72);
  v3 = sub_20E8C31DC(v65, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return;
  v5 = v3;
  v58[0] = &v65;
  v58[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v58[2] = std::chrono::system_clock::now().__d_.__rep_;
  v59 = 3;
  v60 = "unknown file";
  v61 = 123;
  v63 = 0;
  v64 = 0;
  v62 = "unknown function";
  v6 = *(_QWORD *)(a1 + 8);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double)(v7.__d_.__rep_ - *(_QWORD *)v6) / 1000000000.0;
  *(std::chrono::steady_clock::time_point *)v6 = v7;
  *(double *)(v6 + 8) = *(double *)(v6 + 8) + v8;
  v9 = **(_QWORD **)(a1 + 16) + 4760;
  LODWORD(v70) = 0;
  v10 = sub_20F72EBF4(v9, (uint64_t)object);
  v11 = *(_QWORD *)v58[0];
  v12 = (const char *)(*(_QWORD *)v58[0] + 16);
  v57 = v12;
  if (*(char *)(*(_QWORD *)v58[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v58[0] + 39);
    v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v67)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v19 = v5;
    v20 = v12;
    v21 = v11;
    v22 = a1;
    v23 = v2;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v67 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v2 = v23;
    a1 = v22;
    v11 = v21;
    v12 = v20;
    v5 = v19;
    goto LABEL_23;
  }
  HIBYTE(v67) = v17;
  if (v17)
LABEL_23:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  v68 = 1;
  p_p = &__p;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    p_p = operator new(v28 + 1);
    v70 = v13;
    v71 = v29 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v71) = v13;
    if (!v13)
    {
      LOBYTE(__p) = 0;
      v72 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v12, v13);
  *((_BYTE *)p_p + v13) = 0;
  v72 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v68)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v67) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (v68)
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v33 = v32;
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
    }
    v37 = _os_log_pack_fill();
    *(_DWORD *)v37 = 134218240;
    *(double *)(v37 + 4) = v8;
    *(_WORD *)(v37 + 12) = 2048;
    *(double *)(v37 + 14) = v10;
    v38 = operator new();
    v39 = *(unsigned __int8 *)(v11 + 39);
    v40 = v57;
    if ((v39 & 0x80u) != 0)
    {
      v40 = *(const char **)(v11 + 16);
      v39 = *(_QWORD *)(v11 + 24);
    }
    *(_QWORD *)v38 = v31;
    *(_QWORD *)(v38 + 8) = v31;
    *(_QWORD *)(v38 + 16) = v33;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = v40;
    *(_QWORD *)(v38 + 48) = v39;
    *(_BYTE *)(v38 + 56) = 1;
    *(_QWORD *)object = v38;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), object);
    v41 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v41)
    {
      v42 = *(std::__shared_weak_count **)(v41 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(double *)&object[4] = v8;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v10;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
  if (v2)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v51 = (double)(v50.__d_.__rep_ - *(_QWORD *)v49) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)v49 = v50;
    *(double *)(v49 + 8) = *(double *)(v49 + 8) + v51;
    v52 = **(_QWORD **)(a1 + 16) + 4760;
    LODWORD(v70) = 0;
    v53 = sub_20F72EBF4(v52, (uint64_t)object);
    sub_20E8C003C((uint64_t)v58, "BA pulse (%f seconds / iteration, cost %f).", v51, v53);
    sub_20E863570((uint64_t)v58);
  }
  sub_20E863570((uint64_t)v58);
  v54 = v64;
  if (v64)
  {
    v55 = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20F72E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F72EB7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKN"
                     "S0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11Opt"
                     "ionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb1EEEvRKNS1_28OfflineMapOptimizatio"
                                "nConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODat"
                                "abaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb1EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F72EBE8()
{
  return &unk_24CA01D48;
}

double sub_20F72EBF4(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  double v5;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  __int128 *v24;
  _BOOL4 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v30;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  int8x16_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  float64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  _OWORD *v78;
  int v79;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v103;
  double v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  float64x2_t v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double *v132;
  int v133;
  uint64_t v134;
  double v137;
  long double v138;
  long double v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  _OWORD *v143;
  _BOOL4 v144;
  uint64_t v145;
  __int128 v146;
  double v153;
  double v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  unint64_t v167;
  uint64_t v168;
  uint64_t v170;
  double v171;
  double v172;
  uint64_t v173;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  double v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  double v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  double v224;
  unint64_t v225;
  unint64_t v226;
  double *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  double v235;
  long double v236;
  long double v237;
  long double v238;
  __int128 v239;
  unint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  float64x2_t v255;
  float64x2_t v256;
  _QWORD *v257;
  double *v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64_t v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  uint64_t v266;
  double v267;
  char v268;

  kdebug_trace();
  v11 = *(unsigned int *)(a2 + 48);
  if (v11 <= 5)
    bzero((void *)(a2 + 8 * v11), 48 - 8 * v11);
  *(_DWORD *)(a2 + 48) = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
    v12 = *(_QWORD *)(a1 + 896);
    v13 = *(__int128 **)(a1 + 904);
    v14 = 0.0;
    v15 = 0.0;
    if ((__int128 *)v12 == v13)
      goto LABEL_57;
    if (*(_BYTE *)(a1 + 1875))
    {
      v16 = (unint64_t)v13 - v12 - 504;
      if (v16 < 0x1F8)
      {
        v17 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_56:
          v15 = v15 + *(double *)(v17 + 464);
          v17 += 504;
        }
        while ((__int128 *)v17 != v13);
        goto LABEL_57;
      }
      v155 = v16 / 0x1F8 + 1;
      v17 = v12 + 504 * (v155 & 0x1FFFFFFFFFFFFFELL);
      v156 = v155 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(double *)(v12 + 464) + *(double *)(v12 + 968);
        v12 += 1008;
        v156 -= 2;
      }
      while (v156);
      if (v155 != (v155 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_56;
    }
    else
    {
      v98 = (__int128 *)(v12 + 344);
      do
      {
        if (*((_BYTE *)v98 + 128))
        {
          *((_QWORD *)v98 + 14) = *((_QWORD *)v98 - 1);
          v100 = *(__int128 *)((char *)v98 - 24);
          _Q5 = *(__int128 *)((char *)v98 - 56);
          v98[5] = *(__int128 *)((char *)v98 - 40);
          v98[6] = v100;
          _Q4 = *(__int128 *)((char *)v98 - 88);
          v98[3] = *(__int128 *)((char *)v98 - 72);
          v98[4] = _Q5;
          v103 = *(__int128 *)((char *)v98 - 120);
          v98[1] = *(__int128 *)((char *)v98 - 104);
          v98[2] = _Q4;
          *v98 = v103;
          _Q17 = *v98;
          _D19 = *((_QWORD *)v98 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v98 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v98 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v98 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v98 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v98 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v98 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v116 = *(double *)(a1 + 16) * (_D18 + *((double *)v98 + 14) * *((double *)v98 + 14));
          *((double *)v98 + 15) = v116;
          v15 = v15 + v116;
        }
        v99 = v98 + 10;
        v98 = (__int128 *)((char *)v98 + 504);
      }
      while (v99 != v13);
    }
LABEL_57:
    *(double *)a2 = v15 * 0.5;
    v157 = *(_QWORD *)(a1 + 920);
    v158 = *(_QWORD *)(a1 + 928);
    if (v157 == v158)
      goto LABEL_69;
    if (*(_BYTE *)(a1 + 1875))
    {
      v159 = v158 - v157 - 280;
      v14 = 0.0;
      if (v159 < 0x118)
      {
        v160 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_68:
          v14 = v14 + *(double *)(v160 + 240);
          v160 += 280;
        }
        while (v160 != v158);
        goto LABEL_69;
      }
      v167 = v159 / 0x118 + 1;
      v160 = v157 + 280 * (v167 & 0x1FFFFFFFFFFFFFELL);
      v168 = v167 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v14 = v14 + *(double *)(v157 + 240) + *(double *)(v157 + 520);
        v157 += 560;
        v168 -= 2;
      }
      while (v168);
      if (v167 != (v167 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_68;
    }
    else
    {
      v14 = 0.0;
      do
      {
        if (*(_BYTE *)(v157 + 248))
        {
          v161 = *(_OWORD *)(v157 + 160);
          *(_OWORD *)(v157 + 192) = *(_OWORD *)(v157 + 144);
          *(_OWORD *)(v157 + 208) = v161;
          _Q3 = *(_OWORD *)(v157 + 192);
          *(_OWORD *)(v157 + 224) = *(_OWORD *)(v157 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v161 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v157 + 240) = v161;
          v14 = v14 + *(double *)&v161;
        }
        v157 += 280;
      }
      while (v157 != v158);
    }
LABEL_69:
    *(double *)(a2 + 8) = v14 * 0.5;
    _X9 = *(_QWORD *)(a1 + 944);
    v170 = *(_QWORD *)(a1 + 952);
    v171 = 0.0;
    v172 = 0.0;
    if (_X9 == v170)
      goto LABEL_81;
    if (*(_BYTE *)(a1 + 1875))
    {
      if ((unint64_t)(v170 - _X9 - 8016) >> 4 < 0x1F5)
      {
        v173 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_80:
          v172 = v172 + *(double *)(v173 + 7976);
          v173 += 8016;
        }
        while (v173 != v170);
        goto LABEL_81;
      }
      v195 = (v170 - _X9 - 8016) / 0x1F50uLL + 1;
      v173 = _X9 + 8016 * (v195 & 0x1FFFFFFFFFFFFELL);
      v196 = v195 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v172 = v172 + *(double *)(_X9 + 7976) + *(double *)(_X9 + 15992);
        _X9 += 16032;
        v196 -= 2;
      }
      while (v196);
      if (v195 != (v195 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_80;
    }
    else
    {
      do
      {
        __asm { PRFM            #0, [X9,#0x7D20] }
        if (*(_BYTE *)(_X9 + 7984))
        {
          _X14 = _X9 + 31904;
          *(_QWORD *)(_X9 + 7968) = *(_QWORD *)(_X9 + 7848);
          v176 = *(_OWORD *)(_X9 + 7816);
          *(_OWORD *)(_X9 + 7920) = *(_OWORD *)(_X9 + 7800);
          *(_OWORD *)(_X9 + 7936) = v176;
          *(_OWORD *)(_X9 + 7952) = *(_OWORD *)(_X9 + 7832);
          v177 = *(_OWORD *)(_X9 + 7752);
          *(_OWORD *)(_X9 + 7856) = *(_OWORD *)(_X9 + 7736);
          *(_OWORD *)(_X9 + 7872) = v177;
          v178 = *(_OWORD *)(_X9 + 7784);
          *(_OWORD *)(_X9 + 7888) = *(_OWORD *)(_X9 + 7768);
          *(_OWORD *)(_X9 + 7904) = v178;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X9 + 7856);
          _D19 = *(_QWORD *)(_X9 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X9 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X9 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v194 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X9 + 7968) * *(double *)(_X9 + 7968));
          *(double *)(_X9 + 7976) = v194;
          v172 = v172 + v194;
        }
        _X9 += 8016;
      }
      while (_X9 != v170);
    }
LABEL_81:
    *(double *)(a2 + 16) = v172 * 0.5;
    _X9 = *(_QWORD *)(a1 + 968);
    v198 = *(_QWORD *)(a1 + 976);
    if (_X9 == v198)
      goto LABEL_93;
    if (*(_BYTE *)(a1 + 1875))
    {
      v199 = v198 - _X9 - 5336;
      v171 = 0.0;
      if (v199 >> 3 < 0x29B)
      {
        v200 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_92:
          v171 = v171 + *(double *)(v200 + 5296);
          v200 += 5336;
        }
        while (v200 != v198);
        goto LABEL_93;
      }
      v219 = v199 / 0x14D8 + 1;
      v200 = _X9 + 5336 * (v219 & 0x1FFFFFFFFFFFFELL);
      v220 = v219 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v171 = v171 + *(double *)(_X9 + 5296) + *(double *)(_X9 + 10632);
        _X9 += 10672;
        v220 -= 2;
      }
      while (v220);
      if (v219 != (v219 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_92;
    }
    else
    {
      v171 = 0.0;
      do
      {
        __asm { PRFM            #0, [X9,#0x5340] }
        if (*(_BYTE *)(_X9 + 5304))
        {
          _X14 = _X9 + 21184;
          *(_QWORD *)(_X9 + 5288) = *(_QWORD *)(_X9 + 5168);
          *(_OWORD *)(_X9 + 5240) = *(_OWORD *)(_X9 + 5120);
          *(_OWORD *)(_X9 + 5256) = *(_OWORD *)(_X9 + 5136);
          *(_OWORD *)(_X9 + 5272) = *(_OWORD *)(_X9 + 5152);
          *(_OWORD *)(_X9 + 5176) = *(_OWORD *)(_X9 + 5056);
          *(_OWORD *)(_X9 + 5192) = *(_OWORD *)(_X9 + 5072);
          *(_OWORD *)(_X9 + 5208) = *(_OWORD *)(_X9 + 5088);
          *(_OWORD *)(_X9 + 5224) = *(_OWORD *)(_X9 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X9 + 5176);
          _D19 = *(_QWORD *)(_X9 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X9 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X9 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v218 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X9 + 5288) * *(double *)(_X9 + 5288));
          *(double *)(_X9 + 5296) = v218;
          v171 = v171 + v218;
        }
        _X9 += 5336;
      }
      while (_X9 != v198);
    }
LABEL_93:
    *(double *)(a2 + 24) = v171 * 0.5;
    v221 = *(_QWORD *)(a1 + 992);
    v222 = *(_QWORD *)(a1 + 1000);
    v223 = 0.0;
    v224 = 0.0;
    if (v221 != v222)
    {
      if (*(_BYTE *)(a1 + 1875))
      {
        v225 = v222 - v221 - 216;
        if (v225 < 0xD8)
          goto LABEL_120;
        v226 = v225 / 0xD8 + 1;
        v227 = (double *)(v221 + 392);
        v228 = v226 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v224 = v224 + *(v227 - 27) + *v227;
          v227 += 54;
          v228 -= 2;
        }
        while (v228);
        v221 += 216 * (v226 & 0x3FFFFFFFFFFFFFELL);
        if (v226 != (v226 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_120:
          do
          {
            v224 = v224 + *(double *)(v221 + 176);
            v221 += 216;
          }
          while (v221 != v222);
        }
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v221 + 184))
          {
            *(_OWORD *)(v221 + 160) = *(_OWORD *)(v221 + 144);
            v256 = *(float64x2_t *)(v221 + 160);
            _D1 = v256.f64[1];
            __asm { FMLA            D0, D1, V2.D[1] }
            v235 = *(double *)(a1 + 88);
            v236 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
            v237 = v236 + 1.0;
            v238 = v235 * log1p(v236);
            *(long double *)(v221 + 176) = v238;
            *(float64x2_t *)(v221 + 160) = vmulq_n_f64(v256, sqrt(1.0 / v237));
            v224 = v224 + v238;
          }
          v221 += 216;
        }
        while (v221 != v222);
      }
    }
    *(double *)(a2 + 32) = v224 * 0.5;
    v229 = *(_QWORD *)(a1 + 1016);
    v230 = *(_QWORD *)(a1 + 1024);
    if (v229 == v230)
      goto LABEL_116;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v223 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 856))
        {
          v239 = *(_OWORD *)(v229 + 768);
          *(_OWORD *)(v229 + 800) = *(_OWORD *)(v229 + 752);
          *(_OWORD *)(v229 + 816) = v239;
          _Q2 = *(_OWORD *)(v229 + 800);
          *(_OWORD *)(v229 + 832) = *(_OWORD *)(v229 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v239 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v229 + 848) = v239;
          v223 = v223 + *(double *)&v239;
        }
        v229 += 888;
      }
      while (v229 != v230);
      goto LABEL_116;
    }
    v231 = v230 - v229 - 888;
    v223 = 0.0;
    if (v231 >= 0x378)
    {
      v245 = v231 / 0x378 + 1;
      v232 = v229 + 888 * (v245 & 0xFFFFFFFFFFFFFELL);
      v246 = v245 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v223 = v223 + *(double *)(v229 + 848) + *(double *)(v229 + 1736);
        v229 += 1776;
        v246 -= 2;
      }
      while (v246);
      if (v245 == (v245 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_116;
    }
    else
    {
      v232 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v223 = v223 + *(double *)(v232 + 848);
      v232 += 888;
    }
    while (v232 != v230);
LABEL_116:
    v154 = v223 * 0.5;
    goto LABEL_117;
  }
  v18 = (double *)(a1 + 8);
  v19 = (_QWORD *)(a1 + 120);
  v257 = (_QWORD *)(a1 + 120);
  v258 = (double *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 896);
  v21 = *(_QWORD *)(a1 + 904);
  v22 = 0.0;
  v23 = 0.0;
  if (v20 != v21)
  {
    do
    {
      while (1)
      {
        v24 = (__int128 *)(v20 + 344);
        v25 = sub_20F4AFF88((char *)(v20 + 8), (float64x2_t **)(v20 + 208), v20 + 344);
        *(_BYTE *)(v20 + 472) = v25;
        if (v25)
          break;
        *(_QWORD *)(v20 + 464) = 0;
        v20 += 504;
        if (v20 == v21)
          goto LABEL_15;
      }
      v26 = *(_QWORD *)(v20 + 480);
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v20 + 344);
      _Q1 = *(_OWORD *)(v20 + 408);
      v27 = *(_OWORD *)(v20 + 424);
      _Q3 = *(_OWORD *)(v20 + 392);
      *(_OWORD *)(v20 + 288) = _Q1;
      *(_OWORD *)(v20 + 304) = v27;
      _Q2 = *(float64x2_t *)(v20 + 424);
      *(_OWORD *)(v20 + 320) = *(_OWORD *)(v20 + 440);
      *(_QWORD *)(v20 + 336) = *(_QWORD *)(v20 + 456);
      v30 = *(_OWORD *)(v20 + 360);
      _Q5 = *v24;
      _V7.D[1] = *((_QWORD *)&v30 + 1);
      *(_OWORD *)(v20 + 224) = *v24;
      *(_OWORD *)(v20 + 240) = v30;
      _Q4 = *(_OWORD *)(v20 + 376);
      v4 = *(float64x2_t *)(v20 + 392);
      *(_OWORD *)(v20 + 256) = _Q4;
      *(float64x2_t *)(v20 + 272) = v4;
      _Q6 = *(float64x2_t *)(v20 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v20 + 456) * *(double *)(v20 + 456));
      *(float64_t *)(v20 + 464) = v4.f64[0];
      v23 = v23 + v4.f64[0];
      v20 += 504;
    }
    while (v20 != v21);
LABEL_15:
    v19 = v257;
    v18 = v258;
  }
  *(double *)a2 = v23 * 0.5;
  v46 = (int8x16_t *)v19[100];
  v47 = (int8x16_t *)v19[101];
  if (v46 != v47)
  {
    v48 = v46 + 16;
    v22 = 0.0;
    do
    {
      while (!v48[-9].i64[1])
      {
        v48[-1].i8[8] = 0;
        v48[-1].i64[0] = 0;
        v49 = &v48[1].i64[1];
        v48 = (int8x16_t *)((char *)v48 + 280);
        if (v49 == (uint64_t *)v47)
          goto LABEL_23;
      }
      v50 = v48[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v50 + 48);
      v51 = *(float64x2_t *)(v50 + 32);
      _D2 = *(double *)(v50 + 72);
      v53 = *(float64x2_t *)(v50 + 56);
      _D4 = *(double *)(v50 + 96);
      v55 = *(float64x2_t *)(v50 + 80);
      *(_QWORD *)&_Q6.f64[0] = v48[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v48[-15] + 8);
      v57 = *(double *)v48[-12].i64;
      _Q17 = (float64x2_t)v48[-13];
      v59 = *(double *)&v48[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v48[-12] + 8);
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q7.f64[0]), v53, _Q17.f64[0]), v55, _Q19.f64[0]);
      v62 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v51, _Q7, 1), v53, _Q17, 1), v55, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v260 = v62;
      v259 = v61;
      v262 = _Q7.f64[0];
      v261 = v63;
      v263 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q6.f64[0]), v53, v57), v55, v59);
      v264 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v57 + _D4 * v59;
      v266 = 0;
      v265 = 0uLL;
      sub_20E9733B8(&v259, v265.f64);
      v64 = v48 - 4;
      v65 = v265;
      v48[-3].i64[0] = v266;
      v48[-4] = (int8x16_t)v65;
      v65.f64[0] = *(float64_t *)(v50 + 120);
      *(_QWORD *)&v66.f64[0] = v48[-9].i64[0];
      *(float64x2_t *)((char *)&v48[-3] + 8) = vsubq_f64(*(float64x2_t *)(v50 + 104), (float64x2_t)v48[-10]);
      v48[-2].i64[1] = *(_OWORD *)&vsubq_f64(v65, v66);
      v67 = (float64x2_t *)v48[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v48[-2], v67[3]);
      v68 = (int8x16_t)vmulq_f64((float64x2_t)v48[-3], v67[2]);
      v69 = (int8x16_t)vmulq_f64((float64x2_t)v48[-4], v67[1]);
      v48[-4] = v69;
      v48[-3] = v68;
      v48[-2] = (int8x16_t)v4;
      v48[-1].i8[8] = 1;
      if (v48->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v48->i64[0] + 24))(v48->i64[0], v48 - 4);
        v68 = v48[-3];
        v4 = (float64x2_t)v48[-2];
        v69 = *v64;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v68, v68, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v69, v69, 8uLL).i64;
      v70 = v48 - 7;
      v71 = v48[-3];
      *v70 = *v64;
      v70[1] = v71;
      _Q6 = (float64x2_t)v48[-2];
      v70[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v72 = _Q2.f64[0] + *(double *)v68.i64 * *(double *)v68.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v18[3];
      v73 = v5 * v72;
      *(double *)v48[-1].i64 = v73;
      v22 = v22 + v73;
      v74 = &v48[1].i64[1];
      v48 = (int8x16_t *)((char *)v48 + 280);
    }
    while (v74 != (uint64_t *)v47);
LABEL_23:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 8) = v22 * 0.5;
  v75 = v19[103];
  v76 = v19[104];
  if (v75 == v76)
  {
    v77 = 0.0;
  }
  else
  {
    v77 = 0.0;
    do
    {
      while (1)
      {
        v78 = (_OWORD *)(v75 + 7856);
        v79 = sub_20F4B0BC8();
        *(_BYTE *)(v75 + 7984) = v79;
        if (v79)
          break;
        *(_QWORD *)(v75 + 7976) = 0;
        v75 += 8016;
        if (v75 == v76)
          goto LABEL_31;
      }
      _X8 = v75 + 24024;
      __asm { PRFM            #0, [X8] }
      v82 = *(_QWORD *)(v75 + 7992);
      if (v82)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v75 + 7856);
      _X8 = v75 + 23888;
      v84 = *(_OWORD *)(v75 + 7936);
      *(_OWORD *)(v75 + 7800) = *(_OWORD *)(v75 + 7920);
      *(_OWORD *)(v75 + 7816) = v84;
      _Q2 = *(float64x2_t *)(v75 + 7936);
      *(_OWORD *)(v75 + 7832) = *(_OWORD *)(v75 + 7952);
      *(_QWORD *)(v75 + 7848) = *(_QWORD *)(v75 + 7968);
      v85 = *(_OWORD *)(v75 + 7872);
      *(_OWORD *)(v75 + 7736) = *v78;
      *(_OWORD *)(v75 + 7752) = v85;
      v86 = *(_OWORD *)(v75 + 7904);
      *(_OWORD *)(v75 + 7768) = *(_OWORD *)(v75 + 7888);
      *(_OWORD *)(v75 + 7784) = v86;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v75 + 7872);
      _Q7 = *v78;
      _D17 = *(_QWORD *)(v75 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v75 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v75 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v75 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v75 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v18[5];
      v97 = v5 * (_D16 + *(double *)(v75 + 7968) * *(double *)(v75 + 7968));
      *(double *)(v75 + 7976) = v97;
      v77 = v77 + v97;
      v75 += 8016;
    }
    while (v75 != v76);
LABEL_31:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 16) = v77 * 0.5;
  v268 = *(_BYTE *)(a1 + 1875);
  v267 = 0.0;
  v117 = v19[106];
  v118 = v19[107];
  *(_QWORD *)&v259.f64[0] = &v268;
  *(_QWORD *)&v259.f64[1] = v18 + 6;
  v260 = COERCE_DOUBLE(&v257);
  *(_QWORD *)&v261.f64[0] = &v267;
  sub_20F4D78F4(&v265, v117, v118, (uint64_t)&v259, v77 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v126 = v267 * 0.5;
  *(double *)(a2 + 24) = v267 * 0.5;
  v127 = v257;
  v128 = v257[109];
  v129 = v257[110];
  v130 = 0.0;
  v131 = 0.0;
  if (v128 != v129)
  {
    v132 = v258;
    do
    {
      while (1)
      {
        v133 = sub_20FC7133C(v128 + 8, (uint64_t *)(v128 + 56), v128 + 160, v126, v119.f64[0], v120, v121, v122, v123, v124, v125);
        *(_BYTE *)(v128 + 184) = v133;
        if (v133)
          break;
        *(_QWORD *)(v128 + 176) = 0;
        v128 += 216;
        if (v128 == v129)
          goto LABEL_44;
      }
      v134 = *(_QWORD *)(v128 + 192);
      if (v134)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 24))(v134, v128 + 160);
      *(_OWORD *)(v128 + 144) = *(_OWORD *)(v128 + 160);
      v255 = *(float64x2_t *)(v128 + 160);
      _D1 = v255.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v137 = v132[10];
      v138 = v132[11] * (v132[9] * _D0);
      v139 = v138 + 1.0;
      v126 = v137 * log1p(v138);
      *(double *)(v128 + 176) = v126;
      v120 = v255.f64[0];
      v119 = vmulq_n_f64(v255, sqrt(1.0 / v139));
      *(float64x2_t *)(v128 + 160) = v119;
      v131 = v131 + v126;
      v128 += 216;
    }
    while (v128 != v129);
LABEL_44:
    v127 = v257;
  }
  *(double *)(a2 + 32) = v131 * 0.5;
  v140 = v127[112];
  v141 = v127[113];
  if (v140 != v141)
  {
    v130 = 0.0;
    v142 = v258;
    do
    {
      while (1)
      {
        v143 = (_OWORD *)(v140 + 800);
        v144 = sub_20F3E115C(v140 + 8, (_QWORD *)(v140 + 736), (float64x2_t *)(v140 + 800));
        *(_BYTE *)(v140 + 856) = v144;
        if (v144)
          break;
        *(_QWORD *)(v140 + 848) = 0;
        v140 += 888;
        if (v140 == v141)
          goto LABEL_52;
      }
      v145 = *(_QWORD *)(v140 + 864);
      if (v145)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 24))(v145, v140 + 800);
      v146 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 752) = *v143;
      *(_OWORD *)(v140 + 768) = v146;
      _Q2 = *v143;
      _Q1 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 784) = *(_OWORD *)(v140 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v140 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v153 = v142[13] * _D3;
      *(double *)(v140 + 848) = v153;
      v130 = v130 + v153;
      v140 += 888;
    }
    while (v140 != v141);
  }
LABEL_52:
  v154 = v130 * 0.5;
LABEL_117:
  *(double *)(a2 + 40) = v154;
  *(_WORD *)(a1 + 1875) = 257;
  v247 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v248 = *(double *)a2;
  v249 = *(double *)(a2 + 8);
  v250 = *(double *)(a2 + 16);
  v251 = *(double *)(a2 + 24);
  v252 = *(double *)(a2 + 32);
  v253 = *(double *)(a2 + 40);
  kdebug_trace();
  return v247 + v248 + v249 + v250 + v251 + v252 + v253;
}

void sub_20F72FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F72FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F72FC04(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v30;
  int64x2_t v31;
  _OWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  _OWORD *v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t i;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  _OWORD *v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[48];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = 0;
  *(_OWORD *)a1 = v6;
  a1[4] = 0;
  a1[5] = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    a1[3] = (uint64_t)v10;
    a1[4] = (uint64_t)v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[5] = (uint64_t)v11;
    memcpy(v10, v8, v9);
    a1[4] = (uint64_t)v11;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v12 - v13);
    a1[6] = (uint64_t)v15;
    a1[7] = (uint64_t)v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[8] = (uint64_t)v16;
    memcpy(v15, v13, v14);
    a1[7] = (uint64_t)v16;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 9);
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    a1[9] = (uint64_t)v20;
    a1[10] = (uint64_t)v20;
    v21 = &v20[8 * (v19 >> 3)];
    a1[11] = (uint64_t)v21;
    memcpy(v20, v18, v19);
    a1[10] = (uint64_t)v21;
  }
  v22 = a2[6];
  v23 = a2[7];
  v24 = a2[8];
  __asm { FMOV            V4.2D, #1.0 }
  *((_OWORD *)a1 + 15) = _Q4;
  v30 = a1 + 30;
  v31 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)a1 + 11) = v31;
  *((_OWORD *)a1 + 6) = v22;
  *((_OWORD *)a1 + 7) = v23;
  *((_OWORD *)a1 + 8) = v24;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((int64x2_t *)a1 + 12) = v31;
  *((int64x2_t *)a1 + 13) = v31;
  v77 = a1 + 26;
  *((_OWORD *)a1 + 14) = xmmword_2102DB700;
  a1[32] = 0x3FF0000000000000;
  a1[33] = 0;
  v78 = a1 + 33;
  *((_OWORD *)a1 + 18) = _Q4;
  v79 = a1 + 36;
  a1[34] = 0;
  a1[35] = 0;
  a1[38] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 39) = 0u;
  v80 = a1 + 39;
  a1[49] = 0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  a1[42] = 0x3FF0000000000000;
  v32 = a1 + 42;
  a1[46] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = _Q4;
  *((_OWORD *)a1 + 26) = 0u;
  v81 = _Q4;
  a1[55] = 0x3FF0000000000000;
  a1[58] = 0;
  a1[59] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  a1[64] = 0;
  sub_20F4E052C((uint64_t)(a1 + 66), a3);
  *((_DWORD *)a1 + 546) = 0;
  bzero(a1 + 274, 0x314uLL);
  *((_DWORD *)a1 + 750) = 0;
  *(_OWORD *)(a1 + 373) = 0u;
  *((_OWORD *)a1 + 188) = 0u;
  *((_DWORD *)a1 + 756) = 0;
  *(_OWORD *)(a1 + 379) = 0u;
  *((_DWORD *)a1 + 762) = 0;
  *((_OWORD *)a1 + 191) = 0u;
  *((_DWORD *)a1 + 768) = 0;
  *(_OWORD *)(a1 + 385) = 0u;
  *((_DWORD *)a1 + 774) = 0;
  *((_OWORD *)a1 + 194) = 0u;
  *((_OWORD *)a1 + 195) = 0u;
  *((_DWORD *)a1 + 784) = 1065353216;
  *((_BYTE *)a1 + 4752) = 0;
  *((_OWORD *)a1 + 296) = 0u;
  *((_OWORD *)a1 + 295) = 0u;
  *((_OWORD *)a1 + 294) = 0u;
  *((_OWORD *)a1 + 293) = 0u;
  *((_OWORD *)a1 + 292) = 0u;
  *((_OWORD *)a1 + 291) = 0u;
  *((_OWORD *)a1 + 290) = 0u;
  *((_OWORD *)a1 + 289) = 0u;
  *((_OWORD *)a1 + 288) = 0u;
  *((_OWORD *)a1 + 287) = 0u;
  *((_OWORD *)a1 + 286) = 0u;
  *((_OWORD *)a1 + 285) = 0u;
  *((_OWORD *)a1 + 284) = 0u;
  *((_OWORD *)a1 + 283) = 0u;
  *((_OWORD *)a1 + 282) = 0u;
  *((_OWORD *)a1 + 281) = 0u;
  *((_OWORD *)a1 + 280) = 0u;
  *((_OWORD *)a1 + 279) = 0u;
  *((_OWORD *)a1 + 278) = 0u;
  *((_OWORD *)a1 + 277) = 0u;
  *((_OWORD *)a1 + 276) = 0u;
  *((_OWORD *)a1 + 275) = 0u;
  *((_OWORD *)a1 + 274) = 0u;
  *((_OWORD *)a1 + 273) = 0u;
  *((_OWORD *)a1 + 200) = 0u;
  *((_OWORD *)a1 + 199) = 0u;
  *((_OWORD *)a1 + 198) = 0u;
  *((_OWORD *)a1 + 197) = 0u;
  *(_WORD *)v92 = 1;
  v90 = 0u;
  v93 = 0u;
  v94 = 0u;
  DWORD2(v90) = -3;
  memset(&v92[2], 0, 46);
  v91 = 0xFFFFFFFDuLL;
  LOBYTE(v93) = 1;
  a1[595] = (uint64_t)&unk_24CA01F18;
  *((_OWORD *)a1 + 298) = v81;
  *((_OWORD *)a1 + 299) = v81;
  *((_OWORD *)a1 + 300) = v81;
  *((_OWORD *)a1 + 301) = v81;
  *((_OWORD *)a1 + 302) = v81;
  *((_OWORD *)a1 + 303) = v81;
  *((_OWORD *)a1 + 304) = v81;
  a1[610] = (uint64_t)&off_24CA01F88;
  bzero(a1 + 611, 0x3C8uLL);
  *((_DWORD *)a1 + 1464) = 16842753;
  sub_20F4EDD00((char *)a1 + 5864);
  *(_OWORD *)(a1 + 827) = 0u;
  *(_OWORD *)(a1 + 825) = 0u;
  *(_OWORD *)(a1 + 823) = 0u;
  *(_OWORD *)(a1 + 821) = 0u;
  *(_OWORD *)(a1 + 819) = 0u;
  *(_OWORD *)(a1 + 817) = 0u;
  *(_OWORD *)(a1 + 815) = 0u;
  *(_OWORD *)(a1 + 813) = 0u;
  *(_OWORD *)(a1 + 811) = 0u;
  *(_OWORD *)(a1 + 809) = 0u;
  *(_OWORD *)(a1 + 807) = 0u;
  *(_OWORD *)(a1 + 805) = 0u;
  *(uint64_t *)((char *)a1 + 6630) = 0;
  a1[830] = 0;
  a1[595] = (uint64_t)&unk_24CA01E60;
  *((_BYTE *)a1 + 6648) = 0;
  *((_OWORD *)a1 + 416) = 0u;
  sub_20F747680((uint64_t)(a1 + 834));
  a1[595] = (uint64_t)off_24CA01D68;
  sub_20F747680((uint64_t)(a1 + 1829));
  a1[2824] = (uint64_t)(a1 + 610);
  a1[2825] = 0;
  a1[2827] = 0;
  a1[2826] = 0;
  a1[2837] = 0;
  a1[2839] = 0;
  a1[2838] = 0;
  sub_20F74F47C(a1 + 2824);
  *((_DWORD *)a1 + 5682) = 2;
  *((_DWORD *)a1 + 5684) = -3;
  *(_OWORD *)((char *)a1 + 22762) = 0u;
  *(_OWORD *)((char *)a1 + 22778) = 0u;
  *(_OWORD *)(a1 + 2849) = 0u;
  *((_DWORD *)a1 + 5686) = -3;
  *(uint64_t *)((char *)a1 + 22748) = 0;
  *((_DWORD *)a1 + 5689) = 0;
  *((_WORD *)a1 + 11380) = 1;
  *((_BYTE *)a1 + 22808) = 1;
  a1[2852] = 0;
  a1[2855] = 0;
  *((_OWORD *)a1 + 1428) = 0u;
  *((_DWORD *)a1 + 5748) = 0;
  a1[2877] = 0;
  *(_OWORD *)(a1 + 2875) = 0u;
  *(_OWORD *)(a1 + 2859) = 0u;
  *(_OWORD *)(a1 + 2861) = 0u;
  *(_OWORD *)(a1 + 2863) = 0u;
  *(_OWORD *)(a1 + 2865) = 0u;
  *((_DWORD *)a1 + 5734) = 0;
  *((_DWORD *)a1 + 5740) = 0;
  *((_OWORD *)a1 + 1434) = 0u;
  *((_DWORD *)a1 + 5746) = 0;
  *(_OWORD *)(a1 + 2871) = 0u;
  v33 = operator new(8uLL);
  a1[2875] = (uint64_t)v33;
  *v33 = 0;
  a1[2877] = (uint64_t)(v33 + 1);
  a1[2876] = (uint64_t)(v33 + 1);
  a1[2888] = 0;
  a1[2890] = 0;
  a1[2889] = 0;
  *(_OWORD *)((char *)a1 + 23084) = 0u;
  *((_OWORD *)a1 + 1439) = 0u;
  *((_OWORD *)a1 + 1440) = 0u;
  *((_OWORD *)a1 + 1441) = 0u;
  *((_OWORD *)a1 + 1442) = 0u;
  v34 = operator new(8uLL);
  a1[2888] = (uint64_t)v34;
  *v34++ = 0;
  a1[2890] = (uint64_t)v34;
  a1[2889] = (uint64_t)v34;
  *(_OWORD *)((char *)a1 + 23204) = 0u;
  *(_OWORD *)(a1 + 2891) = 0u;
  *(_OWORD *)(a1 + 2893) = 0u;
  *(_OWORD *)(a1 + 2895) = 0u;
  *(_OWORD *)(a1 + 2897) = 0u;
  *(_OWORD *)(a1 + 2899) = 0u;
  a1[2904] = 0x3EE4F8B588E368F1;
  a1[2907] = 0xA00000001;
  *((_BYTE *)a1 + 23264) = 0;
  a1[2909] = 0x3F50624DD2F1A9FCLL;
  *((int64x2_t *)a1 + 1455) = vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  *((_BYTE *)a1 + 23296) = 0;
  a1[2913] = 0x3FF7B8BAC710CB29;
  a1[2978] = (uint64_t)(a1 + 2914);
  a1[2979] = 64;
  a1[2980] = 0;
  *((_WORD *)a1 + 11924) = 0;
  a1[2985] = 0;
  a1[2989] = 0;
  a1[2993] = 0;
  a1[2997] = 0;
  *(_OWORD *)(a1 + 2999) = 0u;
  a1[2998] = 0xBFF0000000000000;
  *((_DWORD *)a1 + 6002) = 0;
  a1[2906] = (uint64_t)&off_24C9FCEF0;
  *((_OWORD *)a1 + 1501) = xmmword_2103AB100;
  *((_BYTE *)a1 + 24032) = 1;
  a1[3005] = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #2.0 }
  *((_OWORD *)a1 + 1503) = _Q0;
  *((_OWORD *)a1 + 1504) = xmmword_210315720;
  v36 = *a1;
  if (!*a1)
  {
LABEL_13:
    if (!a1[391])
      return a1;
    goto LABEL_14;
  }
  v37 = a1 + 51;
  if (*((_BYTE *)a1 + 1317))
  {
    v38 = *(double *)v36;
    v39 = *(_QWORD *)(v36 + 8);
    v40 = *(double *)(v36 + 16);
    v41 = *(_QWORD *)(v36 + 24);
    v100 = *(_OWORD *)(v36 + 32);
    v101 = *(_QWORD *)(v36 + 48);
    v42 = *(_QWORD *)(v36 + 56);
    v88 = *(_OWORD *)(v36 + 64);
    v89 = *(_QWORD *)(v36 + 80);
    v87 = *(_QWORD *)(v36 + 104);
    v86 = *(_OWORD *)(v36 + 88);
    v85 = *(_QWORD *)(v36 + 128);
    v84 = *(_OWORD *)(v36 + 112);
    v83 = *(_QWORD *)(v36 + 152);
    v82 = *(_OWORD *)(v36 + 136);
    v43 = *(_OWORD *)(v36 + 160);
    v44 = *(_OWORD *)(v36 + 176);
    v45 = *(_OWORD *)(v36 + 192);
    v46 = *(_OWORD *)(v36 + 208);
    *(_QWORD *)&v92[32] = *(_QWORD *)(v36 + 224);
    *(_OWORD *)v92 = v45;
    *(_OWORD *)&v92[16] = v46;
    v90 = v43;
    v91 = v44;
    v47 = *(_OWORD *)(v36 + 232);
    v48 = *(_OWORD *)(v36 + 248);
    v49 = *(_OWORD *)(v36 + 264);
    v50 = *(_OWORD *)(v36 + 280);
    v99 = *(_QWORD *)(v36 + 296);
    v97 = v49;
    v98 = v50;
    v95 = v47;
    v96 = v48;
    v51 = v40 * *((double *)a1 + 166);
    *((double *)a1 + 22) = v38 * *((double *)a1 + 165);
    a1[23] = v39;
    *((double *)a1 + 24) = v51;
    a1[25] = v41;
    *v77 = v100;
    a1[28] = v101;
    a1[29] = v42;
    a1[32] = v89;
    *v30 = v88;
    a1[35] = v87;
    *v78 = v86;
    a1[38] = v85;
    *v79 = v84;
    a1[41] = v83;
    *v80 = v82;
    v52 = v90;
    v53 = v91;
    v54 = *(_OWORD *)v92;
    v55 = *(_OWORD *)&v92[16];
    a1[50] = *(_QWORD *)&v92[32];
    *((_OWORD *)a1 + 23) = v54;
    *((_OWORD *)a1 + 24) = v55;
    *v32 = v52;
    *((_OWORD *)a1 + 22) = v53;
    v56 = v95;
    v57 = v96;
    v58 = v97;
    v59 = v98;
    a1[59] = v99;
    *(_OWORD *)(a1 + 55) = v58;
    *(_OWORD *)(a1 + 57) = v59;
    *v37 = v56;
    *(_OWORD *)(a1 + 53) = v57;
    goto LABEL_13;
  }
  v65 = *(_OWORD *)(v36 + 16);
  *((_OWORD *)a1 + 11) = *(_OWORD *)v36;
  *((_OWORD *)a1 + 12) = v65;
  v66 = *(_OWORD *)(v36 + 32);
  a1[28] = *(_QWORD *)(v36 + 48);
  *v77 = v66;
  a1[29] = *(_QWORD *)(v36 + 56);
  v67 = *(_OWORD *)(v36 + 64);
  a1[32] = *(_QWORD *)(v36 + 80);
  *v30 = v67;
  v68 = *(_OWORD *)(v36 + 88);
  a1[35] = *(_QWORD *)(v36 + 104);
  *v78 = v68;
  v69 = *(_OWORD *)(v36 + 112);
  a1[38] = *(_QWORD *)(v36 + 128);
  *v79 = v69;
  v70 = *(_OWORD *)(v36 + 136);
  a1[41] = *(_QWORD *)(v36 + 152);
  *v80 = v70;
  v72 = *(_OWORD *)(v36 + 192);
  v71 = *(_OWORD *)(v36 + 208);
  v73 = *(_OWORD *)(v36 + 176);
  a1[50] = *(_QWORD *)(v36 + 224);
  *((_OWORD *)a1 + 23) = v72;
  *((_OWORD *)a1 + 24) = v71;
  *((_OWORD *)a1 + 22) = v73;
  *v32 = *(_OWORD *)(v36 + 160);
  v74 = *(_OWORD *)(v36 + 264);
  v75 = *(_OWORD *)(v36 + 280);
  v76 = *(_OWORD *)(v36 + 248);
  a1[59] = *(_QWORD *)(v36 + 296);
  *(_OWORD *)(a1 + 55) = v74;
  *(_OWORD *)(a1 + 57) = v75;
  *(_OWORD *)(a1 + 53) = v76;
  *v37 = *(_OWORD *)(v36 + 232);
  if (!a1[391])
    return a1;
LABEL_14:
  v60 = (_QWORD *)a1[390];
  if (v60)
  {
    do
    {
      v61 = (_QWORD *)*v60;
      operator delete(v60);
      v60 = v61;
    }
    while (v61);
  }
  a1[390] = 0;
  v62 = a1[389];
  if (v62)
  {
    for (i = 0; i != v62; ++i)
      *(_QWORD *)(a1[388] + 8 * i) = 0;
  }
  a1[391] = 0;
  return a1;
}

void sub_20F730564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F7307C4()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x20F7307D0);
  JUMPOUT(0x20F730798);
}

void sub_20F7307E4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20F7307A8);
  JUMPOUT(0x20F7307A0);
}

_QWORD *sub_20F7307F4(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  sub_20F2C539C(a1 + 2906);
  sub_20F76CB54((uint64_t)(a1 + 595));
  sub_20F4EE048((uint64_t)(a1 + 570));
  sub_20F4EE048((uint64_t)(a1 + 546));
  v2 = (void *)a1[399];
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[396];
  if (v3)
  {
    a1[397] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[390];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a1[388];
  a1[388] = 0;
  if (v6)
    operator delete(v6);
  sub_20F0287BC(a1 + 274);
  sub_20F6304A4((uint64_t)(a1 + 66));
  v7 = (std::__shared_weak_count *)a1[64];
  if (!v7)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (char *)a1[60];
    if (!v10)
      goto LABEL_24;
  }
  else
  {
LABEL_13:
    v10 = (char *)a1[60];
    if (!v10)
      goto LABEL_24;
  }
  v11 = (char *)a1[61];
  v12 = v10;
  if (v11 != v10)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v11 -= 16;
    }
    while (v11 != v10);
    v12 = (char *)a1[60];
  }
  a1[61] = v10;
  operator delete(v12);
LABEL_24:
  v16 = (void *)a1[19];
  if (v16)
  {
    a1[20] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[9];
  if (v17)
  {
    a1[10] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[6];
  if (v18)
  {
    a1[7] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[3];
  if (v19)
  {
    a1[4] = v19;
    operator delete(v19);
  }
  return a1;
}

_DWORD *sub_20F73099C(_DWORD *a1)
{
  if (*a1 != 2)
    sub_20E8BF000((uint64_t)(a1 + 2));
  return a1;
}

_QWORD *sub_20F7309D4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_20F730A14(_QWORD *a1)
{
  sub_20F4EE048((uint64_t)(a1 + 971));
  sub_20F74D8D0(a1 + 11);
  if (*a1)
    MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20F730A64(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24CA01E60;
  sub_20F4EE048(a1 + 9680);
  sub_20F74D8D0((_QWORD *)(a1 + 2000));
  v2 = *(_QWORD *)(a1 + 1912);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA01F18;
  *(_QWORD *)(a1 + 120) = &off_24CA01F88;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v3 = *(void **)(a1 + 1040);
  if (v3)
  {
    *(_QWORD *)(a1 + 1048) = v3;
    operator delete(v3);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F4EE970(a1 + 128);
  return a1;
}

void sub_20F730B1C(std::string *a1@<X8>)
{
  int v2;
  size_t size;
  unint64_t v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string::value_type __s[23];
  char v11;
  std::string __dst;
  std::string v13;

  v13.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v13.__r_.__value_.__r.__words[1]) = 0;
  v13.__r_.__value_.__r.__words[2] = 0xD00000000000000;
  strcpy((char *)&v13, "GeneralSchur");
  std::string::append(&v13, "BSC", 3uLL);
  std::string::append(&v13, ",", 1uLL);
  std::string::append(&v13, "BlockDiag", 9uLL);
  v2 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v4 = size + 4;
  if (size + 4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 4;
    if (!size)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v8 = &v13;
  else
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  memmove(p_dst, v8, size);
LABEL_15:
  strcpy((char *)p_dst + size, "> + ");
  v11 = 14;
  strcpy(__s, "SparseCholesky");
  v9 = std::string::append(&__dst, __s, 0xEuLL);
  *a1 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v11 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v13.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_20F730D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

#error "20F730D78: too big function (funcsize=0)"

void sub_20F744BCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 10624);
  if (v3)
  {
    *(_QWORD *)(v1 + 10632) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F744E9C(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2);
  if ((_DWORD)result)
    return 1;
  a1[1877] = 0;
  return result;
}

uint64_t sub_20F744F08(uint64_t a1)
{
  return a1 + 18208;
}

double sub_20F744F14()
{
  return 0.0;
}

double sub_20F744F1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  uint64_t v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  double v60;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v56 = 3;
      v57 = v5 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v56 = 3;
      v57 = v29 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v59 = 0uLL;
      v60 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D3 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v60 * v60;
    }
    v47 += 16;
  }
  for (jj = a1[100]; jj != a1[101]; jj += 16)
  {
    v54 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
      i = i + *(double *)(v54 + 32) * *(double *)(v54 + 32);
  }
  return i;
}

void sub_20F745264(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float64x2_t a6)
{
  float64x2_t v6;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  __int128 v21;
  float64x2_t v22;
  __int128 v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float64x2_t v43;
  float64x2_t *v44;
  __n128 v45;
  uint64_t **i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double cosval;
  __double2 v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  double v79;
  double v81;
  double v83;
  float64x2_t v85;
  double v91;
  unsigned int *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  double v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  __int128 v105;
  float64x2_t *v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  float64x2_t v113;
  __int128 v114;
  uint64_t v115;
  double v119;
  __double2 v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float64x2_t v130;
  double v131;
  float64x2_t v132;
  float64x2_t v133;
  double v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double *v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  __int128 v151;
  uint64_t v153;
  float64x2_t v154;
  double v157;
  __double2 v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  double v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  double v180;

  v9 = 0;
  v10 = *(uint64_t **)(a1 + 17936);
  v11 = a1 + 17864;
  do
  {
    v12 = *(_QWORD *)(v11 + 8 * v9);
    v13 = v9 + 1;
    v14 = *(_QWORD *)(v11 + 8 * (v9 + 1));
    v15 = *(_QWORD **)(a1 + 17832);
    v16 = &v10[v14 - v12];
    if (v9 > 3)
    {
      if (v9 > 5)
      {
        if (v9 == 6)
        {
          if (v14 != v12)
          {
            v55 = v15[73];
            v56 = 8 * v14 - 8 * v12;
            do
            {
              v94 = *(unsigned int **)(v55 + 16 * *v10 + 8);
              *((_QWORD *)v94 + 30) = *((_QWORD *)v94 + 12);
              v95 = *((_OWORD *)v94 + 5);
              *((_OWORD *)v94 + 13) = *((_OWORD *)v94 + 4);
              *((_OWORD *)v94 + 14) = v95;
              v96 = *((_OWORD *)v94 + 3);
              *((_OWORD *)v94 + 11) = *((_OWORD *)v94 + 2);
              *((_OWORD *)v94 + 12) = v96;
              if (*((_BYTE *)v94 + 20))
              {
                v97 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17912) + *v94));
                _Q1 = *(_OWORD *)v97;
                _D3 = *(_QWORD *)(v97 + 8);
                __asm { FMLA            D2, D3, V1.D[1] }
                v101 = _D2 + *(double *)(v97 + 16) * *(double *)(v97 + 16);
                if (v101 >= 0.0000002635)
                {
                  v57 = sqrt(v101);
                  v59 = __sincos_stret(v57);
                  cosval = v59.__cosval;
                  v60 = v59.__sinval / v57;
                  v61 = 1.0 / v101 * (1.0 - v59.__cosval);
                }
                else
                {
                  v61 = 0.5 - v101 * (v101 / -720.0 + 0.0416666667);
                  v60 = 1.0 - v101 * (0.166666667 - v101 * (v101 / -5040.0 + 0.00833333333));
                  cosval = 1.0 - v101 * v61;
                }
                v62 = *(double *)(v97 + 8);
                v63 = v61 * *(double *)v97;
                v64 = v61 * v62;
                v65 = *(double *)(v97 + 16);
                v66.f64[0] = cosval + *(double *)v97 * v63;
                v67 = cosval + v62 * (v61 * v62);
                v68 = cosval + v65 * (v61 * v65);
                v69 = v63 * v62;
                v70 = v63 * v65;
                v71 = v64 * v65;
                v72 = v60 * *(double *)v97;
                v73 = v60 * v62;
                v74 = v60 * v65;
                v75.f64[0] = v69 - v74;
                v76.f64[0] = v73 + v70;
                v66.f64[1] = v69 + v74;
                v77 = v71 - v72;
                v75.f64[1] = v67;
                _D3 = v72 + v71;
                v76.f64[1] = v77;
                v79 = *((double *)v94 + 6);
                _Q4 = *((float64x2_t *)v94 + 2);
                v81 = *((double *)v94 + 9);
                _Q6 = *(float64x2_t *)(v94 + 14);
                v83 = *((double *)v94 + 12);
                _Q19 = *((float64x2_t *)v94 + 5);
                v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q4.f64[0]), v75, _Q4, 1), v76, v79);
                __asm { FMLA            D21, D3, V4.D[1] }
                v91 = _D21 + v68 * v79;
                __asm
                {
                  FMLA            D21, D3, V6.D[1]
                  FMLA            D2, D3, V19.D[1]
                }
                *((double *)v94 + 6) = v91;
                *((float64x2_t *)v94 + 2) = v85;
                *((double *)v94 + 9) = _D21 + v68 * v81;
                *(float64x2_t *)(v94 + 14) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q6.f64[0]), v75, _Q6, 1), v76, v81);
                *((double *)v94 + 12) = _D2 + v68 * v83;
                *((float64x2_t *)v94 + 5) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v66, _Q19.f64[0]), v75, _Q19, 1), v76, v83);
                sub_20F811C04((uint64_t)(v94 + 4));
              }
              ++v10;
              v56 -= 8;
            }
            while (v56);
            goto LABEL_2;
          }
        }
        else if (v14 != v12)
        {
          v138 = v15[85];
          v139 = *a2;
          v140 = *(_QWORD *)(a1 + 17920);
          v141 = *(_QWORD *)(a1 + 18112);
          v142 = 8 * v14 - 8 * v12;
          do
          {
            v143 = *v10++;
            v144 = *(double **)(v138 + 16 * v143 + 8);
            v145 = v144[4];
            v146 = *(_QWORD *)(v141 + 8 * (v140 + *(unsigned int *)v144));
            v144[5] = v145;
            v144[4] = v145 + *(double *)(v139 + 8 * v146);
            v142 -= 8;
          }
          while (v142);
          goto LABEL_2;
        }
      }
      else if (v9 == 5)
      {
        if (v14 != v12)
        {
          v31 = v15[61];
          do
          {
            v32 = *(unsigned int **)(v31 + 16 * *v10 + 8);
            v33 = *((_OWORD *)v32 + 5);
            v34 = *((_OWORD *)v32 + 7);
            v35 = *((_OWORD *)v32 + 8);
            *(_OWORD *)(v32 + 98) = *((_OWORD *)v32 + 6);
            *(_OWORD *)(v32 + 102) = v34;
            v36 = *((float64x2_t *)v32 + 3);
            *(_OWORD *)(v32 + 90) = *((_OWORD *)v32 + 4);
            *(_OWORD *)(v32 + 94) = v33;
            v37 = *((_OWORD *)v32 + 9);
            v38 = *((_OWORD *)v32 + 11);
            v39 = *((_OWORD *)v32 + 12);
            *(_OWORD *)(v32 + 114) = *((_OWORD *)v32 + 10);
            *(_OWORD *)(v32 + 118) = v38;
            *(_OWORD *)(v32 + 106) = v35;
            *(_OWORD *)(v32 + 110) = v37;
            v40 = *((_OWORD *)v32 + 15);
            v41 = *((_OWORD *)v32 + 13);
            *(_OWORD *)(v32 + 130) = *((_OWORD *)v32 + 14);
            *(_OWORD *)(v32 + 134) = v40;
            *(_OWORD *)(v32 + 122) = v39;
            *(_OWORD *)(v32 + 126) = v41;
            v42 = *((_OWORD *)v32 + 3);
            v43 = *((float64x2_t *)v32 + 2);
            *(float64x2_t *)(v32 + 82) = v43;
            *(_OWORD *)(v32 + 86) = v42;
            v44 = (float64x2_t *)(*a2 + 8
                                      * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17904) + *v32)));
            v45 = (__n128)vaddq_f64(v36, v44[1]);
            *((float64x2_t *)v32 + 2) = vaddq_f64(v43, *v44);
            *((__n128 *)v32 + 3) = v45;
            for (i = (uint64_t **)*((_QWORD *)v32 + 37); i; i = (uint64_t **)*i)
              v45.n128_f64[0] = sub_20F6182A0((char *)i[5], (float64x2_t *)v32 + 2, v45);
            sub_20F6178A8((uint64_t)(v32 + 4));
            ++v10;
          }
          while (v10 != v16);
          goto LABEL_2;
        }
      }
      else if (v14 != v12)
      {
        v102 = v15[49];
        v103 = 8 * v14 - 8 * v12;
        do
        {
          v104 = *(unsigned int **)(v102 + 16 * *v10 + 8);
          v105 = *((_OWORD *)v104 + 2);
          *(_OWORD *)(v104 + 42) = *((_OWORD *)v104 + 3);
          *(_OWORD *)(v104 + 38) = v105;
          *((_QWORD *)v104 + 23) = *((_QWORD *)v104 + 8);
          *((_BYTE *)v104 + 192) = *((_BYTE *)v104 + 72);
          if (*((_BYTE *)v104 + 20) && *((_BYTE *)v104 + 144))
          {
            v106 = (float64x2_t *)(v104 + 8);
            v107 = (uint64_t)(v104 + 4);
            v108 = (float64x2_t *)(*a2
                                 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17896) + *v104)));
            v109 = vaddq_f64(v106[1], v108[1]);
            *v106 = vaddq_f64(*v106, *v108);
            v106[1] = v109;
            sub_20F6169C8(v107);
            sub_20F616F2C(v107);
          }
          ++v10;
          v103 -= 8;
        }
        while (v103);
        goto LABEL_2;
      }
    }
    else if (v9 > 1)
    {
      if (v9 == 2)
      {
        if (v14 != v12)
        {
          v47 = v15[25];
          v48 = *a2;
          v49 = *(_QWORD *)(a1 + 17880);
          v50 = *(_QWORD *)(a1 + 18112);
          v51 = 8 * v14 - 8 * v12;
          do
          {
            v52 = *v10++;
            v53 = *(double **)(v47 + 16 * v52 + 8);
            v54 = v53[4];
            v53[6] = v54;
            v53[4] = v54 + *(double *)(v48 + 8 * *(_QWORD *)(v50 + 8 * (v49 + *(unsigned int *)v53)));
            *((_BYTE *)v53 + 40) = 0;
            v51 -= 8;
          }
          while (v51);
          goto LABEL_2;
        }
      }
      else if (v14 != v12)
      {
        v110 = v15[37];
        v111 = 8 * v14 - 8 * v12;
        do
        {
          v112 = *(unsigned int **)(v110 + 16 * *v10 + 8);
          v113 = *((float64x2_t *)v112 + 3);
          *(_OWORD *)(v112 + 34) = *((_OWORD *)v112 + 2);
          v114 = *((_OWORD *)v112 + 4);
          *(_OWORD *)(v112 + 46) = *((_OWORD *)v112 + 5);
          *(_OWORD *)(v112 + 42) = v114;
          *((_QWORD *)v112 + 25) = *((_QWORD *)v112 + 12);
          *(float64x2_t *)(v112 + 38) = v113;
          *((_OWORD *)v112 + 13) = *(_OWORD *)(v112 + 26);
          *((_QWORD *)v112 + 28) = *((_QWORD *)v112 + 15);
          if (*((_BYTE *)v112 + 20) && *((_BYTE *)v112 + 129))
          {
            v115 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17888) + *v112));
            v113.f64[0] = *(float64_t *)(v115 + 16);
            _Q2 = *(float64x2_t *)v115;
            _D3 = *(_QWORD *)(v115 + 8);
            __asm { FMLA            D0, D3, V2.D[1] }
            v119 = sqrt(_D0 + v113.f64[0] * v113.f64[0]);
            a6.f64[0] = 1.0 / v119;
            if (v119 == 0.0)
              a6.f64[0] = 1.0;
            v177 = vmulq_n_f64(_Q2, a6.f64[0]);
            v179 = vmulq_f64(v113, a6).f64[0];
            v120 = __sincos_stret(v119);
            v6 = v177;
            a6.f64[0] = v120.__cosval + (1.0 - v120.__cosval) * vmuld_n_f64(v6.f64[0], v6.f64[0]);
            v121 = (1.0 - v120.__cosval) * vmuld_lane_f64(v6.f64[0], v6, 1);
            v122 = v121 - v120.__sinval * v179;
            v123 = (1.0 - v120.__cosval) * vmuld_n_f64(v177.f64[0], v179);
            v124 = vmuld_lane_f64(v120.__sinval, v177, 1);
            v125 = v124 + v123;
            v126 = v120.__sinval * v179 + v121;
            v127 = v120.__cosval + (1.0 - v120.__cosval) * vmuld_lane_f64(v177.f64[1], v177, 1);
            v128 = (1.0 - v120.__cosval) * vmuld_lane_f64(v179, v177, 1);
            v6.f64[0] = v128 - v120.__sinval * v177.f64[0];
            v129 = v123 - v124;
            v130.f64[0] = v120.__sinval * v177.f64[0] + v128;
            v131 = v120.__cosval + (1.0 - v120.__cosval) * vmuld_n_f64(v179, v179);
            v132.f64[0] = *((float64_t *)v112 + 6);
            v133 = *((float64x2_t *)v112 + 2);
            v134 = *((double *)v112 + 9);
            v135 = *(float64x2_t *)(v112 + 14);
            v136 = *((double *)v112 + 12);
            v137 = *((float64x2_t *)v112 + 5);
            *((float64x2_t *)v112 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, a6.f64[0]), v135, v126), v137, v129);
            *((double *)v112 + 6) = v132.f64[0] * a6.f64[0] + v134 * v126 + v136 * v129;
            *(float64x2_t *)(v112 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v122), v135, v127), v137, v130.f64[0]);
            *((double *)v112 + 9) = v132.f64[0] * v122 + v134 * v127 + v136 * v130.f64[0];
            *((float64x2_t *)v112 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v125), v135, v6.f64[0]), v137, v131);
            *((double *)v112 + 12) = v132.f64[0] * v125 + v134 * v6.f64[0] + v136 * v131;
            if (*((_BYTE *)v112 + 128))
            {
              v130.f64[0] = *((float64_t *)v112 + 15);
              v132.f64[0] = *(float64_t *)(v115 + 40);
              a6 = *(float64x2_t *)(v115 + 24);
              *(float64x2_t *)(v112 + 26) = vaddq_f64(*(float64x2_t *)(v112 + 26), a6);
              *((_QWORD *)v112 + 15) = *(_OWORD *)&vaddq_f64(v130, v132);
            }
          }
          ++v10;
          v111 -= 8;
        }
        while (v111);
        goto LABEL_2;
      }
    }
    else if (v9)
    {
      if (v14 != v12)
      {
        v17 = v15[13];
        v18 = 8 * v14 - 8 * v12;
        do
        {
          v19 = *v10++;
          v20 = *(unsigned int **)(v17 + 16 * v19 + 8);
          v21 = *((_OWORD *)v20 + 2);
          v22 = *((float64x2_t *)v20 + 3);
          *((_QWORD *)v20 + 22) = *((_QWORD *)v20 + 12);
          v24 = *((float64x2_t *)v20 + 4);
          v23 = *((_OWORD *)v20 + 5);
          v25 = *((float64x2_t *)v20 + 3);
          *((float64x2_t *)v20 + 9) = v24;
          *((_OWORD *)v20 + 10) = v23;
          v26 = *((float64x2_t *)v20 + 2);
          *((_OWORD *)v20 + 7) = v21;
          *((float64x2_t *)v20 + 8) = v22;
          v27 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17872) + *v20));
          v22.f64[0] = *((float64_t *)v20 + 12);
          v6.f64[0] = *(float64_t *)(v27 + 64);
          v28 = vaddq_f64(v26, *(float64x2_t *)v27);
          v29 = vaddq_f64(v25, *(float64x2_t *)(v27 + 16));
          a6 = vaddq_f64(v24, *(float64x2_t *)(v27 + 32));
          v30 = vaddq_f64(*((float64x2_t *)v20 + 5), *(float64x2_t *)(v27 + 48));
          *((float64x2_t *)v20 + 4) = a6;
          *((float64x2_t *)v20 + 5) = v30;
          *((float64x2_t *)v20 + 2) = v28;
          *((float64x2_t *)v20 + 3) = v29;
          *((_QWORD *)v20 + 12) = *(_OWORD *)&vaddq_f64(v22, v6);
          *((_BYTE *)v20 + 104) = 0;
          v18 -= 8;
        }
        while (v18);
LABEL_2:
        v10 = v16;
      }
    }
    else if (v14 != v12)
    {
      v147 = v15[1];
      v148 = 8 * v14 - 8 * v12;
      do
      {
        v149 = *v10++;
        v150 = *(unsigned int **)(v147 + 16 * v149 + 8);
        v154 = *((float64x2_t *)v150 + 3);
        *(_OWORD *)(v150 + 46) = *((_OWORD *)v150 + 2);
        *((_QWORD *)v150 + 31) = *((_QWORD *)v150 + 12);
        v151 = *((_OWORD *)v150 + 4);
        *(_OWORD *)(v150 + 58) = *((_OWORD *)v150 + 5);
        *(_OWORD *)(v150 + 54) = v151;
        _Q0 = *(_OWORD *)(v150 + 26);
        *(float64x2_t *)(v150 + 50) = v154;
        *((_OWORD *)v150 + 16) = _Q0;
        *((_QWORD *)v150 + 34) = *((_QWORD *)v150 + 15);
        v153 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17864) + *v150));
        v154.f64[0] = *(float64_t *)(v153 + 16);
        _Q2 = *(float64x2_t *)v153;
        _D3 = *(_QWORD *)(v153 + 8);
        __asm { FMLA            D0, D3, V2.D[1] }
        v157 = sqrt(*(double *)&_Q0 + v154.f64[0] * v154.f64[0]);
        a6.f64[0] = 1.0 / v157;
        if (v157 == 0.0)
          a6.f64[0] = 1.0;
        v178 = vmulq_n_f64(_Q2, a6.f64[0]);
        v180 = vmulq_f64(v154, a6).f64[0];
        v158 = __sincos_stret(v157);
        v6 = v178;
        v159 = (1.0 - v158.__cosval) * vmuld_lane_f64(v6.f64[0], v6, 1);
        a6.f64[0] = v158.__cosval + (1.0 - v158.__cosval) * vmuld_n_f64(v6.f64[0], v6.f64[0]);
        v160 = v159 - v158.__sinval * v180;
        v161 = (1.0 - v158.__cosval) * vmuld_n_f64(v178.f64[0], v180);
        v162 = vmuld_lane_f64(v158.__sinval, v178, 1);
        v163 = v162 + v161;
        v164 = v158.__sinval * v180 + v159;
        v165 = v158.__cosval + (1.0 - v158.__cosval) * vmuld_lane_f64(v178.f64[1], v178, 1);
        v166 = (1.0 - v158.__cosval) * vmuld_lane_f64(v180, v178, 1);
        v6.f64[0] = v166 - v158.__sinval * v178.f64[0];
        v167 = v161 - v162;
        v168 = v158.__sinval * v178.f64[0] + v166;
        v169 = *((double *)v150 + 6);
        v170 = *((float64x2_t *)v150 + 2);
        v171 = *((double *)v150 + 9);
        v172 = *(float64x2_t *)(v150 + 14);
        v173 = v158.__cosval + (1.0 - v158.__cosval) * vmuld_n_f64(v180, v180);
        v174 = *((double *)v150 + 12);
        v175 = *((float64x2_t *)v150 + 5);
        *((float64x2_t *)v150 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v170, a6.f64[0]), v172, v164), v175, v167);
        *((double *)v150 + 6) = v169 * a6.f64[0] + v171 * v164 + v174 * v167;
        *(float64x2_t *)(v150 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v170, v160), v172, v165), v175, v168);
        *((double *)v150 + 9) = v169 * v160 + v171 * v165 + v174 * v168;
        *((float64x2_t *)v150 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v170, v163), v172, v6.f64[0]), v175, v173);
        *((double *)v150 + 12) = v169 * v163 + v171 * v6.f64[0] + v174 * v173;
        v176.f64[0] = *((float64_t *)v150 + 15);
        a6.f64[0] = *(float64_t *)(v153 + 40);
        *(float64x2_t *)(v150 + 26) = vaddq_f64(*(float64x2_t *)(v150 + 26), *(float64x2_t *)(v153 + 24));
        *((_QWORD *)v150 + 15) = *(_OWORD *)&vaddq_f64(v176, a6);
        *((_BYTE *)v150 + 128) = 0;
        v148 -= 8;
      }
      while (v148);
      goto LABEL_2;
    }
    v9 = v13;
  }
  while (v13 != 8);
  *(_BYTE *)(a1 + 1877) = 0;
  *(_WORD *)(a1 + 1872) = 0;
  *(_WORD *)(a1 + 1875) = 0;
}

uint64_t sub_20F745B9C(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  size_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint64_t v14;
  float64x2_t *v15;
  double v16;
  float64x2_t v17;
  float64x2_t *v18;
  int8x16_t *v19;
  uint64_t v25;
  int8x16_t v26;
  int v27;
  int v28;
  signed int j;
  double *v30;
  int v31;
  double v32;
  uint64_t v33;
  float64x2_t *v34;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  uint64_t v40;
  float64x2_t v41;
  double *v42;
  double *v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  double v47;
  unint64_t v48;
  double *v49;
  unint64_t v50;
  uint64_t v51;
  double *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  float64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  double v75;
  uint64_t v76;
  double *v77;
  unint64_t v78;
  double *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  float64x2_t *v85;
  uint64_t v86;
  float64x2_t v87;
  double v88;
  uint64_t v89;
  double *v90;
  size_t v91;
  float64x2_t *v92;
  unint64_t v93;
  double *v94;
  unint64_t v95;
  uint64_t v96;
  double *v97;
  float64x2_t *v98;
  float64x2_t *v99;
  uint64_t v101;
  float64x2_t v102;
  char *v103;
  double *v104;
  double v105;
  _QWORD *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  double *v114;
  double *v115;
  uint64_t v116;
  float64x2_t *v117;
  double *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void *v132;
  size_t v133;
  unsigned int v134;
  size_t v135;
  void *v136;
  void *v137;
  int v138;
  char *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  __n128 v162;
  int v164;
  char *v165;
  uint64_t __len;
  int *v167;
  unsigned int v168;
  int *v169;
  uint64_t v170;
  uint64_t __src;
  double __srca;
  char *__srcb;
  unsigned int v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  void *v178[2];
  void *v179[2];
  __int128 v180;
  void *__p[2];
  uint64_t v182;
  float64x2_t *v183;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  void *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  char **v198;
  uint64_t v199;
  const void *v200;
  int v201;
  unint64_t v202;
  __int128 *v203;

  v3 = (int *)(a1 + 18232);
  v4 = (int *)(a1 + 17968);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 18136) + 8 * *(_QWORD *)(a1 + 18104));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 18144) - 8);
  v168 = v6 - v5;
  if (*(_BYTE *)(a1 + 1888))
  {
    v7 = *(double *)(a1 + 1896);
    v8 = *(double *)(a1 + 18464);
    v169 = (int *)(a1 + 17968);
    v170 = a2;
    if (v8 == v7)
      goto LABEL_3;
  }
  else
  {
    v7 = 0.0;
    v8 = *(double *)(a1 + 18464);
    v169 = (int *)(a1 + 17968);
    v170 = a2;
    if (v8 == 0.0)
    {
LABEL_3:
      v9 = *(double *)(a1 + 18472);
      if (v9 > 0.0)
        goto LABEL_4;
LABEL_62:
      v183 = 0;
      v184 = 0;
      v185 = 0;
      v89 = v3[56];
      if ((_DWORD)v89)
      {
        v90 = *(double **)(a1 + 18440);
        if (!v90)
        {
          v103 = (char *)operator new((8 * v89 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v104 = 0;
          do
          {
            *(double *)((char *)v104 + (_QWORD)v103) = 1.0 / *v104;
            ++v104;
          }
          while ((double *)(8 * v89) != v104);
          v183 = (float64x2_t *)v103;
          v184 = ((8 * v89 + 31) & 0xFFFFFFFE0uLL) >> 3;
          v185 = v89;
          goto LABEL_75;
        }
        v185 = v3[56];
        v91 = (8 * v89 + 31) & 0xFFFFFFFE0;
        v184 = v91 >> 3;
        v92 = (float64x2_t *)operator new(v91, (std::align_val_t)0x20uLL);
        v183 = v92;
        v93 = (v89 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v93 < 3)
        {
          v94 = (double *)v92;
        }
        else
        {
          v94 = (double *)v92;
          if ((unint64_t)((char *)v92 - (char *)v90) >= 0x20)
          {
            v95 = v93 + 1;
            v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            v94 = &v92->f64[v96];
            v97 = &v90[v96];
            v98 = (float64x2_t *)(v90 + 2);
            v99 = v92 + 1;
            __asm { FMOV            V0.2D, #1.0 }
            v101 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = vdivq_f64(_Q0, *v98);
              v99[-1] = vdivq_f64(_Q0, v98[-1]);
              *v99 = v102;
              v98 += 2;
              v99 += 2;
              v101 -= 4;
            }
            while (v101);
            v90 = v97;
            if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_75;
          }
        }
        do
        {
          v105 = *v90++;
          *v94++ = 1.0 / v105;
        }
        while (v94 != &v92->f64[v89]);
      }
      goto LABEL_75;
    }
  }
  __srca = v7 - v8;
  v27 = *(_DWORD *)(a1 + 1904);
  if (v27 == 1)
  {
    v43 = *(double **)(a1 + 18184);
    v44 = 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18136) + 8 * *(_QWORD *)(a1 + 18104));
    v45 = (float64x2_t *)operator new((v44 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v46 = v45;
    if ((_DWORD)v5)
    {
      v47 = v7 + 1.0;
      v48 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v48 < 3)
      {
        v49 = (double *)v45;
      }
      else
      {
        v49 = (double *)v45;
        if ((unint64_t)((char *)v45 - (char *)v43) >= 0x20)
        {
          v50 = v48 + 1;
          v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          v49 = &v45->f64[v51];
          v52 = &v43[v51];
          v53 = (float64x2_t *)(v43 + 2);
          v54 = v45 + 1;
          v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = vmulq_n_f64(*v53, v47);
            v54[-1] = vmulq_n_f64(v53[-1], v47);
            *v54 = v56;
            v53 += 2;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
          v43 = v52;
          if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
        }
      }
      do
      {
        v63 = *v43++;
        *v49++ = v47 * v63;
      }
      while (v49 != (double *)((char *)v45 + v44));
    }
LABEL_45:
    v64 = (*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3;
    if (*v3 >= (int)v64)
      v65 = v64;
    else
      v65 = *v3;
    v4 = v169;
    if ((int)v65 >= 1)
    {
      for (i = 0; i != v65; ++i)
      {
        v67 = v46->f64[i];
        *(float64_t *)sub_20F762098(v3, i, i, 1u) = v67;
      }
    }
    MEMORY[0x212BC6368](v46, 0x1000C8000313F17);
    sub_20F76BA04((_QWORD *)(a1 + 18232));
    v31 = *(_DWORD *)(a1 + 1904);
    if (v31 != 1)
      goto LABEL_21;
LABEL_52:
    v68 = v5;
    v69 = v4[58];
    v70 = *(_QWORD *)(a1 + 18184);
    v71 = 8 * v168;
    v72 = (v71 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v191 + 1) = v72 >> 3;
    v73 = (float64x2_t *)operator new(v72, (std::align_val_t)0x20uLL);
    v74 = v73;
    *(_QWORD *)&v191 = v73;
    LODWORD(v192) = v168;
    if (v168)
    {
      v75 = v7 + 1.0;
      v76 = v69 - v168;
      v77 = (double *)(v70 + 8 * v76);
      v78 = (v168 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v78 >= 5)
      {
        v80 = 8 * v76;
        v81 = (unint64_t)v73 - v70 + -8 * v76;
        v79 = (double *)v73;
        if (v81 >= 0x20)
        {
          v82 = v78 + 1;
          v83 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          v79 = &v73->f64[v83];
          v77 = (double *)((char *)v77 + v83 * 8);
          v84 = (float64x2_t *)(v80 + v70 + 16);
          v85 = v73 + 1;
          v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = vmulq_n_f64(*v84, v75);
            v85[-1] = vmulq_n_f64(v84[-1], v75);
            *v85 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_60;
        }
      }
      else
      {
        v79 = (double *)v73;
      }
      do
      {
        v88 = *v77++;
        *v79++ = v75 * v88;
      }
      while (v79 != (double *)((char *)v73 + v71));
    }
LABEL_60:
    sub_20F76B604(a1 + 18440, (uint64_t)&v191);
    MEMORY[0x212BC6368](v74, 0x1000C8000313F17);
    LODWORD(v5) = v68;
    v32 = __srca;
    goto LABEL_61;
  }
  if (!v27)
  {
    v28 = *v3 >= (int)((*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3)
        ? (*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3
        : *v3;
    if (v28 >= 1)
    {
      for (j = 0; j != v28; ++j)
      {
        v30 = (double *)sub_20F762098(v3, j, j, 1u);
        *v30 = __srca + *v30;
      }
    }
  }
  sub_20F76BA04((_QWORD *)(a1 + 18232));
  v31 = *(_DWORD *)(a1 + 1904);
  if (v31 == 1)
    goto LABEL_52;
LABEL_21:
  v32 = __srca;
  if (!v31)
  {
    v33 = v3[56];
    if ((_DWORD)v33)
    {
      v34 = *(float64x2_t **)(a1 + 18440);
      v35 = (v33 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v36 = (double *)v34;
      if (v35 < 3)
        goto LABEL_27;
      v37 = v35 + 1;
      v36 = &v34->f64[v37 & 0x3FFFFFFFFFFFFFFCLL];
      v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__srca, 0);
      v39 = v34 + 1;
      v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = vaddq_f64(v38, *v39);
        v39[-1] = vaddq_f64(v38, v39[-1]);
        *v39 = v41;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        v42 = &v34->f64[v33];
        do
        {
          *v36 = __srca + *v36;
          ++v36;
        }
        while (v36 != v42);
      }
    }
  }
LABEL_61:
  *(double *)(a1 + 18464) = v32 + *(double *)(a1 + 18464);
  *(_BYTE *)(a1 + 1872) = 0;
  v9 = *(double *)(a1 + 18472);
  if (v9 <= 0.0)
    goto LABEL_62;
LABEL_4:
  v10 = v3[56];
  v11 = (8 * v10 + 31) & 0xFFFFFFFE0;
  v184 = v11 >> 3;
  *(double *)&__src = v9;
  v12 = (int8x16_t *)operator new(v11, (std::align_val_t)0x20uLL);
  v183 = (float64x2_t *)v12;
  v185 = v10;
  if ((_DWORD)v10)
  {
    v13 = v12;
    bzero(v12, 8 * v10);
    v14 = 0;
    v15 = *(float64x2_t **)(a1 + 18440);
    if (v10 < 4)
    {
      v16 = *(double *)&__src;
    }
    else
    {
      v16 = *(double *)&__src;
      if ((unint64_t)((char *)v13 - (char *)v15) >= 0x20)
      {
        v14 = v10 & 0xFFFFFFFC;
        v17 = (float64x2_t)vdupq_lane_s64(__src, 0);
        v18 = v15 + 1;
        v19 = v13 + 1;
        __asm { FMOV            V1.2D, #1.0 }
        v25 = v14;
        do
        {
          v26 = vandq_s8((int8x16_t)vdivq_f64(_Q1, *v18), (int8x16_t)vcgeq_f64(vabsq_f64(*v18), v17));
          v19[-1] = vandq_s8((int8x16_t)vdivq_f64(_Q1, v18[-1]), (int8x16_t)vcgeq_f64(vabsq_f64(v18[-1]), v17));
          *v19 = v26;
          v18 += 2;
          v19 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v14 == v10)
          goto LABEL_75;
      }
    }
    v57 = v10 - v14;
    v58 = v14;
    v59 = (double *)&v13->i64[v14];
    v60 = &v15->f64[v58];
    do
    {
      v61 = *v60++;
      v62 = 1.0 / v61;
      if (fabs(v61) < v16)
        v62 = 0.0;
      *v59++ = v62;
      --v57;
    }
    while (v57);
  }
LABEL_75:
  LODWORD(v191) = 0;
  v192 = 0uLL;
  *((_QWORD *)&v191 + 1) = 0;
  v106 = operator new(8uLL);
  *((_QWORD *)&v191 + 1) = v106;
  *v106 = 0;
  *(_QWORD *)&v192 = v106 + 1;
  *((_QWORD *)&v192 + 1) = v106 + 1;
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v197 = 0;
  if (*(_QWORD *)(a1 + 18344) == *(_QWORD *)(a1 + 18352))
    v107 = 0;
  else
    v107 = *(uint64_t **)(a1 + 18344);
  v108 = *(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368);
  if (v108)
    v109 = *(uint64_t **)(a1 + 18368);
  else
    v109 = 0;
  if (*(_QWORD *)(a1 + 18392) == *(_QWORD *)(a1 + 18400))
    v110 = 0;
  else
    v110 = *(_QWORD *)(a1 + 18392);
  if (*(_QWORD *)(a1 + 18416) == *(_QWORD *)(a1 + 18424))
    v111 = 0;
  else
    v111 = *(_QWORD *)(a1 + 18416);
  sub_20F76BB80((uint64_t)&v191, v3[26], v108 >> 3, v107, v109, v110, v111);
  v174 = 0;
  v112 = operator new(8uLL);
  v175 = v112;
  *v112 = 0;
  v176 = v112 + 1;
  v177 = v112 + 1;
  *(_OWORD *)v178 = 0u;
  *(_OWORD *)v179 = 0u;
  v180 = 0u;
  *(_OWORD *)__p = 0u;
  v182 = 0;
  v113 = 8 * v185;
  v114 = (double *)operator new((v113 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v115 = v114;
  if (v185)
  {
    v116 = 0;
    v117 = v183;
    v118 = v114;
    do
    {
      *v118++ = -v117->f64[v116];
      v116 = (v116 + 1);
      v113 -= 8;
    }
    while (v113);
  }
  if (*(_QWORD *)(a1 + 18240) == *(_QWORD *)(a1 + 18248))
    v119 = 0;
  else
    v119 = *(_QWORD *)(a1 + 18240);
  if (*(_QWORD *)(a1 + 18264) == *(_QWORD *)(a1 + 18272))
    v120 = 0;
  else
    v120 = *(_QWORD *)(a1 + 18264);
  if (*(_QWORD *)(a1 + 18288) == *(_QWORD *)(a1 + 18296))
    v121 = 0;
  else
    v121 = *(_QWORD *)(a1 + 18288);
  if (*(_QWORD *)(a1 + 18312) == *(_QWORD *)(a1 + 18320))
    v122 = 0;
  else
    v122 = *(_QWORD *)(a1 + 18312);
  if (*(_QWORD *)(a1 + 18344) == *(_QWORD *)(a1 + 18352))
    v123 = 0;
  else
    v123 = *(_QWORD *)(a1 + 18344);
  if (*(_QWORD *)(a1 + 18368) == *(_QWORD *)(a1 + 18376))
    v124 = 0;
  else
    v124 = *(_QWORD *)(a1 + 18368);
  v125 = *(_QWORD *)(a1 + 18392);
  if (v125 == *(_QWORD *)(a1 + 18400))
    v125 = 0;
  v126 = *(_QWORD *)(a1 + 18416);
  if (v126 == *(_QWORD *)(a1 + 18424))
    v126 = 0;
  v127 = v193;
  v128 = *((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1) == (_QWORD)v192)
    v128 = 0;
  if (*((_QWORD *)&v193 + 1) == (_QWORD)v193)
    v127 = 0;
  v129 = *((_QWORD *)&v194 + 1);
  if (*((_QWORD *)&v194 + 1) == (_QWORD)v195)
    v129 = 0;
  v130 = v196;
  if ((_QWORD)v196 == *((_QWORD *)&v196 + 1))
    v130 = 0;
  sub_20F76BFD0(&v174, v119, v120, v121, v122, v3[26], v123, v124, v125, v126, (uint64_t)v114, (*((_QWORD *)&v193 + 1) - (_QWORD)v193) >> 3, v128, v127, v129, v130);
  MEMORY[0x212BC6368](v115, 0x1000C8000313F17);
  if ((_QWORD)v196)
  {
    *((_QWORD *)&v196 + 1) = v196;
    operator delete((void *)v196);
  }
  if (*((_QWORD *)&v194 + 1))
  {
    *(_QWORD *)&v195 = *((_QWORD *)&v194 + 1);
    operator delete(*((void **)&v194 + 1));
  }
  if ((_QWORD)v193)
  {
    *((_QWORD *)&v193 + 1) = v193;
    operator delete((void *)v193);
  }
  if (*((_QWORD *)&v191 + 1))
  {
    *(_QWORD *)&v192 = *((_QWORD *)&v191 + 1);
    operator delete(*((void **)&v191 + 1));
  }
  __srcb = *(char **)(a1 + 18160);
  v131 = v169[52];
  if (*(_BYTE *)(a1 + 1872))
  {
LABEL_129:
    *(_DWORD *)(v170 + 16) = v6;
    v132 = *(void **)v170;
    v167 = v3;
    if (*(_QWORD *)(v170 + 8) >= (unint64_t)v6)
    {
      v134 = v5;
    }
    else
    {
      if (v132)
        MEMORY[0x212BC6368](v132, 0x1000C8000313F17);
      v133 = (8 * v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)v170 = 0;
      *(_QWORD *)(v170 + 8) = v133 >> 3;
      v132 = operator new(v133, (std::align_val_t)0x20uLL);
      v134 = v5;
      *(_QWORD *)v170 = v132;
    }
    __len = 8 * v168;
    v135 = (__len + 31) & 0xFFFFFFFE0;
    v136 = operator new(v135, (std::align_val_t)0x20uLL);
    v137 = v136;
    v138 = v131 - v168;
    v139 = &__srcb[8 * (v131 - v168)];
    if (v168)
      bzero(v136, __len);
    v198 = (char **)&v183;
    LODWORD(v191) = v185;
    *((_QWORD *)&v191 + 1) = &v198;
    *(_QWORD *)&v192 = 0;
    LODWORD(v186) = v185;
    v165 = v139;
    v187 = v139;
    LODWORD(v188) = v138;
    v202 = (unint64_t)v185 << 32;
    v203 = &v191;
    LODWORD(v199) = v185;
    v200 = v137;
    v201 = 0;
    sub_20F76C940((unsigned int *)&v199, (unsigned int *)&v186, (uint64_t)&v202);
    v140 = v134;
    v141 = operator new((8 * v134 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v142 = v141;
    if (v134)
      memmove(v141, __srcb, 8 * v134);
    v143 = (*(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368)) >> 3;
    v144 = *(_QWORD *)(a1 + 18344);
    v145 = *(_QWORD *)(a1 + 18392);
    if (v145 == *(_QWORD *)(a1 + 18400))
      v145 = 0;
    LODWORD(v191) = v167[26];
    DWORD1(v191) = v143;
    *((_QWORD *)&v191 + 1) = v144;
    *(_QWORD *)&v192 = v145;
    v146 = *(_QWORD *)(a1 + 18416);
    if (v146 == *(_QWORD *)(a1 + 18424))
      v146 = 0;
    *((_QWORD *)&v192 + 1) = 0x100000000;
    *(_QWORD *)&v193 = v146;
    v186 = v134;
    v187 = v142;
    v199 = v168;
    v200 = v137;
    sub_20E8BEE6C((uint64_t)&v191, (uint64_t)&v199, (uint64_t)&v186, -1.0);
    if (v142 == v132)
    {
      if (!*v169 && v169[5] * *((unsigned __int8 *)v169 + 32) == v134)
      {
        *((_QWORD *)&v191 + 1) = v132;
        *(_QWORD *)&v191 = v134;
        sub_20E8BF7C8(a1 + 17976, (uint64_t)&v191, 0);
      }
    }
    else if (!*v169 && v169[5] * *((unsigned __int8 *)v169 + 32) == v134)
    {
      *((_QWORD *)&v191 + 1) = v142;
      *(_QWORD *)&v191 = v134;
      v187 = v132;
      v186 = v134;
      if (v132)
        sub_20E8BF20C(a1 + 17976, (uint64_t)&v186, (uint64_t)&v191, 0);
    }
    MEMORY[0x212BC6368](v142, 0x1000C8000313F17);
    MEMORY[0x212BC6368](v137, 0x1000C8000313F17);
    v153 = *(void **)v170;
    v154 = operator new(v135, (std::align_val_t)0x20uLL);
    v155 = v154;
    if (v168)
      memmove(v154, v165, __len);
    v156 = (*(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368)) >> 3;
    v157 = *(_QWORD *)(a1 + 18344);
    v158 = *(_QWORD *)(a1 + 18392);
    if (v158 == *(_QWORD *)(a1 + 18400))
      v158 = 0;
    LODWORD(v191) = v167[26];
    DWORD1(v191) = v156;
    *((_QWORD *)&v191 + 1) = v157;
    *(_QWORD *)&v192 = v158;
    v159 = *(_QWORD *)(a1 + 18416);
    if (v159 == *(_QWORD *)(a1 + 18424))
      v159 = 0;
    *((_QWORD *)&v192 + 1) = 0x100000001;
    *(_QWORD *)&v193 = v159;
    v186 = v168;
    v187 = v155;
    v199 = v140;
    v200 = v153;
    sub_20E8BEE6C((uint64_t)&v191, (uint64_t)&v199, (uint64_t)&v186, -1.0);
    v160 = operator new(v135, (std::align_val_t)0x20uLL);
    v161 = v160;
    if (v168)
      bzero(v160, __len);
    v198 = (char **)&v183;
    LODWORD(v191) = v185;
    *((_QWORD *)&v191 + 1) = &v198;
    *(_QWORD *)&v192 = 0;
    LODWORD(v186) = v185;
    v187 = v155;
    LODWORD(v188) = 0;
    v202 = (unint64_t)v185 << 32;
    v203 = &v191;
    LODWORD(v199) = v185;
    v200 = v161;
    v201 = 0;
    v162.n128_f64[0] = sub_20F76C940((unsigned int *)&v199, (unsigned int *)&v186, (uint64_t)&v202);
    if (v168)
      memmove((void *)(*(_QWORD *)v170 + 8 * (*(_DWORD *)(v170 + 16) - v168)), v161, __len);
    MEMORY[0x212BC6368](v161, 0x1000C8000313F17, v162);
    MEMORY[0x212BC6368](v155, 0x1000C8000313F17);
  }
  else
  {
    v147 = v179[1];
    if (v179[1] == (void *)v180)
      v147 = 0;
    v186 = __PAIR64__((unint64_t)((char *)v178[1] - (char *)v178[0]) >> 3, v174);
    v187 = v175;
    v188 = v147;
    if (__p[0] == __p[1])
      v148 = 0;
    else
      v148 = __p[0];
    v189 = 0x10000000CLL;
    v190 = v148;
    if (*v169 != 2)
    {
      sub_20E8BF000(a1 + 17976);
      *v169 = 2;
    }
    v169[2] = -3;
    *(_OWORD *)(a1 + 18032) = 0u;
    *(_OWORD *)(a1 + 18002) = 0u;
    *(_OWORD *)(a1 + 18018) = 0u;
    v169[4] = -3;
    *(_QWORD *)(a1 + 17988) = 0;
    *(_DWORD *)(a1 + 17996) = 0;
    *((_WORD *)v169 + 16) = 1;
    *((_BYTE *)v169 + 80) = 1;
    *(_QWORD *)(a1 + 18056) = 0;
    sub_20E8BF040(SparseFactorizationCholesky, (uint64_t)&v186, (uint64_t)&v191);
    v149 = v196;
    *(_OWORD *)(v169 + 18) = v195;
    *(_OWORD *)(v169 + 22) = v149;
    *((_QWORD *)v169 + 13) = v197;
    v150 = v192;
    *(_OWORD *)(v169 + 2) = v191;
    *(_OWORD *)(v169 + 6) = v150;
    v151 = v194;
    *(_OWORD *)(v169 + 10) = v193;
    *(_OWORD *)(v169 + 14) = v151;
    v152 = v169[2];
    switch(v152)
    {
      case -4:
      case -3:
        goto LABEL_171;
      case -2:
      case -1:
        *v169 = 1;
        *(_BYTE *)(a1 + 1872) = 0;
        break;
      case 0:
        goto LABEL_172;
      default:
        if (v152 != -2147483647)
        {
          v164 = *v169;
          *(_BYTE *)(a1 + 1872) = *v169 == 0;
          if (v164)
            break;
          goto LABEL_129;
        }
LABEL_171:
        v152 = 2;
LABEL_172:
        *v169 = v152;
        *(_BYTE *)(a1 + 1872) = v152 == 0;
        if (!v152)
          goto LABEL_129;
        break;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v179[1])
  {
    *(void **)&v180 = v179[1];
    operator delete(v179[1]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v183)
    MEMORY[0x212BC6368](v183, 0x1000C8000313F17);
  return 0;
}

void sub_20F746988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  MEMORY[0x212BC6368](v40, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v39, 0x1000C8000313F17);
  if (__p)
  {
    operator delete(__p);
    v42 = a33;
    if (!a33)
    {
LABEL_3:
      v43 = a30;
      if (!a30)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v42 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v42);
  v43 = a30;
  if (!a30)
  {
LABEL_4:
    v44 = a27;
    if (!a27)
    {
LABEL_10:
      if (a39)
        MEMORY[0x212BC6368](a39, 0x1000C8000313F17);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v44);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v43);
  v44 = a27;
  if (!a27)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20F746BB8()
{
  return 1;
}

uint64_t sub_20F746BC0()
{
  return 0;
}

void sub_20F746BC8(uint64_t a1)
{
  sub_20F76CB54(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F746BEC(uint64_t a1)
{
  _DWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  uint64_t v43;
  double v44;
  double v45;

  v1 = (_DWORD *)(a1 + 18232);
  v2 = *(_QWORD *)(a1 + 18104);
  if (v2)
  {
    LODWORD(v3) = *v1;
    v4 = *(_QWORD *)(a1 + 18264);
    v5 = (unint64_t)(*(_QWORD *)(a1 + 18272) - v4) >> 3;
    if (*v1 >= (int)v5)
      v3 = v5;
    else
      v3 = v3;
    if (v2 >= (uint64_t)(*(_QWORD *)(a1 + 18088) - *(_QWORD *)(a1 + 18080)) >> 3)
    {
      if ((int)v3 < 1)
      {
        return 0.0;
      }
      else
      {
        v26 = 0;
        v27 = *(_QWORD *)(a1 + 18288);
        result = 0.0;
        do
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 18240) + 8 * v26);
          v29 = *(_QWORD *)(v4 + 8 * v26);
          v30 = (int *)(v27 + 4 * v29);
          v31 = v30;
          if (v29 != v28)
          {
            v31 = (int *)(v27 + 4 * v28);
            v32 = v30 - v31;
            do
            {
              v33 = v32 >> 1;
              v34 = &v31[v32 >> 1];
              v36 = *v34;
              v35 = v34 + 1;
              v32 += ~(v32 >> 1);
              if (v26 > v36)
                v31 = v35;
              else
                v32 = v33;
            }
            while (v32);
          }
          if (v30 != v31 && v26 == *v31)
          {
            v37 = *(_QWORD *)(a1 + 18312);
            if (v37)
            {
              v38 = fabs(*(double *)(v37 + 2 * ((_QWORD)v31 - v27)));
              if (result < v38)
                result = v38;
            }
          }
          ++v26;
        }
        while (v26 != v3);
      }
    }
    else
    {
      if ((int)v3 < 1)
      {
        result = 0.0;
      }
      else
      {
        v6 = 0;
        v7 = *(_QWORD *)(a1 + 18288);
        result = 0.0;
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 18240) + 8 * v6);
          v10 = *(_QWORD *)(v4 + 8 * v6);
          v11 = (int *)(v7 + 4 * v10);
          v12 = v11;
          if (v10 != v9)
          {
            v12 = (int *)(v7 + 4 * v9);
            v13 = v11 - v12;
            do
            {
              v14 = v13 >> 1;
              v15 = &v12[v13 >> 1];
              v17 = *v15;
              v16 = v15 + 1;
              v13 += ~(v13 >> 1);
              if (v6 > v17)
                v12 = v16;
              else
                v13 = v14;
            }
            while (v13);
          }
          if (v11 != v12 && v6 == *v12)
          {
            v18 = *(_QWORD *)(a1 + 18312);
            if (v18)
            {
              v19 = fabs(*(double *)(v18 + 2 * ((_QWORD)v12 - v7)));
              if (result < v19)
                result = v19;
            }
          }
          ++v6;
        }
        while (v6 != v3);
      }
      v39 = *(double **)(a1 + 18440);
      v40 = *(unsigned int *)(a1 + 18456);
      v41 = fabs(*v39);
      if ((_DWORD)v40 != 1)
      {
        v42 = v39 + 1;
        v43 = 8 * v40 - 8;
        do
        {
          v44 = *v42++;
          v45 = fabs(v44);
          if (v41 < v45)
            v41 = v45;
          v43 -= 8;
        }
        while (v43);
      }
      if (result < v41)
        return v41;
    }
  }
  else
  {
    v20 = *(double **)(a1 + 18440);
    v21 = *(unsigned int *)(a1 + 18456);
    result = fabs(*v20);
    if ((_DWORD)v21 != 1)
    {
      v22 = v20 + 1;
      v23 = 8 * v21 - 8;
      do
      {
        v24 = *v22++;
        v25 = fabs(v24);
        if (result < v25)
          result = v25;
        v23 -= 8;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t sub_20F746E18(uint64_t result, double a2)
{
  *(double *)(result + 1896) = a2;
  return result;
}

uint64_t sub_20F746E24()
{
  return 0;
}

uint64_t sub_20F746E2C()
{
  return 0;
}

uint64_t sub_20F746E34(uint64_t a1)
{
  return a1 + 9872;
}

uint64_t sub_20F746E40(uint64_t a1)
{
  return a1 + 9872;
}

char *sub_20F746E4C(char *result, char *a2)
{
  const void **v2;
  int *v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  void *v8;
  int v9;

  v2 = (const void **)(result + 18160);
  if (result + 18160 != a2)
  {
    v4 = (int *)(result + 18176);
    v5 = *((unsigned int *)result + 4544);
    if (*((_QWORD *)a2 + 1) >= v5)
    {
      if (!(_DWORD)v5)
      {
        v9 = 0;
        goto LABEL_10;
      }
      v8 = *(void **)a2;
      v6 = 8 * v5;
    }
    else
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v6 = 8 * v5;
      v7 = (v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = v7 >> 3;
      v8 = operator new(v7, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v8;
    }
    result = (char *)memcpy(v8, *v2, v6);
    v9 = *v4;
LABEL_10:
    *((_DWORD *)a2 + 4) = v9;
  }
  return result;
}

char *sub_20F746F00(char *result, char *a2)
{
  const void **v2;
  int *v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  void *v8;
  int v9;

  v2 = (const void **)(result + 18184);
  if (result + 18184 != a2)
  {
    v4 = (int *)(result + 18200);
    v5 = *((unsigned int *)result + 4550);
    if (*((_QWORD *)a2 + 1) >= v5)
    {
      if (!(_DWORD)v5)
      {
        v9 = 0;
        goto LABEL_10;
      }
      v8 = *(void **)a2;
      v6 = 8 * v5;
    }
    else
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v6 = 8 * v5;
      v7 = (v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = v7 >> 3;
      v8 = operator new(v7, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v8;
    }
    result = (char *)memcpy(v8, *v2, v6);
    v9 = *v4;
LABEL_10:
    *((_DWORD *)a2 + 4) = v9;
  }
  return result;
}

uint64_t sub_20F746FB4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24CA01F18;
  *(_QWORD *)(a1 + 120) = &off_24CA01F88;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v2 = *(void **)(a1 + 1040);
  if (v2)
  {
    *(_QWORD *)(a1 + 1048) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F4EE970(a1 + 128);
  return a1;
}

uint64_t sub_20F747038(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  float64_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  float64_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unint64_t v58;
  uint64_t v59;
  float64_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unint64_t v69;
  uint64_t v70;
  float64_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unint64_t v80;
  uint64_t v81;
  float64_t *v82;
  float64x2_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unint64_t v90;
  uint64_t v91;
  double v92;

  v7 = *(unsigned int *)(result + 2008);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 2088);
    v10 = 0.0;
    do
    {
      v11 = *(unsigned int **)(v9 + 24 * v8);
      v12 = *(unsigned int **)(v9 + 24 * v8 + 8);
      if (v12 != v11)
      {
        while (1)
        {
          v13 = *v11;
          if (v8 <= v13)
            break;
          v11 += 4;
          if (v11 == v12)
            goto LABEL_3;
        }
        if (v11 != v12 && v8 == v13)
        {
          v14 = *(_QWORD *)(result + 2016);
          if (v14)
          {
            v15 = (float64_t *)(v14 + 8 * *((_QWORD *)v11 + 1));
            v16.f64[0] = *v15;
            v17.f64[0] = v15[14];
            v18.f64[0] = v15[28];
            v16.f64[1] = v15[7];
            v18.f64[1] = v15[35];
            v17.f64[1] = v15[21];
            a4 = vabsq_f64(v17);
            v19 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v16), vabsq_f64(v18)), a4));
            if (v10 < v19)
              v10 = v19;
          }
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v7);
  }
  else
  {
    v10 = 0.0;
  }
  v20 = *(unsigned int *)(result + 3016);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 3096);
    do
    {
      v23 = *(unsigned int **)(v22 + 24 * v21);
      v24 = *(unsigned int **)(v22 + 24 * v21 + 8);
      if (v24 != v23)
      {
        while (1)
        {
          v25 = *v23;
          if (v21 <= v25)
            break;
          v23 += 4;
          if (v23 == v24)
            goto LABEL_17;
        }
        if (v23 != v24 && v21 == v25)
        {
          v26 = *(_QWORD *)(result + 3024);
          if (v26)
          {
            v27 = (float64_t *)(v26 + 8 * *((_QWORD *)v23 + 1));
            v28.f64[0] = *v27;
            v29.f64[0] = v27[20];
            v30.f64[0] = v27[40];
            v31.f64[0] = v27[60];
            v29.f64[1] = v27[30];
            v31.f64[1] = v27[70];
            v28.f64[1] = v27[10];
            a7.f64[0] = v27[80];
            v30.f64[1] = v27[50];
            *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
            a4 = vmaxnmq_f64(vabsq_f64(v29), vabsq_f64(v31));
            a7.f64[1] = NAN;
            v32 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v28), a7), vabsq_f64(v30)), a4));
            if (v10 < v32)
              v10 = v32;
          }
        }
      }
LABEL_17:
      ++v21;
    }
    while (v21 != v20);
  }
  v33 = *(unsigned int *)(result + 4024);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = *(_QWORD *)(result + 4104);
    do
    {
      v36 = *(unsigned int **)(v35 + 24 * v34);
      v37 = *(unsigned int **)(v35 + 24 * v34 + 8);
      if (v37 != v36)
      {
        while (1)
        {
          v38 = *v36;
          if (v34 <= v38)
            break;
          v36 += 4;
          if (v36 == v37)
            goto LABEL_30;
        }
        if (v36 != v37 && v34 == v38)
        {
          v39 = *(_QWORD *)(result + 4032);
          if (v39)
          {
            v40 = fabs(*(double *)(v39 + 8 * *((_QWORD *)v36 + 1)));
            if (v10 < v40)
              v10 = v40;
          }
        }
      }
LABEL_30:
      ++v34;
    }
    while (v34 != v33);
  }
  v41 = *(unsigned int *)(result + 5032);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = *(_QWORD *)(result + 5112);
    do
    {
      v44 = *(unsigned int **)(v43 + 24 * v42);
      v45 = *(unsigned int **)(v43 + 24 * v42 + 8);
      if (v45 != v44)
      {
        while (1)
        {
          v46 = *v44;
          if (v42 <= v46)
            break;
          v44 += 4;
          if (v44 == v45)
            goto LABEL_43;
        }
        if (v44 != v45 && v42 == v46)
        {
          v47 = *(_QWORD *)(result + 5040);
          if (v47)
          {
            v48 = (float64_t *)(v47 + 8 * *((_QWORD *)v44 + 1));
            v49.f64[0] = *v48;
            v50.f64[0] = v48[14];
            v51.f64[0] = v48[28];
            v49.f64[1] = v48[7];
            v51.f64[1] = v48[35];
            v50.f64[1] = v48[21];
            a4 = vabsq_f64(v50);
            v52 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v49), vabsq_f64(v51)), a4));
            if (v10 < v52)
              v10 = v52;
          }
        }
      }
LABEL_43:
      ++v42;
    }
    while (v42 != v41);
  }
  v53 = *(unsigned int *)(result + 6040);
  if ((_DWORD)v53)
  {
    v54 = 0;
    v55 = *(_QWORD *)(result + 6120);
    do
    {
      v56 = *(unsigned int **)(v55 + 24 * v54);
      v57 = *(unsigned int **)(v55 + 24 * v54 + 8);
      if (v57 != v56)
      {
        while (1)
        {
          v58 = *v56;
          if (v54 <= v58)
            break;
          v56 += 4;
          if (v56 == v57)
            goto LABEL_56;
        }
        if (v56 != v57 && v54 == v58)
        {
          v59 = *(_QWORD *)(result + 6048);
          if (v59)
          {
            v60 = (float64_t *)(v59 + 8 * *((_QWORD *)v56 + 1));
            v61.f64[0] = *v60;
            v62.f64[0] = v60[10];
            v61.f64[1] = v60[5];
            v62.f64[1] = v60[15];
            a4 = vabsq_f64(v62);
            v63 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v61), a4));
            if (v10 < v63)
              v10 = v63;
          }
        }
      }
LABEL_56:
      ++v54;
    }
    while (v54 != v53);
  }
  v64 = *(unsigned int *)(result + 7048);
  if ((_DWORD)v64)
  {
    v65 = 0;
    v66 = *(_QWORD *)(result + 7128);
    do
    {
      v67 = *(unsigned int **)(v66 + 24 * v65);
      v68 = *(unsigned int **)(v66 + 24 * v65 + 8);
      if (v68 != v67)
      {
        while (1)
        {
          v69 = *v67;
          if (v65 <= v69)
            break;
          v67 += 4;
          if (v67 == v68)
            goto LABEL_69;
        }
        if (v67 != v68 && v65 == v69)
        {
          v70 = *(_QWORD *)(result + 7056);
          if (v70)
          {
            v71 = (float64_t *)(v70 + 8 * *((_QWORD *)v67 + 1));
            v72.f64[0] = *v71;
            v73.f64[0] = v71[10];
            v72.f64[1] = v71[5];
            v73.f64[1] = v71[15];
            a4 = vabsq_f64(v73);
            v74 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v72), a4));
            if (v10 < v74)
              v10 = v74;
          }
        }
      }
LABEL_69:
      ++v65;
    }
    while (v65 != v64);
  }
  v75 = *(unsigned int *)(result + 8056);
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = *(_QWORD *)(result + 8136);
    do
    {
      v78 = *(unsigned int **)(v77 + 24 * v76);
      v79 = *(unsigned int **)(v77 + 24 * v76 + 8);
      if (v79 != v78)
      {
        while (1)
        {
          v80 = *v78;
          if (v76 <= v80)
            break;
          v78 += 4;
          if (v78 == v79)
            goto LABEL_82;
        }
        if (v78 != v79 && v76 == v80)
        {
          v81 = *(_QWORD *)(result + 8064);
          if (v81)
          {
            v82 = (float64_t *)(v81 + 8 * *((_QWORD *)v78 + 1));
            v83.f64[0] = *v82;
            a4.f64[0] = v82[8];
            v83.f64[1] = v82[4];
            *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
            a4.f64[1] = NAN;
            v84 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v83), a4));
            if (v10 < v84)
              v10 = v84;
          }
        }
      }
LABEL_82:
      ++v76;
    }
    while (v76 != v75);
  }
  v85 = *(unsigned int *)(result + 9064);
  if ((_DWORD)v85)
  {
    v86 = 0;
    v87 = *(_QWORD *)(result + 9144);
    do
    {
      v88 = *(unsigned int **)(v87 + 24 * v86);
      v89 = *(unsigned int **)(v87 + 24 * v86 + 8);
      if (v89 != v88)
      {
        while (1)
        {
          v90 = *v88;
          if (v86 <= v90)
            break;
          v88 += 4;
          if (v88 == v89)
            goto LABEL_95;
        }
        if (v88 != v89 && v86 == v90)
        {
          v91 = *(_QWORD *)(result + 9072);
          if (v91)
          {
            v92 = fabs(*(double *)(v91 + 8 * *((_QWORD *)v88 + 1)));
            if (v10 < v92)
              v10 = v92;
          }
        }
      }
LABEL_95:
      ++v86;
    }
    while (v86 != v85);
  }
  return result;
}

uint64_t sub_20F747590(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA01F88;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F4EE970(a1 + 8);
  return a1;
}

void sub_20F747600(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA01F88;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F4EE970(a1 + 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F747680(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v2 = sub_20F74797C(a1 + 88);
  *(_QWORD *)(a1 + 7704) = a1 + 872;
  *(_QWORD *)(a1 + 7712) = a1 + 1768;
  *(_QWORD *)(a1 + 7720) = a1 + 2664;
  *(_QWORD *)(a1 + 7728) = a1 + 3560;
  *(_QWORD *)(a1 + 7736) = a1 + 4456;
  *(_QWORD *)(a1 + 7744) = a1 + 5352;
  *(_QWORD *)(a1 + 7752) = a1 + 6248;
  *(_QWORD *)(a1 + 7760) = a1 + 7144;
  *(_QWORD *)(a1 + 7640) = a1 + 760;
  *(_QWORD *)(a1 + 7648) = a1 + 1656;
  *(_QWORD *)(a1 + 7656) = a1 + 2552;
  *(_QWORD *)(a1 + 7664) = a1 + 3448;
  *(_QWORD *)(a1 + 7672) = a1 + 4344;
  *(_QWORD *)(a1 + 7680) = a1 + 5240;
  *(_QWORD *)(a1 + 7688) = a1 + 6136;
  *(_QWORD *)(a1 + 7696) = a1 + 7032;
  *(_QWORD *)(a1 + 7576) = a1 + 648;
  *(_QWORD *)(a1 + 7584) = a1 + 1544;
  *(_QWORD *)(a1 + 7592) = a1 + 2440;
  *(_QWORD *)(a1 + 7600) = a1 + 3336;
  *(_QWORD *)(a1 + 7608) = a1 + 4232;
  *(_QWORD *)(a1 + 7616) = a1 + 5128;
  *(_QWORD *)(a1 + 7624) = a1 + 6024;
  *(_QWORD *)(a1 + 7632) = a1 + 6920;
  *(_QWORD *)(a1 + 7512) = a1 + 536;
  *(_QWORD *)(a1 + 7520) = a1 + 1432;
  *(_QWORD *)(a1 + 7528) = a1 + 2328;
  *(_QWORD *)(a1 + 7536) = a1 + 3224;
  *(_QWORD *)(a1 + 7544) = a1 + 4120;
  *(_QWORD *)(a1 + 7552) = a1 + 5016;
  *(_QWORD *)(a1 + 7560) = a1 + 5912;
  *(_QWORD *)(a1 + 7568) = a1 + 6808;
  *(_QWORD *)(a1 + 7448) = a1 + 424;
  *(_QWORD *)(a1 + 7456) = a1 + 1320;
  *(_QWORD *)(a1 + 7464) = a1 + 2216;
  *(_QWORD *)(a1 + 7472) = a1 + 3112;
  *(_QWORD *)(a1 + 7480) = a1 + 4008;
  *(_QWORD *)(a1 + 7488) = a1 + 4904;
  *(_QWORD *)(a1 + 7496) = a1 + 5800;
  *(_QWORD *)(a1 + 7504) = a1 + 6696;
  *(_QWORD *)(a1 + 7384) = a1 + 312;
  *(_QWORD *)(a1 + 7392) = a1 + 1208;
  *(_QWORD *)(a1 + 7400) = a1 + 2104;
  *(_QWORD *)(a1 + 7408) = a1 + 3000;
  *(_QWORD *)(a1 + 7416) = a1 + 3896;
  *(_QWORD *)(a1 + 7424) = a1 + 4792;
  *(_QWORD *)(a1 + 7432) = a1 + 5688;
  *(_QWORD *)(a1 + 7440) = a1 + 6584;
  *(_QWORD *)(a1 + 7320) = a1 + 200;
  *(_QWORD *)(a1 + 7328) = a1 + 1096;
  *(_QWORD *)(a1 + 7336) = a1 + 1992;
  *(_QWORD *)(a1 + 7344) = a1 + 2888;
  *(_QWORD *)(a1 + 7352) = a1 + 3784;
  *(_QWORD *)(a1 + 7360) = a1 + 4680;
  *(_QWORD *)(a1 + 7368) = a1 + 5576;
  *(_QWORD *)(a1 + 7376) = a1 + 6472;
  *(_QWORD *)(a1 + 7256) = v2;
  *(_QWORD *)(a1 + 7264) = a1 + 984;
  *(_QWORD *)(a1 + 7272) = a1 + 1880;
  *(_QWORD *)(a1 + 7280) = a1 + 2776;
  *(_QWORD *)(a1 + 7288) = a1 + 3672;
  *(_QWORD *)(a1 + 7296) = a1 + 4568;
  *(_QWORD *)(a1 + 7304) = a1 + 5464;
  *(_QWORD *)(a1 + 7312) = a1 + 6360;
  *(_OWORD *)(a1 + 7928) = 0u;
  *(_OWORD *)(a1 + 7944) = 0u;
  *(_OWORD *)(a1 + 7896) = 0u;
  *(_OWORD *)(a1 + 7912) = 0u;
  *(_OWORD *)(a1 + 7864) = 0u;
  *(_OWORD *)(a1 + 7880) = 0u;
  *(_OWORD *)(a1 + 7832) = 0u;
  *(_OWORD *)(a1 + 7848) = 0u;
  *(_OWORD *)(a1 + 7800) = 0u;
  *(_OWORD *)(a1 + 7816) = 0u;
  *(_OWORD *)(a1 + 7768) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  return a1;
}

void sub_20F747954(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x212BC6368](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F74797C(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_20F3DF894((_QWORD *)a1, 0, 0, 0);
  v2[28] = &off_24CA02030;
  v2[14] = &off_24CA01FB8;
  v2[27] = 0;
  *(_OWORD *)(v2 + 25) = 0u;
  *(_OWORD *)(v2 + 23) = 0u;
  *(_OWORD *)(v2 + 21) = 0u;
  *(_OWORD *)(v2 + 19) = 0u;
  *(_OWORD *)(v2 + 17) = 0u;
  *(_OWORD *)(v2 + 15) = 0u;
  *(_OWORD *)(v2 + 31) = 0u;
  *(_OWORD *)(v2 + 29) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 35) = 0u;
  *(_OWORD *)(v2 + 37) = 0u;
  *(_OWORD *)(v2 + 39) = 0u;
  v2[41] = 0;
  sub_20F3DF894(v2 + 42, 0, 0, 0);
  sub_20F3DF6F0((_QWORD *)(a1 + 448), 0, 0, 0);
  sub_20F3DF6F0((_QWORD *)(a1 + 560), 0, 0, 0);
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 672) = &off_24CA020A8;
  *(_QWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 784) = &off_24CA02030;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 896) = &off_24CA02120;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1008) = &off_24CA02198;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1120) = &off_24CA02210;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_QWORD *)(a1 + 1232) = &off_24CA02120;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_QWORD *)(a1 + 1344) = &off_24CA02288;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_QWORD *)(a1 + 1456) = &off_24CA02288;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_QWORD *)(a1 + 1568) = &off_24CA02300;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_QWORD *)(a1 + 1680) = &off_24CA02210;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_QWORD *)(a1 + 1792) = &off_24CA02378;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_QWORD *)(a1 + 1904) = &off_24CA023F0;
  sub_20F2B36B4((_QWORD *)(a1 + 2016), 0, 0, 0);
  *(_QWORD *)(a1 + 2232) = 0;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_QWORD *)(a1 + 2128) = &off_24CA02378;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2240) = &off_24CA02468;
  *(_QWORD *)(a1 + 2456) = 0;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_QWORD *)(a1 + 2352) = &off_24CA02468;
  *(_QWORD *)(a1 + 2568) = 0;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_QWORD *)(a1 + 2464) = &off_24CA024E0;
  sub_20F2B36B4((_QWORD *)(a1 + 2576), 0, 0, 0);
  sub_20F3DF894((_QWORD *)(a1 + 2688), 0, 0, 0);
  *(_QWORD *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_QWORD *)(a1 + 2800) = &off_24CA01FB8;
  *(_QWORD *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_QWORD *)(a1 + 2912) = &off_24CA02030;
  sub_20F3DF894((_QWORD *)(a1 + 3024), 0, 0, 0);
  sub_20F3DF6F0((_QWORD *)(a1 + 3136), 0, 0, 0);
  sub_20F3DF6F0((_QWORD *)(a1 + 3248), 0, 0, 0);
  *(_QWORD *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_QWORD *)(a1 + 3360) = &off_24CA020A8;
  *(_QWORD *)(a1 + 3576) = 0;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_QWORD *)(a1 + 3472) = &off_24CA02030;
  sub_20F3DF54C((_QWORD *)(a1 + 3584), 0, 0, 0);
  *(_QWORD *)(a1 + 3800) = 0;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3784) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_QWORD *)(a1 + 3696) = &off_24CA02558;
  *(_QWORD *)(a1 + 3912) = 0;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_QWORD *)(a1 + 3808) = &off_24CA025D0;
  sub_20F3DF54C((_QWORD *)(a1 + 3920), 0, 0, 0);
  sub_20F3DF3AC((_QWORD *)(a1 + 4032), 0, 0, 0);
  sub_20F3DF3AC((_QWORD *)(a1 + 4144), 0, 0, 0);
  *(_QWORD *)(a1 + 4360) = 0;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_OWORD *)(a1 + 4312) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_QWORD *)(a1 + 4256) = &off_24CA02648;
  *(_QWORD *)(a1 + 4472) = 0;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4408) = 0u;
  *(_OWORD *)(a1 + 4424) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_QWORD *)(a1 + 4368) = &off_24CA025D0;
  sub_20F3DF54C((_QWORD *)(a1 + 4480), 0, 0, 0);
  *(_QWORD *)(a1 + 4696) = 0;
  *(_OWORD *)(a1 + 4664) = 0u;
  *(_OWORD *)(a1 + 4680) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_QWORD *)(a1 + 4592) = &off_24CA02558;
  *(_QWORD *)(a1 + 4808) = 0;
  *(_OWORD *)(a1 + 4712) = 0u;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_QWORD *)(a1 + 4704) = &off_24CA025D0;
  sub_20F3DF54C((_QWORD *)(a1 + 4816), 0, 0, 0);
  sub_20F3DF3AC((_QWORD *)(a1 + 4928), 0, 0, 0);
  sub_20F3DF3AC((_QWORD *)(a1 + 5040), 0, 0, 0);
  *(_QWORD *)(a1 + 5256) = 0;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_QWORD *)(a1 + 5152) = &off_24CA02648;
  *(_QWORD *)(a1 + 5368) = 0;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_QWORD *)(a1 + 5264) = &off_24CA025D0;
  *(_QWORD *)(a1 + 5480) = 0;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5464) = 0u;
  *(_QWORD *)(a1 + 5376) = &off_24CA026C0;
  *(_QWORD *)(a1 + 5592) = 0;
  *(_OWORD *)(a1 + 5560) = 0u;
  *(_OWORD *)(a1 + 5576) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_QWORD *)(a1 + 5488) = &off_24CA02738;
  *(_QWORD *)(a1 + 5704) = 0;
  *(_OWORD *)(a1 + 5672) = 0u;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_OWORD *)(a1 + 5640) = 0u;
  *(_OWORD *)(a1 + 5656) = 0u;
  *(_OWORD *)(a1 + 5608) = 0u;
  *(_OWORD *)(a1 + 5624) = 0u;
  *(_QWORD *)(a1 + 5600) = &off_24CA027B0;
  *(_QWORD *)(a1 + 5816) = 0;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5752) = 0u;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(_OWORD *)(a1 + 5720) = 0u;
  *(_OWORD *)(a1 + 5736) = 0u;
  *(_QWORD *)(a1 + 5712) = &off_24CA026C0;
  *(_QWORD *)(a1 + 5928) = 0;
  *(_OWORD *)(a1 + 5896) = 0u;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_OWORD *)(a1 + 5864) = 0u;
  *(_OWORD *)(a1 + 5880) = 0u;
  *(_OWORD *)(a1 + 5832) = 0u;
  *(_OWORD *)(a1 + 5848) = 0u;
  *(_QWORD *)(a1 + 5824) = &off_24CA02828;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_OWORD *)(a1 + 6008) = 0u;
  *(_OWORD *)(a1 + 6024) = 0u;
  *(_OWORD *)(a1 + 5976) = 0u;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_QWORD *)(a1 + 5936) = &off_24CA02828;
  sub_20F39B2CC((_QWORD *)(a1 + 6048), 0, 0, 0);
  *(_QWORD *)(a1 + 6264) = 0;
  *(_OWORD *)(a1 + 6232) = 0u;
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_OWORD *)(a1 + 6200) = 0u;
  *(_OWORD *)(a1 + 6216) = 0u;
  *(_OWORD *)(a1 + 6168) = 0u;
  *(_OWORD *)(a1 + 6184) = 0u;
  *(_QWORD *)(a1 + 6160) = &off_24CA027B0;
  *(_QWORD *)(a1 + 6376) = 0;
  *(_OWORD *)(a1 + 6280) = 0u;
  *(_OWORD *)(a1 + 6296) = 0u;
  *(_OWORD *)(a1 + 6312) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_QWORD *)(a1 + 6272) = &off_24CA02378;
  *(_QWORD *)(a1 + 6488) = 0;
  *(_OWORD *)(a1 + 6392) = 0u;
  *(_OWORD *)(a1 + 6408) = 0u;
  *(_OWORD *)(a1 + 6424) = 0u;
  *(_OWORD *)(a1 + 6440) = 0u;
  *(_OWORD *)(a1 + 6456) = 0u;
  *(_OWORD *)(a1 + 6472) = 0u;
  *(_QWORD *)(a1 + 6384) = &off_24CA023F0;
  sub_20F2B36B4((_QWORD *)(a1 + 6496), 0, 0, 0);
  *(_QWORD *)(a1 + 6712) = 0;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6616) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_QWORD *)(a1 + 6608) = &off_24CA02378;
  *(_QWORD *)(a1 + 6824) = 0;
  *(_OWORD *)(a1 + 6728) = 0u;
  *(_OWORD *)(a1 + 6744) = 0u;
  *(_OWORD *)(a1 + 6760) = 0u;
  *(_OWORD *)(a1 + 6776) = 0u;
  *(_OWORD *)(a1 + 6792) = 0u;
  *(_OWORD *)(a1 + 6808) = 0u;
  *(_QWORD *)(a1 + 6720) = &off_24CA02468;
  *(_QWORD *)(a1 + 6936) = 0;
  *(_OWORD *)(a1 + 6840) = 0u;
  *(_OWORD *)(a1 + 6856) = 0u;
  *(_OWORD *)(a1 + 6872) = 0u;
  *(_OWORD *)(a1 + 6888) = 0u;
  *(_OWORD *)(a1 + 6904) = 0u;
  *(_OWORD *)(a1 + 6920) = 0u;
  *(_QWORD *)(a1 + 6832) = &off_24CA02468;
  *(_QWORD *)(a1 + 7048) = 0;
  *(_OWORD *)(a1 + 7016) = 0u;
  *(_OWORD *)(a1 + 7032) = 0u;
  *(_OWORD *)(a1 + 6984) = 0u;
  *(_OWORD *)(a1 + 7000) = 0u;
  *(_OWORD *)(a1 + 6952) = 0u;
  *(_OWORD *)(a1 + 6968) = 0u;
  *(_QWORD *)(a1 + 6944) = &off_24CA024E0;
  sub_20F2B36B4((_QWORD *)(a1 + 7056), 0, 0, 0);
  return a1;
}

void sub_20F748130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23)
{
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  sub_20F3C6C40(v32);
  sub_20F3C6C40(v24);
  sub_20F3C6C40(v31);
  sub_20F3C6C40(v30);
  sub_20F3C6C40(v29);
  sub_20F3C6C40(v23 + 798);
  sub_20F3C6C40(v23 + 784);
  sub_20F3C6C40(v23 + 770);
  sub_20F3C6C40(v28);
  sub_20F3C6C40(v23 + 742);
  sub_20F3C6C40(v23 + 728);
  sub_20F3C6C40(v23 + 714);
  sub_20F3C6C40(v23 + 700);
  sub_20F3C6C40(v23 + 686);
  sub_20F3C6C40(v23 + 672);
  sub_20F3C6C40(v23 + 658);
  sub_20F3C6C40(v23 + 644);
  sub_20F3C6C40(v27);
  sub_20F3C6C40(v26);
  sub_20F3C6C40(a11);
  sub_20F3C6C40(v23 + 588);
  sub_20F3C6C40(v23 + 574);
  sub_20F3C6C40(a12);
  sub_20F3C6C40(v23 + 546);
  sub_20F3C6C40(v23 + 532);
  sub_20F3C6C40(a13);
  sub_20F3C6C40(a14);
  sub_20F3C6C40(a15);
  sub_20F3C6C40(v23 + 476);
  sub_20F3C6C40(v23 + 462);
  sub_20F3C6C40(a16);
  sub_20F3C6C40(v23 + 434);
  sub_20F3C6C40(v23 + 420);
  sub_20F3C6C40(a17);
  sub_20F3C6C40(a18);
  sub_20F3C6C40(a19);
  sub_20F3C6C40(v23 + 364);
  sub_20F3C6C40(v23 + 350);
  sub_20F3C6C40(a20);
  sub_20F3C6C40(a21);
  sub_20F3C6C40(v23 + 308);
  sub_20F3C6C40(v23 + 294);
  sub_20F3C6C40(v23 + 280);
  sub_20F3C6C40(v23 + 266);
  sub_20F3C6C40(a22);
  sub_20F3C6C40(v23 + 238);
  sub_20F3C6C40(v23 + 224);
  sub_20F3C6C40(v23 + 210);
  sub_20F3C6C40(v23 + 196);
  sub_20F3C6C40(v23 + 182);
  sub_20F3C6C40(v23 + 168);
  sub_20F3C6C40(v23 + 154);
  sub_20F3C6C40(v23 + 140);
  sub_20F3C6C40(v23 + 126);
  sub_20F3C6C40(v23 + 112);
  sub_20F3C6C40(v23 + 98);
  sub_20F3C6C40(v23 + 84);
  sub_20F3C6C40(a23);
  sub_20F3C6C40(*(_QWORD **)(v33 - 104));
  sub_20F3C6C40(*(_QWORD **)(v33 - 96));
  sub_20F3C6C40(v25);
  sub_20F3C6C40(*(_QWORD **)(v33 - 88));
  sub_20F3C6C40(v23);
  _Unwind_Resume(a1);
}

void sub_20F74840C()
{
  JUMPOUT(0x20F748248);
}

void sub_20F748414()
{
  JUMPOUT(0x20F74826CLL);
}

void sub_20F74841C()
{
  JUMPOUT(0x20F748290);
}

void sub_20F748424()
{
  JUMPOUT(0x20F748298);
}

void sub_20F74842C()
{
  JUMPOUT(0x20F7482A0);
}

void sub_20F748434()
{
  JUMPOUT(0x20F7482BCLL);
}

void sub_20F74843C()
{
  JUMPOUT(0x20F7482D8);
}

void sub_20F748444()
{
  JUMPOUT(0x20F7482E0);
}

void sub_20F74844C()
{
  JUMPOUT(0x20F7482E8);
}

void sub_20F748454()
{
  JUMPOUT(0x20F748304);
}

void sub_20F74845C()
{
  JUMPOUT(0x20F74830CLL);
}

void sub_20F748464()
{
  JUMPOUT(0x20F748340);
}

void sub_20F74846C()
{
  JUMPOUT(0x20F7483DCLL);
}

void sub_20F748474()
{
  JUMPOUT(0x20F7483E4);
}

void sub_20F74847C()
{
  JUMPOUT(0x20F7483ECLL);
}

_QWORD *sub_20F748484(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F748528(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F7485DC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F748704(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F748734()
{
  return 9;
}

uint64_t sub_20F74873C()
{
  return 6;
}

uint64_t sub_20F748744(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t *v47;
  uint64_t v48;
  int8x16_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  unint64_t v67;
  int8x16_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int8x16_t v72;
  int8x16_t v73;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v51 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v51 == *(_QWORD *)a2)
          {
            v22 = *(int8x16_t *)(v51 + 336);
            v24 = *(int8x16_t *)(v51 + 304);
            v23 = *(int8x16_t *)(v51 + 320);
            v25 = *(int8x16_t *)(v51 + 288);
            v32 = vextq_s8(*(int8x16_t *)(v51 + 416), *(int8x16_t *)(v51 + 416), 8uLL).u64[0];
            v65 = *(int8x16_t *)(v51 + 400);
            *(_QWORD *)&v71 = vextq_s8(v65, v65, 8uLL).u64[0];
            v72 = *(int8x16_t *)(v51 + 368);
            v73 = *(int8x16_t *)(v51 + 384);
            v68 = *(int8x16_t *)(v51 + 352);
            *(_QWORD *)&v69 = vextq_s8(v73, v73, 8uLL).u64[0];
            *(_QWORD *)&v35 = vextq_s8(v72, v72, 8uLL).u64[0];
            *(_QWORD *)&v36 = vextq_s8(v68, v68, 8uLL).u64[0];
            v29 = *(int8x16_t *)(v51 + 208);
            v56 = vextq_s8(v22, v22, 8uLL).u64[0];
            v55 = vextq_s8(v23, v23, 8uLL).u64[0];
            v54 = vextq_s8(v24, v24, 8uLL).u64[0];
            v19 = *(int8x16_t *)(v51 + 176);
            v18 = *(int8x16_t *)(v51 + 192);
            v53 = vextq_s8(v25, v25, 8uLL).u64[0];
            v63 = *(int8x16_t *)(v51 + 272);
            v64 = *(int8x16_t *)(v51 + 256);
            v37 = vextq_s8(v63, v63, 8uLL).u64[0];
            *(_QWORD *)&v70 = vextq_s8(v64, v64, 8uLL).u64[0];
            v17 = *(int8x16_t *)(v51 + 144);
            v16 = *(int8x16_t *)(v51 + 160);
            v61 = *(int8x16_t *)(v51 + 224);
            v62 = *(int8x16_t *)(v51 + 240);
            *(_QWORD *)&v21 = vextq_s8(v62, v62, 8uLL).u64[0];
            *(_QWORD *)&v20 = vextq_s8(v61, v61, 8uLL).u64[0];
            *(_QWORD *)&v38 = vextq_s8(v29, v29, 8uLL).u64[0];
            v52 = vextq_s8(v18, v18, 8uLL).u64[0];
            v26 = vextq_s8(v19, v19, 8uLL).u64[0];
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = vextq_s8(v17, v17, 8uLL).u64[0];
            v59 = *(int8x16_t *)(v51 + 112);
            v60 = *(int8x16_t *)(v51 + 128);
            v67 = vextq_s8(v60, v60, 8uLL).u64[0];
            *(_QWORD *)&v15 = vextq_s8(v59, v59, 8uLL).u64[0];
            v10 = *(int8x16_t *)(v51 + 48);
            v57 = *(int8x16_t *)(v51 + 80);
            v58 = *(int8x16_t *)(v51 + 96);
            *(_QWORD *)&v14 = vextq_s8(v58, v58, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v57, v57, 8uLL).u64[0];
            v66 = *(int8x16_t *)(v51 + 64);
            *(_QWORD *)&v12 = vextq_s8(v66, v66, 8uLL).u64[0];
            v39 = *(_OWORD *)(v51 + 416);
            v8 = *(int8x16_t *)(v51 + 16);
            v11 = *(int8x16_t *)(v51 + 32);
            v30 = vextq_s8(v10, v10, 8uLL).u64[0];
            v31 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = *(int8x16_t *)v51;
            v33 = vextq_s8(v8, v8, 8uLL).u64[0];
            v34 = vextq_s8(v9, v9, 8uLL).u64[0];
          }
          else
          {
            v9 = *(int8x16_t *)v51;
            v8 = *(int8x16_t *)(v51 + 16);
            v11 = *(int8x16_t *)(v51 + 32);
            v10 = *(int8x16_t *)(v51 + 48);
            v12 = *(_OWORD *)(v51 + 72);
            v13 = *(_OWORD *)(v51 + 88);
            v14 = *(_OWORD *)(v51 + 104);
            v15 = *(_OWORD *)(v51 + 120);
            v17 = *(int8x16_t *)(v51 + 144);
            v16 = *(int8x16_t *)(v51 + 160);
            v19 = *(int8x16_t *)(v51 + 176);
            v18 = *(int8x16_t *)(v51 + 192);
            v60.i64[0] = *(_QWORD *)(v51 + 128);
            v20 = *(_OWORD *)(v51 + 232);
            v59.i64[0] = *(_QWORD *)(v51 + 112);
            v21 = *(_OWORD *)(v51 + 248);
            v58.i64[0] = *(_QWORD *)(v51 + 96);
            v57.i64[0] = *(_QWORD *)(v51 + 80);
            v64.i64[0] = *(_QWORD *)(v51 + 256);
            v62.i64[0] = *(_QWORD *)(v51 + 240);
            v61.i64[0] = *(_QWORD *)(v51 + 224);
            v70 = *(_OWORD *)(v51 + 264);
            v63.i64[0] = *(_QWORD *)(v51 + 272);
            v71 = *(_OWORD *)(v51 + 408);
            v69 = *(_OWORD *)(v51 + 392);
            v65.i64[0] = *(_QWORD *)(v51 + 400);
            v73.i64[0] = *(_QWORD *)(v51 + 384);
            v23 = *(int8x16_t *)(v51 + 320);
            v22 = *(int8x16_t *)(v51 + 336);
            v72.i64[0] = *(_QWORD *)(v51 + 368);
            v55 = vextq_s8(v23, v23, 8uLL).u64[0];
            v56 = vextq_s8(v22, v22, 8uLL).u64[0];
            v25 = *(int8x16_t *)(v51 + 288);
            v24 = *(int8x16_t *)(v51 + 304);
            v53 = vextq_s8(v25, v25, 8uLL).u64[0];
            v54 = vextq_s8(v24, v24, 8uLL).u64[0];
            v67 = *(_QWORD *)(v51 + 136);
            v52 = vextq_s8(v18, v18, 8uLL).u64[0];
            v66.i64[0] = *(_QWORD *)(v51 + 64);
            v26 = vextq_s8(v19, v19, 8uLL).u64[0];
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = vextq_s8(v17, v17, 8uLL).u64[0];
            v29.i64[0] = *(_QWORD *)(v51 + 208);
            v30 = vextq_s8(v10, v10, 8uLL).u64[0];
            v31 = vextq_s8(v11, v11, 8uLL).u64[0];
            v32 = *(_QWORD *)(v51 + 424);
            v33 = vextq_s8(v8, v8, 8uLL).u64[0];
            v34 = vextq_s8(v9, v9, 8uLL).u64[0];
            v68.i64[0] = *(_QWORD *)(v51 + 352);
            v35 = *(_OWORD *)(v51 + 376);
            v36 = *(_OWORD *)(v51 + 360);
            v37 = *(_QWORD *)(v51 + 280);
            v38 = *(_OWORD *)(v51 + 216);
            *(_QWORD *)&v39 = *(_QWORD *)(v51 + 416);
          }
          v10.i64[1] = v30;
          v11.i64[1] = v31;
          v8.i64[1] = v33;
          v9.i64[1] = v34;
          *((_QWORD *)&v15 + 1) = v60.i64[0];
          *((_QWORD *)&v14 + 1) = v59.i64[0];
          *((_QWORD *)&v13 + 1) = v58.i64[0];
          *((_QWORD *)&v12 + 1) = v57.i64[0];
          v18.i64[1] = v52;
          v19.i64[1] = v26;
          v16.i64[1] = v27;
          v17.i64[1] = v28;
          *(_QWORD *)&v41 = v69;
          *(_QWORD *)&v40 = v70;
          *((_QWORD *)&v40 + 1) = v63.i64[0];
          *((_QWORD *)&v21 + 1) = v64.i64[0];
          *((_QWORD *)&v20 + 1) = v62.i64[0];
          *((_QWORD *)&v38 + 1) = v61.i64[0];
          v22.i64[1] = v56;
          v23.i64[1] = v55;
          v24.i64[1] = v54;
          v25.i64[1] = v53;
          *(_QWORD *)&v42 = v71;
          *((_QWORD *)&v42 + 1) = v39;
          *((_QWORD *)&v41 + 1) = v65.i64[0];
          v43 = *v6;
          v6 += 4;
          v44 = *(unsigned int *)(a2 + 16);
          v45 = *(_QWORD *)a2 + 8 * (9 * v43 + a3 + v44 * (HIDWORD(a3) + 6 * i));
          *((_QWORD *)&v35 + 1) = v73.i64[0];
          *((_QWORD *)&v36 + 1) = v72.i64[0];
          *(int8x16_t *)v45 = v9;
          *(int8x16_t *)(v45 + 16) = v8;
          *(_QWORD *)(v45 + 64) = v66.i64[0];
          *(int8x16_t *)(v45 + 32) = v11;
          *(int8x16_t *)(v45 + 48) = v10;
          v46 = v45 + 8 * v44;
          *(_OWORD *)v46 = v12;
          *(_OWORD *)(v46 + 16) = v13;
          *(_QWORD *)(v46 + 64) = v67;
          *(_OWORD *)(v46 + 32) = v14;
          *(_OWORD *)(v46 + 48) = v15;
          v47 = (int8x16_t *)(v45 + 16 * v44);
          *v47 = v17;
          v47[1] = v16;
          v47[4].i64[0] = v29.i64[0];
          v47[2] = v19;
          v47[3] = v18;
          v48 = v45 + 24 * v44;
          *(_OWORD *)v48 = v38;
          *(_OWORD *)(v48 + 16) = v20;
          *(_QWORD *)(v48 + 64) = v37;
          *(_OWORD *)(v48 + 32) = v21;
          *(_OWORD *)(v48 + 48) = v40;
          v49 = (int8x16_t *)(v45 + 32 * v44);
          *v49 = v25;
          v49[1] = v24;
          v49[4].i64[0] = v68.i64[0];
          v49[2] = v23;
          v49[3] = v22;
          v50 = v45 + 40 * v44;
          *(_OWORD *)v50 = v36;
          *(_OWORD *)(v50 + 16) = v35;
          *(_QWORD *)(v50 + 64) = v32;
          *(_OWORD *)(v50 + 32) = v41;
          *(_OWORD *)(v50 + 48) = v42;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F748B24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F748BC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F748C7C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F748DA4(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F748DCC()
{
  return 1;
}

uint64_t sub_20F748DD4()
{
  return 6;
}

uint64_t sub_20F748DDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v17 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v17 == *(_QWORD *)a2)
          {
            v10 = *(int8x16_t *)(v17 + 16);
            v12 = *(int8x16_t *)(v17 + 32);
            v8 = *(int8x16_t *)v17;
            v13 = vextq_s8(v12, v12, 8uLL).u64[0];
            v11 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v17;
            v9 = *(_QWORD *)(v17 + 8);
            v10.i64[0] = *(_QWORD *)(v17 + 16);
            v11 = *(_QWORD *)(v17 + 24);
            v12.i64[0] = *(_QWORD *)(v17 + 32);
            v13 = *(_QWORD *)(v17 + 40);
          }
          v14 = *v6;
          v6 += 4;
          v15 = *(unsigned int *)(a2 + 16);
          v16 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v14 + a3 + v15 * (HIDWORD(a3) + 6 * i)));
          *v16 = v8.i64[0];
          v16[v15] = v9;
          v16[2 * v15] = v10.i64[0];
          v16[3 * v15] = v11;
          v16[4 * v15] = v12.i64[0];
          v16[5 * v15] = v13;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F748EB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F748F54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F749008(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F749130(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F749160()
{
  return 3;
}

uint64_t sub_20F749168()
{
  return 6;
}

uint64_t sub_20F749170(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  __int128 v11;
  int8x16_t v12;
  __int128 v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v34 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v34 == *(_QWORD *)a2)
          {
            v25 = *(int8x16_t *)(v34 + 112);
            v20 = *(int8x16_t *)(v34 + 128);
            v19 = *(int8x16_t *)(v34 + 80);
            v12 = *(int8x16_t *)(v34 + 96);
            v10 = *(int8x16_t *)(v34 + 48);
            v18 = *(int8x16_t *)(v34 + 64);
            v15 = *(int8x16_t *)(v34 + 16);
            v16 = *(int8x16_t *)(v34 + 32);
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v25, v25, 8uLL).u64[0];
            v21 = vextq_s8(v12, v12, 8uLL).u64[0];
            v8 = *(int8x16_t *)v34;
            v17 = vextq_s8(v19, v19, 8uLL).u64[0];
            *(_QWORD *)&v11 = vextq_s8(v18, v18, 8uLL).u64[0];
            v23 = vextq_s8(v10, v10, 8uLL).u64[0];
            v14 = vextq_s8(v16, v16, 8uLL).u64[0];
            *(_QWORD *)&v9 = vextq_s8(v15, v15, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v34;
            v9 = *(_OWORD *)(v34 + 24);
            v10 = *(int8x16_t *)(v34 + 48);
            v11 = *(_OWORD *)(v34 + 72);
            v12 = *(int8x16_t *)(v34 + 96);
            v13 = *(_OWORD *)(v34 + 120);
            v14 = *(_QWORD *)(v34 + 40);
            v15.i64[0] = *(_QWORD *)(v34 + 16);
            v16.i64[0] = *(_QWORD *)(v34 + 32);
            v17 = *(_QWORD *)(v34 + 88);
            v18.i64[0] = *(_QWORD *)(v34 + 64);
            v19.i64[0] = *(_QWORD *)(v34 + 80);
            v20.i64[0] = *(_QWORD *)(v34 + 128);
            v21 = vextq_s8(v12, v12, 8uLL).u64[0];
            v22 = *(_QWORD *)(v34 + 136);
            v23 = vextq_s8(v10, v10, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v25.i64[0] = *(_QWORD *)(v34 + 112);
          }
          v26 = *v6;
          v6 += 4;
          v27 = *(unsigned int *)(a2 + 16);
          v12.i64[1] = v21;
          v8.i64[1] = v24;
          *((_QWORD *)&v9 + 1) = v16.i64[0];
          v10.i64[1] = v23;
          v28 = *(_QWORD *)a2 + 8 * (3 * v26 + a3 + v27 * (HIDWORD(a3) + 6 * i));
          *((_QWORD *)&v11 + 1) = v19.i64[0];
          *((_QWORD *)&v13 + 1) = v20.i64[0];
          *(_QWORD *)(v28 + 16) = v15.i64[0];
          *(int8x16_t *)v28 = v8;
          v29 = v28 + 8 * v27;
          *(_QWORD *)(v29 + 16) = v14;
          *(_OWORD *)v29 = v9;
          v30 = (int8x16_t *)(v28 + 16 * v27);
          v30[1].i64[0] = v18.i64[0];
          *v30 = v10;
          v31 = v28 + 24 * v27;
          *(_QWORD *)(v31 + 16) = v17;
          *(_OWORD *)v31 = v11;
          v32 = (int8x16_t *)(v28 + 32 * v27);
          v32[1].i64[0] = v25.i64[0];
          *v32 = v12;
          v33 = v28 + 40 * v27;
          *(_QWORD *)(v33 + 16) = v22;
          *(_OWORD *)v33 = v13;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F7492DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F749380(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F749434(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (54 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74955C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x36uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74958C()
{
  return 6;
}

uint64_t sub_20F749594()
{
  return 9;
}

uint64_t sub_20F74959C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  __int128 v44;
  int8x16_t *v45;
  __int128 v46;
  __int128 v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  __int8 *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v56 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v56 == *(int8x16_t **)a2)
          {
            v13 = v56[17];
            v79 = v56[25];
            v80 = v56[26];
            v12 = vextq_s8(v80, v80, 8uLL).u64[0];
            v16 = v56[15];
            v14 = v56[16];
            v77 = v56[19];
            v78 = v56[24];
            v66 = vextq_s8(v78, v78, 8uLL).u64[0];
            v74 = v56[22];
            v75 = v56[23];
            v71 = vextq_s8(v75, v75, 8uLL).u64[0];
            v72 = v56[20];
            v70 = vextq_s8(v74, v74, 8uLL).u64[0];
            v10 = v56[13];
            v17 = v56[14];
            v73 = v56[21];
            v69 = vextq_s8(v73, v73, 8uLL).u64[0];
            v65 = vextq_s8(v72, v72, 8uLL).u64[0];
            v68 = vextq_s8(v77, v77, 8uLL).u64[0];
            v18 = v56[11];
            v11 = v56[12];
            v76 = v56[18];
            v67 = vextq_s8(v76, v76, 8uLL).u64[0];
            v15 = vextq_s8(v79, v79, 8uLL).u64[0];
            v64 = vextq_s8(v13, v13, 8uLL).u64[0];
            v63 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = v56[9];
            v19 = v56[10];
            v62 = vextq_s8(v16, v16, 8uLL).u64[0];
            v61 = vextq_s8(v17, v17, 8uLL).u64[0];
            v60 = vextq_s8(v10, v10, 8uLL).u64[0];
            v8 = v56[7];
            v20 = v56[8];
            v58 = vextq_s8(v11, v11, 8uLL).u64[0];
            v59 = vextq_s8(v18, v18, 8uLL).u64[0];
            v57 = vextq_s8(v19, v19, 8uLL).u64[0];
            v25 = v56[5];
            v9 = v56[6];
            v22 = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = vextq_s8(v20, v20, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v30 = v56[3];
            v26 = v56[4];
            v27 = vextq_s8(v9, v9, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v34 = v56[1];
            v31 = v56[2];
            v32 = vextq_s8(v30, v30, 8uLL).u64[0];
            v33 = vextq_s8(v31, v31, 8uLL).u64[0];
            v35 = *v56;
          }
          else
          {
            v9 = v56[6];
            v8 = v56[7];
            v11 = v56[12];
            v10 = v56[13];
            v79 = v56[25];
            v80 = v56[26];
            v12 = vextq_s8(v80, v80, 8uLL).u64[0];
            v77 = v56[19];
            v78 = v56[24];
            v74 = v56[22];
            v75 = v56[23];
            v70 = vextq_s8(v74, v74, 8uLL).u64[0];
            v71 = vextq_s8(v75, v75, 8uLL).u64[0];
            v72 = v56[20];
            v73 = v56[21];
            v65 = vextq_s8(v72, v72, 8uLL).u64[0];
            v66 = vextq_s8(v78, v78, 8uLL).u64[0];
            v68 = vextq_s8(v77, v77, 8uLL).u64[0];
            v69 = vextq_s8(v73, v73, 8uLL).u64[0];
            v14 = v56[16];
            v13 = v56[17];
            v76 = v56[18];
            v67 = vextq_s8(v76, v76, 8uLL).u64[0];
            v15 = vextq_s8(v79, v79, 8uLL).u64[0];
            v63 = vextq_s8(v14, v14, 8uLL).u64[0];
            v64 = vextq_s8(v13, v13, 8uLL).u64[0];
            v17 = v56[14];
            v16 = v56[15];
            v61 = vextq_s8(v17, v17, 8uLL).u64[0];
            v62 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = v56[10];
            v18 = v56[11];
            v59 = vextq_s8(v18, v18, 8uLL).u64[0];
            v60 = vextq_s8(v10, v10, 8uLL).u64[0];
            v57 = vextq_s8(v19, v19, 8uLL).u64[0];
            v58 = vextq_s8(v11, v11, 8uLL).u64[0];
            v20 = v56[8];
            v21 = v56[9];
            v22 = vextq_s8(v21, v21, 8uLL).u64[0];
            v23 = vextq_s8(v20, v20, 8uLL).u64[0];
            v24 = vextq_s8(v8, v8, 8uLL).u64[0];
            v26 = v56[4];
            v25 = v56[5];
            v27 = vextq_s8(v9, v9, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            v29 = vextq_s8(v26, v26, 8uLL).u64[0];
            v31 = v56[2];
            v30 = v56[3];
            v32 = vextq_s8(v30, v30, 8uLL).u64[0];
            v33 = vextq_s8(v31, v31, 8uLL).u64[0];
            v35 = *v56;
            v34 = v56[1];
          }
          v36.i64[0] = v80.i64[0];
          v36.i64[1] = v12;
          v37.i64[0] = v79.i64[0];
          v37.i64[1] = v15;
          v38.i64[0] = v78.i64[0];
          v38.i64[1] = v66;
          v17.i64[1] = v61;
          v10.i64[1] = v60;
          v11.i64[1] = v58;
          v31.i64[1] = v33;
          v34.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
          v35.i64[1] = vextq_s8(v35, v35, 8uLL).u64[0];
          v25.i64[1] = v28;
          v26.i64[1] = v29;
          v30.i64[1] = v32;
          v20.i64[1] = v23;
          v8.i64[1] = v24;
          v9.i64[1] = v27;
          v18.i64[1] = v59;
          v19.i64[1] = v57;
          v21.i64[1] = v22;
          v13.i64[1] = v64;
          v14.i64[1] = v63;
          v16.i64[1] = v62;
          v39.i64[0] = v72.i64[0];
          v39.i64[1] = v65;
          v40 = *v6;
          v6 += 4;
          v41 = *(unsigned int *)(a2 + 16);
          v42.i64[0] = v77.i64[0];
          v42.i64[1] = v68;
          v43.i64[0] = v76.i64[0];
          v43.i64[1] = v67;
          *(_QWORD *)&v44 = v75.i64[0];
          *((_QWORD *)&v44 + 1) = v71;
          v45 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v40 + v41 * (9 * i + HIDWORD(a3))));
          *(_QWORD *)&v46 = v74.i64[0];
          *((_QWORD *)&v46 + 1) = v70;
          *(_QWORD *)&v47 = v73.i64[0];
          *((_QWORD *)&v47 + 1) = v69;
          *v45 = v35;
          v45[1] = v34;
          v45[2] = v31;
          v48 = (int8x16_t *)((char *)v45 + 8 * v41);
          *v48 = v30;
          v48[1] = v26;
          v48[2] = v25;
          v49 = &v45[v41];
          *v49 = v9;
          v49[1] = v8;
          v49[2] = v20;
          v50 = (int8x16_t *)((char *)v45 + 24 * v41);
          *v50 = v21;
          v50[1] = v19;
          v50[2] = v18;
          v51 = &v45[2 * v41];
          *v51 = v11;
          v51[1] = v10;
          v51[2] = v17;
          v52 = (int8x16_t *)((char *)v45 + 40 * v41);
          *v52 = v16;
          v52[1] = v14;
          v52[2] = v13;
          v53 = &v45[3 * v41];
          *v53 = v43;
          v53[1] = v42;
          v53[2] = v39;
          v54 = &v45->i8[56 * v41];
          *(_OWORD *)v54 = v47;
          *((_OWORD *)v54 + 1) = v46;
          *((_OWORD *)v54 + 2) = v44;
          v55 = &v45[4 * v41];
          *v55 = v38;
          v55[1] = v37;
          v55[2] = v36;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F749958(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F7499FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F749AB0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (81 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F749BD8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x51uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F749C10()
{
  return 9;
}

uint64_t sub_20F749C18()
{
  return 9;
}

uint64_t sub_20F749C20(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int8x16_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  unint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  unint64_t v92;
  unint64_t v93;
  int8x16_t v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  __int128 v114;
  __int128 v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v67 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v67 == *(_QWORD *)a2)
          {
            v111 = *(int8x16_t *)(v67 + 608);
            v112 = *(int8x16_t *)(v67 + 624);
            v78 = vextq_s8(v112, v112, 8uLL).u64[0];
            v77 = vextq_s8(v111, v111, 8uLL).u64[0];
            v109 = *(int8x16_t *)(v67 + 576);
            v110 = *(int8x16_t *)(v67 + 592);
            v76 = vextq_s8(v110, v110, 8uLL).u64[0];
            v75 = vextq_s8(v109, v109, 8uLL).u64[0];
            v86 = *(int8x16_t *)(v67 + 544);
            v87 = *(int8x16_t *)(v67 + 560);
            v95 = vextq_s8(v87, v87, 8uLL).u64[0];
            *(_QWORD *)&v103 = vextq_s8(v86, v86, 8uLL).u64[0];
            v84 = *(int8x16_t *)(v67 + 512);
            v85 = *(int8x16_t *)(v67 + 528);
            v100 = *(int8x16_t *)(v67 + 496);
            *(_QWORD *)&v101 = vextq_s8(v85, v85, 8uLL).u64[0];
            *(_QWORD *)&v104 = vextq_s8(v84, v84, 8uLL).u64[0];
            v25 = *(int8x16_t *)(v67 + 320);
            v24 = *(int8x16_t *)(v67 + 336);
            *(_QWORD *)&v102 = vextq_s8(v100, v100, 8uLL).u64[0];
            v98 = *(int8x16_t *)(v67 + 464);
            v99 = *(int8x16_t *)(v67 + 480);
            v73 = vextq_s8(v99, v99, 8uLL).u64[0];
            v72 = vextq_s8(v98, v98, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v67 + 416);
            v22 = *(int8x16_t *)(v67 + 288);
            v21 = *(int8x16_t *)(v67 + 304);
            v96 = *(int8x16_t *)(v67 + 432);
            v97 = *(int8x16_t *)(v67 + 448);
            v71 = vextq_s8(v97, v97, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v67 + 400);
            v70 = vextq_s8(v96, v96, 8uLL).u64[0];
            v93 = vextq_s8(v28, v28, 8uLL).u64[0];
            v94 = *(int8x16_t *)(v67 + 352);
            v116 = *(int8x16_t *)(v67 + 272);
            *(_QWORD *)&v108 = vextq_s8(v26, v26, 8uLL).u64[0];
            v82 = *(int8x16_t *)(v67 + 368);
            v83 = *(int8x16_t *)(v67 + 384);
            *(_QWORD *)&v107 = vextq_s8(v83, v83, 8uLL).u64[0];
            *(_QWORD *)&v106 = vextq_s8(v82, v82, 8uLL).u64[0];
            *(_QWORD *)&v105 = vextq_s8(v94, v94, 8uLL).u64[0];
            v69 = vextq_s8(v24, v24, 8uLL).u64[0];
            v68 = vextq_s8(v25, v25, 8uLL).u64[0];
            v17 = *(int8x16_t *)(v67 + 192);
            v29 = vextq_s8(v21, v21, 8uLL).u64[0];
            v30 = vextq_s8(v22, v22, 8uLL).u64[0];
            v91 = *(int8x16_t *)(v67 + 208);
            v92 = vextq_s8(v116, v116, 8uLL).u64[0];
            v15 = *(int8x16_t *)(v67 + 160);
            v18 = *(int8x16_t *)(v67 + 176);
            v80 = *(int8x16_t *)(v67 + 240);
            v81 = *(int8x16_t *)(v67 + 256);
            *(_QWORD *)&v19 = vextq_s8(v81, v81, 8uLL).u64[0];
            *(_QWORD *)&v118 = vextq_s8(v80, v80, 8uLL).u64[0];
            v79 = *(_QWORD *)(v67 + 224);
            *(_QWORD *)&v20 = vextq_s8(*(int8x16_t *)(v67 + 224), *(int8x16_t *)(v67 + 224), 8uLL).u64[0];
            v27 = *(int8x16_t *)(v67 + 128);
            v16 = *(int8x16_t *)(v67 + 144);
            *(_QWORD *)&v115 = vextq_s8(v91, v91, 8uLL).u64[0];
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v32 = vextq_s8(v18, v18, 8uLL).u64[0];
            v33 = vextq_s8(v15, v15, 8uLL).u64[0];
            v34 = vextq_s8(v16, v16, 8uLL).u64[0];
            v89 = vextq_s8(v27, v27, 8uLL).u64[0];
            v23 = *(int8x16_t *)(v67 + 80);
            v113 = *(int8x16_t *)(v67 + 112);
            *(_QWORD *)&v14 = vextq_s8(v113, v113, 8uLL).u64[0];
            v74 = *(int8x16_t *)(v67 + 96);
            *(_QWORD *)&v120 = vextq_s8(v74, v74, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v23, v23, 8uLL).u64[0];
            v11 = *(int8x16_t *)(v67 + 32);
            v10 = *(int8x16_t *)(v67 + 48);
            v88 = *(int8x16_t *)(v67 + 64);
            *(_QWORD *)&v12 = vextq_s8(v88, v88, 8uLL).u64[0];
            v35 = vextq_s8(v10, v10, 8uLL).u64[0];
            v36 = vextq_s8(v11, v11, 8uLL).u64[0];
            v9 = *(int8x16_t *)v67;
            v8 = *(int8x16_t *)(v67 + 16);
          }
          else
          {
            v9 = *(int8x16_t *)v67;
            v8 = *(int8x16_t *)(v67 + 16);
            v11 = *(int8x16_t *)(v67 + 32);
            v10 = *(int8x16_t *)(v67 + 48);
            v12 = *(_OWORD *)(v67 + 72);
            v13 = *(_OWORD *)(v67 + 88);
            v14 = *(_OWORD *)(v67 + 120);
            v16 = *(int8x16_t *)(v67 + 144);
            v15 = *(int8x16_t *)(v67 + 160);
            v18 = *(int8x16_t *)(v67 + 176);
            v17 = *(int8x16_t *)(v67 + 192);
            v19 = *(_OWORD *)(v67 + 264);
            v20 = *(_OWORD *)(v67 + 232);
            v22 = *(int8x16_t *)(v67 + 288);
            v21 = *(int8x16_t *)(v67 + 304);
            v118 = *(_OWORD *)(v67 + 248);
            v120 = *(_OWORD *)(v67 + 104);
            v113.i64[0] = *(_QWORD *)(v67 + 112);
            v115 = *(_OWORD *)(v67 + 216);
            v74.i64[0] = *(_QWORD *)(v67 + 96);
            v23.i64[0] = *(_QWORD *)(v67 + 80);
            v25 = *(int8x16_t *)(v67 + 320);
            v24 = *(int8x16_t *)(v67 + 336);
            v81.i64[0] = *(_QWORD *)(v67 + 256);
            v80.i64[0] = *(_QWORD *)(v67 + 240);
            v79 = *(_QWORD *)(v67 + 224);
            v116.i64[0] = *(_QWORD *)(v67 + 272);
            v107 = *(_OWORD *)(v67 + 392);
            v108 = *(_OWORD *)(v67 + 408);
            v105 = *(_OWORD *)(v67 + 360);
            v106 = *(_OWORD *)(v67 + 376);
            v83.i64[0] = *(_QWORD *)(v67 + 384);
            v82.i64[0] = *(_QWORD *)(v67 + 368);
            v103 = *(_OWORD *)(v67 + 552);
            v104 = *(_OWORD *)(v67 + 520);
            v87.i64[0] = *(_QWORD *)(v67 + 560);
            v101 = *(_OWORD *)(v67 + 536);
            v102 = *(_OWORD *)(v67 + 504);
            v86.i64[0] = *(_QWORD *)(v67 + 544);
            v85.i64[0] = *(_QWORD *)(v67 + 528);
            v84.i64[0] = *(_QWORD *)(v67 + 512);
            v111 = *(int8x16_t *)(v67 + 608);
            v112 = *(int8x16_t *)(v67 + 624);
            v78 = vextq_s8(v112, v112, 8uLL).u64[0];
            v77 = vextq_s8(v111, v111, 8uLL).u64[0];
            v109 = *(int8x16_t *)(v67 + 576);
            v110 = *(int8x16_t *)(v67 + 592);
            v76 = vextq_s8(v110, v110, 8uLL).u64[0];
            v26.i64[0] = *(_QWORD *)(v67 + 400);
            v75 = vextq_s8(v109, v109, 8uLL).u64[0];
            v27.i64[0] = *(_QWORD *)(v67 + 128);
            v98 = *(int8x16_t *)(v67 + 464);
            v99 = *(int8x16_t *)(v67 + 480);
            v73 = vextq_s8(v99, v99, 8uLL).u64[0];
            v72 = vextq_s8(v98, v98, 8uLL).u64[0];
            v96 = *(int8x16_t *)(v67 + 432);
            v97 = *(int8x16_t *)(v67 + 448);
            v71 = vextq_s8(v97, v97, 8uLL).u64[0];
            v89 = *(_QWORD *)(v67 + 136);
            v70 = vextq_s8(v96, v96, 8uLL).u64[0];
            v28.i64[0] = *(_QWORD *)(v67 + 416);
            v69 = vextq_s8(v24, v24, 8uLL).u64[0];
            v88.i64[0] = *(_QWORD *)(v67 + 64);
            v68 = vextq_s8(v25, v25, 8uLL).u64[0];
            v92 = *(_QWORD *)(v67 + 280);
            v29 = vextq_s8(v21, v21, 8uLL).u64[0];
            v30 = vextq_s8(v22, v22, 8uLL).u64[0];
            v91.i64[0] = *(_QWORD *)(v67 + 208);
            v31 = vextq_s8(v17, v17, 8uLL).u64[0];
            v93 = *(_QWORD *)(v67 + 424);
            v32 = vextq_s8(v18, v18, 8uLL).u64[0];
            v33 = vextq_s8(v15, v15, 8uLL).u64[0];
            v94.i64[0] = *(_QWORD *)(v67 + 352);
            v34 = vextq_s8(v16, v16, 8uLL).u64[0];
            v95 = *(_QWORD *)(v67 + 568);
            v35 = vextq_s8(v10, v10, 8uLL).u64[0];
            v36 = vextq_s8(v11, v11, 8uLL).u64[0];
            v100.i64[0] = *(_QWORD *)(v67 + 496);
          }
          v90 = *(_QWORD *)(v67 + 640);
          v10.i64[1] = v35;
          v11.i64[1] = v36;
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *((_QWORD *)&v14 + 1) = v27.i64[0];
          *(_QWORD *)&v37 = v120;
          *((_QWORD *)&v37 + 1) = v113.i64[0];
          *((_QWORD *)&v13 + 1) = v74.i64[0];
          *((_QWORD *)&v12 + 1) = v23.i64[0];
          v17.i64[1] = v31;
          v18.i64[1] = v32;
          v15.i64[1] = v33;
          v16.i64[1] = v34;
          *((_QWORD *)&v19 + 1) = v116.i64[0];
          v121 = v19;
          *(_QWORD *)&v38 = v118;
          *((_QWORD *)&v38 + 1) = v81.i64[0];
          *((_QWORD *)&v20 + 1) = v80.i64[0];
          v117 = v14;
          v119 = v20;
          *(_QWORD *)&v39 = v115;
          *((_QWORD *)&v39 + 1) = v79;
          v24.i64[1] = v69;
          v114 = v13;
          v25.i64[1] = v68;
          v21.i64[1] = v29;
          v22.i64[1] = v30;
          *(_QWORD *)&v41 = v107;
          *(_QWORD *)&v40 = v108;
          *((_QWORD *)&v40 + 1) = v28.i64[0];
          *((_QWORD *)&v41 + 1) = v26.i64[0];
          *(_QWORD *)&v43 = v105;
          *(_QWORD *)&v42 = v106;
          *((_QWORD *)&v42 + 1) = v83.i64[0];
          *((_QWORD *)&v43 + 1) = v82.i64[0];
          *(_QWORD *)&v44 = v99.i64[0];
          *((_QWORD *)&v44 + 1) = v73;
          *(_QWORD *)&v46 = v97.i64[0];
          *(_QWORD *)&v45 = v98.i64[0];
          *((_QWORD *)&v45 + 1) = v72;
          *((_QWORD *)&v46 + 1) = v71;
          *(_QWORD *)&v47 = v96.i64[0];
          *((_QWORD *)&v47 + 1) = v70;
          *(_QWORD *)&v48 = v103;
          *(_QWORD *)&v49 = v104;
          *((_QWORD *)&v48 + 1) = v87.i64[0];
          *(_QWORD *)&v51 = v101;
          *(_QWORD *)&v50 = v102;
          *((_QWORD *)&v51 + 1) = v86.i64[0];
          *((_QWORD *)&v49 + 1) = v85.i64[0];
          *((_QWORD *)&v50 + 1) = v84.i64[0];
          *(_QWORD *)&v52 = v112.i64[0];
          *((_QWORD *)&v52 + 1) = v78;
          *(_QWORD *)&v53 = v111.i64[0];
          *((_QWORD *)&v53 + 1) = v77;
          *(_QWORD *)&v54 = v110.i64[0];
          *((_QWORD *)&v54 + 1) = v76;
          *(_QWORD *)&v55 = v109.i64[0];
          *((_QWORD *)&v55 + 1) = v75;
          v56 = *v6;
          v6 += 4;
          v57 = *(unsigned int *)(a2 + 16);
          v58 = *(_QWORD *)a2 + 8 * (9 * v56 + a3 + v57 * (9 * i + HIDWORD(a3)));
          *(int8x16_t *)v58 = v9;
          *(int8x16_t *)(v58 + 16) = v8;
          *(_QWORD *)(v58 + 64) = v88.i64[0];
          *(int8x16_t *)(v58 + 32) = v11;
          *(int8x16_t *)(v58 + 48) = v10;
          v59 = v58 + 8 * v57;
          *(_OWORD *)v59 = v12;
          *(_OWORD *)(v59 + 16) = v114;
          *(_QWORD *)(v59 + 64) = v89;
          *(_OWORD *)(v59 + 32) = v37;
          *(_OWORD *)(v59 + 48) = v117;
          v60 = (int8x16_t *)(v58 + 16 * v57);
          *v60 = v16;
          v60[1] = v15;
          v60[4].i64[0] = v91.i64[0];
          v60[2] = v18;
          v60[3] = v17;
          v61 = v58 + 24 * v57;
          *(_OWORD *)v61 = v39;
          *(_OWORD *)(v61 + 16) = v119;
          *(_QWORD *)(v61 + 64) = v92;
          *(_OWORD *)(v61 + 32) = v38;
          *(_OWORD *)(v61 + 48) = v121;
          v62 = (int8x16_t *)(v58 + 32 * v57);
          *v62 = v22;
          v62[1] = v21;
          v62[4].i64[0] = v94.i64[0];
          v62[2] = v25;
          v62[3] = v24;
          v63 = v58 + 40 * v57;
          *(_OWORD *)v63 = v43;
          *(_OWORD *)(v63 + 16) = v42;
          *(_QWORD *)(v63 + 64) = v93;
          *(_OWORD *)(v63 + 32) = v41;
          *(_OWORD *)(v63 + 48) = v40;
          v64 = v58 + 48 * v57;
          *(_OWORD *)v64 = v47;
          *(_OWORD *)(v64 + 16) = v46;
          *(_QWORD *)(v64 + 64) = v100.i64[0];
          *(_OWORD *)(v64 + 32) = v45;
          *(_OWORD *)(v64 + 48) = v44;
          v65 = v58 + 56 * v57;
          *(_OWORD *)v65 = v50;
          *(_OWORD *)(v65 + 16) = v49;
          *(_QWORD *)(v65 + 64) = v95;
          *(_OWORD *)(v65 + 32) = v51;
          *(_OWORD *)(v65 + 48) = v48;
          v66 = v58 + (v57 << 6);
          *(_OWORD *)v66 = v55;
          *(_OWORD *)(v66 + 16) = v54;
          *(_QWORD *)(v66 + 64) = v90;
          *(_OWORD *)(v66 + 32) = v53;
          *(_OWORD *)(v66 + 48) = v52;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F74A214(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
        v9 = *a2 + 8 * (9 * v4 + a3);
        *(_QWORD *)&v10 = *v8;
        if (v8 == (_QWORD *)*a2)
        {
          *(_QWORD *)&v12 = v8[20];
          *(_QWORD *)&v13 = v8[40];
          *(_QWORD *)&v14 = v8[60];
          *((_QWORD *)&v10 + 1) = v8[10];
          *((_QWORD *)&v12 + 1) = v8[30];
          *((_QWORD *)&v13 + 1) = v8[50];
          *((_QWORD *)&v14 + 1) = v8[70];
          *(_QWORD *)(v9 + 64) = v8[80];
          *(_OWORD *)(v9 + 32) = v13;
          *(_OWORD *)(v9 + 48) = v14;
          *(_OWORD *)v9 = v10;
          *(_OWORD *)(v9 + 16) = v12;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          *(_QWORD *)(v9 + 8) = v8[10];
          *(_QWORD *)(v9 + 16) = v8[20];
          *(_QWORD *)(v9 + 24) = v8[30];
          *(_QWORD *)(v9 + 32) = v8[40];
          *(_QWORD *)(v9 + 40) = v8[50];
          *(_QWORD *)(v9 + 48) = v8[60];
          *(_QWORD *)(v9 + 56) = v8[70];
          *(_QWORD *)(v9 + 64) = v8[80];
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F74A32C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74A3D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74A484(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74A5A8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74A5D8()
{
  return 1;
}

uint64_t sub_20F74A5E0()
{
  return 9;
}

uint64_t sub_20F74A5E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v20 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v20 == *(_QWORD *)a2)
          {
            v16 = *(_QWORD *)(v20 + 64);
            v12 = *(int8x16_t *)(v20 + 32);
            v14 = *(int8x16_t *)(v20 + 48);
            v8 = *(int8x16_t *)v20;
            v10 = *(int8x16_t *)(v20 + 16);
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v13 = vextq_s8(v12, v12, 8uLL).u64[0];
            v11 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v20;
            v9 = *(_QWORD *)(v20 + 8);
            v10.i64[0] = *(_QWORD *)(v20 + 16);
            v11 = *(_QWORD *)(v20 + 24);
            v12.i64[0] = *(_QWORD *)(v20 + 32);
            v13 = *(_QWORD *)(v20 + 40);
            v14.i64[0] = *(_QWORD *)(v20 + 48);
            v15 = *(_QWORD *)(v20 + 56);
            v16 = *(_QWORD *)(v20 + 64);
          }
          v17 = *v6;
          v6 += 4;
          v18 = *(unsigned int *)(a2 + 16);
          v19 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v17 + a3 + v18 * (9 * i + HIDWORD(a3))));
          *v19 = v8.i64[0];
          v19[v18] = v9;
          v19[2 * v18] = v10.i64[0];
          v19[3 * v18] = v11;
          v19[4 * v18] = v12.i64[0];
          v19[5 * v18] = v13;
          v19[6 * v18] = v14.i64[0];
          v19[7 * v18] = v15;
          v19[8 * v18] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74A6EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74A790(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74A844(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74A96C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74A99C()
{
  return 4;
}

uint64_t sub_20F74A9A4()
{
  return 9;
}

uint64_t sub_20F74A9AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v41 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v41 == *(int8x16_t **)a2)
          {
            v17 = v41[16];
            v16 = v41[17];
            v15 = v41[14];
            v14 = v41[15];
            v13 = v41[12];
            v12 = v41[13];
            v11 = v41[10];
            v10 = v41[11];
            v23 = v41[8];
            v22 = v41[9];
            v18 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = vextq_s8(v17, v17, 8uLL).u64[0];
            v20 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v15, v15, 8uLL).u64[0];
            v44 = vextq_s8(v13, v13, 8uLL).u64[0];
            v45 = vextq_s8(v12, v12, 8uLL).u64[0];
            v42 = vextq_s8(v11, v11, 8uLL).u64[0];
            v43 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = v41[6];
            v8 = v41[7];
          }
          else
          {
            v9 = v41[6];
            v8 = v41[7];
            v11 = v41[10];
            v10 = v41[11];
            v13 = v41[12];
            v12 = v41[13];
            v15 = v41[14];
            v14 = v41[15];
            v17 = v41[16];
            v16 = v41[17];
            v18 = vextq_s8(v16, v16, 8uLL).u64[0];
            v19 = vextq_s8(v17, v17, 8uLL).u64[0];
            v20 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = vextq_s8(v15, v15, 8uLL).u64[0];
            v44 = vextq_s8(v13, v13, 8uLL).u64[0];
            v45 = vextq_s8(v12, v12, 8uLL).u64[0];
            v42 = vextq_s8(v11, v11, 8uLL).u64[0];
            v43 = vextq_s8(v10, v10, 8uLL).u64[0];
            v23 = v41[8];
            v22 = v41[9];
          }
          v25 = v41[4];
          v24 = v41[5];
          v27 = v41[2];
          v26 = v41[3];
          v29 = *v41;
          v28 = v41[1];
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v14.i64[1] = v20;
          v15.i64[1] = v21;
          v30 = *v6;
          v6 += 4;
          v31 = *(unsigned int *)(a2 + 16);
          v32 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 4 * v30 + v31 * (9 * i + HIDWORD(a3))));
          v12.i64[1] = v45;
          v13.i64[1] = v44;
          v10.i64[1] = v43;
          v11.i64[1] = v42;
          v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
          v25.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          v29.i64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
          *v32 = v29;
          v32[1] = v28;
          v33 = (int8x16_t *)((char *)v32 + 8 * v31);
          *v33 = v27;
          v33[1] = v26;
          v34 = &v32[v31];
          *v34 = v25;
          v34[1] = v24;
          v35 = (int8x16_t *)((char *)v32 + 24 * v31);
          *v35 = v9;
          v35[1] = v8;
          v36 = &v32[2 * v31];
          *v36 = v23;
          v36[1] = v22;
          v37 = (int8x16_t *)((char *)v32 + 40 * v31);
          *v37 = v11;
          v37[1] = v10;
          v38 = &v32[3 * v31];
          *v38 = v13;
          v38[1] = v12;
          v39 = (int8x16_t *)((char *)v32 + 56 * v31);
          *v39 = v15;
          v39[1] = v14;
          v40 = &v32[4 * v31];
          *v40 = v17;
          v40[1] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74ABB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74AC5C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74AD10(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74AE38(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74AE68()
{
  return 3;
}

uint64_t sub_20F74AE70()
{
  return 9;
}

uint64_t sub_20F74AE78(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  __int128 v11;
  int8x16_t v12;
  __int128 v13;
  int8x16_t v14;
  __int128 v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  int8x16_t *v40;
  uint64_t v41;
  int8x16_t *v42;
  uint64_t v43;
  int8x16_t *v44;
  uint64_t v45;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v45 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v45 == *(_QWORD *)a2)
          {
            v25 = *(int8x16_t *)(v45 + 176);
            v16 = *(int8x16_t *)(v45 + 192);
            v14 = *(int8x16_t *)(v45 + 144);
            v31 = *(int8x16_t *)(v45 + 160);
            v26 = *(int8x16_t *)(v45 + 112);
            v24 = *(int8x16_t *)(v45 + 128);
            v22 = *(int8x16_t *)(v45 + 80);
            v12 = *(int8x16_t *)(v45 + 96);
            v10 = *(int8x16_t *)(v45 + 48);
            v21 = *(int8x16_t *)(v45 + 64);
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = vextq_s8(v25, v25, 8uLL).u64[0];
            *(_QWORD *)&v15 = vextq_s8(v31, v31, 8uLL).u64[0];
            v29 = vextq_s8(v14, v14, 8uLL).u64[0];
            v23 = vextq_s8(v24, v24, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v26, v26, 8uLL).u64[0];
            v30 = vextq_s8(v12, v12, 8uLL).u64[0];
            v20 = vextq_s8(v22, v22, 8uLL).u64[0];
            v18 = *(int8x16_t *)(v45 + 16);
            v19 = *(int8x16_t *)(v45 + 32);
            *(_QWORD *)&v11 = vextq_s8(v21, v21, 8uLL).u64[0];
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
            v17 = vextq_s8(v19, v19, 8uLL).u64[0];
            v8 = *(int8x16_t *)v45;
            *(_QWORD *)&v9 = vextq_s8(v18, v18, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v45;
            v9 = *(_OWORD *)(v45 + 24);
            v10 = *(int8x16_t *)(v45 + 48);
            v11 = *(_OWORD *)(v45 + 72);
            v12 = *(int8x16_t *)(v45 + 96);
            v13 = *(_OWORD *)(v45 + 120);
            v14 = *(int8x16_t *)(v45 + 144);
            v15 = *(_OWORD *)(v45 + 168);
            v16 = *(int8x16_t *)(v45 + 192);
            v17 = *(_QWORD *)(v45 + 40);
            v18.i64[0] = *(_QWORD *)(v45 + 16);
            v19.i64[0] = *(_QWORD *)(v45 + 32);
            v20 = *(_QWORD *)(v45 + 88);
            v21.i64[0] = *(_QWORD *)(v45 + 64);
            v22.i64[0] = *(_QWORD *)(v45 + 80);
            v23 = *(_QWORD *)(v45 + 136);
            v24.i64[0] = *(_QWORD *)(v45 + 128);
            v25.i64[0] = *(_QWORD *)(v45 + 176);
            v26.i64[0] = *(_QWORD *)(v45 + 112);
            v27 = vextq_s8(v16, v16, 8uLL).u64[0];
            v28 = *(_QWORD *)(v45 + 184);
            v29 = vextq_s8(v14, v14, 8uLL).u64[0];
            v30 = vextq_s8(v12, v12, 8uLL).u64[0];
            v31.i64[0] = *(_QWORD *)(v45 + 160);
            v32 = vextq_s8(v10, v10, 8uLL).u64[0];
          }
          v33 = *(_QWORD *)(v45 + 208);
          v34 = *v6;
          v6 += 4;
          v35 = *(unsigned int *)(a2 + 16);
          v16.i64[1] = v27;
          v12.i64[1] = v30;
          v36 = *(_QWORD *)a2 + 8 * (3 * v34 + a3 + v35 * (9 * i + HIDWORD(a3)));
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          *((_QWORD *)&v9 + 1) = v19.i64[0];
          v10.i64[1] = v32;
          *((_QWORD *)&v11 + 1) = v22.i64[0];
          *((_QWORD *)&v13 + 1) = v24.i64[0];
          v14.i64[1] = v29;
          *((_QWORD *)&v15 + 1) = v25.i64[0];
          *(_QWORD *)(v36 + 16) = v18.i64[0];
          *(int8x16_t *)v36 = v8;
          v37 = v36 + 8 * v35;
          *(_QWORD *)(v37 + 16) = v17;
          *(_OWORD *)v37 = v9;
          v38 = (int8x16_t *)(v36 + 16 * v35);
          v38[1].i64[0] = v21.i64[0];
          *v38 = v10;
          v39 = v36 + 24 * v35;
          *(_QWORD *)(v39 + 16) = v20;
          *(_OWORD *)v39 = v11;
          v40 = (int8x16_t *)(v36 + 32 * v35);
          v40[1].i64[0] = v26.i64[0];
          *v40 = v12;
          v41 = v36 + 40 * v35;
          *(_QWORD *)(v41 + 16) = v23;
          *(_OWORD *)v41 = v13;
          v42 = (int8x16_t *)(v36 + 48 * v35);
          v42[1].i64[0] = v31.i64[0];
          *v42 = v14;
          v43 = v36 + 56 * v35;
          *(_QWORD *)(v43 + 16) = v28;
          *(_OWORD *)v43 = v15;
          v44 = (int8x16_t *)(v36 + (v35 << 6));
          v44[1].i64[0] = v33;
          *v44 = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74B064(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74B108(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74B1BC(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (6 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74B2E4(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 6uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74B30C()
{
  return 6;
}

uint64_t sub_20F74B314()
{
  return 1;
}

uint64_t sub_20F74B31C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  __int128 *v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = (__int128 *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          v9 = *v6;
          v6 += 4;
          v10 = (_OWORD *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v9 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v11 = v8[2];
          v12 = *v8;
          v10[1] = v8[1];
          v10[2] = v11;
          *v10 = v12;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74B3A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74B44C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74B500(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74B624(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74B654()
{
  return 9;
}

uint64_t sub_20F74B65C()
{
  return 1;
}

uint64_t sub_20F74B664(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          v9 = *v6;
          v6 += 4;
          v10 = *(_QWORD *)a2 + 8 * (9 * v9 + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          v11 = *(_QWORD *)(v8 + 64);
          v12 = *(_OWORD *)(v8 + 48);
          v13 = *(_OWORD *)v8;
          v14 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 + 32);
          *(_OWORD *)(v10 + 48) = v12;
          *(_QWORD *)(v10 + 64) = v11;
          *(_OWORD *)v10 = v13;
          *(_OWORD *)(v10 + 16) = v14;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74B6F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74B79C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74B850(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74B974(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74B98C()
{
  return 4;
}

uint64_t sub_20F74B994()
{
  return 1;
}

uint64_t sub_20F74B99C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  _OWORD *v8;
  int v9;
  _OWORD *v10;
  __int128 v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = (_OWORD *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          v9 = *v6;
          v6 += 4;
          v10 = (_OWORD *)(*(_QWORD *)a2 + 8 * (a3 + 4 * v9 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3))));
          v11 = v8[1];
          *v10 = *v8;
          v10[1] = v11;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74BA1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74BAC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74BB74(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74BC98(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74BCC0()
{
  return 3;
}

uint64_t sub_20F74BCC8()
{
  return 1;
}

uint64_t sub_20F74BCD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          v9 = *v6;
          v6 += 4;
          v10 = *(_QWORD *)a2 + 8 * (3 * v9 + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)));
          v11 = *(_OWORD *)v8;
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v10 = v11;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74BD5C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74BE00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74BEB4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74BFDC(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74C00C()
{
  return 9;
}

uint64_t sub_20F74C014()
{
  return 4;
}

uint64_t sub_20F74C01C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  uint64_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v46 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v46 == *(_QWORD *)a2)
          {
            v38 = *(int8x16_t *)(v46 + 272);
            v39 = *(int8x16_t *)(v46 + 224);
            v13 = *(int8x16_t *)(v46 + 192);
            v33 = *(int8x16_t *)(v46 + 208);
            v20 = *(int8x16_t *)(v46 + 160);
            v14 = *(int8x16_t *)(v46 + 176);
            v25 = *(int8x16_t *)(v46 + 128);
            v21 = *(int8x16_t *)(v46 + 144);
            v47 = vextq_s8(v38, v38, 8uLL).u64[0];
            v48 = *(int8x16_t *)(v46 + 240);
            v49 = *(int8x16_t *)(v46 + 256);
            v36.i64[0] = vextq_s8(v49, v49, 8uLL).u64[0];
            v16.i64[0] = vextq_s8(v48, v48, 8uLL).u64[0];
            v17.i64[0] = vextq_s8(v39, v39, 8uLL).u64[0];
            v15.i64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
            v18 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = vextq_s8(v14, v14, 8uLL).u64[0];
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v29 = *(int8x16_t *)(v46 + 96);
            v27 = *(int8x16_t *)(v46 + 112);
            v24 = vextq_s8(v21, v21, 8uLL).u64[0];
            v31 = vextq_s8(v25, v25, 8uLL).u64[0];
            v23.i64[0] = vextq_s8(v27, v27, 8uLL).u64[0];
            v30 = *(int8x16_t *)(v46 + 80);
            v26.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
            v28.i64[0] = vextq_s8(v30, v30, 8uLL).u64[0];
            v50 = *(int8x16_t *)(v46 + 64);
            v12.i64[0] = vextq_s8(v50, v50, 8uLL).u64[0];
            v10 = *(int8x16_t *)(v46 + 32);
            v11 = *(int8x16_t *)(v46 + 48);
            v32 = vextq_s8(v11, v11, 8uLL).u64[0];
            v34 = vextq_s8(v10, v10, 8uLL).u64[0];
            v9 = *(int8x16_t *)v46;
            v8 = *(int8x16_t *)(v46 + 16);
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v37 = vextq_s8(v9, v9, 8uLL).u64[0];
          }
          else
          {
            v50.i64[0] = *(_QWORD *)(v46 + 64);
            v9 = *(int8x16_t *)v46;
            v8 = *(int8x16_t *)(v46 + 16);
            v10 = *(int8x16_t *)(v46 + 32);
            v11 = *(int8x16_t *)(v46 + 48);
            v12 = *(int8x16_t *)(v46 + 72);
            v14 = *(int8x16_t *)(v46 + 176);
            v13 = *(int8x16_t *)(v46 + 192);
            v15 = *(int8x16_t *)(v46 + 216);
            v16 = *(int8x16_t *)(v46 + 248);
            v17 = *(int8x16_t *)(v46 + 232);
            v48.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
            v49.i64[0] = vextq_s8(v16, v16, 8uLL).u64[0];
            v18 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = vextq_s8(v14, v14, 8uLL).u64[0];
            v21 = *(int8x16_t *)(v46 + 144);
            v20 = *(int8x16_t *)(v46 + 160);
            v22 = vextq_s8(v20, v20, 8uLL).u64[0];
            v23 = *(int8x16_t *)(v46 + 120);
            v24 = vextq_s8(v21, v21, 8uLL).u64[0];
            v25.i64[0] = vextq_s8(v23, v23, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v46 + 104);
            v27.i64[0] = vextq_s8(v26, v26, 8uLL).u64[0];
            v28 = *(int8x16_t *)(v46 + 88);
            v29.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
            v30.i64[0] = vextq_s8(v12, v12, 8uLL).u64[0];
            v31 = *(_QWORD *)(v46 + 136);
            v32 = vextq_s8(v11, v11, 8uLL).u64[0];
            v33.i64[0] = *(_QWORD *)(v46 + 208);
            v34 = vextq_s8(v10, v10, 8uLL).u64[0];
            v35 = vextq_s8(v8, v8, 8uLL).u64[0];
            v36 = *(int8x16_t *)(v46 + 264);
            v37 = vextq_s8(v9, v9, 8uLL).u64[0];
            v38.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
            v47 = *(_QWORD *)(v46 + 280);
            v39.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
          }
          v11.i64[1] = v32;
          v10.i64[1] = v34;
          v8.i64[1] = v35;
          v9.i64[1] = v37;
          v40 = *v6;
          v6 += 4;
          v41 = *(unsigned int *)(a2 + 16);
          v23.i64[1] = v25.i64[0];
          v26.i64[1] = v27.i64[0];
          v28.i64[1] = v29.i64[0];
          v12.i64[1] = v30.i64[0];
          v13.i64[1] = v18;
          v14.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v24;
          v36.i64[1] = v38.i64[0];
          v16.i64[1] = v49.i64[0];
          v42 = *(_QWORD *)a2 + 8 * (9 * v40 + a3 + v41 * (HIDWORD(a3) + 4 * i));
          v17.i64[1] = v48.i64[0];
          v15.i64[1] = v39.i64[0];
          *(int8x16_t *)v42 = v9;
          *(int8x16_t *)(v42 + 16) = v8;
          *(_QWORD *)(v42 + 64) = v50.i64[0];
          *(int8x16_t *)(v42 + 32) = v10;
          *(int8x16_t *)(v42 + 48) = v11;
          v43 = (int8x16_t *)(v42 + 8 * v41);
          *v43 = v12;
          v43[1] = v28;
          v43[4].i64[0] = v31;
          v43[2] = v26;
          v43[3] = v23;
          v44 = (int8x16_t *)(v42 + 16 * v41);
          *v44 = v21;
          v44[1] = v20;
          v44[4].i64[0] = v33.i64[0];
          v44[2] = v14;
          v44[3] = v13;
          v45 = (int8x16_t *)(v42 + 24 * v41);
          *v45 = v15;
          v45[1] = v17;
          v45[4].i64[0] = v47;
          v45[2] = v16;
          v45[3] = v36;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74C268(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74C30C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74C3C0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (4 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74C4E4(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74C4FC()
{
  return 1;
}

uint64_t sub_20F74C504()
{
  return 4;
}

uint64_t sub_20F74C50C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v11 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          v13 = *v11;
          v12 = v11[1];
          v8 = *v6;
          v6 += 4;
          v9 = *(unsigned int *)(a2 + 16);
          v10 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v8 + a3 + v9 * (HIDWORD(a3) + 4 * i)));
          *v10 = v13.i64[0];
          v10[v9] = vextq_s8(v13, v13, 8uLL).u64[0];
          v10[2 * v9] = v12.i64[0];
          v10[3 * v9] = vextq_s8(v12, v12, 8uLL).u64[0];
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74C5C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74C668(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74C71C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74C844(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74C86C()
{
  return 3;
}

uint64_t sub_20F74C874()
{
  return 4;
}

uint64_t sub_20F74C87C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  uint64_t v25;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v25 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v25 == *(_QWORD *)a2)
          {
            v12 = *(int8x16_t *)(v25 + 64);
            v16 = *(int8x16_t *)(v25 + 80);
            v18 = *(int8x16_t *)(v25 + 32);
            v13 = *(int8x16_t *)(v25 + 48);
            v9 = *(int8x16_t *)v25;
            v8 = *(int8x16_t *)(v25 + 16);
            v14 = vextq_s8(v16, v16, 8uLL).u64[0];
            v15.i64[0] = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v10 = vextq_s8(v18, v18, 8uLL).u64[0];
            v11.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)(v25 + 16);
            v9 = *(int8x16_t *)v25;
            v10 = *(_QWORD *)(v25 + 40);
            v11 = *(int8x16_t *)(v25 + 24);
            v12.i64[0] = *(_QWORD *)(v25 + 64);
            v13 = *(int8x16_t *)(v25 + 48);
            v14 = *(_QWORD *)(v25 + 88);
            v15 = *(int8x16_t *)(v25 + 72);
            v16.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v18.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
          }
          v19 = *v6;
          v6 += 4;
          v20 = *(unsigned int *)(a2 + 16);
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v11.i64[1] = v18.i64[0];
          v21 = *(_QWORD *)a2 + 8 * (3 * v19 + a3 + v20 * (HIDWORD(a3) + 4 * i));
          v13.i64[1] = v17;
          v15.i64[1] = v16.i64[0];
          *(_QWORD *)(v21 + 16) = v8.i64[0];
          *(int8x16_t *)v21 = v9;
          v22 = (int8x16_t *)(v21 + 8 * v20);
          v22[1].i64[0] = v10;
          *v22 = v11;
          v23 = (int8x16_t *)(v21 + 16 * v20);
          v23[1].i64[0] = v12.i64[0];
          *v23 = v13;
          v24 = (int8x16_t *)(v21 + 24 * v20);
          v24[1].i64[0] = v14;
          *v24 = v15;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74C990(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74CA34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74CAE8(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (18 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74CC10(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x12uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74CC40()
{
  return 6;
}

uint64_t sub_20F74CC48()
{
  return 3;
}

uint64_t sub_20F74CC50(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v25 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v25 == *(int8x16_t **)a2)
          {
            v12 = v25[7];
            v14 = v25[8];
            v18 = v25[5];
            v13 = v25[6];
            v10 = v25[3];
            v19 = v25[4];
            v8 = v25[1];
            v11 = v25[2];
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v16 = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v9 = *v25;
          }
          else
          {
            v9 = *v25;
            v8 = v25[1];
            v11 = v25[2];
            v10 = v25[3];
            v13 = v25[6];
            v12 = v25[7];
            v14 = v25[8];
            v15 = vextq_s8(v14, v14, 8uLL).u64[0];
            v16 = vextq_s8(v12, v12, 8uLL).u64[0];
            v17 = vextq_s8(v13, v13, 8uLL).u64[0];
            v19 = v25[4];
            v18 = v25[5];
          }
          v20 = *v6;
          v6 += 4;
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v21 = *(unsigned int *)(a2 + 16);
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
          v19.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v14.i64[1] = v15;
          v22 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 6 * v20 + v21 * (3 * i + HIDWORD(a3))));
          v12.i64[1] = v16;
          v13.i64[1] = v17;
          *v22 = v9;
          v22[1] = v8;
          v22[2] = v11;
          v23 = (int8x16_t *)((char *)v22 + 8 * v21);
          *v23 = v10;
          v23[1] = v19;
          v23[2] = v18;
          v24 = &v22[v21];
          *v24 = v13;
          v24[1] = v12;
          v24[2] = v14;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74CD78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74CE1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74CED0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (27 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74CFF8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0x1BuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74D028()
{
  return 9;
}

uint64_t sub_20F74D030()
{
  return 3;
}

uint64_t sub_20F74D038(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  uint64_t v38;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v38 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v38 == *(_QWORD *)a2)
          {
            v17 = *(int8x16_t *)(v38 + 176);
            v16 = *(int8x16_t *)(v38 + 192);
            v15 = *(int8x16_t *)(v38 + 144);
            v14 = *(int8x16_t *)(v38 + 160);
            v19 = *(int8x16_t *)(v38 + 112);
            v18 = *(int8x16_t *)(v38 + 128);
            v21 = *(int8x16_t *)(v38 + 80);
            v20 = *(int8x16_t *)(v38 + 96);
            v25 = *(int8x16_t *)(v38 + 48);
            v31 = *(int8x16_t *)(v38 + 64);
            v22 = vextq_s8(v16, v16, 8uLL).u64[0];
            v23 = vextq_s8(v17, v17, 8uLL).u64[0];
            v24 = vextq_s8(v14, v14, 8uLL).u64[0];
            v27 = vextq_s8(v15, v15, 8uLL).u64[0];
            v28 = vextq_s8(v18, v18, 8uLL).u64[0];
            *(_QWORD *)&v13 = vextq_s8(v19, v19, 8uLL).u64[0];
            *(_QWORD *)&v12 = vextq_s8(v20, v20, 8uLL).u64[0];
            *(_QWORD *)&v11 = vextq_s8(v21, v21, 8uLL).u64[0];
            v8 = *(int8x16_t *)(v38 + 16);
            v26 = *(int8x16_t *)(v38 + 32);
            *(_QWORD *)&v10 = vextq_s8(v31, v31, 8uLL).u64[0];
            v29 = vextq_s8(v25, v25, 8uLL).u64[0];
            v30 = vextq_s8(v26, v26, 8uLL).u64[0];
            v9 = *(int8x16_t *)v38;
          }
          else
          {
            v9 = *(int8x16_t *)v38;
            v8 = *(int8x16_t *)(v38 + 16);
            v10 = *(_OWORD *)(v38 + 72);
            v11 = *(_OWORD *)(v38 + 88);
            v12 = *(_OWORD *)(v38 + 104);
            v13 = *(_OWORD *)(v38 + 120);
            v15 = *(int8x16_t *)(v38 + 144);
            v14 = *(int8x16_t *)(v38 + 160);
            v17 = *(int8x16_t *)(v38 + 176);
            v16 = *(int8x16_t *)(v38 + 192);
            v18.i64[0] = *(_QWORD *)(v38 + 128);
            v19.i64[0] = *(_QWORD *)(v38 + 112);
            v20.i64[0] = *(_QWORD *)(v38 + 96);
            v21.i64[0] = *(_QWORD *)(v38 + 80);
            v22 = vextq_s8(v16, v16, 8uLL).u64[0];
            v23 = vextq_s8(v17, v17, 8uLL).u64[0];
            v24 = vextq_s8(v14, v14, 8uLL).u64[0];
            v26 = *(int8x16_t *)(v38 + 32);
            v25 = *(int8x16_t *)(v38 + 48);
            v27 = vextq_s8(v15, v15, 8uLL).u64[0];
            v28 = *(_QWORD *)(v38 + 136);
            v29 = vextq_s8(v25, v25, 8uLL).u64[0];
            v30 = vextq_s8(v26, v26, 8uLL).u64[0];
            v31.i64[0] = *(_QWORD *)(v38 + 64);
          }
          v32 = *(_QWORD *)(v38 + 208);
          v33 = *v6;
          v6 += 4;
          v34 = *(unsigned int *)(a2 + 16);
          v25.i64[1] = v29;
          v26.i64[1] = v30;
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *((_QWORD *)&v13 + 1) = v18.i64[0];
          *((_QWORD *)&v12 + 1) = v19.i64[0];
          *((_QWORD *)&v11 + 1) = v20.i64[0];
          *((_QWORD *)&v10 + 1) = v21.i64[0];
          v16.i64[1] = v22;
          v17.i64[1] = v23;
          v35 = *(_QWORD *)a2 + 8 * (9 * v33 + a3 + v34 * (3 * i + HIDWORD(a3)));
          v14.i64[1] = v24;
          v15.i64[1] = v27;
          *(int8x16_t *)v35 = v9;
          *(int8x16_t *)(v35 + 16) = v8;
          *(_QWORD *)(v35 + 64) = v31.i64[0];
          *(int8x16_t *)(v35 + 32) = v26;
          *(int8x16_t *)(v35 + 48) = v25;
          v36 = v35 + 8 * v34;
          *(_OWORD *)v36 = v10;
          *(_OWORD *)(v36 + 16) = v11;
          *(_QWORD *)(v36 + 64) = v28;
          *(_OWORD *)(v36 + 32) = v12;
          *(_OWORD *)(v36 + 48) = v13;
          v37 = (int8x16_t *)(v35 + 16 * v34);
          *v37 = v15;
          v37[1] = v14;
          v37[4].i64[0] = v32;
          v37[2] = v17;
          v37[3] = v16;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74D1D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74D278(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74D32C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (3 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74D450(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 3uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74D478()
{
  return 1;
}

uint64_t sub_20F74D480()
{
  return 3;
}

uint64_t sub_20F74D488(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v14 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v14 == *(_QWORD *)a2)
          {
            v10 = *(_QWORD *)(v14 + 16);
            v8 = *(int8x16_t *)v14;
            v9 = vextq_s8(v8, v8, 8uLL).u64[0];
          }
          else
          {
            v8.i64[0] = *(_QWORD *)v14;
            v9 = *(_QWORD *)(v14 + 8);
            v10 = *(_QWORD *)(v14 + 16);
          }
          v11 = *v6;
          v6 += 4;
          v12 = *(unsigned int *)(a2 + 16);
          v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * (v11 + a3 + v12 * (3 * i + HIDWORD(a3))));
          *v13 = v8.i64[0];
          v13[v12] = v9;
          v13[2 * v12] = v10;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74D534(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F74D5D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F74D68C(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (12 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F74D7B4(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 0xCuLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F74D7DC()
{
  return 4;
}

uint64_t sub_20F74D7E4()
{
  return 3;
}

uint64_t sub_20F74D7EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v19 = (int8x16_t *)(*(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1));
          if (v19 == *(int8x16_t **)a2)
          {
            v13 = v19[4];
            v12 = v19[5];
            v11 = v19[2];
            v10 = v19[3];
            v9 = *v19;
            v8 = v19[1];
          }
          else
          {
            v9 = *v19;
            v8 = v19[1];
            v11 = v19[2];
            v10 = v19[3];
            v13 = v19[4];
            v12 = v19[5];
          }
          v14 = *v6;
          v6 += 4;
          v15 = *(unsigned int *)(a2 + 16);
          v16 = (int8x16_t *)(*(_QWORD *)a2 + 8 * (a3 + 4 * v14 + v15 * (3 * i + HIDWORD(a3))));
          v12.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
          v13.i64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
          v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
          v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          v9.i64[1] = vextq_s8(v9, v9, 8uLL).u64[0];
          *v16 = v9;
          v16[1] = v8;
          v17 = (int8x16_t *)((char *)v16 + 8 * v15);
          *v17 = v11;
          v17[1] = v10;
          v18 = &v16[v15];
          *v18 = v13;
          v18[1] = v12;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

_QWORD *sub_20F74D8D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  void *v188;
  void *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  void *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  void *v223;
  void *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  void *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  void *v237;
  void *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  void *v244;
  void *v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  void *v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void *v265;
  void *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  void *v272;
  void *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  void *v279;
  void *v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  void *v286;
  void *v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  void *v293;
  void *v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  void *v300;
  void *v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  void *v307;
  void *v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  void *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  void *v328;
  void *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  void *v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  void *v342;
  void *v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  void *v349;
  void *v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  void *v356;
  void *v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  void *v363;
  void *v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  uint64_t v369;
  void *v370;
  void *v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  void *v377;
  void *v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  void *v384;
  void *v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  void *v391;
  void *v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  void *v398;
  void *v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  void *v405;
  void *v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  void *v412;
  void *v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  void *v419;
  void *v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  void *v426;
  void *v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  uint64_t v432;
  void *v433;
  void *v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  uint64_t v439;
  void *v440;
  void *v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  void *v447;
  void *v448;
  void *v449;

  a1[882] = off_24C9FCCA8;
  v2 = a1[893];
  if (v2)
  {
    v3 = a1[894];
    v4 = (void *)a1[893];
    if (v3 != v2)
    {
      v5 = a1[894];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[893];
    }
    a1[894] = v2;
    operator delete(v4);
  }
  a1[882] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 887));
  v8 = (void *)a1[884];
  if (v8)
  {
    a1[885] = v8;
    operator delete(v8);
  }
  a1[868] = off_24C9FCCA8;
  v9 = a1[879];
  if (v9)
  {
    v10 = a1[880];
    v11 = (void *)a1[879];
    if (v10 != v9)
    {
      v12 = a1[880];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[879];
    }
    a1[880] = v9;
    operator delete(v11);
  }
  a1[868] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 873));
  v15 = (void *)a1[870];
  if (v15)
  {
    a1[871] = v15;
    operator delete(v15);
  }
  a1[854] = off_24C9FCCA8;
  v16 = a1[865];
  if (v16)
  {
    v17 = a1[866];
    v18 = (void *)a1[865];
    if (v17 != v16)
    {
      v19 = a1[866];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)a1[865];
    }
    a1[866] = v16;
    operator delete(v18);
  }
  a1[854] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 859));
  v22 = (void *)a1[856];
  if (v22)
  {
    a1[857] = v22;
    operator delete(v22);
  }
  a1[840] = off_24C9FCCA8;
  v23 = a1[851];
  if (v23)
  {
    v24 = a1[852];
    v25 = (void *)a1[851];
    if (v24 != v23)
    {
      v26 = a1[852];
      do
      {
        v28 = *(void **)(v26 - 24);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 16) = v27;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)a1[851];
    }
    a1[852] = v23;
    operator delete(v25);
  }
  a1[840] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 845));
  v29 = (void *)a1[842];
  if (v29)
  {
    a1[843] = v29;
    operator delete(v29);
  }
  a1[826] = off_24C9FCCA8;
  v30 = a1[837];
  if (v30)
  {
    v31 = a1[838];
    v32 = (void *)a1[837];
    if (v31 != v30)
    {
      v33 = a1[838];
      do
      {
        v35 = *(void **)(v33 - 24);
        v33 -= 24;
        v34 = v35;
        if (v35)
        {
          *(_QWORD *)(v31 - 16) = v34;
          operator delete(v34);
        }
        v31 = v33;
      }
      while (v33 != v30);
      v32 = (void *)a1[837];
    }
    a1[838] = v30;
    operator delete(v32);
  }
  a1[826] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 831));
  v36 = (void *)a1[828];
  if (v36)
  {
    a1[829] = v36;
    operator delete(v36);
  }
  a1[812] = off_24C9FCCA8;
  v37 = a1[823];
  if (v37)
  {
    v38 = a1[824];
    v39 = (void *)a1[823];
    if (v38 != v37)
    {
      v40 = a1[824];
      do
      {
        v42 = *(void **)(v40 - 24);
        v40 -= 24;
        v41 = v42;
        if (v42)
        {
          *(_QWORD *)(v38 - 16) = v41;
          operator delete(v41);
        }
        v38 = v40;
      }
      while (v40 != v37);
      v39 = (void *)a1[823];
    }
    a1[824] = v37;
    operator delete(v39);
  }
  a1[812] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 817));
  v43 = (void *)a1[814];
  if (v43)
  {
    a1[815] = v43;
    operator delete(v43);
  }
  a1[798] = off_24C9FCCA8;
  v44 = a1[809];
  if (v44)
  {
    v45 = a1[810];
    v46 = (void *)a1[809];
    if (v45 != v44)
    {
      v47 = a1[810];
      do
      {
        v49 = *(void **)(v47 - 24);
        v47 -= 24;
        v48 = v49;
        if (v49)
        {
          *(_QWORD *)(v45 - 16) = v48;
          operator delete(v48);
        }
        v45 = v47;
      }
      while (v47 != v44);
      v46 = (void *)a1[809];
    }
    a1[810] = v44;
    operator delete(v46);
  }
  a1[798] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 803));
  v50 = (void *)a1[800];
  if (v50)
  {
    a1[801] = v50;
    operator delete(v50);
  }
  a1[784] = off_24C9FCCA8;
  v51 = a1[795];
  if (v51)
  {
    v52 = a1[796];
    v53 = (void *)a1[795];
    if (v52 != v51)
    {
      v54 = a1[796];
      do
      {
        v56 = *(void **)(v54 - 24);
        v54 -= 24;
        v55 = v56;
        if (v56)
        {
          *(_QWORD *)(v52 - 16) = v55;
          operator delete(v55);
        }
        v52 = v54;
      }
      while (v54 != v51);
      v53 = (void *)a1[795];
    }
    a1[796] = v51;
    operator delete(v53);
  }
  a1[784] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 789));
  v57 = (void *)a1[786];
  if (v57)
  {
    a1[787] = v57;
    operator delete(v57);
  }
  a1[770] = off_24C9FCCA8;
  v58 = a1[781];
  if (v58)
  {
    v59 = a1[782];
    v60 = (void *)a1[781];
    if (v59 != v58)
    {
      v61 = a1[782];
      do
      {
        v63 = *(void **)(v61 - 24);
        v61 -= 24;
        v62 = v63;
        if (v63)
        {
          *(_QWORD *)(v59 - 16) = v62;
          operator delete(v62);
        }
        v59 = v61;
      }
      while (v61 != v58);
      v60 = (void *)a1[781];
    }
    a1[782] = v58;
    operator delete(v60);
  }
  a1[770] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 775));
  v64 = (void *)a1[772];
  if (v64)
  {
    a1[773] = v64;
    operator delete(v64);
  }
  a1[756] = off_24C9FCCA8;
  v65 = a1[767];
  if (v65)
  {
    v66 = a1[768];
    v67 = (void *)a1[767];
    if (v66 != v65)
    {
      v68 = a1[768];
      do
      {
        v70 = *(void **)(v68 - 24);
        v68 -= 24;
        v69 = v70;
        if (v70)
        {
          *(_QWORD *)(v66 - 16) = v69;
          operator delete(v69);
        }
        v66 = v68;
      }
      while (v68 != v65);
      v67 = (void *)a1[767];
    }
    a1[768] = v65;
    operator delete(v67);
  }
  a1[756] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 761));
  v71 = (void *)a1[758];
  if (v71)
  {
    a1[759] = v71;
    operator delete(v71);
  }
  a1[742] = off_24C9FCCA8;
  v72 = a1[753];
  if (v72)
  {
    v73 = a1[754];
    v74 = (void *)a1[753];
    if (v73 != v72)
    {
      v75 = a1[754];
      do
      {
        v77 = *(void **)(v75 - 24);
        v75 -= 24;
        v76 = v77;
        if (v77)
        {
          *(_QWORD *)(v73 - 16) = v76;
          operator delete(v76);
        }
        v73 = v75;
      }
      while (v75 != v72);
      v74 = (void *)a1[753];
    }
    a1[754] = v72;
    operator delete(v74);
  }
  a1[742] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 747));
  v78 = (void *)a1[744];
  if (v78)
  {
    a1[745] = v78;
    operator delete(v78);
  }
  a1[728] = off_24C9FCCA8;
  v79 = a1[739];
  if (v79)
  {
    v80 = a1[740];
    v81 = (void *)a1[739];
    if (v80 != v79)
    {
      v82 = a1[740];
      do
      {
        v84 = *(void **)(v82 - 24);
        v82 -= 24;
        v83 = v84;
        if (v84)
        {
          *(_QWORD *)(v80 - 16) = v83;
          operator delete(v83);
        }
        v80 = v82;
      }
      while (v82 != v79);
      v81 = (void *)a1[739];
    }
    a1[740] = v79;
    operator delete(v81);
  }
  a1[728] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 733));
  v85 = (void *)a1[730];
  if (v85)
  {
    a1[731] = v85;
    operator delete(v85);
  }
  a1[714] = off_24C9FCCA8;
  v86 = a1[725];
  if (v86)
  {
    v87 = a1[726];
    v88 = (void *)a1[725];
    if (v87 != v86)
    {
      v89 = a1[726];
      do
      {
        v91 = *(void **)(v89 - 24);
        v89 -= 24;
        v90 = v91;
        if (v91)
        {
          *(_QWORD *)(v87 - 16) = v90;
          operator delete(v90);
        }
        v87 = v89;
      }
      while (v89 != v86);
      v88 = (void *)a1[725];
    }
    a1[726] = v86;
    operator delete(v88);
  }
  a1[714] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 719));
  v92 = (void *)a1[716];
  if (v92)
  {
    a1[717] = v92;
    operator delete(v92);
  }
  a1[700] = off_24C9FCCA8;
  v93 = a1[711];
  if (v93)
  {
    v94 = a1[712];
    v95 = (void *)a1[711];
    if (v94 != v93)
    {
      v96 = a1[712];
      do
      {
        v98 = *(void **)(v96 - 24);
        v96 -= 24;
        v97 = v98;
        if (v98)
        {
          *(_QWORD *)(v94 - 16) = v97;
          operator delete(v97);
        }
        v94 = v96;
      }
      while (v96 != v93);
      v95 = (void *)a1[711];
    }
    a1[712] = v93;
    operator delete(v95);
  }
  a1[700] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 705));
  v99 = (void *)a1[702];
  if (v99)
  {
    a1[703] = v99;
    operator delete(v99);
  }
  a1[686] = off_24C9FCCA8;
  v100 = a1[697];
  if (v100)
  {
    v101 = a1[698];
    v102 = (void *)a1[697];
    if (v101 != v100)
    {
      v103 = a1[698];
      do
      {
        v105 = *(void **)(v103 - 24);
        v103 -= 24;
        v104 = v105;
        if (v105)
        {
          *(_QWORD *)(v101 - 16) = v104;
          operator delete(v104);
        }
        v101 = v103;
      }
      while (v103 != v100);
      v102 = (void *)a1[697];
    }
    a1[698] = v100;
    operator delete(v102);
  }
  a1[686] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 691));
  v106 = (void *)a1[688];
  if (v106)
  {
    a1[689] = v106;
    operator delete(v106);
  }
  a1[672] = off_24C9FCCA8;
  v107 = a1[683];
  if (v107)
  {
    v108 = a1[684];
    v109 = (void *)a1[683];
    if (v108 != v107)
    {
      v110 = a1[684];
      do
      {
        v112 = *(void **)(v110 - 24);
        v110 -= 24;
        v111 = v112;
        if (v112)
        {
          *(_QWORD *)(v108 - 16) = v111;
          operator delete(v111);
        }
        v108 = v110;
      }
      while (v110 != v107);
      v109 = (void *)a1[683];
    }
    a1[684] = v107;
    operator delete(v109);
  }
  a1[672] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 677));
  v113 = (void *)a1[674];
  if (v113)
  {
    a1[675] = v113;
    operator delete(v113);
  }
  a1[658] = off_24C9FCCA8;
  v114 = a1[669];
  if (v114)
  {
    v115 = a1[670];
    v116 = (void *)a1[669];
    if (v115 != v114)
    {
      v117 = a1[670];
      do
      {
        v119 = *(void **)(v117 - 24);
        v117 -= 24;
        v118 = v119;
        if (v119)
        {
          *(_QWORD *)(v115 - 16) = v118;
          operator delete(v118);
        }
        v115 = v117;
      }
      while (v117 != v114);
      v116 = (void *)a1[669];
    }
    a1[670] = v114;
    operator delete(v116);
  }
  a1[658] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 663));
  v120 = (void *)a1[660];
  if (v120)
  {
    a1[661] = v120;
    operator delete(v120);
  }
  a1[644] = off_24C9FCCA8;
  v121 = a1[655];
  if (v121)
  {
    v122 = a1[656];
    v123 = (void *)a1[655];
    if (v122 != v121)
    {
      v124 = a1[656];
      do
      {
        v126 = *(void **)(v124 - 24);
        v124 -= 24;
        v125 = v126;
        if (v126)
        {
          *(_QWORD *)(v122 - 16) = v125;
          operator delete(v125);
        }
        v122 = v124;
      }
      while (v124 != v121);
      v123 = (void *)a1[655];
    }
    a1[656] = v121;
    operator delete(v123);
  }
  a1[644] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 649));
  v127 = (void *)a1[646];
  if (v127)
  {
    a1[647] = v127;
    operator delete(v127);
  }
  a1[630] = off_24C9FCCA8;
  v128 = a1[641];
  if (v128)
  {
    v129 = a1[642];
    v130 = (void *)a1[641];
    if (v129 != v128)
    {
      v131 = a1[642];
      do
      {
        v133 = *(void **)(v131 - 24);
        v131 -= 24;
        v132 = v133;
        if (v133)
        {
          *(_QWORD *)(v129 - 16) = v132;
          operator delete(v132);
        }
        v129 = v131;
      }
      while (v131 != v128);
      v130 = (void *)a1[641];
    }
    a1[642] = v128;
    operator delete(v130);
  }
  a1[630] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 635));
  v134 = (void *)a1[632];
  if (v134)
  {
    a1[633] = v134;
    operator delete(v134);
  }
  a1[616] = off_24C9FCCA8;
  v135 = a1[627];
  if (v135)
  {
    v136 = a1[628];
    v137 = (void *)a1[627];
    if (v136 != v135)
    {
      v138 = a1[628];
      do
      {
        v140 = *(void **)(v138 - 24);
        v138 -= 24;
        v139 = v140;
        if (v140)
        {
          *(_QWORD *)(v136 - 16) = v139;
          operator delete(v139);
        }
        v136 = v138;
      }
      while (v138 != v135);
      v137 = (void *)a1[627];
    }
    a1[628] = v135;
    operator delete(v137);
  }
  a1[616] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 621));
  v141 = (void *)a1[618];
  if (v141)
  {
    a1[619] = v141;
    operator delete(v141);
  }
  a1[602] = off_24C9FCCA8;
  v142 = a1[613];
  if (v142)
  {
    v143 = a1[614];
    v144 = (void *)a1[613];
    if (v143 != v142)
    {
      v145 = a1[614];
      do
      {
        v147 = *(void **)(v145 - 24);
        v145 -= 24;
        v146 = v147;
        if (v147)
        {
          *(_QWORD *)(v143 - 16) = v146;
          operator delete(v146);
        }
        v143 = v145;
      }
      while (v145 != v142);
      v144 = (void *)a1[613];
    }
    a1[614] = v142;
    operator delete(v144);
  }
  a1[602] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 607));
  v148 = (void *)a1[604];
  if (v148)
  {
    a1[605] = v148;
    operator delete(v148);
  }
  a1[588] = off_24C9FCCA8;
  v149 = a1[599];
  if (v149)
  {
    v150 = a1[600];
    v151 = (void *)a1[599];
    if (v150 != v149)
    {
      v152 = a1[600];
      do
      {
        v154 = *(void **)(v152 - 24);
        v152 -= 24;
        v153 = v154;
        if (v154)
        {
          *(_QWORD *)(v150 - 16) = v153;
          operator delete(v153);
        }
        v150 = v152;
      }
      while (v152 != v149);
      v151 = (void *)a1[599];
    }
    a1[600] = v149;
    operator delete(v151);
  }
  a1[588] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 593));
  v155 = (void *)a1[590];
  if (v155)
  {
    a1[591] = v155;
    operator delete(v155);
  }
  a1[574] = off_24C9FCCA8;
  v156 = a1[585];
  if (v156)
  {
    v157 = a1[586];
    v158 = (void *)a1[585];
    if (v157 != v156)
    {
      v159 = a1[586];
      do
      {
        v161 = *(void **)(v159 - 24);
        v159 -= 24;
        v160 = v161;
        if (v161)
        {
          *(_QWORD *)(v157 - 16) = v160;
          operator delete(v160);
        }
        v157 = v159;
      }
      while (v159 != v156);
      v158 = (void *)a1[585];
    }
    a1[586] = v156;
    operator delete(v158);
  }
  a1[574] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 579));
  v162 = (void *)a1[576];
  if (v162)
  {
    a1[577] = v162;
    operator delete(v162);
  }
  a1[560] = off_24C9FCCA8;
  v163 = a1[571];
  if (v163)
  {
    v164 = a1[572];
    v165 = (void *)a1[571];
    if (v164 != v163)
    {
      v166 = a1[572];
      do
      {
        v168 = *(void **)(v166 - 24);
        v166 -= 24;
        v167 = v168;
        if (v168)
        {
          *(_QWORD *)(v164 - 16) = v167;
          operator delete(v167);
        }
        v164 = v166;
      }
      while (v166 != v163);
      v165 = (void *)a1[571];
    }
    a1[572] = v163;
    operator delete(v165);
  }
  a1[560] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 565));
  v169 = (void *)a1[562];
  if (v169)
  {
    a1[563] = v169;
    operator delete(v169);
  }
  a1[546] = off_24C9FCCA8;
  v170 = a1[557];
  if (v170)
  {
    v171 = a1[558];
    v172 = (void *)a1[557];
    if (v171 != v170)
    {
      v173 = a1[558];
      do
      {
        v175 = *(void **)(v173 - 24);
        v173 -= 24;
        v174 = v175;
        if (v175)
        {
          *(_QWORD *)(v171 - 16) = v174;
          operator delete(v174);
        }
        v171 = v173;
      }
      while (v173 != v170);
      v172 = (void *)a1[557];
    }
    a1[558] = v170;
    operator delete(v172);
  }
  a1[546] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 551));
  v176 = (void *)a1[548];
  if (v176)
  {
    a1[549] = v176;
    operator delete(v176);
  }
  a1[532] = off_24C9FCCA8;
  v177 = a1[543];
  if (v177)
  {
    v178 = a1[544];
    v179 = (void *)a1[543];
    if (v178 != v177)
    {
      v180 = a1[544];
      do
      {
        v182 = *(void **)(v180 - 24);
        v180 -= 24;
        v181 = v182;
        if (v182)
        {
          *(_QWORD *)(v178 - 16) = v181;
          operator delete(v181);
        }
        v178 = v180;
      }
      while (v180 != v177);
      v179 = (void *)a1[543];
    }
    a1[544] = v177;
    operator delete(v179);
  }
  a1[532] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 537));
  v183 = (void *)a1[534];
  if (v183)
  {
    a1[535] = v183;
    operator delete(v183);
  }
  a1[518] = off_24C9FCCA8;
  v184 = a1[529];
  if (v184)
  {
    v185 = a1[530];
    v186 = (void *)a1[529];
    if (v185 != v184)
    {
      v187 = a1[530];
      do
      {
        v189 = *(void **)(v187 - 24);
        v187 -= 24;
        v188 = v189;
        if (v189)
        {
          *(_QWORD *)(v185 - 16) = v188;
          operator delete(v188);
        }
        v185 = v187;
      }
      while (v187 != v184);
      v186 = (void *)a1[529];
    }
    a1[530] = v184;
    operator delete(v186);
  }
  a1[518] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 523));
  v190 = (void *)a1[520];
  if (v190)
  {
    a1[521] = v190;
    operator delete(v190);
  }
  a1[504] = off_24C9FCCA8;
  v191 = a1[515];
  if (v191)
  {
    v192 = a1[516];
    v193 = (void *)a1[515];
    if (v192 != v191)
    {
      v194 = a1[516];
      do
      {
        v196 = *(void **)(v194 - 24);
        v194 -= 24;
        v195 = v196;
        if (v196)
        {
          *(_QWORD *)(v192 - 16) = v195;
          operator delete(v195);
        }
        v192 = v194;
      }
      while (v194 != v191);
      v193 = (void *)a1[515];
    }
    a1[516] = v191;
    operator delete(v193);
  }
  a1[504] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 509));
  v197 = (void *)a1[506];
  if (v197)
  {
    a1[507] = v197;
    operator delete(v197);
  }
  a1[490] = off_24C9FCCA8;
  v198 = a1[501];
  if (v198)
  {
    v199 = a1[502];
    v200 = (void *)a1[501];
    if (v199 != v198)
    {
      v201 = a1[502];
      do
      {
        v203 = *(void **)(v201 - 24);
        v201 -= 24;
        v202 = v203;
        if (v203)
        {
          *(_QWORD *)(v199 - 16) = v202;
          operator delete(v202);
        }
        v199 = v201;
      }
      while (v201 != v198);
      v200 = (void *)a1[501];
    }
    a1[502] = v198;
    operator delete(v200);
  }
  a1[490] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 495));
  v204 = (void *)a1[492];
  if (v204)
  {
    a1[493] = v204;
    operator delete(v204);
  }
  a1[476] = off_24C9FCCA8;
  v205 = a1[487];
  if (v205)
  {
    v206 = a1[488];
    v207 = (void *)a1[487];
    if (v206 != v205)
    {
      v208 = a1[488];
      do
      {
        v210 = *(void **)(v208 - 24);
        v208 -= 24;
        v209 = v210;
        if (v210)
        {
          *(_QWORD *)(v206 - 16) = v209;
          operator delete(v209);
        }
        v206 = v208;
      }
      while (v208 != v205);
      v207 = (void *)a1[487];
    }
    a1[488] = v205;
    operator delete(v207);
  }
  a1[476] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 481));
  v211 = (void *)a1[478];
  if (v211)
  {
    a1[479] = v211;
    operator delete(v211);
  }
  a1[462] = off_24C9FCCA8;
  v212 = a1[473];
  if (v212)
  {
    v213 = a1[474];
    v214 = (void *)a1[473];
    if (v213 != v212)
    {
      v215 = a1[474];
      do
      {
        v217 = *(void **)(v215 - 24);
        v215 -= 24;
        v216 = v217;
        if (v217)
        {
          *(_QWORD *)(v213 - 16) = v216;
          operator delete(v216);
        }
        v213 = v215;
      }
      while (v215 != v212);
      v214 = (void *)a1[473];
    }
    a1[474] = v212;
    operator delete(v214);
  }
  a1[462] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 467));
  v218 = (void *)a1[464];
  if (v218)
  {
    a1[465] = v218;
    operator delete(v218);
  }
  a1[448] = off_24C9FCCA8;
  v219 = a1[459];
  if (v219)
  {
    v220 = a1[460];
    v221 = (void *)a1[459];
    if (v220 != v219)
    {
      v222 = a1[460];
      do
      {
        v224 = *(void **)(v222 - 24);
        v222 -= 24;
        v223 = v224;
        if (v224)
        {
          *(_QWORD *)(v220 - 16) = v223;
          operator delete(v223);
        }
        v220 = v222;
      }
      while (v222 != v219);
      v221 = (void *)a1[459];
    }
    a1[460] = v219;
    operator delete(v221);
  }
  a1[448] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 453));
  v225 = (void *)a1[450];
  if (v225)
  {
    a1[451] = v225;
    operator delete(v225);
  }
  a1[434] = off_24C9FCCA8;
  v226 = a1[445];
  if (v226)
  {
    v227 = a1[446];
    v228 = (void *)a1[445];
    if (v227 != v226)
    {
      v229 = a1[446];
      do
      {
        v231 = *(void **)(v229 - 24);
        v229 -= 24;
        v230 = v231;
        if (v231)
        {
          *(_QWORD *)(v227 - 16) = v230;
          operator delete(v230);
        }
        v227 = v229;
      }
      while (v229 != v226);
      v228 = (void *)a1[445];
    }
    a1[446] = v226;
    operator delete(v228);
  }
  a1[434] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 439));
  v232 = (void *)a1[436];
  if (v232)
  {
    a1[437] = v232;
    operator delete(v232);
  }
  a1[420] = off_24C9FCCA8;
  v233 = a1[431];
  if (v233)
  {
    v234 = a1[432];
    v235 = (void *)a1[431];
    if (v234 != v233)
    {
      v236 = a1[432];
      do
      {
        v238 = *(void **)(v236 - 24);
        v236 -= 24;
        v237 = v238;
        if (v238)
        {
          *(_QWORD *)(v234 - 16) = v237;
          operator delete(v237);
        }
        v234 = v236;
      }
      while (v236 != v233);
      v235 = (void *)a1[431];
    }
    a1[432] = v233;
    operator delete(v235);
  }
  a1[420] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 425));
  v239 = (void *)a1[422];
  if (v239)
  {
    a1[423] = v239;
    operator delete(v239);
  }
  a1[406] = off_24C9FCCA8;
  v240 = a1[417];
  if (v240)
  {
    v241 = a1[418];
    v242 = (void *)a1[417];
    if (v241 != v240)
    {
      v243 = a1[418];
      do
      {
        v245 = *(void **)(v243 - 24);
        v243 -= 24;
        v244 = v245;
        if (v245)
        {
          *(_QWORD *)(v241 - 16) = v244;
          operator delete(v244);
        }
        v241 = v243;
      }
      while (v243 != v240);
      v242 = (void *)a1[417];
    }
    a1[418] = v240;
    operator delete(v242);
  }
  a1[406] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 411));
  v246 = (void *)a1[408];
  if (v246)
  {
    a1[409] = v246;
    operator delete(v246);
  }
  a1[392] = off_24C9FCCA8;
  v247 = a1[403];
  if (v247)
  {
    v248 = a1[404];
    v249 = (void *)a1[403];
    if (v248 != v247)
    {
      v250 = a1[404];
      do
      {
        v252 = *(void **)(v250 - 24);
        v250 -= 24;
        v251 = v252;
        if (v252)
        {
          *(_QWORD *)(v248 - 16) = v251;
          operator delete(v251);
        }
        v248 = v250;
      }
      while (v250 != v247);
      v249 = (void *)a1[403];
    }
    a1[404] = v247;
    operator delete(v249);
  }
  a1[392] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 397));
  v253 = (void *)a1[394];
  if (v253)
  {
    a1[395] = v253;
    operator delete(v253);
  }
  a1[378] = off_24C9FCCA8;
  v254 = a1[389];
  if (v254)
  {
    v255 = a1[390];
    v256 = (void *)a1[389];
    if (v255 != v254)
    {
      v257 = a1[390];
      do
      {
        v259 = *(void **)(v257 - 24);
        v257 -= 24;
        v258 = v259;
        if (v259)
        {
          *(_QWORD *)(v255 - 16) = v258;
          operator delete(v258);
        }
        v255 = v257;
      }
      while (v257 != v254);
      v256 = (void *)a1[389];
    }
    a1[390] = v254;
    operator delete(v256);
  }
  a1[378] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 383));
  v260 = (void *)a1[380];
  if (v260)
  {
    a1[381] = v260;
    operator delete(v260);
  }
  a1[364] = off_24C9FCCA8;
  v261 = a1[375];
  if (v261)
  {
    v262 = a1[376];
    v263 = (void *)a1[375];
    if (v262 != v261)
    {
      v264 = a1[376];
      do
      {
        v266 = *(void **)(v264 - 24);
        v264 -= 24;
        v265 = v266;
        if (v266)
        {
          *(_QWORD *)(v262 - 16) = v265;
          operator delete(v265);
        }
        v262 = v264;
      }
      while (v264 != v261);
      v263 = (void *)a1[375];
    }
    a1[376] = v261;
    operator delete(v263);
  }
  a1[364] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 369));
  v267 = (void *)a1[366];
  if (v267)
  {
    a1[367] = v267;
    operator delete(v267);
  }
  a1[350] = off_24C9FCCA8;
  v268 = a1[361];
  if (v268)
  {
    v269 = a1[362];
    v270 = (void *)a1[361];
    if (v269 != v268)
    {
      v271 = a1[362];
      do
      {
        v273 = *(void **)(v271 - 24);
        v271 -= 24;
        v272 = v273;
        if (v273)
        {
          *(_QWORD *)(v269 - 16) = v272;
          operator delete(v272);
        }
        v269 = v271;
      }
      while (v271 != v268);
      v270 = (void *)a1[361];
    }
    a1[362] = v268;
    operator delete(v270);
  }
  a1[350] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 355));
  v274 = (void *)a1[352];
  if (v274)
  {
    a1[353] = v274;
    operator delete(v274);
  }
  a1[336] = off_24C9FCCA8;
  v275 = a1[347];
  if (v275)
  {
    v276 = a1[348];
    v277 = (void *)a1[347];
    if (v276 != v275)
    {
      v278 = a1[348];
      do
      {
        v280 = *(void **)(v278 - 24);
        v278 -= 24;
        v279 = v280;
        if (v280)
        {
          *(_QWORD *)(v276 - 16) = v279;
          operator delete(v279);
        }
        v276 = v278;
      }
      while (v278 != v275);
      v277 = (void *)a1[347];
    }
    a1[348] = v275;
    operator delete(v277);
  }
  a1[336] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 341));
  v281 = (void *)a1[338];
  if (v281)
  {
    a1[339] = v281;
    operator delete(v281);
  }
  a1[322] = off_24C9FCCA8;
  v282 = a1[333];
  if (v282)
  {
    v283 = a1[334];
    v284 = (void *)a1[333];
    if (v283 != v282)
    {
      v285 = a1[334];
      do
      {
        v287 = *(void **)(v285 - 24);
        v285 -= 24;
        v286 = v287;
        if (v287)
        {
          *(_QWORD *)(v283 - 16) = v286;
          operator delete(v286);
        }
        v283 = v285;
      }
      while (v285 != v282);
      v284 = (void *)a1[333];
    }
    a1[334] = v282;
    operator delete(v284);
  }
  a1[322] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 327));
  v288 = (void *)a1[324];
  if (v288)
  {
    a1[325] = v288;
    operator delete(v288);
  }
  a1[308] = off_24C9FCCA8;
  v289 = a1[319];
  if (v289)
  {
    v290 = a1[320];
    v291 = (void *)a1[319];
    if (v290 != v289)
    {
      v292 = a1[320];
      do
      {
        v294 = *(void **)(v292 - 24);
        v292 -= 24;
        v293 = v294;
        if (v294)
        {
          *(_QWORD *)(v290 - 16) = v293;
          operator delete(v293);
        }
        v290 = v292;
      }
      while (v292 != v289);
      v291 = (void *)a1[319];
    }
    a1[320] = v289;
    operator delete(v291);
  }
  a1[308] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 313));
  v295 = (void *)a1[310];
  if (v295)
  {
    a1[311] = v295;
    operator delete(v295);
  }
  a1[294] = off_24C9FCCA8;
  v296 = a1[305];
  if (v296)
  {
    v297 = a1[306];
    v298 = (void *)a1[305];
    if (v297 != v296)
    {
      v299 = a1[306];
      do
      {
        v301 = *(void **)(v299 - 24);
        v299 -= 24;
        v300 = v301;
        if (v301)
        {
          *(_QWORD *)(v297 - 16) = v300;
          operator delete(v300);
        }
        v297 = v299;
      }
      while (v299 != v296);
      v298 = (void *)a1[305];
    }
    a1[306] = v296;
    operator delete(v298);
  }
  a1[294] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 299));
  v302 = (void *)a1[296];
  if (v302)
  {
    a1[297] = v302;
    operator delete(v302);
  }
  a1[280] = off_24C9FCCA8;
  v303 = a1[291];
  if (v303)
  {
    v304 = a1[292];
    v305 = (void *)a1[291];
    if (v304 != v303)
    {
      v306 = a1[292];
      do
      {
        v308 = *(void **)(v306 - 24);
        v306 -= 24;
        v307 = v308;
        if (v308)
        {
          *(_QWORD *)(v304 - 16) = v307;
          operator delete(v307);
        }
        v304 = v306;
      }
      while (v306 != v303);
      v305 = (void *)a1[291];
    }
    a1[292] = v303;
    operator delete(v305);
  }
  a1[280] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 285));
  v309 = (void *)a1[282];
  if (v309)
  {
    a1[283] = v309;
    operator delete(v309);
  }
  a1[266] = off_24C9FCCA8;
  v310 = a1[277];
  if (v310)
  {
    v311 = a1[278];
    v312 = (void *)a1[277];
    if (v311 != v310)
    {
      v313 = a1[278];
      do
      {
        v315 = *(void **)(v313 - 24);
        v313 -= 24;
        v314 = v315;
        if (v315)
        {
          *(_QWORD *)(v311 - 16) = v314;
          operator delete(v314);
        }
        v311 = v313;
      }
      while (v313 != v310);
      v312 = (void *)a1[277];
    }
    a1[278] = v310;
    operator delete(v312);
  }
  a1[266] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 271));
  v316 = (void *)a1[268];
  if (v316)
  {
    a1[269] = v316;
    operator delete(v316);
  }
  a1[252] = off_24C9FCCA8;
  v317 = a1[263];
  if (v317)
  {
    v318 = a1[264];
    v319 = (void *)a1[263];
    if (v318 != v317)
    {
      v320 = a1[264];
      do
      {
        v322 = *(void **)(v320 - 24);
        v320 -= 24;
        v321 = v322;
        if (v322)
        {
          *(_QWORD *)(v318 - 16) = v321;
          operator delete(v321);
        }
        v318 = v320;
      }
      while (v320 != v317);
      v319 = (void *)a1[263];
    }
    a1[264] = v317;
    operator delete(v319);
  }
  a1[252] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 257));
  v323 = (void *)a1[254];
  if (v323)
  {
    a1[255] = v323;
    operator delete(v323);
  }
  a1[238] = off_24C9FCCA8;
  v324 = a1[249];
  if (v324)
  {
    v325 = a1[250];
    v326 = (void *)a1[249];
    if (v325 != v324)
    {
      v327 = a1[250];
      do
      {
        v329 = *(void **)(v327 - 24);
        v327 -= 24;
        v328 = v329;
        if (v329)
        {
          *(_QWORD *)(v325 - 16) = v328;
          operator delete(v328);
        }
        v325 = v327;
      }
      while (v327 != v324);
      v326 = (void *)a1[249];
    }
    a1[250] = v324;
    operator delete(v326);
  }
  a1[238] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 243));
  v330 = (void *)a1[240];
  if (v330)
  {
    a1[241] = v330;
    operator delete(v330);
  }
  a1[224] = off_24C9FCCA8;
  v331 = a1[235];
  if (v331)
  {
    v332 = a1[236];
    v333 = (void *)a1[235];
    if (v332 != v331)
    {
      v334 = a1[236];
      do
      {
        v336 = *(void **)(v334 - 24);
        v334 -= 24;
        v335 = v336;
        if (v336)
        {
          *(_QWORD *)(v332 - 16) = v335;
          operator delete(v335);
        }
        v332 = v334;
      }
      while (v334 != v331);
      v333 = (void *)a1[235];
    }
    a1[236] = v331;
    operator delete(v333);
  }
  a1[224] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 229));
  v337 = (void *)a1[226];
  if (v337)
  {
    a1[227] = v337;
    operator delete(v337);
  }
  a1[210] = off_24C9FCCA8;
  v338 = a1[221];
  if (v338)
  {
    v339 = a1[222];
    v340 = (void *)a1[221];
    if (v339 != v338)
    {
      v341 = a1[222];
      do
      {
        v343 = *(void **)(v341 - 24);
        v341 -= 24;
        v342 = v343;
        if (v343)
        {
          *(_QWORD *)(v339 - 16) = v342;
          operator delete(v342);
        }
        v339 = v341;
      }
      while (v341 != v338);
      v340 = (void *)a1[221];
    }
    a1[222] = v338;
    operator delete(v340);
  }
  a1[210] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 215));
  v344 = (void *)a1[212];
  if (v344)
  {
    a1[213] = v344;
    operator delete(v344);
  }
  a1[196] = off_24C9FCCA8;
  v345 = a1[207];
  if (v345)
  {
    v346 = a1[208];
    v347 = (void *)a1[207];
    if (v346 != v345)
    {
      v348 = a1[208];
      do
      {
        v350 = *(void **)(v348 - 24);
        v348 -= 24;
        v349 = v350;
        if (v350)
        {
          *(_QWORD *)(v346 - 16) = v349;
          operator delete(v349);
        }
        v346 = v348;
      }
      while (v348 != v345);
      v347 = (void *)a1[207];
    }
    a1[208] = v345;
    operator delete(v347);
  }
  a1[196] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 201));
  v351 = (void *)a1[198];
  if (v351)
  {
    a1[199] = v351;
    operator delete(v351);
  }
  a1[182] = off_24C9FCCA8;
  v352 = a1[193];
  if (v352)
  {
    v353 = a1[194];
    v354 = (void *)a1[193];
    if (v353 != v352)
    {
      v355 = a1[194];
      do
      {
        v357 = *(void **)(v355 - 24);
        v355 -= 24;
        v356 = v357;
        if (v357)
        {
          *(_QWORD *)(v353 - 16) = v356;
          operator delete(v356);
        }
        v353 = v355;
      }
      while (v355 != v352);
      v354 = (void *)a1[193];
    }
    a1[194] = v352;
    operator delete(v354);
  }
  a1[182] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 187));
  v358 = (void *)a1[184];
  if (v358)
  {
    a1[185] = v358;
    operator delete(v358);
  }
  a1[168] = off_24C9FCCA8;
  v359 = a1[179];
  if (v359)
  {
    v360 = a1[180];
    v361 = (void *)a1[179];
    if (v360 != v359)
    {
      v362 = a1[180];
      do
      {
        v364 = *(void **)(v362 - 24);
        v362 -= 24;
        v363 = v364;
        if (v364)
        {
          *(_QWORD *)(v360 - 16) = v363;
          operator delete(v363);
        }
        v360 = v362;
      }
      while (v362 != v359);
      v361 = (void *)a1[179];
    }
    a1[180] = v359;
    operator delete(v361);
  }
  a1[168] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 173));
  v365 = (void *)a1[170];
  if (v365)
  {
    a1[171] = v365;
    operator delete(v365);
  }
  a1[154] = off_24C9FCCA8;
  v366 = a1[165];
  if (v366)
  {
    v367 = a1[166];
    v368 = (void *)a1[165];
    if (v367 != v366)
    {
      v369 = a1[166];
      do
      {
        v371 = *(void **)(v369 - 24);
        v369 -= 24;
        v370 = v371;
        if (v371)
        {
          *(_QWORD *)(v367 - 16) = v370;
          operator delete(v370);
        }
        v367 = v369;
      }
      while (v369 != v366);
      v368 = (void *)a1[165];
    }
    a1[166] = v366;
    operator delete(v368);
  }
  a1[154] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 159));
  v372 = (void *)a1[156];
  if (v372)
  {
    a1[157] = v372;
    operator delete(v372);
  }
  a1[140] = off_24C9FCCA8;
  v373 = a1[151];
  if (v373)
  {
    v374 = a1[152];
    v375 = (void *)a1[151];
    if (v374 != v373)
    {
      v376 = a1[152];
      do
      {
        v378 = *(void **)(v376 - 24);
        v376 -= 24;
        v377 = v378;
        if (v378)
        {
          *(_QWORD *)(v374 - 16) = v377;
          operator delete(v377);
        }
        v374 = v376;
      }
      while (v376 != v373);
      v375 = (void *)a1[151];
    }
    a1[152] = v373;
    operator delete(v375);
  }
  a1[140] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 145));
  v379 = (void *)a1[142];
  if (v379)
  {
    a1[143] = v379;
    operator delete(v379);
  }
  a1[126] = off_24C9FCCA8;
  v380 = a1[137];
  if (v380)
  {
    v381 = a1[138];
    v382 = (void *)a1[137];
    if (v381 != v380)
    {
      v383 = a1[138];
      do
      {
        v385 = *(void **)(v383 - 24);
        v383 -= 24;
        v384 = v385;
        if (v385)
        {
          *(_QWORD *)(v381 - 16) = v384;
          operator delete(v384);
        }
        v381 = v383;
      }
      while (v383 != v380);
      v382 = (void *)a1[137];
    }
    a1[138] = v380;
    operator delete(v382);
  }
  a1[126] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 131));
  v386 = (void *)a1[128];
  if (v386)
  {
    a1[129] = v386;
    operator delete(v386);
  }
  a1[112] = off_24C9FCCA8;
  v387 = a1[123];
  if (v387)
  {
    v388 = a1[124];
    v389 = (void *)a1[123];
    if (v388 != v387)
    {
      v390 = a1[124];
      do
      {
        v392 = *(void **)(v390 - 24);
        v390 -= 24;
        v391 = v392;
        if (v392)
        {
          *(_QWORD *)(v388 - 16) = v391;
          operator delete(v391);
        }
        v388 = v390;
      }
      while (v390 != v387);
      v389 = (void *)a1[123];
    }
    a1[124] = v387;
    operator delete(v389);
  }
  a1[112] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 117));
  v393 = (void *)a1[114];
  if (v393)
  {
    a1[115] = v393;
    operator delete(v393);
  }
  a1[98] = off_24C9FCCA8;
  v394 = a1[109];
  if (v394)
  {
    v395 = a1[110];
    v396 = (void *)a1[109];
    if (v395 != v394)
    {
      v397 = a1[110];
      do
      {
        v399 = *(void **)(v397 - 24);
        v397 -= 24;
        v398 = v399;
        if (v399)
        {
          *(_QWORD *)(v395 - 16) = v398;
          operator delete(v398);
        }
        v395 = v397;
      }
      while (v397 != v394);
      v396 = (void *)a1[109];
    }
    a1[110] = v394;
    operator delete(v396);
  }
  a1[98] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 103));
  v400 = (void *)a1[100];
  if (v400)
  {
    a1[101] = v400;
    operator delete(v400);
  }
  a1[84] = off_24C9FCCA8;
  v401 = a1[95];
  if (v401)
  {
    v402 = a1[96];
    v403 = (void *)a1[95];
    if (v402 != v401)
    {
      v404 = a1[96];
      do
      {
        v406 = *(void **)(v404 - 24);
        v404 -= 24;
        v405 = v406;
        if (v406)
        {
          *(_QWORD *)(v402 - 16) = v405;
          operator delete(v405);
        }
        v402 = v404;
      }
      while (v404 != v401);
      v403 = (void *)a1[95];
    }
    a1[96] = v401;
    operator delete(v403);
  }
  a1[84] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 89));
  v407 = (void *)a1[86];
  if (v407)
  {
    a1[87] = v407;
    operator delete(v407);
  }
  a1[70] = off_24C9FCCA8;
  v408 = a1[81];
  if (v408)
  {
    v409 = a1[82];
    v410 = (void *)a1[81];
    if (v409 != v408)
    {
      v411 = a1[82];
      do
      {
        v413 = *(void **)(v411 - 24);
        v411 -= 24;
        v412 = v413;
        if (v413)
        {
          *(_QWORD *)(v409 - 16) = v412;
          operator delete(v412);
        }
        v409 = v411;
      }
      while (v411 != v408);
      v410 = (void *)a1[81];
    }
    a1[82] = v408;
    operator delete(v410);
  }
  a1[70] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 75));
  v414 = (void *)a1[72];
  if (v414)
  {
    a1[73] = v414;
    operator delete(v414);
  }
  a1[56] = off_24C9FCCA8;
  v415 = a1[67];
  if (v415)
  {
    v416 = a1[68];
    v417 = (void *)a1[67];
    if (v416 != v415)
    {
      v418 = a1[68];
      do
      {
        v420 = *(void **)(v418 - 24);
        v418 -= 24;
        v419 = v420;
        if (v420)
        {
          *(_QWORD *)(v416 - 16) = v419;
          operator delete(v419);
        }
        v416 = v418;
      }
      while (v418 != v415);
      v417 = (void *)a1[67];
    }
    a1[68] = v415;
    operator delete(v417);
  }
  a1[56] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 61));
  v421 = (void *)a1[58];
  if (v421)
  {
    a1[59] = v421;
    operator delete(v421);
  }
  a1[42] = off_24C9FCCA8;
  v422 = a1[53];
  if (v422)
  {
    v423 = a1[54];
    v424 = (void *)a1[53];
    if (v423 != v422)
    {
      v425 = a1[54];
      do
      {
        v427 = *(void **)(v425 - 24);
        v425 -= 24;
        v426 = v427;
        if (v427)
        {
          *(_QWORD *)(v423 - 16) = v426;
          operator delete(v426);
        }
        v423 = v425;
      }
      while (v425 != v422);
      v424 = (void *)a1[53];
    }
    a1[54] = v422;
    operator delete(v424);
  }
  a1[42] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 47));
  v428 = (void *)a1[44];
  if (v428)
  {
    a1[45] = v428;
    operator delete(v428);
  }
  a1[28] = off_24C9FCCA8;
  v429 = a1[39];
  if (v429)
  {
    v430 = a1[40];
    v431 = (void *)a1[39];
    if (v430 != v429)
    {
      v432 = a1[40];
      do
      {
        v434 = *(void **)(v432 - 24);
        v432 -= 24;
        v433 = v434;
        if (v434)
        {
          *(_QWORD *)(v430 - 16) = v433;
          operator delete(v433);
        }
        v430 = v432;
      }
      while (v432 != v429);
      v431 = (void *)a1[39];
    }
    a1[40] = v429;
    operator delete(v431);
  }
  a1[28] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 33));
  v435 = (void *)a1[30];
  if (v435)
  {
    a1[31] = v435;
    operator delete(v435);
  }
  a1[14] = off_24C9FCCA8;
  v436 = a1[25];
  if (v436)
  {
    v437 = a1[26];
    v438 = (void *)a1[25];
    if (v437 != v436)
    {
      v439 = a1[26];
      do
      {
        v441 = *(void **)(v439 - 24);
        v439 -= 24;
        v440 = v441;
        if (v441)
        {
          *(_QWORD *)(v437 - 16) = v440;
          operator delete(v440);
        }
        v437 = v439;
      }
      while (v439 != v436);
      v438 = (void *)a1[25];
    }
    a1[26] = v436;
    operator delete(v438);
  }
  a1[14] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 19));
  v442 = (void *)a1[16];
  if (v442)
  {
    a1[17] = v442;
    operator delete(v442);
  }
  *a1 = off_24C9FCCA8;
  v443 = a1[11];
  if (v443)
  {
    v444 = a1[12];
    v445 = (void *)a1[11];
    if (v444 != v443)
    {
      v446 = a1[12];
      do
      {
        v448 = *(void **)(v446 - 24);
        v446 -= 24;
        v447 = v448;
        if (v448)
        {
          *(_QWORD *)(v444 - 16) = v447;
          operator delete(v447);
        }
        v444 = v446;
      }
      while (v446 != v443);
      v445 = (void *)a1[11];
    }
    a1[12] = v443;
    operator delete(v445);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v449 = (void *)a1[2];
  if (v449)
  {
    a1[3] = v449;
    operator delete(v449);
  }
  return a1;
}

void sub_20F74F47C(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  char *v4;
  void **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int32x4_t v101;
  int32x4_t v102;
  uint32x4_t v103;
  uint32x4_t v104;

  v2 = *a1;
  v3 = (void **)(a1 + 1);
  v4 = (char *)a1[1];
  v5 = (void **)(a1 + 13);
  v6 = (char *)a1[13];
  a1[4] = 0;
  a1[2] = v4;
  a1[14] = v6;
  if (*(_BYTE *)(v2 + 976))
  {
    LODWORD(v7) = ((*(_QWORD *)(v2 + 112) - *(_QWORD *)(v2 + 104)) >> 4)
                + ((*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 4)
                + ((*(_QWORD *)(v2 + 208) - *(_QWORD *)(v2 + 200)) >> 4)
                + ((*(_QWORD *)(v2 + 304) - *(_QWORD *)(v2 + 296)) >> 4)
                + ((*(_QWORD *)(v2 + 400) - *(_QWORD *)(v2 + 392)) >> 4)
                + ((*(_QWORD *)(v2 + 496) - *(_QWORD *)(v2 + 488)) >> 4)
                + ((*(_QWORD *)(v2 + 592) - *(_QWORD *)(v2 + 584)) >> 4)
                + ((*(_QWORD *)(v2 + 688) - *(_QWORD *)(v2 + 680)) >> 4);
    goto LABEL_12;
  }
  v103 = 0u;
  v104 = 0u;
  if (!sub_20F5B8114((_QWORD *)v2, v103.i32, &v101, 1))
  {
    LODWORD(v7) = vaddvq_s32(vaddq_s32(v101, v102));
LABEL_12:
    v11 = v4;
    v7 = v7;
    if (v7 <= (unint64_t)((uint64_t)(a1[3] - (_QWORD)v4) >> 2))
      goto LABEL_39;
LABEL_13:
    v12 = (_BYTE *)a1[2];
    v13 = (char *)operator new(4 * v7);
    v14 = v12 - v11;
    v4 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    v15 = v4;
    if (v12 == v11)
      goto LABEL_37;
    if ((unint64_t)(v14 - 4) >= 0x2C)
    {
      v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v12 - &v13[v14 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v30 = v14 >> 2;
        v31 = ((unint64_t)(v14 - 4) >> 2) + 1;
        v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        v33 = &v12[-v32];
        v15 = &v4[-v32];
        v34 = &v13[4 * v30 - 16];
        v35 = (__int128 *)(v12 - 16);
        v36 = v31 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 8;
        }
        while (v36);
        v12 = v33;
        if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          a1[1] = v15;
          a1[2] = v4;
          a1[3] = &v13[4 * v7];
          if (v11)
          {
            operator delete(v11);
            v4 = (char *)a1[2];
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v38 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v15 - 1) = v38;
      v15 -= 4;
    }
    while (v12 != v11);
    goto LABEL_37;
  }
  *(_QWORD *)(v2 + 1568) = *(_QWORD *)(v2 + 1560);
  *(_QWORD *)(v2 + 1592) = *(_QWORD *)(v2 + 1584);
  *(_QWORD *)(v2 + 1616) = *(_QWORD *)(v2 + 1608);
  *(_QWORD *)(v2 + 1640) = *(_QWORD *)(v2 + 1632);
  *(_QWORD *)(v2 + 1664) = *(_QWORD *)(v2 + 1656);
  *(_QWORD *)(v2 + 1688) = *(_QWORD *)(v2 + 1680);
  *(_QWORD *)(v2 + 1712) = *(_QWORD *)(v2 + 1704);
  *(_QWORD *)(v2 + 1736) = *(_QWORD *)(v2 + 1728);
  v8 = *(_QWORD *)(v2 + 776);
  v9 = *(_QWORD *)(v2 + 784);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 208);
    if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v2 + 1560, v10);
      sub_20F3D35E0((_QWORD *)(v2 + 1560), *(_QWORD *)(v8 + 216));
    }
    v8 += 504;
  }
  v16 = *(_QWORD *)(v2 + 800);
  v17 = *(_QWORD *)(v2 + 808);
  while (v16 != v17)
  {
    v18 = *(_QWORD *)(v16 + 136);
    if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
      sub_20F394A20(v2 + 1560, v18);
    v16 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v2 + 824), *(_QWORD *)(v2 + 832), (_QWORD *)(v2 + 1560));
  sub_20F5B85BC(*(_QWORD *)(v2 + 848), *(_QWORD *)(v2 + 856), (_QWORD *)(v2 + 1560));
  sub_20F5B8444(*(_QWORD *)(v2 + 872), *(_QWORD *)(v2 + 880), (_QWORD *)(v2 + 1560));
  v19 = *(_QWORD *)(v2 + 896);
  v20 = *(_QWORD *)(v2 + 904);
  while (v19 != v20)
  {
    v21 = *(_QWORD *)(v19 + 736);
    if (*(_BYTE *)(v19 + 880) || (*(_BYTE *)(v21 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v19 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v2 + 1560, v21);
      sub_20F394A20(v2 + 1560, *(_QWORD *)(v19 + 744));
    }
    v19 += 888;
  }
  v22.i64[0] = *(_QWORD *)(v2 + 1664);
  v22.i64[1] = *(_QWORD *)(v2 + 1688);
  v23.i64[0] = *(_QWORD *)(v2 + 1712);
  v23.i64[1] = *(_QWORD *)(v2 + 1736);
  v24.i64[0] = *(_QWORD *)(v2 + 1568);
  v24.i64[1] = *(_QWORD *)(v2 + 1592);
  v25.i64[0] = *(_QWORD *)(v2 + 1616);
  v25.i64[1] = *(_QWORD *)(v2 + 1640);
  v26.i64[0] = *(_QWORD *)(v2 + 1656);
  v26.i64[1] = *(_QWORD *)(v2 + 1680);
  v27.i64[0] = *(_QWORD *)(v2 + 1704);
  v27.i64[1] = *(_QWORD *)(v2 + 1728);
  v28.i64[0] = *(_QWORD *)(v2 + 1560);
  v28.i64[1] = *(_QWORD *)(v2 + 1584);
  v29.i64[0] = *(_QWORD *)(v2 + 1608);
  v29.i64[1] = *(_QWORD *)(v2 + 1632);
  LODWORD(v7) = vaddvq_s32(vaddq_s32((int32x4_t)vqsubq_u32((uint32x4_t)v101, vmaxq_u32(v103, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vsubq_s64(v24, v28), 2uLL), vsubq_s64(v25, v29), 2uLL))), (int32x4_t)vqsubq_u32((uint32x4_t)v102, vmaxq_u32(v104, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vsubq_s64(v22, v26), 2uLL), vsubq_s64(v23, v27), 2uLL)))));
  sub_20F59A618((_QWORD *)v2);
  v11 = *v3;
  v7 = v7;
  if (v7 > (unint64_t)((uint64_t)(a1[3] - (_QWORD)*v3) >> 2))
    goto LABEL_13;
LABEL_39:
  v39 = (_BYTE *)a1[13];
  if (v7 <= (uint64_t)(a1[15] - (_QWORD)v39) >> 3)
    goto LABEL_50;
  v40 = (_BYTE *)a1[14];
  v41 = (char *)operator new(8 * v7);
  v42 = v40 - v39;
  v6 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
  v43 = v6;
  if (v40 != v39)
  {
    if ((unint64_t)(v42 - 8) < 0x58)
    {
      v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_47:
        v52 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v43 - 1) = v52;
        v43 -= 8;
      }
      while (v40 != v39);
      goto LABEL_48;
    }
    v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
    if (v40 - v41 - (v42 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_47;
    v44 = v42 >> 3;
    v45 = ((unint64_t)(v42 - 8) >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v40[-v46];
    v43 = &v6[-v46];
    v48 = &v41[8 * v44 - 16];
    v49 = (__int128 *)(v40 - 16);
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *v49;
      *((_OWORD *)v48 - 1) = *(v49 - 1);
      *(_OWORD *)v48 = v51;
      v48 -= 32;
      v49 -= 2;
      v50 -= 4;
    }
    while (v50);
    v40 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_47;
  }
LABEL_48:
  a1[13] = v43;
  a1[14] = v6;
  a1[15] = &v41[8 * v7];
  if (v39)
  {
    operator delete(v39);
    v6 = (char *)a1[14];
  }
LABEL_50:
  v103.i64[0] = 0;
  v53 = *(_QWORD *)(v2 + 8);
  v54 = *(_QWORD *)(v2 + 16);
  if (v53 == v54)
  {
    a1[5] = 0;
    v103.i64[0] = 0;
    v58 = *(_QWORD *)(v2 + 104);
    v59 = *(_QWORD *)(v2 + 112);
    if (v58 != v59)
      goto LABEL_59;
LABEL_116:
    a1[6] = 0;
    v103.i64[0] = 0;
    v63 = *(_QWORD *)(v2 + 200);
    v64 = *(_QWORD *)(v2 + 208);
    if (v63 != v64)
      goto LABEL_67;
LABEL_117:
    a1[7] = 0;
    v103.i64[0] = 0;
    v68 = *(_QWORD *)(v2 + 296);
    v69 = *(_QWORD *)(v2 + 304);
    if (v68 != v69)
      goto LABEL_75;
LABEL_118:
    a1[8] = 0;
    v103.i64[0] = 0;
    v73 = *(_QWORD *)(v2 + 392);
    v74 = *(_QWORD *)(v2 + 400);
    if (v73 != v74)
      goto LABEL_83;
LABEL_119:
    a1[9] = 0;
    v103.i64[0] = 0;
    v78 = *(_QWORD *)(v2 + 488);
    v79 = *(_QWORD *)(v2 + 496);
    if (v78 != v79)
      goto LABEL_91;
LABEL_120:
    a1[10] = 0;
    v103.i64[0] = 0;
    v83 = *(_QWORD *)(v2 + 584);
    v84 = *(_QWORD *)(v2 + 592);
    if (v83 != v84)
      goto LABEL_99;
    goto LABEL_121;
  }
  v55 = 0;
  v56 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v53 + 8) + 20))
    {
      ++v56;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v55 = v103.i64[0];
    }
    v103.i64[0] = ++v55;
    v53 += 16;
  }
  while (v53 != v54);
  if (v56)
  {
    v57 = v56;
    do
    {
      v101.i32[0] = 0;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v57;
    }
    while (v57);
  }
  a1[5] = v56;
  v103.i64[0] = 0;
  v58 = *(_QWORD *)(v2 + 104);
  v59 = *(_QWORD *)(v2 + 112);
  if (v58 == v59)
    goto LABEL_116;
LABEL_59:
  v60 = 0;
  v61 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v58 + 8) + 20))
    {
      ++v61;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v60 = v103.i64[0];
    }
    v103.i64[0] = ++v60;
    v58 += 16;
  }
  while (v58 != v59);
  if (v61)
  {
    v62 = v61;
    do
    {
      v101.i32[0] = 1;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v62;
    }
    while (v62);
  }
  a1[6] = v61;
  v103.i64[0] = 0;
  v63 = *(_QWORD *)(v2 + 200);
  v64 = *(_QWORD *)(v2 + 208);
  if (v63 == v64)
    goto LABEL_117;
LABEL_67:
  v65 = 0;
  v66 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v63 + 8) + 20))
    {
      ++v66;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v65 = v103.i64[0];
    }
    v103.i64[0] = ++v65;
    v63 += 16;
  }
  while (v63 != v64);
  if (v66)
  {
    v67 = v66;
    do
    {
      v101.i32[0] = 2;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v67;
    }
    while (v67);
  }
  a1[7] = v66;
  v103.i64[0] = 0;
  v68 = *(_QWORD *)(v2 + 296);
  v69 = *(_QWORD *)(v2 + 304);
  if (v68 == v69)
    goto LABEL_118;
LABEL_75:
  v70 = 0;
  v71 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v68 + 8) + 20))
    {
      ++v71;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v70 = v103.i64[0];
    }
    v103.i64[0] = ++v70;
    v68 += 16;
  }
  while (v68 != v69);
  if (v71)
  {
    v72 = v71;
    do
    {
      v101.i32[0] = 3;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v72;
    }
    while (v72);
  }
  a1[8] = v71;
  v103.i64[0] = 0;
  v73 = *(_QWORD *)(v2 + 392);
  v74 = *(_QWORD *)(v2 + 400);
  if (v73 == v74)
    goto LABEL_119;
LABEL_83:
  v75 = 0;
  v76 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v73 + 8) + 20))
    {
      ++v76;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v75 = v103.i64[0];
    }
    v103.i64[0] = ++v75;
    v73 += 16;
  }
  while (v73 != v74);
  if (v76)
  {
    v77 = v76;
    do
    {
      v101.i32[0] = 4;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v77;
    }
    while (v77);
  }
  a1[9] = v76;
  v103.i64[0] = 0;
  v78 = *(_QWORD *)(v2 + 488);
  v79 = *(_QWORD *)(v2 + 496);
  if (v78 == v79)
    goto LABEL_120;
LABEL_91:
  v80 = 0;
  v81 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v78 + 8) + 20))
    {
      ++v81;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v80 = v103.i64[0];
    }
    v103.i64[0] = ++v80;
    v78 += 16;
  }
  while (v78 != v79);
  if (v81)
  {
    v82 = v81;
    do
    {
      v101.i32[0] = 5;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v82;
    }
    while (v82);
  }
  a1[10] = v81;
  v103.i64[0] = 0;
  v83 = *(_QWORD *)(v2 + 584);
  v84 = *(_QWORD *)(v2 + 592);
  if (v83 != v84)
  {
LABEL_99:
    v85 = 0;
    v86 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v83 + 8) + 20))
      {
        ++v86;
        v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
        v85 = v103.i64[0];
      }
      v103.i64[0] = ++v85;
      v83 += 16;
    }
    while (v83 != v84);
    if (v86)
    {
      v87 = v86;
      do
      {
        v101.i32[0] = 6;
        v4 = sub_20F74FF30(v3, v4, &v101) + 4;
        --v87;
      }
      while (v87);
    }
    a1[11] = v86;
    v103.i64[0] = 0;
    v88 = *(_QWORD *)(v2 + 680);
    v89 = *(_QWORD *)(v2 + 688);
    if (v88 != v89)
      goto LABEL_107;
LABEL_122:
    v91 = 0;
    goto LABEL_123;
  }
LABEL_121:
  a1[11] = 0;
  v103.i64[0] = 0;
  v88 = *(_QWORD *)(v2 + 680);
  v89 = *(_QWORD *)(v2 + 688);
  if (v88 == v89)
    goto LABEL_122;
LABEL_107:
  v90 = 0;
  v91 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v88 + 8) + 20))
    {
      ++v91;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v90 = v103.i64[0];
    }
    v103.i64[0] = ++v90;
    v88 += 16;
  }
  while (v88 != v89);
  if (v91)
  {
    v92 = v91;
    do
    {
      v101.i32[0] = 7;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v92;
    }
    while (v92);
  }
LABEL_123:
  v93 = a1[6] + a1[5];
  v94 = a1[8];
  v95 = a1[7] + v93;
  a1[6] = v93;
  a1[7] = v95;
  v96 = v94 + v95;
  v97 = a1[10];
  v98 = a1[9] + v96;
  a1[8] = v96;
  a1[9] = v98;
  v99 = v97 + v98;
  v100 = a1[11] + v97 + v98;
  a1[10] = v99;
  a1[11] = v100;
  a1[12] = v91 + v100;
}

void sub_20F74FEE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F74FEF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F74FF08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F74FF1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

char *sub_20F74FF30(void **a1, _BYTE *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = v14 + v6 + 4;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x2C)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v6] >= 0x20)
        {
          v45 = (v16 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v46);
          v17 = (_DWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    *(_DWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v18 >> 62)
    sub_20E867F44();
  v20 = v10 - v6;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      sub_20E877A38();
    v22 = (char *)operator new(4 * v21);
    v23 = &v22[4 * v8];
    v24 = &v22[4 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(4 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 1;
    if (v44 >> 62)
      sub_20E877A38();
    v23 = (char *)operator new(4 * v44);
    v24 = &v23[4 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[4 * v44];
      v26 = (char *)*a1;
      *(_DWORD *)v23 = *a3;
      v27 = v23 + 4;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 4 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_DWORD *)v23 = *a3;
  v27 = v23 + 4;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v30 = v29 - v26 - 4;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x2C)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 4 * v8 - 16);
    v36 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 8;
    }
    while (v36);
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v38 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v28 - 1) = v38;
        v28 -= 4;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_20F750288(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F7502A0(int64x2_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  uint64_t v62;
  uint64_t v63;
  uint64_t ii;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  _DWORD *v94;
  unsigned int v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  unsigned int *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int v115;
  __n128 *v116;
  char *v117;
  __n128 *v118;
  uint64_t v119;
  const std::nothrow_t *v120;
  char *v121;
  BOOL v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  _DWORD *v152;
  unsigned int v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  unsigned int *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unsigned int v173;
  __n128 *v174;
  char *v175;
  __n128 *v176;
  uint64_t v177;
  const std::nothrow_t *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int *v208;
  _DWORD *v209;
  unsigned int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unsigned int *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unsigned int v230;
  __n128 *v231;
  char *v232;
  __n128 *v233;
  uint64_t v234;
  const std::nothrow_t *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  _DWORD *v266;
  unsigned int v267;
  char *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unsigned int *v277;
  int64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  __n128 *v288;
  char *v289;
  __n128 *v290;
  uint64_t v291;
  const std::nothrow_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unint64_t v299;
  _BYTE *v300;
  uint64_t v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int *v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  _DWORD *v323;
  unsigned int v324;
  char *v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  unsigned int *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _OWORD *v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  unsigned int v344;
  __n128 *v345;
  char *v346;
  __n128 *v347;
  uint64_t v348;
  const std::nothrow_t *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  unint64_t v356;
  _BYTE *v357;
  uint64_t v358;
  _BYTE *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  _DWORD *v380;
  unsigned int v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unsigned int *v391;
  int64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _OWORD *v397;
  char *v398;
  uint64_t v399;
  __int128 v400;
  unsigned int v401;
  __n128 *v402;
  char *v403;
  __n128 *v404;
  uint64_t v405;
  const std::nothrow_t *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int *v412;
  unint64_t v413;
  _BYTE *v414;
  uint64_t v415;
  _BYTE *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  uint64_t v432;
  unsigned int *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  _DWORD *v437;
  unsigned int v438;
  char *v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  char *v455;
  uint64_t v456;
  __int128 v457;
  unsigned int v458;
  __n128 *v459;
  char *v460;
  __n128 *v461;
  uint64_t v462;
  const std::nothrow_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int *v469;
  unint64_t v470;
  _BYTE *v471;
  uint64_t v472;
  _BYTE *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  unsigned int *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int *v493;
  _DWORD *v494;
  unsigned int v495;
  char *v496;
  unint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  _BYTE *v504;
  unsigned int *v505;
  int64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  _OWORD *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  unsigned int v515;
  __n128 *v516;
  char *v517;
  __n128 *v518;
  uint64_t v519;
  const std::nothrow_t *v520;
  char *v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int64x2_t v526;
  _QWORD *v527;
  _QWORD *v528;
  __int128 *v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  std::__shared_weak_count *v539;
  unint64_t *p_shared_owners;
  unint64_t v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t jj;
  uint64_t v562;
  _QWORD *v563;
  uint64_t v564;
  _QWORD *v565;
  BOOL v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  int64x2_t v573;
  _QWORD *v574;
  _QWORD *v575;
  __int128 v576;
  __int128 v577;
  uint64_t v578;
  __int128 v579;
  __int128 v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  uint64_t v588;
  __int128 v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t kk;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _BYTE *v615;
  uint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int64x2_t v623;
  _QWORD *v624;
  __int128 v625;
  _QWORD *v626;
  __int128 v627;
  uint64_t v628;
  __int128 v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t mm;
  uint64_t v636;
  _QWORD *v637;
  _QWORD *v638;
  _QWORD *v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  uint64_t v655;
  __int128 v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  uint64_t v792;
  int v793;
  uint64_t v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  int v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unsigned int *v840;
  unsigned int *v841;
  unsigned int *v842;
  unsigned int *v843;
  unsigned int *v844;
  unsigned int *v845;
  unsigned int *v846;
  unsigned int *v847;
  void **v848;
  void **v849;
  void **v850;
  void **v851;
  void **v852;
  void **v853;
  void **v854;
  void **v855;
  char v856;

  if (!a1[61].i8[2])
  {
    if (!a1[61].i8[1])
    {
      v2 = a1[73].i64[1];
      v3 = a1[74].i64[0];
      a1[61].i8[1] = v2 != v3;
      if (v2 == v3)
      {
        v4 = a1[75].i64[0];
        v5 = a1[75].i64[1];
        a1[61].i8[1] = v4 != v5;
        if (v4 == v5)
        {
          v6 = a1[76].i64[1];
          v7 = a1[77].i64[0];
          a1[61].i8[1] = v6 != v7;
          if (v6 == v7)
          {
            v8 = a1[78].i64[0];
            v9 = a1[78].i64[1];
            a1[61].i8[1] = v8 != v9;
            if (v8 == v9)
            {
              v10 = a1[79].i64[1];
              v11 = a1[80].i64[0];
              a1[61].i8[1] = v10 != v11;
              if (v10 == v11)
              {
                v12 = a1[81].i64[0];
                v13 = a1[81].i64[1];
                a1[61].i8[1] = v12 != v13;
                if (v12 == v13)
                {
                  v14 = a1[82].i64[1];
                  v15 = a1[83].i64[0];
                  a1[61].i8[1] = v14 != v15;
                  if (v14 == v15)
                    a1[61].i8[1] = a1[84].i64[0] != a1[84].i64[1];
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!a1[61].i8[1])
    {
LABEL_576:
      a1[61].i8[2] = 1;
      goto LABEL_577;
    }
    v16 = (void *)a1[97].i64[1];
    a1[98].i64[0] = (uint64_t)v16;
    v17 = a1[1].i64[0] - a1->i64[1];
    v18 = v17 >> 4;
    if (v17 >> 4 > (unint64_t)((a1[98].i64[1] - (uint64_t)v16) >> 2))
    {
      if (v17 < 0)
        sub_20E867F44();
      v19 = operator new((unint64_t)v17 >> 2);
      a1[97].i64[1] = (uint64_t)v19;
      a1[98].i64[0] = (uint64_t)v19;
      a1[98].i64[1] = (uint64_t)v19 + 4 * v18;
      if (v16)
        operator delete(v16);
    }
    v20 = (void *)a1[99].i64[0];
    a1[99].i64[1] = (uint64_t)v20;
    v21 = a1[7].i64[0] - a1[6].i64[1];
    v22 = v21 >> 4;
    if (v21 >> 4 > (unint64_t)((a1[100].i64[0] - (uint64_t)v20) >> 2))
    {
      if (v21 < 0)
        sub_20E867F44();
      v23 = operator new((unint64_t)v21 >> 2);
      a1[99].i64[0] = (uint64_t)v23;
      a1[99].i64[1] = (uint64_t)v23;
      a1[100].i64[0] = (uint64_t)v23 + 4 * v22;
      if (v20)
        operator delete(v20);
    }
    v24 = (void *)a1[100].i64[1];
    a1[101].i64[0] = (uint64_t)v24;
    v25 = a1[13].i64[0] - a1[12].i64[1];
    v26 = v25 >> 4;
    if (v25 >> 4 > (unint64_t)((a1[101].i64[1] - (uint64_t)v24) >> 2))
    {
      if (v25 < 0)
        sub_20E867F44();
      v27 = operator new((unint64_t)v25 >> 2);
      a1[100].i64[1] = (uint64_t)v27;
      a1[101].i64[0] = (uint64_t)v27;
      a1[101].i64[1] = (uint64_t)v27 + 4 * v26;
      if (v24)
        operator delete(v24);
    }
    v28 = (void *)a1[102].i64[0];
    a1[102].i64[1] = (uint64_t)v28;
    v29 = a1[19].i64[0] - a1[18].i64[1];
    v30 = v29 >> 4;
    if (v29 >> 4 > (unint64_t)((a1[103].i64[0] - (uint64_t)v28) >> 2))
    {
      if (v29 < 0)
        sub_20E867F44();
      v31 = operator new((unint64_t)v29 >> 2);
      a1[102].i64[0] = (uint64_t)v31;
      a1[102].i64[1] = (uint64_t)v31;
      a1[103].i64[0] = (uint64_t)v31 + 4 * v30;
      if (v28)
        operator delete(v28);
    }
    v32 = (void *)a1[103].i64[1];
    a1[104].i64[0] = (uint64_t)v32;
    v33 = a1[25].i64[0] - a1[24].i64[1];
    v34 = v33 >> 4;
    if (v33 >> 4 > (unint64_t)((a1[104].i64[1] - (uint64_t)v32) >> 2))
    {
      if (v33 < 0)
        sub_20E867F44();
      v35 = operator new((unint64_t)v33 >> 2);
      a1[103].i64[1] = (uint64_t)v35;
      a1[104].i64[0] = (uint64_t)v35;
      a1[104].i64[1] = (uint64_t)v35 + 4 * v34;
      if (v32)
        operator delete(v32);
    }
    v36 = (void *)a1[105].i64[0];
    a1[105].i64[1] = (uint64_t)v36;
    v37 = a1[31].i64[0] - a1[30].i64[1];
    v38 = v37 >> 4;
    if (v37 >> 4 > (unint64_t)((a1[106].i64[0] - (uint64_t)v36) >> 2))
    {
      if (v37 < 0)
        sub_20E867F44();
      v39 = operator new((unint64_t)v37 >> 2);
      a1[105].i64[0] = (uint64_t)v39;
      a1[105].i64[1] = (uint64_t)v39;
      a1[106].i64[0] = (uint64_t)v39 + 4 * v38;
      if (v36)
        operator delete(v36);
    }
    v40 = (void *)a1[106].i64[1];
    a1[107].i64[0] = (uint64_t)v40;
    v41 = a1[37].i64[0] - a1[36].i64[1];
    v42 = v41 >> 4;
    if (v41 >> 4 > (unint64_t)((a1[107].i64[1] - (uint64_t)v40) >> 2))
    {
      if (v41 < 0)
        sub_20E867F44();
      v43 = operator new((unint64_t)v41 >> 2);
      a1[106].i64[1] = (uint64_t)v43;
      a1[107].i64[0] = (uint64_t)v43;
      a1[107].i64[1] = (uint64_t)v43 + 4 * v42;
      if (v40)
        operator delete(v40);
    }
    v44 = (void *)a1[108].i64[0];
    a1[108].i64[1] = (uint64_t)v44;
    v45 = a1[43].i64[0] - a1[42].i64[1];
    v46 = v45 >> 4;
    if (v45 >> 4 > (unint64_t)((a1[109].i64[0] - (uint64_t)v44) >> 2))
    {
      if (v45 < 0)
        sub_20E867F44();
      v47 = operator new((unint64_t)v45 >> 2);
      a1[108].i64[0] = (uint64_t)v47;
      a1[108].i64[1] = (uint64_t)v47;
      a1[109].i64[0] = (uint64_t)v47 + 4 * v46;
      if (v44)
        operator delete(v44);
    }
    v48 = a1[48].i64[1];
    for (i = a1[49].i64[0]; v48 != i; v48 += 504)
    {
      v50 = *(_QWORD *)(v48 + 208);
      if (*(_BYTE *)(v48 + 496)
        || (*(_BYTE *)(v50 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v48 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v48 + 496) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v50);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v48 + 216));
      }
    }
    v51 = a1[50].i64[0];
    for (j = a1[50].i64[1]; v51 != j; v51 += 280)
    {
      v53 = *(_QWORD *)(v51 + 136);
      if (*(_BYTE *)(v51 + 272) || (*(_BYTE *)(v53 + 4) & 6) != 0)
      {
        *(_BYTE *)(v51 + 272) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v53);
      }
    }
    v54 = a1[51].i64[1];
    for (k = a1[52].i64[0]; v54 != k; v54 += 8016)
    {
      v56 = *(_QWORD *)(v54 + 7696);
      if (*(_BYTE *)(v54 + 8008)
        || (*(_BYTE *)(v56 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7728) + 4) & 6) != 0)
      {
        *(_BYTE *)(v54 + 8008) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v56);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v54 + 7704));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v54 + 7712));
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v54 + 7720));
        sub_20F599C88(&a1[97].i64[1], *(_QWORD *)(v54 + 7728));
      }
    }
    v57 = a1[53].i64[0];
    for (m = a1[53].i64[1]; v57 != m; v57 += 5336)
    {
      v59 = *(_QWORD *)(v57 + 5024);
      if (*(_BYTE *)(v57 + 5328)
        || (*(_BYTE *)(v59 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v57 + 5328) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v59);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v57 + 5032));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v57 + 5040));
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v57 + 5048));
      }
    }
    v60 = a1[54].i64[1];
    for (n = a1[55].i64[0]; v60 != n; v60 += 216)
    {
      v62 = *(_QWORD *)(v60 + 56);
      if (*(_BYTE *)(v60 + 208)
        || (*(_BYTE *)(v62 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v60 + 208) = 1;
        sub_20F59A480(&a1[97].i64[1], v62);
        sub_20F59A480(&a1[97].i64[1], *(_QWORD *)(v60 + 64));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v60 + 72));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v60 + 80));
        sub_20F59A2E8(&a1[97].i64[1], *(_QWORD *)(v60 + 88));
        sub_20F59A2E8(&a1[97].i64[1], *(_QWORD *)(v60 + 96));
        sub_20F59A150(&a1[97].i64[1], *(_QWORD *)(v60 + 104));
        sub_20F59A150(&a1[97].i64[1], *(_QWORD *)(v60 + 112));
        sub_20F599FB8(&a1[97].i64[1], *(_QWORD *)(v60 + 120));
        sub_20F599FB8(&a1[97].i64[1], *(_QWORD *)(v60 + 128));
        sub_20F599E20(&a1[97].i64[1], *(_QWORD *)(v60 + 136));
      }
    }
    v63 = a1[56].i64[0];
    for (ii = a1[56].i64[1]; v63 != ii; v63 += 888)
    {
      v65 = *(_QWORD *)(v63 + 736);
      if (*(_BYTE *)(v63 + 880)
        || (*(_BYTE *)(v65 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v63 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v63 + 880) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v65);
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v63 + 744));
      }
    }
    v66 = a1[74].i64[0];
    v67 = a1[73].i64[1];
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v848 = (void **)&a1[73].i64[1];
    v68 = (unsigned int *)a1[98].i64[0];
    v69 = (unsigned int *)a1[97].i64[1];
    v70 = ((v66 - v67) >> 2) + v68 - v69;
    v71 = (_BYTE *)a1[73].i64[1];
    v816 = (v66 - v67) >> 2;
    v824 = v67;
    v832 = v66;
    if (v70 <= (a1[74].i64[1] - (uint64_t)v71) >> 2)
    {
LABEL_107:
      if (v69 != v68)
      {
        v840 = v68;
        while (1)
        {
          v88 = *v69;
          v90 = a1->i64[1];
          v89 = (unsigned int *)a1[1].i64[0];
          if (v89 != (unsigned int *)v90)
          {
            v91 = ((uint64_t)v89 - v90) >> 4;
            do
            {
              v92 = v91 >> 1;
              v93 = (unsigned int *)(v90 + 16 * (v91 >> 1));
              v95 = *v93;
              v94 = v93 + 4;
              v91 += ~(v91 >> 1);
              if (v95 < v88)
                v90 = (uint64_t)v94;
              else
                v91 = v92;
            }
            while (v91);
          }
          if ((unsigned int *)v90 == v89 || *(_DWORD *)v90 != v88)
          {
            v88 = *v89;
            v90 = a1[1].i64[0];
          }
          if ((*(_BYTE *)(*(_QWORD *)(v90 + 8) + 4) & 6) != 0)
            goto LABEL_111;
          v96 = (char *)a1[74].i64[0];
          v97 = a1[74].u64[1];
          if ((unint64_t)v96 >= v97)
            break;
          *(_DWORD *)v96 = v88;
          v87 = (uint64_t)(v96 + 4);
LABEL_110:
          a1[74].i64[0] = v87;
          *(_BYTE *)(*(_QWORD *)(v90 + 8) + 4) ^= 2u;
LABEL_111:
          if (++v69 == v68)
            goto LABEL_143;
        }
        v98 = (char *)*v848;
        v99 = v96 - (_BYTE *)*v848;
        v100 = v99 >> 2;
        v101 = (v99 >> 2) + 1;
        if (v101 >> 62)
          goto LABEL_910;
        v102 = v97 - (_QWORD)v98;
        if (v102 >> 1 > v101)
          v101 = v102 >> 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
          v103 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          if (v103 >> 62)
LABEL_911:
            sub_20E877A38();
          v104 = operator new(4 * v103);
          v105 = (unsigned int *)&v104[4 * v100];
          *v105 = v88;
          v87 = (uint64_t)(v105 + 1);
          v106 = v96 - v98;
          if (v96 == v98)
            goto LABEL_140;
        }
        else
        {
          v104 = 0;
          v105 = (unsigned int *)(4 * v100);
          *(_DWORD *)(4 * v100) = v88;
          v87 = 4 * v100 + 4;
          v106 = v96 - v98;
          if (v96 == v98)
          {
LABEL_140:
            a1[73].i64[1] = (uint64_t)v105;
            a1[74].i64[0] = v87;
            a1[74].i64[1] = (uint64_t)&v104[4 * v103];
            if (v98)
              operator delete(v98);
            v68 = v840;
            goto LABEL_110;
          }
        }
        v107 = v106 - 4;
        if (v107 < 0x2C)
          goto LABEL_922;
        if ((unint64_t)(v96 - v104 - v99) < 0x20)
          goto LABEL_922;
        v108 = (v107 >> 2) + 1;
        v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
        v110 = &v96[-v109];
        v105 = (unsigned int *)((char *)v105 - v109);
        v111 = &v104[4 * v100 - 16];
        v112 = v96 - 16;
        v113 = v108 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 8;
        }
        while (v113);
        v96 = v110;
        if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_922:
          do
          {
            v115 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *--v105 = v115;
          }
          while (v96 != v98);
        }
        goto LABEL_140;
      }
LABEL_143:
      if (v832 != v824)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v116 = (__n128 *)a1[73].i64[1];
        v117 = (char *)v116 + 4 * v816;
        v118 = (__n128 *)a1[74].i64[0];
        if (((char *)v118 - v117) >> 2 >= v816)
          v119 = v816;
        else
          v119 = ((char *)v118 - v117) >> 2;
        if (v119 < 1)
        {
LABEL_151:
          v123 = 0;
          v119 = 0;
        }
        else
        {
          v120 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v121 = (char *)operator new(4 * v119, v120);
            if (v121)
              break;
            v122 = (unint64_t)v119 > 1;
            v119 = (unint64_t)v119 >> 1;
            if (!v122)
              goto LABEL_151;
          }
          v123 = v121;
        }
        sub_20EDB30B0(v116, (__n128 *)((char *)v116 + 4 * v816), v118, (uint64_t)&v856, v816, ((char *)v118 - v117) >> 2, v123, v119);
        if (v123)
          operator delete(v123);
      }
      v124 = a1[75].i64[1];
      v125 = a1[75].i64[0];
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v849 = (void **)&a1[75];
      v126 = (unsigned int *)a1[99].i64[1];
      v127 = (unsigned int *)a1[99].i64[0];
      v128 = ((v124 - v125) >> 2) + v126 - v127;
      v129 = (_BYTE *)a1[75].i64[0];
      v817 = (v124 - v125) >> 2;
      v825 = v125;
      v833 = v124;
      if (v128 <= (a1[76].i64[0] - (uint64_t)v129) >> 2)
      {
LABEL_167:
        if (v127 != v126)
        {
          v841 = v126;
          while (1)
          {
            v146 = *v127;
            v148 = a1[6].i64[1];
            v147 = (unsigned int *)a1[7].i64[0];
            if (v147 != (unsigned int *)v148)
            {
              v149 = ((uint64_t)v147 - v148) >> 4;
              do
              {
                v150 = v149 >> 1;
                v151 = (unsigned int *)(v148 + 16 * (v149 >> 1));
                v153 = *v151;
                v152 = v151 + 4;
                v149 += ~(v149 >> 1);
                if (v153 < v146)
                  v148 = (uint64_t)v152;
                else
                  v149 = v150;
              }
              while (v149);
            }
            if ((unsigned int *)v148 == v147 || *(_DWORD *)v148 != v146)
            {
              v146 = *v147;
              v148 = a1[7].i64[0];
            }
            if ((*(_BYTE *)(*(_QWORD *)(v148 + 8) + 4) & 6) != 0)
              goto LABEL_171;
            v154 = (char *)a1[75].i64[1];
            v155 = a1[76].u64[0];
            if ((unint64_t)v154 >= v155)
              break;
            *(_DWORD *)v154 = v146;
            v145 = (uint64_t)(v154 + 4);
LABEL_170:
            a1[75].i64[1] = v145;
            *(_BYTE *)(*(_QWORD *)(v148 + 8) + 4) ^= 2u;
LABEL_171:
            if (++v127 == v126)
              goto LABEL_203;
          }
          v156 = (char *)*v849;
          v157 = v154 - (_BYTE *)*v849;
          v158 = v157 >> 2;
          v159 = (v157 >> 2) + 1;
          if (v159 >> 62)
            goto LABEL_910;
          v160 = v155 - (_QWORD)v156;
          if (v160 >> 1 > v159)
            v159 = v160 >> 1;
          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
            v161 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 >> 62)
              goto LABEL_911;
            v162 = operator new(4 * v161);
            v163 = (unsigned int *)&v162[4 * v158];
            *v163 = v146;
            v145 = (uint64_t)(v163 + 1);
            v164 = v154 - v156;
            if (v154 == v156)
              goto LABEL_200;
          }
          else
          {
            v162 = 0;
            v163 = (unsigned int *)(4 * v158);
            *(_DWORD *)(4 * v158) = v146;
            v145 = 4 * v158 + 4;
            v164 = v154 - v156;
            if (v154 == v156)
            {
LABEL_200:
              a1[75].i64[0] = (uint64_t)v163;
              a1[75].i64[1] = v145;
              a1[76].i64[0] = (uint64_t)&v162[4 * v161];
              if (v156)
                operator delete(v156);
              v126 = v841;
              goto LABEL_170;
            }
          }
          v165 = v164 - 4;
          if (v165 < 0x2C)
            goto LABEL_923;
          if ((unint64_t)(v154 - v162 - v157) < 0x20)
            goto LABEL_923;
          v166 = (v165 >> 2) + 1;
          v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
          v168 = &v154[-v167];
          v163 = (unsigned int *)((char *)v163 - v167);
          v169 = &v162[4 * v158 - 16];
          v170 = v154 - 16;
          v171 = v166 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v172 = *(_OWORD *)v170;
            *(v169 - 1) = *((_OWORD *)v170 - 1);
            *v169 = v172;
            v169 -= 2;
            v170 -= 32;
            v171 -= 8;
          }
          while (v171);
          v154 = v168;
          if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_923:
            do
            {
              v173 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *--v163 = v173;
            }
            while (v154 != v156);
          }
          goto LABEL_200;
        }
LABEL_203:
        if (v833 != v825)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v174 = (__n128 *)a1[75].i64[0];
          v175 = (char *)v174 + 4 * v817;
          v176 = (__n128 *)a1[75].i64[1];
          if (((char *)v176 - v175) >> 2 >= v817)
            v177 = v817;
          else
            v177 = ((char *)v176 - v175) >> 2;
          if (v177 < 1)
          {
LABEL_211:
            v180 = 0;
            v177 = 0;
          }
          else
          {
            v178 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v179 = (char *)operator new(4 * v177, v178);
              if (v179)
                break;
              v122 = (unint64_t)v177 > 1;
              v177 = (unint64_t)v177 >> 1;
              if (!v122)
                goto LABEL_211;
            }
            v180 = v179;
          }
          sub_20EDB30B0(v174, (__n128 *)((char *)v174 + 4 * v817), v176, (uint64_t)&v856, v817, ((char *)v176 - v175) >> 2, v180, v177);
          if (v180)
            operator delete(v180);
        }
        v181 = a1[77].i64[0];
        v182 = a1[76].i64[1];
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v850 = (void **)&a1[76].i64[1];
        v183 = (unsigned int *)a1[101].i64[0];
        v184 = (unsigned int *)a1[100].i64[1];
        v185 = ((v181 - v182) >> 2) + v183 - v184;
        v186 = (_BYTE *)a1[76].i64[1];
        v818 = (v181 - v182) >> 2;
        v826 = v182;
        v834 = v181;
        if (v185 <= (a1[77].i64[1] - (uint64_t)v186) >> 2)
        {
LABEL_227:
          if (v184 != v183)
          {
            v842 = v183;
            while (1)
            {
              v203 = *v184;
              v205 = a1[12].i64[1];
              v204 = (unsigned int *)a1[13].i64[0];
              if (v204 != (unsigned int *)v205)
              {
                v206 = ((uint64_t)v204 - v205) >> 4;
                do
                {
                  v207 = v206 >> 1;
                  v208 = (unsigned int *)(v205 + 16 * (v206 >> 1));
                  v210 = *v208;
                  v209 = v208 + 4;
                  v206 += ~(v206 >> 1);
                  if (v210 < v203)
                    v205 = (uint64_t)v209;
                  else
                    v206 = v207;
                }
                while (v206);
              }
              if ((unsigned int *)v205 == v204 || *(_DWORD *)v205 != v203)
              {
                v203 = *v204;
                v205 = a1[13].i64[0];
              }
              if ((*(_BYTE *)(*(_QWORD *)(v205 + 8) + 4) & 6) != 0)
                goto LABEL_231;
              v211 = (char *)a1[77].i64[0];
              v212 = a1[77].u64[1];
              if ((unint64_t)v211 >= v212)
                break;
              *(_DWORD *)v211 = v203;
              v202 = (uint64_t)(v211 + 4);
LABEL_230:
              a1[77].i64[0] = v202;
              *(_BYTE *)(*(_QWORD *)(v205 + 8) + 4) ^= 2u;
LABEL_231:
              if (++v184 == v183)
                goto LABEL_263;
            }
            v213 = (char *)*v850;
            v214 = v211 - (_BYTE *)*v850;
            v215 = v214 >> 2;
            v216 = (v214 >> 2) + 1;
            if (v216 >> 62)
              goto LABEL_910;
            v217 = v212 - (_QWORD)v213;
            if (v217 >> 1 > v216)
              v216 = v217 >> 1;
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
              v218 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v218 = v216;
            if (v218)
            {
              if (v218 >> 62)
                goto LABEL_911;
              v219 = operator new(4 * v218);
              v220 = (unsigned int *)&v219[4 * v215];
              *v220 = v203;
              v202 = (uint64_t)(v220 + 1);
              v221 = v211 - v213;
              if (v211 == v213)
                goto LABEL_260;
            }
            else
            {
              v219 = 0;
              v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v203;
              v202 = 4 * v215 + 4;
              v221 = v211 - v213;
              if (v211 == v213)
              {
LABEL_260:
                a1[76].i64[1] = (uint64_t)v220;
                a1[77].i64[0] = v202;
                a1[77].i64[1] = (uint64_t)&v219[4 * v218];
                if (v213)
                  operator delete(v213);
                v183 = v842;
                goto LABEL_230;
              }
            }
            v222 = v221 - 4;
            if (v222 < 0x2C)
              goto LABEL_924;
            if ((unint64_t)(v211 - v219 - v214) < 0x20)
              goto LABEL_924;
            v223 = (v222 >> 2) + 1;
            v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
            v225 = &v211[-v224];
            v220 = (unsigned int *)((char *)v220 - v224);
            v226 = &v219[4 * v215 - 16];
            v227 = v211 - 16;
            v228 = v223 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 8;
            }
            while (v228);
            v211 = v225;
            if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_924:
              do
              {
                v230 = *((_DWORD *)v211 - 1);
                v211 -= 4;
                *--v220 = v230;
              }
              while (v211 != v213);
            }
            goto LABEL_260;
          }
LABEL_263:
          if (v834 != v826)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v231 = (__n128 *)a1[76].i64[1];
            v232 = (char *)v231 + 4 * v818;
            v233 = (__n128 *)a1[77].i64[0];
            if (((char *)v233 - v232) >> 2 >= v818)
              v234 = v818;
            else
              v234 = ((char *)v233 - v232) >> 2;
            if (v234 < 1)
            {
LABEL_271:
              v237 = 0;
              v234 = 0;
            }
            else
            {
              v235 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v236 = (char *)operator new(4 * v234, v235);
                if (v236)
                  break;
                v122 = (unint64_t)v234 > 1;
                v234 = (unint64_t)v234 >> 1;
                if (!v122)
                  goto LABEL_271;
              }
              v237 = v236;
            }
            sub_20EDB30B0(v231, (__n128 *)((char *)v231 + 4 * v818), v233, (uint64_t)&v856, v818, ((char *)v233 - v232) >> 2, v237, v234);
            if (v237)
              operator delete(v237);
          }
          v238 = a1[78].i64[1];
          v239 = a1[78].i64[0];
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v851 = (void **)&a1[78];
          v240 = (unsigned int *)a1[102].i64[1];
          v241 = (unsigned int *)a1[102].i64[0];
          v242 = ((v238 - v239) >> 2) + v240 - v241;
          v243 = (_BYTE *)a1[78].i64[0];
          v819 = (v238 - v239) >> 2;
          v827 = v239;
          v835 = v238;
          if (v242 <= (a1[79].i64[0] - (uint64_t)v243) >> 2)
          {
LABEL_287:
            if (v241 != v240)
            {
              v843 = v240;
              while (1)
              {
                v260 = *v241;
                v262 = a1[18].i64[1];
                v261 = (unsigned int *)a1[19].i64[0];
                if (v261 != (unsigned int *)v262)
                {
                  v263 = ((uint64_t)v261 - v262) >> 4;
                  do
                  {
                    v264 = v263 >> 1;
                    v265 = (unsigned int *)(v262 + 16 * (v263 >> 1));
                    v267 = *v265;
                    v266 = v265 + 4;
                    v263 += ~(v263 >> 1);
                    if (v267 < v260)
                      v262 = (uint64_t)v266;
                    else
                      v263 = v264;
                  }
                  while (v263);
                }
                if ((unsigned int *)v262 == v261 || *(_DWORD *)v262 != v260)
                {
                  v260 = *v261;
                  v262 = a1[19].i64[0];
                }
                if ((*(_BYTE *)(*(_QWORD *)(v262 + 8) + 4) & 6) != 0)
                  goto LABEL_291;
                v268 = (char *)a1[78].i64[1];
                v269 = a1[79].u64[0];
                if ((unint64_t)v268 >= v269)
                  break;
                *(_DWORD *)v268 = v260;
                v259 = (uint64_t)(v268 + 4);
LABEL_290:
                a1[78].i64[1] = v259;
                *(_BYTE *)(*(_QWORD *)(v262 + 8) + 4) ^= 2u;
LABEL_291:
                if (++v241 == v240)
                  goto LABEL_323;
              }
              v270 = (char *)*v851;
              v271 = v268 - (_BYTE *)*v851;
              v272 = v271 >> 2;
              v273 = (v271 >> 2) + 1;
              if (v273 >> 62)
                goto LABEL_910;
              v274 = v269 - (_QWORD)v270;
              if (v274 >> 1 > v273)
                v273 = v274 >> 1;
              if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                v275 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v275 = v273;
              if (v275)
              {
                if (v275 >> 62)
                  goto LABEL_911;
                v276 = operator new(4 * v275);
                v277 = (unsigned int *)&v276[4 * v272];
                *v277 = v260;
                v259 = (uint64_t)(v277 + 1);
                v278 = v268 - v270;
                if (v268 == v270)
                  goto LABEL_320;
              }
              else
              {
                v276 = 0;
                v277 = (unsigned int *)(4 * v272);
                *(_DWORD *)(4 * v272) = v260;
                v259 = 4 * v272 + 4;
                v278 = v268 - v270;
                if (v268 == v270)
                {
LABEL_320:
                  a1[78].i64[0] = (uint64_t)v277;
                  a1[78].i64[1] = v259;
                  a1[79].i64[0] = (uint64_t)&v276[4 * v275];
                  if (v270)
                    operator delete(v270);
                  v240 = v843;
                  goto LABEL_290;
                }
              }
              v279 = v278 - 4;
              if (v279 < 0x2C)
                goto LABEL_925;
              if ((unint64_t)(v268 - v276 - v271) < 0x20)
                goto LABEL_925;
              v280 = (v279 >> 2) + 1;
              v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
              v282 = &v268[-v281];
              v277 = (unsigned int *)((char *)v277 - v281);
              v283 = &v276[4 * v272 - 16];
              v284 = v268 - 16;
              v285 = v280 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v286 = *(_OWORD *)v284;
                *(v283 - 1) = *((_OWORD *)v284 - 1);
                *v283 = v286;
                v283 -= 2;
                v284 -= 32;
                v285 -= 8;
              }
              while (v285);
              v268 = v282;
              if (v280 != (v280 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_925:
                do
                {
                  v287 = *((_DWORD *)v268 - 1);
                  v268 -= 4;
                  *--v277 = v287;
                }
                while (v268 != v270);
              }
              goto LABEL_320;
            }
LABEL_323:
            if (v835 != v827)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v288 = (__n128 *)a1[78].i64[0];
              v289 = (char *)v288 + 4 * v819;
              v290 = (__n128 *)a1[78].i64[1];
              if (((char *)v290 - v289) >> 2 >= v819)
                v291 = v819;
              else
                v291 = ((char *)v290 - v289) >> 2;
              if (v291 < 1)
              {
LABEL_331:
                v294 = 0;
                v291 = 0;
              }
              else
              {
                v292 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v293 = (char *)operator new(4 * v291, v292);
                  if (v293)
                    break;
                  v122 = (unint64_t)v291 > 1;
                  v291 = (unint64_t)v291 >> 1;
                  if (!v122)
                    goto LABEL_331;
                }
                v294 = v293;
              }
              sub_20EDB30B0(v288, (__n128 *)((char *)v288 + 4 * v819), v290, (uint64_t)&v856, v819, ((char *)v290 - v289) >> 2, v294, v291);
              if (v294)
                operator delete(v294);
            }
            v295 = a1[80].i64[0];
            v296 = a1[79].i64[1];
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v852 = (void **)&a1[79].i64[1];
            v297 = (unsigned int *)a1[104].i64[0];
            v298 = (unsigned int *)a1[103].i64[1];
            v299 = ((v295 - v296) >> 2) + v297 - v298;
            v300 = (_BYTE *)a1[79].i64[1];
            v820 = (v295 - v296) >> 2;
            v828 = v296;
            v836 = v295;
            if (v299 <= (a1[80].i64[1] - (uint64_t)v300) >> 2)
            {
LABEL_347:
              if (v298 != v297)
              {
                v844 = v297;
                while (1)
                {
                  v317 = *v298;
                  v319 = a1[24].i64[1];
                  v318 = (unsigned int *)a1[25].i64[0];
                  if (v318 != (unsigned int *)v319)
                  {
                    v320 = ((uint64_t)v318 - v319) >> 4;
                    do
                    {
                      v321 = v320 >> 1;
                      v322 = (unsigned int *)(v319 + 16 * (v320 >> 1));
                      v324 = *v322;
                      v323 = v322 + 4;
                      v320 += ~(v320 >> 1);
                      if (v324 < v317)
                        v319 = (uint64_t)v323;
                      else
                        v320 = v321;
                    }
                    while (v320);
                  }
                  if ((unsigned int *)v319 == v318 || *(_DWORD *)v319 != v317)
                  {
                    v317 = *v318;
                    v319 = a1[25].i64[0];
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v319 + 8) + 4) & 6) != 0)
                    goto LABEL_351;
                  v325 = (char *)a1[80].i64[0];
                  v326 = a1[80].u64[1];
                  if ((unint64_t)v325 >= v326)
                    break;
                  *(_DWORD *)v325 = v317;
                  v316 = (uint64_t)(v325 + 4);
LABEL_350:
                  a1[80].i64[0] = v316;
                  *(_BYTE *)(*(_QWORD *)(v319 + 8) + 4) ^= 2u;
LABEL_351:
                  if (++v298 == v297)
                    goto LABEL_383;
                }
                v327 = (char *)*v852;
                v328 = v325 - (_BYTE *)*v852;
                v329 = v328 >> 2;
                v330 = (v328 >> 2) + 1;
                if (v330 >> 62)
                  goto LABEL_910;
                v331 = v326 - (_QWORD)v327;
                if (v331 >> 1 > v330)
                  v330 = v331 >> 1;
                if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
                  v332 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v332 = v330;
                if (v332)
                {
                  if (v332 >> 62)
                    goto LABEL_911;
                  v333 = operator new(4 * v332);
                  v334 = (unsigned int *)&v333[4 * v329];
                  *v334 = v317;
                  v316 = (uint64_t)(v334 + 1);
                  v335 = v325 - v327;
                  if (v325 == v327)
                    goto LABEL_380;
                }
                else
                {
                  v333 = 0;
                  v334 = (unsigned int *)(4 * v329);
                  *(_DWORD *)(4 * v329) = v317;
                  v316 = 4 * v329 + 4;
                  v335 = v325 - v327;
                  if (v325 == v327)
                  {
LABEL_380:
                    a1[79].i64[1] = (uint64_t)v334;
                    a1[80].i64[0] = v316;
                    a1[80].i64[1] = (uint64_t)&v333[4 * v332];
                    if (v327)
                      operator delete(v327);
                    v297 = v844;
                    goto LABEL_350;
                  }
                }
                v336 = v335 - 4;
                if (v336 < 0x2C)
                  goto LABEL_926;
                if ((unint64_t)(v325 - v333 - v328) < 0x20)
                  goto LABEL_926;
                v337 = (v336 >> 2) + 1;
                v338 = 4 * (v337 & 0x7FFFFFFFFFFFFFF8);
                v339 = &v325[-v338];
                v334 = (unsigned int *)((char *)v334 - v338);
                v340 = &v333[4 * v329 - 16];
                v341 = v325 - 16;
                v342 = v337 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v343 = *(_OWORD *)v341;
                  *(v340 - 1) = *((_OWORD *)v341 - 1);
                  *v340 = v343;
                  v340 -= 2;
                  v341 -= 32;
                  v342 -= 8;
                }
                while (v342);
                v325 = v339;
                if (v337 != (v337 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_926:
                  do
                  {
                    v344 = *((_DWORD *)v325 - 1);
                    v325 -= 4;
                    *--v334 = v344;
                  }
                  while (v325 != v327);
                }
                goto LABEL_380;
              }
LABEL_383:
              if (v836 != v828)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v345 = (__n128 *)a1[79].i64[1];
                v346 = (char *)v345 + 4 * v820;
                v347 = (__n128 *)a1[80].i64[0];
                if (((char *)v347 - v346) >> 2 >= v820)
                  v348 = v820;
                else
                  v348 = ((char *)v347 - v346) >> 2;
                if (v348 < 1)
                {
LABEL_391:
                  v351 = 0;
                  v348 = 0;
                }
                else
                {
                  v349 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v350 = (char *)operator new(4 * v348, v349);
                    if (v350)
                      break;
                    v122 = (unint64_t)v348 > 1;
                    v348 = (unint64_t)v348 >> 1;
                    if (!v122)
                      goto LABEL_391;
                  }
                  v351 = v350;
                }
                sub_20EDB30B0(v345, (__n128 *)((char *)v345 + 4 * v820), v347, (uint64_t)&v856, v820, ((char *)v347 - v346) >> 2, v351, v348);
                if (v351)
                  operator delete(v351);
              }
              v352 = a1[81].i64[1];
              v353 = a1[81].i64[0];
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v853 = (void **)&a1[81];
              v354 = (unsigned int *)a1[105].i64[1];
              v355 = (unsigned int *)a1[105].i64[0];
              v356 = ((v352 - v353) >> 2) + v354 - v355;
              v357 = (_BYTE *)a1[81].i64[0];
              v821 = (v352 - v353) >> 2;
              v829 = v353;
              v837 = v352;
              if (v356 <= (a1[82].i64[0] - (uint64_t)v357) >> 2)
              {
LABEL_407:
                if (v355 != v354)
                {
                  v845 = v354;
                  while (1)
                  {
                    v374 = *v355;
                    v376 = a1[30].i64[1];
                    v375 = (unsigned int *)a1[31].i64[0];
                    if (v375 != (unsigned int *)v376)
                    {
                      v377 = ((uint64_t)v375 - v376) >> 4;
                      do
                      {
                        v378 = v377 >> 1;
                        v379 = (unsigned int *)(v376 + 16 * (v377 >> 1));
                        v381 = *v379;
                        v380 = v379 + 4;
                        v377 += ~(v377 >> 1);
                        if (v381 < v374)
                          v376 = (uint64_t)v380;
                        else
                          v377 = v378;
                      }
                      while (v377);
                    }
                    if ((unsigned int *)v376 == v375 || *(_DWORD *)v376 != v374)
                    {
                      v374 = *v375;
                      v376 = a1[31].i64[0];
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v376 + 8) + 4) & 6) != 0)
                      goto LABEL_411;
                    v382 = (char *)a1[81].i64[1];
                    v383 = a1[82].u64[0];
                    if ((unint64_t)v382 >= v383)
                      break;
                    *(_DWORD *)v382 = v374;
                    v373 = (uint64_t)(v382 + 4);
LABEL_410:
                    a1[81].i64[1] = v373;
                    *(_BYTE *)(*(_QWORD *)(v376 + 8) + 4) ^= 2u;
LABEL_411:
                    if (++v355 == v354)
                      goto LABEL_443;
                  }
                  v384 = (char *)*v853;
                  v385 = v382 - (_BYTE *)*v853;
                  v386 = v385 >> 2;
                  v387 = (v385 >> 2) + 1;
                  if (v387 >> 62)
                    goto LABEL_910;
                  v388 = v383 - (_QWORD)v384;
                  if (v388 >> 1 > v387)
                    v387 = v388 >> 1;
                  if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
                    v389 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v389 = v387;
                  if (v389)
                  {
                    if (v389 >> 62)
                      goto LABEL_911;
                    v390 = operator new(4 * v389);
                    v391 = (unsigned int *)&v390[4 * v386];
                    *v391 = v374;
                    v373 = (uint64_t)(v391 + 1);
                    v392 = v382 - v384;
                    if (v382 == v384)
                      goto LABEL_440;
                  }
                  else
                  {
                    v390 = 0;
                    v391 = (unsigned int *)(4 * v386);
                    *(_DWORD *)(4 * v386) = v374;
                    v373 = 4 * v386 + 4;
                    v392 = v382 - v384;
                    if (v382 == v384)
                    {
LABEL_440:
                      a1[81].i64[0] = (uint64_t)v391;
                      a1[81].i64[1] = v373;
                      a1[82].i64[0] = (uint64_t)&v390[4 * v389];
                      if (v384)
                        operator delete(v384);
                      v354 = v845;
                      goto LABEL_410;
                    }
                  }
                  v393 = v392 - 4;
                  if (v393 < 0x2C)
                    goto LABEL_927;
                  if ((unint64_t)(v382 - v390 - v385) < 0x20)
                    goto LABEL_927;
                  v394 = (v393 >> 2) + 1;
                  v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
                  v396 = &v382[-v395];
                  v391 = (unsigned int *)((char *)v391 - v395);
                  v397 = &v390[4 * v386 - 16];
                  v398 = v382 - 16;
                  v399 = v394 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v400 = *(_OWORD *)v398;
                    *(v397 - 1) = *((_OWORD *)v398 - 1);
                    *v397 = v400;
                    v397 -= 2;
                    v398 -= 32;
                    v399 -= 8;
                  }
                  while (v399);
                  v382 = v396;
                  if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_927:
                    do
                    {
                      v401 = *((_DWORD *)v382 - 1);
                      v382 -= 4;
                      *--v391 = v401;
                    }
                    while (v382 != v384);
                  }
                  goto LABEL_440;
                }
LABEL_443:
                if (v837 != v829)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v402 = (__n128 *)a1[81].i64[0];
                  v403 = (char *)v402 + 4 * v821;
                  v404 = (__n128 *)a1[81].i64[1];
                  if (((char *)v404 - v403) >> 2 >= v821)
                    v405 = v821;
                  else
                    v405 = ((char *)v404 - v403) >> 2;
                  if (v405 < 1)
                  {
LABEL_451:
                    v408 = 0;
                    v405 = 0;
                  }
                  else
                  {
                    v406 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v407 = (char *)operator new(4 * v405, v406);
                      if (v407)
                        break;
                      v122 = (unint64_t)v405 > 1;
                      v405 = (unint64_t)v405 >> 1;
                      if (!v122)
                        goto LABEL_451;
                    }
                    v408 = v407;
                  }
                  sub_20EDB30B0(v402, (__n128 *)((char *)v402 + 4 * v821), v404, (uint64_t)&v856, v821, ((char *)v404 - v403) >> 2, v408, v405);
                  if (v408)
                    operator delete(v408);
                }
                v409 = a1[83].i64[0];
                v410 = a1[82].i64[1];
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v854 = (void **)&a1[82].i64[1];
                v411 = (unsigned int *)a1[107].i64[0];
                v412 = (unsigned int *)a1[106].i64[1];
                v413 = ((v409 - v410) >> 2) + v411 - v412;
                v414 = (_BYTE *)a1[82].i64[1];
                v822 = (v409 - v410) >> 2;
                v830 = v410;
                v838 = v409;
                if (v413 <= (a1[83].i64[1] - (uint64_t)v414) >> 2)
                {
LABEL_467:
                  if (v412 != v411)
                  {
                    v846 = v411;
                    while (1)
                    {
                      v431 = *v412;
                      v432 = a1[36].i64[1];
                      v433 = (unsigned int *)a1[37].i64[0];
                      if (v433 != (unsigned int *)v432)
                      {
                        v434 = ((uint64_t)v433 - v432) >> 4;
                        do
                        {
                          v435 = v434 >> 1;
                          v436 = (unsigned int *)(v432 + 16 * (v434 >> 1));
                          v438 = *v436;
                          v437 = v436 + 4;
                          v434 += ~(v434 >> 1);
                          if (v438 < v431)
                            v432 = (uint64_t)v437;
                          else
                            v434 = v435;
                        }
                        while (v434);
                      }
                      if ((unsigned int *)v432 == v433 || *(_DWORD *)v432 != v431)
                      {
                        v431 = *v433;
                        v432 = a1[37].i64[0];
                      }
                      if ((*(_BYTE *)(*(_QWORD *)(v432 + 8) + 4) & 6) != 0)
                        goto LABEL_471;
                      v439 = (char *)a1[83].i64[0];
                      v440 = a1[83].u64[1];
                      if ((unint64_t)v439 >= v440)
                        break;
                      *(_DWORD *)v439 = v431;
                      v430 = (uint64_t)(v439 + 4);
LABEL_470:
                      a1[83].i64[0] = v430;
                      *(_BYTE *)(*(_QWORD *)(v432 + 8) + 4) ^= 2u;
LABEL_471:
                      if (++v412 == v411)
                        goto LABEL_503;
                    }
                    v441 = (char *)*v854;
                    v442 = v439 - (_BYTE *)*v854;
                    v443 = v442 >> 2;
                    v444 = (v442 >> 2) + 1;
                    if (v444 >> 62)
                      goto LABEL_910;
                    v445 = v440 - (_QWORD)v441;
                    if (v445 >> 1 > v444)
                      v444 = v445 >> 1;
                    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
                      v446 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v446 = v444;
                    if (v446)
                    {
                      if (v446 >> 62)
                        goto LABEL_911;
                      v447 = operator new(4 * v446);
                      v448 = (unsigned int *)&v447[4 * v443];
                      *v448 = v431;
                      v430 = (uint64_t)(v448 + 1);
                      v449 = v439 - v441;
                      if (v439 == v441)
                        goto LABEL_500;
                    }
                    else
                    {
                      v447 = 0;
                      v448 = (unsigned int *)(4 * v443);
                      *(_DWORD *)(4 * v443) = v431;
                      v430 = 4 * v443 + 4;
                      v449 = v439 - v441;
                      if (v439 == v441)
                      {
LABEL_500:
                        a1[82].i64[1] = (uint64_t)v448;
                        a1[83].i64[0] = v430;
                        a1[83].i64[1] = (uint64_t)&v447[4 * v446];
                        if (v441)
                          operator delete(v441);
                        v411 = v846;
                        goto LABEL_470;
                      }
                    }
                    v450 = v449 - 4;
                    if (v450 < 0x2C)
                      goto LABEL_928;
                    if ((unint64_t)(v439 - v447 - v442) < 0x20)
                      goto LABEL_928;
                    v451 = (v450 >> 2) + 1;
                    v452 = 4 * (v451 & 0x7FFFFFFFFFFFFFF8);
                    v453 = &v439[-v452];
                    v448 = (unsigned int *)((char *)v448 - v452);
                    v454 = &v447[4 * v443 - 16];
                    v455 = v439 - 16;
                    v456 = v451 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v457 = *(_OWORD *)v455;
                      *(v454 - 1) = *((_OWORD *)v455 - 1);
                      *v454 = v457;
                      v454 -= 2;
                      v455 -= 32;
                      v456 -= 8;
                    }
                    while (v456);
                    v439 = v453;
                    if (v451 != (v451 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_928:
                      do
                      {
                        v458 = *((_DWORD *)v439 - 1);
                        v439 -= 4;
                        *--v448 = v458;
                      }
                      while (v439 != v441);
                    }
                    goto LABEL_500;
                  }
LABEL_503:
                  if (v838 != v830)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v459 = (__n128 *)a1[82].i64[1];
                    v460 = (char *)v459 + 4 * v822;
                    v461 = (__n128 *)a1[83].i64[0];
                    if (((char *)v461 - v460) >> 2 >= v822)
                      v462 = v822;
                    else
                      v462 = ((char *)v461 - v460) >> 2;
                    if (v462 < 1)
                    {
LABEL_511:
                      v465 = 0;
                      v462 = 0;
                    }
                    else
                    {
                      v463 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v464 = (char *)operator new(4 * v462, v463);
                        if (v464)
                          break;
                        v122 = (unint64_t)v462 > 1;
                        v462 = (unint64_t)v462 >> 1;
                        if (!v122)
                          goto LABEL_511;
                      }
                      v465 = v464;
                    }
                    sub_20EDB30B0(v459, (__n128 *)((char *)v459 + 4 * v822), v461, (uint64_t)&v856, v822, ((char *)v461 - v460) >> 2, v465, v462);
                    if (v465)
                      operator delete(v465);
                  }
                  v466 = a1[84].i64[1];
                  v467 = a1[84].i64[0];
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v855 = (void **)&a1[84];
                  v468 = (unsigned int *)a1[108].i64[1];
                  v469 = (unsigned int *)a1[108].i64[0];
                  v470 = ((v466 - v467) >> 2) + v468 - v469;
                  v471 = (_BYTE *)a1[84].i64[0];
                  v823 = (v466 - v467) >> 2;
                  v831 = v467;
                  v839 = v466;
                  if (v470 <= (a1[85].i64[0] - (uint64_t)v471) >> 2)
                    goto LABEL_527;
                  if (!(v470 >> 62))
                  {
                    v472 = a1[108].i64[1];
                    v473 = (_BYTE *)a1[84].i64[1];
                    v474 = (char *)operator new(4 * v470);
                    v475 = v473 - v471;
                    v476 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    v477 = v476;
                    if (v473 == v471)
                      goto LABEL_525;
                    if ((unint64_t)(v475 - 4) >= 0x2C)
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v473[-(v475 & 0xFFFFFFFFFFFFFFFCLL)] - v474) >= 0x20)
                      {
                        v478 = v475 >> 2;
                        v479 = ((unint64_t)(v475 - 4) >> 2) + 1;
                        v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
                        v481 = &v473[-v480];
                        v477 = &v476[-v480];
                        v482 = &v474[4 * v478 - 16];
                        v483 = (__int128 *)(v473 - 16);
                        v484 = v479 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v485 = *v483;
                          *((_OWORD *)v482 - 1) = *(v483 - 1);
                          *(_OWORD *)v482 = v485;
                          v482 -= 32;
                          v483 -= 2;
                          v484 -= 8;
                        }
                        while (v484);
                        v473 = v481;
                        if (v479 == (v479 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_525:
                          a1[84].i64[0] = (uint64_t)v477;
                          a1[84].i64[1] = (uint64_t)v476;
                          a1[85].i64[0] = (uint64_t)&v474[4 * v470];
                          v468 = (unsigned int *)v472;
                          if (v471)
                          {
                            operator delete(v471);
                            v469 = (unsigned int *)a1[108].i64[0];
                            v468 = (unsigned int *)a1[108].i64[1];
                          }
LABEL_527:
                          if (v469 != v468)
                          {
                            v847 = v468;
                            while (1)
                            {
                              v488 = *v469;
                              v489 = a1[42].i64[1];
                              v490 = (unsigned int *)a1[43].i64[0];
                              if (v490 != (unsigned int *)v489)
                              {
                                v491 = ((uint64_t)v490 - v489) >> 4;
                                do
                                {
                                  v492 = v491 >> 1;
                                  v493 = (unsigned int *)(v489 + 16 * (v491 >> 1));
                                  v495 = *v493;
                                  v494 = v493 + 4;
                                  v491 += ~(v491 >> 1);
                                  if (v495 < v488)
                                    v489 = (uint64_t)v494;
                                  else
                                    v491 = v492;
                                }
                                while (v491);
                              }
                              if ((unsigned int *)v489 == v490 || *(_DWORD *)v489 != v488)
                              {
                                v488 = *v490;
                                v489 = a1[43].i64[0];
                              }
                              if ((*(_BYTE *)(*(_QWORD *)(v489 + 8) + 4) & 6) != 0)
                                goto LABEL_531;
                              v496 = (char *)a1[84].i64[1];
                              v497 = a1[85].u64[0];
                              if ((unint64_t)v496 >= v497)
                                break;
                              *(_DWORD *)v496 = v488;
                              v487 = (uint64_t)(v496 + 4);
LABEL_530:
                              a1[84].i64[1] = v487;
                              *(_BYTE *)(*(_QWORD *)(v489 + 8) + 4) ^= 2u;
LABEL_531:
                              if (++v469 == v468)
                                goto LABEL_563;
                            }
                            v498 = (char *)*v855;
                            v499 = v496 - (_BYTE *)*v855;
                            v500 = v499 >> 2;
                            v501 = (v499 >> 2) + 1;
                            if (v501 >> 62)
                              goto LABEL_910;
                            v502 = v497 - (_QWORD)v498;
                            if (v502 >> 1 > v501)
                              v501 = v502 >> 1;
                            if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                              v503 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v503 = v501;
                            if (v503)
                            {
                              if (v503 >> 62)
                                goto LABEL_911;
                              v504 = operator new(4 * v503);
                              v505 = (unsigned int *)&v504[4 * v500];
                              *v505 = v488;
                              v487 = (uint64_t)(v505 + 1);
                              v506 = v496 - v498;
                              if (v496 == v498)
                                goto LABEL_560;
                            }
                            else
                            {
                              v504 = 0;
                              v505 = (unsigned int *)(4 * v500);
                              *(_DWORD *)(4 * v500) = v488;
                              v487 = 4 * v500 + 4;
                              v506 = v496 - v498;
                              if (v496 == v498)
                              {
LABEL_560:
                                a1[84].i64[0] = (uint64_t)v505;
                                a1[84].i64[1] = v487;
                                a1[85].i64[0] = (uint64_t)&v504[4 * v503];
                                if (v498)
                                  operator delete(v498);
                                v468 = v847;
                                goto LABEL_530;
                              }
                            }
                            v507 = v506 - 4;
                            if (v507 < 0x2C)
                              goto LABEL_929;
                            if ((unint64_t)(v496 - v504 - v499) < 0x20)
                              goto LABEL_929;
                            v508 = (v507 >> 2) + 1;
                            v509 = 4 * (v508 & 0x7FFFFFFFFFFFFFF8);
                            v510 = &v496[-v509];
                            v505 = (unsigned int *)((char *)v505 - v509);
                            v511 = &v504[4 * v500 - 16];
                            v512 = v496 - 16;
                            v513 = v508 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v514 = *(_OWORD *)v512;
                              *(v511 - 1) = *((_OWORD *)v512 - 1);
                              *v511 = v514;
                              v511 -= 2;
                              v512 -= 32;
                              v513 -= 8;
                            }
                            while (v513);
                            v496 = v510;
                            if (v508 != (v508 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_929:
                              do
                              {
                                v515 = *((_DWORD *)v496 - 1);
                                v496 -= 4;
                                *--v505 = v515;
                              }
                              while (v496 != v498);
                            }
                            goto LABEL_560;
                          }
LABEL_563:
                          if (v839 != v831)
                          {
                            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                            v516 = (__n128 *)a1[84].i64[0];
                            v517 = (char *)v516 + 4 * v823;
                            v518 = (__n128 *)a1[84].i64[1];
                            if (((char *)v518 - v517) >> 2 >= v823)
                              v519 = v823;
                            else
                              v519 = ((char *)v518 - v517) >> 2;
                            if (v519 < 1)
                            {
LABEL_571:
                              v522 = 0;
                              v519 = 0;
                            }
                            else
                            {
                              v520 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                              while (1)
                              {
                                v521 = (char *)operator new(4 * v519, v520);
                                if (v521)
                                  break;
                                v122 = (unint64_t)v519 > 1;
                                v519 = (unint64_t)v519 >> 1;
                                if (!v122)
                                  goto LABEL_571;
                              }
                              v522 = v521;
                            }
                            sub_20EDB30B0(v516, (__n128 *)((char *)v516 + 4 * v823), v518, (uint64_t)&v856, v823, ((char *)v518 - v517) >> 2, v522, v519);
                            if (v522)
                              operator delete(v522);
                          }
                          sub_20F59A618(a1);
                          goto LABEL_576;
                        }
                      }
                    }
                    else
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    do
                    {
                      v486 = *((_DWORD *)v473 - 1);
                      v473 -= 4;
                      *((_DWORD *)v477 - 1) = v486;
                      v477 -= 4;
                    }
                    while (v473 != v471);
                    goto LABEL_525;
                  }
LABEL_910:
                  sub_20E867F44();
                }
                if (v413 >> 62)
                  goto LABEL_910;
                v415 = a1[107].i64[0];
                v416 = (_BYTE *)a1[83].i64[0];
                v417 = (char *)operator new(4 * v413);
                v418 = v416 - v414;
                v419 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                v420 = v419;
                if (v416 != v414)
                {
                  if ((unint64_t)(v418 - 4) < 0x2C)
                  {
                    v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_464:
                      v429 = *((_DWORD *)v416 - 1);
                      v416 -= 4;
                      *((_DWORD *)v420 - 1) = v429;
                      v420 -= 4;
                    }
                    while (v416 != v414);
                    goto LABEL_465;
                  }
                  v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v416[-(v418 & 0xFFFFFFFFFFFFFFFCLL)] - v417) < 0x20)
                    goto LABEL_464;
                  v421 = v418 >> 2;
                  v422 = ((unint64_t)(v418 - 4) >> 2) + 1;
                  v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                  v424 = &v416[-v423];
                  v420 = &v419[-v423];
                  v425 = &v417[4 * v421 - 16];
                  v426 = (__int128 *)(v416 - 16);
                  v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v428 = *v426;
                    *((_OWORD *)v425 - 1) = *(v426 - 1);
                    *(_OWORD *)v425 = v428;
                    v425 -= 32;
                    v426 -= 2;
                    v427 -= 8;
                  }
                  while (v427);
                  v416 = v424;
                  if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_464;
                }
LABEL_465:
                a1[82].i64[1] = (uint64_t)v420;
                a1[83].i64[0] = (uint64_t)v419;
                a1[83].i64[1] = (uint64_t)&v417[4 * v413];
                v411 = (unsigned int *)v415;
                if (v414)
                {
                  operator delete(v414);
                  v412 = (unsigned int *)a1[106].i64[1];
                  v411 = (unsigned int *)a1[107].i64[0];
                }
                goto LABEL_467;
              }
              if (v356 >> 62)
                goto LABEL_910;
              v358 = a1[105].i64[1];
              v359 = (_BYTE *)a1[81].i64[1];
              v360 = (char *)operator new(4 * v356);
              v361 = v359 - v357;
              v362 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
              v363 = v362;
              if (v359 != v357)
              {
                if ((unint64_t)(v361 - 4) < 0x2C)
                {
                  v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_404:
                    v372 = *((_DWORD *)v359 - 1);
                    v359 -= 4;
                    *((_DWORD *)v363 - 1) = v372;
                    v363 -= 4;
                  }
                  while (v359 != v357);
                  goto LABEL_405;
                }
                v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v359[-(v361 & 0xFFFFFFFFFFFFFFFCLL)] - v360) < 0x20)
                  goto LABEL_404;
                v364 = v361 >> 2;
                v365 = ((unint64_t)(v361 - 4) >> 2) + 1;
                v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                v367 = &v359[-v366];
                v363 = &v362[-v366];
                v368 = &v360[4 * v364 - 16];
                v369 = (__int128 *)(v359 - 16);
                v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v371 = *v369;
                  *((_OWORD *)v368 - 1) = *(v369 - 1);
                  *(_OWORD *)v368 = v371;
                  v368 -= 32;
                  v369 -= 2;
                  v370 -= 8;
                }
                while (v370);
                v359 = v367;
                if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_404;
              }
LABEL_405:
              a1[81].i64[0] = (uint64_t)v363;
              a1[81].i64[1] = (uint64_t)v362;
              a1[82].i64[0] = (uint64_t)&v360[4 * v356];
              v354 = (unsigned int *)v358;
              if (v357)
              {
                operator delete(v357);
                v355 = (unsigned int *)a1[105].i64[0];
                v354 = (unsigned int *)a1[105].i64[1];
              }
              goto LABEL_407;
            }
            if (v299 >> 62)
              goto LABEL_910;
            v301 = a1[104].i64[0];
            v302 = (_BYTE *)a1[80].i64[0];
            v303 = (char *)operator new(4 * v299);
            v304 = v302 - v300;
            v305 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
            v306 = v305;
            if (v302 != v300)
            {
              if ((unint64_t)(v304 - 4) < 0x2C)
              {
                v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_344:
                  v315 = *((_DWORD *)v302 - 1);
                  v302 -= 4;
                  *((_DWORD *)v306 - 1) = v315;
                  v306 -= 4;
                }
                while (v302 != v300);
                goto LABEL_345;
              }
              v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v302[-(v304 & 0xFFFFFFFFFFFFFFFCLL)] - v303) < 0x20)
                goto LABEL_344;
              v307 = v304 >> 2;
              v308 = ((unint64_t)(v304 - 4) >> 2) + 1;
              v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
              v310 = &v302[-v309];
              v306 = &v305[-v309];
              v311 = &v303[4 * v307 - 16];
              v312 = (__int128 *)(v302 - 16);
              v313 = v308 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v314 = *v312;
                *((_OWORD *)v311 - 1) = *(v312 - 1);
                *(_OWORD *)v311 = v314;
                v311 -= 32;
                v312 -= 2;
                v313 -= 8;
              }
              while (v313);
              v302 = v310;
              if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_344;
            }
LABEL_345:
            a1[79].i64[1] = (uint64_t)v306;
            a1[80].i64[0] = (uint64_t)v305;
            a1[80].i64[1] = (uint64_t)&v303[4 * v299];
            v297 = (unsigned int *)v301;
            if (v300)
            {
              operator delete(v300);
              v298 = (unsigned int *)a1[103].i64[1];
              v297 = (unsigned int *)a1[104].i64[0];
            }
            goto LABEL_347;
          }
          if (v242 >> 62)
            goto LABEL_910;
          v244 = a1[102].i64[1];
          v245 = (_BYTE *)a1[78].i64[1];
          v246 = (char *)operator new(4 * v242);
          v247 = v245 - v243;
          v248 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
          v249 = v248;
          if (v245 != v243)
          {
            if ((unint64_t)(v247 - 4) < 0x2C)
            {
              v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_284:
                v258 = *((_DWORD *)v245 - 1);
                v245 -= 4;
                *((_DWORD *)v249 - 1) = v258;
                v249 -= 4;
              }
              while (v245 != v243);
              goto LABEL_285;
            }
            v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v245[-(v247 & 0xFFFFFFFFFFFFFFFCLL)] - v246) < 0x20)
              goto LABEL_284;
            v250 = v247 >> 2;
            v251 = ((unint64_t)(v247 - 4) >> 2) + 1;
            v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
            v253 = &v245[-v252];
            v249 = &v248[-v252];
            v254 = &v246[4 * v250 - 16];
            v255 = (__int128 *)(v245 - 16);
            v256 = v251 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v257 = *v255;
              *((_OWORD *)v254 - 1) = *(v255 - 1);
              *(_OWORD *)v254 = v257;
              v254 -= 32;
              v255 -= 2;
              v256 -= 8;
            }
            while (v256);
            v245 = v253;
            if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_284;
          }
LABEL_285:
          a1[78].i64[0] = (uint64_t)v249;
          a1[78].i64[1] = (uint64_t)v248;
          a1[79].i64[0] = (uint64_t)&v246[4 * v242];
          v240 = (unsigned int *)v244;
          if (v243)
          {
            operator delete(v243);
            v241 = (unsigned int *)a1[102].i64[0];
            v240 = (unsigned int *)a1[102].i64[1];
          }
          goto LABEL_287;
        }
        if (v185 >> 62)
          goto LABEL_910;
        v187 = a1[101].i64[0];
        v188 = (_BYTE *)a1[77].i64[0];
        v189 = (char *)operator new(4 * v185);
        v190 = v188 - v186;
        v191 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        v192 = v191;
        if (v188 != v186)
        {
          if ((unint64_t)(v190 - 4) < 0x2C)
          {
            v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_224:
              v201 = *((_DWORD *)v188 - 1);
              v188 -= 4;
              *((_DWORD *)v192 - 1) = v201;
              v192 -= 4;
            }
            while (v188 != v186);
            goto LABEL_225;
          }
          v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v188[-(v190 & 0xFFFFFFFFFFFFFFFCLL)] - v189) < 0x20)
            goto LABEL_224;
          v193 = v190 >> 2;
          v194 = ((unint64_t)(v190 - 4) >> 2) + 1;
          v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          v196 = &v188[-v195];
          v192 = &v191[-v195];
          v197 = &v189[4 * v193 - 16];
          v198 = (__int128 *)(v188 - 16);
          v199 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v200 = *v198;
            *((_OWORD *)v197 - 1) = *(v198 - 1);
            *(_OWORD *)v197 = v200;
            v197 -= 32;
            v198 -= 2;
            v199 -= 8;
          }
          while (v199);
          v188 = v196;
          if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_224;
        }
LABEL_225:
        a1[76].i64[1] = (uint64_t)v192;
        a1[77].i64[0] = (uint64_t)v191;
        a1[77].i64[1] = (uint64_t)&v189[4 * v185];
        v183 = (unsigned int *)v187;
        if (v186)
        {
          operator delete(v186);
          v184 = (unsigned int *)a1[100].i64[1];
          v183 = (unsigned int *)a1[101].i64[0];
        }
        goto LABEL_227;
      }
      if (v128 >> 62)
        goto LABEL_910;
      v130 = a1[99].i64[1];
      v131 = (_BYTE *)a1[75].i64[1];
      v132 = (char *)operator new(4 * v128);
      v133 = v131 - v129;
      v134 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
      v135 = v134;
      if (v131 != v129)
      {
        if ((unint64_t)(v133 - 4) < 0x2C)
        {
          v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_164:
            v144 = *((_DWORD *)v131 - 1);
            v131 -= 4;
            *((_DWORD *)v135 - 1) = v144;
            v135 -= 4;
          }
          while (v131 != v129);
          goto LABEL_165;
        }
        v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v131[-(v133 & 0xFFFFFFFFFFFFFFFCLL)] - v132) < 0x20)
          goto LABEL_164;
        v136 = v133 >> 2;
        v137 = ((unint64_t)(v133 - 4) >> 2) + 1;
        v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
        v139 = &v131[-v138];
        v135 = &v134[-v138];
        v140 = &v132[4 * v136 - 16];
        v141 = (__int128 *)(v131 - 16);
        v142 = v137 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v143 = *v141;
          *((_OWORD *)v140 - 1) = *(v141 - 1);
          *(_OWORD *)v140 = v143;
          v140 -= 32;
          v141 -= 2;
          v142 -= 8;
        }
        while (v142);
        v131 = v139;
        if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_164;
      }
LABEL_165:
      a1[75].i64[0] = (uint64_t)v135;
      a1[75].i64[1] = (uint64_t)v134;
      a1[76].i64[0] = (uint64_t)&v132[4 * v128];
      v126 = (unsigned int *)v130;
      if (v129)
      {
        operator delete(v129);
        v127 = (unsigned int *)a1[99].i64[0];
        v126 = (unsigned int *)a1[99].i64[1];
      }
      goto LABEL_167;
    }
    if (v70 >> 62)
      goto LABEL_910;
    v72 = a1[98].i64[0];
    v73 = (_BYTE *)a1[74].i64[0];
    v74 = (char *)operator new(4 * v70);
    v75 = v73 - v71;
    v76 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
    v77 = v76;
    if (v73 != v71)
    {
      if ((unint64_t)(v75 - 4) < 0x2C)
      {
        v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_104:
          v86 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v77 - 1) = v86;
          v77 -= 4;
        }
        while (v73 != v71);
        goto LABEL_105;
      }
      v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v73 - &v74[v75 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_104;
      v78 = v75 >> 2;
      v79 = ((unint64_t)(v75 - 4) >> 2) + 1;
      v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
      v81 = &v73[-v80];
      v77 = &v76[-v80];
      v82 = &v74[4 * v78 - 16];
      v83 = (__int128 *)(v73 - 16);
      v84 = v79 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v85 = *v83;
        *((_OWORD *)v82 - 1) = *(v83 - 1);
        *(_OWORD *)v82 = v85;
        v82 -= 32;
        v83 -= 2;
        v84 -= 8;
      }
      while (v84);
      v73 = v81;
      if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_104;
    }
LABEL_105:
    a1[73].i64[1] = (uint64_t)v77;
    a1[74].i64[0] = (uint64_t)v76;
    a1[74].i64[1] = (uint64_t)&v74[4 * v70];
    v68 = (unsigned int *)v72;
    if (v71)
    {
      operator delete(v71);
      v69 = (unsigned int *)a1[97].i64[1];
      v68 = (unsigned int *)a1[98].i64[0];
    }
    goto LABEL_107;
  }
LABEL_577:
  if (!a1[61].i8[1])
    goto LABEL_757;
  v523 = a1[48].i64[1];
  v524 = a1[49].i64[0];
  if (v523 == v524)
    goto LABEL_600;
  v525 = a1[49].i64[0];
  while (!*(_BYTE *)(v523 + 496))
  {
    v523 += 504;
    if (v523 == v524)
      goto LABEL_601;
  }
  --*(_DWORD *)(*(_QWORD *)(v523 + 208) + 8);
  --*(_DWORD *)(*(_QWORD *)(v523 + 216) + 8);
  *(_QWORD *)(v523 + 208) = 0;
  *(_QWORD *)(v523 + 216) = 0;
  v526 = (int64x2_t)xmmword_2103B4950;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v523 != v524)
  {
    v527 = (_QWORD *)(v523 + 504);
    if (v523 + 504 != v524)
    {
      v525 = v523;
      do
      {
        while (1)
        {
          v528 = v527;
          v529 = (__int128 *)(v523 + 696);
          if (!*(_BYTE *)(v523 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v523 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v523 + 720) + 8);
          *(_QWORD *)(v523 + 712) = 0;
          *(_QWORD *)(v523 + 720) = 0;
          a1[60] = vaddq_s64(a1[60], v526);
          v527 += 63;
          v523 = (uint64_t)v528;
          if (v528 + 63 == (_QWORD *)v524)
            goto LABEL_601;
        }
        *(_QWORD *)v525 = *v527;
        *(_OWORD *)(v525 + 8) = *(_OWORD *)(v523 + 512);
        v530 = *(_OWORD *)(v523 + 608);
        v531 = *(_OWORD *)(v523 + 624);
        v532 = *(_OWORD *)(v523 + 592);
        *(_OWORD *)(v525 + 72) = *(_OWORD *)(v523 + 576);
        *(_OWORD *)(v525 + 120) = v531;
        *(_OWORD *)(v525 + 104) = v530;
        *(_OWORD *)(v525 + 88) = v532;
        v534 = *(_OWORD *)(v523 + 656);
        v533 = *(_OWORD *)(v523 + 672);
        v535 = *(_QWORD *)(v523 + 688);
        *(_OWORD *)(v525 + 136) = *(_OWORD *)(v523 + 640);
        *(_QWORD *)(v525 + 184) = v535;
        *(_OWORD *)(v525 + 168) = v533;
        *(_OWORD *)(v525 + 152) = v534;
        v536 = *(_OWORD *)(v523 + 528);
        v537 = *(_OWORD *)(v523 + 544);
        *(_OWORD *)(v525 + 56) = *(_OWORD *)(v523 + 560);
        *(_OWORD *)(v525 + 40) = v537;
        *(_OWORD *)(v525 + 24) = v536;
        v538 = *v529;
        *(_QWORD *)v529 = 0;
        *(_QWORD *)(v523 + 704) = 0;
        v539 = *(std::__shared_weak_count **)(v525 + 200);
        *(_OWORD *)(v525 + 192) = v538;
        if (v539)
        {
          p_shared_owners = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(p_shared_owners);
          while (__stlxr(v541 - 1, p_shared_owners));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
            std::__shared_weak_count::__release_weak(v539);
            v526 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v525 + 208) = *(_QWORD *)(v523 + 712);
        *(_QWORD *)(v525 + 216) = *(_QWORD *)(v523 + 720);
        v542 = *(_OWORD *)(v523 + 728);
        v543 = *(_OWORD *)(v523 + 744);
        v544 = *(_OWORD *)(v523 + 776);
        *(_OWORD *)(v525 + 256) = *(_OWORD *)(v523 + 760);
        *(_OWORD *)(v525 + 272) = v544;
        *(_OWORD *)(v525 + 224) = v542;
        *(_OWORD *)(v525 + 240) = v543;
        v545 = *(_OWORD *)(v523 + 792);
        v546 = *(_OWORD *)(v523 + 808);
        v547 = *(_OWORD *)(v523 + 824);
        *(_QWORD *)(v525 + 336) = *(_QWORD *)(v523 + 840);
        *(_OWORD *)(v525 + 304) = v546;
        *(_OWORD *)(v525 + 320) = v547;
        *(_OWORD *)(v525 + 288) = v545;
        v549 = *(_OWORD *)(v523 + 928);
        v548 = *(_OWORD *)(v523 + 944);
        v550 = *(_OWORD *)(v523 + 912);
        *(_QWORD *)(v525 + 456) = *(_QWORD *)(v523 + 960);
        *(_OWORD *)(v525 + 424) = v549;
        *(_OWORD *)(v525 + 440) = v548;
        *(_OWORD *)(v525 + 408) = v550;
        v551 = *(_OWORD *)(v523 + 848);
        v552 = *(_OWORD *)(v523 + 864);
        v553 = *(_OWORD *)(v523 + 896);
        *(_OWORD *)(v525 + 376) = *(_OWORD *)(v523 + 880);
        *(_OWORD *)(v525 + 392) = v553;
        *(_OWORD *)(v525 + 344) = v551;
        *(_OWORD *)(v525 + 360) = v552;
        v554 = *(_QWORD *)(v523 + 968);
        *(_BYTE *)(v525 + 472) = *(_BYTE *)(v523 + 976);
        *(_QWORD *)(v525 + 464) = v554;
        v555 = *(_OWORD *)(v523 + 984);
        *(_QWORD *)(v523 + 984) = 0;
        *(_QWORD *)(v523 + 992) = 0;
        v556 = *(std::__shared_weak_count **)(v525 + 488);
        *(_OWORD *)(v525 + 480) = v555;
        if (v556)
        {
          v557 = (unint64_t *)&v556->__shared_owners_;
          do
            v558 = __ldaxr(v557);
          while (__stlxr(v558 - 1, v557));
          if (!v558)
          {
            ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
            std::__shared_weak_count::__release_weak(v556);
            v526 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v525 + 496) = *(_BYTE *)(v523 + 1000);
        v525 += 504;
        v527 = v528 + 63;
        v523 = (uint64_t)v528;
      }
      while (v528 + 63 != (_QWORD *)v524);
      goto LABEL_601;
    }
LABEL_600:
    v525 = v523;
  }
LABEL_601:
  v559 = a1[49].i64[0];
  if (v525 == v559)
    goto LABEL_604;
  v560 = sub_20F5B64A0(v559, a1[49].i64[0], v525);
  for (jj = a1[49].i64[0]; jj != v560; jj -= 504)
  {
    v567 = *(std::__shared_weak_count **)(jj - 16);
    if (!v567)
      goto LABEL_615;
    v568 = (unint64_t *)&v567->__shared_owners_;
    do
      v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
      v570 = *(std::__shared_weak_count **)(jj - 304);
      if (v570)
      {
LABEL_616:
        v571 = (unint64_t *)&v570->__shared_owners_;
        do
          v572 = __ldaxr(v571);
        while (__stlxr(v572 - 1, v571));
        if (!v572)
        {
          ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
          std::__shared_weak_count::__release_weak(v570);
        }
      }
    }
    else
    {
LABEL_615:
      v570 = *(std::__shared_weak_count **)(jj - 304);
      if (v570)
        goto LABEL_616;
    }
  }
  a1[49].i64[0] = v560;
LABEL_604:
  v562 = a1[50].i64[0];
  v563 = (_QWORD *)a1[50].i64[1];
  if ((_QWORD *)v562 == v563)
  {
    v564 = a1[50].i64[0];
  }
  else
  {
    v564 = a1[50].i64[1];
    v565 = (_QWORD *)(v562 + 280);
    while (!*((_BYTE *)v565 - 8))
    {
      v566 = v565 == v563;
      v565 += 35;
      if (v566)
        goto LABEL_641;
    }
    --*(_DWORD *)(*(v565 - 18) + 8);
    *(v565 - 18) = 0;
    v573 = (int64x2_t)xmmword_2103B2310;
    a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
    v574 = v565 - 35;
    if (v565 - 35 != v563)
    {
      if (v565 == v563)
      {
        v564 = (uint64_t)(v565 - 35);
      }
      else
      {
        v564 = (uint64_t)(v565 - 35);
        do
        {
          while (1)
          {
            v575 = v565;
            if (!*((_BYTE *)v574 + 552))
              break;
            --*(_DWORD *)(v574[52] + 8);
            v574[52] = 0;
            a1[60] = vaddq_s64(a1[60], v573);
            v565 += 35;
            v574 = v575;
            if (v575 + 35 == v563)
              goto LABEL_641;
          }
          *(_QWORD *)v564 = *v565;
          *(_OWORD *)(v564 + 8) = *((_OWORD *)v574 + 18);
          v577 = *((_OWORD *)v574 + 21);
          v576 = *((_OWORD *)v574 + 22);
          v578 = v574[46];
          *(_OWORD *)(v564 + 40) = *((_OWORD *)v574 + 20);
          *(_QWORD *)(v564 + 88) = v578;
          *(_OWORD *)(v564 + 72) = v576;
          *(_OWORD *)(v564 + 56) = v577;
          *(_OWORD *)(v564 + 24) = *((_OWORD *)v574 + 19);
          v579 = *(_OWORD *)(v574 + 47);
          *(_QWORD *)(v564 + 112) = v574[49];
          *(_OWORD *)(v564 + 96) = v579;
          v580 = *((_OWORD *)v574 + 25);
          v574[50] = 0;
          v574[51] = 0;
          v581 = *(std::__shared_weak_count **)(v564 + 128);
          *(_OWORD *)(v564 + 120) = v580;
          if (v581)
          {
            v582 = (unint64_t *)&v581->__shared_owners_;
            do
              v583 = __ldaxr(v582);
            while (__stlxr(v583 - 1, v582));
            if (!v583)
            {
              ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
              std::__shared_weak_count::__release_weak(v581);
              v573 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v564 + 136) = v574[52];
          v584 = *(_OWORD *)(v574 + 53);
          v585 = *(_OWORD *)(v574 + 57);
          *(_OWORD *)(v564 + 160) = *(_OWORD *)(v574 + 55);
          *(_OWORD *)(v564 + 176) = v585;
          *(_OWORD *)(v564 + 144) = v584;
          v586 = *(_OWORD *)(v574 + 59);
          v587 = *(_OWORD *)(v574 + 63);
          *(_OWORD *)(v564 + 208) = *(_OWORD *)(v574 + 61);
          *(_OWORD *)(v564 + 224) = v587;
          *(_OWORD *)(v564 + 192) = v586;
          v588 = v574[65];
          *(_BYTE *)(v564 + 248) = *((_BYTE *)v574 + 528);
          *(_QWORD *)(v564 + 240) = v588;
          v589 = *(_OWORD *)(v574 + 67);
          v574[68] = 0;
          v574[67] = 0;
          v590 = *(std::__shared_weak_count **)(v564 + 264);
          *(_OWORD *)(v564 + 256) = v589;
          if (v590)
          {
            v591 = (unint64_t *)&v590->__shared_owners_;
            do
              v592 = __ldaxr(v591);
            while (__stlxr(v592 - 1, v591));
            if (!v592)
            {
              ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
              std::__shared_weak_count::__release_weak(v590);
              v573 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v564 + 272) = *((_BYTE *)v574 + 552);
          v564 += 280;
          v565 = v575 + 35;
          v574 = v575;
        }
        while (v575 + 35 != v563);
      }
    }
  }
LABEL_641:
  v593 = a1[50].i64[1];
  if (v564 == v593)
    goto LABEL_644;
  v594 = sub_20F5B6660(v593, a1[50].i64[1], v564);
  for (kk = a1[50].i64[1]; kk != v594; kk -= 280)
  {
    v599 = *(std::__shared_weak_count **)(kk - 16);
    if (!v599)
      goto LABEL_654;
    v600 = (unint64_t *)&v599->__shared_owners_;
    do
      v601 = __ldaxr(v600);
    while (__stlxr(v601 - 1, v600));
    if (!v601)
    {
      ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
      std::__shared_weak_count::__release_weak(v599);
      v602 = *(std::__shared_weak_count **)(kk - 152);
      if (v602)
      {
LABEL_655:
        v603 = (unint64_t *)&v602->__shared_owners_;
        do
          v604 = __ldaxr(v603);
        while (__stlxr(v604 - 1, v603));
        if (!v604)
        {
          ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
          std::__shared_weak_count::__release_weak(v602);
        }
      }
    }
    else
    {
LABEL_654:
      v602 = *(std::__shared_weak_count **)(kk - 152);
      if (v602)
        goto LABEL_655;
    }
  }
  a1[50].i64[1] = v594;
LABEL_644:
  v596 = a1[51].i64[1];
  v597 = a1[52].i64[0];
  if (v596 == v597)
    goto LABEL_668;
  v598 = a1[52].i64[0];
  while (!*(_BYTE *)(v596 + 8008))
  {
    v596 += 8016;
    if (v596 == v597)
      goto LABEL_669;
  }
  --*(_DWORD *)(*(_QWORD *)(v596 + 7696) + 8);
  --*(_DWORD *)(*(_QWORD *)(v596 + 7704) + 8);
  *(_OWORD *)(v596 + 7696) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v596 + 7712) + 8);
  --*(_DWORD *)(*(_QWORD *)(v596 + 7720) + 8);
  *(_OWORD *)(v596 + 7712) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v596 + 7728) + 8);
  *(_QWORD *)(v596 + 7728) = 0;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v596 == v597)
    goto LABEL_669;
  if (v596 + 8016 == v597)
  {
LABEL_668:
    v598 = v596;
  }
  else
  {
    v598 = v596;
    do
    {
      while (!*(_BYTE *)(v596 + 16024))
      {
        *(_QWORD *)v598 = *(_QWORD *)(v596 + 8016);
        sub_20F5B67C0(v598 + 8, v596 + 8024);
        *(_BYTE *)(v598 + 8008) = *(_BYTE *)(v596 + 16024);
        v598 += 8016;
        v605 = v596 + 16032;
        v596 += 8016;
        if (v605 == v597)
          goto LABEL_669;
      }
      --*(_DWORD *)(*(_QWORD *)(v596 + 15712) + 8);
      --*(_DWORD *)(*(_QWORD *)(v596 + 15720) + 8);
      *(_OWORD *)(v596 + 15712) = 0u;
      --*(_DWORD *)(*(_QWORD *)(v596 + 15728) + 8);
      --*(_DWORD *)(*(_QWORD *)(v596 + 15736) + 8);
      *(_OWORD *)(v596 + 15728) = 0u;
      --*(_DWORD *)(*(_QWORD *)(v596 + 15744) + 8);
      *(_QWORD *)(v596 + 15744) = 0;
      a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
      v606 = v596 + 16032;
      v596 += 8016;
    }
    while (v606 != v597);
  }
LABEL_669:
  v607 = a1[52].i64[0];
  if (v607 != v598)
  {
    do
    {
      v608 = *(std::__shared_weak_count **)(v607 - 16);
      if (v608)
      {
        v609 = (unint64_t *)&v608->__shared_owners_;
        do
          v610 = __ldaxr(v609);
        while (__stlxr(v610 - 1, v609));
        if (!v610)
        {
          ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
          std::__shared_weak_count::__release_weak(v608);
        }
      }
      v607 -= 8016;
    }
    while (v607 != v598);
    a1[52].i64[0] = v598;
  }
  v611 = a1[53].i64[0];
  v612 = a1[53].i64[1];
  if (v611 == v612)
    goto LABEL_690;
  v613 = a1[53].i64[1];
  while (!*(_BYTE *)(v611 + 5328))
  {
    v611 += 5336;
    if (v611 == v612)
      goto LABEL_691;
  }
  --*(_DWORD *)(*(_QWORD *)(v611 + 5024) + 8);
  --*(_DWORD *)(*(_QWORD *)(v611 + 5032) + 8);
  *(_OWORD *)(v611 + 5024) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v611 + 5040) + 8);
  --*(_DWORD *)(*(_QWORD *)(v611 + 5048) + 8);
  *(_OWORD *)(v611 + 5040) = 0u;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v611 == v612)
    goto LABEL_691;
  v614 = v611 + 5336;
  if (v611 + 5336 == v612)
  {
LABEL_690:
    v613 = v611;
  }
  else
  {
    v615 = (_BYTE *)(v611 + 10664);
    v613 = v611;
    do
    {
      while (!*v615)
      {
        sub_20F5B6B10(v613, v614);
        v613 += 5336;
        v614 += 5336;
        v615 += 5336;
        if (v614 == v612)
          goto LABEL_691;
      }
      --*(_DWORD *)(*((_QWORD *)v615 - 38) + 8);
      --*(_DWORD *)(*(_QWORD *)(v614 + 5032) + 8);
      *((_OWORD *)v615 - 19) = 0u;
      --*(_DWORD *)(*((_QWORD *)v615 - 36) + 8);
      --*(_DWORD *)(*((_QWORD *)v615 - 35) + 8);
      *((_OWORD *)v615 - 18) = 0u;
      a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
      v614 += 5336;
      v615 += 5336;
    }
    while (v614 != v612);
  }
LABEL_691:
  v616 = a1[53].i64[1];
  if (v616 != v613)
  {
    do
    {
      v617 = *(std::__shared_weak_count **)(v616 - 16);
      if (v617)
      {
        v618 = (unint64_t *)&v617->__shared_owners_;
        do
          v619 = __ldaxr(v618);
        while (__stlxr(v619 - 1, v618));
        if (!v619)
        {
          ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
          std::__shared_weak_count::__release_weak(v617);
        }
      }
      v616 -= 5336;
    }
    while (v616 != v613);
    a1[53].i64[1] = v613;
  }
  v620 = a1[54].i64[1];
  v621 = a1[55].i64[0];
  if (v620 == v621)
    goto LABEL_717;
  v622 = a1[55].i64[0];
  while (!*(_BYTE *)(v620 + 208))
  {
    v620 += 216;
    if (v620 == v621)
      goto LABEL_718;
  }
  --*(_DWORD *)(*(_QWORD *)(v620 + 56) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 64) + 8);
  *(_OWORD *)(v620 + 56) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 72) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 80) + 8);
  *(_OWORD *)(v620 + 72) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 88) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 96) + 8);
  *(_OWORD *)(v620 + 88) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 104) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 112) + 8);
  *(_OWORD *)(v620 + 104) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 120) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 128) + 8);
  *(_OWORD *)(v620 + 120) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 136) + 8);
  *(_QWORD *)(v620 + 136) = 0;
  v623 = (int64x2_t)xmmword_210378050;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_210378050);
  if (v620 == v621)
    goto LABEL_718;
  v624 = (_QWORD *)(v620 + 216);
  if (v620 + 216 == v621)
  {
LABEL_717:
    v622 = v620;
  }
  else
  {
    v625 = 0uLL;
    v622 = v620;
    do
    {
      while (1)
      {
        v626 = v624;
        if (!*(_BYTE *)(v620 + 424))
          break;
        --*(_DWORD *)(*(_QWORD *)(v620 + 272) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 280) + 8);
        *(_OWORD *)(v620 + 272) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 288) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 296) + 8);
        *(_OWORD *)(v620 + 288) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 304) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 312) + 8);
        *(_OWORD *)(v620 + 304) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 320) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 328) + 8);
        *(_OWORD *)(v620 + 320) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 336) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 344) + 8);
        *(_OWORD *)(v620 + 336) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 352) + 8);
        *(_QWORD *)(v620 + 352) = 0;
        a1[60] = vaddq_s64(a1[60], v623);
        v624 += 27;
        v620 = (uint64_t)v626;
        if (v626 + 27 == (_QWORD *)v621)
          goto LABEL_718;
      }
      *(_QWORD *)v622 = *v624;
      *(_QWORD *)(v622 + 8) = *(_QWORD *)(v620 + 224);
      *(_OWORD *)(v622 + 16) = *(_OWORD *)(v620 + 232);
      v627 = *(_OWORD *)(v620 + 248);
      *(_QWORD *)(v622 + 48) = *(_QWORD *)(v620 + 264);
      *(_OWORD *)(v622 + 32) = v627;
      *(_QWORD *)(v622 + 56) = *(_QWORD *)(v620 + 272);
      *(_QWORD *)(v622 + 64) = *(_QWORD *)(v620 + 280);
      *(_QWORD *)(v622 + 72) = *(_QWORD *)(v620 + 288);
      *(_QWORD *)(v622 + 80) = *(_QWORD *)(v620 + 296);
      *(_QWORD *)(v622 + 88) = *(_QWORD *)(v620 + 304);
      *(_QWORD *)(v622 + 96) = *(_QWORD *)(v620 + 312);
      *(_QWORD *)(v622 + 104) = *(_QWORD *)(v620 + 320);
      *(_QWORD *)(v622 + 112) = *(_QWORD *)(v620 + 328);
      *(_QWORD *)(v622 + 120) = *(_QWORD *)(v620 + 336);
      *(_QWORD *)(v622 + 128) = *(_QWORD *)(v620 + 344);
      *(_QWORD *)(v622 + 136) = *(_QWORD *)(v620 + 352);
      *(_OWORD *)(v622 + 144) = *(_OWORD *)(v620 + 360);
      *(_OWORD *)(v622 + 160) = *(_OWORD *)(v620 + 376);
      v628 = *(_QWORD *)(v620 + 392);
      *(_BYTE *)(v622 + 184) = *(_BYTE *)(v620 + 400);
      *(_QWORD *)(v622 + 176) = v628;
      v629 = *(_OWORD *)(v620 + 408);
      *(_QWORD *)(v620 + 416) = 0;
      *(_QWORD *)(v620 + 408) = 0;
      v630 = *(std::__shared_weak_count **)(v622 + 200);
      *(_OWORD *)(v622 + 192) = v629;
      if (v630)
      {
        v631 = (unint64_t *)&v630->__shared_owners_;
        do
          v632 = __ldaxr(v631);
        while (__stlxr(v632 - 1, v631));
        if (!v632)
        {
          ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
          std::__shared_weak_count::__release_weak(v630);
          v625 = 0uLL;
          v623 = (int64x2_t)xmmword_210378050;
        }
      }
      *(_BYTE *)(v622 + 208) = *(_BYTE *)(v620 + 424);
      v622 += 216;
      v624 = v626 + 27;
      v620 = (uint64_t)v626;
    }
    while (v626 + 27 != (_QWORD *)v621);
  }
LABEL_718:
  v633 = a1[55].i64[0];
  if (v633 != v622)
  {
    v634 = sub_20F5B6E44(v633, a1[55].i64[0], v622);
    for (mm = a1[55].i64[0]; mm != v634; mm -= 216)
    {
      v640 = *(std::__shared_weak_count **)(mm - 16);
      if (v640)
      {
        v641 = (unint64_t *)&v640->__shared_owners_;
        do
          v642 = __ldaxr(v641);
        while (__stlxr(v642 - 1, v641));
        if (!v642)
        {
          ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
          std::__shared_weak_count::__release_weak(v640);
        }
      }
    }
    a1[55].i64[0] = v634;
  }
  v636 = a1[56].i64[0];
  v637 = (_QWORD *)a1[56].i64[1];
  if ((_QWORD *)v636 == v637)
  {
    v638 = (_QWORD *)a1[56].i64[0];
  }
  else
  {
    v638 = (_QWORD *)a1[56].i64[1];
    v639 = (_QWORD *)(v636 + 888);
    while (!*((_BYTE *)v639 - 8))
    {
      v566 = v639 == v637;
      v639 += 111;
      if (v566)
        goto LABEL_747;
    }
    --*(_DWORD *)(*(v639 - 19) + 8);
    --*(_DWORD *)(*(v639 - 18) + 8);
    *(v639 - 19) = 0;
    *(v639 - 18) = 0;
    a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
    v643 = v639 - 111;
    if (v639 - 111 != v637)
    {
      if (v639 == v637)
      {
        v638 = v639 - 111;
      }
      else
      {
        v638 = v639 - 111;
        do
        {
          while (1)
          {
            v644 = v639;
            if (!*((_BYTE *)v643 + 1768))
              break;
            --*(_DWORD *)(v643[203] + 8);
            --*(_DWORD *)(v643[204] + 8);
            v643[203] = 0;
            v643[204] = 0;
            a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
            v639 += 111;
            v643 = v644;
            if (v644 + 111 == v637)
              goto LABEL_747;
          }
          *v638 = *v639;
          *(_OWORD *)(v638 + 1) = *((_OWORD *)v643 + 56);
          memcpy(v638 + 3, v643 + 114, 0x120uLL);
          memcpy(v638 + 39, v643 + 150, 0x120uLL);
          v645 = *((_OWORD *)v643 + 99);
          v646 = *((_OWORD *)v643 + 100);
          v647 = *((_OWORD *)v643 + 98);
          *(_OWORD *)(v638 + 83) = *((_OWORD *)v643 + 97);
          *(_OWORD *)(v638 + 85) = v647;
          v648 = *((_OWORD *)v643 + 93);
          v649 = *((_OWORD *)v643 + 94);
          v650 = *((_OWORD *)v643 + 96);
          *(_OWORD *)(v638 + 79) = *((_OWORD *)v643 + 95);
          *(_OWORD *)(v638 + 81) = v650;
          *(_OWORD *)(v638 + 75) = v648;
          *(_OWORD *)(v638 + 77) = v649;
          *(_OWORD *)(v638 + 87) = v645;
          *(_OWORD *)(v638 + 89) = v646;
          *((_BYTE *)v638 + 728) = *((_BYTE *)v643 + 1616);
          v638[92] = v643[203];
          v638[93] = v643[204];
          v652 = *(_OWORD *)(v643 + 207);
          v651 = *(_OWORD *)(v643 + 209);
          *((_OWORD *)v638 + 47) = *(_OWORD *)(v643 + 205);
          *((_OWORD *)v638 + 48) = v652;
          *((_OWORD *)v638 + 49) = v651;
          v653 = *(_OWORD *)(v643 + 211);
          v654 = *(_OWORD *)(v643 + 215);
          *((_OWORD *)v638 + 51) = *(_OWORD *)(v643 + 213);
          *((_OWORD *)v638 + 52) = v654;
          *((_OWORD *)v638 + 50) = v653;
          v655 = v643[217];
          *((_BYTE *)v638 + 856) = *((_BYTE *)v643 + 1744);
          v638[106] = v655;
          v656 = *(_OWORD *)(v643 + 219);
          v643[219] = 0;
          v643[220] = 0;
          v657 = (std::__shared_weak_count *)v638[109];
          *((_OWORD *)v638 + 54) = v656;
          if (v657)
          {
            v658 = (unint64_t *)&v657->__shared_owners_;
            do
              v659 = __ldaxr(v658);
            while (__stlxr(v659 - 1, v658));
            if (!v659)
            {
              ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
              std::__shared_weak_count::__release_weak(v657);
            }
          }
          *((_BYTE *)v638 + 880) = *((_BYTE *)v643 + 1768);
          v638 += 111;
          v639 = v644 + 111;
          v643 = v644;
        }
        while (v644 + 111 != v637);
      }
    }
  }
LABEL_747:
  v660 = a1[56].i64[1];
  if (v638 != (_QWORD *)v660)
  {
    while ((_QWORD *)v660 != v638)
    {
      v661 = *(std::__shared_weak_count **)(v660 - 16);
      if (v661)
      {
        v662 = (unint64_t *)&v661->__shared_owners_;
        do
          v663 = __ldaxr(v662);
        while (__stlxr(v663 - 1, v662));
        if (!v663)
        {
          ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
          std::__shared_weak_count::__release_weak(v661);
        }
      }
      v660 -= 888;
    }
    a1[56].i64[1] = (uint64_t)v638;
  }
LABEL_757:
  v664 = a1->i64[1];
  v665 = a1[1].i64[0];
  if (v665 != v664)
  {
    v666 = -16 - v665;
    do
    {
      while (1)
      {
        while (1)
        {
          v667 = *(_QWORD *)(v665 - 8);
          v665 -= 16;
          if ((*(_BYTE *)(v667 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v667 + 4) = 0;
          v666 += 16;
          if (v665 == v664)
            goto LABEL_770;
        }
        sub_20F3D7028((uint64_t)a1[2].i64, v667);
        v668 = v665 + 16;
        v664 = a1->i64[1];
        v669 = a1[1].i64[0];
        if (v665 + 16 != v669)
          break;
        a1[1].i64[0] = v665;
        v666 += 16;
        if (v665 == v664)
          goto LABEL_770;
      }
      v670 = v669 - v665 - 32;
      v671 = v665;
      if (v670 < 0x10)
        goto LABEL_930;
      v672 = (v670 >> 4) + 1;
      v673 = 16 * (v672 & 0x1FFFFFFFFFFFFFFELL);
      v671 = v665 + v673;
      v668 += v673;
      v674 = (((unint64_t)(v669 + v666) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v675 = v664 + 16 * ((v665 - v664) >> 4) + 24;
      do
      {
        v676 = *(_DWORD *)(v675 + 8);
        *(_DWORD *)(v675 - 24) = *(_DWORD *)(v675 - 8);
        *(_DWORD *)(v675 - 8) = v676;
        v677 = *(_QWORD *)(v675 + 16);
        *(_QWORD *)(v675 - 16) = *(_QWORD *)v675;
        *(_QWORD *)v675 = v677;
        v675 += 32;
        v674 -= 2;
      }
      while (v674);
      if (v672 != (v672 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_930:
        do
        {
          *(_DWORD *)v671 = *(_DWORD *)v668;
          *(_QWORD *)(v671 + 8) = *(_QWORD *)(v668 + 8);
          v671 += 16;
          v668 += 16;
        }
        while (v668 != v669);
      }
      a1[1].i64[0] = v671;
      v666 += 16;
    }
    while (v665 != v664);
  }
LABEL_770:
  v678 = a1[6].i64[1];
  v679 = a1[7].i64[0];
  if (v679 != v678)
  {
    v680 = -16 - v679;
    do
    {
      while (1)
      {
        while (1)
        {
          v681 = *(_QWORD *)(v679 - 8);
          v679 -= 16;
          if ((*(_BYTE *)(v681 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v681 + 4) = 0;
          v680 += 16;
          if (v679 == v678)
            goto LABEL_783;
        }
        sub_20F5B6F80((uint64_t)a1[8].i64, v681);
        v682 = v679 + 16;
        v678 = a1[6].i64[1];
        v683 = a1[7].i64[0];
        if (v679 + 16 != v683)
          break;
        a1[7].i64[0] = v679;
        v680 += 16;
        if (v679 == v678)
          goto LABEL_783;
      }
      v684 = v683 - v679 - 32;
      v685 = v679;
      if (v684 < 0x10)
        goto LABEL_931;
      v686 = (v684 >> 4) + 1;
      v687 = 16 * (v686 & 0x1FFFFFFFFFFFFFFELL);
      v685 = v679 + v687;
      v682 += v687;
      v688 = (((unint64_t)(v683 + v680) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v689 = v678 + 16 * ((v679 - v678) >> 4) + 24;
      do
      {
        v690 = *(_DWORD *)(v689 + 8);
        *(_DWORD *)(v689 - 24) = *(_DWORD *)(v689 - 8);
        *(_DWORD *)(v689 - 8) = v690;
        v691 = *(_QWORD *)(v689 + 16);
        *(_QWORD *)(v689 - 16) = *(_QWORD *)v689;
        *(_QWORD *)v689 = v691;
        v689 += 32;
        v688 -= 2;
      }
      while (v688);
      if (v686 != (v686 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_931:
        do
        {
          *(_DWORD *)v685 = *(_DWORD *)v682;
          *(_QWORD *)(v685 + 8) = *(_QWORD *)(v682 + 8);
          v685 += 16;
          v682 += 16;
        }
        while (v682 != v683);
      }
      a1[7].i64[0] = v685;
      v680 += 16;
    }
    while (v679 != v678);
  }
LABEL_783:
  v692 = a1[12].i64[1];
  v693 = a1[13].i64[0];
  if (v693 != v692)
  {
    v694 = -16 - v693;
    do
    {
      while (1)
      {
        while (1)
        {
          v695 = *(_QWORD *)(v693 - 8);
          v693 -= 16;
          if ((*(_BYTE *)(v695 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v695 + 4) = 0;
          v694 += 16;
          if (v693 == v692)
            goto LABEL_796;
        }
        sub_20F5B7280((uint64_t)a1[14].i64, v695);
        v696 = v693 + 16;
        v692 = a1[12].i64[1];
        v697 = a1[13].i64[0];
        if (v693 + 16 != v697)
          break;
        a1[13].i64[0] = v693;
        v694 += 16;
        if (v693 == v692)
          goto LABEL_796;
      }
      v698 = v697 - v693 - 32;
      v699 = v693;
      if (v698 < 0x10)
        goto LABEL_932;
      v700 = (v698 >> 4) + 1;
      v701 = 16 * (v700 & 0x1FFFFFFFFFFFFFFELL);
      v699 = v693 + v701;
      v696 += v701;
      v702 = (((unint64_t)(v697 + v694) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v703 = v692 + 16 * ((v693 - v692) >> 4) + 24;
      do
      {
        v704 = *(_DWORD *)(v703 + 8);
        *(_DWORD *)(v703 - 24) = *(_DWORD *)(v703 - 8);
        *(_DWORD *)(v703 - 8) = v704;
        v705 = *(_QWORD *)(v703 + 16);
        *(_QWORD *)(v703 - 16) = *(_QWORD *)v703;
        *(_QWORD *)v703 = v705;
        v703 += 32;
        v702 -= 2;
      }
      while (v702);
      if (v700 != (v700 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_932:
        do
        {
          *(_DWORD *)v699 = *(_DWORD *)v696;
          *(_QWORD *)(v699 + 8) = *(_QWORD *)(v696 + 8);
          v699 += 16;
          v696 += 16;
        }
        while (v696 != v697);
      }
      a1[13].i64[0] = v699;
      v694 += 16;
    }
    while (v693 != v692);
  }
LABEL_796:
  v706 = a1[18].i64[1];
  v707 = a1[19].i64[0];
  if (v707 != v706)
  {
    v708 = -16 - v707;
    do
    {
      while (1)
      {
        while (1)
        {
          v709 = *(_QWORD *)(v707 - 8);
          v707 -= 16;
          if ((*(_BYTE *)(v709 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v709 + 4) = 0;
          v708 += 16;
          if (v707 == v706)
            goto LABEL_809;
        }
        sub_20F5B7580((uint64_t)a1[20].i64, v709);
        v710 = v707 + 16;
        v706 = a1[18].i64[1];
        v711 = a1[19].i64[0];
        if (v707 + 16 != v711)
          break;
        a1[19].i64[0] = v707;
        v708 += 16;
        if (v707 == v706)
          goto LABEL_809;
      }
      v712 = v711 - v707 - 32;
      v713 = v707;
      if (v712 < 0x10)
        goto LABEL_933;
      v714 = (v712 >> 4) + 1;
      v715 = 16 * (v714 & 0x1FFFFFFFFFFFFFFELL);
      v713 = v707 + v715;
      v710 += v715;
      v716 = (((unint64_t)(v711 + v708) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v717 = v706 + 16 * ((v707 - v706) >> 4) + 24;
      do
      {
        v718 = *(_DWORD *)(v717 + 8);
        *(_DWORD *)(v717 - 24) = *(_DWORD *)(v717 - 8);
        *(_DWORD *)(v717 - 8) = v718;
        v719 = *(_QWORD *)(v717 + 16);
        *(_QWORD *)(v717 - 16) = *(_QWORD *)v717;
        *(_QWORD *)v717 = v719;
        v717 += 32;
        v716 -= 2;
      }
      while (v716);
      if (v714 != (v714 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_933:
        do
        {
          *(_DWORD *)v713 = *(_DWORD *)v710;
          *(_QWORD *)(v713 + 8) = *(_QWORD *)(v710 + 8);
          v713 += 16;
          v710 += 16;
        }
        while (v710 != v711);
      }
      a1[19].i64[0] = v713;
      v708 += 16;
    }
    while (v707 != v706);
  }
LABEL_809:
  v720 = a1[24].i64[1];
  v721 = a1[25].i64[0];
  if (v721 != v720)
  {
    v722 = -16 - v721;
    do
    {
      while (1)
      {
        while (1)
        {
          v723 = *(_QWORD *)(v721 - 8);
          v721 -= 16;
          if ((*(_BYTE *)(v723 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v723 + 4) = 0;
          v722 += 16;
          if (v721 == v720)
            goto LABEL_822;
        }
        sub_20F5B7880((uint64_t)a1[26].i64, (_QWORD *)v723);
        v724 = v721 + 16;
        v720 = a1[24].i64[1];
        v725 = a1[25].i64[0];
        if (v721 + 16 != v725)
          break;
        a1[25].i64[0] = v721;
        v722 += 16;
        if (v721 == v720)
          goto LABEL_822;
      }
      v726 = v725 - v721 - 32;
      v727 = v721;
      if (v726 < 0x10)
        goto LABEL_934;
      v728 = (v726 >> 4) + 1;
      v729 = 16 * (v728 & 0x1FFFFFFFFFFFFFFELL);
      v727 = v721 + v729;
      v724 += v729;
      v730 = (((unint64_t)(v725 + v722) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v731 = v720 + 16 * ((v721 - v720) >> 4) + 24;
      do
      {
        v732 = *(_DWORD *)(v731 + 8);
        *(_DWORD *)(v731 - 24) = *(_DWORD *)(v731 - 8);
        *(_DWORD *)(v731 - 8) = v732;
        v733 = *(_QWORD *)(v731 + 16);
        *(_QWORD *)(v731 - 16) = *(_QWORD *)v731;
        *(_QWORD *)v731 = v733;
        v731 += 32;
        v730 -= 2;
      }
      while (v730);
      if (v728 != (v728 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_934:
        do
        {
          *(_DWORD *)v727 = *(_DWORD *)v724;
          *(_QWORD *)(v727 + 8) = *(_QWORD *)(v724 + 8);
          v727 += 16;
          v724 += 16;
        }
        while (v724 != v725);
      }
      a1[25].i64[0] = v727;
      v722 += 16;
    }
    while (v721 != v720);
  }
LABEL_822:
  v734 = a1[30].i64[1];
  v735 = a1[31].i64[0];
  if (v735 != v734)
  {
    v736 = -16 - v735;
    do
    {
      while (1)
      {
        while (1)
        {
          v737 = *(_QWORD *)(v735 - 8);
          v735 -= 16;
          if ((*(_BYTE *)(v737 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v737 + 4) = 0;
          v736 += 16;
          if (v735 == v734)
            goto LABEL_835;
        }
        sub_20F5B7B5C((uint64_t)a1[32].i64, (_QWORD *)v737);
        v738 = v735 + 16;
        v734 = a1[30].i64[1];
        v739 = a1[31].i64[0];
        if (v735 + 16 != v739)
          break;
        a1[31].i64[0] = v735;
        v736 += 16;
        if (v735 == v734)
          goto LABEL_835;
      }
      v740 = v739 - v735 - 32;
      v741 = v735;
      if (v740 < 0x10)
        goto LABEL_935;
      v742 = (v740 >> 4) + 1;
      v743 = 16 * (v742 & 0x1FFFFFFFFFFFFFFELL);
      v741 = v735 + v743;
      v738 += v743;
      v744 = (((unint64_t)(v739 + v736) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v745 = v734 + 16 * ((v735 - v734) >> 4) + 24;
      do
      {
        v746 = *(_DWORD *)(v745 + 8);
        *(_DWORD *)(v745 - 24) = *(_DWORD *)(v745 - 8);
        *(_DWORD *)(v745 - 8) = v746;
        v747 = *(_QWORD *)(v745 + 16);
        *(_QWORD *)(v745 - 16) = *(_QWORD *)v745;
        *(_QWORD *)v745 = v747;
        v745 += 32;
        v744 -= 2;
      }
      while (v744);
      if (v742 != (v742 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_935:
        do
        {
          *(_DWORD *)v741 = *(_DWORD *)v738;
          *(_QWORD *)(v741 + 8) = *(_QWORD *)(v738 + 8);
          v741 += 16;
          v738 += 16;
        }
        while (v738 != v739);
      }
      a1[31].i64[0] = v741;
      v736 += 16;
    }
    while (v735 != v734);
  }
LABEL_835:
  v748 = a1[37].i64[0];
  v749 = a1[36].i64[1];
  if (v748 != v749)
  {
    v750 = -16 - v748;
    do
    {
      while (1)
      {
        while (1)
        {
          v751 = *(_QWORD *)(v748 - 8);
          v748 -= 16;
          if ((*(_BYTE *)(v751 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v751 + 4) = 0;
          v750 += 16;
          if (v748 == v749)
            goto LABEL_848;
        }
        sub_20F5B7E38((uint64_t)a1[38].i64, (_QWORD *)v751);
        v749 = a1[36].i64[1];
        v752 = v748 + 16;
        v753 = a1[37].i64[0];
        if (v748 + 16 != v753)
          break;
        a1[37].i64[0] = v748;
        v750 += 16;
        if (v748 == v749)
          goto LABEL_848;
      }
      v754 = v753 - v748 - 32;
      v755 = v748;
      if (v754 < 0x10)
        goto LABEL_936;
      v756 = (v754 >> 4) + 1;
      v757 = 16 * (v756 & 0x1FFFFFFFFFFFFFFELL);
      v755 = v748 + v757;
      v752 += v757;
      v758 = (((unint64_t)(v753 + v750) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v759 = v749 + 16 * ((v748 - v749) >> 4) + 24;
      do
      {
        v760 = *(_DWORD *)(v759 + 8);
        *(_DWORD *)(v759 - 24) = *(_DWORD *)(v759 - 8);
        *(_DWORD *)(v759 - 8) = v760;
        v761 = *(_QWORD *)(v759 + 16);
        *(_QWORD *)(v759 - 16) = *(_QWORD *)v759;
        *(_QWORD *)v759 = v761;
        v759 += 32;
        v758 -= 2;
      }
      while (v758);
      if (v756 != (v756 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_936:
        do
        {
          *(_DWORD *)v755 = *(_DWORD *)v752;
          *(_QWORD *)(v755 + 8) = *(_QWORD *)(v752 + 8);
          v755 += 16;
          v752 += 16;
        }
        while (v752 != v753);
      }
      a1[37].i64[0] = v755;
      v750 += 16;
    }
    while (v748 != v749);
  }
LABEL_848:
  v762 = a1[43].i64[0];
  v763 = a1[42].i64[1];
  if (v762 != v763)
  {
    v764 = -16 - v762;
    do
    {
      while (1)
      {
        while (1)
        {
          v765 = *(_QWORD *)(v762 - 8);
          v762 -= 16;
          if ((*(_BYTE *)(v765 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v765 + 4) = 0;
          v764 += 16;
          if (v762 == v763)
            goto LABEL_861;
        }
        sub_20F394BB8((uint64_t)a1[44].i64, v765);
        v763 = a1[42].i64[1];
        v766 = v762 + 16;
        v767 = a1[43].i64[0];
        if (v762 + 16 != v767)
          break;
        a1[43].i64[0] = v762;
        v764 += 16;
        if (v762 == v763)
          goto LABEL_861;
      }
      v768 = v767 - v762 - 32;
      v769 = v762;
      if (v768 < 0x10)
        goto LABEL_937;
      v770 = (v768 >> 4) + 1;
      v771 = 16 * (v770 & 0x1FFFFFFFFFFFFFFELL);
      v769 = v762 + v771;
      v766 += v771;
      v772 = (((unint64_t)(v767 + v764) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v773 = v763 + 16 * ((v762 - v763) >> 4) + 24;
      do
      {
        v774 = *(_DWORD *)(v773 + 8);
        *(_DWORD *)(v773 - 24) = *(_DWORD *)(v773 - 8);
        *(_DWORD *)(v773 - 8) = v774;
        v775 = *(_QWORD *)(v773 + 16);
        *(_QWORD *)(v773 - 16) = *(_QWORD *)v773;
        *(_QWORD *)v773 = v775;
        v773 += 32;
        v772 -= 2;
      }
      while (v772);
      if (v770 != (v770 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_937:
        do
        {
          *(_DWORD *)v769 = *(_DWORD *)v766;
          *(_QWORD *)(v769 + 8) = *(_QWORD *)(v766 + 8);
          v769 += 16;
          v766 += 16;
        }
        while (v766 != v767);
      }
      a1[43].i64[0] = v769;
      v764 += 16;
    }
    while (v762 != v763);
  }
LABEL_861:
  a1[61].i16[0] = 1;
  a1[62].i64[0] = a1[61].i64[1];
  a1[74].i64[0] = a1[73].i64[1];
  a1[86].i64[0] = a1[85].i64[1];
  a1[63].i64[1] = a1[63].i64[0];
  a1[75].i64[1] = a1[75].i64[0];
  a1[87].i64[1] = a1[87].i64[0];
  a1[65].i64[0] = a1[64].i64[1];
  a1[77].i64[0] = a1[76].i64[1];
  a1[89].i64[0] = a1[88].i64[1];
  a1[66].i64[1] = a1[66].i64[0];
  a1[78].i64[1] = a1[78].i64[0];
  a1[90].i64[1] = a1[90].i64[0];
  a1[68].i64[0] = a1[67].i64[1];
  a1[80].i64[0] = a1[79].i64[1];
  a1[92].i64[0] = a1[91].i64[1];
  a1[69].i64[1] = a1[69].i64[0];
  a1[81].i64[1] = a1[81].i64[0];
  a1[93].i64[1] = a1[93].i64[0];
  a1[71].i64[0] = a1[70].i64[1];
  a1[83].i64[0] = a1[82].i64[1];
  a1[95].i64[0] = a1[94].i64[1];
  a1[72].i64[1] = a1[72].i64[0];
  a1[84].i64[1] = a1[84].i64[0];
  a1[96].i64[1] = a1[96].i64[0];
  v776 = a1->i64[1];
  v777 = a1[1].i64[0];
  if (v776 != v777)
  {
    v778 = 0;
    do
    {
      v779 = *(_QWORD *)(v776 + 8);
      if (*(_BYTE *)(v779 + 20))
        v780 = v778;
      else
        v780 = -1;
      v778 += *(unsigned __int8 *)(v779 + 20);
      *(_DWORD *)v779 = v780;
      v776 += 16;
    }
    while (v776 != v777);
  }
  v781 = a1[6].i64[1];
  v782 = a1[7].i64[0];
  if (v781 != v782)
  {
    v783 = 0;
    do
    {
      v784 = *(_QWORD *)(v781 + 8);
      if (*(_BYTE *)(v784 + 20))
        v785 = v783;
      else
        v785 = -1;
      v783 += *(unsigned __int8 *)(v784 + 20);
      *(_DWORD *)v784 = v785;
      v781 += 16;
    }
    while (v781 != v782);
  }
  v786 = a1[12].i64[1];
  v787 = a1[13].i64[0];
  if (v786 != v787)
  {
    v788 = 0;
    do
    {
      v789 = *(_QWORD *)(v786 + 8);
      if (*(_BYTE *)(v789 + 20))
        v790 = v788;
      else
        v790 = -1;
      v788 += *(unsigned __int8 *)(v789 + 20);
      *(_DWORD *)v789 = v790;
      v786 += 16;
    }
    while (v786 != v787);
  }
  v791 = a1[18].i64[1];
  v792 = a1[19].i64[0];
  if (v791 != v792)
  {
    v793 = 0;
    do
    {
      v794 = *(_QWORD *)(v791 + 8);
      if (*(_BYTE *)(v794 + 20))
        v795 = v793;
      else
        v795 = -1;
      v793 += *(unsigned __int8 *)(v794 + 20);
      *(_DWORD *)v794 = v795;
      v791 += 16;
    }
    while (v791 != v792);
  }
  v796 = a1[24].i64[1];
  v797 = a1[25].i64[0];
  if (v796 != v797)
  {
    v798 = 0;
    do
    {
      v799 = *(_QWORD *)(v796 + 8);
      if (*(_BYTE *)(v799 + 20))
        v800 = v798;
      else
        v800 = -1;
      v798 += *(unsigned __int8 *)(v799 + 20);
      *(_DWORD *)v799 = v800;
      v796 += 16;
    }
    while (v796 != v797);
  }
  v801 = a1[30].i64[1];
  v802 = a1[31].i64[0];
  if (v801 != v802)
  {
    v803 = 0;
    do
    {
      v804 = *(_QWORD *)(v801 + 8);
      if (*(_BYTE *)(v804 + 20))
        v805 = v803;
      else
        v805 = -1;
      v803 += *(unsigned __int8 *)(v804 + 20);
      *(_DWORD *)v804 = v805;
      v801 += 16;
    }
    while (v801 != v802);
  }
  v806 = a1[36].i64[1];
  v807 = a1[37].i64[0];
  if (v806 != v807)
  {
    v808 = 0;
    do
    {
      v809 = *(_QWORD *)(v806 + 8);
      if (*(_BYTE *)(v809 + 20))
        v810 = v808;
      else
        v810 = -1;
      v808 += *(unsigned __int8 *)(v809 + 20);
      *(_DWORD *)v809 = v810;
      v806 += 16;
    }
    while (v806 != v807);
  }
  v811 = a1[42].i64[1];
  v812 = a1[43].i64[0];
  if (v811 != v812)
  {
    v813 = 0;
    do
    {
      v814 = *(_QWORD *)(v811 + 8);
      if (*(_BYTE *)(v814 + 20))
        v815 = v813;
      else
        v815 = -1;
      v813 += *(unsigned __int8 *)(v814 + 20);
      *(_DWORD *)v814 = v815;
      v811 += 16;
    }
    while (v811 != v812);
  }
}

void sub_20F7545A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F59A618(v1);
    _Unwind_Resume(a1);
  }
  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void **sub_20F75462C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_20E86872C((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F754694(unint64_t *a1, void *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  char *v40;

  v3 = a3;
  v5 = *a1;
  v6 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 >> 2;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v10 = (char *)a1[2];
  if (v10 != (char *)v6)
  {
    if ((char *)v6 == v9)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = (unint64_t)(v9 + 4);
      return;
    }
    v11 = v6 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v6 - 4);
    if (v6 < 4)
    {
      v17 = (_DWORD *)a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = v14 + v5 + 4;
      if (v6 > v15)
        v15 = a1[1];
      v16 = v15 + ~v5 - v14;
      if (v16 >= 0x2C)
      {
        v17 = (_DWORD *)a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v5] >= 0x20)
        {
          v25 = (v16 >> 2) + 1;
          v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v26);
          v17 = (_DWORD *)(v6 + v26);
          v27 = (_OWORD *)(v6 + 16);
          v28 = (__int128 *)(4 * v12 + 4 * v8 + v5 + 16);
          v29 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v30 = *v28;
            *(v27 - 1) = *(v28 - 1);
            *v27 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 8;
          }
          while (v29);
          if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_28;
        }
      }
      else
      {
        v17 = (_DWORD *)a1[1];
      }
      do
      {
        v31 = *v13++;
        *v17++ = v31;
      }
      while ((unint64_t)v13 < v6);
    }
LABEL_28:
    a1[1] = (unint64_t)v17;
    if ((char *)v6 != v9 + 4)
      memmove((void *)(v6 - 4 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 4 * (a1[1] > (unint64_t)v3);
    *(_DWORD *)v9 = *(_DWORD *)v3;
    return;
  }
  v18 = ((uint64_t)(v6 - v5) >> 2) + 1;
  if (v18 >> 62)
    sub_20E867F44();
  if ((uint64_t)&v10[-v5] >> 1 > v18)
    v18 = (uint64_t)&v10[-v5] >> 1;
  if ((unint64_t)&v10[-v5] >= 0x7FFFFFFFFFFFFFFCLL)
    v20 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 62)
      sub_20E877A38();
    v21 = operator new(4 * v20);
  }
  else
  {
    v21 = 0;
  }
  v22 = &v21[4 * v8];
  *v22 = *(_DWORD *)v3;
  v23 = (char *)(v22 + 1);
  if ((void *)v5 != a2)
  {
    if ((unint64_t)(v7 - 4) >= 0x3C)
    {
      v24 = v9;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v5 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
      {
        v32 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
        v24 = &v9[-v33];
        v22 = (_DWORD *)((char *)v22 - v33);
        v34 = 4 * (v7 >> 2) - 16;
        v35 = &v21[v34];
        v36 = (__int128 *)(v5 + v34);
        v37 = v32 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v38 = *v36;
          *(v35 - 1) = *(v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 2;
          v37 -= 8;
        }
        while (v37);
        if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
    }
    else
    {
      v24 = v9;
    }
    do
    {
      v39 = *((_DWORD *)v24 - 1);
      v24 -= 4;
      *--v22 = v39;
    }
    while (v24 != (char *)v5);
  }
LABEL_38:
  v40 = &v21[4 * v20];
  if (v10 != v9)
    memmove(v23, v9, v6 - (_QWORD)v9);
  *a1 = (unint64_t)v22;
  a1[1] = (unint64_t)&v23[v6 - (_QWORD)v9];
  a1[2] = (unint64_t)v40;
  if (v5)
    operator delete((void *)v5);
}

void sub_20F75496C(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  _QWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v3 = a3[2];
  v4 = a2 - 1;
  if (*(_QWORD *)(v3 - 8) >= (uint64_t)*(a2 - 1))
    return;
  if ((unsigned int *)a1 != a2)
  {
    v6 = a3[1];
    v7 = (unint64_t)a2 - a1 - 4;
    if (v7 < 0xC)
    {
      v8 = (_QWORD *)a3[1];
      v9 = (unsigned int *)a1;
      do
      {
LABEL_8:
        v17 = *v9++;
        *v8++ = v17;
      }
      while (v9 != a2);
      goto LABEL_9;
    }
    v10 = (v7 >> 2) + 1;
    v8 = (_QWORD *)(v6 + 8 * (v10 & 0x7FFFFFFFFFFFFFFCLL));
    v9 = (unsigned int *)(a1 + 4 * (v10 & 0x7FFFFFFFFFFFFFFCLL));
    v11 = (_QWORD *)(a1 + 8);
    v12 = (_OWORD *)(v6 + 16);
    v13 = v10 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *(v11 - 1);
      *(_QWORD *)&v15 = v14;
      *((_QWORD *)&v15 + 1) = HIDWORD(v14);
      v16 = v15;
      *(_QWORD *)&v15 = *v11;
      *((_QWORD *)&v15 + 1) = HIDWORD(*v11);
      *(v12 - 1) = v16;
      *v12 = v15;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFFCLL))
      goto LABEL_8;
  }
LABEL_9:
  if (v4 != (unsigned int *)a1)
  {
    v18 = a3[4];
    v19 = (unint64_t)a2 - a1 - 8;
    if (v19 >= 0xC)
    {
      v22 = (v19 >> 2) + 1;
      v20 = (_QWORD *)(v18 + 8 * (v22 & 0x7FFFFFFFFFFFFFFCLL));
      v21 = (unsigned int *)(a1 + 4 * (v22 & 0x7FFFFFFFFFFFFFFCLL));
      v23 = (_QWORD *)(a1 + 8);
      v24 = (_OWORD *)(v18 + 16);
      v25 = v22 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(v23 - 1);
        *(_QWORD *)&v27 = v26;
        *((_QWORD *)&v27 + 1) = HIDWORD(v26);
        v28 = v27;
        *(_QWORD *)&v27 = *v23;
        *((_QWORD *)&v27 + 1) = HIDWORD(*v23);
        *(v24 - 1) = v28;
        *v24 = v27;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v22 == (v22 & 0x7FFFFFFFFFFFFFFCLL))
        goto LABEL_16;
    }
    else
    {
      v20 = (_QWORD *)a3[4];
      v21 = (unsigned int *)a1;
    }
    do
    {
      v29 = *v21++;
      *v20++ = v29;
    }
    while (v21 != v4);
  }
LABEL_16:
  v30 = a3[10];
  v31 = a3[11];
  v32 = *(_QWORD *)(v3 - 8);
  v37 = 0;
  v33 = (v31 - v30) >> 3;
  if (v32 <= v33)
  {
    if (v32 < v33)
      a3[11] = v30 + 8 * v32;
  }
  else
  {
    sub_20F0052C8((uint64_t)(a3 + 10), v32 - v33, &v37);
    v3 = a3[2];
  }
  v34 = a3[7];
  v35 = *(_QWORD *)(v3 - 8);
  v36 = (a3[8] - v34) >> 2;
  if (v35 <= v36)
  {
    if (v35 < v36)
      a3[8] = v34 + 4 * v35;
  }
  else
  {
    sub_20EAC24FC((uint64_t)(a3 + 7), v35 - v36);
  }
}

void sub_20F754B20(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 3;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 3)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 3);
    if (v16 >> 61)
      sub_20E867F44();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v20 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
      v21 = v18;
      v22 = operator new(8 * v18);
      v18 = v21;
      v14 = (char *)v20;
      v13 = v12 >> 3;
      v7 = __src;
      v9 = a1;
    }
    else
    {
      v22 = 0;
    }
    v36 = &v22[8 * v13];
    v37 = &v36[8 * a5];
    v38 = v36;
    v39 = v7;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_56;
    v38 = &v22[8 * v13];
    v39 = v7;
    if ((unint64_t)(&v22[v12 & 0xFFFFFFFFFFFFFFF8] - v7) < 0x20)
      goto LABEL_56;
    v40 = (v5 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v38 = &v36[v41];
    v39 = &v7[v41];
    v42 = (__int128 *)(v7 + 16);
    v43 = &v22[8 * v13 + 16];
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v42;
      *(v43 - 1) = *(v42 - 1);
      *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v46 = *(_QWORD *)v39;
        v39 += 8;
        *(_QWORD *)v38 = v46;
        v38 += 8;
      }
      while (v38 != v37);
    }
    if ((_BYTE *)v11 == a2)
      goto LABEL_38;
    if ((unint64_t)(v12 - 8) >= 0x68)
    {
      v47 = v14;
      if ((v12 & 0xFFFFFFFFFFFFFFF8) + v11 - (unint64_t)&v22[v12 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v48 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v47 = &v14[-v49];
        v36 -= v49;
        v50 = 8 * v13 - 16;
        v51 = &v22[v50];
        v52 = (__int128 *)(v11 + v50);
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *v52;
          *(v51 - 1) = *(v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 2;
          v53 -= 4;
        }
        while (v53);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
    }
    else
    {
      v47 = v14;
    }
    do
    {
      v55 = *((_QWORD *)v47 - 1);
      v47 -= 8;
      *((_QWORD *)v36 - 1) = v55;
      v36 -= 8;
    }
    while (v47 != (char *)v11);
LABEL_38:
    v56 = &v22[8 * v18];
    v57 = v10 - (_QWORD)v14;
    if (v57)
      memmove(v37, v14, v57);
    *v9 = v36;
    v9[1] = &v37[v57];
    v9[2] = v56;
    if (v11)
      operator delete((void *)v11);
    return;
  }
  v23 = v10 - (_QWORD)v14;
  v24 = (uint64_t)(v10 - (_QWORD)v14) >> 3;
  if (v24 >= a5)
  {
    v25 = &__src[8 * a5];
    v27 = (unint64_t)a1[1];
    goto LABEL_18;
  }
  v25 = &__src[8 * v24];
  v26 = a4 - v25;
  if (a4 != v25)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
    memmove(a1[1], &__src[8 * v24], a4 - v25);
    v13 = v12 >> 3;
    v14 = (char *)v67;
  }
  v27 = v10 + v26;
  v9[1] = (char *)(v10 + v26);
  if (v23 >= 1)
  {
LABEL_18:
    v28 = &v14[8 * a5];
    v29 = v27 - (_QWORD)v28;
    v30 = (uint64_t)(v27 - (_QWORD)v28) >> 3;
    v31 = (uint64_t *)(v27 - 8 * a5);
    v32 = (char *)v27;
    if ((unint64_t)v31 < v10)
    {
      v33 = (v12 & 0xFFFFFFFFFFFFFFF8) + v29;
      v34 = v33 + v11 + 8;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v33;
      if (v35 >= 0x58)
      {
        v32 = (char *)v27;
        if ((unint64_t)&v28[-(v12 & 0xFFFFFFFFFFFFFFF8) - v11] >= 0x20)
        {
          v58 = (v35 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = (uint64_t *)((char *)v31 + v59);
          v32 = (char *)(v27 + v59);
          v60 = (_OWORD *)(v27 + 16);
          v61 = (__int128 *)(8 * v30 + 8 * v13 + v11 + 16);
          v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *v60 = v63;
            v60 += 2;
            v61 += 2;
            v62 -= 4;
          }
          while (v62);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
      }
      else
      {
        v32 = (char *)v27;
      }
      do
      {
        v64 = *v31++;
        *(_QWORD *)v32 = v64;
        v32 += 8;
      }
      while ((unint64_t)v31 < v10);
    }
LABEL_47:
    v9[1] = v32;
    if ((char *)v27 != v28)
    {
      v65 = v14;
      memmove((void *)(v27 - 8 * v30), v14, v29);
      v14 = v65;
    }
    if (v25 != v7)
      memmove(v14, v7, v25 - v7);
  }
}

uint64_t *sub_20F754EF8(uint64_t *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int32x4_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t **v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int32x4_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  unsigned int v81;
  uint64_t *v82;
  _DWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  unint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  unsigned int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t **v115;
  uint64_t **v116;
  unsigned int v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int32x4_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t **v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int32x4_t v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t **v146;
  uint64_t **v147;
  unsigned int v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int32x4_t v153;
  unsigned int *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t **v161;
  uint64_t **v162;
  unsigned int v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int32x4_t v168;
  unsigned int *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t **v176;
  uint64_t **v177;
  unsigned int v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  int32x4_t *v182;
  int32x4_t v183;
  int32x4_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t **v189;
  uint64_t **v190;
  unsigned int v191;
  _DWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t v197;
  unsigned int *v198;
  unsigned int *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t **v206;
  uint64_t **v207;
  unsigned int v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t *v211;
  int32x4_t *v212;
  int32x4_t v213;
  int32x4_t v214;
  unsigned int *v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t **v225;
  unsigned int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  int32x4_t *v230;
  int32x4_t v231;
  int32x4_t v232;
  unsigned int *v233;
  unsigned int *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t **v241;
  uint64_t **v242;
  unsigned int v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t *v246;
  int32x4_t *v247;
  int32x4_t v248;
  int32x4_t v249;
  unsigned int *v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t **v259;
  uint64_t **v260;
  unsigned int v261;
  _DWORD *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  int32x4_t v266;
  unsigned int *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t **v274;
  uint64_t **v275;
  unsigned int v276;
  _DWORD *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int32x4_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t **v286;
  uint64_t **v287;
  unsigned int v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  int32x4_t v293;
  unsigned int *v294;
  unsigned int *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t **v302;
  uint64_t **v303;
  unsigned int v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  int32x4_t v309;
  unsigned int *v310;
  unsigned int *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t **v318;
  uint64_t **v319;
  unsigned int v320;
  _DWORD *v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  int32x4_t v325;
  unsigned int *v326;
  unsigned int *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t **v335;
  unsigned int v336;
  _DWORD *v337;
  uint64_t v338;
  uint64_t *v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t **v351;
  uint64_t **v352;
  unsigned int v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t *v356;
  int32x4_t *v357;
  int32x4_t v358;
  int32x4_t v359;
  unsigned int *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t **v367;
  uint64_t **v368;
  unsigned int v369;
  _DWORD *v370;
  uint64_t v371;
  uint64_t *v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t **v380;
  uint64_t **v381;
  unsigned int v382;
  _DWORD *v383;
  uint64_t v384;
  uint64_t *v385;
  int32x4_t *v386;
  int32x4_t v387;
  int32x4_t v388;
  unsigned int *v389;
  unsigned int *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t **v397;
  uint64_t **v398;
  unsigned int v399;
  _DWORD *v400;
  uint64_t v401;
  uint64_t *v402;
  unsigned int *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t **v410;
  uint64_t **v411;
  unsigned int v412;
  _DWORD *v413;
  uint64_t v414;
  uint64_t *v415;
  int32x4_t *v416;
  int32x4_t v417;
  int32x4_t v418;
  unsigned int *v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t **v426;
  uint64_t **v427;
  unsigned int v428;
  _DWORD *v429;
  uint64_t v430;
  uint64_t *v431;
  unsigned int *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t **v439;
  uint64_t **v440;
  unsigned int v441;
  _DWORD *v442;
  uint64_t v443;
  uint64_t *v444;
  unsigned int *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t **v452;
  uint64_t **v453;
  unsigned int v454;
  _DWORD *v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t **v462;
  uint64_t **v463;
  unsigned int v464;
  _DWORD *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t *v469;
  int32x4_t *v470;
  int32x4_t v471;
  int32x4_t v472;
  unsigned int *v473;
  unsigned int *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  unint64_t *v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t **v486;
  uint64_t **v487;
  unsigned int v488;
  _DWORD *v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  int32x4_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t **v500;
  uint64_t **v501;
  unsigned int v502;
  _DWORD *v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  int32x4_t v507;
  unsigned int *v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t **v516;
  uint64_t **v517;
  unsigned int v518;
  _DWORD *v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  int32x4_t v523;
  unsigned int *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t **v531;
  uint64_t **v532;
  unsigned int v533;
  _DWORD *v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  int32x4_t v538;
  unsigned int *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  uint64_t **v546;
  uint64_t **v547;
  unsigned int v548;
  _DWORD *v549;
  uint64_t v550;
  uint64_t *v551;
  int32x4_t *v552;
  int32x4_t v553;
  int32x4_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t *v558;
  uint64_t **v559;
  uint64_t **v560;
  unsigned int v561;
  _DWORD *v562;
  uint64_t v563;
  uint64_t *v564;
  int32x4_t *v565;
  int32x4_t v566;
  int32x4_t v567;
  unsigned int *v568;
  unsigned int *v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t **v576;
  uint64_t **v577;
  unsigned int v578;
  _DWORD *v579;
  uint64_t v580;
  uint64_t *v581;
  int32x4_t *v582;
  int32x4_t v583;
  int32x4_t v584;
  unsigned int *v585;
  unsigned int *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t **v594;
  uint64_t **v595;
  unsigned int v596;
  _DWORD *v597;
  uint64_t v598;
  uint64_t *v599;
  int32x4_t *v600;
  int32x4_t v601;
  int32x4_t v602;
  unsigned int *v603;
  unsigned int *v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t **v612;
  uint64_t **v613;
  unsigned int v614;
  _DWORD *v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  int32x4_t v619;
  unsigned int *v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t **v627;
  uint64_t **v628;
  unsigned int v629;
  _DWORD *v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  int32x4_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  uint64_t **v639;
  uint64_t **v640;
  unsigned int v641;
  _DWORD *v642;
  uint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  int32x4_t v646;
  unsigned int *v647;
  unsigned int *v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned int *v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t **v660;
  uint64_t **v661;
  unsigned int v662;
  _DWORD *v663;
  uint64_t v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t **v668;
  uint64_t **v669;
  unsigned int v670;
  _DWORD *v671;
  uint64_t v672;
  uint64_t *v673;
  int32x4_t *v674;
  int32x4_t v675;
  int32x4_t v676;
  unsigned int *v677;
  uint64_t v678;
  int32x4_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t *v686;
  uint64_t **v687;
  uint64_t **v688;
  unsigned int v689;
  _DWORD *v690;
  uint64_t v691;
  uint64_t *v692;
  int32x4_t *v693;
  int32x4_t v694;
  int32x4_t v695;
  unsigned int *v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t **v703;
  uint64_t **v704;
  unsigned int v705;
  _DWORD *v706;
  uint64_t v707;
  uint64_t *v708;
  int32x4_t *v709;
  int32x4_t v710;
  int32x4_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t *v715;
  uint64_t **v716;
  uint64_t **v717;
  unsigned int v718;
  _DWORD *v719;
  uint64_t v720;
  _QWORD *v721;
  _QWORD *v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t v727;
  int32x4_t v728;
  unsigned int *v729;
  unsigned int *v730;
  uint64_t v731;
  int v732;
  unint64_t *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t *v740;
  uint64_t **v741;
  uint64_t **v742;
  unsigned int v743;
  _DWORD *v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t v747;
  int32x4_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t **v756;
  uint64_t **v757;
  unsigned int v758;
  _DWORD *v759;
  uint64_t v760;
  uint64_t *v761;
  uint64_t v762;
  int32x4_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t *v770;
  uint64_t **v771;
  uint64_t **v772;
  unsigned int v773;
  _DWORD *v774;
  uint64_t v775;
  uint64_t *v776;
  uint64_t v777;
  int32x4_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t **v783;
  uint64_t **v784;
  unsigned int v785;
  _DWORD *v786;
  uint64_t v787;
  uint64_t *v788;
  unint64_t *v789;
  unint64_t *v790;
  unint64_t *v791;
  _QWORD *v792;
  _QWORD *v793;
  unint64_t *v794;
  unint64_t *v795;
  unint64_t *v796;
  _QWORD *v797;
  _QWORD *v798;
  _QWORD *v799;
  _QWORD *v800;
  _QWORD *v801;
  _QWORD *v802;
  _QWORD *v803;
  _QWORD *v804;
  uint64_t *v805;
  uint64_t *v806;
  uint64_t *v807;
  uint64_t *v808;

  v2 = (uint64_t *)*result;
  v1 = (_QWORD *)result[1];
  v788 = result;
  v3 = v1[97];
  v4 = v1[98];
  if (v3 != v4)
  {
    v805 = (uint64_t *)*result;
    do
    {
      v10 = *(unsigned int **)(v3 + 208);
      v9 = *(unsigned int **)(v3 + 216);
      if (((*((unsigned __int8 *)v9 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v10 + 4)) >> 7)
      {
        v11 = v2[1];
        if (!*((_BYTE *)v10 + 20) || *v10 != -1)
        {
          v12 = *((unsigned __int8 *)v9 + 20);
          if (!*((_BYTE *)v9 + 20) || *v9 != -1)
          {
            v14 = (_QWORD *)v2[2];
            v13 = (unint64_t *)v2[3];
            v15 = (_QWORD *)v2[4];
            v16 = (_QWORD *)v2[5];
            if (*((_BYTE *)v10 + 20))
            {
              v17 = *(_QWORD *)(v11 + 17864) + *v10;
              v18 = *(_QWORD *)(*v14 + 8 * v17);
              if (v18 <= *v13)
              {
                v19 = *v15 + 24 * v17;
                v21 = (uint64_t **)(v19 + 8);
                v20 = *(uint64_t **)(v19 + 8);
                if (v20)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v22 = (uint64_t **)v20;
                      v23 = *((_DWORD *)v20 + 7);
                      if (v23 <= v17)
                        break;
                      v20 = *v22;
                      v21 = v22;
                      if (!*v22)
                        goto LABEL_20;
                    }
                    if (v23 >= v17)
                      break;
                    v20 = v22[1];
                    if (!v20)
                    {
                      v21 = v22 + 1;
                      goto LABEL_20;
                    }
                  }
                }
                else
                {
                  v22 = (uint64_t **)(v19 + 8);
LABEL_20:
                  v789 = (unint64_t *)v2[3];
                  v797 = (_QWORD *)v2[4];
                  v24 = operator new(0x20uLL);
                  v24[7] = v17;
                  *(_QWORD *)v24 = 0;
                  *((_QWORD *)v24 + 1) = 0;
                  *((_QWORD *)v24 + 2) = v22;
                  *v21 = (uint64_t *)v24;
                  v25 = **(_QWORD **)v19;
                  if (v25)
                  {
                    *(_QWORD *)v19 = v25;
                    v26 = *v21;
                  }
                  else
                  {
                    v26 = (uint64_t *)v24;
                  }
                  result = sub_20E868578(*(uint64_t **)(v19 + 8), v26);
                  ++*(_QWORD *)(v19 + 16);
                  v27 = *v16 + 4 * v18;
                  v28.i64[0] = 0x600000006;
                  v28.i64[1] = 0x600000006;
                  *(int32x4_t *)v27 = vaddq_s32(*(int32x4_t *)v27, v28);
                  *(int32x2_t *)(v27 + 16) = vadd_s32(*(int32x2_t *)(v27 + 16), (int32x2_t)0x600000006);
                  v10 = *(unsigned int **)(v3 + 208);
                  v9 = *(unsigned int **)(v3 + 216);
                  v12 = *((unsigned __int8 *)v9 + 20);
                  v15 = v797;
                  v2 = v805;
                  v13 = v789;
                }
              }
            }
            if (v12)
            {
              if (*((_BYTE *)v10 + 20))
              {
                v29 = *(_QWORD *)(v11 + 17872) + *v9;
                v30 = *(_QWORD *)(*v14 + 8 * v29);
                v31 = *(_QWORD *)(v11 + 17864) + *v10;
                v32 = *(_QWORD *)(*v14 + 8 * v31);
                if (v30 <= v32 && v30 <= *v13)
                {
                  v33 = *v15 + 24 * v31;
                  v35 = (uint64_t **)(v33 + 8);
                  v34 = *(uint64_t **)(v33 + 8);
                  if (v34)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v36 = (uint64_t **)v34;
                        v37 = *((_DWORD *)v34 + 7);
                        if (v37 <= v29)
                          break;
                        v34 = *v36;
                        v35 = v36;
                        if (!*v36)
                          goto LABEL_35;
                      }
                      if (v37 >= v29)
                        break;
                      v34 = v36[1];
                      if (!v34)
                      {
                        v35 = v36 + 1;
                        goto LABEL_35;
                      }
                    }
                  }
                  else
                  {
                    v36 = (uint64_t **)(v33 + 8);
LABEL_35:
                    v790 = v13;
                    v798 = v15;
                    v38 = operator new(0x20uLL);
                    v38[7] = v29;
                    *(_QWORD *)v38 = 0;
                    *((_QWORD *)v38 + 1) = 0;
                    *((_QWORD *)v38 + 2) = v36;
                    *v35 = (uint64_t *)v38;
                    v39 = **(_QWORD **)v33;
                    if (v39)
                    {
                      *(_QWORD *)v33 = v39;
                      v40 = *v35;
                    }
                    else
                    {
                      v40 = (uint64_t *)v38;
                    }
                    result = sub_20E868578(*(uint64_t **)(v33 + 8), v40);
                    ++*(_QWORD *)(v33 + 16);
                    v41 = *v16 + 4 * v32;
                    v42.i64[0] = 0x900000009;
                    v42.i64[1] = 0x900000009;
                    *(int32x4_t *)v41 = vaddq_s32(*(int32x4_t *)v41, v42);
                    *(int32x2_t *)(v41 + 16) = vadd_s32(*(int32x2_t *)(v41 + 16), (int32x2_t)0x900000009);
                    v10 = *(unsigned int **)(v3 + 208);
                    v9 = *(unsigned int **)(v3 + 216);
                    v15 = v798;
                    v2 = v805;
                    v13 = v790;
                  }
                }
              }
            }
            if (*((_BYTE *)v10 + 20))
            {
              if (*((_BYTE *)v9 + 20))
              {
                v43 = *(_QWORD *)(v11 + 17864) + *v10;
                v44 = *(_QWORD *)(*v14 + 8 * v43);
                v45 = *(_QWORD *)(v11 + 17872) + *v9;
                v46 = *(_QWORD *)(*v14 + 8 * v45);
                if (v44 <= v46 && v44 <= *v13)
                {
                  v47 = *v15 + 24 * v45;
                  v49 = (uint64_t **)(v47 + 8);
                  v48 = *(uint64_t **)(v47 + 8);
                  if (v48)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v50 = (uint64_t **)v48;
                        v51 = *((_DWORD *)v48 + 7);
                        if (v51 <= v43)
                          break;
                        v48 = *v50;
                        v49 = v50;
                        if (!*v50)
                          goto LABEL_50;
                      }
                      if (v51 >= v43)
                        break;
                      v48 = v50[1];
                      if (!v48)
                      {
                        v49 = v50 + 1;
                        goto LABEL_50;
                      }
                    }
                  }
                  else
                  {
                    v50 = (uint64_t **)(v47 + 8);
LABEL_50:
                    v791 = v13;
                    v799 = v15;
                    v52 = operator new(0x20uLL);
                    v52[7] = v43;
                    *(_QWORD *)v52 = 0;
                    *((_QWORD *)v52 + 1) = 0;
                    *((_QWORD *)v52 + 2) = v50;
                    *v49 = (uint64_t *)v52;
                    v53 = **(_QWORD **)v47;
                    if (v53)
                    {
                      *(_QWORD *)v47 = v53;
                      v54 = *v49;
                    }
                    else
                    {
                      v54 = (uint64_t *)v52;
                    }
                    result = sub_20E868578(*(uint64_t **)(v47 + 8), v54);
                    ++*(_QWORD *)(v47 + 16);
                    v55 = (int32x4_t *)(*v16 + 4 * v46);
                    v56.i64[0] = 0x600000006;
                    v56.i64[1] = 0x600000006;
                    v57 = vaddq_s32(v55[1], v56);
                    *v55 = vaddq_s32(*v55, v56);
                    v55[1] = v57;
                    v55[2].i32[0] += 6;
                    v9 = *(unsigned int **)(v3 + 216);
                    v15 = v799;
                    v2 = v805;
                    v13 = v791;
                  }
                }
              }
            }
            if (*((_BYTE *)v9 + 20))
            {
              v58 = *(_QWORD *)(v11 + 17872) + *v9;
              v59 = *(_QWORD *)(*v14 + 8 * v58);
              if (v59 <= *v13)
              {
                v60 = *v15 + 24 * v58;
                v62 = (uint64_t **)(v60 + 8);
                v61 = *(uint64_t **)(v60 + 8);
                if (v61)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v63 = (uint64_t **)v61;
                      v64 = *((_DWORD *)v61 + 7);
                      if (v64 <= v58)
                        break;
                      v61 = *v63;
                      v62 = v63;
                      if (!*v63)
                        goto LABEL_63;
                    }
                    if (v64 >= v58)
                      break;
                    v61 = v63[1];
                    if (!v61)
                    {
                      v62 = v63 + 1;
                      goto LABEL_63;
                    }
                  }
                }
                else
                {
                  v63 = (uint64_t **)(v60 + 8);
LABEL_63:
                  v65 = operator new(0x20uLL);
                  v65[7] = v58;
                  *(_QWORD *)v65 = 0;
                  *((_QWORD *)v65 + 1) = 0;
                  *((_QWORD *)v65 + 2) = v63;
                  *v62 = (uint64_t *)v65;
                  v66 = **(_QWORD **)v60;
                  if (v66)
                  {
                    *(_QWORD *)v60 = v66;
                    v5 = *v62;
                  }
                  else
                  {
                    v5 = (uint64_t *)v65;
                  }
                  result = sub_20E868578(*(uint64_t **)(v60 + 8), v5);
                  ++*(_QWORD *)(v60 + 16);
                  v6 = (int32x4_t *)(*v16 + 4 * v59);
                  v7.i64[0] = 0x900000009;
                  v7.i64[1] = 0x900000009;
                  v8 = vaddq_s32(v6[1], v7);
                  *v6 = vaddq_s32(*v6, v7);
                  v6[1] = v8;
                  v6[2].i32[0] += 9;
                  v2 = v805;
                }
              }
            }
          }
        }
      }
      v3 += 504;
    }
    while (v3 != v4);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v67 = v1[100];
  v68 = v1[101];
  if (v67 != v68)
  {
    do
    {
      v72 = *(unsigned int **)(v67 + 136);
      if ((v72[1] & 4) == 0)
      {
        if (*((_BYTE *)v72 + 20))
        {
          v73 = *v72;
          if ((_DWORD)v73 != -1)
          {
            v74 = *(_QWORD *)(v2[1] + 17864) + v73;
            v75 = *(_QWORD *)(*(_QWORD *)v2[2] + 8 * v74);
            if (v75 <= *(_QWORD *)v2[3])
            {
              v76 = (_QWORD *)v2[5];
              v77 = *(_QWORD *)v2[4] + 24 * v74;
              v79 = (uint64_t **)(v77 + 8);
              v78 = *(uint64_t **)(v77 + 8);
              if (v78)
              {
                while (1)
                {
                  while (1)
                  {
                    v80 = (uint64_t **)v78;
                    v81 = *((_DWORD *)v78 + 7);
                    if (v81 <= v74)
                      break;
                    v78 = *v80;
                    v79 = v80;
                    if (!*v80)
                      goto LABEL_82;
                  }
                  if (v81 >= v74)
                    break;
                  v78 = v80[1];
                  if (!v78)
                  {
                    v79 = v80 + 1;
                    goto LABEL_82;
                  }
                }
              }
              else
              {
                v80 = (uint64_t **)(v77 + 8);
LABEL_82:
                v82 = v2;
                v83 = operator new(0x20uLL);
                v83[7] = v74;
                *(_QWORD *)v83 = 0;
                *((_QWORD *)v83 + 1) = 0;
                *((_QWORD *)v83 + 2) = v80;
                *v79 = (uint64_t *)v83;
                v84 = **(_QWORD **)v77;
                if (v84)
                {
                  *(_QWORD *)v77 = v84;
                  v69 = *v79;
                }
                else
                {
                  v69 = (uint64_t *)v83;
                }
                result = sub_20E868578(*(uint64_t **)(v77 + 8), v69);
                ++*(_QWORD *)(v77 + 16);
                v70 = *v76 + 4 * v75;
                v71.i64[0] = 0x600000006;
                v71.i64[1] = 0x600000006;
                *(int32x4_t *)v70 = vaddq_s32(*(int32x4_t *)v70, v71);
                *(int32x2_t *)(v70 + 16) = vadd_s32(*(int32x2_t *)(v70 + 16), (int32x2_t)0x600000006);
                v2 = v82;
              }
            }
          }
        }
      }
      v67 += 280;
    }
    while (v67 != v68);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v85 = (_QWORD *)v1[103];
  v86 = (_QWORD *)v1[104];
  if (v85 == v86)
    goto LABEL_468;
  v806 = v2;
  do
  {
    v88 = (unsigned int *)v85[962];
    v89 = (unsigned int *)v85[963];
    v90 = v85[964];
    v91 = v85[965];
    v92 = v85[966];
    if (((*((unsigned __int8 *)v89 + 4) >> 2) & 1)
       + ((*((unsigned __int8 *)v88 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v90 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v91 + 4) >> 2) & 1) != (char)(32 * *(_BYTE *)(v92 + 4)) >> 7)
      goto LABEL_89;
    v93 = (_QWORD *)v2[1];
    if (*((_BYTE *)v88 + 20))
    {
      if (*v88 == -1)
        goto LABEL_89;
    }
    v94 = *((unsigned __int8 *)v89 + 20);
    if (*((_BYTE *)v89 + 20))
    {
      if (*v89 == -1)
        goto LABEL_89;
    }
    if (*(_BYTE *)(v90 + 20) && *(_DWORD *)v90 == -1
      || *(_BYTE *)(v91 + 20) && *(_DWORD *)v91 == -1
      || *(_BYTE *)(v92 + 20) && *(_DWORD *)v92 == -1)
    {
      goto LABEL_89;
    }
    v96 = (_QWORD *)v2[2];
    v95 = (unint64_t *)v2[3];
    v792 = (_QWORD *)v2[5];
    v800 = (_QWORD *)v2[4];
    if (*((_BYTE *)v88 + 20))
    {
      v97 = v93[2233] + *v88;
      v98 = *(_QWORD *)(*v96 + 8 * v97);
      if (v98 <= *v95)
      {
        v99 = *v800 + 24 * v97;
        v101 = (uint64_t **)(v99 + 8);
        v100 = *(uint64_t **)(v99 + 8);
        if (v100)
        {
          while (1)
          {
            while (1)
            {
              v102 = (uint64_t **)v100;
              v103 = *((_DWORD *)v100 + 7);
              if (v103 <= v97)
                break;
              v100 = *v102;
              v101 = v102;
              if (!*v102)
                goto LABEL_110;
            }
            if (v103 >= v97)
              break;
            v100 = v102[1];
            if (!v100)
            {
              v101 = v102 + 1;
              goto LABEL_110;
            }
          }
        }
        else
        {
          v102 = (uint64_t **)(v99 + 8);
LABEL_110:
          v104 = operator new(0x20uLL);
          v104[7] = v97;
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = 0;
          *((_QWORD *)v104 + 2) = v102;
          *v101 = (uint64_t *)v104;
          v105 = **(_QWORD **)v99;
          if (v105)
          {
            *(_QWORD *)v99 = v105;
            v106 = *v101;
          }
          else
          {
            v106 = (uint64_t *)v104;
          }
          result = sub_20E868578(*(uint64_t **)(v99 + 8), v106);
          ++*(_QWORD *)(v99 + 16);
          v107 = *v792 + 4 * v98;
          v108.i64[0] = 0x600000006;
          v108.i64[1] = 0x600000006;
          *(int32x4_t *)v107 = vaddq_s32(*(int32x4_t *)v107, v108);
          *(int32x2_t *)(v107 + 16) = vadd_s32(*(int32x2_t *)(v107 + 16), (int32x2_t)0x600000006);
          v89 = (unsigned int *)v85[963];
          v94 = *((unsigned __int8 *)v89 + 20);
          v88 = (unsigned int *)v85[962];
          v2 = v806;
        }
      }
    }
    if (v94)
    {
      if (*((_BYTE *)v88 + 20))
      {
        v109 = v93[2234] + *v89;
        v110 = *(_QWORD *)(*v96 + 8 * v109);
        v111 = v93[2233] + *v88;
        v112 = *(_QWORD *)(*v96 + 8 * v111);
        if (v110 <= v112 && v110 <= *v95)
        {
          v113 = *v800 + 24 * v111;
          v115 = (uint64_t **)(v113 + 8);
          v114 = *(uint64_t **)(v113 + 8);
          if (v114)
          {
            while (1)
            {
              while (1)
              {
                v116 = (uint64_t **)v114;
                v117 = *((_DWORD *)v114 + 7);
                if (v117 <= v109)
                  break;
                v114 = *v116;
                v115 = v116;
                if (!*v116)
                  goto LABEL_125;
              }
              if (v117 >= v109)
                break;
              v114 = v116[1];
              if (!v114)
              {
                v115 = v116 + 1;
                goto LABEL_125;
              }
            }
          }
          else
          {
            v116 = (uint64_t **)(v113 + 8);
LABEL_125:
            v118 = operator new(0x20uLL);
            v118[7] = v109;
            *(_QWORD *)v118 = 0;
            *((_QWORD *)v118 + 1) = 0;
            *((_QWORD *)v118 + 2) = v116;
            *v115 = (uint64_t *)v118;
            v119 = **(_QWORD **)v113;
            if (v119)
            {
              *(_QWORD *)v113 = v119;
              v120 = *v115;
            }
            else
            {
              v120 = (uint64_t *)v118;
            }
            result = sub_20E868578(*(uint64_t **)(v113 + 8), v120);
            ++*(_QWORD *)(v113 + 16);
            v121 = *v792 + 4 * v112;
            v122.i64[0] = 0x900000009;
            v122.i64[1] = 0x900000009;
            *(int32x4_t *)v121 = vaddq_s32(*(int32x4_t *)v121, v122);
            *(int32x2_t *)(v121 + 16) = vadd_s32(*(int32x2_t *)(v121 + 16), (int32x2_t)0x900000009);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v123 = (unsigned int *)v85[964];
    if (*((_BYTE *)v123 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v124 = v93[2233];
        v125 = v124 + *v123;
        v126 = *(_QWORD *)(*v96 + 8 * v125);
        v127 = v124 + *v88;
        v128 = *(_QWORD *)(*v96 + 8 * v127);
        if (v126 <= v128 && v126 <= *v95)
        {
          v129 = *v800 + 24 * v127;
          v131 = (uint64_t **)(v129 + 8);
          v130 = *(uint64_t **)(v129 + 8);
          if (v130)
          {
            while (1)
            {
              while (1)
              {
                v132 = (uint64_t **)v130;
                v133 = *((_DWORD *)v130 + 7);
                if (v133 <= v125)
                  break;
                v130 = *v132;
                v131 = v132;
                if (!*v132)
                  goto LABEL_140;
              }
              if (v133 >= v125)
                break;
              v130 = v132[1];
              if (!v130)
              {
                v131 = v132 + 1;
                goto LABEL_140;
              }
            }
          }
          else
          {
            v132 = (uint64_t **)(v129 + 8);
LABEL_140:
            v134 = operator new(0x20uLL);
            v134[7] = v125;
            *(_QWORD *)v134 = 0;
            *((_QWORD *)v134 + 1) = 0;
            *((_QWORD *)v134 + 2) = v132;
            *v131 = (uint64_t *)v134;
            v135 = **(_QWORD **)v129;
            if (v135)
            {
              *(_QWORD *)v129 = v135;
              v136 = *v131;
            }
            else
            {
              v136 = (uint64_t *)v134;
            }
            result = sub_20E868578(*(uint64_t **)(v129 + 8), v136);
            ++*(_QWORD *)(v129 + 16);
            v137 = *v792 + 4 * v128;
            v138.i64[0] = 0x600000006;
            v138.i64[1] = 0x600000006;
            *(int32x4_t *)v137 = vaddq_s32(*(int32x4_t *)v137, v138);
            *(int32x2_t *)(v137 + 16) = vadd_s32(*(int32x2_t *)(v137 + 16), (int32x2_t)0x600000006);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v139 = (unsigned int *)v85[965];
    if (*((_BYTE *)v139 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v140 = v93[2234] + *v139;
        v141 = *(_QWORD *)(*v96 + 8 * v140);
        v142 = v93[2233] + *v88;
        v143 = *(_QWORD *)(*v96 + 8 * v142);
        if (v141 <= v143 && v141 <= *v95)
        {
          v144 = *v800 + 24 * v142;
          v146 = (uint64_t **)(v144 + 8);
          v145 = *(uint64_t **)(v144 + 8);
          if (v145)
          {
            while (1)
            {
              while (1)
              {
                v147 = (uint64_t **)v145;
                v148 = *((_DWORD *)v145 + 7);
                if (v148 <= v140)
                  break;
                v145 = *v147;
                v146 = v147;
                if (!*v147)
                  goto LABEL_155;
              }
              if (v148 >= v140)
                break;
              v145 = v147[1];
              if (!v145)
              {
                v146 = v147 + 1;
                goto LABEL_155;
              }
            }
          }
          else
          {
            v147 = (uint64_t **)(v144 + 8);
LABEL_155:
            v149 = operator new(0x20uLL);
            v149[7] = v140;
            *(_QWORD *)v149 = 0;
            *((_QWORD *)v149 + 1) = 0;
            *((_QWORD *)v149 + 2) = v147;
            *v146 = (uint64_t *)v149;
            v150 = **(_QWORD **)v144;
            if (v150)
            {
              *(_QWORD *)v144 = v150;
              v151 = *v146;
            }
            else
            {
              v151 = (uint64_t *)v149;
            }
            result = sub_20E868578(*(uint64_t **)(v144 + 8), v151);
            ++*(_QWORD *)(v144 + 16);
            v152 = *v792 + 4 * v143;
            v153.i64[0] = 0x900000009;
            v153.i64[1] = 0x900000009;
            *(int32x4_t *)v152 = vaddq_s32(*(int32x4_t *)v152, v153);
            *(int32x2_t *)(v152 + 16) = vadd_s32(*(int32x2_t *)(v152 + 16), (int32x2_t)0x900000009);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v154 = (unsigned int *)v85[966];
    if (*((_BYTE *)v154 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v155 = v93[2235] + *v154;
        v156 = *(_QWORD *)(*v96 + 8 * v155);
        v157 = v93[2233] + *v88;
        v158 = *(_QWORD *)(*v96 + 8 * v157);
        if (v156 <= v158 && v156 <= *v95)
        {
          v159 = *v800 + 24 * v157;
          v161 = (uint64_t **)(v159 + 8);
          v160 = *(uint64_t **)(v159 + 8);
          if (v160)
          {
            while (1)
            {
              while (1)
              {
                v162 = (uint64_t **)v160;
                v163 = *((_DWORD *)v160 + 7);
                if (v163 <= v155)
                  break;
                v160 = *v162;
                v161 = v162;
                if (!*v162)
                  goto LABEL_170;
              }
              if (v163 >= v155)
                break;
              v160 = v162[1];
              if (!v160)
              {
                v161 = v162 + 1;
                goto LABEL_170;
              }
            }
          }
          else
          {
            v162 = (uint64_t **)(v159 + 8);
LABEL_170:
            v164 = operator new(0x20uLL);
            v164[7] = v155;
            *(_QWORD *)v164 = 0;
            *((_QWORD *)v164 + 1) = 0;
            *((_QWORD *)v164 + 2) = v162;
            *v161 = (uint64_t *)v164;
            v165 = **(_QWORD **)v159;
            if (v165)
            {
              *(_QWORD *)v159 = v165;
              v166 = *v161;
            }
            else
            {
              v166 = (uint64_t *)v164;
            }
            result = sub_20E868578(*(uint64_t **)(v159 + 8), v166);
            ++*(_QWORD *)(v159 + 16);
            v167 = *v792 + 4 * v158;
            v168.i64[0] = 0x100000001;
            v168.i64[1] = 0x100000001;
            *(int32x4_t *)v167 = vaddq_s32(*(int32x4_t *)v167, v168);
            *(int32x2_t *)(v167 + 16) = vadd_s32(*(int32x2_t *)(v167 + 16), (int32x2_t)0x100000001);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v169 = (unsigned int *)v85[963];
    if (*((_BYTE *)v88 + 20))
    {
      if (*((_BYTE *)v169 + 20))
      {
        v170 = v93[2233] + *v88;
        v171 = *(_QWORD *)(*v96 + 8 * v170);
        v172 = v93[2234] + *v169;
        v173 = *(_QWORD *)(*v96 + 8 * v172);
        if (v171 <= v173 && v171 <= *v95)
        {
          v174 = *v800 + 24 * v172;
          v176 = (uint64_t **)(v174 + 8);
          v175 = *(uint64_t **)(v174 + 8);
          if (v175)
          {
            while (1)
            {
              while (1)
              {
                v177 = (uint64_t **)v175;
                v178 = *((_DWORD *)v175 + 7);
                if (v178 <= v170)
                  break;
                v175 = *v177;
                v176 = v177;
                if (!*v177)
                  goto LABEL_185;
              }
              if (v178 >= v170)
                break;
              v175 = v177[1];
              if (!v175)
              {
                v176 = v177 + 1;
                goto LABEL_185;
              }
            }
          }
          else
          {
            v177 = (uint64_t **)(v174 + 8);
LABEL_185:
            v179 = operator new(0x20uLL);
            v179[7] = v170;
            *(_QWORD *)v179 = 0;
            *((_QWORD *)v179 + 1) = 0;
            *((_QWORD *)v179 + 2) = v177;
            *v176 = (uint64_t *)v179;
            v180 = **(_QWORD **)v174;
            if (v180)
            {
              *(_QWORD *)v174 = v180;
              v181 = *v176;
            }
            else
            {
              v181 = (uint64_t *)v179;
            }
            result = sub_20E868578(*(uint64_t **)(v174 + 8), v181);
            ++*(_QWORD *)(v174 + 16);
            v182 = (int32x4_t *)(*v792 + 4 * v173);
            v183.i64[0] = 0x600000006;
            v183.i64[1] = 0x600000006;
            v184 = vaddq_s32(v182[1], v183);
            *v182 = vaddq_s32(*v182, v183);
            v182[1] = v184;
            v182[2].i32[0] += 6;
            v169 = (unsigned int *)v85[963];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v169 + 20))
    {
      v185 = v93[2234] + *v169;
      v186 = *(_QWORD *)(*v96 + 8 * v185);
      if (v186 <= *v95)
      {
        v187 = *v800 + 24 * v185;
        v189 = (uint64_t **)(v187 + 8);
        v188 = *(uint64_t **)(v187 + 8);
        if (v188)
        {
          while (1)
          {
            while (1)
            {
              v190 = (uint64_t **)v188;
              v191 = *((_DWORD *)v188 + 7);
              if (v191 <= v185)
                break;
              v188 = *v190;
              v189 = v190;
              if (!*v190)
                goto LABEL_198;
            }
            if (v191 >= v185)
              break;
            v188 = v190[1];
            if (!v188)
            {
              v189 = v190 + 1;
              goto LABEL_198;
            }
          }
        }
        else
        {
          v190 = (uint64_t **)(v187 + 8);
LABEL_198:
          v192 = operator new(0x20uLL);
          v192[7] = v185;
          *(_QWORD *)v192 = 0;
          *((_QWORD *)v192 + 1) = 0;
          *((_QWORD *)v192 + 2) = v190;
          *v189 = (uint64_t *)v192;
          v193 = **(_QWORD **)v187;
          if (v193)
          {
            *(_QWORD *)v187 = v193;
            v194 = *v189;
          }
          else
          {
            v194 = (uint64_t *)v192;
          }
          result = sub_20E868578(*(uint64_t **)(v187 + 8), v194);
          ++*(_QWORD *)(v187 + 16);
          v195 = (int32x4_t *)(*v792 + 4 * v186);
          v196.i64[0] = 0x900000009;
          v196.i64[1] = 0x900000009;
          v197 = vaddq_s32(v195[1], v196);
          *v195 = vaddq_s32(*v195, v196);
          v195[1] = v197;
          v195[2].i32[0] += 9;
          v2 = v806;
        }
      }
    }
    v198 = (unsigned int *)v85[964];
    if (*((_BYTE *)v198 + 20))
    {
      v199 = (unsigned int *)v85[963];
      if (*((_BYTE *)v199 + 20))
      {
        v200 = v93[2233] + *v198;
        v201 = *(_QWORD *)(*v96 + 8 * v200);
        v202 = v93[2234] + *v199;
        v203 = *(_QWORD *)(*v96 + 8 * v202);
        if (v201 <= v203 && v201 <= *v95)
        {
          v204 = *v800 + 24 * v202;
          v206 = (uint64_t **)(v204 + 8);
          v205 = *(uint64_t **)(v204 + 8);
          if (v205)
          {
            while (1)
            {
              while (1)
              {
                v207 = (uint64_t **)v205;
                v208 = *((_DWORD *)v205 + 7);
                if (v208 <= v200)
                  break;
                v205 = *v207;
                v206 = v207;
                if (!*v207)
                  goto LABEL_213;
              }
              if (v208 >= v200)
                break;
              v205 = v207[1];
              if (!v205)
              {
                v206 = v207 + 1;
                goto LABEL_213;
              }
            }
          }
          else
          {
            v207 = (uint64_t **)(v204 + 8);
LABEL_213:
            v209 = operator new(0x20uLL);
            v209[7] = v200;
            *(_QWORD *)v209 = 0;
            *((_QWORD *)v209 + 1) = 0;
            *((_QWORD *)v209 + 2) = v207;
            *v206 = (uint64_t *)v209;
            v210 = **(_QWORD **)v204;
            if (v210)
            {
              *(_QWORD *)v204 = v210;
              v211 = *v206;
            }
            else
            {
              v211 = (uint64_t *)v209;
            }
            result = sub_20E868578(*(uint64_t **)(v204 + 8), v211);
            ++*(_QWORD *)(v204 + 16);
            v212 = (int32x4_t *)(*v792 + 4 * v203);
            v213.i64[0] = 0x600000006;
            v213.i64[1] = 0x600000006;
            v214 = vaddq_s32(v212[1], v213);
            *v212 = vaddq_s32(*v212, v213);
            v212[1] = v214;
            v212[2].i32[0] += 6;
            v2 = v806;
          }
        }
      }
    }
    v215 = (unsigned int *)v85[965];
    if (*((_BYTE *)v215 + 20))
    {
      v216 = (unsigned int *)v85[963];
      if (*((_BYTE *)v216 + 20))
      {
        v217 = v93[2234];
        v218 = v217 + *v215;
        v219 = *(_QWORD *)(*v96 + 8 * v218);
        v220 = v217 + *v216;
        v221 = *(_QWORD *)(*v96 + 8 * v220);
        if (v219 <= v221 && v219 <= *v95)
        {
          v222 = *v800 + 24 * v220;
          v224 = (uint64_t **)(v222 + 8);
          v223 = *(uint64_t **)(v222 + 8);
          if (v223)
          {
            while (1)
            {
              while (1)
              {
                v225 = (uint64_t **)v223;
                v226 = *((_DWORD *)v223 + 7);
                if (v226 <= v218)
                  break;
                v223 = *v225;
                v224 = v225;
                if (!*v225)
                  goto LABEL_228;
              }
              if (v226 >= v218)
                break;
              v223 = v225[1];
              if (!v223)
              {
                v224 = v225 + 1;
                goto LABEL_228;
              }
            }
          }
          else
          {
            v225 = (uint64_t **)(v222 + 8);
LABEL_228:
            v227 = operator new(0x20uLL);
            v227[7] = v218;
            *(_QWORD *)v227 = 0;
            *((_QWORD *)v227 + 1) = 0;
            *((_QWORD *)v227 + 2) = v225;
            *v224 = (uint64_t *)v227;
            v228 = **(_QWORD **)v222;
            if (v228)
            {
              *(_QWORD *)v222 = v228;
              v229 = *v224;
            }
            else
            {
              v229 = (uint64_t *)v227;
            }
            result = sub_20E868578(*(uint64_t **)(v222 + 8), v229);
            ++*(_QWORD *)(v222 + 16);
            v230 = (int32x4_t *)(*v792 + 4 * v221);
            v231.i64[0] = 0x900000009;
            v231.i64[1] = 0x900000009;
            v232 = vaddq_s32(v230[1], v231);
            *v230 = vaddq_s32(*v230, v231);
            v230[1] = v232;
            v230[2].i32[0] += 9;
            v2 = v806;
          }
        }
      }
    }
    v233 = (unsigned int *)v85[966];
    if (*((_BYTE *)v233 + 20))
    {
      v234 = (unsigned int *)v85[963];
      if (*((_BYTE *)v234 + 20))
      {
        v235 = v93[2235] + *v233;
        v236 = *(_QWORD *)(*v96 + 8 * v235);
        v237 = v93[2234] + *v234;
        v238 = *(_QWORD *)(*v96 + 8 * v237);
        if (v236 <= v238 && v236 <= *v95)
        {
          v239 = *v800 + 24 * v237;
          v241 = (uint64_t **)(v239 + 8);
          v240 = *(uint64_t **)(v239 + 8);
          if (v240)
          {
            while (1)
            {
              while (1)
              {
                v242 = (uint64_t **)v240;
                v243 = *((_DWORD *)v240 + 7);
                if (v243 <= v235)
                  break;
                v240 = *v242;
                v241 = v242;
                if (!*v242)
                  goto LABEL_243;
              }
              if (v243 >= v235)
                break;
              v240 = v242[1];
              if (!v240)
              {
                v241 = v242 + 1;
                goto LABEL_243;
              }
            }
          }
          else
          {
            v242 = (uint64_t **)(v239 + 8);
LABEL_243:
            v244 = operator new(0x20uLL);
            v244[7] = v235;
            *(_QWORD *)v244 = 0;
            *((_QWORD *)v244 + 1) = 0;
            *((_QWORD *)v244 + 2) = v242;
            *v241 = (uint64_t *)v244;
            v245 = **(_QWORD **)v239;
            if (v245)
            {
              *(_QWORD *)v239 = v245;
              v246 = *v241;
            }
            else
            {
              v246 = (uint64_t *)v244;
            }
            result = sub_20E868578(*(uint64_t **)(v239 + 8), v246);
            ++*(_QWORD *)(v239 + 16);
            v247 = (int32x4_t *)(*v792 + 4 * v238);
            v248.i64[0] = 0x100000001;
            v248.i64[1] = 0x100000001;
            v249 = vaddq_s32(v247[1], v248);
            *v247 = vaddq_s32(*v247, v248);
            v247[1] = v249;
            ++v247[2].i32[0];
            v2 = v806;
          }
        }
      }
    }
    v250 = (unsigned int *)v85[962];
    v251 = (unsigned int *)v85[964];
    if (*((_BYTE *)v250 + 20))
    {
      if (*((_BYTE *)v251 + 20))
      {
        v252 = v93[2233];
        v253 = v252 + *v250;
        v254 = *(_QWORD *)(*v96 + 8 * v253);
        v255 = v252 + *v251;
        v256 = *(_QWORD *)(*v96 + 8 * v255);
        if (v254 <= v256 && v254 <= *v95)
        {
          v257 = *v800 + 24 * v255;
          v259 = (uint64_t **)(v257 + 8);
          v258 = *(uint64_t **)(v257 + 8);
          if (v258)
          {
            while (1)
            {
              while (1)
              {
                v260 = (uint64_t **)v258;
                v261 = *((_DWORD *)v258 + 7);
                if (v261 <= v253)
                  break;
                v258 = *v260;
                v259 = v260;
                if (!*v260)
                  goto LABEL_258;
              }
              if (v261 >= v253)
                break;
              v258 = v260[1];
              if (!v258)
              {
                v259 = v260 + 1;
                goto LABEL_258;
              }
            }
          }
          else
          {
            v260 = (uint64_t **)(v257 + 8);
LABEL_258:
            v262 = operator new(0x20uLL);
            v262[7] = v253;
            *(_QWORD *)v262 = 0;
            *((_QWORD *)v262 + 1) = 0;
            *((_QWORD *)v262 + 2) = v260;
            *v259 = (uint64_t *)v262;
            v263 = **(_QWORD **)v257;
            if (v263)
            {
              *(_QWORD *)v257 = v263;
              v264 = *v259;
            }
            else
            {
              v264 = (uint64_t *)v262;
            }
            result = sub_20E868578(*(uint64_t **)(v257 + 8), v264);
            ++*(_QWORD *)(v257 + 16);
            v265 = *v792 + 4 * v256;
            v266.i64[0] = 0x600000006;
            v266.i64[1] = 0x600000006;
            *(int32x4_t *)v265 = vaddq_s32(*(int32x4_t *)v265, v266);
            *(int32x2_t *)(v265 + 16) = vadd_s32(*(int32x2_t *)(v265 + 16), (int32x2_t)0x600000006);
            v251 = (unsigned int *)v85[964];
            v2 = v806;
          }
        }
      }
    }
    v267 = (unsigned int *)v85[963];
    if (*((_BYTE *)v267 + 20))
    {
      if (*((_BYTE *)v251 + 20))
      {
        v268 = v93[2234] + *v267;
        v269 = *(_QWORD *)(*v96 + 8 * v268);
        v270 = v93[2233] + *v251;
        v271 = *(_QWORD *)(*v96 + 8 * v270);
        if (v269 <= v271 && v269 <= *v95)
        {
          v272 = *v800 + 24 * v270;
          v274 = (uint64_t **)(v272 + 8);
          v273 = *(uint64_t **)(v272 + 8);
          if (v273)
          {
            while (1)
            {
              while (1)
              {
                v275 = (uint64_t **)v273;
                v276 = *((_DWORD *)v273 + 7);
                if (v276 <= v268)
                  break;
                v273 = *v275;
                v274 = v275;
                if (!*v275)
                  goto LABEL_273;
              }
              if (v276 >= v268)
                break;
              v273 = v275[1];
              if (!v273)
              {
                v274 = v275 + 1;
                goto LABEL_273;
              }
            }
          }
          else
          {
            v275 = (uint64_t **)(v272 + 8);
LABEL_273:
            v277 = operator new(0x20uLL);
            v277[7] = v268;
            *(_QWORD *)v277 = 0;
            *((_QWORD *)v277 + 1) = 0;
            *((_QWORD *)v277 + 2) = v275;
            *v274 = (uint64_t *)v277;
            v278 = **(_QWORD **)v272;
            if (v278)
            {
              *(_QWORD *)v272 = v278;
              v279 = *v274;
            }
            else
            {
              v279 = (uint64_t *)v277;
            }
            result = sub_20E868578(*(uint64_t **)(v272 + 8), v279);
            ++*(_QWORD *)(v272 + 16);
            v280 = *v792 + 4 * v271;
            v281.i64[0] = 0x900000009;
            v281.i64[1] = 0x900000009;
            *(int32x4_t *)v280 = vaddq_s32(*(int32x4_t *)v280, v281);
            *(int32x2_t *)(v280 + 16) = vadd_s32(*(int32x2_t *)(v280 + 16), (int32x2_t)0x900000009);
            v251 = (unsigned int *)v85[964];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v251 + 20))
    {
      v282 = v93[2233] + *v251;
      v283 = *(_QWORD *)(*v96 + 8 * v282);
      if (v283 <= *v95)
      {
        v284 = *v800 + 24 * v282;
        v286 = (uint64_t **)(v284 + 8);
        v285 = *(uint64_t **)(v284 + 8);
        if (v285)
        {
          while (1)
          {
            while (1)
            {
              v287 = (uint64_t **)v285;
              v288 = *((_DWORD *)v285 + 7);
              if (v288 <= v282)
                break;
              v285 = *v287;
              v286 = v287;
              if (!*v287)
                goto LABEL_286;
            }
            if (v288 >= v282)
              break;
            v285 = v287[1];
            if (!v285)
            {
              v286 = v287 + 1;
              goto LABEL_286;
            }
          }
        }
        else
        {
          v287 = (uint64_t **)(v284 + 8);
LABEL_286:
          v289 = operator new(0x20uLL);
          v289[7] = v282;
          *(_QWORD *)v289 = 0;
          *((_QWORD *)v289 + 1) = 0;
          *((_QWORD *)v289 + 2) = v287;
          *v286 = (uint64_t *)v289;
          v290 = **(_QWORD **)v284;
          if (v290)
          {
            *(_QWORD *)v284 = v290;
            v291 = *v286;
          }
          else
          {
            v291 = (uint64_t *)v289;
          }
          result = sub_20E868578(*(uint64_t **)(v284 + 8), v291);
          ++*(_QWORD *)(v284 + 16);
          v292 = *v792 + 4 * v283;
          v293.i64[0] = 0x600000006;
          v293.i64[1] = 0x600000006;
          *(int32x4_t *)v292 = vaddq_s32(*(int32x4_t *)v292, v293);
          *(int32x2_t *)(v292 + 16) = vadd_s32(*(int32x2_t *)(v292 + 16), (int32x2_t)0x600000006);
          v2 = v806;
        }
      }
    }
    v294 = (unsigned int *)v85[965];
    if (*((_BYTE *)v294 + 20))
    {
      v295 = (unsigned int *)v85[964];
      if (*((_BYTE *)v295 + 20))
      {
        v296 = v93[2234] + *v294;
        v297 = *(_QWORD *)(*v96 + 8 * v296);
        v298 = v93[2233] + *v295;
        v299 = *(_QWORD *)(*v96 + 8 * v298);
        if (v297 <= v299 && v297 <= *v95)
        {
          v300 = *v800 + 24 * v298;
          v302 = (uint64_t **)(v300 + 8);
          v301 = *(uint64_t **)(v300 + 8);
          if (v301)
          {
            while (1)
            {
              while (1)
              {
                v303 = (uint64_t **)v301;
                v304 = *((_DWORD *)v301 + 7);
                if (v304 <= v296)
                  break;
                v301 = *v303;
                v302 = v303;
                if (!*v303)
                  goto LABEL_301;
              }
              if (v304 >= v296)
                break;
              v301 = v303[1];
              if (!v301)
              {
                v302 = v303 + 1;
                goto LABEL_301;
              }
            }
          }
          else
          {
            v303 = (uint64_t **)(v300 + 8);
LABEL_301:
            v305 = operator new(0x20uLL);
            v305[7] = v296;
            *(_QWORD *)v305 = 0;
            *((_QWORD *)v305 + 1) = 0;
            *((_QWORD *)v305 + 2) = v303;
            *v302 = (uint64_t *)v305;
            v306 = **(_QWORD **)v300;
            if (v306)
            {
              *(_QWORD *)v300 = v306;
              v307 = *v302;
            }
            else
            {
              v307 = (uint64_t *)v305;
            }
            result = sub_20E868578(*(uint64_t **)(v300 + 8), v307);
            ++*(_QWORD *)(v300 + 16);
            v308 = *v792 + 4 * v299;
            v309.i64[0] = 0x900000009;
            v309.i64[1] = 0x900000009;
            *(int32x4_t *)v308 = vaddq_s32(*(int32x4_t *)v308, v309);
            *(int32x2_t *)(v308 + 16) = vadd_s32(*(int32x2_t *)(v308 + 16), (int32x2_t)0x900000009);
            v2 = v806;
          }
        }
      }
    }
    v310 = (unsigned int *)v85[966];
    if (*((_BYTE *)v310 + 20))
    {
      v311 = (unsigned int *)v85[964];
      if (*((_BYTE *)v311 + 20))
      {
        v312 = v93[2235] + *v310;
        v313 = *(_QWORD *)(*v96 + 8 * v312);
        v314 = v93[2233] + *v311;
        v315 = *(_QWORD *)(*v96 + 8 * v314);
        if (v313 <= v315 && v313 <= *v95)
        {
          v316 = *v800 + 24 * v314;
          v318 = (uint64_t **)(v316 + 8);
          v317 = *(uint64_t **)(v316 + 8);
          if (v317)
          {
            while (1)
            {
              while (1)
              {
                v319 = (uint64_t **)v317;
                v320 = *((_DWORD *)v317 + 7);
                if (v320 <= v312)
                  break;
                v317 = *v319;
                v318 = v319;
                if (!*v319)
                  goto LABEL_316;
              }
              if (v320 >= v312)
                break;
              v317 = v319[1];
              if (!v317)
              {
                v318 = v319 + 1;
                goto LABEL_316;
              }
            }
          }
          else
          {
            v319 = (uint64_t **)(v316 + 8);
LABEL_316:
            v321 = operator new(0x20uLL);
            v321[7] = v312;
            *(_QWORD *)v321 = 0;
            *((_QWORD *)v321 + 1) = 0;
            *((_QWORD *)v321 + 2) = v319;
            *v318 = (uint64_t *)v321;
            v322 = **(_QWORD **)v316;
            if (v322)
            {
              *(_QWORD *)v316 = v322;
              v323 = *v318;
            }
            else
            {
              v323 = (uint64_t *)v321;
            }
            result = sub_20E868578(*(uint64_t **)(v316 + 8), v323);
            ++*(_QWORD *)(v316 + 16);
            v324 = *v792 + 4 * v315;
            v325.i64[0] = 0x100000001;
            v325.i64[1] = 0x100000001;
            *(int32x4_t *)v324 = vaddq_s32(*(int32x4_t *)v324, v325);
            *(int32x2_t *)(v324 + 16) = vadd_s32(*(int32x2_t *)(v324 + 16), (int32x2_t)0x100000001);
            v2 = v806;
          }
        }
      }
    }
    v326 = (unsigned int *)v85[962];
    v327 = (unsigned int *)v85[965];
    if (*((_BYTE *)v326 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v328 = v93[2233] + *v326;
        v329 = *(_QWORD *)(*v96 + 8 * v328);
        v330 = v93[2234] + *v327;
        v331 = *(_QWORD *)(*v96 + 8 * v330);
        if (v329 <= v331 && v329 <= *v95)
        {
          v332 = *v800 + 24 * v330;
          v334 = (uint64_t **)(v332 + 8);
          v333 = *(uint64_t **)(v332 + 8);
          if (v333)
          {
            while (1)
            {
              while (1)
              {
                v335 = (uint64_t **)v333;
                v336 = *((_DWORD *)v333 + 7);
                if (v336 <= v328)
                  break;
                v333 = *v335;
                v334 = v335;
                if (!*v335)
                  goto LABEL_331;
              }
              if (v336 >= v328)
                break;
              v333 = v335[1];
              if (!v333)
              {
                v334 = v335 + 1;
                goto LABEL_331;
              }
            }
          }
          else
          {
            v335 = (uint64_t **)(v332 + 8);
LABEL_331:
            v337 = operator new(0x20uLL);
            v337[7] = v328;
            *(_QWORD *)v337 = 0;
            *((_QWORD *)v337 + 1) = 0;
            *((_QWORD *)v337 + 2) = v335;
            *v334 = (uint64_t *)v337;
            v338 = **(_QWORD **)v332;
            if (v338)
            {
              *(_QWORD *)v332 = v338;
              v339 = *v334;
            }
            else
            {
              v339 = (uint64_t *)v337;
            }
            result = sub_20E868578(*(uint64_t **)(v332 + 8), v339);
            ++*(_QWORD *)(v332 + 16);
            v340 = (int32x4_t *)(*v792 + 4 * v331);
            v341.i64[0] = 0x600000006;
            v341.i64[1] = 0x600000006;
            v342 = vaddq_s32(v340[1], v341);
            *v340 = vaddq_s32(*v340, v341);
            v340[1] = v342;
            v340[2].i32[0] += 6;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    v343 = (unsigned int *)v85[963];
    if (*((_BYTE *)v343 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v344 = v93[2234];
        v345 = v344 + *v343;
        v346 = *(_QWORD *)(*v96 + 8 * v345);
        v347 = v344 + *v327;
        v348 = *(_QWORD *)(*v96 + 8 * v347);
        if (v346 <= v348 && v346 <= *v95)
        {
          v349 = *v800 + 24 * v347;
          v351 = (uint64_t **)(v349 + 8);
          v350 = *(uint64_t **)(v349 + 8);
          if (v350)
          {
            while (1)
            {
              while (1)
              {
                v352 = (uint64_t **)v350;
                v353 = *((_DWORD *)v350 + 7);
                if (v353 <= v345)
                  break;
                v350 = *v352;
                v351 = v352;
                if (!*v352)
                  goto LABEL_346;
              }
              if (v353 >= v345)
                break;
              v350 = v352[1];
              if (!v350)
              {
                v351 = v352 + 1;
                goto LABEL_346;
              }
            }
          }
          else
          {
            v352 = (uint64_t **)(v349 + 8);
LABEL_346:
            v354 = operator new(0x20uLL);
            v354[7] = v345;
            *(_QWORD *)v354 = 0;
            *((_QWORD *)v354 + 1) = 0;
            *((_QWORD *)v354 + 2) = v352;
            *v351 = (uint64_t *)v354;
            v355 = **(_QWORD **)v349;
            if (v355)
            {
              *(_QWORD *)v349 = v355;
              v356 = *v351;
            }
            else
            {
              v356 = (uint64_t *)v354;
            }
            result = sub_20E868578(*(uint64_t **)(v349 + 8), v356);
            ++*(_QWORD *)(v349 + 16);
            v357 = (int32x4_t *)(*v792 + 4 * v348);
            v358.i64[0] = 0x900000009;
            v358.i64[1] = 0x900000009;
            v359 = vaddq_s32(v357[1], v358);
            *v357 = vaddq_s32(*v357, v358);
            v357[1] = v359;
            v357[2].i32[0] += 9;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    v360 = (unsigned int *)v85[964];
    if (*((_BYTE *)v360 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v361 = v93[2233] + *v360;
        v362 = *(_QWORD *)(*v96 + 8 * v361);
        v363 = v93[2234] + *v327;
        v364 = *(_QWORD *)(*v96 + 8 * v363);
        if (v362 <= v364 && v362 <= *v95)
        {
          v365 = *v800 + 24 * v363;
          v367 = (uint64_t **)(v365 + 8);
          v366 = *(uint64_t **)(v365 + 8);
          if (v366)
          {
            while (1)
            {
              while (1)
              {
                v368 = (uint64_t **)v366;
                v369 = *((_DWORD *)v366 + 7);
                if (v369 <= v361)
                  break;
                v366 = *v368;
                v367 = v368;
                if (!*v368)
                  goto LABEL_361;
              }
              if (v369 >= v361)
                break;
              v366 = v368[1];
              if (!v366)
              {
                v367 = v368 + 1;
                goto LABEL_361;
              }
            }
          }
          else
          {
            v368 = (uint64_t **)(v365 + 8);
LABEL_361:
            v370 = operator new(0x20uLL);
            v370[7] = v361;
            *(_QWORD *)v370 = 0;
            *((_QWORD *)v370 + 1) = 0;
            *((_QWORD *)v370 + 2) = v368;
            *v367 = (uint64_t *)v370;
            v371 = **(_QWORD **)v365;
            if (v371)
            {
              *(_QWORD *)v365 = v371;
              v372 = *v367;
            }
            else
            {
              v372 = (uint64_t *)v370;
            }
            result = sub_20E868578(*(uint64_t **)(v365 + 8), v372);
            ++*(_QWORD *)(v365 + 16);
            v373 = (int32x4_t *)(*v792 + 4 * v364);
            v374.i64[0] = 0x600000006;
            v374.i64[1] = 0x600000006;
            v375 = vaddq_s32(v373[1], v374);
            *v373 = vaddq_s32(*v373, v374);
            v373[1] = v375;
            v373[2].i32[0] += 6;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v327 + 20))
    {
      v376 = v93[2234] + *v327;
      v377 = *(_QWORD *)(*v96 + 8 * v376);
      if (v377 <= *v95)
      {
        v378 = *v800 + 24 * v376;
        v380 = (uint64_t **)(v378 + 8);
        v379 = *(uint64_t **)(v378 + 8);
        if (v379)
        {
          while (1)
          {
            while (1)
            {
              v381 = (uint64_t **)v379;
              v382 = *((_DWORD *)v379 + 7);
              if (v382 <= v376)
                break;
              v379 = *v381;
              v380 = v381;
              if (!*v381)
                goto LABEL_374;
            }
            if (v382 >= v376)
              break;
            v379 = v381[1];
            if (!v379)
            {
              v380 = v381 + 1;
              goto LABEL_374;
            }
          }
        }
        else
        {
          v381 = (uint64_t **)(v378 + 8);
LABEL_374:
          v383 = operator new(0x20uLL);
          v383[7] = v376;
          *(_QWORD *)v383 = 0;
          *((_QWORD *)v383 + 1) = 0;
          *((_QWORD *)v383 + 2) = v381;
          *v380 = (uint64_t *)v383;
          v384 = **(_QWORD **)v378;
          if (v384)
          {
            *(_QWORD *)v378 = v384;
            v385 = *v380;
          }
          else
          {
            v385 = (uint64_t *)v383;
          }
          result = sub_20E868578(*(uint64_t **)(v378 + 8), v385);
          ++*(_QWORD *)(v378 + 16);
          v386 = (int32x4_t *)(*v792 + 4 * v377);
          v387.i64[0] = 0x900000009;
          v387.i64[1] = 0x900000009;
          v388 = vaddq_s32(v386[1], v387);
          *v386 = vaddq_s32(*v386, v387);
          v386[1] = v388;
          v386[2].i32[0] += 9;
          v2 = v806;
        }
      }
    }
    v389 = (unsigned int *)v85[966];
    if (!*((_BYTE *)v389 + 20))
      goto LABEL_391;
    v390 = (unsigned int *)v85[965];
    if (!*((_BYTE *)v390 + 20))
      goto LABEL_391;
    v391 = v93[2235] + *v389;
    v392 = *(_QWORD *)(*v96 + 8 * v391);
    v393 = v93[2234] + *v390;
    v394 = *(_QWORD *)(*v96 + 8 * v393);
    if (v392 > v394 || v392 > *v95)
      goto LABEL_391;
    v395 = *v800 + 24 * v393;
    v397 = (uint64_t **)(v395 + 8);
    v396 = *(uint64_t **)(v395 + 8);
    if (v396)
    {
      while (1)
      {
        while (1)
        {
          v398 = (uint64_t **)v396;
          v399 = *((_DWORD *)v396 + 7);
          if (v399 <= v391)
            break;
          v396 = *v398;
          v397 = v398;
          if (!*v398)
            goto LABEL_389;
        }
        if (v399 >= v391)
          break;
        v396 = v398[1];
        if (!v396)
        {
          v397 = v398 + 1;
          goto LABEL_389;
        }
      }
LABEL_391:
      v403 = (unsigned int *)v85[962];
      if (!*((_BYTE *)v403 + 20))
        goto LABEL_409;
      goto LABEL_392;
    }
    v398 = (uint64_t **)(v395 + 8);
LABEL_389:
    v400 = operator new(0x20uLL);
    v400[7] = v391;
    *(_QWORD *)v400 = 0;
    *((_QWORD *)v400 + 1) = 0;
    *((_QWORD *)v400 + 2) = v398;
    *v397 = (uint64_t *)v400;
    v401 = **(_QWORD **)v395;
    if (v401)
    {
      *(_QWORD *)v395 = v401;
      v402 = *v397;
    }
    else
    {
      v402 = (uint64_t *)v400;
    }
    result = sub_20E868578(*(uint64_t **)(v395 + 8), v402);
    ++*(_QWORD *)(v395 + 16);
    v416 = (int32x4_t *)(*v792 + 4 * v394);
    v417.i64[0] = 0x100000001;
    v417.i64[1] = 0x100000001;
    v418 = vaddq_s32(v416[1], v417);
    *v416 = vaddq_s32(*v416, v417);
    v416[1] = v418;
    ++v416[2].i32[0];
    v389 = (unsigned int *)v85[966];
    v2 = v806;
    v403 = (unsigned int *)v85[962];
    if (!*((_BYTE *)v403 + 20))
      goto LABEL_409;
LABEL_392:
    if (!*((_BYTE *)v389 + 20))
      goto LABEL_409;
    v404 = v93[2233] + *v403;
    v405 = *(_QWORD *)(*v96 + 8 * v404);
    v406 = v93[2235] + *v389;
    v407 = *(_QWORD *)(*v96 + 8 * v406);
    if (v405 > v407 || v405 > *v95)
      goto LABEL_409;
    v408 = *v800 + 24 * v406;
    v410 = (uint64_t **)(v408 + 8);
    v409 = *(uint64_t **)(v408 + 8);
    if (!v409)
    {
      v411 = (uint64_t **)(v408 + 8);
LABEL_402:
      v413 = operator new(0x20uLL);
      v413[7] = v404;
      *(_QWORD *)v413 = 0;
      *((_QWORD *)v413 + 1) = 0;
      *((_QWORD *)v413 + 2) = v411;
      *v410 = (uint64_t *)v413;
      v414 = **(_QWORD **)v408;
      if (v414)
      {
        *(_QWORD *)v408 = v414;
        v415 = *v410;
      }
      else
      {
        v415 = (uint64_t *)v413;
      }
      result = sub_20E868578(*(uint64_t **)(v408 + 8), v415);
      ++*(_QWORD *)(v408 + 16);
      *(_DWORD *)(*v792 + 4 * v407) += 6;
      v389 = (unsigned int *)v85[966];
      v2 = v806;
LABEL_409:
      v419 = (unsigned int *)v85[963];
      if (!*((_BYTE *)v419 + 20))
        goto LABEL_425;
LABEL_410:
      if (*((_BYTE *)v389 + 20))
      {
        v420 = v93[2234] + *v419;
        v421 = *(_QWORD *)(*v96 + 8 * v420);
        v422 = v93[2235] + *v389;
        v423 = *(_QWORD *)(*v96 + 8 * v422);
        if (v421 <= v423 && v421 <= *v95)
        {
          v424 = *v800 + 24 * v422;
          v426 = (uint64_t **)(v424 + 8);
          v425 = *(uint64_t **)(v424 + 8);
          if (v425)
          {
            while (1)
            {
              while (1)
              {
                v427 = (uint64_t **)v425;
                v428 = *((_DWORD *)v425 + 7);
                if (v428 <= v420)
                  break;
                v425 = *v427;
                v426 = v427;
                if (!*v427)
                  goto LABEL_420;
              }
              if (v428 >= v420)
                break;
              v425 = v427[1];
              if (!v425)
              {
                v426 = v427 + 1;
                goto LABEL_420;
              }
            }
          }
          else
          {
            v427 = (uint64_t **)(v424 + 8);
LABEL_420:
            v429 = operator new(0x20uLL);
            v429[7] = v420;
            *(_QWORD *)v429 = 0;
            *((_QWORD *)v429 + 1) = 0;
            *((_QWORD *)v429 + 2) = v427;
            *v426 = (uint64_t *)v429;
            v430 = **(_QWORD **)v424;
            if (v430)
            {
              *(_QWORD *)v424 = v430;
              v431 = *v426;
            }
            else
            {
              v431 = (uint64_t *)v429;
            }
            result = sub_20E868578(*(uint64_t **)(v424 + 8), v431);
            ++*(_QWORD *)(v424 + 16);
            *(_DWORD *)(*v792 + 4 * v423) += 9;
            v389 = (unsigned int *)v85[966];
            v2 = v806;
          }
        }
      }
      goto LABEL_425;
    }
    while (1)
    {
      while (1)
      {
        v411 = (uint64_t **)v409;
        v412 = *((_DWORD *)v409 + 7);
        if (v412 <= v404)
          break;
        v409 = *v411;
        v410 = v411;
        if (!*v411)
          goto LABEL_402;
      }
      if (v412 >= v404)
        break;
      v409 = v411[1];
      if (!v409)
      {
        v410 = v411 + 1;
        goto LABEL_402;
      }
    }
    v419 = (unsigned int *)v85[963];
    if (*((_BYTE *)v419 + 20))
      goto LABEL_410;
LABEL_425:
    v432 = (unsigned int *)v85[964];
    if (*((_BYTE *)v432 + 20))
    {
      if (*((_BYTE *)v389 + 20))
      {
        v433 = v93[2233] + *v432;
        v434 = *(_QWORD *)(*v96 + 8 * v433);
        v435 = v93[2235] + *v389;
        v436 = *(_QWORD *)(*v96 + 8 * v435);
        if (v434 <= v436 && v434 <= *v95)
        {
          v437 = *v800 + 24 * v435;
          v439 = (uint64_t **)(v437 + 8);
          v438 = *(uint64_t **)(v437 + 8);
          if (v438)
          {
            while (1)
            {
              while (1)
              {
                v440 = (uint64_t **)v438;
                v441 = *((_DWORD *)v438 + 7);
                if (v441 <= v433)
                  break;
                v438 = *v440;
                v439 = v440;
                if (!*v440)
                  goto LABEL_436;
              }
              if (v441 >= v433)
                break;
              v438 = v440[1];
              if (!v438)
              {
                v439 = v440 + 1;
                goto LABEL_436;
              }
            }
            v445 = (unsigned int *)v85[965];
            if (!*((_BYTE *)v445 + 20))
              goto LABEL_456;
LABEL_441:
            if (*((_BYTE *)v389 + 20))
            {
              v446 = v93[2234] + *v445;
              v447 = *(_QWORD *)(*v96 + 8 * v446);
              v448 = v93[2235] + *v389;
              v449 = *(_QWORD *)(*v96 + 8 * v448);
              if (v447 <= v449 && v447 <= *v95)
              {
                v450 = *v800 + 24 * v448;
                v452 = (uint64_t **)(v450 + 8);
                v451 = *(uint64_t **)(v450 + 8);
                if (v451)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v453 = (uint64_t **)v451;
                      v454 = *((_DWORD *)v451 + 7);
                      if (v454 <= v446)
                        break;
                      v451 = *v453;
                      v452 = v453;
                      if (!*v453)
                        goto LABEL_451;
                    }
                    if (v454 >= v446)
                      break;
                    v451 = v453[1];
                    if (!v451)
                    {
                      v452 = v453 + 1;
                      goto LABEL_451;
                    }
                  }
                }
                else
                {
                  v453 = (uint64_t **)(v450 + 8);
LABEL_451:
                  v455 = operator new(0x20uLL);
                  v455[7] = v446;
                  *(_QWORD *)v455 = 0;
                  *((_QWORD *)v455 + 1) = 0;
                  *((_QWORD *)v455 + 2) = v453;
                  *v452 = (uint64_t *)v455;
                  v456 = **(_QWORD **)v450;
                  if (v456)
                  {
                    *(_QWORD *)v450 = v456;
                    v457 = *v452;
                  }
                  else
                  {
                    v457 = (uint64_t *)v455;
                  }
                  result = sub_20E868578(*(uint64_t **)(v450 + 8), v457);
                  ++*(_QWORD *)(v450 + 16);
                  *(_DWORD *)(*v792 + 4 * v449) += 9;
                  v389 = (unsigned int *)v85[966];
                  v2 = v806;
                }
              }
            }
            goto LABEL_456;
          }
          v440 = (uint64_t **)(v437 + 8);
LABEL_436:
          v442 = operator new(0x20uLL);
          v442[7] = v433;
          *(_QWORD *)v442 = 0;
          *((_QWORD *)v442 + 1) = 0;
          *((_QWORD *)v442 + 2) = v440;
          *v439 = (uint64_t *)v442;
          v443 = **(_QWORD **)v437;
          if (v443)
          {
            *(_QWORD *)v437 = v443;
            v444 = *v439;
          }
          else
          {
            v444 = (uint64_t *)v442;
          }
          result = sub_20E868578(*(uint64_t **)(v437 + 8), v444);
          ++*(_QWORD *)(v437 + 16);
          *(_DWORD *)(*v792 + 4 * v436) += 6;
          v389 = (unsigned int *)v85[966];
          v2 = v806;
        }
      }
    }
    v445 = (unsigned int *)v85[965];
    if (*((_BYTE *)v445 + 20))
      goto LABEL_441;
LABEL_456:
    if (*((_BYTE *)v389 + 20))
    {
      v458 = v93[2235] + *v389;
      v459 = *(_QWORD *)(*v96 + 8 * v458);
      if (v459 <= *v95)
      {
        v460 = *v800 + 24 * v458;
        v462 = (uint64_t **)(v460 + 8);
        v461 = *(uint64_t **)(v460 + 8);
        if (v461)
        {
          while (1)
          {
            while (1)
            {
              v463 = (uint64_t **)v461;
              v464 = *((_DWORD *)v461 + 7);
              if (v464 <= v458)
                break;
              v461 = *v463;
              v462 = v463;
              if (!*v463)
                goto LABEL_465;
            }
            if (v464 >= v458)
              break;
            v461 = v463[1];
            if (!v461)
            {
              v462 = v463 + 1;
              goto LABEL_465;
            }
          }
        }
        else
        {
          v463 = (uint64_t **)(v460 + 8);
LABEL_465:
          v465 = operator new(0x20uLL);
          v465[7] = v458;
          *(_QWORD *)v465 = 0;
          *((_QWORD *)v465 + 1) = 0;
          *((_QWORD *)v465 + 2) = v463;
          *v462 = (uint64_t *)v465;
          v466 = **(_QWORD **)v460;
          if (v466)
          {
            *(_QWORD *)v460 = v466;
            v87 = *v462;
          }
          else
          {
            v87 = (uint64_t *)v465;
          }
          result = sub_20E868578(*(uint64_t **)(v460 + 8), v87);
          ++*(_QWORD *)(v460 + 16);
          ++*(_DWORD *)(*v792 + 4 * v459);
          v2 = v806;
        }
      }
    }
LABEL_89:
    v85 += 1002;
  }
  while (v85 != v86);
  v2 = (uint64_t *)*v788;
  v1 = (_QWORD *)v788[1];
LABEL_468:
  v467 = (_QWORD *)v1[106];
  v468 = (_QWORD *)v1[107];
  if (v467 == v468)
    goto LABEL_719;
  v807 = v2;
  while (2)
  {
    v473 = (unsigned int *)v467[628];
    v474 = (unsigned int *)v467[629];
    v475 = v467[630];
    v476 = v467[631];
    if (((*((unsigned __int8 *)v474 + 4) >> 2) & 1)
       + ((*((unsigned __int8 *)v473 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v475 + 4) >> 2) & 1) == (char)(32 * *(_BYTE *)(v476 + 4)) >> 7)
    {
      v477 = v2[1];
      if (!*((_BYTE *)v473 + 20) || *v473 != -1)
      {
        v478 = *((unsigned __int8 *)v474 + 20);
        if ((!*((_BYTE *)v474 + 20) || *v474 != -1)
          && (!*(_BYTE *)(v475 + 20) || *(_DWORD *)v475 != -1)
          && (!*(_BYTE *)(v476 + 20) || *(_DWORD *)v476 != -1))
        {
          v480 = (_QWORD *)v2[2];
          v479 = (unint64_t *)v2[3];
          v481 = (_QWORD *)v2[4];
          v793 = v481;
          v801 = (_QWORD *)v2[5];
          if (*((_BYTE *)v473 + 20))
          {
            v482 = *(_QWORD *)(v477 + 17864) + *v473;
            v483 = *(_QWORD *)(*v480 + 8 * v482);
            if (v483 <= *v479)
            {
              v484 = *v481 + 24 * v482;
              v486 = (uint64_t **)(v484 + 8);
              v485 = *(uint64_t **)(v484 + 8);
              if (v485)
              {
                while (1)
                {
                  while (1)
                  {
                    v487 = (uint64_t **)v485;
                    v488 = *((_DWORD *)v485 + 7);
                    if (v488 <= v482)
                      break;
                    v485 = *v487;
                    v486 = v487;
                    if (!*v487)
                      goto LABEL_491;
                  }
                  if (v488 >= v482)
                    break;
                  v485 = v487[1];
                  if (!v485)
                  {
                    v486 = v487 + 1;
                    goto LABEL_491;
                  }
                }
              }
              else
              {
                v487 = (uint64_t **)(v484 + 8);
LABEL_491:
                v489 = operator new(0x20uLL);
                v489[7] = v482;
                *(_QWORD *)v489 = 0;
                *((_QWORD *)v489 + 1) = 0;
                *((_QWORD *)v489 + 2) = v487;
                *v486 = (uint64_t *)v489;
                v490 = **(_QWORD **)v484;
                if (v490)
                {
                  *(_QWORD *)v484 = v490;
                  v491 = *v486;
                }
                else
                {
                  v491 = (uint64_t *)v489;
                }
                result = sub_20E868578(*(uint64_t **)(v484 + 8), v491);
                ++*(_QWORD *)(v484 + 16);
                v2 = v807;
                v492 = *v801 + 4 * v483;
                v493.i64[0] = 0x600000006;
                v493.i64[1] = 0x600000006;
                *(int32x4_t *)v492 = vaddq_s32(*(int32x4_t *)v492, v493);
                *(int32x2_t *)(v492 + 16) = vadd_s32(*(int32x2_t *)(v492 + 16), (int32x2_t)0x600000006);
                v474 = (unsigned int *)v467[629];
                v478 = *((unsigned __int8 *)v474 + 20);
                v473 = (unsigned int *)v467[628];
                v481 = v793;
              }
            }
          }
          if (v478)
          {
            if (*((_BYTE *)v473 + 20))
            {
              v494 = *(_QWORD *)(v477 + 17872) + *v474;
              v495 = *(_QWORD *)(*v480 + 8 * v494);
              v496 = *(_QWORD *)(v477 + 17864) + *v473;
              v497 = *(_QWORD *)(*v480 + 8 * v496);
              if (v495 <= v497 && v495 <= *v479)
              {
                v498 = *v481 + 24 * v496;
                v500 = (uint64_t **)(v498 + 8);
                v499 = *(uint64_t **)(v498 + 8);
                if (v499)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v501 = (uint64_t **)v499;
                      v502 = *((_DWORD *)v499 + 7);
                      if (v502 <= v494)
                        break;
                      v499 = *v501;
                      v500 = v501;
                      if (!*v501)
                        goto LABEL_506;
                    }
                    if (v502 >= v494)
                      break;
                    v499 = v501[1];
                    if (!v499)
                    {
                      v500 = v501 + 1;
                      goto LABEL_506;
                    }
                  }
                }
                else
                {
                  v501 = (uint64_t **)(v498 + 8);
LABEL_506:
                  v503 = operator new(0x20uLL);
                  v503[7] = v494;
                  *(_QWORD *)v503 = 0;
                  *((_QWORD *)v503 + 1) = 0;
                  *((_QWORD *)v503 + 2) = v501;
                  *v500 = (uint64_t *)v503;
                  v504 = **(_QWORD **)v498;
                  if (v504)
                  {
                    *(_QWORD *)v498 = v504;
                    v505 = *v500;
                  }
                  else
                  {
                    v505 = (uint64_t *)v503;
                  }
                  result = sub_20E868578(*(uint64_t **)(v498 + 8), v505);
                  ++*(_QWORD *)(v498 + 16);
                  v2 = v807;
                  v506 = *v801 + 4 * v497;
                  v507.i64[0] = 0x900000009;
                  v507.i64[1] = 0x900000009;
                  *(int32x4_t *)v506 = vaddq_s32(*(int32x4_t *)v506, v507);
                  *(int32x2_t *)(v506 + 16) = vadd_s32(*(int32x2_t *)(v506 + 16), (int32x2_t)0x900000009);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v508 = (unsigned int *)v467[630];
          if (*((_BYTE *)v508 + 20))
          {
            if (*((_BYTE *)v473 + 20))
            {
              v509 = *(_QWORD *)(v477 + 17864);
              v510 = v509 + *v508;
              v511 = *(_QWORD *)(*v480 + 8 * v510);
              v512 = v509 + *v473;
              v513 = *(_QWORD *)(*v480 + 8 * v512);
              if (v511 <= v513 && v511 <= *v479)
              {
                v514 = *v481 + 24 * v512;
                v516 = (uint64_t **)(v514 + 8);
                v515 = *(uint64_t **)(v514 + 8);
                if (v515)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v517 = (uint64_t **)v515;
                      v518 = *((_DWORD *)v515 + 7);
                      if (v518 <= v510)
                        break;
                      v515 = *v517;
                      v516 = v517;
                      if (!*v517)
                        goto LABEL_521;
                    }
                    if (v518 >= v510)
                      break;
                    v515 = v517[1];
                    if (!v515)
                    {
                      v516 = v517 + 1;
                      goto LABEL_521;
                    }
                  }
                }
                else
                {
                  v517 = (uint64_t **)(v514 + 8);
LABEL_521:
                  v519 = operator new(0x20uLL);
                  v519[7] = v510;
                  *(_QWORD *)v519 = 0;
                  *((_QWORD *)v519 + 1) = 0;
                  *((_QWORD *)v519 + 2) = v517;
                  *v516 = (uint64_t *)v519;
                  v520 = **(_QWORD **)v514;
                  if (v520)
                  {
                    *(_QWORD *)v514 = v520;
                    v521 = *v516;
                  }
                  else
                  {
                    v521 = (uint64_t *)v519;
                  }
                  result = sub_20E868578(*(uint64_t **)(v514 + 8), v521);
                  ++*(_QWORD *)(v514 + 16);
                  v2 = v807;
                  v522 = *v801 + 4 * v513;
                  v523.i64[0] = 0x600000006;
                  v523.i64[1] = 0x600000006;
                  *(int32x4_t *)v522 = vaddq_s32(*(int32x4_t *)v522, v523);
                  *(int32x2_t *)(v522 + 16) = vadd_s32(*(int32x2_t *)(v522 + 16), (int32x2_t)0x600000006);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v524 = (unsigned int *)v467[631];
          if (*((_BYTE *)v524 + 20))
          {
            if (*((_BYTE *)v473 + 20))
            {
              v525 = *(_QWORD *)(v477 + 17872) + *v524;
              v526 = *(_QWORD *)(*v480 + 8 * v525);
              v527 = *(_QWORD *)(v477 + 17864) + *v473;
              v528 = *(_QWORD *)(*v480 + 8 * v527);
              if (v526 <= v528 && v526 <= *v479)
              {
                v529 = *v481 + 24 * v527;
                v531 = (uint64_t **)(v529 + 8);
                v530 = *(uint64_t **)(v529 + 8);
                if (v530)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v532 = (uint64_t **)v530;
                      v533 = *((_DWORD *)v530 + 7);
                      if (v533 <= v525)
                        break;
                      v530 = *v532;
                      v531 = v532;
                      if (!*v532)
                        goto LABEL_536;
                    }
                    if (v533 >= v525)
                      break;
                    v530 = v532[1];
                    if (!v530)
                    {
                      v531 = v532 + 1;
                      goto LABEL_536;
                    }
                  }
                }
                else
                {
                  v532 = (uint64_t **)(v529 + 8);
LABEL_536:
                  v534 = operator new(0x20uLL);
                  v534[7] = v525;
                  *(_QWORD *)v534 = 0;
                  *((_QWORD *)v534 + 1) = 0;
                  *((_QWORD *)v534 + 2) = v532;
                  *v531 = (uint64_t *)v534;
                  v535 = **(_QWORD **)v529;
                  if (v535)
                  {
                    *(_QWORD *)v529 = v535;
                    v536 = *v531;
                  }
                  else
                  {
                    v536 = (uint64_t *)v534;
                  }
                  result = sub_20E868578(*(uint64_t **)(v529 + 8), v536);
                  ++*(_QWORD *)(v529 + 16);
                  v2 = v807;
                  v537 = *v801 + 4 * v528;
                  v538.i64[0] = 0x900000009;
                  v538.i64[1] = 0x900000009;
                  *(int32x4_t *)v537 = vaddq_s32(*(int32x4_t *)v537, v538);
                  *(int32x2_t *)(v537 + 16) = vadd_s32(*(int32x2_t *)(v537 + 16), (int32x2_t)0x900000009);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v539 = (unsigned int *)v467[629];
          if (*((_BYTE *)v473 + 20))
          {
            if (*((_BYTE *)v539 + 20))
            {
              v540 = *(_QWORD *)(v477 + 17864) + *v473;
              v541 = *(_QWORD *)(*v480 + 8 * v540);
              v542 = *(_QWORD *)(v477 + 17872) + *v539;
              v543 = *(_QWORD *)(*v480 + 8 * v542);
              if (v541 <= v543 && v541 <= *v479)
              {
                v544 = *v481 + 24 * v542;
                v546 = (uint64_t **)(v544 + 8);
                v545 = *(uint64_t **)(v544 + 8);
                if (v545)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v547 = (uint64_t **)v545;
                      v548 = *((_DWORD *)v545 + 7);
                      if (v548 <= v540)
                        break;
                      v545 = *v547;
                      v546 = v547;
                      if (!*v547)
                        goto LABEL_551;
                    }
                    if (v548 >= v540)
                      break;
                    v545 = v547[1];
                    if (!v545)
                    {
                      v546 = v547 + 1;
                      goto LABEL_551;
                    }
                  }
                }
                else
                {
                  v547 = (uint64_t **)(v544 + 8);
LABEL_551:
                  v549 = operator new(0x20uLL);
                  v549[7] = v540;
                  *(_QWORD *)v549 = 0;
                  *((_QWORD *)v549 + 1) = 0;
                  *((_QWORD *)v549 + 2) = v547;
                  *v546 = (uint64_t *)v549;
                  v550 = **(_QWORD **)v544;
                  if (v550)
                  {
                    *(_QWORD *)v544 = v550;
                    v551 = *v546;
                  }
                  else
                  {
                    v551 = (uint64_t *)v549;
                  }
                  result = sub_20E868578(*(uint64_t **)(v544 + 8), v551);
                  ++*(_QWORD *)(v544 + 16);
                  v2 = v807;
                  v552 = (int32x4_t *)(*v801 + 4 * v543);
                  v553.i64[0] = 0x600000006;
                  v553.i64[1] = 0x600000006;
                  v554 = vaddq_s32(v552[1], v553);
                  *v552 = vaddq_s32(*v552, v553);
                  v552[1] = v554;
                  v552[2].i32[0] += 6;
                  v539 = (unsigned int *)v467[629];
                  v481 = v793;
                }
              }
            }
          }
          if (*((_BYTE *)v539 + 20))
          {
            v555 = *(_QWORD *)(v477 + 17872) + *v539;
            v556 = *(_QWORD *)(*v480 + 8 * v555);
            if (v556 <= *v479)
            {
              v557 = *v481 + 24 * v555;
              v559 = (uint64_t **)(v557 + 8);
              v558 = *(uint64_t **)(v557 + 8);
              if (v558)
              {
                while (1)
                {
                  while (1)
                  {
                    v560 = (uint64_t **)v558;
                    v561 = *((_DWORD *)v558 + 7);
                    if (v561 <= v555)
                      break;
                    v558 = *v560;
                    v559 = v560;
                    if (!*v560)
                      goto LABEL_564;
                  }
                  if (v561 >= v555)
                    break;
                  v558 = v560[1];
                  if (!v558)
                  {
                    v559 = v560 + 1;
                    goto LABEL_564;
                  }
                }
              }
              else
              {
                v560 = (uint64_t **)(v557 + 8);
LABEL_564:
                v562 = operator new(0x20uLL);
                v562[7] = v555;
                *(_QWORD *)v562 = 0;
                *((_QWORD *)v562 + 1) = 0;
                *((_QWORD *)v562 + 2) = v560;
                *v559 = (uint64_t *)v562;
                v563 = **(_QWORD **)v557;
                if (v563)
                {
                  *(_QWORD *)v557 = v563;
                  v564 = *v559;
                }
                else
                {
                  v564 = (uint64_t *)v562;
                }
                result = sub_20E868578(*(uint64_t **)(v557 + 8), v564);
                ++*(_QWORD *)(v557 + 16);
                v2 = v807;
                v565 = (int32x4_t *)(*v801 + 4 * v556);
                v566.i64[0] = 0x900000009;
                v566.i64[1] = 0x900000009;
                v567 = vaddq_s32(v565[1], v566);
                *v565 = vaddq_s32(*v565, v566);
                v565[1] = v567;
                v565[2].i32[0] += 9;
                v481 = v793;
              }
            }
          }
          v568 = (unsigned int *)v467[630];
          if (*((_BYTE *)v568 + 20))
          {
            v569 = (unsigned int *)v467[629];
            if (*((_BYTE *)v569 + 20))
            {
              v570 = *(_QWORD *)(v477 + 17864) + *v568;
              v571 = *(_QWORD *)(*v480 + 8 * v570);
              v572 = *(_QWORD *)(v477 + 17872) + *v569;
              v573 = *(_QWORD *)(*v480 + 8 * v572);
              if (v571 <= v573 && v571 <= *v479)
              {
                v574 = *v481 + 24 * v572;
                v576 = (uint64_t **)(v574 + 8);
                v575 = *(uint64_t **)(v574 + 8);
                if (v575)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v577 = (uint64_t **)v575;
                      v578 = *((_DWORD *)v575 + 7);
                      if (v578 <= v570)
                        break;
                      v575 = *v577;
                      v576 = v577;
                      if (!*v577)
                        goto LABEL_579;
                    }
                    if (v578 >= v570)
                      break;
                    v575 = v577[1];
                    if (!v575)
                    {
                      v576 = v577 + 1;
                      goto LABEL_579;
                    }
                  }
                }
                else
                {
                  v577 = (uint64_t **)(v574 + 8);
LABEL_579:
                  v579 = operator new(0x20uLL);
                  v579[7] = v570;
                  *(_QWORD *)v579 = 0;
                  *((_QWORD *)v579 + 1) = 0;
                  *((_QWORD *)v579 + 2) = v577;
                  *v576 = (uint64_t *)v579;
                  v580 = **(_QWORD **)v574;
                  if (v580)
                  {
                    *(_QWORD *)v574 = v580;
                    v581 = *v576;
                  }
                  else
                  {
                    v581 = (uint64_t *)v579;
                  }
                  result = sub_20E868578(*(uint64_t **)(v574 + 8), v581);
                  ++*(_QWORD *)(v574 + 16);
                  v2 = v807;
                  v582 = (int32x4_t *)(*v801 + 4 * v573);
                  v583.i64[0] = 0x600000006;
                  v583.i64[1] = 0x600000006;
                  v584 = vaddq_s32(v582[1], v583);
                  *v582 = vaddq_s32(*v582, v583);
                  v582[1] = v584;
                  v582[2].i32[0] += 6;
                  v481 = v793;
                }
              }
            }
          }
          v585 = (unsigned int *)v467[631];
          if (*((_BYTE *)v585 + 20))
          {
            v586 = (unsigned int *)v467[629];
            if (*((_BYTE *)v586 + 20))
            {
              v587 = *(_QWORD *)(v477 + 17872);
              v588 = v587 + *v585;
              v589 = *(_QWORD *)(*v480 + 8 * v588);
              v590 = v587 + *v586;
              v591 = *(_QWORD *)(*v480 + 8 * v590);
              if (v589 <= v591 && v589 <= *v479)
              {
                v592 = *v481 + 24 * v590;
                v594 = (uint64_t **)(v592 + 8);
                v593 = *(uint64_t **)(v592 + 8);
                if (v593)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v595 = (uint64_t **)v593;
                      v596 = *((_DWORD *)v593 + 7);
                      if (v596 <= v588)
                        break;
                      v593 = *v595;
                      v594 = v595;
                      if (!*v595)
                        goto LABEL_594;
                    }
                    if (v596 >= v588)
                      break;
                    v593 = v595[1];
                    if (!v593)
                    {
                      v594 = v595 + 1;
                      goto LABEL_594;
                    }
                  }
                }
                else
                {
                  v595 = (uint64_t **)(v592 + 8);
LABEL_594:
                  v597 = operator new(0x20uLL);
                  v597[7] = v588;
                  *(_QWORD *)v597 = 0;
                  *((_QWORD *)v597 + 1) = 0;
                  *((_QWORD *)v597 + 2) = v595;
                  *v594 = (uint64_t *)v597;
                  v598 = **(_QWORD **)v592;
                  if (v598)
                  {
                    *(_QWORD *)v592 = v598;
                    v599 = *v594;
                  }
                  else
                  {
                    v599 = (uint64_t *)v597;
                  }
                  result = sub_20E868578(*(uint64_t **)(v592 + 8), v599);
                  ++*(_QWORD *)(v592 + 16);
                  v2 = v807;
                  v600 = (int32x4_t *)(*v801 + 4 * v591);
                  v601.i64[0] = 0x900000009;
                  v601.i64[1] = 0x900000009;
                  v602 = vaddq_s32(v600[1], v601);
                  *v600 = vaddq_s32(*v600, v601);
                  v600[1] = v602;
                  v600[2].i32[0] += 9;
                  v481 = v793;
                }
              }
            }
          }
          v603 = (unsigned int *)v467[628];
          v604 = (unsigned int *)v467[630];
          if (*((_BYTE *)v603 + 20))
          {
            if (*((_BYTE *)v604 + 20))
            {
              v605 = *(_QWORD *)(v477 + 17864);
              v606 = v605 + *v603;
              v607 = *(_QWORD *)(*v480 + 8 * v606);
              v608 = v605 + *v604;
              v609 = *(_QWORD *)(*v480 + 8 * v608);
              if (v607 <= v609 && v607 <= *v479)
              {
                v610 = *v481 + 24 * v608;
                v612 = (uint64_t **)(v610 + 8);
                v611 = *(uint64_t **)(v610 + 8);
                if (v611)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v613 = (uint64_t **)v611;
                      v614 = *((_DWORD *)v611 + 7);
                      if (v614 <= v606)
                        break;
                      v611 = *v613;
                      v612 = v613;
                      if (!*v613)
                        goto LABEL_609;
                    }
                    if (v614 >= v606)
                      break;
                    v611 = v613[1];
                    if (!v611)
                    {
                      v612 = v613 + 1;
                      goto LABEL_609;
                    }
                  }
                }
                else
                {
                  v613 = (uint64_t **)(v610 + 8);
LABEL_609:
                  v615 = operator new(0x20uLL);
                  v615[7] = v606;
                  *(_QWORD *)v615 = 0;
                  *((_QWORD *)v615 + 1) = 0;
                  *((_QWORD *)v615 + 2) = v613;
                  *v612 = (uint64_t *)v615;
                  v616 = **(_QWORD **)v610;
                  if (v616)
                  {
                    *(_QWORD *)v610 = v616;
                    v617 = *v612;
                  }
                  else
                  {
                    v617 = (uint64_t *)v615;
                  }
                  result = sub_20E868578(*(uint64_t **)(v610 + 8), v617);
                  ++*(_QWORD *)(v610 + 16);
                  v2 = v807;
                  v618 = *v801 + 4 * v609;
                  v619.i64[0] = 0x600000006;
                  v619.i64[1] = 0x600000006;
                  *(int32x4_t *)v618 = vaddq_s32(*(int32x4_t *)v618, v619);
                  *(int32x2_t *)(v618 + 16) = vadd_s32(*(int32x2_t *)(v618 + 16), (int32x2_t)0x600000006);
                  v604 = (unsigned int *)v467[630];
                  v481 = v793;
                }
              }
            }
          }
          v620 = (unsigned int *)v467[629];
          if (*((_BYTE *)v620 + 20))
          {
            if (*((_BYTE *)v604 + 20))
            {
              v621 = *(_QWORD *)(v477 + 17872) + *v620;
              v622 = *(_QWORD *)(*v480 + 8 * v621);
              v623 = *(_QWORD *)(v477 + 17864) + *v604;
              v624 = *(_QWORD *)(*v480 + 8 * v623);
              if (v622 <= v624 && v622 <= *v479)
              {
                v625 = *v481 + 24 * v623;
                v627 = (uint64_t **)(v625 + 8);
                v626 = *(uint64_t **)(v625 + 8);
                if (v626)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v628 = (uint64_t **)v626;
                      v629 = *((_DWORD *)v626 + 7);
                      if (v629 <= v621)
                        break;
                      v626 = *v628;
                      v627 = v628;
                      if (!*v628)
                        goto LABEL_624;
                    }
                    if (v629 >= v621)
                      break;
                    v626 = v628[1];
                    if (!v626)
                    {
                      v627 = v628 + 1;
                      goto LABEL_624;
                    }
                  }
                }
                else
                {
                  v628 = (uint64_t **)(v625 + 8);
LABEL_624:
                  v630 = operator new(0x20uLL);
                  v630[7] = v621;
                  *(_QWORD *)v630 = 0;
                  *((_QWORD *)v630 + 1) = 0;
                  *((_QWORD *)v630 + 2) = v628;
                  *v627 = (uint64_t *)v630;
                  v631 = **(_QWORD **)v625;
                  if (v631)
                  {
                    *(_QWORD *)v625 = v631;
                    v632 = *v627;
                  }
                  else
                  {
                    v632 = (uint64_t *)v630;
                  }
                  result = sub_20E868578(*(uint64_t **)(v625 + 8), v632);
                  ++*(_QWORD *)(v625 + 16);
                  v2 = v807;
                  v633 = *v801 + 4 * v624;
                  v634.i64[0] = 0x900000009;
                  v634.i64[1] = 0x900000009;
                  *(int32x4_t *)v633 = vaddq_s32(*(int32x4_t *)v633, v634);
                  *(int32x2_t *)(v633 + 16) = vadd_s32(*(int32x2_t *)(v633 + 16), (int32x2_t)0x900000009);
                  v604 = (unsigned int *)v467[630];
                  v481 = v793;
                }
              }
            }
          }
          if (*((_BYTE *)v604 + 20))
          {
            v635 = *(_QWORD *)(v477 + 17864) + *v604;
            v636 = *(_QWORD *)(*v480 + 8 * v635);
            if (v636 <= *v479)
            {
              v637 = *v481 + 24 * v635;
              v639 = (uint64_t **)(v637 + 8);
              v638 = *(uint64_t **)(v637 + 8);
              if (v638)
              {
                while (1)
                {
                  while (1)
                  {
                    v640 = (uint64_t **)v638;
                    v641 = *((_DWORD *)v638 + 7);
                    if (v641 <= v635)
                      break;
                    v638 = *v640;
                    v639 = v640;
                    if (!*v640)
                      goto LABEL_637;
                  }
                  if (v641 >= v635)
                    break;
                  v638 = v640[1];
                  if (!v638)
                  {
                    v639 = v640 + 1;
                    goto LABEL_637;
                  }
                }
              }
              else
              {
                v640 = (uint64_t **)(v637 + 8);
LABEL_637:
                v642 = operator new(0x20uLL);
                v642[7] = v635;
                *(_QWORD *)v642 = 0;
                *((_QWORD *)v642 + 1) = 0;
                *((_QWORD *)v642 + 2) = v640;
                *v639 = (uint64_t *)v642;
                v643 = **(_QWORD **)v637;
                if (v643)
                {
                  *(_QWORD *)v637 = v643;
                  v644 = *v639;
                }
                else
                {
                  v644 = (uint64_t *)v642;
                }
                result = sub_20E868578(*(uint64_t **)(v637 + 8), v644);
                ++*(_QWORD *)(v637 + 16);
                v2 = v807;
                v645 = *v801 + 4 * v636;
                v646.i64[0] = 0x600000006;
                v646.i64[1] = 0x600000006;
                *(int32x4_t *)v645 = vaddq_s32(*(int32x4_t *)v645, v646);
                *(int32x2_t *)(v645 + 16) = vadd_s32(*(int32x2_t *)(v645 + 16), (int32x2_t)0x600000006);
                v481 = v793;
              }
            }
          }
          v647 = (unsigned int *)v467[631];
          if (*((_BYTE *)v647 + 20)
            && (v648 = (unsigned int *)v467[630], *((_BYTE *)v648 + 20))
            && (v649 = *(_QWORD *)(v477 + 17872) + *v647,
                v650 = *(_QWORD *)(*v480 + 8 * v649),
                v651 = *(_QWORD *)(v477 + 17864) + *v648,
                v652 = *(_QWORD *)(*v480 + 8 * v651),
                v650 <= v652)
            && v650 <= *v479)
          {
            v666 = *v481 + 24 * v651;
            v668 = (uint64_t **)(v666 + 8);
            v667 = *(uint64_t **)(v666 + 8);
            if (v667)
            {
              while (1)
              {
                while (1)
                {
                  v669 = (uint64_t **)v667;
                  v670 = *((_DWORD *)v667 + 7);
                  if (v670 <= v649)
                    break;
                  v667 = *v669;
                  v668 = v669;
                  if (!*v669)
                    goto LABEL_665;
                }
                if (v670 >= v649)
                  goto LABEL_645;
                v667 = v669[1];
                if (!v667)
                {
                  v668 = v669 + 1;
                  goto LABEL_665;
                }
              }
            }
            v669 = (uint64_t **)(v666 + 8);
LABEL_665:
            v671 = operator new(0x20uLL);
            v671[7] = v649;
            *(_QWORD *)v671 = 0;
            *((_QWORD *)v671 + 1) = 0;
            *((_QWORD *)v671 + 2) = v669;
            *v668 = (uint64_t *)v671;
            v672 = **(_QWORD **)v666;
            if (v672)
            {
              *(_QWORD *)v666 = v672;
              v673 = *v668;
            }
            else
            {
              v673 = (uint64_t *)v671;
            }
            result = sub_20E868578(*(uint64_t **)(v666 + 8), v673);
            ++*(_QWORD *)(v666 + 16);
            v2 = v807;
            v678 = *v801 + 4 * v652;
            v679.i64[0] = 0x900000009;
            v679.i64[1] = 0x900000009;
            *(int32x4_t *)v678 = vaddq_s32(*(int32x4_t *)v678, v679);
            *(int32x2_t *)(v678 + 16) = vadd_s32(*(int32x2_t *)(v678 + 16), (int32x2_t)0x900000009);
            v647 = (unsigned int *)v467[631];
            v481 = v793;
            v653 = (unsigned int *)v467[628];
            if (!*((_BYTE *)v653 + 20))
              goto LABEL_672;
LABEL_646:
            if (!*((_BYTE *)v647 + 20))
              goto LABEL_672;
            v654 = *(_QWORD *)(v477 + 17864) + *v653;
            v655 = *(_QWORD *)(*v480 + 8 * v654);
            v656 = *(_QWORD *)(v477 + 17872) + *v647;
            v657 = *(_QWORD *)(*v480 + 8 * v656);
            if (v655 > v657 || v655 > *v479)
              goto LABEL_672;
            v658 = *v481 + 24 * v656;
            v660 = (uint64_t **)(v658 + 8);
            v659 = *(uint64_t **)(v658 + 8);
            if (v659)
            {
              while (1)
              {
                while (1)
                {
                  v661 = (uint64_t **)v659;
                  v662 = *((_DWORD *)v659 + 7);
                  if (v662 <= v654)
                    break;
                  v659 = *v661;
                  v660 = v661;
                  if (!*v661)
                    goto LABEL_656;
                }
                if (v662 >= v654)
                  break;
                v659 = v661[1];
                if (!v659)
                {
                  v660 = v661 + 1;
                  goto LABEL_656;
                }
              }
              v677 = (unsigned int *)v467[629];
              if (*((_BYTE *)v677 + 20))
                goto LABEL_673;
            }
            else
            {
              v661 = (uint64_t **)(v658 + 8);
LABEL_656:
              v663 = operator new(0x20uLL);
              v663[7] = v654;
              *(_QWORD *)v663 = 0;
              *((_QWORD *)v663 + 1) = 0;
              *((_QWORD *)v663 + 2) = v661;
              *v660 = (uint64_t *)v663;
              v664 = **(_QWORD **)v658;
              if (v664)
              {
                *(_QWORD *)v658 = v664;
                v665 = *v660;
              }
              else
              {
                v665 = (uint64_t *)v663;
              }
              result = sub_20E868578(*(uint64_t **)(v658 + 8), v665);
              ++*(_QWORD *)(v658 + 16);
              v2 = v807;
              v674 = (int32x4_t *)(*v801 + 4 * v657);
              v675.i64[0] = 0x600000006;
              v675.i64[1] = 0x600000006;
              v676 = vaddq_s32(v674[1], v675);
              *v674 = vaddq_s32(*v674, v675);
              v674[1] = v676;
              v674[2].i32[0] += 6;
              v647 = (unsigned int *)v467[631];
              v481 = v793;
              v677 = (unsigned int *)v467[629];
              if (*((_BYTE *)v677 + 20))
                goto LABEL_673;
            }
          }
          else
          {
LABEL_645:
            v653 = (unsigned int *)v467[628];
            if (*((_BYTE *)v653 + 20))
              goto LABEL_646;
LABEL_672:
            v677 = (unsigned int *)v467[629];
            if (*((_BYTE *)v677 + 20))
            {
LABEL_673:
              if (!*((_BYTE *)v647 + 20))
                goto LABEL_687;
              v680 = *(_QWORD *)(v477 + 17872);
              v681 = v680 + *v677;
              v682 = *(_QWORD *)(*v480 + 8 * v681);
              v683 = v680 + *v647;
              v684 = *(_QWORD *)(*v480 + 8 * v683);
              if (v682 > v684 || v682 > *v479)
                goto LABEL_687;
              v685 = *v481 + 24 * v683;
              v687 = (uint64_t **)(v685 + 8);
              v686 = *(uint64_t **)(v685 + 8);
              if (!v686)
              {
                v688 = (uint64_t **)(v685 + 8);
LABEL_683:
                v690 = operator new(0x20uLL);
                v690[7] = v681;
                *(_QWORD *)v690 = 0;
                *((_QWORD *)v690 + 1) = 0;
                *((_QWORD *)v690 + 2) = v688;
                *v687 = (uint64_t *)v690;
                v691 = **(_QWORD **)v685;
                if (v691)
                {
                  *(_QWORD *)v685 = v691;
                  v692 = *v687;
                }
                else
                {
                  v692 = (uint64_t *)v690;
                }
                result = sub_20E868578(*(uint64_t **)(v685 + 8), v692);
                ++*(_QWORD *)(v685 + 16);
                v2 = v807;
                v693 = (int32x4_t *)(*v801 + 4 * v684);
                v694.i64[0] = 0x900000009;
                v694.i64[1] = 0x900000009;
                v695 = vaddq_s32(v693[1], v694);
                *v693 = vaddq_s32(*v693, v694);
                v693[1] = v695;
                v693[2].i32[0] += 9;
                v647 = (unsigned int *)v467[631];
                v481 = v793;
                goto LABEL_687;
              }
              while (1)
              {
                while (1)
                {
                  v688 = (uint64_t **)v686;
                  v689 = *((_DWORD *)v686 + 7);
                  if (v689 <= v681)
                    break;
                  v686 = *v688;
                  v687 = v688;
                  if (!*v688)
                    goto LABEL_683;
                }
                if (v689 >= v681)
                  break;
                v686 = v688[1];
                if (!v686)
                {
                  v687 = v688 + 1;
                  goto LABEL_683;
                }
              }
              v696 = (unsigned int *)v467[630];
              if (!*((_BYTE *)v696 + 20))
              {
LABEL_702:
                if (*((_BYTE *)v647 + 20))
                {
                  v712 = *(_QWORD *)(v477 + 17872) + *v647;
                  v713 = *(_QWORD *)(*v480 + 8 * v712);
                  if (v713 <= *v479)
                  {
                    v714 = *v481 + 24 * v712;
                    v716 = (uint64_t **)(v714 + 8);
                    v715 = *(uint64_t **)(v714 + 8);
                    if (v715)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v717 = (uint64_t **)v715;
                          v718 = *((_DWORD *)v715 + 7);
                          if (v718 <= v712)
                            break;
                          v715 = *v717;
                          v716 = v717;
                          if (!*v717)
                            goto LABEL_711;
                        }
                        if (v718 >= v712)
                          break;
                        v715 = v717[1];
                        if (!v715)
                        {
                          v716 = v717 + 1;
                          goto LABEL_711;
                        }
                      }
                    }
                    else
                    {
                      v717 = (uint64_t **)(v714 + 8);
LABEL_711:
                      v719 = operator new(0x20uLL);
                      v719[7] = v712;
                      *(_QWORD *)v719 = 0;
                      *((_QWORD *)v719 + 1) = 0;
                      *((_QWORD *)v719 + 2) = v717;
                      *v716 = (uint64_t *)v719;
                      v720 = **(_QWORD **)v714;
                      if (v720)
                      {
                        *(_QWORD *)v714 = v720;
                        v469 = *v716;
                      }
                      else
                      {
                        v469 = (uint64_t *)v719;
                      }
                      result = sub_20E868578(*(uint64_t **)(v714 + 8), v469);
                      ++*(_QWORD *)(v714 + 16);
                      v2 = v807;
                      v470 = (int32x4_t *)(*v801 + 4 * v713);
                      v471.i64[0] = 0x900000009;
                      v471.i64[1] = 0x900000009;
                      v472 = vaddq_s32(v470[1], v471);
                      *v470 = vaddq_s32(*v470, v471);
                      v470[1] = v472;
                      v470[2].i32[0] += 9;
                    }
                  }
                }
                goto LABEL_472;
              }
LABEL_688:
              if (*((_BYTE *)v647 + 20))
              {
                v697 = *(_QWORD *)(v477 + 17864) + *v696;
                v698 = *(_QWORD *)(*v480 + 8 * v697);
                v699 = *(_QWORD *)(v477 + 17872) + *v647;
                v700 = *(_QWORD *)(*v480 + 8 * v699);
                if (v698 <= v700 && v698 <= *v479)
                {
                  v701 = *v481 + 24 * v699;
                  v703 = (uint64_t **)(v701 + 8);
                  v702 = *(uint64_t **)(v701 + 8);
                  if (v702)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v704 = (uint64_t **)v702;
                        v705 = *((_DWORD *)v702 + 7);
                        if (v705 <= v697)
                          break;
                        v702 = *v704;
                        v703 = v704;
                        if (!*v704)
                          goto LABEL_698;
                      }
                      if (v705 >= v697)
                        break;
                      v702 = v704[1];
                      if (!v702)
                      {
                        v703 = v704 + 1;
                        goto LABEL_698;
                      }
                    }
                  }
                  else
                  {
                    v704 = (uint64_t **)(v701 + 8);
LABEL_698:
                    v706 = operator new(0x20uLL);
                    v706[7] = v697;
                    *(_QWORD *)v706 = 0;
                    *((_QWORD *)v706 + 1) = 0;
                    *((_QWORD *)v706 + 2) = v704;
                    *v703 = (uint64_t *)v706;
                    v707 = **(_QWORD **)v701;
                    if (v707)
                    {
                      *(_QWORD *)v701 = v707;
                      v708 = *v703;
                    }
                    else
                    {
                      v708 = (uint64_t *)v706;
                    }
                    result = sub_20E868578(*(uint64_t **)(v701 + 8), v708);
                    ++*(_QWORD *)(v701 + 16);
                    v2 = v807;
                    v709 = (int32x4_t *)(*v801 + 4 * v700);
                    v710.i64[0] = 0x600000006;
                    v710.i64[1] = 0x600000006;
                    v711 = vaddq_s32(v709[1], v710);
                    *v709 = vaddq_s32(*v709, v710);
                    v709[1] = v711;
                    v709[2].i32[0] += 6;
                    v647 = (unsigned int *)v467[631];
                    v481 = v793;
                  }
                }
              }
              goto LABEL_702;
            }
          }
LABEL_687:
          v696 = (unsigned int *)v467[630];
          if (!*((_BYTE *)v696 + 20))
            goto LABEL_702;
          goto LABEL_688;
        }
      }
    }
LABEL_472:
    v467 += 667;
    if (v467 != v468)
      continue;
    break;
  }
  v2 = (uint64_t *)*v788;
  v1 = (_QWORD *)v788[1];
LABEL_719:
  v721 = (_QWORD *)v1[109];
  v722 = (_QWORD *)v1[110];
  if (v721 != v722)
  {
    do
    {
      v723 = v2;
      result = sub_20F7586C4(v2, v721);
      v2 = v723;
      v721 += 27;
    }
    while (v721 != v722);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v724 = v1[112];
  v725 = v1[113];
  if (v724 != v725)
  {
    v808 = v2;
    do
    {
      v729 = *(unsigned int **)(v724 + 736);
      v730 = *(unsigned int **)(v724 + 744);
      if (((*((unsigned __int8 *)v730 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v729 + 4)) >> 7)
      {
        v731 = v2[1];
        if (!*((_BYTE *)v729 + 20) || *v729 != -1)
        {
          v732 = *((unsigned __int8 *)v730 + 20);
          if (!*((_BYTE *)v730 + 20) || *v730 != -1)
          {
            v734 = (_QWORD *)v2[2];
            v733 = (unint64_t *)v2[3];
            v735 = (_QWORD *)v2[4];
            v736 = (_QWORD *)v2[5];
            if (*((_BYTE *)v729 + 20))
            {
              v737 = *(_QWORD *)(v731 + 17864) + *v729;
              v738 = *(_QWORD *)(*v734 + 8 * v737);
              if (v738 <= *v733)
              {
                v739 = *v735 + 24 * v737;
                v741 = (uint64_t **)(v739 + 8);
                v740 = *(uint64_t **)(v739 + 8);
                if (v740)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v742 = (uint64_t **)v740;
                      v743 = *((_DWORD *)v740 + 7);
                      if (v743 <= v737)
                        break;
                      v740 = *v742;
                      v741 = v742;
                      if (!*v742)
                        goto LABEL_741;
                    }
                    if (v743 >= v737)
                      break;
                    v740 = v742[1];
                    if (!v740)
                    {
                      v741 = v742 + 1;
                      goto LABEL_741;
                    }
                  }
                }
                else
                {
                  v742 = (uint64_t **)(v739 + 8);
LABEL_741:
                  v794 = (unint64_t *)v2[3];
                  v802 = (_QWORD *)v2[4];
                  v744 = operator new(0x20uLL);
                  v744[7] = v737;
                  *(_QWORD *)v744 = 0;
                  *((_QWORD *)v744 + 1) = 0;
                  *((_QWORD *)v744 + 2) = v742;
                  *v741 = (uint64_t *)v744;
                  v745 = **(_QWORD **)v739;
                  if (v745)
                  {
                    *(_QWORD *)v739 = v745;
                    v746 = *v741;
                  }
                  else
                  {
                    v746 = (uint64_t *)v744;
                  }
                  result = sub_20E868578(*(uint64_t **)(v739 + 8), v746);
                  ++*(_QWORD *)(v739 + 16);
                  v747 = *v736 + 4 * v738;
                  v748.i64[0] = 0x600000006;
                  v748.i64[1] = 0x600000006;
                  *(int32x4_t *)v747 = vaddq_s32(*(int32x4_t *)v747, v748);
                  *(int32x2_t *)(v747 + 16) = vadd_s32(*(int32x2_t *)(v747 + 16), (int32x2_t)0x600000006);
                  v730 = *(unsigned int **)(v724 + 744);
                  v732 = *((unsigned __int8 *)v730 + 20);
                  v729 = *(unsigned int **)(v724 + 736);
                  v735 = v802;
                  v2 = v808;
                  v733 = v794;
                }
              }
            }
            if (v732)
            {
              if (*((_BYTE *)v729 + 20))
              {
                v749 = *(_QWORD *)(v731 + 17864);
                v750 = v749 + *v730;
                v751 = *(_QWORD *)(*v734 + 8 * v750);
                v752 = v749 + *v729;
                v753 = *(_QWORD *)(*v734 + 8 * v752);
                if (v751 <= v753 && v751 <= *v733)
                {
                  v754 = *v735 + 24 * v752;
                  v756 = (uint64_t **)(v754 + 8);
                  v755 = *(uint64_t **)(v754 + 8);
                  if (v755)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v757 = (uint64_t **)v755;
                        v758 = *((_DWORD *)v755 + 7);
                        if (v758 <= v750)
                          break;
                        v755 = *v757;
                        v756 = v757;
                        if (!*v757)
                          goto LABEL_756;
                      }
                      if (v758 >= v750)
                        break;
                      v755 = v757[1];
                      if (!v755)
                      {
                        v756 = v757 + 1;
                        goto LABEL_756;
                      }
                    }
                  }
                  else
                  {
                    v757 = (uint64_t **)(v754 + 8);
LABEL_756:
                    v795 = v733;
                    v803 = v735;
                    v759 = operator new(0x20uLL);
                    v759[7] = v750;
                    *(_QWORD *)v759 = 0;
                    *((_QWORD *)v759 + 1) = 0;
                    *((_QWORD *)v759 + 2) = v757;
                    *v756 = (uint64_t *)v759;
                    v760 = **(_QWORD **)v754;
                    if (v760)
                    {
                      *(_QWORD *)v754 = v760;
                      v761 = *v756;
                    }
                    else
                    {
                      v761 = (uint64_t *)v759;
                    }
                    result = sub_20E868578(*(uint64_t **)(v754 + 8), v761);
                    ++*(_QWORD *)(v754 + 16);
                    v762 = *v736 + 4 * v753;
                    v763.i64[0] = 0x600000006;
                    v763.i64[1] = 0x600000006;
                    *(int32x4_t *)v762 = vaddq_s32(*(int32x4_t *)v762, v763);
                    *(int32x2_t *)(v762 + 16) = vadd_s32(*(int32x2_t *)(v762 + 16), (int32x2_t)0x600000006);
                    v729 = *(unsigned int **)(v724 + 736);
                    v730 = *(unsigned int **)(v724 + 744);
                    v735 = v803;
                    v2 = v808;
                    v733 = v795;
                  }
                }
              }
            }
            if (*((_BYTE *)v729 + 20))
            {
              if (*((_BYTE *)v730 + 20))
              {
                v764 = *(_QWORD *)(v731 + 17864);
                v765 = v764 + *v729;
                v766 = *(_QWORD *)(*v734 + 8 * v765);
                v767 = v764 + *v730;
                v768 = *(_QWORD *)(*v734 + 8 * v767);
                if (v766 <= v768 && v766 <= *v733)
                {
                  v769 = *v735 + 24 * v767;
                  v771 = (uint64_t **)(v769 + 8);
                  v770 = *(uint64_t **)(v769 + 8);
                  if (v770)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v772 = (uint64_t **)v770;
                        v773 = *((_DWORD *)v770 + 7);
                        if (v773 <= v765)
                          break;
                        v770 = *v772;
                        v771 = v772;
                        if (!*v772)
                          goto LABEL_771;
                      }
                      if (v773 >= v765)
                        break;
                      v770 = v772[1];
                      if (!v770)
                      {
                        v771 = v772 + 1;
                        goto LABEL_771;
                      }
                    }
                  }
                  else
                  {
                    v772 = (uint64_t **)(v769 + 8);
LABEL_771:
                    v796 = v733;
                    v804 = v735;
                    v774 = operator new(0x20uLL);
                    v774[7] = v765;
                    *(_QWORD *)v774 = 0;
                    *((_QWORD *)v774 + 1) = 0;
                    *((_QWORD *)v774 + 2) = v772;
                    *v771 = (uint64_t *)v774;
                    v775 = **(_QWORD **)v769;
                    if (v775)
                    {
                      *(_QWORD *)v769 = v775;
                      v776 = *v771;
                    }
                    else
                    {
                      v776 = (uint64_t *)v774;
                    }
                    result = sub_20E868578(*(uint64_t **)(v769 + 8), v776);
                    ++*(_QWORD *)(v769 + 16);
                    v777 = *v736 + 4 * v768;
                    v778.i64[0] = 0x600000006;
                    v778.i64[1] = 0x600000006;
                    *(int32x4_t *)v777 = vaddq_s32(*(int32x4_t *)v777, v778);
                    *(int32x2_t *)(v777 + 16) = vadd_s32(*(int32x2_t *)(v777 + 16), (int32x2_t)0x600000006);
                    v730 = *(unsigned int **)(v724 + 744);
                    v735 = v804;
                    v2 = v808;
                    v733 = v796;
                  }
                }
              }
            }
            if (*((_BYTE *)v730 + 20))
            {
              v779 = *(_QWORD *)(v731 + 17864) + *v730;
              v780 = *(_QWORD *)(*v734 + 8 * v779);
              if (v780 <= *v733)
              {
                v781 = *v735 + 24 * v779;
                v783 = (uint64_t **)(v781 + 8);
                v782 = *(uint64_t **)(v781 + 8);
                if (v782)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v784 = (uint64_t **)v782;
                      v785 = *((_DWORD *)v782 + 7);
                      if (v785 <= v779)
                        break;
                      v782 = *v784;
                      v783 = v784;
                      if (!*v784)
                        goto LABEL_784;
                    }
                    if (v785 >= v779)
                      break;
                    v782 = v784[1];
                    if (!v782)
                    {
                      v783 = v784 + 1;
                      goto LABEL_784;
                    }
                  }
                }
                else
                {
                  v784 = (uint64_t **)(v781 + 8);
LABEL_784:
                  v786 = operator new(0x20uLL);
                  v786[7] = v779;
                  *(_QWORD *)v786 = 0;
                  *((_QWORD *)v786 + 1) = 0;
                  *((_QWORD *)v786 + 2) = v784;
                  *v783 = (uint64_t *)v786;
                  v787 = **(_QWORD **)v781;
                  if (v787)
                  {
                    *(_QWORD *)v781 = v787;
                    v726 = *v783;
                  }
                  else
                  {
                    v726 = (uint64_t *)v786;
                  }
                  result = sub_20E868578(*(uint64_t **)(v781 + 8), v726);
                  ++*(_QWORD *)(v781 + 16);
                  v727 = *v736 + 4 * v780;
                  v728.i64[0] = 0x600000006;
                  v728.i64[1] = 0x600000006;
                  *(int32x4_t *)v727 = vaddq_s32(*(int32x4_t *)v727, v728);
                  *(int32x2_t *)(v727 + 16) = vadd_s32(*(int32x2_t *)(v727 + 16), (int32x2_t)0x600000006);
                  v2 = v808;
                }
              }
            }
          }
        }
      }
      v724 += 888;
    }
    while (v724 != v725);
  }
  return result;
}

uint64_t *sub_20F7586C4(uint64_t *result, _QWORD *a2)
{
  unsigned int **v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int32x4_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int32x4_t v36;
  unsigned int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t **v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int32x4_t v51;
  unsigned int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  unsigned int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int32x4_t v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t **v75;
  unsigned int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int32x4_t v81;
  unsigned int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  unsigned int v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  int32x4_t v96;
  unsigned int *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  unsigned int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int32x4_t v111;
  unsigned int *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  uint64_t **v120;
  unsigned int v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int32x4_t v126;
  unsigned int *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t **v134;
  uint64_t **v135;
  unsigned int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  int32x4_t v141;
  unsigned int *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t **v149;
  uint64_t **v150;
  unsigned int v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  int32x4_t v156;
  unsigned int *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t **v164;
  uint64_t **v165;
  unsigned int v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int32x4_t v171;
  unsigned int *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t **v180;
  uint64_t **v181;
  unsigned int v182;
  _DWORD *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  int32x4_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t **v192;
  uint64_t **v193;
  unsigned int v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  int32x4_t v199;
  unsigned int *v200;
  unsigned int *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t **v208;
  uint64_t **v209;
  unsigned int v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int32x4_t v215;
  unsigned int *v216;
  unsigned int *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t **v225;
  unsigned int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  int32x4_t v231;
  unsigned int *v232;
  unsigned int *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t **v240;
  uint64_t **v241;
  unsigned int v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  int32x4_t v247;
  unsigned int *v248;
  unsigned int *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t **v256;
  uint64_t **v257;
  unsigned int v258;
  _DWORD *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  int32x4_t v263;
  unsigned int *v264;
  unsigned int *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t **v272;
  uint64_t **v273;
  unsigned int v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  int32x4_t v279;
  unsigned int *v280;
  unsigned int *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t **v288;
  uint64_t **v289;
  unsigned int v290;
  _DWORD *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  int32x4_t v295;
  unsigned int *v296;
  unsigned int *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t **v304;
  uint64_t **v305;
  unsigned int v306;
  _DWORD *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  int32x4_t v311;
  unsigned int *v312;
  unsigned int *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t **v320;
  uint64_t **v321;
  unsigned int v322;
  _DWORD *v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  int32x4_t v327;
  unsigned int *v328;
  unsigned int *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t **v336;
  uint64_t **v337;
  unsigned int v338;
  _DWORD *v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  int32x4_t v343;
  unsigned int *v344;
  unsigned int *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t **v352;
  uint64_t **v353;
  unsigned int v354;
  _DWORD *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int32x4_t v359;
  unsigned int *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t **v367;
  uint64_t **v368;
  unsigned int v369;
  _DWORD *v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  int32x4_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t **v379;
  uint64_t **v380;
  unsigned int v381;
  _DWORD *v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  int32x4_t v386;
  unsigned int *v387;
  unsigned int *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t **v396;
  uint64_t **v397;
  unsigned int v398;
  _DWORD *v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  int32x4_t v403;
  unsigned int *v404;
  unsigned int *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t **v412;
  uint64_t **v413;
  unsigned int v414;
  _DWORD *v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  int32x4_t v419;
  unsigned int *v420;
  unsigned int *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t **v428;
  uint64_t **v429;
  unsigned int v430;
  _DWORD *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  int32x4_t v435;
  unsigned int *v436;
  unsigned int *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t **v444;
  uint64_t **v445;
  unsigned int v446;
  _DWORD *v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  int32x4_t v451;
  unsigned int *v452;
  unsigned int *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t **v460;
  uint64_t **v461;
  unsigned int v462;
  _DWORD *v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  int32x4_t v467;
  unsigned int *v468;
  unsigned int *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t **v476;
  uint64_t **v477;
  unsigned int v478;
  _DWORD *v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  int32x4_t v483;
  unsigned int *v484;
  unsigned int *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t **v492;
  uint64_t **v493;
  unsigned int v494;
  _DWORD *v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  int32x4_t v499;
  unsigned int *v500;
  unsigned int *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t *v507;
  uint64_t **v508;
  uint64_t **v509;
  unsigned int v510;
  _DWORD *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  int32x4_t v515;
  unsigned int *v516;
  unsigned int *v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t **v524;
  uint64_t **v525;
  unsigned int v526;
  _DWORD *v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  int32x4_t v531;
  unsigned int *v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t *v538;
  uint64_t **v539;
  uint64_t **v540;
  unsigned int v541;
  _DWORD *v542;
  uint64_t v543;
  uint64_t *v544;
  uint64_t v545;
  int32x4_t v546;
  unsigned int *v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t **v555;
  uint64_t **v556;
  unsigned int v557;
  _DWORD *v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  int32x4_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t **v567;
  uint64_t **v568;
  unsigned int v569;
  _DWORD *v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  int32x4_t v574;
  unsigned int *v575;
  unsigned int *v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t **v583;
  uint64_t **v584;
  unsigned int v585;
  _DWORD *v586;
  uint64_t v587;
  uint64_t *v588;
  uint64_t v589;
  int32x4_t v590;
  unsigned int *v591;
  unsigned int *v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t **v599;
  uint64_t **v600;
  unsigned int v601;
  _DWORD *v602;
  uint64_t v603;
  uint64_t *v604;
  uint64_t v605;
  int32x4_t v606;
  unsigned int *v607;
  unsigned int *v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t **v615;
  uint64_t **v616;
  unsigned int v617;
  _DWORD *v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  int32x4_t v622;
  unsigned int *v623;
  unsigned int *v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t **v631;
  uint64_t **v632;
  unsigned int v633;
  _DWORD *v634;
  uint64_t v635;
  uint64_t *v636;
  uint64_t v637;
  int32x4_t v638;
  unsigned int *v639;
  unsigned int *v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  uint64_t **v647;
  uint64_t **v648;
  unsigned int v649;
  _DWORD *v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t v653;
  int32x4_t v654;
  unsigned int *v655;
  unsigned int *v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t **v663;
  uint64_t **v664;
  unsigned int v665;
  _DWORD *v666;
  uint64_t v667;
  uint64_t *v668;
  uint64_t v669;
  int32x4_t v670;
  unsigned int *v671;
  unsigned int *v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t *v678;
  uint64_t **v679;
  uint64_t **v680;
  unsigned int v681;
  _DWORD *v682;
  uint64_t v683;
  uint64_t *v684;
  uint64_t v685;
  int32x4_t v686;
  unsigned int *v687;
  unsigned int *v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t *v694;
  uint64_t **v695;
  uint64_t **v696;
  unsigned int v697;
  _DWORD *v698;
  uint64_t v699;
  uint64_t *v700;
  uint64_t v701;
  int32x4_t v702;
  int32x4_t v703;
  unsigned int *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t *v710;
  uint64_t **v711;
  uint64_t **v712;
  unsigned int v713;
  _DWORD *v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  int32x4_t v718;
  int32x4_t v719;
  unsigned int *v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t **v727;
  uint64_t **v728;
  unsigned int v729;
  _DWORD *v730;
  uint64_t v731;
  uint64_t *v732;
  uint64_t v733;
  int32x4_t v734;
  int32x4_t v735;
  unsigned int *v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t *v742;
  uint64_t **v743;
  uint64_t **v744;
  unsigned int v745;
  _DWORD *v746;
  uint64_t v747;
  uint64_t *v748;
  uint64_t v749;
  int32x4_t v750;
  int32x4_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t **v756;
  uint64_t **v757;
  unsigned int v758;
  _DWORD *v759;
  uint64_t v760;
  uint64_t *v761;
  int32x4_t v762;
  unsigned int *v763;
  unsigned int *v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t v770;
  uint64_t *v771;
  uint64_t **v772;
  uint64_t **v773;
  unsigned int v774;
  _DWORD *v775;
  uint64_t v776;
  uint64_t *v777;
  int32x4_t v778;
  unsigned int *v779;
  unsigned int *v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  uint64_t *v786;
  uint64_t **v787;
  uint64_t **v788;
  unsigned int v789;
  _DWORD *v790;
  uint64_t v791;
  uint64_t *v792;
  int32x4_t v793;
  unsigned int *v794;
  unsigned int *v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t *v801;
  uint64_t **v802;
  uint64_t **v803;
  unsigned int v804;
  _DWORD *v805;
  uint64_t v806;
  uint64_t *v807;
  int32x4_t v808;
  unsigned int *v809;
  unsigned int *v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  uint64_t *v816;
  uint64_t **v817;
  uint64_t **v818;
  unsigned int v819;
  _DWORD *v820;
  uint64_t v821;
  uint64_t *v822;
  int32x4_t v823;
  unsigned int *v824;
  unsigned int *v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t *v831;
  uint64_t **v832;
  uint64_t **v833;
  unsigned int v834;
  _DWORD *v835;
  uint64_t v836;
  uint64_t *v837;
  int32x4_t v838;
  unsigned int *v839;
  unsigned int *v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t *v846;
  uint64_t **v847;
  uint64_t **v848;
  unsigned int v849;
  _DWORD *v850;
  uint64_t v851;
  uint64_t *v852;
  int32x4_t v853;
  unsigned int *v854;
  unsigned int *v855;
  uint64_t v856;
  unint64_t v857;
  uint64_t v858;
  unint64_t v859;
  uint64_t v860;
  uint64_t *v861;
  uint64_t **v862;
  uint64_t **v863;
  unsigned int v864;
  _DWORD *v865;
  uint64_t v866;
  uint64_t *v867;
  uint64_t v868;
  int32x4_t v869;
  int32x4_t v870;
  unsigned int *v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t *v877;
  uint64_t **v878;
  uint64_t **v879;
  unsigned int v880;
  _DWORD *v881;
  uint64_t v882;
  uint64_t *v883;
  uint64_t v884;
  int32x4_t v885;
  int32x4_t v886;
  unsigned int *v887;
  uint64_t v888;
  unint64_t v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t *v893;
  uint64_t **v894;
  uint64_t **v895;
  unsigned int v896;
  _DWORD *v897;
  uint64_t v898;
  uint64_t *v899;
  uint64_t v900;
  int32x4_t v901;
  int32x4_t v902;
  unsigned int *v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t *v909;
  uint64_t **v910;
  uint64_t **v911;
  unsigned int v912;
  _DWORD *v913;
  uint64_t v914;
  uint64_t *v915;
  uint64_t v916;
  int32x4_t v917;
  int32x4_t v918;
  unsigned int *v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t *v926;
  uint64_t **v927;
  uint64_t **v928;
  unsigned int v929;
  _DWORD *v930;
  uint64_t v931;
  uint64_t *v932;
  uint64_t v933;
  int32x4_t v934;
  int32x4_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t *v939;
  uint64_t **v940;
  uint64_t **v941;
  unsigned int v942;
  _DWORD *v943;
  uint64_t v944;
  uint64_t *v945;
  int32x4_t v946;
  unsigned int *v947;
  unsigned int *v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  unint64_t v952;
  uint64_t v953;
  uint64_t *v954;
  uint64_t **v955;
  uint64_t **v956;
  unsigned int v957;
  _DWORD *v958;
  uint64_t v959;
  uint64_t *v960;
  int32x4_t v961;
  unsigned int *v962;
  unsigned int *v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t *v969;
  uint64_t **v970;
  uint64_t **v971;
  unsigned int v972;
  _DWORD *v973;
  uint64_t v974;
  uint64_t *v975;
  int32x4_t v976;
  unsigned int *v977;
  unsigned int *v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t *v984;
  uint64_t **v985;
  uint64_t **v986;
  unsigned int v987;
  _DWORD *v988;
  uint64_t v989;
  uint64_t *v990;
  int32x4_t v991;
  unsigned int *v992;
  unsigned int *v993;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t *v999;
  uint64_t **v1000;
  uint64_t **v1001;
  unsigned int v1002;
  _DWORD *v1003;
  uint64_t v1004;
  uint64_t *v1005;
  int32x4_t v1006;
  unsigned int *v1007;
  unsigned int *v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t *v1014;
  uint64_t **v1015;
  uint64_t **v1016;
  unsigned int v1017;
  _DWORD *v1018;
  uint64_t v1019;
  uint64_t *v1020;
  int32x4_t v1021;
  unsigned int *v1022;
  unsigned int *v1023;
  uint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t *v1029;
  uint64_t **v1030;
  uint64_t **v1031;
  unsigned int v1032;
  _DWORD *v1033;
  uint64_t v1034;
  uint64_t *v1035;
  uint64_t v1036;
  int32x4_t v1037;
  int32x4_t v1038;
  unsigned int *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  uint64_t v1044;
  uint64_t *v1045;
  uint64_t **v1046;
  uint64_t **v1047;
  unsigned int v1048;
  _DWORD *v1049;
  uint64_t v1050;
  uint64_t *v1051;
  uint64_t v1052;
  int32x4_t v1053;
  int32x4_t v1054;
  unsigned int *v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t *v1061;
  uint64_t **v1062;
  uint64_t **v1063;
  unsigned int v1064;
  _DWORD *v1065;
  uint64_t v1066;
  uint64_t *v1067;
  uint64_t v1068;
  int32x4_t v1069;
  int32x4_t v1070;
  unsigned int *v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t **v1078;
  uint64_t **v1079;
  unsigned int v1080;
  _DWORD *v1081;
  uint64_t v1082;
  uint64_t *v1083;
  uint64_t v1084;
  int32x4_t v1085;
  int32x4_t v1086;
  unsigned int *v1087;
  uint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t v1092;
  uint64_t *v1093;
  uint64_t **v1094;
  uint64_t **v1095;
  unsigned int v1096;
  _DWORD *v1097;
  uint64_t v1098;
  uint64_t *v1099;
  uint64_t v1100;
  int32x4_t v1101;
  int32x4_t v1102;
  unsigned int *v1103;
  uint64_t v1104;
  unint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  uint64_t *v1109;
  uint64_t **v1110;
  uint64_t **v1111;
  unsigned int v1112;
  _DWORD *v1113;
  uint64_t v1114;
  uint64_t *v1115;
  uint64_t v1116;
  int32x4_t v1117;
  int32x4_t v1118;
  uint64_t v1119;
  unint64_t v1120;
  uint64_t v1121;
  uint64_t *v1122;
  uint64_t **v1123;
  uint64_t **v1124;
  unsigned int v1125;
  _DWORD *v1126;
  uint64_t v1127;
  uint64_t *v1128;
  int32x4_t v1129;
  unsigned int *v1130;
  unsigned int *v1131;
  uint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  uint64_t *v1138;
  uint64_t **v1139;
  uint64_t **v1140;
  unsigned int v1141;
  _DWORD *v1142;
  uint64_t v1143;
  uint64_t *v1144;
  int32x4_t v1145;
  unsigned int *v1146;
  unsigned int *v1147;
  uint64_t v1148;
  unint64_t v1149;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t *v1153;
  uint64_t **v1154;
  uint64_t **v1155;
  unsigned int v1156;
  _DWORD *v1157;
  uint64_t v1158;
  uint64_t *v1159;
  int32x4_t v1160;
  unsigned int *v1161;
  unsigned int *v1162;
  uint64_t v1163;
  unint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  uint64_t *v1168;
  uint64_t **v1169;
  uint64_t **v1170;
  unsigned int v1171;
  _DWORD *v1172;
  uint64_t v1173;
  uint64_t *v1174;
  int32x4_t v1175;
  unsigned int *v1176;
  unsigned int *v1177;
  uint64_t v1178;
  unint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  uint64_t *v1183;
  uint64_t **v1184;
  uint64_t **v1185;
  unsigned int v1186;
  _DWORD *v1187;
  uint64_t v1188;
  uint64_t *v1189;
  int32x4_t v1190;
  unsigned int *v1191;
  unsigned int *v1192;
  uint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t *v1198;
  uint64_t **v1199;
  uint64_t **v1200;
  unsigned int v1201;
  _DWORD *v1202;
  uint64_t v1203;
  uint64_t *v1204;
  uint64_t v1205;
  int32x4_t v1206;
  int32x4_t v1207;
  unsigned int *v1208;
  uint64_t v1209;
  unint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  uint64_t *v1214;
  uint64_t **v1215;
  uint64_t **v1216;
  unsigned int v1217;
  _DWORD *v1218;
  uint64_t v1219;
  uint64_t *v1220;
  uint64_t v1221;
  int32x4_t v1222;
  int32x4_t v1223;
  unsigned int *v1224;
  uint64_t v1225;
  unint64_t v1226;
  uint64_t v1227;
  unint64_t v1228;
  uint64_t v1229;
  uint64_t *v1230;
  uint64_t **v1231;
  uint64_t **v1232;
  unsigned int v1233;
  _DWORD *v1234;
  uint64_t v1235;
  uint64_t *v1236;
  uint64_t v1237;
  int32x4_t v1238;
  int32x4_t v1239;
  unsigned int *v1240;
  uint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  unint64_t v1244;
  uint64_t v1245;
  uint64_t *v1246;
  uint64_t **v1247;
  uint64_t **v1248;
  unsigned int v1249;
  _DWORD *v1250;
  uint64_t v1251;
  uint64_t *v1252;
  uint64_t v1253;
  int32x4_t v1254;
  int32x4_t v1255;
  unsigned int *v1256;
  uint64_t v1257;
  unint64_t v1258;
  uint64_t v1259;
  unint64_t v1260;
  uint64_t v1261;
  uint64_t *v1262;
  uint64_t **v1263;
  uint64_t **v1264;
  unsigned int v1265;
  _DWORD *v1266;
  uint64_t v1267;
  uint64_t *v1268;
  uint64_t v1269;
  int32x4_t v1270;
  int32x4_t v1271;
  unsigned int *v1272;
  uint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t *v1278;
  uint64_t **v1279;
  uint64_t **v1280;
  unsigned int v1281;
  _DWORD *v1282;
  uint64_t v1283;
  uint64_t *v1284;
  uint64_t v1285;
  int32x4_t v1286;
  int32x4_t v1287;
  unsigned int *v1288;
  uint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t *v1295;
  uint64_t **v1296;
  uint64_t **v1297;
  unsigned int v1298;
  _DWORD *v1299;
  uint64_t v1300;
  uint64_t *v1301;
  uint64_t v1302;
  int32x4_t v1303;
  int32x4_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t **v1309;
  uint64_t **v1310;
  unsigned int v1311;
  _DWORD *v1312;
  uint64_t v1313;
  uint64_t *v1314;
  int32x4_t v1315;
  unsigned int *v1316;
  unsigned int *v1317;
  uint64_t v1318;
  unint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t v1322;
  uint64_t *v1323;
  uint64_t **v1324;
  uint64_t **v1325;
  unsigned int v1326;
  _DWORD *v1327;
  uint64_t v1328;
  uint64_t *v1329;
  int32x4_t v1330;
  unsigned int *v1331;
  unsigned int *v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  uint64_t v1337;
  uint64_t *v1338;
  uint64_t **v1339;
  uint64_t **v1340;
  unsigned int v1341;
  _DWORD *v1342;
  uint64_t v1343;
  uint64_t *v1344;
  int32x4_t v1345;
  unsigned int *v1346;
  unsigned int *v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  uint64_t *v1353;
  uint64_t **v1354;
  uint64_t **v1355;
  unsigned int v1356;
  _DWORD *v1357;
  uint64_t v1358;
  uint64_t *v1359;
  int32x4_t v1360;
  unsigned int *v1361;
  unsigned int *v1362;
  uint64_t v1363;
  unint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  uint64_t *v1368;
  uint64_t **v1369;
  uint64_t **v1370;
  unsigned int v1371;
  _DWORD *v1372;
  uint64_t v1373;
  uint64_t *v1374;
  int32x2_t *v1375;
  unsigned int *v1376;
  uint64_t v1377;
  unint64_t v1378;
  uint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  uint64_t *v1382;
  uint64_t **v1383;
  uint64_t **v1384;
  unsigned int v1385;
  _DWORD *v1386;
  uint64_t v1387;
  uint64_t *v1388;
  int32x2_t *v1389;
  unsigned int *v1390;
  uint64_t v1391;
  unint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t *v1396;
  uint64_t **v1397;
  uint64_t **v1398;
  unsigned int v1399;
  _DWORD *v1400;
  uint64_t v1401;
  uint64_t *v1402;
  int32x2_t *v1403;
  unsigned int *v1404;
  uint64_t v1405;
  unint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t v1409;
  uint64_t *v1410;
  uint64_t **v1411;
  uint64_t **v1412;
  unsigned int v1413;
  _DWORD *v1414;
  uint64_t v1415;
  uint64_t *v1416;
  int32x2_t *v1417;
  unsigned int *v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t *v1424;
  uint64_t **v1425;
  uint64_t **v1426;
  unsigned int v1427;
  _DWORD *v1428;
  uint64_t v1429;
  uint64_t *v1430;
  int32x2_t *v1431;
  unsigned int *v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t *v1438;
  uint64_t **v1439;
  uint64_t **v1440;
  unsigned int v1441;
  _DWORD *v1442;
  uint64_t v1443;
  uint64_t *v1444;
  int32x2_t *v1445;
  unsigned int *v1446;
  uint64_t v1447;
  unint64_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  uint64_t *v1452;
  uint64_t **v1453;
  uint64_t **v1454;
  unsigned int v1455;
  _DWORD *v1456;
  uint64_t v1457;
  uint64_t *v1458;
  int32x2_t *v1459;
  unsigned int *v1460;
  uint64_t v1461;
  unint64_t v1462;
  uint64_t v1463;
  unint64_t v1464;
  uint64_t v1465;
  uint64_t *v1466;
  uint64_t **v1467;
  uint64_t **v1468;
  unsigned int v1469;
  _DWORD *v1470;
  uint64_t v1471;
  uint64_t *v1472;
  int32x2_t *v1473;
  uint64_t v1474;
  unint64_t v1475;
  uint64_t v1476;
  uint64_t *v1477;
  uint64_t **v1478;
  uint64_t **v1479;
  unsigned int v1480;
  _DWORD *v1481;
  uint64_t v1482;
  uint64_t *v1483;
  int32x2_t *v1484;
  unsigned int *v1485;
  unsigned int *v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  uint64_t *v1493;
  uint64_t **v1494;
  uint64_t **v1495;
  unsigned int v1496;
  _DWORD *v1497;
  uint64_t v1498;
  uint64_t *v1499;
  int32x2_t *v1500;
  unsigned int *v1501;
  unsigned int *v1502;
  uint64_t v1503;
  unint64_t v1504;
  uint64_t v1505;
  unint64_t v1506;
  uint64_t v1507;
  uint64_t *v1508;
  uint64_t **v1509;
  uint64_t **v1510;
  unsigned int v1511;
  _DWORD *v1512;
  uint64_t v1513;
  uint64_t *v1514;
  int32x2_t *v1515;
  unsigned int *v1516;
  unsigned int *v1517;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t *v1523;
  uint64_t **v1524;
  uint64_t **v1525;
  unsigned int v1526;
  _DWORD *v1527;
  uint64_t v1528;
  uint64_t *v1529;
  int32x2_t *v1530;
  unsigned int *v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  unint64_t v1535;
  uint64_t v1536;
  uint64_t *v1537;
  uint64_t **v1538;
  uint64_t **v1539;
  unsigned int v1540;
  _DWORD *v1541;
  uint64_t v1542;
  uint64_t *v1543;
  int32x2_t *v1544;
  unsigned int *v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t v1548;
  unint64_t v1549;
  uint64_t v1550;
  uint64_t *v1551;
  uint64_t **v1552;
  uint64_t **v1553;
  unsigned int v1554;
  _DWORD *v1555;
  uint64_t v1556;
  uint64_t *v1557;
  int32x2_t *v1558;
  unsigned int *v1559;
  uint64_t v1560;
  unint64_t v1561;
  uint64_t v1562;
  unint64_t v1563;
  uint64_t v1564;
  uint64_t *v1565;
  uint64_t **v1566;
  uint64_t **v1567;
  unsigned int v1568;
  _DWORD *v1569;
  uint64_t v1570;
  uint64_t *v1571;
  int32x2_t *v1572;
  unsigned int *v1573;
  uint64_t v1574;
  unint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  uint64_t v1578;
  uint64_t *v1579;
  uint64_t **v1580;
  uint64_t **v1581;
  unsigned int v1582;
  _DWORD *v1583;
  uint64_t v1584;
  uint64_t *v1585;
  int32x2_t *v1586;
  unsigned int *v1587;
  uint64_t v1588;
  unint64_t v1589;
  uint64_t v1590;
  unint64_t v1591;
  uint64_t v1592;
  uint64_t *v1593;
  uint64_t **v1594;
  uint64_t **v1595;
  unsigned int v1596;
  _DWORD *v1597;
  uint64_t v1598;
  uint64_t *v1599;
  int32x2_t *v1600;
  unsigned int *v1601;
  uint64_t v1602;
  unint64_t v1603;
  uint64_t v1604;
  unint64_t v1605;
  uint64_t v1606;
  uint64_t *v1607;
  uint64_t **v1608;
  uint64_t **v1609;
  unsigned int v1610;
  _DWORD *v1611;
  uint64_t v1612;
  uint64_t *v1613;
  int32x2_t *v1614;
  unsigned int *v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unint64_t v1619;
  uint64_t v1620;
  uint64_t *v1621;
  uint64_t **v1622;
  uint64_t **v1623;
  unsigned int v1624;
  _DWORD *v1625;
  uint64_t v1626;
  uint64_t *v1627;
  int32x2_t *v1628;
  unsigned int *v1629;
  uint64_t v1630;
  uint64_t v1631;
  unint64_t v1632;
  uint64_t v1633;
  unint64_t v1634;
  uint64_t v1635;
  uint64_t *v1636;
  uint64_t **v1637;
  uint64_t **v1638;
  unsigned int v1639;
  _DWORD *v1640;
  uint64_t v1641;
  uint64_t *v1642;
  int32x2_t *v1643;
  uint64_t v1644;
  unint64_t v1645;
  uint64_t v1646;
  uint64_t *v1647;
  uint64_t **v1648;
  uint64_t **v1649;
  unsigned int v1650;
  _DWORD *v1651;
  uint64_t v1652;
  uint64_t *v1653;
  int32x2_t *v1654;
  unsigned int *v1655;
  unsigned int *v1656;
  uint64_t v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  uint64_t v1661;
  uint64_t *v1662;
  uint64_t **v1663;
  uint64_t **v1664;
  unsigned int v1665;
  _DWORD *v1666;
  uint64_t v1667;
  uint64_t *v1668;
  int32x2_t *v1669;
  uint64_t v1670;
  unint64_t v1671;
  uint64_t v1672;
  unint64_t v1673;
  uint64_t v1674;
  uint64_t *v1675;
  uint64_t **v1676;
  uint64_t **v1677;
  unsigned int v1678;
  _DWORD *v1679;
  uint64_t v1680;
  uint64_t *v1681;
  unsigned int *v1682;
  uint64_t v1683;
  unint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  uint64_t v1687;
  uint64_t *v1688;
  uint64_t **v1689;
  uint64_t **v1690;
  unsigned int v1691;
  _DWORD *v1692;
  uint64_t v1693;
  uint64_t *v1694;
  unsigned int *v1695;
  uint64_t v1696;
  unint64_t v1697;
  uint64_t v1698;
  unint64_t v1699;
  uint64_t v1700;
  uint64_t *v1701;
  uint64_t **v1702;
  uint64_t **v1703;
  unsigned int v1704;
  _DWORD *v1705;
  uint64_t v1706;
  uint64_t *v1707;
  unsigned int *v1708;
  uint64_t v1709;
  unint64_t v1710;
  uint64_t v1711;
  unint64_t v1712;
  uint64_t v1713;
  uint64_t *v1714;
  uint64_t **v1715;
  uint64_t **v1716;
  unsigned int v1717;
  _DWORD *v1718;
  uint64_t v1719;
  uint64_t *v1720;
  unsigned int *v1721;
  uint64_t v1722;
  unint64_t v1723;
  uint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  uint64_t *v1727;
  uint64_t **v1728;
  uint64_t **v1729;
  unsigned int v1730;
  _DWORD *v1731;
  uint64_t v1732;
  uint64_t *v1733;
  unsigned int *v1734;
  uint64_t v1735;
  unint64_t v1736;
  uint64_t v1737;
  unint64_t v1738;
  uint64_t v1739;
  uint64_t *v1740;
  uint64_t **v1741;
  uint64_t **v1742;
  unsigned int v1743;
  _DWORD *v1744;
  uint64_t v1745;
  uint64_t *v1746;
  unsigned int *v1747;
  uint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unint64_t v1751;
  uint64_t v1752;
  uint64_t *v1753;
  uint64_t **v1754;
  uint64_t **v1755;
  unsigned int v1756;
  _DWORD *v1757;
  uint64_t v1758;
  uint64_t *v1759;
  unsigned int *v1760;
  uint64_t v1761;
  unint64_t v1762;
  uint64_t v1763;
  unint64_t v1764;
  uint64_t v1765;
  uint64_t *v1766;
  uint64_t **v1767;
  uint64_t **v1768;
  unsigned int v1769;
  _DWORD *v1770;
  uint64_t v1771;
  uint64_t *v1772;
  unsigned int *v1773;
  uint64_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  unint64_t v1777;
  uint64_t v1778;
  uint64_t *v1779;
  uint64_t **v1780;
  uint64_t **v1781;
  unsigned int v1782;
  _DWORD *v1783;
  uint64_t v1784;
  uint64_t *v1785;
  unsigned int *v1786;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t *v1792;
  uint64_t **v1793;
  uint64_t **v1794;
  unsigned int v1795;
  _DWORD *v1796;
  uint64_t v1797;
  uint64_t *v1798;
  uint64_t v1799;
  unint64_t v1800;
  uint64_t v1801;
  uint64_t *v1802;
  uint64_t **v1803;
  uint64_t **v1804;
  unsigned int v1805;
  _DWORD *v1806;
  uint64_t v1807;
  uint64_t *v1808;
  uint64_t *v1809;
  _QWORD *v1810;

  v2 = (unsigned int **)(a2 + 7);
  if (!(((*(unsigned __int8 *)(a2[14] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[15] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[16] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[8] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[7] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[9] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[10] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[11] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[12] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[13] + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(a2[17] + 4) >> 2) & 1)))
  {
    v4 = result;
    v5 = (_QWORD *)result[1];
    result = (uint64_t *)sub_20F556208(a2 + 7);
    if ((_DWORD)result)
    {
      v6 = (_QWORD *)v4[2];
      v7 = (unint64_t *)v4[3];
      v1809 = (uint64_t *)v4[5];
      v1810 = (_QWORD *)v4[4];
      v8 = *v2;
      if (*((_BYTE *)*v2 + 20))
      {
        v9 = v5[2236] + *v8;
        v10 = *(_QWORD *)(*v6 + 8 * v9);
        if (v10 <= *v7)
        {
          v11 = *v1810 + 24 * v9;
          v13 = (uint64_t **)(v11 + 8);
          v12 = *(uint64_t **)(v11 + 8);
          if (v12)
          {
            while (1)
            {
              while (1)
              {
                v14 = (uint64_t **)v12;
                v15 = *((_DWORD *)v12 + 7);
                if (v15 <= v9)
                  break;
                v12 = *v14;
                v13 = v14;
                if (!*v14)
                  goto LABEL_12;
              }
              if (v15 >= v9)
                break;
              v12 = v14[1];
              if (!v12)
              {
                v13 = v14 + 1;
                goto LABEL_12;
              }
            }
          }
          else
          {
            v14 = (uint64_t **)(v11 + 8);
LABEL_12:
            v16 = operator new(0x20uLL);
            v16[7] = v9;
            *(_QWORD *)v16 = 0;
            *((_QWORD *)v16 + 1) = 0;
            *((_QWORD *)v16 + 2) = v14;
            *v13 = (uint64_t *)v16;
            v17 = **(_QWORD **)v11;
            if (v17)
            {
              *(_QWORD *)v11 = v17;
              v18 = *v13;
            }
            else
            {
              v18 = (uint64_t *)v16;
            }
            result = sub_20E868578(*(uint64_t **)(v11 + 8), v18);
            ++*(_QWORD *)(v11 + 16);
            v19 = *v1809 + 4 * v10;
            v20.i64[0] = 0x600000006;
            v20.i64[1] = 0x600000006;
            *(int32x4_t *)v19 = vaddq_s32(*(int32x4_t *)v19, v20);
            *(int32x2_t *)(v19 + 16) = vadd_s32(*(int32x2_t *)(v19 + 16), (int32x2_t)0x600000006);
            v8 = *v2;
          }
        }
      }
      v21 = (unsigned int *)a2[8];
      if (*((_BYTE *)v21 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v22 = v5[2236];
          v23 = v22 + *v21;
          v24 = *(_QWORD *)(*v6 + 8 * v23);
          v25 = v22 + *v8;
          v26 = *(_QWORD *)(*v6 + 8 * v25);
          if (v24 <= v26 && v24 <= *v7)
          {
            v27 = *v1810 + 24 * v25;
            v29 = (uint64_t **)(v27 + 8);
            v28 = *(uint64_t **)(v27 + 8);
            if (v28)
            {
              while (1)
              {
                while (1)
                {
                  v30 = (uint64_t **)v28;
                  v31 = *((_DWORD *)v28 + 7);
                  if (v31 <= v23)
                    break;
                  v28 = *v30;
                  v29 = v30;
                  if (!*v30)
                    goto LABEL_27;
                }
                if (v31 >= v23)
                  break;
                v28 = v30[1];
                if (!v28)
                {
                  v29 = v30 + 1;
                  goto LABEL_27;
                }
              }
            }
            else
            {
              v30 = (uint64_t **)(v27 + 8);
LABEL_27:
              v32 = operator new(0x20uLL);
              v32[7] = v23;
              *(_QWORD *)v32 = 0;
              *((_QWORD *)v32 + 1) = 0;
              *((_QWORD *)v32 + 2) = v30;
              *v29 = (uint64_t *)v32;
              v33 = **(_QWORD **)v27;
              if (v33)
              {
                *(_QWORD *)v27 = v33;
                v34 = *v29;
              }
              else
              {
                v34 = (uint64_t *)v32;
              }
              result = sub_20E868578(*(uint64_t **)(v27 + 8), v34);
              ++*(_QWORD *)(v27 + 16);
              v35 = *v1809 + 4 * v26;
              v36.i64[0] = 0x600000006;
              v36.i64[1] = 0x600000006;
              *(int32x4_t *)v35 = vaddq_s32(*(int32x4_t *)v35, v36);
              *(int32x2_t *)(v35 + 16) = vadd_s32(*(int32x2_t *)(v35 + 16), (int32x2_t)0x600000006);
              v8 = *v2;
            }
          }
        }
      }
      v37 = (unsigned int *)a2[9];
      if (*((_BYTE *)v37 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v38 = v5[2233] + *v37;
          v39 = *(_QWORD *)(*v6 + 8 * v38);
          v40 = v5[2236] + *v8;
          v41 = *(_QWORD *)(*v6 + 8 * v40);
          if (v39 <= v41 && v39 <= *v7)
          {
            v42 = *v1810 + 24 * v40;
            v44 = (uint64_t **)(v42 + 8);
            v43 = *(uint64_t **)(v42 + 8);
            if (v43)
            {
              while (1)
              {
                while (1)
                {
                  v45 = (uint64_t **)v43;
                  v46 = *((_DWORD *)v43 + 7);
                  if (v46 <= v38)
                    break;
                  v43 = *v45;
                  v44 = v45;
                  if (!*v45)
                    goto LABEL_42;
                }
                if (v46 >= v38)
                  break;
                v43 = v45[1];
                if (!v43)
                {
                  v44 = v45 + 1;
                  goto LABEL_42;
                }
              }
            }
            else
            {
              v45 = (uint64_t **)(v42 + 8);
LABEL_42:
              v47 = operator new(0x20uLL);
              v47[7] = v38;
              *(_QWORD *)v47 = 0;
              *((_QWORD *)v47 + 1) = 0;
              *((_QWORD *)v47 + 2) = v45;
              *v44 = (uint64_t *)v47;
              v48 = **(_QWORD **)v42;
              if (v48)
              {
                *(_QWORD *)v42 = v48;
                v49 = *v44;
              }
              else
              {
                v49 = (uint64_t *)v47;
              }
              result = sub_20E868578(*(uint64_t **)(v42 + 8), v49);
              ++*(_QWORD *)(v42 + 16);
              v50 = *v1809 + 4 * v41;
              v51.i64[0] = 0x600000006;
              v51.i64[1] = 0x600000006;
              *(int32x4_t *)v50 = vaddq_s32(*(int32x4_t *)v50, v51);
              *(int32x2_t *)(v50 + 16) = vadd_s32(*(int32x2_t *)(v50 + 16), (int32x2_t)0x600000006);
              v8 = *v2;
            }
          }
        }
      }
      v52 = (unsigned int *)a2[10];
      if (*((_BYTE *)v52 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v53 = v5[2233] + *v52;
          v54 = *(_QWORD *)(*v6 + 8 * v53);
          v55 = v5[2236] + *v8;
          v56 = *(_QWORD *)(*v6 + 8 * v55);
          if (v54 <= v56 && v54 <= *v7)
          {
            v57 = *v1810 + 24 * v55;
            v59 = (uint64_t **)(v57 + 8);
            v58 = *(uint64_t **)(v57 + 8);
            if (v58)
            {
              while (1)
              {
                while (1)
                {
                  v60 = (uint64_t **)v58;
                  v61 = *((_DWORD *)v58 + 7);
                  if (v61 <= v53)
                    break;
                  v58 = *v60;
                  v59 = v60;
                  if (!*v60)
                    goto LABEL_57;
                }
                if (v61 >= v53)
                  break;
                v58 = v60[1];
                if (!v58)
                {
                  v59 = v60 + 1;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v60 = (uint64_t **)(v57 + 8);
LABEL_57:
              v62 = operator new(0x20uLL);
              v62[7] = v53;
              *(_QWORD *)v62 = 0;
              *((_QWORD *)v62 + 1) = 0;
              *((_QWORD *)v62 + 2) = v60;
              *v59 = (uint64_t *)v62;
              v63 = **(_QWORD **)v57;
              if (v63)
              {
                *(_QWORD *)v57 = v63;
                v64 = *v59;
              }
              else
              {
                v64 = (uint64_t *)v62;
              }
              result = sub_20E868578(*(uint64_t **)(v57 + 8), v64);
              ++*(_QWORD *)(v57 + 16);
              v65 = *v1809 + 4 * v56;
              v66.i64[0] = 0x600000006;
              v66.i64[1] = 0x600000006;
              *(int32x4_t *)v65 = vaddq_s32(*(int32x4_t *)v65, v66);
              *(int32x2_t *)(v65 + 16) = vadd_s32(*(int32x2_t *)(v65 + 16), (int32x2_t)0x600000006);
              v8 = *v2;
            }
          }
        }
      }
      v67 = (unsigned int *)a2[11];
      if (*((_BYTE *)v67 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v68 = v5[2237] + *v67;
          v69 = *(_QWORD *)(*v6 + 8 * v68);
          v70 = v5[2236] + *v8;
          v71 = *(_QWORD *)(*v6 + 8 * v70);
          if (v69 <= v71 && v69 <= *v7)
          {
            v72 = *v1810 + 24 * v70;
            v74 = (uint64_t **)(v72 + 8);
            v73 = *(uint64_t **)(v72 + 8);
            if (v73)
            {
              while (1)
              {
                while (1)
                {
                  v75 = (uint64_t **)v73;
                  v76 = *((_DWORD *)v73 + 7);
                  if (v76 <= v68)
                    break;
                  v73 = *v75;
                  v74 = v75;
                  if (!*v75)
                    goto LABEL_72;
                }
                if (v76 >= v68)
                  break;
                v73 = v75[1];
                if (!v73)
                {
                  v74 = v75 + 1;
                  goto LABEL_72;
                }
              }
            }
            else
            {
              v75 = (uint64_t **)(v72 + 8);
LABEL_72:
              v77 = operator new(0x20uLL);
              v77[7] = v68;
              *(_QWORD *)v77 = 0;
              *((_QWORD *)v77 + 1) = 0;
              *((_QWORD *)v77 + 2) = v75;
              *v74 = (uint64_t *)v77;
              v78 = **(_QWORD **)v72;
              if (v78)
              {
                *(_QWORD *)v72 = v78;
                v79 = *v74;
              }
              else
              {
                v79 = (uint64_t *)v77;
              }
              result = sub_20E868578(*(uint64_t **)(v72 + 8), v79);
              ++*(_QWORD *)(v72 + 16);
              v80 = *v1809 + 4 * v71;
              v81.i64[0] = 0x400000004;
              v81.i64[1] = 0x400000004;
              *(int32x4_t *)v80 = vaddq_s32(*(int32x4_t *)v80, v81);
              *(int32x2_t *)(v80 + 16) = vadd_s32(*(int32x2_t *)(v80 + 16), (int32x2_t)0x400000004);
              v8 = *v2;
            }
          }
        }
      }
      v82 = (unsigned int *)a2[12];
      if (*((_BYTE *)v82 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v83 = v5[2237] + *v82;
          v84 = *(_QWORD *)(*v6 + 8 * v83);
          v85 = v5[2236] + *v8;
          v86 = *(_QWORD *)(*v6 + 8 * v85);
          if (v84 <= v86 && v84 <= *v7)
          {
            v87 = *v1810 + 24 * v85;
            v89 = (uint64_t **)(v87 + 8);
            v88 = *(uint64_t **)(v87 + 8);
            if (v88)
            {
              while (1)
              {
                while (1)
                {
                  v90 = (uint64_t **)v88;
                  v91 = *((_DWORD *)v88 + 7);
                  if (v91 <= v83)
                    break;
                  v88 = *v90;
                  v89 = v90;
                  if (!*v90)
                    goto LABEL_87;
                }
                if (v91 >= v83)
                  break;
                v88 = v90[1];
                if (!v88)
                {
                  v89 = v90 + 1;
                  goto LABEL_87;
                }
              }
            }
            else
            {
              v90 = (uint64_t **)(v87 + 8);
LABEL_87:
              v92 = operator new(0x20uLL);
              v92[7] = v83;
              *(_QWORD *)v92 = 0;
              *((_QWORD *)v92 + 1) = 0;
              *((_QWORD *)v92 + 2) = v90;
              *v89 = (uint64_t *)v92;
              v93 = **(_QWORD **)v87;
              if (v93)
              {
                *(_QWORD *)v87 = v93;
                v94 = *v89;
              }
              else
              {
                v94 = (uint64_t *)v92;
              }
              result = sub_20E868578(*(uint64_t **)(v87 + 8), v94);
              ++*(_QWORD *)(v87 + 16);
              v95 = *v1809 + 4 * v86;
              v96.i64[0] = 0x400000004;
              v96.i64[1] = 0x400000004;
              *(int32x4_t *)v95 = vaddq_s32(*(int32x4_t *)v95, v96);
              *(int32x2_t *)(v95 + 16) = vadd_s32(*(int32x2_t *)(v95 + 16), (int32x2_t)0x400000004);
              v8 = *v2;
            }
          }
        }
      }
      v97 = (unsigned int *)a2[13];
      if (*((_BYTE *)v97 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v98 = v5[2238] + *v97;
          v99 = *(_QWORD *)(*v6 + 8 * v98);
          v100 = v5[2236] + *v8;
          v101 = *(_QWORD *)(*v6 + 8 * v100);
          if (v99 <= v101 && v99 <= *v7)
          {
            v102 = *v1810 + 24 * v100;
            v104 = (uint64_t **)(v102 + 8);
            v103 = *(uint64_t **)(v102 + 8);
            if (v103)
            {
              while (1)
              {
                while (1)
                {
                  v105 = (uint64_t **)v103;
                  v106 = *((_DWORD *)v103 + 7);
                  if (v106 <= v98)
                    break;
                  v103 = *v105;
                  v104 = v105;
                  if (!*v105)
                    goto LABEL_102;
                }
                if (v106 >= v98)
                  break;
                v103 = v105[1];
                if (!v103)
                {
                  v104 = v105 + 1;
                  goto LABEL_102;
                }
              }
            }
            else
            {
              v105 = (uint64_t **)(v102 + 8);
LABEL_102:
              v107 = operator new(0x20uLL);
              v107[7] = v98;
              *(_QWORD *)v107 = 0;
              *((_QWORD *)v107 + 1) = 0;
              *((_QWORD *)v107 + 2) = v105;
              *v104 = (uint64_t *)v107;
              v108 = **(_QWORD **)v102;
              if (v108)
              {
                *(_QWORD *)v102 = v108;
                v109 = *v104;
              }
              else
              {
                v109 = (uint64_t *)v107;
              }
              result = sub_20E868578(*(uint64_t **)(v102 + 8), v109);
              ++*(_QWORD *)(v102 + 16);
              v110 = *v1809 + 4 * v101;
              v111.i64[0] = 0x400000004;
              v111.i64[1] = 0x400000004;
              *(int32x4_t *)v110 = vaddq_s32(*(int32x4_t *)v110, v111);
              *(int32x2_t *)(v110 + 16) = vadd_s32(*(int32x2_t *)(v110 + 16), (int32x2_t)0x400000004);
              v8 = *v2;
            }
          }
        }
      }
      v112 = (unsigned int *)a2[14];
      if (*((_BYTE *)v112 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v113 = v5[2238] + *v112;
          v114 = *(_QWORD *)(*v6 + 8 * v113);
          v115 = v5[2236] + *v8;
          v116 = *(_QWORD *)(*v6 + 8 * v115);
          if (v114 <= v116 && v114 <= *v7)
          {
            v117 = *v1810 + 24 * v115;
            v119 = (uint64_t **)(v117 + 8);
            v118 = *(uint64_t **)(v117 + 8);
            if (v118)
            {
              while (1)
              {
                while (1)
                {
                  v120 = (uint64_t **)v118;
                  v121 = *((_DWORD *)v118 + 7);
                  if (v121 <= v113)
                    break;
                  v118 = *v120;
                  v119 = v120;
                  if (!*v120)
                    goto LABEL_117;
                }
                if (v121 >= v113)
                  break;
                v118 = v120[1];
                if (!v118)
                {
                  v119 = v120 + 1;
                  goto LABEL_117;
                }
              }
            }
            else
            {
              v120 = (uint64_t **)(v117 + 8);
LABEL_117:
              v122 = operator new(0x20uLL);
              v122[7] = v113;
              *(_QWORD *)v122 = 0;
              *((_QWORD *)v122 + 1) = 0;
              *((_QWORD *)v122 + 2) = v120;
              *v119 = (uint64_t *)v122;
              v123 = **(_QWORD **)v117;
              if (v123)
              {
                *(_QWORD *)v117 = v123;
                v124 = *v119;
              }
              else
              {
                v124 = (uint64_t *)v122;
              }
              result = sub_20E868578(*(uint64_t **)(v117 + 8), v124);
              ++*(_QWORD *)(v117 + 16);
              v125 = *v1809 + 4 * v116;
              v126.i64[0] = 0x400000004;
              v126.i64[1] = 0x400000004;
              *(int32x4_t *)v125 = vaddq_s32(*(int32x4_t *)v125, v126);
              *(int32x2_t *)(v125 + 16) = vadd_s32(*(int32x2_t *)(v125 + 16), (int32x2_t)0x400000004);
              v8 = *v2;
            }
          }
        }
      }
      v127 = (unsigned int *)a2[15];
      if (*((_BYTE *)v127 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v128 = v5[2239] + *v127;
          v129 = *(_QWORD *)(*v6 + 8 * v128);
          v130 = v5[2236] + *v8;
          v131 = *(_QWORD *)(*v6 + 8 * v130);
          if (v129 <= v131 && v129 <= *v7)
          {
            v132 = *v1810 + 24 * v130;
            v134 = (uint64_t **)(v132 + 8);
            v133 = *(uint64_t **)(v132 + 8);
            if (v133)
            {
              while (1)
              {
                while (1)
                {
                  v135 = (uint64_t **)v133;
                  v136 = *((_DWORD *)v133 + 7);
                  if (v136 <= v128)
                    break;
                  v133 = *v135;
                  v134 = v135;
                  if (!*v135)
                    goto LABEL_132;
                }
                if (v136 >= v128)
                  break;
                v133 = v135[1];
                if (!v133)
                {
                  v134 = v135 + 1;
                  goto LABEL_132;
                }
              }
            }
            else
            {
              v135 = (uint64_t **)(v132 + 8);
LABEL_132:
              v137 = operator new(0x20uLL);
              v137[7] = v128;
              *(_QWORD *)v137 = 0;
              *((_QWORD *)v137 + 1) = 0;
              *((_QWORD *)v137 + 2) = v135;
              *v134 = (uint64_t *)v137;
              v138 = **(_QWORD **)v132;
              if (v138)
              {
                *(_QWORD *)v132 = v138;
                v139 = *v134;
              }
              else
              {
                v139 = (uint64_t *)v137;
              }
              result = sub_20E868578(*(uint64_t **)(v132 + 8), v139);
              ++*(_QWORD *)(v132 + 16);
              v140 = *v1809 + 4 * v131;
              v141.i64[0] = 0x300000003;
              v141.i64[1] = 0x300000003;
              *(int32x4_t *)v140 = vaddq_s32(*(int32x4_t *)v140, v141);
              *(int32x2_t *)(v140 + 16) = vadd_s32(*(int32x2_t *)(v140 + 16), (int32x2_t)0x300000003);
              v8 = *v2;
            }
          }
        }
      }
      v142 = (unsigned int *)a2[16];
      if (*((_BYTE *)v142 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v143 = v5[2239] + *v142;
          v144 = *(_QWORD *)(*v6 + 8 * v143);
          v145 = v5[2236] + *v8;
          v146 = *(_QWORD *)(*v6 + 8 * v145);
          if (v144 <= v146 && v144 <= *v7)
          {
            v147 = *v1810 + 24 * v145;
            v149 = (uint64_t **)(v147 + 8);
            v148 = *(uint64_t **)(v147 + 8);
            if (v148)
            {
              while (1)
              {
                while (1)
                {
                  v150 = (uint64_t **)v148;
                  v151 = *((_DWORD *)v148 + 7);
                  if (v151 <= v143)
                    break;
                  v148 = *v150;
                  v149 = v150;
                  if (!*v150)
                    goto LABEL_147;
                }
                if (v151 >= v143)
                  break;
                v148 = v150[1];
                if (!v148)
                {
                  v149 = v150 + 1;
                  goto LABEL_147;
                }
              }
            }
            else
            {
              v150 = (uint64_t **)(v147 + 8);
LABEL_147:
              v152 = operator new(0x20uLL);
              v152[7] = v143;
              *(_QWORD *)v152 = 0;
              *((_QWORD *)v152 + 1) = 0;
              *((_QWORD *)v152 + 2) = v150;
              *v149 = (uint64_t *)v152;
              v153 = **(_QWORD **)v147;
              if (v153)
              {
                *(_QWORD *)v147 = v153;
                v154 = *v149;
              }
              else
              {
                v154 = (uint64_t *)v152;
              }
              result = sub_20E868578(*(uint64_t **)(v147 + 8), v154);
              ++*(_QWORD *)(v147 + 16);
              v155 = *v1809 + 4 * v146;
              v156.i64[0] = 0x300000003;
              v156.i64[1] = 0x300000003;
              *(int32x4_t *)v155 = vaddq_s32(*(int32x4_t *)v155, v156);
              *(int32x2_t *)(v155 + 16) = vadd_s32(*(int32x2_t *)(v155 + 16), (int32x2_t)0x300000003);
              v8 = *v2;
            }
          }
        }
      }
      v157 = (unsigned int *)a2[17];
      if (*((_BYTE *)v157 + 20))
      {
        if (*((_BYTE *)v8 + 20))
        {
          v158 = v5[2240] + *v157;
          v159 = *(_QWORD *)(*v6 + 8 * v158);
          v160 = v5[2236] + *v8;
          v161 = *(_QWORD *)(*v6 + 8 * v160);
          if (v159 <= v161 && v159 <= *v7)
          {
            v162 = *v1810 + 24 * v160;
            v164 = (uint64_t **)(v162 + 8);
            v163 = *(uint64_t **)(v162 + 8);
            if (v163)
            {
              while (1)
              {
                while (1)
                {
                  v165 = (uint64_t **)v163;
                  v166 = *((_DWORD *)v163 + 7);
                  if (v166 <= v158)
                    break;
                  v163 = *v165;
                  v164 = v165;
                  if (!*v165)
                    goto LABEL_162;
                }
                if (v166 >= v158)
                  break;
                v163 = v165[1];
                if (!v163)
                {
                  v164 = v165 + 1;
                  goto LABEL_162;
                }
              }
            }
            else
            {
              v165 = (uint64_t **)(v162 + 8);
LABEL_162:
              v167 = operator new(0x20uLL);
              v167[7] = v158;
              *(_QWORD *)v167 = 0;
              *((_QWORD *)v167 + 1) = 0;
              *((_QWORD *)v167 + 2) = v165;
              *v164 = (uint64_t *)v167;
              v168 = **(_QWORD **)v162;
              if (v168)
              {
                *(_QWORD *)v162 = v168;
                v169 = *v164;
              }
              else
              {
                v169 = (uint64_t *)v167;
              }
              result = sub_20E868578(*(uint64_t **)(v162 + 8), v169);
              ++*(_QWORD *)(v162 + 16);
              v170 = *v1809 + 4 * v161;
              v171.i64[0] = 0x100000001;
              v171.i64[1] = 0x100000001;
              *(int32x4_t *)v170 = vaddq_s32(*(int32x4_t *)v170, v171);
              *(int32x2_t *)(v170 + 16) = vadd_s32(*(int32x2_t *)(v170 + 16), (int32x2_t)0x100000001);
              v8 = *v2;
            }
          }
        }
      }
      v172 = (unsigned int *)a2[8];
      if (*((_BYTE *)v8 + 20))
      {
        if (*((_BYTE *)v172 + 20))
        {
          v173 = v5[2236];
          v174 = v173 + *v8;
          v175 = *(_QWORD *)(*v6 + 8 * v174);
          v176 = v173 + *v172;
          v177 = *(_QWORD *)(*v6 + 8 * v176);
          if (v175 <= v177 && v175 <= *v7)
          {
            v178 = *v1810 + 24 * v176;
            v180 = (uint64_t **)(v178 + 8);
            v179 = *(uint64_t **)(v178 + 8);
            if (v179)
            {
              while (1)
              {
                while (1)
                {
                  v181 = (uint64_t **)v179;
                  v182 = *((_DWORD *)v179 + 7);
                  if (v182 <= v174)
                    break;
                  v179 = *v181;
                  v180 = v181;
                  if (!*v181)
                    goto LABEL_177;
                }
                if (v182 >= v174)
                  break;
                v179 = v181[1];
                if (!v179)
                {
                  v180 = v181 + 1;
                  goto LABEL_177;
                }
              }
            }
            else
            {
              v181 = (uint64_t **)(v178 + 8);
LABEL_177:
              v183 = operator new(0x20uLL);
              v183[7] = v174;
              *(_QWORD *)v183 = 0;
              *((_QWORD *)v183 + 1) = 0;
              *((_QWORD *)v183 + 2) = v181;
              *v180 = (uint64_t *)v183;
              v184 = **(_QWORD **)v178;
              if (v184)
              {
                *(_QWORD *)v178 = v184;
                v185 = *v180;
              }
              else
              {
                v185 = (uint64_t *)v183;
              }
              result = sub_20E868578(*(uint64_t **)(v178 + 8), v185);
              ++*(_QWORD *)(v178 + 16);
              v186 = *v1809 + 4 * v177;
              v187.i64[0] = 0x600000006;
              v187.i64[1] = 0x600000006;
              *(int32x4_t *)v186 = vaddq_s32(*(int32x4_t *)v186, v187);
              *(int32x2_t *)(v186 + 16) = vadd_s32(*(int32x2_t *)(v186 + 16), (int32x2_t)0x600000006);
              v172 = (unsigned int *)a2[8];
            }
          }
        }
      }
      if (*((_BYTE *)v172 + 20))
      {
        v188 = v5[2236] + *v172;
        v189 = *(_QWORD *)(*v6 + 8 * v188);
        if (v189 <= *v7)
        {
          v190 = *v1810 + 24 * v188;
          v192 = (uint64_t **)(v190 + 8);
          v191 = *(uint64_t **)(v190 + 8);
          if (v191)
          {
            while (1)
            {
              while (1)
              {
                v193 = (uint64_t **)v191;
                v194 = *((_DWORD *)v191 + 7);
                if (v194 <= v188)
                  break;
                v191 = *v193;
                v192 = v193;
                if (!*v193)
                  goto LABEL_190;
              }
              if (v194 >= v188)
                break;
              v191 = v193[1];
              if (!v191)
              {
                v192 = v193 + 1;
                goto LABEL_190;
              }
            }
          }
          else
          {
            v193 = (uint64_t **)(v190 + 8);
LABEL_190:
            v195 = operator new(0x20uLL);
            v195[7] = v188;
            *(_QWORD *)v195 = 0;
            *((_QWORD *)v195 + 1) = 0;
            *((_QWORD *)v195 + 2) = v193;
            *v192 = (uint64_t *)v195;
            v196 = **(_QWORD **)v190;
            if (v196)
            {
              *(_QWORD *)v190 = v196;
              v197 = *v192;
            }
            else
            {
              v197 = (uint64_t *)v195;
            }
            result = sub_20E868578(*(uint64_t **)(v190 + 8), v197);
            ++*(_QWORD *)(v190 + 16);
            v198 = *v1809 + 4 * v189;
            v199.i64[0] = 0x600000006;
            v199.i64[1] = 0x600000006;
            *(int32x4_t *)v198 = vaddq_s32(*(int32x4_t *)v198, v199);
            *(int32x2_t *)(v198 + 16) = vadd_s32(*(int32x2_t *)(v198 + 16), (int32x2_t)0x600000006);
          }
        }
      }
      v200 = (unsigned int *)a2[9];
      if (*((_BYTE *)v200 + 20))
      {
        v201 = (unsigned int *)a2[8];
        if (*((_BYTE *)v201 + 20))
        {
          v202 = v5[2233] + *v200;
          v203 = *(_QWORD *)(*v6 + 8 * v202);
          v204 = v5[2236] + *v201;
          v205 = *(_QWORD *)(*v6 + 8 * v204);
          if (v203 <= v205 && v203 <= *v7)
          {
            v206 = *v1810 + 24 * v204;
            v208 = (uint64_t **)(v206 + 8);
            v207 = *(uint64_t **)(v206 + 8);
            if (v207)
            {
              while (1)
              {
                while (1)
                {
                  v209 = (uint64_t **)v207;
                  v210 = *((_DWORD *)v207 + 7);
                  if (v210 <= v202)
                    break;
                  v207 = *v209;
                  v208 = v209;
                  if (!*v209)
                    goto LABEL_205;
                }
                if (v210 >= v202)
                  break;
                v207 = v209[1];
                if (!v207)
                {
                  v208 = v209 + 1;
                  goto LABEL_205;
                }
              }
            }
            else
            {
              v209 = (uint64_t **)(v206 + 8);
LABEL_205:
              v211 = operator new(0x20uLL);
              v211[7] = v202;
              *(_QWORD *)v211 = 0;
              *((_QWORD *)v211 + 1) = 0;
              *((_QWORD *)v211 + 2) = v209;
              *v208 = (uint64_t *)v211;
              v212 = **(_QWORD **)v206;
              if (v212)
              {
                *(_QWORD *)v206 = v212;
                v213 = *v208;
              }
              else
              {
                v213 = (uint64_t *)v211;
              }
              result = sub_20E868578(*(uint64_t **)(v206 + 8), v213);
              ++*(_QWORD *)(v206 + 16);
              v214 = *v1809 + 4 * v205;
              v215.i64[0] = 0x600000006;
              v215.i64[1] = 0x600000006;
              *(int32x4_t *)v214 = vaddq_s32(*(int32x4_t *)v214, v215);
              *(int32x2_t *)(v214 + 16) = vadd_s32(*(int32x2_t *)(v214 + 16), (int32x2_t)0x600000006);
            }
          }
        }
      }
      v216 = (unsigned int *)a2[10];
      if (*((_BYTE *)v216 + 20))
      {
        v217 = (unsigned int *)a2[8];
        if (*((_BYTE *)v217 + 20))
        {
          v218 = v5[2233] + *v216;
          v219 = *(_QWORD *)(*v6 + 8 * v218);
          v220 = v5[2236] + *v217;
          v221 = *(_QWORD *)(*v6 + 8 * v220);
          if (v219 <= v221 && v219 <= *v7)
          {
            v222 = *v1810 + 24 * v220;
            v224 = (uint64_t **)(v222 + 8);
            v223 = *(uint64_t **)(v222 + 8);
            if (v223)
            {
              while (1)
              {
                while (1)
                {
                  v225 = (uint64_t **)v223;
                  v226 = *((_DWORD *)v223 + 7);
                  if (v226 <= v218)
                    break;
                  v223 = *v225;
                  v224 = v225;
                  if (!*v225)
                    goto LABEL_220;
                }
                if (v226 >= v218)
                  break;
                v223 = v225[1];
                if (!v223)
                {
                  v224 = v225 + 1;
                  goto LABEL_220;
                }
              }
            }
            else
            {
              v225 = (uint64_t **)(v222 + 8);
LABEL_220:
              v227 = operator new(0x20uLL);
              v227[7] = v218;
              *(_QWORD *)v227 = 0;
              *((_QWORD *)v227 + 1) = 0;
              *((_QWORD *)v227 + 2) = v225;
              *v224 = (uint64_t *)v227;
              v228 = **(_QWORD **)v222;
              if (v228)
              {
                *(_QWORD *)v222 = v228;
                v229 = *v224;
              }
              else
              {
                v229 = (uint64_t *)v227;
              }
              result = sub_20E868578(*(uint64_t **)(v222 + 8), v229);
              ++*(_QWORD *)(v222 + 16);
              v230 = *v1809 + 4 * v221;
              v231.i64[0] = 0x600000006;
              v231.i64[1] = 0x600000006;
              *(int32x4_t *)v230 = vaddq_s32(*(int32x4_t *)v230, v231);
              *(int32x2_t *)(v230 + 16) = vadd_s32(*(int32x2_t *)(v230 + 16), (int32x2_t)0x600000006);
            }
          }
        }
      }
      v232 = (unsigned int *)a2[11];
      if (*((_BYTE *)v232 + 20))
      {
        v233 = (unsigned int *)a2[8];
        if (*((_BYTE *)v233 + 20))
        {
          v234 = v5[2237] + *v232;
          v235 = *(_QWORD *)(*v6 + 8 * v234);
          v236 = v5[2236] + *v233;
          v237 = *(_QWORD *)(*v6 + 8 * v236);
          if (v235 <= v237 && v235 <= *v7)
          {
            v238 = *v1810 + 24 * v236;
            v240 = (uint64_t **)(v238 + 8);
            v239 = *(uint64_t **)(v238 + 8);
            if (v239)
            {
              while (1)
              {
                while (1)
                {
                  v241 = (uint64_t **)v239;
                  v242 = *((_DWORD *)v239 + 7);
                  if (v242 <= v234)
                    break;
                  v239 = *v241;
                  v240 = v241;
                  if (!*v241)
                    goto LABEL_235;
                }
                if (v242 >= v234)
                  break;
                v239 = v241[1];
                if (!v239)
                {
                  v240 = v241 + 1;
                  goto LABEL_235;
                }
              }
            }
            else
            {
              v241 = (uint64_t **)(v238 + 8);
LABEL_235:
              v243 = operator new(0x20uLL);
              v243[7] = v234;
              *(_QWORD *)v243 = 0;
              *((_QWORD *)v243 + 1) = 0;
              *((_QWORD *)v243 + 2) = v241;
              *v240 = (uint64_t *)v243;
              v244 = **(_QWORD **)v238;
              if (v244)
              {
                *(_QWORD *)v238 = v244;
                v245 = *v240;
              }
              else
              {
                v245 = (uint64_t *)v243;
              }
              result = sub_20E868578(*(uint64_t **)(v238 + 8), v245);
              ++*(_QWORD *)(v238 + 16);
              v246 = *v1809 + 4 * v237;
              v247.i64[0] = 0x400000004;
              v247.i64[1] = 0x400000004;
              *(int32x4_t *)v246 = vaddq_s32(*(int32x4_t *)v246, v247);
              *(int32x2_t *)(v246 + 16) = vadd_s32(*(int32x2_t *)(v246 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v248 = (unsigned int *)a2[12];
      if (*((_BYTE *)v248 + 20))
      {
        v249 = (unsigned int *)a2[8];
        if (*((_BYTE *)v249 + 20))
        {
          v250 = v5[2237] + *v248;
          v251 = *(_QWORD *)(*v6 + 8 * v250);
          v252 = v5[2236] + *v249;
          v253 = *(_QWORD *)(*v6 + 8 * v252);
          if (v251 <= v253 && v251 <= *v7)
          {
            v254 = *v1810 + 24 * v252;
            v256 = (uint64_t **)(v254 + 8);
            v255 = *(uint64_t **)(v254 + 8);
            if (v255)
            {
              while (1)
              {
                while (1)
                {
                  v257 = (uint64_t **)v255;
                  v258 = *((_DWORD *)v255 + 7);
                  if (v258 <= v250)
                    break;
                  v255 = *v257;
                  v256 = v257;
                  if (!*v257)
                    goto LABEL_250;
                }
                if (v258 >= v250)
                  break;
                v255 = v257[1];
                if (!v255)
                {
                  v256 = v257 + 1;
                  goto LABEL_250;
                }
              }
            }
            else
            {
              v257 = (uint64_t **)(v254 + 8);
LABEL_250:
              v259 = operator new(0x20uLL);
              v259[7] = v250;
              *(_QWORD *)v259 = 0;
              *((_QWORD *)v259 + 1) = 0;
              *((_QWORD *)v259 + 2) = v257;
              *v256 = (uint64_t *)v259;
              v260 = **(_QWORD **)v254;
              if (v260)
              {
                *(_QWORD *)v254 = v260;
                v261 = *v256;
              }
              else
              {
                v261 = (uint64_t *)v259;
              }
              result = sub_20E868578(*(uint64_t **)(v254 + 8), v261);
              ++*(_QWORD *)(v254 + 16);
              v262 = *v1809 + 4 * v253;
              v263.i64[0] = 0x400000004;
              v263.i64[1] = 0x400000004;
              *(int32x4_t *)v262 = vaddq_s32(*(int32x4_t *)v262, v263);
              *(int32x2_t *)(v262 + 16) = vadd_s32(*(int32x2_t *)(v262 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v264 = (unsigned int *)a2[13];
      if (*((_BYTE *)v264 + 20))
      {
        v265 = (unsigned int *)a2[8];
        if (*((_BYTE *)v265 + 20))
        {
          v266 = v5[2238] + *v264;
          v267 = *(_QWORD *)(*v6 + 8 * v266);
          v268 = v5[2236] + *v265;
          v269 = *(_QWORD *)(*v6 + 8 * v268);
          if (v267 <= v269 && v267 <= *v7)
          {
            v270 = *v1810 + 24 * v268;
            v272 = (uint64_t **)(v270 + 8);
            v271 = *(uint64_t **)(v270 + 8);
            if (v271)
            {
              while (1)
              {
                while (1)
                {
                  v273 = (uint64_t **)v271;
                  v274 = *((_DWORD *)v271 + 7);
                  if (v274 <= v266)
                    break;
                  v271 = *v273;
                  v272 = v273;
                  if (!*v273)
                    goto LABEL_265;
                }
                if (v274 >= v266)
                  break;
                v271 = v273[1];
                if (!v271)
                {
                  v272 = v273 + 1;
                  goto LABEL_265;
                }
              }
            }
            else
            {
              v273 = (uint64_t **)(v270 + 8);
LABEL_265:
              v275 = operator new(0x20uLL);
              v275[7] = v266;
              *(_QWORD *)v275 = 0;
              *((_QWORD *)v275 + 1) = 0;
              *((_QWORD *)v275 + 2) = v273;
              *v272 = (uint64_t *)v275;
              v276 = **(_QWORD **)v270;
              if (v276)
              {
                *(_QWORD *)v270 = v276;
                v277 = *v272;
              }
              else
              {
                v277 = (uint64_t *)v275;
              }
              result = sub_20E868578(*(uint64_t **)(v270 + 8), v277);
              ++*(_QWORD *)(v270 + 16);
              v278 = *v1809 + 4 * v269;
              v279.i64[0] = 0x400000004;
              v279.i64[1] = 0x400000004;
              *(int32x4_t *)v278 = vaddq_s32(*(int32x4_t *)v278, v279);
              *(int32x2_t *)(v278 + 16) = vadd_s32(*(int32x2_t *)(v278 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v280 = (unsigned int *)a2[14];
      if (*((_BYTE *)v280 + 20))
      {
        v281 = (unsigned int *)a2[8];
        if (*((_BYTE *)v281 + 20))
        {
          v282 = v5[2238] + *v280;
          v283 = *(_QWORD *)(*v6 + 8 * v282);
          v284 = v5[2236] + *v281;
          v285 = *(_QWORD *)(*v6 + 8 * v284);
          if (v283 <= v285 && v283 <= *v7)
          {
            v286 = *v1810 + 24 * v284;
            v288 = (uint64_t **)(v286 + 8);
            v287 = *(uint64_t **)(v286 + 8);
            if (v287)
            {
              while (1)
              {
                while (1)
                {
                  v289 = (uint64_t **)v287;
                  v290 = *((_DWORD *)v287 + 7);
                  if (v290 <= v282)
                    break;
                  v287 = *v289;
                  v288 = v289;
                  if (!*v289)
                    goto LABEL_280;
                }
                if (v290 >= v282)
                  break;
                v287 = v289[1];
                if (!v287)
                {
                  v288 = v289 + 1;
                  goto LABEL_280;
                }
              }
            }
            else
            {
              v289 = (uint64_t **)(v286 + 8);
LABEL_280:
              v291 = operator new(0x20uLL);
              v291[7] = v282;
              *(_QWORD *)v291 = 0;
              *((_QWORD *)v291 + 1) = 0;
              *((_QWORD *)v291 + 2) = v289;
              *v288 = (uint64_t *)v291;
              v292 = **(_QWORD **)v286;
              if (v292)
              {
                *(_QWORD *)v286 = v292;
                v293 = *v288;
              }
              else
              {
                v293 = (uint64_t *)v291;
              }
              result = sub_20E868578(*(uint64_t **)(v286 + 8), v293);
              ++*(_QWORD *)(v286 + 16);
              v294 = *v1809 + 4 * v285;
              v295.i64[0] = 0x400000004;
              v295.i64[1] = 0x400000004;
              *(int32x4_t *)v294 = vaddq_s32(*(int32x4_t *)v294, v295);
              *(int32x2_t *)(v294 + 16) = vadd_s32(*(int32x2_t *)(v294 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v296 = (unsigned int *)a2[15];
      if (*((_BYTE *)v296 + 20))
      {
        v297 = (unsigned int *)a2[8];
        if (*((_BYTE *)v297 + 20))
        {
          v298 = v5[2239] + *v296;
          v299 = *(_QWORD *)(*v6 + 8 * v298);
          v300 = v5[2236] + *v297;
          v301 = *(_QWORD *)(*v6 + 8 * v300);
          if (v299 <= v301 && v299 <= *v7)
          {
            v302 = *v1810 + 24 * v300;
            v304 = (uint64_t **)(v302 + 8);
            v303 = *(uint64_t **)(v302 + 8);
            if (v303)
            {
              while (1)
              {
                while (1)
                {
                  v305 = (uint64_t **)v303;
                  v306 = *((_DWORD *)v303 + 7);
                  if (v306 <= v298)
                    break;
                  v303 = *v305;
                  v304 = v305;
                  if (!*v305)
                    goto LABEL_295;
                }
                if (v306 >= v298)
                  break;
                v303 = v305[1];
                if (!v303)
                {
                  v304 = v305 + 1;
                  goto LABEL_295;
                }
              }
            }
            else
            {
              v305 = (uint64_t **)(v302 + 8);
LABEL_295:
              v307 = operator new(0x20uLL);
              v307[7] = v298;
              *(_QWORD *)v307 = 0;
              *((_QWORD *)v307 + 1) = 0;
              *((_QWORD *)v307 + 2) = v305;
              *v304 = (uint64_t *)v307;
              v308 = **(_QWORD **)v302;
              if (v308)
              {
                *(_QWORD *)v302 = v308;
                v309 = *v304;
              }
              else
              {
                v309 = (uint64_t *)v307;
              }
              result = sub_20E868578(*(uint64_t **)(v302 + 8), v309);
              ++*(_QWORD *)(v302 + 16);
              v310 = *v1809 + 4 * v301;
              v311.i64[0] = 0x300000003;
              v311.i64[1] = 0x300000003;
              *(int32x4_t *)v310 = vaddq_s32(*(int32x4_t *)v310, v311);
              *(int32x2_t *)(v310 + 16) = vadd_s32(*(int32x2_t *)(v310 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v312 = (unsigned int *)a2[16];
      if (*((_BYTE *)v312 + 20))
      {
        v313 = (unsigned int *)a2[8];
        if (*((_BYTE *)v313 + 20))
        {
          v314 = v5[2239] + *v312;
          v315 = *(_QWORD *)(*v6 + 8 * v314);
          v316 = v5[2236] + *v313;
          v317 = *(_QWORD *)(*v6 + 8 * v316);
          if (v315 <= v317 && v315 <= *v7)
          {
            v318 = *v1810 + 24 * v316;
            v320 = (uint64_t **)(v318 + 8);
            v319 = *(uint64_t **)(v318 + 8);
            if (v319)
            {
              while (1)
              {
                while (1)
                {
                  v321 = (uint64_t **)v319;
                  v322 = *((_DWORD *)v319 + 7);
                  if (v322 <= v314)
                    break;
                  v319 = *v321;
                  v320 = v321;
                  if (!*v321)
                    goto LABEL_310;
                }
                if (v322 >= v314)
                  break;
                v319 = v321[1];
                if (!v319)
                {
                  v320 = v321 + 1;
                  goto LABEL_310;
                }
              }
            }
            else
            {
              v321 = (uint64_t **)(v318 + 8);
LABEL_310:
              v323 = operator new(0x20uLL);
              v323[7] = v314;
              *(_QWORD *)v323 = 0;
              *((_QWORD *)v323 + 1) = 0;
              *((_QWORD *)v323 + 2) = v321;
              *v320 = (uint64_t *)v323;
              v324 = **(_QWORD **)v318;
              if (v324)
              {
                *(_QWORD *)v318 = v324;
                v325 = *v320;
              }
              else
              {
                v325 = (uint64_t *)v323;
              }
              result = sub_20E868578(*(uint64_t **)(v318 + 8), v325);
              ++*(_QWORD *)(v318 + 16);
              v326 = *v1809 + 4 * v317;
              v327.i64[0] = 0x300000003;
              v327.i64[1] = 0x300000003;
              *(int32x4_t *)v326 = vaddq_s32(*(int32x4_t *)v326, v327);
              *(int32x2_t *)(v326 + 16) = vadd_s32(*(int32x2_t *)(v326 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v328 = (unsigned int *)a2[17];
      if (*((_BYTE *)v328 + 20))
      {
        v329 = (unsigned int *)a2[8];
        if (*((_BYTE *)v329 + 20))
        {
          v330 = v5[2240] + *v328;
          v331 = *(_QWORD *)(*v6 + 8 * v330);
          v332 = v5[2236] + *v329;
          v333 = *(_QWORD *)(*v6 + 8 * v332);
          if (v331 <= v333 && v331 <= *v7)
          {
            v334 = *v1810 + 24 * v332;
            v336 = (uint64_t **)(v334 + 8);
            v335 = *(uint64_t **)(v334 + 8);
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v337 = (uint64_t **)v335;
                  v338 = *((_DWORD *)v335 + 7);
                  if (v338 <= v330)
                    break;
                  v335 = *v337;
                  v336 = v337;
                  if (!*v337)
                    goto LABEL_325;
                }
                if (v338 >= v330)
                  break;
                v335 = v337[1];
                if (!v335)
                {
                  v336 = v337 + 1;
                  goto LABEL_325;
                }
              }
            }
            else
            {
              v337 = (uint64_t **)(v334 + 8);
LABEL_325:
              v339 = operator new(0x20uLL);
              v339[7] = v330;
              *(_QWORD *)v339 = 0;
              *((_QWORD *)v339 + 1) = 0;
              *((_QWORD *)v339 + 2) = v337;
              *v336 = (uint64_t *)v339;
              v340 = **(_QWORD **)v334;
              if (v340)
              {
                *(_QWORD *)v334 = v340;
                v341 = *v336;
              }
              else
              {
                v341 = (uint64_t *)v339;
              }
              result = sub_20E868578(*(uint64_t **)(v334 + 8), v341);
              ++*(_QWORD *)(v334 + 16);
              v342 = *v1809 + 4 * v333;
              v343.i64[0] = 0x100000001;
              v343.i64[1] = 0x100000001;
              *(int32x4_t *)v342 = vaddq_s32(*(int32x4_t *)v342, v343);
              *(int32x2_t *)(v342 + 16) = vadd_s32(*(int32x2_t *)(v342 + 16), (int32x2_t)0x100000001);
            }
          }
        }
      }
      v344 = (unsigned int *)a2[7];
      v345 = (unsigned int *)a2[9];
      if (*((_BYTE *)v344 + 20))
      {
        if (*((_BYTE *)v345 + 20))
        {
          v346 = v5[2236] + *v344;
          v347 = *(_QWORD *)(*v6 + 8 * v346);
          v348 = v5[2233] + *v345;
          v349 = *(_QWORD *)(*v6 + 8 * v348);
          if (v347 <= v349 && v347 <= *v7)
          {
            v350 = *v1810 + 24 * v348;
            v352 = (uint64_t **)(v350 + 8);
            v351 = *(uint64_t **)(v350 + 8);
            if (v351)
            {
              while (1)
              {
                while (1)
                {
                  v353 = (uint64_t **)v351;
                  v354 = *((_DWORD *)v351 + 7);
                  if (v354 <= v346)
                    break;
                  v351 = *v353;
                  v352 = v353;
                  if (!*v353)
                    goto LABEL_340;
                }
                if (v354 >= v346)
                  break;
                v351 = v353[1];
                if (!v351)
                {
                  v352 = v353 + 1;
                  goto LABEL_340;
                }
              }
            }
            else
            {
              v353 = (uint64_t **)(v350 + 8);
LABEL_340:
              v355 = operator new(0x20uLL);
              v355[7] = v346;
              *(_QWORD *)v355 = 0;
              *((_QWORD *)v355 + 1) = 0;
              *((_QWORD *)v355 + 2) = v353;
              *v352 = (uint64_t *)v355;
              v356 = **(_QWORD **)v350;
              if (v356)
              {
                *(_QWORD *)v350 = v356;
                v357 = *v352;
              }
              else
              {
                v357 = (uint64_t *)v355;
              }
              result = sub_20E868578(*(uint64_t **)(v350 + 8), v357);
              ++*(_QWORD *)(v350 + 16);
              v358 = *v1809 + 4 * v349;
              v359.i64[0] = 0x600000006;
              v359.i64[1] = 0x600000006;
              *(int32x4_t *)v358 = vaddq_s32(*(int32x4_t *)v358, v359);
              *(int32x2_t *)(v358 + 16) = vadd_s32(*(int32x2_t *)(v358 + 16), (int32x2_t)0x600000006);
              v345 = (unsigned int *)a2[9];
            }
          }
        }
      }
      v360 = (unsigned int *)a2[8];
      if (*((_BYTE *)v360 + 20))
      {
        if (*((_BYTE *)v345 + 20))
        {
          v361 = v5[2236] + *v360;
          v362 = *(_QWORD *)(*v6 + 8 * v361);
          v363 = v5[2233] + *v345;
          v364 = *(_QWORD *)(*v6 + 8 * v363);
          if (v362 <= v364 && v362 <= *v7)
          {
            v365 = *v1810 + 24 * v363;
            v367 = (uint64_t **)(v365 + 8);
            v366 = *(uint64_t **)(v365 + 8);
            if (v366)
            {
              while (1)
              {
                while (1)
                {
                  v368 = (uint64_t **)v366;
                  v369 = *((_DWORD *)v366 + 7);
                  if (v369 <= v361)
                    break;
                  v366 = *v368;
                  v367 = v368;
                  if (!*v368)
                    goto LABEL_355;
                }
                if (v369 >= v361)
                  break;
                v366 = v368[1];
                if (!v366)
                {
                  v367 = v368 + 1;
                  goto LABEL_355;
                }
              }
            }
            else
            {
              v368 = (uint64_t **)(v365 + 8);
LABEL_355:
              v370 = operator new(0x20uLL);
              v370[7] = v361;
              *(_QWORD *)v370 = 0;
              *((_QWORD *)v370 + 1) = 0;
              *((_QWORD *)v370 + 2) = v368;
              *v367 = (uint64_t *)v370;
              v371 = **(_QWORD **)v365;
              if (v371)
              {
                *(_QWORD *)v365 = v371;
                v372 = *v367;
              }
              else
              {
                v372 = (uint64_t *)v370;
              }
              result = sub_20E868578(*(uint64_t **)(v365 + 8), v372);
              ++*(_QWORD *)(v365 + 16);
              v373 = *v1809 + 4 * v364;
              v374.i64[0] = 0x600000006;
              v374.i64[1] = 0x600000006;
              *(int32x4_t *)v373 = vaddq_s32(*(int32x4_t *)v373, v374);
              *(int32x2_t *)(v373 + 16) = vadd_s32(*(int32x2_t *)(v373 + 16), (int32x2_t)0x600000006);
              v345 = (unsigned int *)a2[9];
            }
          }
        }
      }
      if (*((_BYTE *)v345 + 20))
      {
        v375 = v5[2233] + *v345;
        v376 = *(_QWORD *)(*v6 + 8 * v375);
        if (v376 <= *v7)
        {
          v377 = *v1810 + 24 * v375;
          v379 = (uint64_t **)(v377 + 8);
          v378 = *(uint64_t **)(v377 + 8);
          if (v378)
          {
            while (1)
            {
              while (1)
              {
                v380 = (uint64_t **)v378;
                v381 = *((_DWORD *)v378 + 7);
                if (v381 <= v375)
                  break;
                v378 = *v380;
                v379 = v380;
                if (!*v380)
                  goto LABEL_368;
              }
              if (v381 >= v375)
                break;
              v378 = v380[1];
              if (!v378)
              {
                v379 = v380 + 1;
                goto LABEL_368;
              }
            }
          }
          else
          {
            v380 = (uint64_t **)(v377 + 8);
LABEL_368:
            v382 = operator new(0x20uLL);
            v382[7] = v375;
            *(_QWORD *)v382 = 0;
            *((_QWORD *)v382 + 1) = 0;
            *((_QWORD *)v382 + 2) = v380;
            *v379 = (uint64_t *)v382;
            v383 = **(_QWORD **)v377;
            if (v383)
            {
              *(_QWORD *)v377 = v383;
              v384 = *v379;
            }
            else
            {
              v384 = (uint64_t *)v382;
            }
            result = sub_20E868578(*(uint64_t **)(v377 + 8), v384);
            ++*(_QWORD *)(v377 + 16);
            v385 = *v1809 + 4 * v376;
            v386.i64[0] = 0x600000006;
            v386.i64[1] = 0x600000006;
            *(int32x4_t *)v385 = vaddq_s32(*(int32x4_t *)v385, v386);
            *(int32x2_t *)(v385 + 16) = vadd_s32(*(int32x2_t *)(v385 + 16), (int32x2_t)0x600000006);
          }
        }
      }
      v387 = (unsigned int *)a2[10];
      if (*((_BYTE *)v387 + 20))
      {
        v388 = (unsigned int *)a2[9];
        if (*((_BYTE *)v388 + 20))
        {
          v389 = v5[2233];
          v390 = v389 + *v387;
          v391 = *(_QWORD *)(*v6 + 8 * v390);
          v392 = v389 + *v388;
          v393 = *(_QWORD *)(*v6 + 8 * v392);
          if (v391 <= v393 && v391 <= *v7)
          {
            v394 = *v1810 + 24 * v392;
            v396 = (uint64_t **)(v394 + 8);
            v395 = *(uint64_t **)(v394 + 8);
            if (v395)
            {
              while (1)
              {
                while (1)
                {
                  v397 = (uint64_t **)v395;
                  v398 = *((_DWORD *)v395 + 7);
                  if (v398 <= v390)
                    break;
                  v395 = *v397;
                  v396 = v397;
                  if (!*v397)
                    goto LABEL_383;
                }
                if (v398 >= v390)
                  break;
                v395 = v397[1];
                if (!v395)
                {
                  v396 = v397 + 1;
                  goto LABEL_383;
                }
              }
            }
            else
            {
              v397 = (uint64_t **)(v394 + 8);
LABEL_383:
              v399 = operator new(0x20uLL);
              v399[7] = v390;
              *(_QWORD *)v399 = 0;
              *((_QWORD *)v399 + 1) = 0;
              *((_QWORD *)v399 + 2) = v397;
              *v396 = (uint64_t *)v399;
              v400 = **(_QWORD **)v394;
              if (v400)
              {
                *(_QWORD *)v394 = v400;
                v401 = *v396;
              }
              else
              {
                v401 = (uint64_t *)v399;
              }
              result = sub_20E868578(*(uint64_t **)(v394 + 8), v401);
              ++*(_QWORD *)(v394 + 16);
              v402 = *v1809 + 4 * v393;
              v403.i64[0] = 0x600000006;
              v403.i64[1] = 0x600000006;
              *(int32x4_t *)v402 = vaddq_s32(*(int32x4_t *)v402, v403);
              *(int32x2_t *)(v402 + 16) = vadd_s32(*(int32x2_t *)(v402 + 16), (int32x2_t)0x600000006);
            }
          }
        }
      }
      v404 = (unsigned int *)a2[11];
      if (*((_BYTE *)v404 + 20))
      {
        v405 = (unsigned int *)a2[9];
        if (*((_BYTE *)v405 + 20))
        {
          v406 = v5[2237] + *v404;
          v407 = *(_QWORD *)(*v6 + 8 * v406);
          v408 = v5[2233] + *v405;
          v409 = *(_QWORD *)(*v6 + 8 * v408);
          if (v407 <= v409 && v407 <= *v7)
          {
            v410 = *v1810 + 24 * v408;
            v412 = (uint64_t **)(v410 + 8);
            v411 = *(uint64_t **)(v410 + 8);
            if (v411)
            {
              while (1)
              {
                while (1)
                {
                  v413 = (uint64_t **)v411;
                  v414 = *((_DWORD *)v411 + 7);
                  if (v414 <= v406)
                    break;
                  v411 = *v413;
                  v412 = v413;
                  if (!*v413)
                    goto LABEL_398;
                }
                if (v414 >= v406)
                  break;
                v411 = v413[1];
                if (!v411)
                {
                  v412 = v413 + 1;
                  goto LABEL_398;
                }
              }
            }
            else
            {
              v413 = (uint64_t **)(v410 + 8);
LABEL_398:
              v415 = operator new(0x20uLL);
              v415[7] = v406;
              *(_QWORD *)v415 = 0;
              *((_QWORD *)v415 + 1) = 0;
              *((_QWORD *)v415 + 2) = v413;
              *v412 = (uint64_t *)v415;
              v416 = **(_QWORD **)v410;
              if (v416)
              {
                *(_QWORD *)v410 = v416;
                v417 = *v412;
              }
              else
              {
                v417 = (uint64_t *)v415;
              }
              result = sub_20E868578(*(uint64_t **)(v410 + 8), v417);
              ++*(_QWORD *)(v410 + 16);
              v418 = *v1809 + 4 * v409;
              v419.i64[0] = 0x400000004;
              v419.i64[1] = 0x400000004;
              *(int32x4_t *)v418 = vaddq_s32(*(int32x4_t *)v418, v419);
              *(int32x2_t *)(v418 + 16) = vadd_s32(*(int32x2_t *)(v418 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v420 = (unsigned int *)a2[12];
      if (*((_BYTE *)v420 + 20))
      {
        v421 = (unsigned int *)a2[9];
        if (*((_BYTE *)v421 + 20))
        {
          v422 = v5[2237] + *v420;
          v423 = *(_QWORD *)(*v6 + 8 * v422);
          v424 = v5[2233] + *v421;
          v425 = *(_QWORD *)(*v6 + 8 * v424);
          if (v423 <= v425 && v423 <= *v7)
          {
            v426 = *v1810 + 24 * v424;
            v428 = (uint64_t **)(v426 + 8);
            v427 = *(uint64_t **)(v426 + 8);
            if (v427)
            {
              while (1)
              {
                while (1)
                {
                  v429 = (uint64_t **)v427;
                  v430 = *((_DWORD *)v427 + 7);
                  if (v430 <= v422)
                    break;
                  v427 = *v429;
                  v428 = v429;
                  if (!*v429)
                    goto LABEL_413;
                }
                if (v430 >= v422)
                  break;
                v427 = v429[1];
                if (!v427)
                {
                  v428 = v429 + 1;
                  goto LABEL_413;
                }
              }
            }
            else
            {
              v429 = (uint64_t **)(v426 + 8);
LABEL_413:
              v431 = operator new(0x20uLL);
              v431[7] = v422;
              *(_QWORD *)v431 = 0;
              *((_QWORD *)v431 + 1) = 0;
              *((_QWORD *)v431 + 2) = v429;
              *v428 = (uint64_t *)v431;
              v432 = **(_QWORD **)v426;
              if (v432)
              {
                *(_QWORD *)v426 = v432;
                v433 = *v428;
              }
              else
              {
                v433 = (uint64_t *)v431;
              }
              result = sub_20E868578(*(uint64_t **)(v426 + 8), v433);
              ++*(_QWORD *)(v426 + 16);
              v434 = *v1809 + 4 * v425;
              v435.i64[0] = 0x400000004;
              v435.i64[1] = 0x400000004;
              *(int32x4_t *)v434 = vaddq_s32(*(int32x4_t *)v434, v435);
              *(int32x2_t *)(v434 + 16) = vadd_s32(*(int32x2_t *)(v434 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v436 = (unsigned int *)a2[13];
      if (*((_BYTE *)v436 + 20))
      {
        v437 = (unsigned int *)a2[9];
        if (*((_BYTE *)v437 + 20))
        {
          v438 = v5[2238] + *v436;
          v439 = *(_QWORD *)(*v6 + 8 * v438);
          v440 = v5[2233] + *v437;
          v441 = *(_QWORD *)(*v6 + 8 * v440);
          if (v439 <= v441 && v439 <= *v7)
          {
            v442 = *v1810 + 24 * v440;
            v444 = (uint64_t **)(v442 + 8);
            v443 = *(uint64_t **)(v442 + 8);
            if (v443)
            {
              while (1)
              {
                while (1)
                {
                  v445 = (uint64_t **)v443;
                  v446 = *((_DWORD *)v443 + 7);
                  if (v446 <= v438)
                    break;
                  v443 = *v445;
                  v444 = v445;
                  if (!*v445)
                    goto LABEL_428;
                }
                if (v446 >= v438)
                  break;
                v443 = v445[1];
                if (!v443)
                {
                  v444 = v445 + 1;
                  goto LABEL_428;
                }
              }
            }
            else
            {
              v445 = (uint64_t **)(v442 + 8);
LABEL_428:
              v447 = operator new(0x20uLL);
              v447[7] = v438;
              *(_QWORD *)v447 = 0;
              *((_QWORD *)v447 + 1) = 0;
              *((_QWORD *)v447 + 2) = v445;
              *v444 = (uint64_t *)v447;
              v448 = **(_QWORD **)v442;
              if (v448)
              {
                *(_QWORD *)v442 = v448;
                v449 = *v444;
              }
              else
              {
                v449 = (uint64_t *)v447;
              }
              result = sub_20E868578(*(uint64_t **)(v442 + 8), v449);
              ++*(_QWORD *)(v442 + 16);
              v450 = *v1809 + 4 * v441;
              v451.i64[0] = 0x400000004;
              v451.i64[1] = 0x400000004;
              *(int32x4_t *)v450 = vaddq_s32(*(int32x4_t *)v450, v451);
              *(int32x2_t *)(v450 + 16) = vadd_s32(*(int32x2_t *)(v450 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v452 = (unsigned int *)a2[14];
      if (*((_BYTE *)v452 + 20))
      {
        v453 = (unsigned int *)a2[9];
        if (*((_BYTE *)v453 + 20))
        {
          v454 = v5[2238] + *v452;
          v455 = *(_QWORD *)(*v6 + 8 * v454);
          v456 = v5[2233] + *v453;
          v457 = *(_QWORD *)(*v6 + 8 * v456);
          if (v455 <= v457 && v455 <= *v7)
          {
            v458 = *v1810 + 24 * v456;
            v460 = (uint64_t **)(v458 + 8);
            v459 = *(uint64_t **)(v458 + 8);
            if (v459)
            {
              while (1)
              {
                while (1)
                {
                  v461 = (uint64_t **)v459;
                  v462 = *((_DWORD *)v459 + 7);
                  if (v462 <= v454)
                    break;
                  v459 = *v461;
                  v460 = v461;
                  if (!*v461)
                    goto LABEL_443;
                }
                if (v462 >= v454)
                  break;
                v459 = v461[1];
                if (!v459)
                {
                  v460 = v461 + 1;
                  goto LABEL_443;
                }
              }
            }
            else
            {
              v461 = (uint64_t **)(v458 + 8);
LABEL_443:
              v463 = operator new(0x20uLL);
              v463[7] = v454;
              *(_QWORD *)v463 = 0;
              *((_QWORD *)v463 + 1) = 0;
              *((_QWORD *)v463 + 2) = v461;
              *v460 = (uint64_t *)v463;
              v464 = **(_QWORD **)v458;
              if (v464)
              {
                *(_QWORD *)v458 = v464;
                v465 = *v460;
              }
              else
              {
                v465 = (uint64_t *)v463;
              }
              result = sub_20E868578(*(uint64_t **)(v458 + 8), v465);
              ++*(_QWORD *)(v458 + 16);
              v466 = *v1809 + 4 * v457;
              v467.i64[0] = 0x400000004;
              v467.i64[1] = 0x400000004;
              *(int32x4_t *)v466 = vaddq_s32(*(int32x4_t *)v466, v467);
              *(int32x2_t *)(v466 + 16) = vadd_s32(*(int32x2_t *)(v466 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v468 = (unsigned int *)a2[15];
      if (*((_BYTE *)v468 + 20))
      {
        v469 = (unsigned int *)a2[9];
        if (*((_BYTE *)v469 + 20))
        {
          v470 = v5[2239] + *v468;
          v471 = *(_QWORD *)(*v6 + 8 * v470);
          v472 = v5[2233] + *v469;
          v473 = *(_QWORD *)(*v6 + 8 * v472);
          if (v471 <= v473 && v471 <= *v7)
          {
            v474 = *v1810 + 24 * v472;
            v476 = (uint64_t **)(v474 + 8);
            v475 = *(uint64_t **)(v474 + 8);
            if (v475)
            {
              while (1)
              {
                while (1)
                {
                  v477 = (uint64_t **)v475;
                  v478 = *((_DWORD *)v475 + 7);
                  if (v478 <= v470)
                    break;
                  v475 = *v477;
                  v476 = v477;
                  if (!*v477)
                    goto LABEL_458;
                }
                if (v478 >= v470)
                  break;
                v475 = v477[1];
                if (!v475)
                {
                  v476 = v477 + 1;
                  goto LABEL_458;
                }
              }
            }
            else
            {
              v477 = (uint64_t **)(v474 + 8);
LABEL_458:
              v479 = operator new(0x20uLL);
              v479[7] = v470;
              *(_QWORD *)v479 = 0;
              *((_QWORD *)v479 + 1) = 0;
              *((_QWORD *)v479 + 2) = v477;
              *v476 = (uint64_t *)v479;
              v480 = **(_QWORD **)v474;
              if (v480)
              {
                *(_QWORD *)v474 = v480;
                v481 = *v476;
              }
              else
              {
                v481 = (uint64_t *)v479;
              }
              result = sub_20E868578(*(uint64_t **)(v474 + 8), v481);
              ++*(_QWORD *)(v474 + 16);
              v482 = *v1809 + 4 * v473;
              v483.i64[0] = 0x300000003;
              v483.i64[1] = 0x300000003;
              *(int32x4_t *)v482 = vaddq_s32(*(int32x4_t *)v482, v483);
              *(int32x2_t *)(v482 + 16) = vadd_s32(*(int32x2_t *)(v482 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v484 = (unsigned int *)a2[16];
      if (*((_BYTE *)v484 + 20))
      {
        v485 = (unsigned int *)a2[9];
        if (*((_BYTE *)v485 + 20))
        {
          v486 = v5[2239] + *v484;
          v487 = *(_QWORD *)(*v6 + 8 * v486);
          v488 = v5[2233] + *v485;
          v489 = *(_QWORD *)(*v6 + 8 * v488);
          if (v487 <= v489 && v487 <= *v7)
          {
            v490 = *v1810 + 24 * v488;
            v492 = (uint64_t **)(v490 + 8);
            v491 = *(uint64_t **)(v490 + 8);
            if (v491)
            {
              while (1)
              {
                while (1)
                {
                  v493 = (uint64_t **)v491;
                  v494 = *((_DWORD *)v491 + 7);
                  if (v494 <= v486)
                    break;
                  v491 = *v493;
                  v492 = v493;
                  if (!*v493)
                    goto LABEL_473;
                }
                if (v494 >= v486)
                  break;
                v491 = v493[1];
                if (!v491)
                {
                  v492 = v493 + 1;
                  goto LABEL_473;
                }
              }
            }
            else
            {
              v493 = (uint64_t **)(v490 + 8);
LABEL_473:
              v495 = operator new(0x20uLL);
              v495[7] = v486;
              *(_QWORD *)v495 = 0;
              *((_QWORD *)v495 + 1) = 0;
              *((_QWORD *)v495 + 2) = v493;
              *v492 = (uint64_t *)v495;
              v496 = **(_QWORD **)v490;
              if (v496)
              {
                *(_QWORD *)v490 = v496;
                v497 = *v492;
              }
              else
              {
                v497 = (uint64_t *)v495;
              }
              result = sub_20E868578(*(uint64_t **)(v490 + 8), v497);
              ++*(_QWORD *)(v490 + 16);
              v498 = *v1809 + 4 * v489;
              v499.i64[0] = 0x300000003;
              v499.i64[1] = 0x300000003;
              *(int32x4_t *)v498 = vaddq_s32(*(int32x4_t *)v498, v499);
              *(int32x2_t *)(v498 + 16) = vadd_s32(*(int32x2_t *)(v498 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v500 = (unsigned int *)a2[17];
      if (*((_BYTE *)v500 + 20))
      {
        v501 = (unsigned int *)a2[9];
        if (*((_BYTE *)v501 + 20))
        {
          v502 = v5[2240] + *v500;
          v503 = *(_QWORD *)(*v6 + 8 * v502);
          v504 = v5[2233] + *v501;
          v505 = *(_QWORD *)(*v6 + 8 * v504);
          if (v503 <= v505 && v503 <= *v7)
          {
            v506 = *v1810 + 24 * v504;
            v508 = (uint64_t **)(v506 + 8);
            v507 = *(uint64_t **)(v506 + 8);
            if (v507)
            {
              while (1)
              {
                while (1)
                {
                  v509 = (uint64_t **)v507;
                  v510 = *((_DWORD *)v507 + 7);
                  if (v510 <= v502)
                    break;
                  v507 = *v509;
                  v508 = v509;
                  if (!*v509)
                    goto LABEL_488;
                }
                if (v510 >= v502)
                  break;
                v507 = v509[1];
                if (!v507)
                {
                  v508 = v509 + 1;
                  goto LABEL_488;
                }
              }
            }
            else
            {
              v509 = (uint64_t **)(v506 + 8);
LABEL_488:
              v511 = operator new(0x20uLL);
              v511[7] = v502;
              *(_QWORD *)v511 = 0;
              *((_QWORD *)v511 + 1) = 0;
              *((_QWORD *)v511 + 2) = v509;
              *v508 = (uint64_t *)v511;
              v512 = **(_QWORD **)v506;
              if (v512)
              {
                *(_QWORD *)v506 = v512;
                v513 = *v508;
              }
              else
              {
                v513 = (uint64_t *)v511;
              }
              result = sub_20E868578(*(uint64_t **)(v506 + 8), v513);
              ++*(_QWORD *)(v506 + 16);
              v514 = *v1809 + 4 * v505;
              v515.i64[0] = 0x100000001;
              v515.i64[1] = 0x100000001;
              *(int32x4_t *)v514 = vaddq_s32(*(int32x4_t *)v514, v515);
              *(int32x2_t *)(v514 + 16) = vadd_s32(*(int32x2_t *)(v514 + 16), (int32x2_t)0x100000001);
            }
          }
        }
      }
      v516 = (unsigned int *)a2[7];
      v517 = (unsigned int *)a2[10];
      if (*((_BYTE *)v516 + 20))
      {
        if (*((_BYTE *)v517 + 20))
        {
          v518 = v5[2236] + *v516;
          v519 = *(_QWORD *)(*v6 + 8 * v518);
          v520 = v5[2233] + *v517;
          v521 = *(_QWORD *)(*v6 + 8 * v520);
          if (v519 <= v521 && v519 <= *v7)
          {
            v522 = *v1810 + 24 * v520;
            v524 = (uint64_t **)(v522 + 8);
            v523 = *(uint64_t **)(v522 + 8);
            if (v523)
            {
              while (1)
              {
                while (1)
                {
                  v525 = (uint64_t **)v523;
                  v526 = *((_DWORD *)v523 + 7);
                  if (v526 <= v518)
                    break;
                  v523 = *v525;
                  v524 = v525;
                  if (!*v525)
                    goto LABEL_503;
                }
                if (v526 >= v518)
                  break;
                v523 = v525[1];
                if (!v523)
                {
                  v524 = v525 + 1;
                  goto LABEL_503;
                }
              }
            }
            else
            {
              v525 = (uint64_t **)(v522 + 8);
LABEL_503:
              v527 = operator new(0x20uLL);
              v527[7] = v518;
              *(_QWORD *)v527 = 0;
              *((_QWORD *)v527 + 1) = 0;
              *((_QWORD *)v527 + 2) = v525;
              *v524 = (uint64_t *)v527;
              v528 = **(_QWORD **)v522;
              if (v528)
              {
                *(_QWORD *)v522 = v528;
                v529 = *v524;
              }
              else
              {
                v529 = (uint64_t *)v527;
              }
              result = sub_20E868578(*(uint64_t **)(v522 + 8), v529);
              ++*(_QWORD *)(v522 + 16);
              v530 = *v1809 + 4 * v521;
              v531.i64[0] = 0x600000006;
              v531.i64[1] = 0x600000006;
              *(int32x4_t *)v530 = vaddq_s32(*(int32x4_t *)v530, v531);
              *(int32x2_t *)(v530 + 16) = vadd_s32(*(int32x2_t *)(v530 + 16), (int32x2_t)0x600000006);
              v517 = (unsigned int *)a2[10];
            }
          }
        }
      }
      v532 = (unsigned int *)a2[8];
      if (*((_BYTE *)v532 + 20))
      {
        if (*((_BYTE *)v517 + 20))
        {
          v533 = v5[2236] + *v532;
          v534 = *(_QWORD *)(*v6 + 8 * v533);
          v535 = v5[2233] + *v517;
          v536 = *(_QWORD *)(*v6 + 8 * v535);
          if (v534 <= v536 && v534 <= *v7)
          {
            v537 = *v1810 + 24 * v535;
            v539 = (uint64_t **)(v537 + 8);
            v538 = *(uint64_t **)(v537 + 8);
            if (v538)
            {
              while (1)
              {
                while (1)
                {
                  v540 = (uint64_t **)v538;
                  v541 = *((_DWORD *)v538 + 7);
                  if (v541 <= v533)
                    break;
                  v538 = *v540;
                  v539 = v540;
                  if (!*v540)
                    goto LABEL_518;
                }
                if (v541 >= v533)
                  break;
                v538 = v540[1];
                if (!v538)
                {
                  v539 = v540 + 1;
                  goto LABEL_518;
                }
              }
            }
            else
            {
              v540 = (uint64_t **)(v537 + 8);
LABEL_518:
              v542 = operator new(0x20uLL);
              v542[7] = v533;
              *(_QWORD *)v542 = 0;
              *((_QWORD *)v542 + 1) = 0;
              *((_QWORD *)v542 + 2) = v540;
              *v539 = (uint64_t *)v542;
              v543 = **(_QWORD **)v537;
              if (v543)
              {
                *(_QWORD *)v537 = v543;
                v544 = *v539;
              }
              else
              {
                v544 = (uint64_t *)v542;
              }
              result = sub_20E868578(*(uint64_t **)(v537 + 8), v544);
              ++*(_QWORD *)(v537 + 16);
              v545 = *v1809 + 4 * v536;
              v546.i64[0] = 0x600000006;
              v546.i64[1] = 0x600000006;
              *(int32x4_t *)v545 = vaddq_s32(*(int32x4_t *)v545, v546);
              *(int32x2_t *)(v545 + 16) = vadd_s32(*(int32x2_t *)(v545 + 16), (int32x2_t)0x600000006);
              v517 = (unsigned int *)a2[10];
            }
          }
        }
      }
      v547 = (unsigned int *)a2[9];
      if (*((_BYTE *)v547 + 20))
      {
        if (*((_BYTE *)v517 + 20))
        {
          v548 = v5[2233];
          v549 = v548 + *v547;
          v550 = *(_QWORD *)(*v6 + 8 * v549);
          v551 = v548 + *v517;
          v552 = *(_QWORD *)(*v6 + 8 * v551);
          if (v550 <= v552 && v550 <= *v7)
          {
            v553 = *v1810 + 24 * v551;
            v555 = (uint64_t **)(v553 + 8);
            v554 = *(uint64_t **)(v553 + 8);
            if (v554)
            {
              while (1)
              {
                while (1)
                {
                  v556 = (uint64_t **)v554;
                  v557 = *((_DWORD *)v554 + 7);
                  if (v557 <= v549)
                    break;
                  v554 = *v556;
                  v555 = v556;
                  if (!*v556)
                    goto LABEL_533;
                }
                if (v557 >= v549)
                  break;
                v554 = v556[1];
                if (!v554)
                {
                  v555 = v556 + 1;
                  goto LABEL_533;
                }
              }
            }
            else
            {
              v556 = (uint64_t **)(v553 + 8);
LABEL_533:
              v558 = operator new(0x20uLL);
              v558[7] = v549;
              *(_QWORD *)v558 = 0;
              *((_QWORD *)v558 + 1) = 0;
              *((_QWORD *)v558 + 2) = v556;
              *v555 = (uint64_t *)v558;
              v559 = **(_QWORD **)v553;
              if (v559)
              {
                *(_QWORD *)v553 = v559;
                v560 = *v555;
              }
              else
              {
                v560 = (uint64_t *)v558;
              }
              result = sub_20E868578(*(uint64_t **)(v553 + 8), v560);
              ++*(_QWORD *)(v553 + 16);
              v561 = *v1809 + 4 * v552;
              v562.i64[0] = 0x600000006;
              v562.i64[1] = 0x600000006;
              *(int32x4_t *)v561 = vaddq_s32(*(int32x4_t *)v561, v562);
              *(int32x2_t *)(v561 + 16) = vadd_s32(*(int32x2_t *)(v561 + 16), (int32x2_t)0x600000006);
              v517 = (unsigned int *)a2[10];
            }
          }
        }
      }
      if (*((_BYTE *)v517 + 20))
      {
        v563 = v5[2233] + *v517;
        v564 = *(_QWORD *)(*v6 + 8 * v563);
        if (v564 <= *v7)
        {
          v565 = *v1810 + 24 * v563;
          v567 = (uint64_t **)(v565 + 8);
          v566 = *(uint64_t **)(v565 + 8);
          if (v566)
          {
            while (1)
            {
              while (1)
              {
                v568 = (uint64_t **)v566;
                v569 = *((_DWORD *)v566 + 7);
                if (v569 <= v563)
                  break;
                v566 = *v568;
                v567 = v568;
                if (!*v568)
                  goto LABEL_546;
              }
              if (v569 >= v563)
                break;
              v566 = v568[1];
              if (!v566)
              {
                v567 = v568 + 1;
                goto LABEL_546;
              }
            }
          }
          else
          {
            v568 = (uint64_t **)(v565 + 8);
LABEL_546:
            v570 = operator new(0x20uLL);
            v570[7] = v563;
            *(_QWORD *)v570 = 0;
            *((_QWORD *)v570 + 1) = 0;
            *((_QWORD *)v570 + 2) = v568;
            *v567 = (uint64_t *)v570;
            v571 = **(_QWORD **)v565;
            if (v571)
            {
              *(_QWORD *)v565 = v571;
              v572 = *v567;
            }
            else
            {
              v572 = (uint64_t *)v570;
            }
            result = sub_20E868578(*(uint64_t **)(v565 + 8), v572);
            ++*(_QWORD *)(v565 + 16);
            v573 = *v1809 + 4 * v564;
            v574.i64[0] = 0x600000006;
            v574.i64[1] = 0x600000006;
            *(int32x4_t *)v573 = vaddq_s32(*(int32x4_t *)v573, v574);
            *(int32x2_t *)(v573 + 16) = vadd_s32(*(int32x2_t *)(v573 + 16), (int32x2_t)0x600000006);
          }
        }
      }
      v575 = (unsigned int *)a2[11];
      if (*((_BYTE *)v575 + 20))
      {
        v576 = (unsigned int *)a2[10];
        if (*((_BYTE *)v576 + 20))
        {
          v577 = v5[2237] + *v575;
          v578 = *(_QWORD *)(*v6 + 8 * v577);
          v579 = v5[2233] + *v576;
          v580 = *(_QWORD *)(*v6 + 8 * v579);
          if (v578 <= v580 && v578 <= *v7)
          {
            v581 = *v1810 + 24 * v579;
            v583 = (uint64_t **)(v581 + 8);
            v582 = *(uint64_t **)(v581 + 8);
            if (v582)
            {
              while (1)
              {
                while (1)
                {
                  v584 = (uint64_t **)v582;
                  v585 = *((_DWORD *)v582 + 7);
                  if (v585 <= v577)
                    break;
                  v582 = *v584;
                  v583 = v584;
                  if (!*v584)
                    goto LABEL_561;
                }
                if (v585 >= v577)
                  break;
                v582 = v584[1];
                if (!v582)
                {
                  v583 = v584 + 1;
                  goto LABEL_561;
                }
              }
            }
            else
            {
              v584 = (uint64_t **)(v581 + 8);
LABEL_561:
              v586 = operator new(0x20uLL);
              v586[7] = v577;
              *(_QWORD *)v586 = 0;
              *((_QWORD *)v586 + 1) = 0;
              *((_QWORD *)v586 + 2) = v584;
              *v583 = (uint64_t *)v586;
              v587 = **(_QWORD **)v581;
              if (v587)
              {
                *(_QWORD *)v581 = v587;
                v588 = *v583;
              }
              else
              {
                v588 = (uint64_t *)v586;
              }
              result = sub_20E868578(*(uint64_t **)(v581 + 8), v588);
              ++*(_QWORD *)(v581 + 16);
              v589 = *v1809 + 4 * v580;
              v590.i64[0] = 0x400000004;
              v590.i64[1] = 0x400000004;
              *(int32x4_t *)v589 = vaddq_s32(*(int32x4_t *)v589, v590);
              *(int32x2_t *)(v589 + 16) = vadd_s32(*(int32x2_t *)(v589 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v591 = (unsigned int *)a2[12];
      if (*((_BYTE *)v591 + 20))
      {
        v592 = (unsigned int *)a2[10];
        if (*((_BYTE *)v592 + 20))
        {
          v593 = v5[2237] + *v591;
          v594 = *(_QWORD *)(*v6 + 8 * v593);
          v595 = v5[2233] + *v592;
          v596 = *(_QWORD *)(*v6 + 8 * v595);
          if (v594 <= v596 && v594 <= *v7)
          {
            v597 = *v1810 + 24 * v595;
            v599 = (uint64_t **)(v597 + 8);
            v598 = *(uint64_t **)(v597 + 8);
            if (v598)
            {
              while (1)
              {
                while (1)
                {
                  v600 = (uint64_t **)v598;
                  v601 = *((_DWORD *)v598 + 7);
                  if (v601 <= v593)
                    break;
                  v598 = *v600;
                  v599 = v600;
                  if (!*v600)
                    goto LABEL_576;
                }
                if (v601 >= v593)
                  break;
                v598 = v600[1];
                if (!v598)
                {
                  v599 = v600 + 1;
                  goto LABEL_576;
                }
              }
            }
            else
            {
              v600 = (uint64_t **)(v597 + 8);
LABEL_576:
              v602 = operator new(0x20uLL);
              v602[7] = v593;
              *(_QWORD *)v602 = 0;
              *((_QWORD *)v602 + 1) = 0;
              *((_QWORD *)v602 + 2) = v600;
              *v599 = (uint64_t *)v602;
              v603 = **(_QWORD **)v597;
              if (v603)
              {
                *(_QWORD *)v597 = v603;
                v604 = *v599;
              }
              else
              {
                v604 = (uint64_t *)v602;
              }
              result = sub_20E868578(*(uint64_t **)(v597 + 8), v604);
              ++*(_QWORD *)(v597 + 16);
              v605 = *v1809 + 4 * v596;
              v606.i64[0] = 0x400000004;
              v606.i64[1] = 0x400000004;
              *(int32x4_t *)v605 = vaddq_s32(*(int32x4_t *)v605, v606);
              *(int32x2_t *)(v605 + 16) = vadd_s32(*(int32x2_t *)(v605 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v607 = (unsigned int *)a2[13];
      if (*((_BYTE *)v607 + 20))
      {
        v608 = (unsigned int *)a2[10];
        if (*((_BYTE *)v608 + 20))
        {
          v609 = v5[2238] + *v607;
          v610 = *(_QWORD *)(*v6 + 8 * v609);
          v611 = v5[2233] + *v608;
          v612 = *(_QWORD *)(*v6 + 8 * v611);
          if (v610 <= v612 && v610 <= *v7)
          {
            v613 = *v1810 + 24 * v611;
            v615 = (uint64_t **)(v613 + 8);
            v614 = *(uint64_t **)(v613 + 8);
            if (v614)
            {
              while (1)
              {
                while (1)
                {
                  v616 = (uint64_t **)v614;
                  v617 = *((_DWORD *)v614 + 7);
                  if (v617 <= v609)
                    break;
                  v614 = *v616;
                  v615 = v616;
                  if (!*v616)
                    goto LABEL_591;
                }
                if (v617 >= v609)
                  break;
                v614 = v616[1];
                if (!v614)
                {
                  v615 = v616 + 1;
                  goto LABEL_591;
                }
              }
            }
            else
            {
              v616 = (uint64_t **)(v613 + 8);
LABEL_591:
              v618 = operator new(0x20uLL);
              v618[7] = v609;
              *(_QWORD *)v618 = 0;
              *((_QWORD *)v618 + 1) = 0;
              *((_QWORD *)v618 + 2) = v616;
              *v615 = (uint64_t *)v618;
              v619 = **(_QWORD **)v613;
              if (v619)
              {
                *(_QWORD *)v613 = v619;
                v620 = *v615;
              }
              else
              {
                v620 = (uint64_t *)v618;
              }
              result = sub_20E868578(*(uint64_t **)(v613 + 8), v620);
              ++*(_QWORD *)(v613 + 16);
              v621 = *v1809 + 4 * v612;
              v622.i64[0] = 0x400000004;
              v622.i64[1] = 0x400000004;
              *(int32x4_t *)v621 = vaddq_s32(*(int32x4_t *)v621, v622);
              *(int32x2_t *)(v621 + 16) = vadd_s32(*(int32x2_t *)(v621 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v623 = (unsigned int *)a2[14];
      if (*((_BYTE *)v623 + 20))
      {
        v624 = (unsigned int *)a2[10];
        if (*((_BYTE *)v624 + 20))
        {
          v625 = v5[2238] + *v623;
          v626 = *(_QWORD *)(*v6 + 8 * v625);
          v627 = v5[2233] + *v624;
          v628 = *(_QWORD *)(*v6 + 8 * v627);
          if (v626 <= v628 && v626 <= *v7)
          {
            v629 = *v1810 + 24 * v627;
            v631 = (uint64_t **)(v629 + 8);
            v630 = *(uint64_t **)(v629 + 8);
            if (v630)
            {
              while (1)
              {
                while (1)
                {
                  v632 = (uint64_t **)v630;
                  v633 = *((_DWORD *)v630 + 7);
                  if (v633 <= v625)
                    break;
                  v630 = *v632;
                  v631 = v632;
                  if (!*v632)
                    goto LABEL_606;
                }
                if (v633 >= v625)
                  break;
                v630 = v632[1];
                if (!v630)
                {
                  v631 = v632 + 1;
                  goto LABEL_606;
                }
              }
            }
            else
            {
              v632 = (uint64_t **)(v629 + 8);
LABEL_606:
              v634 = operator new(0x20uLL);
              v634[7] = v625;
              *(_QWORD *)v634 = 0;
              *((_QWORD *)v634 + 1) = 0;
              *((_QWORD *)v634 + 2) = v632;
              *v631 = (uint64_t *)v634;
              v635 = **(_QWORD **)v629;
              if (v635)
              {
                *(_QWORD *)v629 = v635;
                v636 = *v631;
              }
              else
              {
                v636 = (uint64_t *)v634;
              }
              result = sub_20E868578(*(uint64_t **)(v629 + 8), v636);
              ++*(_QWORD *)(v629 + 16);
              v637 = *v1809 + 4 * v628;
              v638.i64[0] = 0x400000004;
              v638.i64[1] = 0x400000004;
              *(int32x4_t *)v637 = vaddq_s32(*(int32x4_t *)v637, v638);
              *(int32x2_t *)(v637 + 16) = vadd_s32(*(int32x2_t *)(v637 + 16), (int32x2_t)0x400000004);
            }
          }
        }
      }
      v639 = (unsigned int *)a2[15];
      if (*((_BYTE *)v639 + 20))
      {
        v640 = (unsigned int *)a2[10];
        if (*((_BYTE *)v640 + 20))
        {
          v641 = v5[2239] + *v639;
          v642 = *(_QWORD *)(*v6 + 8 * v641);
          v643 = v5[2233] + *v640;
          v644 = *(_QWORD *)(*v6 + 8 * v643);
          if (v642 <= v644 && v642 <= *v7)
          {
            v645 = *v1810 + 24 * v643;
            v647 = (uint64_t **)(v645 + 8);
            v646 = *(uint64_t **)(v645 + 8);
            if (v646)
            {
              while (1)
              {
                while (1)
                {
                  v648 = (uint64_t **)v646;
                  v649 = *((_DWORD *)v646 + 7);
                  if (v649 <= v641)
                    break;
                  v646 = *v648;
                  v647 = v648;
                  if (!*v648)
                    goto LABEL_621;
                }
                if (v649 >= v641)
                  break;
                v646 = v648[1];
                if (!v646)
                {
                  v647 = v648 + 1;
                  goto LABEL_621;
                }
              }
            }
            else
            {
              v648 = (uint64_t **)(v645 + 8);
LABEL_621:
              v650 = operator new(0x20uLL);
              v650[7] = v641;
              *(_QWORD *)v650 = 0;
              *((_QWORD *)v650 + 1) = 0;
              *((_QWORD *)v650 + 2) = v648;
              *v647 = (uint64_t *)v650;
              v651 = **(_QWORD **)v645;
              if (v651)
              {
                *(_QWORD *)v645 = v651;
                v652 = *v647;
              }
              else
              {
                v652 = (uint64_t *)v650;
              }
              result = sub_20E868578(*(uint64_t **)(v645 + 8), v652);
              ++*(_QWORD *)(v645 + 16);
              v653 = *v1809 + 4 * v644;
              v654.i64[0] = 0x300000003;
              v654.i64[1] = 0x300000003;
              *(int32x4_t *)v653 = vaddq_s32(*(int32x4_t *)v653, v654);
              *(int32x2_t *)(v653 + 16) = vadd_s32(*(int32x2_t *)(v653 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v655 = (unsigned int *)a2[16];
      if (*((_BYTE *)v655 + 20))
      {
        v656 = (unsigned int *)a2[10];
        if (*((_BYTE *)v656 + 20))
        {
          v657 = v5[2239] + *v655;
          v658 = *(_QWORD *)(*v6 + 8 * v657);
          v659 = v5[2233] + *v656;
          v660 = *(_QWORD *)(*v6 + 8 * v659);
          if (v658 <= v660 && v658 <= *v7)
          {
            v661 = *v1810 + 24 * v659;
            v663 = (uint64_t **)(v661 + 8);
            v662 = *(uint64_t **)(v661 + 8);
            if (v662)
            {
              while (1)
              {
                while (1)
                {
                  v664 = (uint64_t **)v662;
                  v665 = *((_DWORD *)v662 + 7);
                  if (v665 <= v657)
                    break;
                  v662 = *v664;
                  v663 = v664;
                  if (!*v664)
                    goto LABEL_636;
                }
                if (v665 >= v657)
                  break;
                v662 = v664[1];
                if (!v662)
                {
                  v663 = v664 + 1;
                  goto LABEL_636;
                }
              }
            }
            else
            {
              v664 = (uint64_t **)(v661 + 8);
LABEL_636:
              v666 = operator new(0x20uLL);
              v666[7] = v657;
              *(_QWORD *)v666 = 0;
              *((_QWORD *)v666 + 1) = 0;
              *((_QWORD *)v666 + 2) = v664;
              *v663 = (uint64_t *)v666;
              v667 = **(_QWORD **)v661;
              if (v667)
              {
                *(_QWORD *)v661 = v667;
                v668 = *v663;
              }
              else
              {
                v668 = (uint64_t *)v666;
              }
              result = sub_20E868578(*(uint64_t **)(v661 + 8), v668);
              ++*(_QWORD *)(v661 + 16);
              v669 = *v1809 + 4 * v660;
              v670.i64[0] = 0x300000003;
              v670.i64[1] = 0x300000003;
              *(int32x4_t *)v669 = vaddq_s32(*(int32x4_t *)v669, v670);
              *(int32x2_t *)(v669 + 16) = vadd_s32(*(int32x2_t *)(v669 + 16), (int32x2_t)0x300000003);
            }
          }
        }
      }
      v671 = (unsigned int *)a2[17];
      if (*((_BYTE *)v671 + 20))
      {
        v672 = (unsigned int *)a2[10];
        if (*((_BYTE *)v672 + 20))
        {
          v673 = v5[2240] + *v671;
          v674 = *(_QWORD *)(*v6 + 8 * v673);
          v675 = v5[2233] + *v672;
          v676 = *(_QWORD *)(*v6 + 8 * v675);
          if (v674 <= v676 && v674 <= *v7)
          {
            v677 = *v1810 + 24 * v675;
            v679 = (uint64_t **)(v677 + 8);
            v678 = *(uint64_t **)(v677 + 8);
            if (v678)
            {
              while (1)
              {
                while (1)
                {
                  v680 = (uint64_t **)v678;
                  v681 = *((_DWORD *)v678 + 7);
                  if (v681 <= v673)
                    break;
                  v678 = *v680;
                  v679 = v680;
                  if (!*v680)
                    goto LABEL_651;
                }
                if (v681 >= v673)
                  break;
                v678 = v680[1];
                if (!v678)
                {
                  v679 = v680 + 1;
                  goto LABEL_651;
                }
              }
            }
            else
            {
              v680 = (uint64_t **)(v677 + 8);
LABEL_651:
              v682 = operator new(0x20uLL);
              v682[7] = v673;
              *(_QWORD *)v682 = 0;
              *((_QWORD *)v682 + 1) = 0;
              *((_QWORD *)v682 + 2) = v680;
              *v679 = (uint64_t *)v682;
              v683 = **(_QWORD **)v677;
              if (v683)
              {
                *(_QWORD *)v677 = v683;
                v684 = *v679;
              }
              else
              {
                v684 = (uint64_t *)v682;
              }
              result = sub_20E868578(*(uint64_t **)(v677 + 8), v684);
              ++*(_QWORD *)(v677 + 16);
              v685 = *v1809 + 4 * v676;
              v686.i64[0] = 0x100000001;
              v686.i64[1] = 0x100000001;
              *(int32x4_t *)v685 = vaddq_s32(*(int32x4_t *)v685, v686);
              *(int32x2_t *)(v685 + 16) = vadd_s32(*(int32x2_t *)(v685 + 16), (int32x2_t)0x100000001);
            }
          }
        }
      }
      v687 = (unsigned int *)a2[7];
      v688 = (unsigned int *)a2[11];
      if (*((_BYTE *)v687 + 20))
      {
        if (*((_BYTE *)v688 + 20))
        {
          v689 = v5[2236] + *v687;
          v690 = *(_QWORD *)(*v6 + 8 * v689);
          v691 = v5[2237] + *v688;
          v692 = *(_QWORD *)(*v6 + 8 * v691);
          if (v690 <= v692 && v690 <= *v7)
          {
            v693 = *v1810 + 24 * v691;
            v695 = (uint64_t **)(v693 + 8);
            v694 = *(uint64_t **)(v693 + 8);
            if (v694)
            {
              while (1)
              {
                while (1)
                {
                  v696 = (uint64_t **)v694;
                  v697 = *((_DWORD *)v694 + 7);
                  if (v697 <= v689)
                    break;
                  v694 = *v696;
                  v695 = v696;
                  if (!*v696)
                    goto LABEL_666;
                }
                if (v697 >= v689)
                  break;
                v694 = v696[1];
                if (!v694)
                {
                  v695 = v696 + 1;
                  goto LABEL_666;
                }
              }
            }
            else
            {
              v696 = (uint64_t **)(v693 + 8);
LABEL_666:
              v698 = operator new(0x20uLL);
              v698[7] = v689;
              *(_QWORD *)v698 = 0;
              *((_QWORD *)v698 + 1) = 0;
              *((_QWORD *)v698 + 2) = v696;
              *v695 = (uint64_t *)v698;
              v699 = **(_QWORD **)v693;
              if (v699)
              {
                *(_QWORD *)v693 = v699;
                v700 = *v695;
              }
              else
              {
                v700 = (uint64_t *)v698;
              }
              result = sub_20E868578(*(uint64_t **)(v693 + 8), v700);
              v701 = *v1809;
              v702 = *(int32x4_t *)(*v1809 + 4 * v692);
              ++*(_QWORD *)(v693 + 16);
              v703.i64[0] = 0x600000006;
              v703.i64[1] = 0x600000006;
              *(int32x4_t *)(v701 + 4 * v692) = vaddq_s32(v702, v703);
              v688 = (unsigned int *)a2[11];
            }
          }
        }
      }
      v704 = (unsigned int *)a2[8];
      if (*((_BYTE *)v704 + 20))
      {
        if (*((_BYTE *)v688 + 20))
        {
          v705 = v5[2236] + *v704;
          v706 = *(_QWORD *)(*v6 + 8 * v705);
          v707 = v5[2237] + *v688;
          v708 = *(_QWORD *)(*v6 + 8 * v707);
          if (v706 <= v708 && v706 <= *v7)
          {
            v709 = *v1810 + 24 * v707;
            v711 = (uint64_t **)(v709 + 8);
            v710 = *(uint64_t **)(v709 + 8);
            if (v710)
            {
              while (1)
              {
                while (1)
                {
                  v712 = (uint64_t **)v710;
                  v713 = *((_DWORD *)v710 + 7);
                  if (v713 <= v705)
                    break;
                  v710 = *v712;
                  v711 = v712;
                  if (!*v712)
                    goto LABEL_681;
                }
                if (v713 >= v705)
                  break;
                v710 = v712[1];
                if (!v710)
                {
                  v711 = v712 + 1;
                  goto LABEL_681;
                }
              }
            }
            else
            {
              v712 = (uint64_t **)(v709 + 8);
LABEL_681:
              v714 = operator new(0x20uLL);
              v714[7] = v705;
              *(_QWORD *)v714 = 0;
              *((_QWORD *)v714 + 1) = 0;
              *((_QWORD *)v714 + 2) = v712;
              *v711 = (uint64_t *)v714;
              v715 = **(_QWORD **)v709;
              if (v715)
              {
                *(_QWORD *)v709 = v715;
                v716 = *v711;
              }
              else
              {
                v716 = (uint64_t *)v714;
              }
              result = sub_20E868578(*(uint64_t **)(v709 + 8), v716);
              v717 = *v1809;
              v718 = *(int32x4_t *)(*v1809 + 4 * v708);
              ++*(_QWORD *)(v709 + 16);
              v719.i64[0] = 0x600000006;
              v719.i64[1] = 0x600000006;
              *(int32x4_t *)(v717 + 4 * v708) = vaddq_s32(v718, v719);
              v688 = (unsigned int *)a2[11];
            }
          }
        }
      }
      v720 = (unsigned int *)a2[9];
      if (*((_BYTE *)v720 + 20))
      {
        if (*((_BYTE *)v688 + 20))
        {
          v721 = v5[2233] + *v720;
          v722 = *(_QWORD *)(*v6 + 8 * v721);
          v723 = v5[2237] + *v688;
          v724 = *(_QWORD *)(*v6 + 8 * v723);
          if (v722 <= v724 && v722 <= *v7)
          {
            v725 = *v1810 + 24 * v723;
            v727 = (uint64_t **)(v725 + 8);
            v726 = *(uint64_t **)(v725 + 8);
            if (v726)
            {
              while (1)
              {
                while (1)
                {
                  v728 = (uint64_t **)v726;
                  v729 = *((_DWORD *)v726 + 7);
                  if (v729 <= v721)
                    break;
                  v726 = *v728;
                  v727 = v728;
                  if (!*v728)
                    goto LABEL_696;
                }
                if (v729 >= v721)
                  break;
                v726 = v728[1];
                if (!v726)
                {
                  v727 = v728 + 1;
                  goto LABEL_696;
                }
              }
            }
            else
            {
              v728 = (uint64_t **)(v725 + 8);
LABEL_696:
              v730 = operator new(0x20uLL);
              v730[7] = v721;
              *(_QWORD *)v730 = 0;
              *((_QWORD *)v730 + 1) = 0;
              *((_QWORD *)v730 + 2) = v728;
              *v727 = (uint64_t *)v730;
              v731 = **(_QWORD **)v725;
              if (v731)
              {
                *(_QWORD *)v725 = v731;
                v732 = *v727;
              }
              else
              {
                v732 = (uint64_t *)v730;
              }
              result = sub_20E868578(*(uint64_t **)(v725 + 8), v732);
              v733 = *v1809;
              v734 = *(int32x4_t *)(*v1809 + 4 * v724);
              ++*(_QWORD *)(v725 + 16);
              v735.i64[0] = 0x600000006;
              v735.i64[1] = 0x600000006;
              *(int32x4_t *)(v733 + 4 * v724) = vaddq_s32(v734, v735);
              v688 = (unsigned int *)a2[11];
            }
          }
        }
      }
      v736 = (unsigned int *)a2[10];
      if (*((_BYTE *)v736 + 20))
      {
        if (*((_BYTE *)v688 + 20))
        {
          v737 = v5[2233] + *v736;
          v738 = *(_QWORD *)(*v6 + 8 * v737);
          v739 = v5[2237] + *v688;
          v740 = *(_QWORD *)(*v6 + 8 * v739);
          if (v738 <= v740 && v738 <= *v7)
          {
            v741 = *v1810 + 24 * v739;
            v743 = (uint64_t **)(v741 + 8);
            v742 = *(uint64_t **)(v741 + 8);
            if (v742)
            {
              while (1)
              {
                while (1)
                {
                  v744 = (uint64_t **)v742;
                  v745 = *((_DWORD *)v742 + 7);
                  if (v745 <= v737)
                    break;
                  v742 = *v744;
                  v743 = v744;
                  if (!*v744)
                    goto LABEL_711;
                }
                if (v745 >= v737)
                  break;
                v742 = v744[1];
                if (!v742)
                {
                  v743 = v744 + 1;
                  goto LABEL_711;
                }
              }
            }
            else
            {
              v744 = (uint64_t **)(v741 + 8);
LABEL_711:
              v746 = operator new(0x20uLL);
              v746[7] = v737;
              *(_QWORD *)v746 = 0;
              *((_QWORD *)v746 + 1) = 0;
              *((_QWORD *)v746 + 2) = v744;
              *v743 = (uint64_t *)v746;
              v747 = **(_QWORD **)v741;
              if (v747)
              {
                *(_QWORD *)v741 = v747;
                v748 = *v743;
              }
              else
              {
                v748 = (uint64_t *)v746;
              }
              result = sub_20E868578(*(uint64_t **)(v741 + 8), v748);
              v749 = *v1809;
              v750 = *(int32x4_t *)(*v1809 + 4 * v740);
              ++*(_QWORD *)(v741 + 16);
              v751.i64[0] = 0x600000006;
              v751.i64[1] = 0x600000006;
              *(int32x4_t *)(v749 + 4 * v740) = vaddq_s32(v750, v751);
              v688 = (unsigned int *)a2[11];
            }
          }
        }
      }
      if (*((_BYTE *)v688 + 20))
      {
        v752 = v5[2237] + *v688;
        v753 = *(_QWORD *)(*v6 + 8 * v752);
        if (v753 <= *v7)
        {
          v754 = *v1810 + 24 * v752;
          v756 = (uint64_t **)(v754 + 8);
          v755 = *(uint64_t **)(v754 + 8);
          if (v755)
          {
            while (1)
            {
              while (1)
              {
                v757 = (uint64_t **)v755;
                v758 = *((_DWORD *)v755 + 7);
                if (v758 <= v752)
                  break;
                v755 = *v757;
                v756 = v757;
                if (!*v757)
                  goto LABEL_724;
              }
              if (v758 >= v752)
                break;
              v755 = v757[1];
              if (!v755)
              {
                v756 = v757 + 1;
                goto LABEL_724;
              }
            }
          }
          else
          {
            v757 = (uint64_t **)(v754 + 8);
LABEL_724:
            v759 = operator new(0x20uLL);
            v759[7] = v752;
            *(_QWORD *)v759 = 0;
            *((_QWORD *)v759 + 1) = 0;
            *((_QWORD *)v759 + 2) = v757;
            *v756 = (uint64_t *)v759;
            v760 = **(_QWORD **)v754;
            if (v760)
            {
              *(_QWORD *)v754 = v760;
              v761 = *v756;
            }
            else
            {
              v761 = (uint64_t *)v759;
            }
            result = sub_20E868578(*(uint64_t **)(v754 + 8), v761);
            ++*(_QWORD *)(v754 + 16);
            v762.i64[0] = 0x400000004;
            v762.i64[1] = 0x400000004;
            *(int32x4_t *)(*v1809 + 4 * v753) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v753), v762);
          }
        }
      }
      v763 = (unsigned int *)a2[12];
      if (*((_BYTE *)v763 + 20))
      {
        v764 = (unsigned int *)a2[11];
        if (*((_BYTE *)v764 + 20))
        {
          v765 = v5[2237];
          v766 = v765 + *v763;
          v767 = *(_QWORD *)(*v6 + 8 * v766);
          v768 = v765 + *v764;
          v769 = *(_QWORD *)(*v6 + 8 * v768);
          if (v767 <= v769 && v767 <= *v7)
          {
            v770 = *v1810 + 24 * v768;
            v772 = (uint64_t **)(v770 + 8);
            v771 = *(uint64_t **)(v770 + 8);
            if (v771)
            {
              while (1)
              {
                while (1)
                {
                  v773 = (uint64_t **)v771;
                  v774 = *((_DWORD *)v771 + 7);
                  if (v774 <= v766)
                    break;
                  v771 = *v773;
                  v772 = v773;
                  if (!*v773)
                    goto LABEL_739;
                }
                if (v774 >= v766)
                  break;
                v771 = v773[1];
                if (!v771)
                {
                  v772 = v773 + 1;
                  goto LABEL_739;
                }
              }
            }
            else
            {
              v773 = (uint64_t **)(v770 + 8);
LABEL_739:
              v775 = operator new(0x20uLL);
              v775[7] = v766;
              *(_QWORD *)v775 = 0;
              *((_QWORD *)v775 + 1) = 0;
              *((_QWORD *)v775 + 2) = v773;
              *v772 = (uint64_t *)v775;
              v776 = **(_QWORD **)v770;
              if (v776)
              {
                *(_QWORD *)v770 = v776;
                v777 = *v772;
              }
              else
              {
                v777 = (uint64_t *)v775;
              }
              result = sub_20E868578(*(uint64_t **)(v770 + 8), v777);
              ++*(_QWORD *)(v770 + 16);
              v778.i64[0] = 0x400000004;
              v778.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v769) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v769), v778);
            }
          }
        }
      }
      v779 = (unsigned int *)a2[13];
      if (*((_BYTE *)v779 + 20))
      {
        v780 = (unsigned int *)a2[11];
        if (*((_BYTE *)v780 + 20))
        {
          v781 = v5[2238] + *v779;
          v782 = *(_QWORD *)(*v6 + 8 * v781);
          v783 = v5[2237] + *v780;
          v784 = *(_QWORD *)(*v6 + 8 * v783);
          if (v782 <= v784 && v782 <= *v7)
          {
            v785 = *v1810 + 24 * v783;
            v787 = (uint64_t **)(v785 + 8);
            v786 = *(uint64_t **)(v785 + 8);
            if (v786)
            {
              while (1)
              {
                while (1)
                {
                  v788 = (uint64_t **)v786;
                  v789 = *((_DWORD *)v786 + 7);
                  if (v789 <= v781)
                    break;
                  v786 = *v788;
                  v787 = v788;
                  if (!*v788)
                    goto LABEL_754;
                }
                if (v789 >= v781)
                  break;
                v786 = v788[1];
                if (!v786)
                {
                  v787 = v788 + 1;
                  goto LABEL_754;
                }
              }
            }
            else
            {
              v788 = (uint64_t **)(v785 + 8);
LABEL_754:
              v790 = operator new(0x20uLL);
              v790[7] = v781;
              *(_QWORD *)v790 = 0;
              *((_QWORD *)v790 + 1) = 0;
              *((_QWORD *)v790 + 2) = v788;
              *v787 = (uint64_t *)v790;
              v791 = **(_QWORD **)v785;
              if (v791)
              {
                *(_QWORD *)v785 = v791;
                v792 = *v787;
              }
              else
              {
                v792 = (uint64_t *)v790;
              }
              result = sub_20E868578(*(uint64_t **)(v785 + 8), v792);
              ++*(_QWORD *)(v785 + 16);
              v793.i64[0] = 0x400000004;
              v793.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v784) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v784), v793);
            }
          }
        }
      }
      v794 = (unsigned int *)a2[14];
      if (*((_BYTE *)v794 + 20))
      {
        v795 = (unsigned int *)a2[11];
        if (*((_BYTE *)v795 + 20))
        {
          v796 = v5[2238] + *v794;
          v797 = *(_QWORD *)(*v6 + 8 * v796);
          v798 = v5[2237] + *v795;
          v799 = *(_QWORD *)(*v6 + 8 * v798);
          if (v797 <= v799 && v797 <= *v7)
          {
            v800 = *v1810 + 24 * v798;
            v802 = (uint64_t **)(v800 + 8);
            v801 = *(uint64_t **)(v800 + 8);
            if (v801)
            {
              while (1)
              {
                while (1)
                {
                  v803 = (uint64_t **)v801;
                  v804 = *((_DWORD *)v801 + 7);
                  if (v804 <= v796)
                    break;
                  v801 = *v803;
                  v802 = v803;
                  if (!*v803)
                    goto LABEL_769;
                }
                if (v804 >= v796)
                  break;
                v801 = v803[1];
                if (!v801)
                {
                  v802 = v803 + 1;
                  goto LABEL_769;
                }
              }
            }
            else
            {
              v803 = (uint64_t **)(v800 + 8);
LABEL_769:
              v805 = operator new(0x20uLL);
              v805[7] = v796;
              *(_QWORD *)v805 = 0;
              *((_QWORD *)v805 + 1) = 0;
              *((_QWORD *)v805 + 2) = v803;
              *v802 = (uint64_t *)v805;
              v806 = **(_QWORD **)v800;
              if (v806)
              {
                *(_QWORD *)v800 = v806;
                v807 = *v802;
              }
              else
              {
                v807 = (uint64_t *)v805;
              }
              result = sub_20E868578(*(uint64_t **)(v800 + 8), v807);
              ++*(_QWORD *)(v800 + 16);
              v808.i64[0] = 0x400000004;
              v808.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v799) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v799), v808);
            }
          }
        }
      }
      v809 = (unsigned int *)a2[15];
      if (*((_BYTE *)v809 + 20))
      {
        v810 = (unsigned int *)a2[11];
        if (*((_BYTE *)v810 + 20))
        {
          v811 = v5[2239] + *v809;
          v812 = *(_QWORD *)(*v6 + 8 * v811);
          v813 = v5[2237] + *v810;
          v814 = *(_QWORD *)(*v6 + 8 * v813);
          if (v812 <= v814 && v812 <= *v7)
          {
            v815 = *v1810 + 24 * v813;
            v817 = (uint64_t **)(v815 + 8);
            v816 = *(uint64_t **)(v815 + 8);
            if (v816)
            {
              while (1)
              {
                while (1)
                {
                  v818 = (uint64_t **)v816;
                  v819 = *((_DWORD *)v816 + 7);
                  if (v819 <= v811)
                    break;
                  v816 = *v818;
                  v817 = v818;
                  if (!*v818)
                    goto LABEL_784;
                }
                if (v819 >= v811)
                  break;
                v816 = v818[1];
                if (!v816)
                {
                  v817 = v818 + 1;
                  goto LABEL_784;
                }
              }
            }
            else
            {
              v818 = (uint64_t **)(v815 + 8);
LABEL_784:
              v820 = operator new(0x20uLL);
              v820[7] = v811;
              *(_QWORD *)v820 = 0;
              *((_QWORD *)v820 + 1) = 0;
              *((_QWORD *)v820 + 2) = v818;
              *v817 = (uint64_t *)v820;
              v821 = **(_QWORD **)v815;
              if (v821)
              {
                *(_QWORD *)v815 = v821;
                v822 = *v817;
              }
              else
              {
                v822 = (uint64_t *)v820;
              }
              result = sub_20E868578(*(uint64_t **)(v815 + 8), v822);
              ++*(_QWORD *)(v815 + 16);
              v823.i64[0] = 0x300000003;
              v823.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v814) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v814), v823);
            }
          }
        }
      }
      v824 = (unsigned int *)a2[16];
      if (*((_BYTE *)v824 + 20))
      {
        v825 = (unsigned int *)a2[11];
        if (*((_BYTE *)v825 + 20))
        {
          v826 = v5[2239] + *v824;
          v827 = *(_QWORD *)(*v6 + 8 * v826);
          v828 = v5[2237] + *v825;
          v829 = *(_QWORD *)(*v6 + 8 * v828);
          if (v827 <= v829 && v827 <= *v7)
          {
            v830 = *v1810 + 24 * v828;
            v832 = (uint64_t **)(v830 + 8);
            v831 = *(uint64_t **)(v830 + 8);
            if (v831)
            {
              while (1)
              {
                while (1)
                {
                  v833 = (uint64_t **)v831;
                  v834 = *((_DWORD *)v831 + 7);
                  if (v834 <= v826)
                    break;
                  v831 = *v833;
                  v832 = v833;
                  if (!*v833)
                    goto LABEL_799;
                }
                if (v834 >= v826)
                  break;
                v831 = v833[1];
                if (!v831)
                {
                  v832 = v833 + 1;
                  goto LABEL_799;
                }
              }
            }
            else
            {
              v833 = (uint64_t **)(v830 + 8);
LABEL_799:
              v835 = operator new(0x20uLL);
              v835[7] = v826;
              *(_QWORD *)v835 = 0;
              *((_QWORD *)v835 + 1) = 0;
              *((_QWORD *)v835 + 2) = v833;
              *v832 = (uint64_t *)v835;
              v836 = **(_QWORD **)v830;
              if (v836)
              {
                *(_QWORD *)v830 = v836;
                v837 = *v832;
              }
              else
              {
                v837 = (uint64_t *)v835;
              }
              result = sub_20E868578(*(uint64_t **)(v830 + 8), v837);
              ++*(_QWORD *)(v830 + 16);
              v838.i64[0] = 0x300000003;
              v838.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v829) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v829), v838);
            }
          }
        }
      }
      v839 = (unsigned int *)a2[17];
      if (*((_BYTE *)v839 + 20))
      {
        v840 = (unsigned int *)a2[11];
        if (*((_BYTE *)v840 + 20))
        {
          v841 = v5[2240] + *v839;
          v842 = *(_QWORD *)(*v6 + 8 * v841);
          v843 = v5[2237] + *v840;
          v844 = *(_QWORD *)(*v6 + 8 * v843);
          if (v842 <= v844 && v842 <= *v7)
          {
            v845 = *v1810 + 24 * v843;
            v847 = (uint64_t **)(v845 + 8);
            v846 = *(uint64_t **)(v845 + 8);
            if (v846)
            {
              while (1)
              {
                while (1)
                {
                  v848 = (uint64_t **)v846;
                  v849 = *((_DWORD *)v846 + 7);
                  if (v849 <= v841)
                    break;
                  v846 = *v848;
                  v847 = v848;
                  if (!*v848)
                    goto LABEL_814;
                }
                if (v849 >= v841)
                  break;
                v846 = v848[1];
                if (!v846)
                {
                  v847 = v848 + 1;
                  goto LABEL_814;
                }
              }
            }
            else
            {
              v848 = (uint64_t **)(v845 + 8);
LABEL_814:
              v850 = operator new(0x20uLL);
              v850[7] = v841;
              *(_QWORD *)v850 = 0;
              *((_QWORD *)v850 + 1) = 0;
              *((_QWORD *)v850 + 2) = v848;
              *v847 = (uint64_t *)v850;
              v851 = **(_QWORD **)v845;
              if (v851)
              {
                *(_QWORD *)v845 = v851;
                v852 = *v847;
              }
              else
              {
                v852 = (uint64_t *)v850;
              }
              result = sub_20E868578(*(uint64_t **)(v845 + 8), v852);
              ++*(_QWORD *)(v845 + 16);
              v853.i64[0] = 0x100000001;
              v853.i64[1] = 0x100000001;
              *(int32x4_t *)(*v1809 + 4 * v844) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v844), v853);
            }
          }
        }
      }
      v854 = (unsigned int *)a2[7];
      v855 = (unsigned int *)a2[12];
      if (*((_BYTE *)v854 + 20))
      {
        if (*((_BYTE *)v855 + 20))
        {
          v856 = v5[2236] + *v854;
          v857 = *(_QWORD *)(*v6 + 8 * v856);
          v858 = v5[2237] + *v855;
          v859 = *(_QWORD *)(*v6 + 8 * v858);
          if (v857 <= v859 && v857 <= *v7)
          {
            v860 = *v1810 + 24 * v858;
            v862 = (uint64_t **)(v860 + 8);
            v861 = *(uint64_t **)(v860 + 8);
            if (v861)
            {
              while (1)
              {
                while (1)
                {
                  v863 = (uint64_t **)v861;
                  v864 = *((_DWORD *)v861 + 7);
                  if (v864 <= v856)
                    break;
                  v861 = *v863;
                  v862 = v863;
                  if (!*v863)
                    goto LABEL_829;
                }
                if (v864 >= v856)
                  break;
                v861 = v863[1];
                if (!v861)
                {
                  v862 = v863 + 1;
                  goto LABEL_829;
                }
              }
            }
            else
            {
              v863 = (uint64_t **)(v860 + 8);
LABEL_829:
              v865 = operator new(0x20uLL);
              v865[7] = v856;
              *(_QWORD *)v865 = 0;
              *((_QWORD *)v865 + 1) = 0;
              *((_QWORD *)v865 + 2) = v863;
              *v862 = (uint64_t *)v865;
              v866 = **(_QWORD **)v860;
              if (v866)
              {
                *(_QWORD *)v860 = v866;
                v867 = *v862;
              }
              else
              {
                v867 = (uint64_t *)v865;
              }
              result = sub_20E868578(*(uint64_t **)(v860 + 8), v867);
              v868 = *v1809;
              v869 = *(int32x4_t *)(*v1809 + 4 * v859);
              ++*(_QWORD *)(v860 + 16);
              v870.i64[0] = 0x600000006;
              v870.i64[1] = 0x600000006;
              *(int32x4_t *)(v868 + 4 * v859) = vaddq_s32(v869, v870);
              v855 = (unsigned int *)a2[12];
            }
          }
        }
      }
      v871 = (unsigned int *)a2[8];
      if (*((_BYTE *)v871 + 20))
      {
        if (*((_BYTE *)v855 + 20))
        {
          v872 = v5[2236] + *v871;
          v873 = *(_QWORD *)(*v6 + 8 * v872);
          v874 = v5[2237] + *v855;
          v875 = *(_QWORD *)(*v6 + 8 * v874);
          if (v873 <= v875 && v873 <= *v7)
          {
            v876 = *v1810 + 24 * v874;
            v878 = (uint64_t **)(v876 + 8);
            v877 = *(uint64_t **)(v876 + 8);
            if (v877)
            {
              while (1)
              {
                while (1)
                {
                  v879 = (uint64_t **)v877;
                  v880 = *((_DWORD *)v877 + 7);
                  if (v880 <= v872)
                    break;
                  v877 = *v879;
                  v878 = v879;
                  if (!*v879)
                    goto LABEL_844;
                }
                if (v880 >= v872)
                  break;
                v877 = v879[1];
                if (!v877)
                {
                  v878 = v879 + 1;
                  goto LABEL_844;
                }
              }
            }
            else
            {
              v879 = (uint64_t **)(v876 + 8);
LABEL_844:
              v881 = operator new(0x20uLL);
              v881[7] = v872;
              *(_QWORD *)v881 = 0;
              *((_QWORD *)v881 + 1) = 0;
              *((_QWORD *)v881 + 2) = v879;
              *v878 = (uint64_t *)v881;
              v882 = **(_QWORD **)v876;
              if (v882)
              {
                *(_QWORD *)v876 = v882;
                v883 = *v878;
              }
              else
              {
                v883 = (uint64_t *)v881;
              }
              result = sub_20E868578(*(uint64_t **)(v876 + 8), v883);
              v884 = *v1809;
              v885 = *(int32x4_t *)(*v1809 + 4 * v875);
              ++*(_QWORD *)(v876 + 16);
              v886.i64[0] = 0x600000006;
              v886.i64[1] = 0x600000006;
              *(int32x4_t *)(v884 + 4 * v875) = vaddq_s32(v885, v886);
              v855 = (unsigned int *)a2[12];
            }
          }
        }
      }
      v887 = (unsigned int *)a2[9];
      if (*((_BYTE *)v887 + 20))
      {
        if (*((_BYTE *)v855 + 20))
        {
          v888 = v5[2233] + *v887;
          v889 = *(_QWORD *)(*v6 + 8 * v888);
          v890 = v5[2237] + *v855;
          v891 = *(_QWORD *)(*v6 + 8 * v890);
          if (v889 <= v891 && v889 <= *v7)
          {
            v892 = *v1810 + 24 * v890;
            v894 = (uint64_t **)(v892 + 8);
            v893 = *(uint64_t **)(v892 + 8);
            if (v893)
            {
              while (1)
              {
                while (1)
                {
                  v895 = (uint64_t **)v893;
                  v896 = *((_DWORD *)v893 + 7);
                  if (v896 <= v888)
                    break;
                  v893 = *v895;
                  v894 = v895;
                  if (!*v895)
                    goto LABEL_859;
                }
                if (v896 >= v888)
                  break;
                v893 = v895[1];
                if (!v893)
                {
                  v894 = v895 + 1;
                  goto LABEL_859;
                }
              }
            }
            else
            {
              v895 = (uint64_t **)(v892 + 8);
LABEL_859:
              v897 = operator new(0x20uLL);
              v897[7] = v888;
              *(_QWORD *)v897 = 0;
              *((_QWORD *)v897 + 1) = 0;
              *((_QWORD *)v897 + 2) = v895;
              *v894 = (uint64_t *)v897;
              v898 = **(_QWORD **)v892;
              if (v898)
              {
                *(_QWORD *)v892 = v898;
                v899 = *v894;
              }
              else
              {
                v899 = (uint64_t *)v897;
              }
              result = sub_20E868578(*(uint64_t **)(v892 + 8), v899);
              v900 = *v1809;
              v901 = *(int32x4_t *)(*v1809 + 4 * v891);
              ++*(_QWORD *)(v892 + 16);
              v902.i64[0] = 0x600000006;
              v902.i64[1] = 0x600000006;
              *(int32x4_t *)(v900 + 4 * v891) = vaddq_s32(v901, v902);
              v855 = (unsigned int *)a2[12];
            }
          }
        }
      }
      v903 = (unsigned int *)a2[10];
      if (*((_BYTE *)v903 + 20))
      {
        if (*((_BYTE *)v855 + 20))
        {
          v904 = v5[2233] + *v903;
          v905 = *(_QWORD *)(*v6 + 8 * v904);
          v906 = v5[2237] + *v855;
          v907 = *(_QWORD *)(*v6 + 8 * v906);
          if (v905 <= v907 && v905 <= *v7)
          {
            v908 = *v1810 + 24 * v906;
            v910 = (uint64_t **)(v908 + 8);
            v909 = *(uint64_t **)(v908 + 8);
            if (v909)
            {
              while (1)
              {
                while (1)
                {
                  v911 = (uint64_t **)v909;
                  v912 = *((_DWORD *)v909 + 7);
                  if (v912 <= v904)
                    break;
                  v909 = *v911;
                  v910 = v911;
                  if (!*v911)
                    goto LABEL_874;
                }
                if (v912 >= v904)
                  break;
                v909 = v911[1];
                if (!v909)
                {
                  v910 = v911 + 1;
                  goto LABEL_874;
                }
              }
            }
            else
            {
              v911 = (uint64_t **)(v908 + 8);
LABEL_874:
              v913 = operator new(0x20uLL);
              v913[7] = v904;
              *(_QWORD *)v913 = 0;
              *((_QWORD *)v913 + 1) = 0;
              *((_QWORD *)v913 + 2) = v911;
              *v910 = (uint64_t *)v913;
              v914 = **(_QWORD **)v908;
              if (v914)
              {
                *(_QWORD *)v908 = v914;
                v915 = *v910;
              }
              else
              {
                v915 = (uint64_t *)v913;
              }
              result = sub_20E868578(*(uint64_t **)(v908 + 8), v915);
              v916 = *v1809;
              v917 = *(int32x4_t *)(*v1809 + 4 * v907);
              ++*(_QWORD *)(v908 + 16);
              v918.i64[0] = 0x600000006;
              v918.i64[1] = 0x600000006;
              *(int32x4_t *)(v916 + 4 * v907) = vaddq_s32(v917, v918);
              v855 = (unsigned int *)a2[12];
            }
          }
        }
      }
      v919 = (unsigned int *)a2[11];
      if (*((_BYTE *)v919 + 20))
      {
        if (*((_BYTE *)v855 + 20))
        {
          v920 = v5[2237];
          v921 = v920 + *v919;
          v922 = *(_QWORD *)(*v6 + 8 * v921);
          v923 = v920 + *v855;
          v924 = *(_QWORD *)(*v6 + 8 * v923);
          if (v922 <= v924 && v922 <= *v7)
          {
            v925 = *v1810 + 24 * v923;
            v927 = (uint64_t **)(v925 + 8);
            v926 = *(uint64_t **)(v925 + 8);
            if (v926)
            {
              while (1)
              {
                while (1)
                {
                  v928 = (uint64_t **)v926;
                  v929 = *((_DWORD *)v926 + 7);
                  if (v929 <= v921)
                    break;
                  v926 = *v928;
                  v927 = v928;
                  if (!*v928)
                    goto LABEL_889;
                }
                if (v929 >= v921)
                  break;
                v926 = v928[1];
                if (!v926)
                {
                  v927 = v928 + 1;
                  goto LABEL_889;
                }
              }
            }
            else
            {
              v928 = (uint64_t **)(v925 + 8);
LABEL_889:
              v930 = operator new(0x20uLL);
              v930[7] = v921;
              *(_QWORD *)v930 = 0;
              *((_QWORD *)v930 + 1) = 0;
              *((_QWORD *)v930 + 2) = v928;
              *v927 = (uint64_t *)v930;
              v931 = **(_QWORD **)v925;
              if (v931)
              {
                *(_QWORD *)v925 = v931;
                v932 = *v927;
              }
              else
              {
                v932 = (uint64_t *)v930;
              }
              result = sub_20E868578(*(uint64_t **)(v925 + 8), v932);
              v933 = *v1809;
              v934 = *(int32x4_t *)(*v1809 + 4 * v924);
              ++*(_QWORD *)(v925 + 16);
              v935.i64[0] = 0x400000004;
              v935.i64[1] = 0x400000004;
              *(int32x4_t *)(v933 + 4 * v924) = vaddq_s32(v934, v935);
              v855 = (unsigned int *)a2[12];
            }
          }
        }
      }
      if (*((_BYTE *)v855 + 20))
      {
        v936 = v5[2237] + *v855;
        v937 = *(_QWORD *)(*v6 + 8 * v936);
        if (v937 <= *v7)
        {
          v938 = *v1810 + 24 * v936;
          v940 = (uint64_t **)(v938 + 8);
          v939 = *(uint64_t **)(v938 + 8);
          if (v939)
          {
            while (1)
            {
              while (1)
              {
                v941 = (uint64_t **)v939;
                v942 = *((_DWORD *)v939 + 7);
                if (v942 <= v936)
                  break;
                v939 = *v941;
                v940 = v941;
                if (!*v941)
                  goto LABEL_902;
              }
              if (v942 >= v936)
                break;
              v939 = v941[1];
              if (!v939)
              {
                v940 = v941 + 1;
                goto LABEL_902;
              }
            }
          }
          else
          {
            v941 = (uint64_t **)(v938 + 8);
LABEL_902:
            v943 = operator new(0x20uLL);
            v943[7] = v936;
            *(_QWORD *)v943 = 0;
            *((_QWORD *)v943 + 1) = 0;
            *((_QWORD *)v943 + 2) = v941;
            *v940 = (uint64_t *)v943;
            v944 = **(_QWORD **)v938;
            if (v944)
            {
              *(_QWORD *)v938 = v944;
              v945 = *v940;
            }
            else
            {
              v945 = (uint64_t *)v943;
            }
            result = sub_20E868578(*(uint64_t **)(v938 + 8), v945);
            ++*(_QWORD *)(v938 + 16);
            v946.i64[0] = 0x400000004;
            v946.i64[1] = 0x400000004;
            *(int32x4_t *)(*v1809 + 4 * v937) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v937), v946);
          }
        }
      }
      v947 = (unsigned int *)a2[13];
      if (*((_BYTE *)v947 + 20))
      {
        v948 = (unsigned int *)a2[12];
        if (*((_BYTE *)v948 + 20))
        {
          v949 = v5[2238] + *v947;
          v950 = *(_QWORD *)(*v6 + 8 * v949);
          v951 = v5[2237] + *v948;
          v952 = *(_QWORD *)(*v6 + 8 * v951);
          if (v950 <= v952 && v950 <= *v7)
          {
            v953 = *v1810 + 24 * v951;
            v955 = (uint64_t **)(v953 + 8);
            v954 = *(uint64_t **)(v953 + 8);
            if (v954)
            {
              while (1)
              {
                while (1)
                {
                  v956 = (uint64_t **)v954;
                  v957 = *((_DWORD *)v954 + 7);
                  if (v957 <= v949)
                    break;
                  v954 = *v956;
                  v955 = v956;
                  if (!*v956)
                    goto LABEL_917;
                }
                if (v957 >= v949)
                  break;
                v954 = v956[1];
                if (!v954)
                {
                  v955 = v956 + 1;
                  goto LABEL_917;
                }
              }
            }
            else
            {
              v956 = (uint64_t **)(v953 + 8);
LABEL_917:
              v958 = operator new(0x20uLL);
              v958[7] = v949;
              *(_QWORD *)v958 = 0;
              *((_QWORD *)v958 + 1) = 0;
              *((_QWORD *)v958 + 2) = v956;
              *v955 = (uint64_t *)v958;
              v959 = **(_QWORD **)v953;
              if (v959)
              {
                *(_QWORD *)v953 = v959;
                v960 = *v955;
              }
              else
              {
                v960 = (uint64_t *)v958;
              }
              result = sub_20E868578(*(uint64_t **)(v953 + 8), v960);
              ++*(_QWORD *)(v953 + 16);
              v961.i64[0] = 0x400000004;
              v961.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v952) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v952), v961);
            }
          }
        }
      }
      v962 = (unsigned int *)a2[14];
      if (*((_BYTE *)v962 + 20))
      {
        v963 = (unsigned int *)a2[12];
        if (*((_BYTE *)v963 + 20))
        {
          v964 = v5[2238] + *v962;
          v965 = *(_QWORD *)(*v6 + 8 * v964);
          v966 = v5[2237] + *v963;
          v967 = *(_QWORD *)(*v6 + 8 * v966);
          if (v965 <= v967 && v965 <= *v7)
          {
            v968 = *v1810 + 24 * v966;
            v970 = (uint64_t **)(v968 + 8);
            v969 = *(uint64_t **)(v968 + 8);
            if (v969)
            {
              while (1)
              {
                while (1)
                {
                  v971 = (uint64_t **)v969;
                  v972 = *((_DWORD *)v969 + 7);
                  if (v972 <= v964)
                    break;
                  v969 = *v971;
                  v970 = v971;
                  if (!*v971)
                    goto LABEL_932;
                }
                if (v972 >= v964)
                  break;
                v969 = v971[1];
                if (!v969)
                {
                  v970 = v971 + 1;
                  goto LABEL_932;
                }
              }
            }
            else
            {
              v971 = (uint64_t **)(v968 + 8);
LABEL_932:
              v973 = operator new(0x20uLL);
              v973[7] = v964;
              *(_QWORD *)v973 = 0;
              *((_QWORD *)v973 + 1) = 0;
              *((_QWORD *)v973 + 2) = v971;
              *v970 = (uint64_t *)v973;
              v974 = **(_QWORD **)v968;
              if (v974)
              {
                *(_QWORD *)v968 = v974;
                v975 = *v970;
              }
              else
              {
                v975 = (uint64_t *)v973;
              }
              result = sub_20E868578(*(uint64_t **)(v968 + 8), v975);
              ++*(_QWORD *)(v968 + 16);
              v976.i64[0] = 0x400000004;
              v976.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v967) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v967), v976);
            }
          }
        }
      }
      v977 = (unsigned int *)a2[15];
      if (*((_BYTE *)v977 + 20))
      {
        v978 = (unsigned int *)a2[12];
        if (*((_BYTE *)v978 + 20))
        {
          v979 = v5[2239] + *v977;
          v980 = *(_QWORD *)(*v6 + 8 * v979);
          v981 = v5[2237] + *v978;
          v982 = *(_QWORD *)(*v6 + 8 * v981);
          if (v980 <= v982 && v980 <= *v7)
          {
            v983 = *v1810 + 24 * v981;
            v985 = (uint64_t **)(v983 + 8);
            v984 = *(uint64_t **)(v983 + 8);
            if (v984)
            {
              while (1)
              {
                while (1)
                {
                  v986 = (uint64_t **)v984;
                  v987 = *((_DWORD *)v984 + 7);
                  if (v987 <= v979)
                    break;
                  v984 = *v986;
                  v985 = v986;
                  if (!*v986)
                    goto LABEL_947;
                }
                if (v987 >= v979)
                  break;
                v984 = v986[1];
                if (!v984)
                {
                  v985 = v986 + 1;
                  goto LABEL_947;
                }
              }
            }
            else
            {
              v986 = (uint64_t **)(v983 + 8);
LABEL_947:
              v988 = operator new(0x20uLL);
              v988[7] = v979;
              *(_QWORD *)v988 = 0;
              *((_QWORD *)v988 + 1) = 0;
              *((_QWORD *)v988 + 2) = v986;
              *v985 = (uint64_t *)v988;
              v989 = **(_QWORD **)v983;
              if (v989)
              {
                *(_QWORD *)v983 = v989;
                v990 = *v985;
              }
              else
              {
                v990 = (uint64_t *)v988;
              }
              result = sub_20E868578(*(uint64_t **)(v983 + 8), v990);
              ++*(_QWORD *)(v983 + 16);
              v991.i64[0] = 0x300000003;
              v991.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v982) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v982), v991);
            }
          }
        }
      }
      v992 = (unsigned int *)a2[16];
      if (*((_BYTE *)v992 + 20))
      {
        v993 = (unsigned int *)a2[12];
        if (*((_BYTE *)v993 + 20))
        {
          v994 = v5[2239] + *v992;
          v995 = *(_QWORD *)(*v6 + 8 * v994);
          v996 = v5[2237] + *v993;
          v997 = *(_QWORD *)(*v6 + 8 * v996);
          if (v995 <= v997 && v995 <= *v7)
          {
            v998 = *v1810 + 24 * v996;
            v1000 = (uint64_t **)(v998 + 8);
            v999 = *(uint64_t **)(v998 + 8);
            if (v999)
            {
              while (1)
              {
                while (1)
                {
                  v1001 = (uint64_t **)v999;
                  v1002 = *((_DWORD *)v999 + 7);
                  if (v1002 <= v994)
                    break;
                  v999 = *v1001;
                  v1000 = v1001;
                  if (!*v1001)
                    goto LABEL_962;
                }
                if (v1002 >= v994)
                  break;
                v999 = v1001[1];
                if (!v999)
                {
                  v1000 = v1001 + 1;
                  goto LABEL_962;
                }
              }
            }
            else
            {
              v1001 = (uint64_t **)(v998 + 8);
LABEL_962:
              v1003 = operator new(0x20uLL);
              v1003[7] = v994;
              *(_QWORD *)v1003 = 0;
              *((_QWORD *)v1003 + 1) = 0;
              *((_QWORD *)v1003 + 2) = v1001;
              *v1000 = (uint64_t *)v1003;
              v1004 = **(_QWORD **)v998;
              if (v1004)
              {
                *(_QWORD *)v998 = v1004;
                v1005 = *v1000;
              }
              else
              {
                v1005 = (uint64_t *)v1003;
              }
              result = sub_20E868578(*(uint64_t **)(v998 + 8), v1005);
              ++*(_QWORD *)(v998 + 16);
              v1006.i64[0] = 0x300000003;
              v1006.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v997) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v997), v1006);
            }
          }
        }
      }
      v1007 = (unsigned int *)a2[17];
      if (*((_BYTE *)v1007 + 20))
      {
        v1008 = (unsigned int *)a2[12];
        if (*((_BYTE *)v1008 + 20))
        {
          v1009 = v5[2240] + *v1007;
          v1010 = *(_QWORD *)(*v6 + 8 * v1009);
          v1011 = v5[2237] + *v1008;
          v1012 = *(_QWORD *)(*v6 + 8 * v1011);
          if (v1010 <= v1012 && v1010 <= *v7)
          {
            v1013 = *v1810 + 24 * v1011;
            v1015 = (uint64_t **)(v1013 + 8);
            v1014 = *(uint64_t **)(v1013 + 8);
            if (v1014)
            {
              while (1)
              {
                while (1)
                {
                  v1016 = (uint64_t **)v1014;
                  v1017 = *((_DWORD *)v1014 + 7);
                  if (v1017 <= v1009)
                    break;
                  v1014 = *v1016;
                  v1015 = v1016;
                  if (!*v1016)
                    goto LABEL_977;
                }
                if (v1017 >= v1009)
                  break;
                v1014 = v1016[1];
                if (!v1014)
                {
                  v1015 = v1016 + 1;
                  goto LABEL_977;
                }
              }
            }
            else
            {
              v1016 = (uint64_t **)(v1013 + 8);
LABEL_977:
              v1018 = operator new(0x20uLL);
              v1018[7] = v1009;
              *(_QWORD *)v1018 = 0;
              *((_QWORD *)v1018 + 1) = 0;
              *((_QWORD *)v1018 + 2) = v1016;
              *v1015 = (uint64_t *)v1018;
              v1019 = **(_QWORD **)v1013;
              if (v1019)
              {
                *(_QWORD *)v1013 = v1019;
                v1020 = *v1015;
              }
              else
              {
                v1020 = (uint64_t *)v1018;
              }
              result = sub_20E868578(*(uint64_t **)(v1013 + 8), v1020);
              ++*(_QWORD *)(v1013 + 16);
              v1021.i64[0] = 0x100000001;
              v1021.i64[1] = 0x100000001;
              *(int32x4_t *)(*v1809 + 4 * v1012) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1012), v1021);
            }
          }
        }
      }
      v1022 = (unsigned int *)a2[7];
      v1023 = (unsigned int *)a2[13];
      if (*((_BYTE *)v1022 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1024 = v5[2236] + *v1022;
          v1025 = *(_QWORD *)(*v6 + 8 * v1024);
          v1026 = v5[2238] + *v1023;
          v1027 = *(_QWORD *)(*v6 + 8 * v1026);
          if (v1025 <= v1027 && v1025 <= *v7)
          {
            v1028 = *v1810 + 24 * v1026;
            v1030 = (uint64_t **)(v1028 + 8);
            v1029 = *(uint64_t **)(v1028 + 8);
            if (v1029)
            {
              while (1)
              {
                while (1)
                {
                  v1031 = (uint64_t **)v1029;
                  v1032 = *((_DWORD *)v1029 + 7);
                  if (v1032 <= v1024)
                    break;
                  v1029 = *v1031;
                  v1030 = v1031;
                  if (!*v1031)
                    goto LABEL_992;
                }
                if (v1032 >= v1024)
                  break;
                v1029 = v1031[1];
                if (!v1029)
                {
                  v1030 = v1031 + 1;
                  goto LABEL_992;
                }
              }
            }
            else
            {
              v1031 = (uint64_t **)(v1028 + 8);
LABEL_992:
              v1033 = operator new(0x20uLL);
              v1033[7] = v1024;
              *(_QWORD *)v1033 = 0;
              *((_QWORD *)v1033 + 1) = 0;
              *((_QWORD *)v1033 + 2) = v1031;
              *v1030 = (uint64_t *)v1033;
              v1034 = **(_QWORD **)v1028;
              if (v1034)
              {
                *(_QWORD *)v1028 = v1034;
                v1035 = *v1030;
              }
              else
              {
                v1035 = (uint64_t *)v1033;
              }
              result = sub_20E868578(*(uint64_t **)(v1028 + 8), v1035);
              v1036 = *v1809;
              v1037 = *(int32x4_t *)(*v1809 + 4 * v1027);
              ++*(_QWORD *)(v1028 + 16);
              v1038.i64[0] = 0x600000006;
              v1038.i64[1] = 0x600000006;
              *(int32x4_t *)(v1036 + 4 * v1027) = vaddq_s32(v1037, v1038);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      v1039 = (unsigned int *)a2[8];
      if (*((_BYTE *)v1039 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1040 = v5[2236] + *v1039;
          v1041 = *(_QWORD *)(*v6 + 8 * v1040);
          v1042 = v5[2238] + *v1023;
          v1043 = *(_QWORD *)(*v6 + 8 * v1042);
          if (v1041 <= v1043 && v1041 <= *v7)
          {
            v1044 = *v1810 + 24 * v1042;
            v1046 = (uint64_t **)(v1044 + 8);
            v1045 = *(uint64_t **)(v1044 + 8);
            if (v1045)
            {
              while (1)
              {
                while (1)
                {
                  v1047 = (uint64_t **)v1045;
                  v1048 = *((_DWORD *)v1045 + 7);
                  if (v1048 <= v1040)
                    break;
                  v1045 = *v1047;
                  v1046 = v1047;
                  if (!*v1047)
                    goto LABEL_1007;
                }
                if (v1048 >= v1040)
                  break;
                v1045 = v1047[1];
                if (!v1045)
                {
                  v1046 = v1047 + 1;
                  goto LABEL_1007;
                }
              }
            }
            else
            {
              v1047 = (uint64_t **)(v1044 + 8);
LABEL_1007:
              v1049 = operator new(0x20uLL);
              v1049[7] = v1040;
              *(_QWORD *)v1049 = 0;
              *((_QWORD *)v1049 + 1) = 0;
              *((_QWORD *)v1049 + 2) = v1047;
              *v1046 = (uint64_t *)v1049;
              v1050 = **(_QWORD **)v1044;
              if (v1050)
              {
                *(_QWORD *)v1044 = v1050;
                v1051 = *v1046;
              }
              else
              {
                v1051 = (uint64_t *)v1049;
              }
              result = sub_20E868578(*(uint64_t **)(v1044 + 8), v1051);
              v1052 = *v1809;
              v1053 = *(int32x4_t *)(*v1809 + 4 * v1043);
              ++*(_QWORD *)(v1044 + 16);
              v1054.i64[0] = 0x600000006;
              v1054.i64[1] = 0x600000006;
              *(int32x4_t *)(v1052 + 4 * v1043) = vaddq_s32(v1053, v1054);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      v1055 = (unsigned int *)a2[9];
      if (*((_BYTE *)v1055 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1056 = v5[2233] + *v1055;
          v1057 = *(_QWORD *)(*v6 + 8 * v1056);
          v1058 = v5[2238] + *v1023;
          v1059 = *(_QWORD *)(*v6 + 8 * v1058);
          if (v1057 <= v1059 && v1057 <= *v7)
          {
            v1060 = *v1810 + 24 * v1058;
            v1062 = (uint64_t **)(v1060 + 8);
            v1061 = *(uint64_t **)(v1060 + 8);
            if (v1061)
            {
              while (1)
              {
                while (1)
                {
                  v1063 = (uint64_t **)v1061;
                  v1064 = *((_DWORD *)v1061 + 7);
                  if (v1064 <= v1056)
                    break;
                  v1061 = *v1063;
                  v1062 = v1063;
                  if (!*v1063)
                    goto LABEL_1022;
                }
                if (v1064 >= v1056)
                  break;
                v1061 = v1063[1];
                if (!v1061)
                {
                  v1062 = v1063 + 1;
                  goto LABEL_1022;
                }
              }
            }
            else
            {
              v1063 = (uint64_t **)(v1060 + 8);
LABEL_1022:
              v1065 = operator new(0x20uLL);
              v1065[7] = v1056;
              *(_QWORD *)v1065 = 0;
              *((_QWORD *)v1065 + 1) = 0;
              *((_QWORD *)v1065 + 2) = v1063;
              *v1062 = (uint64_t *)v1065;
              v1066 = **(_QWORD **)v1060;
              if (v1066)
              {
                *(_QWORD *)v1060 = v1066;
                v1067 = *v1062;
              }
              else
              {
                v1067 = (uint64_t *)v1065;
              }
              result = sub_20E868578(*(uint64_t **)(v1060 + 8), v1067);
              v1068 = *v1809;
              v1069 = *(int32x4_t *)(*v1809 + 4 * v1059);
              ++*(_QWORD *)(v1060 + 16);
              v1070.i64[0] = 0x600000006;
              v1070.i64[1] = 0x600000006;
              *(int32x4_t *)(v1068 + 4 * v1059) = vaddq_s32(v1069, v1070);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      v1071 = (unsigned int *)a2[10];
      if (*((_BYTE *)v1071 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1072 = v5[2233] + *v1071;
          v1073 = *(_QWORD *)(*v6 + 8 * v1072);
          v1074 = v5[2238] + *v1023;
          v1075 = *(_QWORD *)(*v6 + 8 * v1074);
          if (v1073 <= v1075 && v1073 <= *v7)
          {
            v1076 = *v1810 + 24 * v1074;
            v1078 = (uint64_t **)(v1076 + 8);
            v1077 = *(uint64_t **)(v1076 + 8);
            if (v1077)
            {
              while (1)
              {
                while (1)
                {
                  v1079 = (uint64_t **)v1077;
                  v1080 = *((_DWORD *)v1077 + 7);
                  if (v1080 <= v1072)
                    break;
                  v1077 = *v1079;
                  v1078 = v1079;
                  if (!*v1079)
                    goto LABEL_1037;
                }
                if (v1080 >= v1072)
                  break;
                v1077 = v1079[1];
                if (!v1077)
                {
                  v1078 = v1079 + 1;
                  goto LABEL_1037;
                }
              }
            }
            else
            {
              v1079 = (uint64_t **)(v1076 + 8);
LABEL_1037:
              v1081 = operator new(0x20uLL);
              v1081[7] = v1072;
              *(_QWORD *)v1081 = 0;
              *((_QWORD *)v1081 + 1) = 0;
              *((_QWORD *)v1081 + 2) = v1079;
              *v1078 = (uint64_t *)v1081;
              v1082 = **(_QWORD **)v1076;
              if (v1082)
              {
                *(_QWORD *)v1076 = v1082;
                v1083 = *v1078;
              }
              else
              {
                v1083 = (uint64_t *)v1081;
              }
              result = sub_20E868578(*(uint64_t **)(v1076 + 8), v1083);
              v1084 = *v1809;
              v1085 = *(int32x4_t *)(*v1809 + 4 * v1075);
              ++*(_QWORD *)(v1076 + 16);
              v1086.i64[0] = 0x600000006;
              v1086.i64[1] = 0x600000006;
              *(int32x4_t *)(v1084 + 4 * v1075) = vaddq_s32(v1085, v1086);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      v1087 = (unsigned int *)a2[11];
      if (*((_BYTE *)v1087 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1088 = v5[2237] + *v1087;
          v1089 = *(_QWORD *)(*v6 + 8 * v1088);
          v1090 = v5[2238] + *v1023;
          v1091 = *(_QWORD *)(*v6 + 8 * v1090);
          if (v1089 <= v1091 && v1089 <= *v7)
          {
            v1092 = *v1810 + 24 * v1090;
            v1094 = (uint64_t **)(v1092 + 8);
            v1093 = *(uint64_t **)(v1092 + 8);
            if (v1093)
            {
              while (1)
              {
                while (1)
                {
                  v1095 = (uint64_t **)v1093;
                  v1096 = *((_DWORD *)v1093 + 7);
                  if (v1096 <= v1088)
                    break;
                  v1093 = *v1095;
                  v1094 = v1095;
                  if (!*v1095)
                    goto LABEL_1052;
                }
                if (v1096 >= v1088)
                  break;
                v1093 = v1095[1];
                if (!v1093)
                {
                  v1094 = v1095 + 1;
                  goto LABEL_1052;
                }
              }
            }
            else
            {
              v1095 = (uint64_t **)(v1092 + 8);
LABEL_1052:
              v1097 = operator new(0x20uLL);
              v1097[7] = v1088;
              *(_QWORD *)v1097 = 0;
              *((_QWORD *)v1097 + 1) = 0;
              *((_QWORD *)v1097 + 2) = v1095;
              *v1094 = (uint64_t *)v1097;
              v1098 = **(_QWORD **)v1092;
              if (v1098)
              {
                *(_QWORD *)v1092 = v1098;
                v1099 = *v1094;
              }
              else
              {
                v1099 = (uint64_t *)v1097;
              }
              result = sub_20E868578(*(uint64_t **)(v1092 + 8), v1099);
              v1100 = *v1809;
              v1101 = *(int32x4_t *)(*v1809 + 4 * v1091);
              ++*(_QWORD *)(v1092 + 16);
              v1102.i64[0] = 0x400000004;
              v1102.i64[1] = 0x400000004;
              *(int32x4_t *)(v1100 + 4 * v1091) = vaddq_s32(v1101, v1102);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      v1103 = (unsigned int *)a2[12];
      if (*((_BYTE *)v1103 + 20))
      {
        if (*((_BYTE *)v1023 + 20))
        {
          v1104 = v5[2237] + *v1103;
          v1105 = *(_QWORD *)(*v6 + 8 * v1104);
          v1106 = v5[2238] + *v1023;
          v1107 = *(_QWORD *)(*v6 + 8 * v1106);
          if (v1105 <= v1107 && v1105 <= *v7)
          {
            v1108 = *v1810 + 24 * v1106;
            v1110 = (uint64_t **)(v1108 + 8);
            v1109 = *(uint64_t **)(v1108 + 8);
            if (v1109)
            {
              while (1)
              {
                while (1)
                {
                  v1111 = (uint64_t **)v1109;
                  v1112 = *((_DWORD *)v1109 + 7);
                  if (v1112 <= v1104)
                    break;
                  v1109 = *v1111;
                  v1110 = v1111;
                  if (!*v1111)
                    goto LABEL_1067;
                }
                if (v1112 >= v1104)
                  break;
                v1109 = v1111[1];
                if (!v1109)
                {
                  v1110 = v1111 + 1;
                  goto LABEL_1067;
                }
              }
            }
            else
            {
              v1111 = (uint64_t **)(v1108 + 8);
LABEL_1067:
              v1113 = operator new(0x20uLL);
              v1113[7] = v1104;
              *(_QWORD *)v1113 = 0;
              *((_QWORD *)v1113 + 1) = 0;
              *((_QWORD *)v1113 + 2) = v1111;
              *v1110 = (uint64_t *)v1113;
              v1114 = **(_QWORD **)v1108;
              if (v1114)
              {
                *(_QWORD *)v1108 = v1114;
                v1115 = *v1110;
              }
              else
              {
                v1115 = (uint64_t *)v1113;
              }
              result = sub_20E868578(*(uint64_t **)(v1108 + 8), v1115);
              v1116 = *v1809;
              v1117 = *(int32x4_t *)(*v1809 + 4 * v1107);
              ++*(_QWORD *)(v1108 + 16);
              v1118.i64[0] = 0x400000004;
              v1118.i64[1] = 0x400000004;
              *(int32x4_t *)(v1116 + 4 * v1107) = vaddq_s32(v1117, v1118);
              v1023 = (unsigned int *)a2[13];
            }
          }
        }
      }
      if (*((_BYTE *)v1023 + 20))
      {
        v1119 = v5[2238] + *v1023;
        v1120 = *(_QWORD *)(*v6 + 8 * v1119);
        if (v1120 <= *v7)
        {
          v1121 = *v1810 + 24 * v1119;
          v1123 = (uint64_t **)(v1121 + 8);
          v1122 = *(uint64_t **)(v1121 + 8);
          if (v1122)
          {
            while (1)
            {
              while (1)
              {
                v1124 = (uint64_t **)v1122;
                v1125 = *((_DWORD *)v1122 + 7);
                if (v1125 <= v1119)
                  break;
                v1122 = *v1124;
                v1123 = v1124;
                if (!*v1124)
                  goto LABEL_1080;
              }
              if (v1125 >= v1119)
                break;
              v1122 = v1124[1];
              if (!v1122)
              {
                v1123 = v1124 + 1;
                goto LABEL_1080;
              }
            }
          }
          else
          {
            v1124 = (uint64_t **)(v1121 + 8);
LABEL_1080:
            v1126 = operator new(0x20uLL);
            v1126[7] = v1119;
            *(_QWORD *)v1126 = 0;
            *((_QWORD *)v1126 + 1) = 0;
            *((_QWORD *)v1126 + 2) = v1124;
            *v1123 = (uint64_t *)v1126;
            v1127 = **(_QWORD **)v1121;
            if (v1127)
            {
              *(_QWORD *)v1121 = v1127;
              v1128 = *v1123;
            }
            else
            {
              v1128 = (uint64_t *)v1126;
            }
            result = sub_20E868578(*(uint64_t **)(v1121 + 8), v1128);
            ++*(_QWORD *)(v1121 + 16);
            v1129.i64[0] = 0x400000004;
            v1129.i64[1] = 0x400000004;
            *(int32x4_t *)(*v1809 + 4 * v1120) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1120), v1129);
          }
        }
      }
      v1130 = (unsigned int *)a2[14];
      if (*((_BYTE *)v1130 + 20))
      {
        v1131 = (unsigned int *)a2[13];
        if (*((_BYTE *)v1131 + 20))
        {
          v1132 = v5[2238];
          v1133 = v1132 + *v1130;
          v1134 = *(_QWORD *)(*v6 + 8 * v1133);
          v1135 = v1132 + *v1131;
          v1136 = *(_QWORD *)(*v6 + 8 * v1135);
          if (v1134 <= v1136 && v1134 <= *v7)
          {
            v1137 = *v1810 + 24 * v1135;
            v1139 = (uint64_t **)(v1137 + 8);
            v1138 = *(uint64_t **)(v1137 + 8);
            if (v1138)
            {
              while (1)
              {
                while (1)
                {
                  v1140 = (uint64_t **)v1138;
                  v1141 = *((_DWORD *)v1138 + 7);
                  if (v1141 <= v1133)
                    break;
                  v1138 = *v1140;
                  v1139 = v1140;
                  if (!*v1140)
                    goto LABEL_1095;
                }
                if (v1141 >= v1133)
                  break;
                v1138 = v1140[1];
                if (!v1138)
                {
                  v1139 = v1140 + 1;
                  goto LABEL_1095;
                }
              }
            }
            else
            {
              v1140 = (uint64_t **)(v1137 + 8);
LABEL_1095:
              v1142 = operator new(0x20uLL);
              v1142[7] = v1133;
              *(_QWORD *)v1142 = 0;
              *((_QWORD *)v1142 + 1) = 0;
              *((_QWORD *)v1142 + 2) = v1140;
              *v1139 = (uint64_t *)v1142;
              v1143 = **(_QWORD **)v1137;
              if (v1143)
              {
                *(_QWORD *)v1137 = v1143;
                v1144 = *v1139;
              }
              else
              {
                v1144 = (uint64_t *)v1142;
              }
              result = sub_20E868578(*(uint64_t **)(v1137 + 8), v1144);
              ++*(_QWORD *)(v1137 + 16);
              v1145.i64[0] = 0x400000004;
              v1145.i64[1] = 0x400000004;
              *(int32x4_t *)(*v1809 + 4 * v1136) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1136), v1145);
            }
          }
        }
      }
      v1146 = (unsigned int *)a2[15];
      if (*((_BYTE *)v1146 + 20))
      {
        v1147 = (unsigned int *)a2[13];
        if (*((_BYTE *)v1147 + 20))
        {
          v1148 = v5[2239] + *v1146;
          v1149 = *(_QWORD *)(*v6 + 8 * v1148);
          v1150 = v5[2238] + *v1147;
          v1151 = *(_QWORD *)(*v6 + 8 * v1150);
          if (v1149 <= v1151 && v1149 <= *v7)
          {
            v1152 = *v1810 + 24 * v1150;
            v1154 = (uint64_t **)(v1152 + 8);
            v1153 = *(uint64_t **)(v1152 + 8);
            if (v1153)
            {
              while (1)
              {
                while (1)
                {
                  v1155 = (uint64_t **)v1153;
                  v1156 = *((_DWORD *)v1153 + 7);
                  if (v1156 <= v1148)
                    break;
                  v1153 = *v1155;
                  v1154 = v1155;
                  if (!*v1155)
                    goto LABEL_1110;
                }
                if (v1156 >= v1148)
                  break;
                v1153 = v1155[1];
                if (!v1153)
                {
                  v1154 = v1155 + 1;
                  goto LABEL_1110;
                }
              }
            }
            else
            {
              v1155 = (uint64_t **)(v1152 + 8);
LABEL_1110:
              v1157 = operator new(0x20uLL);
              v1157[7] = v1148;
              *(_QWORD *)v1157 = 0;
              *((_QWORD *)v1157 + 1) = 0;
              *((_QWORD *)v1157 + 2) = v1155;
              *v1154 = (uint64_t *)v1157;
              v1158 = **(_QWORD **)v1152;
              if (v1158)
              {
                *(_QWORD *)v1152 = v1158;
                v1159 = *v1154;
              }
              else
              {
                v1159 = (uint64_t *)v1157;
              }
              result = sub_20E868578(*(uint64_t **)(v1152 + 8), v1159);
              ++*(_QWORD *)(v1152 + 16);
              v1160.i64[0] = 0x300000003;
              v1160.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v1151) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1151), v1160);
            }
          }
        }
      }
      v1161 = (unsigned int *)a2[16];
      if (*((_BYTE *)v1161 + 20))
      {
        v1162 = (unsigned int *)a2[13];
        if (*((_BYTE *)v1162 + 20))
        {
          v1163 = v5[2239] + *v1161;
          v1164 = *(_QWORD *)(*v6 + 8 * v1163);
          v1165 = v5[2238] + *v1162;
          v1166 = *(_QWORD *)(*v6 + 8 * v1165);
          if (v1164 <= v1166 && v1164 <= *v7)
          {
            v1167 = *v1810 + 24 * v1165;
            v1169 = (uint64_t **)(v1167 + 8);
            v1168 = *(uint64_t **)(v1167 + 8);
            if (v1168)
            {
              while (1)
              {
                while (1)
                {
                  v1170 = (uint64_t **)v1168;
                  v1171 = *((_DWORD *)v1168 + 7);
                  if (v1171 <= v1163)
                    break;
                  v1168 = *v1170;
                  v1169 = v1170;
                  if (!*v1170)
                    goto LABEL_1125;
                }
                if (v1171 >= v1163)
                  break;
                v1168 = v1170[1];
                if (!v1168)
                {
                  v1169 = v1170 + 1;
                  goto LABEL_1125;
                }
              }
            }
            else
            {
              v1170 = (uint64_t **)(v1167 + 8);
LABEL_1125:
              v1172 = operator new(0x20uLL);
              v1172[7] = v1163;
              *(_QWORD *)v1172 = 0;
              *((_QWORD *)v1172 + 1) = 0;
              *((_QWORD *)v1172 + 2) = v1170;
              *v1169 = (uint64_t *)v1172;
              v1173 = **(_QWORD **)v1167;
              if (v1173)
              {
                *(_QWORD *)v1167 = v1173;
                v1174 = *v1169;
              }
              else
              {
                v1174 = (uint64_t *)v1172;
              }
              result = sub_20E868578(*(uint64_t **)(v1167 + 8), v1174);
              ++*(_QWORD *)(v1167 + 16);
              v1175.i64[0] = 0x300000003;
              v1175.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v1166) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1166), v1175);
            }
          }
        }
      }
      v1176 = (unsigned int *)a2[17];
      if (*((_BYTE *)v1176 + 20))
      {
        v1177 = (unsigned int *)a2[13];
        if (*((_BYTE *)v1177 + 20))
        {
          v1178 = v5[2240] + *v1176;
          v1179 = *(_QWORD *)(*v6 + 8 * v1178);
          v1180 = v5[2238] + *v1177;
          v1181 = *(_QWORD *)(*v6 + 8 * v1180);
          if (v1179 <= v1181 && v1179 <= *v7)
          {
            v1182 = *v1810 + 24 * v1180;
            v1184 = (uint64_t **)(v1182 + 8);
            v1183 = *(uint64_t **)(v1182 + 8);
            if (v1183)
            {
              while (1)
              {
                while (1)
                {
                  v1185 = (uint64_t **)v1183;
                  v1186 = *((_DWORD *)v1183 + 7);
                  if (v1186 <= v1178)
                    break;
                  v1183 = *v1185;
                  v1184 = v1185;
                  if (!*v1185)
                    goto LABEL_1140;
                }
                if (v1186 >= v1178)
                  break;
                v1183 = v1185[1];
                if (!v1183)
                {
                  v1184 = v1185 + 1;
                  goto LABEL_1140;
                }
              }
            }
            else
            {
              v1185 = (uint64_t **)(v1182 + 8);
LABEL_1140:
              v1187 = operator new(0x20uLL);
              v1187[7] = v1178;
              *(_QWORD *)v1187 = 0;
              *((_QWORD *)v1187 + 1) = 0;
              *((_QWORD *)v1187 + 2) = v1185;
              *v1184 = (uint64_t *)v1187;
              v1188 = **(_QWORD **)v1182;
              if (v1188)
              {
                *(_QWORD *)v1182 = v1188;
                v1189 = *v1184;
              }
              else
              {
                v1189 = (uint64_t *)v1187;
              }
              result = sub_20E868578(*(uint64_t **)(v1182 + 8), v1189);
              ++*(_QWORD *)(v1182 + 16);
              v1190.i64[0] = 0x100000001;
              v1190.i64[1] = 0x100000001;
              *(int32x4_t *)(*v1809 + 4 * v1181) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1181), v1190);
            }
          }
        }
      }
      v1191 = (unsigned int *)a2[7];
      v1192 = (unsigned int *)a2[14];
      if (*((_BYTE *)v1191 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1193 = v5[2236] + *v1191;
          v1194 = *(_QWORD *)(*v6 + 8 * v1193);
          v1195 = v5[2238] + *v1192;
          v1196 = *(_QWORD *)(*v6 + 8 * v1195);
          if (v1194 <= v1196 && v1194 <= *v7)
          {
            v1197 = *v1810 + 24 * v1195;
            v1199 = (uint64_t **)(v1197 + 8);
            v1198 = *(uint64_t **)(v1197 + 8);
            if (v1198)
            {
              while (1)
              {
                while (1)
                {
                  v1200 = (uint64_t **)v1198;
                  v1201 = *((_DWORD *)v1198 + 7);
                  if (v1201 <= v1193)
                    break;
                  v1198 = *v1200;
                  v1199 = v1200;
                  if (!*v1200)
                    goto LABEL_1155;
                }
                if (v1201 >= v1193)
                  break;
                v1198 = v1200[1];
                if (!v1198)
                {
                  v1199 = v1200 + 1;
                  goto LABEL_1155;
                }
              }
            }
            else
            {
              v1200 = (uint64_t **)(v1197 + 8);
LABEL_1155:
              v1202 = operator new(0x20uLL);
              v1202[7] = v1193;
              *(_QWORD *)v1202 = 0;
              *((_QWORD *)v1202 + 1) = 0;
              *((_QWORD *)v1202 + 2) = v1200;
              *v1199 = (uint64_t *)v1202;
              v1203 = **(_QWORD **)v1197;
              if (v1203)
              {
                *(_QWORD *)v1197 = v1203;
                v1204 = *v1199;
              }
              else
              {
                v1204 = (uint64_t *)v1202;
              }
              result = sub_20E868578(*(uint64_t **)(v1197 + 8), v1204);
              v1205 = *v1809;
              v1206 = *(int32x4_t *)(*v1809 + 4 * v1196);
              ++*(_QWORD *)(v1197 + 16);
              v1207.i64[0] = 0x600000006;
              v1207.i64[1] = 0x600000006;
              *(int32x4_t *)(v1205 + 4 * v1196) = vaddq_s32(v1206, v1207);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1208 = (unsigned int *)a2[8];
      if (*((_BYTE *)v1208 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1209 = v5[2236] + *v1208;
          v1210 = *(_QWORD *)(*v6 + 8 * v1209);
          v1211 = v5[2238] + *v1192;
          v1212 = *(_QWORD *)(*v6 + 8 * v1211);
          if (v1210 <= v1212 && v1210 <= *v7)
          {
            v1213 = *v1810 + 24 * v1211;
            v1215 = (uint64_t **)(v1213 + 8);
            v1214 = *(uint64_t **)(v1213 + 8);
            if (v1214)
            {
              while (1)
              {
                while (1)
                {
                  v1216 = (uint64_t **)v1214;
                  v1217 = *((_DWORD *)v1214 + 7);
                  if (v1217 <= v1209)
                    break;
                  v1214 = *v1216;
                  v1215 = v1216;
                  if (!*v1216)
                    goto LABEL_1170;
                }
                if (v1217 >= v1209)
                  break;
                v1214 = v1216[1];
                if (!v1214)
                {
                  v1215 = v1216 + 1;
                  goto LABEL_1170;
                }
              }
            }
            else
            {
              v1216 = (uint64_t **)(v1213 + 8);
LABEL_1170:
              v1218 = operator new(0x20uLL);
              v1218[7] = v1209;
              *(_QWORD *)v1218 = 0;
              *((_QWORD *)v1218 + 1) = 0;
              *((_QWORD *)v1218 + 2) = v1216;
              *v1215 = (uint64_t *)v1218;
              v1219 = **(_QWORD **)v1213;
              if (v1219)
              {
                *(_QWORD *)v1213 = v1219;
                v1220 = *v1215;
              }
              else
              {
                v1220 = (uint64_t *)v1218;
              }
              result = sub_20E868578(*(uint64_t **)(v1213 + 8), v1220);
              v1221 = *v1809;
              v1222 = *(int32x4_t *)(*v1809 + 4 * v1212);
              ++*(_QWORD *)(v1213 + 16);
              v1223.i64[0] = 0x600000006;
              v1223.i64[1] = 0x600000006;
              *(int32x4_t *)(v1221 + 4 * v1212) = vaddq_s32(v1222, v1223);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1224 = (unsigned int *)a2[9];
      if (*((_BYTE *)v1224 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1225 = v5[2233] + *v1224;
          v1226 = *(_QWORD *)(*v6 + 8 * v1225);
          v1227 = v5[2238] + *v1192;
          v1228 = *(_QWORD *)(*v6 + 8 * v1227);
          if (v1226 <= v1228 && v1226 <= *v7)
          {
            v1229 = *v1810 + 24 * v1227;
            v1231 = (uint64_t **)(v1229 + 8);
            v1230 = *(uint64_t **)(v1229 + 8);
            if (v1230)
            {
              while (1)
              {
                while (1)
                {
                  v1232 = (uint64_t **)v1230;
                  v1233 = *((_DWORD *)v1230 + 7);
                  if (v1233 <= v1225)
                    break;
                  v1230 = *v1232;
                  v1231 = v1232;
                  if (!*v1232)
                    goto LABEL_1185;
                }
                if (v1233 >= v1225)
                  break;
                v1230 = v1232[1];
                if (!v1230)
                {
                  v1231 = v1232 + 1;
                  goto LABEL_1185;
                }
              }
            }
            else
            {
              v1232 = (uint64_t **)(v1229 + 8);
LABEL_1185:
              v1234 = operator new(0x20uLL);
              v1234[7] = v1225;
              *(_QWORD *)v1234 = 0;
              *((_QWORD *)v1234 + 1) = 0;
              *((_QWORD *)v1234 + 2) = v1232;
              *v1231 = (uint64_t *)v1234;
              v1235 = **(_QWORD **)v1229;
              if (v1235)
              {
                *(_QWORD *)v1229 = v1235;
                v1236 = *v1231;
              }
              else
              {
                v1236 = (uint64_t *)v1234;
              }
              result = sub_20E868578(*(uint64_t **)(v1229 + 8), v1236);
              v1237 = *v1809;
              v1238 = *(int32x4_t *)(*v1809 + 4 * v1228);
              ++*(_QWORD *)(v1229 + 16);
              v1239.i64[0] = 0x600000006;
              v1239.i64[1] = 0x600000006;
              *(int32x4_t *)(v1237 + 4 * v1228) = vaddq_s32(v1238, v1239);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1240 = (unsigned int *)a2[10];
      if (*((_BYTE *)v1240 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1241 = v5[2233] + *v1240;
          v1242 = *(_QWORD *)(*v6 + 8 * v1241);
          v1243 = v5[2238] + *v1192;
          v1244 = *(_QWORD *)(*v6 + 8 * v1243);
          if (v1242 <= v1244 && v1242 <= *v7)
          {
            v1245 = *v1810 + 24 * v1243;
            v1247 = (uint64_t **)(v1245 + 8);
            v1246 = *(uint64_t **)(v1245 + 8);
            if (v1246)
            {
              while (1)
              {
                while (1)
                {
                  v1248 = (uint64_t **)v1246;
                  v1249 = *((_DWORD *)v1246 + 7);
                  if (v1249 <= v1241)
                    break;
                  v1246 = *v1248;
                  v1247 = v1248;
                  if (!*v1248)
                    goto LABEL_1200;
                }
                if (v1249 >= v1241)
                  break;
                v1246 = v1248[1];
                if (!v1246)
                {
                  v1247 = v1248 + 1;
                  goto LABEL_1200;
                }
              }
            }
            else
            {
              v1248 = (uint64_t **)(v1245 + 8);
LABEL_1200:
              v1250 = operator new(0x20uLL);
              v1250[7] = v1241;
              *(_QWORD *)v1250 = 0;
              *((_QWORD *)v1250 + 1) = 0;
              *((_QWORD *)v1250 + 2) = v1248;
              *v1247 = (uint64_t *)v1250;
              v1251 = **(_QWORD **)v1245;
              if (v1251)
              {
                *(_QWORD *)v1245 = v1251;
                v1252 = *v1247;
              }
              else
              {
                v1252 = (uint64_t *)v1250;
              }
              result = sub_20E868578(*(uint64_t **)(v1245 + 8), v1252);
              v1253 = *v1809;
              v1254 = *(int32x4_t *)(*v1809 + 4 * v1244);
              ++*(_QWORD *)(v1245 + 16);
              v1255.i64[0] = 0x600000006;
              v1255.i64[1] = 0x600000006;
              *(int32x4_t *)(v1253 + 4 * v1244) = vaddq_s32(v1254, v1255);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1256 = (unsigned int *)a2[11];
      if (*((_BYTE *)v1256 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1257 = v5[2237] + *v1256;
          v1258 = *(_QWORD *)(*v6 + 8 * v1257);
          v1259 = v5[2238] + *v1192;
          v1260 = *(_QWORD *)(*v6 + 8 * v1259);
          if (v1258 <= v1260 && v1258 <= *v7)
          {
            v1261 = *v1810 + 24 * v1259;
            v1263 = (uint64_t **)(v1261 + 8);
            v1262 = *(uint64_t **)(v1261 + 8);
            if (v1262)
            {
              while (1)
              {
                while (1)
                {
                  v1264 = (uint64_t **)v1262;
                  v1265 = *((_DWORD *)v1262 + 7);
                  if (v1265 <= v1257)
                    break;
                  v1262 = *v1264;
                  v1263 = v1264;
                  if (!*v1264)
                    goto LABEL_1215;
                }
                if (v1265 >= v1257)
                  break;
                v1262 = v1264[1];
                if (!v1262)
                {
                  v1263 = v1264 + 1;
                  goto LABEL_1215;
                }
              }
            }
            else
            {
              v1264 = (uint64_t **)(v1261 + 8);
LABEL_1215:
              v1266 = operator new(0x20uLL);
              v1266[7] = v1257;
              *(_QWORD *)v1266 = 0;
              *((_QWORD *)v1266 + 1) = 0;
              *((_QWORD *)v1266 + 2) = v1264;
              *v1263 = (uint64_t *)v1266;
              v1267 = **(_QWORD **)v1261;
              if (v1267)
              {
                *(_QWORD *)v1261 = v1267;
                v1268 = *v1263;
              }
              else
              {
                v1268 = (uint64_t *)v1266;
              }
              result = sub_20E868578(*(uint64_t **)(v1261 + 8), v1268);
              v1269 = *v1809;
              v1270 = *(int32x4_t *)(*v1809 + 4 * v1260);
              ++*(_QWORD *)(v1261 + 16);
              v1271.i64[0] = 0x400000004;
              v1271.i64[1] = 0x400000004;
              *(int32x4_t *)(v1269 + 4 * v1260) = vaddq_s32(v1270, v1271);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1272 = (unsigned int *)a2[12];
      if (*((_BYTE *)v1272 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1273 = v5[2237] + *v1272;
          v1274 = *(_QWORD *)(*v6 + 8 * v1273);
          v1275 = v5[2238] + *v1192;
          v1276 = *(_QWORD *)(*v6 + 8 * v1275);
          if (v1274 <= v1276 && v1274 <= *v7)
          {
            v1277 = *v1810 + 24 * v1275;
            v1279 = (uint64_t **)(v1277 + 8);
            v1278 = *(uint64_t **)(v1277 + 8);
            if (v1278)
            {
              while (1)
              {
                while (1)
                {
                  v1280 = (uint64_t **)v1278;
                  v1281 = *((_DWORD *)v1278 + 7);
                  if (v1281 <= v1273)
                    break;
                  v1278 = *v1280;
                  v1279 = v1280;
                  if (!*v1280)
                    goto LABEL_1230;
                }
                if (v1281 >= v1273)
                  break;
                v1278 = v1280[1];
                if (!v1278)
                {
                  v1279 = v1280 + 1;
                  goto LABEL_1230;
                }
              }
            }
            else
            {
              v1280 = (uint64_t **)(v1277 + 8);
LABEL_1230:
              v1282 = operator new(0x20uLL);
              v1282[7] = v1273;
              *(_QWORD *)v1282 = 0;
              *((_QWORD *)v1282 + 1) = 0;
              *((_QWORD *)v1282 + 2) = v1280;
              *v1279 = (uint64_t *)v1282;
              v1283 = **(_QWORD **)v1277;
              if (v1283)
              {
                *(_QWORD *)v1277 = v1283;
                v1284 = *v1279;
              }
              else
              {
                v1284 = (uint64_t *)v1282;
              }
              result = sub_20E868578(*(uint64_t **)(v1277 + 8), v1284);
              v1285 = *v1809;
              v1286 = *(int32x4_t *)(*v1809 + 4 * v1276);
              ++*(_QWORD *)(v1277 + 16);
              v1287.i64[0] = 0x400000004;
              v1287.i64[1] = 0x400000004;
              *(int32x4_t *)(v1285 + 4 * v1276) = vaddq_s32(v1286, v1287);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      v1288 = (unsigned int *)a2[13];
      if (*((_BYTE *)v1288 + 20))
      {
        if (*((_BYTE *)v1192 + 20))
        {
          v1289 = v5[2238];
          v1290 = v1289 + *v1288;
          v1291 = *(_QWORD *)(*v6 + 8 * v1290);
          v1292 = v1289 + *v1192;
          v1293 = *(_QWORD *)(*v6 + 8 * v1292);
          if (v1291 <= v1293 && v1291 <= *v7)
          {
            v1294 = *v1810 + 24 * v1292;
            v1296 = (uint64_t **)(v1294 + 8);
            v1295 = *(uint64_t **)(v1294 + 8);
            if (v1295)
            {
              while (1)
              {
                while (1)
                {
                  v1297 = (uint64_t **)v1295;
                  v1298 = *((_DWORD *)v1295 + 7);
                  if (v1298 <= v1290)
                    break;
                  v1295 = *v1297;
                  v1296 = v1297;
                  if (!*v1297)
                    goto LABEL_1245;
                }
                if (v1298 >= v1290)
                  break;
                v1295 = v1297[1];
                if (!v1295)
                {
                  v1296 = v1297 + 1;
                  goto LABEL_1245;
                }
              }
            }
            else
            {
              v1297 = (uint64_t **)(v1294 + 8);
LABEL_1245:
              v1299 = operator new(0x20uLL);
              v1299[7] = v1290;
              *(_QWORD *)v1299 = 0;
              *((_QWORD *)v1299 + 1) = 0;
              *((_QWORD *)v1299 + 2) = v1297;
              *v1296 = (uint64_t *)v1299;
              v1300 = **(_QWORD **)v1294;
              if (v1300)
              {
                *(_QWORD *)v1294 = v1300;
                v1301 = *v1296;
              }
              else
              {
                v1301 = (uint64_t *)v1299;
              }
              result = sub_20E868578(*(uint64_t **)(v1294 + 8), v1301);
              v1302 = *v1809;
              v1303 = *(int32x4_t *)(*v1809 + 4 * v1293);
              ++*(_QWORD *)(v1294 + 16);
              v1304.i64[0] = 0x400000004;
              v1304.i64[1] = 0x400000004;
              *(int32x4_t *)(v1302 + 4 * v1293) = vaddq_s32(v1303, v1304);
              v1192 = (unsigned int *)a2[14];
            }
          }
        }
      }
      if (*((_BYTE *)v1192 + 20))
      {
        v1305 = v5[2238] + *v1192;
        v1306 = *(_QWORD *)(*v6 + 8 * v1305);
        if (v1306 <= *v7)
        {
          v1307 = *v1810 + 24 * v1305;
          v1309 = (uint64_t **)(v1307 + 8);
          v1308 = *(uint64_t **)(v1307 + 8);
          if (v1308)
          {
            while (1)
            {
              while (1)
              {
                v1310 = (uint64_t **)v1308;
                v1311 = *((_DWORD *)v1308 + 7);
                if (v1311 <= v1305)
                  break;
                v1308 = *v1310;
                v1309 = v1310;
                if (!*v1310)
                  goto LABEL_1258;
              }
              if (v1311 >= v1305)
                break;
              v1308 = v1310[1];
              if (!v1308)
              {
                v1309 = v1310 + 1;
                goto LABEL_1258;
              }
            }
          }
          else
          {
            v1310 = (uint64_t **)(v1307 + 8);
LABEL_1258:
            v1312 = operator new(0x20uLL);
            v1312[7] = v1305;
            *(_QWORD *)v1312 = 0;
            *((_QWORD *)v1312 + 1) = 0;
            *((_QWORD *)v1312 + 2) = v1310;
            *v1309 = (uint64_t *)v1312;
            v1313 = **(_QWORD **)v1307;
            if (v1313)
            {
              *(_QWORD *)v1307 = v1313;
              v1314 = *v1309;
            }
            else
            {
              v1314 = (uint64_t *)v1312;
            }
            result = sub_20E868578(*(uint64_t **)(v1307 + 8), v1314);
            ++*(_QWORD *)(v1307 + 16);
            v1315.i64[0] = 0x400000004;
            v1315.i64[1] = 0x400000004;
            *(int32x4_t *)(*v1809 + 4 * v1306) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1306), v1315);
          }
        }
      }
      v1316 = (unsigned int *)a2[15];
      if (*((_BYTE *)v1316 + 20))
      {
        v1317 = (unsigned int *)a2[14];
        if (*((_BYTE *)v1317 + 20))
        {
          v1318 = v5[2239] + *v1316;
          v1319 = *(_QWORD *)(*v6 + 8 * v1318);
          v1320 = v5[2238] + *v1317;
          v1321 = *(_QWORD *)(*v6 + 8 * v1320);
          if (v1319 <= v1321 && v1319 <= *v7)
          {
            v1322 = *v1810 + 24 * v1320;
            v1324 = (uint64_t **)(v1322 + 8);
            v1323 = *(uint64_t **)(v1322 + 8);
            if (v1323)
            {
              while (1)
              {
                while (1)
                {
                  v1325 = (uint64_t **)v1323;
                  v1326 = *((_DWORD *)v1323 + 7);
                  if (v1326 <= v1318)
                    break;
                  v1323 = *v1325;
                  v1324 = v1325;
                  if (!*v1325)
                    goto LABEL_1273;
                }
                if (v1326 >= v1318)
                  break;
                v1323 = v1325[1];
                if (!v1323)
                {
                  v1324 = v1325 + 1;
                  goto LABEL_1273;
                }
              }
            }
            else
            {
              v1325 = (uint64_t **)(v1322 + 8);
LABEL_1273:
              v1327 = operator new(0x20uLL);
              v1327[7] = v1318;
              *(_QWORD *)v1327 = 0;
              *((_QWORD *)v1327 + 1) = 0;
              *((_QWORD *)v1327 + 2) = v1325;
              *v1324 = (uint64_t *)v1327;
              v1328 = **(_QWORD **)v1322;
              if (v1328)
              {
                *(_QWORD *)v1322 = v1328;
                v1329 = *v1324;
              }
              else
              {
                v1329 = (uint64_t *)v1327;
              }
              result = sub_20E868578(*(uint64_t **)(v1322 + 8), v1329);
              ++*(_QWORD *)(v1322 + 16);
              v1330.i64[0] = 0x300000003;
              v1330.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v1321) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1321), v1330);
            }
          }
        }
      }
      v1331 = (unsigned int *)a2[16];
      if (*((_BYTE *)v1331 + 20))
      {
        v1332 = (unsigned int *)a2[14];
        if (*((_BYTE *)v1332 + 20))
        {
          v1333 = v5[2239] + *v1331;
          v1334 = *(_QWORD *)(*v6 + 8 * v1333);
          v1335 = v5[2238] + *v1332;
          v1336 = *(_QWORD *)(*v6 + 8 * v1335);
          if (v1334 <= v1336 && v1334 <= *v7)
          {
            v1337 = *v1810 + 24 * v1335;
            v1339 = (uint64_t **)(v1337 + 8);
            v1338 = *(uint64_t **)(v1337 + 8);
            if (v1338)
            {
              while (1)
              {
                while (1)
                {
                  v1340 = (uint64_t **)v1338;
                  v1341 = *((_DWORD *)v1338 + 7);
                  if (v1341 <= v1333)
                    break;
                  v1338 = *v1340;
                  v1339 = v1340;
                  if (!*v1340)
                    goto LABEL_1288;
                }
                if (v1341 >= v1333)
                  break;
                v1338 = v1340[1];
                if (!v1338)
                {
                  v1339 = v1340 + 1;
                  goto LABEL_1288;
                }
              }
            }
            else
            {
              v1340 = (uint64_t **)(v1337 + 8);
LABEL_1288:
              v1342 = operator new(0x20uLL);
              v1342[7] = v1333;
              *(_QWORD *)v1342 = 0;
              *((_QWORD *)v1342 + 1) = 0;
              *((_QWORD *)v1342 + 2) = v1340;
              *v1339 = (uint64_t *)v1342;
              v1343 = **(_QWORD **)v1337;
              if (v1343)
              {
                *(_QWORD *)v1337 = v1343;
                v1344 = *v1339;
              }
              else
              {
                v1344 = (uint64_t *)v1342;
              }
              result = sub_20E868578(*(uint64_t **)(v1337 + 8), v1344);
              ++*(_QWORD *)(v1337 + 16);
              v1345.i64[0] = 0x300000003;
              v1345.i64[1] = 0x300000003;
              *(int32x4_t *)(*v1809 + 4 * v1336) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1336), v1345);
            }
          }
        }
      }
      v1346 = (unsigned int *)a2[17];
      if (*((_BYTE *)v1346 + 20))
      {
        v1347 = (unsigned int *)a2[14];
        if (*((_BYTE *)v1347 + 20))
        {
          v1348 = v5[2240] + *v1346;
          v1349 = *(_QWORD *)(*v6 + 8 * v1348);
          v1350 = v5[2238] + *v1347;
          v1351 = *(_QWORD *)(*v6 + 8 * v1350);
          if (v1349 <= v1351 && v1349 <= *v7)
          {
            v1352 = *v1810 + 24 * v1350;
            v1354 = (uint64_t **)(v1352 + 8);
            v1353 = *(uint64_t **)(v1352 + 8);
            if (v1353)
            {
              while (1)
              {
                while (1)
                {
                  v1355 = (uint64_t **)v1353;
                  v1356 = *((_DWORD *)v1353 + 7);
                  if (v1356 <= v1348)
                    break;
                  v1353 = *v1355;
                  v1354 = v1355;
                  if (!*v1355)
                    goto LABEL_1303;
                }
                if (v1356 >= v1348)
                  break;
                v1353 = v1355[1];
                if (!v1353)
                {
                  v1354 = v1355 + 1;
                  goto LABEL_1303;
                }
              }
            }
            else
            {
              v1355 = (uint64_t **)(v1352 + 8);
LABEL_1303:
              v1357 = operator new(0x20uLL);
              v1357[7] = v1348;
              *(_QWORD *)v1357 = 0;
              *((_QWORD *)v1357 + 1) = 0;
              *((_QWORD *)v1357 + 2) = v1355;
              *v1354 = (uint64_t *)v1357;
              v1358 = **(_QWORD **)v1352;
              if (v1358)
              {
                *(_QWORD *)v1352 = v1358;
                v1359 = *v1354;
              }
              else
              {
                v1359 = (uint64_t *)v1357;
              }
              result = sub_20E868578(*(uint64_t **)(v1352 + 8), v1359);
              ++*(_QWORD *)(v1352 + 16);
              v1360.i64[0] = 0x100000001;
              v1360.i64[1] = 0x100000001;
              *(int32x4_t *)(*v1809 + 4 * v1351) = vaddq_s32(*(int32x4_t *)(*v1809 + 4 * v1351), v1360);
            }
          }
        }
      }
      v1361 = (unsigned int *)a2[7];
      v1362 = (unsigned int *)a2[15];
      if (*((_BYTE *)v1361 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1363 = v5[2236] + *v1361;
          v1364 = *(_QWORD *)(*v6 + 8 * v1363);
          v1365 = v5[2239] + *v1362;
          v1366 = *(_QWORD *)(*v6 + 8 * v1365);
          if (v1364 <= v1366 && v1364 <= *v7)
          {
            v1367 = *v1810 + 24 * v1365;
            v1369 = (uint64_t **)(v1367 + 8);
            v1368 = *(uint64_t **)(v1367 + 8);
            if (v1368)
            {
              while (1)
              {
                while (1)
                {
                  v1370 = (uint64_t **)v1368;
                  v1371 = *((_DWORD *)v1368 + 7);
                  if (v1371 <= v1363)
                    break;
                  v1368 = *v1370;
                  v1369 = v1370;
                  if (!*v1370)
                    goto LABEL_1318;
                }
                if (v1371 >= v1363)
                  break;
                v1368 = v1370[1];
                if (!v1368)
                {
                  v1369 = v1370 + 1;
                  goto LABEL_1318;
                }
              }
            }
            else
            {
              v1370 = (uint64_t **)(v1367 + 8);
LABEL_1318:
              v1372 = operator new(0x20uLL);
              v1372[7] = v1363;
              *(_QWORD *)v1372 = 0;
              *((_QWORD *)v1372 + 1) = 0;
              *((_QWORD *)v1372 + 2) = v1370;
              *v1369 = (uint64_t *)v1372;
              v1373 = **(_QWORD **)v1367;
              if (v1373)
              {
                *(_QWORD *)v1367 = v1373;
                v1374 = *v1369;
              }
              else
              {
                v1374 = (uint64_t *)v1372;
              }
              result = sub_20E868578(*(uint64_t **)(v1367 + 8), v1374);
              ++*(_QWORD *)(v1367 + 16);
              v1375 = (int32x2_t *)(*v1809 + 4 * v1366);
              *v1375 = vadd_s32(*v1375, (int32x2_t)0x600000006);
              v1375[1].i32[0] += 6;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1376 = (unsigned int *)a2[8];
      if (*((_BYTE *)v1376 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1377 = v5[2236] + *v1376;
          v1378 = *(_QWORD *)(*v6 + 8 * v1377);
          v1379 = v5[2239] + *v1362;
          v1380 = *(_QWORD *)(*v6 + 8 * v1379);
          if (v1378 <= v1380 && v1378 <= *v7)
          {
            v1381 = *v1810 + 24 * v1379;
            v1383 = (uint64_t **)(v1381 + 8);
            v1382 = *(uint64_t **)(v1381 + 8);
            if (v1382)
            {
              while (1)
              {
                while (1)
                {
                  v1384 = (uint64_t **)v1382;
                  v1385 = *((_DWORD *)v1382 + 7);
                  if (v1385 <= v1377)
                    break;
                  v1382 = *v1384;
                  v1383 = v1384;
                  if (!*v1384)
                    goto LABEL_1333;
                }
                if (v1385 >= v1377)
                  break;
                v1382 = v1384[1];
                if (!v1382)
                {
                  v1383 = v1384 + 1;
                  goto LABEL_1333;
                }
              }
            }
            else
            {
              v1384 = (uint64_t **)(v1381 + 8);
LABEL_1333:
              v1386 = operator new(0x20uLL);
              v1386[7] = v1377;
              *(_QWORD *)v1386 = 0;
              *((_QWORD *)v1386 + 1) = 0;
              *((_QWORD *)v1386 + 2) = v1384;
              *v1383 = (uint64_t *)v1386;
              v1387 = **(_QWORD **)v1381;
              if (v1387)
              {
                *(_QWORD *)v1381 = v1387;
                v1388 = *v1383;
              }
              else
              {
                v1388 = (uint64_t *)v1386;
              }
              result = sub_20E868578(*(uint64_t **)(v1381 + 8), v1388);
              ++*(_QWORD *)(v1381 + 16);
              v1389 = (int32x2_t *)(*v1809 + 4 * v1380);
              *v1389 = vadd_s32(*v1389, (int32x2_t)0x600000006);
              v1389[1].i32[0] += 6;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1390 = (unsigned int *)a2[9];
      if (*((_BYTE *)v1390 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1391 = v5[2233] + *v1390;
          v1392 = *(_QWORD *)(*v6 + 8 * v1391);
          v1393 = v5[2239] + *v1362;
          v1394 = *(_QWORD *)(*v6 + 8 * v1393);
          if (v1392 <= v1394 && v1392 <= *v7)
          {
            v1395 = *v1810 + 24 * v1393;
            v1397 = (uint64_t **)(v1395 + 8);
            v1396 = *(uint64_t **)(v1395 + 8);
            if (v1396)
            {
              while (1)
              {
                while (1)
                {
                  v1398 = (uint64_t **)v1396;
                  v1399 = *((_DWORD *)v1396 + 7);
                  if (v1399 <= v1391)
                    break;
                  v1396 = *v1398;
                  v1397 = v1398;
                  if (!*v1398)
                    goto LABEL_1348;
                }
                if (v1399 >= v1391)
                  break;
                v1396 = v1398[1];
                if (!v1396)
                {
                  v1397 = v1398 + 1;
                  goto LABEL_1348;
                }
              }
            }
            else
            {
              v1398 = (uint64_t **)(v1395 + 8);
LABEL_1348:
              v1400 = operator new(0x20uLL);
              v1400[7] = v1391;
              *(_QWORD *)v1400 = 0;
              *((_QWORD *)v1400 + 1) = 0;
              *((_QWORD *)v1400 + 2) = v1398;
              *v1397 = (uint64_t *)v1400;
              v1401 = **(_QWORD **)v1395;
              if (v1401)
              {
                *(_QWORD *)v1395 = v1401;
                v1402 = *v1397;
              }
              else
              {
                v1402 = (uint64_t *)v1400;
              }
              result = sub_20E868578(*(uint64_t **)(v1395 + 8), v1402);
              ++*(_QWORD *)(v1395 + 16);
              v1403 = (int32x2_t *)(*v1809 + 4 * v1394);
              *v1403 = vadd_s32(*v1403, (int32x2_t)0x600000006);
              v1403[1].i32[0] += 6;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1404 = (unsigned int *)a2[10];
      if (*((_BYTE *)v1404 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1405 = v5[2233] + *v1404;
          v1406 = *(_QWORD *)(*v6 + 8 * v1405);
          v1407 = v5[2239] + *v1362;
          v1408 = *(_QWORD *)(*v6 + 8 * v1407);
          if (v1406 <= v1408 && v1406 <= *v7)
          {
            v1409 = *v1810 + 24 * v1407;
            v1411 = (uint64_t **)(v1409 + 8);
            v1410 = *(uint64_t **)(v1409 + 8);
            if (v1410)
            {
              while (1)
              {
                while (1)
                {
                  v1412 = (uint64_t **)v1410;
                  v1413 = *((_DWORD *)v1410 + 7);
                  if (v1413 <= v1405)
                    break;
                  v1410 = *v1412;
                  v1411 = v1412;
                  if (!*v1412)
                    goto LABEL_1363;
                }
                if (v1413 >= v1405)
                  break;
                v1410 = v1412[1];
                if (!v1410)
                {
                  v1411 = v1412 + 1;
                  goto LABEL_1363;
                }
              }
            }
            else
            {
              v1412 = (uint64_t **)(v1409 + 8);
LABEL_1363:
              v1414 = operator new(0x20uLL);
              v1414[7] = v1405;
              *(_QWORD *)v1414 = 0;
              *((_QWORD *)v1414 + 1) = 0;
              *((_QWORD *)v1414 + 2) = v1412;
              *v1411 = (uint64_t *)v1414;
              v1415 = **(_QWORD **)v1409;
              if (v1415)
              {
                *(_QWORD *)v1409 = v1415;
                v1416 = *v1411;
              }
              else
              {
                v1416 = (uint64_t *)v1414;
              }
              result = sub_20E868578(*(uint64_t **)(v1409 + 8), v1416);
              ++*(_QWORD *)(v1409 + 16);
              v1417 = (int32x2_t *)(*v1809 + 4 * v1408);
              *v1417 = vadd_s32(*v1417, (int32x2_t)0x600000006);
              v1417[1].i32[0] += 6;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1418 = (unsigned int *)a2[11];
      if (*((_BYTE *)v1418 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1419 = v5[2237] + *v1418;
          v1420 = *(_QWORD *)(*v6 + 8 * v1419);
          v1421 = v5[2239] + *v1362;
          v1422 = *(_QWORD *)(*v6 + 8 * v1421);
          if (v1420 <= v1422 && v1420 <= *v7)
          {
            v1423 = *v1810 + 24 * v1421;
            v1425 = (uint64_t **)(v1423 + 8);
            v1424 = *(uint64_t **)(v1423 + 8);
            if (v1424)
            {
              while (1)
              {
                while (1)
                {
                  v1426 = (uint64_t **)v1424;
                  v1427 = *((_DWORD *)v1424 + 7);
                  if (v1427 <= v1419)
                    break;
                  v1424 = *v1426;
                  v1425 = v1426;
                  if (!*v1426)
                    goto LABEL_1378;
                }
                if (v1427 >= v1419)
                  break;
                v1424 = v1426[1];
                if (!v1424)
                {
                  v1425 = v1426 + 1;
                  goto LABEL_1378;
                }
              }
            }
            else
            {
              v1426 = (uint64_t **)(v1423 + 8);
LABEL_1378:
              v1428 = operator new(0x20uLL);
              v1428[7] = v1419;
              *(_QWORD *)v1428 = 0;
              *((_QWORD *)v1428 + 1) = 0;
              *((_QWORD *)v1428 + 2) = v1426;
              *v1425 = (uint64_t *)v1428;
              v1429 = **(_QWORD **)v1423;
              if (v1429)
              {
                *(_QWORD *)v1423 = v1429;
                v1430 = *v1425;
              }
              else
              {
                v1430 = (uint64_t *)v1428;
              }
              result = sub_20E868578(*(uint64_t **)(v1423 + 8), v1430);
              ++*(_QWORD *)(v1423 + 16);
              v1431 = (int32x2_t *)(*v1809 + 4 * v1422);
              *v1431 = vadd_s32(*v1431, (int32x2_t)0x400000004);
              v1431[1].i32[0] += 4;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1432 = (unsigned int *)a2[12];
      if (*((_BYTE *)v1432 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1433 = v5[2237] + *v1432;
          v1434 = *(_QWORD *)(*v6 + 8 * v1433);
          v1435 = v5[2239] + *v1362;
          v1436 = *(_QWORD *)(*v6 + 8 * v1435);
          if (v1434 <= v1436 && v1434 <= *v7)
          {
            v1437 = *v1810 + 24 * v1435;
            v1439 = (uint64_t **)(v1437 + 8);
            v1438 = *(uint64_t **)(v1437 + 8);
            if (v1438)
            {
              while (1)
              {
                while (1)
                {
                  v1440 = (uint64_t **)v1438;
                  v1441 = *((_DWORD *)v1438 + 7);
                  if (v1441 <= v1433)
                    break;
                  v1438 = *v1440;
                  v1439 = v1440;
                  if (!*v1440)
                    goto LABEL_1393;
                }
                if (v1441 >= v1433)
                  break;
                v1438 = v1440[1];
                if (!v1438)
                {
                  v1439 = v1440 + 1;
                  goto LABEL_1393;
                }
              }
            }
            else
            {
              v1440 = (uint64_t **)(v1437 + 8);
LABEL_1393:
              v1442 = operator new(0x20uLL);
              v1442[7] = v1433;
              *(_QWORD *)v1442 = 0;
              *((_QWORD *)v1442 + 1) = 0;
              *((_QWORD *)v1442 + 2) = v1440;
              *v1439 = (uint64_t *)v1442;
              v1443 = **(_QWORD **)v1437;
              if (v1443)
              {
                *(_QWORD *)v1437 = v1443;
                v1444 = *v1439;
              }
              else
              {
                v1444 = (uint64_t *)v1442;
              }
              result = sub_20E868578(*(uint64_t **)(v1437 + 8), v1444);
              ++*(_QWORD *)(v1437 + 16);
              v1445 = (int32x2_t *)(*v1809 + 4 * v1436);
              *v1445 = vadd_s32(*v1445, (int32x2_t)0x400000004);
              v1445[1].i32[0] += 4;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1446 = (unsigned int *)a2[13];
      if (*((_BYTE *)v1446 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1447 = v5[2238] + *v1446;
          v1448 = *(_QWORD *)(*v6 + 8 * v1447);
          v1449 = v5[2239] + *v1362;
          v1450 = *(_QWORD *)(*v6 + 8 * v1449);
          if (v1448 <= v1450 && v1448 <= *v7)
          {
            v1451 = *v1810 + 24 * v1449;
            v1453 = (uint64_t **)(v1451 + 8);
            v1452 = *(uint64_t **)(v1451 + 8);
            if (v1452)
            {
              while (1)
              {
                while (1)
                {
                  v1454 = (uint64_t **)v1452;
                  v1455 = *((_DWORD *)v1452 + 7);
                  if (v1455 <= v1447)
                    break;
                  v1452 = *v1454;
                  v1453 = v1454;
                  if (!*v1454)
                    goto LABEL_1408;
                }
                if (v1455 >= v1447)
                  break;
                v1452 = v1454[1];
                if (!v1452)
                {
                  v1453 = v1454 + 1;
                  goto LABEL_1408;
                }
              }
            }
            else
            {
              v1454 = (uint64_t **)(v1451 + 8);
LABEL_1408:
              v1456 = operator new(0x20uLL);
              v1456[7] = v1447;
              *(_QWORD *)v1456 = 0;
              *((_QWORD *)v1456 + 1) = 0;
              *((_QWORD *)v1456 + 2) = v1454;
              *v1453 = (uint64_t *)v1456;
              v1457 = **(_QWORD **)v1451;
              if (v1457)
              {
                *(_QWORD *)v1451 = v1457;
                v1458 = *v1453;
              }
              else
              {
                v1458 = (uint64_t *)v1456;
              }
              result = sub_20E868578(*(uint64_t **)(v1451 + 8), v1458);
              ++*(_QWORD *)(v1451 + 16);
              v1459 = (int32x2_t *)(*v1809 + 4 * v1450);
              *v1459 = vadd_s32(*v1459, (int32x2_t)0x400000004);
              v1459[1].i32[0] += 4;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      v1460 = (unsigned int *)a2[14];
      if (*((_BYTE *)v1460 + 20))
      {
        if (*((_BYTE *)v1362 + 20))
        {
          v1461 = v5[2238] + *v1460;
          v1462 = *(_QWORD *)(*v6 + 8 * v1461);
          v1463 = v5[2239] + *v1362;
          v1464 = *(_QWORD *)(*v6 + 8 * v1463);
          if (v1462 <= v1464 && v1462 <= *v7)
          {
            v1465 = *v1810 + 24 * v1463;
            v1467 = (uint64_t **)(v1465 + 8);
            v1466 = *(uint64_t **)(v1465 + 8);
            if (v1466)
            {
              while (1)
              {
                while (1)
                {
                  v1468 = (uint64_t **)v1466;
                  v1469 = *((_DWORD *)v1466 + 7);
                  if (v1469 <= v1461)
                    break;
                  v1466 = *v1468;
                  v1467 = v1468;
                  if (!*v1468)
                    goto LABEL_1423;
                }
                if (v1469 >= v1461)
                  break;
                v1466 = v1468[1];
                if (!v1466)
                {
                  v1467 = v1468 + 1;
                  goto LABEL_1423;
                }
              }
            }
            else
            {
              v1468 = (uint64_t **)(v1465 + 8);
LABEL_1423:
              v1470 = operator new(0x20uLL);
              v1470[7] = v1461;
              *(_QWORD *)v1470 = 0;
              *((_QWORD *)v1470 + 1) = 0;
              *((_QWORD *)v1470 + 2) = v1468;
              *v1467 = (uint64_t *)v1470;
              v1471 = **(_QWORD **)v1465;
              if (v1471)
              {
                *(_QWORD *)v1465 = v1471;
                v1472 = *v1467;
              }
              else
              {
                v1472 = (uint64_t *)v1470;
              }
              result = sub_20E868578(*(uint64_t **)(v1465 + 8), v1472);
              ++*(_QWORD *)(v1465 + 16);
              v1473 = (int32x2_t *)(*v1809 + 4 * v1464);
              *v1473 = vadd_s32(*v1473, (int32x2_t)0x400000004);
              v1473[1].i32[0] += 4;
              v1362 = (unsigned int *)a2[15];
            }
          }
        }
      }
      if (*((_BYTE *)v1362 + 20))
      {
        v1474 = v5[2239] + *v1362;
        v1475 = *(_QWORD *)(*v6 + 8 * v1474);
        if (v1475 <= *v7)
        {
          v1476 = *v1810 + 24 * v1474;
          v1478 = (uint64_t **)(v1476 + 8);
          v1477 = *(uint64_t **)(v1476 + 8);
          if (v1477)
          {
            while (1)
            {
              while (1)
              {
                v1479 = (uint64_t **)v1477;
                v1480 = *((_DWORD *)v1477 + 7);
                if (v1480 <= v1474)
                  break;
                v1477 = *v1479;
                v1478 = v1479;
                if (!*v1479)
                  goto LABEL_1436;
              }
              if (v1480 >= v1474)
                break;
              v1477 = v1479[1];
              if (!v1477)
              {
                v1478 = v1479 + 1;
                goto LABEL_1436;
              }
            }
          }
          else
          {
            v1479 = (uint64_t **)(v1476 + 8);
LABEL_1436:
            v1481 = operator new(0x20uLL);
            v1481[7] = v1474;
            *(_QWORD *)v1481 = 0;
            *((_QWORD *)v1481 + 1) = 0;
            *((_QWORD *)v1481 + 2) = v1479;
            *v1478 = (uint64_t *)v1481;
            v1482 = **(_QWORD **)v1476;
            if (v1482)
            {
              *(_QWORD *)v1476 = v1482;
              v1483 = *v1478;
            }
            else
            {
              v1483 = (uint64_t *)v1481;
            }
            result = sub_20E868578(*(uint64_t **)(v1476 + 8), v1483);
            ++*(_QWORD *)(v1476 + 16);
            v1484 = (int32x2_t *)(*v1809 + 4 * v1475);
            *v1484 = vadd_s32(*v1484, (int32x2_t)0x300000003);
            v1484[1].i32[0] += 3;
          }
        }
      }
      v1485 = (unsigned int *)a2[16];
      if (*((_BYTE *)v1485 + 20))
      {
        v1486 = (unsigned int *)a2[15];
        if (*((_BYTE *)v1486 + 20))
        {
          v1487 = v5[2239];
          v1488 = v1487 + *v1485;
          v1489 = *(_QWORD *)(*v6 + 8 * v1488);
          v1490 = v1487 + *v1486;
          v1491 = *(_QWORD *)(*v6 + 8 * v1490);
          if (v1489 <= v1491 && v1489 <= *v7)
          {
            v1492 = *v1810 + 24 * v1490;
            v1494 = (uint64_t **)(v1492 + 8);
            v1493 = *(uint64_t **)(v1492 + 8);
            if (v1493)
            {
              while (1)
              {
                while (1)
                {
                  v1495 = (uint64_t **)v1493;
                  v1496 = *((_DWORD *)v1493 + 7);
                  if (v1496 <= v1488)
                    break;
                  v1493 = *v1495;
                  v1494 = v1495;
                  if (!*v1495)
                    goto LABEL_1451;
                }
                if (v1496 >= v1488)
                  break;
                v1493 = v1495[1];
                if (!v1493)
                {
                  v1494 = v1495 + 1;
                  goto LABEL_1451;
                }
              }
            }
            else
            {
              v1495 = (uint64_t **)(v1492 + 8);
LABEL_1451:
              v1497 = operator new(0x20uLL);
              v1497[7] = v1488;
              *(_QWORD *)v1497 = 0;
              *((_QWORD *)v1497 + 1) = 0;
              *((_QWORD *)v1497 + 2) = v1495;
              *v1494 = (uint64_t *)v1497;
              v1498 = **(_QWORD **)v1492;
              if (v1498)
              {
                *(_QWORD *)v1492 = v1498;
                v1499 = *v1494;
              }
              else
              {
                v1499 = (uint64_t *)v1497;
              }
              result = sub_20E868578(*(uint64_t **)(v1492 + 8), v1499);
              ++*(_QWORD *)(v1492 + 16);
              v1500 = (int32x2_t *)(*v1809 + 4 * v1491);
              *v1500 = vadd_s32(*v1500, (int32x2_t)0x300000003);
              v1500[1].i32[0] += 3;
            }
          }
        }
      }
      v1501 = (unsigned int *)a2[17];
      if (*((_BYTE *)v1501 + 20))
      {
        v1502 = (unsigned int *)a2[15];
        if (*((_BYTE *)v1502 + 20))
        {
          v1503 = v5[2240] + *v1501;
          v1504 = *(_QWORD *)(*v6 + 8 * v1503);
          v1505 = v5[2239] + *v1502;
          v1506 = *(_QWORD *)(*v6 + 8 * v1505);
          if (v1504 <= v1506 && v1504 <= *v7)
          {
            v1507 = *v1810 + 24 * v1505;
            v1509 = (uint64_t **)(v1507 + 8);
            v1508 = *(uint64_t **)(v1507 + 8);
            if (v1508)
            {
              while (1)
              {
                while (1)
                {
                  v1510 = (uint64_t **)v1508;
                  v1511 = *((_DWORD *)v1508 + 7);
                  if (v1511 <= v1503)
                    break;
                  v1508 = *v1510;
                  v1509 = v1510;
                  if (!*v1510)
                    goto LABEL_1466;
                }
                if (v1511 >= v1503)
                  break;
                v1508 = v1510[1];
                if (!v1508)
                {
                  v1509 = v1510 + 1;
                  goto LABEL_1466;
                }
              }
            }
            else
            {
              v1510 = (uint64_t **)(v1507 + 8);
LABEL_1466:
              v1512 = operator new(0x20uLL);
              v1512[7] = v1503;
              *(_QWORD *)v1512 = 0;
              *((_QWORD *)v1512 + 1) = 0;
              *((_QWORD *)v1512 + 2) = v1510;
              *v1509 = (uint64_t *)v1512;
              v1513 = **(_QWORD **)v1507;
              if (v1513)
              {
                *(_QWORD *)v1507 = v1513;
                v1514 = *v1509;
              }
              else
              {
                v1514 = (uint64_t *)v1512;
              }
              result = sub_20E868578(*(uint64_t **)(v1507 + 8), v1514);
              ++*(_QWORD *)(v1507 + 16);
              v1515 = (int32x2_t *)(*v1809 + 4 * v1506);
              *v1515 = vadd_s32(*v1515, (int32x2_t)0x100000001);
              ++v1515[1].i32[0];
            }
          }
        }
      }
      v1516 = (unsigned int *)a2[7];
      v1517 = (unsigned int *)a2[16];
      if (*((_BYTE *)v1516 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1518 = v5[2236] + *v1516;
          v1519 = *(_QWORD *)(*v6 + 8 * v1518);
          v1520 = v5[2239] + *v1517;
          v1521 = *(_QWORD *)(*v6 + 8 * v1520);
          if (v1519 <= v1521 && v1519 <= *v7)
          {
            v1522 = *v1810 + 24 * v1520;
            v1524 = (uint64_t **)(v1522 + 8);
            v1523 = *(uint64_t **)(v1522 + 8);
            if (v1523)
            {
              while (1)
              {
                while (1)
                {
                  v1525 = (uint64_t **)v1523;
                  v1526 = *((_DWORD *)v1523 + 7);
                  if (v1526 <= v1518)
                    break;
                  v1523 = *v1525;
                  v1524 = v1525;
                  if (!*v1525)
                    goto LABEL_1481;
                }
                if (v1526 >= v1518)
                  break;
                v1523 = v1525[1];
                if (!v1523)
                {
                  v1524 = v1525 + 1;
                  goto LABEL_1481;
                }
              }
            }
            else
            {
              v1525 = (uint64_t **)(v1522 + 8);
LABEL_1481:
              v1527 = operator new(0x20uLL);
              v1527[7] = v1518;
              *(_QWORD *)v1527 = 0;
              *((_QWORD *)v1527 + 1) = 0;
              *((_QWORD *)v1527 + 2) = v1525;
              *v1524 = (uint64_t *)v1527;
              v1528 = **(_QWORD **)v1522;
              if (v1528)
              {
                *(_QWORD *)v1522 = v1528;
                v1529 = *v1524;
              }
              else
              {
                v1529 = (uint64_t *)v1527;
              }
              result = sub_20E868578(*(uint64_t **)(v1522 + 8), v1529);
              ++*(_QWORD *)(v1522 + 16);
              v1530 = (int32x2_t *)(*v1809 + 4 * v1521);
              *v1530 = vadd_s32(*v1530, (int32x2_t)0x600000006);
              v1530[1].i32[0] += 6;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1531 = (unsigned int *)a2[8];
      if (*((_BYTE *)v1531 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1532 = v5[2236] + *v1531;
          v1533 = *(_QWORD *)(*v6 + 8 * v1532);
          v1534 = v5[2239] + *v1517;
          v1535 = *(_QWORD *)(*v6 + 8 * v1534);
          if (v1533 <= v1535 && v1533 <= *v7)
          {
            v1536 = *v1810 + 24 * v1534;
            v1538 = (uint64_t **)(v1536 + 8);
            v1537 = *(uint64_t **)(v1536 + 8);
            if (v1537)
            {
              while (1)
              {
                while (1)
                {
                  v1539 = (uint64_t **)v1537;
                  v1540 = *((_DWORD *)v1537 + 7);
                  if (v1540 <= v1532)
                    break;
                  v1537 = *v1539;
                  v1538 = v1539;
                  if (!*v1539)
                    goto LABEL_1496;
                }
                if (v1540 >= v1532)
                  break;
                v1537 = v1539[1];
                if (!v1537)
                {
                  v1538 = v1539 + 1;
                  goto LABEL_1496;
                }
              }
            }
            else
            {
              v1539 = (uint64_t **)(v1536 + 8);
LABEL_1496:
              v1541 = operator new(0x20uLL);
              v1541[7] = v1532;
              *(_QWORD *)v1541 = 0;
              *((_QWORD *)v1541 + 1) = 0;
              *((_QWORD *)v1541 + 2) = v1539;
              *v1538 = (uint64_t *)v1541;
              v1542 = **(_QWORD **)v1536;
              if (v1542)
              {
                *(_QWORD *)v1536 = v1542;
                v1543 = *v1538;
              }
              else
              {
                v1543 = (uint64_t *)v1541;
              }
              result = sub_20E868578(*(uint64_t **)(v1536 + 8), v1543);
              ++*(_QWORD *)(v1536 + 16);
              v1544 = (int32x2_t *)(*v1809 + 4 * v1535);
              *v1544 = vadd_s32(*v1544, (int32x2_t)0x600000006);
              v1544[1].i32[0] += 6;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1545 = (unsigned int *)a2[9];
      if (*((_BYTE *)v1545 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1546 = v5[2233] + *v1545;
          v1547 = *(_QWORD *)(*v6 + 8 * v1546);
          v1548 = v5[2239] + *v1517;
          v1549 = *(_QWORD *)(*v6 + 8 * v1548);
          if (v1547 <= v1549 && v1547 <= *v7)
          {
            v1550 = *v1810 + 24 * v1548;
            v1552 = (uint64_t **)(v1550 + 8);
            v1551 = *(uint64_t **)(v1550 + 8);
            if (v1551)
            {
              while (1)
              {
                while (1)
                {
                  v1553 = (uint64_t **)v1551;
                  v1554 = *((_DWORD *)v1551 + 7);
                  if (v1554 <= v1546)
                    break;
                  v1551 = *v1553;
                  v1552 = v1553;
                  if (!*v1553)
                    goto LABEL_1511;
                }
                if (v1554 >= v1546)
                  break;
                v1551 = v1553[1];
                if (!v1551)
                {
                  v1552 = v1553 + 1;
                  goto LABEL_1511;
                }
              }
            }
            else
            {
              v1553 = (uint64_t **)(v1550 + 8);
LABEL_1511:
              v1555 = operator new(0x20uLL);
              v1555[7] = v1546;
              *(_QWORD *)v1555 = 0;
              *((_QWORD *)v1555 + 1) = 0;
              *((_QWORD *)v1555 + 2) = v1553;
              *v1552 = (uint64_t *)v1555;
              v1556 = **(_QWORD **)v1550;
              if (v1556)
              {
                *(_QWORD *)v1550 = v1556;
                v1557 = *v1552;
              }
              else
              {
                v1557 = (uint64_t *)v1555;
              }
              result = sub_20E868578(*(uint64_t **)(v1550 + 8), v1557);
              ++*(_QWORD *)(v1550 + 16);
              v1558 = (int32x2_t *)(*v1809 + 4 * v1549);
              *v1558 = vadd_s32(*v1558, (int32x2_t)0x600000006);
              v1558[1].i32[0] += 6;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1559 = (unsigned int *)a2[10];
      if (*((_BYTE *)v1559 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1560 = v5[2233] + *v1559;
          v1561 = *(_QWORD *)(*v6 + 8 * v1560);
          v1562 = v5[2239] + *v1517;
          v1563 = *(_QWORD *)(*v6 + 8 * v1562);
          if (v1561 <= v1563 && v1561 <= *v7)
          {
            v1564 = *v1810 + 24 * v1562;
            v1566 = (uint64_t **)(v1564 + 8);
            v1565 = *(uint64_t **)(v1564 + 8);
            if (v1565)
            {
              while (1)
              {
                while (1)
                {
                  v1567 = (uint64_t **)v1565;
                  v1568 = *((_DWORD *)v1565 + 7);
                  if (v1568 <= v1560)
                    break;
                  v1565 = *v1567;
                  v1566 = v1567;
                  if (!*v1567)
                    goto LABEL_1526;
                }
                if (v1568 >= v1560)
                  break;
                v1565 = v1567[1];
                if (!v1565)
                {
                  v1566 = v1567 + 1;
                  goto LABEL_1526;
                }
              }
            }
            else
            {
              v1567 = (uint64_t **)(v1564 + 8);
LABEL_1526:
              v1569 = operator new(0x20uLL);
              v1569[7] = v1560;
              *(_QWORD *)v1569 = 0;
              *((_QWORD *)v1569 + 1) = 0;
              *((_QWORD *)v1569 + 2) = v1567;
              *v1566 = (uint64_t *)v1569;
              v1570 = **(_QWORD **)v1564;
              if (v1570)
              {
                *(_QWORD *)v1564 = v1570;
                v1571 = *v1566;
              }
              else
              {
                v1571 = (uint64_t *)v1569;
              }
              result = sub_20E868578(*(uint64_t **)(v1564 + 8), v1571);
              ++*(_QWORD *)(v1564 + 16);
              v1572 = (int32x2_t *)(*v1809 + 4 * v1563);
              *v1572 = vadd_s32(*v1572, (int32x2_t)0x600000006);
              v1572[1].i32[0] += 6;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1573 = (unsigned int *)a2[11];
      if (*((_BYTE *)v1573 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1574 = v5[2237] + *v1573;
          v1575 = *(_QWORD *)(*v6 + 8 * v1574);
          v1576 = v5[2239] + *v1517;
          v1577 = *(_QWORD *)(*v6 + 8 * v1576);
          if (v1575 <= v1577 && v1575 <= *v7)
          {
            v1578 = *v1810 + 24 * v1576;
            v1580 = (uint64_t **)(v1578 + 8);
            v1579 = *(uint64_t **)(v1578 + 8);
            if (v1579)
            {
              while (1)
              {
                while (1)
                {
                  v1581 = (uint64_t **)v1579;
                  v1582 = *((_DWORD *)v1579 + 7);
                  if (v1582 <= v1574)
                    break;
                  v1579 = *v1581;
                  v1580 = v1581;
                  if (!*v1581)
                    goto LABEL_1541;
                }
                if (v1582 >= v1574)
                  break;
                v1579 = v1581[1];
                if (!v1579)
                {
                  v1580 = v1581 + 1;
                  goto LABEL_1541;
                }
              }
            }
            else
            {
              v1581 = (uint64_t **)(v1578 + 8);
LABEL_1541:
              v1583 = operator new(0x20uLL);
              v1583[7] = v1574;
              *(_QWORD *)v1583 = 0;
              *((_QWORD *)v1583 + 1) = 0;
              *((_QWORD *)v1583 + 2) = v1581;
              *v1580 = (uint64_t *)v1583;
              v1584 = **(_QWORD **)v1578;
              if (v1584)
              {
                *(_QWORD *)v1578 = v1584;
                v1585 = *v1580;
              }
              else
              {
                v1585 = (uint64_t *)v1583;
              }
              result = sub_20E868578(*(uint64_t **)(v1578 + 8), v1585);
              ++*(_QWORD *)(v1578 + 16);
              v1586 = (int32x2_t *)(*v1809 + 4 * v1577);
              *v1586 = vadd_s32(*v1586, (int32x2_t)0x400000004);
              v1586[1].i32[0] += 4;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1587 = (unsigned int *)a2[12];
      if (*((_BYTE *)v1587 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1588 = v5[2237] + *v1587;
          v1589 = *(_QWORD *)(*v6 + 8 * v1588);
          v1590 = v5[2239] + *v1517;
          v1591 = *(_QWORD *)(*v6 + 8 * v1590);
          if (v1589 <= v1591 && v1589 <= *v7)
          {
            v1592 = *v1810 + 24 * v1590;
            v1594 = (uint64_t **)(v1592 + 8);
            v1593 = *(uint64_t **)(v1592 + 8);
            if (v1593)
            {
              while (1)
              {
                while (1)
                {
                  v1595 = (uint64_t **)v1593;
                  v1596 = *((_DWORD *)v1593 + 7);
                  if (v1596 <= v1588)
                    break;
                  v1593 = *v1595;
                  v1594 = v1595;
                  if (!*v1595)
                    goto LABEL_1556;
                }
                if (v1596 >= v1588)
                  break;
                v1593 = v1595[1];
                if (!v1593)
                {
                  v1594 = v1595 + 1;
                  goto LABEL_1556;
                }
              }
            }
            else
            {
              v1595 = (uint64_t **)(v1592 + 8);
LABEL_1556:
              v1597 = operator new(0x20uLL);
              v1597[7] = v1588;
              *(_QWORD *)v1597 = 0;
              *((_QWORD *)v1597 + 1) = 0;
              *((_QWORD *)v1597 + 2) = v1595;
              *v1594 = (uint64_t *)v1597;
              v1598 = **(_QWORD **)v1592;
              if (v1598)
              {
                *(_QWORD *)v1592 = v1598;
                v1599 = *v1594;
              }
              else
              {
                v1599 = (uint64_t *)v1597;
              }
              result = sub_20E868578(*(uint64_t **)(v1592 + 8), v1599);
              ++*(_QWORD *)(v1592 + 16);
              v1600 = (int32x2_t *)(*v1809 + 4 * v1591);
              *v1600 = vadd_s32(*v1600, (int32x2_t)0x400000004);
              v1600[1].i32[0] += 4;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1601 = (unsigned int *)a2[13];
      if (*((_BYTE *)v1601 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1602 = v5[2238] + *v1601;
          v1603 = *(_QWORD *)(*v6 + 8 * v1602);
          v1604 = v5[2239] + *v1517;
          v1605 = *(_QWORD *)(*v6 + 8 * v1604);
          if (v1603 <= v1605 && v1603 <= *v7)
          {
            v1606 = *v1810 + 24 * v1604;
            v1608 = (uint64_t **)(v1606 + 8);
            v1607 = *(uint64_t **)(v1606 + 8);
            if (v1607)
            {
              while (1)
              {
                while (1)
                {
                  v1609 = (uint64_t **)v1607;
                  v1610 = *((_DWORD *)v1607 + 7);
                  if (v1610 <= v1602)
                    break;
                  v1607 = *v1609;
                  v1608 = v1609;
                  if (!*v1609)
                    goto LABEL_1571;
                }
                if (v1610 >= v1602)
                  break;
                v1607 = v1609[1];
                if (!v1607)
                {
                  v1608 = v1609 + 1;
                  goto LABEL_1571;
                }
              }
            }
            else
            {
              v1609 = (uint64_t **)(v1606 + 8);
LABEL_1571:
              v1611 = operator new(0x20uLL);
              v1611[7] = v1602;
              *(_QWORD *)v1611 = 0;
              *((_QWORD *)v1611 + 1) = 0;
              *((_QWORD *)v1611 + 2) = v1609;
              *v1608 = (uint64_t *)v1611;
              v1612 = **(_QWORD **)v1606;
              if (v1612)
              {
                *(_QWORD *)v1606 = v1612;
                v1613 = *v1608;
              }
              else
              {
                v1613 = (uint64_t *)v1611;
              }
              result = sub_20E868578(*(uint64_t **)(v1606 + 8), v1613);
              ++*(_QWORD *)(v1606 + 16);
              v1614 = (int32x2_t *)(*v1809 + 4 * v1605);
              *v1614 = vadd_s32(*v1614, (int32x2_t)0x400000004);
              v1614[1].i32[0] += 4;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1615 = (unsigned int *)a2[14];
      if (*((_BYTE *)v1615 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1616 = v5[2238] + *v1615;
          v1617 = *(_QWORD *)(*v6 + 8 * v1616);
          v1618 = v5[2239] + *v1517;
          v1619 = *(_QWORD *)(*v6 + 8 * v1618);
          if (v1617 <= v1619 && v1617 <= *v7)
          {
            v1620 = *v1810 + 24 * v1618;
            v1622 = (uint64_t **)(v1620 + 8);
            v1621 = *(uint64_t **)(v1620 + 8);
            if (v1621)
            {
              while (1)
              {
                while (1)
                {
                  v1623 = (uint64_t **)v1621;
                  v1624 = *((_DWORD *)v1621 + 7);
                  if (v1624 <= v1616)
                    break;
                  v1621 = *v1623;
                  v1622 = v1623;
                  if (!*v1623)
                    goto LABEL_1586;
                }
                if (v1624 >= v1616)
                  break;
                v1621 = v1623[1];
                if (!v1621)
                {
                  v1622 = v1623 + 1;
                  goto LABEL_1586;
                }
              }
            }
            else
            {
              v1623 = (uint64_t **)(v1620 + 8);
LABEL_1586:
              v1625 = operator new(0x20uLL);
              v1625[7] = v1616;
              *(_QWORD *)v1625 = 0;
              *((_QWORD *)v1625 + 1) = 0;
              *((_QWORD *)v1625 + 2) = v1623;
              *v1622 = (uint64_t *)v1625;
              v1626 = **(_QWORD **)v1620;
              if (v1626)
              {
                *(_QWORD *)v1620 = v1626;
                v1627 = *v1622;
              }
              else
              {
                v1627 = (uint64_t *)v1625;
              }
              result = sub_20E868578(*(uint64_t **)(v1620 + 8), v1627);
              ++*(_QWORD *)(v1620 + 16);
              v1628 = (int32x2_t *)(*v1809 + 4 * v1619);
              *v1628 = vadd_s32(*v1628, (int32x2_t)0x400000004);
              v1628[1].i32[0] += 4;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      v1629 = (unsigned int *)a2[15];
      if (*((_BYTE *)v1629 + 20))
      {
        if (*((_BYTE *)v1517 + 20))
        {
          v1630 = v5[2239];
          v1631 = v1630 + *v1629;
          v1632 = *(_QWORD *)(*v6 + 8 * v1631);
          v1633 = v1630 + *v1517;
          v1634 = *(_QWORD *)(*v6 + 8 * v1633);
          if (v1632 <= v1634 && v1632 <= *v7)
          {
            v1635 = *v1810 + 24 * v1633;
            v1637 = (uint64_t **)(v1635 + 8);
            v1636 = *(uint64_t **)(v1635 + 8);
            if (v1636)
            {
              while (1)
              {
                while (1)
                {
                  v1638 = (uint64_t **)v1636;
                  v1639 = *((_DWORD *)v1636 + 7);
                  if (v1639 <= v1631)
                    break;
                  v1636 = *v1638;
                  v1637 = v1638;
                  if (!*v1638)
                    goto LABEL_1601;
                }
                if (v1639 >= v1631)
                  break;
                v1636 = v1638[1];
                if (!v1636)
                {
                  v1637 = v1638 + 1;
                  goto LABEL_1601;
                }
              }
            }
            else
            {
              v1638 = (uint64_t **)(v1635 + 8);
LABEL_1601:
              v1640 = operator new(0x20uLL);
              v1640[7] = v1631;
              *(_QWORD *)v1640 = 0;
              *((_QWORD *)v1640 + 1) = 0;
              *((_QWORD *)v1640 + 2) = v1638;
              *v1637 = (uint64_t *)v1640;
              v1641 = **(_QWORD **)v1635;
              if (v1641)
              {
                *(_QWORD *)v1635 = v1641;
                v1642 = *v1637;
              }
              else
              {
                v1642 = (uint64_t *)v1640;
              }
              result = sub_20E868578(*(uint64_t **)(v1635 + 8), v1642);
              ++*(_QWORD *)(v1635 + 16);
              v1643 = (int32x2_t *)(*v1809 + 4 * v1634);
              *v1643 = vadd_s32(*v1643, (int32x2_t)0x300000003);
              v1643[1].i32[0] += 3;
              v1517 = (unsigned int *)a2[16];
            }
          }
        }
      }
      if (*((_BYTE *)v1517 + 20))
      {
        v1644 = v5[2239] + *v1517;
        v1645 = *(_QWORD *)(*v6 + 8 * v1644);
        if (v1645 <= *v7)
        {
          v1646 = *v1810 + 24 * v1644;
          v1648 = (uint64_t **)(v1646 + 8);
          v1647 = *(uint64_t **)(v1646 + 8);
          if (v1647)
          {
            while (1)
            {
              while (1)
              {
                v1649 = (uint64_t **)v1647;
                v1650 = *((_DWORD *)v1647 + 7);
                if (v1650 <= v1644)
                  break;
                v1647 = *v1649;
                v1648 = v1649;
                if (!*v1649)
                  goto LABEL_1614;
              }
              if (v1650 >= v1644)
                break;
              v1647 = v1649[1];
              if (!v1647)
              {
                v1648 = v1649 + 1;
                goto LABEL_1614;
              }
            }
          }
          else
          {
            v1649 = (uint64_t **)(v1646 + 8);
LABEL_1614:
            v1651 = operator new(0x20uLL);
            v1651[7] = v1644;
            *(_QWORD *)v1651 = 0;
            *((_QWORD *)v1651 + 1) = 0;
            *((_QWORD *)v1651 + 2) = v1649;
            *v1648 = (uint64_t *)v1651;
            v1652 = **(_QWORD **)v1646;
            if (v1652)
            {
              *(_QWORD *)v1646 = v1652;
              v1653 = *v1648;
            }
            else
            {
              v1653 = (uint64_t *)v1651;
            }
            result = sub_20E868578(*(uint64_t **)(v1646 + 8), v1653);
            ++*(_QWORD *)(v1646 + 16);
            v1654 = (int32x2_t *)(*v1809 + 4 * v1645);
            *v1654 = vadd_s32(*v1654, (int32x2_t)0x300000003);
            v1654[1].i32[0] += 3;
          }
        }
      }
      v1655 = (unsigned int *)a2[17];
      if (*((_BYTE *)v1655 + 20))
      {
        v1656 = (unsigned int *)a2[16];
        if (*((_BYTE *)v1656 + 20))
        {
          v1657 = v5[2240] + *v1655;
          v1658 = *(_QWORD *)(*v6 + 8 * v1657);
          v1659 = v5[2239] + *v1656;
          v1660 = *(_QWORD *)(*v6 + 8 * v1659);
          if (v1658 <= v1660 && v1658 <= *v7)
          {
            v1661 = *v1810 + 24 * v1659;
            v1663 = (uint64_t **)(v1661 + 8);
            v1662 = *(uint64_t **)(v1661 + 8);
            if (v1662)
            {
              while (1)
              {
                while (1)
                {
                  v1664 = (uint64_t **)v1662;
                  v1665 = *((_DWORD *)v1662 + 7);
                  if (v1665 <= v1657)
                    break;
                  v1662 = *v1664;
                  v1663 = v1664;
                  if (!*v1664)
                    goto LABEL_1629;
                }
                if (v1665 >= v1657)
                  break;
                v1662 = v1664[1];
                if (!v1662)
                {
                  v1663 = v1664 + 1;
                  goto LABEL_1629;
                }
              }
            }
            else
            {
              v1664 = (uint64_t **)(v1661 + 8);
LABEL_1629:
              v1666 = operator new(0x20uLL);
              v1666[7] = v1657;
              *(_QWORD *)v1666 = 0;
              *((_QWORD *)v1666 + 1) = 0;
              *((_QWORD *)v1666 + 2) = v1664;
              *v1663 = (uint64_t *)v1666;
              v1667 = **(_QWORD **)v1661;
              if (v1667)
              {
                *(_QWORD *)v1661 = v1667;
                v1668 = *v1663;
              }
              else
              {
                v1668 = (uint64_t *)v1666;
              }
              result = sub_20E868578(*(uint64_t **)(v1661 + 8), v1668);
              ++*(_QWORD *)(v1661 + 16);
              v1669 = (int32x2_t *)(*v1809 + 4 * v1660);
              *v1669 = vadd_s32(*v1669, (int32x2_t)0x100000001);
              ++v1669[1].i32[0];
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      if (*((_BYTE *)*v2 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1670 = v5[2236] + **v2;
          v1671 = *(_QWORD *)(*v6 + 8 * v1670);
          v1672 = v5[2240] + *v1655;
          v1673 = *(_QWORD *)(*v6 + 8 * v1672);
          if (v1671 <= v1673 && v1671 <= *v7)
          {
            v1674 = *v1810 + 24 * v1672;
            v1676 = (uint64_t **)(v1674 + 8);
            v1675 = *(uint64_t **)(v1674 + 8);
            if (v1675)
            {
              while (1)
              {
                while (1)
                {
                  v1677 = (uint64_t **)v1675;
                  v1678 = *((_DWORD *)v1675 + 7);
                  if (v1678 <= v1670)
                    break;
                  v1675 = *v1677;
                  v1676 = v1677;
                  if (!*v1677)
                    goto LABEL_1644;
                }
                if (v1678 >= v1670)
                  break;
                v1675 = v1677[1];
                if (!v1675)
                {
                  v1676 = v1677 + 1;
                  goto LABEL_1644;
                }
              }
            }
            else
            {
              v1677 = (uint64_t **)(v1674 + 8);
LABEL_1644:
              v1679 = operator new(0x20uLL);
              v1679[7] = v1670;
              *(_QWORD *)v1679 = 0;
              *((_QWORD *)v1679 + 1) = 0;
              *((_QWORD *)v1679 + 2) = v1677;
              *v1676 = (uint64_t *)v1679;
              v1680 = **(_QWORD **)v1674;
              if (v1680)
              {
                *(_QWORD *)v1674 = v1680;
                v1681 = *v1676;
              }
              else
              {
                v1681 = (uint64_t *)v1679;
              }
              result = sub_20E868578(*(uint64_t **)(v1674 + 8), v1681);
              ++*(_QWORD *)(v1674 + 16);
              *(_DWORD *)(*v1809 + 4 * v1673) += 6;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1682 = (unsigned int *)a2[8];
      if (*((_BYTE *)v1682 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1683 = v5[2236] + *v1682;
          v1684 = *(_QWORD *)(*v6 + 8 * v1683);
          v1685 = v5[2240] + *v1655;
          v1686 = *(_QWORD *)(*v6 + 8 * v1685);
          if (v1684 <= v1686 && v1684 <= *v7)
          {
            v1687 = *v1810 + 24 * v1685;
            v1689 = (uint64_t **)(v1687 + 8);
            v1688 = *(uint64_t **)(v1687 + 8);
            if (v1688)
            {
              while (1)
              {
                while (1)
                {
                  v1690 = (uint64_t **)v1688;
                  v1691 = *((_DWORD *)v1688 + 7);
                  if (v1691 <= v1683)
                    break;
                  v1688 = *v1690;
                  v1689 = v1690;
                  if (!*v1690)
                    goto LABEL_1659;
                }
                if (v1691 >= v1683)
                  break;
                v1688 = v1690[1];
                if (!v1688)
                {
                  v1689 = v1690 + 1;
                  goto LABEL_1659;
                }
              }
            }
            else
            {
              v1690 = (uint64_t **)(v1687 + 8);
LABEL_1659:
              v1692 = operator new(0x20uLL);
              v1692[7] = v1683;
              *(_QWORD *)v1692 = 0;
              *((_QWORD *)v1692 + 1) = 0;
              *((_QWORD *)v1692 + 2) = v1690;
              *v1689 = (uint64_t *)v1692;
              v1693 = **(_QWORD **)v1687;
              if (v1693)
              {
                *(_QWORD *)v1687 = v1693;
                v1694 = *v1689;
              }
              else
              {
                v1694 = (uint64_t *)v1692;
              }
              result = sub_20E868578(*(uint64_t **)(v1687 + 8), v1694);
              ++*(_QWORD *)(v1687 + 16);
              *(_DWORD *)(*v1809 + 4 * v1686) += 6;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1695 = (unsigned int *)a2[9];
      if (*((_BYTE *)v1695 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1696 = v5[2233] + *v1695;
          v1697 = *(_QWORD *)(*v6 + 8 * v1696);
          v1698 = v5[2240] + *v1655;
          v1699 = *(_QWORD *)(*v6 + 8 * v1698);
          if (v1697 <= v1699 && v1697 <= *v7)
          {
            v1700 = *v1810 + 24 * v1698;
            v1702 = (uint64_t **)(v1700 + 8);
            v1701 = *(uint64_t **)(v1700 + 8);
            if (v1701)
            {
              while (1)
              {
                while (1)
                {
                  v1703 = (uint64_t **)v1701;
                  v1704 = *((_DWORD *)v1701 + 7);
                  if (v1704 <= v1696)
                    break;
                  v1701 = *v1703;
                  v1702 = v1703;
                  if (!*v1703)
                    goto LABEL_1674;
                }
                if (v1704 >= v1696)
                  break;
                v1701 = v1703[1];
                if (!v1701)
                {
                  v1702 = v1703 + 1;
                  goto LABEL_1674;
                }
              }
            }
            else
            {
              v1703 = (uint64_t **)(v1700 + 8);
LABEL_1674:
              v1705 = operator new(0x20uLL);
              v1705[7] = v1696;
              *(_QWORD *)v1705 = 0;
              *((_QWORD *)v1705 + 1) = 0;
              *((_QWORD *)v1705 + 2) = v1703;
              *v1702 = (uint64_t *)v1705;
              v1706 = **(_QWORD **)v1700;
              if (v1706)
              {
                *(_QWORD *)v1700 = v1706;
                v1707 = *v1702;
              }
              else
              {
                v1707 = (uint64_t *)v1705;
              }
              result = sub_20E868578(*(uint64_t **)(v1700 + 8), v1707);
              ++*(_QWORD *)(v1700 + 16);
              *(_DWORD *)(*v1809 + 4 * v1699) += 6;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1708 = (unsigned int *)a2[10];
      if (*((_BYTE *)v1708 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1709 = v5[2233] + *v1708;
          v1710 = *(_QWORD *)(*v6 + 8 * v1709);
          v1711 = v5[2240] + *v1655;
          v1712 = *(_QWORD *)(*v6 + 8 * v1711);
          if (v1710 <= v1712 && v1710 <= *v7)
          {
            v1713 = *v1810 + 24 * v1711;
            v1715 = (uint64_t **)(v1713 + 8);
            v1714 = *(uint64_t **)(v1713 + 8);
            if (v1714)
            {
              while (1)
              {
                while (1)
                {
                  v1716 = (uint64_t **)v1714;
                  v1717 = *((_DWORD *)v1714 + 7);
                  if (v1717 <= v1709)
                    break;
                  v1714 = *v1716;
                  v1715 = v1716;
                  if (!*v1716)
                    goto LABEL_1689;
                }
                if (v1717 >= v1709)
                  break;
                v1714 = v1716[1];
                if (!v1714)
                {
                  v1715 = v1716 + 1;
                  goto LABEL_1689;
                }
              }
            }
            else
            {
              v1716 = (uint64_t **)(v1713 + 8);
LABEL_1689:
              v1718 = operator new(0x20uLL);
              v1718[7] = v1709;
              *(_QWORD *)v1718 = 0;
              *((_QWORD *)v1718 + 1) = 0;
              *((_QWORD *)v1718 + 2) = v1716;
              *v1715 = (uint64_t *)v1718;
              v1719 = **(_QWORD **)v1713;
              if (v1719)
              {
                *(_QWORD *)v1713 = v1719;
                v1720 = *v1715;
              }
              else
              {
                v1720 = (uint64_t *)v1718;
              }
              result = sub_20E868578(*(uint64_t **)(v1713 + 8), v1720);
              ++*(_QWORD *)(v1713 + 16);
              *(_DWORD *)(*v1809 + 4 * v1712) += 6;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1721 = (unsigned int *)a2[11];
      if (*((_BYTE *)v1721 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1722 = v5[2237] + *v1721;
          v1723 = *(_QWORD *)(*v6 + 8 * v1722);
          v1724 = v5[2240] + *v1655;
          v1725 = *(_QWORD *)(*v6 + 8 * v1724);
          if (v1723 <= v1725 && v1723 <= *v7)
          {
            v1726 = *v1810 + 24 * v1724;
            v1728 = (uint64_t **)(v1726 + 8);
            v1727 = *(uint64_t **)(v1726 + 8);
            if (v1727)
            {
              while (1)
              {
                while (1)
                {
                  v1729 = (uint64_t **)v1727;
                  v1730 = *((_DWORD *)v1727 + 7);
                  if (v1730 <= v1722)
                    break;
                  v1727 = *v1729;
                  v1728 = v1729;
                  if (!*v1729)
                    goto LABEL_1704;
                }
                if (v1730 >= v1722)
                  break;
                v1727 = v1729[1];
                if (!v1727)
                {
                  v1728 = v1729 + 1;
                  goto LABEL_1704;
                }
              }
            }
            else
            {
              v1729 = (uint64_t **)(v1726 + 8);
LABEL_1704:
              v1731 = operator new(0x20uLL);
              v1731[7] = v1722;
              *(_QWORD *)v1731 = 0;
              *((_QWORD *)v1731 + 1) = 0;
              *((_QWORD *)v1731 + 2) = v1729;
              *v1728 = (uint64_t *)v1731;
              v1732 = **(_QWORD **)v1726;
              if (v1732)
              {
                *(_QWORD *)v1726 = v1732;
                v1733 = *v1728;
              }
              else
              {
                v1733 = (uint64_t *)v1731;
              }
              result = sub_20E868578(*(uint64_t **)(v1726 + 8), v1733);
              ++*(_QWORD *)(v1726 + 16);
              *(_DWORD *)(*v1809 + 4 * v1725) += 4;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1734 = (unsigned int *)a2[12];
      if (*((_BYTE *)v1734 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1735 = v5[2237] + *v1734;
          v1736 = *(_QWORD *)(*v6 + 8 * v1735);
          v1737 = v5[2240] + *v1655;
          v1738 = *(_QWORD *)(*v6 + 8 * v1737);
          if (v1736 <= v1738 && v1736 <= *v7)
          {
            v1739 = *v1810 + 24 * v1737;
            v1741 = (uint64_t **)(v1739 + 8);
            v1740 = *(uint64_t **)(v1739 + 8);
            if (v1740)
            {
              while (1)
              {
                while (1)
                {
                  v1742 = (uint64_t **)v1740;
                  v1743 = *((_DWORD *)v1740 + 7);
                  if (v1743 <= v1735)
                    break;
                  v1740 = *v1742;
                  v1741 = v1742;
                  if (!*v1742)
                    goto LABEL_1719;
                }
                if (v1743 >= v1735)
                  break;
                v1740 = v1742[1];
                if (!v1740)
                {
                  v1741 = v1742 + 1;
                  goto LABEL_1719;
                }
              }
            }
            else
            {
              v1742 = (uint64_t **)(v1739 + 8);
LABEL_1719:
              v1744 = operator new(0x20uLL);
              v1744[7] = v1735;
              *(_QWORD *)v1744 = 0;
              *((_QWORD *)v1744 + 1) = 0;
              *((_QWORD *)v1744 + 2) = v1742;
              *v1741 = (uint64_t *)v1744;
              v1745 = **(_QWORD **)v1739;
              if (v1745)
              {
                *(_QWORD *)v1739 = v1745;
                v1746 = *v1741;
              }
              else
              {
                v1746 = (uint64_t *)v1744;
              }
              result = sub_20E868578(*(uint64_t **)(v1739 + 8), v1746);
              ++*(_QWORD *)(v1739 + 16);
              *(_DWORD *)(*v1809 + 4 * v1738) += 4;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1747 = (unsigned int *)a2[13];
      if (*((_BYTE *)v1747 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1748 = v5[2238] + *v1747;
          v1749 = *(_QWORD *)(*v6 + 8 * v1748);
          v1750 = v5[2240] + *v1655;
          v1751 = *(_QWORD *)(*v6 + 8 * v1750);
          if (v1749 <= v1751 && v1749 <= *v7)
          {
            v1752 = *v1810 + 24 * v1750;
            v1754 = (uint64_t **)(v1752 + 8);
            v1753 = *(uint64_t **)(v1752 + 8);
            if (v1753)
            {
              while (1)
              {
                while (1)
                {
                  v1755 = (uint64_t **)v1753;
                  v1756 = *((_DWORD *)v1753 + 7);
                  if (v1756 <= v1748)
                    break;
                  v1753 = *v1755;
                  v1754 = v1755;
                  if (!*v1755)
                    goto LABEL_1734;
                }
                if (v1756 >= v1748)
                  break;
                v1753 = v1755[1];
                if (!v1753)
                {
                  v1754 = v1755 + 1;
                  goto LABEL_1734;
                }
              }
            }
            else
            {
              v1755 = (uint64_t **)(v1752 + 8);
LABEL_1734:
              v1757 = operator new(0x20uLL);
              v1757[7] = v1748;
              *(_QWORD *)v1757 = 0;
              *((_QWORD *)v1757 + 1) = 0;
              *((_QWORD *)v1757 + 2) = v1755;
              *v1754 = (uint64_t *)v1757;
              v1758 = **(_QWORD **)v1752;
              if (v1758)
              {
                *(_QWORD *)v1752 = v1758;
                v1759 = *v1754;
              }
              else
              {
                v1759 = (uint64_t *)v1757;
              }
              result = sub_20E868578(*(uint64_t **)(v1752 + 8), v1759);
              ++*(_QWORD *)(v1752 + 16);
              *(_DWORD *)(*v1809 + 4 * v1751) += 4;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1760 = (unsigned int *)a2[14];
      if (*((_BYTE *)v1760 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1761 = v5[2238] + *v1760;
          v1762 = *(_QWORD *)(*v6 + 8 * v1761);
          v1763 = v5[2240] + *v1655;
          v1764 = *(_QWORD *)(*v6 + 8 * v1763);
          if (v1762 <= v1764 && v1762 <= *v7)
          {
            v1765 = *v1810 + 24 * v1763;
            v1767 = (uint64_t **)(v1765 + 8);
            v1766 = *(uint64_t **)(v1765 + 8);
            if (v1766)
            {
              while (1)
              {
                while (1)
                {
                  v1768 = (uint64_t **)v1766;
                  v1769 = *((_DWORD *)v1766 + 7);
                  if (v1769 <= v1761)
                    break;
                  v1766 = *v1768;
                  v1767 = v1768;
                  if (!*v1768)
                    goto LABEL_1749;
                }
                if (v1769 >= v1761)
                  break;
                v1766 = v1768[1];
                if (!v1766)
                {
                  v1767 = v1768 + 1;
                  goto LABEL_1749;
                }
              }
            }
            else
            {
              v1768 = (uint64_t **)(v1765 + 8);
LABEL_1749:
              v1770 = operator new(0x20uLL);
              v1770[7] = v1761;
              *(_QWORD *)v1770 = 0;
              *((_QWORD *)v1770 + 1) = 0;
              *((_QWORD *)v1770 + 2) = v1768;
              *v1767 = (uint64_t *)v1770;
              v1771 = **(_QWORD **)v1765;
              if (v1771)
              {
                *(_QWORD *)v1765 = v1771;
                v1772 = *v1767;
              }
              else
              {
                v1772 = (uint64_t *)v1770;
              }
              result = sub_20E868578(*(uint64_t **)(v1765 + 8), v1772);
              ++*(_QWORD *)(v1765 + 16);
              *(_DWORD *)(*v1809 + 4 * v1764) += 4;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1773 = (unsigned int *)a2[15];
      if (*((_BYTE *)v1773 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1774 = v5[2239] + *v1773;
          v1775 = *(_QWORD *)(*v6 + 8 * v1774);
          v1776 = v5[2240] + *v1655;
          v1777 = *(_QWORD *)(*v6 + 8 * v1776);
          if (v1775 <= v1777 && v1775 <= *v7)
          {
            v1778 = *v1810 + 24 * v1776;
            v1780 = (uint64_t **)(v1778 + 8);
            v1779 = *(uint64_t **)(v1778 + 8);
            if (v1779)
            {
              while (1)
              {
                while (1)
                {
                  v1781 = (uint64_t **)v1779;
                  v1782 = *((_DWORD *)v1779 + 7);
                  if (v1782 <= v1774)
                    break;
                  v1779 = *v1781;
                  v1780 = v1781;
                  if (!*v1781)
                    goto LABEL_1764;
                }
                if (v1782 >= v1774)
                  break;
                v1779 = v1781[1];
                if (!v1779)
                {
                  v1780 = v1781 + 1;
                  goto LABEL_1764;
                }
              }
            }
            else
            {
              v1781 = (uint64_t **)(v1778 + 8);
LABEL_1764:
              v1783 = operator new(0x20uLL);
              v1783[7] = v1774;
              *(_QWORD *)v1783 = 0;
              *((_QWORD *)v1783 + 1) = 0;
              *((_QWORD *)v1783 + 2) = v1781;
              *v1780 = (uint64_t *)v1783;
              v1784 = **(_QWORD **)v1778;
              if (v1784)
              {
                *(_QWORD *)v1778 = v1784;
                v1785 = *v1780;
              }
              else
              {
                v1785 = (uint64_t *)v1783;
              }
              result = sub_20E868578(*(uint64_t **)(v1778 + 8), v1785);
              ++*(_QWORD *)(v1778 + 16);
              *(_DWORD *)(*v1809 + 4 * v1777) += 3;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      v1786 = (unsigned int *)a2[16];
      if (*((_BYTE *)v1786 + 20))
      {
        if (*((_BYTE *)v1655 + 20))
        {
          v1787 = v5[2239] + *v1786;
          v1788 = *(_QWORD *)(*v6 + 8 * v1787);
          v1789 = v5[2240] + *v1655;
          v1790 = *(_QWORD *)(*v6 + 8 * v1789);
          if (v1788 <= v1790 && v1788 <= *v7)
          {
            v1791 = *v1810 + 24 * v1789;
            v1793 = (uint64_t **)(v1791 + 8);
            v1792 = *(uint64_t **)(v1791 + 8);
            if (v1792)
            {
              while (1)
              {
                while (1)
                {
                  v1794 = (uint64_t **)v1792;
                  v1795 = *((_DWORD *)v1792 + 7);
                  if (v1795 <= v1787)
                    break;
                  v1792 = *v1794;
                  v1793 = v1794;
                  if (!*v1794)
                    goto LABEL_1779;
                }
                if (v1795 >= v1787)
                  break;
                v1792 = v1794[1];
                if (!v1792)
                {
                  v1793 = v1794 + 1;
                  goto LABEL_1779;
                }
              }
            }
            else
            {
              v1794 = (uint64_t **)(v1791 + 8);
LABEL_1779:
              v1796 = operator new(0x20uLL);
              v1796[7] = v1787;
              *(_QWORD *)v1796 = 0;
              *((_QWORD *)v1796 + 1) = 0;
              *((_QWORD *)v1796 + 2) = v1794;
              *v1793 = (uint64_t *)v1796;
              v1797 = **(_QWORD **)v1791;
              if (v1797)
              {
                *(_QWORD *)v1791 = v1797;
                v1798 = *v1793;
              }
              else
              {
                v1798 = (uint64_t *)v1796;
              }
              result = sub_20E868578(*(uint64_t **)(v1791 + 8), v1798);
              ++*(_QWORD *)(v1791 + 16);
              *(_DWORD *)(*v1809 + 4 * v1790) += 3;
              v1655 = (unsigned int *)a2[17];
            }
          }
        }
      }
      if (*((_BYTE *)v1655 + 20))
      {
        v1799 = v5[2240] + *v1655;
        v1800 = *(_QWORD *)(*v6 + 8 * v1799);
        if (v1800 <= *v7)
        {
          v1801 = *v1810 + 24 * v1799;
          v1803 = (uint64_t **)(v1801 + 8);
          v1802 = *(uint64_t **)(v1801 + 8);
          if (v1802)
          {
            while (1)
            {
              while (1)
              {
                v1804 = (uint64_t **)v1802;
                v1805 = *((_DWORD *)v1802 + 7);
                if (v1805 <= v1799)
                  break;
                v1802 = *v1804;
                v1803 = v1804;
                if (!*v1804)
                  goto LABEL_1792;
              }
              if (v1805 >= v1799)
                break;
              v1802 = v1804[1];
              if (!v1802)
              {
                v1803 = v1804 + 1;
                goto LABEL_1792;
              }
            }
          }
          else
          {
            v1804 = (uint64_t **)(v1801 + 8);
LABEL_1792:
            v1806 = operator new(0x20uLL);
            v1806[7] = v1799;
            *(_QWORD *)v1806 = 0;
            *((_QWORD *)v1806 + 1) = 0;
            *((_QWORD *)v1806 + 2) = v1804;
            *v1803 = (uint64_t *)v1806;
            v1807 = **(_QWORD **)v1801;
            if (v1807)
            {
              *(_QWORD *)v1801 = v1807;
              v1808 = *v1803;
            }
            else
            {
              v1808 = (uint64_t *)v1806;
            }
            result = sub_20E868578(*(uint64_t **)(v1801 + 8), v1808);
            ++*(_QWORD *)(v1801 + 16);
            ++*(_DWORD *)(*v1809 + 4 * v1800);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20F760494(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  int64x2_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64x2_t *v35;
  uint64_t v36;
  int64x2_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      sub_20F41B384();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = (unint64_t *)result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = (unint64_t *)&result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_n_s64(v14);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != (unint64_t *)v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = (int64x2_t *)(v7 + 2);
    v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27 = vdupq_lane_s64(*a3, 0);
      v25[-1] = v27;
      *v25 = v27;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = v22 & 0xFFFFFFFFFFFFFFF8;
  v32 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v32 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)&v21[a2] - v31) > a3)
    goto LABEL_43;
  v33 = (v32 >> 3) + 1;
  v34 = &v21[v33 & 0x3FFFFFFFFFFFFFFCLL];
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = vdupq_lane_s64(*a3, 0);
    v35[-1] = v37;
    *v35 = v37;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v34;
  if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

uint64_t sub_20F7606C0(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t *j;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *k;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v55;
  _DWORD *v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t *v101;
  int64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  _DWORD *v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  unsigned int v120;
  _DWORD *v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t *v151;
  _DWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  i = v9;
  while (2)
  {
    v9 = i;
    v12 = (char *)a2 - (char *)i;
    v13 = a2 - i;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v77 = *(a2 - 1);
        v78 = *i;
        v79 = **a3;
        v80 = (_DWORD *)(v79 + 8 * v77);
        v81 = v80[1];
        v82 = *(_DWORD *)(v79 + 8 * *i + 4);
        if (v81 == -1)
        {
          if (v82 != -1)
            goto LABEL_337;
        }
        else
        {
          if (v82 == -1)
            return result;
          if (v81 < v82)
            goto LABEL_337;
          if (v81 != v82)
            return result;
        }
        if (*v80 >= *(_DWORD *)(v79 + 8 * v78))
          return result;
LABEL_337:
        *i = v77;
        *(a2 - 1) = v78;
        return result;
      case 3:
        return (uint64_t)sub_20F761840(i, i + 1, v10, **a3);
      case 4:
        return (uint64_t)sub_20F761D54(i, i + 1, i + 2, v10, a3);
      case 5:
        return (uint64_t)sub_20F761EC8(i, i + 1, i + 2, i + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v83 = *a3;
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v84 = i + 1;
            if (i + 1 == a2)
              return result;
            v85 = 0;
            v86 = *v83;
            v87 = i;
            while (1)
            {
              v89 = v87;
              v87 = v84;
              v91 = *v89;
              v90 = v89[1];
              v92 = (_DWORD *)(v86 + 8 * v90);
              v93 = v92[1];
              v94 = *(_DWORD *)(v86 + 8 * *v89 + 4);
              if (v93 == -1)
                break;
              if (v94 == -1)
                goto LABEL_189;
              if (v93 >= v94)
              {
                if (v93 != v94)
                  goto LABEL_189;
                goto LABEL_203;
              }
              v89[1] = v91;
              v95 = v85;
              v88 = i;
              if (v89 != i)
                goto LABEL_208;
LABEL_188:
              *v88 = v90;
LABEL_189:
              v84 = v87 + 1;
              v85 += 8;
              if (v87 + 1 == a2)
                return result;
            }
            if (v94 == -1)
            {
LABEL_203:
              if (*v92 >= *(_DWORD *)(v86 + 8 * v91))
                goto LABEL_189;
              v89[1] = v91;
              v88 = i;
              if (v89 == i)
                goto LABEL_188;
              v95 = v85;
              if (v93 != -1)
              {
LABEL_208:
                while (1)
                {
                  v98 = *(uint64_t *)((char *)i + v95 - 8);
                  result = *(unsigned int *)(v86 + 8 * v98 + 4);
                  if ((_DWORD)result == -1)
                    break;
                  if (v93 >= result)
                  {
                    if (v93 != (_DWORD)result)
                      break;
                    result = *(unsigned int *)(v86 + 8 * v98);
                    if (*v92 >= result)
                    {
                      v88 = (uint64_t *)((char *)i + v95);
                      goto LABEL_188;
                    }
                  }
                  --v89;
                  *(uint64_t *)((char *)i + v95) = v98;
                  v95 -= 8;
                  if (!v95)
                  {
LABEL_187:
                    v88 = i;
                    goto LABEL_188;
                  }
                }
                v88 = v89;
                goto LABEL_188;
              }
            }
            else
            {
              v89[1] = v91;
              v88 = i;
              if (v89 == i)
                goto LABEL_188;
            }
            v96 = v85;
            while (1)
            {
              v97 = *(uint64_t *)((char *)i + v96 - 8);
              if (*(_DWORD *)(v86 + 8 * v97 + 4) == -1 && *v92 >= *(_DWORD *)(v86 + 8 * v97))
                break;
              *(uint64_t *)((char *)i + v96) = v97;
              v96 -= 8;
              if (!v96)
                goto LABEL_187;
            }
            v88 = (uint64_t *)((char *)i + v96);
            goto LABEL_188;
          }
          if (i == a2)
            return result;
          v158 = i + 1;
          if (i + 1 == a2)
            return result;
          v159 = *v83;
          while (1)
          {
            v160 = *v158;
            v161 = *v9;
            v162 = (_DWORD *)(v159 + 8 * *v158);
            v163 = v162[1];
            v164 = *(_DWORD *)(v159 + 8 * *v9 + 4);
            if (v163 == -1)
            {
              if (v164 == -1)
              {
                v168 = v9;
                if (*v162 >= *(_DWORD *)(v159 + 8 * v161))
                  goto LABEL_316;
              }
              else
              {
                v168 = v9;
              }
              do
              {
                do
                {
                  v167 = v168;
                  v169 = v161;
                  v170 = *--v168;
                  v161 = v170;
                  v168[2] = v169;
                }
                while (*(_DWORD *)(v159 + 8 * v170 + 4) != -1);
              }
              while (*v162 < *(_DWORD *)(v159 + 8 * v161));
            }
            else
            {
              if (v164 == -1 || v163 >= v164 && (v163 != v164 || *v162 >= *(_DWORD *)(v159 + 8 * v161)))
                goto LABEL_316;
              *v158 = v161;
              v165 = *(v9 - 1);
              v166 = *(_DWORD *)(v159 + 8 * v165 + 4);
              v167 = v9;
              if (v166 != -1)
              {
                v167 = v9;
                do
                {
                  if (v163 >= v166 && (v163 != v166 || *v162 >= *(_DWORD *)(v159 + 8 * v165)))
                    break;
                  *v167 = v165;
                  v165 = *(v167 - 2);
                  v166 = *(_DWORD *)(v159 + 8 * v165 + 4);
                  --v167;
                }
                while (v166 != -1);
              }
            }
            *v167 = v160;
LABEL_316:
            ++v158;
            ++v9;
            if (v158 == a2)
              return result;
          }
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = &i[(unint64_t)v13 >> 1];
          v16 = **a3;
          if ((unint64_t)v12 >= 0x401)
          {
            sub_20F761840(v9, v15, v10, v16);
            v17 = &v9[v14];
            sub_20F761840(v9 + 1, v17 - 1, a2 - 2, **a3);
            sub_20F761840(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
            result = (uint64_t)sub_20F761840(v17 - 1, v15, &v9[v14 + 1], **a3);
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            v10 = a2 - 1;
            --a4;
            v19 = **a3;
            v20 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v21 = (unsigned int *)(v19 + 8 * *(v9 - 1));
            v22 = v21[1];
            v23 = *(_DWORD *)(v19 + 8 * v20 + 4);
            if (v22 == -1)
            {
              if (v23 != -1)
                goto LABEL_17;
            }
            else
            {
              if (v23 == -1)
              {
                v24 = *v10;
                v25 = (unsigned int *)(v19 + 8 * v20);
                v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
                if (v26 != -1)
                  goto LABEL_115;
                v27 = *v25;
                goto LABEL_113;
              }
              if (v22 < v23)
                goto LABEL_17;
              if (v22 != v23)
              {
                v24 = *v10;
                v25 = (unsigned int *)(v19 + 8 * v20);
                v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
LABEL_100:
                if (v26 == -1)
                  goto LABEL_126;
                v59 = v26;
                if (v23 >= v26)
                {
                  if (v23 != v26)
                    goto LABEL_126;
                  if (*v25 >= *(_DWORD *)(v19 + 8 * v24))
                  {
                    v26 = *(_DWORD *)(v19 + 8 * v20 + 4);
LABEL_126:
                    i = v9 + 1;
                    if (v9 + 1 >= a2)
                      goto LABEL_147;
                    do
                    {
                      v63 = *(_DWORD *)(v19 + 8 * *i + 4);
                      if (v63 != -1 && (v23 < v63 || v23 == v63 && *v25 < *(_DWORD *)(v19 + 8 * *i)))
                        break;
                      ++i;
                    }
                    while (i < a2);
                    goto LABEL_133;
                  }
                  v59 = *(_DWORD *)(v19 + 8 * v20 + 4);
                }
                for (i = v9 + 1; ; ++i)
                {
                  v60 = *(_DWORD *)(v19 + 8 * *i + 4);
                  if (v60 != -1 && (v23 < v60 || v23 == v60 && *v25 < *(_DWORD *)(v19 + 8 * *i)))
                    break;
                }
                goto LABEL_134;
              }
            }
            v27 = *(_DWORD *)(v19 + 8 * v20);
            if (*v21 < v27)
              goto LABEL_17;
            v25 = (unsigned int *)(v19 + 8 * v20);
            v24 = *v10;
            v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
            if (v23 != -1)
              goto LABEL_100;
            if (v26 != -1)
              goto LABEL_115;
LABEL_113:
            if (v27 < *(_DWORD *)(v19 + 8 * v24))
            {
              v26 = -1;
LABEL_115:
              i = v9 + 1;
              v61 = v9[1];
              if (*(_DWORD *)(v19 + 8 * v61 + 4) == -1)
              {
                do
                {
                  if (*v25 < *(_DWORD *)(v19 + 8 * v61))
                    break;
                  v62 = i[1];
                  ++i;
                  v61 = v62;
                }
                while (*(_DWORD *)(v19 + 8 * v62 + 4) == -1);
              }
LABEL_133:
              v59 = v26;
              goto LABEL_134;
            }
            i = v9 + 1;
            if (v9 + 1 < a2)
            {
              while (*(_DWORD *)(v19 + 8 * *i + 4) == -1 && v27 >= *(_DWORD *)(v19 + 8 * *i))
              {
                ++i;
                v26 = -1;
                if (i >= a2)
                {
                  v59 = -1;
                  goto LABEL_134;
                }
              }
            }
            v26 = -1;
            v59 = -1;
LABEL_134:
            if (i >= a2)
            {
LABEL_147:
              v64 = a2;
              goto LABEL_148;
            }
            v64 = v10;
            if (v23 == -1)
            {
              while (v26 != -1 || *v25 < *(_DWORD *)(v19 + 8 * v24))
              {
                v65 = *--v64;
                v24 = v65;
                v26 = *(_DWORD *)(v19 + 8 * v65 + 4);
              }
            }
            else
            {
              while (v59 != -1 && (v23 < v59 || v23 == v59 && *v25 < *(_DWORD *)(v19 + 8 * v24)))
              {
                v66 = *--v64;
                v24 = v66;
                v59 = *(_DWORD *)(v19 + 8 * v66 + 4);
              }
            }
LABEL_148:
            if (i < v64)
            {
              v67 = *i;
              v68 = *v64;
              do
              {
                *i = v68;
                *v64 = v67;
                if (v23 == -1)
                {
                  v71 = i[1];
                  ++i;
                  v67 = v71;
                  if (*(_DWORD *)(v19 + 8 * v71 + 4) != -1)
                    goto LABEL_167;
                  do
                  {
                    if (*v25 < *(_DWORD *)(v19 + 8 * v67))
                      break;
                    v72 = i[1];
                    ++i;
                    v67 = v72;
                  }
                  while (*(_DWORD *)(v19 + 8 * v72 + 4) == -1);
LABEL_160:
                  if (v23 == -1)
                  {
LABEL_167:
                    do
                    {
                      do
                      {
                        v75 = *--v64;
                        v68 = v75;
                      }
                      while (*(_DWORD *)(v19 + 8 * v75 + 4) != -1);
                    }
                    while (*v25 < *(_DWORD *)(v19 + 8 * v68));
                    continue;
                  }
                }
                else
                {
                  while (1)
                  {
                    do
                    {
                      v69 = i[1];
                      ++i;
                      v67 = v69;
                      v70 = *(_DWORD *)(v19 + 8 * v69 + 4);
                    }
                    while (v70 == -1);
                    if (v23 < v70)
                      break;
                    if (v23 == v70 && *v25 < *(_DWORD *)(v19 + 8 * v67))
                      goto LABEL_160;
                  }
                }
                do
                {
                  v73 = *--v64;
                  v68 = v73;
                  v74 = *(_DWORD *)(v19 + 8 * v73 + 4);
                }
                while (v74 != -1 && (v23 < v74 || v23 == v74 && *v25 < *(_DWORD *)(v19 + 8 * v68)));
              }
              while (i < v64);
            }
            v76 = i - 1;
            if (i - 1 != v9)
              *v9 = *v76;
            a5 = 0;
            *v76 = v20;
            continue;
          }
          result = (uint64_t)sub_20F761840(v15, v9, v10, v16);
          --a4;
          v19 = **a3;
          v20 = *v9;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v23 = *(_DWORD *)(v19 + 8 * v20 + 4);
LABEL_17:
          v28 = (_DWORD *)(v19 + 8 * v20);
          if (v23 != -1)
          {
            for (j = v9 + 1; ; ++j)
            {
              v30 = *j;
              v31 = (_DWORD *)(v19 + 8 * *j);
              v32 = v31[1];
              v33 = v32 != -1 && v32 >= v23;
              if (v33 && (v32 != v23 || *v31 >= *v28))
                break;
            }
            v34 = j - 1;
            if (j - 1 != v9)
            {
LABEL_28:
              if (v23 != -1)
              {
                v35 = *v10;
                v36 = *(_DWORD *)(v19 + 8 * *v10 + 4);
                k = v10;
                if (v36 != -1)
                {
                  v38 = v23;
                  do
                  {
                    if (v36 < v38)
                      break;
                    if (v36 == v38)
                    {
                      v38 = v36;
                      if (*(_DWORD *)(v19 + 8 * v35) < *v28)
                        break;
                    }
                    v39 = *--k;
                    v35 = v39;
                    v36 = *(_DWORD *)(v19 + 8 * v39 + 4);
                  }
                  while (v36 != -1);
                }
                goto LABEL_59;
              }
              for (k = v10; *(_DWORD *)(v19 + 8 * *k + 4) != -1 || *(_DWORD *)(v19 + 8 * *k) >= *v28; --k)
                ;
              v23 = -1;
              if (j >= k)
                goto LABEL_91;
LABEL_60:
              v46 = *k;
              v47 = v23;
              v48 = j;
              v49 = k;
              do
              {
                *v48 = v46;
                *v49 = v30;
                if (v47 == -1)
                {
                  v54 = v48 + 1;
                  do
                  {
                    v48 = v54;
                    v30 = *v54;
                    if (*(_DWORD *)(v19 + 8 * *v54 + 4) != -1)
                      break;
                    ++v54;
                  }
                  while (*(_DWORD *)(v19 + 8 * v30) < *v28);
                }
                else
                {
                  do
                  {
                    v50 = v48[1];
                    ++v48;
                    v30 = v50;
                    v51 = (_DWORD *)(v19 + 8 * v50);
                    v52 = v51[1];
                    v53 = v52 != -1 && v52 >= v47;
                  }
                  while (!v53 || v52 == v47 && *v51 < *v28);
                }
                v34 = v48 - 1;
LABEL_76:
                v55 = v49 - 1;
                while (1)
                {
                  v49 = v55;
                  v46 = *v55;
                  v56 = (_DWORD *)(v19 + 8 * *v55);
                  v57 = v56[1];
                  if (v57 == -1)
                    break;
                  if (v47 == -1)
                    goto LABEL_76;
                  if (v57 < v47)
                    goto LABEL_62;
                  v55 = v49 - 1;
                  if (v57 == v47)
                  {
                    if (*(_DWORD *)(v19 + 8 * v46) >= *v28)
                      goto LABEL_76;
                    goto LABEL_62;
                  }
                }
                if (v23 != -1)
                {
                  v47 = v23;
                  continue;
                }
                v47 = -1;
                if (*v56 >= *v28)
                  goto LABEL_76;
LABEL_62:
                ;
              }
              while (v48 < v49);
              goto LABEL_91;
            }
            goto LABEL_42;
          }
          j = v9 + 1;
          v30 = v9[1];
          if (*(_DWORD *)(v19 + 8 * v30 + 4) == -1 && *(_DWORD *)(v19 + 8 * v30) < *v28)
          {
            v40 = v9 + 2;
            do
            {
              j = v40;
              v30 = *v40;
              if (*(_DWORD *)(v19 + 8 * *v40 + 4) != -1)
                break;
              ++v40;
            }
            while (*(_DWORD *)(v19 + 8 * v30) < *v28);
            v34 = j - 1;
            v23 = -1;
            if (j - 1 != v9)
              goto LABEL_28;
LABEL_42:
            if (j >= a2)
              goto LABEL_58;
            goto LABEL_43;
          }
          v23 = -1;
          if (j >= a2)
          {
LABEL_58:
            v34 = v9;
            k = a2;
LABEL_59:
            if (j >= k)
              goto LABEL_91;
            goto LABEL_60;
          }
LABEL_43:
          v41 = v23;
          k = a2;
          do
          {
            v42 = k - 1;
            while (1)
            {
              k = v42;
              v43 = *v42;
              v44 = (_DWORD *)(v19 + 8 * *v42);
              v45 = v44[1];
              if (v45 == -1)
                break;
              if (v41 != -1)
              {
                if (v45 < v41)
                  goto LABEL_55;
                if (v45 == v41)
                {
                  v44 = (_DWORD *)(v19 + 8 * v43);
                  goto LABEL_53;
                }
              }
              v42 = k - 1;
              if (j >= k)
                goto LABEL_55;
            }
            if (v23 != -1)
              break;
            v41 = -1;
LABEL_53:
            ;
          }
          while (j < k && *v44 >= *v28);
LABEL_55:
          v34 = v9;
          if (j < k)
            goto LABEL_60;
LABEL_91:
          if (v34 != v9)
            *v9 = *v34;
          *v34 = v20;
          if (j < k)
            goto LABEL_96;
          v58 = sub_20F761A38(v9, v34, a3);
          i = v34 + 1;
          result = sub_20F761A38(v34 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_96:
            result = sub_20F7606C0(v9, v34, a3, a4, a5 & 1);
            a5 = 0;
            i = v34 + 1;
            continue;
          }
          a2 = v34;
          if (v58)
            return result;
          goto LABEL_2;
        }
        if (i == a2)
          return result;
        v99 = (unint64_t)(v13 - 2) >> 1;
        v100 = v99;
        do
        {
          v102 = v100;
          if (v99 < v100)
            goto LABEL_218;
          v103 = (2 * v100) | 1;
          v104 = &i[v103];
          v105 = 2 * v100 + 2;
          v106 = **a3;
          if (v105 < v13)
          {
            v107 = v104[1];
            v108 = (_DWORD *)(v106 + 8 * *v104);
            v109 = v108[1];
            v110 = *(_DWORD *)(v106 + 8 * v107 + 4);
            if (v109 == -1)
            {
              if (v110 == -1)
              {
LABEL_227:
                if (*v108 >= *(_DWORD *)(v106 + 8 * v107))
                  goto LABEL_229;
              }
LABEL_228:
              ++v104;
              v103 = 2 * v102 + 2;
              goto LABEL_229;
            }
            if (v110 == -1)
              goto LABEL_229;
            if (v109 < v110)
              goto LABEL_228;
            if (v109 == v110)
              goto LABEL_227;
          }
LABEL_229:
          v111 = i[v102];
          v112 = (_DWORD *)(v106 + 8 * *v104);
          v113 = v112[1];
          result = *(unsigned int *)(v106 + 8 * v111 + 4);
          if (v113 == -1)
          {
            if ((_DWORD)result != -1)
              goto LABEL_218;
LABEL_235:
            result = v112[1];
            if (*v112 < *(_DWORD *)(v106 + 8 * v111))
              goto LABEL_218;
            goto LABEL_236;
          }
          if ((_DWORD)result != -1)
          {
            if (v113 < result)
              goto LABEL_218;
            if (v113 == (_DWORD)result)
              goto LABEL_235;
          }
LABEL_236:
          i[v102] = *v104;
          if (v99 >= v103)
          {
            v114 = (_DWORD *)(v106 + 8 * v111);
            if ((_DWORD)result == -1)
            {
              while (2)
              {
                v124 = 2 * v103;
                v103 = (2 * v103) | 1;
                v101 = &i[v103];
                v125 = v124 + 2;
                if (v125 >= v13)
                  goto LABEL_259;
                v126 = v101[1];
                v127 = (_DWORD *)(v106 + 8 * *v101);
                v128 = v127[1];
                v129 = *(_DWORD *)(v106 + 8 * v126 + 4);
                if (v128 == -1)
                {
                  if (v129 == -1)
                    goto LABEL_266;
                }
                else
                {
                  if (v129 == -1)
                    goto LABEL_259;
                  if (v128 >= v129)
                  {
                    if (v128 != v129)
                      goto LABEL_259;
LABEL_266:
                    if (*v127 >= *(_DWORD *)(v106 + 8 * v126))
                      goto LABEL_259;
                  }
                }
                ++v101;
                v103 = v125;
LABEL_259:
                result = *v101;
                if (*(_DWORD *)(v106 + 8 * *v101 + 4) == -1 && *(_DWORD *)(v106 + 8 * result) < *v114)
                  goto LABEL_216;
                *v104 = result;
                v104 = v101;
                if (v99 < v103)
                  goto LABEL_217;
                continue;
              }
            }
            while (2)
            {
              v115 = 2 * v103;
              v103 = (2 * v103) | 1;
              v101 = &i[v103];
              v116 = v115 + 2;
              if (v116 < v13)
              {
                v117 = v101[1];
                v118 = (_DWORD *)(v106 + 8 * *v101);
                v119 = v118[1];
                v120 = *(_DWORD *)(v106 + 8 * v117 + 4);
                if (v119 == -1)
                {
                  if (v120 == -1)
                    goto LABEL_247;
                  goto LABEL_248;
                }
                if (v120 != -1)
                {
                  if (v119 < v120)
                    goto LABEL_248;
                  if (v119 != v120)
                    goto LABEL_249;
LABEL_247:
                  if (*v118 < *(_DWORD *)(v106 + 8 * v117))
                  {
LABEL_248:
                    ++v101;
                    v103 = v116;
                  }
                }
              }
LABEL_249:
              v121 = (_DWORD *)(v106 + 8 * *v101);
              v122 = v121[1];
              v123 = v122 != -1 && v122 >= result;
              if (!v123 || v122 == (_DWORD)result && *v121 < *v114)
                break;
              *v104 = *v101;
              v104 = v101;
              if (v99 < v103)
                goto LABEL_217;
              continue;
            }
          }
LABEL_216:
          v101 = v104;
LABEL_217:
          *v101 = v111;
LABEL_218:
          v100 = v102 - 1;
        }
        while (v102);
        v130 = (unint64_t)v12 >> 3;
        while (2)
        {
          if (v130 < 2)
            goto LABEL_272;
          v132 = 0;
          v133 = *a3;
          v134 = *i;
          v135 = i;
          while (2)
          {
            v136 = v135;
            v135 += v132 + 1;
            v137 = 2 * v132;
            v132 = (2 * v132) | 1;
            v138 = v137 + 2;
            if (v138 >= v130)
              goto LABEL_278;
            result = v135[1];
            v139 = (_DWORD *)(*v133 + 8 * *v135);
            v140 = v139[1];
            v141 = *(_DWORD *)(*v133 + 8 * result + 4);
            if (v140 == -1)
            {
              if (v141 == -1)
                goto LABEL_284;
              goto LABEL_277;
            }
            if (v141 == -1)
              goto LABEL_278;
            if (v140 < v141)
              goto LABEL_277;
            if (v140 != v141)
              goto LABEL_278;
LABEL_284:
            result *= 8;
            if (*v139 < *(_DWORD *)(*v133 + result))
            {
LABEL_277:
              ++v135;
              v132 = v138;
            }
LABEL_278:
            *v136 = *v135;
            if (v132 <= (uint64_t)((unint64_t)(v130 - 2) >> 1))
              continue;
            break;
          }
          v142 = a2 - 1;
          if (v135 == a2 - 1)
          {
            *v135 = v134;
          }
          else
          {
            *v135 = *v142;
            *v142 = v134;
            v143 = (char *)v135 - (char *)i + 8;
            if (v143 >= 9)
            {
              v144 = ((unint64_t)v143 >> 3) - 2;
              v145 = v144 >> 1;
              v146 = &i[v144 >> 1];
              v147 = *v135;
              v148 = *v133;
              result = v148 + 8 * *v146;
              v149 = *(_DWORD *)(result + 4);
              v150 = *(_DWORD *)(v148 + 8 * *v135 + 4);
              if (v149 == -1)
              {
                if (v150 == -1)
                  goto LABEL_294;
LABEL_295:
                *v135 = *v146;
                if (v144 >= 2)
                {
                  v152 = (_DWORD *)(v148 + 8 * v147);
                  if (v150 == -1)
                  {
                    while (1)
                    {
                      v153 = v145 - 1;
                      v145 = (v145 - 1) >> 1;
                      v151 = &i[v145];
                      v154 = *v151;
                      if (*(_DWORD *)(v148 + 8 * *v151 + 4) != -1)
                        break;
                      result = *v152;
                      if (*(_DWORD *)(v148 + 8 * v154) >= result)
                        break;
                      *v146 = v154;
                      v146 = &i[v145];
                      if (v153 < 2)
                        goto LABEL_297;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v155 = v145 - 1;
                      v145 = (v145 - 1) >> 1;
                      v151 = &i[v145];
                      result = v148 + 8 * *v151;
                      v156 = *(_DWORD *)(result + 4);
                      if (v156 != -1 && v156 >= v150)
                      {
                        if (v156 != v150)
                          break;
                        result = *(unsigned int *)result;
                        if (result >= *v152)
                          break;
                      }
                      *v146 = *v151;
                      v146 = &i[v145];
                      if (v155 <= 1)
                        goto LABEL_297;
                    }
                  }
                }
                v151 = v146;
LABEL_297:
                *v151 = v147;
              }
              else if (v150 != -1)
              {
                if (v149 < v150)
                  goto LABEL_295;
                if (v149 == v150)
                {
LABEL_294:
                  result = *(unsigned int *)result;
                  v150 = v149;
                  if (result < *(_DWORD *)(v148 + 8 * v147))
                    goto LABEL_295;
                }
              }
            }
          }
LABEL_272:
          --a2;
          if ((unint64_t)v130-- > 2)
            continue;
          return result;
        }
    }
  }
}

uint64_t *sub_20F761840(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *a2;
  v5 = *result;
  v6 = (unsigned int *)(a4 + 8 * *a2);
  v7 = v6[1];
  v8 = *(_DWORD *)(a4 + 8 * *result + 4);
  if (v7 == -1)
  {
    if (v8 != -1)
    {
      v9 = *a3;
      v10 = (unsigned int *)(a4 + 8 * *a3);
      if (v10[1] != -1)
        goto LABEL_16;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == -1)
      goto LABEL_21;
    if (v7 < v8)
    {
      v9 = *a3;
      v10 = (unsigned int *)(a4 + 8 * *a3);
      v11 = v10[1];
      if (v11 == -1)
        goto LABEL_35;
      goto LABEL_14;
    }
    if (v7 != v8)
    {
LABEL_21:
      v9 = *a3;
      v10 = (unsigned int *)(a4 + 8 * *a3);
      v11 = v10[1];
      if (v11 == -1)
        goto LABEL_37;
      goto LABEL_22;
    }
  }
  v12 = *v6;
  v9 = *a3;
  v10 = (unsigned int *)(a4 + 8 * *a3);
  v11 = v10[1];
  if (*v6 >= *(_DWORD *)(a4 + 8 * v5))
  {
    if (v11 == -1)
    {
      if (v7 != -1)
        goto LABEL_37;
      goto LABEL_25;
    }
    if (v7 == -1)
      return result;
LABEL_22:
    if (v11 < v7)
      goto LABEL_37;
    if (v11 != v7)
      return result;
    v12 = *v6;
LABEL_25:
    if (*v10 >= v12)
      return result;
LABEL_37:
    *a2 = v9;
    *a3 = v4;
    v15 = *result;
    v16 = (_DWORD *)(a4 + 8 * *a2);
    v17 = v16[1];
    v18 = *(_DWORD *)(a4 + 8 * *result + 4);
    if (v17 == -1)
    {
      if (v18 != -1)
        goto LABEL_44;
    }
    else
    {
      if (v18 == -1)
        return result;
      if (v17 < v18)
        goto LABEL_44;
      if (v17 != v18)
        return result;
    }
    if (*v16 >= *(_DWORD *)(a4 + 8 * v15))
      return result;
LABEL_44:
    *result = *a2;
    *a2 = v15;
    return result;
  }
  if (v11 == -1)
  {
    if (v7 != -1)
      goto LABEL_35;
    v8 = -1;
    if (*v10 < *v6)
      goto LABEL_35;
    goto LABEL_16;
  }
  v8 = v6[1];
  if (v7 == -1)
    goto LABEL_16;
LABEL_14:
  if (v11 < v7)
  {
LABEL_35:
    *result = v9;
    *a3 = v5;
    return result;
  }
  if (v11 == v7)
  {
LABEL_8:
    if (*v10 < *v6)
      goto LABEL_35;
  }
LABEL_16:
  *result = v4;
  *a2 = v5;
  v13 = (_DWORD *)(a4 + 8 * *a3);
  v14 = v13[1];
  if (v14 == -1)
  {
    if (v8 == -1)
      goto LABEL_31;
LABEL_32:
    *a2 = *a3;
    *a3 = v5;
    return result;
  }
  if (v8 == -1)
    return result;
  if (v14 < v8)
    goto LABEL_32;
  if (v14 != v8)
    return result;
LABEL_31:
  if (*v13 < *(_DWORD *)(a4 + 8 * v5))
    goto LABEL_32;
  return result;
}

BOOL sub_20F761A38(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v25 = *(a2 - 1);
      v26 = *a1;
      v27 = **a3;
      v28 = (_DWORD *)(v27 + 8 * v25);
      v29 = v28[1];
      v30 = *(_DWORD *)(v27 + 8 * *a1 + 4);
      if (v29 == -1)
      {
        if (v30 != -1)
          goto LABEL_43;
      }
      else
      {
        if (v30 == -1)
          return result;
        if (v29 < v30)
          goto LABEL_43;
        if (v29 != v30)
          return result;
      }
      if (*v28 >= *(_DWORD *)(v27 + 8 * v26))
        return result;
LABEL_43:
      *a1 = v25;
      *(a2 - 1) = v26;
      return result;
    case 3:
      sub_20F761840(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_20F761D54(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20F761EC8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20F761840(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = **a3;
      break;
  }
  while (1)
  {
    v14 = *v9;
    v15 = *v8;
    v16 = (_DWORD *)(v12 + 8 * *v9);
    v17 = v16[1];
    v18 = *(_DWORD *)(v12 + 8 * *v8 + 4);
    if (v17 == -1)
    {
      if (v18 != -1)
      {
        *v9 = v15;
        v13 = a1;
        if (v8 == a1)
          goto LABEL_6;
LABEL_15:
        v20 = v10;
        while (1)
        {
          v21 = *(uint64_t *)((char *)a1 + v20 + 8);
          if (*(_DWORD *)(v12 + 8 * v21 + 4) == -1 && *v16 >= *(_DWORD *)(v12 + 8 * v21))
            break;
          *(uint64_t *)((char *)a1 + v20 + 16) = v21;
          v20 -= 8;
          if (v20 == -16)
            goto LABEL_5;
        }
        v13 = (uint64_t *)((char *)a1 + v20 + 16);
        goto LABEL_6;
      }
    }
    else
    {
      if (v18 == -1)
        goto LABEL_7;
      if (v17 < v18)
      {
        *v9 = v15;
        v19 = v10;
        v13 = a1;
        if (v8 != a1)
          goto LABEL_26;
        goto LABEL_6;
      }
      if (v17 != v18)
        goto LABEL_7;
    }
    if (*v16 >= *(_DWORD *)(v12 + 8 * v15))
      goto LABEL_7;
    *v9 = v15;
    v13 = a1;
    if (v8 != a1)
    {
      v19 = v10;
      if (v17 == -1)
        goto LABEL_15;
LABEL_26:
      while (1)
      {
        v22 = (char *)a1 + v19;
        v23 = *(uint64_t *)((char *)a1 + v19 + 8);
        v24 = *(_DWORD *)(v12 + 8 * v23 + 4);
        if (v24 == -1)
          break;
        if (v17 >= v24 && (v17 != v24 || *v16 >= *(_DWORD *)(v12 + 8 * v23)))
        {
          v13 = v8;
          goto LABEL_6;
        }
        --v8;
        *((_QWORD *)v22 + 2) = v23;
        v19 -= 8;
        if (v19 == -16)
        {
LABEL_5:
          v13 = a1;
          goto LABEL_6;
        }
      }
      v13 = (uint64_t *)(v22 + 16);
    }
LABEL_6:
    *v13 = v14;
    if (++v11 == 8)
      return v9 + 1 == a2;
LABEL_7:
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_20F761D54(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;

  result = sub_20F761840(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  v13 = (_DWORD *)(v12 + 8 * *a4);
  v14 = v13[1];
  v15 = *(_DWORD *)(v12 + 8 * *a3 + 4);
  if (v14 == -1)
  {
    if (v15 != -1)
      goto LABEL_8;
  }
  else
  {
    if (v15 == -1)
      return result;
    if (v14 < v15)
      goto LABEL_8;
    if (v14 != v15)
      return result;
  }
  if (*v13 >= *(_DWORD *)(v12 + 8 * v11))
    return result;
LABEL_8:
  *a3 = *a4;
  *a4 = v11;
  v16 = *a2;
  v17 = (_DWORD *)(v12 + 8 * *a3);
  v18 = v17[1];
  v19 = *(_DWORD *)(v12 + 8 * *a2 + 4);
  if (v18 == -1)
  {
    if (v19 != -1)
      goto LABEL_15;
  }
  else
  {
    if (v19 == -1)
      return result;
    if (v18 < v19)
      goto LABEL_15;
    if (v18 != v19)
      return result;
  }
  if (*v17 >= *(_DWORD *)(v12 + 8 * v16))
    return result;
LABEL_15:
  *a2 = *a3;
  *a3 = v16;
  v20 = *a1;
  v21 = (_DWORD *)(v12 + 8 * *a2);
  v22 = v21[1];
  v23 = *(_DWORD *)(v12 + 8 * *a1 + 4);
  if (v22 != -1)
  {
    if (v23 == -1)
      return result;
    if (v22 >= v23)
    {
      if (v22 != v23)
        return result;
      goto LABEL_21;
    }
LABEL_22:
    *a1 = *a2;
    *a2 = v20;
    return result;
  }
  if (v23 != -1)
    goto LABEL_22;
LABEL_21:
  if (*v21 < *(_DWORD *)(v12 + 8 * v20))
    goto LABEL_22;
  return result;
}

uint64_t *sub_20F761EC8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int v29;

  result = sub_20F761D54(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = (_DWORD *)(v14 + 8 * *a5);
  v16 = v15[1];
  v17 = *(_DWORD *)(v14 + 8 * *a4 + 4);
  if (v16 == -1)
  {
    if (v17 != -1)
      goto LABEL_8;
  }
  else
  {
    if (v17 == -1)
      return result;
    if (v16 < v17)
      goto LABEL_8;
    if (v16 != v17)
      return result;
  }
  if (*v15 >= *(_DWORD *)(v14 + 8 * v13))
    return result;
LABEL_8:
  *a4 = *a5;
  *a5 = v13;
  v18 = *a3;
  v19 = (_DWORD *)(v14 + 8 * *a4);
  v20 = v19[1];
  v21 = *(_DWORD *)(v14 + 8 * *a3 + 4);
  if (v20 == -1)
  {
    if (v21 != -1)
      goto LABEL_15;
  }
  else
  {
    if (v21 == -1)
      return result;
    if (v20 < v21)
      goto LABEL_15;
    if (v20 != v21)
      return result;
  }
  if (*v19 >= *(_DWORD *)(v14 + 8 * v18))
    return result;
LABEL_15:
  *a3 = *a4;
  *a4 = v18;
  v22 = *a2;
  v23 = (_DWORD *)(v14 + 8 * *a3);
  v24 = v23[1];
  v25 = *(_DWORD *)(v14 + 8 * *a2 + 4);
  if (v24 == -1)
  {
    if (v25 != -1)
      goto LABEL_22;
  }
  else
  {
    if (v25 == -1)
      return result;
    if (v24 < v25)
      goto LABEL_22;
    if (v24 != v25)
      return result;
  }
  if (*v23 >= *(_DWORD *)(v14 + 8 * v22))
    return result;
LABEL_22:
  *a2 = *a3;
  *a3 = v22;
  v26 = *a1;
  v27 = (_DWORD *)(v14 + 8 * *a2);
  v28 = v27[1];
  v29 = *(_DWORD *)(v14 + 8 * *a1 + 4);
  if (v28 != -1)
  {
    if (v29 == -1)
      return result;
    if (v28 >= v29)
    {
      if (v28 != v29)
        return result;
      goto LABEL_28;
    }
LABEL_29:
    *a1 = *a2;
    *a2 = v26;
    return result;
  }
  if (v29 != -1)
    goto LABEL_29;
LABEL_28:
  if (*v27 < *(_DWORD *)(v14 + 8 * v26))
    goto LABEL_29;
  return result;
}

uint64_t sub_20F762098(_QWORD *a1, signed int a2, int a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  unint64_t v17;
  __int32 *v18;
  int32x4_t *v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int32 *v26;
  int32x4_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  int64x2_t *v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  uint64_t v63;
  int64x2_t v64;
  int32x4_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  signed int v70;
  int32x4_t *v71;
  unint64_t v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t *v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;

  v7 = a1 + 7;
  v8 = a1[7];
  v9 = a1[1];
  v10 = 8 * a3;
  v11 = *(_QWORD *)(v9 + v10);
  v12 = a1[4];
  v13 = *(_QWORD *)(v12 + v10);
  v14 = (int32x4_t *)(v8 + 4 * v13);
  v15 = v14;
  if (v13 != v11)
  {
    v15 = (int32x4_t *)(v8 + 4 * v11);
    v16 = ((char *)v14 - (char *)v15) >> 2;
    do
    {
      v17 = v16 >> 1;
      v18 = &v15->i32[v16 >> 1];
      v20 = *v18;
      v19 = (int32x4_t *)(v18 + 1);
      v16 += ~(v16 >> 1);
      if (v20 < a2)
        v15 = v19;
      else
        v16 = v17;
    }
    while (v16);
  }
  if (a4 == 1)
  {
    if (v14 == v15)
    {
      v21 = 0;
      v22 = 1;
      v23 = 1;
      goto LABEL_20;
    }
    v21 = v15->i32[0] == a2;
    v22 = 1;
    v23 = v15->i32[0] != a2;
    if (v21 != 1)
    {
LABEL_20:
      v85 = v22;
      v30 = a3;
      v86 = a3 + 1;
      v31 = *(_QWORD *)(v9 + 8 * v86);
      if (v31 - v13 < v23)
      {
        v83 = v23;
        v84 = v13;
        v32 = 2 * (v31 - v11);
        if (v23 + v31 - v11 > v32)
          v32 = v23 + v31 - v11;
        if (v32 <= 8)
          v32 = 8;
        v33 = v32 + v11 - v31;
        v81 = *(_QWORD *)(a1[2] - 8) + v33;
        v82 = v21;
        if (v81 <= (a1[8] - v8) >> 2)
        {
          v34 = ((unint64_t)(a1[5] - v12) >> 3) - 1;
          if (v34 > a3)
          {
            v35 = v34;
            do
            {
              v36 = *(_QWORD *)(a1[1] + 8 * v35);
              v37 = *(_QWORD *)(a1[4] + 8 * v35);
              if (v37 != v36)
                memmove((void *)(*v7 + 4 * (v37 + v33) - (*v7 + 4 * v37 - (*v7 + 4 * v36))), (const void *)(*v7 + 4 * v36), *v7 + 4 * v37 - (*v7 + 4 * v36));
              --v35;
            }
            while (v35 > a3);
          }
        }
        else
        {
          v88 = -1;
          sub_20F0EC72C(a1 + 7, (void *)(v8 + 4 * v31), v33, (const float *)&v88);
        }
        v38 = a1[10];
        if (v81 <= (a1[11] - v38) >> 3)
        {
          v40 = ((a1[5] - a1[4]) >> 3) - 1;
          if (v40 > a3)
          {
            v41 = v40;
            do
            {
              v42 = *(_QWORD *)(a1[1] + 8 * v41);
              v43 = *(_QWORD *)(a1[4] + 8 * v41);
              if (v43 != v42)
              {
                v39 = a1 + 10;
                memmove((void *)(*v39 + 8 * (v43 + v33) - (*v39 + 8 * v43 - (*v39 + 8 * v42))), (const void *)(*v39 + 8 * v42), *v39 + 8 * v43 - (*v39 + 8 * v42));
              }
              --v41;
            }
            while (v41 > v30);
          }
        }
        else
        {
          v87 = 0;
          sub_20F1C5A3C(a1 + 10, (void *)(v38 + 8 * v31), v33, &v87);
        }
        v45 = a1[1];
        v44 = (_QWORD *)a1[2];
        v46 = (_QWORD *)(v45 + 8 * v86);
        v13 = v84;
        if (v46 != v44)
        {
          v47 = 8 * v30 + v45;
          v48 = (unint64_t)v44 - v47 - 16;
          if (v48 < 0x18)
            goto LABEL_70;
          v49 = (v48 >> 3) + 1;
          v46 += v49 & 0x3FFFFFFFFFFFFFFCLL;
          v50 = vdupq_n_s64(v33);
          v51 = (int64x2_t *)(v47 + 24);
          v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = vaddq_s64(*v51, v50);
            v51[-1] = vaddq_s64(v51[-1], v50);
            *v51 = v53;
            v51 += 2;
            v52 -= 4;
          }
          while (v52);
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_70:
            do
              *v46++ += v33;
            while (v46 != v44);
          }
        }
        v54 = ((uint64_t)v15->i64 - v8) >> 2;
        v56 = a1[4];
        v55 = (_QWORD *)a1[5];
        v57 = (_QWORD *)(v56 + 8 * v86);
        if (v57 != v55)
        {
          v58 = 8 * v30 + v56;
          v59 = (unint64_t)v55 - v58 - 16;
          if (v59 < 0x18)
            goto LABEL_71;
          v60 = (v59 >> 3) + 1;
          v57 += v60 & 0x3FFFFFFFFFFFFFFCLL;
          v61 = vdupq_n_s64(v33);
          v62 = (int64x2_t *)(v58 + 24);
          v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = vaddq_s64(*v62, v61);
            v62[-1] = vaddq_s64(v62[-1], v61);
            *v62 = v64;
            v62 += 2;
            v63 -= 4;
          }
          while (v63);
          if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
              *v57++ += v33;
            while (v57 != v55);
          }
        }
        v8 = *v7;
        v15 = (int32x4_t *)(*v7 + 4 * v54);
        v21 = v82;
        v23 = v83;
      }
      if (v21)
        return 0;
      v66 = (int32x4_t *)(v8 + 4 * v13);
      v67 = ((char *)v66 - (char *)v15) >> 2;
      if (v66 != v15)
        memmove((char *)v66 + 4 * v85 + -4 * v67, v15, (char *)v66 - (char *)v15);
      v68 = (v85 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v68 >= 7)
      {
        v72 = v68 + 1;
        v73 = (v68 + 1) & 0x7FFFFFFFFFFFFFF8;
        v70 = v73 + a2;
        v71 = (int32x4_t *)((char *)v15 + 4 * v73);
        v74 = vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_210365350);
        v75 = v15 + 1;
        v76.i64[0] = 0x400000004;
        v76.i64[1] = 0x400000004;
        v77.i64[0] = 0x800000008;
        v77.i64[1] = 0x800000008;
        v78 = v73;
        do
        {
          v75[-1] = v74;
          *v75 = vaddq_s32(v74, v76);
          v74 = vaddq_s32(v74, v77);
          v75 += 2;
          v78 -= 8;
        }
        while (v78);
        v69 = v23;
        if (v72 == v73)
          goto LABEL_62;
      }
      else
      {
        v69 = v23;
        v70 = a2;
        v71 = v15;
      }
      do
      {
        v71->i32[0] = v70;
        v71 = (int32x4_t *)((char *)v71 + 4);
        ++v70;
      }
      while (v71 != (int32x4_t *)((char *)v15 + 4 * v85));
LABEL_62:
      v79 = ((uint64_t)v15->i64 - a1[7]) >> 2;
      v29 = a1[10];
      if (v13 != v79)
      {
        memmove((void *)(v29 + 8 * (v67 + v85 + v79) - (8 * v13 - 8 * v79)), (const void *)(v29 + 8 * v79), 8 * v13 - 8 * v79);
        v29 = a1[10];
      }
      v80 = 8 * (v79 + v85) - 8 * v79;
      if (v80 >= 1)
        bzero((void *)(v29 + 8 * v79), 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
      *(_QWORD *)(a1[4] + 8 * v30) += v69;
      v8 = a1[7];
      return v29 + 2 * ((_QWORD)v15 - v8);
    }
  }
  else
  {
    if (v15 != v14)
    {
      v24 = ((char *)v14 - (char *)v15) >> 2;
      v14 = v15;
      do
      {
        v25 = v24 >> 1;
        v26 = &v14->i32[v24 >> 1];
        v28 = *v26;
        v27 = (int32x4_t *)(v26 + 1);
        v24 += ~(v24 >> 1);
        if (v28 < (int)(a4 + a2))
          v14 = v27;
        else
          v24 = v25;
      }
      while (v24);
    }
    v21 = ((char *)v14 - (char *)v15) >> 2;
    v22 = a4;
    v23 = a4 - v21;
    if (a4 != v21)
      goto LABEL_20;
  }
  v29 = a1[10];
  return v29 + 2 * ((_QWORD)v15 - v8);
}

void sub_20F7625C8(_QWORD *a1, uint64_t a2)
{
  unsigned int **v2;
  uint64_t v5;
  float64x2_t *v6;
  _BOOL4 v7;
  uint64_t v8;
  float64x2_t *v9;
  double v16;
  long double v17;
  double v18;
  double v19;
  unsigned int *v20;
  _QWORD *v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  float64x2_t *v27;
  const double *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  unsigned int *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t i;
  float64x2_t *v39;
  const double *v40;
  float64x2_t v41;
  float64x2_t v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t j;
  float64x2_t *v47;
  const double *v48;
  float64x2_t v49;
  float64x2_t v50;
  unsigned int *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t k;
  float64x2_t *v55;
  const double *v56;
  float64x2_t v57;
  float64x2_t v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  unsigned int *v75;
  unint64_t v76;
  unint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t *v89;
  float64x2_t v90;
  unsigned int *v91;
  unint64_t v92;
  unint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t v106;
  unsigned int *v107;
  unint64_t v108;
  unint64_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t *v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  unsigned int *v123;
  unint64_t v124;
  unint64_t v125;
  float64x2_t *v126;
  float64x2_t v127;
  float64x2_t v130;
  float64x2_t *v131;
  float64x2_t v132;
  float64x2_t v135;
  float64x2_t *v136;
  float64x2_t v137;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v145;
  float64x2_t *v146;
  float64x2_t v147;
  float64x2_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v155;
  unsigned int *v156;
  unint64_t v157;
  unint64_t v158;
  float64x2_t *v159;
  float64x2_t v160;
  float64x2_t v163;
  float64x2_t *v164;
  float64x2_t v165;
  float64x2_t v168;
  float64x2_t *v169;
  float64x2_t v170;
  float64x2_t v173;
  float64x2_t *v174;
  float64x2_t v175;
  float64x2_t v178;
  float64x2_t *v179;
  float64x2_t v180;
  float64x2_t v183;
  float64x2_t *v184;
  float64x2_t v185;
  float64x2_t v188;
  unsigned int *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t m;
  float64x2_t *v194;
  double v195;
  double v196;
  float64x2_t v197;
  float64x2_t v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  float64x2_t *v202;
  double v203;
  float64x2_t v204;
  float64x2_t *v205;
  float64x2_t v206;
  unsigned int *v207;
  unsigned int *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  double *v212;
  float64x2_t *v213;
  double v214;
  float64x2_t v215;
  unsigned int *v216;
  unsigned int *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  double *v221;
  float64x2_t *v222;
  double v223;
  float64x2_t v224;
  unsigned int *v225;
  _QWORD *v226;
  unsigned int *v227;
  unint64_t v228;
  unint64_t v229;
  float64x2_t *v230;
  float64x2_t *v231;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t v234;
  float64x2_t *v235;
  float64x2_t v236;
  float64x2_t *v237;
  float64x2_t v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t *v241;
  float64x2_t v242;
  unsigned int *v243;
  unsigned int *v244;
  unint64_t v245;
  unint64_t v246;
  float64x2_t *v247;
  float64x2_t *v248;
  float64x2_t v249;
  float64x2_t *v250;
  float64x2_t v251;
  float64x2_t *v252;
  float64x2_t v253;
  float64x2_t *v254;
  float64x2_t v255;
  float64x2_t *v256;
  float64x2_t v257;
  float64x2_t *v258;
  float64x2_t v259;
  unsigned int *v260;
  unsigned int *v261;
  unint64_t v262;
  unint64_t v263;
  float64x2_t *v264;
  float64x2_t *v265;
  float64x2_t v266;
  float64x2_t *v267;
  float64x2_t v268;
  float64x2_t *v269;
  float64x2_t v270;
  float64x2_t *v271;
  float64x2_t v272;
  float64x2_t *v273;
  float64x2_t v274;
  float64x2_t *v275;
  float64x2_t v276;
  unsigned int *v277;
  unsigned int *v278;
  unint64_t v279;
  unint64_t v280;
  float64x2_t *v281;
  float64x2_t *v282;
  float64x2_t v283;
  float64x2_t *v284;
  float64x2_t v285;
  float64x2_t *v286;
  float64x2_t v287;
  float64x2_t *v288;
  float64x2_t v289;
  float64x2_t *v290;
  float64x2_t v291;
  float64x2_t *v292;
  float64x2_t v293;
  unsigned int *v294;
  unsigned int *v295;
  unint64_t v296;
  unint64_t v297;
  float64x2_t *v298;
  float64x2_t v299;
  float64x2_t v302;
  float64x2_t *v303;
  float64x2_t v304;
  float64x2_t v307;
  float64x2_t *v308;
  float64x2_t v309;
  float64x2_t v312;
  float64x2_t *v313;
  float64x2_t v314;
  float64x2_t v317;
  float64x2_t *v318;
  float64x2_t v319;
  float64x2_t v322;
  float64x2_t *v323;
  float64x2_t v324;
  float64x2_t v327;
  unsigned int *v328;
  unsigned int *v329;
  unint64_t v330;
  unint64_t v331;
  float64x2_t *v332;
  float64x2_t v333;
  float64x2_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  float64x2_t v341;
  float64x2_t *v342;
  float64x2_t v343;
  float64x2_t v346;
  float64x2_t *v347;
  float64x2_t v348;
  float64x2_t v351;
  float64x2_t *v352;
  float64x2_t v353;
  float64x2_t v356;
  float64x2_t *v357;
  float64x2_t v358;
  float64x2_t v361;
  unsigned int *v362;
  unsigned int *v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t n;
  float64x2_t *v367;
  double v368;
  double v369;
  float64x2_t v370;
  float64x2_t v371;
  unsigned int *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  double *v376;
  float64x2_t *v377;
  double v378;
  float64x2_t v379;
  uint64_t v380;
  uint64_t v381;
  double *v382;
  float64x2_t *v383;
  double v384;
  float64x2_t v385;
  float64x2_t *v386;
  float64x2_t v387;
  unsigned int *v388;
  unsigned int *v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  double *v394;
  float64x2_t *v395;
  double v396;
  float64x2_t v397;
  unsigned int *v398;
  _QWORD *v399;
  unsigned int *v400;
  unint64_t v401;
  unint64_t v402;
  float64x2_t *v403;
  float64x2_t *v404;
  float64x2_t v405;
  float64x2_t *v406;
  float64x2_t v407;
  float64x2_t *v408;
  float64x2_t v409;
  float64x2_t *v410;
  float64x2_t v411;
  float64x2_t *v412;
  float64x2_t v413;
  float64x2_t *v414;
  float64x2_t v415;
  unsigned int *v416;
  unsigned int *v417;
  unint64_t v418;
  unint64_t v419;
  float64x2_t *v420;
  float64x2_t *v421;
  float64x2_t v422;
  float64x2_t *v423;
  float64x2_t v424;
  float64x2_t *v425;
  float64x2_t v426;
  float64x2_t *v427;
  float64x2_t v428;
  float64x2_t *v429;
  float64x2_t v430;
  float64x2_t *v431;
  float64x2_t v432;
  unsigned int *v433;
  unsigned int *v434;
  unint64_t v435;
  unint64_t v436;
  float64x2_t *v437;
  float64x2_t *v438;
  float64x2_t v439;
  float64x2_t *v440;
  float64x2_t v441;
  float64x2_t *v442;
  float64x2_t v443;
  float64x2_t *v444;
  float64x2_t v445;
  float64x2_t *v446;
  float64x2_t v447;
  float64x2_t *v448;
  float64x2_t v449;
  unsigned int *v450;
  unsigned int *v451;
  unint64_t v452;
  unint64_t v453;
  float64x2_t *v454;
  float64x2_t *v455;
  float64x2_t v456;
  float64x2_t *v457;
  float64x2_t v458;
  float64x2_t *v459;
  float64x2_t v460;
  float64x2_t *v461;
  float64x2_t v462;
  float64x2_t *v463;
  float64x2_t v464;
  float64x2_t *v465;
  float64x2_t v466;
  unsigned int *v467;
  unsigned int *v468;
  unint64_t v469;
  unint64_t v470;
  float64x2_t *v471;
  float64x2_t v472;
  float64x2_t v475;
  float64x2_t *v476;
  float64x2_t v477;
  float64x2_t v480;
  float64x2_t *v481;
  float64x2_t v482;
  float64x2_t v485;
  float64x2_t *v486;
  float64x2_t v487;
  float64x2_t v490;
  float64x2_t *v491;
  float64x2_t v492;
  float64x2_t v495;
  float64x2_t *v496;
  float64x2_t v497;
  float64x2_t v500;
  unsigned int *v501;
  unsigned int *v502;
  unint64_t v503;
  unint64_t v504;
  float64x2_t *v505;
  float64x2_t v506;
  float64x2_t v509;
  float64x2_t *v510;
  float64x2_t v511;
  float64x2_t v514;
  float64x2_t *v515;
  float64x2_t v516;
  float64x2_t v519;
  float64x2_t *v520;
  float64x2_t v521;
  float64x2_t v524;
  float64x2_t *v525;
  float64x2_t v526;
  float64x2_t v529;
  float64x2_t *v530;
  float64x2_t v531;
  float64x2_t v534;
  unsigned int *v535;
  unsigned int *v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t ii;
  float64x2_t *v540;
  double v541;
  double v542;
  float64x2_t v543;
  float64x2_t v544;
  unsigned int *v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  double *v549;
  float64x2_t *v550;
  double v551;
  float64x2_t v552;
  unsigned int *v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  double *v558;
  float64x2_t *v559;
  double v560;
  float64x2_t v561;
  uint64_t v562;
  uint64_t v563;
  double *v564;
  float64x2_t *v565;
  double v566;
  float64x2_t v567;
  float64x2_t *v568;
  float64x2_t v569;
  unsigned int *v570;
  unsigned int *v571;
  unint64_t v572;
  unint64_t v573;
  float64x2_t *v574;
  float64x2_t *v575;
  float64x2_t v576;
  float64x2_t *v577;
  float64x2_t v578;
  float64x2_t *v579;
  float64x2_t v580;
  float64x2_t *v581;
  float64x2_t v582;
  float64x2_t *v583;
  float64x2_t v584;
  float64x2_t *v585;
  float64x2_t v586;
  unsigned int *v587;
  unsigned int *v588;
  unint64_t v589;
  unint64_t v590;
  float64x2_t *v591;
  float64x2_t *v592;
  float64x2_t v593;
  float64x2_t *v594;
  float64x2_t v595;
  float64x2_t *v596;
  float64x2_t v597;
  float64x2_t *v598;
  float64x2_t v599;
  float64x2_t *v600;
  float64x2_t v601;
  float64x2_t *v602;
  float64x2_t v603;
  unsigned int *v604;
  unsigned int *v605;
  unint64_t v606;
  unint64_t v607;
  float64x2_t *v608;
  float64x2_t *v609;
  float64x2_t v610;
  float64x2_t *v611;
  float64x2_t v612;
  float64x2_t *v613;
  float64x2_t v614;
  float64x2_t *v615;
  float64x2_t v616;
  float64x2_t *v617;
  float64x2_t v618;
  float64x2_t *v619;
  float64x2_t v620;
  unsigned int *v621;
  unsigned int *v622;
  unint64_t v623;
  unint64_t v624;
  float64x2_t *v625;
  float64x2_t *v626;
  float64x2_t v627;
  float64x2_t *v628;
  float64x2_t v629;
  float64x2_t *v630;
  float64x2_t v631;
  float64x2_t *v632;
  float64x2_t v633;
  float64x2_t *v634;
  float64x2_t v635;
  float64x2_t *v636;
  float64x2_t v637;
  unsigned int *v638;
  unsigned int *v639;
  unint64_t v640;
  unint64_t v641;
  float64x2_t *v642;
  float64x2_t v643;
  float64x2_t v646;
  float64x2_t *v647;
  float64x2_t v648;
  float64x2_t v651;
  float64x2_t *v652;
  float64x2_t v653;
  float64x2_t v656;
  float64x2_t *v657;
  float64x2_t v658;
  float64x2_t v661;
  float64x2_t *v662;
  float64x2_t v663;
  float64x2_t v666;
  float64x2_t *v667;
  float64x2_t v668;
  float64x2_t v671;
  unsigned int *v672;
  unsigned int *v673;
  unint64_t v674;
  unint64_t v675;
  float64x2_t *v676;
  float64x2_t v677;
  float64x2_t v680;
  float64x2_t *v681;
  float64x2_t v682;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v690;
  float64x2_t *v691;
  float64x2_t v692;
  float64x2_t v695;
  float64x2_t *v696;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t *v701;
  float64x2_t v702;
  float64x2_t v705;
  unsigned int *v706;
  unsigned int *v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t jj;
  float64x2_t *v711;
  double v712;
  double v713;
  float64x2_t v714;
  float64x2_t v715;
  unsigned int *v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  double *v720;
  float64x2_t *v721;
  double v722;
  float64x2_t v723;
  unsigned int *v724;
  unint64_t v725;
  unint64_t v726;
  uint64_t v727;
  double *v728;
  float64x2_t *v729;
  double v730;
  float64x2_t v731;
  unsigned int *v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  double *v736;
  float64x2_t *v737;
  double v738;
  float64x2_t v739;
  uint64_t v740;
  float64x2_t *v741;
  float64x2_t v742;
  float64x2_t *v743;
  float64x2_t v744;
  float64x2_t *v745;
  float64x2_t v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t *v749;
  float64x2_t v750;
  unsigned int *v751;
  unsigned int *v752;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  float64x2_t *v756;
  float64x2_t *v757;
  float64x2_t v758;
  float64x2_t *v759;
  float64x2_t v760;
  float64x2_t *v761;
  float64x2_t v762;
  float64x2_t *v763;
  float64x2_t v764;
  unsigned int *v765;
  unsigned int *v766;
  unint64_t v767;
  unint64_t v768;
  float64x2_t *v769;
  float64x2_t *v770;
  float64x2_t v771;
  float64x2_t *v772;
  float64x2_t v773;
  float64x2_t *v774;
  float64x2_t v775;
  float64x2_t *v776;
  float64x2_t v777;
  unsigned int *v778;
  unsigned int *v779;
  unint64_t v780;
  unint64_t v781;
  float64x2_t *v782;
  float64x2_t *v783;
  float64x2_t v784;
  float64x2_t *v785;
  float64x2_t v786;
  float64x2_t *v787;
  float64x2_t v788;
  float64x2_t *v789;
  float64x2_t v790;
  unsigned int *v791;
  unsigned int *v792;
  unint64_t v793;
  unint64_t v794;
  float64x2_t *v795;
  float64x2_t v796;
  float64x2_t v798;
  float64x2_t *v799;
  float64x2_t v800;
  float64x2_t v802;
  float64x2_t *v803;
  float64x2_t v804;
  float64x2_t v806;
  float64x2_t *v807;
  float64x2_t v808;
  float64x2_t v810;
  unsigned int *v811;
  unsigned int *v812;
  unint64_t v813;
  unint64_t v814;
  float64x2_t *v815;
  float64x2_t v816;
  float64x2_t v818;
  float64x2_t *v819;
  float64x2_t v820;
  float64x2_t v822;
  float64x2_t *v823;
  float64x2_t v824;
  float64x2_t v826;
  float64x2_t *v827;
  float64x2_t v828;
  float64x2_t v830;
  unsigned int *v831;
  unsigned int *v832;
  unint64_t v833;
  unint64_t v834;
  uint64_t kk;
  float64x2_t *v836;
  double v837;
  double v838;
  float64x2_t v839;
  float64x2_t v840;
  unsigned int *v841;
  unint64_t v842;
  unint64_t v843;
  uint64_t v844;
  double *v845;
  float64x2_t *v846;
  double v847;
  float64x2_t v848;
  unsigned int *v849;
  unint64_t v850;
  unint64_t v851;
  uint64_t v852;
  double *v853;
  float64x2_t *v854;
  double v855;
  float64x2_t v856;
  unsigned int *v857;
  unint64_t v858;
  unint64_t v859;
  uint64_t v860;
  double *v861;
  float64x2_t *v862;
  double v863;
  float64x2_t v864;
  unsigned int *v865;
  uint64_t v866;
  unint64_t v867;
  unint64_t v868;
  float64x2_t *v869;
  float64x2_t *v870;
  float64x2_t v871;
  float64x2_t *v872;
  float64x2_t v873;
  float64x2_t *v874;
  float64x2_t v875;
  float64x2_t *v876;
  float64x2_t v877;
  uint64_t v878;
  float64x2_t *v879;
  float64x2_t v880;
  float64x2_t *v881;
  float64x2_t v882;
  float64x2_t *v883;
  float64x2_t v884;
  float64x2_t *v885;
  float64x2_t v886;
  float64x2_t *v887;
  float64x2_t v888;
  unsigned int *v889;
  unsigned int *v890;
  unint64_t v891;
  unint64_t v892;
  float64x2_t *v893;
  float64x2_t *v894;
  float64x2_t v895;
  float64x2_t *v896;
  float64x2_t v897;
  float64x2_t *v898;
  float64x2_t v899;
  float64x2_t *v900;
  float64x2_t v901;
  unsigned int *v902;
  unsigned int *v903;
  unint64_t v904;
  unint64_t v905;
  float64x2_t *v906;
  float64x2_t *v907;
  float64x2_t v908;
  float64x2_t *v909;
  float64x2_t v910;
  float64x2_t *v911;
  float64x2_t v912;
  float64x2_t *v913;
  float64x2_t v914;
  unsigned int *v915;
  unsigned int *v916;
  unint64_t v917;
  unint64_t v918;
  float64x2_t *v919;
  float64x2_t v920;
  float64x2_t v922;
  float64x2_t *v923;
  float64x2_t v924;
  float64x2_t v926;
  float64x2_t *v927;
  float64x2_t v928;
  float64x2_t v930;
  float64x2_t *v931;
  float64x2_t v932;
  float64x2_t v934;
  unsigned int *v935;
  unsigned int *v936;
  unint64_t v937;
  unint64_t v938;
  float64x2_t *v939;
  float64x2_t v940;
  float64x2_t v942;
  float64x2_t *v943;
  float64x2_t v944;
  float64x2_t v946;
  float64x2_t *v947;
  float64x2_t v948;
  float64x2_t v950;
  float64x2_t *v951;
  float64x2_t v952;
  float64x2_t v954;
  unsigned int *v955;
  unsigned int *v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t mm;
  float64x2_t *v960;
  double v961;
  double v962;
  float64x2_t v963;
  float64x2_t v964;
  unsigned int *v965;
  unint64_t v966;
  unint64_t v967;
  uint64_t v968;
  double *v969;
  float64x2_t *v970;
  double v971;
  float64x2_t v972;
  unsigned int *v973;
  unint64_t v974;
  unint64_t v975;
  uint64_t v976;
  double *v977;
  float64x2_t *v978;
  double v979;
  float64x2_t v980;
  unsigned int *v981;
  unint64_t v982;
  unint64_t v983;
  uint64_t v984;
  double *v985;
  float64x2_t *v986;
  double v987;
  float64x2_t v988;
  unsigned int *v989;
  unint64_t v990;
  unint64_t v991;
  float64x2_t *v992;
  float64x2_t *v993;
  float64x2_t v994;
  float64x2_t *v995;
  float64x2_t v996;
  float64x2_t *v997;
  float64x2_t v998;
  float64x2_t *v999;
  float64x2_t v1000;
  unsigned int *v1001;
  unint64_t v1002;
  unint64_t v1003;
  float64x2_t *v1004;
  float64x2_t *v1005;
  float64x2_t v1006;
  float64x2_t *v1007;
  float64x2_t v1008;
  float64x2_t *v1009;
  float64x2_t v1010;
  float64x2_t *v1011;
  float64x2_t v1012;
  uint64_t v1013;
  float64x2_t *v1014;
  float64x2_t v1015;
  float64x2_t *v1016;
  float64x2_t v1017;
  float64x2_t *v1018;
  float64x2_t v1019;
  float64x2_t *v1020;
  float64x2_t v1021;
  float64x2_t *v1022;
  float64x2_t v1023;
  unsigned int *v1024;
  unsigned int *v1025;
  uint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  float64x2_t *v1029;
  float64x2_t *v1030;
  float64x2_t v1031;
  float64x2_t *v1032;
  float64x2_t v1033;
  float64x2_t *v1034;
  float64x2_t v1035;
  float64x2_t *v1036;
  float64x2_t v1037;
  unsigned int *v1038;
  unsigned int *v1039;
  unint64_t v1040;
  unint64_t v1041;
  float64x2_t *v1042;
  float64x2_t v1043;
  float64x2_t v1045;
  float64x2_t *v1046;
  float64x2_t v1047;
  float64x2_t v1049;
  float64x2_t *v1050;
  float64x2_t v1051;
  float64x2_t v1053;
  float64x2_t *v1054;
  float64x2_t v1055;
  float64x2_t v1057;
  unsigned int *v1058;
  unsigned int *v1059;
  unint64_t v1060;
  unint64_t v1061;
  float64x2_t *v1062;
  float64x2_t v1063;
  float64x2_t v1065;
  float64x2_t *v1066;
  float64x2_t v1067;
  float64x2_t v1069;
  float64x2_t *v1070;
  float64x2_t v1071;
  float64x2_t v1073;
  float64x2_t *v1074;
  float64x2_t v1075;
  float64x2_t v1077;
  unsigned int *v1078;
  unsigned int *v1079;
  unint64_t v1080;
  unint64_t v1081;
  uint64_t nn;
  float64x2_t *v1083;
  double v1084;
  double v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  unsigned int *v1088;
  unint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  double *v1092;
  float64x2_t *v1093;
  double v1094;
  float64x2_t v1095;
  unsigned int *v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  double *v1100;
  float64x2_t *v1101;
  double v1102;
  float64x2_t v1103;
  unsigned int *v1104;
  unint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  double *v1108;
  float64x2_t *v1109;
  double v1110;
  float64x2_t v1111;
  unsigned int *v1112;
  unint64_t v1113;
  unint64_t v1114;
  float64x2_t *v1115;
  float64x2_t *v1116;
  float64x2_t v1117;
  float64x2_t *v1118;
  float64x2_t v1119;
  float64x2_t *v1120;
  float64x2_t v1121;
  float64x2_t *v1122;
  float64x2_t v1123;
  unsigned int *v1124;
  unint64_t v1125;
  unint64_t v1126;
  float64x2_t *v1127;
  float64x2_t *v1128;
  float64x2_t v1129;
  float64x2_t *v1130;
  float64x2_t v1131;
  float64x2_t *v1132;
  float64x2_t v1133;
  float64x2_t *v1134;
  float64x2_t v1135;
  unsigned int *v1136;
  uint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  float64x2_t *v1140;
  float64x2_t *v1141;
  float64x2_t v1142;
  float64x2_t *v1143;
  float64x2_t v1144;
  float64x2_t *v1145;
  float64x2_t v1146;
  float64x2_t *v1147;
  float64x2_t v1148;
  uint64_t v1149;
  float64x2_t *v1150;
  float64x2_t v1151;
  float64x2_t *v1152;
  float64x2_t v1153;
  float64x2_t *v1154;
  float64x2_t v1155;
  float64x2_t *v1156;
  float64x2_t v1157;
  float64x2_t *v1158;
  float64x2_t v1159;
  unsigned int *v1160;
  unsigned int *v1161;
  unint64_t v1162;
  unint64_t v1163;
  float64x2_t *v1164;
  float64x2_t v1165;
  float64x2_t v1167;
  float64x2_t *v1168;
  float64x2_t v1169;
  float64x2_t v1171;
  float64x2_t *v1172;
  float64x2_t v1173;
  float64x2_t v1175;
  float64x2_t *v1176;
  float64x2_t v1177;
  float64x2_t v1179;
  unsigned int *v1180;
  unsigned int *v1181;
  unint64_t v1182;
  unint64_t v1183;
  float64x2_t *v1184;
  float64x2_t v1185;
  float64x2_t v1187;
  float64x2_t *v1188;
  float64x2_t v1189;
  float64x2_t v1191;
  float64x2_t *v1192;
  float64x2_t v1193;
  float64x2_t v1195;
  float64x2_t *v1196;
  float64x2_t v1197;
  float64x2_t v1199;
  unsigned int *v1200;
  unsigned int *v1201;
  unint64_t v1202;
  unint64_t v1203;
  float64x2_t *v1204;
  float64x2_t *v1205;
  float64x2_t *v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t *v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t *v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  unsigned int *v1215;
  unint64_t v1216;
  unint64_t v1217;
  float64x2_t *v1218;
  float64x2_t *v1219;
  float64x2_t *v1220;
  float64x2_t v1221;
  float64x2_t *v1222;
  float64x2_t v1223;
  float64x2_t *v1224;
  float64x2_t v1225;
  unsigned int *v1226;
  unint64_t v1227;
  unint64_t v1228;
  float64x2_t *v1229;
  float64x2_t *v1230;
  float64x2_t *v1231;
  float64x2_t v1232;
  float64x2_t *v1233;
  float64x2_t v1234;
  float64x2_t *v1235;
  float64x2_t v1236;
  unsigned int *v1237;
  unint64_t v1238;
  unint64_t v1239;
  float64x2_t *v1240;
  float64x2_t *v1241;
  float64x2_t *v1242;
  float64x2_t v1243;
  float64x2_t *v1244;
  float64x2_t v1245;
  float64x2_t *v1246;
  float64x2_t v1247;
  unsigned int *v1248;
  unint64_t v1249;
  unint64_t v1250;
  float64x2_t *v1251;
  float64x2_t *v1252;
  float64x2_t v1253;
  float64x2_t *v1254;
  float64x2_t v1255;
  float64x2_t *v1256;
  float64x2_t v1257;
  unsigned int *v1258;
  unint64_t v1259;
  unint64_t v1260;
  float64x2_t *v1261;
  float64x2_t *v1262;
  float64x2_t v1263;
  float64x2_t *v1264;
  float64x2_t v1265;
  float64x2_t *v1266;
  float64x2_t v1267;
  unsigned int *v1268;
  unint64_t v1269;
  unint64_t v1270;
  float64x2_t *v1271;
  float64x2_t *v1272;
  float64x2_t v1273;
  float64x2_t *v1274;
  float64x2_t v1275;
  float64x2_t *v1276;
  float64x2_t v1277;
  unsigned int *v1278;
  unint64_t v1279;
  unint64_t v1280;
  float64x2_t *v1281;
  float64x2_t *v1282;
  float64x2_t v1283;
  float64x2_t *v1284;
  float64x2_t v1285;
  float64x2_t *v1286;
  float64x2_t v1287;
  uint64_t v1288;
  float64x2_t *v1289;
  float64x2_t v1290;
  float64x2_t *v1294;
  float64x2_t v1295;
  float64x2_t *v1299;
  float64x2_t v1300;
  float64x2_t v1304;
  uint64_t v1305;
  unsigned int *v1308;
  unsigned int *v1309;
  uint64_t v1310;
  unint64_t v1311;
  unint64_t v1312;
  float64x2_t *v1313;
  float64x2_t v1314;
  float64x2_t v1316;
  float64x2_t *v1317;
  float64x2_t v1318;
  float64x2_t v1320;
  float64x2_t *v1321;
  float64x2_t v1322;
  float64x2_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  unint64_t v1327;
  float64x2_t *v1328;
  float64x2_t *v1329;
  float64x2_t *v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t *v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t *v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  unsigned int *v1339;
  unint64_t v1340;
  unint64_t v1341;
  float64x2_t *v1342;
  float64x2_t *v1343;
  float64x2_t *v1344;
  float64x2_t v1345;
  float64x2_t *v1346;
  float64x2_t v1347;
  float64x2_t *v1348;
  float64x2_t v1349;
  unsigned int *v1350;
  unint64_t v1351;
  unint64_t v1352;
  float64x2_t *v1353;
  float64x2_t *v1354;
  float64x2_t *v1355;
  float64x2_t v1356;
  float64x2_t *v1357;
  float64x2_t v1358;
  float64x2_t *v1359;
  float64x2_t v1360;
  unsigned int *v1361;
  unint64_t v1362;
  unint64_t v1363;
  float64x2_t *v1364;
  float64x2_t *v1365;
  float64x2_t *v1366;
  float64x2_t v1367;
  float64x2_t *v1368;
  float64x2_t v1369;
  float64x2_t *v1370;
  float64x2_t v1371;
  unsigned int *v1372;
  unint64_t v1373;
  unint64_t v1374;
  float64x2_t *v1375;
  float64x2_t *v1376;
  float64x2_t v1377;
  float64x2_t *v1378;
  float64x2_t v1379;
  float64x2_t *v1380;
  float64x2_t v1381;
  unsigned int *v1382;
  unint64_t v1383;
  unint64_t v1384;
  float64x2_t *v1385;
  float64x2_t *v1386;
  float64x2_t v1387;
  float64x2_t *v1388;
  float64x2_t v1389;
  float64x2_t *v1390;
  float64x2_t v1391;
  unsigned int *v1392;
  unint64_t v1393;
  unint64_t v1394;
  float64x2_t *v1395;
  float64x2_t *v1396;
  float64x2_t v1397;
  float64x2_t *v1398;
  float64x2_t v1399;
  float64x2_t *v1400;
  float64x2_t v1401;
  unsigned int *v1402;
  unint64_t v1403;
  unint64_t v1404;
  float64x2_t *v1405;
  float64x2_t *v1406;
  float64x2_t v1407;
  float64x2_t *v1408;
  float64x2_t v1409;
  float64x2_t *v1410;
  float64x2_t v1411;
  unsigned int *v1412;
  uint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  float64x2_t *v1416;
  float64x2_t v1417;
  float64x2_t v1419;
  float64x2_t *v1420;
  float64x2_t v1421;
  float64x2_t v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  float64x2_t v1427;
  uint64_t v1428;
  float64x2_t *v1429;
  float64x2_t v1430;
  float64x2_t *v1434;
  float64x2_t v1435;
  float64x2_t *v1439;
  float64x2_t v1440;
  float64x2_t v1444;
  uint64_t v1445;
  unsigned int *v1448;
  unsigned int *v1449;
  _QWORD *v1450;
  unint64_t v1451;
  unint64_t v1452;
  float64x2_t *v1453;
  float64x2_t *v1454;
  float64x2_t *v1455;
  float64x2_t v1456;
  unsigned int *v1457;
  unint64_t v1458;
  unint64_t v1459;
  float64x2_t *v1460;
  float64x2_t *v1461;
  float64x2_t *v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  unsigned int *v1465;
  unint64_t v1466;
  unint64_t v1467;
  float64x2_t *v1468;
  float64x2_t *v1469;
  float64x2_t *v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  unsigned int *v1473;
  unint64_t v1474;
  unint64_t v1475;
  float64x2_t *v1476;
  float64x2_t *v1477;
  float64x2_t *v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  unsigned int *v1481;
  unint64_t v1482;
  unint64_t v1483;
  float64x2_t *v1484;
  float64x2_t *v1485;
  float64x2_t v1486;
  unsigned int *v1487;
  unint64_t v1488;
  unint64_t v1489;
  float64x2_t *v1490;
  float64x2_t *v1491;
  float64x2_t v1492;
  unsigned int *v1493;
  unint64_t v1494;
  unint64_t v1495;
  float64x2_t *v1496;
  float64x2_t *v1497;
  float64x2_t v1498;
  unsigned int *v1499;
  unint64_t v1500;
  unint64_t v1501;
  float64x2_t *v1502;
  float64x2_t *v1503;
  float64x2_t v1504;
  unsigned int *v1505;
  unint64_t v1506;
  unint64_t v1507;
  float64x2_t *v1508;
  float64x2_t v1509;
  float64x2_t v1511;
  unsigned int *v1512;
  unint64_t v1513;
  unint64_t v1514;
  float64x2_t *v1515;
  float64x2_t v1516;
  float64x2_t v1518;
  uint64_t v1519;
  _DWORD *v1525;
  unsigned int **v1526;
  float64x2_t *v1527;
  _QWORD *v1528;
  float64x2_t v1529;
  _QWORD *v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2x2_t v1578;
  float64x2x2_t v1579;
  float64x2x2_t v1580;
  float64x2x2_t v1581;
  float64x2x2_t v1582;
  float64x2x2_t v1583;
  float64x2x2_t v1584;
  float64x2x2_t v1585;
  float64x2x2_t v1586;
  float64x2x2_t v1587;
  float64x2x2_t v1588;
  float64x2x2_t v1589;
  float64x2x2_t v1590;
  float64x2x2_t v1591;
  float64x2x2_t v1592;
  float64x2x2_t v1593;
  float64x2x2_t v1594;
  float64x2x2_t v1595;
  float64x2x2_t v1596;
  float64x2x2_t v1597;
  float64x2x2_t v1598;
  float64x2x2_t v1599;
  float64x2x2_t v1600;
  float64x2x2_t v1601;
  float64x2x2_t v1602;
  float64x2x2_t v1603;
  float64x2x2_t v1604;
  float64x2x2_t v1605;
  float64x2x2_t v1606;
  float64x2x2_t v1607;
  float64x2x2_t v1608;
  float64x2x2_t v1609;
  float64x2x2_t v1610;
  float64x2x2_t v1611;
  float64x2x2_t v1612;
  float64x2x2_t v1613;
  float64x2x2_t v1614;
  float64x2x2_t v1615;
  float64x2x2_t v1616;
  float64x2x2_t v1617;
  float64x2x2_t v1618;
  float64x2x2_t v1619;
  float64x2x2_t v1620;
  float64x2x2_t v1621;
  float64x2x2_t v1622;
  float64x2x2_t v1623;
  float64x2x2_t v1624;
  float64x2x2_t v1625;
  float64x2x2_t v1626;
  float64x2x2_t v1627;
  float64x2x2_t v1628;
  float64x2x2_t v1629;
  float64x2x2_t v1630;
  float64x2x2_t v1631;
  float64x2x2_t v1632;
  float64x2x2_t v1633;
  float64x2x2_t v1634;
  float64x2x2_t v1635;
  float64x2x2_t v1636;
  float64x2x2_t v1637;
  float64x2x2_t v1638;
  float64x2x2_t v1639;
  float64x2x2_t v1640;
  float64x2x2_t v1641;
  float64x2x2_t v1642;
  float64x2x2_t v1643;
  float64x2x2_t v1644;
  float64x2x2_t v1645;
  float64x2x2_t v1646;
  float64x2x2_t v1647;
  float64x2x2_t v1648;
  float64x2x2_t v1649;
  float64x2x2_t v1650;
  float64x2x2_t v1651;
  float64x2x2_t v1652;
  float64x2x2_t v1653;
  float64x2x2_t v1654;
  float64x2x2_t v1655;
  float64x2x2_t v1656;
  float64x2x2_t v1657;
  float64x2x2_t v1658;
  float64x2x2_t v1659;
  float64x2x2_t v1660;
  float64x2x2_t v1661;
  float64x2x2_t v1662;
  float64x2x2_t v1663;
  float64x2x2_t v1664;
  float64x2x2_t v1665;
  float64x2x2_t v1666;
  float64x2x2_t v1667;
  float64x2x2_t v1668;
  float64x2x2_t v1669;
  float64x2x2_t v1670;
  float64x2x2_t v1671;
  float64x2x2_t v1672;
  float64x2x2_t v1673;
  float64x2x2_t v1674;
  float64x2x2_t v1675;
  float64x2x2_t v1676;
  float64x2x2_t v1677;
  float64x2x2_t v1678;
  float64x2x2_t v1679;
  float64x2x2_t v1680;
  float64x2x2_t v1681;
  float64x2x2_t v1682;
  float64x2x2_t v1683;
  float64x2x2_t v1684;
  float64x2x2_t v1685;
  float64x2x2_t v1686;
  float64x2x2_t v1687;
  float64x2x2_t v1688;
  float64x2x2_t v1689;
  float64x2x2_t v1690;
  float64x2x2_t v1691;
  float64x2x2_t v1692;
  float64x2x2_t v1693;
  float64x2x2_t v1694;
  float64x2x2_t v1695;
  float64x2x2_t v1696;
  float64x2x2_t v1697;
  float64x2x2_t v1698;
  float64x2x2_t v1699;
  float64x2x2_t v1700;
  float64x2x2_t v1701;
  float64x2x2_t v1702;
  float64x2x2_t v1703;
  float64x2x2_t v1704;
  float64x2x2_t v1705;
  float64x2x2_t v1706;
  float64x2x2_t v1707;
  float64x2x2_t v1708;
  float64x2x2_t v1709;
  float64x2x2_t v1710;
  float64x2x2_t v1711;
  float64x2x2_t v1712;
  float64x2x2_t v1713;
  float64x2x2_t v1714;
  float64x2x2_t v1715;
  float64x2x2_t v1716;
  float64x2x2_t v1717;
  float64x2x2_t v1718;
  float64x2x2_t v1719;
  float64x2x2_t v1720;
  float64x2x2_t v1721;
  float64x2x2_t v1722;
  float64x2x2_t v1723;
  float64x2x2_t v1724;
  float64x2x2_t v1725;
  float64x2x2_t v1726;
  float64x2x2_t v1727;
  float64x2x2_t v1728;
  float64x2x2_t v1729;
  float64x2x2_t v1730;
  float64x2x2_t v1731;
  float64x2x2_t v1732;
  float64x2x2_t v1733;
  float64x2x2_t v1734;
  float64x2x2_t v1735;
  float64x2x2_t v1736;
  float64x2x2_t v1737;
  float64x2x2_t v1738;
  float64x2x2_t v1739;
  float64x2x2_t v1740;
  float64x2x2_t v1741;
  float64x2x2_t v1742;
  float64x2x2_t v1743;
  float64x2x2_t v1744;
  float64x2x2_t v1745;
  float64x2x2_t v1746;
  float64x2x2_t v1747;
  float64x2x2_t v1748;
  float64x2x2_t v1749;
  float64x2x2_t v1750;
  float64x2x2_t v1751;
  float64x2x2_t v1752;
  float64x2x2_t v1753;
  float64x2x2_t v1754;
  float64x2x2_t v1755;
  float64x2x2_t v1756;
  float64x2x2_t v1757;
  float64x2x2_t v1758;
  float64x2x2_t v1759;
  float64x2x2_t v1760;
  float64x2x2_t v1761;
  float64x2x2_t v1762;
  float64x2x2_t v1763;
  float64x2x2_t v1764;
  float64x2x2_t v1765;
  float64x2x2_t v1766;
  float64x2x2_t v1767;
  float64x2x2_t v1768;
  float64x2x2_t v1769;
  float64x2x2_t v1770;
  float64x2x2_t v1771;
  float64x2x2_t v1772;
  float64x2x2_t v1773;
  float64x2x2_t v1774;
  float64x2x2_t v1775;
  float64x2x2_t v1776;
  float64x2x2_t v1777;
  float64x2x2_t v1778;
  float64x2x2_t v1779;
  float64x2x2_t v1780;
  float64x2x2_t v1781;
  float64x2x2_t v1782;
  float64x2x2_t v1783;
  float64x2x2_t v1784;
  float64x2x2_t v1785;
  float64x2x2_t v1786;
  float64x2x2_t v1787;
  float64x2x2_t v1788;
  float64x2x2_t v1789;
  float64x2x2_t v1790;
  float64x2x2_t v1791;
  float64x2x2_t v1792;
  float64x2x2_t v1793;
  float64x2x2_t v1794;
  float64x2x2_t v1795;
  float64x2x2_t v1796;
  float64x2x2_t v1797;
  float64x2x2_t v1798;
  float64x2x2_t v1799;
  float64x2x2_t v1800;
  float64x2x2_t v1801;
  float64x2x2_t v1802;
  float64x2x2_t v1803;
  float64x2x2_t v1804;
  float64x2x2_t v1805;
  float64x2x2_t v1806;
  float64x2x2_t v1807;
  float64x2x2_t v1808;
  float64x2x2_t v1809;
  float64x2x2_t v1810;
  float64x2x2_t v1811;
  float64x2x2_t v1812;
  float64x2x2_t v1813;
  float64x2x2_t v1814;
  float64x2x2_t v1815;
  float64x2x2_t v1816;
  float64x2x2_t v1817;
  float64x2x2_t v1818;
  float64x2x2_t v1819;
  float64x2x2_t v1820;
  float64x2x2_t v1821;
  float64x2x2_t v1822;
  float64x2x2_t v1823;
  float64x2x2_t v1824;
  float64x2x2_t v1825;
  float64x2x2_t v1826;
  float64x2x2_t v1827;
  float64x2x2_t v1828;
  float64x2x2_t v1829;
  float64x2x2_t v1830;
  float64x2x2_t v1831;
  float64x2x2_t v1832;
  float64x2x2_t v1833;
  float64x2x2_t v1834;
  float64x2x2_t v1835;
  float64x2x2_t v1836;
  float64x2x2_t v1837;
  float64x2x2_t v1838;
  float64x2x2_t v1839;
  float64x2x2_t v1840;
  float64x2x2_t v1841;
  float64x2x2_t v1842;
  float64x2x2_t v1843;
  float64x2x2_t v1844;
  float64x2x2_t v1845;
  float64x2x2_t v1846;
  float64x2x2_t v1847;
  float64x2x2_t v1848;
  float64x2x2_t v1849;
  float64x2x2_t v1850;
  float64x2x2_t v1851;
  float64x2x2_t v1852;
  float64x2x2_t v1853;
  float64x2x2_t v1854;
  float64x2x2_t v1855;
  float64x2x2_t v1856;
  float64x2x2_t v1857;
  float64x2x2_t v1858;
  float64x2x2_t v1859;
  float64x2x2_t v1860;
  float64x2x2_t v1861;
  float64x2x2_t v1862;
  float64x2x2_t v1863;
  float64x2x2_t v1864;
  float64x2x2_t v1865;
  float64x2x2_t v1866;
  float64x2x2_t v1867;
  float64x2x2_t v1868;
  float64x2x2_t v1869;
  float64x2x2_t v1870;
  float64x2x2_t v1871;
  float64x2x2_t v1872;
  float64x2x2_t v1873;
  float64x2x2_t v1874;
  float64x2x2_t v1875;
  float64x2x2_t v1876;
  float64x2x2_t v1877;
  float64x2x2_t v1878;
  float64x2x2_t v1879;
  float64x2x2_t v1880;
  float64x2x2_t v1881;
  float64x2x2_t v1882;
  float64x2x2_t v1883;
  float64x2x2_t v1884;
  float64x2x2_t v1885;
  float64x2x2_t v1886;
  float64x2x2_t v1887;
  float64x2x2_t v1888;
  float64x2x2_t v1889;
  float64x2x2_t v1890;
  float64x2x2_t v1891;
  float64x2x2_t v1892;
  float64x2x2_t v1893;
  float64x2x2_t v1894;
  float64x2x2_t v1895;
  float64x2x2_t v1896;
  float64x2x2_t v1897;
  float64x2x2_t v1898;
  float64x2x2_t v1899;
  float64x2x2_t v1900;
  float64x2x2_t v1901;
  float64x2x2_t v1902;
  float64x2x2_t v1903;
  float64x2x2_t v1904;
  float64x2x2_t v1905;
  float64x2x2_t v1906;
  float64x2x2_t v1907;
  float64x2x2_t v1908;
  float64x2x2_t v1909;
  float64x2x2_t v1910;
  float64x2x2_t v1911;
  float64x2x2_t v1912;
  float64x2x2_t v1913;
  float64x2x2_t v1914;
  float64x2x2_t v1915;
  float64x2x2_t v1916;
  float64x2x2_t v1917;
  float64x2x2_t v1918;
  float64x2x2_t v1919;
  float64x2x2_t v1920;
  float64x2x2_t v1921;
  float64x2x2_t v1922;
  float64x2x2_t v1923;
  float64x2x2_t v1924;
  float64x2x2_t v1925;
  float64x2x2_t v1926;
  float64x2x2_t v1927;
  float64x2x2_t v1928;
  float64x2x2_t v1929;
  float64x2x2_t v1930;
  float64x2x2_t v1931;
  float64x2x2_t v1932;
  float64x2x2_t v1933;
  float64x2x2_t v1934;
  float64x2x2_t v1935;
  float64x2x2_t v1936;
  float64x2x2_t v1937;
  float64x2x2_t v1938;
  float64x2x2_t v1939;
  float64x2x2_t v1940;
  float64x2x2_t v1941;
  float64x2x2_t v1942;
  float64x2x2_t v1943;
  float64x2x2_t v1944;
  float64x2x2_t v1945;
  float64x2x2_t v1946;
  float64x2x2_t v1947;
  float64x2x2_t v1948;
  float64x2x2_t v1949;
  float64x2x2_t v1950;
  float64x2x2_t v1951;
  float64x2x2_t v1952;
  float64x2x2_t v1953;
  float64x2x2_t v1954;
  float64x2x2_t v1955;
  float64x2x2_t v1956;
  float64x2x2_t v1957;
  float64x2x2_t v1958;
  float64x2x2_t v1959;
  float64x2x2_t v1960;
  float64x2x2_t v1961;
  float64x2x2_t v1962;
  float64x2x2_t v1963;
  float64x2x2_t v1964;
  float64x2x2_t v1965;
  float64x2x2_t v1966;
  float64x2x2_t v1967;
  float64x2x2_t v1968;
  float64x2x2_t v1969;
  float64x2x2_t v1970;
  float64x2x2_t v1971;
  float64x2x2_t v1972;
  float64x2x2_t v1973;
  float64x2x2_t v1974;
  float64x2x2_t v1975;
  float64x2x2_t v1976;
  float64x2x2_t v1977;
  float64x2x2_t v1978;
  float64x2x2_t v1979;
  float64x2x2_t v1980;
  float64x2x2_t v1981;
  float64x2x2_t v1982;
  float64x2x2_t v1983;
  float64x2x2_t v1984;
  float64x2x2_t v1985;
  float64x2x2_t v1986;
  float64x2x2_t v1987;
  float64x2x2_t v1988;
  float64x2x2_t v1989;
  float64x2x2_t v1990;
  float64x2x2_t v1991;
  float64x2x2_t v1992;
  float64x2x2_t v1993;
  float64x2x2_t v1994;
  float64x2x2_t v1995;
  float64x2x2_t v1996;
  float64x2x2_t v1997;
  float64x2x2_t v1998;
  float64x2x2_t v1999;
  float64x2x2_t v2000;
  float64x2x2_t v2001;
  float64x2x2_t v2002;
  float64x2x2_t v2003;
  float64x2x2_t v2004;
  float64x2x2_t v2005;
  float64x2x2_t v2006;
  float64x2x2_t v2007;
  float64x2x2_t v2008;
  float64x2x2_t v2009;
  float64x2x2_t v2010;
  float64x2x2_t v2011;
  float64x2x2_t v2012;
  float64x2x2_t v2013;
  float64x2x2_t v2014;
  float64x2x2_t v2015;
  float64x2x2_t v2016;
  float64x2x2_t v2017;
  float64x2x2_t v2018;
  float64x2x2_t v2019;
  float64x2x2_t v2020;
  float64x2x2_t v2021;
  float64x2x2_t v2022;
  float64x2x2_t v2023;
  float64x2x2_t v2024;
  float64x2x2_t v2025;
  float64x2x2_t v2026;
  float64x2x2_t v2027;
  float64x2x2_t v2028;
  float64x2x2_t v2029;
  float64x2x2_t v2030;
  float64x2x2_t v2031;
  float64x2x2_t v2032;
  float64x2x2_t v2033;
  float64x2x2_t v2034;
  float64x2x2_t v2035;
  float64x2x2_t v2036;
  float64x2x2_t v2037;
  float64x2x2_t v2038;
  float64x2x2_t v2039;
  float64x2x2_t v2040;
  float64x2x2_t v2041;
  float64x2x2_t v2042;
  float64x2x2_t v2043;
  float64x2x2_t v2044;
  float64x2x2_t v2045;
  float64x2x2_t v2046;
  float64x2x2_t v2047;
  float64x2x2_t v2048;
  float64x2x2_t v2049;
  float64x2x2_t v2050;
  float64x2x2_t v2051;
  float64x2x2_t v2052;
  float64x2x2_t v2053;
  float64x2x2_t v2054;
  float64x2x2_t v2055;
  float64x2x2_t v2056;
  float64x2x2_t v2057;
  float64x2x2_t v2058;
  float64x2x2_t v2059;
  float64x2x2_t v2060;
  float64x2x2_t v2061;
  float64x2x2_t v2062;
  float64x2x2_t v2063;
  float64x2x2_t v2064;
  float64x2x2_t v2065;
  float64x2x2_t v2066;
  float64x2x2_t v2067;
  float64x2x2_t v2068;
  float64x2x2_t v2069;
  float64x2x2_t v2070;
  float64x2x2_t v2071;
  float64x2x2_t v2072;
  float64x2x2_t v2073;
  float64x2x2_t v2074;
  float64x2x2_t v2075;
  float64x2x2_t v2076;
  float64x2x2_t v2077;
  float64x2x2_t v2078;
  float64x2x2_t v2079;
  float64x2x2_t v2080;
  float64x2x2_t v2081;
  float64x2x2_t v2082;
  float64x2x2_t v2083;
  float64x2x2_t v2084;
  float64x2x2_t v2085;
  float64x2x2_t v2086;
  float64x2x2_t v2087;
  float64x2x2_t v2088;
  float64x2x2_t v2089;
  float64x2x2_t v2090;
  float64x2x2_t v2091;
  float64x2x2_t v2092;
  float64x2x2_t v2093;
  float64x2x2_t v2094;
  float64x2x2_t v2095;
  float64x2x2_t v2096;
  float64x2x2_t v2097;
  float64x2x2_t v2098;
  float64x2x2_t v2099;
  float64x2x2_t v2100;
  float64x2x2_t v2101;
  float64x2x2_t v2102;
  float64x2x2_t v2103;
  float64x2x2_t v2104;
  float64x2x2_t v2105;
  float64x2x2_t v2106;
  float64x2x2_t v2107;
  float64x2x2_t v2108;
  float64x2x2_t v2109;
  float64x2x2_t v2110;
  float64x2x2_t v2111;
  float64x2x2_t v2112;
  float64x2x2_t v2113;
  float64x2x2_t v2114;
  float64x2x2_t v2115;
  float64x2x2_t v2116;
  float64x2x2_t v2117;
  float64x2x2_t v2118;
  float64x2x2_t v2119;
  float64x2x2_t v2120;
  float64x2x2_t v2121;
  float64x2x2_t v2122;
  float64x2x2_t v2123;
  float64x2x2_t v2124;
  float64x2x2_t v2125;
  float64x2x2_t v2126;
  float64x2x2_t v2127;
  float64x2x2_t v2128;
  float64x2x2_t v2129;
  float64x2x2_t v2130;
  float64x2x2_t v2131;
  float64x2x2_t v2132;
  float64x2x2_t v2133;
  float64x2x2_t v2134;
  float64x2x2_t v2135;
  float64x2x2_t v2136;
  float64x2x2_t v2137;
  float64x2x2_t v2138;
  float64x2x2_t v2139;
  float64x2x2_t v2140;
  float64x2x2_t v2141;
  float64x2x2_t v2142;
  float64x2x2_t v2143;
  float64x2x2_t v2144;
  float64x2x2_t v2145;
  float64x2x2_t v2146;
  float64x2x2_t v2147;
  float64x2x2_t v2148;
  float64x2x2_t v2149;
  float64x2x2_t v2150;
  float64x2x2_t v2151;
  float64x2x2_t v2152;
  float64x2x2_t v2153;
  float64x2x2_t v2154;
  float64x2x2_t v2155;
  float64x2x2_t v2156;
  float64x2x2_t v2157;
  float64x2x2_t v2158;
  float64x2x2_t v2159;
  float64x2x2_t v2160;
  float64x2x2_t v2161;
  float64x2x2_t v2162;
  float64x2x2_t v2163;
  float64x2x2_t v2164;
  float64x2x2_t v2165;
  float64x2x2_t v2166;
  float64x2x2_t v2167;
  float64x2x2_t v2168;
  float64x2x2_t v2169;
  float64x2x2_t v2170;
  float64x2x2_t v2171;
  float64x2x2_t v2172;
  float64x2x2_t v2173;
  float64x2x2_t v2174;
  float64x2x2_t v2175;
  float64x2x2_t v2176;
  float64x2x2_t v2177;
  float64x2x2_t v2178;
  float64x2x2_t v2179;
  float64x2x2_t v2180;
  float64x2x2_t v2181;
  float64x2x2_t v2182;
  float64x2x2_t v2183;
  float64x2x2_t v2184;
  float64x2x2_t v2185;
  float64x2x2_t v2186;
  float64x2x2_t v2187;
  float64x2x2_t v2188;
  float64x2x2_t v2189;
  float64x2x2_t v2190;
  float64x2x2_t v2191;
  float64x2x2_t v2192;
  float64x2x2_t v2193;
  float64x2x2_t v2194;
  float64x2x2_t v2195;
  float64x2x2_t v2196;
  float64x2x2_t v2197;
  float64x2x2_t v2198;
  float64x2x2_t v2199;
  float64x2x2_t v2200;
  float64x2x2_t v2201;
  float64x2x2_t v2202;
  float64x2x2_t v2203;
  float64x2x2_t v2204;
  float64x2x2_t v2205;
  float64x2x2_t v2206;
  float64x2x2_t v2207;
  float64x2x2_t v2208;
  float64x2x2_t v2209;
  float64x2x2_t v2210;
  float64x2x2_t v2211;
  float64x2x2_t v2212;
  float64x2x2_t v2213;
  float64x2x2_t v2214;
  float64x2x2_t v2215;
  float64x2x2_t v2216;
  float64x2x2_t v2217;
  float64x2x2_t v2218;
  float64x2x2_t v2219;
  float64x2x2_t v2220;
  float64x2x2_t v2221;
  float64x2x2_t v2222;
  float64x2x2_t v2223;
  float64x2x2_t v2224;
  float64x2x2_t v2225;

  v2 = (unsigned int **)(a2 + 56);
  if (((*(unsigned __int8 *)(*(_QWORD *)(a2 + 112) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 120) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 128) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 64) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 72) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 80) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 88) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 96) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 104) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + 4) >> 2) & 1))
  {
    return;
  }
  v5 = a1[1];
  if (!sub_20F556208((_QWORD *)(a2 + 56)))
    return;
  v6 = (float64x2_t *)(a2 + 160);
  v7 = sub_20FC7238C((uint64_t)(v2 - 6), v2, a2 + 160, (uint64_t)&v1531);
  *(_BYTE *)(a2 + 184) = v7;
  if (!v7)
  {
    *(_QWORD *)(a2 + 176) = 0;
    return;
  }
  v8 = *(_QWORD *)(a2 + 192);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2 + 160);
    v9 = *(float64x2_t **)(a2 + 192);
  }
  else
  {
    v9 = 0;
  }
  *(float64x2_t *)(a2 + 144) = *v6;
  v1529 = *(float64x2_t *)(a2 + 160);
  _D1 = v1529.f64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  v16 = *(double *)(v5 + 88);
  v17 = *(double *)(v5 + 96) * (*(double *)(v5 + 80) * _D0);
  v18 = v17 + 1.0;
  *(long double *)(a2 + 176) = v16 * log1p(v17);
  v19 = sqrt(1.0 / v18);
  *(float64x2_t *)(a2 + 160) = vmulq_n_f64(v1529, v19);
  v1526 = v2;
  if (v9)
  {
    sub_20F615608(v2, v9, &v1531, 1.0 / v18);
    v20 = *v2;
  }
  else
  {
    v20 = *v2;
    if (*((_BYTE *)*v2 + 20))
    {
      v1531 = vmulq_n_f64(v1531, v19);
      v1532 = vmulq_n_f64(v1532, v19);
      v1533 = vmulq_n_f64(v1533, v19);
      v1534 = vmulq_n_f64(v1534, v19);
      v1535 = vmulq_n_f64(v1535, v19);
      v1536 = vmulq_n_f64(v1536, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 64) + 20))
    {
      v1537 = vmulq_n_f64(v1537, v19);
      v1538 = vmulq_n_f64(v1538, v19);
      v1539 = vmulq_n_f64(v1539, v19);
      v1540 = vmulq_n_f64(v1540, v19);
      v1541 = vmulq_n_f64(v1541, v19);
      v1542 = vmulq_n_f64(v1542, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 72) + 20))
    {
      v1543 = vmulq_n_f64(v1543, v19);
      v1544 = vmulq_n_f64(v1544, v19);
      v1545 = vmulq_n_f64(v1545, v19);
      v1546 = vmulq_n_f64(v1546, v19);
      v1547 = vmulq_n_f64(v1547, v19);
      v1548 = vmulq_n_f64(v1548, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 80) + 20))
    {
      v1549 = vmulq_n_f64(v1549, v19);
      v1550 = vmulq_n_f64(v1550, v19);
      v1551 = vmulq_n_f64(v1551, v19);
      v1552 = vmulq_n_f64(v1552, v19);
      v1553 = vmulq_n_f64(v1553, v19);
      v1554 = vmulq_n_f64(v1554, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 88) + 20))
    {
      v1557 = vmulq_n_f64(v1557, v19);
      v1558 = vmulq_n_f64(v1558, v19);
      v1555 = vmulq_n_f64(v1555, v19);
      v1556 = vmulq_n_f64(v1556, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 96) + 20))
    {
      v1561 = vmulq_n_f64(v1561, v19);
      v1562 = vmulq_n_f64(v1562, v19);
      v1559 = vmulq_n_f64(v1559, v19);
      v1560 = vmulq_n_f64(v1560, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 104) + 20))
    {
      v1565 = vmulq_n_f64(v1565, v19);
      v1566 = vmulq_n_f64(v1566, v19);
      v1563 = vmulq_n_f64(v1563, v19);
      v1564 = vmulq_n_f64(v1564, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 112) + 20))
    {
      v1569 = vmulq_n_f64(v1569, v19);
      v1570 = vmulq_n_f64(v1570, v19);
      v1567 = vmulq_n_f64(v1567, v19);
      v1568 = vmulq_n_f64(v1568, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 120) + 20))
    {
      v1571 = vmulq_n_f64(v1571, v19);
      v1572 = vmulq_n_f64(v1572, v19);
      v1573 = vmulq_n_f64(v1573, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 128) + 20))
    {
      v1574 = vmulq_n_f64(v1574, v19);
      v1575 = vmulq_n_f64(v1575, v19);
      v1576 = vmulq_n_f64(v1576, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 136) + 20))
      v1577 = vmulq_n_f64(v1577, v19);
  }
  v21 = (_QWORD *)a1[2];
  v1525 = (_DWORD *)a1[3];
  v1528 = v21;
  v1530 = (_QWORD *)v5;
  if (*((_BYTE *)v20 + 20))
  {
    v22 = (float64x2_t *)(a2 + 160);
    v23 = 0;
    v24 = *(_QWORD *)(*(_QWORD *)a1[2] + 8 * (*(_QWORD *)(v5 + 17888) + *v20));
    v25 = (_QWORD *)(v5 + 18232);
    v26 = v24;
    do
    {
      v27 = (float64x2_t *)sub_20F762098(v25, v24, v26, 6u);
      v1578 = vld2q_f64(v1533.f64);
      v2173 = vld2q_f64(v1535.f64);
      v28 = &v1531.f64[v23];
      v29 = vld1q_dup_f64(v28++);
      v30 = vmlaq_n_f64(vmulq_f64(v1578.val[0], v29), v1578.val[1], *v28);
      v1578.val[0] = vaddq_f64(v27[2], vmlaq_n_f64(vmulq_f64(v2173.val[0], v29), v2173.val[1], *v28));
      v1578.val[1] = vaddq_f64(v27[1], v30);
      *v27 = vaddq_f64(*v27, vmlaq_n_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v29), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), *v28));
      v27[1] = v1578.val[1];
      v27[2] = v1578.val[0];
      v23 += 2;
      ++v26;
    }
    while (v23 != 12);
    v31 = (float64x2_t *)(v1530[2270] + 8 * v24);
    v1579 = vld2q_f64(v1533.f64);
    v2174 = vld2q_f64(v1535.f64);
    v6 = (float64x2_t *)(a2 + 160);
    v32 = vmlaq_laneq_f64(vmulq_n_f64(v1579.val[0], v22->f64[0]), v1579.val[1], *v22, 1);
    v1579.val[0] = vsubq_f64(v31[2], vmlaq_laneq_f64(vmulq_n_f64(v2174.val[0], v22->f64[0]), v2174.val[1], *v22, 1));
    v1579.val[1] = vsubq_f64(v31[1], v32);
    *v31 = vsubq_f64(*v31, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v22->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), *v22, 1));
    v31[1] = v1579.val[1];
    v31[2] = v1579.val[0];
    v20 = *v1526;
    v21 = v1528;
  }
  v1527 = v6;
  v33 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v33 + 20))
  {
    v34 = v1530;
    if (!*((_BYTE *)v20 + 20))
      goto LABEL_43;
    v35 = v1530[2236];
    v36 = *(_QWORD *)(*v21 + 8 * (v35 + *v33));
    v37 = *(_QWORD *)(*v21 + 8 * (v35 + *v20));
    if (v36 > v37)
      goto LABEL_43;
    for (i = 0; i != 12; i += 2)
    {
      v39 = (float64x2_t *)sub_20F762098(v1530 + 2279, v36, v37, 6u);
      v1580 = vld2q_f64(v1537.f64);
      v1828 = vld2q_f64(v1539.f64);
      v2145 = vld2q_f64(v1541.f64);
      v40 = &v1531.f64[i];
      v41 = vld1q_dup_f64(v40++);
      v42 = vmlaq_n_f64(vmulq_f64(v1580.val[0], v41), v1580.val[1], *v40);
      v1580.val[1] = vaddq_f64(v39[2], vmlaq_n_f64(vmulq_f64(v2145.val[0], v41), v2145.val[1], *v40));
      v1580.val[0] = vaddq_f64(v39[1], vmlaq_n_f64(vmulq_f64(v1828.val[0], v41), v1828.val[1], *v40));
      *v39 = vaddq_f64(*v39, v42);
      *(float64x2x2_t *)v39[1].f64 = v1580;
      LODWORD(v37) = v37 + 1;
    }
    v20 = *v1526;
  }
  v34 = v1530;
LABEL_43:
  v43 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v43 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v44 = *(_QWORD *)(*v21 + 8 * (v34[2233] + *v43));
      v45 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v44 <= v45)
      {
        for (j = 0; j != 12; j += 2)
        {
          v47 = (float64x2_t *)sub_20F762098(v34 + 2279, v44, v45, 6u);
          v1581 = vld2q_f64(v1543.f64);
          v1829 = vld2q_f64(v1545.f64);
          v2146 = vld2q_f64(v1547.f64);
          v48 = &v1531.f64[j];
          v49 = vld1q_dup_f64(v48++);
          v50 = vmlaq_n_f64(vmulq_f64(v1581.val[0], v49), v1581.val[1], *v48);
          v1581.val[1] = vaddq_f64(v47[2], vmlaq_n_f64(vmulq_f64(v2146.val[0], v49), v2146.val[1], *v48));
          v1581.val[0] = vaddq_f64(v47[1], vmlaq_n_f64(vmulq_f64(v1829.val[0], v49), v1829.val[1], *v48));
          *v47 = vaddq_f64(*v47, v50);
          *(float64x2x2_t *)v47[1].f64 = v1581;
          LODWORD(v45) = v45 + 1;
        }
        v20 = *v1526;
        v34 = v1530;
      }
    }
  }
  v51 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v51 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v52 = *(_QWORD *)(*v21 + 8 * (v34[2233] + *v51));
      v53 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v52 <= v53)
      {
        for (k = 0; k != 12; k += 2)
        {
          v55 = (float64x2_t *)sub_20F762098(v34 + 2279, v52, v53, 6u);
          v1582 = vld2q_f64(v1549.f64);
          v1830 = vld2q_f64(v1551.f64);
          v2147 = vld2q_f64(v1553.f64);
          v56 = &v1531.f64[k];
          v57 = vld1q_dup_f64(v56++);
          v58 = vmlaq_n_f64(vmulq_f64(v1582.val[0], v57), v1582.val[1], *v56);
          v1582.val[1] = vaddq_f64(v55[2], vmlaq_n_f64(vmulq_f64(v2147.val[0], v57), v2147.val[1], *v56));
          v1582.val[0] = vaddq_f64(v55[1], vmlaq_n_f64(vmulq_f64(v1830.val[0], v57), v1830.val[1], *v56));
          *v55 = vaddq_f64(*v55, v58);
          *(float64x2x2_t *)v55[1].f64 = v1582;
          LODWORD(v53) = v53 + 1;
        }
        v20 = *v1526;
        v34 = v1530;
      }
    }
  }
  v59 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v59 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v60 = *(_QWORD *)(*v21 + 8 * (v34[2237] + *v59));
      v61 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v60 <= v61)
      {
        v62 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2237] + *v59)), v61, 4u);
        v1583 = vld2q_f64(v1555.f64);
        v63 = &v1557;
        v1831 = vld2q_f64(v63->f64);
        v64 = vmlaq_n_f64(vmulq_n_f64(v1583.val[0], v1531.f64[0]), v1583.val[1], v1531.f64[1]);
        v1583.val[0] = vaddq_f64(v62[1], vmlaq_n_f64(vmulq_n_f64(v1831.val[0], v1531.f64[0]), v1831.val[1], v1531.f64[1]));
        *v62 = vaddq_f64(*v62, v64);
        v62[1] = v1583.val[0];
        v65 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 1, 4u);
        v1584 = vld2q_f64(v1555.f64);
        v1832 = vld2q_f64(v63->f64);
        v66 = vmlaq_n_f64(vmulq_n_f64(v1584.val[0], v1532.f64[0]), v1584.val[1], v1532.f64[1]);
        v1584.val[0] = vaddq_f64(v65[1], vmlaq_n_f64(vmulq_n_f64(v1832.val[0], v1532.f64[0]), v1832.val[1], v1532.f64[1]));
        *v65 = vaddq_f64(*v65, v66);
        v65[1] = v1584.val[0];
        v67 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 2, 4u);
        v1585 = vld2q_f64(v1555.f64);
        v1833 = vld2q_f64(v63->f64);
        v68 = vmlaq_n_f64(vmulq_n_f64(v1585.val[0], v1533.f64[0]), v1585.val[1], v1533.f64[1]);
        v1585.val[0] = vaddq_f64(v67[1], vmlaq_n_f64(vmulq_n_f64(v1833.val[0], v1533.f64[0]), v1833.val[1], v1533.f64[1]));
        *v67 = vaddq_f64(*v67, v68);
        v67[1] = v1585.val[0];
        v69 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 3, 4u);
        v1586 = vld2q_f64(v1555.f64);
        v1834 = vld2q_f64(v63->f64);
        v70 = vmlaq_n_f64(vmulq_n_f64(v1586.val[0], v1534.f64[0]), v1586.val[1], v1534.f64[1]);
        v1586.val[0] = vaddq_f64(v69[1], vmlaq_n_f64(vmulq_n_f64(v1834.val[0], v1534.f64[0]), v1834.val[1], v1534.f64[1]));
        *v69 = vaddq_f64(*v69, v70);
        v69[1] = v1586.val[0];
        v71 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 4, 4u);
        v1587 = vld2q_f64(v1555.f64);
        v1835 = vld2q_f64(v63->f64);
        v72 = vmlaq_n_f64(vmulq_n_f64(v1587.val[0], v1535.f64[0]), v1587.val[1], v1535.f64[1]);
        v1587.val[0] = vaddq_f64(v71[1], vmlaq_n_f64(vmulq_n_f64(v1835.val[0], v1535.f64[0]), v1835.val[1], v1535.f64[1]));
        *v71 = vaddq_f64(*v71, v72);
        v71[1] = v1587.val[0];
        v73 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 5, 4u);
        v1588 = vld2q_f64(v1555.f64);
        v1836 = vld2q_f64(v63->f64);
        v74 = vmlaq_n_f64(vmulq_n_f64(v1588.val[0], v1536.f64[0]), v1588.val[1], v1536.f64[1]);
        v1588.val[0] = vaddq_f64(v73[1], vmlaq_n_f64(vmulq_n_f64(v1836.val[0], v1536.f64[0]), v1836.val[1], v1536.f64[1]));
        *v73 = vaddq_f64(*v73, v74);
        v73[1] = v1588.val[0];
        v20 = *v1526;
      }
    }
  }
  v75 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v75 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v76 = *(_QWORD *)(*v21 + 8 * (v34[2237] + *v75));
      v77 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v76 <= v77)
      {
        v78 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2237] + *v75)), v77, 4u);
        v1589 = vld2q_f64(v1559.f64);
        v79 = &v1561;
        v1837 = vld2q_f64(v79->f64);
        v80 = vmlaq_n_f64(vmulq_n_f64(v1589.val[0], v1531.f64[0]), v1589.val[1], v1531.f64[1]);
        v1589.val[0] = vaddq_f64(v78[1], vmlaq_n_f64(vmulq_n_f64(v1837.val[0], v1531.f64[0]), v1837.val[1], v1531.f64[1]));
        *v78 = vaddq_f64(*v78, v80);
        v78[1] = v1589.val[0];
        v81 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 1, 4u);
        v1590 = vld2q_f64(v1559.f64);
        v1838 = vld2q_f64(v79->f64);
        v82 = vmlaq_n_f64(vmulq_n_f64(v1590.val[0], v1532.f64[0]), v1590.val[1], v1532.f64[1]);
        v1590.val[0] = vaddq_f64(v81[1], vmlaq_n_f64(vmulq_n_f64(v1838.val[0], v1532.f64[0]), v1838.val[1], v1532.f64[1]));
        *v81 = vaddq_f64(*v81, v82);
        v81[1] = v1590.val[0];
        v83 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 2, 4u);
        v1591 = vld2q_f64(v1559.f64);
        v1839 = vld2q_f64(v79->f64);
        v84 = vmlaq_n_f64(vmulq_n_f64(v1591.val[0], v1533.f64[0]), v1591.val[1], v1533.f64[1]);
        v1591.val[0] = vaddq_f64(v83[1], vmlaq_n_f64(vmulq_n_f64(v1839.val[0], v1533.f64[0]), v1839.val[1], v1533.f64[1]));
        *v83 = vaddq_f64(*v83, v84);
        v83[1] = v1591.val[0];
        v85 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 3, 4u);
        v1592 = vld2q_f64(v1559.f64);
        v1840 = vld2q_f64(v79->f64);
        v86 = vmlaq_n_f64(vmulq_n_f64(v1592.val[0], v1534.f64[0]), v1592.val[1], v1534.f64[1]);
        v1592.val[0] = vaddq_f64(v85[1], vmlaq_n_f64(vmulq_n_f64(v1840.val[0], v1534.f64[0]), v1840.val[1], v1534.f64[1]));
        *v85 = vaddq_f64(*v85, v86);
        v85[1] = v1592.val[0];
        v87 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 4, 4u);
        v1593 = vld2q_f64(v1559.f64);
        v1841 = vld2q_f64(v79->f64);
        v88 = vmlaq_n_f64(vmulq_n_f64(v1593.val[0], v1535.f64[0]), v1593.val[1], v1535.f64[1]);
        v1593.val[0] = vaddq_f64(v87[1], vmlaq_n_f64(vmulq_n_f64(v1841.val[0], v1535.f64[0]), v1841.val[1], v1535.f64[1]));
        *v87 = vaddq_f64(*v87, v88);
        v87[1] = v1593.val[0];
        v89 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 5, 4u);
        v1594 = vld2q_f64(v1559.f64);
        v1842 = vld2q_f64(v79->f64);
        v90 = vmlaq_n_f64(vmulq_n_f64(v1594.val[0], v1536.f64[0]), v1594.val[1], v1536.f64[1]);
        v1594.val[0] = vaddq_f64(v89[1], vmlaq_n_f64(vmulq_n_f64(v1842.val[0], v1536.f64[0]), v1842.val[1], v1536.f64[1]));
        *v89 = vaddq_f64(*v89, v90);
        v89[1] = v1594.val[0];
        v20 = *v1526;
      }
    }
  }
  v91 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v91 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v92 = *(_QWORD *)(*v21 + 8 * (v34[2238] + *v91));
      v93 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v92 <= v93)
      {
        v94 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2238] + *v91)), v93, 4u);
        v1595 = vld2q_f64(v1563.f64);
        v95 = &v1565;
        v1843 = vld2q_f64(v95->f64);
        v96 = vmlaq_n_f64(vmulq_n_f64(v1595.val[0], v1531.f64[0]), v1595.val[1], v1531.f64[1]);
        v1595.val[0] = vaddq_f64(v94[1], vmlaq_n_f64(vmulq_n_f64(v1843.val[0], v1531.f64[0]), v1843.val[1], v1531.f64[1]));
        *v94 = vaddq_f64(*v94, v96);
        v94[1] = v1595.val[0];
        v97 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 1, 4u);
        v1596 = vld2q_f64(v1563.f64);
        v1844 = vld2q_f64(v95->f64);
        v98 = vmlaq_n_f64(vmulq_n_f64(v1596.val[0], v1532.f64[0]), v1596.val[1], v1532.f64[1]);
        v1596.val[0] = vaddq_f64(v97[1], vmlaq_n_f64(vmulq_n_f64(v1844.val[0], v1532.f64[0]), v1844.val[1], v1532.f64[1]));
        *v97 = vaddq_f64(*v97, v98);
        v97[1] = v1596.val[0];
        v99 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 2, 4u);
        v1597 = vld2q_f64(v1563.f64);
        v1845 = vld2q_f64(v95->f64);
        v100 = vmlaq_n_f64(vmulq_n_f64(v1597.val[0], v1533.f64[0]), v1597.val[1], v1533.f64[1]);
        v1597.val[0] = vaddq_f64(v99[1], vmlaq_n_f64(vmulq_n_f64(v1845.val[0], v1533.f64[0]), v1845.val[1], v1533.f64[1]));
        *v99 = vaddq_f64(*v99, v100);
        v99[1] = v1597.val[0];
        v101 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 3, 4u);
        v1598 = vld2q_f64(v1563.f64);
        v1846 = vld2q_f64(v95->f64);
        v102 = vmlaq_n_f64(vmulq_n_f64(v1598.val[0], v1534.f64[0]), v1598.val[1], v1534.f64[1]);
        v1598.val[0] = vaddq_f64(v101[1], vmlaq_n_f64(vmulq_n_f64(v1846.val[0], v1534.f64[0]), v1846.val[1], v1534.f64[1]));
        *v101 = vaddq_f64(*v101, v102);
        v101[1] = v1598.val[0];
        v103 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 4, 4u);
        v1599 = vld2q_f64(v1563.f64);
        v1847 = vld2q_f64(v95->f64);
        v104 = vmlaq_n_f64(vmulq_n_f64(v1599.val[0], v1535.f64[0]), v1599.val[1], v1535.f64[1]);
        v1599.val[0] = vaddq_f64(v103[1], vmlaq_n_f64(vmulq_n_f64(v1847.val[0], v1535.f64[0]), v1847.val[1], v1535.f64[1]));
        *v103 = vaddq_f64(*v103, v104);
        v103[1] = v1599.val[0];
        v105 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 5, 4u);
        v1600 = vld2q_f64(v1563.f64);
        v1848 = vld2q_f64(v95->f64);
        v106 = vmlaq_n_f64(vmulq_n_f64(v1600.val[0], v1536.f64[0]), v1600.val[1], v1536.f64[1]);
        v1600.val[0] = vaddq_f64(v105[1], vmlaq_n_f64(vmulq_n_f64(v1848.val[0], v1536.f64[0]), v1848.val[1], v1536.f64[1]));
        *v105 = vaddq_f64(*v105, v106);
        v105[1] = v1600.val[0];
        v20 = *v1526;
      }
    }
  }
  v107 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v107 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v108 = *(_QWORD *)(*v21 + 8 * (v34[2238] + *v107));
      v109 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v108 <= v109)
      {
        v110 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2238] + *v107)), v109, 4u);
        v1601 = vld2q_f64(v1567.f64);
        v111 = &v1569;
        v1849 = vld2q_f64(v111->f64);
        v112 = vmlaq_n_f64(vmulq_n_f64(v1601.val[0], v1531.f64[0]), v1601.val[1], v1531.f64[1]);
        v1601.val[0] = vaddq_f64(v110[1], vmlaq_n_f64(vmulq_n_f64(v1849.val[0], v1531.f64[0]), v1849.val[1], v1531.f64[1]));
        *v110 = vaddq_f64(*v110, v112);
        v110[1] = v1601.val[0];
        v113 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 1, 4u);
        v1602 = vld2q_f64(v1567.f64);
        v1850 = vld2q_f64(v111->f64);
        v114 = vmlaq_n_f64(vmulq_n_f64(v1602.val[0], v1532.f64[0]), v1602.val[1], v1532.f64[1]);
        v1602.val[0] = vaddq_f64(v113[1], vmlaq_n_f64(vmulq_n_f64(v1850.val[0], v1532.f64[0]), v1850.val[1], v1532.f64[1]));
        *v113 = vaddq_f64(*v113, v114);
        v113[1] = v1602.val[0];
        v115 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 2, 4u);
        v1603 = vld2q_f64(v1567.f64);
        v1851 = vld2q_f64(v111->f64);
        v116 = vmlaq_n_f64(vmulq_n_f64(v1603.val[0], v1533.f64[0]), v1603.val[1], v1533.f64[1]);
        v1603.val[0] = vaddq_f64(v115[1], vmlaq_n_f64(vmulq_n_f64(v1851.val[0], v1533.f64[0]), v1851.val[1], v1533.f64[1]));
        *v115 = vaddq_f64(*v115, v116);
        v115[1] = v1603.val[0];
        v117 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 3, 4u);
        v1604 = vld2q_f64(v1567.f64);
        v1852 = vld2q_f64(v111->f64);
        v118 = vmlaq_n_f64(vmulq_n_f64(v1604.val[0], v1534.f64[0]), v1604.val[1], v1534.f64[1]);
        v1604.val[0] = vaddq_f64(v117[1], vmlaq_n_f64(vmulq_n_f64(v1852.val[0], v1534.f64[0]), v1852.val[1], v1534.f64[1]));
        *v117 = vaddq_f64(*v117, v118);
        v117[1] = v1604.val[0];
        v119 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 4, 4u);
        v1605 = vld2q_f64(v1567.f64);
        v1853 = vld2q_f64(v111->f64);
        v120 = vmlaq_n_f64(vmulq_n_f64(v1605.val[0], v1535.f64[0]), v1605.val[1], v1535.f64[1]);
        v1605.val[0] = vaddq_f64(v119[1], vmlaq_n_f64(vmulq_n_f64(v1853.val[0], v1535.f64[0]), v1853.val[1], v1535.f64[1]));
        *v119 = vaddq_f64(*v119, v120);
        v119[1] = v1605.val[0];
        v121 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 5, 4u);
        v1606 = vld2q_f64(v1567.f64);
        v1854 = vld2q_f64(v111->f64);
        v122 = vmlaq_n_f64(vmulq_n_f64(v1606.val[0], v1536.f64[0]), v1606.val[1], v1536.f64[1]);
        v1606.val[0] = vaddq_f64(v121[1], vmlaq_n_f64(vmulq_n_f64(v1854.val[0], v1536.f64[0]), v1854.val[1], v1536.f64[1]));
        *v121 = vaddq_f64(*v121, v122);
        v121[1] = v1606.val[0];
        v20 = *v1526;
      }
    }
  }
  v123 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v123 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v124 = *(_QWORD *)(*v21 + 8 * (v34[2239] + *v123));
      v125 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v124 <= v125)
      {
        v126 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2239] + *v123)), v125, 3u);
        v127.f64[0] = v126[1].f64[0];
        v1855 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1531.f64[1];
        v130 = vmlaq_n_f64(vmulq_n_f64(v1855.val[0], v1531.f64[0]), v1855.val[1], v1531.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v126 = vaddq_f64(*v126, v130);
        *(_QWORD *)&v126[1].f64[0] = *(_OWORD *)&vaddq_f64(v127, v1855.val[0]);
        v131 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 1, 3u);
        v132.f64[0] = v131[1].f64[0];
        v1856 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1532.f64[1];
        v135 = vmlaq_n_f64(vmulq_n_f64(v1856.val[0], v1532.f64[0]), v1856.val[1], v1532.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v131 = vaddq_f64(*v131, v135);
        *(_QWORD *)&v131[1].f64[0] = *(_OWORD *)&vaddq_f64(v132, v1856.val[0]);
        v136 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 2, 3u);
        v137.f64[0] = v136[1].f64[0];
        v1857 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1533.f64[1];
        v140 = vmlaq_n_f64(vmulq_n_f64(v1857.val[0], v1533.f64[0]), v1857.val[1], v1533.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v136 = vaddq_f64(*v136, v140);
        *(_QWORD *)&v136[1].f64[0] = *(_OWORD *)&vaddq_f64(v137, v1857.val[0]);
        v141 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 3, 3u);
        v142.f64[0] = v141[1].f64[0];
        v1858 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1534.f64[1];
        v145 = vmlaq_n_f64(vmulq_n_f64(v1858.val[0], v1534.f64[0]), v1858.val[1], v1534.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v141 = vaddq_f64(*v141, v145);
        *(_QWORD *)&v141[1].f64[0] = *(_OWORD *)&vaddq_f64(v142, v1858.val[0]);
        v146 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 4, 3u);
        v147.f64[0] = v146[1].f64[0];
        v1859 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1535.f64[1];
        v150 = vmlaq_n_f64(vmulq_n_f64(v1859.val[0], v1535.f64[0]), v1859.val[1], v1535.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v146 = vaddq_f64(*v146, v150);
        *(_QWORD *)&v146[1].f64[0] = *(_OWORD *)&vaddq_f64(v147, v1859.val[0]);
        v151 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 5, 3u);
        v152.f64[0] = v151[1].f64[0];
        v1860 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1536.f64[1];
        v155 = vmlaq_n_f64(vmulq_n_f64(v1860.val[0], v1536.f64[0]), v1860.val[1], v1536.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v151 = vaddq_f64(*v151, v155);
        *(_QWORD *)&v151[1].f64[0] = *(_OWORD *)&vaddq_f64(v152, v1860.val[0]);
        v20 = *v1526;
      }
    }
  }
  v156 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v156 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v157 = *(_QWORD *)(*v21 + 8 * (v34[2239] + *v156));
      v158 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v157 <= v158)
      {
        v159 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2239] + *v156)), v158, 3u);
        v160.f64[0] = v159[1].f64[0];
        v1861 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1531.f64[1];
        v163 = vmlaq_n_f64(vmulq_n_f64(v1861.val[0], v1531.f64[0]), v1861.val[1], v1531.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v159 = vaddq_f64(*v159, v163);
        *(_QWORD *)&v159[1].f64[0] = *(_OWORD *)&vaddq_f64(v160, v1861.val[0]);
        v164 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 1, 3u);
        v165.f64[0] = v164[1].f64[0];
        v1862 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1532.f64[1];
        v168 = vmlaq_n_f64(vmulq_n_f64(v1862.val[0], v1532.f64[0]), v1862.val[1], v1532.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v164 = vaddq_f64(*v164, v168);
        *(_QWORD *)&v164[1].f64[0] = *(_OWORD *)&vaddq_f64(v165, v1862.val[0]);
        v169 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 2, 3u);
        v170.f64[0] = v169[1].f64[0];
        v1863 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1533.f64[1];
        v173 = vmlaq_n_f64(vmulq_n_f64(v1863.val[0], v1533.f64[0]), v1863.val[1], v1533.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v169 = vaddq_f64(*v169, v173);
        *(_QWORD *)&v169[1].f64[0] = *(_OWORD *)&vaddq_f64(v170, v1863.val[0]);
        v174 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 3, 3u);
        v175.f64[0] = v174[1].f64[0];
        v1864 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1534.f64[1];
        v178 = vmlaq_n_f64(vmulq_n_f64(v1864.val[0], v1534.f64[0]), v1864.val[1], v1534.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v174 = vaddq_f64(*v174, v178);
        *(_QWORD *)&v174[1].f64[0] = *(_OWORD *)&vaddq_f64(v175, v1864.val[0]);
        v179 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 4, 3u);
        v180.f64[0] = v179[1].f64[0];
        v1865 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1535.f64[1];
        v183 = vmlaq_n_f64(vmulq_n_f64(v1865.val[0], v1535.f64[0]), v1865.val[1], v1535.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v179 = vaddq_f64(*v179, v183);
        *(_QWORD *)&v179[1].f64[0] = *(_OWORD *)&vaddq_f64(v180, v1865.val[0]);
        v184 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 5, 3u);
        v185.f64[0] = v184[1].f64[0];
        v1866 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1536.f64[1];
        v188 = vmlaq_n_f64(vmulq_n_f64(v1866.val[0], v1536.f64[0]), v1866.val[1], v1536.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v184 = vaddq_f64(*v184, v188);
        *(_QWORD *)&v184[1].f64[0] = *(_OWORD *)&vaddq_f64(v185, v1866.val[0]);
        v20 = *v1526;
      }
    }
  }
  v189 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v20 + 20))
  {
    if (*((_BYTE *)v189 + 20))
    {
      v190 = v34[2236];
      v191 = *(_QWORD *)(*v21 + 8 * (v190 + *v20));
      v192 = *(_QWORD *)(*v21 + 8 * (v190 + *v189));
      if (v191 <= v192)
      {
        for (m = 0; m != 12; m += 2)
        {
          v194 = (float64x2_t *)sub_20F762098(v34 + 2279, v191, v192, 6u);
          v2175 = vld2q_f64(v1533.f64);
          v2213 = vld2q_f64(v1535.f64);
          v195 = v1537.f64[m];
          v196 = v1537.f64[m + 1];
          v197 = vaddq_f64(v194[2], vmlaq_n_f64(vmulq_n_f64(v2213.val[0], v195), v2213.val[1], v196));
          v198 = vaddq_f64(v194[1], vmlaq_n_f64(vmulq_n_f64(v2175.val[0], v195), v2175.val[1], v196));
          *v194 = vaddq_f64(*v194, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v195), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v196));
          v194[1] = v198;
          v194[2] = v197;
          LODWORD(v192) = v192 + 1;
        }
        v189 = *(unsigned int **)(a2 + 64);
        v34 = v1530;
      }
    }
  }
  if (*((_BYTE *)v189 + 20))
  {
    v199 = 0;
    v200 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v189));
    v201 = &v1537.f64[1];
    do
    {
      v202 = (float64x2_t *)sub_20F762098(v34 + 2279, v200, (int)v200 + (int)v199, 6u);
      v1607 = vld2q_f64(v1537.f64);
      v1867 = vld2q_f64(v1539.f64);
      v2192 = vld2q_f64(v1541.f64);
      v203 = *(v201 - 1);
      v204 = vmlaq_n_f64(vmulq_n_f64(v1607.val[0], v203), v1607.val[1], *v201);
      v1607.val[1] = vaddq_f64(v202[2], vmlaq_n_f64(vmulq_n_f64(v2192.val[0], v203), v2192.val[1], *v201));
      v1607.val[0] = vaddq_f64(v202[1], vmlaq_n_f64(vmulq_n_f64(v1867.val[0], v203), v1867.val[1], *v201));
      *v202 = vaddq_f64(*v202, v204);
      *(float64x2x2_t *)v202[1].f64 = v1607;
      ++v199;
      v201 += 2;
    }
    while (v199 != 6);
    v205 = (float64x2_t *)(v34[2270] + 8 * v200);
    v1608 = vld2q_f64(v1537.f64);
    v2148 = vld2q_f64(v1539.f64);
    v2214 = vld2q_f64(v1541.f64);
    v206 = vmlaq_laneq_f64(vmulq_n_f64(v1608.val[0], v1527->f64[0]), v1608.val[1], *v1527, 1);
    v1608.val[1] = vsubq_f64(v205[2], vmlaq_laneq_f64(vmulq_n_f64(v2214.val[0], v1527->f64[0]), v2214.val[1], *v1527, 1));
    v1608.val[0] = vsubq_f64(v205[1], vmlaq_laneq_f64(vmulq_n_f64(v2148.val[0], v1527->f64[0]), v2148.val[1], *v1527, 1));
    *v205 = vsubq_f64(*v205, v206);
    *(float64x2x2_t *)v205[1].f64 = v1608;
  }
  v207 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v207 + 20))
  {
    v208 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v208 + 20))
    {
      v209 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v207));
      v210 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v208));
      if (v209 <= v210)
      {
        v211 = 0;
        v212 = &v1537.f64[1];
        do
        {
          v213 = (float64x2_t *)sub_20F762098(v1530 + 2279, v209, (int)v210 + (int)v211, 6u);
          v1609 = vld2q_f64(v1543.f64);
          v1868 = vld2q_f64(v1545.f64);
          v2193 = vld2q_f64(v1547.f64);
          v214 = *(v212 - 1);
          v215 = vmlaq_n_f64(vmulq_n_f64(v1609.val[0], v214), v1609.val[1], *v212);
          v1609.val[1] = vaddq_f64(v213[2], vmlaq_n_f64(vmulq_n_f64(v2193.val[0], v214), v2193.val[1], *v212));
          v1609.val[0] = vaddq_f64(v213[1], vmlaq_n_f64(vmulq_n_f64(v1868.val[0], v214), v1868.val[1], *v212));
          *v213 = vaddq_f64(*v213, v215);
          *(float64x2x2_t *)v213[1].f64 = v1609;
          ++v211;
          v212 += 2;
        }
        while (v211 != 6);
      }
    }
  }
  v216 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v216 + 20))
  {
    v217 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v217 + 20))
    {
      v218 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v216));
      v219 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v217));
      if (v218 <= v219)
      {
        v220 = 0;
        v221 = &v1537.f64[1];
        do
        {
          v222 = (float64x2_t *)sub_20F762098(v1530 + 2279, v218, (int)v219 + (int)v220, 6u);
          v1610 = vld2q_f64(v1549.f64);
          v1869 = vld2q_f64(v1551.f64);
          v2194 = vld2q_f64(v1553.f64);
          v223 = *(v221 - 1);
          v224 = vmlaq_n_f64(vmulq_n_f64(v1610.val[0], v223), v1610.val[1], *v221);
          v1610.val[1] = vaddq_f64(v222[2], vmlaq_n_f64(vmulq_n_f64(v2194.val[0], v223), v2194.val[1], *v221));
          v1610.val[0] = vaddq_f64(v222[1], vmlaq_n_f64(vmulq_n_f64(v1869.val[0], v223), v1869.val[1], *v221));
          *v222 = vaddq_f64(*v222, v224);
          *(float64x2x2_t *)v222[1].f64 = v1610;
          ++v220;
          v221 += 2;
        }
        while (v220 != 6);
      }
    }
  }
  v225 = *(unsigned int **)(a2 + 88);
  v226 = v1530;
  if (*((_BYTE *)v225 + 20))
  {
    v227 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v227 + 20))
    {
      v228 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v225));
      v229 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v227));
      if (v228 <= v229)
      {
        v230 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v225)), v229, 4u);
        v1611 = vld2q_f64(v1555.f64);
        v231 = &v1557;
        v1870 = vld2q_f64(v231->f64);
        v232 = vmlaq_n_f64(vmulq_n_f64(v1611.val[0], v1537.f64[0]), v1611.val[1], v1537.f64[1]);
        v1611.val[0] = vaddq_f64(v230[1], vmlaq_n_f64(vmulq_n_f64(v1870.val[0], v1537.f64[0]), v1870.val[1], v1537.f64[1]));
        *v230 = vaddq_f64(*v230, v232);
        v230[1] = v1611.val[0];
        v233 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 1, 4u);
        v1612 = vld2q_f64(v1555.f64);
        v1871 = vld2q_f64(v1557.f64);
        v234 = vmlaq_n_f64(vmulq_n_f64(v1612.val[0], v1538.f64[0]), v1612.val[1], v1538.f64[1]);
        v1612.val[0] = vaddq_f64(v233[1], vmlaq_n_f64(vmulq_n_f64(v1871.val[0], v1538.f64[0]), v1871.val[1], v1538.f64[1]));
        *v233 = vaddq_f64(*v233, v234);
        v233[1] = v1612.val[0];
        v235 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 2, 4u);
        v1613 = vld2q_f64(v1555.f64);
        v1872 = vld2q_f64(v1557.f64);
        v236 = vmlaq_n_f64(vmulq_n_f64(v1613.val[0], v1539.f64[0]), v1613.val[1], v1539.f64[1]);
        v1613.val[0] = vaddq_f64(v235[1], vmlaq_n_f64(vmulq_n_f64(v1872.val[0], v1539.f64[0]), v1872.val[1], v1539.f64[1]));
        *v235 = vaddq_f64(*v235, v236);
        v235[1] = v1613.val[0];
        v237 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 3, 4u);
        v1614 = vld2q_f64(v1555.f64);
        v1873 = vld2q_f64(v1557.f64);
        v238 = vmlaq_n_f64(vmulq_n_f64(v1614.val[0], v1540.f64[0]), v1614.val[1], v1540.f64[1]);
        v1614.val[0] = vaddq_f64(v237[1], vmlaq_n_f64(vmulq_n_f64(v1873.val[0], v1540.f64[0]), v1873.val[1], v1540.f64[1]));
        *v237 = vaddq_f64(*v237, v238);
        v237[1] = v1614.val[0];
        v239 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 4, 4u);
        v1615 = vld2q_f64(v1555.f64);
        v1874 = vld2q_f64(v1557.f64);
        v240 = vmlaq_n_f64(vmulq_n_f64(v1615.val[0], v1541.f64[0]), v1615.val[1], v1541.f64[1]);
        v1615.val[0] = vaddq_f64(v239[1], vmlaq_n_f64(vmulq_n_f64(v1874.val[0], v1541.f64[0]), v1874.val[1], v1541.f64[1]));
        *v239 = vaddq_f64(*v239, v240);
        v239[1] = v1615.val[0];
        v241 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 5, 4u);
        v1616 = vld2q_f64(v1555.f64);
        v1875 = vld2q_f64(v1557.f64);
        v242 = vmlaq_n_f64(vmulq_n_f64(v1616.val[0], v1542.f64[0]), v1616.val[1], v1542.f64[1]);
        v1616.val[0] = vaddq_f64(v241[1], vmlaq_n_f64(vmulq_n_f64(v1875.val[0], v1542.f64[0]), v1875.val[1], v1542.f64[1]));
        *v241 = vaddq_f64(*v241, v242);
        v241[1] = v1616.val[0];
      }
    }
  }
  v243 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v243 + 20))
  {
    v244 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v244 + 20))
    {
      v245 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v243));
      v246 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v244));
      if (v245 <= v246)
      {
        v247 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v243)), v246, 4u);
        v1617 = vld2q_f64(v1559.f64);
        v248 = &v1561;
        v1876 = vld2q_f64(v248->f64);
        v249 = vmlaq_n_f64(vmulq_n_f64(v1617.val[0], v1537.f64[0]), v1617.val[1], v1537.f64[1]);
        v1617.val[0] = vaddq_f64(v247[1], vmlaq_n_f64(vmulq_n_f64(v1876.val[0], v1537.f64[0]), v1876.val[1], v1537.f64[1]));
        *v247 = vaddq_f64(*v247, v249);
        v247[1] = v1617.val[0];
        v250 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 1, 4u);
        v1618 = vld2q_f64(v1559.f64);
        v1877 = vld2q_f64(v1561.f64);
        v251 = vmlaq_n_f64(vmulq_n_f64(v1618.val[0], v1538.f64[0]), v1618.val[1], v1538.f64[1]);
        v1618.val[0] = vaddq_f64(v250[1], vmlaq_n_f64(vmulq_n_f64(v1877.val[0], v1538.f64[0]), v1877.val[1], v1538.f64[1]));
        *v250 = vaddq_f64(*v250, v251);
        v250[1] = v1618.val[0];
        v252 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 2, 4u);
        v1619 = vld2q_f64(v1559.f64);
        v1878 = vld2q_f64(v1561.f64);
        v253 = vmlaq_n_f64(vmulq_n_f64(v1619.val[0], v1539.f64[0]), v1619.val[1], v1539.f64[1]);
        v1619.val[0] = vaddq_f64(v252[1], vmlaq_n_f64(vmulq_n_f64(v1878.val[0], v1539.f64[0]), v1878.val[1], v1539.f64[1]));
        *v252 = vaddq_f64(*v252, v253);
        v252[1] = v1619.val[0];
        v254 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 3, 4u);
        v1620 = vld2q_f64(v1559.f64);
        v1879 = vld2q_f64(v1561.f64);
        v255 = vmlaq_n_f64(vmulq_n_f64(v1620.val[0], v1540.f64[0]), v1620.val[1], v1540.f64[1]);
        v1620.val[0] = vaddq_f64(v254[1], vmlaq_n_f64(vmulq_n_f64(v1879.val[0], v1540.f64[0]), v1879.val[1], v1540.f64[1]));
        *v254 = vaddq_f64(*v254, v255);
        v254[1] = v1620.val[0];
        v256 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 4, 4u);
        v1621 = vld2q_f64(v1559.f64);
        v1880 = vld2q_f64(v1561.f64);
        v257 = vmlaq_n_f64(vmulq_n_f64(v1621.val[0], v1541.f64[0]), v1621.val[1], v1541.f64[1]);
        v1621.val[0] = vaddq_f64(v256[1], vmlaq_n_f64(vmulq_n_f64(v1880.val[0], v1541.f64[0]), v1880.val[1], v1541.f64[1]));
        *v256 = vaddq_f64(*v256, v257);
        v256[1] = v1621.val[0];
        v258 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 5, 4u);
        v1622 = vld2q_f64(v1559.f64);
        v1881 = vld2q_f64(v1561.f64);
        v259 = vmlaq_n_f64(vmulq_n_f64(v1622.val[0], v1542.f64[0]), v1622.val[1], v1542.f64[1]);
        v1622.val[0] = vaddq_f64(v258[1], vmlaq_n_f64(vmulq_n_f64(v1881.val[0], v1542.f64[0]), v1881.val[1], v1542.f64[1]));
        *v258 = vaddq_f64(*v258, v259);
        v258[1] = v1622.val[0];
      }
    }
  }
  v260 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v260 + 20))
  {
    v261 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v261 + 20))
    {
      v262 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v260));
      v263 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v261));
      if (v262 <= v263)
      {
        v264 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v260)), v263, 4u);
        v1623 = vld2q_f64(v1563.f64);
        v265 = &v1565;
        v1882 = vld2q_f64(v265->f64);
        v266 = vmlaq_n_f64(vmulq_n_f64(v1623.val[0], v1537.f64[0]), v1623.val[1], v1537.f64[1]);
        v1623.val[0] = vaddq_f64(v264[1], vmlaq_n_f64(vmulq_n_f64(v1882.val[0], v1537.f64[0]), v1882.val[1], v1537.f64[1]));
        *v264 = vaddq_f64(*v264, v266);
        v264[1] = v1623.val[0];
        v267 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 1, 4u);
        v1624 = vld2q_f64(v1563.f64);
        v1883 = vld2q_f64(v1565.f64);
        v268 = vmlaq_n_f64(vmulq_n_f64(v1624.val[0], v1538.f64[0]), v1624.val[1], v1538.f64[1]);
        v1624.val[0] = vaddq_f64(v267[1], vmlaq_n_f64(vmulq_n_f64(v1883.val[0], v1538.f64[0]), v1883.val[1], v1538.f64[1]));
        *v267 = vaddq_f64(*v267, v268);
        v267[1] = v1624.val[0];
        v269 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 2, 4u);
        v1625 = vld2q_f64(v1563.f64);
        v1884 = vld2q_f64(v1565.f64);
        v270 = vmlaq_n_f64(vmulq_n_f64(v1625.val[0], v1539.f64[0]), v1625.val[1], v1539.f64[1]);
        v1625.val[0] = vaddq_f64(v269[1], vmlaq_n_f64(vmulq_n_f64(v1884.val[0], v1539.f64[0]), v1884.val[1], v1539.f64[1]));
        *v269 = vaddq_f64(*v269, v270);
        v269[1] = v1625.val[0];
        v271 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 3, 4u);
        v1626 = vld2q_f64(v1563.f64);
        v1885 = vld2q_f64(v1565.f64);
        v272 = vmlaq_n_f64(vmulq_n_f64(v1626.val[0], v1540.f64[0]), v1626.val[1], v1540.f64[1]);
        v1626.val[0] = vaddq_f64(v271[1], vmlaq_n_f64(vmulq_n_f64(v1885.val[0], v1540.f64[0]), v1885.val[1], v1540.f64[1]));
        *v271 = vaddq_f64(*v271, v272);
        v271[1] = v1626.val[0];
        v273 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 4, 4u);
        v1627 = vld2q_f64(v1563.f64);
        v1886 = vld2q_f64(v1565.f64);
        v274 = vmlaq_n_f64(vmulq_n_f64(v1627.val[0], v1541.f64[0]), v1627.val[1], v1541.f64[1]);
        v1627.val[0] = vaddq_f64(v273[1], vmlaq_n_f64(vmulq_n_f64(v1886.val[0], v1541.f64[0]), v1886.val[1], v1541.f64[1]));
        *v273 = vaddq_f64(*v273, v274);
        v273[1] = v1627.val[0];
        v275 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 5, 4u);
        v1628 = vld2q_f64(v1563.f64);
        v1887 = vld2q_f64(v1565.f64);
        v276 = vmlaq_n_f64(vmulq_n_f64(v1628.val[0], v1542.f64[0]), v1628.val[1], v1542.f64[1]);
        v1628.val[0] = vaddq_f64(v275[1], vmlaq_n_f64(vmulq_n_f64(v1887.val[0], v1542.f64[0]), v1887.val[1], v1542.f64[1]));
        *v275 = vaddq_f64(*v275, v276);
        v275[1] = v1628.val[0];
      }
    }
  }
  v277 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v277 + 20))
  {
    v278 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v278 + 20))
    {
      v279 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v277));
      v280 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v278));
      if (v279 <= v280)
      {
        v281 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v277)), v280, 4u);
        v1629 = vld2q_f64(v1567.f64);
        v282 = &v1569;
        v1888 = vld2q_f64(v282->f64);
        v283 = vmlaq_n_f64(vmulq_n_f64(v1629.val[0], v1537.f64[0]), v1629.val[1], v1537.f64[1]);
        v1629.val[0] = vaddq_f64(v281[1], vmlaq_n_f64(vmulq_n_f64(v1888.val[0], v1537.f64[0]), v1888.val[1], v1537.f64[1]));
        *v281 = vaddq_f64(*v281, v283);
        v281[1] = v1629.val[0];
        v284 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 1, 4u);
        v1630 = vld2q_f64(v1567.f64);
        v1889 = vld2q_f64(v1569.f64);
        v285 = vmlaq_n_f64(vmulq_n_f64(v1630.val[0], v1538.f64[0]), v1630.val[1], v1538.f64[1]);
        v1630.val[0] = vaddq_f64(v284[1], vmlaq_n_f64(vmulq_n_f64(v1889.val[0], v1538.f64[0]), v1889.val[1], v1538.f64[1]));
        *v284 = vaddq_f64(*v284, v285);
        v284[1] = v1630.val[0];
        v286 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 2, 4u);
        v1631 = vld2q_f64(v1567.f64);
        v1890 = vld2q_f64(v1569.f64);
        v287 = vmlaq_n_f64(vmulq_n_f64(v1631.val[0], v1539.f64[0]), v1631.val[1], v1539.f64[1]);
        v1631.val[0] = vaddq_f64(v286[1], vmlaq_n_f64(vmulq_n_f64(v1890.val[0], v1539.f64[0]), v1890.val[1], v1539.f64[1]));
        *v286 = vaddq_f64(*v286, v287);
        v286[1] = v1631.val[0];
        v288 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 3, 4u);
        v1632 = vld2q_f64(v1567.f64);
        v1891 = vld2q_f64(v1569.f64);
        v289 = vmlaq_n_f64(vmulq_n_f64(v1632.val[0], v1540.f64[0]), v1632.val[1], v1540.f64[1]);
        v1632.val[0] = vaddq_f64(v288[1], vmlaq_n_f64(vmulq_n_f64(v1891.val[0], v1540.f64[0]), v1891.val[1], v1540.f64[1]));
        *v288 = vaddq_f64(*v288, v289);
        v288[1] = v1632.val[0];
        v290 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 4, 4u);
        v1633 = vld2q_f64(v1567.f64);
        v1892 = vld2q_f64(v1569.f64);
        v291 = vmlaq_n_f64(vmulq_n_f64(v1633.val[0], v1541.f64[0]), v1633.val[1], v1541.f64[1]);
        v1633.val[0] = vaddq_f64(v290[1], vmlaq_n_f64(vmulq_n_f64(v1892.val[0], v1541.f64[0]), v1892.val[1], v1541.f64[1]));
        *v290 = vaddq_f64(*v290, v291);
        v290[1] = v1633.val[0];
        v292 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 5, 4u);
        v1634 = vld2q_f64(v1567.f64);
        v1893 = vld2q_f64(v1569.f64);
        v293 = vmlaq_n_f64(vmulq_n_f64(v1634.val[0], v1542.f64[0]), v1634.val[1], v1542.f64[1]);
        v1634.val[0] = vaddq_f64(v292[1], vmlaq_n_f64(vmulq_n_f64(v1893.val[0], v1542.f64[0]), v1893.val[1], v1542.f64[1]));
        *v292 = vaddq_f64(*v292, v293);
        v292[1] = v1634.val[0];
      }
    }
  }
  v294 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v294 + 20))
  {
    v295 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v295 + 20))
    {
      v296 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v294));
      v297 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v295));
      if (v296 <= v297)
      {
        v298 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v294)), v297, 3u);
        v299.f64[0] = v298[1].f64[0];
        v1894 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1537.f64[1];
        v302 = vmlaq_n_f64(vmulq_n_f64(v1894.val[0], v1537.f64[0]), v1894.val[1], v1537.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v298 = vaddq_f64(*v298, v302);
        *(_QWORD *)&v298[1].f64[0] = *(_OWORD *)&vaddq_f64(v299, v1894.val[0]);
        v303 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 1, 3u);
        v304.f64[0] = v303[1].f64[0];
        v1895 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1538.f64[1];
        v307 = vmlaq_n_f64(vmulq_n_f64(v1895.val[0], v1538.f64[0]), v1895.val[1], v1538.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v303 = vaddq_f64(*v303, v307);
        *(_QWORD *)&v303[1].f64[0] = *(_OWORD *)&vaddq_f64(v304, v1895.val[0]);
        v308 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 2, 3u);
        v309.f64[0] = v308[1].f64[0];
        v1896 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1539.f64[1];
        v312 = vmlaq_n_f64(vmulq_n_f64(v1896.val[0], v1539.f64[0]), v1896.val[1], v1539.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v308 = vaddq_f64(*v308, v312);
        *(_QWORD *)&v308[1].f64[0] = *(_OWORD *)&vaddq_f64(v309, v1896.val[0]);
        v313 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 3, 3u);
        v314.f64[0] = v313[1].f64[0];
        v1897 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1540.f64[1];
        v317 = vmlaq_n_f64(vmulq_n_f64(v1897.val[0], v1540.f64[0]), v1897.val[1], v1540.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v313 = vaddq_f64(*v313, v317);
        *(_QWORD *)&v313[1].f64[0] = *(_OWORD *)&vaddq_f64(v314, v1897.val[0]);
        v318 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 4, 3u);
        v319.f64[0] = v318[1].f64[0];
        v1898 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1541.f64[1];
        v322 = vmlaq_n_f64(vmulq_n_f64(v1898.val[0], v1541.f64[0]), v1898.val[1], v1541.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v318 = vaddq_f64(*v318, v322);
        *(_QWORD *)&v318[1].f64[0] = *(_OWORD *)&vaddq_f64(v319, v1898.val[0]);
        v323 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 5, 3u);
        v1813 = vld2q_f64(v1571.f64);
        v324.f64[0] = v323[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1542.f64[1];
        v327 = vmlaq_n_f64(vmulq_n_f64(v1813.val[0], v1542.f64[0]), v1813.val[1], v1542.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v323 = vaddq_f64(*v323, v327);
        *(_QWORD *)&v323[1].f64[0] = *(_OWORD *)&vaddq_f64(v324, v1813.val[0]);
      }
    }
  }
  v328 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v328 + 20))
  {
    v329 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v329 + 20))
    {
      v330 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v328));
      v331 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v329));
      if (v330 <= v331)
      {
        v332 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v328)), v331, 3u);
        v333.f64[0] = v332[1].f64[0];
        v1899 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1537.f64[1];
        v336 = vmlaq_n_f64(vmulq_n_f64(v1899.val[0], v1537.f64[0]), v1899.val[1], v1537.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v332 = vaddq_f64(*v332, v336);
        *(_QWORD *)&v332[1].f64[0] = *(_OWORD *)&vaddq_f64(v333, v1899.val[0]);
        v337 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 1, 3u);
        v338.f64[0] = v337[1].f64[0];
        v1900 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1538.f64[1];
        v341 = vmlaq_n_f64(vmulq_n_f64(v1900.val[0], v1538.f64[0]), v1900.val[1], v1538.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v337 = vaddq_f64(*v337, v341);
        *(_QWORD *)&v337[1].f64[0] = *(_OWORD *)&vaddq_f64(v338, v1900.val[0]);
        v342 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 2, 3u);
        v343.f64[0] = v342[1].f64[0];
        v1901 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1539.f64[1];
        v346 = vmlaq_n_f64(vmulq_n_f64(v1901.val[0], v1539.f64[0]), v1901.val[1], v1539.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v342 = vaddq_f64(*v342, v346);
        *(_QWORD *)&v342[1].f64[0] = *(_OWORD *)&vaddq_f64(v343, v1901.val[0]);
        v347 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 3, 3u);
        v348.f64[0] = v347[1].f64[0];
        v1902 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1540.f64[1];
        v351 = vmlaq_n_f64(vmulq_n_f64(v1902.val[0], v1540.f64[0]), v1902.val[1], v1540.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v347 = vaddq_f64(*v347, v351);
        *(_QWORD *)&v347[1].f64[0] = *(_OWORD *)&vaddq_f64(v348, v1902.val[0]);
        v352 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 4, 3u);
        v353.f64[0] = v352[1].f64[0];
        v1903 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1541.f64[1];
        v356 = vmlaq_n_f64(vmulq_n_f64(v1903.val[0], v1541.f64[0]), v1903.val[1], v1541.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v352 = vaddq_f64(*v352, v356);
        *(_QWORD *)&v352[1].f64[0] = *(_OWORD *)&vaddq_f64(v353, v1903.val[0]);
        v357 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 5, 3u);
        v1814 = vld2q_f64(v1574.f64);
        v358.f64[0] = v357[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1542.f64[1];
        v361 = vmlaq_n_f64(vmulq_n_f64(v1814.val[0], v1542.f64[0]), v1814.val[1], v1542.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v357 = vaddq_f64(*v357, v361);
        *(_QWORD *)&v357[1].f64[0] = *(_OWORD *)&vaddq_f64(v358, v1814.val[0]);
      }
    }
  }
  v362 = *(unsigned int **)(a2 + 56);
  v363 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v362 + 20))
  {
    if (*((_BYTE *)v363 + 20))
    {
      v364 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v362));
      v365 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v363));
      if (v364 <= v365)
      {
        for (n = 0; n != 12; n += 2)
        {
          v367 = (float64x2_t *)sub_20F762098(v1530 + 2279, v364, v365, 6u);
          v2176 = vld2q_f64(v1533.f64);
          v2215 = vld2q_f64(v1535.f64);
          v368 = v1543.f64[n];
          v369 = v1543.f64[n + 1];
          v370 = vaddq_f64(v367[2], vmlaq_n_f64(vmulq_n_f64(v2215.val[0], v368), v2215.val[1], v369));
          v371 = vaddq_f64(v367[1], vmlaq_n_f64(vmulq_n_f64(v2176.val[0], v368), v2176.val[1], v369));
          *v367 = vaddq_f64(*v367, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v368), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v369));
          v367[1] = v371;
          v367[2] = v370;
          LODWORD(v365) = v365 + 1;
        }
        v363 = *(unsigned int **)(a2 + 72);
        v226 = v1530;
      }
    }
  }
  v372 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v372 + 20))
  {
    if (*((_BYTE *)v363 + 20))
    {
      v373 = *(_QWORD *)(*v21 + 8 * (v226[2236] + *v372));
      v374 = *(_QWORD *)(*v21 + 8 * (v226[2233] + *v363));
      if (v373 <= v374)
      {
        v375 = 0;
        v376 = &v1543.f64[1];
        do
        {
          v377 = (float64x2_t *)sub_20F762098(v226 + 2279, v373, (int)v374 + (int)v375, 6u);
          v1635 = vld2q_f64(v1537.f64);
          v1904 = vld2q_f64(v1539.f64);
          v2195 = vld2q_f64(v1541.f64);
          v378 = *(v376 - 1);
          v379 = vmlaq_n_f64(vmulq_n_f64(v1635.val[0], v378), v1635.val[1], *v376);
          v1635.val[1] = vaddq_f64(v377[2], vmlaq_n_f64(vmulq_n_f64(v2195.val[0], v378), v2195.val[1], *v376));
          v1635.val[0] = vaddq_f64(v377[1], vmlaq_n_f64(vmulq_n_f64(v1904.val[0], v378), v1904.val[1], *v376));
          *v377 = vaddq_f64(*v377, v379);
          *(float64x2x2_t *)v377[1].f64 = v1635;
          ++v375;
          v376 += 2;
        }
        while (v375 != 6);
        v363 = *(unsigned int **)(a2 + 72);
        v226 = v1530;
      }
    }
  }
  if (*((_BYTE *)v363 + 20))
  {
    v380 = 0;
    v381 = *(_QWORD *)(*v21 + 8 * (v226[2233] + *v363));
    v382 = &v1543.f64[1];
    do
    {
      v383 = (float64x2_t *)sub_20F762098(v226 + 2279, v381, (int)v381 + (int)v380, 6u);
      v1636 = vld2q_f64(v1543.f64);
      v1905 = vld2q_f64(v1545.f64);
      v2196 = vld2q_f64(v1547.f64);
      v384 = *(v382 - 1);
      v385 = vmlaq_n_f64(vmulq_n_f64(v1636.val[0], v384), v1636.val[1], *v382);
      v1636.val[1] = vaddq_f64(v383[2], vmlaq_n_f64(vmulq_n_f64(v2196.val[0], v384), v2196.val[1], *v382));
      v1636.val[0] = vaddq_f64(v383[1], vmlaq_n_f64(vmulq_n_f64(v1905.val[0], v384), v1905.val[1], *v382));
      *v383 = vaddq_f64(*v383, v385);
      *(float64x2x2_t *)v383[1].f64 = v1636;
      ++v380;
      v382 += 2;
    }
    while (v380 != 6);
    v386 = (float64x2_t *)(v226[2270] + 8 * v381);
    v1637 = vld2q_f64(v1543.f64);
    v2149 = vld2q_f64(v1545.f64);
    v2216 = vld2q_f64(v1547.f64);
    v387 = vmlaq_laneq_f64(vmulq_n_f64(v1637.val[0], v1527->f64[0]), v1637.val[1], *v1527, 1);
    v1637.val[1] = vsubq_f64(v386[2], vmlaq_laneq_f64(vmulq_n_f64(v2216.val[0], v1527->f64[0]), v2216.val[1], *v1527, 1));
    v1637.val[0] = vsubq_f64(v386[1], vmlaq_laneq_f64(vmulq_n_f64(v2149.val[0], v1527->f64[0]), v2149.val[1], *v1527, 1));
    *v386 = vsubq_f64(*v386, v387);
    *(float64x2x2_t *)v386[1].f64 = v1637;
  }
  v388 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v388 + 20))
  {
    v389 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v389 + 20))
    {
      v390 = v1530[2233];
      v391 = *(_QWORD *)(*v21 + 8 * (v390 + *v388));
      v392 = *(_QWORD *)(*v21 + 8 * (v390 + *v389));
      if (v391 <= v392)
      {
        v393 = 0;
        v394 = &v1543.f64[1];
        do
        {
          v395 = (float64x2_t *)sub_20F762098(v1530 + 2279, v391, (int)v392 + (int)v393, 6u);
          v1638 = vld2q_f64(v1549.f64);
          v1906 = vld2q_f64(v1551.f64);
          v2197 = vld2q_f64(v1553.f64);
          v396 = *(v394 - 1);
          v397 = vmlaq_n_f64(vmulq_n_f64(v1638.val[0], v396), v1638.val[1], *v394);
          v1638.val[1] = vaddq_f64(v395[2], vmlaq_n_f64(vmulq_n_f64(v2197.val[0], v396), v2197.val[1], *v394));
          v1638.val[0] = vaddq_f64(v395[1], vmlaq_n_f64(vmulq_n_f64(v1906.val[0], v396), v1906.val[1], *v394));
          *v395 = vaddq_f64(*v395, v397);
          *(float64x2x2_t *)v395[1].f64 = v1638;
          ++v393;
          v394 += 2;
        }
        while (v393 != 6);
      }
    }
  }
  v398 = *(unsigned int **)(a2 + 88);
  v399 = v1530;
  if (*((_BYTE *)v398 + 20))
  {
    v400 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v400 + 20))
    {
      v401 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v398));
      v402 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v400));
      if (v401 <= v402)
      {
        v403 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v398)), v402, 4u);
        v1639 = vld2q_f64(v1555.f64);
        v404 = &v1557;
        v1907 = vld2q_f64(v404->f64);
        v405 = vmlaq_n_f64(vmulq_n_f64(v1639.val[0], v1543.f64[0]), v1639.val[1], v1543.f64[1]);
        v1639.val[0] = vaddq_f64(v403[1], vmlaq_n_f64(vmulq_n_f64(v1907.val[0], v1543.f64[0]), v1907.val[1], v1543.f64[1]));
        *v403 = vaddq_f64(*v403, v405);
        v403[1] = v1639.val[0];
        v406 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 1, 4u);
        v1640 = vld2q_f64(v1555.f64);
        v1908 = vld2q_f64(v1557.f64);
        v407 = vmlaq_n_f64(vmulq_n_f64(v1640.val[0], v1544.f64[0]), v1640.val[1], v1544.f64[1]);
        v1640.val[0] = vaddq_f64(v406[1], vmlaq_n_f64(vmulq_n_f64(v1908.val[0], v1544.f64[0]), v1908.val[1], v1544.f64[1]));
        *v406 = vaddq_f64(*v406, v407);
        v406[1] = v1640.val[0];
        v408 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 2, 4u);
        v1641 = vld2q_f64(v1555.f64);
        v1909 = vld2q_f64(v1557.f64);
        v409 = vmlaq_n_f64(vmulq_n_f64(v1641.val[0], v1545.f64[0]), v1641.val[1], v1545.f64[1]);
        v1641.val[0] = vaddq_f64(v408[1], vmlaq_n_f64(vmulq_n_f64(v1909.val[0], v1545.f64[0]), v1909.val[1], v1545.f64[1]));
        *v408 = vaddq_f64(*v408, v409);
        v408[1] = v1641.val[0];
        v410 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 3, 4u);
        v1642 = vld2q_f64(v1555.f64);
        v1910 = vld2q_f64(v1557.f64);
        v411 = vmlaq_n_f64(vmulq_n_f64(v1642.val[0], v1546.f64[0]), v1642.val[1], v1546.f64[1]);
        v1642.val[0] = vaddq_f64(v410[1], vmlaq_n_f64(vmulq_n_f64(v1910.val[0], v1546.f64[0]), v1910.val[1], v1546.f64[1]));
        *v410 = vaddq_f64(*v410, v411);
        v410[1] = v1642.val[0];
        v412 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 4, 4u);
        v1643 = vld2q_f64(v1555.f64);
        v1911 = vld2q_f64(v1557.f64);
        v413 = vmlaq_n_f64(vmulq_n_f64(v1643.val[0], v1547.f64[0]), v1643.val[1], v1547.f64[1]);
        v1643.val[0] = vaddq_f64(v412[1], vmlaq_n_f64(vmulq_n_f64(v1911.val[0], v1547.f64[0]), v1911.val[1], v1547.f64[1]));
        *v412 = vaddq_f64(*v412, v413);
        v412[1] = v1643.val[0];
        v414 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 5, 4u);
        v1644 = vld2q_f64(v1555.f64);
        v1912 = vld2q_f64(v1557.f64);
        v415 = vmlaq_n_f64(vmulq_n_f64(v1644.val[0], v1548.f64[0]), v1644.val[1], v1548.f64[1]);
        v1644.val[0] = vaddq_f64(v414[1], vmlaq_n_f64(vmulq_n_f64(v1912.val[0], v1548.f64[0]), v1912.val[1], v1548.f64[1]));
        *v414 = vaddq_f64(*v414, v415);
        v414[1] = v1644.val[0];
      }
    }
  }
  v416 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v416 + 20))
  {
    v417 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v417 + 20))
    {
      v418 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v416));
      v419 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v417));
      if (v418 <= v419)
      {
        v420 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v416)), v419, 4u);
        v1645 = vld2q_f64(v1559.f64);
        v421 = &v1561;
        v1913 = vld2q_f64(v421->f64);
        v422 = vmlaq_n_f64(vmulq_n_f64(v1645.val[0], v1543.f64[0]), v1645.val[1], v1543.f64[1]);
        v1645.val[0] = vaddq_f64(v420[1], vmlaq_n_f64(vmulq_n_f64(v1913.val[0], v1543.f64[0]), v1913.val[1], v1543.f64[1]));
        *v420 = vaddq_f64(*v420, v422);
        v420[1] = v1645.val[0];
        v423 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 1, 4u);
        v1646 = vld2q_f64(v1559.f64);
        v1914 = vld2q_f64(v1561.f64);
        v424 = vmlaq_n_f64(vmulq_n_f64(v1646.val[0], v1544.f64[0]), v1646.val[1], v1544.f64[1]);
        v1646.val[0] = vaddq_f64(v423[1], vmlaq_n_f64(vmulq_n_f64(v1914.val[0], v1544.f64[0]), v1914.val[1], v1544.f64[1]));
        *v423 = vaddq_f64(*v423, v424);
        v423[1] = v1646.val[0];
        v425 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 2, 4u);
        v1647 = vld2q_f64(v1559.f64);
        v1915 = vld2q_f64(v1561.f64);
        v426 = vmlaq_n_f64(vmulq_n_f64(v1647.val[0], v1545.f64[0]), v1647.val[1], v1545.f64[1]);
        v1647.val[0] = vaddq_f64(v425[1], vmlaq_n_f64(vmulq_n_f64(v1915.val[0], v1545.f64[0]), v1915.val[1], v1545.f64[1]));
        *v425 = vaddq_f64(*v425, v426);
        v425[1] = v1647.val[0];
        v427 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 3, 4u);
        v1648 = vld2q_f64(v1559.f64);
        v1916 = vld2q_f64(v1561.f64);
        v428 = vmlaq_n_f64(vmulq_n_f64(v1648.val[0], v1546.f64[0]), v1648.val[1], v1546.f64[1]);
        v1648.val[0] = vaddq_f64(v427[1], vmlaq_n_f64(vmulq_n_f64(v1916.val[0], v1546.f64[0]), v1916.val[1], v1546.f64[1]));
        *v427 = vaddq_f64(*v427, v428);
        v427[1] = v1648.val[0];
        v429 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 4, 4u);
        v1649 = vld2q_f64(v1559.f64);
        v1917 = vld2q_f64(v1561.f64);
        v430 = vmlaq_n_f64(vmulq_n_f64(v1649.val[0], v1547.f64[0]), v1649.val[1], v1547.f64[1]);
        v1649.val[0] = vaddq_f64(v429[1], vmlaq_n_f64(vmulq_n_f64(v1917.val[0], v1547.f64[0]), v1917.val[1], v1547.f64[1]));
        *v429 = vaddq_f64(*v429, v430);
        v429[1] = v1649.val[0];
        v431 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 5, 4u);
        v1650 = vld2q_f64(v1559.f64);
        v1918 = vld2q_f64(v1561.f64);
        v432 = vmlaq_n_f64(vmulq_n_f64(v1650.val[0], v1548.f64[0]), v1650.val[1], v1548.f64[1]);
        v1650.val[0] = vaddq_f64(v431[1], vmlaq_n_f64(vmulq_n_f64(v1918.val[0], v1548.f64[0]), v1918.val[1], v1548.f64[1]));
        *v431 = vaddq_f64(*v431, v432);
        v431[1] = v1650.val[0];
      }
    }
  }
  v433 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v433 + 20))
  {
    v434 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v434 + 20))
    {
      v435 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v433));
      v436 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v434));
      if (v435 <= v436)
      {
        v437 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v433)), v436, 4u);
        v1651 = vld2q_f64(v1563.f64);
        v438 = &v1565;
        v1919 = vld2q_f64(v438->f64);
        v439 = vmlaq_n_f64(vmulq_n_f64(v1651.val[0], v1543.f64[0]), v1651.val[1], v1543.f64[1]);
        v1651.val[0] = vaddq_f64(v437[1], vmlaq_n_f64(vmulq_n_f64(v1919.val[0], v1543.f64[0]), v1919.val[1], v1543.f64[1]));
        *v437 = vaddq_f64(*v437, v439);
        v437[1] = v1651.val[0];
        v440 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 1, 4u);
        v1652 = vld2q_f64(v1563.f64);
        v1920 = vld2q_f64(v1565.f64);
        v441 = vmlaq_n_f64(vmulq_n_f64(v1652.val[0], v1544.f64[0]), v1652.val[1], v1544.f64[1]);
        v1652.val[0] = vaddq_f64(v440[1], vmlaq_n_f64(vmulq_n_f64(v1920.val[0], v1544.f64[0]), v1920.val[1], v1544.f64[1]));
        *v440 = vaddq_f64(*v440, v441);
        v440[1] = v1652.val[0];
        v442 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 2, 4u);
        v1653 = vld2q_f64(v1563.f64);
        v1921 = vld2q_f64(v1565.f64);
        v443 = vmlaq_n_f64(vmulq_n_f64(v1653.val[0], v1545.f64[0]), v1653.val[1], v1545.f64[1]);
        v1653.val[0] = vaddq_f64(v442[1], vmlaq_n_f64(vmulq_n_f64(v1921.val[0], v1545.f64[0]), v1921.val[1], v1545.f64[1]));
        *v442 = vaddq_f64(*v442, v443);
        v442[1] = v1653.val[0];
        v444 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 3, 4u);
        v1654 = vld2q_f64(v1563.f64);
        v1922 = vld2q_f64(v1565.f64);
        v445 = vmlaq_n_f64(vmulq_n_f64(v1654.val[0], v1546.f64[0]), v1654.val[1], v1546.f64[1]);
        v1654.val[0] = vaddq_f64(v444[1], vmlaq_n_f64(vmulq_n_f64(v1922.val[0], v1546.f64[0]), v1922.val[1], v1546.f64[1]));
        *v444 = vaddq_f64(*v444, v445);
        v444[1] = v1654.val[0];
        v446 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 4, 4u);
        v1655 = vld2q_f64(v1563.f64);
        v1923 = vld2q_f64(v1565.f64);
        v447 = vmlaq_n_f64(vmulq_n_f64(v1655.val[0], v1547.f64[0]), v1655.val[1], v1547.f64[1]);
        v1655.val[0] = vaddq_f64(v446[1], vmlaq_n_f64(vmulq_n_f64(v1923.val[0], v1547.f64[0]), v1923.val[1], v1547.f64[1]));
        *v446 = vaddq_f64(*v446, v447);
        v446[1] = v1655.val[0];
        v448 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 5, 4u);
        v1656 = vld2q_f64(v1563.f64);
        v1924 = vld2q_f64(v1565.f64);
        v449 = vmlaq_n_f64(vmulq_n_f64(v1656.val[0], v1548.f64[0]), v1656.val[1], v1548.f64[1]);
        v1656.val[0] = vaddq_f64(v448[1], vmlaq_n_f64(vmulq_n_f64(v1924.val[0], v1548.f64[0]), v1924.val[1], v1548.f64[1]));
        *v448 = vaddq_f64(*v448, v449);
        v448[1] = v1656.val[0];
      }
    }
  }
  v450 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v450 + 20))
  {
    v451 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v451 + 20))
    {
      v452 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v450));
      v453 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v451));
      if (v452 <= v453)
      {
        v454 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v450)), v453, 4u);
        v1657 = vld2q_f64(v1567.f64);
        v455 = &v1569;
        v1925 = vld2q_f64(v455->f64);
        v456 = vmlaq_n_f64(vmulq_n_f64(v1657.val[0], v1543.f64[0]), v1657.val[1], v1543.f64[1]);
        v1657.val[0] = vaddq_f64(v454[1], vmlaq_n_f64(vmulq_n_f64(v1925.val[0], v1543.f64[0]), v1925.val[1], v1543.f64[1]));
        *v454 = vaddq_f64(*v454, v456);
        v454[1] = v1657.val[0];
        v457 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 1, 4u);
        v1658 = vld2q_f64(v1567.f64);
        v1926 = vld2q_f64(v1569.f64);
        v458 = vmlaq_n_f64(vmulq_n_f64(v1658.val[0], v1544.f64[0]), v1658.val[1], v1544.f64[1]);
        v1658.val[0] = vaddq_f64(v457[1], vmlaq_n_f64(vmulq_n_f64(v1926.val[0], v1544.f64[0]), v1926.val[1], v1544.f64[1]));
        *v457 = vaddq_f64(*v457, v458);
        v457[1] = v1658.val[0];
        v459 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 2, 4u);
        v1659 = vld2q_f64(v1567.f64);
        v1927 = vld2q_f64(v1569.f64);
        v460 = vmlaq_n_f64(vmulq_n_f64(v1659.val[0], v1545.f64[0]), v1659.val[1], v1545.f64[1]);
        v1659.val[0] = vaddq_f64(v459[1], vmlaq_n_f64(vmulq_n_f64(v1927.val[0], v1545.f64[0]), v1927.val[1], v1545.f64[1]));
        *v459 = vaddq_f64(*v459, v460);
        v459[1] = v1659.val[0];
        v461 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 3, 4u);
        v1660 = vld2q_f64(v1567.f64);
        v1928 = vld2q_f64(v1569.f64);
        v462 = vmlaq_n_f64(vmulq_n_f64(v1660.val[0], v1546.f64[0]), v1660.val[1], v1546.f64[1]);
        v1660.val[0] = vaddq_f64(v461[1], vmlaq_n_f64(vmulq_n_f64(v1928.val[0], v1546.f64[0]), v1928.val[1], v1546.f64[1]));
        *v461 = vaddq_f64(*v461, v462);
        v461[1] = v1660.val[0];
        v463 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 4, 4u);
        v1661 = vld2q_f64(v1567.f64);
        v1929 = vld2q_f64(v1569.f64);
        v464 = vmlaq_n_f64(vmulq_n_f64(v1661.val[0], v1547.f64[0]), v1661.val[1], v1547.f64[1]);
        v1661.val[0] = vaddq_f64(v463[1], vmlaq_n_f64(vmulq_n_f64(v1929.val[0], v1547.f64[0]), v1929.val[1], v1547.f64[1]));
        *v463 = vaddq_f64(*v463, v464);
        v463[1] = v1661.val[0];
        v465 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 5, 4u);
        v1662 = vld2q_f64(v1567.f64);
        v1930 = vld2q_f64(v1569.f64);
        v466 = vmlaq_n_f64(vmulq_n_f64(v1662.val[0], v1548.f64[0]), v1662.val[1], v1548.f64[1]);
        v1662.val[0] = vaddq_f64(v465[1], vmlaq_n_f64(vmulq_n_f64(v1930.val[0], v1548.f64[0]), v1930.val[1], v1548.f64[1]));
        *v465 = vaddq_f64(*v465, v466);
        v465[1] = v1662.val[0];
      }
    }
  }
  v467 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v467 + 20))
  {
    v468 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v468 + 20))
    {
      v469 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v467));
      v470 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v468));
      if (v469 <= v470)
      {
        v471 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v467)), v470, 3u);
        v472.f64[0] = v471[1].f64[0];
        v1931 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1543.f64[1];
        v475 = vmlaq_n_f64(vmulq_n_f64(v1931.val[0], v1543.f64[0]), v1931.val[1], v1543.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v471 = vaddq_f64(*v471, v475);
        *(_QWORD *)&v471[1].f64[0] = *(_OWORD *)&vaddq_f64(v472, v1931.val[0]);
        v476 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 1, 3u);
        v477.f64[0] = v476[1].f64[0];
        v1932 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1544.f64[1];
        v480 = vmlaq_n_f64(vmulq_n_f64(v1932.val[0], v1544.f64[0]), v1932.val[1], v1544.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v476 = vaddq_f64(*v476, v480);
        *(_QWORD *)&v476[1].f64[0] = *(_OWORD *)&vaddq_f64(v477, v1932.val[0]);
        v481 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 2, 3u);
        v482.f64[0] = v481[1].f64[0];
        v1933 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1545.f64[1];
        v485 = vmlaq_n_f64(vmulq_n_f64(v1933.val[0], v1545.f64[0]), v1933.val[1], v1545.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v481 = vaddq_f64(*v481, v485);
        *(_QWORD *)&v481[1].f64[0] = *(_OWORD *)&vaddq_f64(v482, v1933.val[0]);
        v486 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 3, 3u);
        v487.f64[0] = v486[1].f64[0];
        v1934 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1546.f64[1];
        v490 = vmlaq_n_f64(vmulq_n_f64(v1934.val[0], v1546.f64[0]), v1934.val[1], v1546.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v486 = vaddq_f64(*v486, v490);
        *(_QWORD *)&v486[1].f64[0] = *(_OWORD *)&vaddq_f64(v487, v1934.val[0]);
        v491 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 4, 3u);
        v492.f64[0] = v491[1].f64[0];
        v1935 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1547.f64[1];
        v495 = vmlaq_n_f64(vmulq_n_f64(v1935.val[0], v1547.f64[0]), v1935.val[1], v1547.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v491 = vaddq_f64(*v491, v495);
        *(_QWORD *)&v491[1].f64[0] = *(_OWORD *)&vaddq_f64(v492, v1935.val[0]);
        v496 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 5, 3u);
        v1815 = vld2q_f64(v1571.f64);
        v497.f64[0] = v496[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1548.f64[1];
        v500 = vmlaq_n_f64(vmulq_n_f64(v1815.val[0], v1548.f64[0]), v1815.val[1], v1548.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v496 = vaddq_f64(*v496, v500);
        *(_QWORD *)&v496[1].f64[0] = *(_OWORD *)&vaddq_f64(v497, v1815.val[0]);
      }
    }
  }
  v501 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v501 + 20))
  {
    v502 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v502 + 20))
    {
      v503 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v501));
      v504 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v502));
      if (v503 <= v504)
      {
        v505 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v501)), v504, 3u);
        v506.f64[0] = v505[1].f64[0];
        v1936 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1543.f64[1];
        v509 = vmlaq_n_f64(vmulq_n_f64(v1936.val[0], v1543.f64[0]), v1936.val[1], v1543.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v505 = vaddq_f64(*v505, v509);
        *(_QWORD *)&v505[1].f64[0] = *(_OWORD *)&vaddq_f64(v506, v1936.val[0]);
        v510 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 1, 3u);
        v511.f64[0] = v510[1].f64[0];
        v1937 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1544.f64[1];
        v514 = vmlaq_n_f64(vmulq_n_f64(v1937.val[0], v1544.f64[0]), v1937.val[1], v1544.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v510 = vaddq_f64(*v510, v514);
        *(_QWORD *)&v510[1].f64[0] = *(_OWORD *)&vaddq_f64(v511, v1937.val[0]);
        v515 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 2, 3u);
        v516.f64[0] = v515[1].f64[0];
        v1938 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1545.f64[1];
        v519 = vmlaq_n_f64(vmulq_n_f64(v1938.val[0], v1545.f64[0]), v1938.val[1], v1545.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v515 = vaddq_f64(*v515, v519);
        *(_QWORD *)&v515[1].f64[0] = *(_OWORD *)&vaddq_f64(v516, v1938.val[0]);
        v520 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 3, 3u);
        v521.f64[0] = v520[1].f64[0];
        v1939 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1546.f64[1];
        v524 = vmlaq_n_f64(vmulq_n_f64(v1939.val[0], v1546.f64[0]), v1939.val[1], v1546.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v520 = vaddq_f64(*v520, v524);
        *(_QWORD *)&v520[1].f64[0] = *(_OWORD *)&vaddq_f64(v521, v1939.val[0]);
        v525 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 4, 3u);
        v526.f64[0] = v525[1].f64[0];
        v1940 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1547.f64[1];
        v529 = vmlaq_n_f64(vmulq_n_f64(v1940.val[0], v1547.f64[0]), v1940.val[1], v1547.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v525 = vaddq_f64(*v525, v529);
        *(_QWORD *)&v525[1].f64[0] = *(_OWORD *)&vaddq_f64(v526, v1940.val[0]);
        v530 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 5, 3u);
        v1816 = vld2q_f64(v1574.f64);
        v531.f64[0] = v530[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1548.f64[1];
        v534 = vmlaq_n_f64(vmulq_n_f64(v1816.val[0], v1548.f64[0]), v1816.val[1], v1548.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v530 = vaddq_f64(*v530, v534);
        *(_QWORD *)&v530[1].f64[0] = *(_OWORD *)&vaddq_f64(v531, v1816.val[0]);
      }
    }
  }
  v535 = *(unsigned int **)(a2 + 56);
  v536 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v535 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v537 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v535));
      v538 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v536));
      if (v537 <= v538)
      {
        for (ii = 0; ii != 12; ii += 2)
        {
          v540 = (float64x2_t *)sub_20F762098(v1530 + 2279, v537, v538, 6u);
          v2177 = vld2q_f64(v1533.f64);
          v2217 = vld2q_f64(v1535.f64);
          v541 = v1549.f64[ii];
          v542 = v1549.f64[ii + 1];
          v543 = vaddq_f64(v540[2], vmlaq_n_f64(vmulq_n_f64(v2217.val[0], v541), v2217.val[1], v542));
          v544 = vaddq_f64(v540[1], vmlaq_n_f64(vmulq_n_f64(v2177.val[0], v541), v2177.val[1], v542));
          *v540 = vaddq_f64(*v540, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v541), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v542));
          v540[1] = v544;
          v540[2] = v543;
          LODWORD(v538) = v538 + 1;
        }
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  v545 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v545 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v546 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v545));
      v547 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v536));
      if (v546 <= v547)
      {
        v548 = 0;
        v549 = &v1549.f64[1];
        do
        {
          v550 = (float64x2_t *)sub_20F762098(v399 + 2279, v546, (int)v547 + (int)v548, 6u);
          v1663 = vld2q_f64(v1537.f64);
          v1941 = vld2q_f64(v1539.f64);
          v2198 = vld2q_f64(v1541.f64);
          v551 = *(v549 - 1);
          v552 = vmlaq_n_f64(vmulq_n_f64(v1663.val[0], v551), v1663.val[1], *v549);
          v1663.val[1] = vaddq_f64(v550[2], vmlaq_n_f64(vmulq_n_f64(v2198.val[0], v551), v2198.val[1], *v549));
          v1663.val[0] = vaddq_f64(v550[1], vmlaq_n_f64(vmulq_n_f64(v1941.val[0], v551), v1941.val[1], *v549));
          *v550 = vaddq_f64(*v550, v552);
          *(float64x2x2_t *)v550[1].f64 = v1663;
          ++v548;
          v549 += 2;
        }
        while (v548 != 6);
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  v553 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v553 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v554 = v399[2233];
      v555 = *(_QWORD *)(*v21 + 8 * (v554 + *v553));
      v556 = *(_QWORD *)(*v21 + 8 * (v554 + *v536));
      if (v555 <= v556)
      {
        v557 = 0;
        v558 = &v1549.f64[1];
        do
        {
          v559 = (float64x2_t *)sub_20F762098(v399 + 2279, v555, (int)v556 + (int)v557, 6u);
          v1664 = vld2q_f64(v1543.f64);
          v1942 = vld2q_f64(v1545.f64);
          v2199 = vld2q_f64(v1547.f64);
          v560 = *(v558 - 1);
          v561 = vmlaq_n_f64(vmulq_n_f64(v1664.val[0], v560), v1664.val[1], *v558);
          v1664.val[1] = vaddq_f64(v559[2], vmlaq_n_f64(vmulq_n_f64(v2199.val[0], v560), v2199.val[1], *v558));
          v1664.val[0] = vaddq_f64(v559[1], vmlaq_n_f64(vmulq_n_f64(v1942.val[0], v560), v1942.val[1], *v558));
          *v559 = vaddq_f64(*v559, v561);
          *(float64x2x2_t *)v559[1].f64 = v1664;
          ++v557;
          v558 += 2;
        }
        while (v557 != 6);
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  if (*((_BYTE *)v536 + 20))
  {
    v562 = 0;
    v563 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v536));
    v564 = &v1549.f64[1];
    do
    {
      v565 = (float64x2_t *)sub_20F762098(v399 + 2279, v563, (int)v563 + (int)v562, 6u);
      v1665 = vld2q_f64(v1549.f64);
      v1943 = vld2q_f64(v1551.f64);
      v2200 = vld2q_f64(v1553.f64);
      v566 = *(v564 - 1);
      v567 = vmlaq_n_f64(vmulq_n_f64(v1665.val[0], v566), v1665.val[1], *v564);
      v1665.val[1] = vaddq_f64(v565[2], vmlaq_n_f64(vmulq_n_f64(v2200.val[0], v566), v2200.val[1], *v564));
      v1665.val[0] = vaddq_f64(v565[1], vmlaq_n_f64(vmulq_n_f64(v1943.val[0], v566), v1943.val[1], *v564));
      *v565 = vaddq_f64(*v565, v567);
      *(float64x2x2_t *)v565[1].f64 = v1665;
      ++v562;
      v564 += 2;
    }
    while (v562 != 6);
    v568 = (float64x2_t *)(v399[2270] + 8 * v563);
    v1666 = vld2q_f64(v1549.f64);
    v2150 = vld2q_f64(v1551.f64);
    v2218 = vld2q_f64(v1553.f64);
    v569 = vmlaq_laneq_f64(vmulq_n_f64(v1666.val[0], v1527->f64[0]), v1666.val[1], *v1527, 1);
    v1666.val[1] = vsubq_f64(v568[2], vmlaq_laneq_f64(vmulq_n_f64(v2218.val[0], v1527->f64[0]), v2218.val[1], *v1527, 1));
    v1666.val[0] = vsubq_f64(v568[1], vmlaq_laneq_f64(vmulq_n_f64(v2150.val[0], v1527->f64[0]), v2150.val[1], *v1527, 1));
    *v568 = vsubq_f64(*v568, v569);
    *(float64x2x2_t *)v568[1].f64 = v1666;
  }
  v570 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v570 + 20))
  {
    v571 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v571 + 20))
    {
      v572 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v570));
      v573 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v571));
      if (v572 <= v573)
      {
        v574 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v570)), v573, 4u);
        v1667 = vld2q_f64(v1555.f64);
        v575 = &v1557;
        v1944 = vld2q_f64(v575->f64);
        v576 = vmlaq_n_f64(vmulq_n_f64(v1667.val[0], v1549.f64[0]), v1667.val[1], v1549.f64[1]);
        v1667.val[0] = vaddq_f64(v574[1], vmlaq_n_f64(vmulq_n_f64(v1944.val[0], v1549.f64[0]), v1944.val[1], v1549.f64[1]));
        *v574 = vaddq_f64(*v574, v576);
        v574[1] = v1667.val[0];
        v577 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 1, 4u);
        v1668 = vld2q_f64(v1555.f64);
        v1945 = vld2q_f64(v1557.f64);
        v578 = vmlaq_n_f64(vmulq_n_f64(v1668.val[0], v1550.f64[0]), v1668.val[1], v1550.f64[1]);
        v1668.val[0] = vaddq_f64(v577[1], vmlaq_n_f64(vmulq_n_f64(v1945.val[0], v1550.f64[0]), v1945.val[1], v1550.f64[1]));
        *v577 = vaddq_f64(*v577, v578);
        v577[1] = v1668.val[0];
        v579 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 2, 4u);
        v1669 = vld2q_f64(v1555.f64);
        v1946 = vld2q_f64(v1557.f64);
        v580 = vmlaq_n_f64(vmulq_n_f64(v1669.val[0], v1551.f64[0]), v1669.val[1], v1551.f64[1]);
        v1669.val[0] = vaddq_f64(v579[1], vmlaq_n_f64(vmulq_n_f64(v1946.val[0], v1551.f64[0]), v1946.val[1], v1551.f64[1]));
        *v579 = vaddq_f64(*v579, v580);
        v579[1] = v1669.val[0];
        v581 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 3, 4u);
        v1670 = vld2q_f64(v1555.f64);
        v1947 = vld2q_f64(v1557.f64);
        v582 = vmlaq_n_f64(vmulq_n_f64(v1670.val[0], v1552.f64[0]), v1670.val[1], v1552.f64[1]);
        v1670.val[0] = vaddq_f64(v581[1], vmlaq_n_f64(vmulq_n_f64(v1947.val[0], v1552.f64[0]), v1947.val[1], v1552.f64[1]));
        *v581 = vaddq_f64(*v581, v582);
        v581[1] = v1670.val[0];
        v583 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 4, 4u);
        v1671 = vld2q_f64(v1555.f64);
        v1948 = vld2q_f64(v1557.f64);
        v584 = vmlaq_n_f64(vmulq_n_f64(v1671.val[0], v1553.f64[0]), v1671.val[1], v1553.f64[1]);
        v1671.val[0] = vaddq_f64(v583[1], vmlaq_n_f64(vmulq_n_f64(v1948.val[0], v1553.f64[0]), v1948.val[1], v1553.f64[1]));
        *v583 = vaddq_f64(*v583, v584);
        v583[1] = v1671.val[0];
        v585 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 5, 4u);
        v1672 = vld2q_f64(v1555.f64);
        v1949 = vld2q_f64(v1557.f64);
        v586 = vmlaq_n_f64(vmulq_n_f64(v1672.val[0], v1554.f64[0]), v1672.val[1], v1554.f64[1]);
        v1672.val[0] = vaddq_f64(v585[1], vmlaq_n_f64(vmulq_n_f64(v1949.val[0], v1554.f64[0]), v1949.val[1], v1554.f64[1]));
        *v585 = vaddq_f64(*v585, v586);
        v585[1] = v1672.val[0];
      }
    }
  }
  v587 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v587 + 20))
  {
    v588 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v588 + 20))
    {
      v589 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v587));
      v590 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v588));
      if (v589 <= v590)
      {
        v591 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v587)), v590, 4u);
        v1673 = vld2q_f64(v1559.f64);
        v592 = &v1561;
        v1950 = vld2q_f64(v592->f64);
        v593 = vmlaq_n_f64(vmulq_n_f64(v1673.val[0], v1549.f64[0]), v1673.val[1], v1549.f64[1]);
        v1673.val[0] = vaddq_f64(v591[1], vmlaq_n_f64(vmulq_n_f64(v1950.val[0], v1549.f64[0]), v1950.val[1], v1549.f64[1]));
        *v591 = vaddq_f64(*v591, v593);
        v591[1] = v1673.val[0];
        v594 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 1, 4u);
        v1674 = vld2q_f64(v1559.f64);
        v1951 = vld2q_f64(v1561.f64);
        v595 = vmlaq_n_f64(vmulq_n_f64(v1674.val[0], v1550.f64[0]), v1674.val[1], v1550.f64[1]);
        v1674.val[0] = vaddq_f64(v594[1], vmlaq_n_f64(vmulq_n_f64(v1951.val[0], v1550.f64[0]), v1951.val[1], v1550.f64[1]));
        *v594 = vaddq_f64(*v594, v595);
        v594[1] = v1674.val[0];
        v596 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 2, 4u);
        v1675 = vld2q_f64(v1559.f64);
        v1952 = vld2q_f64(v1561.f64);
        v597 = vmlaq_n_f64(vmulq_n_f64(v1675.val[0], v1551.f64[0]), v1675.val[1], v1551.f64[1]);
        v1675.val[0] = vaddq_f64(v596[1], vmlaq_n_f64(vmulq_n_f64(v1952.val[0], v1551.f64[0]), v1952.val[1], v1551.f64[1]));
        *v596 = vaddq_f64(*v596, v597);
        v596[1] = v1675.val[0];
        v598 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 3, 4u);
        v1676 = vld2q_f64(v1559.f64);
        v1953 = vld2q_f64(v1561.f64);
        v599 = vmlaq_n_f64(vmulq_n_f64(v1676.val[0], v1552.f64[0]), v1676.val[1], v1552.f64[1]);
        v1676.val[0] = vaddq_f64(v598[1], vmlaq_n_f64(vmulq_n_f64(v1953.val[0], v1552.f64[0]), v1953.val[1], v1552.f64[1]));
        *v598 = vaddq_f64(*v598, v599);
        v598[1] = v1676.val[0];
        v600 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 4, 4u);
        v1677 = vld2q_f64(v1559.f64);
        v1954 = vld2q_f64(v1561.f64);
        v601 = vmlaq_n_f64(vmulq_n_f64(v1677.val[0], v1553.f64[0]), v1677.val[1], v1553.f64[1]);
        v1677.val[0] = vaddq_f64(v600[1], vmlaq_n_f64(vmulq_n_f64(v1954.val[0], v1553.f64[0]), v1954.val[1], v1553.f64[1]));
        *v600 = vaddq_f64(*v600, v601);
        v600[1] = v1677.val[0];
        v602 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 5, 4u);
        v1678 = vld2q_f64(v1559.f64);
        v1955 = vld2q_f64(v1561.f64);
        v603 = vmlaq_n_f64(vmulq_n_f64(v1678.val[0], v1554.f64[0]), v1678.val[1], v1554.f64[1]);
        v1678.val[0] = vaddq_f64(v602[1], vmlaq_n_f64(vmulq_n_f64(v1955.val[0], v1554.f64[0]), v1955.val[1], v1554.f64[1]));
        *v602 = vaddq_f64(*v602, v603);
        v602[1] = v1678.val[0];
      }
    }
  }
  v604 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v604 + 20))
  {
    v605 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v605 + 20))
    {
      v606 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v604));
      v607 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v605));
      if (v606 <= v607)
      {
        v608 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v604)), v607, 4u);
        v1679 = vld2q_f64(v1563.f64);
        v609 = &v1565;
        v1956 = vld2q_f64(v609->f64);
        v610 = vmlaq_n_f64(vmulq_n_f64(v1679.val[0], v1549.f64[0]), v1679.val[1], v1549.f64[1]);
        v1679.val[0] = vaddq_f64(v608[1], vmlaq_n_f64(vmulq_n_f64(v1956.val[0], v1549.f64[0]), v1956.val[1], v1549.f64[1]));
        *v608 = vaddq_f64(*v608, v610);
        v608[1] = v1679.val[0];
        v611 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 1, 4u);
        v1680 = vld2q_f64(v1563.f64);
        v1957 = vld2q_f64(v1565.f64);
        v612 = vmlaq_n_f64(vmulq_n_f64(v1680.val[0], v1550.f64[0]), v1680.val[1], v1550.f64[1]);
        v1680.val[0] = vaddq_f64(v611[1], vmlaq_n_f64(vmulq_n_f64(v1957.val[0], v1550.f64[0]), v1957.val[1], v1550.f64[1]));
        *v611 = vaddq_f64(*v611, v612);
        v611[1] = v1680.val[0];
        v613 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 2, 4u);
        v1681 = vld2q_f64(v1563.f64);
        v1958 = vld2q_f64(v1565.f64);
        v614 = vmlaq_n_f64(vmulq_n_f64(v1681.val[0], v1551.f64[0]), v1681.val[1], v1551.f64[1]);
        v1681.val[0] = vaddq_f64(v613[1], vmlaq_n_f64(vmulq_n_f64(v1958.val[0], v1551.f64[0]), v1958.val[1], v1551.f64[1]));
        *v613 = vaddq_f64(*v613, v614);
        v613[1] = v1681.val[0];
        v615 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 3, 4u);
        v1682 = vld2q_f64(v1563.f64);
        v1959 = vld2q_f64(v1565.f64);
        v616 = vmlaq_n_f64(vmulq_n_f64(v1682.val[0], v1552.f64[0]), v1682.val[1], v1552.f64[1]);
        v1682.val[0] = vaddq_f64(v615[1], vmlaq_n_f64(vmulq_n_f64(v1959.val[0], v1552.f64[0]), v1959.val[1], v1552.f64[1]));
        *v615 = vaddq_f64(*v615, v616);
        v615[1] = v1682.val[0];
        v617 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 4, 4u);
        v1683 = vld2q_f64(v1563.f64);
        v1960 = vld2q_f64(v1565.f64);
        v618 = vmlaq_n_f64(vmulq_n_f64(v1683.val[0], v1553.f64[0]), v1683.val[1], v1553.f64[1]);
        v1683.val[0] = vaddq_f64(v617[1], vmlaq_n_f64(vmulq_n_f64(v1960.val[0], v1553.f64[0]), v1960.val[1], v1553.f64[1]));
        *v617 = vaddq_f64(*v617, v618);
        v617[1] = v1683.val[0];
        v619 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 5, 4u);
        v1684 = vld2q_f64(v1563.f64);
        v1961 = vld2q_f64(v1565.f64);
        v620 = vmlaq_n_f64(vmulq_n_f64(v1684.val[0], v1554.f64[0]), v1684.val[1], v1554.f64[1]);
        v1684.val[0] = vaddq_f64(v619[1], vmlaq_n_f64(vmulq_n_f64(v1961.val[0], v1554.f64[0]), v1961.val[1], v1554.f64[1]));
        *v619 = vaddq_f64(*v619, v620);
        v619[1] = v1684.val[0];
      }
    }
  }
  v621 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v621 + 20))
  {
    v622 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v622 + 20))
    {
      v623 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v621));
      v624 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v622));
      if (v623 <= v624)
      {
        v625 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v621)), v624, 4u);
        v1685 = vld2q_f64(v1567.f64);
        v626 = &v1569;
        v1962 = vld2q_f64(v626->f64);
        v627 = vmlaq_n_f64(vmulq_n_f64(v1685.val[0], v1549.f64[0]), v1685.val[1], v1549.f64[1]);
        v1685.val[0] = vaddq_f64(v625[1], vmlaq_n_f64(vmulq_n_f64(v1962.val[0], v1549.f64[0]), v1962.val[1], v1549.f64[1]));
        *v625 = vaddq_f64(*v625, v627);
        v625[1] = v1685.val[0];
        v628 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 1, 4u);
        v1686 = vld2q_f64(v1567.f64);
        v1963 = vld2q_f64(v1569.f64);
        v629 = vmlaq_n_f64(vmulq_n_f64(v1686.val[0], v1550.f64[0]), v1686.val[1], v1550.f64[1]);
        v1686.val[0] = vaddq_f64(v628[1], vmlaq_n_f64(vmulq_n_f64(v1963.val[0], v1550.f64[0]), v1963.val[1], v1550.f64[1]));
        *v628 = vaddq_f64(*v628, v629);
        v628[1] = v1686.val[0];
        v630 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 2, 4u);
        v1687 = vld2q_f64(v1567.f64);
        v1964 = vld2q_f64(v1569.f64);
        v631 = vmlaq_n_f64(vmulq_n_f64(v1687.val[0], v1551.f64[0]), v1687.val[1], v1551.f64[1]);
        v1687.val[0] = vaddq_f64(v630[1], vmlaq_n_f64(vmulq_n_f64(v1964.val[0], v1551.f64[0]), v1964.val[1], v1551.f64[1]));
        *v630 = vaddq_f64(*v630, v631);
        v630[1] = v1687.val[0];
        v632 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 3, 4u);
        v1688 = vld2q_f64(v1567.f64);
        v1965 = vld2q_f64(v1569.f64);
        v633 = vmlaq_n_f64(vmulq_n_f64(v1688.val[0], v1552.f64[0]), v1688.val[1], v1552.f64[1]);
        v1688.val[0] = vaddq_f64(v632[1], vmlaq_n_f64(vmulq_n_f64(v1965.val[0], v1552.f64[0]), v1965.val[1], v1552.f64[1]));
        *v632 = vaddq_f64(*v632, v633);
        v632[1] = v1688.val[0];
        v634 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 4, 4u);
        v1689 = vld2q_f64(v1567.f64);
        v1966 = vld2q_f64(v1569.f64);
        v635 = vmlaq_n_f64(vmulq_n_f64(v1689.val[0], v1553.f64[0]), v1689.val[1], v1553.f64[1]);
        v1689.val[0] = vaddq_f64(v634[1], vmlaq_n_f64(vmulq_n_f64(v1966.val[0], v1553.f64[0]), v1966.val[1], v1553.f64[1]));
        *v634 = vaddq_f64(*v634, v635);
        v634[1] = v1689.val[0];
        v636 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 5, 4u);
        v1690 = vld2q_f64(v1567.f64);
        v1967 = vld2q_f64(v1569.f64);
        v637 = vmlaq_n_f64(vmulq_n_f64(v1690.val[0], v1554.f64[0]), v1690.val[1], v1554.f64[1]);
        v1690.val[0] = vaddq_f64(v636[1], vmlaq_n_f64(vmulq_n_f64(v1967.val[0], v1554.f64[0]), v1967.val[1], v1554.f64[1]));
        *v636 = vaddq_f64(*v636, v637);
        v636[1] = v1690.val[0];
      }
    }
  }
  v638 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v638 + 20))
  {
    v639 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v639 + 20))
    {
      v640 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v638));
      v641 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v639));
      if (v640 <= v641)
      {
        v642 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v638)), v641, 3u);
        v643.f64[0] = v642[1].f64[0];
        v1968 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1549.f64[1];
        v646 = vmlaq_n_f64(vmulq_n_f64(v1968.val[0], v1549.f64[0]), v1968.val[1], v1549.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v642 = vaddq_f64(*v642, v646);
        *(_QWORD *)&v642[1].f64[0] = *(_OWORD *)&vaddq_f64(v643, v1968.val[0]);
        v647 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 1, 3u);
        v648.f64[0] = v647[1].f64[0];
        v1969 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1550.f64[1];
        v651 = vmlaq_n_f64(vmulq_n_f64(v1969.val[0], v1550.f64[0]), v1969.val[1], v1550.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v647 = vaddq_f64(*v647, v651);
        *(_QWORD *)&v647[1].f64[0] = *(_OWORD *)&vaddq_f64(v648, v1969.val[0]);
        v652 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 2, 3u);
        v653.f64[0] = v652[1].f64[0];
        v1970 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1551.f64[1];
        v656 = vmlaq_n_f64(vmulq_n_f64(v1970.val[0], v1551.f64[0]), v1970.val[1], v1551.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v652 = vaddq_f64(*v652, v656);
        *(_QWORD *)&v652[1].f64[0] = *(_OWORD *)&vaddq_f64(v653, v1970.val[0]);
        v657 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 3, 3u);
        v658.f64[0] = v657[1].f64[0];
        v1971 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1552.f64[1];
        v661 = vmlaq_n_f64(vmulq_n_f64(v1971.val[0], v1552.f64[0]), v1971.val[1], v1552.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v657 = vaddq_f64(*v657, v661);
        *(_QWORD *)&v657[1].f64[0] = *(_OWORD *)&vaddq_f64(v658, v1971.val[0]);
        v662 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 4, 3u);
        v663.f64[0] = v662[1].f64[0];
        v1972 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1553.f64[1];
        v666 = vmlaq_n_f64(vmulq_n_f64(v1972.val[0], v1553.f64[0]), v1972.val[1], v1553.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v662 = vaddq_f64(*v662, v666);
        *(_QWORD *)&v662[1].f64[0] = *(_OWORD *)&vaddq_f64(v663, v1972.val[0]);
        v667 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 5, 3u);
        v1817 = vld2q_f64(v1571.f64);
        v668.f64[0] = v667[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1554.f64[1];
        v671 = vmlaq_n_f64(vmulq_n_f64(v1817.val[0], v1554.f64[0]), v1817.val[1], v1554.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v667 = vaddq_f64(*v667, v671);
        *(_QWORD *)&v667[1].f64[0] = *(_OWORD *)&vaddq_f64(v668, v1817.val[0]);
      }
    }
  }
  v672 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v672 + 20))
  {
    v673 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v673 + 20))
    {
      v674 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v672));
      v675 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v673));
      if (v674 <= v675)
      {
        v676 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v672)), v675, 3u);
        v677.f64[0] = v676[1].f64[0];
        v1973 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1549.f64[1];
        v680 = vmlaq_n_f64(vmulq_n_f64(v1973.val[0], v1549.f64[0]), v1973.val[1], v1549.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v676 = vaddq_f64(*v676, v680);
        *(_QWORD *)&v676[1].f64[0] = *(_OWORD *)&vaddq_f64(v677, v1973.val[0]);
        v681 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 1, 3u);
        v682.f64[0] = v681[1].f64[0];
        v1974 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1550.f64[1];
        v685 = vmlaq_n_f64(vmulq_n_f64(v1974.val[0], v1550.f64[0]), v1974.val[1], v1550.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v681 = vaddq_f64(*v681, v685);
        *(_QWORD *)&v681[1].f64[0] = *(_OWORD *)&vaddq_f64(v682, v1974.val[0]);
        v686 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 2, 3u);
        v687.f64[0] = v686[1].f64[0];
        v1975 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1551.f64[1];
        v690 = vmlaq_n_f64(vmulq_n_f64(v1975.val[0], v1551.f64[0]), v1975.val[1], v1551.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v686 = vaddq_f64(*v686, v690);
        *(_QWORD *)&v686[1].f64[0] = *(_OWORD *)&vaddq_f64(v687, v1975.val[0]);
        v691 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 3, 3u);
        v692.f64[0] = v691[1].f64[0];
        v1976 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1552.f64[1];
        v695 = vmlaq_n_f64(vmulq_n_f64(v1976.val[0], v1552.f64[0]), v1976.val[1], v1552.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v691 = vaddq_f64(*v691, v695);
        *(_QWORD *)&v691[1].f64[0] = *(_OWORD *)&vaddq_f64(v692, v1976.val[0]);
        v696 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 4, 3u);
        v697.f64[0] = v696[1].f64[0];
        v1977 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1553.f64[1];
        v700 = vmlaq_n_f64(vmulq_n_f64(v1977.val[0], v1553.f64[0]), v1977.val[1], v1553.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v696 = vaddq_f64(*v696, v700);
        *(_QWORD *)&v696[1].f64[0] = *(_OWORD *)&vaddq_f64(v697, v1977.val[0]);
        v701 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 5, 3u);
        v1818 = vld2q_f64(v1574.f64);
        v702.f64[0] = v701[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1554.f64[1];
        v705 = vmlaq_n_f64(vmulq_n_f64(v1818.val[0], v1554.f64[0]), v1818.val[1], v1554.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v701 = vaddq_f64(*v701, v705);
        *(_QWORD *)&v701[1].f64[0] = *(_OWORD *)&vaddq_f64(v702, v1818.val[0]);
      }
    }
  }
  v706 = *(unsigned int **)(a2 + 56);
  v707 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v706 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v708 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v706));
      v709 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v708 <= v709)
      {
        for (jj = 0; jj != 8; jj += 2)
        {
          v711 = (float64x2_t *)sub_20F762098(v399 + 2279, v708, v709, 6u);
          v2178 = vld2q_f64(v1533.f64);
          v2219 = vld2q_f64(v1535.f64);
          v712 = v1555.f64[jj];
          v713 = v1555.f64[jj + 1];
          v714 = vaddq_f64(v711[2], vmlaq_n_f64(vmulq_n_f64(v2219.val[0], v712), v2219.val[1], v713));
          v715 = vaddq_f64(v711[1], vmlaq_n_f64(vmulq_n_f64(v2178.val[0], v712), v2178.val[1], v713));
          *v711 = vaddq_f64(*v711, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v712), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v713));
          v711[1] = v715;
          v711[2] = v714;
          LODWORD(v709) = v709 + 1;
        }
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v716 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v716 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v717 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v716));
      v718 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v717 <= v718)
      {
        v719 = 0;
        v720 = &v1555.f64[1];
        do
        {
          v721 = (float64x2_t *)sub_20F762098(v399 + 2279, v717, (int)v718 + (int)v719, 6u);
          v1691 = vld2q_f64(v1537.f64);
          v1978 = vld2q_f64(v1539.f64);
          v2201 = vld2q_f64(v1541.f64);
          v722 = *(v720 - 1);
          v723 = vmlaq_n_f64(vmulq_n_f64(v1691.val[0], v722), v1691.val[1], *v720);
          v1691.val[1] = vaddq_f64(v721[2], vmlaq_n_f64(vmulq_n_f64(v2201.val[0], v722), v2201.val[1], *v720));
          v1691.val[0] = vaddq_f64(v721[1], vmlaq_n_f64(vmulq_n_f64(v1978.val[0], v722), v1978.val[1], *v720));
          *v721 = vaddq_f64(*v721, v723);
          *(float64x2x2_t *)v721[1].f64 = v1691;
          ++v719;
          v720 += 2;
        }
        while (v719 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v724 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v724 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v725 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v724));
      v726 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v725 <= v726)
      {
        v727 = 0;
        v728 = &v1555.f64[1];
        do
        {
          v729 = (float64x2_t *)sub_20F762098(v399 + 2279, v725, (int)v726 + (int)v727, 6u);
          v1692 = vld2q_f64(v1543.f64);
          v1979 = vld2q_f64(v1545.f64);
          v2202 = vld2q_f64(v1547.f64);
          v730 = *(v728 - 1);
          v731 = vmlaq_n_f64(vmulq_n_f64(v1692.val[0], v730), v1692.val[1], *v728);
          v1692.val[1] = vaddq_f64(v729[2], vmlaq_n_f64(vmulq_n_f64(v2202.val[0], v730), v2202.val[1], *v728));
          v1692.val[0] = vaddq_f64(v729[1], vmlaq_n_f64(vmulq_n_f64(v1979.val[0], v730), v1979.val[1], *v728));
          *v729 = vaddq_f64(*v729, v731);
          *(float64x2x2_t *)v729[1].f64 = v1692;
          ++v727;
          v728 += 2;
        }
        while (v727 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v732 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v732 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v733 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v732));
      v734 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v733 <= v734)
      {
        v735 = 0;
        v736 = &v1555.f64[1];
        do
        {
          v737 = (float64x2_t *)sub_20F762098(v399 + 2279, v733, (int)v734 + (int)v735, 6u);
          v1693 = vld2q_f64(v1549.f64);
          v1980 = vld2q_f64(v1551.f64);
          v2203 = vld2q_f64(v1553.f64);
          v738 = *(v736 - 1);
          v739 = vmlaq_n_f64(vmulq_n_f64(v1693.val[0], v738), v1693.val[1], *v736);
          v1693.val[1] = vaddq_f64(v737[2], vmlaq_n_f64(vmulq_n_f64(v2203.val[0], v738), v2203.val[1], *v736));
          v1693.val[0] = vaddq_f64(v737[1], vmlaq_n_f64(vmulq_n_f64(v1980.val[0], v738), v1980.val[1], *v736));
          *v737 = vaddq_f64(*v737, v739);
          *(float64x2x2_t *)v737[1].f64 = v1693;
          ++v735;
          v736 += 2;
        }
        while (v735 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  if (*((_BYTE *)v707 + 20))
  {
    v740 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
    v741 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, v740, 4u);
    v1694 = vld2q_f64(v1555.f64);
    v1981 = vld2q_f64(v1557.f64);
    v742 = vmlaq_n_f64(vmulq_n_f64(v1694.val[0], v1555.f64[0]), v1694.val[1], v1555.f64[1]);
    v1694.val[0] = vaddq_f64(v741[1], vmlaq_n_f64(vmulq_n_f64(v1981.val[0], v1555.f64[0]), v1981.val[1], v1555.f64[1]));
    *v741 = vaddq_f64(*v741, v742);
    v741[1] = v1694.val[0];
    v743 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 1, 4u);
    v1695 = vld2q_f64(v1555.f64);
    v1982 = vld2q_f64(v1557.f64);
    v744 = vmlaq_n_f64(vmulq_n_f64(v1695.val[0], v1556.f64[0]), v1695.val[1], v1556.f64[1]);
    v1695.val[0] = vaddq_f64(v743[1], vmlaq_n_f64(vmulq_n_f64(v1982.val[0], v1556.f64[0]), v1982.val[1], v1556.f64[1]));
    *v743 = vaddq_f64(*v743, v744);
    v743[1] = v1695.val[0];
    v745 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 2, 4u);
    v1696 = vld2q_f64(v1555.f64);
    v1983 = vld2q_f64(v1557.f64);
    v746 = vmlaq_n_f64(vmulq_n_f64(v1696.val[0], v1557.f64[0]), v1696.val[1], v1557.f64[1]);
    v1696.val[0] = vaddq_f64(v745[1], vmlaq_n_f64(vmulq_n_f64(v1983.val[0], v1557.f64[0]), v1983.val[1], v1557.f64[1]));
    *v745 = vaddq_f64(*v745, v746);
    v745[1] = v1696.val[0];
    v747 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 3, 4u);
    v1984 = vld2q_f64(v1555.f64);
    v2151 = vld2q_f64(v1557.f64);
    v748 = vaddq_f64(v747[1], vmlaq_n_f64(vmulq_n_f64(v2151.val[0], v1558.f64[0]), v2151.val[1], v1558.f64[1]));
    *v747 = vaddq_f64(*v747, vmlaq_n_f64(vmulq_n_f64(v1984.val[0], v1558.f64[0]), v1984.val[1], v1558.f64[1]));
    v747[1] = v748;
    v1697 = vld2q_f64(v1555.f64);
    v1985 = vld2q_f64(v1557.f64);
    v749 = (float64x2_t *)(v399[2270] + 8 * v740);
    v750 = vmlaq_laneq_f64(vmulq_n_f64(v1697.val[0], v1527->f64[0]), v1697.val[1], *v1527, 1);
    v1697.val[0] = vsubq_f64(v749[1], vmlaq_laneq_f64(vmulq_n_f64(v1985.val[0], v1527->f64[0]), v1985.val[1], *v1527, 1));
    *v749 = vsubq_f64(*v749, v750);
    v749[1] = v1697.val[0];
  }
  v751 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v751 + 20))
  {
    v752 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v752 + 20))
    {
      v753 = v399[2237];
      v754 = *(_QWORD *)(*v21 + 8 * (v753 + *v751));
      v755 = *(_QWORD *)(*v21 + 8 * (v753 + *v752));
      if (v754 <= v755)
      {
        v756 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v753 + *v751)), v755, 4u);
        v1698 = vld2q_f64(v1559.f64);
        v757 = &v1561;
        v1986 = vld2q_f64(v757->f64);
        v758 = vmlaq_n_f64(vmulq_n_f64(v1698.val[0], v1555.f64[0]), v1698.val[1], v1555.f64[1]);
        v1698.val[0] = vaddq_f64(v756[1], vmlaq_n_f64(vmulq_n_f64(v1986.val[0], v1555.f64[0]), v1986.val[1], v1555.f64[1]));
        *v756 = vaddq_f64(*v756, v758);
        v756[1] = v1698.val[0];
        v759 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 1, 4u);
        v1699 = vld2q_f64(v1559.f64);
        v1987 = vld2q_f64(v1561.f64);
        v760 = vmlaq_n_f64(vmulq_n_f64(v1699.val[0], v1556.f64[0]), v1699.val[1], v1556.f64[1]);
        v1699.val[0] = vaddq_f64(v759[1], vmlaq_n_f64(vmulq_n_f64(v1987.val[0], v1556.f64[0]), v1987.val[1], v1556.f64[1]));
        *v759 = vaddq_f64(*v759, v760);
        v759[1] = v1699.val[0];
        v761 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 2, 4u);
        v1700 = vld2q_f64(v1559.f64);
        v1988 = vld2q_f64(v1561.f64);
        v762 = vmlaq_n_f64(vmulq_n_f64(v1700.val[0], v1557.f64[0]), v1700.val[1], v1557.f64[1]);
        v1700.val[0] = vaddq_f64(v761[1], vmlaq_n_f64(vmulq_n_f64(v1988.val[0], v1557.f64[0]), v1988.val[1], v1557.f64[1]));
        *v761 = vaddq_f64(*v761, v762);
        v761[1] = v1700.val[0];
        v763 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 3, 4u);
        v1701 = vld2q_f64(v1559.f64);
        v1989 = vld2q_f64(v1561.f64);
        v764 = vmlaq_n_f64(vmulq_n_f64(v1701.val[0], v1558.f64[0]), v1701.val[1], v1558.f64[1]);
        v1701.val[0] = vaddq_f64(v763[1], vmlaq_n_f64(vmulq_n_f64(v1989.val[0], v1558.f64[0]), v1989.val[1], v1558.f64[1]));
        *v763 = vaddq_f64(*v763, v764);
        v763[1] = v1701.val[0];
      }
    }
  }
  v765 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v765 + 20))
  {
    v766 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v766 + 20))
    {
      v767 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v765));
      v768 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v766));
      if (v767 <= v768)
      {
        v769 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v765)), v768, 4u);
        v1702 = vld2q_f64(v1563.f64);
        v770 = &v1565;
        v1990 = vld2q_f64(v770->f64);
        v771 = vmlaq_n_f64(vmulq_n_f64(v1702.val[0], v1555.f64[0]), v1702.val[1], v1555.f64[1]);
        v1702.val[0] = vaddq_f64(v769[1], vmlaq_n_f64(vmulq_n_f64(v1990.val[0], v1555.f64[0]), v1990.val[1], v1555.f64[1]));
        *v769 = vaddq_f64(*v769, v771);
        v769[1] = v1702.val[0];
        v772 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 1, 4u);
        v1703 = vld2q_f64(v1563.f64);
        v1991 = vld2q_f64(v1565.f64);
        v773 = vmlaq_n_f64(vmulq_n_f64(v1703.val[0], v1556.f64[0]), v1703.val[1], v1556.f64[1]);
        v1703.val[0] = vaddq_f64(v772[1], vmlaq_n_f64(vmulq_n_f64(v1991.val[0], v1556.f64[0]), v1991.val[1], v1556.f64[1]));
        *v772 = vaddq_f64(*v772, v773);
        v772[1] = v1703.val[0];
        v774 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 2, 4u);
        v1704 = vld2q_f64(v1563.f64);
        v1992 = vld2q_f64(v1565.f64);
        v775 = vmlaq_n_f64(vmulq_n_f64(v1704.val[0], v1557.f64[0]), v1704.val[1], v1557.f64[1]);
        v1704.val[0] = vaddq_f64(v774[1], vmlaq_n_f64(vmulq_n_f64(v1992.val[0], v1557.f64[0]), v1992.val[1], v1557.f64[1]));
        *v774 = vaddq_f64(*v774, v775);
        v774[1] = v1704.val[0];
        v776 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 3, 4u);
        v1705 = vld2q_f64(v1563.f64);
        v1993 = vld2q_f64(v1565.f64);
        v777 = vmlaq_n_f64(vmulq_n_f64(v1705.val[0], v1558.f64[0]), v1705.val[1], v1558.f64[1]);
        v1705.val[0] = vaddq_f64(v776[1], vmlaq_n_f64(vmulq_n_f64(v1993.val[0], v1558.f64[0]), v1993.val[1], v1558.f64[1]));
        *v776 = vaddq_f64(*v776, v777);
        v776[1] = v1705.val[0];
      }
    }
  }
  v778 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v778 + 20))
  {
    v779 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v779 + 20))
    {
      v780 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v778));
      v781 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v779));
      if (v780 <= v781)
      {
        v782 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v778)), v781, 4u);
        v1706 = vld2q_f64(v1567.f64);
        v783 = &v1569;
        v1994 = vld2q_f64(v783->f64);
        v784 = vmlaq_n_f64(vmulq_n_f64(v1706.val[0], v1555.f64[0]), v1706.val[1], v1555.f64[1]);
        v1706.val[0] = vaddq_f64(v782[1], vmlaq_n_f64(vmulq_n_f64(v1994.val[0], v1555.f64[0]), v1994.val[1], v1555.f64[1]));
        *v782 = vaddq_f64(*v782, v784);
        v782[1] = v1706.val[0];
        v785 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 1, 4u);
        v1707 = vld2q_f64(v1567.f64);
        v1995 = vld2q_f64(v1569.f64);
        v786 = vmlaq_n_f64(vmulq_n_f64(v1707.val[0], v1556.f64[0]), v1707.val[1], v1556.f64[1]);
        v1707.val[0] = vaddq_f64(v785[1], vmlaq_n_f64(vmulq_n_f64(v1995.val[0], v1556.f64[0]), v1995.val[1], v1556.f64[1]));
        *v785 = vaddq_f64(*v785, v786);
        v785[1] = v1707.val[0];
        v787 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 2, 4u);
        v1708 = vld2q_f64(v1567.f64);
        v1996 = vld2q_f64(v1569.f64);
        v788 = vmlaq_n_f64(vmulq_n_f64(v1708.val[0], v1557.f64[0]), v1708.val[1], v1557.f64[1]);
        v1708.val[0] = vaddq_f64(v787[1], vmlaq_n_f64(vmulq_n_f64(v1996.val[0], v1557.f64[0]), v1996.val[1], v1557.f64[1]));
        *v787 = vaddq_f64(*v787, v788);
        v787[1] = v1708.val[0];
        v789 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 3, 4u);
        v1709 = vld2q_f64(v1567.f64);
        v1997 = vld2q_f64(v1569.f64);
        v790 = vmlaq_n_f64(vmulq_n_f64(v1709.val[0], v1558.f64[0]), v1709.val[1], v1558.f64[1]);
        v1709.val[0] = vaddq_f64(v789[1], vmlaq_n_f64(vmulq_n_f64(v1997.val[0], v1558.f64[0]), v1997.val[1], v1558.f64[1]));
        *v789 = vaddq_f64(*v789, v790);
        v789[1] = v1709.val[0];
      }
    }
  }
  v791 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v791 + 20))
  {
    v792 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v792 + 20))
    {
      v793 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v791));
      v794 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v792));
      if (v793 <= v794)
      {
        v795 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v791)), v794, 3u);
        v796.f64[0] = v795[1].f64[0];
        v1998 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v798 = vmlaq_laneq_f64(vmulq_n_f64(v1998.val[0], v1555.f64[0]), v1998.val[1], v1555, 1);
        v1998.val[0] = vmulq_f64(v1573, v1555);
        v1998.val[1].f64[0] = v1555.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v795 = vaddq_f64(*v795, v798);
        *(_QWORD *)&v795[1].f64[0] = *(_OWORD *)&vaddq_f64(v796, v1998.val[0]);
        v799 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 1, 3u);
        v800.f64[0] = v799[1].f64[0];
        v1999 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v802 = vmlaq_laneq_f64(vmulq_n_f64(v1999.val[0], v1556.f64[0]), v1999.val[1], v1556, 1);
        v1999.val[0] = vmulq_f64(v1573, v1556);
        v1999.val[1].f64[0] = v1556.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v799 = vaddq_f64(*v799, v802);
        *(_QWORD *)&v799[1].f64[0] = *(_OWORD *)&vaddq_f64(v800, v1999.val[0]);
        v803 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 2, 3u);
        v804.f64[0] = v803[1].f64[0];
        v2000 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v806 = vmlaq_laneq_f64(vmulq_n_f64(v2000.val[0], v1557.f64[0]), v2000.val[1], v1557, 1);
        v2000.val[0] = vmulq_f64(v1573, v1557);
        v2000.val[1].f64[0] = v1557.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v803 = vaddq_f64(*v803, v806);
        *(_QWORD *)&v803[1].f64[0] = *(_OWORD *)&vaddq_f64(v804, v2000.val[0]);
        v807 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 3, 3u);
        v1819 = vld2q_f64(v1571.f64);
        v808.f64[0] = v807[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v810 = vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v1558.f64[0]), v1819.val[1], v1558, 1);
        v1819.val[0] = vmulq_f64(v1573, v1558);
        v1819.val[1].f64[0] = v1558.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v807 = vaddq_f64(*v807, v810);
        *(_QWORD *)&v807[1].f64[0] = *(_OWORD *)&vaddq_f64(v808, v1819.val[0]);
      }
    }
  }
  v811 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v811 + 20))
  {
    v812 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v812 + 20))
    {
      v813 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v811));
      v814 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v812));
      if (v813 <= v814)
      {
        v815 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v811)), v814, 3u);
        v816.f64[0] = v815[1].f64[0];
        v2001 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v818 = vmlaq_laneq_f64(vmulq_n_f64(v2001.val[0], v1555.f64[0]), v2001.val[1], v1555, 1);
        v2001.val[0] = vmulq_f64(v1576, v1555);
        v2001.val[1].f64[0] = v1555.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v815 = vaddq_f64(*v815, v818);
        *(_QWORD *)&v815[1].f64[0] = *(_OWORD *)&vaddq_f64(v816, v2001.val[0]);
        v819 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 1, 3u);
        v820.f64[0] = v819[1].f64[0];
        v2002 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v822 = vmlaq_laneq_f64(vmulq_n_f64(v2002.val[0], v1556.f64[0]), v2002.val[1], v1556, 1);
        v2002.val[0] = vmulq_f64(v1576, v1556);
        v2002.val[1].f64[0] = v1556.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v819 = vaddq_f64(*v819, v822);
        *(_QWORD *)&v819[1].f64[0] = *(_OWORD *)&vaddq_f64(v820, v2002.val[0]);
        v823 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 2, 3u);
        v824.f64[0] = v823[1].f64[0];
        v2003 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v826 = vmlaq_laneq_f64(vmulq_n_f64(v2003.val[0], v1557.f64[0]), v2003.val[1], v1557, 1);
        v2003.val[0] = vmulq_f64(v1576, v1557);
        v2003.val[1].f64[0] = v1557.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v823 = vaddq_f64(*v823, v826);
        *(_QWORD *)&v823[1].f64[0] = *(_OWORD *)&vaddq_f64(v824, v2003.val[0]);
        v827 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 3, 3u);
        v1820 = vld2q_f64(v1574.f64);
        v828.f64[0] = v827[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v830 = vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v1558.f64[0]), v1820.val[1], v1558, 1);
        v1820.val[0] = vmulq_f64(v1576, v1558);
        v1820.val[1].f64[0] = v1558.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v827 = vaddq_f64(*v827, v830);
        *(_QWORD *)&v827[1].f64[0] = *(_OWORD *)&vaddq_f64(v828, v1820.val[0]);
      }
    }
  }
  v831 = *(unsigned int **)(a2 + 56);
  v832 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v831 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v833 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v831));
      v834 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v833 <= v834)
      {
        for (kk = 0; kk != 8; kk += 2)
        {
          v836 = (float64x2_t *)sub_20F762098(v399 + 2279, v833, v834, 6u);
          v2179 = vld2q_f64(v1533.f64);
          v2220 = vld2q_f64(v1535.f64);
          v837 = v1559.f64[kk];
          v838 = v1559.f64[kk + 1];
          v839 = vaddq_f64(v836[2], vmlaq_n_f64(vmulq_n_f64(v2220.val[0], v837), v2220.val[1], v838));
          v840 = vaddq_f64(v836[1], vmlaq_n_f64(vmulq_n_f64(v2179.val[0], v837), v2179.val[1], v838));
          *v836 = vaddq_f64(*v836, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v837), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v838));
          v836[1] = v840;
          v836[2] = v839;
          LODWORD(v834) = v834 + 1;
        }
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v841 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v841 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v842 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v841));
      v843 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v842 <= v843)
      {
        v844 = 0;
        v845 = &v1559.f64[1];
        do
        {
          v846 = (float64x2_t *)sub_20F762098(v399 + 2279, v842, (int)v843 + (int)v844, 6u);
          v1710 = vld2q_f64(v1537.f64);
          v2004 = vld2q_f64(v1539.f64);
          v2204 = vld2q_f64(v1541.f64);
          v847 = *(v845 - 1);
          v848 = vmlaq_n_f64(vmulq_n_f64(v1710.val[0], v847), v1710.val[1], *v845);
          v1710.val[1] = vaddq_f64(v846[2], vmlaq_n_f64(vmulq_n_f64(v2204.val[0], v847), v2204.val[1], *v845));
          v1710.val[0] = vaddq_f64(v846[1], vmlaq_n_f64(vmulq_n_f64(v2004.val[0], v847), v2004.val[1], *v845));
          *v846 = vaddq_f64(*v846, v848);
          *(float64x2x2_t *)v846[1].f64 = v1710;
          ++v844;
          v845 += 2;
        }
        while (v844 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v849 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v849 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v850 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v849));
      v851 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v850 <= v851)
      {
        v852 = 0;
        v853 = &v1559.f64[1];
        do
        {
          v854 = (float64x2_t *)sub_20F762098(v399 + 2279, v850, (int)v851 + (int)v852, 6u);
          v1711 = vld2q_f64(v1543.f64);
          v2005 = vld2q_f64(v1545.f64);
          v2205 = vld2q_f64(v1547.f64);
          v855 = *(v853 - 1);
          v856 = vmlaq_n_f64(vmulq_n_f64(v1711.val[0], v855), v1711.val[1], *v853);
          v1711.val[1] = vaddq_f64(v854[2], vmlaq_n_f64(vmulq_n_f64(v2205.val[0], v855), v2205.val[1], *v853));
          v1711.val[0] = vaddq_f64(v854[1], vmlaq_n_f64(vmulq_n_f64(v2005.val[0], v855), v2005.val[1], *v853));
          *v854 = vaddq_f64(*v854, v856);
          *(float64x2x2_t *)v854[1].f64 = v1711;
          ++v852;
          v853 += 2;
        }
        while (v852 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v857 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v857 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v858 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v857));
      v859 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v858 <= v859)
      {
        v860 = 0;
        v861 = &v1559.f64[1];
        do
        {
          v862 = (float64x2_t *)sub_20F762098(v399 + 2279, v858, (int)v859 + (int)v860, 6u);
          v1712 = vld2q_f64(v1549.f64);
          v2006 = vld2q_f64(v1551.f64);
          v2206 = vld2q_f64(v1553.f64);
          v863 = *(v861 - 1);
          v864 = vmlaq_n_f64(vmulq_n_f64(v1712.val[0], v863), v1712.val[1], *v861);
          v1712.val[1] = vaddq_f64(v862[2], vmlaq_n_f64(vmulq_n_f64(v2206.val[0], v863), v2206.val[1], *v861));
          v1712.val[0] = vaddq_f64(v862[1], vmlaq_n_f64(vmulq_n_f64(v2006.val[0], v863), v2006.val[1], *v861));
          *v862 = vaddq_f64(*v862, v864);
          *(float64x2x2_t *)v862[1].f64 = v1712;
          ++v860;
          v861 += 2;
        }
        while (v860 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v865 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v865 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v866 = v399[2237];
      v867 = *(_QWORD *)(*v21 + 8 * (v866 + *v865));
      v868 = *(_QWORD *)(*v21 + 8 * (v866 + *v832));
      if (v867 <= v868)
      {
        v869 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v866 + *v865)), v868, 4u);
        v1713 = vld2q_f64(v1555.f64);
        v870 = &v1557;
        v2007 = vld2q_f64(v870->f64);
        v871 = vmlaq_n_f64(vmulq_n_f64(v1713.val[0], v1559.f64[0]), v1713.val[1], v1559.f64[1]);
        v1713.val[0] = vaddq_f64(v869[1], vmlaq_n_f64(vmulq_n_f64(v2007.val[0], v1559.f64[0]), v2007.val[1], v1559.f64[1]));
        *v869 = vaddq_f64(*v869, v871);
        v869[1] = v1713.val[0];
        v872 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 1, 4u);
        v1714 = vld2q_f64(v1555.f64);
        v2008 = vld2q_f64(v1557.f64);
        v873 = vmlaq_n_f64(vmulq_n_f64(v1714.val[0], v1560.f64[0]), v1714.val[1], v1560.f64[1]);
        v1714.val[0] = vaddq_f64(v872[1], vmlaq_n_f64(vmulq_n_f64(v2008.val[0], v1560.f64[0]), v2008.val[1], v1560.f64[1]));
        *v872 = vaddq_f64(*v872, v873);
        v872[1] = v1714.val[0];
        v874 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 2, 4u);
        v1715 = vld2q_f64(v1555.f64);
        v2009 = vld2q_f64(v1557.f64);
        v875 = vmlaq_n_f64(vmulq_n_f64(v1715.val[0], v1561.f64[0]), v1715.val[1], v1561.f64[1]);
        v1715.val[0] = vaddq_f64(v874[1], vmlaq_n_f64(vmulq_n_f64(v2009.val[0], v1561.f64[0]), v2009.val[1], v1561.f64[1]));
        *v874 = vaddq_f64(*v874, v875);
        v874[1] = v1715.val[0];
        v876 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 3, 4u);
        v1716 = vld2q_f64(v1555.f64);
        v2010 = vld2q_f64(v1557.f64);
        v877 = vmlaq_n_f64(vmulq_n_f64(v1716.val[0], v1562.f64[0]), v1716.val[1], v1562.f64[1]);
        v1716.val[0] = vaddq_f64(v876[1], vmlaq_n_f64(vmulq_n_f64(v2010.val[0], v1562.f64[0]), v2010.val[1], v1562.f64[1]));
        *v876 = vaddq_f64(*v876, v877);
        v876[1] = v1716.val[0];
        v832 = *(unsigned int **)(a2 + 96);
      }
    }
  }
  if (*((_BYTE *)v832 + 20))
  {
    v878 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
    v879 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, v878, 4u);
    v1717 = vld2q_f64(v1559.f64);
    v2011 = vld2q_f64(v1561.f64);
    v880 = vmlaq_n_f64(vmulq_n_f64(v1717.val[0], v1559.f64[0]), v1717.val[1], v1559.f64[1]);
    v1717.val[0] = vaddq_f64(v879[1], vmlaq_n_f64(vmulq_n_f64(v2011.val[0], v1559.f64[0]), v2011.val[1], v1559.f64[1]));
    *v879 = vaddq_f64(*v879, v880);
    v879[1] = v1717.val[0];
    v881 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 1, 4u);
    v1718 = vld2q_f64(v1559.f64);
    v2012 = vld2q_f64(v1561.f64);
    v882 = vmlaq_n_f64(vmulq_n_f64(v1718.val[0], v1560.f64[0]), v1718.val[1], v1560.f64[1]);
    v1718.val[0] = vaddq_f64(v881[1], vmlaq_n_f64(vmulq_n_f64(v2012.val[0], v1560.f64[0]), v2012.val[1], v1560.f64[1]));
    *v881 = vaddq_f64(*v881, v882);
    v881[1] = v1718.val[0];
    v883 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 2, 4u);
    v1719 = vld2q_f64(v1559.f64);
    v2013 = vld2q_f64(v1561.f64);
    v884 = vmlaq_n_f64(vmulq_n_f64(v1719.val[0], v1561.f64[0]), v1719.val[1], v1561.f64[1]);
    v1719.val[0] = vaddq_f64(v883[1], vmlaq_n_f64(vmulq_n_f64(v2013.val[0], v1561.f64[0]), v2013.val[1], v1561.f64[1]));
    *v883 = vaddq_f64(*v883, v884);
    v883[1] = v1719.val[0];
    v885 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 3, 4u);
    v2014 = vld2q_f64(v1559.f64);
    v2152 = vld2q_f64(v1561.f64);
    v886 = vaddq_f64(v885[1], vmlaq_n_f64(vmulq_n_f64(v2152.val[0], v1562.f64[0]), v2152.val[1], v1562.f64[1]));
    *v885 = vaddq_f64(*v885, vmlaq_n_f64(vmulq_n_f64(v2014.val[0], v1562.f64[0]), v2014.val[1], v1562.f64[1]));
    v885[1] = v886;
    v1720 = vld2q_f64(v1559.f64);
    v2015 = vld2q_f64(v1561.f64);
    v887 = (float64x2_t *)(v399[2270] + 8 * v878);
    v888 = vmlaq_laneq_f64(vmulq_n_f64(v1720.val[0], v1527->f64[0]), v1720.val[1], *v1527, 1);
    v1720.val[0] = vsubq_f64(v887[1], vmlaq_laneq_f64(vmulq_n_f64(v2015.val[0], v1527->f64[0]), v2015.val[1], *v1527, 1));
    *v887 = vsubq_f64(*v887, v888);
    v887[1] = v1720.val[0];
  }
  v889 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v889 + 20))
  {
    v890 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v890 + 20))
    {
      v891 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v889));
      v892 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v890));
      if (v891 <= v892)
      {
        v893 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v889)), v892, 4u);
        v1721 = vld2q_f64(v1563.f64);
        v894 = &v1565;
        v2016 = vld2q_f64(v894->f64);
        v895 = vmlaq_n_f64(vmulq_n_f64(v1721.val[0], v1559.f64[0]), v1721.val[1], v1559.f64[1]);
        v1721.val[0] = vaddq_f64(v893[1], vmlaq_n_f64(vmulq_n_f64(v2016.val[0], v1559.f64[0]), v2016.val[1], v1559.f64[1]));
        *v893 = vaddq_f64(*v893, v895);
        v893[1] = v1721.val[0];
        v896 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 1, 4u);
        v1722 = vld2q_f64(v1563.f64);
        v2017 = vld2q_f64(v1565.f64);
        v897 = vmlaq_n_f64(vmulq_n_f64(v1722.val[0], v1560.f64[0]), v1722.val[1], v1560.f64[1]);
        v1722.val[0] = vaddq_f64(v896[1], vmlaq_n_f64(vmulq_n_f64(v2017.val[0], v1560.f64[0]), v2017.val[1], v1560.f64[1]));
        *v896 = vaddq_f64(*v896, v897);
        v896[1] = v1722.val[0];
        v898 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 2, 4u);
        v1723 = vld2q_f64(v1563.f64);
        v2018 = vld2q_f64(v1565.f64);
        v899 = vmlaq_n_f64(vmulq_n_f64(v1723.val[0], v1561.f64[0]), v1723.val[1], v1561.f64[1]);
        v1723.val[0] = vaddq_f64(v898[1], vmlaq_n_f64(vmulq_n_f64(v2018.val[0], v1561.f64[0]), v2018.val[1], v1561.f64[1]));
        *v898 = vaddq_f64(*v898, v899);
        v898[1] = v1723.val[0];
        v900 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 3, 4u);
        v1724 = vld2q_f64(v1563.f64);
        v2019 = vld2q_f64(v1565.f64);
        v901 = vmlaq_n_f64(vmulq_n_f64(v1724.val[0], v1562.f64[0]), v1724.val[1], v1562.f64[1]);
        v1724.val[0] = vaddq_f64(v900[1], vmlaq_n_f64(vmulq_n_f64(v2019.val[0], v1562.f64[0]), v2019.val[1], v1562.f64[1]));
        *v900 = vaddq_f64(*v900, v901);
        v900[1] = v1724.val[0];
      }
    }
  }
  v902 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v902 + 20))
  {
    v903 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v903 + 20))
    {
      v904 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v902));
      v905 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v903));
      if (v904 <= v905)
      {
        v906 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v902)), v905, 4u);
        v1725 = vld2q_f64(v1567.f64);
        v907 = &v1569;
        v2020 = vld2q_f64(v907->f64);
        v908 = vmlaq_n_f64(vmulq_n_f64(v1725.val[0], v1559.f64[0]), v1725.val[1], v1559.f64[1]);
        v1725.val[0] = vaddq_f64(v906[1], vmlaq_n_f64(vmulq_n_f64(v2020.val[0], v1559.f64[0]), v2020.val[1], v1559.f64[1]));
        *v906 = vaddq_f64(*v906, v908);
        v906[1] = v1725.val[0];
        v909 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 1, 4u);
        v1726 = vld2q_f64(v1567.f64);
        v2021 = vld2q_f64(v1569.f64);
        v910 = vmlaq_n_f64(vmulq_n_f64(v1726.val[0], v1560.f64[0]), v1726.val[1], v1560.f64[1]);
        v1726.val[0] = vaddq_f64(v909[1], vmlaq_n_f64(vmulq_n_f64(v2021.val[0], v1560.f64[0]), v2021.val[1], v1560.f64[1]));
        *v909 = vaddq_f64(*v909, v910);
        v909[1] = v1726.val[0];
        v911 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 2, 4u);
        v1727 = vld2q_f64(v1567.f64);
        v2022 = vld2q_f64(v1569.f64);
        v912 = vmlaq_n_f64(vmulq_n_f64(v1727.val[0], v1561.f64[0]), v1727.val[1], v1561.f64[1]);
        v1727.val[0] = vaddq_f64(v911[1], vmlaq_n_f64(vmulq_n_f64(v2022.val[0], v1561.f64[0]), v2022.val[1], v1561.f64[1]));
        *v911 = vaddq_f64(*v911, v912);
        v911[1] = v1727.val[0];
        v913 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 3, 4u);
        v1728 = vld2q_f64(v1567.f64);
        v2023 = vld2q_f64(v1569.f64);
        v914 = vmlaq_n_f64(vmulq_n_f64(v1728.val[0], v1562.f64[0]), v1728.val[1], v1562.f64[1]);
        v1728.val[0] = vaddq_f64(v913[1], vmlaq_n_f64(vmulq_n_f64(v2023.val[0], v1562.f64[0]), v2023.val[1], v1562.f64[1]));
        *v913 = vaddq_f64(*v913, v914);
        v913[1] = v1728.val[0];
      }
    }
  }
  v915 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v915 + 20))
  {
    v916 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v916 + 20))
    {
      v917 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v915));
      v918 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v916));
      if (v917 <= v918)
      {
        v919 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v915)), v918, 3u);
        v920.f64[0] = v919[1].f64[0];
        v2024 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v922 = vmlaq_laneq_f64(vmulq_n_f64(v2024.val[0], v1559.f64[0]), v2024.val[1], v1559, 1);
        v2024.val[0] = vmulq_f64(v1573, v1559);
        v2024.val[1].f64[0] = v1559.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v919 = vaddq_f64(*v919, v922);
        *(_QWORD *)&v919[1].f64[0] = *(_OWORD *)&vaddq_f64(v920, v2024.val[0]);
        v923 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 1, 3u);
        v924.f64[0] = v923[1].f64[0];
        v2025 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v926 = vmlaq_laneq_f64(vmulq_n_f64(v2025.val[0], v1560.f64[0]), v2025.val[1], v1560, 1);
        v2025.val[0] = vmulq_f64(v1573, v1560);
        v2025.val[1].f64[0] = v1560.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v923 = vaddq_f64(*v923, v926);
        *(_QWORD *)&v923[1].f64[0] = *(_OWORD *)&vaddq_f64(v924, v2025.val[0]);
        v927 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 2, 3u);
        v928.f64[0] = v927[1].f64[0];
        v2026 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v930 = vmlaq_laneq_f64(vmulq_n_f64(v2026.val[0], v1561.f64[0]), v2026.val[1], v1561, 1);
        v2026.val[0] = vmulq_f64(v1573, v1561);
        v2026.val[1].f64[0] = v1561.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v927 = vaddq_f64(*v927, v930);
        *(_QWORD *)&v927[1].f64[0] = *(_OWORD *)&vaddq_f64(v928, v2026.val[0]);
        v931 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 3, 3u);
        v1821 = vld2q_f64(v1571.f64);
        v932.f64[0] = v931[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v934 = vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v1562.f64[0]), v1821.val[1], v1562, 1);
        v1821.val[0] = vmulq_f64(v1573, v1562);
        v1821.val[1].f64[0] = v1562.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v931 = vaddq_f64(*v931, v934);
        *(_QWORD *)&v931[1].f64[0] = *(_OWORD *)&vaddq_f64(v932, v1821.val[0]);
      }
    }
  }
  v935 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v935 + 20))
  {
    v936 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v936 + 20))
    {
      v937 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v935));
      v938 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v936));
      if (v937 <= v938)
      {
        v939 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v935)), v938, 3u);
        v940.f64[0] = v939[1].f64[0];
        v2027 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v942 = vmlaq_laneq_f64(vmulq_n_f64(v2027.val[0], v1559.f64[0]), v2027.val[1], v1559, 1);
        v2027.val[0] = vmulq_f64(v1576, v1559);
        v2027.val[1].f64[0] = v1559.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v939 = vaddq_f64(*v939, v942);
        *(_QWORD *)&v939[1].f64[0] = *(_OWORD *)&vaddq_f64(v940, v2027.val[0]);
        v943 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 1, 3u);
        v944.f64[0] = v943[1].f64[0];
        v2028 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v946 = vmlaq_laneq_f64(vmulq_n_f64(v2028.val[0], v1560.f64[0]), v2028.val[1], v1560, 1);
        v2028.val[0] = vmulq_f64(v1576, v1560);
        v2028.val[1].f64[0] = v1560.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v943 = vaddq_f64(*v943, v946);
        *(_QWORD *)&v943[1].f64[0] = *(_OWORD *)&vaddq_f64(v944, v2028.val[0]);
        v947 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 2, 3u);
        v948.f64[0] = v947[1].f64[0];
        v2029 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v950 = vmlaq_laneq_f64(vmulq_n_f64(v2029.val[0], v1561.f64[0]), v2029.val[1], v1561, 1);
        v2029.val[0] = vmulq_f64(v1576, v1561);
        v2029.val[1].f64[0] = v1561.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v947 = vaddq_f64(*v947, v950);
        *(_QWORD *)&v947[1].f64[0] = *(_OWORD *)&vaddq_f64(v948, v2029.val[0]);
        v951 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 3, 3u);
        v1822 = vld2q_f64(v1574.f64);
        v952.f64[0] = v951[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v954 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v1562.f64[0]), v1822.val[1], v1562, 1);
        v1822.val[0] = vmulq_f64(v1576, v1562);
        v1822.val[1].f64[0] = v1562.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v951 = vaddq_f64(*v951, v954);
        *(_QWORD *)&v951[1].f64[0] = *(_OWORD *)&vaddq_f64(v952, v1822.val[0]);
      }
    }
  }
  v955 = *(unsigned int **)(a2 + 56);
  v956 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v955 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v957 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v955));
      v958 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v957 <= v958)
      {
        for (mm = 0; mm != 8; mm += 2)
        {
          v960 = (float64x2_t *)sub_20F762098(v399 + 2279, v957, v958, 6u);
          v2180 = vld2q_f64(v1533.f64);
          v2221 = vld2q_f64(v1535.f64);
          v961 = v1563.f64[mm];
          v962 = v1563.f64[mm + 1];
          v963 = vaddq_f64(v960[2], vmlaq_n_f64(vmulq_n_f64(v2221.val[0], v961), v2221.val[1], v962));
          v964 = vaddq_f64(v960[1], vmlaq_n_f64(vmulq_n_f64(v2180.val[0], v961), v2180.val[1], v962));
          *v960 = vaddq_f64(*v960, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v961), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v962));
          v960[1] = v964;
          v960[2] = v963;
          LODWORD(v958) = v958 + 1;
        }
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v965 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v965 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v966 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v965));
      v967 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v966 <= v967)
      {
        v968 = 0;
        v969 = &v1563.f64[1];
        do
        {
          v970 = (float64x2_t *)sub_20F762098(v399 + 2279, v966, (int)v967 + (int)v968, 6u);
          v1729 = vld2q_f64(v1537.f64);
          v2030 = vld2q_f64(v1539.f64);
          v2207 = vld2q_f64(v1541.f64);
          v971 = *(v969 - 1);
          v972 = vmlaq_n_f64(vmulq_n_f64(v1729.val[0], v971), v1729.val[1], *v969);
          v1729.val[1] = vaddq_f64(v970[2], vmlaq_n_f64(vmulq_n_f64(v2207.val[0], v971), v2207.val[1], *v969));
          v1729.val[0] = vaddq_f64(v970[1], vmlaq_n_f64(vmulq_n_f64(v2030.val[0], v971), v2030.val[1], *v969));
          *v970 = vaddq_f64(*v970, v972);
          *(float64x2x2_t *)v970[1].f64 = v1729;
          ++v968;
          v969 += 2;
        }
        while (v968 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v973 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v973 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v974 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v973));
      v975 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v974 <= v975)
      {
        v976 = 0;
        v977 = &v1563.f64[1];
        do
        {
          v978 = (float64x2_t *)sub_20F762098(v399 + 2279, v974, (int)v975 + (int)v976, 6u);
          v1730 = vld2q_f64(v1543.f64);
          v2031 = vld2q_f64(v1545.f64);
          v2208 = vld2q_f64(v1547.f64);
          v979 = *(v977 - 1);
          v980 = vmlaq_n_f64(vmulq_n_f64(v1730.val[0], v979), v1730.val[1], *v977);
          v1730.val[1] = vaddq_f64(v978[2], vmlaq_n_f64(vmulq_n_f64(v2208.val[0], v979), v2208.val[1], *v977));
          v1730.val[0] = vaddq_f64(v978[1], vmlaq_n_f64(vmulq_n_f64(v2031.val[0], v979), v2031.val[1], *v977));
          *v978 = vaddq_f64(*v978, v980);
          *(float64x2x2_t *)v978[1].f64 = v1730;
          ++v976;
          v977 += 2;
        }
        while (v976 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v981 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v981 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v982 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v981));
      v983 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v982 <= v983)
      {
        v984 = 0;
        v985 = &v1563.f64[1];
        do
        {
          v986 = (float64x2_t *)sub_20F762098(v399 + 2279, v982, (int)v983 + (int)v984, 6u);
          v1731 = vld2q_f64(v1549.f64);
          v2032 = vld2q_f64(v1551.f64);
          v2209 = vld2q_f64(v1553.f64);
          v987 = *(v985 - 1);
          v988 = vmlaq_n_f64(vmulq_n_f64(v1731.val[0], v987), v1731.val[1], *v985);
          v1731.val[1] = vaddq_f64(v986[2], vmlaq_n_f64(vmulq_n_f64(v2209.val[0], v987), v2209.val[1], *v985));
          v1731.val[0] = vaddq_f64(v986[1], vmlaq_n_f64(vmulq_n_f64(v2032.val[0], v987), v2032.val[1], *v985));
          *v986 = vaddq_f64(*v986, v988);
          *(float64x2x2_t *)v986[1].f64 = v1731;
          ++v984;
          v985 += 2;
        }
        while (v984 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v989 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v989 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v990 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v989));
      v991 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v990 <= v991)
      {
        v992 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v989)), v991, 4u);
        v1732 = vld2q_f64(v1555.f64);
        v993 = &v1557;
        v2033 = vld2q_f64(v993->f64);
        v994 = vmlaq_n_f64(vmulq_n_f64(v1732.val[0], v1563.f64[0]), v1732.val[1], v1563.f64[1]);
        v1732.val[0] = vaddq_f64(v992[1], vmlaq_n_f64(vmulq_n_f64(v2033.val[0], v1563.f64[0]), v2033.val[1], v1563.f64[1]));
        *v992 = vaddq_f64(*v992, v994);
        v992[1] = v1732.val[0];
        v995 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 1, 4u);
        v1733 = vld2q_f64(v1555.f64);
        v2034 = vld2q_f64(v1557.f64);
        v996 = vmlaq_n_f64(vmulq_n_f64(v1733.val[0], v1564.f64[0]), v1733.val[1], v1564.f64[1]);
        v1733.val[0] = vaddq_f64(v995[1], vmlaq_n_f64(vmulq_n_f64(v2034.val[0], v1564.f64[0]), v2034.val[1], v1564.f64[1]));
        *v995 = vaddq_f64(*v995, v996);
        v995[1] = v1733.val[0];
        v997 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 2, 4u);
        v1734 = vld2q_f64(v1555.f64);
        v2035 = vld2q_f64(v1557.f64);
        v998 = vmlaq_n_f64(vmulq_n_f64(v1734.val[0], v1565.f64[0]), v1734.val[1], v1565.f64[1]);
        v1734.val[0] = vaddq_f64(v997[1], vmlaq_n_f64(vmulq_n_f64(v2035.val[0], v1565.f64[0]), v2035.val[1], v1565.f64[1]));
        *v997 = vaddq_f64(*v997, v998);
        v997[1] = v1734.val[0];
        v999 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 3, 4u);
        v1735 = vld2q_f64(v1555.f64);
        v2036 = vld2q_f64(v1557.f64);
        v1000 = vmlaq_n_f64(vmulq_n_f64(v1735.val[0], v1566.f64[0]), v1735.val[1], v1566.f64[1]);
        v1735.val[0] = vaddq_f64(v999[1], vmlaq_n_f64(vmulq_n_f64(v2036.val[0], v1566.f64[0]), v2036.val[1], v1566.f64[1]));
        *v999 = vaddq_f64(*v999, v1000);
        v999[1] = v1735.val[0];
        v956 = *(unsigned int **)(a2 + 104);
      }
    }
  }
  v1001 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1001 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v1002 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1001));
      v1003 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v1002 <= v1003)
      {
        v1004 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1001)), v1003, 4u);
        v1736 = vld2q_f64(v1559.f64);
        v1005 = &v1561;
        v2037 = vld2q_f64(v1005->f64);
        v1006 = vmlaq_n_f64(vmulq_n_f64(v1736.val[0], v1563.f64[0]), v1736.val[1], v1563.f64[1]);
        v1736.val[0] = vaddq_f64(v1004[1], vmlaq_n_f64(vmulq_n_f64(v2037.val[0], v1563.f64[0]), v2037.val[1], v1563.f64[1]));
        *v1004 = vaddq_f64(*v1004, v1006);
        v1004[1] = v1736.val[0];
        v1007 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 1, 4u);
        v1737 = vld2q_f64(v1559.f64);
        v2038 = vld2q_f64(v1561.f64);
        v1008 = vmlaq_n_f64(vmulq_n_f64(v1737.val[0], v1564.f64[0]), v1737.val[1], v1564.f64[1]);
        v1737.val[0] = vaddq_f64(v1007[1], vmlaq_n_f64(vmulq_n_f64(v2038.val[0], v1564.f64[0]), v2038.val[1], v1564.f64[1]));
        *v1007 = vaddq_f64(*v1007, v1008);
        v1007[1] = v1737.val[0];
        v1009 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 2, 4u);
        v1738 = vld2q_f64(v1559.f64);
        v2039 = vld2q_f64(v1561.f64);
        v1010 = vmlaq_n_f64(vmulq_n_f64(v1738.val[0], v1565.f64[0]), v1738.val[1], v1565.f64[1]);
        v1738.val[0] = vaddq_f64(v1009[1], vmlaq_n_f64(vmulq_n_f64(v2039.val[0], v1565.f64[0]), v2039.val[1], v1565.f64[1]));
        *v1009 = vaddq_f64(*v1009, v1010);
        v1009[1] = v1738.val[0];
        v1011 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 3, 4u);
        v1739 = vld2q_f64(v1559.f64);
        v2040 = vld2q_f64(v1561.f64);
        v1012 = vmlaq_n_f64(vmulq_n_f64(v1739.val[0], v1566.f64[0]), v1739.val[1], v1566.f64[1]);
        v1739.val[0] = vaddq_f64(v1011[1], vmlaq_n_f64(vmulq_n_f64(v2040.val[0], v1566.f64[0]), v2040.val[1], v1566.f64[1]));
        *v1011 = vaddq_f64(*v1011, v1012);
        v1011[1] = v1739.val[0];
        v956 = *(unsigned int **)(a2 + 104);
      }
    }
  }
  if (*((_BYTE *)v956 + 20))
  {
    v1013 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
    v1014 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, v1013, 4u);
    v1740 = vld2q_f64(v1563.f64);
    v2041 = vld2q_f64(v1565.f64);
    v1015 = vmlaq_n_f64(vmulq_n_f64(v1740.val[0], v1563.f64[0]), v1740.val[1], v1563.f64[1]);
    v1740.val[0] = vaddq_f64(v1014[1], vmlaq_n_f64(vmulq_n_f64(v2041.val[0], v1563.f64[0]), v2041.val[1], v1563.f64[1]));
    *v1014 = vaddq_f64(*v1014, v1015);
    v1014[1] = v1740.val[0];
    v1016 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 1, 4u);
    v1741 = vld2q_f64(v1563.f64);
    v2042 = vld2q_f64(v1565.f64);
    v1017 = vmlaq_n_f64(vmulq_n_f64(v1741.val[0], v1564.f64[0]), v1741.val[1], v1564.f64[1]);
    v1741.val[0] = vaddq_f64(v1016[1], vmlaq_n_f64(vmulq_n_f64(v2042.val[0], v1564.f64[0]), v2042.val[1], v1564.f64[1]));
    *v1016 = vaddq_f64(*v1016, v1017);
    v1016[1] = v1741.val[0];
    v1018 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 2, 4u);
    v1742 = vld2q_f64(v1563.f64);
    v2043 = vld2q_f64(v1565.f64);
    v1019 = vmlaq_n_f64(vmulq_n_f64(v1742.val[0], v1565.f64[0]), v1742.val[1], v1565.f64[1]);
    v1742.val[0] = vaddq_f64(v1018[1], vmlaq_n_f64(vmulq_n_f64(v2043.val[0], v1565.f64[0]), v2043.val[1], v1565.f64[1]));
    *v1018 = vaddq_f64(*v1018, v1019);
    v1018[1] = v1742.val[0];
    v1020 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 3, 4u);
    v2044 = vld2q_f64(v1563.f64);
    v2153 = vld2q_f64(v1565.f64);
    v1021 = vaddq_f64(v1020[1], vmlaq_n_f64(vmulq_n_f64(v2153.val[0], v1566.f64[0]), v2153.val[1], v1566.f64[1]));
    *v1020 = vaddq_f64(*v1020, vmlaq_n_f64(vmulq_n_f64(v2044.val[0], v1566.f64[0]), v2044.val[1], v1566.f64[1]));
    v1020[1] = v1021;
    v1743 = vld2q_f64(v1563.f64);
    v2045 = vld2q_f64(v1565.f64);
    v1022 = (float64x2_t *)(v399[2270] + 8 * v1013);
    v1023 = vmlaq_laneq_f64(vmulq_n_f64(v1743.val[0], v1527->f64[0]), v1743.val[1], *v1527, 1);
    v1743.val[0] = vsubq_f64(v1022[1], vmlaq_laneq_f64(vmulq_n_f64(v2045.val[0], v1527->f64[0]), v2045.val[1], *v1527, 1));
    *v1022 = vsubq_f64(*v1022, v1023);
    v1022[1] = v1743.val[0];
  }
  v1024 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1024 + 20))
  {
    v1025 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1025 + 20))
    {
      v1026 = v399[2238];
      v1027 = *(_QWORD *)(*v21 + 8 * (v1026 + *v1024));
      v1028 = *(_QWORD *)(*v21 + 8 * (v1026 + *v1025));
      if (v1027 <= v1028)
      {
        v1029 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v1026 + *v1024)), v1028, 4u);
        v1744 = vld2q_f64(v1567.f64);
        v1030 = &v1569;
        v2046 = vld2q_f64(v1030->f64);
        v1031 = vmlaq_n_f64(vmulq_n_f64(v1744.val[0], v1563.f64[0]), v1744.val[1], v1563.f64[1]);
        v1744.val[0] = vaddq_f64(v1029[1], vmlaq_n_f64(vmulq_n_f64(v2046.val[0], v1563.f64[0]), v2046.val[1], v1563.f64[1]));
        *v1029 = vaddq_f64(*v1029, v1031);
        v1029[1] = v1744.val[0];
        v1032 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 1, 4u);
        v1745 = vld2q_f64(v1567.f64);
        v2047 = vld2q_f64(v1569.f64);
        v1033 = vmlaq_n_f64(vmulq_n_f64(v1745.val[0], v1564.f64[0]), v1745.val[1], v1564.f64[1]);
        v1745.val[0] = vaddq_f64(v1032[1], vmlaq_n_f64(vmulq_n_f64(v2047.val[0], v1564.f64[0]), v2047.val[1], v1564.f64[1]));
        *v1032 = vaddq_f64(*v1032, v1033);
        v1032[1] = v1745.val[0];
        v1034 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 2, 4u);
        v1746 = vld2q_f64(v1567.f64);
        v2048 = vld2q_f64(v1569.f64);
        v1035 = vmlaq_n_f64(vmulq_n_f64(v1746.val[0], v1565.f64[0]), v1746.val[1], v1565.f64[1]);
        v1746.val[0] = vaddq_f64(v1034[1], vmlaq_n_f64(vmulq_n_f64(v2048.val[0], v1565.f64[0]), v2048.val[1], v1565.f64[1]));
        *v1034 = vaddq_f64(*v1034, v1035);
        v1034[1] = v1746.val[0];
        v1036 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 3, 4u);
        v1747 = vld2q_f64(v1567.f64);
        v2049 = vld2q_f64(v1569.f64);
        v1037 = vmlaq_n_f64(vmulq_n_f64(v1747.val[0], v1566.f64[0]), v1747.val[1], v1566.f64[1]);
        v1747.val[0] = vaddq_f64(v1036[1], vmlaq_n_f64(vmulq_n_f64(v2049.val[0], v1566.f64[0]), v2049.val[1], v1566.f64[1]));
        *v1036 = vaddq_f64(*v1036, v1037);
        v1036[1] = v1747.val[0];
      }
    }
  }
  v1038 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1038 + 20))
  {
    v1039 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1039 + 20))
    {
      v1040 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1038));
      v1041 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1039));
      if (v1040 <= v1041)
      {
        v1042 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1038)), v1041, 3u);
        v1043.f64[0] = v1042[1].f64[0];
        v2050 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1045 = vmlaq_laneq_f64(vmulq_n_f64(v2050.val[0], v1563.f64[0]), v2050.val[1], v1563, 1);
        v2050.val[0] = vmulq_f64(v1573, v1563);
        v2050.val[1].f64[0] = v1563.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1042 = vaddq_f64(*v1042, v1045);
        *(_QWORD *)&v1042[1].f64[0] = *(_OWORD *)&vaddq_f64(v1043, v2050.val[0]);
        v1046 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 1, 3u);
        v1047.f64[0] = v1046[1].f64[0];
        v2051 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1049 = vmlaq_laneq_f64(vmulq_n_f64(v2051.val[0], v1564.f64[0]), v2051.val[1], v1564, 1);
        v2051.val[0] = vmulq_f64(v1573, v1564);
        v2051.val[1].f64[0] = v1564.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1046 = vaddq_f64(*v1046, v1049);
        *(_QWORD *)&v1046[1].f64[0] = *(_OWORD *)&vaddq_f64(v1047, v2051.val[0]);
        v1050 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 2, 3u);
        v1051.f64[0] = v1050[1].f64[0];
        v2052 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1053 = vmlaq_laneq_f64(vmulq_n_f64(v2052.val[0], v1565.f64[0]), v2052.val[1], v1565, 1);
        v2052.val[0] = vmulq_f64(v1573, v1565);
        v2052.val[1].f64[0] = v1565.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1050 = vaddq_f64(*v1050, v1053);
        *(_QWORD *)&v1050[1].f64[0] = *(_OWORD *)&vaddq_f64(v1051, v2052.val[0]);
        v1054 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 3, 3u);
        v1823 = vld2q_f64(v1571.f64);
        v1055.f64[0] = v1054[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v1566.f64[0]), v1823.val[1], v1566, 1);
        v1823.val[0] = vmulq_f64(v1573, v1566);
        v1823.val[1].f64[0] = v1566.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1054 = vaddq_f64(*v1054, v1057);
        *(_QWORD *)&v1054[1].f64[0] = *(_OWORD *)&vaddq_f64(v1055, v1823.val[0]);
      }
    }
  }
  v1058 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1058 + 20))
  {
    v1059 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1059 + 20))
    {
      v1060 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1058));
      v1061 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1059));
      if (v1060 <= v1061)
      {
        v1062 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1058)), v1061, 3u);
        v1063.f64[0] = v1062[1].f64[0];
        v2053 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1065 = vmlaq_laneq_f64(vmulq_n_f64(v2053.val[0], v1563.f64[0]), v2053.val[1], v1563, 1);
        v2053.val[0] = vmulq_f64(v1576, v1563);
        v2053.val[1].f64[0] = v1563.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1062 = vaddq_f64(*v1062, v1065);
        *(_QWORD *)&v1062[1].f64[0] = *(_OWORD *)&vaddq_f64(v1063, v2053.val[0]);
        v1066 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 1, 3u);
        v1067.f64[0] = v1066[1].f64[0];
        v2054 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1069 = vmlaq_laneq_f64(vmulq_n_f64(v2054.val[0], v1564.f64[0]), v2054.val[1], v1564, 1);
        v2054.val[0] = vmulq_f64(v1576, v1564);
        v2054.val[1].f64[0] = v1564.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1066 = vaddq_f64(*v1066, v1069);
        *(_QWORD *)&v1066[1].f64[0] = *(_OWORD *)&vaddq_f64(v1067, v2054.val[0]);
        v1070 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 2, 3u);
        v1071.f64[0] = v1070[1].f64[0];
        v2055 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1073 = vmlaq_laneq_f64(vmulq_n_f64(v2055.val[0], v1565.f64[0]), v2055.val[1], v1565, 1);
        v2055.val[0] = vmulq_f64(v1576, v1565);
        v2055.val[1].f64[0] = v1565.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1070 = vaddq_f64(*v1070, v1073);
        *(_QWORD *)&v1070[1].f64[0] = *(_OWORD *)&vaddq_f64(v1071, v2055.val[0]);
        v1074 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 3, 3u);
        v1824 = vld2q_f64(v1574.f64);
        v1075.f64[0] = v1074[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v1077 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v1566.f64[0]), v1824.val[1], v1566, 1);
        v1824.val[0] = vmulq_f64(v1576, v1566);
        v1824.val[1].f64[0] = v1566.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1074 = vaddq_f64(*v1074, v1077);
        *(_QWORD *)&v1074[1].f64[0] = *(_OWORD *)&vaddq_f64(v1075, v1824.val[0]);
      }
    }
  }
  v1078 = *(unsigned int **)(a2 + 56);
  v1079 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1078 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1080 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1078));
      v1081 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1080 <= v1081)
      {
        for (nn = 0; nn != 8; nn += 2)
        {
          v1083 = (float64x2_t *)sub_20F762098(v399 + 2279, v1080, v1081, 6u);
          v2181 = vld2q_f64(v1533.f64);
          v2222 = vld2q_f64(v1535.f64);
          v1084 = v1567.f64[nn];
          v1085 = v1567.f64[nn + 1];
          v1086 = vaddq_f64(v1083[2], vmlaq_n_f64(vmulq_n_f64(v2222.val[0], v1084), v2222.val[1], v1085));
          v1087 = vaddq_f64(v1083[1], vmlaq_n_f64(vmulq_n_f64(v2181.val[0], v1084), v2181.val[1], v1085));
          *v1083 = vaddq_f64(*v1083, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1084), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1085));
          v1083[1] = v1087;
          v1083[2] = v1086;
          LODWORD(v1081) = v1081 + 1;
        }
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1088 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1088 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1089 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1088));
      v1090 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1089 <= v1090)
      {
        v1091 = 0;
        v1092 = &v1567.f64[1];
        do
        {
          v1093 = (float64x2_t *)sub_20F762098(v399 + 2279, v1089, (int)v1090 + (int)v1091, 6u);
          v1748 = vld2q_f64(v1537.f64);
          v2056 = vld2q_f64(v1539.f64);
          v2210 = vld2q_f64(v1541.f64);
          v1094 = *(v1092 - 1);
          v1095 = vmlaq_n_f64(vmulq_n_f64(v1748.val[0], v1094), v1748.val[1], *v1092);
          v1748.val[1] = vaddq_f64(v1093[2], vmlaq_n_f64(vmulq_n_f64(v2210.val[0], v1094), v2210.val[1], *v1092));
          v1748.val[0] = vaddq_f64(v1093[1], vmlaq_n_f64(vmulq_n_f64(v2056.val[0], v1094), v2056.val[1], *v1092));
          *v1093 = vaddq_f64(*v1093, v1095);
          *(float64x2x2_t *)v1093[1].f64 = v1748;
          ++v1091;
          v1092 += 2;
        }
        while (v1091 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1096 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1096 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1097 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1096));
      v1098 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1097 <= v1098)
      {
        v1099 = 0;
        v1100 = &v1567.f64[1];
        do
        {
          v1101 = (float64x2_t *)sub_20F762098(v399 + 2279, v1097, (int)v1098 + (int)v1099, 6u);
          v1749 = vld2q_f64(v1543.f64);
          v2057 = vld2q_f64(v1545.f64);
          v2211 = vld2q_f64(v1547.f64);
          v1102 = *(v1100 - 1);
          v1103 = vmlaq_n_f64(vmulq_n_f64(v1749.val[0], v1102), v1749.val[1], *v1100);
          v1749.val[1] = vaddq_f64(v1101[2], vmlaq_n_f64(vmulq_n_f64(v2211.val[0], v1102), v2211.val[1], *v1100));
          v1749.val[0] = vaddq_f64(v1101[1], vmlaq_n_f64(vmulq_n_f64(v2057.val[0], v1102), v2057.val[1], *v1100));
          *v1101 = vaddq_f64(*v1101, v1103);
          *(float64x2x2_t *)v1101[1].f64 = v1749;
          ++v1099;
          v1100 += 2;
        }
        while (v1099 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1104 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1104 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1105 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1104));
      v1106 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1105 <= v1106)
      {
        v1107 = 0;
        v1108 = &v1567.f64[1];
        do
        {
          v1109 = (float64x2_t *)sub_20F762098(v399 + 2279, v1105, (int)v1106 + (int)v1107, 6u);
          v1750 = vld2q_f64(v1549.f64);
          v2058 = vld2q_f64(v1551.f64);
          v2212 = vld2q_f64(v1553.f64);
          v1110 = *(v1108 - 1);
          v1111 = vmlaq_n_f64(vmulq_n_f64(v1750.val[0], v1110), v1750.val[1], *v1108);
          v1750.val[1] = vaddq_f64(v1109[2], vmlaq_n_f64(vmulq_n_f64(v2212.val[0], v1110), v2212.val[1], *v1108));
          v1750.val[0] = vaddq_f64(v1109[1], vmlaq_n_f64(vmulq_n_f64(v2058.val[0], v1110), v2058.val[1], *v1108));
          *v1109 = vaddq_f64(*v1109, v1111);
          *(float64x2x2_t *)v1109[1].f64 = v1750;
          ++v1107;
          v1108 += 2;
        }
        while (v1107 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1112 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1112 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1113 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1112));
      v1114 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1113 <= v1114)
      {
        v1115 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1112)), v1114, 4u);
        v1751 = vld2q_f64(v1555.f64);
        v1116 = &v1557;
        v2059 = vld2q_f64(v1116->f64);
        v1117 = vmlaq_n_f64(vmulq_n_f64(v1751.val[0], v1567.f64[0]), v1751.val[1], v1567.f64[1]);
        v1751.val[0] = vaddq_f64(v1115[1], vmlaq_n_f64(vmulq_n_f64(v2059.val[0], v1567.f64[0]), v2059.val[1], v1567.f64[1]));
        *v1115 = vaddq_f64(*v1115, v1117);
        v1115[1] = v1751.val[0];
        v1118 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 1, 4u);
        v1752 = vld2q_f64(v1555.f64);
        v2060 = vld2q_f64(v1557.f64);
        v1119 = vmlaq_n_f64(vmulq_n_f64(v1752.val[0], v1568.f64[0]), v1752.val[1], v1568.f64[1]);
        v1752.val[0] = vaddq_f64(v1118[1], vmlaq_n_f64(vmulq_n_f64(v2060.val[0], v1568.f64[0]), v2060.val[1], v1568.f64[1]));
        *v1118 = vaddq_f64(*v1118, v1119);
        v1118[1] = v1752.val[0];
        v1120 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 2, 4u);
        v1753 = vld2q_f64(v1555.f64);
        v2061 = vld2q_f64(v1557.f64);
        v1121 = vmlaq_n_f64(vmulq_n_f64(v1753.val[0], v1569.f64[0]), v1753.val[1], v1569.f64[1]);
        v1753.val[0] = vaddq_f64(v1120[1], vmlaq_n_f64(vmulq_n_f64(v2061.val[0], v1569.f64[0]), v2061.val[1], v1569.f64[1]));
        *v1120 = vaddq_f64(*v1120, v1121);
        v1120[1] = v1753.val[0];
        v1122 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 3, 4u);
        v1754 = vld2q_f64(v1555.f64);
        v2062 = vld2q_f64(v1557.f64);
        v1123 = vmlaq_n_f64(vmulq_n_f64(v1754.val[0], v1570.f64[0]), v1754.val[1], v1570.f64[1]);
        v1754.val[0] = vaddq_f64(v1122[1], vmlaq_n_f64(vmulq_n_f64(v2062.val[0], v1570.f64[0]), v2062.val[1], v1570.f64[1]));
        *v1122 = vaddq_f64(*v1122, v1123);
        v1122[1] = v1754.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  v1124 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1124 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1125 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1124));
      v1126 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1125 <= v1126)
      {
        v1127 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1124)), v1126, 4u);
        v1755 = vld2q_f64(v1559.f64);
        v1128 = &v1561;
        v2063 = vld2q_f64(v1128->f64);
        v1129 = vmlaq_n_f64(vmulq_n_f64(v1755.val[0], v1567.f64[0]), v1755.val[1], v1567.f64[1]);
        v1755.val[0] = vaddq_f64(v1127[1], vmlaq_n_f64(vmulq_n_f64(v2063.val[0], v1567.f64[0]), v2063.val[1], v1567.f64[1]));
        *v1127 = vaddq_f64(*v1127, v1129);
        v1127[1] = v1755.val[0];
        v1130 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 1, 4u);
        v1756 = vld2q_f64(v1559.f64);
        v2064 = vld2q_f64(v1561.f64);
        v1131 = vmlaq_n_f64(vmulq_n_f64(v1756.val[0], v1568.f64[0]), v1756.val[1], v1568.f64[1]);
        v1756.val[0] = vaddq_f64(v1130[1], vmlaq_n_f64(vmulq_n_f64(v2064.val[0], v1568.f64[0]), v2064.val[1], v1568.f64[1]));
        *v1130 = vaddq_f64(*v1130, v1131);
        v1130[1] = v1756.val[0];
        v1132 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 2, 4u);
        v1757 = vld2q_f64(v1559.f64);
        v2065 = vld2q_f64(v1561.f64);
        v1133 = vmlaq_n_f64(vmulq_n_f64(v1757.val[0], v1569.f64[0]), v1757.val[1], v1569.f64[1]);
        v1757.val[0] = vaddq_f64(v1132[1], vmlaq_n_f64(vmulq_n_f64(v2065.val[0], v1569.f64[0]), v2065.val[1], v1569.f64[1]));
        *v1132 = vaddq_f64(*v1132, v1133);
        v1132[1] = v1757.val[0];
        v1134 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 3, 4u);
        v1758 = vld2q_f64(v1559.f64);
        v2066 = vld2q_f64(v1561.f64);
        v1135 = vmlaq_n_f64(vmulq_n_f64(v1758.val[0], v1570.f64[0]), v1758.val[1], v1570.f64[1]);
        v1758.val[0] = vaddq_f64(v1134[1], vmlaq_n_f64(vmulq_n_f64(v2066.val[0], v1570.f64[0]), v2066.val[1], v1570.f64[1]));
        *v1134 = vaddq_f64(*v1134, v1135);
        v1134[1] = v1758.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  v1136 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1136 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1137 = v399[2238];
      v1138 = *(_QWORD *)(*v21 + 8 * (v1137 + *v1136));
      v1139 = *(_QWORD *)(*v21 + 8 * (v1137 + *v1079));
      if (v1138 <= v1139)
      {
        v1140 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v1137 + *v1136)), v1139, 4u);
        v1759 = vld2q_f64(v1563.f64);
        v1141 = &v1565;
        v2067 = vld2q_f64(v1141->f64);
        v1142 = vmlaq_n_f64(vmulq_n_f64(v1759.val[0], v1567.f64[0]), v1759.val[1], v1567.f64[1]);
        v1759.val[0] = vaddq_f64(v1140[1], vmlaq_n_f64(vmulq_n_f64(v2067.val[0], v1567.f64[0]), v2067.val[1], v1567.f64[1]));
        *v1140 = vaddq_f64(*v1140, v1142);
        v1140[1] = v1759.val[0];
        v1143 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 1, 4u);
        v1760 = vld2q_f64(v1563.f64);
        v2068 = vld2q_f64(v1565.f64);
        v1144 = vmlaq_n_f64(vmulq_n_f64(v1760.val[0], v1568.f64[0]), v1760.val[1], v1568.f64[1]);
        v1760.val[0] = vaddq_f64(v1143[1], vmlaq_n_f64(vmulq_n_f64(v2068.val[0], v1568.f64[0]), v2068.val[1], v1568.f64[1]));
        *v1143 = vaddq_f64(*v1143, v1144);
        v1143[1] = v1760.val[0];
        v1145 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 2, 4u);
        v1761 = vld2q_f64(v1563.f64);
        v2069 = vld2q_f64(v1565.f64);
        v1146 = vmlaq_n_f64(vmulq_n_f64(v1761.val[0], v1569.f64[0]), v1761.val[1], v1569.f64[1]);
        v1761.val[0] = vaddq_f64(v1145[1], vmlaq_n_f64(vmulq_n_f64(v2069.val[0], v1569.f64[0]), v2069.val[1], v1569.f64[1]));
        *v1145 = vaddq_f64(*v1145, v1146);
        v1145[1] = v1761.val[0];
        v1147 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 3, 4u);
        v1762 = vld2q_f64(v1563.f64);
        v2070 = vld2q_f64(v1565.f64);
        v1148 = vmlaq_n_f64(vmulq_n_f64(v1762.val[0], v1570.f64[0]), v1762.val[1], v1570.f64[1]);
        v1762.val[0] = vaddq_f64(v1147[1], vmlaq_n_f64(vmulq_n_f64(v2070.val[0], v1570.f64[0]), v2070.val[1], v1570.f64[1]));
        *v1147 = vaddq_f64(*v1147, v1148);
        v1147[1] = v1762.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  if (*((_BYTE *)v1079 + 20))
  {
    v1149 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
    v1150 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, v1149, 4u);
    v1763 = vld2q_f64(v1567.f64);
    v2071 = vld2q_f64(v1569.f64);
    v1151 = vmlaq_n_f64(vmulq_n_f64(v1763.val[0], v1567.f64[0]), v1763.val[1], v1567.f64[1]);
    v1763.val[0] = vaddq_f64(v1150[1], vmlaq_n_f64(vmulq_n_f64(v2071.val[0], v1567.f64[0]), v2071.val[1], v1567.f64[1]));
    *v1150 = vaddq_f64(*v1150, v1151);
    v1150[1] = v1763.val[0];
    v1152 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 1, 4u);
    v1764 = vld2q_f64(v1567.f64);
    v2072 = vld2q_f64(v1569.f64);
    v1153 = vmlaq_n_f64(vmulq_n_f64(v1764.val[0], v1568.f64[0]), v1764.val[1], v1568.f64[1]);
    v1764.val[0] = vaddq_f64(v1152[1], vmlaq_n_f64(vmulq_n_f64(v2072.val[0], v1568.f64[0]), v2072.val[1], v1568.f64[1]));
    *v1152 = vaddq_f64(*v1152, v1153);
    v1152[1] = v1764.val[0];
    v1154 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 2, 4u);
    v1765 = vld2q_f64(v1567.f64);
    v2073 = vld2q_f64(v1569.f64);
    v1155 = vmlaq_n_f64(vmulq_n_f64(v1765.val[0], v1569.f64[0]), v1765.val[1], v1569.f64[1]);
    v1765.val[0] = vaddq_f64(v1154[1], vmlaq_n_f64(vmulq_n_f64(v2073.val[0], v1569.f64[0]), v2073.val[1], v1569.f64[1]));
    *v1154 = vaddq_f64(*v1154, v1155);
    v1154[1] = v1765.val[0];
    v1156 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 3, 4u);
    v2074 = vld2q_f64(v1567.f64);
    v2154 = vld2q_f64(v1569.f64);
    v1157 = vaddq_f64(v1156[1], vmlaq_n_f64(vmulq_n_f64(v2154.val[0], v1570.f64[0]), v2154.val[1], v1570.f64[1]));
    *v1156 = vaddq_f64(*v1156, vmlaq_n_f64(vmulq_n_f64(v2074.val[0], v1570.f64[0]), v2074.val[1], v1570.f64[1]));
    v1156[1] = v1157;
    v1766 = vld2q_f64(v1567.f64);
    v2075 = vld2q_f64(v1569.f64);
    v1158 = (float64x2_t *)(v399[2270] + 8 * v1149);
    v1159 = vmlaq_laneq_f64(vmulq_n_f64(v1766.val[0], v1527->f64[0]), v1766.val[1], *v1527, 1);
    v1766.val[0] = vsubq_f64(v1158[1], vmlaq_laneq_f64(vmulq_n_f64(v2075.val[0], v1527->f64[0]), v2075.val[1], *v1527, 1));
    *v1158 = vsubq_f64(*v1158, v1159);
    v1158[1] = v1766.val[0];
  }
  v1160 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1160 + 20))
  {
    v1161 = *(unsigned int **)(a2 + 112);
    if (*((_BYTE *)v1161 + 20))
    {
      v1162 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1160));
      v1163 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1161));
      if (v1162 <= v1163)
      {
        v1164 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1160)), v1163, 3u);
        v1165.f64[0] = v1164[1].f64[0];
        v2076 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1167 = vmlaq_laneq_f64(vmulq_n_f64(v2076.val[0], v1567.f64[0]), v2076.val[1], v1567, 1);
        v2076.val[0] = vmulq_f64(v1573, v1567);
        v2076.val[1].f64[0] = v1567.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1164 = vaddq_f64(*v1164, v1167);
        *(_QWORD *)&v1164[1].f64[0] = *(_OWORD *)&vaddq_f64(v1165, v2076.val[0]);
        v1168 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 1, 3u);
        v1169.f64[0] = v1168[1].f64[0];
        v2077 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1171 = vmlaq_laneq_f64(vmulq_n_f64(v2077.val[0], v1568.f64[0]), v2077.val[1], v1568, 1);
        v2077.val[0] = vmulq_f64(v1573, v1568);
        v2077.val[1].f64[0] = v1568.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1168 = vaddq_f64(*v1168, v1171);
        *(_QWORD *)&v1168[1].f64[0] = *(_OWORD *)&vaddq_f64(v1169, v2077.val[0]);
        v1172 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 2, 3u);
        v1173.f64[0] = v1172[1].f64[0];
        v2078 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1175 = vmlaq_laneq_f64(vmulq_n_f64(v2078.val[0], v1569.f64[0]), v2078.val[1], v1569, 1);
        v2078.val[0] = vmulq_f64(v1573, v1569);
        v2078.val[1].f64[0] = v1569.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1172 = vaddq_f64(*v1172, v1175);
        *(_QWORD *)&v1172[1].f64[0] = *(_OWORD *)&vaddq_f64(v1173, v2078.val[0]);
        v1176 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 3, 3u);
        v1825 = vld2q_f64(v1571.f64);
        v1177.f64[0] = v1176[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v1179 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v1570.f64[0]), v1825.val[1], v1570, 1);
        v1825.val[0] = vmulq_f64(v1573, v1570);
        v1825.val[1].f64[0] = v1570.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1176 = vaddq_f64(*v1176, v1179);
        *(_QWORD *)&v1176[1].f64[0] = *(_OWORD *)&vaddq_f64(v1177, v1825.val[0]);
      }
    }
  }
  v1180 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1180 + 20))
  {
    v1181 = *(unsigned int **)(a2 + 112);
    if (*((_BYTE *)v1181 + 20))
    {
      v1182 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1180));
      v1183 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1181));
      if (v1182 <= v1183)
      {
        v1184 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1180)), v1183, 3u);
        v1185.f64[0] = v1184[1].f64[0];
        v2079 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1187 = vmlaq_laneq_f64(vmulq_n_f64(v2079.val[0], v1567.f64[0]), v2079.val[1], v1567, 1);
        v2079.val[0] = vmulq_f64(v1576, v1567);
        v2079.val[1].f64[0] = v1567.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1184 = vaddq_f64(*v1184, v1187);
        *(_QWORD *)&v1184[1].f64[0] = *(_OWORD *)&vaddq_f64(v1185, v2079.val[0]);
        v1188 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 1, 3u);
        v1189.f64[0] = v1188[1].f64[0];
        v2080 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1191 = vmlaq_laneq_f64(vmulq_n_f64(v2080.val[0], v1568.f64[0]), v2080.val[1], v1568, 1);
        v2080.val[0] = vmulq_f64(v1576, v1568);
        v2080.val[1].f64[0] = v1568.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1188 = vaddq_f64(*v1188, v1191);
        *(_QWORD *)&v1188[1].f64[0] = *(_OWORD *)&vaddq_f64(v1189, v2080.val[0]);
        v1192 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 2, 3u);
        v1193.f64[0] = v1192[1].f64[0];
        v2081 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1195 = vmlaq_laneq_f64(vmulq_n_f64(v2081.val[0], v1569.f64[0]), v2081.val[1], v1569, 1);
        v2081.val[0] = vmulq_f64(v1576, v1569);
        v2081.val[1].f64[0] = v1569.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1192 = vaddq_f64(*v1192, v1195);
        *(_QWORD *)&v1192[1].f64[0] = *(_OWORD *)&vaddq_f64(v1193, v2081.val[0]);
        v1196 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 3, 3u);
        v1826 = vld2q_f64(v1574.f64);
        v1197.f64[0] = v1196[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v1199 = vmlaq_laneq_f64(vmulq_n_f64(v1826.val[0], v1570.f64[0]), v1826.val[1], v1570, 1);
        v1826.val[0] = vmulq_f64(v1576, v1570);
        v1826.val[1].f64[0] = v1570.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1196 = vaddq_f64(*v1196, v1199);
        *(_QWORD *)&v1196[1].f64[0] = *(_OWORD *)&vaddq_f64(v1197, v1826.val[0]);
      }
    }
  }
  v1200 = *(unsigned int **)(a2 + 56);
  v1201 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1200 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1202 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1200));
      v1203 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1202 <= v1203)
      {
        v1204 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1200)), v1203, 6u);
        v1205 = &v1533;
        v2140 = vld2q_f64(v1205->f64);
        v1206 = &v1535;
        v2182 = vld2q_f64(v1206->f64);
        v1207 = vaddq_f64(v1204[2], vmlaq_n_f64(vmulq_n_f64(v2182.val[0], v1571.f64[0]), v2182.val[1], v1571.f64[1]));
        v1208 = vaddq_f64(v1204[1], vmlaq_n_f64(vmulq_n_f64(v2140.val[0], v1571.f64[0]), v2140.val[1], v1571.f64[1]));
        *v1204 = vaddq_f64(*v1204, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1571.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1571.f64[1]));
        v1204[1] = v1208;
        v1204[2] = v1207;
        v1209 = (float64x2_t *)sub_20F762098(v399 + 2279, v1202, (int)v1203 + 1, 6u);
        v2082 = vld2q_f64(v1533.f64);
        v2183 = vld2q_f64(v1535.f64);
        v1210 = vmlaq_n_f64(vmulq_n_f64(v2082.val[0], v1572.f64[0]), v2082.val[1], v1572.f64[1]);
        v2082.val[0] = vaddq_f64(v1209[2], vmlaq_n_f64(vmulq_n_f64(v2183.val[0], v1572.f64[0]), v2183.val[1], v1572.f64[1]));
        v1211 = vaddq_f64(v1209[1], v1210);
        *v1209 = vaddq_f64(*v1209, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1572.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1572.f64[1]));
        v1209[1] = v1211;
        v1209[2] = v2082.val[0];
        v1212 = (float64x2_t *)sub_20F762098(v399 + 2279, v1202, (int)v1203 + 2, 6u);
        v2083 = vld2q_f64(v1533.f64);
        v2184 = vld2q_f64(v1535.f64);
        v1213 = vmlaq_n_f64(vmulq_n_f64(v2083.val[0], v1573.f64[0]), v2083.val[1], v1573.f64[1]);
        v2083.val[0] = vaddq_f64(v1212[2], vmlaq_n_f64(vmulq_n_f64(v2184.val[0], v1573.f64[0]), v2184.val[1], v1573.f64[1]));
        v1214 = vaddq_f64(v1212[1], v1213);
        *v1212 = vaddq_f64(*v1212, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1573.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1573.f64[1]));
        v1212[1] = v1214;
        v1212[2] = v2083.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1215 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1215 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1216 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1215));
      v1217 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1216 <= v1217)
      {
        v1218 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1215)), v1217, 6u);
        v1767 = vld2q_f64(v1537.f64);
        v1219 = &v1539;
        v2084 = vld2q_f64(v1219->f64);
        v1220 = &v1541;
        v2155 = vld2q_f64(v1220->f64);
        v1221 = vmlaq_n_f64(vmulq_n_f64(v1767.val[0], v1571.f64[0]), v1767.val[1], v1571.f64[1]);
        v1767.val[1] = vaddq_f64(v1218[2], vmlaq_n_f64(vmulq_n_f64(v2155.val[0], v1571.f64[0]), v2155.val[1], v1571.f64[1]));
        v1767.val[0] = vaddq_f64(v1218[1], vmlaq_n_f64(vmulq_n_f64(v2084.val[0], v1571.f64[0]), v2084.val[1], v1571.f64[1]));
        *v1218 = vaddq_f64(*v1218, v1221);
        *(float64x2x2_t *)v1218[1].f64 = v1767;
        v1222 = (float64x2_t *)sub_20F762098(v399 + 2279, v1216, (int)v1217 + 1, 6u);
        v1768 = vld2q_f64(v1537.f64);
        v2085 = vld2q_f64(v1539.f64);
        v2156 = vld2q_f64(v1541.f64);
        v1223 = vmlaq_n_f64(vmulq_n_f64(v1768.val[0], v1572.f64[0]), v1768.val[1], v1572.f64[1]);
        v1768.val[1] = vaddq_f64(v1222[2], vmlaq_n_f64(vmulq_n_f64(v2156.val[0], v1572.f64[0]), v2156.val[1], v1572.f64[1]));
        v1768.val[0] = vaddq_f64(v1222[1], vmlaq_n_f64(vmulq_n_f64(v2085.val[0], v1572.f64[0]), v2085.val[1], v1572.f64[1]));
        *v1222 = vaddq_f64(*v1222, v1223);
        *(float64x2x2_t *)v1222[1].f64 = v1768;
        v1224 = (float64x2_t *)sub_20F762098(v399 + 2279, v1216, (int)v1217 + 2, 6u);
        v1769 = vld2q_f64(v1537.f64);
        v2086 = vld2q_f64(v1539.f64);
        v2157 = vld2q_f64(v1541.f64);
        v1225 = vmlaq_n_f64(vmulq_n_f64(v1769.val[0], v1573.f64[0]), v1769.val[1], v1573.f64[1]);
        v1769.val[1] = vaddq_f64(v1224[2], vmlaq_n_f64(vmulq_n_f64(v2157.val[0], v1573.f64[0]), v2157.val[1], v1573.f64[1]));
        v1769.val[0] = vaddq_f64(v1224[1], vmlaq_n_f64(vmulq_n_f64(v2086.val[0], v1573.f64[0]), v2086.val[1], v1573.f64[1]));
        *v1224 = vaddq_f64(*v1224, v1225);
        *(float64x2x2_t *)v1224[1].f64 = v1769;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1226 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1226 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1227 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1226));
      v1228 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1227 <= v1228)
      {
        v1229 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1226)), v1228, 6u);
        v1770 = vld2q_f64(v1543.f64);
        v1230 = &v1545;
        v2087 = vld2q_f64(v1230->f64);
        v1231 = &v1547;
        v2158 = vld2q_f64(v1231->f64);
        v1232 = vmlaq_n_f64(vmulq_n_f64(v1770.val[0], v1571.f64[0]), v1770.val[1], v1571.f64[1]);
        v1770.val[1] = vaddq_f64(v1229[2], vmlaq_n_f64(vmulq_n_f64(v2158.val[0], v1571.f64[0]), v2158.val[1], v1571.f64[1]));
        v1770.val[0] = vaddq_f64(v1229[1], vmlaq_n_f64(vmulq_n_f64(v2087.val[0], v1571.f64[0]), v2087.val[1], v1571.f64[1]));
        *v1229 = vaddq_f64(*v1229, v1232);
        *(float64x2x2_t *)v1229[1].f64 = v1770;
        v1233 = (float64x2_t *)sub_20F762098(v399 + 2279, v1227, (int)v1228 + 1, 6u);
        v1771 = vld2q_f64(v1543.f64);
        v2088 = vld2q_f64(v1545.f64);
        v2159 = vld2q_f64(v1547.f64);
        v1234 = vmlaq_n_f64(vmulq_n_f64(v1771.val[0], v1572.f64[0]), v1771.val[1], v1572.f64[1]);
        v1771.val[1] = vaddq_f64(v1233[2], vmlaq_n_f64(vmulq_n_f64(v2159.val[0], v1572.f64[0]), v2159.val[1], v1572.f64[1]));
        v1771.val[0] = vaddq_f64(v1233[1], vmlaq_n_f64(vmulq_n_f64(v2088.val[0], v1572.f64[0]), v2088.val[1], v1572.f64[1]));
        *v1233 = vaddq_f64(*v1233, v1234);
        *(float64x2x2_t *)v1233[1].f64 = v1771;
        v1235 = (float64x2_t *)sub_20F762098(v399 + 2279, v1227, (int)v1228 + 2, 6u);
        v1772 = vld2q_f64(v1543.f64);
        v2089 = vld2q_f64(v1545.f64);
        v2160 = vld2q_f64(v1547.f64);
        v1236 = vmlaq_n_f64(vmulq_n_f64(v1772.val[0], v1573.f64[0]), v1772.val[1], v1573.f64[1]);
        v1772.val[1] = vaddq_f64(v1235[2], vmlaq_n_f64(vmulq_n_f64(v2160.val[0], v1573.f64[0]), v2160.val[1], v1573.f64[1]));
        v1772.val[0] = vaddq_f64(v1235[1], vmlaq_n_f64(vmulq_n_f64(v2089.val[0], v1573.f64[0]), v2089.val[1], v1573.f64[1]));
        *v1235 = vaddq_f64(*v1235, v1236);
        *(float64x2x2_t *)v1235[1].f64 = v1772;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1237 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1237 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1238 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1237));
      v1239 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1238 <= v1239)
      {
        v1240 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1237)), v1239, 6u);
        v1773 = vld2q_f64(v1549.f64);
        v1241 = &v1551;
        v2090 = vld2q_f64(v1241->f64);
        v1242 = &v1553;
        v2161 = vld2q_f64(v1242->f64);
        v1243 = vmlaq_n_f64(vmulq_n_f64(v1773.val[0], v1571.f64[0]), v1773.val[1], v1571.f64[1]);
        v1773.val[1] = vaddq_f64(v1240[2], vmlaq_n_f64(vmulq_n_f64(v2161.val[0], v1571.f64[0]), v2161.val[1], v1571.f64[1]));
        v1773.val[0] = vaddq_f64(v1240[1], vmlaq_n_f64(vmulq_n_f64(v2090.val[0], v1571.f64[0]), v2090.val[1], v1571.f64[1]));
        *v1240 = vaddq_f64(*v1240, v1243);
        *(float64x2x2_t *)v1240[1].f64 = v1773;
        v1244 = (float64x2_t *)sub_20F762098(v399 + 2279, v1238, (int)v1239 + 1, 6u);
        v1774 = vld2q_f64(v1549.f64);
        v2091 = vld2q_f64(v1551.f64);
        v2162 = vld2q_f64(v1553.f64);
        v1245 = vmlaq_n_f64(vmulq_n_f64(v1774.val[0], v1572.f64[0]), v1774.val[1], v1572.f64[1]);
        v1774.val[1] = vaddq_f64(v1244[2], vmlaq_n_f64(vmulq_n_f64(v2162.val[0], v1572.f64[0]), v2162.val[1], v1572.f64[1]));
        v1774.val[0] = vaddq_f64(v1244[1], vmlaq_n_f64(vmulq_n_f64(v2091.val[0], v1572.f64[0]), v2091.val[1], v1572.f64[1]));
        *v1244 = vaddq_f64(*v1244, v1245);
        *(float64x2x2_t *)v1244[1].f64 = v1774;
        v1246 = (float64x2_t *)sub_20F762098(v399 + 2279, v1238, (int)v1239 + 2, 6u);
        v1775 = vld2q_f64(v1549.f64);
        v2092 = vld2q_f64(v1551.f64);
        v2163 = vld2q_f64(v1553.f64);
        v1247 = vmlaq_n_f64(vmulq_n_f64(v1775.val[0], v1573.f64[0]), v1775.val[1], v1573.f64[1]);
        v1775.val[1] = vaddq_f64(v1246[2], vmlaq_n_f64(vmulq_n_f64(v2163.val[0], v1573.f64[0]), v2163.val[1], v1573.f64[1]));
        v1775.val[0] = vaddq_f64(v1246[1], vmlaq_n_f64(vmulq_n_f64(v2092.val[0], v1573.f64[0]), v2092.val[1], v1573.f64[1]));
        *v1246 = vaddq_f64(*v1246, v1247);
        *(float64x2x2_t *)v1246[1].f64 = v1775;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1248 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1248 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1249 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1248));
      v1250 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1249 <= v1250)
      {
        v1251 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1248)), v1250, 4u);
        v1776 = vld2q_f64(v1555.f64);
        v1252 = &v1557;
        v2093 = vld2q_f64(v1252->f64);
        v1253 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v1571.f64[0]), v1776.val[1], v1571, 1);
        v1776.val[0] = vaddq_f64(v1251[1], vmlaq_laneq_f64(vmulq_n_f64(v2093.val[0], v1571.f64[0]), v2093.val[1], v1571, 1));
        *v1251 = vaddq_f64(*v1251, v1253);
        v1251[1] = v1776.val[0];
        v1254 = (float64x2_t *)sub_20F762098(v399 + 2279, v1249, (int)v1250 + 1, 4u);
        v1777 = vld2q_f64(v1555.f64);
        v2094 = vld2q_f64(v1557.f64);
        v1255 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v1572.f64[0]), v1777.val[1], v1572, 1);
        v1777.val[0] = vaddq_f64(v1254[1], vmlaq_laneq_f64(vmulq_n_f64(v2094.val[0], v1572.f64[0]), v2094.val[1], v1572, 1));
        *v1254 = vaddq_f64(*v1254, v1255);
        v1254[1] = v1777.val[0];
        v1256 = (float64x2_t *)sub_20F762098(v399 + 2279, v1249, (int)v1250 + 2, 4u);
        v1778 = vld2q_f64(v1555.f64);
        v2095 = vld2q_f64(v1557.f64);
        v1257 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1573.f64[0]), v1778.val[1], v1573, 1);
        v1778.val[0] = vaddq_f64(v1256[1], vmlaq_laneq_f64(vmulq_n_f64(v2095.val[0], v1573.f64[0]), v2095.val[1], v1573, 1));
        *v1256 = vaddq_f64(*v1256, v1257);
        v1256[1] = v1778.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1258 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1258 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1259 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1258));
      v1260 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1259 <= v1260)
      {
        v1261 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1258)), v1260, 4u);
        v1779 = vld2q_f64(v1559.f64);
        v1262 = &v1561;
        v2096 = vld2q_f64(v1262->f64);
        v1263 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1571.f64[0]), v1779.val[1], v1571, 1);
        v1779.val[0] = vaddq_f64(v1261[1], vmlaq_laneq_f64(vmulq_n_f64(v2096.val[0], v1571.f64[0]), v2096.val[1], v1571, 1));
        *v1261 = vaddq_f64(*v1261, v1263);
        v1261[1] = v1779.val[0];
        v1264 = (float64x2_t *)sub_20F762098(v399 + 2279, v1259, (int)v1260 + 1, 4u);
        v1780 = vld2q_f64(v1559.f64);
        v2097 = vld2q_f64(v1561.f64);
        v1265 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1572.f64[0]), v1780.val[1], v1572, 1);
        v1780.val[0] = vaddq_f64(v1264[1], vmlaq_laneq_f64(vmulq_n_f64(v2097.val[0], v1572.f64[0]), v2097.val[1], v1572, 1));
        *v1264 = vaddq_f64(*v1264, v1265);
        v1264[1] = v1780.val[0];
        v1266 = (float64x2_t *)sub_20F762098(v399 + 2279, v1259, (int)v1260 + 2, 4u);
        v1781 = vld2q_f64(v1559.f64);
        v2098 = vld2q_f64(v1561.f64);
        v1267 = vmlaq_laneq_f64(vmulq_n_f64(v1781.val[0], v1573.f64[0]), v1781.val[1], v1573, 1);
        v1781.val[0] = vaddq_f64(v1266[1], vmlaq_laneq_f64(vmulq_n_f64(v2098.val[0], v1573.f64[0]), v2098.val[1], v1573, 1));
        *v1266 = vaddq_f64(*v1266, v1267);
        v1266[1] = v1781.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1268 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1268 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1269 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1268));
      v1270 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1269 <= v1270)
      {
        v1271 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1268)), v1270, 4u);
        v1782 = vld2q_f64(v1563.f64);
        v1272 = &v1565;
        v2099 = vld2q_f64(v1272->f64);
        v1273 = vmlaq_laneq_f64(vmulq_n_f64(v1782.val[0], v1571.f64[0]), v1782.val[1], v1571, 1);
        v1782.val[0] = vaddq_f64(v1271[1], vmlaq_laneq_f64(vmulq_n_f64(v2099.val[0], v1571.f64[0]), v2099.val[1], v1571, 1));
        *v1271 = vaddq_f64(*v1271, v1273);
        v1271[1] = v1782.val[0];
        v1274 = (float64x2_t *)sub_20F762098(v399 + 2279, v1269, (int)v1270 + 1, 4u);
        v1783 = vld2q_f64(v1563.f64);
        v2100 = vld2q_f64(v1565.f64);
        v1275 = vmlaq_laneq_f64(vmulq_n_f64(v1783.val[0], v1572.f64[0]), v1783.val[1], v1572, 1);
        v1783.val[0] = vaddq_f64(v1274[1], vmlaq_laneq_f64(vmulq_n_f64(v2100.val[0], v1572.f64[0]), v2100.val[1], v1572, 1));
        *v1274 = vaddq_f64(*v1274, v1275);
        v1274[1] = v1783.val[0];
        v1276 = (float64x2_t *)sub_20F762098(v399 + 2279, v1269, (int)v1270 + 2, 4u);
        v1784 = vld2q_f64(v1563.f64);
        v2101 = vld2q_f64(v1565.f64);
        v1277 = vmlaq_laneq_f64(vmulq_n_f64(v1784.val[0], v1573.f64[0]), v1784.val[1], v1573, 1);
        v1784.val[0] = vaddq_f64(v1276[1], vmlaq_laneq_f64(vmulq_n_f64(v2101.val[0], v1573.f64[0]), v2101.val[1], v1573, 1));
        *v1276 = vaddq_f64(*v1276, v1277);
        v1276[1] = v1784.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1278 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1278 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1279 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1278));
      v1280 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1279 <= v1280)
      {
        v1281 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1278)), v1280, 4u);
        v1785 = vld2q_f64(v1567.f64);
        v1282 = &v1569;
        v2102 = vld2q_f64(v1282->f64);
        v1283 = vmlaq_laneq_f64(vmulq_n_f64(v1785.val[0], v1571.f64[0]), v1785.val[1], v1571, 1);
        v1785.val[0] = vaddq_f64(v1281[1], vmlaq_laneq_f64(vmulq_n_f64(v2102.val[0], v1571.f64[0]), v2102.val[1], v1571, 1));
        *v1281 = vaddq_f64(*v1281, v1283);
        v1281[1] = v1785.val[0];
        v1284 = (float64x2_t *)sub_20F762098(v399 + 2279, v1279, (int)v1280 + 1, 4u);
        v1786 = vld2q_f64(v1567.f64);
        v2103 = vld2q_f64(v1569.f64);
        v1285 = vmlaq_laneq_f64(vmulq_n_f64(v1786.val[0], v1572.f64[0]), v1786.val[1], v1572, 1);
        v1786.val[0] = vaddq_f64(v1284[1], vmlaq_laneq_f64(vmulq_n_f64(v2103.val[0], v1572.f64[0]), v2103.val[1], v1572, 1));
        *v1284 = vaddq_f64(*v1284, v1285);
        v1284[1] = v1786.val[0];
        v1286 = (float64x2_t *)sub_20F762098(v399 + 2279, v1279, (int)v1280 + 2, 4u);
        v1787 = vld2q_f64(v1567.f64);
        v2104 = vld2q_f64(v1569.f64);
        v1287 = vmlaq_laneq_f64(vmulq_n_f64(v1787.val[0], v1573.f64[0]), v1787.val[1], v1573, 1);
        v1787.val[0] = vaddq_f64(v1286[1], vmlaq_laneq_f64(vmulq_n_f64(v2104.val[0], v1573.f64[0]), v2104.val[1], v1573, 1));
        *v1286 = vaddq_f64(*v1286, v1287);
        v1286[1] = v1787.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  if (*((_BYTE *)v1201 + 20))
  {
    v1288 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
    v1289 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, v1288, 3u);
    v1290.f64[0] = v1289[1].f64[0];
    _V4.D[1] = v1573.f64[1];
    _Q3 = vmulq_f64(v1573, v1571);
    _D2 = v1571.f64[1];
    __asm { FMLA            D3, D2, V4.D[1] }
    *v1289 = vaddq_f64(*v1289, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1571.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1571, 1));
    *(_QWORD *)&v1289[1].f64[0] = *(_OWORD *)&vaddq_f64(v1290, _Q3);
    v1294 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, (int)v1288 + 1, 3u);
    v1295.f64[0] = v1294[1].f64[0];
    _V4.D[1] = v1573.f64[1];
    _Q2 = vmulq_f64(v1573, v1572);
    _D3 = v1572.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *v1294 = vaddq_f64(*v1294, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1572.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1572, 1));
    *(_QWORD *)&v1294[1].f64[0] = *(_OWORD *)&vaddq_f64(v1295, _Q2);
    v1299 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, (int)v1288 + 2, 3u);
    v1300.f64[0] = v1299[1].f64[0];
    _Q4 = v1573;
    _Q2 = vmulq_f64(_Q4, _Q4);
    _D3 = v1573.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    v1304 = vaddq_f64(v1300, _Q2);
    *v1299 = vaddq_f64(*v1299, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1573.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1573, 1));
    v1299[1].f64[0] = v1304.f64[0];
    v1305 = v399[2270] + 8 * v1288;
    v1304.f64[0] = *(float64_t *)(v1305 + 16);
    _Q4.f64[1] = v1573.f64[1];
    _Q2 = vmulq_f64(v1573, *v1527);
    _D3 = v1527->f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *(float64x2_t *)v1305 = vsubq_f64(*(float64x2_t *)v1305, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1527->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), *v1527, 1));
    *(_QWORD *)(v1305 + 16) = *(_OWORD *)&vsubq_f64(v1304, _Q2);
  }
  v1308 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1308 + 20))
  {
    v1309 = *(unsigned int **)(a2 + 120);
    if (*((_BYTE *)v1309 + 20))
    {
      v1310 = v399[2239];
      v1311 = *(_QWORD *)(*v21 + 8 * (v1310 + *v1308));
      v1312 = *(_QWORD *)(*v21 + 8 * (v1310 + *v1309));
      if (v1311 <= v1312)
      {
        v1313 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, *(_QWORD *)(*v21 + 8 * (v1310 + *v1309)), 3u);
        v1314.f64[0] = v1313[1].f64[0];
        v2105 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1316 = vmlaq_laneq_f64(vmulq_n_f64(v2105.val[0], v1571.f64[0]), v2105.val[1], v1571, 1);
        v2105.val[0] = vmulq_f64(v1576, v1571);
        v2105.val[1].f64[0] = v1571.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1313 = vaddq_f64(*v1313, v1316);
        *(_QWORD *)&v1313[1].f64[0] = *(_OWORD *)&vaddq_f64(v1314, v2105.val[0]);
        v1317 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, (int)v1312 + 1, 3u);
        v1318.f64[0] = v1317[1].f64[0];
        v2106 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1320 = vmlaq_laneq_f64(vmulq_n_f64(v2106.val[0], v1572.f64[0]), v2106.val[1], v1572, 1);
        v2106.val[0] = vmulq_f64(v1576, v1572);
        v2106.val[1].f64[0] = v1572.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1317 = vaddq_f64(*v1317, v1320);
        *(_QWORD *)&v1317[1].f64[0] = *(_OWORD *)&vaddq_f64(v1318, v2106.val[0]);
        v1321 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, (int)v1312 + 2, 3u);
        v1322.f64[0] = v1321[1].f64[0];
        v2107 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1324 = vmlaq_laneq_f64(vmulq_n_f64(v2107.val[0], v1573.f64[0]), v2107.val[1], v1573, 1);
        v2107.val[0] = vmulq_f64(v1576, v1573);
        v2107.val[1].f64[0] = v1573.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1321 = vaddq_f64(*v1321, v1324);
        *(_QWORD *)&v1321[1].f64[0] = *(_OWORD *)&vaddq_f64(v1322, v2107.val[0]);
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  if (*((_BYTE *)*v1526 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1325 = *v21;
      v1326 = *(_QWORD *)(*v21 + 8 * (v399[2236] + **v1526));
      v1327 = *(_QWORD *)(v1325 + 8 * (v399[2239] + *v1308));
      if (v1326 <= v1327)
      {
        v1328 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, v1327, 6u);
        v1329 = &v1533;
        v2141 = vld2q_f64(v1329->f64);
        v1330 = &v1535;
        v2185 = vld2q_f64(v1330->f64);
        v1331 = vaddq_f64(v1328[2], vmlaq_n_f64(vmulq_n_f64(v2185.val[0], v1574.f64[0]), v2185.val[1], v1574.f64[1]));
        v1332 = vaddq_f64(v1328[1], vmlaq_n_f64(vmulq_n_f64(v2141.val[0], v1574.f64[0]), v2141.val[1], v1574.f64[1]));
        *v1328 = vaddq_f64(*v1328, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1574.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1574.f64[1]));
        v1328[1] = v1332;
        v1328[2] = v1331;
        v1333 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, (int)v1327 + 1, 6u);
        v2108 = vld2q_f64(v1533.f64);
        v2186 = vld2q_f64(v1535.f64);
        v1334 = vmlaq_n_f64(vmulq_n_f64(v2108.val[0], v1575.f64[0]), v2108.val[1], v1575.f64[1]);
        v2108.val[0] = vaddq_f64(v1333[2], vmlaq_n_f64(vmulq_n_f64(v2186.val[0], v1575.f64[0]), v2186.val[1], v1575.f64[1]));
        v1335 = vaddq_f64(v1333[1], v1334);
        *v1333 = vaddq_f64(*v1333, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1575.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1575.f64[1]));
        v1333[1] = v1335;
        v1333[2] = v2108.val[0];
        v1336 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, (int)v1327 + 2, 6u);
        v2109 = vld2q_f64(v1533.f64);
        v2187 = vld2q_f64(v1535.f64);
        v1337 = vmlaq_n_f64(vmulq_n_f64(v2109.val[0], v1576.f64[0]), v2109.val[1], v1576.f64[1]);
        v2109.val[0] = vaddq_f64(v1336[2], vmlaq_n_f64(vmulq_n_f64(v2187.val[0], v1576.f64[0]), v2187.val[1], v1576.f64[1]));
        v1338 = vaddq_f64(v1336[1], v1337);
        *v1336 = vaddq_f64(*v1336, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1576.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1576.f64[1]));
        v1336[1] = v1338;
        v1336[2] = v2109.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1339 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1339 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1340 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1339));
      v1341 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1340 <= v1341)
      {
        v1342 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1339)), v1341, 6u);
        v1788 = vld2q_f64(v1537.f64);
        v1343 = &v1539;
        v2110 = vld2q_f64(v1343->f64);
        v1344 = &v1541;
        v2164 = vld2q_f64(v1344->f64);
        v1345 = vmlaq_n_f64(vmulq_n_f64(v1788.val[0], v1574.f64[0]), v1788.val[1], v1574.f64[1]);
        v1788.val[1] = vaddq_f64(v1342[2], vmlaq_n_f64(vmulq_n_f64(v2164.val[0], v1574.f64[0]), v2164.val[1], v1574.f64[1]));
        v1788.val[0] = vaddq_f64(v1342[1], vmlaq_n_f64(vmulq_n_f64(v2110.val[0], v1574.f64[0]), v2110.val[1], v1574.f64[1]));
        *v1342 = vaddq_f64(*v1342, v1345);
        *(float64x2x2_t *)v1342[1].f64 = v1788;
        v1346 = (float64x2_t *)sub_20F762098(v399 + 2279, v1340, (int)v1341 + 1, 6u);
        v1789 = vld2q_f64(v1537.f64);
        v2111 = vld2q_f64(v1539.f64);
        v2165 = vld2q_f64(v1541.f64);
        v1347 = vmlaq_n_f64(vmulq_n_f64(v1789.val[0], v1575.f64[0]), v1789.val[1], v1575.f64[1]);
        v1789.val[1] = vaddq_f64(v1346[2], vmlaq_n_f64(vmulq_n_f64(v2165.val[0], v1575.f64[0]), v2165.val[1], v1575.f64[1]));
        v1789.val[0] = vaddq_f64(v1346[1], vmlaq_n_f64(vmulq_n_f64(v2111.val[0], v1575.f64[0]), v2111.val[1], v1575.f64[1]));
        *v1346 = vaddq_f64(*v1346, v1347);
        *(float64x2x2_t *)v1346[1].f64 = v1789;
        v1348 = (float64x2_t *)sub_20F762098(v399 + 2279, v1340, (int)v1341 + 2, 6u);
        v1790 = vld2q_f64(v1537.f64);
        v2112 = vld2q_f64(v1539.f64);
        v2166 = vld2q_f64(v1541.f64);
        v1349 = vmlaq_n_f64(vmulq_n_f64(v1790.val[0], v1576.f64[0]), v1790.val[1], v1576.f64[1]);
        v1790.val[1] = vaddq_f64(v1348[2], vmlaq_n_f64(vmulq_n_f64(v2166.val[0], v1576.f64[0]), v2166.val[1], v1576.f64[1]));
        v1790.val[0] = vaddq_f64(v1348[1], vmlaq_n_f64(vmulq_n_f64(v2112.val[0], v1576.f64[0]), v2112.val[1], v1576.f64[1]));
        *v1348 = vaddq_f64(*v1348, v1349);
        *(float64x2x2_t *)v1348[1].f64 = v1790;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1350 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1350 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1351 = *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1350));
      v1352 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1351 <= v1352)
      {
        v1353 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1350)), v1352, 6u);
        v1791 = vld2q_f64(v1543.f64);
        v1354 = &v1545;
        v2113 = vld2q_f64(v1354->f64);
        v1355 = &v1547;
        v2167 = vld2q_f64(v1355->f64);
        v1356 = vmlaq_n_f64(vmulq_n_f64(v1791.val[0], v1574.f64[0]), v1791.val[1], v1574.f64[1]);
        v1791.val[1] = vaddq_f64(v1353[2], vmlaq_n_f64(vmulq_n_f64(v2167.val[0], v1574.f64[0]), v2167.val[1], v1574.f64[1]));
        v1791.val[0] = vaddq_f64(v1353[1], vmlaq_n_f64(vmulq_n_f64(v2113.val[0], v1574.f64[0]), v2113.val[1], v1574.f64[1]));
        *v1353 = vaddq_f64(*v1353, v1356);
        *(float64x2x2_t *)v1353[1].f64 = v1791;
        v1357 = (float64x2_t *)sub_20F762098(v399 + 2279, v1351, (int)v1352 + 1, 6u);
        v1792 = vld2q_f64(v1543.f64);
        v2114 = vld2q_f64(v1545.f64);
        v2168 = vld2q_f64(v1547.f64);
        v1358 = vmlaq_n_f64(vmulq_n_f64(v1792.val[0], v1575.f64[0]), v1792.val[1], v1575.f64[1]);
        v1792.val[1] = vaddq_f64(v1357[2], vmlaq_n_f64(vmulq_n_f64(v2168.val[0], v1575.f64[0]), v2168.val[1], v1575.f64[1]));
        v1792.val[0] = vaddq_f64(v1357[1], vmlaq_n_f64(vmulq_n_f64(v2114.val[0], v1575.f64[0]), v2114.val[1], v1575.f64[1]));
        *v1357 = vaddq_f64(*v1357, v1358);
        *(float64x2x2_t *)v1357[1].f64 = v1792;
        v1359 = (float64x2_t *)sub_20F762098(v399 + 2279, v1351, (int)v1352 + 2, 6u);
        v1793 = vld2q_f64(v1543.f64);
        v2115 = vld2q_f64(v1545.f64);
        v2169 = vld2q_f64(v1547.f64);
        v1360 = vmlaq_n_f64(vmulq_n_f64(v1793.val[0], v1576.f64[0]), v1793.val[1], v1576.f64[1]);
        v1793.val[1] = vaddq_f64(v1359[2], vmlaq_n_f64(vmulq_n_f64(v2169.val[0], v1576.f64[0]), v2169.val[1], v1576.f64[1]));
        v1793.val[0] = vaddq_f64(v1359[1], vmlaq_n_f64(vmulq_n_f64(v2115.val[0], v1576.f64[0]), v2115.val[1], v1576.f64[1]));
        *v1359 = vaddq_f64(*v1359, v1360);
        *(float64x2x2_t *)v1359[1].f64 = v1793;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1361 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1361 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1362 = *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1361));
      v1363 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1362 <= v1363)
      {
        v1364 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1361)), v1363, 6u);
        v1794 = vld2q_f64(v1549.f64);
        v1365 = &v1551;
        v2116 = vld2q_f64(v1365->f64);
        v1366 = &v1553;
        v2170 = vld2q_f64(v1366->f64);
        v1367 = vmlaq_n_f64(vmulq_n_f64(v1794.val[0], v1574.f64[0]), v1794.val[1], v1574.f64[1]);
        v1794.val[1] = vaddq_f64(v1364[2], vmlaq_n_f64(vmulq_n_f64(v2170.val[0], v1574.f64[0]), v2170.val[1], v1574.f64[1]));
        v1794.val[0] = vaddq_f64(v1364[1], vmlaq_n_f64(vmulq_n_f64(v2116.val[0], v1574.f64[0]), v2116.val[1], v1574.f64[1]));
        *v1364 = vaddq_f64(*v1364, v1367);
        *(float64x2x2_t *)v1364[1].f64 = v1794;
        v1368 = (float64x2_t *)sub_20F762098(v399 + 2279, v1362, (int)v1363 + 1, 6u);
        v1795 = vld2q_f64(v1549.f64);
        v2117 = vld2q_f64(v1551.f64);
        v2171 = vld2q_f64(v1553.f64);
        v1369 = vmlaq_n_f64(vmulq_n_f64(v1795.val[0], v1575.f64[0]), v1795.val[1], v1575.f64[1]);
        v1795.val[1] = vaddq_f64(v1368[2], vmlaq_n_f64(vmulq_n_f64(v2171.val[0], v1575.f64[0]), v2171.val[1], v1575.f64[1]));
        v1795.val[0] = vaddq_f64(v1368[1], vmlaq_n_f64(vmulq_n_f64(v2117.val[0], v1575.f64[0]), v2117.val[1], v1575.f64[1]));
        *v1368 = vaddq_f64(*v1368, v1369);
        *(float64x2x2_t *)v1368[1].f64 = v1795;
        v1370 = (float64x2_t *)sub_20F762098(v399 + 2279, v1362, (int)v1363 + 2, 6u);
        v1796 = vld2q_f64(v1549.f64);
        v2118 = vld2q_f64(v1551.f64);
        v2172 = vld2q_f64(v1553.f64);
        v1371 = vmlaq_n_f64(vmulq_n_f64(v1796.val[0], v1576.f64[0]), v1796.val[1], v1576.f64[1]);
        v1796.val[1] = vaddq_f64(v1370[2], vmlaq_n_f64(vmulq_n_f64(v2172.val[0], v1576.f64[0]), v2172.val[1], v1576.f64[1]));
        v1796.val[0] = vaddq_f64(v1370[1], vmlaq_n_f64(vmulq_n_f64(v2118.val[0], v1576.f64[0]), v2118.val[1], v1576.f64[1]));
        *v1370 = vaddq_f64(*v1370, v1371);
        *(float64x2x2_t *)v1370[1].f64 = v1796;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1372 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1372 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1373 = *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1372));
      v1374 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1373 <= v1374)
      {
        v1375 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1372)), v1374, 4u);
        v1797 = vld2q_f64(v1555.f64);
        v1376 = &v1557;
        v2119 = vld2q_f64(v1376->f64);
        v1377 = vmlaq_laneq_f64(vmulq_n_f64(v1797.val[0], v1574.f64[0]), v1797.val[1], v1574, 1);
        v1797.val[0] = vaddq_f64(v1375[1], vmlaq_laneq_f64(vmulq_n_f64(v2119.val[0], v1574.f64[0]), v2119.val[1], v1574, 1));
        *v1375 = vaddq_f64(*v1375, v1377);
        v1375[1] = v1797.val[0];
        v1378 = (float64x2_t *)sub_20F762098(v399 + 2279, v1373, (int)v1374 + 1, 4u);
        v1798 = vld2q_f64(v1555.f64);
        v2120 = vld2q_f64(v1557.f64);
        v1379 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1575.f64[0]), v1798.val[1], v1575, 1);
        v1798.val[0] = vaddq_f64(v1378[1], vmlaq_laneq_f64(vmulq_n_f64(v2120.val[0], v1575.f64[0]), v2120.val[1], v1575, 1));
        *v1378 = vaddq_f64(*v1378, v1379);
        v1378[1] = v1798.val[0];
        v1380 = (float64x2_t *)sub_20F762098(v399 + 2279, v1373, (int)v1374 + 2, 4u);
        v1799 = vld2q_f64(v1555.f64);
        v2121 = vld2q_f64(v1557.f64);
        v1381 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1576.f64[0]), v1799.val[1], v1576, 1);
        v1799.val[0] = vaddq_f64(v1380[1], vmlaq_laneq_f64(vmulq_n_f64(v2121.val[0], v1576.f64[0]), v2121.val[1], v1576, 1));
        *v1380 = vaddq_f64(*v1380, v1381);
        v1380[1] = v1799.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1382 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1382 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1383 = *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1382));
      v1384 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1383 <= v1384)
      {
        v1385 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1382)), v1384, 4u);
        v1800 = vld2q_f64(v1559.f64);
        v1386 = &v1561;
        v2122 = vld2q_f64(v1386->f64);
        v1387 = vmlaq_laneq_f64(vmulq_n_f64(v1800.val[0], v1574.f64[0]), v1800.val[1], v1574, 1);
        v1800.val[0] = vaddq_f64(v1385[1], vmlaq_laneq_f64(vmulq_n_f64(v2122.val[0], v1574.f64[0]), v2122.val[1], v1574, 1));
        *v1385 = vaddq_f64(*v1385, v1387);
        v1385[1] = v1800.val[0];
        v1388 = (float64x2_t *)sub_20F762098(v399 + 2279, v1383, (int)v1384 + 1, 4u);
        v1801 = vld2q_f64(v1559.f64);
        v2123 = vld2q_f64(v1561.f64);
        v1389 = vmlaq_laneq_f64(vmulq_n_f64(v1801.val[0], v1575.f64[0]), v1801.val[1], v1575, 1);
        v1801.val[0] = vaddq_f64(v1388[1], vmlaq_laneq_f64(vmulq_n_f64(v2123.val[0], v1575.f64[0]), v2123.val[1], v1575, 1));
        *v1388 = vaddq_f64(*v1388, v1389);
        v1388[1] = v1801.val[0];
        v1390 = (float64x2_t *)sub_20F762098(v399 + 2279, v1383, (int)v1384 + 2, 4u);
        v1802 = vld2q_f64(v1559.f64);
        v2124 = vld2q_f64(v1561.f64);
        v1391 = vmlaq_laneq_f64(vmulq_n_f64(v1802.val[0], v1576.f64[0]), v1802.val[1], v1576, 1);
        v1802.val[0] = vaddq_f64(v1390[1], vmlaq_laneq_f64(vmulq_n_f64(v2124.val[0], v1576.f64[0]), v2124.val[1], v1576, 1));
        *v1390 = vaddq_f64(*v1390, v1391);
        v1390[1] = v1802.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1392 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1392 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1393 = *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1392));
      v1394 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1393 <= v1394)
      {
        v1395 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1392)), v1394, 4u);
        v1803 = vld2q_f64(v1563.f64);
        v1396 = &v1565;
        v2125 = vld2q_f64(v1396->f64);
        v1397 = vmlaq_laneq_f64(vmulq_n_f64(v1803.val[0], v1574.f64[0]), v1803.val[1], v1574, 1);
        v1803.val[0] = vaddq_f64(v1395[1], vmlaq_laneq_f64(vmulq_n_f64(v2125.val[0], v1574.f64[0]), v2125.val[1], v1574, 1));
        *v1395 = vaddq_f64(*v1395, v1397);
        v1395[1] = v1803.val[0];
        v1398 = (float64x2_t *)sub_20F762098(v399 + 2279, v1393, (int)v1394 + 1, 4u);
        v1804 = vld2q_f64(v1563.f64);
        v2126 = vld2q_f64(v1565.f64);
        v1399 = vmlaq_laneq_f64(vmulq_n_f64(v1804.val[0], v1575.f64[0]), v1804.val[1], v1575, 1);
        v1804.val[0] = vaddq_f64(v1398[1], vmlaq_laneq_f64(vmulq_n_f64(v2126.val[0], v1575.f64[0]), v2126.val[1], v1575, 1));
        *v1398 = vaddq_f64(*v1398, v1399);
        v1398[1] = v1804.val[0];
        v1400 = (float64x2_t *)sub_20F762098(v399 + 2279, v1393, (int)v1394 + 2, 4u);
        v1805 = vld2q_f64(v1563.f64);
        v2127 = vld2q_f64(v1565.f64);
        v1401 = vmlaq_laneq_f64(vmulq_n_f64(v1805.val[0], v1576.f64[0]), v1805.val[1], v1576, 1);
        v1805.val[0] = vaddq_f64(v1400[1], vmlaq_laneq_f64(vmulq_n_f64(v2127.val[0], v1576.f64[0]), v2127.val[1], v1576, 1));
        *v1400 = vaddq_f64(*v1400, v1401);
        v1400[1] = v1805.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1402 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1402 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1403 = *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1402));
      v1404 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1403 <= v1404)
      {
        v1405 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1402)), v1404, 4u);
        v1806 = vld2q_f64(v1567.f64);
        v1406 = &v1569;
        v2128 = vld2q_f64(v1406->f64);
        v1407 = vmlaq_laneq_f64(vmulq_n_f64(v1806.val[0], v1574.f64[0]), v1806.val[1], v1574, 1);
        v1806.val[0] = vaddq_f64(v1405[1], vmlaq_laneq_f64(vmulq_n_f64(v2128.val[0], v1574.f64[0]), v2128.val[1], v1574, 1));
        *v1405 = vaddq_f64(*v1405, v1407);
        v1405[1] = v1806.val[0];
        v1408 = (float64x2_t *)sub_20F762098(v399 + 2279, v1403, (int)v1404 + 1, 4u);
        v1807 = vld2q_f64(v1567.f64);
        v2129 = vld2q_f64(v1569.f64);
        v1409 = vmlaq_laneq_f64(vmulq_n_f64(v1807.val[0], v1575.f64[0]), v1807.val[1], v1575, 1);
        v1807.val[0] = vaddq_f64(v1408[1], vmlaq_laneq_f64(vmulq_n_f64(v2129.val[0], v1575.f64[0]), v2129.val[1], v1575, 1));
        *v1408 = vaddq_f64(*v1408, v1409);
        v1408[1] = v1807.val[0];
        v1410 = (float64x2_t *)sub_20F762098(v399 + 2279, v1403, (int)v1404 + 2, 4u);
        v1808 = vld2q_f64(v1567.f64);
        v2130 = vld2q_f64(v1569.f64);
        v1411 = vmlaq_laneq_f64(vmulq_n_f64(v1808.val[0], v1576.f64[0]), v1808.val[1], v1576, 1);
        v1808.val[0] = vaddq_f64(v1410[1], vmlaq_laneq_f64(vmulq_n_f64(v2130.val[0], v1576.f64[0]), v2130.val[1], v1576, 1));
        *v1410 = vaddq_f64(*v1410, v1411);
        v1410[1] = v1808.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1412 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1412 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1413 = v399[2239];
      v1414 = *(_QWORD *)(*v1528 + 8 * (v1413 + *v1412));
      v1415 = *(_QWORD *)(*v1528 + 8 * (v1413 + *v1308));
      if (v1414 <= v1415)
      {
        v1416 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v1413 + *v1412)), v1415, 3u);
        v1417.f64[0] = v1416[1].f64[0];
        v2131 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1419 = vmlaq_laneq_f64(vmulq_n_f64(v2131.val[0], v1574.f64[0]), v2131.val[1], v1574, 1);
        v2131.val[0] = vmulq_f64(v1573, v1574);
        v2131.val[1].f64[0] = v1574.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1416 = vaddq_f64(*v1416, v1419);
        *(_QWORD *)&v1416[1].f64[0] = *(_OWORD *)&vaddq_f64(v1417, v2131.val[0]);
        v1420 = (float64x2_t *)sub_20F762098(v399 + 2279, v1414, (int)v1415 + 1, 3u);
        v1421.f64[0] = v1420[1].f64[0];
        v2132 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1423 = vmlaq_laneq_f64(vmulq_n_f64(v2132.val[0], v1575.f64[0]), v2132.val[1], v1575, 1);
        v2132.val[0] = vmulq_f64(v1573, v1575);
        v2132.val[1].f64[0] = v1575.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1420 = vaddq_f64(*v1420, v1423);
        *(_QWORD *)&v1420[1].f64[0] = *(_OWORD *)&vaddq_f64(v1421, v2132.val[0]);
        v1424 = (float64x2_t *)sub_20F762098(v399 + 2279, v1414, (int)v1415 + 2, 3u);
        v1425.f64[0] = v1424[1].f64[0];
        v2133 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1427 = vmlaq_laneq_f64(vmulq_n_f64(v2133.val[0], v1576.f64[0]), v2133.val[1], v1576, 1);
        v2133.val[0] = vmulq_f64(v1573, v1576);
        v2133.val[1].f64[0] = v1576.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1424 = vaddq_f64(*v1424, v1427);
        *(_QWORD *)&v1424[1].f64[0] = *(_OWORD *)&vaddq_f64(v1425, v2133.val[0]);
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  if (*((_BYTE *)v1308 + 20))
  {
    v1428 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
    v1429 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, v1428, 3u);
    v1430.f64[0] = v1429[1].f64[0];
    _V4.D[1] = v1576.f64[1];
    _Q3 = vmulq_f64(v1576, v1574);
    _D2 = v1574.f64[1];
    __asm { FMLA            D3, D2, V4.D[1] }
    *v1429 = vaddq_f64(*v1429, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1574.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1574, 1));
    *(_QWORD *)&v1429[1].f64[0] = *(_OWORD *)&vaddq_f64(v1430, _Q3);
    v1434 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, (int)v1428 + 1, 3u);
    v1435.f64[0] = v1434[1].f64[0];
    _V4.D[1] = v1576.f64[1];
    _Q2 = vmulq_f64(v1576, v1575);
    _D3 = v1575.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *v1434 = vaddq_f64(*v1434, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1575.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1575, 1));
    *(_QWORD *)&v1434[1].f64[0] = *(_OWORD *)&vaddq_f64(v1435, _Q2);
    v1439 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, (int)v1428 + 2, 3u);
    v1440.f64[0] = v1439[1].f64[0];
    _Q4 = v1576;
    _Q2 = vmulq_f64(_Q4, _Q4);
    _D3 = v1576.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    v1444 = vaddq_f64(v1440, _Q2);
    *v1439 = vaddq_f64(*v1439, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1576.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1576, 1));
    v1439[1].f64[0] = v1444.f64[0];
    v1445 = v399[2270] + 8 * v1428;
    v1444.f64[0] = *(float64_t *)(v1445 + 16);
    _Q4.f64[1] = v1576.f64[1];
    _Q2 = vmulq_f64(v1576, *v1527);
    _D3 = v1527->f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *(float64x2_t *)v1445 = vsubq_f64(*(float64x2_t *)v1445, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1527->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), *v1527, 1));
    *(_QWORD *)(v1445 + 16) = *(_OWORD *)&vsubq_f64(v1444, _Q2);
  }
  v1448 = *(unsigned int **)(a2 + 56);
  v1449 = *(unsigned int **)(a2 + 136);
  v1450 = v1528;
  if (*((_BYTE *)v1448 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1451 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1448));
      v1452 = *(_QWORD *)(*v1528 + 8 * (v399[2240] + *v1449));
      if (v1451 <= v1452)
      {
        v1453 = (float64x2_t *)sub_20F762098(v399 + 2292, v1451, v1452 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v1454 = &v1533;
        v1827 = vld2q_f64(v1454->f64);
        v1455 = &v1535;
        v2188 = vld2q_f64(v1455->f64);
        v1456 = vaddq_f64(v1453[2], vmlaq_laneq_f64(vmulq_n_f64(v2188.val[0], v1577.f64[0]), v2188.val[1], v1577, 1));
        v1827.val[0] = vaddq_f64(v1453[1], vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1577.f64[0]), v1827.val[1], v1577, 1));
        *v1453 = vaddq_f64(*v1453, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1577.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1577, 1));
        v1453[1] = v1827.val[0];
        v1453[2] = v1456;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1457 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1457 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1458 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1457));
      v1459 = *(_QWORD *)(*v1528 + 8 * (v399[2240] + *v1449));
      if (v1458 <= v1459)
      {
        v1460 = (float64x2_t *)sub_20F762098(v399 + 2292, v1458, v1459 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2142 = vld2q_f64(v1537.f64);
        v1450 = v1528;
        v1461 = &v1539;
        v2189 = vld2q_f64(v1461->f64);
        v1462 = &v1541;
        v2223 = vld2q_f64(v1462->f64);
        v1463 = vaddq_f64(v1460[2], vmlaq_laneq_f64(vmulq_n_f64(v2223.val[0], v1577.f64[0]), v2223.val[1], v1577, 1));
        v1464 = vaddq_f64(v1460[1], vmlaq_laneq_f64(vmulq_n_f64(v2189.val[0], v1577.f64[0]), v2189.val[1], v1577, 1));
        *v1460 = vaddq_f64(*v1460, vmlaq_laneq_f64(vmulq_n_f64(v2142.val[0], v1577.f64[0]), v2142.val[1], v1577, 1));
        v1460[1] = v1464;
        v1460[2] = v1463;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1465 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1465 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1466 = *(_QWORD *)(*v1450 + 8 * (v399[2233] + *v1465));
      v1467 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1466 <= v1467)
      {
        v1468 = (float64x2_t *)sub_20F762098(v399 + 2292, v1466, v1467 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2143 = vld2q_f64(v1543.f64);
        v1450 = v1528;
        v1469 = &v1545;
        v2190 = vld2q_f64(v1469->f64);
        v1470 = &v1547;
        v2224 = vld2q_f64(v1470->f64);
        v1471 = vaddq_f64(v1468[2], vmlaq_laneq_f64(vmulq_n_f64(v2224.val[0], v1577.f64[0]), v2224.val[1], v1577, 1));
        v1472 = vaddq_f64(v1468[1], vmlaq_laneq_f64(vmulq_n_f64(v2190.val[0], v1577.f64[0]), v2190.val[1], v1577, 1));
        *v1468 = vaddq_f64(*v1468, vmlaq_laneq_f64(vmulq_n_f64(v2143.val[0], v1577.f64[0]), v2143.val[1], v1577, 1));
        v1468[1] = v1472;
        v1468[2] = v1471;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1473 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1473 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1474 = *(_QWORD *)(*v1450 + 8 * (v399[2233] + *v1473));
      v1475 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1474 <= v1475)
      {
        v1476 = (float64x2_t *)sub_20F762098(v399 + 2292, v1474, v1475 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2144 = vld2q_f64(v1549.f64);
        v1450 = v1528;
        v1477 = &v1551;
        v2191 = vld2q_f64(v1477->f64);
        v1478 = &v1553;
        v2225 = vld2q_f64(v1478->f64);
        v1479 = vaddq_f64(v1476[2], vmlaq_laneq_f64(vmulq_n_f64(v2225.val[0], v1577.f64[0]), v2225.val[1], v1577, 1));
        v1480 = vaddq_f64(v1476[1], vmlaq_laneq_f64(vmulq_n_f64(v2191.val[0], v1577.f64[0]), v2191.val[1], v1577, 1));
        *v1476 = vaddq_f64(*v1476, vmlaq_laneq_f64(vmulq_n_f64(v2144.val[0], v1577.f64[0]), v2144.val[1], v1577, 1));
        v1476[1] = v1480;
        v1476[2] = v1479;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1481 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1481 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1482 = *(_QWORD *)(*v1450 + 8 * (v399[2237] + *v1481));
      v1483 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1482 <= v1483)
      {
        v1484 = (float64x2_t *)sub_20F762098(v399 + 2292, v1482, v1483 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1809 = vld2q_f64(v1555.f64);
        v1450 = v1528;
        v1485 = &v1557;
        v2134 = vld2q_f64(v1485->f64);
        v1486 = vmlaq_laneq_f64(vmulq_n_f64(v1809.val[0], v1577.f64[0]), v1809.val[1], v1577, 1);
        v1809.val[0] = vaddq_f64(v1484[1], vmlaq_laneq_f64(vmulq_n_f64(v2134.val[0], v1577.f64[0]), v2134.val[1], v1577, 1));
        *v1484 = vaddq_f64(*v1484, v1486);
        v1484[1] = v1809.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1487 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1487 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1488 = *(_QWORD *)(*v1450 + 8 * (v399[2237] + *v1487));
      v1489 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1488 <= v1489)
      {
        v1490 = (float64x2_t *)sub_20F762098(v399 + 2292, v1488, v1489 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1810 = vld2q_f64(v1559.f64);
        v1450 = v1528;
        v1491 = &v1561;
        v2135 = vld2q_f64(v1491->f64);
        v1492 = vmlaq_laneq_f64(vmulq_n_f64(v1810.val[0], v1577.f64[0]), v1810.val[1], v1577, 1);
        v1810.val[0] = vaddq_f64(v1490[1], vmlaq_laneq_f64(vmulq_n_f64(v2135.val[0], v1577.f64[0]), v2135.val[1], v1577, 1));
        *v1490 = vaddq_f64(*v1490, v1492);
        v1490[1] = v1810.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1493 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1493 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1494 = *(_QWORD *)(*v1450 + 8 * (v399[2238] + *v1493));
      v1495 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1494 <= v1495)
      {
        v1496 = (float64x2_t *)sub_20F762098(v399 + 2292, v1494, v1495 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1811 = vld2q_f64(v1563.f64);
        v1450 = v1528;
        v1497 = &v1565;
        v2136 = vld2q_f64(v1497->f64);
        v1498 = vmlaq_laneq_f64(vmulq_n_f64(v1811.val[0], v1577.f64[0]), v1811.val[1], v1577, 1);
        v1811.val[0] = vaddq_f64(v1496[1], vmlaq_laneq_f64(vmulq_n_f64(v2136.val[0], v1577.f64[0]), v2136.val[1], v1577, 1));
        *v1496 = vaddq_f64(*v1496, v1498);
        v1496[1] = v1811.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1499 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1499 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1500 = *(_QWORD *)(*v1450 + 8 * (v399[2238] + *v1499));
      v1501 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1500 <= v1501)
      {
        v1502 = (float64x2_t *)sub_20F762098(v399 + 2292, v1500, v1501 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1812 = vld2q_f64(v1567.f64);
        v1450 = v1528;
        v1503 = &v1569;
        v2137 = vld2q_f64(v1503->f64);
        v1504 = vmlaq_laneq_f64(vmulq_n_f64(v1812.val[0], v1577.f64[0]), v1812.val[1], v1577, 1);
        v1812.val[0] = vaddq_f64(v1502[1], vmlaq_laneq_f64(vmulq_n_f64(v2137.val[0], v1577.f64[0]), v2137.val[1], v1577, 1));
        *v1502 = vaddq_f64(*v1502, v1504);
        v1502[1] = v1812.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1505 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1505 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1506 = *(_QWORD *)(*v1450 + 8 * (v399[2239] + *v1505));
      v1507 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1506 <= v1507)
      {
        v1508 = (float64x2_t *)sub_20F762098(v399 + 2292, v1506, v1507 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 3u);
        v1509.f64[0] = v1508[1].f64[0];
        v2138 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1511 = vmlaq_laneq_f64(vmulq_n_f64(v2138.val[0], v1577.f64[0]), v2138.val[1], v1577, 1);
        v2138.val[0] = vmulq_f64(v1573, v1577);
        v2138.val[1].f64[0] = v1577.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1508 = vaddq_f64(*v1508, v1511);
        *(_QWORD *)&v1508[1].f64[0] = *(_OWORD *)&vaddq_f64(v1509, v2138.val[0]);
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1512 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1512 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1513 = *(_QWORD *)(*v1450 + 8 * (v399[2239] + *v1512));
      v1514 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1513 <= v1514)
      {
        v1515 = (float64x2_t *)sub_20F762098(v399 + 2292, v1513, v1514 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 3u);
        v1516.f64[0] = v1515[1].f64[0];
        v2139 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1518 = vmlaq_laneq_f64(vmulq_n_f64(v2139.val[0], v1577.f64[0]), v2139.val[1], v1577, 1);
        v2139.val[0] = vmulq_f64(v1576, v1577);
        v2139.val[1].f64[0] = v1577.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1515 = vaddq_f64(*v1515, v1518);
        *(_QWORD *)&v1515[1].f64[0] = *(_OWORD *)&vaddq_f64(v1516, v2139.val[0]);
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  if (*((_BYTE *)v1449 + 20))
  {
    v1519 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
    _D2 = v1577.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    *(double *)(v399[2305] + 8 * (v1519 - *v1525)) = *(double *)(v399[2305]
                                                                               + 8 * (v1519 - *v1525))
                                                                   + _D1;
    _V0.D[1] = v1577.f64[1];
    _D1 = v1527->f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    *(double *)(v399[2270] + 8 * v1519) = *(double *)(v399[2270] + 8 * v1519) - _D2;
  }
}

char *sub_20F76B604(uint64_t a1, uint64_t a2)
{
  size_t v4;
  unsigned int v5;
  int v6;
  char *result;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  size_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *(unsigned int *)(a2 + 16);
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 16);
  result = *(char **)a1;
  v8 = *(char **)a2;
  if ((_DWORD)v4 == v6)
    goto LABEL_7;
  if (v8 == result)
  {
    v35 = (8 * v4 + 31) & 0xFFFFFFFE0;
    v36 = (char *)operator new(v35, (std::align_val_t)0x20uLL);
    v37 = v36;
    if (v35 >> 3 < v4)
    {
      MEMORY[0x212BC6368](v36, 0x1000C8000313F17);
      v37 = (char *)operator new(v35, (std::align_val_t)0x20uLL);
    }
    if ((_DWORD)v4)
    {
      v38 = *(char **)a2;
      v39 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v39 < 3)
      {
        v40 = v37;
      }
      else
      {
        v40 = v37;
        if ((unint64_t)(v37 - v38) >= 0x20)
        {
          v41 = v39 + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v38[v42];
          v40 = &v37[v42];
          v44 = v37 + 16;
          v45 = (__int128 *)(v38 + 16);
          v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *v45;
            *(v44 - 1) = *(v45 - 1);
            *v44 = v47;
            v44 += 2;
            v45 += 2;
            v46 -= 4;
          }
          while (v46);
          v38 = v43;
          if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_55;
        }
      }
      do
      {
        v63 = *(_QWORD *)v38;
        v38 += 8;
        *(_QWORD *)v40 = v63;
        v40 += 8;
      }
      while (v40 != &v37[8 * v4]);
    }
LABEL_55:
    result = *(char **)a1;
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v35 >> 3;
    *(_DWORD *)(a1 + 16) = v4;
    if (!result)
      return result;
LABEL_58:
    JUMPOUT(0x212BC6368);
  }
  *(_DWORD *)(a1 + 16) = v4;
  if (*(_QWORD *)(a1 + 8) < v4)
  {
    if (result)
    {
      MEMORY[0x212BC6368](result, 0x1000C8000313F17);
      v5 = *(_DWORD *)(a2 + 16);
    }
    v9 = (8 * v4 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9 >> 3;
    result = (char *)operator new(v9, (std::align_val_t)0x20uLL);
    *(_QWORD *)a1 = result;
    v8 = *(char **)a2;
  }
LABEL_7:
  if (v8 == result)
  {
    v23 = (8 * v5 + 31) & 0xFFFFFFFE0;
    v24 = (char *)operator new(v23, (std::align_val_t)0x20uLL);
    if (v5 > v23 >> 3)
    {
      MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
      v24 = (char *)operator new(v23, (std::align_val_t)0x20uLL);
    }
    if (v5)
    {
      v25 = *(char **)a2;
      v26 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v26 < 3)
      {
        v27 = v24;
      }
      else
      {
        v27 = v24;
        if ((unint64_t)(v24 - v25) >= 0x20)
        {
          v28 = v26 + 1;
          v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          v30 = &v25[v29];
          v27 = &v24[v29];
          v31 = v24 + 16;
          v32 = (__int128 *)(v25 + 16);
          v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *v32;
            *(v31 - 1) = *(v32 - 1);
            *v31 = v34;
            v31 += 2;
            v32 += 2;
            v33 -= 4;
          }
          while (v33);
          v25 = v30;
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
        }
      }
      do
      {
        v49 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v27 = v49;
        v27 += 8;
      }
      while (v27 != &v24[8 * v5]);
    }
LABEL_42:
    v50 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v50)
      goto LABEL_58;
    v51 = *(char **)a1;
    v52 = (v50 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v52 < 3)
    {
      v53 = v24;
      v54 = *(char **)a1;
    }
    else
    {
      v53 = v24;
      v54 = *(char **)a1;
      if ((unint64_t)(v51 - v24) >= 0x20)
      {
        v55 = 0;
        v56 = v52 + 1;
        v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v24[v57];
        v54 = &v51[v57];
        v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = &v51[v55];
          v60 = *(_OWORD *)&v24[v55 + 16];
          *(_OWORD *)v59 = *(_OWORD *)&v24[v55];
          *((_OWORD *)v59 + 1) = v60;
          v55 += 32;
          v58 -= 4;
        }
        while (v58);
        if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_58;
      }
    }
    v61 = &v51[8 * v50];
    do
    {
      v62 = *(_QWORD *)v53;
      v53 += 8;
      *(_QWORD *)v54 = v62;
      v54 += 8;
    }
    while (v54 != v61);
    goto LABEL_58;
  }
  *(_DWORD *)(a1 + 16) = v5;
  v10 = v5;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)v5)
  {
    v11 = v5;
    if (result)
    {
      MEMORY[0x212BC6368](result, 0x1000C8000313F17);
      v11 = *(unsigned int *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 16);
    }
    v12 = (8 * v10 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v12 >> 3;
    result = (char *)operator new(v12, (std::align_val_t)0x20uLL);
    *(_QWORD *)a1 = result;
    v10 = v11;
  }
  if (v5)
  {
    v13 = *(char **)a2;
    v14 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v14 < 3)
    {
      v15 = result;
    }
    else
    {
      v15 = result;
      if ((unint64_t)(result - v13) >= 0x20)
      {
        v16 = v14 + 1;
        v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = &v13[v17];
        v15 = &result[v17];
        v19 = result + 16;
        v20 = (__int128 *)(v13 + 16);
        v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *v20;
          *(v19 - 1) = *(v20 - 1);
          *v19 = v22;
          v19 += 2;
          v20 += 2;
          v21 -= 4;
        }
        while (v21);
        v13 = v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
          return result;
      }
    }
    do
    {
      v48 = *(_QWORD *)v13;
      v13 += 8;
      *(_QWORD *)v15 = v48;
      v15 += 8;
    }
    while (v15 != &result[8 * v10]);
  }
  return result;
}

void sub_20F76BA04(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2 = 0;
  v4 = a1[4];
  v3 = a1[5];
  v5 = (v3 - v4) >> 3;
  while (v5 != v2)
  {
    v6 = 8 * v2;
    v7 = *(_QWORD *)(v4 + 8 * v2++);
    v8 = a1[1];
    v9 = *(_QWORD *)(v8 + v6 + 8);
    v10 = v9 - v7;
    if (v9 != v7)
    {
      if (v2 < v5)
      {
        do
        {
          v11 = 8 * v2;
          v12 = v9 - v10;
          *(_QWORD *)(v8 + v11) = v9 - v10;
          v13 = a1[4];
          v14 = *(_QWORD *)(v13 + 8 * v2);
          v15 = v14 - v10;
          *(_QWORD *)(v13 + v11) = v14 - v10;
          if (v14 != v9)
          {
            memmove((void *)(a1[7] + 4 * v12), (const void *)(a1[7] + 4 * v9), 4 * v14 - 4 * v9);
            memmove((void *)(a1[10] + 8 * v12), (const void *)(a1[10] + 8 * v9), 8 * v14 - 8 * v9);
            v8 = a1[1];
          }
          v9 = *(_QWORD *)(v8 + 8 * v2 + 8);
          v10 = v9 - v15;
          ++v2;
        }
        while (v5 != v2);
        v3 = a1[5];
      }
      v16 = a1[7];
      *(_QWORD *)(a1[2] - 8) -= v10;
      v17 = *(_QWORD *)(v3 - 8);
      v18 = (a1[8] - v16) >> 2;
      if (v17 <= v18)
      {
        if (v17 < v18)
          a1[8] = v16 + 4 * v17;
      }
      else
      {
        sub_20EAC24FC((uint64_t)(a1 + 7), v17 - v18);
        v17 = *(_QWORD *)(a1[5] - 8);
      }
      v19 = a1[10];
      v20 = (a1[11] - v19) >> 3;
      if (v17 <= v20)
      {
        if (v17 < v20)
          a1[11] = v19 + 8 * v17;
      }
      else
      {
        sub_20E93D8FC((uint64_t)(a1 + 10), v17 - v20);
      }
      return;
    }
  }
}

void sub_20F76BB80(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  void *v14;
  uint64_t *v15;
  char *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  size_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t __len;
  uint64_t v82;

  *(_DWORD *)a1 = a3;
  v13 = (uint64_t *)(a1 + 8);
  v82 = 0;
  sub_20F760494(a1 + 8, a2 + 1, &v82);
  v15 = (uint64_t *)(a1 + 32);
  v14 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = v14;
  if (a2 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v14) >> 3))
  {
    if (a2 < 0)
      goto LABEL_63;
    v16 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = &v16[8 * a2];
    if (v14)
      operator delete(v14);
  }
  v79 = a7;
  v17 = a3;
  v18 = &a5[a3];
  if (a3)
  {
    v19 = *(v18 - 1) - *a4;
    v21 = (uint64_t *)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 56);
    v22 = (_QWORD *)(a1 + 64);
    v23 = (*(_QWORD *)(a1 + 64) - v20) >> 2;
    if (v19 > v23)
    {
      sub_20EAC24FC(a1 + 56, v19 - v23);
      v17 = a3;
      goto LABEL_11;
    }
  }
  else
  {
    v19 = 0;
    v21 = (uint64_t *)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 56);
    v22 = (_QWORD *)(a1 + 64);
    v23 = (*(_QWORD *)(a1 + 64) - v20) >> 2;
  }
  if (v23 > v19)
    *v22 = v20 + 4 * v19;
LABEL_11:
  v24 = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 88);
  v82 = 0;
  v26 = (v25 - v24) >> 3;
  if (v19 <= v26)
  {
    if (v19 < v26)
      *(_QWORD *)(a1 + 88) = v24 + 8 * v19;
  }
  else
  {
    sub_20F0052C8(a1 + 80, v19 - v26, &v82);
    v17 = a3;
  }
  if (a4 + 1 == a5)
  {
    v35 = *a4;
    v36 = *(v18 - 1);
    if (*a4 != v36)
    {
      v37 = 4 * v35;
      v38 = (int *)(a6 + 4 * v35);
      v39 = *v13;
      v40 = 4 * v36 - v37;
      do
      {
        v41 = *v38++;
        ++*(_QWORD *)(v39 + 8 * v41 + 8);
        v40 -= 4;
      }
      while (v40);
    }
  }
  else if (v17 >= 1)
  {
    for (i = 0; i != v17; ++i)
    {
      v28 = a4[i];
      v29 = a5[i];
      v30 = v29 <= v28;
      v31 = v29 - v28;
      if (!v30)
      {
        v32 = *v13;
        v33 = (int *)(a6 + 4 * v28);
        do
        {
          v34 = *v33++;
          ++*(_QWORD *)(v32 + 8 * v34 + 8);
          --v31;
        }
        while (v31);
      }
    }
  }
  v43 = *(char **)(a1 + 8);
  v42 = *(char **)(a1 + 16);
  v44 = v43 + 16;
  if (v43 + 8 != v42 && v44 != v42)
  {
    v46 = *((_QWORD *)v43 + 1);
    do
    {
      v46 += *(_QWORD *)v44;
      *(_QWORD *)v44 = v46;
      v44 += 8;
    }
    while (v44 != v42);
  }
  v47 = v42 - 8;
  __len = v42 - 8 - v43;
  v48 = __len >> 3;
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(char **)(a1 + 32);
  if (__len >> 3 > (unint64_t)((v49 - (uint64_t)v50) >> 3))
  {
    v78 = v47;
    if (v50)
    {
      *(_QWORD *)(a1 + 40) = v50;
      operator delete(v50);
      v49 = 0;
      *v15 = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
    if ((__len & 0x8000000000000000) == 0)
    {
      v51 = v49 >> 2;
      if (v49 >> 2 <= v48)
        v51 = __len >> 3;
      v52 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8;
      v53 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v52)
        v53 = v51;
      if (!(v53 >> 61))
      {
        v54 = 8 * v53;
        v55 = (char *)operator new(8 * v53);
        v50 = v55;
        *(_QWORD *)(a1 + 32) = v55;
        *(_QWORD *)(a1 + 40) = v55;
        *(_QWORD *)(a1 + 48) = &v55[v54];
        if (v78 == v43)
        {
          v57 = v79;
          v17 = a3;
          *(_QWORD *)(a1 + 40) = &v55[__len];
          if (a3 < 1)
            return;
          goto LABEL_56;
        }
        v56 = __len;
        memmove(v55, v43, __len);
        v57 = v79;
        goto LABEL_48;
      }
    }
LABEL_63:
    sub_20F41B384();
  }
  v58 = *(_BYTE **)(a1 + 40);
  v59 = v58 - v50;
  v60 = (v58 - v50) >> 3;
  if (v60 < v48)
  {
    v61 = &v43[8 * v60];
    if (v58 != v50)
    {
      v62 = &v43[8 * v60];
      v63 = v47;
      memmove(*(void **)(a1 + 32), v43, v59);
      v61 = v62;
      v47 = v63;
      v50 = *(char **)(a1 + 40);
    }
    v57 = v79;
    v56 = v47 - v61;
    if (v47 != v61)
      memmove(v50, v61, v47 - v61);
LABEL_48:
    v17 = a3;
    *(_QWORD *)(a1 + 40) = &v50[v56];
    if (a3 < 1)
      return;
    goto LABEL_56;
  }
  if (v47 == v43)
  {
    v57 = v79;
    *(_QWORD *)(a1 + 40) = &v50[__len];
    if (v17 < 1)
      return;
  }
  else
  {
    memmove(*(void **)(a1 + 32), v43, __len);
    v17 = a3;
    v57 = v79;
    *(_QWORD *)(a1 + 40) = &v50[__len];
    if (a3 < 1)
      return;
  }
LABEL_56:
  v64 = 0;
  v65 = v17;
  do
  {
    v66 = a4[v64];
    v67 = a5[v64];
    v30 = v67 <= v66;
    v68 = v67 - v66;
    if (!v30)
    {
      v69 = *v15;
      v70 = *v21;
      v71 = (uint64_t *)(v57 + 8 * v66);
      v72 = *(_QWORD *)(a1 + 80);
      v73 = (int *)(a6 + 4 * v66);
      do
      {
        v74 = *v73++;
        v75 = 8 * v74;
        v76 = *(_QWORD *)(v69 + 8 * v74);
        *(_DWORD *)(v70 + 4 * v76) = v64;
        v77 = *v71++;
        *(_QWORD *)(v72 + 8 * v76) = v77;
        *(_QWORD *)(v69 + v75) = v76 + 1;
        --v68;
      }
      while (v68);
    }
    ++v64;
  }
  while (v64 != v65);
}

void sub_20F76BFD0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *i;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  int v69;
  double v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  _BYTE *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  int *v123;
  unint64_t v124;
  unint64_t v125;
  int *v126;
  int *v127;
  int v128;
  uint64_t v129;
  double *v130;
  size_t v131;
  int *v132;
  uint64_t v133;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v147;
  _BYTE *v148;
  unint64_t v149;
  int *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t v159;
  unint64_t v160;

  v16 = a1;
  *a1 = a6;
  v158 = 0;
  v136 = a1 + 2;
  sub_20F760494((uint64_t)(a1 + 2), a12 + 1, (uint64_t *)&v158);
  v158 = 0;
  v135 = v16 + 8;
  sub_20F760494((uint64_t)(v16 + 8), a12, (uint64_t *)&v158);
  v17 = (int *)*((_QWORD *)v16 + 7);
  v139 = (uint64_t *)(v16 + 14);
  v19 = v16 + 20;
  v18 = *((_QWORD *)v16 + 10);
  *((_QWORD *)v16 + 8) = v17;
  *((_QWORD *)v16 + 11) = v18;
  v20 = *v16;
  v159 = 0;
  v160 = 0;
  v158 = 0;
  if ((_DWORD)v20)
  {
    if ((v20 & 0x80000000) != 0)
      sub_20E867F44();
    v21 = (v20 - 1) >> 6;
    v22 = operator new(8 * (v21 + 1));
    v23 = v22;
    v159 = v20;
    v160 = v21 + 1;
    v158 = v22;
    if (v20 >= 0x41)
      v24 = (v20 - 1) >> 6;
    else
      v24 = 0;
    v22[v24] = 0;
    if (v20 >= 0x40)
      bzero(v22, 8 * (v20 >> 6));
    if ((v20 & 0x3F) != 0)
      v23[v20 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v20 & 0x3F));
    v25 = operator new(8 * v20);
    bzero(v25, 8 * v20);
    if (a12 >= 1)
    {
LABEL_11:
      v26 = 0;
      v151 = 0;
      v27 = v17;
      v28 = a10;
      v150 = v16;
      v154 = v16 + 20;
      while (1)
      {
        v29 = *(_QWORD *)(a2 + 8 * v26);
        v140 = 8 * v26;
        v30 = *(_QWORD *)(a3 + 8 * v26);
        v31 = (int *)(a4 + 4 * v30);
        if (v30 != v29)
        {
          v32 = (4 * v30 - 4 * v29) >> 2;
          v31 = (int *)(a4 + 4 * v29);
          do
          {
            v33 = v32 >> 1;
            v34 = &v31[v32 >> 1];
            v36 = *v34;
            v35 = v34 + 1;
            v32 += ~(v32 >> 1);
            if (v26 >= v36)
              v31 = v35;
            else
              v32 = v33;
          }
          while (v32);
        }
        v143 = v26;
        v37 = ((uint64_t)v31 - a4) >> 2;
        v38 = v37 - v29 + v151;
        v39 = v27 - v17;
        if (v38 <= v39)
        {
          if (v38 < v39)
            *((_QWORD *)v16 + 8) = &v17[v38];
        }
        else
        {
          sub_20EAC24FC((uint64_t)v139, v38 - v39);
        }
        v157 = 0;
        v40 = *((_QWORD *)v16 + 10);
        v41 = (*((_QWORD *)v16 + 11) - v40) >> 3;
        if (v38 <= v41)
        {
          v42 = v143;
          if (v38 < v41)
            *((_QWORD *)v16 + 11) = v40 + 8 * v38;
        }
        else
        {
          sub_20F0052C8((uint64_t)v19, v38 - v41, &v157);
          v42 = v143;
        }
        v43 = v151;
        v44 = v37 - v29;
        if (v37 > v29)
        {
          v45 = *v139;
          v46 = *(_QWORD *)v19;
          v47 = (uint64_t *)(a5 + 8 * v29);
          v43 = v151;
          v48 = (int *)(a4 + 4 * v29);
          do
          {
            v50 = *v48++;
            v49 = v50;
            v51 = *v47++;
            *(_QWORD *)((char *)v23 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) ^= 1 << v49;
            *((_QWORD *)v25 + v49) = v43;
            *(_DWORD *)(v45 + 4 * v43) = v49;
            *(_QWORD *)(v46 + 8 * v43++) = v51;
            --v44;
          }
          while (v44);
        }
        v52 = *(_QWORD *)(a13 + v140);
        v53 = *(_QWORD *)(a14 + v140);
        v54 = a9;
        v142 = v53;
        if (v52 < v53)
          break;
LABEL_31:
        v17 = (int *)*((_QWORD *)v16 + 7);
        v27 = (int *)*((_QWORD *)v16 + 8);
        for (i = &v17[v151]; i != v27; *(_QWORD *)((char *)v23 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) ^= 1 << v56)
          v56 = *i++;
        *(_QWORD *)(*v136 + v140) = v151;
        *(_QWORD *)(*v135 + v140) = v43;
        v26 = v143 + 1;
        v151 = v43;
        if (v143 + 1 == a12)
          goto LABEL_110;
      }
      while (1)
      {
        v57 = 8 * *(int *)(a15 + 4 * v52);
        v58 = *(_QWORD *)(a7 + v57);
        v59 = *(_QWORD *)(a8 + v57);
        v60 = (int *)(v54 + 4 * v59);
        if (v59 != v58)
        {
          v61 = (4 * v59 - 4 * v58) >> 2;
          v60 = (int *)(v54 + 4 * v58);
          do
          {
            v62 = v61 >> 1;
            v63 = &v60[v61 >> 1];
            v65 = *v63;
            v64 = v63 + 1;
            v61 += ~(v61 >> 1);
            if (v42 >= v65)
              v60 = v64;
            else
              v61 = v62;
          }
          while (v61);
        }
        v66 = ((uint64_t)v60 - v54) >> 2;
        if (v58 < v66)
          break;
LABEL_35:
        if (++v52 == v53)
          goto LABEL_31;
      }
      v144 = v52;
      v67 = *(double *)(a16 + 8 * v52) * *(double *)(a11 + 8 * *(int *)(a15 + 4 * v52));
      v152 = ((uint64_t)v60 - v54) >> 2;
      v153 = v23;
      while (1)
      {
        while (1)
        {
          v69 = *(_DWORD *)(v54 + 4 * v58);
          v70 = *(double *)(v28 + 8 * v58);
          v71 = (unint64_t)v69 >> 6;
          v72 = v23[v71];
          if (((1 << v69) & v72) == 0)
            break;
          v68 = 8 * *((_QWORD *)v25 + v69);
          *(double *)(*(_QWORD *)v19 + v68) = v67 * v70 + *(double *)(*(_QWORD *)v19 + v68);
          if (++v58 == v66)
            goto LABEL_34;
        }
        v23[v71] = (1 << v69) ^ v72;
        v73 = v43 + 1;
        v74 = (_BYTE *)*((_QWORD *)v16 + 7);
        v75 = (_BYTE *)*((_QWORD *)v16 + 8);
        v76 = (v75 - v74) >> 2;
        v77 = v43 + 1 - v76;
        v155 = v43;
        v156 = v43 + 1;
        if (v43 + 1 > v76)
          break;
        v19 = v154;
        if (v43 + 1 < v76)
          *((_QWORD *)v16 + 8) = &v74[4 * v73];
LABEL_69:
        v96 = (_BYTE *)*((_QWORD *)v16 + 10);
        v97 = (char *)*((_QWORD *)v16 + 11);
        v98 = v97 - v96;
        v99 = (v97 - v96) >> 3;
        v100 = v73 - v99;
        if (v73 > v99)
        {
          v101 = *((_QWORD *)v16 + 12);
          if (v100 <= (v101 - (uint64_t)v97) >> 3)
          {
            v110 = &v97[8 * v100];
            bzero(*((void **)v16 + 11), ((8 * v155 - v98) & 0xFFFFFFFFFFFFFFF8) + 8);
            *((_QWORD *)v16 + 11) = v110;
            v97 = v110;
            v23 = v153;
            goto LABEL_92;
          }
          if (v73 >> 61)
            sub_20E867F44();
          v102 = v101 - (_QWORD)v96;
          v103 = (v101 - (uint64_t)v96) >> 2;
          if (v103 <= v73)
            v103 = v73;
          if (v102 >= 0x7FFFFFFFFFFFFFF8)
            v104 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v104 = v103;
          if (v104 >> 61)
            sub_20E877A38();
          v149 = v104;
          v105 = operator new(8 * v104);
          v106 = &v105[8 * v99];
          bzero(v106, ((8 * v155 - v98) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v97 == v96)
          {
            v108 = v156;
            v109 = v105;
            v23 = v153;
            v19 = v154;
          }
          else
          {
            v107 = v97 - v96 - 8;
            v108 = v156;
            if (v107 < 0x58)
            {
              v109 = v105;
              v23 = v153;
              v19 = v154;
              goto LABEL_89;
            }
            v109 = v105;
            v111 = v96 - v105;
            v23 = v153;
            v19 = v154;
            if (v111 < 0x20)
              goto LABEL_122;
            v112 = (v107 >> 3) + 1;
            v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
            v114 = &v97[-v113];
            v106 -= v113;
            v115 = &v109[8 * v99 - 16];
            v116 = v97 - 16;
            v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v118 = *(_OWORD *)v116;
              *(v115 - 1) = *((_OWORD *)v116 - 1);
              *v115 = v118;
              v115 -= 2;
              v116 -= 32;
              v117 -= 4;
            }
            while (v117);
            v97 = v114;
            if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_122:
              do
              {
LABEL_89:
                v119 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v106 - 1) = v119;
                v106 -= 8;
              }
              while (v97 != v96);
            }
          }
          v97 = &v109[8 * v108];
          *((_QWORD *)v150 + 10) = v106;
          *((_QWORD *)v150 + 11) = v97;
          v16 = v150;
          *((_QWORD *)v150 + 12) = &v109[8 * v149];
          if (v96)
          {
            operator delete(v96);
            v97 = (char *)*((_QWORD *)v150 + 11);
          }
          goto LABEL_92;
        }
        v23 = v153;
        if (v73 < v99)
        {
          v97 = &v96[8 * v73];
          *((_QWORD *)v16 + 11) = v97;
        }
LABEL_92:
        v121 = *((_QWORD *)v16 + 7);
        v120 = *((_QWORD *)v16 + 8);
        v122 = (int *)(v120 - 4);
        v123 = (int *)(v121 + 4 * v151);
        if ((int *)(v120 - 4) == v123)
        {
          v123 = (int *)(v120 - 4);
          v129 = ((uint64_t)v122 - v121) >> 2;
          *((_QWORD *)v25 + v69) = v129;
        }
        else
        {
          v124 = (v120 - 4 - (uint64_t)v123) >> 2;
          do
          {
            v125 = v124 >> 1;
            v126 = &v123[v124 >> 1];
            v128 = *v126;
            v127 = v126 + 1;
            v124 += ~(v124 >> 1);
            if (v128 < v69)
              v123 = v127;
            else
              v124 = v125;
          }
          while (v124);
          v129 = ((uint64_t)v123 - v121) >> 2;
          *((_QWORD *)v25 + v69) = v129;
          if (v122 != v123)
          {
            v132 = v123;
            do
            {
              v133 = *v132++;
              ++*((_QWORD *)v25 + v133);
            }
            while (v132 != v122);
            memmove(v123 + 1, v123, v120 - 4 - (_QWORD)v123);
            v130 = (double *)(*(_QWORD *)v19 + 8 * *((_QWORD *)v25 + v69));
            v131 = v97 - 8 - (char *)v130;
            if (v97 - 8 == (char *)v130)
              goto LABEL_101;
LABEL_100:
            memmove(&v97[-v131], v130, v131);
            goto LABEL_101;
          }
        }
        v130 = (double *)(*(_QWORD *)v19 + 8 * v129);
        v131 = v97 - 8 - (char *)v130;
        if (v97 - 8 != (char *)v130)
          goto LABEL_100;
LABEL_101:
        *v123 = v69;
        *v130 = v67 * v70;
        v43 = v156;
        v28 = a10;
        v54 = a9;
        v66 = v152;
        if (++v58 == v152)
        {
LABEL_34:
          v42 = v143;
          v52 = v144;
          v53 = v142;
          goto LABEL_35;
        }
      }
      v78 = *((_QWORD *)v16 + 9);
      if (v77 <= (v78 - (uint64_t)v75) >> 2)
      {
        bzero(v75, 4 * v77);
        v73 = v156;
        *((_QWORD *)v16 + 8) = &v75[4 * v77];
        v19 = v154;
        goto LABEL_69;
      }
      if (v73 >> 62)
        sub_20EABADD4();
      v79 = v78 - (_QWORD)v74;
      v80 = v79 >> 1;
      if (v79 >> 1 <= v73)
        v80 = v43 + 1;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      if (v81 >> 62)
        sub_20E877A38();
      v147 = v81;
      v148 = operator new(4 * v81);
      bzero(&v148[4 * v76], 4 * v77);
      v82 = v75 - v74;
      if (v75 == v74)
      {
        v85 = &v148[4 * v76];
        v87 = 4 * v77;
        v16 = v150;
        v73 = v156;
        v86 = v148;
        v84 = v85;
        v19 = v154;
        goto LABEL_67;
      }
      v83 = v82 - 4;
      v16 = v150;
      v73 = v156;
      if ((unint64_t)(v82 - 4) >= 0x2C)
      {
        v86 = v148;
        v87 = 4 * v77;
        v84 = &v148[4 * v76];
        v85 = v84;
        v19 = v154;
        if ((unint64_t)(v74 - v148) >= 0x20)
        {
          v88 = (v83 >> 2) + 1;
          v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
          v90 = &v75[-v89];
          v85 = &v84[-v89];
          v91 = &v148[4 * v76 - 16];
          v92 = (__int128 *)(v75 - 16);
          v93 = v88 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v94 = *v92;
            *(v91 - 1) = *(v92 - 1);
            *v91 = v94;
            v91 -= 2;
            v92 -= 2;
            v93 -= 8;
          }
          while (v93);
          v75 = v90;
          if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_67:
            *((_QWORD *)v16 + 7) = v85;
            *((_QWORD *)v16 + 8) = &v84[v87];
            *((_QWORD *)v16 + 9) = &v86[4 * v147];
            if (v74)
            {
              operator delete(v74);
              v73 = v156;
            }
            goto LABEL_69;
          }
        }
      }
      else
      {
        v84 = &v148[4 * v76];
        v85 = v84;
        v86 = v148;
        v87 = 4 * v77;
        v19 = v154;
      }
      do
      {
        v95 = *((_DWORD *)v75 - 1);
        v75 -= 4;
        *((_DWORD *)v85 - 1) = v95;
        v85 -= 4;
      }
      while (v75 != v74);
      goto LABEL_67;
    }
  }
  else
  {
    v23 = 0;
    v25 = 0;
    if (a12 >= 1)
      goto LABEL_11;
  }
  v43 = 0;
LABEL_110:
  *(_QWORD *)(*((_QWORD *)v16 + 2) - 8) = v43;
  if (v25)
    operator delete(v25);
  if (v23)
    operator delete(v23);
}

void sub_20F76C8E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F76C8F4(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_20F76C940(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  uint64_t v21;
  unsigned int v22;
  int *v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t v36;
  double *v37;
  double v38;

  v5 = *((_QWORD *)a1 + 1);
  v6 = (double *)v5;
  v7 = v5 - 8 * a1[4];
  v8 = *((_QWORD *)a2 + 1);
  if (v8 - 8 * a2[4] == v7 || (v9 = *(int **)(a3 + 8), v10 = ***((_QWORD ***)v9 + 1), v10 == v7))
  {
    v18 = *a2;
    v19 = 8 * v18;
    v20 = (float64x2_t *)operator new((8 * v18 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    if ((_DWORD)v18)
    {
      v21 = 0;
      v22 = *(_DWORD *)(a3 + 4);
      v23 = *(int **)(a3 + 8);
      v24 = *v23;
      v25 = v23[4];
      v26 = v23[5];
      v27 = ***((_QWORD ***)v23 + 1);
      do
      {
        v20->f64[v21] = *(double *)(v8 + 8 * v21) * *(double *)(v27 + 8 * (v26 + v25 + v21 % v22 % v24));
        ++v21;
        v19 -= 8;
      }
      while (v19);
    }
    v28 = *a1;
    if ((_DWORD)v28)
    {
      v29 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v29 < 9)
      {
        v30 = (double *)v20;
LABEL_18:
        v37 = (double *)(v5 + 8 * v28);
        do
        {
          v38 = *v30++;
          *v6 = v38 + *v6;
          ++v6;
        }
        while (v6 != v37);
        goto LABEL_20;
      }
      if (v5 < (unint64_t)&v20->f64[v28])
      {
        v30 = (double *)v20;
        if ((unint64_t)v20 < v5 + 8 * v28)
          goto LABEL_18;
      }
      v31 = v29 + 1;
      v32 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      v30 = &v20->f64[v32];
      v6 = (double *)(v5 + v32 * 8);
      v33 = (float64x2_t *)(v5 + 16);
      v34 = v20 + 1;
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = vaddq_f64(*v34, *v33);
        v33[-1] = vaddq_f64(v34[-1], v33[-1]);
        *v33 = v36;
        v33 += 2;
        v34 += 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
LABEL_20:
    JUMPOUT(0x212BC6368);
  }
  v11 = *a1;
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a3 + 4);
    v14 = *v9;
    v15 = v9[5] + v9[4];
    v16 = 8 * v11;
    do
    {
      result = *(double *)(v8 + 8 * v12) * *(double *)(v10 + 8 * (v15 + v12 % v13 % v14))
             + *(double *)(v5 + 8 * v12);
      *(double *)(v5 + 8 * v12++) = result;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_20F76CB54(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  *(_QWORD *)a1 = off_24CA01D68;
  v2 = *(_QWORD *)(a1 + 18440);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(void **)(a1 + 18416);
  if (v3)
  {
    *(_QWORD *)(a1 + 18424) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 18392);
  if (v4)
  {
    *(_QWORD *)(a1 + 18400) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 18368);
  if (v5)
  {
    *(_QWORD *)(a1 + 18376) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 18344);
  if (v6)
  {
    *(_QWORD *)(a1 + 18352) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 18312);
  if (v7)
  {
    *(_QWORD *)(a1 + 18320) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 18288);
  if (v8)
  {
    *(_QWORD *)(a1 + 18296) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 18264);
  if (v9)
  {
    *(_QWORD *)(a1 + 18272) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 18240);
  if (v10)
  {
    *(_QWORD *)(a1 + 18248) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 18208);
  if (v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  v12 = *(_QWORD *)(a1 + 18184);
  if (v12)
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  v13 = *(_QWORD *)(a1 + 18160);
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  v14 = *(void **)(a1 + 18136);
  if (v14)
  {
    *(_QWORD *)(a1 + 18144) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 18112);
  if (v15)
  {
    *(_QWORD *)(a1 + 18120) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 18080);
  if (v16)
  {
    *(_QWORD *)(a1 + 18088) = v16;
    operator delete(v16);
  }
  if (*(_DWORD *)(a1 + 17968) != 2)
    sub_20E8BF000(a1 + 17976);
  v17 = *(void **)(a1 + 17936);
  if (v17)
  {
    *(_QWORD *)(a1 + 17944) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 17840);
  if (v18)
  {
    *(_QWORD *)(a1 + 17848) = v18;
    operator delete(v18);
  }
  sub_20F4EE048(a1 + 17640);
  sub_20F74D8D0((_QWORD *)(a1 + 9960));
  v19 = *(_QWORD *)(a1 + 9872);
  if (v19)
    MEMORY[0x212BC6368](v19, 0x1000C8000313F17);
  return sub_20F730A64(a1);
}

uint64_t sub_20F76CD14(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 680);
  v5 = *(__int128 **)(a1 + 688);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 688);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F398160(a1 + 704);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F397EF8((char **)(a1 + 680), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 1544);
    v16 = *(_QWORD *)(a1 + 1552);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 1544) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 1536);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 1536) = v24;
        *(_QWORD *)(a1 + 1544) = v17;
        *(_QWORD *)(a1 + 1552) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 978) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  return 1;
}

void sub_20F76CFA4(unsigned int a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, __n128 a9, double a10, uint64_t a11)
{
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_count *v76;
  std::__shared_weak_count *v77;
  unsigned int v78;
  uint64_t shared_owners;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_count *v83;
  std::__shared_weak_count *v84;
  unsigned int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_count *v90;
  std::__shared_weak_count *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  std::__shared_count *v97;
  std::__shared_weak_count *v98;
  unsigned int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  char *v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unsigned int v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  _QWORD *v149;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  char *v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  char *v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  std::string *v186;
  std::string::size_type v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  char *v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  char *v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  std::string *v202;
  std::string::size_type v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  const char *v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  std::string *v216;
  std::string::size_type v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int *v222;
  char *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  const char *v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int *v253;
  char *v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  char *v259;
  unsigned int v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  const char *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  _QWORD *v277;
  std::string *v278;
  std::string::size_type v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int *v284;
  char *v285;
  unsigned int v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  std::string *v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  const char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  std::string *v308;
  std::string::size_type v309;
  _QWORD *v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int *v314;
  char *v315;
  unsigned int v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int *v319;
  char *v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  std::string *v324;
  std::string::size_type v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  const char *v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  _QWORD *v337;
  std::string *v338;
  std::string::size_type v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  unsigned int *v344;
  char *v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int *v349;
  char *v350;
  unsigned int v351;
  uint64_t v352;
  _QWORD *v353;
  std::string *v354;
  std::string::size_type v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  const char *v360;
  uint64_t v361;
  _QWORD *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  _QWORD *v367;
  std::string *v368;
  std::string::size_type v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  unsigned int *v374;
  char *v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  uint64_t v382;
  _QWORD *v383;
  std::string *v384;
  std::string::size_type v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  const char *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  _QWORD *v397;
  std::string *v398;
  std::string::size_type v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int *v404;
  char *v405;
  unsigned int v406;
  unint64_t v407;
  unint64_t v408;
  unsigned int *v409;
  char *v410;
  unsigned int v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  const char *v420;
  uint64_t v421;
  _QWORD *v422;
  int v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  _QWORD *v428;
  std::string *v429;
  std::string::size_type v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  char *v436;
  unsigned int v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int *v440;
  char *v441;
  unsigned int v442;
  uint64_t v443;
  _QWORD *v444;
  std::string *v445;
  std::string::size_type v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  const char *v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  _QWORD *v458;
  std::string *v459;
  std::string::size_type v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int *v465;
  char *v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unsigned int *v470;
  char *v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  _QWORD *v475;
  std::string *v476;
  std::string::size_type v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  const char *v482;
  uint64_t v483;
  _QWORD *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  _QWORD *v488;
  std::string *v489;
  std::string::size_type v490;
  _QWORD *v491;
  _QWORD *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  _QWORD *v498;
  std::string *v499;
  std::string::size_type v500;
  _QWORD *v501;
  _QWORD *v502;
  BOOL v503;
  char v504;
  std::string::size_type v505;
  std::string *v506;
  _QWORD *v507;
  std::string *v508;
  std::string::size_type v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  const void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  std::string *v517;
  __int128 v518;
  std::string *v519;
  __int128 v520;
  void **v521;
  uint64_t v522;
  _BOOL4 v523;
  unint64_t v524;
  __int128 v525;
  unint64_t v526;
  __int128 v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  unint64_t *p_shared_owners;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  char *v535;
  unint64_t *v536;
  __int128 v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  unint64_t v546;
  __int128 v547;
  unint64_t v548;
  std::string::size_type v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t *v560;
  uint64_t v561;
  std::string::size_type v562;
  char *v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  unint64_t v569;
  unint64_t *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  unint64_t v574;
  __int128 v575;
  unint64_t v576;
  std::string::size_type v577;
  char *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  int64x2_t v588;
  unint64_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  char *v595;
  int64_t v596;
  unint64_t v597;
  int v598;
  std::__shared_weak_count *v599;
  std::__shared_weak_count *v600;
  int v601;
  std::__shared_weak_count *v602;
  std::__shared_weak_count *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  std::string v606;
  void *v607[2];
  int64_t v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  std::string v613;
  std::string v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  unint64_t v623;
  char v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  char v627;
  std::string __p;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  int64x2_t v634;
  __int128 v635;
  std::string v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  unint64_t v642;
  __int128 v643;
  __int128 v644;
  unint64_t v645;
  char v646;
  __int128 v647;
  char v648;

  v14 = a2;
  v16 = a11;
  v17 = a8;
  v609 = 0;
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v18 = *(unint64_t **)(a11 + 992);
  v19 = *(unint64_t **)(a11 + 1000);
  if (v18 == v19)
  {
    v20 = *(unint64_t **)(a11 + 992);
  }
  else
  {
    v20 = *(unint64_t **)(a11 + 1000);
    if (*(v19 - 27) >= a8)
    {
      v21 = 0x84BDA12F684BDA13 * (v19 - v18);
      v22 = *(unint64_t **)(a11 + 992);
      do
      {
        v23 = v21 >> 1;
        v24 = &v22[27 * (v21 >> 1)];
        v26 = *v24;
        v25 = v24 + 27;
        v21 += ~(v21 >> 1);
        if (v26 < a8)
          v22 = v25;
        else
          v21 = v23;
      }
      while (v21);
      v20 = *(unint64_t **)(a11 + 1000);
      if (v22 != v19)
      {
        v20 = v22;
        if (*v22 == a8)
        {
LABEL_159:
          v124 = 1;
          v125 = v610;
          if (!v610)
            goto LABEL_165;
          goto LABEL_162;
        }
      }
    }
  }
  v613.__r_.__value_.__r.__words[0] = a8;
  *(__n128 *)&v613.__r_.__value_.__r.__words[1] = a9;
  v614.__r_.__value_.__r.__words[0] = a7;
  v614.__r_.__value_.__l.__size_ = a6;
  *(double *)&v614.__r_.__value_.__r.__words[2] = a10;
  v615 = 0u;
  v616 = 0u;
  v617 = 0u;
  v618 = 0u;
  v619 = 0u;
  v625 = 0;
  v626 = 0;
  v620 = 0;
  v623 = 0xBFF0000000000000;
  v624 = 0;
  v627 = 0;
  v28 = *(char **)(a11 + 416);
  v27 = *(char **)(a11 + 424);
  v29 = v27 - v28;
  if (v27 == v28)
    goto LABEL_153;
  a2 = &v615;
  v30 = v29 >> 4;
  v31 = *(char **)(a11 + 416);
  v32 = v29 >> 4;
  do
  {
    v33 = v32 >> 1;
    v34 = (unsigned int *)&v31[16 * (v32 >> 1)];
    v36 = *v34;
    v35 = (char *)(v34 + 4);
    v32 += ~(v32 >> 1);
    if (v36 < v14)
      v31 = v35;
    else
      v32 = v33;
  }
  while (v32);
  if (v31 == v27 || *(_DWORD *)v31 != v14)
  {
LABEL_153:
    v120 = 1;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v37 = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v615 = v37;
  ++*(_DWORD *)(*((_QWORD *)v31 + 1) + 8);
  do
  {
    v38 = v30 >> 1;
    v39 = (unsigned int *)&v28[16 * (v30 >> 1)];
    v41 = *v39;
    v40 = (char *)(v39 + 4);
    v30 += ~(v30 >> 1);
    if (v41 < a4)
      v28 = v40;
    else
      v30 = v38;
  }
  while (v30);
  if (v28 == v27 || *(_DWORD *)v28 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    v42 = 0;
LABEL_133:
    if (v37)
      --*(_DWORD *)(v37 + 8);
    if (v42)
      --*(_DWORD *)(v42 + 8);
    if (v51)
      --*(_DWORD *)(v51 + 8);
    if (v57)
      --*(_DWORD *)(v57 + 8);
    if (v66)
      --*(_DWORD *)(v66 + 8);
    if (v72)
      --*(_DWORD *)(v72 + 8);
    if (shared_owners)
      --*(_DWORD *)(shared_owners + 8);
    if (v86)
      --*(_DWORD *)(v86 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    goto LABEL_153;
  }
  v42 = *((_QWORD *)v28 + 1);
  *((_QWORD *)&v615 + 1) = v42;
  ++*(_DWORD *)(*((_QWORD *)v28 + 1) + 8);
  v44 = *(char **)(a11 + 128);
  v43 = *(char **)(a11 + 136);
  v45 = v44;
  if (v43 != v44)
  {
    v46 = (v43 - v44) >> 4;
    v45 = *(char **)(a11 + 128);
    do
    {
      v47 = v46 >> 1;
      v48 = (unsigned int *)&v45[16 * (v46 >> 1)];
      v50 = *v48;
      v49 = (char *)(v48 + 4);
      v46 += ~(v46 >> 1);
      if (v50 < a1)
        v45 = v49;
      else
        v46 = v47;
    }
    while (v46);
  }
  if (v45 == v43 || *(_DWORD *)v45 != a1)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    goto LABEL_133;
  }
  v51 = *((_QWORD *)v45 + 1);
  *(_QWORD *)&v616 = v51;
  ++*(_DWORD *)(*((_QWORD *)v45 + 1) + 8);
  if (v43 != v44)
  {
    v52 = (v43 - v44) >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unsigned int *)&v44[16 * (v52 >> 1)];
      v56 = *v54;
      v55 = (char *)(v54 + 4);
      v52 += ~(v52 >> 1);
      if (v56 < a3)
        v44 = v55;
      else
        v52 = v53;
    }
    while (v52);
  }
  if (v44 == v43 || *(_DWORD *)v44 != a3)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    goto LABEL_133;
  }
  v57 = *((_QWORD *)v44 + 1);
  *((_QWORD *)&v616 + 1) = v57;
  ++*(_DWORD *)(*((_QWORD *)v44 + 1) + 8);
  v58 = *(char **)(a11 + 512);
  v59 = *(char **)(a11 + 520);
  v60 = v58;
  if (v59 != v58)
  {
    v61 = (v59 - v58) >> 4;
    v60 = *(char **)(a11 + 512);
    do
    {
      v62 = v61 >> 1;
      v63 = (unsigned int *)&v60[16 * (v61 >> 1)];
      v65 = *v63;
      v64 = (char *)(v63 + 4);
      v61 += ~(v61 >> 1);
      if (v65 < v14)
        v60 = v64;
      else
        v61 = v62;
    }
    while (v61);
  }
  if (v60 == v59 || *(_DWORD *)v60 != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    goto LABEL_133;
  }
  v66 = *((_QWORD *)v60 + 1);
  *(_QWORD *)&v617 = v66;
  ++*(_DWORD *)(*((_QWORD *)v60 + 1) + 8);
  if (v59 != v58)
  {
    v67 = (v59 - v58) >> 4;
    do
    {
      v68 = v67 >> 1;
      v69 = (unsigned int *)&v58[16 * (v67 >> 1)];
      v71 = *v69;
      v70 = (char *)(v69 + 4);
      v67 += ~(v67 >> 1);
      if (v71 < a4)
        v58 = v70;
      else
        v67 = v68;
    }
    while (v67);
  }
  if (v58 == v59 || *(_DWORD *)v58 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    goto LABEL_133;
  }
  v72 = *((_QWORD *)v58 + 1);
  *((_QWORD *)&v617 + 1) = v72;
  ++*(_DWORD *)(*((_QWORD *)v58 + 1) + 8);
  v73 = *(std::__shared_weak_count **)(a11 + 608);
  v599 = *(std::__shared_weak_count **)(a11 + 616);
  v603 = v73;
  if (v599 != v73)
  {
    v74 = ((char *)v599 - (char *)v73) >> 4;
    do
    {
      v75 = v74 >> 1;
      v76 = (std::__shared_weak_count *)((char *)v73 + 16 * (v74 >> 1));
      v78 = v76->__vftable;
      v77 = (std::__shared_weak_count *)&v76[1];
      v74 += ~(v74 >> 1);
      if (v78 < v14)
        v73 = v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v599 || LODWORD(v73->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    goto LABEL_133;
  }
  shared_owners = v73->__shared_owners_;
  *(_QWORD *)&v618 = shared_owners;
  ++*(_DWORD *)(v73->__shared_owners_ + 8);
  v80 = v603;
  if (v599 != v603)
  {
    v81 = ((char *)v599 - (char *)v603) >> 4;
    do
    {
      v82 = v81 >> 1;
      v83 = (std::__shared_weak_count *)((char *)v80 + 16 * (v81 >> 1));
      v85 = v83->__vftable;
      v84 = (std::__shared_weak_count *)&v83[1];
      v81 += ~(v81 >> 1);
      if (v85 < a4)
        v80 = v84;
      else
        v81 = v82;
    }
    while (v81);
  }
  if (v80 == v599 || LODWORD(v80->__vftable) != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    goto LABEL_133;
  }
  v597 = v17;
  v86 = v80->__shared_owners_;
  *((_QWORD *)&v618 + 1) = v86;
  ++*(_DWORD *)(v80->__shared_owners_ + 8);
  v87 = *(std::__shared_weak_count **)(a11 + 704);
  v600 = *(std::__shared_weak_count **)(a11 + 712);
  v604 = v87;
  if (v600 != v87)
  {
    v88 = ((char *)v600 - (char *)v87) >> 4;
    do
    {
      v89 = v88 >> 1;
      v90 = (std::__shared_weak_count *)((char *)v87 + 16 * (v88 >> 1));
      v92 = v90->__vftable;
      v91 = (std::__shared_weak_count *)&v90[1];
      v88 += ~(v88 >> 1);
      if (v92 < v14)
        v87 = v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v600 || LODWORD(v87->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
LABEL_132:
    v17 = v597;
    v16 = a11;
    goto LABEL_133;
  }
  v93 = v87->__shared_owners_;
  *(_QWORD *)&v619 = v93;
  ++*(_DWORD *)(v87->__shared_owners_ + 8);
  if (v600 == v604)
  {
    v95 = v604;
  }
  else
  {
    v94 = ((char *)v600 - (char *)v604) >> 4;
    v95 = v604;
    do
    {
      v96 = v94 >> 1;
      v97 = (std::__shared_weak_count *)((char *)v95 + 16 * (v94 >> 1));
      v99 = v97->__vftable;
      v98 = (std::__shared_weak_count *)&v97[1];
      v94 += ~(v94 >> 1);
      if (v99 < a4)
        v95 = v98;
      else
        v94 = v96;
    }
    while (v94);
  }
  if (v95 == v600 || (v101 = v95, LODWORD(v95->__vftable) != a4))
  {
    v100 = 0;
    goto LABEL_132;
  }
  v100 = v95->__shared_owners_;
  *((_QWORD *)&v619 + 1) = v101->__shared_owners_;
  ++*(_DWORD *)(v101->__shared_owners_ + 8);
  v102 = *(char **)(a11 + 800);
  v595 = *(char **)(a11 + 808);
  if (v595 != v102)
  {
    v103 = (v595 - v102) >> 4;
    do
    {
      v104 = (unsigned int *)&v102[16 * (v103 >> 1)];
      v106 = *v104;
      v105 = (char *)(v104 + 4);
      v107 = v106 >= a5;
      if (v106 >= a5)
        v103 >>= 1;
      else
        v103 += ~(v103 >> 1);
      if (!v107)
        v102 = v105;
    }
    while (v103);
  }
  if (v102 == v595 || *(_DWORD *)v102 != a5)
    goto LABEL_132;
  v108 = *((_QWORD *)v102 + 1);
  v620 = v108;
  ++*(_DWORD *)(*((_QWORD *)v102 + 1) + 8);
  if (!*(_BYTE *)(v37 + 20)
    && !*(_BYTE *)(v42 + 20)
    && !*(_BYTE *)(v51 + 20)
    && !*(_BYTE *)(v57 + 20)
    && !*(_BYTE *)(v66 + 20)
    && !*(_BYTE *)(v72 + 20)
    && !*(_BYTE *)(shared_owners + 20)
    && !*(_BYTE *)(v86 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v100 + 20)
    && !*(_BYTE *)(v108 + 20))
  {
    --*(_DWORD *)(v37 + 8);
    --*(_DWORD *)(v42 + 8);
    v615 = 0u;
    --*(_DWORD *)(v51 + 8);
    --*(_DWORD *)(v57 + 8);
    v616 = 0u;
    --*(_DWORD *)(v66 + 8);
    --*(_DWORD *)(v72 + 8);
    v617 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    --*(_DWORD *)(v86 + 8);
    v618 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v100 + 8);
    v619 = 0u;
    --*(_DWORD *)(v108 + 8);
    v120 = 1;
    v17 = v597;
    v16 = a11;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v634.i64[0] = v597;
  v634.i64[1] = v597;
  v635 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
  v636 = v614;
  v639 = v617;
  v640 = v618;
  v641 = v619;
  v642 = v620;
  v637 = v615;
  v638 = v616;
  v643 = v621;
  v644 = v622;
  v645 = v623;
  v646 = v624;
  v647 = 0uLL;
  v625 = 0;
  v626 = 0;
  v648 = 0;
  if (v19 == v20 || *v20 != v597)
  {
    v596 = 0x84BDA12F684BDA13 * (v20 - v18);
    v109 = *(_QWORD *)(a11 + 1008);
    if ((unint64_t)v19 < v109)
    {
      if (v20 == v19)
      {
        *v19 = v597;
        v542 = &v18[v20 - v18];
        v542[1] = v597;
        *((_OWORD *)v542 + 1) = v635;
        v543 = *(_OWORD *)&v636.__r_.__value_.__l.__data_;
        v542[6] = v636.__r_.__value_.__r.__words[2];
        *((_OWORD *)v542 + 2) = v543;
        v545 = v640;
        v544 = v641;
        v546 = v642;
        *(_OWORD *)(v542 + 11) = v639;
        v542[17] = v546;
        *(_OWORD *)(v542 + 15) = v544;
        *(_OWORD *)(v542 + 13) = v545;
        v547 = v637;
        *(_OWORD *)(v542 + 9) = v638;
        *(_OWORD *)(v542 + 7) = v547;
        *((_OWORD *)v542 + 9) = v643;
        *((_OWORD *)v542 + 10) = v644;
        v548 = v645;
        *((_BYTE *)v542 + 184) = v646;
        v542[22] = v548;
        v542[24] = 0;
        v542[25] = 0;
        v647 = 0uLL;
        *((_BYTE *)v542 + 208) = 0;
        *(_QWORD *)(a11 + 1000) = v19 + 27;
      }
      else
      {
        *(_OWORD *)v607 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
        __p = v614;
        v593 = v638;
        v594 = v637;
        v591 = v640;
        v592 = v639;
        v590 = v641;
        v589 = v642;
        *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v621;
        v633 = v622;
        v632 = v624;
        v631 = v623;
        v110 = v19;
        v647 = 0uLL;
        v605 = v19 - 27;
        if ((unint64_t)v19 >= 0xD8)
        {
          v111 = v19 - 27;
          v110 = v19;
          do
          {
            *v110 = *v111;
            v110[1] = v111[1];
            *((_OWORD *)v110 + 1) = *((_OWORD *)v111 + 1);
            v112 = *((_OWORD *)v111 + 2);
            v110[6] = v111[6];
            *((_OWORD *)v110 + 2) = v112;
            v113 = *(_OWORD *)(v111 + 13);
            v114 = *(_OWORD *)(v111 + 15);
            v115 = v111[17];
            *(_OWORD *)(v110 + 11) = *(_OWORD *)(v111 + 11);
            v110[17] = v115;
            *(_OWORD *)(v110 + 15) = v114;
            *(_OWORD *)(v110 + 13) = v113;
            v116 = *(_OWORD *)(v111 + 7);
            *(_OWORD *)(v110 + 9) = *(_OWORD *)(v111 + 9);
            *(_OWORD *)(v110 + 7) = v116;
            *((_OWORD *)v110 + 9) = *((_OWORD *)v111 + 9);
            *((_OWORD *)v110 + 10) = *((_OWORD *)v111 + 10);
            v117 = v111[22];
            *((_BYTE *)v110 + 184) = *((_BYTE *)v111 + 184);
            v110[22] = v117;
            *((_OWORD *)v110 + 12) = *((_OWORD *)v111 + 12);
            v111[24] = 0;
            v111[25] = 0;
            *((_BYTE *)v110 + 208) = *((_BYTE *)v111 + 208);
            v110 += 27;
            v111 += 27;
          }
          while (v111 < v19);
        }
        *(_QWORD *)(a11 + 1000) = v110;
        if (v19 != v20 + 27)
        {
          v118 = v19 - 27;
          v119 = v19;
          do
          {
            v524 = *(v118 - 27);
            v118 -= 27;
            *(v119 - 27) = v524;
            v119 -= 27;
            v119[1] = v118[1];
            *((_OWORD *)v119 + 1) = *((_OWORD *)v118 + 1);
            v525 = *((_OWORD *)v118 + 2);
            v119[6] = v118[6];
            *((_OWORD *)v119 + 2) = v525;
            v119[7] = v118[7];
            v119[8] = v118[8];
            v119[9] = v118[9];
            v119[10] = v118[10];
            v119[11] = v118[11];
            v119[12] = v118[12];
            v119[13] = v118[13];
            v119[14] = v118[14];
            v119[15] = v118[15];
            v119[16] = v118[16];
            v119[17] = v118[17];
            *((_OWORD *)v119 + 9) = *((_OWORD *)v118 + 9);
            *((_OWORD *)v119 + 10) = *((_OWORD *)v118 + 10);
            v526 = v118[22];
            *((_BYTE *)v119 + 184) = *((_BYTE *)v118 + 184);
            v119[22] = v526;
            v527 = *((_OWORD *)v118 + 12);
            v118[24] = 0;
            v118[25] = 0;
            v528 = (std::__shared_weak_count *)v119[25];
            *((_OWORD *)v119 + 12) = v527;
            if (v528)
            {
              v529 = v528;
              p_shared_owners = (unint64_t *)&v528->__shared_owners_;
              do
                v531 = __ldaxr(p_shared_owners);
              while (__stlxr(v531 - 1, p_shared_owners));
              if (!v531)
              {
                v602 = v529;
                ((void (*)(std::__shared_weak_count *, __int128 *))v529->__on_zero_shared)(v529, a2);
                std::__shared_weak_count::__release_weak(v602);
              }
            }
            *((_BYTE *)v19 - 8) = *((_BYTE *)v605 - 8);
            v19 = v119;
            v605 = v118;
          }
          while (v118 != v20);
        }
        *(int64x2_t *)v20 = vdupq_n_s64(v597);
        v536 = &v18[v20 - v18];
        *((_OWORD *)v536 + 1) = *(_OWORD *)v607;
        *(std::string *)(v536 + 4) = __p;
        *(_OWORD *)(v536 + 7) = v594;
        *(_OWORD *)(v536 + 9) = v593;
        *(_OWORD *)(v536 + 11) = v592;
        *(_OWORD *)(v536 + 13) = v591;
        *(_OWORD *)(v536 + 15) = v590;
        v536[17] = v589;
        v537 = v633;
        *((_OWORD *)v536 + 9) = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
        *((_OWORD *)v536 + 10) = v537;
        v538 = v631;
        *((_BYTE *)v536 + 184) = v632;
        v536[22] = v538;
        v539 = (std::__shared_weak_count *)v536[25];
        v536[24] = 0;
        v536[25] = 0;
        if (v539)
        {
          v540 = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(v540);
          while (__stlxr(v541 - 1, v540));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *))v539->__on_zero_shared)(v539, a2);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        LOBYTE(v18[v20 - v18 + 26]) = 0;
      }
LABEL_768:
      v582 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (*((_QWORD *)&v647 + 1))
      {
        v583 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v584 = __ldaxr(v583);
        while (__stlxr(v584 - 1, v583));
        if (!v584)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v582->__on_zero_shared)(v582, a2);
          std::__shared_weak_count::__release_weak(v582);
        }
      }
      goto LABEL_773;
    }
    v532 = 0x84BDA12F684BDA13 * (v19 - v18) + 1;
    if (v532 > 0x12F684BDA12F684)
      sub_20E867F44();
    v533 = 0x84BDA12F684BDA13 * ((uint64_t)(v109 - (_QWORD)v18) >> 3);
    if (2 * v533 > v532)
      v532 = 2 * v533;
    if (v533 >= 0x97B425ED097B42)
      v534 = 0x12F684BDA12F684;
    else
      v534 = v532;
    v630 = a11 + 1008;
    if (v534)
    {
      if (v534 > 0x12F684BDA12F684)
        sub_20E877A38();
      v535 = (char *)operator new(216 * v534);
    }
    else
    {
      v535 = 0;
    }
    v549 = (std::string::size_type)&v535[8 * (v20 - v18)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
    __p.__r_.__value_.__l.__size_ = v549;
    __p.__r_.__value_.__r.__words[2] = v549;
    v629 = &v535[216 * v534];
    v588 = vdupq_n_s64(v597);
    if (v596 == v534)
    {
      if ((char *)v20 - (char *)v18 >= 1)
      {
        v550 = v596 + 2;
        if (v596 >= -1)
          v550 = v596 + 1;
        v551 = v550 >> 1;
        v552 = sub_20F5B6E44((uint64_t)&v535[216 * v596], (uint64_t)&v535[216 * v596], v549 - 216 * (v550 >> 1));
        v549 = __p.__r_.__value_.__l.__size_ - 216 * v551;
        __p.__r_.__value_.__l.__size_ = v549;
        v588 = v634;
        goto LABEL_750;
      }
      if (v18 == v20)
        v553 = 1;
      else
        v553 = 0x97B425ED097B426 * (v20 - v18);
      if (v553 > 0x12F684BDA12F684)
        sub_20E877A38();
      v554 = (char *)operator new(216 * v553);
      v549 = (std::string::size_type)&v554[216 * (v553 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v554;
      __p.__r_.__value_.__l.__size_ = v549;
      v629 = &v554[216 * v553];
      if (v535)
        operator delete(v535);
    }
    v552 = v549;
LABEL_750:
    v555 = v635;
    *(int64x2_t *)v552 = v588;
    *(_OWORD *)(v552 + 16) = v555;
    *(std::string *)(v552 + 32) = v636;
    v556 = v640;
    *(_OWORD *)(v552 + 88) = v639;
    *(_OWORD *)(v552 + 104) = v556;
    *(_OWORD *)(v552 + 120) = v641;
    v557 = v638;
    *(_OWORD *)(v552 + 56) = v637;
    *(_QWORD *)(v552 + 136) = v642;
    *(_OWORD *)(v552 + 72) = v557;
    *(_OWORD *)(v552 + 144) = v643;
    *(_OWORD *)(v552 + 160) = v644;
    v558 = v645;
    *(_BYTE *)(v552 + 184) = v646;
    *(_QWORD *)(v552 + 176) = v558;
    *(_OWORD *)(v552 + 192) = v647;
    v647 = 0uLL;
    *(_BYTE *)(v552 + 208) = v648;
    v559 = v552 + 216;
    __p.__r_.__value_.__r.__words[2] = v552 + 216;
    v560 = *(unint64_t **)(a11 + 992);
    if (v560 != v20)
    {
      v561 = 0;
      do
      {
        v562 = v549 + v561 * 8;
        v563 = (char *)&v20[v561];
        *(_QWORD *)(v562 - 216) = v20[v561 - 27];
        *(_QWORD *)(v562 - 208) = v20[v561 - 26];
        *(_OWORD *)(v562 - 200) = *(_OWORD *)&v20[v561 - 25];
        v564 = *(_OWORD *)&v20[v561 - 23];
        *(_QWORD *)(v562 - 168) = v20[v561 - 21];
        *(_OWORD *)(v562 - 184) = v564;
        v566 = *(_OWORD *)&v20[v561 - 14];
        v565 = *(_OWORD *)&v20[v561 - 12];
        v567 = *(_OWORD *)&v20[v561 - 16];
        *(_QWORD *)(v562 - 80) = v20[v561 - 10];
        *(_OWORD *)(v562 - 112) = v566;
        *(_OWORD *)(v562 - 96) = v565;
        *(_OWORD *)(v562 - 128) = v567;
        v568 = *(_OWORD *)&v20[v561 - 18];
        *(_OWORD *)(v562 - 160) = *(_OWORD *)&v20[v561 - 20];
        *(_OWORD *)(v562 - 144) = v568;
        *(_OWORD *)(v562 - 72) = *(_OWORD *)&v20[v561 - 9];
        *(_OWORD *)(v562 - 56) = *(_OWORD *)&v20[v561 - 7];
        v569 = v20[v561 - 5];
        *(_BYTE *)(v562 - 32) = v20[v561 - 4];
        *(_QWORD *)(v562 - 40) = v569;
        *(_OWORD *)(v562 - 24) = *(_OWORD *)&v20[v561 - 3];
        *((_QWORD *)v563 - 3) = 0;
        *((_QWORD *)v563 - 2) = 0;
        *(_BYTE *)(v562 - 8) = v20[v561 - 1];
        v561 -= 27;
      }
      while (&v20[v561] != v560);
      v549 += v561 * 8;
    }
    v570 = *(unint64_t **)(a11 + 1000);
    if (v570 != v20)
    {
      do
      {
        *(_QWORD *)v559 = *v20;
        *(_QWORD *)(v559 + 8) = v20[1];
        *(_OWORD *)(v559 + 16) = *((_OWORD *)v20 + 1);
        v571 = *((_OWORD *)v20 + 2);
        *(_QWORD *)(v559 + 48) = v20[6];
        *(_OWORD *)(v559 + 32) = v571;
        v572 = *(_OWORD *)(v20 + 13);
        v573 = *(_OWORD *)(v20 + 15);
        v574 = v20[17];
        *(_OWORD *)(v559 + 88) = *(_OWORD *)(v20 + 11);
        *(_QWORD *)(v559 + 136) = v574;
        *(_OWORD *)(v559 + 120) = v573;
        *(_OWORD *)(v559 + 104) = v572;
        v575 = *(_OWORD *)(v20 + 7);
        *(_OWORD *)(v559 + 72) = *(_OWORD *)(v20 + 9);
        *(_OWORD *)(v559 + 56) = v575;
        *(_OWORD *)(v559 + 144) = *((_OWORD *)v20 + 9);
        *(_OWORD *)(v559 + 160) = *((_OWORD *)v20 + 10);
        v576 = v20[22];
        *(_BYTE *)(v559 + 184) = *((_BYTE *)v20 + 184);
        *(_QWORD *)(v559 + 176) = v576;
        *(_OWORD *)(v559 + 192) = *((_OWORD *)v20 + 12);
        v20[24] = 0;
        v20[25] = 0;
        *(_BYTE *)(v559 + 208) = *((_BYTE *)v20 + 208);
        v559 += 216;
        v20 += 27;
      }
      while (v20 != v570);
      v20 = *(unint64_t **)(a11 + 1000);
    }
    v577 = *(_QWORD *)(a11 + 992);
    *(_QWORD *)(a11 + 992) = v549;
    *(_QWORD *)(a11 + 1000) = v559;
    v578 = *(char **)(a11 + 1008);
    *(_QWORD *)(a11 + 1008) = v629;
    v629 = v578;
    __p.__r_.__value_.__r.__words[0] = v577;
    __p.__r_.__value_.__l.__size_ = v577;
    if (v20 != (unint64_t *)v577)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 - 27);
        v579 = (std::__shared_weak_count *)*(v20 - 2);
        if (v579)
        {
          v580 = (unint64_t *)&v579->__shared_owners_;
          do
            v581 = __ldaxr(v580);
          while (__stlxr(v581 - 1, v580));
          if (!v581)
          {
            ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
            std::__shared_weak_count::__release_weak(v579);
          }
        }
        v20 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v577);
      v20 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v20)
      operator delete(v20);
    goto LABEL_768;
  }
LABEL_773:
  *(_BYTE *)(a11 + 1098) = 0;
  *(_BYTE *)(a11 + 1096) = 0;
  *(int64x2_t *)(a11 + 1080) = vaddq_s64(*(int64x2_t *)(a11 + 1080), (int64x2_t)xmmword_210378060);
  v585 = v626;
  if (v626)
  {
    v586 = (unint64_t *)&v626->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v585->__on_zero_shared)(v585, a2);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v120 = 0;
  v17 = v597;
  v16 = a11;
  v121 = v612;
  if (v612)
  {
LABEL_154:
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_158:
  if ((v120 & 1) != 0)
    goto LABEL_159;
  v124 = 0;
  *(_BYTE *)(v16 + 1876) = 0;
  *(_DWORD *)(v16 + 1872) = 0;
  v125 = v610;
  if (!v610)
    goto LABEL_165;
LABEL_162:
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if (!v124)
      return;
    goto LABEL_166;
  }
LABEL_165:
  if (!v124)
    return;
LABEL_166:
  v128 = *(char **)(v16 + 800);
  v129 = *(char **)(v16 + 808);
  if (v129 != v128)
  {
    v130 = (v129 - v128) >> 4;
    do
    {
      v131 = v130 >> 1;
      v132 = &v128[16 * (v130 >> 1)];
      v134 = *(_DWORD *)v132;
      v133 = v132 + 16;
      v130 += ~(v130 >> 1);
      if (v134 < a5)
        v128 = v133;
      else
        v130 = v131;
    }
    while (v130);
  }
  if ((v128 == v129 || *(_DWORD *)v128 != a5)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_712;
  }
  v135 = *(_QWORD **)(v16 + 992);
  v136 = *(_QWORD **)(v16 + 1000);
  if (v136 != v135)
  {
    v137 = 0x84BDA12F684BDA13 * (v136 - v135);
    do
    {
      v138 = v137 >> 1;
      v139 = &v135[27 * (v137 >> 1)];
      v141 = *v139;
      v140 = v139 + 27;
      v137 += ~(v137 >> 1);
      if (v141 < v17)
        v135 = v140;
      else
        v137 = v138;
    }
    while (v137);
    if (v136 != v135
      && *v135 == v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_712;
    }
  }
  sub_20E863438((uint64_t)&v634);
  v142 = *(char **)(v16 + 800);
  v143 = *(char **)(v16 + 808);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a5)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 == v143 || *(_DWORD *)v142 != a5)
  {
    v154 = 1;
    v155 = *(char **)(v16 + 416);
    v156 = *(char **)(v16 + 424);
    v157 = v155;
    v158 = v156 - v155;
    if (v156 == v155)
      goto LABEL_208;
    goto LABEL_203;
  }
  v149 = sub_20E86A980(&v635, (uint64_t)"error: landmark variable ", 25);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v152 = sub_20E86A980(v149, (uint64_t)p_p, size);
  sub_20E86A980(v152, (uint64_t)" with ID ", 9);
  v153 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v153, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v154 = 0;
  v155 = *(char **)(v16 + 416);
  v156 = *(char **)(v16 + 424);
  v157 = v155;
  v158 = v156 - v155;
  if (v156 != v155)
  {
LABEL_203:
    v159 = v158 >> 4;
    v157 = v155;
    do
    {
      v160 = v159 >> 1;
      v161 = (unsigned int *)&v157[16 * (v159 >> 1)];
      v163 = *v161;
      v162 = (char *)(v161 + 4);
      v159 += ~(v159 >> 1);
      if (v163 < v14)
        v157 = v162;
      else
        v159 = v160;
    }
    while (v159);
  }
LABEL_208:
  if (v157 != v156 && *(_DWORD *)v157 == v14)
  {
    if (v156 != v155)
    {
      v164 = (v156 - v155) >> 4;
      do
      {
        v165 = v164 >> 1;
        v166 = (unsigned int *)&v155[16 * (v164 >> 1)];
        v168 = *v166;
        v167 = (char *)(v166 + 4);
        v164 += ~(v164 >> 1);
        if (v168 < v14)
          v155 = v167;
        else
          v164 = v165;
      }
      while (v164);
    }
    v598 = v154;
    if (v155 == v156 || *(_DWORD *)v155 != v14)
      v155 = v156;
    v169 = *((_QWORD *)v155 + 1);
    v170 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &__p;
    else
      v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v172 = __p.__r_.__value_.__l.__size_;
    v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
    sub_20E86A980(v173, (uint64_t)" with ID ", 9);
    v174 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v174, (uint64_t)" found (", 8);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = sub_20E86A980(v175, (uint64_t)", ", 2);
    if (*(_BYTE *)(v169 + 20))
      v177 = "free";
    else
      v177 = "fixed";
    if (*(_BYTE *)(v169 + 20))
      v178 = 4;
    else
      v178 = 5;
    v179 = sub_20E86A980(v176, (uint64_t)v177, v178);
    sub_20E86A980(v179, (uint64_t)")\n", 2);
    v180 = v598;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 = *(unsigned __int8 *)(v169 + 20);
    v181 = *(char **)(v16 + 416);
    v182 = *(char **)(v16 + 424);
    v183 = v181;
    v184 = v182 - v181;
    if (v182 == v181)
      goto LABEL_249;
LABEL_244:
    v190 = v184 >> 4;
    v183 = v181;
    do
    {
      v191 = v190 >> 1;
      v192 = (unsigned int *)&v183[16 * (v190 >> 1)];
      v194 = *v192;
      v193 = (char *)(v192 + 4);
      v190 += ~(v190 >> 1);
      if (v194 < a4)
        v183 = v193;
      else
        v190 = v191;
    }
    while (v190);
    goto LABEL_249;
  }
  v185 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = &__p;
  else
    v186 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v187 = __p.__r_.__value_.__l.__size_;
  v188 = sub_20E86A980(v185, (uint64_t)v186, v187);
  sub_20E86A980(v188, (uint64_t)" with ID ", 9);
  v189 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v189, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v601 = 0;
  v181 = *(char **)(v16 + 416);
  v182 = *(char **)(v16 + 424);
  v183 = v181;
  v184 = v182 - v181;
  if (v182 != v181)
    goto LABEL_244;
LABEL_249:
  if (v183 != v182 && *(_DWORD *)v183 == a4)
  {
    if (v182 != v181)
    {
      v195 = (v182 - v181) >> 4;
      do
      {
        v196 = v195 >> 1;
        v197 = (unsigned int *)&v181[16 * (v195 >> 1)];
        v199 = *v197;
        v198 = (char *)(v197 + 4);
        v195 += ~(v195 >> 1);
        if (v199 < a4)
          v181 = v198;
        else
          v195 = v196;
      }
      while (v195);
    }
    if (v181 == v182 || *(_DWORD *)v181 != a4)
      v181 = v182;
    v200 = *((_QWORD *)v181 + 1);
    v201 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = &__p;
    else
      v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v203 = __p.__r_.__value_.__l.__size_;
    v204 = sub_20E86A980(v201, (uint64_t)v202, v203);
    sub_20E86A980(v204, (uint64_t)" with ID ", 9);
    v205 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v205, (uint64_t)" found (", 8);
    v206 = (_QWORD *)std::ostream::operator<<();
    v207 = sub_20E86A980(v206, (uint64_t)", ", 2);
    if (*(_BYTE *)(v200 + 20))
      v208 = "free";
    else
      v208 = "fixed";
    if (*(_BYTE *)(v200 + 20))
      v209 = 4;
    else
      v209 = 5;
    v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
    sub_20E86A980(v210, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v200 + 20);
    v211 = *(char **)(v16 + 128);
    v212 = *(char **)(v16 + 136);
    v213 = v211;
    v214 = v212 - v211;
    if (v212 == v211)
      goto LABEL_290;
LABEL_285:
    v220 = v214 >> 4;
    v213 = v211;
    do
    {
      v221 = v220 >> 1;
      v222 = (unsigned int *)&v213[16 * (v220 >> 1)];
      v224 = *v222;
      v223 = (char *)(v222 + 4);
      v220 += ~(v220 >> 1);
      if (v224 < a1)
        v213 = v223;
      else
        v220 = v221;
    }
    while (v220);
    goto LABEL_290;
  }
  v215 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = &__p;
  else
    v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v217 = __p.__r_.__value_.__l.__size_;
  v218 = sub_20E86A980(v215, (uint64_t)v216, v217);
  sub_20E86A980(v218, (uint64_t)" with ID ", 9);
  v219 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v219, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v211 = *(char **)(v16 + 128);
  v212 = *(char **)(v16 + 136);
  v213 = v211;
  v214 = v212 - v211;
  if (v212 != v211)
    goto LABEL_285;
LABEL_290:
  if (v213 != v212 && *(_DWORD *)v213 == a1)
  {
    if (v212 != v211)
    {
      v225 = (v212 - v211) >> 4;
      do
      {
        v226 = v225 >> 1;
        v227 = (unsigned int *)&v211[16 * (v225 >> 1)];
        v229 = *v227;
        v228 = (char *)(v227 + 4);
        v225 += ~(v225 >> 1);
        if (v229 < a1)
          v211 = v228;
        else
          v225 = v226;
      }
      while (v225);
    }
    if (v211 == v212 || *(_DWORD *)v211 != a1)
      v211 = v212;
    v230 = *((_QWORD *)v211 + 1);
    v231 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &__p;
    else
      v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v233 = __p.__r_.__value_.__l.__size_;
    v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
    sub_20E86A980(v234, (uint64_t)" with ID ", 9);
    v235 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v235, (uint64_t)" found (", 8);
    v236 = (_QWORD *)std::ostream::operator<<();
    v237 = sub_20E86A980(v236, (uint64_t)", ", 2);
    if (*(_BYTE *)(v230 + 20))
      v238 = "free";
    else
      v238 = "fixed";
    if (*(_BYTE *)(v230 + 20))
      v239 = 4;
    else
      v239 = 5;
    v240 = sub_20E86A980(v237, (uint64_t)v238, v239);
    sub_20E86A980(v240, (uint64_t)")\n", 2);
    v241 = v180;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v230 + 20);
    v242 = *(char **)(v16 + 128);
    v243 = *(char **)(v16 + 136);
    v244 = v242;
    v245 = v243 - v242;
    if (v243 == v242)
      goto LABEL_331;
LABEL_326:
    v251 = v245 >> 4;
    v244 = v242;
    do
    {
      v252 = v251 >> 1;
      v253 = (unsigned int *)&v244[16 * (v251 >> 1)];
      v255 = *v253;
      v254 = (char *)(v253 + 4);
      v251 += ~(v251 >> 1);
      if (v255 < a3)
        v244 = v254;
      else
        v251 = v252;
    }
    while (v251);
    goto LABEL_331;
  }
  v246 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v247 = &__p;
  else
    v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v248 = __p.__r_.__value_.__l.__size_;
  v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
  sub_20E86A980(v249, (uint64_t)" with ID ", 9);
  v250 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v250, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v241 = 0;
  v242 = *(char **)(v16 + 128);
  v243 = *(char **)(v16 + 136);
  v244 = v242;
  v245 = v243 - v242;
  if (v243 != v242)
    goto LABEL_326;
LABEL_331:
  if (v244 != v243 && *(_DWORD *)v244 == a3)
  {
    if (v243 != v242)
    {
      v256 = (v243 - v242) >> 4;
      do
      {
        v257 = v256 >> 1;
        v258 = (unsigned int *)&v242[16 * (v256 >> 1)];
        v260 = *v258;
        v259 = (char *)(v258 + 4);
        v256 += ~(v256 >> 1);
        if (v260 < a3)
          v242 = v259;
        else
          v256 = v257;
      }
      while (v256);
    }
    if (v242 == v243 || *(_DWORD *)v242 != a3)
      v242 = v243;
    v261 = *((_QWORD *)v242 + 1);
    v262 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v263 = &__p;
    else
      v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v264 = __p.__r_.__value_.__l.__size_;
    v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
    sub_20E86A980(v265, (uint64_t)" with ID ", 9);
    v266 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v266, (uint64_t)" found (", 8);
    v267 = (_QWORD *)std::ostream::operator<<();
    v268 = sub_20E86A980(v267, (uint64_t)", ", 2);
    if (*(_BYTE *)(v261 + 20))
      v269 = "free";
    else
      v269 = "fixed";
    if (*(_BYTE *)(v261 + 20))
      v270 = 4;
    else
      v270 = 5;
    v271 = sub_20E86A980(v268, (uint64_t)v269, v270);
    sub_20E86A980(v271, (uint64_t)")\n", 2);
    v272 = v241;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v261 + 20);
    v273 = *(char **)(v16 + 512);
    v274 = *(char **)(v16 + 520);
    v275 = v273;
    v276 = v274 - v273;
    if (v274 == v273)
      goto LABEL_372;
LABEL_367:
    v282 = v276 >> 4;
    v275 = v273;
    do
    {
      v283 = v282 >> 1;
      v284 = (unsigned int *)&v275[16 * (v282 >> 1)];
      v286 = *v284;
      v285 = (char *)(v284 + 4);
      v282 += ~(v282 >> 1);
      if (v286 < v14)
        v275 = v285;
      else
        v282 = v283;
    }
    while (v282);
    goto LABEL_372;
  }
  v277 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &__p;
  else
    v278 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v279 = __p.__r_.__value_.__l.__size_;
  v280 = sub_20E86A980(v277, (uint64_t)v278, v279);
  sub_20E86A980(v280, (uint64_t)" with ID ", 9);
  v281 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v281, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v273 = *(char **)(v16 + 512);
  v274 = *(char **)(v16 + 520);
  v275 = v273;
  v276 = v274 - v273;
  if (v274 != v273)
    goto LABEL_367;
LABEL_372:
  if (v275 != v274 && *(_DWORD *)v275 == v14)
  {
    if (v274 != v273)
    {
      v287 = (v274 - v273) >> 4;
      do
      {
        v288 = v287 >> 1;
        v289 = (unsigned int *)&v273[16 * (v287 >> 1)];
        v291 = *v289;
        v290 = (char *)(v289 + 4);
        v287 += ~(v287 >> 1);
        if (v291 < v14)
          v273 = v290;
        else
          v287 = v288;
      }
      while (v287);
    }
    if (v273 == v274 || *(_DWORD *)v273 != v14)
      v273 = v274;
    v292 = *((_QWORD *)v273 + 1);
    v293 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v294 = &__p;
    else
      v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v295 = __p.__r_.__value_.__l.__size_;
    v296 = sub_20E86A980(v293, (uint64_t)v294, v295);
    sub_20E86A980(v296, (uint64_t)" with ID ", 9);
    v297 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v297, (uint64_t)" found (", 8);
    v298 = (_QWORD *)std::ostream::operator<<();
    v299 = sub_20E86A980(v298, (uint64_t)", ", 2);
    if (*(_BYTE *)(v292 + 20))
      v300 = "free";
    else
      v300 = "fixed";
    if (*(_BYTE *)(v292 + 20))
      v301 = 4;
    else
      v301 = 5;
    v302 = sub_20E86A980(v299, (uint64_t)v300, v301);
    sub_20E86A980(v302, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v292 + 20);
    v303 = *(char **)(v16 + 512);
    v304 = *(char **)(v16 + 520);
    v305 = v303;
    v306 = v304 - v303;
    if (v304 == v303)
      goto LABEL_413;
LABEL_408:
    v312 = v306 >> 4;
    v305 = v303;
    do
    {
      v313 = v312 >> 1;
      v314 = (unsigned int *)&v305[16 * (v312 >> 1)];
      v316 = *v314;
      v315 = (char *)(v314 + 4);
      v312 += ~(v312 >> 1);
      if (v316 < a4)
        v305 = v315;
      else
        v312 = v313;
    }
    while (v312);
    goto LABEL_413;
  }
  v307 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v308 = &__p;
  else
    v308 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v309 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v309 = __p.__r_.__value_.__l.__size_;
  v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
  sub_20E86A980(v310, (uint64_t)" with ID ", 9);
  v311 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v311, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v303 = *(char **)(v16 + 512);
  v304 = *(char **)(v16 + 520);
  v305 = v303;
  v306 = v304 - v303;
  if (v304 != v303)
    goto LABEL_408;
LABEL_413:
  if (v305 != v304 && *(_DWORD *)v305 == a4)
  {
    if (v304 != v303)
    {
      v317 = (v304 - v303) >> 4;
      do
      {
        v318 = v317 >> 1;
        v319 = (unsigned int *)&v303[16 * (v317 >> 1)];
        v321 = *v319;
        v320 = (char *)(v319 + 4);
        v317 += ~(v317 >> 1);
        if (v321 < a4)
          v303 = v320;
        else
          v317 = v318;
      }
      while (v317);
    }
    if (v303 == v304 || *(_DWORD *)v303 != a4)
      v303 = v304;
    v322 = *((_QWORD *)v303 + 1);
    v323 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6230A4((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v324 = &__p;
    else
      v324 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v325 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v325 = __p.__r_.__value_.__l.__size_;
    v326 = sub_20E86A980(v323, (uint64_t)v324, v325);
    sub_20E86A980(v326, (uint64_t)" with ID ", 9);
    v327 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v327, (uint64_t)" found (", 8);
    v328 = (_QWORD *)std::ostream::operator<<();
    v329 = sub_20E86A980(v328, (uint64_t)", ", 2);
    if (*(_BYTE *)(v322 + 20))
      v330 = "free";
    else
      v330 = "fixed";
    if (*(_BYTE *)(v322 + 20))
      v331 = 4;
    else
      v331 = 5;
    v332 = sub_20E86A980(v329, (uint64_t)v330, v331);
    sub_20E86A980(v332, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v322 + 20);
    v333 = *(char **)(v16 + 608);
    v334 = *(char **)(v16 + 616);
    v335 = v333;
    v336 = v334 - v333;
    if (v334 == v333)
      goto LABEL_454;
LABEL_449:
    v342 = v336 >> 4;
    v335 = v333;
    do
    {
      v343 = v342 >> 1;
      v344 = (unsigned int *)&v335[16 * (v342 >> 1)];
      v346 = *v344;
      v345 = (char *)(v344 + 4);
      v342 += ~(v342 >> 1);
      if (v346 < v14)
        v335 = v345;
      else
        v342 = v343;
    }
    while (v342);
    goto LABEL_454;
  }
  v337 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6230A4((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = &__p;
  else
    v338 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v339 = __p.__r_.__value_.__l.__size_;
  v340 = sub_20E86A980(v337, (uint64_t)v338, v339);
  sub_20E86A980(v340, (uint64_t)" with ID ", 9);
  v341 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v341, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v333 = *(char **)(v16 + 608);
  v334 = *(char **)(v16 + 616);
  v335 = v333;
  v336 = v334 - v333;
  if (v334 != v333)
    goto LABEL_449;
LABEL_454:
  if (v335 != v334 && *(_DWORD *)v335 == v14)
  {
    if (v334 != v333)
    {
      v347 = (v334 - v333) >> 4;
      do
      {
        v348 = v347 >> 1;
        v349 = (unsigned int *)&v333[16 * (v347 >> 1)];
        v351 = *v349;
        v350 = (char *)(v349 + 4);
        v347 += ~(v347 >> 1);
        if (v351 < v14)
          v333 = v350;
        else
          v347 = v348;
      }
      while (v347);
    }
    if (v333 == v334 || *(_DWORD *)v333 != v14)
      v333 = v334;
    v352 = *((_QWORD *)v333 + 1);
    v353 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v354 = &__p;
    else
      v354 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v355 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v355 = __p.__r_.__value_.__l.__size_;
    v356 = sub_20E86A980(v353, (uint64_t)v354, v355);
    sub_20E86A980(v356, (uint64_t)" with ID ", 9);
    v357 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v357, (uint64_t)" found (", 8);
    v358 = (_QWORD *)std::ostream::operator<<();
    v359 = sub_20E86A980(v358, (uint64_t)", ", 2);
    if (*(_BYTE *)(v352 + 20))
      v360 = "free";
    else
      v360 = "fixed";
    if (*(_BYTE *)(v352 + 20))
      v361 = 4;
    else
      v361 = 5;
    v362 = sub_20E86A980(v359, (uint64_t)v360, v361);
    sub_20E86A980(v362, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v352 + 20);
    v363 = *(char **)(v16 + 608);
    v364 = *(char **)(v16 + 616);
    v365 = v363;
    v366 = v364 - v363;
    if (v364 == v363)
      goto LABEL_495;
LABEL_490:
    v372 = v366 >> 4;
    v365 = v363;
    do
    {
      v373 = v372 >> 1;
      v374 = (unsigned int *)&v365[16 * (v372 >> 1)];
      v376 = *v374;
      v375 = (char *)(v374 + 4);
      v372 += ~(v372 >> 1);
      if (v376 < a4)
        v365 = v375;
      else
        v372 = v373;
    }
    while (v372);
    goto LABEL_495;
  }
  v367 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v368 = &__p;
  else
    v368 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v369 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v369 = __p.__r_.__value_.__l.__size_;
  v370 = sub_20E86A980(v367, (uint64_t)v368, v369);
  sub_20E86A980(v370, (uint64_t)" with ID ", 9);
  v371 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v371, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v363 = *(char **)(v16 + 608);
  v364 = *(char **)(v16 + 616);
  v365 = v363;
  v366 = v364 - v363;
  if (v364 != v363)
    goto LABEL_490;
LABEL_495:
  if (v365 != v364 && *(_DWORD *)v365 == a4)
  {
    if (v364 != v363)
    {
      v377 = (v364 - v363) >> 4;
      do
      {
        v378 = v377 >> 1;
        v379 = (unsigned int *)&v363[16 * (v377 >> 1)];
        v381 = *v379;
        v380 = (char *)(v379 + 4);
        v377 += ~(v377 >> 1);
        if (v381 < a4)
          v363 = v380;
        else
          v377 = v378;
      }
      while (v377);
    }
    if (v363 == v364 || *(_DWORD *)v363 != a4)
      v363 = v364;
    v382 = *((_QWORD *)v363 + 1);
    v383 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6232BC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = &__p;
    else
      v384 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v385 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v385 = __p.__r_.__value_.__l.__size_;
    v386 = sub_20E86A980(v383, (uint64_t)v384, v385);
    sub_20E86A980(v386, (uint64_t)" with ID ", 9);
    v387 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v387, (uint64_t)" found (", 8);
    v388 = (_QWORD *)std::ostream::operator<<();
    v389 = sub_20E86A980(v388, (uint64_t)", ", 2);
    if (*(_BYTE *)(v382 + 20))
      v390 = "free";
    else
      v390 = "fixed";
    if (*(_BYTE *)(v382 + 20))
      v391 = 4;
    else
      v391 = 5;
    v392 = sub_20E86A980(v389, (uint64_t)v390, v391);
    sub_20E86A980(v392, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v382 + 20);
    v393 = *(char **)(v16 + 704);
    v394 = *(char **)(v16 + 712);
    v395 = v393;
    v396 = v394 - v393;
    if (v394 == v393)
      goto LABEL_536;
LABEL_531:
    v402 = v396 >> 4;
    v395 = v393;
    do
    {
      v403 = v402 >> 1;
      v404 = (unsigned int *)&v395[16 * (v402 >> 1)];
      v406 = *v404;
      v405 = (char *)(v404 + 4);
      v402 += ~(v402 >> 1);
      if (v406 < v14)
        v395 = v405;
      else
        v402 = v403;
    }
    while (v402);
    goto LABEL_536;
  }
  v397 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6232BC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v398 = &__p;
  else
    v398 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v399 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v399 = __p.__r_.__value_.__l.__size_;
  v400 = sub_20E86A980(v397, (uint64_t)v398, v399);
  sub_20E86A980(v400, (uint64_t)" with ID ", 9);
  v401 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v401, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v393 = *(char **)(v16 + 704);
  v394 = *(char **)(v16 + 712);
  v395 = v393;
  v396 = v394 - v393;
  if (v394 != v393)
    goto LABEL_531;
LABEL_536:
  if (v395 != v394 && *(_DWORD *)v395 == v14)
  {
    if (v394 != v393)
    {
      v407 = (v394 - v393) >> 4;
      do
      {
        v408 = v407 >> 1;
        v409 = (unsigned int *)&v393[16 * (v407 >> 1)];
        v411 = *v409;
        v410 = (char *)(v409 + 4);
        v407 += ~(v407 >> 1);
        if (v411 < v14)
          v393 = v410;
        else
          v407 = v408;
      }
      while (v407);
    }
    if (v393 == v394 || *(_DWORD *)v393 != v14)
      v393 = v394;
    v412 = *((_QWORD *)v393 + 1);
    v413 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v414 = &__p;
    else
      v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v415 = __p.__r_.__value_.__l.__size_;
    v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
    sub_20E86A980(v416, (uint64_t)" with ID ", 9);
    v417 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v417, (uint64_t)" found (", 8);
    v418 = (_QWORD *)std::ostream::operator<<();
    v419 = sub_20E86A980(v418, (uint64_t)", ", 2);
    if (*(_BYTE *)(v412 + 20))
      v420 = "free";
    else
      v420 = "fixed";
    if (*(_BYTE *)(v412 + 20))
      v421 = 4;
    else
      v421 = 5;
    v422 = sub_20E86A980(v419, (uint64_t)v420, v421);
    sub_20E86A980(v422, (uint64_t)")\n", 2);
    v423 = v272;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v412 + 20);
    v424 = *(char **)(v16 + 704);
    v425 = *(char **)(v16 + 712);
    v426 = v424;
    v427 = v425 - v424;
    if (v425 == v424)
      goto LABEL_577;
LABEL_572:
    v433 = v427 >> 4;
    v426 = v424;
    do
    {
      v434 = v433 >> 1;
      v435 = (unsigned int *)&v426[16 * (v433 >> 1)];
      v437 = *v435;
      v436 = (char *)(v435 + 4);
      v433 += ~(v433 >> 1);
      if (v437 < a4)
        v426 = v436;
      else
        v433 = v434;
    }
    while (v433);
    goto LABEL_577;
  }
  v428 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = &__p;
  else
    v429 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v430 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v430 = __p.__r_.__value_.__l.__size_;
  v431 = sub_20E86A980(v428, (uint64_t)v429, v430);
  sub_20E86A980(v431, (uint64_t)" with ID ", 9);
  v432 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v432, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v424 = *(char **)(v16 + 704);
  v425 = *(char **)(v16 + 712);
  v426 = v424;
  v427 = v425 - v424;
  if (v425 != v424)
    goto LABEL_572;
LABEL_577:
  if (v426 != v425 && *(_DWORD *)v426 == a4)
  {
    if (v425 != v424)
    {
      v438 = (v425 - v424) >> 4;
      do
      {
        v439 = v438 >> 1;
        v440 = (unsigned int *)&v424[16 * (v438 >> 1)];
        v442 = *v440;
        v441 = (char *)(v440 + 4);
        v438 += ~(v438 >> 1);
        if (v442 < a4)
          v424 = v441;
        else
          v438 = v439;
      }
      while (v438);
    }
    if (v424 == v425 || *(_DWORD *)v424 != a4)
      v424 = v425;
    v443 = *((_QWORD *)v424 + 1);
    v444 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F6234D8((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v445 = &__p;
    else
      v445 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v446 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v446 = __p.__r_.__value_.__l.__size_;
    v447 = sub_20E86A980(v444, (uint64_t)v445, v446);
    sub_20E86A980(v447, (uint64_t)" with ID ", 9);
    v448 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v448, (uint64_t)" found (", 8);
    v449 = (_QWORD *)std::ostream::operator<<();
    v450 = sub_20E86A980(v449, (uint64_t)", ", 2);
    if (*(_BYTE *)(v443 + 20))
      v451 = "free";
    else
      v451 = "fixed";
    if (*(_BYTE *)(v443 + 20))
      v452 = 4;
    else
      v452 = 5;
    v453 = sub_20E86A980(v450, (uint64_t)v451, v452);
    sub_20E86A980(v453, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v443 + 20);
    v454 = *(char **)(v16 + 800);
    v455 = *(char **)(v16 + 808);
    v456 = v454;
    v457 = v455 - v454;
    if (v455 == v454)
      goto LABEL_618;
LABEL_613:
    v463 = v457 >> 4;
    v456 = v454;
    do
    {
      v464 = v463 >> 1;
      v465 = (unsigned int *)&v456[16 * (v463 >> 1)];
      v467 = *v465;
      v466 = (char *)(v465 + 4);
      v463 += ~(v463 >> 1);
      if (v467 < a5)
        v456 = v466;
      else
        v463 = v464;
    }
    while (v463);
    goto LABEL_618;
  }
  v458 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F6234D8((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v459 = &__p;
  else
    v459 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v460 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v460 = __p.__r_.__value_.__l.__size_;
  v461 = sub_20E86A980(v458, (uint64_t)v459, v460);
  sub_20E86A980(v461, (uint64_t)" with ID ", 9);
  v462 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v462, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v454 = *(char **)(v16 + 800);
  v455 = *(char **)(v16 + 808);
  v456 = v454;
  v457 = v455 - v454;
  if (v455 != v454)
    goto LABEL_613;
LABEL_618:
  if (v456 == v455 || *(_DWORD *)v456 != a5)
  {
    v488 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
    sub_20F622838((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v489 = &__p;
    else
      v489 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v490 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v490 = __p.__r_.__value_.__l.__size_;
    v491 = sub_20E86A980(v488, (uint64_t)v489, v490);
    sub_20E86A980(v491, (uint64_t)" with ID ", 9);
    v492 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v492, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    else
    {
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    goto LABEL_657;
  }
  if (v455 != v454)
  {
    v468 = (v455 - v454) >> 4;
    do
    {
      v469 = v468 >> 1;
      v470 = (unsigned int *)&v454[16 * (v468 >> 1)];
      v472 = *v470;
      v471 = (char *)(v470 + 4);
      v468 += ~(v468 >> 1);
      if (v472 < a5)
        v454 = v471;
      else
        v468 = v469;
    }
    while (v468);
  }
  v473 = v423;
  if (v454 == v455 || *(_DWORD *)v454 != a5)
    v454 = v455;
  v474 = *((_QWORD *)v454 + 1);
  v475 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
  sub_20F622838((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v476 = &__p;
  else
    v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v477 = __p.__r_.__value_.__l.__size_;
  v478 = sub_20E86A980(v475, (uint64_t)v476, v477);
  sub_20E86A980(v478, (uint64_t)" with ID ", 9);
  v479 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v479, (uint64_t)" found (", 8);
  v480 = (_QWORD *)std::ostream::operator<<();
  v481 = sub_20E86A980(v480, (uint64_t)", ", 2);
  if (*(_BYTE *)(v474 + 20))
    v482 = "free";
  else
    v482 = "fixed";
  if (*(_BYTE *)(v474 + 20))
    v483 = 4;
  else
    v483 = 5;
  v484 = sub_20E86A980(v481, (uint64_t)v482, v483);
  sub_20E86A980(v484, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v601 |= *(unsigned __int8 *)(v474 + 20);
  v485 = *(char **)(v16 + 992);
  v486 = *(char **)(v16 + 1000);
  v487 = v486 - v485;
  if (v486 != v485)
  {
LABEL_657:
    v493 = 0x84BDA12F684BDA13 * (v487 >> 3);
    do
    {
      v494 = v493 >> 1;
      v495 = (unint64_t *)&v485[216 * (v493 >> 1)];
      v497 = *v495;
      v496 = (char *)(v495 + 27);
      v493 += ~(v493 >> 1);
      if (v497 < v17)
        v485 = v496;
      else
        v493 = v494;
    }
    while (v493);
    if (v486 != v485 && *(_QWORD *)v485 == v17)
    {
      v498 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
      sub_20F622A50((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v499 = &__p;
      else
        v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v500 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v500 = __p.__r_.__value_.__l.__size_;
      v501 = sub_20E86A980(v498, (uint64_t)v499, v500);
      sub_20E86A980(v501, (uint64_t)" with the same ID ", 18);
      v502 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v502, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
    }
  }
LABEL_673:
  if (v601)
  {
    v503 = v473 != 0;
    v504 = v641;
    if ((v641 & 0x10) == 0)
      goto LABEL_675;
LABEL_686:
    v512 = *((_QWORD *)&v640 + 1);
    if (*((_QWORD *)&v640 + 1) < (unint64_t)v638)
    {
      *((_QWORD *)&v640 + 1) = v638;
      v512 = v638;
    }
    v513 = (const void *)*((_QWORD *)&v637 + 1);
    v505 = v512 - *((_QWORD *)&v637 + 1);
    if ((unint64_t)(v512 - *((_QWORD *)&v637 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_714;
    goto LABEL_689;
  }
  v507 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
  sub_20F622A50((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v508 = &__p;
  else
    v508 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v509 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v509 = __p.__r_.__value_.__l.__size_;
  v510 = sub_20E86A980(v507, (uint64_t)v508, v509);
  sub_20E86A980(v510, (uint64_t)" with ID ", 9);
  v511 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v511, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v503 = 0;
  v504 = v641;
  if ((v641 & 0x10) != 0)
    goto LABEL_686;
LABEL_675:
  if ((v504 & 8) == 0)
  {
    v505 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v506 = &__p;
    goto LABEL_696;
  }
  v513 = (const void *)v636.__r_.__value_.__l.__size_;
  v505 = v637 - v636.__r_.__value_.__l.__size_;
  if ((unint64_t)v637 - v636.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_714:
    sub_20E860B7C();
LABEL_689:
  if (v505 >= 0x17)
  {
    v514 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v505 | 7) != 0x17)
      v514 = v505 | 7;
    v515 = v514 + 1;
    v506 = (std::string *)operator new(v514 + 1);
    __p.__r_.__value_.__l.__size_ = v505;
    __p.__r_.__value_.__r.__words[2] = v515 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
    goto LABEL_695;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v505;
  v506 = &__p;
  if (v505)
LABEL_695:
    memmove(v506, v513, v505);
LABEL_696:
  v506->__r_.__value_.__s.__data_[v505] = 0;
  v613 = __p;
  v614.__r_.__value_.__s.__data_[0] = v503;
  v634.i64[0] = *MEMORY[0x24BEDB7F0];
  v516 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v634.i64 + *(_QWORD *)(v634.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v635 = v516;
  *((_QWORD *)&v635 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v640) < 0)
    operator delete((void *)v639);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)&v641 + 8);
  v517 = std::string::insert(&v613, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
  v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
  v606.__r_.__value_.__r.__words[2] = v517->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v518;
  v517->__r_.__value_.__l.__size_ = 0;
  v517->__r_.__value_.__r.__words[2] = 0;
  v517->__r_.__value_.__r.__words[0] = 0;
  v519 = std::string::append(&v606, "').", 3uLL);
  v520 = *(_OWORD *)&v519->__r_.__value_.__l.__data_;
  v608 = v519->__r_.__value_.__r.__words[2];
  *(_OWORD *)v607 = v520;
  v519->__r_.__value_.__l.__size_ = 0;
  v519->__r_.__value_.__r.__words[2] = 0;
  v519->__r_.__value_.__r.__words[0] = 0;
  if (v608 >= 0)
    v521 = v607;
  else
    v521 = (void **)v607[0];
  if (v608 >= 0)
    v522 = HIBYTE(v608);
  else
    v522 = (uint64_t)v607[1];
  v523 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v521, v522, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v608) < 0)
  {
    operator delete(v607[0]);
    if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_706:
      if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_707;
      goto LABEL_711;
    }
  }
  else if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_706;
  }
  operator delete(v606.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_707:
    if (!v523)
      return;
LABEL_712:
    abort();
  }
LABEL_711:
  operator delete(v613.__r_.__value_.__l.__data_);
  if (v523)
    goto LABEL_712;
}

void sub_20F76FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20F6227AC((uint64_t)&a67);
  sub_20F4EE450((uint64_t)&STACK[0x220]);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F76FF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x220]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F770048(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD v16[7];
  unsigned int v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 976))
    return (*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 4;
  v18 = 0u;
  v19 = 0u;
  if (!sub_20F5B8114((_QWORD *)a1, (int *)&v18, v16, 1))
    return v17;
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
  v3 = *(_QWORD *)(a1 + 776);
  v4 = *(_QWORD *)(a1 + 784);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 208);
    if (*(_BYTE *)(v3 + 496) || (*(_BYTE *)(v5 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v3 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v5);
      sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v3 + 216));
    }
    v3 += 504;
  }
  v6 = *(_QWORD *)(a1 + 800);
  v7 = *(_QWORD *)(a1 + 808);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 136);
    if (*(_BYTE *)(v6 + 272) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      sub_20F394A20(a1 + 1560, v8);
    v6 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 832), (_QWORD *)(a1 + 1560));
  sub_20F5B85BC(*(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), (_QWORD *)(a1 + 1560));
  sub_20F5B8444(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), (_QWORD *)(a1 + 1560));
  v9 = *(_QWORD *)(a1 + 896);
  v10 = *(_QWORD *)(a1 + 904);
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 736);
    if (*(_BYTE *)(v9 + 880) || (*(_BYTE *)(v11 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v9 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v11);
      sub_20F394A20(a1 + 1560, *(_QWORD *)(v9 + 744));
    }
    v9 += 888;
  }
  v12 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
  if (HIDWORD(v19) > v12)
    LODWORD(v12) = HIDWORD(v19);
  v13 = v17 >= v12;
  v14 = v17 - v12;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  sub_20F59A618((_QWORD *)a1);
  return v15;
}

void sub_20F770274(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F770288(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77029C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7702B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20F7702C4(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 536), *(_QWORD *)(v167 + 544), *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20F625954(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20F625954(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 536), *(_QWORD *)(v171 + 544), *(uint64_t **)(v172 + 536), *(_QWORD *)(v172 + 544));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 536), *(_QWORD *)(*v170 + 544), *(uint64_t **)(*v169 + 536), *(_QWORD *)(*v169 + 544));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 536), *(_QWORD *)(v173 + 544), *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20F625CD0(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 536), *(_QWORD *)(*v219 + 544), *(uint64_t **)(v223 + 536), *(_QWORD *)(v223 + 544));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 536), *(_QWORD *)(v222 + 544), *(uint64_t **)(*v225 + 536), *(_QWORD *)(*v225 + 544));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    do
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 536), *(_QWORD *)(*v219 + 544), *(uint64_t **)(v229 + 536), *(_QWORD *)(v229 + 544));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                      }
                      result = sub_20F625764(v233, *(uint64_t **)(v222 + 536), *(_QWORD *)(v222 + 544), *(uint64_t **)(v226 + 536), *(_QWORD *)(v226 + 544));
                      v225 = v231;
                    }
                    while (!(_DWORD)result);
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 536);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 544) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 536);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 544) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_454;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_454:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_479;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_479:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 536), *(_QWORD *)(*v272 + 544), *(uint64_t **)(*v241 + 536), *(_QWORD *)(*v241 + 544));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 536), *(_QWORD *)(*v272 + 544), *(uint64_t **)(v274 + 536), *(_QWORD *)(v274 + 544));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20F625954(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v18 = *(_QWORD *)(v16 + 536);
              v19 = *(_QWORD *)(v16 + 544);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20F625954(v7, v13, v313, v8);
            v14 = v12;
            sub_20F625954(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20F625954(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20F625954(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v18 = *(_QWORD *)(v16 + 536);
          v19 = *(_QWORD *)(v16 + 544);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 536), *(_QWORD *)(*(v7 - 1) + 544), (uint64_t *)v18, v19))
          {
            result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(*v313 + 536), *(_QWORD *)(*v313 + 544));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(v112 + 536), *(_QWORD *)(v112 + 544));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(*v7 + 536), *(_QWORD *)(*v7 + 544));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v18, v19, *(uint64_t **)(v115 + 536), *(_QWORD *)(v115 + 544));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 536);
                v119 = (*(_QWORD *)(v16 + 544) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 536);
                    v123 = (*(_QWORD *)(v121 + 544) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 536);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 544) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v19 - v18) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 536);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 544) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v18;
            v43 = *(_DWORD *)(v18 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 536), *(_QWORD *)(v52 + 544), (uint64_t *)v18, v19));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 536), *(_QWORD *)(v51 + 544), (uint64_t *)v18, v19));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 536);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 544) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 536);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 544) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 536);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 544) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20F771BB0(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20F771BB0(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20F7702C4(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 536), *(_QWORD *)(v184 + 544), *(uint64_t **)(*v180 + 536), *(_QWORD *)(*v180 + 544));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 536);
                    v189 = (*(_QWORD *)(v184 + 544) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 536);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 544) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 536), *(_QWORD *)(v279 + 544), *(uint64_t **)(*v9 + 536), *(_QWORD *)(*v9 + 544));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 536);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 544) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 536);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 544) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_501;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_521;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_521:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_546;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_546:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_501:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F771BB0(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 536), *(_QWORD *)(v8 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20F625954(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20F625954(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 536), *(_QWORD *)(v20 + 544), *(uint64_t **)(v21 + 536), *(_QWORD *)(v21 + 544)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 536), *(_QWORD *)(*v19 + 544), *(uint64_t **)(v23 + 536), *(_QWORD *)(v23 + 544)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 536), *(_QWORD *)(v22 + 544), *(uint64_t **)(*a1 + 536), *(_QWORD *)(*a1 + 544)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20F625CD0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20F625954(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 536), *(_QWORD *)(*v11 + 544), *(uint64_t **)(v15 + 536), *(_QWORD *)(v15 + 544)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 536), *(_QWORD *)(v14 + 544), *(uint64_t **)(v15 + 536), *(_QWORD *)(v15 + 544));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

double sub_20F771E04(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20F77207C((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20F77207C((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20F771E04(a1, v14, v15, a4, a5);
        sub_20F771E04(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20F77207C(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20F771E04(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20F771E04(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

double *sub_20F7722C8(uint64_t a1, double *a2, char a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  __n128 v42;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double *result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  _QWORD v76[64];
  double *v77;
  __int128 v78;
  uint64_t v79;

  v77 = (double *)v76;
  v78 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v78 = v6;
    v7 = (double *)operator new[]();
    if (v77 != (double *)v76 && v77)
      MEMORY[0x212BC6368]();
    v77 = v7;
  }
  v8 = *a2;
  *((_QWORD *)&v78 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v79 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v79, v76);
  }
  else
  {
    v79 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v79, v76);
  }
  v16 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v17 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v18 = v77;
    v19 = v77[v17];
    if ((v16 & 1) == 0)
    {
      v20 = v17 - 1;
      if (v20 != v16)
      {
        sub_20E8FB210(v77, &v77[v20], &v77[v16]);
        v18 = v77;
      }
      v10 = 0.5;
      v19 = (v19 + v18[v20]) * 0.5;
    }
    v9.n128_f64[0] = sqrt(v19);
    v21 = v8 * v9.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v21 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v79 = a1 + 120;
      sub_20F62CB00((uint64_t)&v79, v76);
      goto LABEL_30;
    }
  }
  v79 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v79, v76, v9, v10, v11, v12, v13, v14, v15);
LABEL_30:
  v22 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v23 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v24 = v77;
    v25 = v77[v23];
    if ((v22 & 1) == 0)
    {
      v26 = v23 - 1;
      if (v26 != v22)
      {
        sub_20E8FB210(v77, &v77[v26], &v77[v22]);
        v24 = v77;
      }
      v25 = (v25 + v24[v26]) * 0.5;
    }
    v27 = v8 * sqrt(v25);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v27 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v79 = a1 + 120;
      sub_20F62D074((uint64_t)&v79, v76);
      goto LABEL_39;
    }
  }
  v79 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v79, v76);
LABEL_39:
  v35 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v36 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v37 = v77;
    v38 = v77[v36];
    if ((v35 & 1) == 0)
    {
      v39 = v36 - 1;
      if (v39 != v35)
      {
        sub_20E8FB210(v77, &v77[v39], &v77[v35]);
        v37 = v77;
      }
      v29 = 0.5;
      v38 = (v38 + v37[v39]) * 0.5;
    }
    v28 = sqrt(v38);
    v40 = v8 * v28;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v40 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v79 = a1 + 120;
      sub_20F62D57C((uint64_t)&v79, v76);
      goto LABEL_48;
    }
  }
  v79 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v79, v76, v28, v29, v30, v31, v32, v33, v34);
LABEL_48:
  v49 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v50 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v51 = v77;
    v52 = v77[v50];
    if ((v49 & 1) == 0)
    {
      v53 = v50 - 1;
      if (v53 != v49)
      {
        sub_20E8FB210(v77, &v77[v53], &v77[v49]);
        v51 = v77;
      }
      v42.n128_u64[0] = 0.5;
      v52 = (v52 + v51[v53]) * 0.5;
    }
    v41.n128_f64[0] = sqrt(v52);
    v54 = v8 * v41.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v54 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v79 = a1 + 120;
      sub_20F62DC70((uint64_t)&v79, v76);
      goto LABEL_57;
    }
  }
  v79 = a1 + 120;
  sub_20F62DE48((uint64_t)&v79, v76, v41, v42, v43, v44, v45, v46, v47, v48);
LABEL_57:
  v55 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v56 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v57 = v77;
    v58 = v77[v56];
    if ((v55 & 1) == 0)
    {
      v59 = v56 - 1;
      if (v59 != v55)
      {
        sub_20E8FB210(v77, &v77[v59], &v77[v55]);
        v57 = v77;
      }
      v58 = (v58 + v57[v59]) * 0.5;
    }
    v60 = v8 * sqrt(v58);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v60 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v79 = a1 + 120;
      sub_20F62E070((uint64_t)&v79, v76);
      goto LABEL_66;
    }
  }
  v79 = a1 + 120;
  sub_20F62E274((uint64_t)&v79, v76);
LABEL_66:
  v61 = *((_QWORD *)&v78 + 1);
  result = v77;
  if (!*((_QWORD *)&v78 + 1))
  {
    v66 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (v77 == (double *)v76)
      goto LABEL_76;
    goto LABEL_74;
  }
  v63 = *((_QWORD *)&v78 + 1) >> 1;
  sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
  result = v77;
  v64 = v77[v63];
  if ((v61 & 1) == 0)
  {
    v65 = v63 - 1;
    if (v65 != v61)
    {
      sub_20E8FB210(v77, &v77[v65], &v77[v61]);
      result = v77;
    }
    v64 = (v64 + result[v65]) * 0.5;
  }
  v66 = v8 * sqrt(v64);
  *((_QWORD *)&v78 + 1) = 0;
  if (result != (double *)v76)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v72 = 0x3DDB7CDFD9D7BDBBLL;
    v73 = 1.0e20;
    if (v21 > 0.0)
    {
      v72 = *(_QWORD *)&v21;
      v73 = 1.0 / (v21 * v21);
    }
    *(_QWORD *)(a1 + 8) = v72;
    *(double *)(a1 + 16) = v73;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v27 > 0.0)
    {
      *(double *)(a1 + 24) = v27;
      *(double *)(a1 + 32) = 1.0 / (v27 * v27);
      if (v40 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v54 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v40 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v40;
    *(double *)(a1 + 48) = 1.0 / (v40 * v40);
    if (v54 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v60 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v54;
    *(double *)(a1 + 64) = 1.0 / (v54 * v54);
    if (v60 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v60 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v74 = 1.0;
    v75 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v60;
  *(double *)(a1 + 80) = 1.0 / (v60 * v60);
  v74 = 1.0;
  v75 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v66 <= 0.0)
  {
    v75 = 1.0e20;
    v74 = 1.0e-10;
  }
  else
  {
    v74 = v66;
    v75 = 1.0 / (v66 * v66);
  }
LABEL_94:
  *(double *)(a1 + 104) = v74;
  *(double *)(a1 + 112) = v75;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F772A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F772A64(uint64_t a1, double **a2, char a3)
{
  unint64_t v6;
  double *v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  uint64_t v38;
  double v39;
  __n128 v40;
  __n128 v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *result;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  _QWORD v75[64];
  double *v76;
  __int128 v77;
  uint64_t v78;

  v76 = (double *)v75;
  v77 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v77 = v6;
    v7 = (double *)operator new[]();
    if (v76 != (double *)v75 && v76)
      MEMORY[0x212BC6368]();
    v76 = v7;
  }
  *((_QWORD *)&v77 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v78 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v78, v75);
  }
  else
  {
    v78 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v78, v75);
  }
  v15 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v16 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v17 = v76;
    v18 = v76[v16];
    if ((v15 & 1) == 0)
    {
      v19 = v16 - 1;
      if (v19 != v15)
      {
        sub_20E8FB210(v76, &v76[v19], &v76[v15]);
        v17 = v76;
      }
      v18 = (v18 + v17[v19]) * 0.5;
    }
    v8.n128_f64[0] = sqrt(v18);
    v9 = **a2;
    v20 = v8.n128_f64[0] * v9;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v20 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v78 = a1 + 120;
      sub_20F62CB00((uint64_t)&v78, v75);
      goto LABEL_30;
    }
  }
  v78 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v78, v75, v8, v9, v10, v11, v12, v13, v14);
LABEL_30:
  v21 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v22 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v23 = v76;
    v24 = v76[v22];
    if ((v21 & 1) == 0)
    {
      v25 = v22 - 1;
      if (v25 != v21)
      {
        sub_20E8FB210(v76, &v76[v25], &v76[v21]);
        v23 = v76;
      }
      v24 = (v24 + v23[v25]) * 0.5;
    }
    v26 = sqrt(v24) * (*a2)[1];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v26 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v78 = a1 + 120;
      sub_20F62D074((uint64_t)&v78, v75);
      goto LABEL_39;
    }
  }
  v78 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v78, v75);
LABEL_39:
  v34 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v35 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v36 = v76;
    v37 = v76[v35];
    if ((v34 & 1) == 0)
    {
      v38 = v35 - 1;
      if (v38 != v34)
      {
        sub_20E8FB210(v76, &v76[v38], &v76[v34]);
        v36 = v76;
      }
      v37 = (v37 + v36[v38]) * 0.5;
    }
    v27 = sqrt(v37);
    v28 = (*a2)[2];
    v39 = v27 * v28;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v39 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v78 = a1 + 120;
      sub_20F62D57C((uint64_t)&v78, v75);
      goto LABEL_48;
    }
  }
  v78 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v78, v75, v27, v28, v29, v30, v31, v32, v33);
LABEL_48:
  v48 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v49 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v50 = v76;
    v51 = v76[v49];
    if ((v48 & 1) == 0)
    {
      v52 = v49 - 1;
      if (v52 != v48)
      {
        sub_20E8FB210(v76, &v76[v52], &v76[v48]);
        v50 = v76;
      }
      v51 = (v51 + v50[v52]) * 0.5;
    }
    v40.n128_f64[0] = sqrt(v51);
    v41.n128_f64[0] = (*a2)[3];
    v53 = v40.n128_f64[0] * v41.n128_f64[0];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v53 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v78 = a1 + 120;
      sub_20F62DC70((uint64_t)&v78, v75);
      goto LABEL_57;
    }
  }
  v78 = a1 + 120;
  sub_20F62DE48((uint64_t)&v78, v75, v40, v41, v42, v43, v44, v45, v46, v47);
LABEL_57:
  v54 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v55 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v56 = v76;
    v57 = v76[v55];
    if ((v54 & 1) == 0)
    {
      v58 = v55 - 1;
      if (v58 != v54)
      {
        sub_20E8FB210(v76, &v76[v58], &v76[v54]);
        v56 = v76;
      }
      v57 = (v57 + v56[v58]) * 0.5;
    }
    v59 = sqrt(v57) * (*a2)[4];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v59 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v78 = a1 + 120;
      sub_20F62E070((uint64_t)&v78, v75);
      goto LABEL_66;
    }
  }
  v78 = a1 + 120;
  sub_20F62E274((uint64_t)&v78, v75);
LABEL_66:
  v60 = *((_QWORD *)&v77 + 1);
  result = v76;
  if (!*((_QWORD *)&v77 + 1))
  {
    v65 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (v76 == (double *)v75)
      goto LABEL_76;
    goto LABEL_74;
  }
  v62 = *((_QWORD *)&v77 + 1) >> 1;
  sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
  result = v76;
  v63 = v76[v62];
  if ((v60 & 1) == 0)
  {
    v64 = v62 - 1;
    if (v64 != v60)
    {
      sub_20E8FB210(v76, &v76[v64], &v76[v60]);
      result = v76;
    }
    v63 = (v63 + result[v64]) * 0.5;
  }
  v65 = sqrt(v63) * (*a2)[5];
  *((_QWORD *)&v77 + 1) = 0;
  if (result != (double *)v75)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v71 = 0x3DDB7CDFD9D7BDBBLL;
    v72 = 1.0e20;
    if (v20 > 0.0)
    {
      v71 = *(_QWORD *)&v20;
      v72 = 1.0 / (v20 * v20);
    }
    *(_QWORD *)(a1 + 8) = v71;
    *(double *)(a1 + 16) = v72;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v26 > 0.0)
    {
      *(double *)(a1 + 24) = v26;
      *(double *)(a1 + 32) = 1.0 / (v26 * v26);
      if (v39 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v53 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v39 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v39;
    *(double *)(a1 + 48) = 1.0 / (v39 * v39);
    if (v53 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v59 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v53;
    *(double *)(a1 + 64) = 1.0 / (v53 * v53);
    if (v59 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v59 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v73 = 1.0;
    v74 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v59;
  *(double *)(a1 + 80) = 1.0 / (v59 * v59);
  v73 = 1.0;
  v74 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v65 <= 0.0)
  {
    v74 = 1.0e20;
    v73 = 1.0e-10;
  }
  else
  {
    v73 = v65;
    v74 = 1.0 / (v65 * v65);
  }
LABEL_94:
  *(double *)(a1 + 104) = v73;
  *(double *)(a1 + 112) = v74;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F7731F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F77322C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  __int128 *v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  int64x2_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64x2_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  unint64_t v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _OWORD *v229;
  __int128 *v230;
  unint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  __int128 *v263;
  unint64_t v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  unint64_t v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _OWORD *v328;
  __int128 *v329;
  unint64_t v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _OWORD *v361;
  __int128 *v362;
  unint64_t v363;
  __int128 v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _OWORD *v393;
  __int128 *v394;
  unint64_t v395;
  __int128 v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  _QWORD *v400;
  uint64_t v401;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;

  v1 = (_QWORD *)result;
  v412 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)result;
  v2 = *(_QWORD **)(result + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 1096);
  if (*(_BYTE *)(*(_QWORD *)result + 1096) || (result = sub_20F5BB998((_QWORD *)(v3 + 120)), !(_DWORD)result))
  {
    v7 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v3 + 904) - *(_QWORD *)(v3 + 896)) >> 3);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 896);
    v6 = *(_QWORD *)(v3 + 904);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) == 0)
          v7 = ++v8;
        v5 += 504;
      }
      while (v5 != v6);
    }
  }
  v9 = v2 + 145;
  v2[144] += v7;
  v10 = v2[211];
  v11 = v10 + 1;
  v12 = v2[210];
  if (v10 + 1 <= v12)
  {
    v16 = v2[209];
    *(_QWORD *)(v16 + 8 * v10) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
    {
LABEL_37:
      v32 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v3 + 928) - *(_QWORD *)(v3 + 920)) >> 3);
      goto LABEL_38;
    }
  }
  else
  {
    v13 = 2 * v12;
    if (v13 > v11)
      v11 = v13;
    v2[210] = v11;
    v14 = v2[209];
    v15 = operator new[]();
    v16 = v15;
    if (v10)
    {
      v17 = 0;
      if (v10 < 4)
        goto LABEL_20;
      if ((unint64_t)(v15 - v14) < 0x20)
        goto LABEL_20;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (_OWORD *)(v15 + 16);
      v19 = (__int128 *)(v14 + 16);
      v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v10 != v17)
      {
LABEL_20:
        v22 = v10 - v17;
        v23 = 8 * v17;
        v24 = (uint64_t *)(v14 + 8 * v17);
        v25 = (_QWORD *)(v15 + v23);
        do
        {
          v26 = *v24++;
          *v25++ = v26;
          --v22;
        }
        while (v22);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v16;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v16 + 8 * v2[211]) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
      goto LABEL_37;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_37;
  v30 = *(_QWORD *)(v3 + 920);
  v31 = *(_QWORD *)(v3 + 928);
  if (v30 == v31)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v30 + 136) + 4) & 6) == 0)
        v32 = ++v33;
      v30 += 280;
    }
    while (v30 != v31);
  }
LABEL_38:
  v2[144] += v32;
  v34 = v28 + 2;
  v35 = v2[210];
  if (v28 + 2 <= v35)
  {
    v38 = v16;
    *(_QWORD *)(v16 + 8 * v29) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
    {
LABEL_68:
      v54 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(v3 + 952) - *(_QWORD *)(v3 + 944)) >> 4);
      goto LABEL_69;
    }
  }
  else
  {
    v36 = 2 * v35;
    if (v36 > v34)
      v34 = v36;
    v2[210] = v34;
    v37 = operator new[]();
    v38 = v37;
    if (v29)
    {
      v39 = 0;
      if (v29 < 4)
        goto LABEL_47;
      if ((unint64_t)(v37 - v16) < 0x20)
        goto LABEL_47;
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (_OWORD *)(v37 + 16);
      v41 = (__int128 *)(v16 + 16);
      v42 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v29 != v39)
      {
LABEL_47:
        v44 = v28 - v39 + 1;
        v45 = 8 * v39;
        v46 = (uint64_t *)(v16 + 8 * v39);
        v47 = (_QWORD *)(v37 + v45);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v44;
        }
        while (v44);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v38;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v38 + 8 * v2[211]) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
      goto LABEL_68;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_68;
  v52 = *(_QWORD **)(v3 + 944);
  v53 = *(_QWORD **)(v3 + 952);
  if (v52 == v53)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    do
    {
      if ((*(_BYTE *)(v52[962] + 4) & 6) == 0
        && (*(_BYTE *)(v52[963] + 4) & 6) == 0
        && (*(_BYTE *)(v52[964] + 4) & 6) == 0
        && (*(_BYTE *)(v52[965] + 4) & 6) == 0
        && (*(_BYTE *)(v52[966] + 4) & 6) == 0)
      {
        v54 = ++v55;
      }
      v52 += 1002;
    }
    while (v52 != v53);
  }
LABEL_69:
  v2[144] += v54;
  v56 = v50 + 2;
  v57 = v2[210];
  if (v50 + 2 <= v57)
  {
    v60 = v38;
    *(_QWORD *)(v38 + 8 * v51) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
    {
LABEL_98:
      v76 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(v3 + 976) - *(_QWORD *)(v3 + 968)) >> 3);
      goto LABEL_99;
    }
  }
  else
  {
    v58 = 2 * v57;
    if (v58 > v56)
      v56 = v58;
    v2[210] = v56;
    v59 = operator new[]();
    v60 = v59;
    if (v51)
    {
      v61 = 0;
      if (v51 < 4)
        goto LABEL_78;
      if ((unint64_t)(v59 - v38) < 0x20)
        goto LABEL_78;
      v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      v62 = (_OWORD *)(v59 + 16);
      v63 = (__int128 *)(v38 + 16);
      v64 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v63;
        *(v62 - 1) = *(v63 - 1);
        *v62 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v51 != v61)
      {
LABEL_78:
        v66 = v50 - v61 + 1;
        v67 = 8 * v61;
        v68 = (uint64_t *)(v38 + 8 * v61);
        v69 = (_QWORD *)(v59 + v67);
        do
        {
          v70 = *v68++;
          *v69++ = v70;
          --v66;
        }
        while (v66);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v60;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v60 + 8 * v2[211]) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
      goto LABEL_98;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_98;
  v74 = *(_QWORD **)(v3 + 968);
  v75 = *(_QWORD **)(v3 + 976);
  if (v74 == v75)
  {
    v76 = 0;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    do
    {
      if ((*(_BYTE *)(v74[628] + 4) & 6) == 0
        && (*(_BYTE *)(v74[629] + 4) & 6) == 0
        && (*(_BYTE *)(v74[630] + 4) & 6) == 0
        && (*(_BYTE *)(v74[631] + 4) & 6) == 0)
      {
        v76 = ++v77;
      }
      v74 += 667;
    }
    while (v74 != v75);
  }
LABEL_99:
  v2[144] += v76;
  v78 = v72 + 2;
  v79 = v2[210];
  if (v72 + 2 <= v79)
  {
    v82 = v60;
    *(_QWORD *)(v60 + 8 * v73) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  else
  {
    v80 = 2 * v79;
    if (v80 > v78)
      v78 = v80;
    v2[210] = v78;
    v81 = operator new[]();
    v82 = v81;
    if (v73)
    {
      v83 = 0;
      if (v73 < 4)
        goto LABEL_108;
      if ((unint64_t)(v81 - v60) < 0x20)
        goto LABEL_108;
      v83 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      v84 = (_OWORD *)(v81 + 16);
      v85 = (__int128 *)(v60 + 16);
      v86 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v87 = *v85;
        *(v84 - 1) = *(v85 - 1);
        *v84 = v87;
        v84 += 2;
        v85 += 2;
        v86 -= 4;
      }
      while (v86);
      if (v73 != v83)
      {
LABEL_108:
        v88 = v72 - v83 + 1;
        v89 = 8 * v83;
        v90 = (uint64_t *)(v60 + 8 * v83);
        v91 = (_QWORD *)(v81 + v89);
        do
        {
          v92 = *v90++;
          *v91++ = v92;
          --v88;
        }
        while (v88);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v82;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v82 + 8 * v2[211]) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if ((_DWORD)result)
  {
    result = (uint64_t)sub_20F5BBAFC(*(_QWORD **)(v3 + 992), *(_QWORD **)(v3 + 1000), (uint64_t)&v403);
    v96 = v411;
    goto LABEL_121;
  }
LABEL_120:
  v96 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v3 + 1000) - *(_QWORD *)(v3 + 992)) >> 3);
LABEL_121:
  v2[144] += v96;
  v97 = v94 + 2;
  v98 = v2[210];
  if (v94 + 2 <= v98)
  {
    v101 = v82;
    *(_QWORD *)(v82 + 8 * v95) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v4)
    {
LABEL_148:
      v118 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(v3 + 1024) - *(_QWORD *)(v3 + 1016)) >> 3);
      goto LABEL_149;
    }
  }
  else
  {
    v99 = 2 * v98;
    if (v99 > v97)
      v97 = v99;
    v2[210] = v97;
    v100 = operator new[]();
    v101 = v100;
    if (v95)
    {
      v102 = 0;
      if (v95 < 4)
        goto LABEL_130;
      if ((unint64_t)(v100 - v82) < 0x20)
        goto LABEL_130;
      v102 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      v103 = (_OWORD *)(v100 + 16);
      v104 = (__int128 *)(v82 + 16);
      v105 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *v104;
        *(v103 - 1) = *(v104 - 1);
        *v103 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v95 != v102)
      {
LABEL_130:
        v107 = v94 - v102 + 1;
        v108 = 8 * v102;
        v109 = (uint64_t *)(v82 + 8 * v102);
        v110 = (_QWORD *)(v100 + v108);
        do
        {
          v111 = *v109++;
          *v110++ = v111;
          --v107;
        }
        while (v107);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v101;
    v113 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v101 + 8 * v2[211]) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v113)
      goto LABEL_148;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_148;
  v116 = *(_QWORD *)(v3 + 1016);
  v117 = *(_QWORD *)(v3 + 1024);
  if (v116 == v117)
  {
    v118 = 0;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v116 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v116 + 744) + 4) & 6) == 0)
        v118 = ++v119;
      v116 += 888;
    }
    while (v116 != v117);
  }
LABEL_149:
  v2[144] += v118;
  v120 = v114 + 2;
  v121 = v2[210];
  if (v114 + 2 <= v121)
  {
    v124 = v101;
  }
  else
  {
    v122 = 2 * v121;
    if (v122 > v120)
      v120 = v122;
    v2[210] = v120;
    v123 = operator new[]();
    v124 = v123;
    if (v115)
    {
      v125 = 0;
      if (v115 < 4)
        goto LABEL_158;
      if ((unint64_t)(v123 - v101) < 0x20)
        goto LABEL_158;
      v125 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      v126 = (_OWORD *)(v123 + 16);
      v127 = (__int128 *)(v101 + 16);
      v128 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *v127;
        *(v126 - 1) = *(v127 - 1);
        *v126 = v129;
        v126 += 2;
        v127 += 2;
        v128 -= 4;
      }
      while (v128);
      if (v115 != v125)
      {
LABEL_158:
        v130 = v114 - v125 + 1;
        v131 = 8 * v125;
        v132 = (uint64_t *)(v101 + 8 * v125);
        v133 = (_QWORD *)(v123 + v131);
        do
        {
          v134 = *v132++;
          *v133++ = v134;
          --v130;
        }
        while (v130);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v124;
    v115 = v2[211];
  }
  *(_QWORD *)(v124 + 8 * v115) = v118;
  ++v2[211];
  v137 = *v1;
  v136 = (int64x2_t *)v1[1];
  v138 = (_QWORD *)(*v1 + 120);
  if (*(_BYTE *)(v137 + 1096))
  {
    v139 = *(_QWORD *)(v137 + 128);
    v140 = *(_QWORD *)(v137 + 136);
    if (v139 == v140)
    {
      v141 = 0;
    }
    else
    {
      v141 = 0;
      do
      {
        v142 = *(_QWORD *)(v139 + 8);
        if ((*(_BYTE *)(v142 + 4) & 6) == 0)
          v141 += *(unsigned __int8 *)(v142 + 20);
        v139 += 16;
      }
      while (v139 != v140);
    }
  }
  else
  {
    result = sub_20F62E4C0(v138, &v403);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
      *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
      *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
      *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
      *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
      *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
      *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
      *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
      v143 = *(_QWORD *)(v137 + 896);
      v144 = *(_QWORD *)(v137 + 904);
      while (v143 != v144)
      {
        v145 = *(_QWORD *)(v143 + 208);
        if (*(_BYTE *)(v143 + 496)
          || (*(_BYTE *)(v145 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v143 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v145);
          sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v143 + 216));
        }
        v143 += 504;
      }
      v146 = *(_QWORD *)(v137 + 920);
      v147 = *(_QWORD *)(v137 + 928);
      while (v146 != v147)
      {
        v148 = *(_QWORD *)(v146 + 136);
        if (*(_BYTE *)(v146 + 272) || (*(_BYTE *)(v148 + 4) & 6) != 0)
          sub_20F394A20(v137 + 1680, v148);
        v146 += 280;
      }
      sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
      sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
      sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
      v149 = *(_QWORD *)(v137 + 1016);
      v150 = *(_QWORD *)(v137 + 1024);
      while (v149 != v150)
      {
        v151 = *(_QWORD *)(v149 + 736);
        if (*(_BYTE *)(v149 + 880)
          || (*(_BYTE *)(v151 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v149 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v151);
          sub_20F394A20(v137 + 1680, *(_QWORD *)(v149 + 744));
        }
        v149 += 888;
      }
      v152 = (uint64_t)(*(_QWORD *)(v137 + 1688) - *(_QWORD *)(v137 + 1680)) >> 2;
      if (v152 <= v403)
        v141 = v403 - v152;
      else
        v141 = 0;
      result = sub_20F59A618(v138);
    }
    else
    {
      v141 = v403;
    }
  }
  v153 = v136 + 107;
  v154 = v141;
  v136[106].i64[0] += v141;
  v136[106].i64[1] += 6 * v141;
  v155 = v136[140].u64[0];
  v156 = v155 + 1;
  v157 = v136[139].u64[1];
  if (v155 + 1 <= v157)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v155) = v141;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_218:
      v174 = *(_QWORD *)(v137 + 224);
      v175 = *(_QWORD *)(v137 + 232);
      if (v174 == v175)
      {
        v176 = 0;
      }
      else
      {
        v176 = 0;
        do
        {
          v177 = *(_QWORD *)(v174 + 8);
          if ((*(_BYTE *)(v177 + 4) & 6) == 0)
            v176 += *(unsigned __int8 *)(v177 + 20);
          v174 += 16;
        }
        while (v174 != v175);
      }
      goto LABEL_252;
    }
  }
  else
  {
    v158 = 2 * v157;
    if (v158 > v156)
      v156 = v158;
    v136[139].i64[1] = v156;
    v159 = v136[139].i64[0];
    v160 = operator new[]();
    v161 = v160;
    if (v155)
    {
      v162 = 0;
      if (v155 < 4)
        goto LABEL_210;
      if ((unint64_t)(v160 - v159) < 0x20)
        goto LABEL_210;
      v162 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      v163 = (_OWORD *)(v160 + 16);
      v164 = (__int128 *)(v159 + 16);
      v165 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 += 2;
        v164 += 2;
        v165 -= 4;
      }
      while (v165);
      if (v155 != v162)
      {
LABEL_210:
        v167 = v155 - v162;
        v168 = 8 * v162;
        v169 = (uint64_t *)(v159 + 8 * v162);
        v170 = (_QWORD *)(v160 + v168);
        do
        {
          v171 = *v169++;
          *v170++ = v171;
          --v167;
        }
        while (v167);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v161;
    *(_QWORD *)(v161 + 8 * v136[140].i64[0]) = v154;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_218;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v178 = *(_QWORD *)(v137 + 896);
    v179 = *(_QWORD *)(v137 + 904);
    while (v178 != v179)
    {
      v180 = *(_QWORD *)(v178 + 208);
      if (*(_BYTE *)(v178 + 496)
        || (*(_BYTE *)(v180 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v178 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v180);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v178 + 216));
      }
      v178 += 504;
    }
    v181 = *(_QWORD *)(v137 + 920);
    v182 = *(_QWORD *)(v137 + 928);
    while (v181 != v182)
    {
      v183 = *(_QWORD *)(v181 + 136);
      if (*(_BYTE *)(v181 + 272) || (*(_BYTE *)(v183 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v183);
      v181 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v184 = *(_QWORD *)(v137 + 1016);
    v185 = *(_QWORD *)(v137 + 1024);
    while (v184 != v185)
    {
      v186 = *(_QWORD *)(v184 + 736);
      if (*(_BYTE *)(v184 + 880)
        || (*(_BYTE *)(v186 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v184 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v186);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v184 + 744));
      }
      v184 += 888;
    }
    v187 = (uint64_t)(*(_QWORD *)(v137 + 1712) - *(_QWORD *)(v137 + 1704)) >> 2;
    if (v187 <= v404)
      v176 = v404 - v187;
    else
      v176 = 0;
    result = sub_20F59A618(v138);
    v173 = v136[140].u64[0];
  }
  else
  {
    v176 = v404;
  }
LABEL_252:
  v188 = v176;
  v136[106].i64[0] += v176;
  v136[106].i64[1] += 9 * v176;
  v189 = v173 + 1;
  v190 = v136[139].u64[1];
  if (v173 + 1 <= v190)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v173) = v176;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_269:
      v207 = *(_QWORD *)(v137 + 320);
      v208 = *(_QWORD *)(v137 + 328);
      if (v207 == v208)
      {
        v209 = 0;
      }
      else
      {
        v209 = 0;
        do
        {
          v210 = *(_QWORD *)(v207 + 8);
          if ((*(_BYTE *)(v210 + 4) & 6) == 0)
            v209 += *(unsigned __int8 *)(v210 + 20);
          v207 += 16;
        }
        while (v207 != v208);
      }
      goto LABEL_303;
    }
  }
  else
  {
    v191 = 2 * v190;
    if (v191 > v189)
      v189 = v191;
    v136[139].i64[1] = v189;
    v192 = v136[139].i64[0];
    v193 = operator new[]();
    v194 = v193;
    if (v173)
    {
      v195 = 0;
      if (v173 < 4)
        goto LABEL_261;
      if ((unint64_t)(v193 - v192) < 0x20)
        goto LABEL_261;
      v195 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      v196 = (_OWORD *)(v193 + 16);
      v197 = (__int128 *)(v192 + 16);
      v198 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *v197;
        *(v196 - 1) = *(v197 - 1);
        *v196 = v199;
        v196 += 2;
        v197 += 2;
        v198 -= 4;
      }
      while (v198);
      if (v173 != v195)
      {
LABEL_261:
        v200 = v173 - v195;
        v201 = 8 * v195;
        v202 = (uint64_t *)(v192 + 8 * v195);
        v203 = (_QWORD *)(v193 + v201);
        do
        {
          v204 = *v202++;
          *v203++ = v204;
          --v200;
        }
        while (v200);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v194;
    *(_QWORD *)(v194 + 8 * v136[140].i64[0]) = v188;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_269;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v211 = *(_QWORD *)(v137 + 896);
    v212 = *(_QWORD *)(v137 + 904);
    while (v211 != v212)
    {
      v213 = *(_QWORD *)(v211 + 208);
      if (*(_BYTE *)(v211 + 496)
        || (*(_BYTE *)(v213 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v211 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v213);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v211 + 216));
      }
      v211 += 504;
    }
    v214 = *(_QWORD *)(v137 + 920);
    v215 = *(_QWORD *)(v137 + 928);
    while (v214 != v215)
    {
      v216 = *(_QWORD *)(v214 + 136);
      if (*(_BYTE *)(v214 + 272) || (*(_BYTE *)(v216 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v216);
      v214 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v217 = *(_QWORD *)(v137 + 1016);
    v218 = *(_QWORD *)(v137 + 1024);
    while (v217 != v218)
    {
      v219 = *(_QWORD *)(v217 + 736);
      if (*(_BYTE *)(v217 + 880)
        || (*(_BYTE *)(v219 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v217 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v219);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v217 + 744));
      }
      v217 += 888;
    }
    v220 = (uint64_t)(*(_QWORD *)(v137 + 1736) - *(_QWORD *)(v137 + 1728)) >> 2;
    if (v220 <= v405)
      v209 = v405 - v220;
    else
      v209 = 0;
    result = sub_20F59A618(v138);
    v206 = v136[140].u64[0];
  }
  else
  {
    v209 = v405;
  }
LABEL_303:
  v221 = v209;
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v209));
  v222 = v206 + 1;
  v223 = v136[139].u64[1];
  if (v206 + 1 <= v223)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v206) = v209;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_320:
      v240 = *(_QWORD *)(v137 + 416);
      v241 = *(_QWORD *)(v137 + 424);
      if (v240 == v241)
      {
        v242 = 0;
      }
      else
      {
        v242 = 0;
        do
        {
          v243 = *(_QWORD *)(v240 + 8);
          if ((*(_BYTE *)(v243 + 4) & 6) == 0)
            v242 += *(unsigned __int8 *)(v243 + 20);
          v240 += 16;
        }
        while (v240 != v241);
      }
      goto LABEL_354;
    }
  }
  else
  {
    v224 = 2 * v223;
    if (v224 > v222)
      v222 = v224;
    v136[139].i64[1] = v222;
    v225 = v136[139].i64[0];
    v226 = operator new[]();
    v227 = v226;
    if (v206)
    {
      v228 = 0;
      if (v206 < 4)
        goto LABEL_312;
      if ((unint64_t)(v226 - v225) < 0x20)
        goto LABEL_312;
      v228 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      v229 = (_OWORD *)(v226 + 16);
      v230 = (__int128 *)(v225 + 16);
      v231 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v232 = *v230;
        *(v229 - 1) = *(v230 - 1);
        *v229 = v232;
        v229 += 2;
        v230 += 2;
        v231 -= 4;
      }
      while (v231);
      if (v206 != v228)
      {
LABEL_312:
        v233 = v206 - v228;
        v234 = 8 * v228;
        v235 = (uint64_t *)(v225 + 8 * v228);
        v236 = (_QWORD *)(v226 + v234);
        do
        {
          v237 = *v235++;
          *v236++ = v237;
          --v233;
        }
        while (v233);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v227;
    *(_QWORD *)(v227 + 8 * v136[140].i64[0]) = v221;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_320;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v244 = *(_QWORD *)(v137 + 896);
    v245 = *(_QWORD *)(v137 + 904);
    while (v244 != v245)
    {
      v246 = *(_QWORD *)(v244 + 208);
      if (*(_BYTE *)(v244 + 496)
        || (*(_BYTE *)(v246 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v244 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v246);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v244 + 216));
      }
      v244 += 504;
    }
    v247 = *(_QWORD *)(v137 + 920);
    v248 = *(_QWORD *)(v137 + 928);
    while (v247 != v248)
    {
      v249 = *(_QWORD *)(v247 + 136);
      if (*(_BYTE *)(v247 + 272) || (*(_BYTE *)(v249 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v249);
      v247 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v250 = *(_QWORD *)(v137 + 1016);
    v251 = *(_QWORD *)(v137 + 1024);
    while (v250 != v251)
    {
      v252 = *(_QWORD *)(v250 + 736);
      if (*(_BYTE *)(v250 + 880)
        || (*(_BYTE *)(v252 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v250 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v252);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v250 + 744));
      }
      v250 += 888;
    }
    v253 = (uint64_t)(*(_QWORD *)(v137 + 1760) - *(_QWORD *)(v137 + 1752)) >> 2;
    if (v253 <= v406)
      v242 = v406 - v253;
    else
      v242 = 0;
    result = sub_20F59A618(v138);
    v239 = v136[140].u64[0];
  }
  else
  {
    v242 = v406;
  }
LABEL_354:
  v254 = v242;
  v136[106].i64[0] += v242;
  v136[106].i64[1] += 6 * v242;
  v255 = v239 + 1;
  v256 = v136[139].u64[1];
  if (v239 + 1 <= v256)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v239) = v242;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_371:
      v273 = *(_QWORD *)(v137 + 512);
      v274 = *(_QWORD *)(v137 + 520);
      if (v273 == v274)
      {
        v275 = 0;
      }
      else
      {
        v275 = 0;
        do
        {
          v276 = *(_QWORD *)(v273 + 8);
          if ((*(_BYTE *)(v276 + 4) & 6) == 0)
            v275 += *(unsigned __int8 *)(v276 + 20);
          v273 += 16;
        }
        while (v273 != v274);
      }
      goto LABEL_405;
    }
  }
  else
  {
    v257 = 2 * v256;
    if (v257 > v255)
      v255 = v257;
    v136[139].i64[1] = v255;
    v258 = v136[139].i64[0];
    v259 = operator new[]();
    v260 = v259;
    if (v239)
    {
      v261 = 0;
      if (v239 < 4)
        goto LABEL_363;
      if ((unint64_t)(v259 - v258) < 0x20)
        goto LABEL_363;
      v261 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      v262 = (_OWORD *)(v259 + 16);
      v263 = (__int128 *)(v258 + 16);
      v264 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v265 = *v263;
        *(v262 - 1) = *(v263 - 1);
        *v262 = v265;
        v262 += 2;
        v263 += 2;
        v264 -= 4;
      }
      while (v264);
      if (v239 != v261)
      {
LABEL_363:
        v266 = v239 - v261;
        v267 = 8 * v261;
        v268 = (uint64_t *)(v258 + 8 * v261);
        v269 = (_QWORD *)(v259 + v267);
        do
        {
          v270 = *v268++;
          *v269++ = v270;
          --v266;
        }
        while (v266);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v260;
    *(_QWORD *)(v260 + 8 * v136[140].i64[0]) = v254;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_371;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v277 = *(_QWORD *)(v137 + 896);
    v278 = *(_QWORD *)(v137 + 904);
    while (v277 != v278)
    {
      v279 = *(_QWORD *)(v277 + 208);
      if (*(_BYTE *)(v277 + 496)
        || (*(_BYTE *)(v279 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v277 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v279);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v277 + 216));
      }
      v277 += 504;
    }
    v280 = *(_QWORD *)(v137 + 920);
    v281 = *(_QWORD *)(v137 + 928);
    while (v280 != v281)
    {
      v282 = *(_QWORD *)(v280 + 136);
      if (*(_BYTE *)(v280 + 272) || (*(_BYTE *)(v282 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v282);
      v280 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v283 = *(_QWORD *)(v137 + 1016);
    v284 = *(_QWORD *)(v137 + 1024);
    while (v283 != v284)
    {
      v285 = *(_QWORD *)(v283 + 736);
      if (*(_BYTE *)(v283 + 880)
        || (*(_BYTE *)(v285 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v283 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v285);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v283 + 744));
      }
      v283 += 888;
    }
    v286 = (uint64_t)(*(_QWORD *)(v137 + 1784) - *(_QWORD *)(v137 + 1776)) >> 2;
    if (v286 <= v407)
      v275 = v407 - v286;
    else
      v275 = 0;
    result = sub_20F59A618(v138);
    v272 = v136[140].u64[0];
  }
  else
  {
    v275 = v407;
  }
LABEL_405:
  v287 = v275;
  v136[106].i64[0] += v275;
  v136[106].i64[1] += 4 * v275;
  v288 = v272 + 1;
  v289 = v136[139].u64[1];
  if (v272 + 1 <= v289)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v272) = v275;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_422:
      v306 = *(_QWORD *)(v137 + 608);
      v307 = *(_QWORD *)(v137 + 616);
      if (v306 == v307)
      {
        v308 = 0;
      }
      else
      {
        v308 = 0;
        do
        {
          v309 = *(_QWORD *)(v306 + 8);
          if ((*(_BYTE *)(v309 + 4) & 6) == 0)
            v308 += *(unsigned __int8 *)(v309 + 20);
          v306 += 16;
        }
        while (v306 != v307);
      }
      goto LABEL_456;
    }
  }
  else
  {
    v290 = 2 * v289;
    if (v290 > v288)
      v288 = v290;
    v136[139].i64[1] = v288;
    v291 = v136[139].i64[0];
    v292 = operator new[]();
    v293 = v292;
    if (v272)
    {
      v294 = 0;
      if (v272 < 4)
        goto LABEL_414;
      if ((unint64_t)(v292 - v291) < 0x20)
        goto LABEL_414;
      v294 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      v295 = (_OWORD *)(v292 + 16);
      v296 = (__int128 *)(v291 + 16);
      v297 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v298 = *v296;
        *(v295 - 1) = *(v296 - 1);
        *v295 = v298;
        v295 += 2;
        v296 += 2;
        v297 -= 4;
      }
      while (v297);
      if (v272 != v294)
      {
LABEL_414:
        v299 = v272 - v294;
        v300 = 8 * v294;
        v301 = (uint64_t *)(v291 + 8 * v294);
        v302 = (_QWORD *)(v292 + v300);
        do
        {
          v303 = *v301++;
          *v302++ = v303;
          --v299;
        }
        while (v299);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v293;
    *(_QWORD *)(v293 + 8 * v136[140].i64[0]) = v287;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_422;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v310 = *(_QWORD *)(v137 + 896);
    v311 = *(_QWORD *)(v137 + 904);
    while (v310 != v311)
    {
      v312 = *(_QWORD *)(v310 + 208);
      if (*(_BYTE *)(v310 + 496)
        || (*(_BYTE *)(v312 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v310 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v312);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v310 + 216));
      }
      v310 += 504;
    }
    v313 = *(_QWORD *)(v137 + 920);
    v314 = *(_QWORD *)(v137 + 928);
    while (v313 != v314)
    {
      v315 = *(_QWORD *)(v313 + 136);
      if (*(_BYTE *)(v313 + 272) || (*(_BYTE *)(v315 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v315);
      v313 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v316 = *(_QWORD *)(v137 + 1016);
    v317 = *(_QWORD *)(v137 + 1024);
    while (v316 != v317)
    {
      v318 = *(_QWORD *)(v316 + 736);
      if (*(_BYTE *)(v316 + 880)
        || (*(_BYTE *)(v318 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v316 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v318);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v316 + 744));
      }
      v316 += 888;
    }
    v319 = (uint64_t)(*(_QWORD *)(v137 + 1808) - *(_QWORD *)(v137 + 1800)) >> 2;
    if (v319 <= v408)
      v308 = v408 - v319;
    else
      v308 = 0;
    result = sub_20F59A618(v138);
    v305 = v136[140].u64[0];
  }
  else
  {
    v308 = v408;
  }
LABEL_456:
  v320 = v308;
  v136[106].i64[0] += v308;
  v136[106].i64[1] += 4 * v308;
  v321 = v305 + 1;
  v322 = v136[139].u64[1];
  if (v305 + 1 <= v322)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v305) = v308;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_473:
      v339 = *(_QWORD *)(v137 + 704);
      v340 = *(_QWORD *)(v137 + 712);
      if (v339 == v340)
      {
        v341 = 0;
      }
      else
      {
        v341 = 0;
        do
        {
          v342 = *(_QWORD *)(v339 + 8);
          if ((*(_BYTE *)(v342 + 4) & 6) == 0)
            v341 += *(unsigned __int8 *)(v342 + 20);
          v339 += 16;
        }
        while (v339 != v340);
      }
      goto LABEL_507;
    }
  }
  else
  {
    v323 = 2 * v322;
    if (v323 > v321)
      v321 = v323;
    v136[139].i64[1] = v321;
    v324 = v136[139].i64[0];
    v325 = operator new[]();
    v326 = v325;
    if (v305)
    {
      v327 = 0;
      if (v305 < 4)
        goto LABEL_465;
      if ((unint64_t)(v325 - v324) < 0x20)
        goto LABEL_465;
      v327 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      v328 = (_OWORD *)(v325 + 16);
      v329 = (__int128 *)(v324 + 16);
      v330 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v331 = *v329;
        *(v328 - 1) = *(v329 - 1);
        *v328 = v331;
        v328 += 2;
        v329 += 2;
        v330 -= 4;
      }
      while (v330);
      if (v305 != v327)
      {
LABEL_465:
        v332 = v305 - v327;
        v333 = 8 * v327;
        v334 = (uint64_t *)(v324 + 8 * v327);
        v335 = (_QWORD *)(v325 + v333);
        do
        {
          v336 = *v334++;
          *v335++ = v336;
          --v332;
        }
        while (v332);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v326;
    *(_QWORD *)(v326 + 8 * v136[140].i64[0]) = v320;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_473;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v343 = *(_QWORD *)(v137 + 896);
    v344 = *(_QWORD *)(v137 + 904);
    while (v343 != v344)
    {
      v345 = *(_QWORD *)(v343 + 208);
      if (*(_BYTE *)(v343 + 496)
        || (*(_BYTE *)(v345 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v343 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v345);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v343 + 216));
      }
      v343 += 504;
    }
    v346 = *(_QWORD *)(v137 + 920);
    v347 = *(_QWORD *)(v137 + 928);
    while (v346 != v347)
    {
      v348 = *(_QWORD *)(v346 + 136);
      if (*(_BYTE *)(v346 + 272) || (*(_BYTE *)(v348 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v348);
      v346 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v349 = *(_QWORD *)(v137 + 1016);
    v350 = *(_QWORD *)(v137 + 1024);
    while (v349 != v350)
    {
      v351 = *(_QWORD *)(v349 + 736);
      if (*(_BYTE *)(v349 + 880)
        || (*(_BYTE *)(v351 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v349 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v351);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v349 + 744));
      }
      v349 += 888;
    }
    v352 = (uint64_t)(*(_QWORD *)(v137 + 1832) - *(_QWORD *)(v137 + 1824)) >> 2;
    if (v352 <= v409)
      v341 = v409 - v352;
    else
      v341 = 0;
    result = sub_20F59A618(v138);
    v338 = v136[140].u64[0];
  }
  else
  {
    v341 = v409;
  }
LABEL_507:
  v353 = v341;
  v136[106].i64[0] += v341;
  v136[106].i64[1] += 3 * v341;
  v354 = v338 + 1;
  v355 = v136[139].u64[1];
  if (v338 + 1 <= v355)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v338) = v341;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_524:
      v372 = *(_QWORD *)(v137 + 800);
      v373 = *(_QWORD *)(v137 + 808);
      if (v372 == v373)
      {
        v374 = 0;
      }
      else
      {
        v374 = 0;
        do
        {
          v375 = *(_QWORD *)(v372 + 8);
          if ((*(_BYTE *)(v375 + 4) & 6) == 0)
            v374 += *(unsigned __int8 *)(v375 + 20);
          v372 += 16;
        }
        while (v372 != v373);
      }
      goto LABEL_558;
    }
  }
  else
  {
    v356 = 2 * v355;
    if (v356 > v354)
      v354 = v356;
    v136[139].i64[1] = v354;
    v357 = v136[139].i64[0];
    v358 = operator new[]();
    v359 = v358;
    if (v338)
    {
      v360 = 0;
      if (v338 < 4)
        goto LABEL_516;
      if ((unint64_t)(v358 - v357) < 0x20)
        goto LABEL_516;
      v360 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      v361 = (_OWORD *)(v358 + 16);
      v362 = (__int128 *)(v357 + 16);
      v363 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v364 = *v362;
        *(v361 - 1) = *(v362 - 1);
        *v361 = v364;
        v361 += 2;
        v362 += 2;
        v363 -= 4;
      }
      while (v363);
      if (v338 != v360)
      {
LABEL_516:
        v365 = v338 - v360;
        v366 = 8 * v360;
        v367 = (uint64_t *)(v357 + 8 * v360);
        v368 = (_QWORD *)(v358 + v366);
        do
        {
          v369 = *v367++;
          *v368++ = v369;
          --v365;
        }
        while (v365);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v359;
    *(_QWORD *)(v359 + 8 * v136[140].i64[0]) = v353;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_524;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v376 = *(_QWORD *)(v137 + 896);
    v377 = *(_QWORD *)(v137 + 904);
    while (v376 != v377)
    {
      v378 = *(_QWORD *)(v376 + 208);
      if (*(_BYTE *)(v376 + 496)
        || (*(_BYTE *)(v378 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v376 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v378);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v376 + 216));
      }
      v376 += 504;
    }
    v379 = *(_QWORD *)(v137 + 920);
    v380 = *(_QWORD *)(v137 + 928);
    while (v379 != v380)
    {
      v381 = *(_QWORD *)(v379 + 136);
      if (*(_BYTE *)(v379 + 272) || (*(_BYTE *)(v381 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v381);
      v379 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v382 = *(_QWORD *)(v137 + 1016);
    v383 = *(_QWORD *)(v137 + 1024);
    while (v382 != v383)
    {
      v384 = *(_QWORD *)(v382 + 736);
      if (*(_BYTE *)(v382 + 880)
        || (*(_BYTE *)(v384 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v382 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v384);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v382 + 744));
      }
      v382 += 888;
    }
    v385 = (uint64_t)(*(_QWORD *)(v137 + 1856) - *(_QWORD *)(v137 + 1848)) >> 2;
    if (v385 <= v410)
      v374 = v410 - v385;
    else
      v374 = 0;
    result = sub_20F59A618(v138);
    v371 = v136[140].u64[0];
  }
  else
  {
    v374 = v410;
  }
LABEL_558:
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v374));
  v386 = v371 + 1;
  v387 = v136[139].u64[1];
  if (v371 + 1 <= v387)
  {
    v391 = v136[139].i64[0];
  }
  else
  {
    v388 = 2 * v387;
    if (v388 > v386)
      v386 = v388;
    v136[139].i64[1] = v386;
    v389 = v136[139].i64[0];
    v390 = operator new[]();
    v391 = v390;
    if (v371)
    {
      v392 = 0;
      if (v371 < 4)
        goto LABEL_567;
      if ((unint64_t)(v390 - v389) < 0x20)
        goto LABEL_567;
      v392 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      v393 = (_OWORD *)(v390 + 16);
      v394 = (__int128 *)(v389 + 16);
      v395 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v396 = *v394;
        *(v393 - 1) = *(v394 - 1);
        *v393 = v396;
        v393 += 2;
        v394 += 2;
        v395 -= 4;
      }
      while (v395);
      if (v371 != v392)
      {
LABEL_567:
        v397 = v371 - v392;
        v398 = 8 * v392;
        v399 = (uint64_t *)(v389 + 8 * v392);
        v400 = (_QWORD *)(v390 + v398);
        do
        {
          v401 = *v399++;
          *v400++ = v401;
          --v397;
        }
        while (v397);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v391;
    v371 = v136[140].u64[0];
  }
  *(_QWORD *)(v391 + 8 * v371) = v374;
  ++v136[140].i64[0];
  return result;
}

void sub_20F775588(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77559C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7755B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7755C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7755D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7755EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775600(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775614(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775628(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77563C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775650(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775664(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775678(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77568C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7756A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7756B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7756C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7756DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7756F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775704(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775718(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77572C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775740(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775754(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775768(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F77577C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F775790(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7757A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7757B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7757CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7757E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7757F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

double sub_20F775808(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  double v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v36;
  double *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint64_t *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  double v64;
  double v66;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  int8x16_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t *v77;
  int8x16_t v78;
  float64_t v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  _OWORD *v85;
  int v86;
  uint64_t v89;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v104;
  __int128 *v105;
  __int128 *v106;
  __int128 v107;
  __int128 v110;
  double v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  double *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double *v140;
  int v141;
  uint64_t v142;
  double v145;
  long double v146;
  long double v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  _OWORD *v151;
  _BOOL4 v152;
  uint64_t v153;
  __int128 v154;
  double v161;
  double v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v175;
  uint64_t v176;
  uint64_t v178;
  double v179;
  double v180;
  uint64_t v181;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  double v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  unint64_t v232;
  double v233;
  unint64_t v234;
  double *v235;
  uint64_t v236;
  double v239;
  long double v240;
  long double v241;
  long double v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  __int128 v247;
  unint64_t v253;
  uint64_t v254;
  double v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v264;
  float64x2_t v265;
  _QWORD *v266;
  double *v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  float64_t v271;
  float64x2_t v272;
  double v273;
  float64x2_t v274;
  uint64_t v275;
  double v276;
  char v277;

  kdebug_trace();
  v11 = a2[66];
  if (v11 > 5)
    goto LABEL_15;
  v12 = a2[65];
  if (v12 >= 6)
  {
    v16 = (_QWORD *)a2[64];
  }
  else
  {
    v13 = 2 * v12;
    if (v13 <= 6)
      v13 = 6;
    a2[65] = v13;
    v14 = (_QWORD *)a2[64];
    v15 = (_QWORD *)operator new[]();
    v16 = v15;
    if (v11)
    {
      *v15 = *v14;
      if (v11 != 1)
      {
        v15[1] = v14[1];
        if (v11 != 2)
        {
          v15[2] = v14[2];
          if (v11 != 3)
          {
            v15[3] = v14[3];
            if (v11 != 4)
              v15[4] = v14[4];
          }
        }
      }
    }
    v17 = (_QWORD *)a2[64];
    if (v17 != a2 && v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    a2[64] = v16;
    v11 = a2[66];
    if (v11 > 5)
    {
LABEL_15:
      a2[66] = 6;
      if (*(_BYTE *)(a1 + 1876))
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  bzero(&v16[v11], 48 - 8 * v11);
  a2[66] = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
LABEL_16:
    v18 = *(_QWORD *)(a1 + 896);
    v19 = *(__int128 **)(a1 + 904);
    v20 = 0.0;
    v21 = 0.0;
    if ((__int128 *)v18 == v19)
      goto LABEL_72;
    if (*(_BYTE *)(a1 + 1875))
    {
      v22 = (unint64_t)v19 - v18 - 504;
      if (v22 < 0x1F8)
      {
        v23 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_71:
          v21 = v21 + *(double *)(v23 + 464);
          v23 += 504;
        }
        while ((__int128 *)v23 != v19);
        goto LABEL_72;
      }
      v163 = v22 / 0x1F8 + 1;
      v23 = v18 + 504 * (v163 & 0x1FFFFFFFFFFFFFELL);
      v164 = v163 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v21 = v21 + *(double *)(v18 + 464) + *(double *)(v18 + 968);
        v18 += 1008;
        v164 -= 2;
      }
      while (v164);
      if (v163 != (v163 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_71;
    }
    else
    {
      v105 = (__int128 *)(v18 + 344);
      do
      {
        if (*((_BYTE *)v105 + 128))
        {
          *((_QWORD *)v105 + 14) = *((_QWORD *)v105 - 1);
          v107 = *(__int128 *)((char *)v105 - 24);
          _Q5 = *(__int128 *)((char *)v105 - 56);
          v105[5] = *(__int128 *)((char *)v105 - 40);
          v105[6] = v107;
          _Q4 = *(__int128 *)((char *)v105 - 88);
          v105[3] = *(__int128 *)((char *)v105 - 72);
          v105[4] = _Q5;
          v110 = *(__int128 *)((char *)v105 - 120);
          v105[1] = *(__int128 *)((char *)v105 - 104);
          v105[2] = _Q4;
          *v105 = v110;
          _Q17 = *v105;
          _D19 = *((_QWORD *)v105 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v105 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v105 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v105 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v105 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v105 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v105 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v123 = *(double *)(a1 + 16) * (_D18 + *((double *)v105 + 14) * *((double *)v105 + 14));
          *((double *)v105 + 15) = v123;
          v21 = v21 + v123;
        }
        v106 = v105 + 10;
        v105 = (__int128 *)((char *)v105 + 504);
      }
      while (v106 != v19);
    }
LABEL_72:
    v134 = (double *)a2[64];
    *v134 = v21 * 0.5;
    v165 = *(_QWORD *)(a1 + 920);
    v166 = *(_QWORD *)(a1 + 928);
    if (v165 == v166)
      goto LABEL_85;
    if (*(_BYTE *)(a1 + 1875))
    {
      v167 = v166 - v165 - 280;
      v20 = 0.0;
      if (v167 < 0x118)
      {
        v168 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_84:
          v20 = v20 + *(double *)(v168 + 240);
          v168 += 280;
        }
        while (v168 != v166);
        goto LABEL_85;
      }
      v175 = v167 / 0x118 + 1;
      v168 = v165 + 280 * (v175 & 0x1FFFFFFFFFFFFFELL);
      v176 = v175 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v20 = v20 + *(double *)(v165 + 240) + *(double *)(v165 + 520);
        v165 += 560;
        v176 -= 2;
      }
      while (v176);
      if (v175 != (v175 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_84;
    }
    else
    {
      v20 = 0.0;
      do
      {
        if (*(_BYTE *)(v165 + 248))
        {
          v169 = *(_OWORD *)(v165 + 160);
          *(_OWORD *)(v165 + 192) = *(_OWORD *)(v165 + 144);
          *(_OWORD *)(v165 + 208) = v169;
          _Q3 = *(_OWORD *)(v165 + 192);
          *(_OWORD *)(v165 + 224) = *(_OWORD *)(v165 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v169 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v165 + 240) = v169;
          v20 = v20 + *(double *)&v169;
        }
        v165 += 280;
      }
      while (v165 != v166);
      v134 = (double *)a2[64];
    }
LABEL_85:
    v134[1] = v20 * 0.5;
    _X10 = *(_QWORD *)(a1 + 944);
    v178 = *(_QWORD *)(a1 + 952);
    v179 = 0.0;
    if (_X10 == v178)
    {
      v180 = 0.0;
      goto LABEL_99;
    }
    if (*(_BYTE *)(a1 + 1875))
    {
      v180 = 0.0;
      if ((unint64_t)(v178 - _X10 - 8016) >> 4 < 0x1F5)
      {
        v181 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_98:
          v180 = v180 + *(double *)(v181 + 7976);
          v181 += 8016;
        }
        while (v181 != v178);
        goto LABEL_99;
      }
      v203 = (v178 - _X10 - 8016) / 0x1F50uLL + 1;
      v181 = _X10 + 8016 * (v203 & 0x1FFFFFFFFFFFFELL);
      v204 = v203 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v180 = v180 + *(double *)(_X10 + 7976) + *(double *)(_X10 + 15992);
        _X10 += 16032;
        v204 -= 2;
      }
      while (v204);
      if (v203 != (v203 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_98;
    }
    else
    {
      v180 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x7D20] }
        if (*(_BYTE *)(_X10 + 7984))
        {
          _X14 = _X10 + 31904;
          *(_QWORD *)(_X10 + 7968) = *(_QWORD *)(_X10 + 7848);
          v184 = *(_OWORD *)(_X10 + 7816);
          *(_OWORD *)(_X10 + 7920) = *(_OWORD *)(_X10 + 7800);
          *(_OWORD *)(_X10 + 7936) = v184;
          *(_OWORD *)(_X10 + 7952) = *(_OWORD *)(_X10 + 7832);
          v185 = *(_OWORD *)(_X10 + 7752);
          *(_OWORD *)(_X10 + 7856) = *(_OWORD *)(_X10 + 7736);
          *(_OWORD *)(_X10 + 7872) = v185;
          v186 = *(_OWORD *)(_X10 + 7784);
          *(_OWORD *)(_X10 + 7888) = *(_OWORD *)(_X10 + 7768);
          *(_OWORD *)(_X10 + 7904) = v186;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X10 + 7856);
          _D19 = *(_QWORD *)(_X10 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X10 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X10 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v202 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X10 + 7968) * *(double *)(_X10 + 7968));
          *(double *)(_X10 + 7976) = v202;
          v180 = v180 + v202;
        }
        _X10 += 8016;
      }
      while (_X10 != v178);
      v134 = (double *)a2[64];
    }
LABEL_99:
    v134[2] = v180 * 0.5;
    _X10 = *(_QWORD *)(a1 + 968);
    v206 = *(_QWORD *)(a1 + 976);
    if (_X10 == v206)
      goto LABEL_112;
    if (*(_BYTE *)(a1 + 1875))
    {
      v207 = v206 - _X10 - 5336;
      v179 = 0.0;
      if (v207 >> 3 < 0x29B)
      {
        v208 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_111:
          v179 = v179 + *(double *)(v208 + 5296);
          v208 += 5336;
        }
        while (v208 != v206);
        goto LABEL_112;
      }
      v227 = v207 / 0x14D8 + 1;
      v208 = _X10 + 5336 * (v227 & 0x1FFFFFFFFFFFFELL);
      v228 = v227 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v179 = v179 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v228 -= 2;
      }
      while (v228);
      if (v227 != (v227 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_111;
    }
    else
    {
      v179 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v226 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v226;
          v179 = v179 + v226;
        }
        _X10 += 5336;
      }
      while (_X10 != v206);
      v134 = (double *)a2[64];
    }
LABEL_112:
    v134[3] = v179 * 0.5;
    v229 = *(_QWORD *)(a1 + 992);
    v230 = *(_QWORD *)(a1 + 1000);
    v231 = 0.0;
    if (v229 == v230)
    {
      v233 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 1875))
    {
      v232 = v230 - v229 - 216;
      v233 = 0.0;
      if (v232 < 0xD8)
        goto LABEL_143;
      v234 = v232 / 0xD8 + 1;
      v235 = (double *)(v229 + 392);
      v236 = v234 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v233 = v233 + *(v235 - 27) + *v235;
        v235 += 54;
        v236 -= 2;
      }
      while (v236);
      v229 += 216 * (v234 & 0x3FFFFFFFFFFFFFELL);
      if (v234 != (v234 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_143:
        do
        {
          v233 = v233 + *(double *)(v229 + 176);
          v229 += 216;
        }
        while (v229 != v230);
      }
    }
    else
    {
      v233 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 184))
        {
          *(_OWORD *)(v229 + 160) = *(_OWORD *)(v229 + 144);
          v265 = *(float64x2_t *)(v229 + 160);
          _D1 = v265.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v239 = *(double *)(a1 + 88);
          v240 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
          v241 = v240 + 1.0;
          v242 = v239 * log1p(v240);
          *(long double *)(v229 + 176) = v242;
          *(float64x2_t *)(v229 + 160) = vmulq_n_f64(v265, sqrt(1.0 / v241));
          v233 = v233 + v242;
        }
        v229 += 216;
      }
      while (v229 != v230);
      v134 = (double *)a2[64];
    }
    v134[4] = v233 * 0.5;
    v243 = *(_QWORD *)(a1 + 1016);
    v244 = *(_QWORD *)(a1 + 1024);
    if (v243 == v244)
      goto LABEL_139;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v231 = 0.0;
      do
      {
        if (*(_BYTE *)(v243 + 856))
        {
          v247 = *(_OWORD *)(v243 + 768);
          *(_OWORD *)(v243 + 800) = *(_OWORD *)(v243 + 752);
          *(_OWORD *)(v243 + 816) = v247;
          _Q2 = *(_OWORD *)(v243 + 800);
          *(_OWORD *)(v243 + 832) = *(_OWORD *)(v243 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v247 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v243 + 848) = v247;
          v231 = v231 + *(double *)&v247;
        }
        v243 += 888;
      }
      while (v243 != v244);
      v134 = (double *)a2[64];
      goto LABEL_139;
    }
    v245 = v244 - v243 - 888;
    v231 = 0.0;
    if (v245 >= 0x378)
    {
      v253 = v245 / 0x378 + 1;
      v246 = v243 + 888 * (v253 & 0xFFFFFFFFFFFFFELL);
      v254 = v253 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v231 = v231 + *(double *)(v243 + 848) + *(double *)(v243 + 1736);
        v243 += 1776;
        v254 -= 2;
      }
      while (v254);
      if (v253 == (v253 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_139;
    }
    else
    {
      v246 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v231 = v231 + *(double *)(v246 + 848);
      v246 += 888;
    }
    while (v246 != v244);
LABEL_139:
    v162 = v231 * 0.5;
    goto LABEL_140;
  }
LABEL_22:
  v24 = (double *)(a1 + 8);
  v25 = (_QWORD *)(a1 + 120);
  v266 = (_QWORD *)(a1 + 120);
  v267 = (double *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 896);
  v27 = *(_QWORD *)(a1 + 904);
  v28 = 0.0;
  v29 = 0.0;
  if (v26 != v27)
  {
    do
    {
      while (1)
      {
        v30 = (__int128 *)(v26 + 344);
        v31 = sub_20F4AFF88((char *)(v26 + 8), (float64x2_t **)(v26 + 208), v26 + 344);
        *(_BYTE *)(v26 + 472) = v31;
        if (v31)
          break;
        *(_QWORD *)(v26 + 464) = 0;
        v26 += 504;
        if (v26 == v27)
          goto LABEL_29;
      }
      v32 = *(_QWORD *)(v26 + 480);
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26 + 344);
      _Q1 = *(_OWORD *)(v26 + 408);
      v33 = *(_OWORD *)(v26 + 424);
      _Q3 = *(_OWORD *)(v26 + 392);
      *(_OWORD *)(v26 + 288) = _Q1;
      *(_OWORD *)(v26 + 304) = v33;
      _Q2 = *(float64x2_t *)(v26 + 424);
      *(_OWORD *)(v26 + 320) = *(_OWORD *)(v26 + 440);
      *(_QWORD *)(v26 + 336) = *(_QWORD *)(v26 + 456);
      v36 = *(_OWORD *)(v26 + 360);
      _Q5 = *v30;
      _V7.D[1] = *((_QWORD *)&v36 + 1);
      *(_OWORD *)(v26 + 224) = *v30;
      *(_OWORD *)(v26 + 240) = v36;
      _Q4 = *(_OWORD *)(v26 + 376);
      v4 = *(float64x2_t *)(v26 + 392);
      *(_OWORD *)(v26 + 256) = _Q4;
      *(float64x2_t *)(v26 + 272) = v4;
      _Q6 = *(float64x2_t *)(v26 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v26 + 456) * *(double *)(v26 + 456));
      *(float64_t *)(v26 + 464) = v4.f64[0];
      v29 = v29 + v4.f64[0];
      v26 += 504;
    }
    while (v26 != v27);
LABEL_29:
    v25 = v266;
    v24 = v267;
  }
  v52 = (double *)a2[64];
  *v52 = v29 * 0.5;
  v53 = (int8x16_t *)v25[100];
  v54 = (int8x16_t *)v25[101];
  if (v53 != v54)
  {
    v55 = v53 + 16;
    v28 = 0.0;
    do
    {
      while (!v55[-9].i64[1])
      {
        v55[-1].i8[8] = 0;
        v55[-1].i64[0] = 0;
        v56 = &v55[1].i64[1];
        v55 = (int8x16_t *)((char *)v55 + 280);
        if (v56 == (uint64_t *)v54)
          goto LABEL_37;
      }
      v57 = v55[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v57 + 48);
      v58 = *(float64x2_t *)(v57 + 32);
      _D2 = *(double *)(v57 + 72);
      v60 = *(float64x2_t *)(v57 + 56);
      _D4 = *(double *)(v57 + 96);
      v62 = *(float64x2_t *)(v57 + 80);
      *(_QWORD *)&_Q6.f64[0] = v55[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v55[-15] + 8);
      v64 = *(double *)v55[-12].i64;
      _Q17 = (float64x2_t)v55[-13];
      v66 = *(double *)&v55[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v55[-12] + 8);
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q7.f64[0]), v60, _Q17.f64[0]), v62, _Q19.f64[0]);
      v69 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v70 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v58, _Q7, 1), v60, _Q17, 1), v62, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v269 = v69;
      v268 = v68;
      v271 = _Q7.f64[0];
      v270 = v70;
      v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q6.f64[0]), v60, v64), v62, v66);
      v273 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v64 + _D4 * v66;
      v275 = 0;
      v274 = 0uLL;
      sub_20E9733B8(&v268, v274.f64);
      v71 = v55 - 4;
      v72 = v274;
      v55[-3].i64[0] = v275;
      v55[-4] = (int8x16_t)v72;
      v72.f64[0] = *(float64_t *)(v57 + 120);
      *(_QWORD *)&v73.f64[0] = v55[-9].i64[0];
      *(float64x2_t *)((char *)&v55[-3] + 8) = vsubq_f64(*(float64x2_t *)(v57 + 104), (float64x2_t)v55[-10]);
      v55[-2].i64[1] = *(_OWORD *)&vsubq_f64(v72, v73);
      v74 = (float64x2_t *)v55[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v55[-2], v74[3]);
      v75 = (int8x16_t)vmulq_f64((float64x2_t)v55[-3], v74[2]);
      v76 = (int8x16_t)vmulq_f64((float64x2_t)v55[-4], v74[1]);
      v55[-4] = v76;
      v55[-3] = v75;
      v55[-2] = (int8x16_t)v4;
      v55[-1].i8[8] = 1;
      if (v55->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v55->i64[0] + 24))(v55->i64[0], v55 - 4);
        v75 = v55[-3];
        v4 = (float64x2_t)v55[-2];
        v76 = *v71;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v75, v75, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v76, v76, 8uLL).i64;
      v77 = v55 - 7;
      v78 = v55[-3];
      *v77 = *v71;
      v77[1] = v78;
      _Q6 = (float64x2_t)v55[-2];
      v77[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v79 = _Q2.f64[0] + *(double *)v75.i64 * *(double *)v75.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v24[3];
      v80 = v5 * v79;
      *(double *)v55[-1].i64 = v80;
      v28 = v28 + v80;
      v81 = &v55[1].i64[1];
      v55 = (int8x16_t *)((char *)v55 + 280);
    }
    while (v81 != (uint64_t *)v54);
LABEL_37:
    v52 = (double *)a2[64];
    v25 = v266;
    v24 = v267;
  }
  v52[1] = v28 * 0.5;
  v82 = v25[103];
  v83 = v25[104];
  if (v82 == v83)
  {
    v84 = 0.0;
  }
  else
  {
    v84 = 0.0;
    do
    {
      while (1)
      {
        v85 = (_OWORD *)(v82 + 7856);
        v86 = sub_20F4B0BC8();
        *(_BYTE *)(v82 + 7984) = v86;
        if (v86)
          break;
        *(_QWORD *)(v82 + 7976) = 0;
        v82 += 8016;
        if (v82 == v83)
          goto LABEL_45;
      }
      _X8 = v82 + 24024;
      __asm { PRFM            #0, [X8] }
      v89 = *(_QWORD *)(v82 + 7992);
      if (v89)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v82 + 7856);
      _X8 = v82 + 23888;
      v91 = *(_OWORD *)(v82 + 7936);
      *(_OWORD *)(v82 + 7800) = *(_OWORD *)(v82 + 7920);
      *(_OWORD *)(v82 + 7816) = v91;
      _Q2 = *(float64x2_t *)(v82 + 7936);
      *(_OWORD *)(v82 + 7832) = *(_OWORD *)(v82 + 7952);
      *(_QWORD *)(v82 + 7848) = *(_QWORD *)(v82 + 7968);
      v92 = *(_OWORD *)(v82 + 7872);
      *(_OWORD *)(v82 + 7736) = *v85;
      *(_OWORD *)(v82 + 7752) = v92;
      v93 = *(_OWORD *)(v82 + 7904);
      *(_OWORD *)(v82 + 7768) = *(_OWORD *)(v82 + 7888);
      *(_OWORD *)(v82 + 7784) = v93;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v82 + 7872);
      _Q7 = *v85;
      _D17 = *(_QWORD *)(v82 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v82 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v82 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v82 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v82 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v24[5];
      v104 = v5 * (_D16 + *(double *)(v82 + 7968) * *(double *)(v82 + 7968));
      *(double *)(v82 + 7976) = v104;
      v84 = v84 + v104;
      v82 += 8016;
    }
    while (v82 != v83);
LABEL_45:
    v52 = (double *)a2[64];
    v24 = v267;
  }
  v52[2] = v84 * 0.5;
  v277 = *(_BYTE *)(a1 + 1875);
  v276 = 0.0;
  v124 = v266[106];
  v125 = v266[107];
  *(_QWORD *)&v268.f64[0] = &v277;
  *(_QWORD *)&v268.f64[1] = v24 + 6;
  v269 = COERCE_DOUBLE(&v266);
  *(_QWORD *)&v270.f64[0] = &v276;
  sub_20F4D78F4(&v274, v124, v125, (uint64_t)&v268, v84 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v133 = v276 * 0.5;
  v134 = (double *)a2[64];
  v134[3] = v276 * 0.5;
  v135 = v266;
  v136 = v266[109];
  v137 = v266[110];
  v138 = 0.0;
  v139 = 0.0;
  if (v136 != v137)
  {
    v140 = v267;
    do
    {
      while (1)
      {
        v141 = sub_20FC7133C(v136 + 8, (uint64_t *)(v136 + 56), v136 + 160, v133, v126.f64[0], v127, v128, v129, v130, v131, v132);
        *(_BYTE *)(v136 + 184) = v141;
        if (v141)
          break;
        *(_QWORD *)(v136 + 176) = 0;
        v136 += 216;
        if (v136 == v137)
          goto LABEL_58;
      }
      v142 = *(_QWORD *)(v136 + 192);
      if (v142)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 24))(v142, v136 + 160);
      *(_OWORD *)(v136 + 144) = *(_OWORD *)(v136 + 160);
      v264 = *(float64x2_t *)(v136 + 160);
      _D1 = v264.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v145 = v140[10];
      v146 = v140[11] * (v140[9] * _D0);
      v147 = v146 + 1.0;
      v133 = v145 * log1p(v146);
      *(double *)(v136 + 176) = v133;
      v127 = v264.f64[0];
      v126 = vmulq_n_f64(v264, sqrt(1.0 / v147));
      *(float64x2_t *)(v136 + 160) = v126;
      v139 = v139 + v133;
      v136 += 216;
    }
    while (v136 != v137);
LABEL_58:
    v134 = (double *)a2[64];
    v135 = v266;
  }
  v134[4] = v139 * 0.5;
  v148 = v135[112];
  v149 = v135[113];
  if (v148 != v149)
  {
    v138 = 0.0;
    v150 = v267;
    do
    {
      while (1)
      {
        v151 = (_OWORD *)(v148 + 800);
        v152 = sub_20F3E115C(v148 + 8, (_QWORD *)(v148 + 736), (float64x2_t *)(v148 + 800));
        *(_BYTE *)(v148 + 856) = v152;
        if (v152)
          break;
        *(_QWORD *)(v148 + 848) = 0;
        v148 += 888;
        if (v148 == v149)
          goto LABEL_66;
      }
      v153 = *(_QWORD *)(v148 + 864);
      if (v153)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 24))(v153, v148 + 800);
      v154 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 752) = *v151;
      *(_OWORD *)(v148 + 768) = v154;
      _Q2 = *v151;
      _Q1 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 784) = *(_OWORD *)(v148 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v148 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v161 = v150[13] * _D3;
      *(double *)(v148 + 848) = v161;
      v138 = v138 + v161;
      v148 += 888;
    }
    while (v148 != v149);
LABEL_66:
    v134 = (double *)a2[64];
  }
  v162 = v138 * 0.5;
LABEL_140:
  v134[5] = v162;
  *(_WORD *)(a1 + 1875) = 257;
  v255 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v256 = (double *)a2[64];
  v257 = *v256;
  v258 = v256[1];
  v259 = v256[2];
  v260 = v256[3];
  v261 = v256[4];
  v262 = v256[5];
  kdebug_trace();
  return v255 + v257 + v258 + v259 + v260 + v261 + v262;
}

void sub_20F7768C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7768D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7768EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F776900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F776914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F776928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F77693C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F776950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double *sub_20F776964(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  __n128 v23;
  __n128 v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  double *result;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD v36[64];
  double *v37;
  __int128 v38;
  uint64_t v39;

  v37 = (double *)v36;
  v38 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3)
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4)
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3)
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3)
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v38 = v6;
    v7 = (double *)operator new[]();
    if (v37 != (double *)v36 && v37)
      MEMORY[0x212BC6368]();
    v37 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v38 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62CB00((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62CCF4((uint64_t)&v39, v36, v9, v10, v11, v12, v13, v14, v15);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D074((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D2BC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D57C((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D7C4((uint64_t)&v39, v36, v16, v17, v18, v19, v20, v21, v22);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62DC70((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62DE48((uint64_t)&v39, v36, v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62E070((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62E274((uint64_t)&v39, v36);
  }
  v31 = *((_QWORD *)&v38 + 1);
  result = v37;
  if (!*((_QWORD *)&v38 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v38 + 1) = 0;
    if (result == (double *)v36)
      return result;
    goto LABEL_34;
  }
  v33 = *((_QWORD *)&v38 + 1) >> 1;
  sub_20E8FB210(v37, &v37[*((_QWORD *)&v38 + 1) >> 1], &v37[*((_QWORD *)&v38 + 1)]);
  result = v37;
  v34 = v37[v33];
  if ((v31 & 1) == 0)
  {
    v35 = v33 - 1;
    if (v35 != v31)
    {
      sub_20E8FB210(v37, &v37[v35], &v37[v31]);
      result = v37;
    }
    v34 = (v34 + result[v35]) * 0.5;
  }
  *a2 = v8 * sqrt(v34);
  *((_QWORD *)&v38 + 1) = 0;
  if (result != (double *)v36)
  {
LABEL_34:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F776CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

_QWORD **sub_20F776D00(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F7859E0(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C40DA2C9B81);
  }
  return a1;
}

uint64_t sub_20F776D44(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  float64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  __int128 *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v35;
  int8x16_t v36;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  float64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  int v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  unsigned int v95;
  int v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _DWORD *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  __int128 *v140;
  unsigned __int8 v141;
  uint64_t v143;
  uint64_t i;
  unsigned __int8 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t j;
  uint64_t v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v186;
  int v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  __int128 v198;
  char *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  double v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _QWORD *v229;
  float64x2_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v242;
  char v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 *v256;
  __int128 *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int *v261;
  __int128 *v262;
  unsigned int v263;
  int v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  const char *v268;
  size_t v269;
  unsigned __int8 v270;
  unsigned __int8 v271;
  const char *v272;
  size_t v273;
  _BYTE *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t v280;
  size_t v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _DWORD *v289;
  char *v290;
  uint64_t v291;
  const char *v292;
  void *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  int v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  void *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  int v318;
  int v319;
  unint64_t v320;
  uint64_t v321;
  const char *v322;
  size_t v323;
  unsigned __int8 v324;
  unsigned __int8 v325;
  const char *v326;
  size_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE *v331;
  NSObject *v332;
  uint64_t v333;
  uint64_t v334;
  size_t v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  const char *v345;
  void *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  void *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  char v372;
  char *v373;
  float64x2_t v375;
  __int128 v376;
  float64x2_t v379;
  int8x16_t v380;
  int8x16_t v381;
  float64x2_t v382;
  float64x2_t v384;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  int8x16_t v394;
  char *v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  _DWORD *v406;
  int64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  _OWORD *v412;
  char *v413;
  uint64_t v414;
  __int128 v415;
  int v416;
  __int128 *v417;
  __int128 *v418;
  unint64_t v419;
  unint64_t v420;
  unsigned int *v421;
  __int128 *v422;
  unsigned int v423;
  uint64_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  char *v429;
  unint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  _DWORD *v440;
  int64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  _OWORD *v446;
  char *v447;
  uint64_t v448;
  __int128 v449;
  int v450;
  char v451;
  _QWORD *v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 v456;
  unsigned int v457;
  unint64_t v458;
  char v459;
  unsigned int v460;
  uint64_t v461;
  _QWORD *v462;
  _QWORD *v463;
  _QWORD *v464;
  _QWORD *v465;
  _QWORD *v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v470;
  _QWORD *v471;
  uint64_t *v472;
  uint64_t *v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  _BOOL4 v483;
  int8x16_t v484;
  int8x16_t v485;
  _QWORD *v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v495;
  std::__shared_weak_count *v496;
  unint64_t *p_shared_owners;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unsigned int v505;
  unint64_t *v506;
  unint64_t v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  int8x16_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  __int128 v549;
  __int128 v550;
  uint64_t v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;
  __int128 v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  __int128 v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  __int128 v574;
  unint64_t *v575;
  unsigned int v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  __int8 v582;
  int v583;
  uint64_t v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  char *v589;
  char *v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t *v593;
  unint64_t v594;
  char *v595;
  uint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  int v600;
  __int16 v601;
  __int128 v602;
  unint64_t *v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  unint64_t v609;
  unint64_t v610;
  unsigned int *v611;
  char *v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  char *v616;
  char *v617;
  unint64_t v618;
  unint64_t v619;
  unsigned int *v620;
  char *v621;
  unsigned int v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unsigned int *v626;
  char *v627;
  unsigned int v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unsigned int *v632;
  char *v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  void **v649;
  void **v650;
  unint64_t v651;
  unint64_t v652;
  void **v653;
  void *v654;
  void **v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  unint64_t *v659;
  unint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  char *v664;
  unint64_t v665;
  unint64_t v666;
  unsigned int *v667;
  char *v668;
  unsigned int v669;
  uint64_t v670;
  char *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  unint64_t v675;
  unsigned int *v676;
  char *v677;
  unsigned int v678;
  uint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unsigned int *v682;
  char *v683;
  unsigned int v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unsigned int *v688;
  char *v689;
  unsigned int v690;
  uint64_t v691;
  void *v692;
  void **v693;
  char *v694;
  uint64_t v695;
  void **v696;
  unint64_t v697;
  void **v698;
  void **v699;
  uint64_t v700;
  void **v701;
  void **v702;
  __int128 v705;
  void *v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  void *v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  void *v733;
  void *v734;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  void *v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  void *v749;
  _QWORD *v750;
  char v752;
  uint64_t v753;
  uint64_t v754;
  void **v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t *v778;
  unint64_t v779;
  unint64_t *v780;
  unint64_t v781;
  int v782;
  unint64_t v783;
  unint64_t v784;
  uint64_t v786;
  size_t v787;
  unsigned __int8 v788;
  const char *v789;
  size_t v790;
  _BYTE *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _BYTE *v795;
  uint64_t v796;
  uint64_t v797;
  NSObject *v798;
  size_t v799;
  std::__shared_weak_count_vtbl *v800;
  std::__shared_weak_count *v801;
  int v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  char *v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  std::__shared_weak_count *v816;
  unint64_t *v817;
  unint64_t v818;
  uint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  void *v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  unint64_t *v838;
  uint64_t v839;
  uint64_t v840;
  std::__shared_weak_count *v841;
  char *v842;
  char *v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  unint64_t v847;
  unint64_t v848;
  char *v849;
  _QWORD *v850;
  unint64_t v851;
  char *v853;
  __int128 v854;
  __int128 v855;
  char *v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  uint64_t v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  uint64_t v869;
  char *v871;
  __int128 v875;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  uint64_t v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  char *v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  uint64_t v897;
  unint64_t v899;
  unint64_t v900;
  unint64_t v901;
  char *v902;
  char *v903;
  uint64_t v904;
  _QWORD *v905;
  __int128 v906;
  char *v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  uint64_t v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  char *v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  char *v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  uint64_t v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  uint64_t v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  char *v945;
  char *v946;
  char *v947;
  char *v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  char *v955;
  unint64_t v956;
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  __int128 v961;
  __int128 v962;
  __int128 v963;
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  char *v980;
  char *v981;
  char *v982;
  uint64_t v983;
  char *v984;
  unint64_t v986;
  __int128 v987;
  __int128 v988;
  _OWORD *v989;
  __int128 v990;
  __int128 v991;
  uint64_t v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  __int128 v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  uint64_t v1002;
  _OWORD *v1006;
  __int128 v1008;
  unint64_t v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  uint64_t v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  unint64_t v1023;
  char *v1024;
  unint64_t v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  unint64_t v1035;
  char *v1036;
  uint64_t v1037;
  uint64_t v1039;
  __int128 v1040;
  __int128 v1041;
  _OWORD *v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  uint64_t v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  uint64_t v1055;
  uint64_t v1057;
  __int128 v1061;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  uint64_t v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  uint64_t v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  uint64_t v1083;
  char *v1085;
  uint64_t v1086;
  char *v1087;
  std::__shared_weak_count *v1088;
  unint64_t *v1089;
  unint64_t v1090;
  unint64_t *v1091;
  unint64_t v1092;
  char *v1093;
  __int128 v1094;
  uint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  uint64_t v1099;
  __int128 v1100;
  __int128 v1101;
  __int128 v1102;
  __int128 v1103;
  __int128 v1104;
  __int128 v1105;
  __int128 v1106;
  __int128 v1107;
  __int128 v1108;
  __int128 v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  uint64_t v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  uint64_t v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  uint64_t v1136;
  char *v1137;
  uint64_t v1138;
  unint64_t v1139;
  char *v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  __int128 v1159;
  __int128 v1160;
  __int128 v1161;
  __int128 v1162;
  __int128 v1163;
  __int128 v1164;
  __int128 v1165;
  __int128 v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  uint64_t v1179;
  void **v1180;
  unint64_t v1181;
  void **v1182;
  char *v1185;
  char *v1186;
  uint64_t v1187;
  __int128 v1188;
  uint64_t v1189;
  uint64_t v1190;
  char *v1191;
  __int128 v1192;
  uint64_t v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  uint64_t v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  uint64_t v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  uint64_t v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  uint64_t v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  uint64_t v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  uint64_t v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  uint64_t v1225;
  __int128 v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  __int128 v1230;
  void **v1231;
  char *v1233;
  __int128 v1234;
  char *v1235;
  __int128 v1236;
  __int128 v1237;
  uint64_t v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  uint64_t v1248;
  void **v1250;
  uint64_t v1251;
  void **v1252;
  _QWORD *v1253;
  char *v1254;
  __int128 v1257;
  void *v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  void *v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  __int128 v1268;
  __int128 v1269;
  __int128 v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  void *v1285;
  void *v1286;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  void *v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  void *v1301;
  _QWORD *v1302;
  char v1304;
  void **v1305;
  uint64_t v1306;
  std::__shared_weak_count *v1307;
  unint64_t *v1308;
  unint64_t v1309;
  unint64_t *v1310;
  unint64_t v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t *v1326;
  uint64_t *v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  _QWORD *v1332;
  unint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  _QWORD *v1337;
  _QWORD *v1338;
  __int128 v1339;
  _QWORD *v1340;
  _QWORD *v1341;
  int v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  _QWORD *v1351;
  uint64_t v1352;
  uint64_t *v1353;
  uint64_t *v1354;
  uint64_t *v1355;
  unsigned int v1356;
  unint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  char *v1367;
  char *v1368;
  unint64_t v1369;
  unint64_t v1370;
  unsigned int *v1371;
  char *v1372;
  unsigned int v1373;
  uint64_t v1374;
  int v1375;
  uint64_t v1376;
  uint64_t *v1380;
  uint64_t v1381;
  double *v1382;
  uint64_t v1383;
  double *v1384;
  double v1386;
  float64x2_t v1389;
  double v1391;
  double v1392;
  double v1394;
  uint64_t v1405;
  unsigned int v1406;
  __int128 *v1407;
  uint64_t *v1410;
  std::string::size_type v1411;
  unint64_t *v1412;
  unint64_t v1413;
  void *v1414;
  uint64_t v1415;
  void (***v1416)(uint64_t);
  void (**v1417)(uint64_t);
  uint64_t v1418;
  double v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  uint64_t v1424;
  uint64_t v1425;
  float32x2_t *v1426;
  char *v1427;
  char *v1428;
  unint64_t v1429;
  unint64_t v1430;
  unsigned int *v1431;
  char *v1432;
  unsigned int v1433;
  int v1434;
  uint64_t v1435;
  void *v1436;
  int v1437;
  void *v1438;
  double *v1439;
  uint64_t *v1443;
  uint64_t v1444;
  double *v1445;
  uint64_t v1446;
  double *v1447;
  double v1449;
  float64x2_t v1452;
  double v1454;
  double v1455;
  double v1457;
  uint64_t v1468;
  void *v1469;
  unsigned int v1470;
  __int128 *v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  _QWORD *v1475;
  _QWORD *v1476;
  void *v1477;
  void *v1478;
  _QWORD *v1479;
  _QWORD *v1480;
  int v1481;
  uint64_t *v1484;
  std::string::size_type v1485;
  _QWORD *v1486;
  _QWORD *v1487;
  _QWORD *v1488;
  _QWORD *v1489;
  uint64_t v1490;
  uint64_t k;
  unsigned int v1492;
  char *v1493;
  char *v1494;
  unint64_t v1495;
  unint64_t v1496;
  unsigned int *v1497;
  char *v1498;
  unsigned int v1499;
  int v1500;
  uint64_t *v1501;
  uint64_t v1502;
  uint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  BOOL v1506;
  uint64_t v1507;
  uint64_t v1508;
  _DWORD *v1509;
  unsigned int v1510;
  char *v1511;
  char *v1512;
  unint64_t v1513;
  unint64_t v1514;
  unsigned int *v1515;
  char *v1516;
  unsigned int v1517;
  int v1518;
  char v1519;
  _QWORD *v1520;
  _QWORD *v1521;
  _QWORD *v1522;
  _QWORD *v1523;
  uint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  unsigned int v1528;
  char *v1529;
  char *v1530;
  unint64_t v1531;
  unint64_t v1532;
  unsigned int *v1533;
  char *v1534;
  unsigned int v1535;
  unint64_t *v1536;
  unint64_t v1537;
  _QWORD *v1538;
  _QWORD *v1539;
  _QWORD *v1541;
  unint64_t v1542;
  _QWORD *v1543;
  uint64_t v1544;
  _QWORD *v1545;
  _QWORD *v1546;
  double v1547;
  double v1548;
  double v1549;
  double v1550;
  double v1551;
  unsigned int v1552;
  _QWORD *v1553;
  unint64_t v1554;
  _DWORD *v1555;
  _QWORD *v1556;
  _DWORD *v1557;
  _BYTE *v1558;
  int v1559;
  _QWORD *v1560;
  uint64_t v1561;
  unint64_t v1562;
  unint64_t v1563;
  _BYTE *v1564;
  _DWORD *v1565;
  int64_t v1566;
  unint64_t v1567;
  _DWORD *v1568;
  int v1569;
  _QWORD *v1570;
  unint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  _OWORD *v1574;
  __int128 *v1575;
  uint64_t v1576;
  __int128 v1577;
  uint64_t v1578;
  _QWORD *v1579;
  uint64_t *v1580;
  _QWORD *v1581;
  _QWORD *v1582;
  double *v1583;
  double *v1584;
  uint64_t v1585;
  uint64_t *v1586;
  uint64_t *v1587;
  unint64_t v1588;
  unint64_t v1589;
  uint64_t *v1590;
  unint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  uint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  char *v1602;
  char *v1603;
  unint64_t v1604;
  unint64_t v1605;
  unsigned int *v1606;
  char *v1607;
  unsigned int v1608;
  double *v1609;
  double v1610;
  uint64_t v1611;
  double *v1613;
  int64x2_t *v1614;
  double *v1615;
  double v1616;
  double v1617;
  float64x2_t v1618;
  float64x2_t v1620;
  double v1622;
  double v1624;
  double v1626;
  uint64_t v1627;
  float v1628;
  float v1629;
  float v1630;
  double v1631;
  int8x8_t v1632;
  unint64_t v1633;
  uint8x8_t v1634;
  unint64_t v1635;
  uint64_t **v1636;
  uint64_t *v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unint64_t v1641;
  char *v1642;
  char *v1643;
  unint64_t v1644;
  unint64_t v1645;
  unsigned int *v1646;
  char *v1647;
  unsigned int v1648;
  char *v1649;
  char *v1650;
  unint64_t v1651;
  unint64_t v1652;
  unsigned int *v1653;
  char *v1654;
  unsigned int v1655;
  uint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  double *v1661;
  int64x2_t *v1662;
  double *v1663;
  double v1664;
  double v1665;
  float64x2_t v1666;
  float64x2_t v1668;
  double v1670;
  double v1672;
  double v1674;
  double v1675;
  double *v1676;
  float v1677;
  float v1678;
  double v1679;
  unint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  unint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  double v1693;
  uint64_t v1694;
  uint64_t v1695;
  double *v1697;
  int64x2_t *v1698;
  double *v1699;
  double v1700;
  double v1701;
  float64x2_t v1702;
  float64x2_t v1704;
  double v1706;
  double v1708;
  double v1710;
  uint64_t v1711;
  double *v1712;
  float v1713;
  float v1714;
  float v1715;
  double v1716;
  unint64_t v1717;
  unint64_t v1718;
  unint64_t v1719;
  size_t v1720;
  __int128 v1721;
  double v1722;
  float32x2_t v1724;
  uint64_t *v1725;
  int v1726;
  double *v1727;
  double *v1728;
  uint64_t v1729;
  uint64_t v1730;
  __int32 v1731;
  unint64_t v1732;
  uint64_t v1733;
  uint64_t *v1734;
  uint64_t *v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  uint64_t *v1739;
  unsigned int v1740;
  _DWORD *v1741;
  unint64_t v1742;
  unint64_t v1743;
  unsigned int *v1744;
  _DWORD *v1745;
  unsigned int v1746;
  unint64_t v1747;
  unsigned int v1748;
  uint64_t *v1749;
  unint64_t v1750;
  unint64_t v1751;
  double *v1752;
  uint64_t v1753;
  uint64_t *v1754;
  uint64_t *v1755;
  uint64_t *v1756;
  double v1757;
  int v1758;
  double v1759;
  unsigned int v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  unsigned int v1764;
  BOOL v1765;
  uint64_t *v1766;
  uint64_t v1767;
  unsigned int v1768;
  float32x2_t *v1769;
  float32x2_t *v1770;
  char v1771;
  float32x2_t v1772;
  float v1773;
  float64x2_t v1774;
  float32x2_t v1775;
  float32x2_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  int v1780;
  __int32 *v1783;
  __int32 *v1784;
  __int32 *v1785;
  uint64_t v1786;
  unint64_t v1787;
  unint64_t v1788;
  char *v1789;
  uint64_t v1790;
  uint64_t v1791;
  double *v1792;
  uint64_t v1793;
  unint64_t v1794;
  unint64_t v1795;
  char *v1796;
  uint64_t v1797;
  uint64_t v1798;
  double *v1799;
  uint64_t v1800;
  int v1801;
  uint64_t v1802;
  unint64_t v1803;
  const std::nothrow_t *v1804;
  unint64_t v1805;
  double *v1806;
  double v1807;
  unint64_t v1808;
  unsigned int v1809;
  double *v1810;
  const std::nothrow_t *v1811;
  unint64_t v1812;
  double *v1813;
  void *v1814;
  int v1815;
  uint64_t v1816;
  uint64_t v1817;
  unsigned int v1818;
  unsigned int *v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  unsigned int v1823;
  unsigned int v1824;
  unsigned int v1825;
  double *v1826;
  unsigned int v1827;
  _DWORD *v1828;
  unint64_t v1829;
  char *v1830;
  char *v1831;
  unint64_t v1832;
  unint64_t v1833;
  unsigned int *v1834;
  char *v1835;
  unsigned int v1836;
  int8x8_t v1837;
  uint8x8_t v1838;
  unint64_t v1839;
  uint64_t **v1840;
  uint64_t *v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  _BOOL4 v1847;
  unsigned int *v1848;
  unint64_t v1849;
  char *v1850;
  char *v1851;
  unint64_t v1852;
  unint64_t v1853;
  unsigned int *v1854;
  char *v1855;
  unsigned int v1856;
  int8x8_t v1857;
  uint8x8_t v1858;
  unint64_t v1859;
  uint64_t **v1860;
  uint64_t *v1861;
  uint64_t v1862;
  unint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  BOOL v1867;
  uint64_t v1868;
  unint64_t v1869;
  uint64_t v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  __int128 v1879;
  __int128 v1880;
  __int128 v1881;
  __int128 v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  __int128 v1886;
  __int128 v1887;
  __int128 v1888;
  __int128 v1889;
  __int128 v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  __int128 v1916;
  uint64_t v1917;
  uint64_t v1918;
  __int128 v1919;
  __int128 v1920;
  char *v1921;
  __int128 v1922;
  __int128 v1923;
  __int128 v1924;
  __int128 v1925;
  __int128 v1926;
  uint64_t v1927;
  __int128 v1928;
  __int128 v1929;
  __int8 v1930;
  __int8 v1931;
  __int8 v1932;
  __int8 v1933;
  __int8 v1934;
  __int8 v1935;
  __int8 v1936;
  __int8 v1937;
  __int8 v1938;
  __int8 v1939;
  __int8 v1940;
  __int8 v1941;
  __int8 v1942;
  __int8 v1943;
  __int8 v1944;
  __int8 v1945;
  __int8 v1946;
  __int8 v1947;
  __int8 v1948;
  __int8 v1949;
  __int8 v1950;
  __int8 v1951;
  __int8 v1952;
  __int8 v1953;
  __int8 v1954;
  __int8 v1955;
  __int8 v1956;
  __int8 v1957;
  __int8 v1958;
  __int8 v1959;
  int v1960;
  int8x16_t v1961;
  int8x16_t v1962;
  uint64_t *v1963;
  void **v1964;
  void **v1965;
  void **v1966;
  int64x2_t v1967;
  uint64_t v1968;
  __int128 v1969;
  void *v1970;
  char *v1971;
  int64x2_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  char *v1975;
  uint64_t v1976;
  int64x2_t v1977;
  char v1978;
  uint64_t v1979;
  void **v1980;
  float64x2_t v1981;
  int8x16_t v1982;
  uint64_t v1983;
  char v1984;
  _QWORD *v1985;
  int8x16_t v1986;
  uint64_t v1987;
  int8x16_t v1988;
  double v1989;
  int8x16_t v1990;
  double v1991;
  char *categoryf[2];
  uint64_t category;
  uint64_t categoryg;
  double categoryh;
  std::__shared_weak_count *categorya;
  const char *categoryb;
  char *categoryc;
  void **categoryd;
  _QWORD *categorye;
  _DWORD *v2001;
  uint64_t v2002;
  unsigned int v2003;
  void **v2004;
  _QWORD *v2005;
  _BYTE *v2006;
  char *v2007;
  char **v2008;
  char v2009;
  const char *v2010;
  int v2011;
  unsigned int v2012;
  _QWORD *v2013;
  uint64_t v2014;
  float64_t v2015;
  uint64_t *v2016;
  uint64_t v2017;
  int v2018;
  _BYTE *v2019;
  int64x2_t **v2020;
  uint64_t *v2021;
  uint64_t v2022;
  unint64_t v2023;
  void *__dsta[2];
  float64x2_t __dstb;
  uint64_t *__dst;
  float64x2_t v2027;
  int v2028;
  unint64_t v2029;
  double v2030;
  float64x2_t *v2031;
  _QWORD *v2032;
  unint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  __int32 v2036;
  int64x2_t v2037;
  unint64_t v2038;
  uint64_t *v2039;
  uint64_t v2040;
  uint64_t *v2041;
  int v2042;
  int64x2_t __szj;
  size_t __sz[2];
  int __sza;
  const char *__szb;
  void *__szc;
  uint64_t __szd;
  char *__sze;
  uint64_t __szf;
  unint64_t __szg;
  float64x2_t __szk;
  float64x2_t __szl;
  unint64_t __szh;
  double __szi;
  int64x2_t v2056;
  char *v2057;
  _QWORD *v2058;
  uint64_t v2059;
  unsigned int v2060;
  uint64_t v2061;
  double *v2062;
  uint64_t *v2063;
  float64x2_t v2064;
  float64x2_t v2065;
  uint64_t v2066;
  unint64_t v2067;
  uint64_t v2068;
  std::__shared_weak_count *v2069;
  uint64_t v2070;
  std::__shared_weak_count *v2071;
  std::__shared_weak_count *v2072;
  std::__shared_weak_count *v2073;
  void *v2074;
  char v2075;
  __int128 v2076;
  void *v2077;
  __int128 v2078;
  void *v2079;
  __int128 v2080;
  void *v2081;
  __int128 v2082;
  __int128 v2083;
  __int128 v2084;
  void *v2085;
  __int128 v2086;
  void *v2087;
  __int128 v2088;
  __int128 v2089;
  __int128 v2090;
  __int128 v2091;
  __int128 v2092;
  __int128 v2093;
  __int128 v2094;
  __int128 v2095;
  void *v2096;
  __int128 v2097;
  __int128 v2098;
  uint64_t v2099;
  __int128 v2100;
  __int128 v2101;
  __int128 v2102;
  __int128 v2103;
  __int128 v2104;
  __int128 v2105;
  void *v2106;
  _OWORD v2107[113];
  _OWORD v2108[41];
  __int128 v2109;
  __int128 v2110;
  __int128 v2111;
  __int128 v2112;
  void *v2113;
  __int128 v2114;
  __int128 v2115;
  __int128 v2116;
  __int128 v2117;
  void *v2118;
  __int128 v2119;
  __int128 v2120;
  __int128 v2121;
  __int128 v2122;
  void *v2123;
  __int128 v2124;
  __int128 v2125;
  __int128 v2126;
  __int128 v2127;
  void *v2128;
  __int128 v2129;
  __int128 v2130;
  __int128 v2131;
  __int128 v2132;
  void *v2133;
  __int128 v2134;
  __int128 v2135;
  __int128 v2136;
  __int128 v2137;
  void *v2138;
  __int128 v2139;
  __int128 v2140;
  __int128 v2141;
  __int128 v2142;
  void *v2143;
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  __int128 v2147;
  void *v2148;
  _OWORD v2149[113];
  void *v2150[2];
  _BYTE v2151[1864];
  _OWORD v2152[247];
  uint64_t v2153;
  char v2154;
  __int8 v2155;
  _BYTE v2156[1800];
  uint64_t v2157;
  char v2158;
  __int16 v2159;
  __int128 v2160;
  __int128 v2161;
  uint64_t v2162;
  __int128 v2163;
  __int128 v2164;
  __int128 v2165;
  __int128 v2166;
  __int128 v2167;
  __int128 v2168;
  __int128 v2169;
  uint64_t v2170;
  __int128 v2171;
  __int128 v2172;
  __int128 v2173;
  __int128 v2174;
  __int128 v2175;
  __int128 v2176;
  __int128 v2177;
  uint64_t v2178;
  unint64_t v2179;
  char v2180;
  __int128 v2181;
  char v2182;
  _BYTE v2183[5728];
  __int128 v2184;
  __int128 v2185;
  __int128 v2186;
  __int128 v2187;
  __int128 v2188;
  __int128 v2189;
  __int128 v2190;
  uint64_t v2191;
  char v2192;
  uint64_t (**v2193)();
  __int8 v2194;
  _BYTE v2195[1800];
  uint64_t v2196;
  char v2197;
  __int16 v2198;
  __int128 v2199;
  __int128 v2200;
  uint64_t v2201;
  __int128 v2202;
  __int128 v2203;
  __int128 v2204;
  __int128 v2205;
  __int128 v2206;
  __int128 v2207;
  __int128 v2208;
  uint64_t v2209;
  __int128 v2210;
  __int128 v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  __int128 v2216;
  uint64_t v2217;
  unint64_t v2218;
  char v2219;
  __int128 v2220;
  char v2221;
  _BYTE object[1888];
  _OWORD v2223[247];
  uint64_t v2224;
  char v2225;
  uint64_t (**v2226)();
  __int8 v2227;
  _BYTE v2228[1800];
  uint64_t v2229;
  char v2230;
  __int16 v2231;
  __int128 v2232;
  __int128 v2233;
  uint64_t v2234;
  __int128 v2235;
  __int128 v2236;
  __int128 v2237;
  __int128 v2238;
  __int128 v2239;
  __int128 v2240;
  __int128 v2241;
  uint64_t v2242;
  __int128 v2243;
  __int128 v2244;
  __int128 v2245;
  __int128 v2246;
  __int128 v2247;
  __int128 v2248;
  __int128 v2249;
  uint64_t v2250;
  unint64_t v2251;
  char v2252;
  uint64_t v2253;
  std::__shared_weak_count *v2254;
  char v2255;
  uint64_t v2256;
  uint64_t v2257;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v2016 = v6;
  v2257 = *MEMORY[0x24BDAC8D0];
  v2019 = (_BYTE *)(v2 + 5856);
  if (*(_BYTE *)(v2 + 2146))
  {
    v7 = *(_QWORD *)(v2 + 120);
    v8 = v2 + 176;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)(v2 + 5824) = v7;
  *(_QWORD *)(v2 + 5832) = v8;
  v9 = *(_QWORD *)(v2 + 8);
  v10 = *(_QWORD **)(v9 + 296);
  v11 = (_QWORD *)(v9 + 304);
  v2068 = v2;
  if (v10 != (_QWORD *)(v9 + 304))
  {
    v2008 = (char **)(v2 + 5176);
    v2006 = (_BYTE *)(v2 + 6632);
    v2022 = v2 + 5200;
    v2004 = (void **)(v2 + 6320);
    while (1)
    {
      v12 = *((unsigned int *)v10 + 8);
      v13 = *(__int128 **)(v2068 + 5176);
      v14 = *(__int128 **)(v2068 + 5184);
      v15 = v13;
      if (v14 != v13)
      {
        v16 = v14 - v13;
        v15 = *(__int128 **)(v2068 + 5176);
        do
        {
          v17 = v16 >> 1;
          v18 = (unsigned int *)&v15[v16 >> 1];
          v20 = *v18;
          v19 = (__int128 *)(v18 + 4);
          v16 += ~(v16 >> 1);
          if (v20 < v12)
            v15 = v19;
          else
            v16 = v17;
        }
        while (v16);
      }
      if (v15 != v14 && *(_DWORD *)v15 == (_DWORD)v12)
        goto LABEL_49;
      if (v14 == v13)
      {
        v13 = *(__int128 **)(v2068 + 5184);
      }
      else
      {
        v21 = v14 - v13;
        do
        {
          v22 = v21 >> 1;
          v23 = (unsigned int *)&v13[v21 >> 1];
          v25 = *v23;
          v24 = (__int128 *)(v23 + 4);
          v21 += ~(v21 >> 1);
          if (v25 < v12)
            v13 = v24;
          else
            v21 = v22;
        }
        while (v21);
      }
      _D8 = *((double *)v10 + 13);
      v5 = *((int64x2_t *)v10 + 7);
      v27 = *(unsigned __int8 *)(v2068 + 1720);
      v1 = v1 & 0xFFFFFF0000000000 | v12 | (v27 << 32);
      v28 = *(unsigned __int8 *)(v2068 + 1788);
      if (v14 != v13 && (_DWORD)v12 == *(_DWORD *)v13)
        goto LABEL_49;
      *(_OWORD *)__dsta = *((_OWORD *)v10 + 4);
      v2027 = *((float64x2_t *)v10 + 7);
      v2030 = *((double *)v10 + 16);
      v2037 = *(int64x2_t *)(v10 + 5);
      __szj = *(int64x2_t *)(v10 + 11);
      v4.i64[0] = v10[10];
      v2056 = v4;
      v3.f64[0] = (float64_t)v10[7];
      v2064 = v3;
      v29 = (_DWORD)v27 == 0;
      v30 = sub_20F61B11C(v2022);
      v31 = (float64x2_t)vzip1q_s64(v2037, *(int64x2_t *)__dsta);
      _Q1 = (float64x2_t)vzip2q_s64(v2037, *(int64x2_t *)__dsta);
      _Q19 = (float64x2_t)__szj;
      _D18 = v2056.i64[0];
      v35 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
      v36 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v2027.f64[0]), _Q1, v2027, 1), (float64x2_t)vzip1q_s64((int64x2_t)v2064, v2056), v2030);
      _D2 = v2027.f64[1];
      __asm { FMLA            D1, D2, V19.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + _D8 * v2030;
      v41 = vnegq_f64(_Q0);
      v42 = (int64x2_t)vextq_s8(v36, v35, 8uLL);
      v43 = (float64x2_t)vzip1q_s64(v2037, v42);
      v44 = (float64x2_t)vzip2q_s64((int64x2_t)v31, v42);
      *(_QWORD *)&_Q19.f64[1] = vdupq_laneq_s64(__szj, 1).u64[0];
      v45 = vmlsq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, _Q0, 1);
      *(_DWORD *)v30 = -1;
      *(_BYTE *)(v30 + 4) = 1;
      *(_DWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = v1;
      *(_QWORD *)(v30 + 24) = v10 + 5;
      *(float64_t *)(v30 + 48) = v2064.f64[0];
      *(_QWORD *)&v43.f64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 32) = v43;
      v46 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(v45, _Q19, _Q1.f64[0], 0));
      *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      *(_QWORD *)(v30 + 72) = v2056.i64[0];
      *(float64x2_t *)(v30 + 56) = v44;
      *(double *)(v30 + 96) = _D8;
      *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
      *(float64x2_t *)(v30 + 80) = _Q19;
      v46.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
      _Q2 = vmulq_f64(v2064, v41);
      __asm
      {
        FMLS            D2, D18, V0.D[1]
        FMLS            D2, D8, V1.D[0]
      }
      *(_QWORD *)(v30 + 120) = *(_OWORD *)&vnegq_f64(_Q2);
      *(int8x16_t *)(v30 + 104) = v46;
      *(_WORD *)(v30 + 128) = v28 | 0x100;
      *(_QWORD *)(v30 + 136) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 144) = 0;
      *(_QWORD *)(v30 + 152) = 0;
      *(_QWORD *)(v30 + 160) = 0;
      *(_QWORD *)(v30 + 168) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 176) = 0;
      *(_QWORD *)(v30 + 184) = 0;
      *(_QWORD *)(v30 + 192) = 0;
      *(_QWORD *)(v30 + 200) = 0x3FF0000000000000;
      *(_QWORD *)(v30 + 208) = 0;
      *(_QWORD *)(v30 + 216) = 0;
      *(_QWORD *)(v30 + 224) = 0;
      *(_DWORD *)object = v12;
      *(_QWORD *)&object[8] = v30;
      sub_20F61AEB4(v2008, v13, (uint64_t)object);
      if (!v29)
        break;
LABEL_48:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v2006 = 0;
      v2006[4] = 0;
LABEL_49:
      v68 = (_QWORD *)v10[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v10[2];
          _ZF = *v69 == (_QWORD)v10;
          v10 = v69;
        }
        while (!_ZF);
      }
      v10 = v69;
      if (v69 == v11)
      {
        v70 = v2068;
        v9 = *(_QWORD *)(v2068 + 8);
        goto LABEL_57;
      }
    }
    v48 = *(char **)(v2068 + 6328);
    v49 = *(_QWORD *)(v2068 + 6336);
    if ((unint64_t)v48 < v49)
    {
      *(_DWORD *)v48 = v12;
      v50 = (uint64_t)(v48 + 4);
LABEL_47:
      *(_QWORD *)(v2068 + 6328) = v50;
      goto LABEL_48;
    }
    v51 = (char *)*v2004;
    v52 = v48 - (_BYTE *)*v2004;
    v53 = v52 >> 2;
    v54 = (v52 >> 2) + 1;
    if (v54 >> 62)
      sub_20E867F44();
    v55 = v49 - (_QWORD)v51;
    if (v55 >> 1 > v54)
      v54 = v55 >> 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
      v56 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 62)
        sub_20E877A38();
      v57 = operator new(4 * v56);
      v58 = &v57[4 * v53];
      *v58 = v12;
      v50 = (uint64_t)(v58 + 1);
      v59 = v48 - v51;
      if (v48 == v51)
        goto LABEL_45;
    }
    else
    {
      v57 = 0;
      v58 = (_DWORD *)(4 * v53);
      *(_DWORD *)(4 * v53) = v12;
      v50 = 4 * v53 + 4;
      v59 = v48 - v51;
      if (v48 == v51)
      {
LABEL_45:
        *(_QWORD *)(v2068 + 6320) = v58;
        *(_QWORD *)(v2068 + 6328) = v50;
        *(_QWORD *)(v2068 + 6336) = &v57[4 * v56];
        if (v51)
          operator delete(v51);
        goto LABEL_47;
      }
    }
    v60 = v59 - 4;
    if (v60 < 0x2C)
      goto LABEL_1905;
    if ((unint64_t)(v48 - v57 - v52) < 0x20)
      goto LABEL_1905;
    v61 = (v60 >> 2) + 1;
    v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
    v63 = &v48[-v62];
    v58 = (_DWORD *)((char *)v58 - v62);
    v64 = (float64x2_t *)&v57[4 * v53 - 16];
    v65 = (float64x2_t *)(v48 - 16);
    v66 = v61 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v4 = (int64x2_t)v65[-1];
      v3 = *v65;
      v64[-1] = (float64x2_t)v4;
      *v64 = v3;
      v64 -= 2;
      v65 -= 2;
      v66 -= 8;
    }
    while (v66);
    v48 = v63;
    if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1905:
      do
      {
        v67 = *((_DWORD *)v48 - 1);
        v48 -= 4;
        *--v58 = v67;
      }
      while (v48 != v51);
    }
    goto LABEL_45;
  }
  v70 = v2;
LABEL_57:
  v2009 = *(_BYTE *)(v70 + 1730);
  v2005 = (_QWORD *)(v70 + 4880);
  if (*v2019)
  {
    if (!((*(_QWORD *)(v70 + 5280) - *(_QWORD *)(v70 + 5272)) >> 4))
      goto LABEL_91;
    goto LABEL_90;
  }
  memset(object, 0, 32);
  if (!sub_20F5B8114((_QWORD *)(v70 + 4880), (int *)object, v2183, 1))
  {
    if (!*(_DWORD *)&v2183[16])
      goto LABEL_91;
    goto LABEL_90;
  }
  *(_QWORD *)(v70 + 6448) = *(_QWORD *)(v70 + 6440);
  *(_QWORD *)(v70 + 6472) = *(_QWORD *)(v70 + 6464);
  *(_QWORD *)(v70 + 6496) = *(_QWORD *)(v70 + 6488);
  *(_QWORD *)(v70 + 6520) = *(_QWORD *)(v70 + 6512);
  *(_QWORD *)(v70 + 6544) = *(_QWORD *)(v70 + 6536);
  *(_QWORD *)(v70 + 6568) = *(_QWORD *)(v70 + 6560);
  *(_QWORD *)(v70 + 6592) = *(_QWORD *)(v70 + 6584);
  *(_QWORD *)(v70 + 6616) = *(_QWORD *)(v70 + 6608);
  v71 = *(_QWORD *)(v70 + 5656);
  v72 = *(_QWORD *)(v70 + 5664);
  while (v71 != v72)
  {
    v73 = *(_QWORD *)(v71 + 208);
    if (*(_BYTE *)(v71 + 496) || (*(_BYTE *)(v73 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v71 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6440, v73);
      sub_20F3D35E0((_QWORD *)(v70 + 6440), *(_QWORD *)(v71 + 216));
    }
    v71 += 504;
  }
  v74 = *(_QWORD *)(v70 + 5680);
  v75 = *(_QWORD *)(v70 + 5688);
  while (v74 != v75)
  {
    v76 = *(_QWORD *)(v74 + 136);
    if (*(_BYTE *)(v74 + 272) || (*(_BYTE *)(v76 + 4) & 6) != 0)
      sub_20F394A20(v70 + 6440, v76);
    v74 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v70 + 5704), *(_QWORD *)(v70 + 5712), (_QWORD *)(v70 + 6440));
  sub_20F5B85BC(*(_QWORD *)(v70 + 5728), *(_QWORD *)(v70 + 5736), (_QWORD *)(v70 + 6440));
  sub_20F5B8444(*(_QWORD *)(v70 + 5752), *(_QWORD *)(v70 + 5760), (_QWORD *)(v70 + 6440));
  v77 = *(_QWORD *)(v70 + 5776);
  v78 = *(_QWORD *)(v70 + 5784);
  while (v77 != v78)
  {
    v79 = *(_QWORD *)(v77 + 736);
    if (*(_BYTE *)(v77 + 880) || (*(_BYTE *)(v79 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v77 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v70 + 6440, v79);
      sub_20F394A20(v70 + 6440, *(_QWORD *)(v77 + 744));
    }
    v77 += 888;
  }
  v80 = (*(_QWORD *)(v70 + 6544) - *(_QWORD *)(v70 + 6536)) >> 2;
  if (*(_DWORD *)&object[16] > v80)
    LODWORD(v80) = *(_DWORD *)&object[16];
  _CF = *(_DWORD *)&v2183[16] >= v80;
  v81 = *(_DWORD *)&v2183[16] - v80;
  if (_CF)
    v82 = v81;
  else
    v82 = 0;
  sub_20F59A618(v2005);
  if (v82)
  {
LABEL_90:
    v70 = v2068;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 271, (uint64_t)"!this->linear_system_.graph().template numberOfVariable<VARIABLE_TYPE>()", 72, (uint64_t)"CameraCalibVariables of this type have already been added.", 58, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_91:
  v83 = *(double *)(v9 + 336);
  if (v83 != 0.0)
  {
    v2002 = v70 + 5272;
    *(_QWORD *)&v2027.f64[0] = &v2183[32];
    v1990.i64[0] = (uint64_t)&object[72];
    v1988.i64[0] = (uint64_t)&object[160];
    v1986.i64[0] = (uint64_t)&object[192];
    v1966 = (void **)(v70 + 6344);
    v1976 = v70 + 6632;
    while (1)
    {
      LODWORD(v2150[0]) = *(_DWORD *)(*(_QWORD *)&v83 + 16);
      BYTE4(v2150[0]) = 1;
      v2150[1] = (void *)(*(_QWORD *)&v83 + 24);
      memset(&v2151[48], 0, 56);
      *(_DWORD *)&v2151[104] = 1065353216;
      *(_WORD *)&v2151[112] = 1;
      v84 = *(_OWORD *)(*(_QWORD *)&v83 + 40);
      *(_OWORD *)v2151 = *(_OWORD *)(*(_QWORD *)&v83 + 24);
      *(_OWORD *)&v2151[16] = v84;
      v85 = *(_QWORD *)(*(_QWORD *)&v83 + 56);
      v2064.f64[0] = v83;
      v2151[40] = *(_BYTE *)(*(_QWORD *)&v83 + 64);
      *(_QWORD *)&v2151[32] = v85;
      sub_20F6169C8((uint64_t)v2150);
      BYTE4(v2150[0]) = v2009;
      v86 = *((_OWORD *)v2150[1] + 1);
      *(_OWORD *)v2151 = *(_OWORD *)v2150[1];
      *(_OWORD *)&v2151[16] = v86;
      v87 = *((_BYTE *)v2150[1] + 40);
      *(_QWORD *)&v2151[32] = *((_QWORD *)v2150[1] + 4);
      v2151[40] = v87;
      sub_20F6169C8((uint64_t)v2150);
      v88 = (int)v2150[0];
      v89 = *(char **)(v70 + 5272);
      v90 = *(char **)(v70 + 5280);
      if (v90 == v89)
      {
        v89 = *(char **)(v70 + 5280);
      }
      else
      {
        v91 = (v90 - v89) >> 4;
        do
        {
          v92 = v91 >> 1;
          v93 = &v89[16 * (v91 >> 1)];
          v95 = *(_DWORD *)v93;
          v94 = v93 + 16;
          v91 += ~(v91 >> 1);
          if (v95 < LODWORD(v2150[0]))
            v89 = v94;
          else
            v91 = v92;
        }
        while (v91);
        if (v90 != v89 && LODWORD(v2150[0]) == *(_DWORD *)v89)
        {
          v2057 = *(char **)(v70 + 5280);
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 283, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          goto LABEL_155;
        }
      }
      v96 = BYTE4(v2150[0]);
      v2183[4] = 1;
      *(_DWORD *)v2183 = -1;
      *(_DWORD *)&v2183[8] = 0;
      v97 = v2150[0];
      v98 = v2150[1];
      *(_OWORD *)&v2183[16] = *(_OWORD *)v2150;
      *(_OWORD *)&v2183[32] = *(_OWORD *)v2151;
      *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[16];
      *(_OWORD *)&v2183[64] = *(_OWORD *)&v2151[32];
      v99 = *(_QWORD *)&v2151[48];
      v100 = *(_QWORD *)&v2151[56];
      *(_QWORD *)&v2183[80] = *(_QWORD *)&v2151[48];
      *(_QWORD *)&v2183[88] = *(_QWORD *)&v2151[56];
      memset(&v2151[48], 0, 40);
      v101 = *(_QWORD *)&v2151[64];
      v102 = *(_QWORD *)&v2151[72];
      *(_QWORD *)&v2183[96] = *(_QWORD *)&v2151[64];
      *(_QWORD *)&v2183[104] = *(_QWORD *)&v2151[72];
      v103 = *(_QWORD *)&v2151[80];
      v104 = *(_QWORD *)&v2151[88];
      *(_QWORD *)&v2183[112] = *(_QWORD *)&v2151[80];
      *(_QWORD *)&v2183[120] = *(_QWORD *)&v2151[88];
      v105 = *(_QWORD *)&v2151[96];
      *(_QWORD *)&v2183[128] = *(_QWORD *)&v2151[96];
      v106 = *(_DWORD *)&v2151[104];
      *(_DWORD *)&v2183[136] = *(_DWORD *)&v2151[104];
      if (*(_QWORD *)&v2151[96])
      {
        v107 = *(_QWORD *)(*(_QWORD *)&v2151[88] + 8);
        if ((*(_QWORD *)&v2151[80] & (*(_QWORD *)&v2151[80] - 1)) != 0)
        {
          if (v107 >= *(_QWORD *)&v2151[80])
            v107 %= *(_QWORD *)&v2151[80];
        }
        else
        {
          v107 &= *(_QWORD *)&v2151[80] - 1;
        }
        *(_QWORD *)(*(_QWORD *)&v2151[72] + 8 * v107) = &v2183[120];
        *(_QWORD *)&v2151[88] = 0;
        *(_QWORD *)&v2151[96] = 0;
        v98 = *(void **)&v2183[24];
        v97 = *(void **)&v2183[16];
        v99 = *(_QWORD *)&v2183[80];
        v100 = *(_QWORD *)&v2183[88];
        v101 = *(_QWORD *)&v2183[96];
        v102 = *(_QWORD *)&v2183[104];
        v103 = *(_QWORD *)&v2183[112];
        v104 = *(_QWORD *)&v2183[120];
        v105 = *(_QWORD *)&v2183[128];
        v106 = *(_DWORD *)&v2183[136];
      }
      v108 = *(_WORD *)&v2151[112];
      *(_WORD *)&v2183[144] = *(_WORD *)&v2151[112];
      v2183[192] = 0;
      memset(&v2183[152], 0, 33);
      *(_DWORD *)object = v88;
      *(_QWORD *)&object[8] = *(_QWORD *)v2183;
      *(_DWORD *)&object[16] = *(_DWORD *)&v2183[8];
      *(_QWORD *)&object[24] = v97;
      *(_QWORD *)&object[32] = v98;
      *(_OWORD *)&object[40] = *(_OWORD *)&v2183[32];
      *(_OWORD *)&object[56] = *(_OWORD *)&v2183[48];
      *(_OWORD *)&object[72] = *(_OWORD *)&v2183[64];
      *(_QWORD *)&object[88] = v99;
      *(_QWORD *)&object[96] = v100;
      memset(&v2183[80], 0, 40);
      *(_QWORD *)&object[104] = v101;
      *(_QWORD *)&object[112] = v102;
      *(_QWORD *)&object[120] = v103;
      *(_QWORD *)&object[128] = v104;
      *(_QWORD *)&object[136] = v105;
      *(_DWORD *)&object[144] = v106;
      if (v105)
      {
        v109 = *(_QWORD *)(v104 + 8);
        if ((v103 & (v103 - 1)) != 0)
        {
          if (v109 >= v103)
            v109 %= v103;
        }
        else
        {
          v109 &= v103 - 1;
        }
        *(_QWORD *)(v102 + 8 * v109) = &object[128];
        *(_QWORD *)&v2183[120] = 0;
        *(_QWORD *)&v2183[128] = 0;
        v108 = *(_WORD *)&v2183[144];
      }
      *(_WORD *)&object[152] = v108;
      *(_OWORD *)&object[160] = *(_OWORD *)&v2183[152];
      *(_OWORD *)&object[176] = *(_OWORD *)&v2183[168];
      *(_OWORD *)&object[192] = *(_OWORD *)&v2183[184];
      v2057 = sub_20F7166C8(v2002, v89, (int *)object);
      v110 = *(_QWORD **)&object[128];
      if (*(_QWORD *)&object[128])
      {
        do
        {
          v111 = (_QWORD *)*v110;
          operator delete(v110);
          v110 = v111;
        }
        while (v111);
      }
      v112 = *(void **)&object[112];
      *(_QWORD *)&object[112] = 0;
      if (v112)
        operator delete(v112);
      if (*(_QWORD *)&object[88])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[88];
        operator delete(*(void **)&object[88]);
      }
      v113 = *(_QWORD **)&v2183[120];
      if (*(_QWORD *)&v2183[120])
      {
        do
        {
          v114 = (_QWORD *)*v113;
          operator delete(v113);
          v113 = v114;
        }
        while (v114);
      }
      v115 = *(void **)&v2183[104];
      *(_QWORD *)&v2183[104] = 0;
      if (v115)
        operator delete(v115);
      if (*(_QWORD *)&v2183[80])
      {
        *(_QWORD *)&v2183[88] = *(_QWORD *)&v2183[80];
        operator delete(*(void **)&v2183[80]);
      }
      if (v96)
        break;
LABEL_154:
      v2019[2] = 0;
      *v2019 = 0;
      *(_DWORD *)v1976 = 0;
      *(_BYTE *)(v1976 + 4) = 0;
LABEL_155:
      memset(object, 0, 32);
      *(_DWORD *)&object[32] = 1065353216;
      v137 = *(uint64_t ***)(v70 + 128);
      v138 = *v137;
      v139 = v137[1];
      while (v138 != v139)
      {
        v140 = (__int128 *)*v138;
        if (*(_QWORD *)(*v138 + 24))
        {
          if (*((_DWORD *)v140 + 4) != *(_DWORD *)(*(_QWORD *)&v83 + 16))
            goto LABEL_156;
LABEL_171:
          v146 = *v140;
          *(_QWORD *)&v2183[16] = *((_QWORD *)v140 + 2);
          *(_OWORD *)v2183 = v146;
          *(_OWORD *)&v2183[24] = *(__int128 *)((char *)v140 + 24);
          sub_20F61A180((uint64_t)object, (uint64_t *)v2183, (uint64_t)v2183);
          goto LABEL_156;
        }
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 288, (uint64_t)"frame->lens_model_", 18, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v141 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (byte_254A6DE68)
          _ZF = byte_254A6DE70 == 0;
        else
          _ZF = 0;
        if (!_ZF)
        {
          v143 = qword_254A6DE40;
          for (i = qword_254A6DE48; v143 != i; v143 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v143)(*(_QWORD *)(v143 + 8), "frame->lens_model_", 18, "", 0);
        }
        v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "frame->lens_model_", 18, "", 0);
        v140 = (__int128 *)*v138;
        if (*(_DWORD *)(*v138 + 16) == *(_DWORD *)(*(_QWORD *)&v83 + 16))
          goto LABEL_171;
LABEL_156:
        v138 += 2;
      }
      v147 = *((_QWORD *)v2057 + 1);
      if (*(_QWORD *)(v147 + 128))
      {
        v148 = *(_QWORD **)(v147 + 120);
        if (v148)
        {
          do
          {
            v149 = (_QWORD *)*v148;
            operator delete(v148);
            v148 = v149;
          }
          while (v149);
        }
        *(_QWORD *)(v147 + 120) = 0;
        v150 = *(_QWORD *)(v147 + 112);
        if (v150)
        {
          for (j = 0; j != v150; ++j)
            *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * j) = 0;
        }
        *(_QWORD *)(v147 + 128) = 0;
      }
      v152 = *(_QWORD *)object;
      *(_QWORD *)object = 0;
      v153 = *(void **)(v147 + 104);
      *(_QWORD *)(v147 + 104) = v152;
      if (v153)
        operator delete(v153);
      v154 = *(_QWORD *)&object[8];
      v155 = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 120) = *(_QWORD *)&object[16];
      *(_QWORD *)(v147 + 112) = v154;
      *(_QWORD *)&object[8] = 0;
      v156 = *(_QWORD *)&object[24];
      *(_QWORD *)(v147 + 128) = *(_QWORD *)&object[24];
      *(_DWORD *)(v147 + 136) = *(_DWORD *)&object[32];
      if (v156)
      {
        v157 = *(_QWORD *)(v155 + 8);
        if ((v154 & (v154 - 1)) != 0)
        {
          if (v157 >= v154)
            v157 %= v154;
        }
        else
        {
          v157 &= v154 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v147 + 104) + 8 * v157) = v147 + 120;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)&object[24] = 0;
      }
      sub_20F6169C8(v147 + 16);
      memset(v2183, 0, 24);
      v158 = *(_QWORD **)(v70 + 16);
      v159 = v158[2];
      if (v159)
      {
        if (v159 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v160 = (char *)operator new(24 * v159);
        *(_QWORD *)v2183 = v160;
        *(_QWORD *)&v2183[8] = v160;
        *(_QWORD *)&v2183[16] = &v160[24 * v159];
        v163 = (_QWORD *)*v158;
        v161 = v158 + 1;
        v162 = v163;
        if (v163 == v161)
          goto LABEL_196;
LABEL_209:
        while (2)
        {
          v174 = v162[6];
          if (*(_BYTE *)(v174 + 192))
            v175 = v174 + 40;
          else
            v175 = 0;
          if (*(_BYTE *)(v174 + 192))
          {
            v176 = *(_DWORD *)(v174 + 88);
            if (v176 == *(_DWORD *)(*(_QWORD *)&v83 + 16))
            {
              v177 = *(_QWORD *)(v174 + 200);
              v178 = *(_QWORD *)(v174 + 208);
              v179 = *(_QWORD *)(v174 + 72);
              v180 = *(_DWORD *)(v174 + 80);
              if (v178 != v177)
              {
                v181 = (v178 - v177) >> 5;
                while (1)
                {
                  v182 = v181 >> 1;
                  v183 = v177 + 32 * (v181 >> 1);
                  v184 = *(_DWORD *)(v183 + 16);
                  _CF = v184 >= v176;
                  if (v184 != v176)
                    goto LABEL_222;
                  if (*(_QWORD *)v183 >= v179)
                    break;
LABEL_216:
                  v177 = v183 + 32;
                  v182 = v181 + ~v182;
LABEL_217:
                  v181 = v182;
                  if (!v182)
                    goto LABEL_225;
                }
                if (*(_QWORD *)v183 != v179)
                  goto LABEL_217;
                _CF = *(_DWORD *)(v183 + 8) >= v180;
LABEL_222:
                if (_CF)
                  goto LABEL_217;
                goto LABEL_216;
              }
LABEL_225:
              if (v177 != v178
                && *(_DWORD *)(v177 + 16) == v176
                && *(_QWORD *)v177 == v179
                && *(_DWORD *)(v177 + 8) == v180)
              {
                v186 = *(_QWORD *)(v177 + 24);
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 >= *(_QWORD *)&v2183[16])
                  goto LABEL_230;
LABEL_240:
                *(_DWORD *)v160 = v187;
                v195 = v160 + 24;
                *((_QWORD *)v160 + 1) = v186;
                *((_QWORD *)v160 + 2) = v175;
                v83 = v2064.f64[0];
              }
              else
              {
                v186 = 0;
                v187 = *(_DWORD *)(v174 + 32);
                v188 = *(_QWORD *)&v2183[16];
                if ((unint64_t)v160 < *(_QWORD *)&v2183[16])
                  goto LABEL_240;
LABEL_230:
                v189 = *(char **)v2183;
                v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v160[-*(_QWORD *)v2183] >> 3);
                v191 = v190 + 1;
                if (v190 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E867F44();
                v192 = 0xAAAAAAAAAAAAAAABLL * ((v188 - *(_QWORD *)v2183) >> 3);
                if (2 * v192 > v191)
                  v191 = 2 * v192;
                if (v192 >= 0x555555555555555)
                  v193 = 0xAAAAAAAAAAAAAAALL;
                else
                  v193 = v191;
                if (v193)
                {
                  if (v193 > 0xAAAAAAAAAAAAAAALL)
                    sub_20E877A38();
                  v194 = (char *)operator new(24 * v193);
                }
                else
                {
                  v194 = 0;
                }
                v196 = &v194[24 * v190];
                *(_DWORD *)v196 = v187;
                *((_QWORD *)v196 + 1) = v186;
                *((_QWORD *)v196 + 2) = v175;
                v197 = v196;
                if (v160 == v189)
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                }
                else
                {
                  v70 = v2068;
                  v83 = v2064.f64[0];
                  do
                  {
                    v198 = *(_OWORD *)(v160 - 24);
                    *((_QWORD *)v197 - 1) = *((_QWORD *)v160 - 1);
                    *(_OWORD *)(v197 - 24) = v198;
                    v197 -= 24;
                    v160 -= 24;
                  }
                  while (v160 != v189);
                  v160 = *(char **)v2183;
                }
                v199 = &v194[24 * v193];
                v195 = v196 + 24;
                *(_QWORD *)v2183 = v197;
                *(_QWORD *)&v2183[8] = v196 + 24;
                *(_QWORD *)&v2183[16] = v199;
                if (v160)
                  operator delete(v160);
              }
              *(_QWORD *)&v2183[8] = v195;
              v160 = v195;
            }
          }
          v200 = (_QWORD *)v162[1];
          if (v200)
          {
            do
            {
              v201 = v200;
              v200 = (_QWORD *)*v200;
            }
            while (v200);
          }
          else
          {
            do
            {
              v201 = (_QWORD *)v162[2];
              _ZF = *v201 == (_QWORD)v162;
              v162 = v201;
            }
            while (!_ZF);
          }
          v162 = v201;
          if (v201 == v161)
            goto LABEL_196;
          continue;
        }
      }
      v160 = 0;
      v164 = (_QWORD *)*v158;
      v161 = v158 + 1;
      v162 = v164;
      if (v164 != v161)
        goto LABEL_209;
LABEL_196:
      v165 = (_QWORD *)*((_QWORD *)v2057 + 1);
      v166 = (void *)v165[10];
      if (v166)
      {
        v165[11] = v166;
        operator delete(v166);
        v165[10] = 0;
        v165[11] = 0;
        v165[12] = 0;
        v160 = *(char **)&v2183[8];
      }
      v167 = *(_QWORD *)&v2183[16];
      v165[10] = *(_QWORD *)v2183;
      v165[11] = v160;
      v165[12] = v167;
      v168 = *(_QWORD **)&object[16];
      if (*(_QWORD *)&object[16])
      {
        do
        {
          v169 = (_QWORD *)*v168;
          operator delete(v168);
          v168 = v169;
        }
        while (v169);
      }
      v170 = *(void **)object;
      *(_QWORD *)object = 0;
      if (v170)
        operator delete(v170);
      v171 = *(_QWORD **)&v2151[88];
      if (*(_QWORD *)&v2151[88])
      {
        do
        {
          v172 = (_QWORD *)*v171;
          operator delete(v171);
          v171 = v172;
        }
        while (v172);
      }
      v173 = *(void **)&v2151[72];
      *(_QWORD *)&v2151[72] = 0;
      if (v173)
        operator delete(v173);
      if (*(_QWORD *)&v2151[48])
      {
        *(_QWORD *)&v2151[56] = *(_QWORD *)&v2151[48];
        operator delete(*(void **)&v2151[48]);
      }
      v83 = **(double **)&v83;
      if (v83 == 0.0)
        goto LABEL_256;
    }
    v116 = *(char **)(v70 + 6352);
    v117 = *(_QWORD *)(v70 + 6360);
    if ((unint64_t)v116 < v117)
    {
      *(_DWORD *)v116 = v88;
      v118 = (uint64_t)(v116 + 4);
LABEL_153:
      *(_QWORD *)(v70 + 6352) = v118;
      goto LABEL_154;
    }
    v119 = (char *)*v1966;
    v120 = v116 - (_BYTE *)*v1966;
    v121 = v120 >> 2;
    v122 = (v120 >> 2) + 1;
    if (v122 >> 62)
      sub_20E867F44();
    v123 = v117 - (_QWORD)v119;
    if (v123 >> 1 > v122)
      v122 = v123 >> 1;
    if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
      v124 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v124 = v122;
    if (v124)
    {
      if (v124 >> 62)
        sub_20E877A38();
      v125 = operator new(4 * v124);
      v126 = &v125[4 * v121];
      *v126 = v88;
      v118 = (uint64_t)(v126 + 1);
      v127 = v116 - v119;
      if (v116 == v119)
        goto LABEL_150;
    }
    else
    {
      v125 = 0;
      v126 = (_DWORD *)(4 * v121);
      *(_DWORD *)(4 * v121) = v88;
      v118 = 4 * v121 + 4;
      v127 = v116 - v119;
      if (v116 == v119)
      {
LABEL_150:
        *(_QWORD *)(v70 + 6344) = v126;
        *(_QWORD *)(v70 + 6352) = v118;
        *(_QWORD *)(v70 + 6360) = &v125[4 * v124];
        if (v119)
          operator delete(v119);
        v83 = v2064.f64[0];
        goto LABEL_153;
      }
    }
    v128 = v127 - 4;
    if (v128 < 0x2C)
      goto LABEL_1906;
    if ((unint64_t)(v116 - v125 - v120) < 0x20)
      goto LABEL_1906;
    v129 = (v128 >> 2) + 1;
    v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    v131 = &v116[-v130];
    v126 = (_DWORD *)((char *)v126 - v130);
    v132 = &v125[4 * v121 - 16];
    v133 = v116 - 16;
    v134 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v135 = *(_OWORD *)v133;
      *(v132 - 1) = *((_OWORD *)v133 - 1);
      *v132 = v135;
      v132 -= 2;
      v133 -= 32;
      v134 -= 8;
    }
    while (v134);
    v116 = v131;
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1906:
      do
      {
        v136 = *((_DWORD *)v116 - 1);
        v116 -= 4;
        *--v126 = v136;
      }
      while (v116 != v119);
    }
    goto LABEL_150;
  }
LABEL_256:
  v202 = *(_QWORD *)v70;
  if (!*(_QWORD *)v70)
  {
LABEL_259:
    v228 = *(_QWORD *)(v70 + 8);
    v229 = *(_QWORD **)(v228 + 48);
    v2058 = (_QWORD *)(v228 + 56);
    if (v229 != (_QWORD *)(v228 + 56))
    {
LABEL_260:
      v1965 = (void **)(v2068 + 6248);
      v2001 = (_DWORD *)(v2068 + 6632);
      v1964 = (void **)(v2068 + 6272);
      v2031 = (float64x2_t *)(v2068 + 176);
      v1963 = (uint64_t *)(v2068 + 504);
      while (1)
      {
        v230 = v2064;
        LOBYTE(v230.f64[0]) = 0;
        v2064 = v230;
        v231 = *v2016;
        v232 = v2016[1];
        if (*v2016 != v232)
        {
          while (*(_DWORD *)v231 != *((_DWORD *)v229 + 10))
          {
            v231 += 48;
            if (v231 == v232)
              goto LABEL_276;
          }
        }
        if (v231 == v232)
        {
LABEL_276:
          v233 = 1;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
            goto LABEL_277;
        }
        else
        {
          *(_OWORD *)__sz = *(_OWORD *)(v231 + 32);
          v2065 = *(float64x2_t *)(v231 + 16);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtzq_f64(v2065), (int32x4_t)vcgtzq_f64(*(float64x2_t *)__sz))))) & 1) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2478, (uint64_t)"(scales.e() > .0).all()", 23, (uint64_t)"IMU noise scaling must be nonzero.", 34, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v233 = 0;
          v2027 = vmulq_f64(*(float64x2_t *)__sz, *(float64x2_t *)(v2068 + 192));
          v230 = vmulq_f64(v2065, *v2031);
          v2064 = v230;
          v234 = v229[4];
          v235 = *((unsigned int *)v229 + 10);
          v236 = v2068;
          if (*(_BYTE *)(v2068 + 2145))
          {
LABEL_277:
            v247 = *(_QWORD *)(v236 + 8);
            v242 = v235;
            v243 = 0;
            v248 = *(uint64_t **)(v247 + 56);
            v244 = (uint64_t *)(v247 + 56);
            v245 = v248;
            if (!v248)
              goto LABEL_303;
            goto LABEL_280;
          }
        }
        v237 = *(_QWORD *)(v236 + 8);
        v238 = *(_QWORD *)(v237 + 48);
        v239 = *(_QWORD *)(v238 + 32);
        v240 = *(_DWORD *)(v238 + 40);
        if (v234 == v239 && (_DWORD)v235 == v240)
        {
          v243 = 1;
          v242 = v235;
          v249 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v249;
          if (!v249)
            goto LABEL_303;
        }
        else
        {
          v242 = v235;
          v243 = 0;
          v246 = *(uint64_t **)(v237 + 56);
          v244 = (uint64_t *)(v237 + 56);
          v245 = v246;
          if (!v246)
            goto LABEL_303;
        }
LABEL_280:
        v250 = v244;
        do
        {
          v251 = v245[4];
          if (v251 < v234)
          {
            ++v245;
          }
          else if (v251 == v234)
          {
            if (*((_DWORD *)v245 + 10) < v242)
              ++v245;
            else
              v250 = v245;
          }
          else
          {
            v250 = v245;
          }
          v245 = (uint64_t *)*v245;
        }
        while (v245);
        if (v250 != v244)
        {
          v252 = v250[4];
          if (v234 >= v252 && (v234 != v252 || *((_DWORD *)v250 + 10) <= v242))
          {
            v253 = v250[6];
            if (v253)
            {
              v254 = v235;
              if ((v243 & 1) != 0
                || (v254 = v235 | 0x100000000, v255 = v235 | 0x100000000, !*(_BYTE *)(v2068 + 2146)))
              {
                v255 = v235;
                v256 = *(__int128 **)(v2068 + 4888);
                v257 = *(__int128 **)(v2068 + 4896);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                  goto LABEL_297;
              }
              else
              {
                v256 = *(__int128 **)(v2068 + 4888);
                v257 = *(__int128 **)(v2068 + 4896);
                v258 = (char *)v257 - (char *)v256;
                if (v257 != v256)
                {
LABEL_297:
                  v259 = v258 >> 4;
                  do
                  {
                    v260 = v259 >> 1;
                    v261 = (unsigned int *)&v256[v259 >> 1];
                    v263 = *v261;
                    v262 = (__int128 *)(v261 + 4);
                    v259 += ~(v259 >> 1);
                    if (v263 < v254)
                      v256 = v262;
                    else
                      v259 = v260;
                  }
                  while (v259);
LABEL_486:
                  __szc = (void *)v235;
                  v2011 = v233;
                  if (v257 != v256 && *(_DWORD *)v256 == (_DWORD)v254)
                  {
                    v372 = 0;
                    goto LABEL_513;
                  }
                  v1967 = *(int64x2_t *)(v253 + 24);
                  v1972 = *(int64x2_t *)v253;
                  v5.i64[0] = *(_QWORD *)(v253 + 16);
                  v1977 = v5;
                  v1981 = *(float64x2_t *)(v253 + 72);
                  v1986.i64[0] = *(_QWORD *)(v253 + 88);
                  v1988 = *(int8x16_t *)(v253 + 48);
                  v1990.i64[0] = *(_QWORD *)(v253 + 64);
                  v230.f64[0] = *(float64_t *)(v253 + 40);
                  *(float64x2_t *)categoryf = v230;
                  *(_OWORD *)v2183 = *(_OWORD *)(v253 + 792);
                  *(_QWORD *)&v2183[16] = *(_QWORD *)(v253 + 808);
                  *(_OWORD *)&object[7] = *(_OWORD *)(v253 + 768);
                  *(_QWORD *)&object[23] = *(_QWORD *)(v253 + 784);
                  v373 = (char *)sub_20F61BD6C(v2068 + 4912);
                  _D3 = vextq_s8(v1988, v1988, 8uLL).u64[0];
                  v375 = (float64x2_t)vzip1q_s64(v1972, v1967);
                  *(_QWORD *)&v376 = vextq_s8((int8x16_t)v375, (int8x16_t)v375, 8uLL).u64[0];
                  _Q5 = (float64x2_t)vzip2q_s64(v1972, v1967);
                  _D21 = categoryf[0];
                  v379 = (float64x2_t)vzip1q_s64(v1977, *(int64x2_t *)categoryf);
                  v380 = vextq_s8((int8x16_t)_Q5, (int8x16_t)vdupq_laneq_s64((int64x2_t)v1988, 1), 8uLL);
                  v381 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0), v380, 8uLL);
                  v382 = (float64x2_t)vzip1q_s64((int64x2_t)v375, (int64x2_t)v381);
                  *(_QWORD *)&v375.f64[1] = v376;
                  _V20.D[1] = v1981.f64[1];
                  *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
                  v384.f64[0] = v379.f64[0];
                  *(_QWORD *)&v384.f64[1] = vextq_s8((int8x16_t)v379, (int8x16_t)v379, 8uLL).u64[0];
                  _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v1981.f64[0]), _Q5, v1981, 1), v384, *(double *)v1986.i64);
                  __asm { FMLA            D5, D3, V20.D[1] }
                  _D22 = v1990.i64[0];
                  _D3 = _Q5.f64[0] + *(double *)v1990.i64 * *(double *)v1986.i64;
                  v388 = vnegq_f64(_Q4);
                  *(_QWORD *)&v389.f64[0] = v376;
                  *(_QWORD *)&v389.f64[1] = vextq_s8(v381, v381, 8uLL).u64[0];
                  v390 = (float64x2_t)vzip1q_s64((int64x2_t)v1988, vdupq_laneq_s64((int64x2_t)v380, 1));
                  v391 = vmlsq_laneq_f64(vmulq_n_f64(v382, v388.f64[0]), v389, _Q4, 1);
                  *(_DWORD *)v373 = -1;
                  v373[4] = 1;
                  *((_DWORD *)v373 + 2) = 0;
                  *((_QWORD *)v373 + 2) = v254;
                  *((_QWORD *)v373 + 3) = v253;
                  *((_QWORD *)v373 + 6) = *(_QWORD *)&v379.f64[0];
                  *(_QWORD *)&v382.f64[1] = vextq_s8((int8x16_t)v382, (int8x16_t)v382, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 2) = v382;
                  *((_QWORD *)v373 + 9) = *(_QWORD *)&v384.f64[1];
                  *((_QWORD *)&v376 + 1) = *(_QWORD *)&v389.f64[1];
                  *(_OWORD *)(v373 + 56) = v376;
                  *((_QWORD *)v373 + 12) = v1990.i64[0];
                  v392 = vmlsq_lane_f64(v391, v390, _D3, 0);
                  *(_QWORD *)&v390.f64[1] = vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u64[0];
                  *((float64x2_t *)v373 + 5) = v390;
                  _Q0 = vmulq_f64(v379, v388);
                  __asm
                  {
                    FMLS            D0, D21, V4.D[1]
                    FMLS            D0, D22, V3.D[0]
                  }
                  *((_QWORD *)v373 + 15) = *(_OWORD *)&vnegq_f64(_Q0);
                  v394 = (int8x16_t)vnegq_f64(v392);
                  v394.i64[1] = vextq_s8(v394, v394, 8uLL).u64[0];
                  *(int8x16_t *)(v373 + 104) = v394;
                  v373[128] = 0;
                  *(_OWORD *)(v373 + 136) = *(_OWORD *)&object[7];
                  *((_QWORD *)v373 + 19) = *(_QWORD *)&object[23];
                  *((_OWORD *)v373 + 10) = *(_OWORD *)v2183;
                  *((_QWORD *)v373 + 22) = *(_QWORD *)&v2183[16];
                  *((_QWORD *)v373 + 23) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 24) = 0;
                  *((_QWORD *)v373 + 25) = 0;
                  *((_QWORD *)v373 + 26) = 0;
                  *((_QWORD *)v373 + 27) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 28) = 0;
                  *((_QWORD *)v373 + 29) = 0;
                  *((_QWORD *)v373 + 30) = 0;
                  *((_QWORD *)v373 + 31) = 0x3FF0000000000000;
                  *((_QWORD *)v373 + 33) = 0;
                  *((_QWORD *)v373 + 34) = 0;
                  *((_QWORD *)v373 + 32) = 0;
                  LODWORD(v2150[0]) = v254;
                  v2150[1] = v373;
                  sub_20F61BB04((char **)(v2068 + 4888), v256, (uint64_t)v2150);
                  if ((v254 & 0x100000000) != 0)
                  {
                    v395 = *(char **)(v2068 + 6256);
                    v396 = *(_QWORD *)(v2068 + 6264);
                    if ((unint64_t)v395 < v396)
                    {
                      *(_DWORD *)v395 = v254;
                      v397 = (uint64_t)(v395 + 4);
                      goto LABEL_511;
                    }
                    v398 = (char *)*v1965;
                    v399 = v395 - (_BYTE *)*v1965;
                    v400 = v399 >> 2;
                    v401 = (v399 >> 2) + 1;
                    if (v401 >> 62)
                      sub_20E867F44();
                    v402 = v396 - (_QWORD)v398;
                    if (v402 >> 1 > v401)
                      v401 = v402 >> 1;
                    if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL)
                      v403 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v403 = v401;
                    if (v403)
                    {
                      v1990.i64[0] = v395 - (_BYTE *)*v1965;
                      category = v399 >> 2;
                      if (v403 >> 62)
                        sub_20E877A38();
                      v404 = v403;
                      v405 = operator new(4 * v403);
                      v403 = v404;
                      v400 = category;
                      v399 = v1990.i64[0];
                      v406 = &v405[4 * category];
                      *v406 = v254;
                      v397 = (uint64_t)(v406 + 1);
                      v407 = v395 - v398;
                      if (v395 == v398)
                        goto LABEL_509;
LABEL_503:
                      v408 = v407 - 4;
                      if (v408 < 0x2C)
                        goto LABEL_1907;
                      if ((unint64_t)(v395 - v405 - v399) < 0x20)
                        goto LABEL_1907;
                      v409 = (v408 >> 2) + 1;
                      v410 = 4 * (v409 & 0x7FFFFFFFFFFFFFF8);
                      v411 = &v395[-v410];
                      v406 = (_DWORD *)((char *)v406 - v410);
                      v412 = &v405[4 * v400 - 16];
                      v413 = v395 - 16;
                      v414 = v409 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v415 = *(_OWORD *)v413;
                        *(v412 - 1) = *((_OWORD *)v413 - 1);
                        *v412 = v415;
                        v412 -= 2;
                        v413 -= 32;
                        v414 -= 8;
                      }
                      while (v414);
                      v395 = v411;
                      if (v409 != (v409 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1907:
                        do
                        {
                          v416 = *((_DWORD *)v395 - 1);
                          v395 -= 4;
                          *--v406 = v416;
                        }
                        while (v395 != v398);
                      }
                    }
                    else
                    {
                      v405 = 0;
                      v406 = (_DWORD *)(4 * v400);
                      *(_DWORD *)(4 * v400) = v254;
                      v397 = 4 * v400 + 4;
                      v407 = v395 - v398;
                      if (v395 != v398)
                        goto LABEL_503;
                    }
LABEL_509:
                    *(_QWORD *)(v2068 + 6248) = v406;
                    *(_QWORD *)(v2068 + 6256) = v397;
                    *(_QWORD *)(v2068 + 6264) = &v405[4 * v403];
                    if (v398)
                      operator delete(v398);
LABEL_511:
                    *(_QWORD *)(v2068 + 6256) = v397;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  v372 = 1;
                  *(_BYTE *)(v2068 + 6636) = 0;
LABEL_513:
                  v417 = *(__int128 **)(v2068 + 4984);
                  v418 = *(__int128 **)(v2068 + 4992);
                  if (v418 == v417)
                  {
                    v417 = *(__int128 **)(v2068 + 4992);
                    goto LABEL_523;
                  }
                  v419 = v418 - v417;
                  do
                  {
                    v420 = v419 >> 1;
                    v421 = (unsigned int *)&v417[v419 >> 1];
                    v423 = *v421;
                    v422 = (__int128 *)(v421 + 4);
                    v419 += ~(v419 >> 1);
                    if (v423 < v255)
                      v417 = v422;
                    else
                      v419 = v420;
                  }
                  while (v419);
                  if (v418 != v417 && *(_DWORD *)v417 == (_DWORD)v255)
                    goto LABEL_547;
LABEL_523:
                  v1982 = *(int8x16_t *)(v253 + 96);
                  v1986 = *(int8x16_t *)(v253 + 112);
                  v1988 = *(int8x16_t *)(v253 + 128);
                  v1990 = *(int8x16_t *)(v253 + 144);
                  categoryg = *(_QWORD *)(v253 + 160);
                  v1978 = v372;
                  v424 = sub_20F61C2D4(v2068 + 5008);
                  v425 = v1990;
                  v426 = v1988;
                  v427 = v1986;
                  *(_DWORD *)v424 = -1;
                  v428 = v1982;
                  *(_BYTE *)(v424 + 4) = 1;
                  *(_DWORD *)(v424 + 8) = 0;
                  *(_QWORD *)(v424 + 16) = v255;
                  *(_QWORD *)(v424 + 24) = v253;
                  v428.i64[1] = vextq_s8(v428, v428, 8uLL).u64[0];
                  v427.i64[1] = vextq_s8(v427, v427, 8uLL).u64[0];
                  *(int8x16_t *)(v424 + 32) = v428;
                  *(int8x16_t *)(v424 + 48) = v427;
                  v426.i64[1] = vextq_s8(v426, v426, 8uLL).u64[0];
                  v425.i64[1] = vextq_s8(v425, v425, 8uLL).u64[0];
                  *(_QWORD *)(v424 + 96) = categoryg;
                  *(int8x16_t *)(v424 + 64) = v426;
                  *(int8x16_t *)(v424 + 80) = v425;
                  *(_BYTE *)(v424 + 104) = 0;
                  *(_DWORD *)object = v255;
                  *(_QWORD *)&object[8] = v424;
                  sub_20F61C06C((char **)(v2068 + 4984), v417, (uint64_t)object);
                  if ((v255 & 0x100000000) != 0)
                  {
                    v429 = *(char **)(v2068 + 6280);
                    v430 = *(_QWORD *)(v2068 + 6288);
                    if ((unint64_t)v429 < v430)
                    {
                      *(_DWORD *)v429 = v255;
                      v431 = (uint64_t)(v429 + 4);
                      goto LABEL_545;
                    }
                    v432 = (char *)*v1964;
                    v433 = v429 - (_BYTE *)*v1964;
                    v434 = v433 >> 2;
                    v435 = (v433 >> 2) + 1;
                    if (v435 >> 62)
                      sub_20E867F44();
                    v436 = v430 - (_QWORD)v432;
                    if (v436 >> 1 > v435)
                      v435 = v436 >> 1;
                    if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL)
                      v437 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v437 = v435;
                    if (v437)
                    {
                      if (v437 >> 62)
                        sub_20E877A38();
                      v438 = v437;
                      v439 = operator new(4 * v437);
                      v437 = v438;
                      v440 = &v439[4 * v434];
                      *v440 = v255;
                      v431 = (uint64_t)(v440 + 1);
                      v441 = v429 - v432;
                      if (v429 == v432)
                        goto LABEL_543;
LABEL_537:
                      v442 = v441 - 4;
                      if (v442 < 0x2C)
                        goto LABEL_1908;
                      if ((unint64_t)(v429 - v439 - v433) < 0x20)
                        goto LABEL_1908;
                      v443 = (v442 >> 2) + 1;
                      v444 = 4 * (v443 & 0x7FFFFFFFFFFFFFF8);
                      v445 = &v429[-v444];
                      v440 = (_DWORD *)((char *)v440 - v444);
                      v446 = &v439[4 * v434 - 16];
                      v447 = v429 - 16;
                      v448 = v443 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v449 = *(_OWORD *)v447;
                        *(v446 - 1) = *((_OWORD *)v447 - 1);
                        *v446 = v449;
                        v446 -= 2;
                        v447 -= 32;
                        v448 -= 8;
                      }
                      while (v448);
                      v429 = v445;
                      if (v443 != (v443 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_1908:
                        do
                        {
                          v450 = *((_DWORD *)v429 - 1);
                          v429 -= 4;
                          *--v440 = v450;
                        }
                        while (v429 != v432);
                      }
                    }
                    else
                    {
                      v439 = 0;
                      v440 = (_DWORD *)(4 * v434);
                      *(_DWORD *)(4 * v434) = v255;
                      v431 = 4 * v434 + 4;
                      v441 = v429 - v432;
                      if (v429 != v432)
                        goto LABEL_537;
                    }
LABEL_543:
                    *(_QWORD *)(v2068 + 6272) = v440;
                    *(_QWORD *)(v2068 + 6280) = v431;
                    *(_QWORD *)(v2068 + 6288) = &v439[4 * v437];
                    if (v432)
                      operator delete(v432);
LABEL_545:
                    *(_QWORD *)(v2068 + 6280) = v431;
                  }
                  v2019[2] = 0;
                  *v2019 = 0;
                  *v2001 = 0;
                  *(_BYTE *)(v2068 + 6636) = 0;
                  if ((v1978 & 1) == 0)
                  {
LABEL_547:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 582, (uint64_t)"ret.second && ret2.second", 25, (uint64_t)"Failed to add PoseVariable or VelAndBiasVariable.", 49, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                  }
                  if (*(_BYTE *)(v2068 + 2146))
                    v451 = v243;
                  else
                    v451 = 1;
                  if ((v451 & 1) != 0)
                    goto LABEL_478;
                  v452 = *(_QWORD **)(v2068 + 8);
                  v453 = v452[8];
                  v454 = v452[39] * v453;
                  if (!v454)
                    goto LABEL_478;
                  v455 = 0;
                  v456 = 0;
                  v457 = 0;
                  v458 = 0;
                  v459 = 1;
                  v460 = __szc;
                  while (1)
                  {
                    v461 = v458 % v453;
                    if (((v458 % v453) & 0x8000000000000000) != 0)
                    {
                      v465 = (_QWORD *)v452[6];
                      do
                      {
                        v466 = (_QWORD *)*v465;
                        if (*v465)
                        {
                          do
                          {
                            v462 = v466;
                            v466 = (_QWORD *)v466[1];
                          }
                          while (v466);
                        }
                        else
                        {
                          do
                          {
                            v462 = (_QWORD *)v465[2];
                            _ZF = *v462 == (_QWORD)v465;
                            v465 = v462;
                          }
                          while (_ZF);
                        }
                        v465 = v462;
                        _CF = __CFADD__(v461++, 1);
                      }
                      while (!_CF);
                    }
                    else
                    {
                      v462 = (_QWORD *)v452[6];
                      if (v461)
                      {
                        v463 = (_QWORD *)v452[6];
                        do
                        {
                          v464 = (_QWORD *)v463[1];
                          if (v464)
                          {
                            do
                            {
                              v462 = v464;
                              v464 = (_QWORD *)*v464;
                            }
                            while (v464);
                          }
                          else
                          {
                            do
                            {
                              v462 = (_QWORD *)v463[2];
                              _ZF = *v462 == (_QWORD)v463;
                              v463 = v462;
                            }
                            while (!_ZF);
                          }
                          v463 = v462;
                          v1506 = v461-- <= 1;
                        }
                        while (!v1506);
                      }
                    }
                    v467 = v462[4];
                    v468 = v462[5];
                    if (v467 == v234 && v242 == (_DWORD)v468)
                      break;
                    v459 = 0;
                    v457 = v468;
                    v455 = v467 & 0xFFFFFFFFFFFFFF00;
                    ++v458;
                    v456 = v467;
                    if (v458 == v454)
                      goto LABEL_478;
                  }
                  if ((v459 & 1) != 0 || v234 != (v456 | v455))
                    goto LABEL_478;
                  if (v2011)
                    v470 = -1;
                  else
                    v470 = 0;
                  v473 = (uint64_t *)v452[7];
                  v471 = v452 + 7;
                  v472 = v473;
                  if (v473)
                  {
                    v474 = v471;
                    v475 = v471;
                    v476 = v472;
                    do
                    {
                      v477 = v476[4];
                      if (v477 < v234)
                      {
                        ++v476;
                      }
                      else if (v477 == v234)
                      {
                        if (*((_DWORD *)v476 + 10) < __szc)
                          ++v476;
                        else
                          v475 = v476;
                      }
                      else
                      {
                        v475 = v476;
                      }
                      v476 = (uint64_t *)*v476;
                    }
                    while (v476);
                    if (v475 == v471)
                    {
                      v479 = 0;
                    }
                    else
                    {
                      v478 = v475[4];
                      if (v234 >= v478)
                      {
                        if (v234 == v478 && *((_DWORD *)v475 + 10) > __szc)
                          v479 = 0;
                        else
                          v479 = v475[6];
                      }
                      else
                      {
                        v479 = 0;
                      }
                    }
                    do
                    {
                      v481 = v472[4];
                      if (v481 < v234)
                      {
                        ++v472;
                      }
                      else if (v481 == v234)
                      {
                        if (*((_DWORD *)v472 + 10) < v457)
                          ++v472;
                        else
                          v474 = v472;
                      }
                      else
                      {
                        v474 = v472;
                      }
                      v472 = (uint64_t *)*v472;
                    }
                    while (v472);
                    if (v474 != v471)
                    {
                      v482 = v474[4];
                      if (v234 >= v482 && (v234 != v482 || *((_DWORD *)v474 + 10) <= v457))
                      {
                        v480 = v474[6];
                        if (!v479 || !v480)
                          goto LABEL_612;
LABEL_613:
                        v484 = v1962;
                        v484.i8[0] = 0;
                        v485 = vdupq_n_s8(v470);
                        v1961 = vbslq_s8(v485, v1961, (int8x16_t)v2027);
                        v1962 = vbslq_s8(v485, v484, (int8x16_t)v2064);
                        v486 = (_QWORD *)v2068;
                        if (*(_BYTE *)(v2068 + 2148))
                        {
                          v487 = *(uint64_t **)(v2068 + 136);
                          if (v487)
                          {
                            v489 = *v487;
                            v488 = v487[1];
                            if (v488 != v489)
                            {
                              v490 = 0x80BFA02FE80BFA03 * ((v488 - v489) >> 4);
                              do
                              {
                                v491 = v490 >> 1;
                                v492 = v489 + 2736 * (v490 >> 1);
                                if (*(_QWORD *)v492 < v234 || *(_QWORD *)v492 == v234 && *(_DWORD *)(v492 + 8) < v460)
                                {
                                  v489 = v492 + 2736;
                                  v491 = v490 + ~v491;
                                }
                                v490 = v491;
                              }
                              while (v491);
                            }
                            v486 = (_QWORD *)v2068;
                            if (v489 != v488 && *(_QWORD *)v489 == v234 && *(_DWORD *)(v489 + 8) == v460)
                            {
                              v2071 = 0;
                              v2070 = 0;
                              if (*(_BYTE *)(v2068 + 1317))
                              {
                                v493 = *v1963;
                                if (!*v1963)
                                {
                                  __asm { FMOV            V0.2D, #1.0 }
                                  *(_OWORD *)&object[72] = _Q0;
                                  *(_OWORD *)&object[88] = _Q0;
                                  *(_OWORD *)&object[104] = _Q0;
                                  *(double *)object = *(double *)(v2068 + 1328) * *(double *)(v2068 + 1328);
                                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                                  *(_QWORD *)&object[16] = *(_QWORD *)object;
                                  *(_QWORD *)&object[24] = *(_QWORD *)object;
                                  *(_QWORD *)&object[32] = *(_QWORD *)object;
                                  *(_QWORD *)&object[40] = *(_QWORD *)object;
                                  *(double *)&object[48] = *(double *)(v2068 + 1320) * *(double *)(v2068 + 1320);
                                  *(_QWORD *)&object[56] = *(_QWORD *)&object[48];
                                  *(_QWORD *)&object[64] = *(_QWORD *)&object[48];
                                  LODWORD(v2150[0]) = 0;
                                  sub_20F61C5D4((double *)object, (unsigned int *)v2150, v2183);
                                  v495 = *(_OWORD *)v2183;
                                  *(_QWORD *)v2183 = 0;
                                  *(_QWORD *)&v2183[8] = 0;
                                  v496 = *(std::__shared_weak_count **)(v2068 + 512);
                                  *(_OWORD *)v1963 = v495;
                                  if (v496)
                                  {
                                    p_shared_owners = (unint64_t *)&v496->__shared_owners_;
                                    do
                                      v498 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v498 - 1, p_shared_owners));
                                    if (!v498)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                                      std::__shared_weak_count::__release_weak(v496);
                                    }
                                  }
                                  v499 = *(std::__shared_weak_count **)&v2183[8];
                                  if (*(_QWORD *)&v2183[8])
                                  {
                                    v500 = (unint64_t *)(*(_QWORD *)&v2183[8] + 8);
                                    do
                                      v501 = __ldaxr(v500);
                                    while (__stlxr(v501 - 1, v500));
                                    if (!v501)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                                      std::__shared_weak_count::__release_weak(v499);
                                    }
                                  }
                                  v493 = *v1963;
                                }
                                v502 = *(std::__shared_weak_count **)(v2068 + 512);
                                if (v502)
                                {
                                  v503 = (unint64_t *)&v502->__shared_owners_;
                                  do
                                    v504 = __ldxr(v503);
                                  while (__stxr(v504 + 1, v503));
                                }
                                v2070 = v493;
                                v2071 = v502;
                              }
                              else
                              {
                                v502 = 0;
                              }
                              v2012 = *(_DWORD *)(v489 + 40);
                              v505 = *(_DWORD *)(v489 + 24);
                              v2069 = v502;
                              if (v502)
                              {
                                v506 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v507 = __ldxr(v506);
                                while (__stxr(v507 + 1, v506));
                              }
                              v1991 = *(double *)(v489 + 2720);
                              categoryh = *(double *)(v489 + 2728);
                              v2150[0] = __szc;
                              v1989 = *(double *)(v489 + 1616);
                              bzero(&object[8], 0x6F8uLL);
                              *(_QWORD *)object = 0x3FF0000000000000;
                              *(_QWORD *)&object[128] = 0x3FF0000000000000;
                              *(_QWORD *)&object[256] = 0x3FF0000000000000;
                              *(_QWORD *)&object[384] = 0x3FF0000000000000;
                              *(_QWORD *)&object[512] = 0x3FF0000000000000;
                              *(_QWORD *)&object[640] = 0x3FF0000000000000;
                              *(_QWORD *)&object[768] = 0x3FF0000000000000;
                              *(_QWORD *)&object[896] = 0x3FF0000000000000;
                              *(_QWORD *)&object[1024] = 0x3FF0000000000000;
                              v1983 = *(_QWORD *)(v489 + 2112);
                              v508 = *(_OWORD *)(v489 + 2080);
                              v1928 = *(_OWORD *)(v489 + 2096);
                              v509 = *(_OWORD *)(v489 + 2064);
                              v1979 = *(_QWORD *)(v489 + 2184);
                              v1924 = *(_OWORD *)(v489 + 2168);
                              v1916 = *(_OWORD *)(v489 + 2152);
                              v510 = *(_OWORD *)(v489 + 2136);
                              v511 = *(_OWORD *)(v489 + 2120);
                              v1987 = *(_QWORD *)(v489 + 2256);
                              v1922 = *(_OWORD *)(v489 + 2240);
                              v512 = *(_OWORD *)(v489 + 2208);
                              v1914 = *(_OWORD *)(v489 + 2224);
                              v513 = *(_OWORD *)(v489 + 2192);
                              v1973 = *(_QWORD *)(v489 + 2328);
                              v514 = *(_OWORD *)(v489 + 2264);
                              v1913 = *(_OWORD *)(v489 + 2312);
                              v515 = *(_OWORD *)(v489 + 2296);
                              v516 = *(_OWORD *)(v489 + 2280);
                              v1968 = *(_QWORD *)(v489 + 2400);
                              v517 = *(_OWORD *)(v489 + 2368);
                              v1919 = *(_OWORD *)(v489 + 2384);
                              v518 = *(_OWORD *)(v489 + 2336);
                              v519 = *(_OWORD *)(v489 + 2352);
                              v521 = *(_OWORD *)(v489 + 2440);
                              v520 = *(_OWORD *)(v489 + 2456);
                              v523 = *(_OWORD *)(v489 + 2408);
                              v522 = *(_OWORD *)(v489 + 2424);
                              v524 = *(_QWORD *)(v489 + 2472);
                              v525 = *(_QWORD *)(v489 + 2544);
                              v526 = *(_OWORD *)(v489 + 2512);
                              v527 = *(_OWORD *)(v489 + 2528);
                              v528 = *(_OWORD *)(v489 + 2480);
                              v529 = *(_OWORD *)(v489 + 2496);
                              v530 = *(_QWORD *)(v489 + 2616);
                              v531 = *(_OWORD *)(v489 + 2584);
                              v532 = *(_OWORD *)(v489 + 2600);
                              v533 = *(_OWORD *)(v489 + 2552);
                              v534 = *(_OWORD *)(v489 + 2568);
                              v1917 = *(_QWORD *)(v489 + 2688);
                              v536 = *(_OWORD *)(v489 + 2656);
                              v535 = *(_OWORD *)(v489 + 2672);
                              v537 = *(_OWORD *)(v489 + 2624);
                              v538 = *(_OWORD *)(v489 + 2640);
                              *(_OWORD *)object = *(_OWORD *)(v489 + 2048);
                              *(_OWORD *)&object[16] = v509;
                              *(_OWORD *)&object[32] = v508;
                              *(_OWORD *)&object[48] = v1928;
                              *(_OWORD *)&object[120] = v511;
                              *(_OWORD *)&object[136] = v510;
                              *(_OWORD *)&object[152] = v1916;
                              *(_OWORD *)&object[168] = v1924;
                              *(_QWORD *)&object[64] = v1983;
                              *(_QWORD *)&object[184] = v1979;
                              *(_OWORD *)&object[240] = v513;
                              *(_OWORD *)&object[256] = v512;
                              *(_OWORD *)&object[272] = v1914;
                              *(_OWORD *)&object[288] = v1922;
                              *(_OWORD *)&object[360] = v514;
                              *(_OWORD *)&object[376] = v516;
                              *(_OWORD *)&object[392] = v515;
                              *(_OWORD *)&object[408] = v1913;
                              *(_QWORD *)&object[424] = v1973;
                              *(_OWORD *)&object[480] = v518;
                              *(_OWORD *)&object[496] = v519;
                              *(_OWORD *)&object[512] = v517;
                              *(_OWORD *)&object[528] = v1919;
                              *(_QWORD *)&object[544] = v1968;
                              *(_OWORD *)&object[600] = v523;
                              *(_OWORD *)&object[616] = v522;
                              *(_OWORD *)&object[632] = v521;
                              *(_OWORD *)&object[648] = v520;
                              *(_QWORD *)&object[664] = v524;
                              *(_OWORD *)&object[720] = v528;
                              *(_OWORD *)&object[736] = v529;
                              *(_OWORD *)&object[752] = v526;
                              *(_OWORD *)&object[768] = v527;
                              *(_QWORD *)&object[784] = v525;
                              *(_OWORD *)&object[840] = v533;
                              *(_OWORD *)&object[856] = v534;
                              *(_OWORD *)&object[872] = v531;
                              *(_OWORD *)&object[888] = v532;
                              *(_QWORD *)&object[904] = v530;
                              *(_OWORD *)&object[960] = v537;
                              *(_OWORD *)&object[976] = v538;
                              *(_OWORD *)&object[992] = v536;
                              *(_OWORD *)&object[1008] = v535;
                              *(_QWORD *)&object[1024] = v1917;
                              *(_QWORD *)&object[304] = v1987;
                              *(double *)&object[1152] = v1991 * v1991 * v1989;
                              *(double *)&object[1280] = *(double *)&object[1152];
                              *(double *)&object[1408] = *(double *)&object[1152];
                              *(double *)&object[1536] = categoryh * categoryh * v1989;
                              *(double *)&object[1664] = *(double *)&object[1536];
                              *(double *)&object[1792] = *(double *)&object[1536];
                              sub_20F61DEF0((float64x2_t *)object, (uint64_t)v2151);
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[256], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[384];
                              v1990 = v539;
                              v539.i64[0] = vdupq_laneq_s64(*(int64x2_t *)&v2151[496], 1).u64[0];
                              v539.i64[1] = *(_QWORD *)&v2151[624];
                              v1986 = v539;
                              v1988 = (int8x16_t)vzip2q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[736], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[864];
                              v1969 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[976], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1104];
                              v1925 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1216], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1344];
                              v1915 = v540;
                              *(_QWORD *)&v540 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1456], 1).u64[0];
                              *((_QWORD *)&v540 + 1) = *(_QWORD *)&v2151[1584];
                              v1910 = v540;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[272], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[400];
                              v1929 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[512], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[640];
                              v1920 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[752], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[880];
                              v1912 = v541;
                              *(_QWORD *)&v541 = vdupq_laneq_s64(*(int64x2_t *)&v2151[992], 1).u64[0];
                              *((_QWORD *)&v541 + 1) = *(_QWORD *)&v2151[1120];
                              v1909 = v541;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1232], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1360];
                              v1907 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1472], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[1600];
                              v1905 = v542;
                              *(_QWORD *)&v542 = vdupq_laneq_s64(*(int64x2_t *)&v2151[288], 1).u64[0];
                              *((_QWORD *)&v542 + 1) = *(_QWORD *)&v2151[416];
                              v1911 = v542;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[528], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[656];
                              v1908 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[768], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[896];
                              v1904 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1008], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1136];
                              v1902 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1248], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1376];
                              v1899 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1488], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1616];
                              v1897 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[304], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[432];
                              v1906 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[544], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[672];
                              v1903 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[784], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[912];
                              v1900 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1024], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1152];
                              v1896 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1264], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1392];
                              v1893 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1504], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1632];
                              v1891 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[320], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[448];
                              v1901 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[560], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[688];
                              v1898 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[800], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[928];
                              v1894 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1040], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1168];
                              v1892 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1280], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1408];
                              v1888 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1520], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1648];
                              v1885 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[336], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[464];
                              v1895 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[576], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[704];
                              v1889 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[816], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[944];
                              v1887 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1056], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1184];
                              v1884 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1296], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1424];
                              v1882 = v543;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1536], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1664];
                              v1881 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[352], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[480];
                              v1890 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[592], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[720];
                              v1886 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[832], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[960];
                              v1883 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1072], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1200];
                              v1880 = v543;
                              *(_QWORD *)&v544 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1312], 1).u64[0];
                              *((_QWORD *)&v544 + 1) = *(_QWORD *)&v2151[1440];
                              v1879 = v544;
                              *(_QWORD *)&v543 = vdupq_laneq_s64(*(int64x2_t *)&v2151[1552], 1).u64[0];
                              *((_QWORD *)&v543 + 1) = *(_QWORD *)&v2151[1680];
                              v1878 = v543;
                              v545 = *(_QWORD *)(v489 + 64);
                              *(_QWORD *)&v535 = *(_QWORD *)(v489 + 1616);
                              *(_OWORD *)&v2151[1816] = *(_OWORD *)(v489 + 48);
                              *(_QWORD *)&v2151[1832] = v545;
                              v546 = *(_QWORD *)(v489 + 88);
                              *(_OWORD *)&v2151[1840] = *(_OWORD *)(v489 + 72);
                              *(_QWORD *)&v2151[1856] = v546;
                              v547 = *(_OWORD *)(v489 + 112);
                              v2152[0] = *(_OWORD *)(v489 + 96);
                              v2152[1] = v547;
                              v2152[2] = *(_OWORD *)(v489 + 128);
                              v548 = *(_QWORD *)(v489 + 192);
                              v549 = *(_OWORD *)(v489 + 144);
                              v550 = *(_OWORD *)(v489 + 176);
                              v2152[4] = *(_OWORD *)(v489 + 160);
                              v2152[5] = v550;
                              v2152[3] = v549;
                              *(_QWORD *)&v2152[6] = v548;
                              *(_OWORD *)((char *)&v2152[6] + 8) = *(_OWORD *)(v489 + 200);
                              v551 = *(_QWORD *)(v489 + 264);
                              v552 = *(_OWORD *)(v489 + 216);
                              v553 = *(_OWORD *)(v489 + 248);
                              *(_OWORD *)((char *)&v2152[8] + 8) = *(_OWORD *)(v489 + 232);
                              *(_OWORD *)((char *)&v2152[9] + 8) = v553;
                              *(_OWORD *)((char *)&v2152[7] + 8) = v552;
                              *((_QWORD *)&v2152[10] + 1) = v551;
                              v2152[11] = *(_OWORD *)(v489 + 272);
                              v554 = *(_QWORD *)(v489 + 336);
                              v555 = *(_OWORD *)(v489 + 288);
                              v556 = *(_OWORD *)(v489 + 320);
                              v2152[13] = *(_OWORD *)(v489 + 304);
                              v2152[14] = v556;
                              v2152[12] = v555;
                              *(_QWORD *)&v2152[15] = v554;
                              *(_OWORD *)((char *)&v2152[15] + 8) = *(_OWORD *)(v489 + 344);
                              v557 = *(_QWORD *)(v489 + 408);
                              v558 = *(_OWORD *)(v489 + 360);
                              v559 = *(_OWORD *)(v489 + 392);
                              *(_OWORD *)((char *)&v2152[17] + 8) = *(_OWORD *)(v489 + 376);
                              *(_OWORD *)((char *)&v2152[18] + 8) = v559;
                              *(_OWORD *)((char *)&v2152[16] + 8) = v558;
                              *((_QWORD *)&v2152[19] + 1) = v557;
                              v2152[20] = *(_OWORD *)(v489 + 416);
                              v560 = *(_QWORD *)(v489 + 480);
                              v561 = *(_OWORD *)(v489 + 432);
                              v562 = *(_OWORD *)(v489 + 464);
                              v2152[22] = *(_OWORD *)(v489 + 448);
                              v2152[23] = v562;
                              v2152[21] = v561;
                              *(_QWORD *)&v2152[24] = v560;
                              *(_OWORD *)((char *)&v2152[24] + 8) = *(_OWORD *)(v489 + 488);
                              v563 = *(_QWORD *)(v489 + 552);
                              v564 = *(_OWORD *)(v489 + 504);
                              v565 = *(_OWORD *)(v489 + 536);
                              *(_OWORD *)((char *)&v2152[26] + 8) = *(_OWORD *)(v489 + 520);
                              *(_OWORD *)((char *)&v2152[27] + 8) = v565;
                              *(_OWORD *)((char *)&v2152[25] + 8) = v564;
                              *((_QWORD *)&v2152[28] + 1) = v563;
                              v2152[29] = *(_OWORD *)(v489 + 560);
                              v566 = *(_QWORD *)(v489 + 624);
                              v567 = *(_OWORD *)(v489 + 576);
                              v568 = *(_OWORD *)(v489 + 608);
                              v2152[31] = *(_OWORD *)(v489 + 592);
                              v2152[32] = v568;
                              v2152[30] = v567;
                              *(_QWORD *)&v2152[33] = v566;
                              *(_OWORD *)((char *)&v2152[33] + 8) = *(_OWORD *)(v489 + 632);
                              v569 = *(_QWORD *)(v489 + 696);
                              v570 = *(_OWORD *)(v489 + 648);
                              v571 = *(_OWORD *)(v489 + 680);
                              *(_OWORD *)((char *)&v2152[35] + 8) = *(_OWORD *)(v489 + 664);
                              *(_OWORD *)((char *)&v2152[36] + 8) = v571;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[128];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[248];
                              v1877 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[368];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[488];
                              v1876 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[608];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[728];
                              v1875 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[848];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[968];
                              v1874 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1088];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1208];
                              v1873 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1328];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1448];
                              v1872 = v547;
                              *(_QWORD *)&v547 = *(_QWORD *)&v2151[1568];
                              *((_QWORD *)&v547 + 1) = *(_QWORD *)&v2151[1688];
                              *(_OWORD *)((char *)&v2152[34] + 8) = v570;
                              *((_QWORD *)&v2152[37] + 1) = v569;
                              v1871 = v547;
                              memcpy(&v2152[38], (const void *)(v489 + 704), 0x288uLL);
                              v572 = *(_QWORD *)(v489 + 1368);
                              *(_OWORD *)((char *)&v2152[78] + 8) = *(_OWORD *)(v489 + 1352);
                              *((_QWORD *)&v2152[79] + 1) = v572;
                              v573 = *(_QWORD *)(v489 + 1392);
                              v2152[80] = *(_OWORD *)(v489 + 1376);
                              *(int64x2_t *)((char *)&v2152[86] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1216], *(int64x2_t *)&v2151[1336]);
                              *(int64x2_t *)((char *)&v2152[87] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1456], *(int64x2_t *)&v2151[1576]);
                              *(int64x2_t *)((char *)&v2152[84] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[736], *(int64x2_t *)&v2151[856]);
                              *(int64x2_t *)((char *)&v2152[85] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[976], *(int64x2_t *)&v2151[1096]);
                              *(_QWORD *)&v2152[96] = *(_QWORD *)&v2151[1704];
                              *((_QWORD *)&v2152[88] + 1) = *(_QWORD *)&v2151[1696];
                              *(int64x2_t *)((char *)&v2152[82] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[256], *(int64x2_t *)&v2151[376]);
                              *(int64x2_t *)((char *)&v2152[83] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[496], *(int64x2_t *)&v2151[616]);
                              *(int64x2_t *)((char *)&v2152[81] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[16], *(int64x2_t *)&v2151[136]);
                              v2152[95] = v1910;
                              v2152[94] = v1915;
                              v2152[93] = v1925;
                              v2152[92] = v1969;
                              v2152[91] = v1986;
                              v2152[90] = v1990;
                              v2152[89] = v1988;
                              *(int64x2_t *)((char *)&v2152[101] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1232], *(int64x2_t *)&v2151[1352]);
                              *(int64x2_t *)((char *)&v2152[102] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1472], *(int64x2_t *)&v2151[1592]);
                              *(int64x2_t *)((char *)&v2152[99] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[752], *(int64x2_t *)&v2151[872]);
                              *(int64x2_t *)((char *)&v2152[100] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[992], *(int64x2_t *)&v2151[1112]);
                              *(_QWORD *)&v2152[111] = *(_QWORD *)&v2151[1720];
                              *((_QWORD *)&v2152[103] + 1) = *(_QWORD *)&v2151[1712];
                              *(int64x2_t *)((char *)&v2152[97] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[272], *(int64x2_t *)&v2151[392]);
                              *(int64x2_t *)((char *)&v2152[98] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[512], *(int64x2_t *)&v2151[632]);
                              *(int64x2_t *)((char *)&v2152[96] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              v2152[109] = v1907;
                              v2152[110] = v1905;
                              v2152[107] = v1912;
                              v2152[108] = v1909;
                              v2152[105] = v1929;
                              v2152[106] = v1920;
                              v2152[104] = vzip2q_s64(*(int64x2_t *)&v2151[32], *(int64x2_t *)&v2151[152]);
                              *(int64x2_t *)((char *)&v2152[116] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1248], *(int64x2_t *)&v2151[1368]);
                              *(int64x2_t *)((char *)&v2152[117] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1488], *(int64x2_t *)&v2151[1608]);
                              *(int64x2_t *)((char *)&v2152[114] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[768], *(int64x2_t *)&v2151[888]);
                              *(int64x2_t *)((char *)&v2152[115] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1008], *(int64x2_t *)&v2151[1128]);
                              *(_QWORD *)&v2152[126] = *(_QWORD *)&v2151[1736];
                              *((_QWORD *)&v2152[118] + 1) = *(_QWORD *)&v2151[1728];
                              *(int64x2_t *)((char *)&v2152[112] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[288], *(int64x2_t *)&v2151[408]);
                              *(int64x2_t *)((char *)&v2152[113] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[528], *(int64x2_t *)&v2151[648]);
                              *(int64x2_t *)((char *)&v2152[111] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              v2152[124] = v1899;
                              v2152[125] = v1897;
                              v2152[122] = v1904;
                              v2152[123] = v1902;
                              v2152[120] = v1911;
                              v2152[121] = v1908;
                              v2152[119] = vzip2q_s64(*(int64x2_t *)&v2151[48], *(int64x2_t *)&v2151[168]);
                              *(int64x2_t *)((char *)&v2152[131] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1264], *(int64x2_t *)&v2151[1384]);
                              *(int64x2_t *)((char *)&v2152[132] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1504], *(int64x2_t *)&v2151[1624]);
                              *(int64x2_t *)((char *)&v2152[129] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[784], *(int64x2_t *)&v2151[904]);
                              *(int64x2_t *)((char *)&v2152[130] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1024], *(int64x2_t *)&v2151[1144]);
                              *(_QWORD *)&v2152[141] = *(_QWORD *)&v2151[1752];
                              *((_QWORD *)&v2152[133] + 1) = *(_QWORD *)&v2151[1744];
                              *(int64x2_t *)((char *)&v2152[127] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[304], *(int64x2_t *)&v2151[424]);
                              *(int64x2_t *)((char *)&v2152[128] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[544], *(int64x2_t *)&v2151[664]);
                              *(int64x2_t *)((char *)&v2152[126] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              v2152[139] = v1893;
                              v2152[140] = v1891;
                              v2152[137] = v1900;
                              v2152[138] = v1896;
                              v2152[135] = v1906;
                              v2152[136] = v1903;
                              v2152[134] = vzip2q_s64(*(int64x2_t *)&v2151[64], *(int64x2_t *)&v2151[184]);
                              *(int64x2_t *)((char *)&v2152[146] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1280], *(int64x2_t *)&v2151[1400]);
                              *(int64x2_t *)((char *)&v2152[147] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1520], *(int64x2_t *)&v2151[1640]);
                              *(int64x2_t *)((char *)&v2152[144] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[800], *(int64x2_t *)&v2151[920]);
                              *(int64x2_t *)((char *)&v2152[145] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1040], *(int64x2_t *)&v2151[1160]);
                              *(_QWORD *)&v2152[156] = *(_QWORD *)&v2151[1768];
                              *((_QWORD *)&v2152[148] + 1) = *(_QWORD *)&v2151[1760];
                              *(int64x2_t *)((char *)&v2152[142] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[320], *(int64x2_t *)&v2151[440]);
                              *(int64x2_t *)((char *)&v2152[143] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[560], *(int64x2_t *)&v2151[680]);
                              *(int64x2_t *)((char *)&v2152[141] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              v2152[154] = v1888;
                              v2152[155] = v1885;
                              v2152[152] = v1894;
                              v2152[153] = v1892;
                              v2152[150] = v1901;
                              v2152[151] = v1898;
                              v2152[149] = vzip2q_s64(*(int64x2_t *)&v2151[80], *(int64x2_t *)&v2151[200]);
                              *(int64x2_t *)((char *)&v2152[161] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1296], *(int64x2_t *)&v2151[1416]);
                              *(int64x2_t *)((char *)&v2152[162] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1536], *(int64x2_t *)&v2151[1656]);
                              *(int64x2_t *)((char *)&v2152[159] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[816], *(int64x2_t *)&v2151[936]);
                              *(int64x2_t *)((char *)&v2152[160] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1056], *(int64x2_t *)&v2151[1176]);
                              *(_QWORD *)&v2152[171] = *(_QWORD *)&v2151[1784];
                              *((_QWORD *)&v2152[163] + 1) = *(_QWORD *)&v2151[1776];
                              *(int64x2_t *)((char *)&v2152[157] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[336], *(int64x2_t *)&v2151[456]);
                              *(int64x2_t *)((char *)&v2152[158] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[576], *(int64x2_t *)&v2151[696]);
                              *(int64x2_t *)((char *)&v2152[156] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              v2152[169] = v1882;
                              v2152[170] = v1881;
                              v2152[167] = v1887;
                              v2152[168] = v1884;
                              v2152[165] = v1895;
                              v2152[166] = v1889;
                              v2152[164] = vzip2q_s64(*(int64x2_t *)&v2151[96], *(int64x2_t *)&v2151[216]);
                              *(int64x2_t *)((char *)&v2152[176] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1312], *(int64x2_t *)&v2151[1432]);
                              *(int64x2_t *)((char *)&v2152[177] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1552], *(int64x2_t *)&v2151[1672]);
                              *(int64x2_t *)((char *)&v2152[174] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[832], *(int64x2_t *)&v2151[952]);
                              *(int64x2_t *)((char *)&v2152[175] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[1072], *(int64x2_t *)&v2151[1192]);
                              *(_QWORD *)&v2152[186] = *(_QWORD *)&v2151[1800];
                              *((_QWORD *)&v2152[178] + 1) = *(_QWORD *)&v2151[1792];
                              *(int64x2_t *)((char *)&v2152[172] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[352], *(int64x2_t *)&v2151[472]);
                              *(int64x2_t *)((char *)&v2152[173] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[592], *(int64x2_t *)&v2151[712]);
                              *(int64x2_t *)((char *)&v2152[171] + 8) = vzip1q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              v2152[184] = v1879;
                              v2152[185] = v1878;
                              v2152[182] = v1883;
                              v2152[183] = v1880;
                              v2152[180] = v1890;
                              v2152[181] = v1886;
                              v2152[179] = vzip2q_s64(*(int64x2_t *)&v2151[112], *(int64x2_t *)&v2151[232]);
                              *((_QWORD *)&v2152[193] + 1) = *(_QWORD *)&v2151[1808];
                              *(_OWORD *)((char *)&v2152[191] + 8) = v1872;
                              *(_OWORD *)((char *)&v2152[192] + 8) = v1871;
                              *(_OWORD *)((char *)&v2152[189] + 8) = v1874;
                              *(_OWORD *)((char *)&v2152[190] + 8) = v1873;
                              *(_QWORD *)&v2152[81] = v573;
                              *(_OWORD *)((char *)&v2152[187] + 8) = v1876;
                              *(_OWORD *)((char *)&v2152[188] + 8) = v1875;
                              *(_OWORD *)((char *)&v2152[186] + 8) = v1877;
                              v574 = *(_OWORD *)(v489 + 2696);
                              *(_QWORD *)&v2152[195] = *(_QWORD *)(v489 + 2712);
                              v2152[194] = v574;
                              *((_QWORD *)&v2152[195] + 1) = v535;
                              v2072 = v502;
                              if (v502)
                              {
                                v575 = (unint64_t *)&v502->__shared_owners_;
                                v576 = v2012;
                                do
                                  v577 = __ldxr(v575);
                                while (__stxr(v577 + 1, v575));
                                v2073 = v502;
                                do
                                  v578 = __ldxr(v575);
                                while (__stxr(v578 + 1, v575));
                              }
                              else
                              {
                                v2073 = 0;
                                v576 = v2012;
                              }
                              v648 = v2150[0];
                              v649 = *(void ***)(v2068 + 5728);
                              v650 = *(void ***)(v2068 + 5736);
                              if (v649 == v650)
                              {
                                v650 = *(void ***)(v2068 + 5728);
                              }
                              else if (*(v650 - 667) >= v2150[0])
                              {
                                v651 = 0x4515E08719B71393 * (v650 - v649);
                                do
                                {
                                  v652 = v651 >> 1;
                                  v653 = &v649[667 * (v651 >> 1)];
                                  v654 = *v653;
                                  v655 = v653 + 667;
                                  v651 += ~(v651 >> 1);
                                  if (v654 < v2150[0])
                                    v649 = v655;
                                  else
                                    v651 = v652;
                                }
                                while (v651);
                                if (v649 != v650)
                                {
                                  v650 = v649;
                                  if (*v649 == v2150[0])
                                  {
                                    v656 = 0;
                                    goto LABEL_848;
                                  }
                                }
                              }
                              if (v502)
                              {
                                v657 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v658 = __ldxr(v657);
                                while (__stxr(v658 + 1, v657));
                              }
                              *(_OWORD *)v2183 = *(_OWORD *)v2150;
                              v2183[24] = v2151[8];
                              *(_QWORD *)&v2183[16] = &off_24CA00398;
                              memcpy(&v2183[32], &v2151[16], 0x708uLL);
                              *(_OWORD *)&v2183[1832] = *(_OWORD *)&v2151[1816];
                              *(_QWORD *)&v2183[1848] = *(_QWORD *)&v2151[1832];
                              *(_OWORD *)&v2183[1856] = *(_OWORD *)&v2151[1840];
                              *(_QWORD *)&v2183[1872] = *(_QWORD *)&v2151[1856];
                              *(_OWORD *)&v2183[1880] = v2152[0];
                              *(_OWORD *)&v2183[1896] = v2152[1];
                              *(_QWORD *)&v2183[1976] = *(_QWORD *)&v2152[6];
                              *(_OWORD *)&v2183[1944] = v2152[4];
                              *(_OWORD *)&v2183[1960] = v2152[5];
                              *(_OWORD *)&v2183[1912] = v2152[2];
                              *(_OWORD *)&v2183[1928] = v2152[3];
                              *(_QWORD *)&v2183[2048] = *((_QWORD *)&v2152[10] + 1);
                              *(_OWORD *)&v2183[2016] = *(_OWORD *)((char *)&v2152[8] + 8);
                              *(_OWORD *)&v2183[2032] = *(_OWORD *)((char *)&v2152[9] + 8);
                              *(_OWORD *)&v2183[1984] = *(_OWORD *)((char *)&v2152[6] + 8);
                              *(_OWORD *)&v2183[2000] = *(_OWORD *)((char *)&v2152[7] + 8);
                              *(_QWORD *)&v2183[2120] = *(_QWORD *)&v2152[15];
                              *(_OWORD *)&v2183[2088] = v2152[13];
                              *(_OWORD *)&v2183[2104] = v2152[14];
                              *(_OWORD *)&v2183[2056] = v2152[11];
                              *(_OWORD *)&v2183[2072] = v2152[12];
                              *(_QWORD *)&v2183[2192] = *((_QWORD *)&v2152[19] + 1);
                              *(_OWORD *)&v2183[2160] = *(_OWORD *)((char *)&v2152[17] + 8);
                              *(_OWORD *)&v2183[2176] = *(_OWORD *)((char *)&v2152[18] + 8);
                              *(_OWORD *)&v2183[2128] = *(_OWORD *)((char *)&v2152[15] + 8);
                              *(_OWORD *)&v2183[2144] = *(_OWORD *)((char *)&v2152[16] + 8);
                              *(_QWORD *)&v2183[2264] = *(_QWORD *)&v2152[24];
                              *(_OWORD *)&v2183[2232] = v2152[22];
                              *(_OWORD *)&v2183[2248] = v2152[23];
                              *(_OWORD *)&v2183[2200] = v2152[20];
                              *(_OWORD *)&v2183[2216] = v2152[21];
                              *(_QWORD *)&v2183[2336] = *((_QWORD *)&v2152[28] + 1);
                              *(_OWORD *)&v2183[2304] = *(_OWORD *)((char *)&v2152[26] + 8);
                              *(_OWORD *)&v2183[2320] = *(_OWORD *)((char *)&v2152[27] + 8);
                              *(_OWORD *)&v2183[2272] = *(_OWORD *)((char *)&v2152[24] + 8);
                              *(_OWORD *)&v2183[2288] = *(_OWORD *)((char *)&v2152[25] + 8);
                              *(_QWORD *)&v2183[2408] = *(_QWORD *)&v2152[33];
                              *(_OWORD *)&v2183[2376] = v2152[31];
                              *(_OWORD *)&v2183[2392] = v2152[32];
                              *(_OWORD *)&v2183[2344] = v2152[29];
                              *(_OWORD *)&v2183[2360] = v2152[30];
                              *(_QWORD *)&v2183[2480] = *((_QWORD *)&v2152[37] + 1);
                              *(_OWORD *)&v2183[2448] = *(_OWORD *)((char *)&v2152[35] + 8);
                              *(_OWORD *)&v2183[2464] = *(_OWORD *)((char *)&v2152[36] + 8);
                              *(_OWORD *)&v2183[2416] = *(_OWORD *)((char *)&v2152[33] + 8);
                              *(_OWORD *)&v2183[2432] = *(_OWORD *)((char *)&v2152[34] + 8);
                              memcpy(&v2183[2488], &v2152[38], 0x288uLL);
                              *(_OWORD *)&v2183[3136] = *(_OWORD *)((char *)&v2152[78] + 8);
                              *(_QWORD *)&v2183[3152] = *((_QWORD *)&v2152[79] + 1);
                              *(_OWORD *)&v2183[3160] = v2152[80];
                              *(_QWORD *)&v2183[3176] = *(_QWORD *)&v2152[81];
                              memcpy(&v2183[3184], (char *)&v2152[81] + 8, 0x708uLL);
                              *(_OWORD *)&v2183[4984] = v2152[194];
                              *(_OWORD *)&v2183[5000] = v2152[195];
                              memset(&v2183[5016], 0, 32);
                              *(_QWORD *)&v2183[5304] = v2070;
                              *(_QWORD *)&v2183[5312] = v502;
                              if (v502)
                              {
                                v659 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v660 = __ldxr(v659);
                                while (__stxr(v660 + 1, v659));
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                                do
                                  v661 = __ldaxr(v659);
                                while (__stlxr(v661 - 1, v659));
                                if (!v661)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              else
                              {
                                *(_QWORD *)&v2183[5288] = 0xBFF0000000000000;
                                v2183[5296] = 0;
                                v2183[5320] = 0;
                              }
                              v662 = *(char **)(v2068 + 4888);
                              v663 = *(char **)(v2068 + 4896);
                              v664 = v662;
                              if (v663 != v662)
                              {
                                v665 = (v663 - v662) >> 4;
                                v664 = *(char **)(v2068 + 4888);
                                do
                                {
                                  v666 = v665 >> 1;
                                  v667 = (unsigned int *)&v664[16 * (v665 >> 1)];
                                  v669 = *v667;
                                  v668 = (char *)(v667 + 4);
                                  v665 += ~(v665 >> 1);
                                  if (v669 < v505)
                                    v664 = v668;
                                  else
                                    v665 = v666;
                                }
                                while (v665);
                              }
                              if (v664 == v663 || *(_DWORD *)v664 != v505)
                                goto LABEL_834;
                              v670 = *((_QWORD *)v664 + 1);
                              *(_QWORD *)&v2183[5016] = v670;
                              ++*(_DWORD *)(*((_QWORD *)v664 + 1) + 8);
                              v671 = *(char **)(v2068 + 4984);
                              v672 = *(char **)(v2068 + 4992);
                              v673 = v671;
                              if (v672 != v671)
                              {
                                v674 = (v672 - v671) >> 4;
                                v673 = *(char **)(v2068 + 4984);
                                do
                                {
                                  v675 = v674 >> 1;
                                  v676 = (unsigned int *)&v673[16 * (v674 >> 1)];
                                  v678 = *v676;
                                  v677 = (char *)(v676 + 4);
                                  v674 += ~(v674 >> 1);
                                  if (v678 < v505)
                                    v673 = v677;
                                  else
                                    v674 = v675;
                                }
                                while (v674);
                              }
                              if (v673 == v672 || *(_DWORD *)v673 != v505)
                                goto LABEL_834;
                              v679 = *((_QWORD *)v673 + 1);
                              *(_QWORD *)&v2183[5024] = v679;
                              ++*(_DWORD *)(*((_QWORD *)v673 + 1) + 8);
                              if (v663 != v662)
                              {
                                v680 = (v663 - v662) >> 4;
                                do
                                {
                                  v681 = v680 >> 1;
                                  v682 = (unsigned int *)&v662[16 * (v680 >> 1)];
                                  v684 = *v682;
                                  v683 = (char *)(v682 + 4);
                                  v680 += ~(v680 >> 1);
                                  if (v684 < v576)
                                    v662 = v683;
                                  else
                                    v680 = v681;
                                }
                                while (v680);
                              }
                              if (v662 == v663 || *(_DWORD *)v662 != v576)
                                goto LABEL_834;
                              v685 = *((_QWORD *)v662 + 1);
                              *(_QWORD *)&v2183[5032] = v685;
                              ++*(_DWORD *)(*((_QWORD *)v662 + 1) + 8);
                              if (v672 != v671)
                              {
                                v686 = (v672 - v671) >> 4;
                                do
                                {
                                  v687 = v686 >> 1;
                                  v688 = (unsigned int *)&v671[16 * (v686 >> 1)];
                                  v690 = *v688;
                                  v689 = (char *)(v688 + 4);
                                  v686 += ~(v686 >> 1);
                                  if (v690 < v576)
                                    v671 = v689;
                                  else
                                    v686 = v687;
                                }
                                while (v686);
                              }
                              if (v671 == v672 || *(_DWORD *)v671 != v576)
                              {
LABEL_834:
                                if (*(_QWORD *)&v2183[5016])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5016] + 8);
                                if (*(_QWORD *)&v2183[5024])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5024] + 8);
                                if (*(_QWORD *)&v2183[5032])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5032] + 8);
                                v656 = 0;
                                if (*(_QWORD *)&v2183[5040])
                                  --*(_DWORD *)(*(_QWORD *)&v2183[5040] + 8);
                              }
                              else
                              {
                                v691 = *((_QWORD *)v671 + 1);
                                *(_QWORD *)&v2183[5040] = v691;
                                ++*(_DWORD *)(*((_QWORD *)v671 + 1) + 8);
                                if (*(_BYTE *)(v670 + 20)
                                  || *(_BYTE *)(v679 + 20)
                                  || *(_BYTE *)(v685 + 20)
                                  || *(_BYTE *)(v691 + 20))
                                {
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2183;
                                  v1984 = v2183[24];
                                  object[32] = v2183[24];
                                  *(_QWORD *)object = v648;
                                  *(_QWORD *)&object[24] = &off_24CA00398;
                                  memcpy(&object[40], &v2183[32], 0x708uLL);
                                  *(_OWORD *)&object[1840] = *(_OWORD *)&v2183[1832];
                                  *(_QWORD *)&object[1856] = *(_QWORD *)&v2183[1848];
                                  *(_OWORD *)&object[1864] = *(_OWORD *)&v2183[1856];
                                  *(_QWORD *)&object[1880] = *(_QWORD *)&v2183[1872];
                                  v2223[0] = *(_OWORD *)&v2183[1880];
                                  v2223[1] = *(_OWORD *)&v2183[1896];
                                  *(_QWORD *)&v2223[6] = *(_QWORD *)&v2183[1976];
                                  v2223[4] = *(_OWORD *)&v2183[1944];
                                  v2223[5] = *(_OWORD *)&v2183[1960];
                                  v2223[2] = *(_OWORD *)&v2183[1912];
                                  v2223[3] = *(_OWORD *)&v2183[1928];
                                  *((_QWORD *)&v2223[10] + 1) = *(_QWORD *)&v2183[2048];
                                  *(_OWORD *)((char *)&v2223[8] + 8) = *(_OWORD *)&v2183[2016];
                                  *(_OWORD *)((char *)&v2223[9] + 8) = *(_OWORD *)&v2183[2032];
                                  *(_OWORD *)((char *)&v2223[6] + 8) = *(_OWORD *)&v2183[1984];
                                  *(_OWORD *)((char *)&v2223[7] + 8) = *(_OWORD *)&v2183[2000];
                                  *(_QWORD *)&v2223[15] = *(_QWORD *)&v2183[2120];
                                  v2223[13] = *(_OWORD *)&v2183[2088];
                                  v2223[14] = *(_OWORD *)&v2183[2104];
                                  v2223[11] = *(_OWORD *)&v2183[2056];
                                  v2223[12] = *(_OWORD *)&v2183[2072];
                                  *((_QWORD *)&v2223[19] + 1) = *(_QWORD *)&v2183[2192];
                                  *(_OWORD *)((char *)&v2223[17] + 8) = *(_OWORD *)&v2183[2160];
                                  *(_OWORD *)((char *)&v2223[18] + 8) = *(_OWORD *)&v2183[2176];
                                  *(_OWORD *)((char *)&v2223[15] + 8) = *(_OWORD *)&v2183[2128];
                                  *(_OWORD *)((char *)&v2223[16] + 8) = *(_OWORD *)&v2183[2144];
                                  *(_QWORD *)&v2223[24] = *(_QWORD *)&v2183[2264];
                                  v2223[22] = *(_OWORD *)&v2183[2232];
                                  v2223[23] = *(_OWORD *)&v2183[2248];
                                  v2223[20] = *(_OWORD *)&v2183[2200];
                                  v2223[21] = *(_OWORD *)&v2183[2216];
                                  *((_QWORD *)&v2223[28] + 1) = *(_QWORD *)&v2183[2336];
                                  *(_OWORD *)((char *)&v2223[26] + 8) = *(_OWORD *)&v2183[2304];
                                  *(_OWORD *)((char *)&v2223[27] + 8) = *(_OWORD *)&v2183[2320];
                                  *(_OWORD *)((char *)&v2223[24] + 8) = *(_OWORD *)&v2183[2272];
                                  *(_OWORD *)((char *)&v2223[25] + 8) = *(_OWORD *)&v2183[2288];
                                  *(_QWORD *)&v2223[33] = *(_QWORD *)&v2183[2408];
                                  v2223[31] = *(_OWORD *)&v2183[2376];
                                  v2223[32] = *(_OWORD *)&v2183[2392];
                                  v2223[29] = *(_OWORD *)&v2183[2344];
                                  v2223[30] = *(_OWORD *)&v2183[2360];
                                  *((_QWORD *)&v2223[37] + 1) = *(_QWORD *)&v2183[2480];
                                  *(_OWORD *)((char *)&v2223[35] + 8) = *(_OWORD *)&v2183[2448];
                                  *(_OWORD *)((char *)&v2223[36] + 8) = *(_OWORD *)&v2183[2464];
                                  *(_OWORD *)((char *)&v2223[33] + 8) = *(_OWORD *)&v2183[2416];
                                  *(_OWORD *)((char *)&v2223[34] + 8) = *(_OWORD *)&v2183[2432];
                                  memcpy(&v2223[38], &v2183[2488], 0x288uLL);
                                  *(_OWORD *)((char *)&v2223[78] + 8) = *(_OWORD *)&v2183[3136];
                                  *((_QWORD *)&v2223[79] + 1) = *(_QWORD *)&v2183[3152];
                                  v2223[80] = *(_OWORD *)&v2183[3160];
                                  *(_QWORD *)&v2223[81] = *(_QWORD *)&v2183[3176];
                                  memcpy((char *)&v2223[81] + 8, &v2183[3184], 0x708uLL);
                                  v2223[194] = *(_OWORD *)&v2183[4984];
                                  v2223[195] = *(_OWORD *)&v2183[5000];
                                  v692 = *(void **)&v2183[5008];
                                  v2223[196] = *(_OWORD *)&v2183[5016];
                                  v2223[197] = *(_OWORD *)&v2183[5032];
                                  *(_QWORD *)&v2223[205] = *(_QWORD *)&v2183[5160];
                                  v5.i64[1] = *(_QWORD *)&v2183[5120];
                                  v2223[203] = *(_OWORD *)&v2183[5128];
                                  v2223[204] = *(_OWORD *)&v2183[5144];
                                  v2223[201] = *(_OWORD *)&v2183[5096];
                                  v2223[202] = *(_OWORD *)&v2183[5112];
                                  v2223[199] = *(_OWORD *)&v2183[5064];
                                  v2223[200] = *(_OWORD *)&v2183[5080];
                                  v2223[198] = *(_OWORD *)&v2183[5048];
                                  *(_OWORD *)((char *)&v2223[207] + 8) = *(_OWORD *)&v2183[5200];
                                  *(_OWORD *)((char *)&v2223[208] + 8) = *(_OWORD *)&v2183[5216];
                                  *(_OWORD *)((char *)&v2223[205] + 8) = *(_OWORD *)&v2183[5168];
                                  *(_OWORD *)((char *)&v2223[206] + 8) = *(_OWORD *)&v2183[5184];
                                  *((_QWORD *)&v2223[212] + 1) = *(_QWORD *)&v2183[5280];
                                  *(_OWORD *)((char *)&v2223[210] + 8) = *(_OWORD *)&v2183[5248];
                                  *(_OWORD *)((char *)&v2223[211] + 8) = *(_OWORD *)&v2183[5264];
                                  *(_OWORD *)((char *)&v2223[209] + 8) = *(_OWORD *)&v2183[5232];
                                  BYTE8(v2223[213]) = v2183[5296];
                                  *(_QWORD *)&v2223[213] = *(_QWORD *)&v2183[5288];
                                  v1970 = *(void **)&v2183[5304];
                                  v2223[214] = *(_OWORD *)&v2183[5304];
                                  categorya = *(std::__shared_weak_count **)&v2183[5312];
                                  *(_OWORD *)&v2183[5304] = 0uLL;
                                  v1986.i32[0] = v2183[5320];
                                  LOBYTE(v2223[215]) = v2183[5320];
                                  v693 = *(void ***)(v2068 + 5736);
                                  if (v693 == v650 || *v650 != v648)
                                  {
                                    v694 = *(char **)(v2068 + 5728);
                                    v695 = (char *)v650 - v694;
                                    v1980 = (void **)v694;
                                    v1974 = ((char *)v650 - v694) / 5336;
                                    v696 = (void **)&v694[5336 * v1974];
                                    v697 = *(_QWORD *)(v2068 + 5744);
                                    if ((unint64_t)v693 >= v697)
                                    {
                                      v952 = 0x4515E08719B71393 * (((char *)v693 - v694) >> 3) + 1;
                                      if (v952 > 0xC4827EA81BA25)
                                        sub_20E867F44();
                                      v953 = 0x4515E08719B71393 * ((uint64_t)(v697 - (_QWORD)v694) >> 3);
                                      if (2 * v953 > v952)
                                        v952 = 2 * v953;
                                      if (v953 >= 0x62413F540DD12)
                                        v954 = 0xC4827EA81BA25;
                                      else
                                        v954 = v952;
                                      *(_QWORD *)&v2149[2] = v2068 + 5744;
                                      if (v954)
                                      {
                                        if (v954 > 0xC4827EA81BA25)
                                          sub_20E877A38();
                                        v955 = (char *)operator new(5336 * v954);
                                      }
                                      else
                                      {
                                        v955 = 0;
                                      }
                                      v1137 = &v955[5336 * v1974];
                                      *(_QWORD *)&v2149[0] = v955;
                                      *((_QWORD *)&v2149[0] + 1) = v1137;
                                      *(_QWORD *)&v2149[1] = v1137;
                                      *((_QWORD *)&v2149[1] + 1) = &v955[5336 * v954];
                                      if (v1974 == v954)
                                      {
                                        if (v695 < 1)
                                        {
                                          if (v1980 == v650)
                                            v1139 = 1;
                                          else
                                            v1139 = 2 * v1974;
                                          if (v1139 > 0xC4827EA81BA25)
                                            sub_20E877A38();
                                          v1140 = (char *)operator new(5336 * v1139);
                                          v1137 = &v1140[5336 * (v1139 >> 2)];
                                          *(_QWORD *)&v2149[0] = v1140;
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                          *((_QWORD *)&v2149[1] + 1) = &v1140[5336 * v1139];
                                          if (v955)
                                            operator delete(v955);
                                        }
                                        else
                                        {
                                          v1138 = v1974 + 2;
                                          if (v1974 >= -1)
                                            v1138 = v1974 + 1;
                                          v1137 -= 5336 * (v1138 >> 1);
                                          *((_QWORD *)&v2149[0] + 1) = v1137;
                                        }
                                      }
                                      *(_QWORD *)v1137 = v648;
                                      *(_OWORD *)(v1137 + 8) = *(_OWORD *)v2183;
                                      v1137[32] = object[32];
                                      *((_QWORD *)v1137 + 3) = &off_24CA00398;
                                      memcpy(v1137 + 40, &object[40], 0x708uLL);
                                      *((_QWORD *)v1137 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1137 + 115) = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1137 + 235) = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1137 + 1864) = *(_OWORD *)&object[1864];
                                      v1141 = v2223[1];
                                      *((_OWORD *)v1137 + 118) = v2223[0];
                                      *((_OWORD *)v1137 + 119) = v1141;
                                      v1142 = v2223[3];
                                      *((_OWORD *)v1137 + 120) = v2223[2];
                                      v1143 = v2223[4];
                                      v1144 = v2223[5];
                                      *((_QWORD *)v1137 + 248) = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1137 + 123) = v1144;
                                      *((_OWORD *)v1137 + 122) = v1143;
                                      *((_OWORD *)v1137 + 121) = v1142;
                                      v1145 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *(_OWORD *)(v1137 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1146 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1147 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      *((_QWORD *)v1137 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1137 + 2040) = v1147;
                                      *(_OWORD *)(v1137 + 2024) = v1146;
                                      *(_OWORD *)(v1137 + 2008) = v1145;
                                      v1148 = v2223[12];
                                      *((_OWORD *)v1137 + 129) = v2223[11];
                                      v1149 = v2223[13];
                                      v1150 = v2223[14];
                                      *((_QWORD *)v1137 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1137 + 132) = v1150;
                                      *((_OWORD *)v1137 + 131) = v1149;
                                      *((_OWORD *)v1137 + 130) = v1148;
                                      v1151 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      *(_OWORD *)(v1137 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1152 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1153 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1137 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1137 + 2184) = v1153;
                                      *(_OWORD *)(v1137 + 2168) = v1152;
                                      *(_OWORD *)(v1137 + 2152) = v1151;
                                      v1154 = v2223[21];
                                      *((_OWORD *)v1137 + 138) = v2223[20];
                                      v1155 = v2223[22];
                                      v1156 = v2223[23];
                                      *((_QWORD *)v1137 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1137 + 141) = v1156;
                                      *((_OWORD *)v1137 + 140) = v1155;
                                      *((_OWORD *)v1137 + 139) = v1154;
                                      v1157 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      *(_OWORD *)(v1137 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1158 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1159 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1137 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1137 + 2328) = v1159;
                                      *(_OWORD *)(v1137 + 2312) = v1158;
                                      *(_OWORD *)(v1137 + 2296) = v1157;
                                      v1160 = v2223[30];
                                      *((_OWORD *)v1137 + 147) = v2223[29];
                                      v1161 = v2223[31];
                                      v1162 = v2223[32];
                                      *((_QWORD *)v1137 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1137 + 150) = v1162;
                                      *((_OWORD *)v1137 + 149) = v1161;
                                      *((_OWORD *)v1137 + 148) = v1160;
                                      v1163 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      *(_OWORD *)(v1137 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      v1164 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1165 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1137 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1137 + 2472) = v1165;
                                      *(_OWORD *)(v1137 + 2456) = v1164;
                                      *(_OWORD *)(v1137 + 2440) = v1163;
                                      memcpy(v1137 + 2496, &v2223[38], 0x288uLL);
                                      *(_OWORD *)(v1137 + 3144) = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1137 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *((_OWORD *)v1137 + 198) = v2223[80];
                                      *((_QWORD *)v1137 + 398) = *(_QWORD *)&v2223[81];
                                      memcpy(v1137 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      *((_QWORD *)v1137 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1137 + 312) = v2223[194];
                                      *((_QWORD *)v1137 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1166 = v2223[197];
                                      *((_OWORD *)v1137 + 314) = v2223[196];
                                      *((_OWORD *)v1137 + 315) = v1166;
                                      v1167 = v2223[198];
                                      v1168 = v2223[199];
                                      v1169 = v2223[200];
                                      *((_OWORD *)v1137 + 319) = v2223[201];
                                      *((_OWORD *)v1137 + 318) = v1169;
                                      *((_OWORD *)v1137 + 317) = v1168;
                                      *((_OWORD *)v1137 + 316) = v1167;
                                      v1170 = v2223[202];
                                      v1171 = v2223[203];
                                      v1172 = v2223[204];
                                      *((_QWORD *)v1137 + 646) = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1137 + 322) = v1172;
                                      *((_OWORD *)v1137 + 321) = v1171;
                                      *((_OWORD *)v1137 + 320) = v1170;
                                      v1173 = *(_OWORD *)((char *)&v2223[205] + 8);
                                      v1174 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      v1175 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      *(_OWORD *)(v1137 + 5224) = *(_OWORD *)((char *)&v2223[208] + 8);
                                      *(_OWORD *)(v1137 + 5208) = v1175;
                                      *(_OWORD *)(v1137 + 5192) = v1174;
                                      *(_OWORD *)(v1137 + 5176) = v1173;
                                      v1176 = *(_OWORD *)((char *)&v2223[209] + 8);
                                      v1177 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1178 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      *((_QWORD *)v1137 + 661) = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1137 + 5272) = v1178;
                                      *(_OWORD *)(v1137 + 5256) = v1177;
                                      *(_OWORD *)(v1137 + 5240) = v1176;
                                      v1179 = *(_QWORD *)&v2223[213];
                                      v1137[5304] = BYTE8(v2223[213]);
                                      *((_QWORD *)v1137 + 662) = v1179;
                                      *((_OWORD *)v1137 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1137[5328] = v2223[215];
                                      v1971 = v1137 + 5336;
                                      *(_QWORD *)&v2149[1] = v1137 + 5336;
                                      v1180 = *(void ***)(v2068 + 5728);
                                      if (v1180 != v696)
                                      {
                                        v1181 = 0;
                                        v1182 = &v1980[667 * v1974];
                                        categoryd = v1182 - 667;
                                        v1990.i64[0] = (uint64_t)(v1182 - 1334);
                                        v1988.i64[0] = (uint64_t)(v1182 - 663);
                                        v1986.i64[0] = (uint64_t)(v1137 - 5336);
                                        do
                                        {
                                          _X26 = v1990.i64[0] + v1181;
                                          __asm { PRFM            #0, [X26] }
                                          *(_QWORD *)(v1986.i64[0] + v1181) = categoryd[v1181 / 8];
                                          v1185 = &v1137[v1181 - 5296];
                                          *((_OWORD *)v1185 - 2) = *(_OWORD *)(v1990.i64[0] + v1181 + 5344);
                                          v1137[v1181 - 5304] = *(_BYTE *)(v1988.i64[0] + v1181);
                                          *((_QWORD *)v1185 - 2) = &off_24CA00398;
                                          memcpy(v1185, (const void *)(v1990.i64[0] + v1181 + 5376), 0x708uLL);
                                          v1186 = &v1137[v1181];
                                          v1187 = (uint64_t)&v1137[v1181 - 3496];
                                          v1188 = *(_OWORD *)(v1990.i64[0] + v1181 + 7176);
                                          *(_QWORD *)(v1187 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 7192);
                                          *(_OWORD *)v1187 = v1188;
                                          v1189 = (uint64_t)&v1137[v1181 - 3472];
                                          v1190 = *(_QWORD *)(v1990.i64[0] + v1181 + 7216);
                                          *(_OWORD *)v1189 = *(_OWORD *)(v1990.i64[0] + v1181 + 7200);
                                          *(_QWORD *)(v1189 + 16) = v1190;
                                          v1191 = &v1137[v1181 - 3448];
                                          v1192 = *(_OWORD *)(v1990.i64[0] + v1181 + 7240);
                                          *(_OWORD *)v1191 = *(_OWORD *)(v1990.i64[0] + v1181 + 7224);
                                          *((_OWORD *)v1191 + 1) = v1192;
                                          v1193 = (uint64_t)&v1137[v1181 - 3416];
                                          *(_OWORD *)v1193 = *(_OWORD *)(v1990.i64[0] + v1181 + 7256);
                                          v1195 = *(_OWORD *)(v1990.i64[0] + v1181 + 7288);
                                          v1194 = *(_OWORD *)(v1990.i64[0] + v1181 + 7304);
                                          v1196 = *(_OWORD *)(v1990.i64[0] + v1181 + 7272);
                                          *(_QWORD *)(v1193 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7320);
                                          *(_OWORD *)(v1193 + 32) = v1195;
                                          *(_OWORD *)(v1193 + 48) = v1194;
                                          *(_OWORD *)(v1193 + 16) = v1196;
                                          v1197 = (uint64_t)&v1137[v1181 - 3344];
                                          v1198 = *(_OWORD *)(v1990.i64[0] + v1181 + 7360);
                                          v1199 = *(_OWORD *)(v1990.i64[0] + v1181 + 7376);
                                          v1200 = *(_OWORD *)(v1990.i64[0] + v1181 + 7344);
                                          *(_QWORD *)(v1197 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7392);
                                          *(_OWORD *)(v1197 + 32) = v1198;
                                          *(_OWORD *)(v1197 + 48) = v1199;
                                          *(_OWORD *)(v1197 + 16) = v1200;
                                          *(_OWORD *)v1197 = *(_OWORD *)(v1990.i64[0] + v1181 + 7328);
                                          v1201 = (uint64_t)&v1137[v1181 - 3272];
                                          v1202 = *(_OWORD *)(v1990.i64[0] + v1181 + 7416);
                                          v1203 = *(_OWORD *)(v1990.i64[0] + v1181 + 7432);
                                          v1204 = *(_OWORD *)(v1990.i64[0] + v1181 + 7448);
                                          *(_QWORD *)(v1201 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7464);
                                          *(_OWORD *)(v1201 + 32) = v1203;
                                          *(_OWORD *)(v1201 + 48) = v1204;
                                          *(_OWORD *)(v1201 + 16) = v1202;
                                          *(_OWORD *)v1201 = *(_OWORD *)(v1990.i64[0] + v1181 + 7400);
                                          v1205 = (uint64_t)&v1137[v1181 - 3200];
                                          v1206 = *(_OWORD *)(v1990.i64[0] + v1181 + 7488);
                                          v1207 = *(_OWORD *)(v1990.i64[0] + v1181 + 7504);
                                          v1208 = *(_OWORD *)(v1990.i64[0] + v1181 + 7520);
                                          *(_QWORD *)(v1205 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7536);
                                          *(_OWORD *)(v1205 + 32) = v1207;
                                          *(_OWORD *)(v1205 + 48) = v1208;
                                          *(_OWORD *)(v1205 + 16) = v1206;
                                          *(_OWORD *)v1205 = *(_OWORD *)(v1990.i64[0] + v1181 + 7472);
                                          v1209 = (uint64_t)&v1137[v1181 - 3128];
                                          v1210 = *(_OWORD *)(v1990.i64[0] + v1181 + 7560);
                                          v1211 = *(_OWORD *)(v1990.i64[0] + v1181 + 7576);
                                          v1212 = *(_OWORD *)(v1990.i64[0] + v1181 + 7592);
                                          *(_QWORD *)(v1209 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7608);
                                          *(_OWORD *)(v1209 + 32) = v1211;
                                          *(_OWORD *)(v1209 + 48) = v1212;
                                          *(_OWORD *)(v1209 + 16) = v1210;
                                          *(_OWORD *)v1209 = *(_OWORD *)(v1990.i64[0] + v1181 + 7544);
                                          v1213 = (uint64_t)&v1137[v1181 - 3056];
                                          v1214 = *(_OWORD *)(v1990.i64[0] + v1181 + 7632);
                                          v1215 = *(_OWORD *)(v1990.i64[0] + v1181 + 7648);
                                          v1216 = *(_OWORD *)(v1990.i64[0] + v1181 + 7664);
                                          *(_QWORD *)(v1213 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7680);
                                          *(_OWORD *)(v1213 + 32) = v1215;
                                          *(_OWORD *)(v1213 + 48) = v1216;
                                          *(_OWORD *)(v1213 + 16) = v1214;
                                          *(_OWORD *)v1213 = *(_OWORD *)(v1990.i64[0] + v1181 + 7616);
                                          v1217 = (uint64_t)&v1137[v1181 - 2984];
                                          v1218 = *(_OWORD *)(v1990.i64[0] + v1181 + 7704);
                                          v1219 = *(_OWORD *)(v1990.i64[0] + v1181 + 7720);
                                          v1220 = *(_OWORD *)(v1990.i64[0] + v1181 + 7736);
                                          *(_QWORD *)(v1217 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7752);
                                          *(_OWORD *)(v1217 + 32) = v1219;
                                          *(_OWORD *)(v1217 + 48) = v1220;
                                          *(_OWORD *)(v1217 + 16) = v1218;
                                          *(_OWORD *)v1217 = *(_OWORD *)(v1990.i64[0] + v1181 + 7688);
                                          v1221 = (uint64_t)&v1137[v1181 - 2912];
                                          v1222 = *(_OWORD *)(v1990.i64[0] + v1181 + 7776);
                                          v1223 = *(_OWORD *)(v1990.i64[0] + v1181 + 7792);
                                          v1224 = *(_OWORD *)(v1990.i64[0] + v1181 + 7808);
                                          *(_QWORD *)(v1221 + 64) = *(_QWORD *)(v1990.i64[0] + v1181 + 7824);
                                          *(_OWORD *)(v1221 + 32) = v1223;
                                          *(_OWORD *)(v1221 + 48) = v1224;
                                          *(_OWORD *)(v1221 + 16) = v1222;
                                          *(_OWORD *)v1221 = *(_OWORD *)(v1990.i64[0] + v1181 + 7760);
                                          memcpy(&v1137[v1181 - 2840], (const void *)(v1990.i64[0] + v1181 + 7832), 0x288uLL);
                                          v1225 = (uint64_t)&v1137[v1181 - 2192];
                                          v1226 = *(_OWORD *)(v1990.i64[0] + v1181 + 8480);
                                          *(_QWORD *)(v1225 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 8496);
                                          *(_OWORD *)v1225 = v1226;
                                          v1227 = (uint64_t)&v1137[v1181 - 2168];
                                          v1228 = *(_QWORD *)(v1990.i64[0] + v1181 + 8520);
                                          *(_OWORD *)v1227 = *(_OWORD *)(v1990.i64[0] + v1181 + 8504);
                                          *(_QWORD *)(v1227 + 16) = v1228;
                                          memcpy(&v1137[v1181 - 2144], (const void *)(v1990.i64[0] + v1181 + 8528), 0x708uLL);
                                          v1229 = (uint64_t)&v1137[v1181 - 344];
                                          v1230 = *(_OWORD *)(v1990.i64[0] + v1181 + 10328);
                                          *(_QWORD *)(v1229 + 16) = *(_QWORD *)(v1990.i64[0] + v1181 + 10344);
                                          *(_OWORD *)v1229 = v1230;
                                          v1231 = &v696[v1181 / 8];
                                          __asm { PRFM            #0, [X26,#0x1398] }
                                          v1233 = &v1137[v1181 - 312];
                                          *((_QWORD *)v1186 - 40) = v696[v1181 / 8 - 40];
                                          v1234 = *(_OWORD *)(v1990.i64[0] + v1181 + 10376);
                                          v1235 = &v1137[v1181 - 280];
                                          *(_OWORD *)v1233 = *(_OWORD *)(v1990.i64[0] + v1181 + 10360);
                                          *((_OWORD *)v1233 + 1) = v1234;
                                          v1237 = *(_OWORD *)(v1990.i64[0] + v1181 + 10472);
                                          v1236 = *(_OWORD *)(v1990.i64[0] + v1181 + 10488);
                                          v1238 = *(_QWORD *)(v1990.i64[0] + v1181 + 10504);
                                          *(_OWORD *)(v1186 - 216) = *(_OWORD *)(v1990.i64[0] + v1181 + 10456);
                                          *((_QWORD *)v1186 - 21) = v1238;
                                          *(_OWORD *)(v1186 - 184) = v1236;
                                          *(_OWORD *)(v1186 - 200) = v1237;
                                          v1239 = *(_OWORD *)(v1990.i64[0] + v1181 + 10392);
                                          v1240 = *(_OWORD *)(v1990.i64[0] + v1181 + 10408);
                                          v1241 = *(_OWORD *)(v1990.i64[0] + v1181 + 10424);
                                          *(_OWORD *)(v1186 - 232) = *(_OWORD *)(v1990.i64[0] + v1181 + 10440);
                                          *(_OWORD *)(v1186 - 248) = v1241;
                                          *(_OWORD *)v1235 = v1239;
                                          *((_OWORD *)v1235 + 1) = v1240;
                                          v1242 = *(_OWORD *)(v1990.i64[0] + v1181 + 10592);
                                          v1243 = *(_OWORD *)(v1990.i64[0] + v1181 + 10608);
                                          v1244 = *(_OWORD *)(v1990.i64[0] + v1181 + 10576);
                                          *((_QWORD *)v1186 - 6) = *(_QWORD *)(v1990.i64[0] + v1181 + 10624);
                                          *((_OWORD *)v1186 - 5) = v1242;
                                          *((_OWORD *)v1186 - 4) = v1243;
                                          *((_OWORD *)v1186 - 6) = v1244;
                                          v1245 = *(_OWORD *)(v1990.i64[0] + v1181 + 10512);
                                          v1246 = *(_OWORD *)(v1990.i64[0] + v1181 + 10528);
                                          v1247 = *(_OWORD *)(v1990.i64[0] + v1181 + 10560);
                                          *((_OWORD *)v1186 - 8) = *(_OWORD *)(v1990.i64[0] + v1181 + 10544);
                                          *((_OWORD *)v1186 - 7) = v1247;
                                          *((_OWORD *)v1186 - 10) = v1245;
                                          *((_OWORD *)v1186 - 9) = v1246;
                                          v1248 = *(_QWORD *)(v1990.i64[0] + v1181 + 10632);
                                          *(v1186 - 32) = *(_BYTE *)(v1990.i64[0] + v1181 + 10640);
                                          *((_QWORD *)v1186 - 5) = v1248;
                                          __asm { PRFM            #0, [X26,#0x14C0] }
                                          *(_OWORD *)(v1186 - 24) = *(_OWORD *)&v696[v1181 / 8 - 3];
                                          *(v1231 - 3) = 0;
                                          *(v1231 - 2) = 0;
                                          *(v1186 - 8) = (char)v696[v1181 / 8 - 1];
                                          v1181 -= 5336;
                                        }
                                        while (&v696[v1181 / 8] != v1180);
                                        v1137 += v1181;
                                      }
                                      v1250 = *(void ***)(v2068 + 5736);
                                      if (v1250 != v696)
                                      {
                                        v1251 = 0;
                                        v1252 = &v1980[667 * v1974];
                                        categorye = v1252 + 666;
                                        v1253 = v1252 + 664;
                                        do
                                        {
                                          v1254 = &v1971[v1251 * 8];
                                          _X24 = &v696[v1251];
                                          __asm { PRFM            #0, [X24,#0x29B0] }
                                          *(_QWORD *)v1254 = v696[v1251];
                                          *(_OWORD *)(v1254 + 8) = *(_OWORD *)&v696[v1251 + 1];
                                          v1254[32] = (char)v696[v1251 + 4];
                                          *((_QWORD *)v1254 + 3) = &off_24CA00398;
                                          memcpy(&v1971[v1251 * 8 + 40], &v696[v1251 + 5], 0x708uLL);
                                          v1257 = *(_OWORD *)&v696[v1251 + 230];
                                          *((_QWORD *)v1254 + 232) = v696[v1251 + 232];
                                          *((_OWORD *)v1254 + 115) = v1257;
                                          v1258 = v696[v1251 + 235];
                                          *(_OWORD *)(v1254 + 1864) = *(_OWORD *)&v696[v1251 + 233];
                                          *((_QWORD *)v1254 + 235) = v1258;
                                          v1259 = *(_OWORD *)&v696[v1251 + 238];
                                          *((_OWORD *)v1254 + 118) = *(_OWORD *)&v696[v1251 + 236];
                                          *((_OWORD *)v1254 + 119) = v1259;
                                          *((_OWORD *)v1254 + 120) = *(_OWORD *)&v696[v1251 + 240];
                                          v1260 = *(_OWORD *)&v696[v1251 + 244];
                                          v1261 = *(_OWORD *)&v696[v1251 + 246];
                                          v1262 = v696[v1251 + 248];
                                          *((_OWORD *)v1254 + 121) = *(_OWORD *)&v696[v1251 + 242];
                                          *((_QWORD *)v1254 + 248) = v1262;
                                          *((_OWORD *)v1254 + 123) = v1261;
                                          *((_OWORD *)v1254 + 122) = v1260;
                                          v1264 = *(_OWORD *)&v696[v1251 + 253];
                                          v1263 = *(_OWORD *)&v696[v1251 + 255];
                                          v1265 = *(_OWORD *)&v696[v1251 + 251];
                                          *((_QWORD *)v1254 + 257) = v696[v1251 + 257];
                                          *(_OWORD *)(v1254 + 2024) = v1264;
                                          *(_OWORD *)(v1254 + 2040) = v1263;
                                          *(_OWORD *)(v1254 + 2008) = v1265;
                                          *(_OWORD *)(v1254 + 1992) = *(_OWORD *)&v696[v1251 + 249];
                                          v1266 = *(_OWORD *)&v696[v1251 + 260];
                                          v1267 = *(_OWORD *)&v696[v1251 + 262];
                                          v1268 = *(_OWORD *)&v696[v1251 + 264];
                                          *((_QWORD *)v1254 + 266) = v696[v1251 + 266];
                                          *((_OWORD *)v1254 + 132) = v1268;
                                          *((_OWORD *)v1254 + 131) = v1267;
                                          *((_OWORD *)v1254 + 130) = v1266;
                                          *((_OWORD *)v1254 + 129) = *(_OWORD *)&v696[v1251 + 258];
                                          v1269 = *(_OWORD *)&v696[v1251 + 269];
                                          v1270 = *(_OWORD *)&v696[v1251 + 271];
                                          v1271 = *(_OWORD *)&v696[v1251 + 273];
                                          *((_QWORD *)v1254 + 275) = v696[v1251 + 275];
                                          *(_OWORD *)(v1254 + 2168) = v1270;
                                          *(_OWORD *)(v1254 + 2184) = v1271;
                                          *(_OWORD *)(v1254 + 2152) = v1269;
                                          *(_OWORD *)(v1254 + 2136) = *(_OWORD *)&v696[v1251 + 267];
                                          v1272 = *(_OWORD *)&v696[v1251 + 278];
                                          v1273 = *(_OWORD *)&v696[v1251 + 280];
                                          v1274 = *(_OWORD *)&v696[v1251 + 282];
                                          *((_QWORD *)v1254 + 284) = v696[v1251 + 284];
                                          *((_OWORD *)v1254 + 141) = v1274;
                                          *((_OWORD *)v1254 + 140) = v1273;
                                          *((_OWORD *)v1254 + 139) = v1272;
                                          *((_OWORD *)v1254 + 138) = *(_OWORD *)&v696[v1251 + 276];
                                          v1275 = *(_OWORD *)&v696[v1251 + 287];
                                          v1276 = *(_OWORD *)&v696[v1251 + 289];
                                          v1277 = *(_OWORD *)&v696[v1251 + 291];
                                          *((_QWORD *)v1254 + 293) = v696[v1251 + 293];
                                          *(_OWORD *)(v1254 + 2312) = v1276;
                                          *(_OWORD *)(v1254 + 2328) = v1277;
                                          *(_OWORD *)(v1254 + 2296) = v1275;
                                          *(_OWORD *)(v1254 + 2280) = *(_OWORD *)&v696[v1251 + 285];
                                          v1278 = *(_OWORD *)&v696[v1251 + 296];
                                          v1279 = *(_OWORD *)&v696[v1251 + 298];
                                          v1280 = *(_OWORD *)&v696[v1251 + 300];
                                          *((_QWORD *)v1254 + 302) = v696[v1251 + 302];
                                          *((_OWORD *)v1254 + 150) = v1280;
                                          *((_OWORD *)v1254 + 149) = v1279;
                                          *((_OWORD *)v1254 + 148) = v1278;
                                          *((_OWORD *)v1254 + 147) = *(_OWORD *)&v696[v1251 + 294];
                                          v1281 = *(_OWORD *)&v696[v1251 + 305];
                                          v1282 = *(_OWORD *)&v696[v1251 + 307];
                                          v1283 = *(_OWORD *)&v696[v1251 + 309];
                                          *((_QWORD *)v1254 + 311) = v696[v1251 + 311];
                                          *(_OWORD *)(v1254 + 2456) = v1282;
                                          *(_OWORD *)(v1254 + 2472) = v1283;
                                          *(_OWORD *)(v1254 + 2440) = v1281;
                                          *(_OWORD *)(v1254 + 2424) = *(_OWORD *)&v696[v1251 + 303];
                                          memcpy(&v1971[v1251 * 8 + 2496], &v696[v1251 + 312], 0x288uLL);
                                          v1284 = *(_OWORD *)&v696[v1251 + 393];
                                          *((_QWORD *)v1254 + 395) = v696[v1251 + 395];
                                          *(_OWORD *)(v1254 + 3144) = v1284;
                                          v1285 = v696[v1251 + 398];
                                          *((_OWORD *)v1254 + 198) = *(_OWORD *)&v696[v1251 + 396];
                                          *((_QWORD *)v1254 + 398) = v1285;
                                          memcpy(&v1971[v1251 * 8 + 3192], &v696[v1251 + 399], 0x708uLL);
                                          v1286 = v696[v1251 + 626];
                                          *((_OWORD *)v1254 + 312) = *(_OWORD *)&v696[v1251 + 624];
                                          *((_QWORD *)v1254 + 626) = v1286;
                                          __asm { PRFM            #0, [X24,#0x3D48] }
                                          *((_QWORD *)v1254 + 627) = v696[v1251 + 627];
                                          v1288 = *(_OWORD *)&v696[v1251 + 628];
                                          *((_OWORD *)v1254 + 315) = *(_OWORD *)&v696[v1251 + 630];
                                          *((_OWORD *)v1254 + 314) = v1288;
                                          v1289 = *(_OWORD *)&v696[v1251 + 642];
                                          v1290 = *(_OWORD *)&v696[v1251 + 644];
                                          v1291 = v696[v1251 + 646];
                                          *((_OWORD *)v1254 + 320) = *(_OWORD *)&v696[v1251 + 640];
                                          *((_QWORD *)v1254 + 646) = v1291;
                                          *((_OWORD *)v1254 + 322) = v1290;
                                          *((_OWORD *)v1254 + 321) = v1289;
                                          v1292 = *(_OWORD *)&v696[v1251 + 632];
                                          v1293 = *(_OWORD *)&v696[v1251 + 634];
                                          v1294 = *(_OWORD *)&v696[v1251 + 636];
                                          *((_OWORD *)v1254 + 319) = *(_OWORD *)&v696[v1251 + 638];
                                          *((_OWORD *)v1254 + 318) = v1294;
                                          *((_OWORD *)v1254 + 317) = v1293;
                                          *((_OWORD *)v1254 + 316) = v1292;
                                          v1296 = *(_OWORD *)&v696[v1251 + 657];
                                          v1295 = *(_OWORD *)&v696[v1251 + 659];
                                          v1297 = *(_OWORD *)&v696[v1251 + 655];
                                          *((_QWORD *)v1254 + 661) = v696[v1251 + 661];
                                          *(_OWORD *)(v1254 + 5256) = v1296;
                                          *(_OWORD *)(v1254 + 5272) = v1295;
                                          *(_OWORD *)(v1254 + 5240) = v1297;
                                          v1298 = *(_OWORD *)&v696[v1251 + 647];
                                          v1299 = *(_OWORD *)&v696[v1251 + 649];
                                          v1300 = *(_OWORD *)&v696[v1251 + 653];
                                          *(_OWORD *)(v1254 + 5208) = *(_OWORD *)&v696[v1251 + 651];
                                          *(_OWORD *)(v1254 + 5224) = v1300;
                                          *(_OWORD *)(v1254 + 5176) = v1298;
                                          *(_OWORD *)(v1254 + 5192) = v1299;
                                          v1301 = v696[v1251 + 662];
                                          v1254[5304] = (char)v696[v1251 + 663];
                                          v1302 = &v1253[v1251];
                                          *((_QWORD *)v1254 + 662) = v1301;
                                          __asm { PRFM            #0, [X24,#0x3E70] }
                                          *((_OWORD *)v1254 + 332) = *(_OWORD *)&v1253[v1251];
                                          v1304 = categorye[v1251];
                                          *v1302 = 0;
                                          v1302[1] = 0;
                                          v1254[5328] = v1304;
                                          v1251 += 667;
                                        }
                                        while (&v696[v1251] != v1250);
                                        v696 = *(void ***)(v2068 + 5736);
                                        v1971 += v1251 * 8;
                                      }
                                      v1305 = *(void ***)(v2068 + 5728);
                                      *(_QWORD *)(v2068 + 5728) = v1137;
                                      *(_QWORD *)(v2068 + 5736) = v1971;
                                      v1306 = *(_QWORD *)(v2068 + 5744);
                                      *(_QWORD *)(v2068 + 5744) = *((_QWORD *)&v2149[1] + 1);
                                      *((_QWORD *)&v2149[1] + 1) = v1306;
                                      *((_QWORD *)&v2149[0] + 1) = v1305;
                                      *(_QWORD *)&v2149[0] = v1305;
                                      if (v696 != v1305)
                                      {
                                        do
                                        {
                                          *(_QWORD *)&v2149[1] = v696 - 667;
                                          v1307 = (std::__shared_weak_count *)*(v696 - 2);
                                          if (v1307)
                                          {
                                            v1308 = (unint64_t *)&v1307->__shared_owners_;
                                            do
                                              v1309 = __ldaxr(v1308);
                                            while (__stlxr(v1309 - 1, v1308));
                                            if (!v1309)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v1307->__on_zero_shared)(v1307);
                                              std::__shared_weak_count::__release_weak(v1307);
                                            }
                                          }
                                          v696 = *(void ***)&v2149[1];
                                        }
                                        while (*(void ***)&v2149[1] != v1305);
                                        v696 = *(void ***)&v2149[0];
                                      }
                                      if (v696)
                                        operator delete(v696);
                                    }
                                    else if (v696 == v693)
                                    {
                                      *v693 = v648;
                                      v1093 = &v694[5336 * v1974];
                                      *(_OWORD *)(v1093 + 8) = *(_OWORD *)&object[8];
                                      v1093[32] = object[32];
                                      *((_QWORD *)v1093 + 3) = &off_24CA00398;
                                      memcpy(v1093 + 40, &object[40], 0x708uLL);
                                      v1094 = *(_OWORD *)&object[1840];
                                      *((_QWORD *)v1093 + 232) = *(_QWORD *)&object[1856];
                                      *((_OWORD *)v1093 + 115) = v1094;
                                      v1095 = *(_QWORD *)&object[1880];
                                      *(_OWORD *)(v1093 + 1864) = *(_OWORD *)&object[1864];
                                      *((_QWORD *)v1093 + 235) = v1095;
                                      v1096 = v2223[1];
                                      *((_OWORD *)v1093 + 118) = v2223[0];
                                      *((_OWORD *)v1093 + 119) = v1096;
                                      *((_OWORD *)v1093 + 120) = v2223[2];
                                      v1098 = v2223[4];
                                      v1097 = v2223[5];
                                      v1099 = *(_QWORD *)&v2223[6];
                                      *((_OWORD *)v1093 + 121) = v2223[3];
                                      *((_QWORD *)v1093 + 248) = v1099;
                                      *((_OWORD *)v1093 + 123) = v1097;
                                      *((_OWORD *)v1093 + 122) = v1098;
                                      v1101 = *(_OWORD *)((char *)&v2223[8] + 8);
                                      v1100 = *(_OWORD *)((char *)&v2223[9] + 8);
                                      v1102 = *(_OWORD *)((char *)&v2223[7] + 8);
                                      *((_QWORD *)v1093 + 257) = *((_QWORD *)&v2223[10] + 1);
                                      *(_OWORD *)(v1093 + 2008) = v1102;
                                      *(_OWORD *)(v1093 + 2040) = v1100;
                                      *(_OWORD *)(v1093 + 2024) = v1101;
                                      *(_OWORD *)(v1093 + 1992) = *(_OWORD *)((char *)&v2223[6] + 8);
                                      v1103 = v2223[12];
                                      v1104 = v2223[13];
                                      v1105 = v2223[14];
                                      *((_QWORD *)v1093 + 266) = *(_QWORD *)&v2223[15];
                                      *((_OWORD *)v1093 + 132) = v1105;
                                      *((_OWORD *)v1093 + 131) = v1104;
                                      *((_OWORD *)v1093 + 130) = v1103;
                                      *((_OWORD *)v1093 + 129) = v2223[11];
                                      v1106 = *(_OWORD *)((char *)&v2223[16] + 8);
                                      v1107 = *(_OWORD *)((char *)&v2223[17] + 8);
                                      v1108 = *(_OWORD *)((char *)&v2223[18] + 8);
                                      *((_QWORD *)v1093 + 275) = *((_QWORD *)&v2223[19] + 1);
                                      *(_OWORD *)(v1093 + 2184) = v1108;
                                      *(_OWORD *)(v1093 + 2168) = v1107;
                                      *(_OWORD *)(v1093 + 2152) = v1106;
                                      *(_OWORD *)(v1093 + 2136) = *(_OWORD *)((char *)&v2223[15] + 8);
                                      v1109 = v2223[21];
                                      v1110 = v2223[22];
                                      v1111 = v2223[23];
                                      *((_QWORD *)v1093 + 284) = *(_QWORD *)&v2223[24];
                                      *((_OWORD *)v1093 + 141) = v1111;
                                      *((_OWORD *)v1093 + 140) = v1110;
                                      *((_OWORD *)v1093 + 139) = v1109;
                                      *((_OWORD *)v1093 + 138) = v2223[20];
                                      v1112 = *(_OWORD *)((char *)&v2223[25] + 8);
                                      v1113 = *(_OWORD *)((char *)&v2223[26] + 8);
                                      v1114 = *(_OWORD *)((char *)&v2223[27] + 8);
                                      *((_QWORD *)v1093 + 293) = *((_QWORD *)&v2223[28] + 1);
                                      *(_OWORD *)(v1093 + 2328) = v1114;
                                      *(_OWORD *)(v1093 + 2312) = v1113;
                                      *(_OWORD *)(v1093 + 2296) = v1112;
                                      *(_OWORD *)(v1093 + 2280) = *(_OWORD *)((char *)&v2223[24] + 8);
                                      v1115 = v2223[30];
                                      v1116 = v2223[31];
                                      v1117 = v2223[32];
                                      *((_QWORD *)v1093 + 302) = *(_QWORD *)&v2223[33];
                                      *((_OWORD *)v1093 + 150) = v1117;
                                      *((_OWORD *)v1093 + 149) = v1116;
                                      *((_OWORD *)v1093 + 148) = v1115;
                                      *((_OWORD *)v1093 + 147) = v2223[29];
                                      v1118 = *(_OWORD *)((char *)&v2223[34] + 8);
                                      v1119 = *(_OWORD *)((char *)&v2223[35] + 8);
                                      v1120 = *(_OWORD *)((char *)&v2223[36] + 8);
                                      *((_QWORD *)v1093 + 311) = *((_QWORD *)&v2223[37] + 1);
                                      *(_OWORD *)(v1093 + 2472) = v1120;
                                      *(_OWORD *)(v1093 + 2456) = v1119;
                                      *(_OWORD *)(v1093 + 2440) = v1118;
                                      *(_OWORD *)(v1093 + 2424) = *(_OWORD *)((char *)&v2223[33] + 8);
                                      memcpy(v1093 + 2496, &v2223[38], 0x288uLL);
                                      v1121 = *(_OWORD *)((char *)&v2223[78] + 8);
                                      *((_QWORD *)v1093 + 395) = *((_QWORD *)&v2223[79] + 1);
                                      *(_OWORD *)(v1093 + 3144) = v1121;
                                      v1122 = *(_QWORD *)&v2223[81];
                                      *((_OWORD *)v1093 + 198) = v2223[80];
                                      *((_QWORD *)v1093 + 398) = v1122;
                                      memcpy(v1093 + 3192, (char *)&v2223[81] + 8, 0x708uLL);
                                      v1123 = v2223[194];
                                      *((_QWORD *)v1093 + 626) = *(_QWORD *)&v2223[195];
                                      *((_OWORD *)v1093 + 312) = v1123;
                                      *((_QWORD *)v1093 + 627) = *((_QWORD *)&v2223[195] + 1);
                                      v1124 = v2223[196];
                                      *((_OWORD *)v1093 + 315) = v2223[197];
                                      *((_OWORD *)v1093 + 314) = v1124;
                                      v1125 = v2223[200];
                                      v1126 = v2223[201];
                                      v1127 = v2223[199];
                                      *((_OWORD *)v1093 + 316) = v2223[198];
                                      *((_OWORD *)v1093 + 319) = v1126;
                                      *((_OWORD *)v1093 + 318) = v1125;
                                      *((_OWORD *)v1093 + 317) = v1127;
                                      v1129 = v2223[203];
                                      v1128 = v2223[204];
                                      v1130 = *(_QWORD *)&v2223[205];
                                      *((_OWORD *)v1093 + 320) = v2223[202];
                                      *((_QWORD *)v1093 + 646) = v1130;
                                      *((_OWORD *)v1093 + 322) = v1128;
                                      *((_OWORD *)v1093 + 321) = v1129;
                                      v1131 = *(_OWORD *)((char *)&v2223[207] + 8);
                                      v1132 = *(_OWORD *)((char *)&v2223[208] + 8);
                                      v1133 = *(_OWORD *)((char *)&v2223[206] + 8);
                                      *(_OWORD *)(v1093 + 5176) = *(_OWORD *)((char *)&v2223[205] + 8);
                                      *(_OWORD *)(v1093 + 5224) = v1132;
                                      *(_OWORD *)(v1093 + 5208) = v1131;
                                      *(_OWORD *)(v1093 + 5192) = v1133;
                                      v1135 = *(_OWORD *)((char *)&v2223[210] + 8);
                                      v1134 = *(_OWORD *)((char *)&v2223[211] + 8);
                                      v1136 = *((_QWORD *)&v2223[212] + 1);
                                      *(_OWORD *)(v1093 + 5240) = *(_OWORD *)((char *)&v2223[209] + 8);
                                      *((_QWORD *)v1093 + 661) = v1136;
                                      *(_OWORD *)(v1093 + 5272) = v1134;
                                      *(_OWORD *)(v1093 + 5256) = v1135;
                                      LOBYTE(v1136) = BYTE8(v2223[213]);
                                      *((_QWORD *)v1093 + 662) = *(_QWORD *)&v2223[213];
                                      v1093[5304] = v1136;
                                      *((_OWORD *)v1093 + 332) = v2223[214];
                                      v2223[214] = 0uLL;
                                      v1093[5328] = v2223[215];
                                      *(_QWORD *)(v2068 + 5736) = v693 + 667;
                                    }
                                    else
                                    {
                                      v2088 = *(_OWORD *)v2183;
                                      memcpy((char *)v2149 + 7, &v2183[32], 0x708uLL);
                                      v2086 = *(_OWORD *)&v2183[1832];
                                      v2087 = *(void **)&v2183[1848];
                                      v2084 = *(_OWORD *)&v2183[1856];
                                      v2085 = *(void **)&v2183[1872];
                                      v2082 = *(_OWORD *)&v2183[1880];
                                      v2083 = *(_OWORD *)&v2183[1896];
                                      v2148 = *(void **)&v2183[1976];
                                      v2147 = *(_OWORD *)&v2183[1960];
                                      v2146 = *(_OWORD *)&v2183[1944];
                                      v2145 = *(_OWORD *)&v2183[1928];
                                      v2144 = *(_OWORD *)&v2183[1912];
                                      v2143 = *(void **)&v2183[2048];
                                      v2142 = *(_OWORD *)&v2183[2032];
                                      v2141 = *(_OWORD *)&v2183[2016];
                                      v2139 = *(_OWORD *)&v2183[1984];
                                      v2140 = *(_OWORD *)&v2183[2000];
                                      v2138 = *(void **)&v2183[2120];
                                      v2137 = *(_OWORD *)&v2183[2104];
                                      v2136 = *(_OWORD *)&v2183[2088];
                                      v2134 = *(_OWORD *)&v2183[2056];
                                      v2135 = *(_OWORD *)&v2183[2072];
                                      v2133 = *(void **)&v2183[2192];
                                      v2132 = *(_OWORD *)&v2183[2176];
                                      v2131 = *(_OWORD *)&v2183[2160];
                                      v2129 = *(_OWORD *)&v2183[2128];
                                      v2130 = *(_OWORD *)&v2183[2144];
                                      v2128 = *(void **)&v2183[2264];
                                      v2127 = *(_OWORD *)&v2183[2248];
                                      v2126 = *(_OWORD *)&v2183[2232];
                                      v2124 = *(_OWORD *)&v2183[2200];
                                      v2125 = *(_OWORD *)&v2183[2216];
                                      v2123 = *(void **)&v2183[2336];
                                      v2122 = *(_OWORD *)&v2183[2320];
                                      v2121 = *(_OWORD *)&v2183[2304];
                                      v2119 = *(_OWORD *)&v2183[2272];
                                      v2120 = *(_OWORD *)&v2183[2288];
                                      v2118 = *(void **)&v2183[2408];
                                      v2117 = *(_OWORD *)&v2183[2392];
                                      v2116 = *(_OWORD *)&v2183[2376];
                                      v2114 = *(_OWORD *)&v2183[2344];
                                      v2115 = *(_OWORD *)&v2183[2360];
                                      v2113 = *(void **)&v2183[2480];
                                      v2112 = *(_OWORD *)&v2183[2464];
                                      v2111 = *(_OWORD *)&v2183[2448];
                                      v2109 = *(_OWORD *)&v2183[2416];
                                      v2110 = *(_OWORD *)&v2183[2432];
                                      memcpy(v2108, &v2183[2488], 0x288uLL);
                                      v2080 = *(_OWORD *)&v2183[3136];
                                      v2081 = *(void **)&v2183[3152];
                                      v2078 = *(_OWORD *)&v2183[3160];
                                      v2079 = *(void **)&v2183[3176];
                                      memcpy(v2107, &v2183[3184], 0x708uLL);
                                      v2076 = *(_OWORD *)&v2183[4984];
                                      v2077 = *(void **)&v2183[5000];
                                      v1926 = v2223[196];
                                      v1923 = v2223[197];
                                      v2103 = *(_OWORD *)&v2183[5112];
                                      v2104 = *(_OWORD *)&v2183[5128];
                                      v2105 = *(_OWORD *)&v2183[5144];
                                      v2106 = *(void **)&v2183[5160];
                                      v2098 = *(_OWORD *)&v2183[5048];
                                      v2100 = *(_OWORD *)&v2183[5064];
                                      v2101 = *(_OWORD *)&v2183[5080];
                                      v2102 = *(_OWORD *)&v2183[5096];
                                      v2092 = *(_OWORD *)&v2183[5216];
                                      v2091 = *(_OWORD *)&v2183[5200];
                                      v2090 = *(_OWORD *)&v2183[5184];
                                      v2089 = *(_OWORD *)&v2183[5168];
                                      v2096 = *(void **)&v2183[5280];
                                      v2095 = *(_OWORD *)&v2183[5264];
                                      v2094 = *(_OWORD *)&v2183[5248];
                                      v2093 = *(_OWORD *)&v2183[5232];
                                      v2075 = v2183[5296];
                                      v2074 = *(void **)&v2183[5288];
                                      v698 = v693 - 667;
                                      v699 = v693;
                                      v2223[214] = 0uLL;
                                      if ((unint64_t)v693 >= 0x14D8)
                                      {
                                        v700 = 0;
                                        v701 = &v1980[667 * v1974] + v693 - (v696 + 667);
                                        v1990.i64[0] = (uint64_t)(v701 + 666);
                                        v1988.i64[0] = (uint64_t)(v701 + 664);
                                        do
                                        {
                                          v702 = &v693[v700];
                                          _X23 = &v698[v700];
                                          __asm { PRFM            #0, [X23,#0x29B0] }
                                          *v702 = v698[v700];
                                          *(_OWORD *)(v702 + 1) = *(_OWORD *)&v698[v700 + 1];
                                          *((_BYTE *)v702 + 32) = v698[v700 + 4];
                                          v702[3] = &off_24CA00398;
                                          memcpy(&v693[v700 + 5], &v698[v700 + 5], 0x708uLL);
                                          v705 = *(_OWORD *)&v698[v700 + 230];
                                          v702[232] = v698[v700 + 232];
                                          *((_OWORD *)v702 + 115) = v705;
                                          v706 = v698[v700 + 235];
                                          *(_OWORD *)(v702 + 233) = *(_OWORD *)&v698[v700 + 233];
                                          v702[235] = v706;
                                          v707 = *(_OWORD *)&v698[v700 + 238];
                                          *((_OWORD *)v702 + 118) = *(_OWORD *)&v698[v700 + 236];
                                          *((_OWORD *)v702 + 119) = v707;
                                          *((_OWORD *)v702 + 120) = *(_OWORD *)&v698[v700 + 240];
                                          v708 = *(_OWORD *)&v698[v700 + 244];
                                          v709 = *(_OWORD *)&v698[v700 + 246];
                                          v710 = v698[v700 + 248];
                                          *((_OWORD *)v702 + 121) = *(_OWORD *)&v698[v700 + 242];
                                          v702[248] = v710;
                                          *((_OWORD *)v702 + 123) = v709;
                                          *((_OWORD *)v702 + 122) = v708;
                                          v712 = *(_OWORD *)&v698[v700 + 253];
                                          v711 = *(_OWORD *)&v698[v700 + 255];
                                          v713 = *(_OWORD *)&v698[v700 + 251];
                                          v702[257] = v698[v700 + 257];
                                          *(_OWORD *)(v702 + 253) = v712;
                                          *(_OWORD *)(v702 + 255) = v711;
                                          *(_OWORD *)(v702 + 251) = v713;
                                          *(_OWORD *)(v702 + 249) = *(_OWORD *)&v698[v700 + 249];
                                          v714 = *(_OWORD *)&v698[v700 + 260];
                                          v715 = *(_OWORD *)&v698[v700 + 262];
                                          v716 = *(_OWORD *)&v698[v700 + 264];
                                          v702[266] = v698[v700 + 266];
                                          *((_OWORD *)v702 + 132) = v716;
                                          *((_OWORD *)v702 + 131) = v715;
                                          *((_OWORD *)v702 + 130) = v714;
                                          *((_OWORD *)v702 + 129) = *(_OWORD *)&v698[v700 + 258];
                                          v717 = *(_OWORD *)&v698[v700 + 269];
                                          v718 = *(_OWORD *)&v698[v700 + 271];
                                          v719 = *(_OWORD *)&v698[v700 + 273];
                                          v702[275] = v698[v700 + 275];
                                          *(_OWORD *)(v702 + 271) = v718;
                                          *(_OWORD *)(v702 + 273) = v719;
                                          *(_OWORD *)(v702 + 269) = v717;
                                          *(_OWORD *)(v702 + 267) = *(_OWORD *)&v698[v700 + 267];
                                          v720 = *(_OWORD *)&v698[v700 + 278];
                                          v721 = *(_OWORD *)&v698[v700 + 280];
                                          v722 = *(_OWORD *)&v698[v700 + 282];
                                          v702[284] = v698[v700 + 284];
                                          *((_OWORD *)v702 + 141) = v722;
                                          *((_OWORD *)v702 + 140) = v721;
                                          *((_OWORD *)v702 + 139) = v720;
                                          *((_OWORD *)v702 + 138) = *(_OWORD *)&v698[v700 + 276];
                                          v723 = *(_OWORD *)&v698[v700 + 287];
                                          v724 = *(_OWORD *)&v698[v700 + 289];
                                          v725 = *(_OWORD *)&v698[v700 + 291];
                                          v702[293] = v698[v700 + 293];
                                          *(_OWORD *)(v702 + 289) = v724;
                                          *(_OWORD *)(v702 + 291) = v725;
                                          *(_OWORD *)(v702 + 287) = v723;
                                          *(_OWORD *)(v702 + 285) = *(_OWORD *)&v698[v700 + 285];
                                          v726 = *(_OWORD *)&v698[v700 + 296];
                                          v727 = *(_OWORD *)&v698[v700 + 298];
                                          v728 = *(_OWORD *)&v698[v700 + 300];
                                          v702[302] = v698[v700 + 302];
                                          *((_OWORD *)v702 + 150) = v728;
                                          *((_OWORD *)v702 + 149) = v727;
                                          *((_OWORD *)v702 + 148) = v726;
                                          *((_OWORD *)v702 + 147) = *(_OWORD *)&v698[v700 + 294];
                                          v729 = *(_OWORD *)&v698[v700 + 305];
                                          v730 = *(_OWORD *)&v698[v700 + 307];
                                          v731 = *(_OWORD *)&v698[v700 + 309];
                                          v702[311] = v698[v700 + 311];
                                          *(_OWORD *)(v702 + 307) = v730;
                                          *(_OWORD *)(v702 + 309) = v731;
                                          *(_OWORD *)(v702 + 305) = v729;
                                          *(_OWORD *)(v702 + 303) = *(_OWORD *)&v698[v700 + 303];
                                          memcpy(&v693[v700 + 312], &v698[v700 + 312], 0x288uLL);
                                          v732 = *(_OWORD *)&v698[v700 + 393];
                                          v702[395] = v698[v700 + 395];
                                          *(_OWORD *)(v702 + 393) = v732;
                                          v733 = v698[v700 + 398];
                                          *((_OWORD *)v702 + 198) = *(_OWORD *)&v698[v700 + 396];
                                          v702[398] = v733;
                                          memcpy(&v693[v700 + 399], &v698[v700 + 399], 0x708uLL);
                                          v734 = v698[v700 + 626];
                                          *((_OWORD *)v702 + 312) = *(_OWORD *)&v698[v700 + 624];
                                          v702[626] = v734;
                                          __asm { PRFM            #0, [X23,#0x3D48] }
                                          v702[627] = v698[v700 + 627];
                                          v736 = *(_OWORD *)&v698[v700 + 628];
                                          *((_OWORD *)v702 + 315) = *(_OWORD *)&v698[v700 + 630];
                                          *((_OWORD *)v702 + 314) = v736;
                                          v737 = *(_OWORD *)&v698[v700 + 642];
                                          v738 = *(_OWORD *)&v698[v700 + 644];
                                          v739 = v698[v700 + 646];
                                          *((_OWORD *)v702 + 320) = *(_OWORD *)&v698[v700 + 640];
                                          v702[646] = v739;
                                          *((_OWORD *)v702 + 322) = v738;
                                          *((_OWORD *)v702 + 321) = v737;
                                          v740 = *(_OWORD *)&v698[v700 + 632];
                                          v741 = *(_OWORD *)&v698[v700 + 634];
                                          v742 = *(_OWORD *)&v698[v700 + 636];
                                          *((_OWORD *)v702 + 319) = *(_OWORD *)&v698[v700 + 638];
                                          *((_OWORD *)v702 + 318) = v742;
                                          *((_OWORD *)v702 + 317) = v741;
                                          *((_OWORD *)v702 + 316) = v740;
                                          v744 = *(_OWORD *)&v698[v700 + 657];
                                          v743 = *(_OWORD *)&v698[v700 + 659];
                                          v745 = *(_OWORD *)&v698[v700 + 655];
                                          v702[661] = v698[v700 + 661];
                                          *(_OWORD *)(v702 + 657) = v744;
                                          *(_OWORD *)(v702 + 659) = v743;
                                          *(_OWORD *)(v702 + 655) = v745;
                                          v746 = *(_OWORD *)&v698[v700 + 647];
                                          v747 = *(_OWORD *)&v698[v700 + 649];
                                          v748 = *(_OWORD *)&v698[v700 + 653];
                                          *(_OWORD *)(v702 + 651) = *(_OWORD *)&v698[v700 + 651];
                                          *(_OWORD *)(v702 + 653) = v748;
                                          *(_OWORD *)(v702 + 647) = v746;
                                          *(_OWORD *)(v702 + 649) = v747;
                                          v749 = v698[v700 + 662];
                                          *((_BYTE *)v702 + 5304) = v698[v700 + 663];
                                          v750 = (_QWORD *)(v1988.i64[0] + v700 * 8);
                                          v702[662] = v749;
                                          __asm { PRFM            #0, [X23,#0x3E70] }
                                          *((_OWORD *)v702 + 332) = *(_OWORD *)(v1988.i64[0] + v700 * 8);
                                          v752 = *(_BYTE *)(v1990.i64[0] + v700 * 8);
                                          *v750 = 0;
                                          v750[1] = 0;
                                          *((_BYTE *)v702 + 5328) = v752;
                                          v700 += 667;
                                        }
                                        while (&v698[v700] < v693);
                                        v699 = &v693[v700];
                                      }
                                      *(_QWORD *)(v2068 + 5736) = v699;
                                      if (v693 != v696 + 667)
                                      {
                                        v753 = (uint64_t)(v693 - 667);
                                        v754 = 8 * (v693 - (v696 + 667));
                                        do
                                        {
                                          v753 = sub_20F5B6B10(v753, (uint64_t)&v1980[667 * v1974 - 667] + v754) - 5336;
                                          v754 -= 5336;
                                        }
                                        while (v754);
                                      }
                                      *v696 = v648;
                                      v755 = &v1980[667 * v1974];
                                      *(_OWORD *)(v755 + 1) = v2088;
                                      *((_BYTE *)v755 + 32) = v1984;
                                      memcpy(v755 + 5, (char *)v2149 + 7, 0x708uLL);
                                      *((_OWORD *)v755 + 115) = v2086;
                                      *(_OWORD *)(v755 + 233) = v2084;
                                      *((_OWORD *)v755 + 118) = v2082;
                                      *((_OWORD *)v755 + 119) = v2083;
                                      v756 = v2145;
                                      *((_OWORD *)v755 + 120) = v2144;
                                      v757 = v2146;
                                      *((_OWORD *)v755 + 123) = v2147;
                                      *((_OWORD *)v755 + 122) = v757;
                                      *((_OWORD *)v755 + 121) = v756;
                                      v758 = v2140;
                                      *(_OWORD *)(v755 + 249) = v2139;
                                      v759 = v2141;
                                      *(_OWORD *)(v755 + 255) = v2142;
                                      *(_OWORD *)(v755 + 253) = v759;
                                      *(_OWORD *)(v755 + 251) = v758;
                                      v760 = v2137;
                                      *((_OWORD *)v755 + 131) = v2136;
                                      *((_OWORD *)v755 + 132) = v760;
                                      v761 = v2135;
                                      *((_OWORD *)v755 + 129) = v2134;
                                      *((_OWORD *)v755 + 130) = v761;
                                      v762 = v2130;
                                      *(_OWORD *)(v755 + 267) = v2129;
                                      v763 = v2131;
                                      *(_OWORD *)(v755 + 273) = v2132;
                                      *(_OWORD *)(v755 + 271) = v763;
                                      *(_OWORD *)(v755 + 269) = v762;
                                      v764 = v2127;
                                      *((_OWORD *)v755 + 140) = v2126;
                                      *((_OWORD *)v755 + 141) = v764;
                                      v765 = v2125;
                                      *((_OWORD *)v755 + 138) = v2124;
                                      *((_OWORD *)v755 + 139) = v765;
                                      v766 = v2120;
                                      *(_OWORD *)(v755 + 285) = v2119;
                                      v767 = v2121;
                                      *(_OWORD *)(v755 + 291) = v2122;
                                      *(_OWORD *)(v755 + 289) = v767;
                                      *(_OWORD *)(v755 + 287) = v766;
                                      v768 = v2117;
                                      *((_OWORD *)v755 + 149) = v2116;
                                      *((_OWORD *)v755 + 150) = v768;
                                      v769 = v2115;
                                      *((_OWORD *)v755 + 147) = v2114;
                                      *((_OWORD *)v755 + 148) = v769;
                                      v770 = v2110;
                                      *(_OWORD *)(v755 + 303) = v2109;
                                      v771 = v2111;
                                      *(_OWORD *)(v755 + 309) = v2112;
                                      *(_OWORD *)(v755 + 307) = v771;
                                      v755[232] = v2087;
                                      v755[235] = v2085;
                                      v755[248] = v2148;
                                      v755[257] = v2143;
                                      v755[266] = v2138;
                                      v755[275] = v2133;
                                      v755[284] = v2128;
                                      v755[293] = v2123;
                                      v755[302] = v2118;
                                      v755[311] = v2113;
                                      *(_OWORD *)(v755 + 305) = v770;
                                      memcpy(v755 + 312, v2108, 0x288uLL);
                                      *(_OWORD *)(v755 + 393) = v2080;
                                      v755[395] = v2081;
                                      *((_OWORD *)v755 + 198) = v2078;
                                      v755[398] = v2079;
                                      memcpy(v755 + 399, v2107, 0x708uLL);
                                      *((_OWORD *)v755 + 312) = v2076;
                                      v755[626] = v2077;
                                      v755[627] = v692;
                                      *((_OWORD *)v755 + 314) = v1926;
                                      *((_OWORD *)v755 + 315) = v1923;
                                      *((_OWORD *)v755 + 320) = v2103;
                                      *((_OWORD *)v755 + 321) = v2104;
                                      *((_OWORD *)v755 + 322) = v2105;
                                      v755[646] = v2106;
                                      *((_OWORD *)v755 + 316) = v2098;
                                      *((_OWORD *)v755 + 317) = v2100;
                                      *((_OWORD *)v755 + 318) = v2101;
                                      *((_OWORD *)v755 + 319) = v2102;
                                      v755[661] = v2096;
                                      *(_OWORD *)(v755 + 659) = v2095;
                                      *(_OWORD *)(v755 + 657) = v2094;
                                      *(_OWORD *)(v755 + 655) = v2093;
                                      *(_OWORD *)(v755 + 653) = v2092;
                                      *(_OWORD *)(v755 + 651) = v2091;
                                      *(_OWORD *)(v755 + 649) = v2090;
                                      *(_OWORD *)(v755 + 647) = v2089;
                                      *((_BYTE *)v755 + 5304) = v2075;
                                      v755[662] = v2074;
                                      v755[664] = v1970;
                                      v772 = (std::__shared_weak_count *)v755[665];
                                      v755[665] = categorya;
                                      if (v772)
                                      {
                                        v773 = (unint64_t *)&v772->__shared_owners_;
                                        do
                                          v774 = __ldaxr(v773);
                                        while (__stlxr(v774 - 1, v773));
                                        if (!v774)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                                          std::__shared_weak_count::__release_weak(v772);
                                        }
                                      }
                                      LOBYTE(v1980[667 * v1974 + 666]) = v1986.i8[0];
                                    }
                                    categorya = (std::__shared_weak_count *)*((_QWORD *)&v2223[214] + 1);
                                  }
                                  if (categorya)
                                  {
                                    v1310 = (unint64_t *)&categorya->__shared_owners_;
                                    do
                                      v1311 = __ldaxr(v1310);
                                    while (__stlxr(v1311 - 1, v1310));
                                    if (!v1311)
                                    {
                                      ((void (*)(std::__shared_weak_count *))categorya->__on_zero_shared)(categorya);
                                      std::__shared_weak_count::__release_weak(categorya);
                                    }
                                  }
                                  v2019[2] = 0;
                                  *v2019 = 0;
                                  *(int64x2_t *)(v2068 + 5840) = vaddq_s64(*(int64x2_t *)(v2068 + 5840), (int64x2_t)xmmword_2103B4900);
                                  v656 = 1;
                                }
                                else
                                {
                                  v656 = 0;
                                  --*(_DWORD *)(v670 + 8);
                                  --*(_DWORD *)(v679 + 8);
                                  *(_OWORD *)&v2183[5016] = 0u;
                                  --*(_DWORD *)(v685 + 8);
                                  --*(_DWORD *)(v691 + 8);
                                  *(_OWORD *)&v2183[5032] = 0u;
                                }
                              }
                              v775 = *(std::__shared_weak_count **)&v2183[5312];
                              if (*(_QWORD *)&v2183[5312])
                              {
                                v776 = (unint64_t *)(*(_QWORD *)&v2183[5312] + 8);
                                do
                                  v777 = __ldaxr(v776);
                                while (__stlxr(v777 - 1, v776));
                                if (!v777)
                                {
                                  ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                                  std::__shared_weak_count::__release_weak(v775);
                                }
                              }
                              v502 = v2073;
LABEL_848:
                              if (v502)
                              {
                                v778 = (unint64_t *)&v502->__shared_owners_;
                                do
                                  v779 = __ldaxr(v778);
                                while (__stlxr(v779 - 1, v778));
                                if (!v779)
                                {
                                  ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                                  std::__shared_weak_count::__release_weak(v502);
                                }
                              }
                              if (v656)
                              {
                                *(_BYTE *)(v2068 + 6636) = 0;
                                *v2001 = 0;
                              }
                              if (v2072)
                              {
                                v780 = (unint64_t *)&v2072->__shared_owners_;
                                do
                                  v781 = __ldaxr(v780);
                                while (__stlxr(v781 - 1, v780));
                                if (!v781)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2072->__on_zero_shared)(v2072);
                                  std::__shared_weak_count::__release_weak(v2072);
                                }
                              }
                              if (!v656)
                              {
                                sub_20F4AD5FC(v2107);
                                if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 4)
                                {
                                  v782 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
                                  v783 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
                                  v784 = v783;
                                  if (v782 || v783 != 0)
                                  {
                                    *(_QWORD *)v2183 = v2107;
                                    *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
                                    *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
                                    *(_DWORD *)&v2183[24] = 4;
                                    *(_QWORD *)&v2183[32] = "unknown file";
                                    *(_DWORD *)&v2183[40] = 184;
                                    *(_QWORD *)&v2183[48] = "unknown function";
                                    *(_QWORD *)&v2183[56] = 0;
                                    *(_QWORD *)&v2183[64] = 0;
                                    v786 = **(_QWORD **)v2183;
                                    if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
                                    {
                                      v787 = *(_QWORD *)(v786 + 24);
                                      categoryb = *(const char **)(v786 + 16);
                                    }
                                    else
                                    {
                                      v787 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
                                      categoryb = (const char *)(**(_QWORD **)v2183 + 16);
                                    }
                                    v1990.i64[0] = **(_QWORD **)v2183 + 16;
                                    v788 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                    if ((v788 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                    {
                                      sub_20E9E46F8((uint64_t)v2150);
                                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                                      if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                                        operator delete(v2150[0]);
                                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                      __cxa_guard_release(&qword_254A4A510);
                                    }
                                    if (byte_254A4A4F8[23] >= 0)
                                      v789 = byte_254A4A4F8;
                                    else
                                      v789 = *(const char **)byte_254A4A4F8;
                                    if (byte_254A4A4F8[23] >= 0)
                                      v790 = byte_254A4A4F8[23];
                                    else
                                      v790 = *(_QWORD *)&byte_254A4A4F8[8];
                                    *(_QWORD *)object = os_log_create(v789, categoryb);
                                    if (v790 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v790 >= 0x17)
                                    {
                                      v792 = v784;
                                      v793 = (v790 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v790 | 7) != 0x17)
                                        v793 = v790 | 7;
                                      v794 = v793 + 1;
                                      v791 = operator new(v793 + 1);
                                      *(_QWORD *)&object[24] = v794 | 0x8000000000000000;
                                      *(_QWORD *)&object[8] = v791;
                                      *(_QWORD *)&object[16] = v790;
                                      v784 = v792;
                                    }
                                    else
                                    {
                                      object[31] = v790;
                                      v791 = &object[8];
                                      if (!v790)
                                      {
LABEL_884:
                                        v791[v790] = 0;
                                        object[32] = 1;
                                        if (v787 > 0x7FFFFFFFFFFFFFF7)
                                          sub_20E860B7C();
                                        if (v787 >= 0x17)
                                        {
                                          v796 = (v787 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v787 | 7) != 0x17)
                                            v796 = v787 | 7;
                                          v797 = v796 + 1;
                                          v795 = operator new(v796 + 1);
                                          *(_QWORD *)&object[56] = v797 | 0x8000000000000000;
                                          *(_QWORD *)&object[40] = v795;
                                          *(_QWORD *)&object[48] = v787;
                                        }
                                        else
                                        {
                                          object[63] = v787;
                                          v795 = &object[40];
                                          if (!v787)
                                          {
LABEL_892:
                                            v795[v787] = 0;
                                            object[64] = 1;
                                            v798 = *(NSObject **)object;
                                            if ((object[63] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[40]);
                                            if (object[32] && (object[31] & 0x80000000) != 0)
                                              operator delete(*(void **)&object[8]);
                                            if (*(_QWORD *)object)
                                              os_release(*(void **)object);
                                            if (v784 && *(_QWORD *)(v784 + 24))
                                            {
                                              v799 = _os_log_pack_size();
                                              v800 = (std::__shared_weak_count_vtbl *)operator new(v799, (std::align_val_t)8uLL);
                                              v801 = (std::__shared_weak_count *)operator new();
                                              v802 = v2012;
                                              v803 = v801;
                                              v801->__shared_owners_ = 0;
                                              v804 = (unint64_t *)&v801->__shared_owners_;
                                              v801->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                              v801->__shared_weak_owners_ = 0;
                                              v801[1].__vftable = v800;
                                              *(_QWORD *)object = v800;
                                              *(_QWORD *)&object[8] = v800;
                                              *(_QWORD *)&object[16] = v801;
                                              do
                                                v805 = __ldxr(v804);
                                              while (__stxr(v805 + 1, v804));
                                              memset(&object[24], 0, 24);
                                              do
                                                v806 = __ldaxr(v804);
                                              while (__stlxr(v806 - 1, v804));
                                              if (!v806)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                                std::__shared_weak_count::__release_weak(v803);
                                              }
                                              v807 = *(_QWORD *)object;
                                              v808 = _os_log_pack_fill();
                                              *(_DWORD *)v808 = 134218496;
                                              *(_QWORD *)(v808 + 4) = __szc;
                                              *(_WORD *)(v808 + 12) = 1024;
                                              *(_DWORD *)(v808 + 14) = v505;
                                              *(_WORD *)(v808 + 18) = 1024;
                                              *(_DWORD *)(v808 + 20) = v2012;
                                              v809 = (char *)operator new();
                                              v810 = *(unsigned __int8 *)(v786 + 39);
                                              v811 = v1990.i64[0];
                                              if ((v810 & 0x80u) != 0)
                                              {
                                                v811 = *(_QWORD *)(v786 + 16);
                                                v810 = *(_QWORD *)(v786 + 24);
                                              }
                                              *(_QWORD *)v809 = v807;
                                              *(_OWORD *)(v809 + 8) = *(_OWORD *)&object[8];
                                              *(_QWORD *)&object[8] = 0;
                                              *(_QWORD *)&object[16] = 0;
                                              *(_OWORD *)(v809 + 24) = *(_OWORD *)&object[24];
                                              *(_QWORD *)&object[24] = 0;
                                              *(_QWORD *)&object[32] = 0;
                                              *((_QWORD *)v809 + 5) = v811;
                                              *((_QWORD *)v809 + 6) = v810;
                                              v809[56] = 16;
                                              *(_QWORD *)&v2149[0] = 0;
                                              v2150[0] = v809;
                                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v784 + 24) + 40))(*(_QWORD *)(v784 + 24), v2150);
                                              v812 = v2150[0];
                                              v2150[0] = 0;
                                              if (v812)
                                              {
                                                v813 = (std::__shared_weak_count *)*((_QWORD *)v812 + 4);
                                                if (v813)
                                                {
                                                  v814 = (unint64_t *)&v813->__shared_owners_;
                                                  do
                                                    v815 = __ldaxr(v814);
                                                  while (__stlxr(v815 - 1, v814));
                                                  if (!v815)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
                                                    std::__shared_weak_count::__release_weak(v813);
                                                  }
                                                }
                                                v816 = (std::__shared_weak_count *)*((_QWORD *)v812 + 2);
                                                if (v816)
                                                {
                                                  v817 = (unint64_t *)&v816->__shared_owners_;
                                                  do
                                                    v818 = __ldaxr(v817);
                                                  while (__stlxr(v818 - 1, v817));
                                                  if (!v818)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v816->__on_zero_shared)(v816);
                                                    std::__shared_weak_count::__release_weak(v816);
                                                  }
                                                }
                                                MEMORY[0x212BC6398](v812, 0x10F0C40B62ED6C6);
                                                v819 = *(_QWORD *)&v2149[0];
                                                *(_QWORD *)&v2149[0] = 0;
                                                v802 = v2012;
                                                if (v819)
                                                {
                                                  v820 = *(std::__shared_weak_count **)(v819 + 32);
                                                  if (v820)
                                                  {
                                                    v821 = (unint64_t *)&v820->__shared_owners_;
                                                    do
                                                      v822 = __ldaxr(v821);
                                                    while (__stlxr(v822 - 1, v821));
                                                    if (!v822)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
                                                      std::__shared_weak_count::__release_weak(v820);
                                                    }
                                                  }
                                                  v823 = *(std::__shared_weak_count **)(v819 + 16);
                                                  if (v823)
                                                  {
                                                    v824 = (unint64_t *)&v823->__shared_owners_;
                                                    do
                                                      v825 = __ldaxr(v824);
                                                    while (__stlxr(v825 - 1, v824));
                                                    if (!v825)
                                                    {
                                                      ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                                                      std::__shared_weak_count::__release_weak(v823);
                                                    }
                                                  }
                                                  MEMORY[0x212BC6398](v819, 0x10F0C40B62ED6C6);
                                                  v802 = v2012;
                                                }
                                              }
                                              v826 = *(std::__shared_weak_count **)&object[32];
                                              if (*(_QWORD *)&object[32])
                                              {
                                                v827 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                                                do
                                                  v828 = __ldaxr(v827);
                                                while (__stlxr(v828 - 1, v827));
                                                if (!v828)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                                                  std::__shared_weak_count::__release_weak(v826);
                                                }
                                              }
                                              v829 = *(std::__shared_weak_count **)&object[16];
                                              if (*(_QWORD *)&object[16])
                                              {
                                                v830 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                                                do
                                                  v831 = __ldaxr(v830);
                                                while (__stlxr(v831 - 1, v830));
                                                if (!v831)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
                                                  std::__shared_weak_count::__release_weak(v829);
                                                }
                                              }
                                            }
                                            else
                                            {
                                              os_log_type_enabled(v798, OS_LOG_TYPE_ERROR);
                                              *(_DWORD *)object = 134218496;
                                              *(_QWORD *)&object[4] = __szc;
                                              *(_WORD *)&object[12] = 1024;
                                              *(_DWORD *)&object[14] = v505;
                                              *(_WORD *)&object[18] = 1024;
                                              v802 = v2012;
                                              *(_DWORD *)&object[20] = v2012;
                                              v832 = (void *)_os_log_send_and_compose_impl();
                                              if (v832)
                                                free(v832);
                                            }
                                            if (v782)
                                            {
                                              sub_20E8C003C((uint64_t)v2183, "Failed to add the pre-integrated factor: %zu, state: %d -> %d.\n", (size_t)__szc, v505, v802);
                                              sub_20E863570((uint64_t)v2183);
                                            }
                                            sub_20E863570((uint64_t)v2183);
                                            v833 = *(std::__shared_weak_count **)&v2183[64];
                                            if (*(_QWORD *)&v2183[64])
                                            {
                                              v834 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                                              do
                                                v835 = __ldaxr(v834);
                                              while (__stlxr(v835 - 1, v834));
                                              if (!v835)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
                                                std::__shared_weak_count::__release_weak(v833);
                                              }
                                            }
                                            goto LABEL_951;
                                          }
                                        }
                                        memmove(v795, categoryb, v787);
                                        goto LABEL_892;
                                      }
                                    }
                                    memmove(v791, v789, v790);
                                    goto LABEL_884;
                                  }
                                }
                              }
LABEL_951:
                              if (v2069)
                              {
                                v836 = (unint64_t *)&v2069->__shared_owners_;
                                do
                                  v837 = __ldaxr(v836);
                                while (__stlxr(v837 - 1, v836));
                                if (!v837)
                                {
                                  ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
                                  std::__shared_weak_count::__release_weak(v2069);
                                }
                              }
                              v645 = v2071;
                              if (!v2071)
                                goto LABEL_478;
                              v838 = (unint64_t *)&v2071->__shared_owners_;
                              do
                                v647 = __ldaxr(v838);
                              while (__stlxr(v647 - 1, v838));
LABEL_751:
                              if (!v647)
                              {
                                ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                                std::__shared_weak_count::__release_weak(v645);
                              }
                              goto LABEL_478;
                            }
                          }
                        }
                        v579 = *(_QWORD *)(v479 + 824);
                        v580 = *(_QWORD *)(v480 + 824);
                        v486[728] = v486[15];
                        v486[729] = v2031;
                        sub_20F61F108(v2068 + 480, v2107);
                        if ((v2011 & 1) != 0)
                        {
                          v582 = 0;
                          v583 = v1960;
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                          {
LABEL_657:
                            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOIMUFactor.hpp", 179, (uint64_t)"sqrt_I_ != nullptr", 18, (uint64_t)"Covariance cannot be nullptr", 28, (void (*)(void **))sub_21023DDB0))
                            {
                              abort();
                            }
                            v585 = *(_QWORD *)&v2107[0];
                          }
                        }
                        else
                        {
                          v582 = v1962.i8[0];
                          v583 = v1962.u8[15];
                          v1959 = v1962.i8[14];
                          v1958 = v1962.i8[13];
                          v1957 = v1962.i8[12];
                          v1956 = v1962.i8[11];
                          v1955 = v1962.i8[10];
                          v1954 = v1962.i8[9];
                          v1953 = v1962.i8[8];
                          v1952 = v1962.i8[7];
                          v1951 = v1962.i8[6];
                          v1950 = v1962.i8[5];
                          v1949 = v1962.i8[4];
                          v1948 = v1962.i8[3];
                          v1947 = v1962.i8[2];
                          v1946 = v1962.i8[1];
                          v1945 = v1961.i8[15];
                          v1944 = v1961.i8[14];
                          v1943 = v1961.i8[13];
                          v1942 = v1961.i8[12];
                          v1941 = v1961.i8[11];
                          v1940 = v1961.i8[10];
                          v1939 = v1961.i8[9];
                          v1938 = v1961.i8[8];
                          v1937 = v1961.i8[7];
                          v1936 = v1961.i8[6];
                          v1935 = v1961.i8[5];
                          v1934 = v1961.i8[4];
                          v1933 = v1961.i8[3];
                          v1932 = v1961.i8[2];
                          v1931 = v1961.i8[1];
                          v1930 = v1961.i8[0];
                          v584 = *(_QWORD *)&v2107[0];
                          v585 = *(_QWORD *)&v2107[0];
                          if (!*(_QWORD *)&v2107[0])
                            goto LABEL_657;
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                        *(_QWORD *)&v2108[0] = v585;
                        *((_QWORD *)&v2108[0] + 1) = *((_QWORD *)&v2107[0] + 1);
                        v2107[0] = 0uLL;
                        v2149[0] = __PAIR128__(*((unint64_t *)&v2108[0] + 1), v585);
                        if (*((_QWORD *)&v2108[0] + 1))
                        {
                          v587 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v588 = __ldxr(v587);
                          while (__stxr(v588 + 1, v587));
                        }
                        v589 = *(char **)(v2068 + 5704);
                        v590 = *(char **)(v2068 + 5712);
                        v1960 = v583;
                        if (v589 == v590)
                        {
                          v590 = *(char **)(v2068 + 5704);
                        }
                        else if (*((_QWORD *)v590 - 1002) >= (unint64_t)__szc)
                        {
                          v591 = 0x2F028E0D4911E25DLL * ((v590 - v589) >> 4);
                          do
                          {
                            v592 = v591 >> 1;
                            v593 = (unint64_t *)&v589[8016 * (v591 >> 1)];
                            v594 = *v593;
                            v595 = (char *)(v593 + 1002);
                            v591 += ~(v591 >> 1);
                            if (v594 < (unint64_t)__szc)
                              v589 = v595;
                            else
                              v591 = v592;
                          }
                          while (v591);
                          if (v589 != v590)
                          {
                            v590 = v589;
                            if (*(void **)v589 == __szc)
                            {
                              v596 = 0;
LABEL_736:
                              if (v586)
                              {
                                v640 = (unint64_t *)&v586->__shared_owners_;
                                do
                                  v641 = __ldaxr(v640);
                                while (__stlxr(v641 - 1, v640));
                                if (!v641)
                                {
                                  ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                                  std::__shared_weak_count::__release_weak(v586);
                                }
                              }
                              if (v596)
                              {
                                *(_BYTE *)(v2068 + 6636) = 0;
                                *v2001 = 0;
                              }
                              v642 = (std::__shared_weak_count *)*((_QWORD *)&v2108[0] + 1);
                              if (*((_QWORD *)&v2108[0] + 1))
                              {
                                v643 = (unint64_t *)(*((_QWORD *)&v2108[0] + 1) + 8);
                                do
                                  v644 = __ldaxr(v643);
                                while (__stlxr(v644 - 1, v643));
                                if (!v644)
                                {
                                  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                                  std::__shared_weak_count::__release_weak(v642);
                                }
                              }
                              v645 = (std::__shared_weak_count *)*((_QWORD *)&v2107[0] + 1);
                              if (!*((_QWORD *)&v2107[0] + 1))
                                goto LABEL_478;
                              v646 = (unint64_t *)(*((_QWORD *)&v2107[0] + 1) + 8);
                              do
                                v647 = __ldaxr(v646);
                              while (__stlxr(v647 - 1, v646));
                              goto LABEL_751;
                            }
                          }
                        }
                        if (v586)
                        {
                          v597 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v598 = __ldxr(v597);
                          while (__stxr(v598 + 1, v597));
                        }
                        v2150[0] = __szc;
                        *(_QWORD *)v2151 = v584;
                        v2151[8] = 0;
                        v2151[40] = 0;
                        if ((v2011 & 1) == 0)
                        {
                          LOBYTE(v599) = v1931;
                          BYTE1(v599) = v1932;
                          BYTE2(v599) = v1933;
                          BYTE3(v599) = v1934;
                          BYTE4(v599) = v1935;
                          BYTE5(v599) = v1936;
                          BYTE6(v599) = v1937;
                          HIBYTE(v599) = v1938;
                          LOBYTE(v600) = v1939;
                          BYTE1(v600) = v1940;
                          BYTE2(v600) = v1941;
                          HIBYTE(v600) = v1942;
                          LOBYTE(v601) = v1943;
                          HIBYTE(v601) = v1944;
                          *(_WORD *)&v2151[37] = v601;
                          *(_DWORD *)&v2151[33] = v600;
                          v2151[8] = v582;
                          LOBYTE(v602) = v1946;
                          BYTE1(v602) = v1947;
                          BYTE2(v602) = v1948;
                          BYTE3(v602) = v1949;
                          BYTE4(v602) = v1950;
                          BYTE5(v602) = v1951;
                          BYTE6(v602) = v1952;
                          BYTE7(v602) = v1953;
                          BYTE8(v602) = v1954;
                          BYTE9(v602) = v1955;
                          BYTE10(v602) = v1956;
                          BYTE11(v602) = v1957;
                          BYTE12(v602) = v1958;
                          BYTE13(v602) = v1959;
                          BYTE14(v602) = v583;
                          HIBYTE(v602) = v1930;
                          *(_OWORD *)&v2151[9] = v602;
                          v2151[39] = v1945;
                          *(_QWORD *)&v2151[25] = v599;
                          v2151[40] = 1;
                        }
                        *(_QWORD *)&v2151[48] = v580;
                        *(_QWORD *)&v2151[56] = v579;
                        BYTE8(v2152[127]) = 0;
                        v2158 = 0;
                        v2159 = 257;
                        v2160 = 0u;
                        v2161 = 0u;
                        v2162 = 0;
                        *(_QWORD *)&v2181 = v585;
                        *((_QWORD *)&v2181 + 1) = v586;
                        if (v586)
                        {
                          v603 = (unint64_t *)&v586->__shared_owners_;
                          do
                            v604 = __ldxr(v603);
                          while (__stxr(v604 + 1, v603));
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                          do
                            v605 = __ldaxr(v603);
                          while (__stlxr(v605 - 1, v603));
                          if (!v605)
                          {
                            ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                            std::__shared_weak_count::__release_weak(v586);
                          }
                        }
                        else
                        {
                          v2179 = 0xBFF0000000000000;
                          v2180 = 0;
                          v2182 = 0;
                        }
                        v606 = *(char **)(v2068 + 4888);
                        v607 = *(char **)(v2068 + 4896);
                        v608 = v606;
                        if (v607 != v606)
                        {
                          v609 = (v607 - v606) >> 4;
                          v608 = *(char **)(v2068 + 4888);
                          do
                          {
                            v610 = v609 >> 1;
                            v611 = (unsigned int *)&v608[16 * (v609 >> 1)];
                            v613 = *v611;
                            v612 = (char *)(v611 + 4);
                            v609 += ~(v609 >> 1);
                            if (v613 < v457)
                              v608 = v612;
                            else
                              v609 = v610;
                          }
                          while (v609);
                        }
                        if (v608 == v607 || *(_DWORD *)v608 != v457)
                          goto LABEL_720;
                        v614 = *((_QWORD *)v608 + 1);
                        *(_QWORD *)&v2160 = v614;
                        ++*(_DWORD *)(*((_QWORD *)v608 + 1) + 8);
                        v615 = *(char **)(v2068 + 4984);
                        v616 = *(char **)(v2068 + 4992);
                        v617 = v615;
                        if (v616 != v615)
                        {
                          v618 = (v616 - v615) >> 4;
                          v617 = *(char **)(v2068 + 4984);
                          do
                          {
                            v619 = v618 >> 1;
                            v620 = (unsigned int *)&v617[16 * (v618 >> 1)];
                            v622 = *v620;
                            v621 = (char *)(v620 + 4);
                            v618 += ~(v618 >> 1);
                            if (v622 < v457)
                              v617 = v621;
                            else
                              v618 = v619;
                          }
                          while (v618);
                        }
                        if (v617 == v616 || *(_DWORD *)v617 != v457)
                          goto LABEL_720;
                        v623 = *((_QWORD *)v617 + 1);
                        *((_QWORD *)&v2160 + 1) = v623;
                        ++*(_DWORD *)(*((_QWORD *)v617 + 1) + 8);
                        if (v607 != v606)
                        {
                          v624 = (v607 - v606) >> 4;
                          v581 = __szc;
                          do
                          {
                            v625 = v624 >> 1;
                            v626 = (unsigned int *)&v606[16 * (v624 >> 1)];
                            v628 = *v626;
                            v627 = (char *)(v626 + 4);
                            v624 += ~(v624 >> 1);
                            if (v628 < __szc)
                              v606 = v627;
                            else
                              v624 = v625;
                          }
                          while (v624);
                        }
                        if (v606 == v607 || *(_DWORD *)v606 != (_DWORD)__szc)
                          goto LABEL_720;
                        v629 = *((_QWORD *)v606 + 1);
                        *(_QWORD *)&v2161 = v629;
                        ++*(_DWORD *)(*((_QWORD *)v606 + 1) + 8);
                        if (v616 != v615)
                        {
                          v630 = (v616 - v615) >> 4;
                          do
                          {
                            v631 = v630 >> 1;
                            v632 = (unsigned int *)&v615[16 * (v630 >> 1)];
                            v634 = *v632;
                            v633 = (char *)(v632 + 4);
                            v630 += ~(v630 >> 1);
                            if (v634 < __szc)
                              v615 = v633;
                            else
                              v630 = v631;
                          }
                          while (v630);
                        }
                        if (v615 == v616
                          || *(_DWORD *)v615 != (_DWORD)__szc
                          || (v635 = *((_QWORD *)v615 + 1),
                              *((_QWORD *)&v2161 + 1) = v635,
                              ++*(_DWORD *)(*((_QWORD *)v615 + 1) + 8),
                              v636 = *(_QWORD *)(v2068 + 5080),
                              *(_QWORD *)(v2068 + 5088) == v636)
                          || *(_DWORD *)v636)
                        {
LABEL_720:
                          if ((_QWORD)v2160)
                            --*(_DWORD *)(v2160 + 8);
                          if (*((_QWORD *)&v2160 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2160 + 1) + 8);
                          if ((_QWORD)v2161)
                            --*(_DWORD *)(v2161 + 8);
                          if (*((_QWORD *)&v2161 + 1))
                            --*(_DWORD *)(*((_QWORD *)&v2161 + 1) + 8);
                          v596 = 0;
                          if (v2162)
                            --*(_DWORD *)(v2162 + 8);
                        }
                        else
                        {
                          v839 = *(_QWORD *)(v636 + 8);
                          v2162 = v839;
                          ++*(_DWORD *)(*(_QWORD *)(v636 + 8) + 8);
                          if (*(_BYTE *)(v614 + 20)
                            || *(_BYTE *)(v623 + 20)
                            || *(_BYTE *)(v629 + 20)
                            || *(_BYTE *)(v635 + 20)
                            || *(_BYTE *)(v839 + 20))
                          {
                            *(_OWORD *)&v2183[8] = *(_OWORD *)v2150;
                            *(_QWORD *)v2183 = __szc;
                            *(_QWORD *)&v2183[24] = *(_QWORD *)v2151;
                            v2183[32] = 0;
                            v2183[64] = 0;
                            if (v2151[40])
                            {
                              *(_OWORD *)&v2183[32] = *(_OWORD *)&v2151[8];
                              *(_OWORD *)&v2183[48] = *(_OWORD *)&v2151[24];
                              v2183[64] = 1;
                            }
                            *(_OWORD *)&v2183[72] = *(_OWORD *)&v2151[48];
                            memcpy(&v2183[88], &v2151[64], 0x708uLL);
                            memcpy(&v2183[1888], v2152, 0x708uLL);
                            *(_OWORD *)&v2183[3752] = *(_OWORD *)((char *)&v2152[116] + 8);
                            *(_OWORD *)&v2183[3768] = *(_OWORD *)((char *)&v2152[117] + 8);
                            *(_OWORD *)&v2183[3784] = *(_OWORD *)((char *)&v2152[118] + 8);
                            *(_QWORD *)&v2183[3800] = *((_QWORD *)&v2152[119] + 1);
                            *(_OWORD *)&v2183[3688] = *(_OWORD *)((char *)&v2152[112] + 8);
                            *(_OWORD *)&v2183[3704] = *(_OWORD *)((char *)&v2152[113] + 8);
                            *(_OWORD *)&v2183[3720] = *(_OWORD *)((char *)&v2152[114] + 8);
                            *(_OWORD *)&v2183[3736] = *(_OWORD *)((char *)&v2152[115] + 8);
                            *(_OWORD *)&v2183[3872] = v2152[124];
                            *(_OWORD *)&v2183[3888] = v2152[125];
                            *(_OWORD *)&v2183[3904] = v2152[126];
                            *(_QWORD *)&v2183[3920] = *(_QWORD *)&v2152[127];
                            *(_OWORD *)&v2183[3808] = v2152[120];
                            *(_OWORD *)&v2183[3824] = v2152[121];
                            *(_OWORD *)&v2183[3840] = v2152[122];
                            *(_OWORD *)&v2183[3856] = v2152[123];
                            v2183[3928] = 0;
                            v2197 = 0;
                            if (v2158)
                            {
                              memcpy(&v2183[3928], (char *)&v2152[127] + 8, 0x708uLL);
                              v2188 = v2152[244];
                              v2189 = v2152[245];
                              v2190 = v2152[246];
                              v2191 = v2153;
                              v2184 = v2152[240];
                              v2185 = v2152[241];
                              v2186 = v2152[242];
                              v2187 = v2152[243];
                              v1990.i8[0] = v2154;
                              v2192 = v2154;
                              v1988.i8[0] = v2155;
                              v2194 = v2155;
                              v2193 = &off_24CA00398;
                              memcpy(v2195, v2156, sizeof(v2195));
                              v1986.i64[0] = v2157;
                              v2196 = v2157;
                              v2197 = 1;
                            }
                            v2198 = v2159;
                            v2199 = v2160;
                            v2200 = v2161;
                            v2201 = v2162;
                            v2206 = v2167;
                            v2207 = v2168;
                            v2208 = v2169;
                            v2209 = v2170;
                            v2202 = v2163;
                            v2203 = v2164;
                            v2204 = v2165;
                            v2205 = v2166;
                            v2217 = v2178;
                            v2215 = v2176;
                            v2216 = v2177;
                            v2213 = v2174;
                            v2214 = v2175;
                            v2211 = v2172;
                            v2212 = v2173;
                            v2210 = v2171;
                            v2219 = v2180;
                            v2218 = v2179;
                            v840 = v2181;
                            v2220 = v2181;
                            v841 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                            v2181 = 0uLL;
                            v2221 = v2182;
                            v842 = *(char **)(v2068 + 5712);
                            if (v842 == v590 || *(void **)v590 != __szc)
                            {
                              v843 = *(char **)(v2068 + 5704);
                              v844 = v590 - v843;
                              v1921 = v843;
                              v1918 = (v590 - v843) / 8016;
                              v845 = *(_QWORD *)(v2068 + 5720);
                              categoryc = &v843[8016 * v1918];
                              if ((unint64_t)v842 >= v845)
                              {
                                v899 = 0x2F028E0D4911E25DLL * ((v842 - v843) >> 4) + 1;
                                if (v899 > 0x82CF750393AC3)
                                  sub_20E867F44();
                                v900 = 0x2F028E0D4911E25DLL * ((uint64_t)(v845 - (_QWORD)v843) >> 4);
                                if (2 * v900 > v899)
                                  v899 = 2 * v900;
                                if (v900 >= 0x4167BA81C9D61)
                                  v901 = 0x82CF750393AC3;
                                else
                                  v901 = v899;
                                *(_QWORD *)&object[32] = v2068 + 5720;
                                if (v901)
                                {
                                  if (v901 > 0x82CF750393AC3)
                                    sub_20E877A38();
                                  v902 = (char *)operator new(8016 * v901);
                                }
                                else
                                {
                                  v902 = 0;
                                }
                                *(_QWORD *)object = v902;
                                *(_QWORD *)&object[8] = &v902[8016 * v1918];
                                v2014 = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                *(_QWORD *)&object[24] = &v902[8016 * v901];
                                if (v1918 == v901)
                                {
                                  if (v844 < 1)
                                  {
                                    if (v1921 == v590)
                                      v956 = 1;
                                    else
                                      v956 = 2 * v1918;
                                    if (v956 > 0x82CF750393AC3)
                                      sub_20E877A38();
                                    *(_QWORD *)object = operator new(8016 * v956);
                                    *(_QWORD *)&object[8] = *(_QWORD *)object + 8016 * (v956 >> 2);
                                    v2014 = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
                                    *(_QWORD *)&object[24] = *(_QWORD *)object + 8016 * v956;
                                    if (v902)
                                      operator delete(v902);
                                  }
                                  else
                                  {
                                    v943 = v1918 + 2;
                                    if (v1918 >= -1)
                                      v943 = v1918 + 1;
                                    v2014 = *(_QWORD *)&object[8] - 8016 * (v943 >> 1);
                                    *(_QWORD *)&object[16] = v2014;
                                    *(_QWORD *)&object[8] = v2014;
                                  }
                                }
                                *(_QWORD *)v2014 = __szc;
                                *(_OWORD *)(v2014 + 8) = *(_OWORD *)v2150;
                                *(_QWORD *)(v2014 + 24) = *(_QWORD *)&v2183[24];
                                *(_BYTE *)(v2014 + 32) = 0;
                                *(_BYTE *)(v2014 + 64) = 0;
                                if (v2183[64])
                                {
                                  v957 = *(_OWORD *)&v2183[48];
                                  *(_OWORD *)(v2014 + 32) = *(_OWORD *)&v2183[32];
                                  *(_OWORD *)(v2014 + 48) = v957;
                                  *(_BYTE *)(v2014 + 64) = 1;
                                }
                                *(_OWORD *)(v2014 + 72) = *(_OWORD *)&v2183[72];
                                memcpy((void *)(v2014 + 88), &v2183[88], 0x708uLL);
                                memcpy((void *)(v2014 + 1888), &v2183[1888], 0x708uLL);
                                v958 = *(_OWORD *)&v2183[3720];
                                *(_OWORD *)(v2014 + 3736) = *(_OWORD *)&v2183[3736];
                                *(_OWORD *)(v2014 + 3720) = v958;
                                v959 = *(_OWORD *)&v2183[3688];
                                *(_OWORD *)(v2014 + 3704) = *(_OWORD *)&v2183[3704];
                                *(_OWORD *)(v2014 + 3688) = v959;
                                *(_QWORD *)(v2014 + 3800) = *(_QWORD *)&v2183[3800];
                                *(_OWORD *)(v2014 + 3784) = *(_OWORD *)&v2183[3784];
                                v960 = *(_OWORD *)&v2183[3752];
                                *(_OWORD *)(v2014 + 3768) = *(_OWORD *)&v2183[3768];
                                *(_OWORD *)(v2014 + 3752) = v960;
                                v961 = *(_OWORD *)&v2183[3824];
                                *(_OWORD *)(v2014 + 3808) = *(_OWORD *)&v2183[3808];
                                *(_OWORD *)(v2014 + 3824) = v961;
                                v962 = *(_OWORD *)&v2183[3856];
                                *(_OWORD *)(v2014 + 3840) = *(_OWORD *)&v2183[3840];
                                *(_OWORD *)(v2014 + 3856) = v962;
                                *(_OWORD *)(v2014 + 3904) = *(_OWORD *)&v2183[3904];
                                v963 = *(_OWORD *)&v2183[3872];
                                *(_OWORD *)(v2014 + 3888) = *(_OWORD *)&v2183[3888];
                                *(_QWORD *)(v2014 + 3920) = *(_QWORD *)&v2183[3920];
                                *(_OWORD *)(v2014 + 3872) = v963;
                                *(_BYTE *)(v2014 + 3928) = 0;
                                *(_BYTE *)(v2014 + 7680) = 0;
                                if (v2197)
                                {
                                  memcpy((void *)(v2014 + 3928), &v2183[3928], 0x708uLL);
                                  v964 = v2189;
                                  *(_OWORD *)(v2014 + 5792) = v2188;
                                  *(_OWORD *)(v2014 + 5808) = v964;
                                  *(_OWORD *)(v2014 + 5824) = v2190;
                                  v965 = v2185;
                                  *(_OWORD *)(v2014 + 5728) = v2184;
                                  *(_OWORD *)(v2014 + 5744) = v965;
                                  v966 = v2187;
                                  *(_OWORD *)(v2014 + 5760) = v2186;
                                  *(_QWORD *)(v2014 + 5840) = v2191;
                                  *(_OWORD *)(v2014 + 5776) = v966;
                                  *(_BYTE *)(v2014 + 5848) = v2192;
                                  *(_BYTE *)(v2014 + 5864) = v2194;
                                  *(_QWORD *)(v2014 + 5856) = &off_24CA00398;
                                  memcpy((void *)(v2014 + 5872), v2195, 0x708uLL);
                                  *(_QWORD *)(v2014 + 7672) = v2196;
                                  *(_BYTE *)(v2014 + 7680) = 1;
                                }
                                *(_WORD *)(v2014 + 7688) = v2198;
                                v967 = v2200;
                                *(_OWORD *)(v2014 + 7696) = v2199;
                                *(_OWORD *)(v2014 + 7712) = v967;
                                *(_QWORD *)(v2014 + 7728) = v2201;
                                v968 = v2203;
                                *(_OWORD *)(v2014 + 7736) = v2202;
                                *(_OWORD *)(v2014 + 7752) = v968;
                                v969 = v2205;
                                *(_OWORD *)(v2014 + 7768) = v2204;
                                *(_OWORD *)(v2014 + 7784) = v969;
                                *(_QWORD *)(v2014 + 7848) = v2209;
                                *(_OWORD *)(v2014 + 7832) = v2208;
                                v970 = v2206;
                                *(_OWORD *)(v2014 + 7816) = v2207;
                                *(_OWORD *)(v2014 + 7800) = v970;
                                v971 = v2210;
                                v972 = v2211;
                                v973 = v2212;
                                *(_OWORD *)(v2014 + 7904) = v2213;
                                *(_OWORD *)(v2014 + 7888) = v973;
                                *(_OWORD *)(v2014 + 7872) = v972;
                                *(_OWORD *)(v2014 + 7856) = v971;
                                v974 = v2214;
                                v975 = v2215;
                                v976 = v2216;
                                *(_QWORD *)(v2014 + 7968) = v2217;
                                *(_OWORD *)(v2014 + 7952) = v976;
                                *(_OWORD *)(v2014 + 7936) = v975;
                                *(_OWORD *)(v2014 + 7920) = v974;
                                v977 = v2218;
                                *(_BYTE *)(v2014 + 7984) = v2219;
                                *(_QWORD *)(v2014 + 7976) = v977;
                                *(_OWORD *)(v2014 + 7992) = v2220;
                                v2220 = 0uLL;
                                *(_BYTE *)(v2014 + 8008) = v2221;
                                v978 = v2014 + 8016;
                                *(_QWORD *)&object[16] = v2014 + 8016;
                                v1990.i64[0] = *(_QWORD *)(v2068 + 5704);
                                if ((char *)v1990.i64[0] != categoryc)
                                {
                                  v979 = 0;
                                  v980 = &v1921[8016 * v1918];
                                  v981 = v980 - 8016;
                                  v1988.i64[0] = (uint64_t)(v980 - 7952);
                                  v982 = v980 - 24048;
                                  __szd = v2014 - 8016;
                                  v1986.i64[0] = v2014 - 4208;
                                  v983 = v2014 - 7952;
                                  v1927 = v2014 - 7984;
                                  v984 = categoryc;
                                  do
                                  {
                                    _X22 = &v982[v979];
                                    __asm { PRFM            #0, [X22] }
                                    *(_QWORD *)(__szd + v979) = *(_QWORD *)&v981[v979];
                                    *(_OWORD *)(v2014 - 8008 + v979) = *(_OWORD *)&v982[v979 + 16040];
                                    *(_QWORD *)(v2014 - 7992 + v979) = *(_QWORD *)&v982[v979 + 16056];
                                    v1006 = (_OWORD *)(v1927 + v979);
                                    *(_BYTE *)(v1927 + v979) = 0;
                                    *(_BYTE *)(v983 + v979) = 0;
                                    __asm { PRFM            #0, [X22,#0x40] }
                                    if (*(_BYTE *)(v1988.i64[0] + v979))
                                    {
                                      v1008 = *((_OWORD *)_X22 + 1005);
                                      *v1006 = *((_OWORD *)_X22 + 1004);
                                      v1006[1] = v1008;
                                      *(_BYTE *)(v983 + v979) = 1;
                                    }
                                    _X21 = _X22 + 7680;
                                    *(_OWORD *)(v2014 - 7944 + v979) = *(_OWORD *)(_X22 + 16104);
                                    memcpy((void *)(v2014 - 7928 + v979), _X22 + 16120, 0x708uLL);
                                    memcpy((void *)(v2014 - 6128 + v979), _X22 + 17920, 0x708uLL);
                                    v1010 = v1986.i64[0] + v979;
                                    v1011 = *(_OWORD *)(_X22 + 19720);
                                    v1012 = *(_OWORD *)(_X22 + 19736);
                                    v1013 = *(_OWORD *)(_X22 + 19752);
                                    *(_OWORD *)(v1010 - 72) = *(_OWORD *)(_X22 + 19768);
                                    *(_OWORD *)(v1010 - 88) = v1013;
                                    *(_OWORD *)(v1010 - 104) = v1012;
                                    *(_OWORD *)(v1010 - 120) = v1011;
                                    v1014 = *(_OWORD *)(_X22 + 19784);
                                    v1015 = *(_OWORD *)(_X22 + 19800);
                                    v1016 = *(_OWORD *)(_X22 + 19816);
                                    *(_QWORD *)(v1010 - 8) = *((_QWORD *)_X22 + 2479);
                                    *(_OWORD *)(v1010 - 24) = v1016;
                                    *(_OWORD *)(v1010 - 40) = v1015;
                                    *(_OWORD *)(v1010 - 56) = v1014;
                                    v1017 = *((_QWORD *)_X22 + 2494);
                                    v1018 = *((_OWORD *)_X22 + 1244);
                                    v1019 = *((_OWORD *)_X22 + 1246);
                                    *(_OWORD *)(v1010 + 80) = *((_OWORD *)_X22 + 1245);
                                    *(_OWORD *)(v1010 + 96) = v1019;
                                    *(_OWORD *)(v1010 + 64) = v1018;
                                    *(_QWORD *)(v1010 + 112) = v1017;
                                    v1020 = *((_OWORD *)_X22 + 1240);
                                    v1021 = *((_OWORD *)_X22 + 1241);
                                    v1022 = *((_OWORD *)_X22 + 1243);
                                    *(_OWORD *)(v1010 + 32) = *((_OWORD *)_X22 + 1242);
                                    *(_OWORD *)(v1010 + 48) = v1022;
                                    *(_OWORD *)v1010 = v1020;
                                    *(_OWORD *)(v1010 + 16) = v1021;
                                    v1023 = v2014 + v979;
                                    *(_BYTE *)(v1023 - 4088) = 0;
                                    *(_BYTE *)(v1023 - 336) = 0;
                                    v1024 = &v984[v979];
                                    __asm { PRFM            #0, [X21] }
                                    if (v984[v979 - 336])
                                    {
                                      _X21 = _X22 + 5848;
                                      memcpy((void *)(v1023 - 4088), &v982[v979 + 19960], 0x708uLL);
                                      v1027 = v1023 - 2288;
                                      v1028 = *(_OWORD *)&v982[v979 + 21776];
                                      v1029 = *(_OWORD *)&v982[v979 + 21808];
                                      v1030 = *(_OWORD *)&v982[v979 + 21760];
                                      *(_OWORD *)(v1027 + 32) = *(_OWORD *)&v982[v979 + 21792];
                                      *(_OWORD *)(v1027 + 48) = v1029;
                                      *(_OWORD *)v1027 = v1030;
                                      *(_OWORD *)(v1027 + 16) = v1028;
                                      v1031 = *(_OWORD *)&v982[v979 + 21840];
                                      v1032 = *(_OWORD *)&v982[v979 + 21856];
                                      v1033 = *(_OWORD *)&v982[v979 + 21824];
                                      *(_QWORD *)(v1027 + 112) = *(_QWORD *)&v982[v979 + 21872];
                                      *(_OWORD *)(v1027 + 80) = v1031;
                                      *(_OWORD *)(v1027 + 96) = v1032;
                                      *(_OWORD *)(v1027 + 64) = v1033;
                                      __asm { PRFM            #0, [X21] }
                                      *(_BYTE *)(v1023 - 2168) = *(v1024 - 2168);
                                      *(_BYTE *)(v1023 - 2152) = *(v1024 - 2152);
                                      *(_QWORD *)(v1023 - 2160) = &off_24CA00398;
                                      v984 = categoryc;
                                      memcpy((void *)(v1023 - 2144), &v982[v979 + 21904], 0x708uLL);
                                      *(_QWORD *)(__szd + v979 + 7672) = *(_QWORD *)&v981[v979 + 7672];
                                      *(_BYTE *)(v1023 - 336) = 1;
                                    }
                                    _X8 = _X22 + 7992;
                                    *(_WORD *)(v1023 - 328) = *((_WORD *)v1024 - 164);
                                    v986 = v1023 - 320;
                                    v987 = *(_OWORD *)&v982[v979 + 23728];
                                    v988 = *(_OWORD *)&v982[v979 + 23744];
                                    *(_QWORD *)(v986 + 32) = *(_QWORD *)&v982[v979 + 23760];
                                    *(_OWORD *)v986 = v987;
                                    *(_OWORD *)(v986 + 16) = v988;
                                    v989 = (_OWORD *)(v1023 - 280);
                                    v991 = *(_OWORD *)&v982[v979 + 23848];
                                    v990 = *(_OWORD *)&v982[v979 + 23864];
                                    v992 = *(_QWORD *)&v982[v979 + 23880];
                                    *(_OWORD *)(v1023 - 216) = *(_OWORD *)&v982[v979 + 23832];
                                    *(_QWORD *)(v1023 - 168) = v992;
                                    *(_OWORD *)(v1023 - 184) = v990;
                                    *(_OWORD *)(v1023 - 200) = v991;
                                    v993 = *(_OWORD *)&v982[v979 + 23768];
                                    v994 = *(_OWORD *)&v982[v979 + 23784];
                                    v995 = *(_OWORD *)&v982[v979 + 23800];
                                    *(_OWORD *)(v1023 - 232) = *(_OWORD *)&v982[v979 + 23816];
                                    *(_OWORD *)(v1023 - 248) = v995;
                                    *v989 = v993;
                                    v989[1] = v994;
                                    v996 = *(_OWORD *)&v982[v979 + 23968];
                                    v997 = *(_OWORD *)&v982[v979 + 23984];
                                    v998 = *(_OWORD *)&v982[v979 + 23952];
                                    *(_QWORD *)(v1023 - 48) = *(_QWORD *)&v982[v979 + 24000];
                                    *(_OWORD *)(v1023 - 80) = v996;
                                    *(_OWORD *)(v1023 - 64) = v997;
                                    *(_OWORD *)(v1023 - 96) = v998;
                                    v999 = *(_OWORD *)&v982[v979 + 23888];
                                    v1000 = *(_OWORD *)&v982[v979 + 23904];
                                    v1001 = *(_OWORD *)&v982[v979 + 23936];
                                    *(_OWORD *)(v1023 - 128) = *(_OWORD *)&v982[v979 + 23920];
                                    *(_OWORD *)(v1023 - 112) = v1001;
                                    *(_OWORD *)(v1023 - 160) = v999;
                                    *(_OWORD *)(v1023 - 144) = v1000;
                                    v1002 = *(_QWORD *)&v982[v979 + 24008];
                                    *(_BYTE *)(v1023 - 32) = v982[v979 + 24016];
                                    *(_QWORD *)(v1023 - 40) = v1002;
                                    __asm { PRFM            #0, [X8] }
                                    *(_OWORD *)(v1023 - 24) = *(_OWORD *)(v1024 - 24);
                                    *((_QWORD *)v1024 - 3) = 0;
                                    *((_QWORD *)v1024 - 2) = 0;
                                    *(_BYTE *)(v1023 - 8) = *(v1024 - 8);
                                    v979 -= 8016;
                                    v983 = v2014 - 7952;
                                  }
                                  while (&v984[v979] != (char *)v1990.i64[0]);
                                  v978 = *(_QWORD *)&object[16];
                                  v2014 += v979;
                                }
                                __sze = *(char **)(v2068 + 5712);
                                if (__sze != categoryc)
                                {
                                  v1035 = 0;
                                  v1036 = &v1921[8016 * v1918];
                                  v1990.i64[0] = (uint64_t)(v1036 + 8008);
                                  v1986.i64[0] = (uint64_t)(v1036 + 5864);
                                  v1985 = v1036 + 5848;
                                  v1988.i64[0] = (uint64_t)(v1036 + 7680);
                                  v1037 = v978 + 7680;
                                  do
                                  {
                                    v1057 = v978 + v1035;
                                    _X19 = &categoryc[v1035];
                                    __asm { PRFM            #0, [X19,#0x3EA0] }
                                    *(_QWORD *)v1057 = *(_QWORD *)&categoryc[v1035];
                                    *(_OWORD *)(v1057 + 8) = *(_OWORD *)&categoryc[v1035 + 8];
                                    *(_QWORD *)(v1057 + 24) = *(_QWORD *)&categoryc[v1035 + 24];
                                    *(_BYTE *)(v978 + v1035 + 32) = 0;
                                    *(_BYTE *)(v1057 + 64) = 0;
                                    __asm { PRFM            #0, [X19,#0x3EE0] }
                                    if (categoryc[v1035 + 64])
                                    {
                                      v1061 = *((_OWORD *)_X19 + 3);
                                      *(_OWORD *)(v978 + v1035 + 32) = *((_OWORD *)_X19 + 2);
                                      *(_OWORD *)(v978 + v1035 + 48) = v1061;
                                      *(_BYTE *)(v1057 + 64) = 1;
                                    }
                                    _X22 = _X19 + 23712;
                                    *(_OWORD *)(v1057 + 72) = *(_OWORD *)(_X19 + 72);
                                    memcpy((void *)(v1057 + 88), _X19 + 88, 0x708uLL);
                                    memcpy((void *)(v1057 + 1888), _X19 + 1888, 0x708uLL);
                                    v1063 = *(_OWORD *)(_X19 + 3688);
                                    v1064 = *(_OWORD *)(_X19 + 3704);
                                    v1065 = *(_OWORD *)(_X19 + 3736);
                                    *(_OWORD *)(v1057 + 3720) = *(_OWORD *)(_X19 + 3720);
                                    *(_OWORD *)(v1057 + 3736) = v1065;
                                    *(_OWORD *)(v1057 + 3688) = v1063;
                                    *(_OWORD *)(v1057 + 3704) = v1064;
                                    v1066 = *(_OWORD *)(_X19 + 3752);
                                    v1067 = *(_OWORD *)(_X19 + 3768);
                                    v1068 = *(_OWORD *)(_X19 + 3784);
                                    *(_QWORD *)(v1057 + 3800) = *((_QWORD *)_X19 + 475);
                                    *(_OWORD *)(v1057 + 3768) = v1067;
                                    *(_OWORD *)(v1057 + 3784) = v1068;
                                    *(_OWORD *)(v1057 + 3752) = v1066;
                                    v1069 = *((_QWORD *)_X19 + 490);
                                    v1070 = *((_OWORD *)_X19 + 242);
                                    v1071 = *((_OWORD *)_X19 + 243);
                                    *(_OWORD *)(v1057 + 3904) = *((_OWORD *)_X19 + 244);
                                    *(_OWORD *)(v1057 + 3888) = v1071;
                                    *(_OWORD *)(v1057 + 3872) = v1070;
                                    *(_QWORD *)(v1057 + 3920) = v1069;
                                    v1072 = *((_OWORD *)_X19 + 238);
                                    v1073 = *((_OWORD *)_X19 + 239);
                                    v1074 = *((_OWORD *)_X19 + 240);
                                    *(_OWORD *)(v1057 + 3856) = *((_OWORD *)_X19 + 241);
                                    *(_OWORD *)(v1057 + 3840) = v1074;
                                    *(_OWORD *)(v1057 + 3824) = v1073;
                                    *(_OWORD *)(v1057 + 3808) = v1072;
                                    *(_BYTE *)(v1057 + 3928) = 0;
                                    *(_BYTE *)(v1037 + v1035) = 0;
                                    __asm { PRFM            #0, [X22] }
                                    if (*(_BYTE *)(v1988.i64[0] + v1035))
                                    {
                                      _X22 = _X19 + 21880;
                                      memcpy((void *)(v1057 + 3928), &categoryc[v1035 + 3928], 0x708uLL);
                                      v1077 = v978 + v1035;
                                      v1078 = *(_OWORD *)&categoryc[v1035 + 5744];
                                      v1079 = *(_OWORD *)&categoryc[v1035 + 5760];
                                      v1080 = *(_OWORD *)&categoryc[v1035 + 5776];
                                      *(_OWORD *)(v1077 + 5728) = *(_OWORD *)&categoryc[v1035 + 5728];
                                      *(_OWORD *)(v1077 + 5776) = v1080;
                                      *(_OWORD *)(v1077 + 5760) = v1079;
                                      *(_OWORD *)(v1077 + 5744) = v1078;
                                      v1081 = *(_OWORD *)&categoryc[v1035 + 5808];
                                      v1082 = *(_OWORD *)&categoryc[v1035 + 5824];
                                      v1083 = *(_QWORD *)&categoryc[v1035 + 5840];
                                      *(_OWORD *)(v1077 + 5792) = *(_OWORD *)&categoryc[v1035 + 5792];
                                      *(_QWORD *)(v1077 + 5840) = v1083;
                                      *(_OWORD *)(v1077 + 5824) = v1082;
                                      *(_OWORD *)(v1077 + 5808) = v1081;
                                      __asm { PRFM            #0, [X22] }
                                      *(_BYTE *)(v978 + 5848 + v1035) = v1985[v1035 / 8];
                                      *(_BYTE *)(v978 + 5864 + v1035) = *(_BYTE *)(v1986.i64[0] + v1035);
                                      *(_QWORD *)(v1077 + 5856) = &off_24CA00398;
                                      memcpy((void *)(v978 + v1035 + 5872), &categoryc[v1035 + 5872], 0x708uLL);
                                      *(_QWORD *)(v1077 + 7672) = *(_QWORD *)&categoryc[v1035 + 7672];
                                      *(_BYTE *)(v1037 + v1035) = 1;
                                    }
                                    _X8 = _X19 + 24024;
                                    v1039 = v978 + v1035;
                                    *(_WORD *)(v1039 + 7688) = *(_WORD *)&categoryc[v1035 + 7688];
                                    v1040 = *(_OWORD *)&categoryc[v1035 + 7696];
                                    v1041 = *(_OWORD *)&categoryc[v1035 + 7712];
                                    *(_QWORD *)(v1039 + 7728) = *(_QWORD *)&categoryc[v1035 + 7728];
                                    *(_OWORD *)(v1039 + 7712) = v1041;
                                    *(_OWORD *)(v1039 + 7696) = v1040;
                                    v1042 = (_OWORD *)(v978 + v1035 + 7736);
                                    v1044 = *(_OWORD *)&categoryc[v1035 + 7816];
                                    v1043 = *(_OWORD *)&categoryc[v1035 + 7832];
                                    v1045 = *(_OWORD *)&categoryc[v1035 + 7800];
                                    *(_QWORD *)(v1039 + 7848) = *(_QWORD *)&categoryc[v1035 + 7848];
                                    v1042[5] = v1044;
                                    v1042[6] = v1043;
                                    v1042[4] = v1045;
                                    v1046 = *(_OWORD *)&categoryc[v1035 + 7736];
                                    v1047 = *(_OWORD *)&categoryc[v1035 + 7752];
                                    v1048 = *(_OWORD *)&categoryc[v1035 + 7784];
                                    v1042[2] = *(_OWORD *)&categoryc[v1035 + 7768];
                                    v1042[3] = v1048;
                                    *v1042 = v1046;
                                    v1042[1] = v1047;
                                    v1049 = *(_OWORD *)&categoryc[v1035 + 7936];
                                    v1050 = *(_OWORD *)&categoryc[v1035 + 7952];
                                    v1051 = *(_QWORD *)&categoryc[v1035 + 7968];
                                    *(_OWORD *)(v1039 + 7920) = *(_OWORD *)&categoryc[v1035 + 7920];
                                    *(_QWORD *)(v1039 + 7968) = v1051;
                                    *(_OWORD *)(v1039 + 7952) = v1050;
                                    *(_OWORD *)(v1039 + 7936) = v1049;
                                    v1052 = *(_OWORD *)&categoryc[v1035 + 7856];
                                    v1053 = *(_OWORD *)&categoryc[v1035 + 7872];
                                    v1054 = *(_OWORD *)&categoryc[v1035 + 7888];
                                    *(_OWORD *)(v1039 + 7904) = *(_OWORD *)&categoryc[v1035 + 7904];
                                    *(_OWORD *)(v1039 + 7888) = v1054;
                                    *(_OWORD *)(v1039 + 7872) = v1053;
                                    *(_OWORD *)(v1039 + 7856) = v1052;
                                    v1055 = *(_QWORD *)&categoryc[v1035 + 7976];
                                    *(_BYTE *)(v978 + v1035 + 7984) = categoryc[v1035 + 7984];
                                    *(_QWORD *)(v1039 + 7976) = v1055;
                                    __asm { PRFM            #0, [X8] }
                                    *(_QWORD *)(v1039 + 7992) = *(_QWORD *)&categoryc[v1035 + 7992];
                                    *(_QWORD *)(v1039 + 8000) = *(_QWORD *)&categoryc[v1035 + 8000];
                                    *(_OWORD *)&categoryc[v1035 + 7992] = 0u;
                                    *(_BYTE *)(v978 + 8008 + v1035) = *(_BYTE *)(v1990.i64[0] + v1035);
                                    v1035 += 8016;
                                  }
                                  while (&categoryc[v1035] != __sze);
                                  categoryc = *(char **)(v2068 + 5712);
                                  v978 += v1035;
                                }
                                v1085 = *(char **)(v2068 + 5704);
                                *(_QWORD *)(v2068 + 5704) = v2014;
                                *(_QWORD *)(v2068 + 5712) = v978;
                                v1086 = *(_QWORD *)(v2068 + 5720);
                                *(_QWORD *)(v2068 + 5720) = *(_QWORD *)&object[24];
                                *(_QWORD *)&object[24] = v1086;
                                *(_QWORD *)&object[8] = v1085;
                                *(_QWORD *)object = v1085;
                                if (categoryc != v1085)
                                {
                                  v1087 = categoryc;
                                  do
                                  {
                                    *(_QWORD *)&object[16] = v1087 - 8016;
                                    v1088 = (std::__shared_weak_count *)*((_QWORD *)v1087 - 2);
                                    if (v1088)
                                    {
                                      v1089 = (unint64_t *)&v1088->__shared_owners_;
                                      do
                                        v1090 = __ldaxr(v1089);
                                      while (__stlxr(v1090 - 1, v1089));
                                      if (!v1090)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v1088->__on_zero_shared)(v1088);
                                        std::__shared_weak_count::__release_weak(v1088);
                                      }
                                    }
                                    v1087 = *(char **)&object[16];
                                  }
                                  while (*(char **)&object[16] != v1085);
                                  categoryc = *(char **)object;
                                }
                                if (categoryc)
                                  operator delete(categoryc);
                              }
                              else
                              {
                                v846 = *(_QWORD *)(v2068 + 5712);
                                v1975 = (char *)v846;
                                if (&v843[8016 * v1918] == v842)
                                {
                                  *(_QWORD *)v842 = __szc;
                                  v903 = &v843[8016 * v1918];
                                  *(_OWORD *)(v903 + 8) = *(_OWORD *)&v2183[8];
                                  v904 = *(_QWORD *)&v2183[24];
                                  v903[32] = 0;
                                  v905 = v903 + 32;
                                  *(v905 - 1) = v904;
                                  *((_BYTE *)v905 + 32) = 0;
                                  if (v2183[64])
                                  {
                                    v906 = *(_OWORD *)&v2183[48];
                                    *(_OWORD *)v905 = *(_OWORD *)&v2183[32];
                                    *((_OWORD *)v905 + 1) = v906;
                                    *((_BYTE *)v905 + 32) = 1;
                                  }
                                  v907 = &v843[8016 * v1918];
                                  *(_OWORD *)(v907 + 72) = *(_OWORD *)&v2183[72];
                                  memcpy(v907 + 88, &v2183[88], 0x708uLL);
                                  memcpy(v907 + 1888, &v2183[1888], 0x708uLL);
                                  v908 = *(_OWORD *)&v2183[3688];
                                  v909 = *(_OWORD *)&v2183[3704];
                                  v910 = *(_OWORD *)&v2183[3720];
                                  *(_OWORD *)(v907 + 3736) = *(_OWORD *)&v2183[3736];
                                  *(_OWORD *)(v907 + 3720) = v910;
                                  *(_OWORD *)(v907 + 3704) = v909;
                                  *(_OWORD *)(v907 + 3688) = v908;
                                  v911 = *(_OWORD *)&v2183[3752];
                                  v912 = *(_OWORD *)&v2183[3768];
                                  v913 = *(_OWORD *)&v2183[3784];
                                  *((_QWORD *)v907 + 475) = *(_QWORD *)&v2183[3800];
                                  *(_OWORD *)(v907 + 3784) = v913;
                                  *(_OWORD *)(v907 + 3768) = v912;
                                  *(_OWORD *)(v907 + 3752) = v911;
                                  v914 = *(_QWORD *)&v2183[3920];
                                  v915 = *(_OWORD *)&v2183[3872];
                                  v916 = *(_OWORD *)&v2183[3888];
                                  *((_OWORD *)v907 + 244) = *(_OWORD *)&v2183[3904];
                                  *((_OWORD *)v907 + 243) = v916;
                                  *((_OWORD *)v907 + 242) = v915;
                                  *((_QWORD *)v907 + 490) = v914;
                                  v917 = *(_OWORD *)&v2183[3808];
                                  v918 = *(_OWORD *)&v2183[3824];
                                  v919 = *(_OWORD *)&v2183[3840];
                                  *((_OWORD *)v907 + 241) = *(_OWORD *)&v2183[3856];
                                  *((_OWORD *)v907 + 240) = v919;
                                  *((_OWORD *)v907 + 239) = v918;
                                  *((_OWORD *)v907 + 238) = v917;
                                  v907[3928] = 0;
                                  v907[7680] = 0;
                                  if (v2197)
                                  {
                                    memcpy(v907 + 3928, &v2183[3928], 0x708uLL);
                                    v920 = &v1921[8016 * v1918];
                                    v921 = v2184;
                                    v922 = v2185;
                                    v923 = v2186;
                                    *((_OWORD *)v920 + 361) = v2187;
                                    *((_OWORD *)v920 + 360) = v923;
                                    *((_OWORD *)v920 + 359) = v922;
                                    *((_OWORD *)v920 + 358) = v921;
                                    v924 = v2188;
                                    v925 = v2189;
                                    v926 = v2190;
                                    *((_QWORD *)v920 + 730) = v2191;
                                    *((_OWORD *)v920 + 364) = v926;
                                    *((_OWORD *)v920 + 363) = v925;
                                    *((_OWORD *)v920 + 362) = v924;
                                    v920[5848] = v2192;
                                    v920[5864] = v2194;
                                    *((_QWORD *)v920 + 732) = &off_24CA00398;
                                    memcpy(v920 + 5872, v2195, 0x708uLL);
                                    *((_QWORD *)v920 + 959) = v2196;
                                    v907[7680] = 1;
                                  }
                                  v927 = &v1921[8016 * v1918];
                                  *((_WORD *)v927 + 3844) = v2198;
                                  v928 = v2199;
                                  v929 = v2200;
                                  *((_QWORD *)v927 + 966) = v2201;
                                  *((_OWORD *)v927 + 482) = v929;
                                  *((_OWORD *)v927 + 481) = v928;
                                  v931 = v2207;
                                  v930 = v2208;
                                  v932 = v2209;
                                  *(_OWORD *)(v927 + 7800) = v2206;
                                  *((_QWORD *)v927 + 981) = v932;
                                  *(_OWORD *)(v927 + 7832) = v930;
                                  *(_OWORD *)(v927 + 7816) = v931;
                                  v933 = v2202;
                                  v934 = v2203;
                                  v935 = v2204;
                                  *(_OWORD *)(v927 + 7784) = v2205;
                                  *(_OWORD *)(v927 + 7768) = v935;
                                  *(_OWORD *)(v927 + 7752) = v934;
                                  *(_OWORD *)(v927 + 7736) = v933;
                                  v937 = v2215;
                                  v936 = v2216;
                                  v938 = v2217;
                                  *((_OWORD *)v927 + 495) = v2214;
                                  *((_QWORD *)v927 + 996) = v938;
                                  *((_OWORD *)v927 + 497) = v936;
                                  *((_OWORD *)v927 + 496) = v937;
                                  v939 = v2210;
                                  v940 = v2211;
                                  v941 = v2212;
                                  *((_OWORD *)v927 + 494) = v2213;
                                  *((_OWORD *)v927 + 493) = v941;
                                  *((_OWORD *)v927 + 492) = v940;
                                  *((_OWORD *)v927 + 491) = v939;
                                  v942 = v2218;
                                  v927[7984] = v2219;
                                  *((_QWORD *)v927 + 997) = v942;
                                  *(_OWORD *)(v927 + 7992) = v2220;
                                  v2220 = 0uLL;
                                  v927[8008] = v2221;
                                  *(_QWORD *)(v2068 + 5712) = v846 + 8016;
                                }
                                else
                                {
                                  v2256 = v2068 + 5720;
                                  *(_OWORD *)&object[8] = *(_OWORD *)v2150;
                                  *(_QWORD *)object = __szc;
                                  *(_QWORD *)&object[24] = *(_QWORD *)v2151;
                                  object[32] = 0;
                                  object[64] = 0;
                                  if (v2151[40])
                                  {
                                    *(_OWORD *)&object[32] = *(_OWORD *)&v2183[32];
                                    *(_OWORD *)&object[48] = *(_OWORD *)&v2183[48];
                                    object[64] = 1;
                                  }
                                  *(_OWORD *)&object[72] = *(_OWORD *)&v2151[48];
                                  memcpy(&object[88], &v2151[64], 0x708uLL);
                                  memcpy(v2223, v2152, 0x708uLL);
                                  *(_OWORD *)((char *)&v2223[116] + 8) = *(_OWORD *)((char *)&v2152[116] + 8);
                                  *(_OWORD *)((char *)&v2223[117] + 8) = *(_OWORD *)((char *)&v2152[117] + 8);
                                  *(_OWORD *)((char *)&v2223[118] + 8) = *(_OWORD *)((char *)&v2152[118] + 8);
                                  *((_QWORD *)&v2223[119] + 1) = *((_QWORD *)&v2152[119] + 1);
                                  *(_OWORD *)((char *)&v2223[112] + 8) = *(_OWORD *)((char *)&v2152[112] + 8);
                                  *(_OWORD *)((char *)&v2223[113] + 8) = *(_OWORD *)((char *)&v2152[113] + 8);
                                  *(_OWORD *)((char *)&v2223[114] + 8) = *(_OWORD *)((char *)&v2152[114] + 8);
                                  *(_OWORD *)((char *)&v2223[115] + 8) = *(_OWORD *)((char *)&v2152[115] + 8);
                                  v2223[124] = v2152[124];
                                  v2223[125] = v2152[125];
                                  v2223[126] = v2152[126];
                                  *(_QWORD *)&v2223[127] = *(_QWORD *)&v2152[127];
                                  v2223[120] = v2152[120];
                                  v2223[121] = v2152[121];
                                  v2223[122] = v2152[122];
                                  v2223[123] = v2152[123];
                                  BYTE8(v2223[127]) = 0;
                                  v2230 = 0;
                                  if (v2158)
                                  {
                                    memcpy((char *)&v2223[127] + 8, &v2183[3928], 0x708uLL);
                                    v2223[244] = v2188;
                                    v2223[245] = v2189;
                                    v2223[246] = v2190;
                                    v2224 = v2191;
                                    v2223[240] = v2184;
                                    v2223[241] = v2185;
                                    v2223[242] = v2186;
                                    v2223[243] = v2187;
                                    v2225 = v1990.i8[0];
                                    v2227 = v1988.i8[0];
                                    v2226 = &off_24CA00398;
                                    memcpy(v2228, v2195, sizeof(v2228));
                                    v2229 = v1986.i64[0];
                                    v2230 = 1;
                                  }
                                  v2231 = v2159;
                                  v2232 = v2160;
                                  v2233 = v2161;
                                  v2234 = v2162;
                                  v2239 = v2167;
                                  v2240 = v2168;
                                  v2241 = v2169;
                                  v2242 = v2170;
                                  v2235 = v2163;
                                  v2236 = v2164;
                                  v2237 = v2165;
                                  v2238 = v2166;
                                  v2245 = v2173;
                                  v2246 = v2174;
                                  v2243 = v2171;
                                  v2244 = v2172;
                                  v2250 = v2178;
                                  v2248 = v2176;
                                  v2249 = v2177;
                                  v2247 = v2175;
                                  v2252 = v2180;
                                  v2251 = v2179;
                                  v2253 = v840;
                                  v2254 = v841;
                                  v2220 = 0uLL;
                                  v847 = v846 - 8016;
                                  v2255 = v2182;
                                  if (v846 >= 0x1F50)
                                  {
                                    v848 = 0;
                                    v849 = &v1921[8016 * v1918
                                                + 16 * ((uint64_t)(v846 - (_QWORD)(categoryc + 8016)) >> 4)];
                                    v850 = v849 + 8008;
                                    v1988.i64[0] = (uint64_t)(v849 + 5864);
                                    v1986.i64[0] = (uint64_t)(v849 + 5848);
                                    v2013 = v849 + 7680;
                                    v1990.i64[0] = v846 + 8008;
                                    v851 = v846 + 7680;
                                    do
                                    {
                                      v871 = &v1975[v848];
                                      _X22 = v847 + v848;
                                      __asm { PRFM            #0, [X22,#0x3EA0] }
                                      *(_QWORD *)v871 = *(_QWORD *)(v847 + v848);
                                      *(_OWORD *)(v871 + 8) = *(_OWORD *)(v847 + v848 + 8);
                                      *((_QWORD *)v871 + 3) = *(_QWORD *)(v847 + v848 + 24);
                                      v1975[v848 + 32] = 0;
                                      v871[64] = 0;
                                      __asm { PRFM            #0, [X22,#0x3EE0] }
                                      if (*(_BYTE *)(v847 + v848 + 64))
                                      {
                                        v875 = *(_OWORD *)(_X22 + 48);
                                        *(_OWORD *)&v1975[v848 + 32] = *(_OWORD *)(_X22 + 32);
                                        *(_OWORD *)&v1975[v848 + 48] = v875;
                                        v871[64] = 1;
                                      }
                                      _X27 = _X22 + 23712;
                                      *(_OWORD *)(v871 + 72) = *(_OWORD *)(_X22 + 72);
                                      memcpy(v871 + 88, (const void *)(_X22 + 88), 0x708uLL);
                                      memcpy(v871 + 1888, (const void *)(_X22 + 1888), 0x708uLL);
                                      v877 = *(_OWORD *)(_X22 + 3688);
                                      v878 = *(_OWORD *)(_X22 + 3704);
                                      v879 = *(_OWORD *)(_X22 + 3736);
                                      *(_OWORD *)(v871 + 3720) = *(_OWORD *)(_X22 + 3720);
                                      *(_OWORD *)(v871 + 3736) = v879;
                                      *(_OWORD *)(v871 + 3688) = v877;
                                      *(_OWORD *)(v871 + 3704) = v878;
                                      v880 = *(_OWORD *)(_X22 + 3752);
                                      v881 = *(_OWORD *)(_X22 + 3768);
                                      v882 = *(_OWORD *)(_X22 + 3784);
                                      *((_QWORD *)v871 + 475) = *(_QWORD *)(_X22 + 3800);
                                      *(_OWORD *)(v871 + 3768) = v881;
                                      *(_OWORD *)(v871 + 3784) = v882;
                                      *(_OWORD *)(v871 + 3752) = v880;
                                      v883 = *(_QWORD *)(_X22 + 3920);
                                      v884 = *(_OWORD *)(_X22 + 3872);
                                      v885 = *(_OWORD *)(_X22 + 3888);
                                      *((_OWORD *)v871 + 244) = *(_OWORD *)(_X22 + 3904);
                                      *((_OWORD *)v871 + 243) = v885;
                                      *((_OWORD *)v871 + 242) = v884;
                                      *((_QWORD *)v871 + 490) = v883;
                                      v886 = *(_OWORD *)(_X22 + 3808);
                                      v887 = *(_OWORD *)(_X22 + 3824);
                                      v888 = *(_OWORD *)(_X22 + 3840);
                                      *((_OWORD *)v871 + 241) = *(_OWORD *)(_X22 + 3856);
                                      *((_OWORD *)v871 + 240) = v888;
                                      *((_OWORD *)v871 + 239) = v887;
                                      *((_OWORD *)v871 + 238) = v886;
                                      v871[3928] = 0;
                                      *(_BYTE *)(v851 + v848) = 0;
                                      __asm { PRFM            #0, [X27] }
                                      if (LOBYTE(v2013[v848 / 8]))
                                      {
                                        _X27 = _X22 + 21880;
                                        memcpy(v871 + 3928, (const void *)(v847 + v848 + 3928), 0x708uLL);
                                        v891 = &v1975[v848];
                                        v892 = *(_OWORD *)(v847 + v848 + 5744);
                                        v893 = *(_OWORD *)(v847 + v848 + 5760);
                                        v894 = *(_OWORD *)(v847 + v848 + 5776);
                                        *((_OWORD *)v891 + 358) = *(_OWORD *)(v847 + v848 + 5728);
                                        *((_OWORD *)v891 + 361) = v894;
                                        *((_OWORD *)v891 + 360) = v893;
                                        *((_OWORD *)v891 + 359) = v892;
                                        v895 = *(_OWORD *)(v847 + v848 + 5808);
                                        v896 = *(_OWORD *)(v847 + v848 + 5824);
                                        v897 = *(_QWORD *)(v847 + v848 + 5840);
                                        *((_OWORD *)v891 + 362) = *(_OWORD *)(v847 + v848 + 5792);
                                        *((_QWORD *)v891 + 730) = v897;
                                        *((_OWORD *)v891 + 364) = v896;
                                        *((_OWORD *)v891 + 363) = v895;
                                        __asm { PRFM            #0, [X27] }
                                        v1975[v848 + 5848] = *(_BYTE *)(v1986.i64[0] + v848);
                                        v1975[v848 + 5864] = *(_BYTE *)(v1988.i64[0] + v848);
                                        *((_QWORD *)v891 + 732) = &off_24CA00398;
                                        memcpy(&v1975[v848 + 5872], (const void *)(v847 + v848 + 5872), 0x708uLL);
                                        *((_QWORD *)v891 + 959) = *(_QWORD *)(v847 + v848 + 7672);
                                        *(_BYTE *)(v851 + v848) = 1;
                                      }
                                      _X8 = _X22 + 24024;
                                      v853 = &v1975[v848];
                                      *((_WORD *)v853 + 3844) = *(_WORD *)(v847 + v848 + 7688);
                                      v854 = *(_OWORD *)(v847 + v848 + 7696);
                                      v855 = *(_OWORD *)(v847 + v848 + 7712);
                                      *((_QWORD *)v853 + 966) = *(_QWORD *)(v847 + v848 + 7728);
                                      *((_OWORD *)v853 + 482) = v855;
                                      *((_OWORD *)v853 + 481) = v854;
                                      v856 = &v1975[v848 + 7736];
                                      v858 = *(_OWORD *)(v847 + v848 + 7816);
                                      v857 = *(_OWORD *)(v847 + v848 + 7832);
                                      v859 = *(_OWORD *)(v847 + v848 + 7800);
                                      *((_QWORD *)v853 + 981) = *(_QWORD *)(v847 + v848 + 7848);
                                      *((_OWORD *)v856 + 5) = v858;
                                      *((_OWORD *)v856 + 6) = v857;
                                      *((_OWORD *)v856 + 4) = v859;
                                      v860 = *(_OWORD *)(v847 + v848 + 7736);
                                      v861 = *(_OWORD *)(v847 + v848 + 7752);
                                      v862 = *(_OWORD *)(v847 + v848 + 7784);
                                      *((_OWORD *)v856 + 2) = *(_OWORD *)(v847 + v848 + 7768);
                                      *((_OWORD *)v856 + 3) = v862;
                                      *(_OWORD *)v856 = v860;
                                      *((_OWORD *)v856 + 1) = v861;
                                      v863 = *(_OWORD *)(v847 + v848 + 7936);
                                      v864 = *(_OWORD *)(v847 + v848 + 7952);
                                      v865 = *(_QWORD *)(v847 + v848 + 7968);
                                      *((_OWORD *)v853 + 495) = *(_OWORD *)(v847 + v848 + 7920);
                                      *((_QWORD *)v853 + 996) = v865;
                                      *((_OWORD *)v853 + 497) = v864;
                                      *((_OWORD *)v853 + 496) = v863;
                                      v866 = *(_OWORD *)(v847 + v848 + 7856);
                                      v867 = *(_OWORD *)(v847 + v848 + 7872);
                                      v868 = *(_OWORD *)(v847 + v848 + 7888);
                                      *((_OWORD *)v853 + 494) = *(_OWORD *)(v847 + v848 + 7904);
                                      *((_OWORD *)v853 + 493) = v868;
                                      *((_OWORD *)v853 + 492) = v867;
                                      *((_OWORD *)v853 + 491) = v866;
                                      v869 = *(_QWORD *)(v847 + v848 + 7976);
                                      v1975[v848 + 7984] = *(_BYTE *)(v847 + v848 + 7984);
                                      *((_QWORD *)v853 + 997) = v869;
                                      __asm { PRFM            #0, [X8] }
                                      *((_QWORD *)v853 + 999) = *(_QWORD *)(v847 + v848 + 7992);
                                      *((_QWORD *)v853 + 1000) = *(_QWORD *)(v847 + v848 + 8000);
                                      *(_OWORD *)(v847 + v848 + 7992) = 0u;
                                      *(_BYTE *)(v1990.i64[0] + v848) = v850[v848 / 8];
                                      v848 += 8016;
                                    }
                                    while (v847 + v848 < (unint64_t)v1975);
                                    v846 = (unint64_t)&v1975[v848];
                                  }
                                  *(_QWORD *)(v2068 + 5712) = v846;
                                  if (v1975 != categoryc + 8016)
                                  {
                                    v944 = 0;
                                    v945 = &v1921[8016 * v1918 + 16 * ((v1975 - (categoryc + 8016)) >> 4)];
                                    v946 = v945 - 8008;
                                    v947 = v945 - 8016;
                                    do
                                    {
                                      *(_QWORD *)&v1975[v944 - 8016] = *(_QWORD *)&v947[v944];
                                      sub_20F5B67C0((uint64_t)&v1975[v944 - 8008], (uint64_t)&v946[v944]);
                                      v1975[v944 - 8] = *(_BYTE *)(v847 + v944 - 8);
                                      v944 -= 8016;
                                    }
                                    while (-16 * ((v1975 - (categoryc + 8016)) >> 4) != v944);
                                  }
                                  *(_QWORD *)categoryc = __szc;
                                  v948 = &v1921[8016 * v1918];
                                  sub_20F5B67C0((uint64_t)(v948 + 8), (uint64_t)&object[8]);
                                  v948[8008] = v2255;
                                  v949 = v2254;
                                  if (v2254)
                                  {
                                    v950 = (unint64_t *)&v2254->__shared_owners_;
                                    do
                                      v951 = __ldaxr(v950);
                                    while (__stlxr(v951 - 1, v950));
                                    if (!v951)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
                                      std::__shared_weak_count::__release_weak(v949);
                                    }
                                  }
                                }
                              }
                              v841 = (std::__shared_weak_count *)*((_QWORD *)&v2220 + 1);
                            }
                            if (v841)
                            {
                              v1091 = (unint64_t *)&v841->__shared_owners_;
                              do
                                v1092 = __ldaxr(v1091);
                              while (__stlxr(v1092 - 1, v1091));
                              if (!v1092)
                              {
                                ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
                                std::__shared_weak_count::__release_weak(v841);
                              }
                            }
                            v2019[2] = 0;
                            *v2019 = 0;
                            *(int64x2_t *)(v2068 + 5840) = vaddq_s64(*(int64x2_t *)(v2068 + 5840), (int64x2_t)xmmword_2103B4900);
                            v596 = 1;
                          }
                          else
                          {
                            v596 = 0;
                            --*(_DWORD *)(v614 + 8);
                            --*(_DWORD *)(v623 + 8);
                            v2160 = 0u;
                            --*(_DWORD *)(v629 + 8);
                            --*(_DWORD *)(v635 + 8);
                            v2161 = 0u;
                            --*(_DWORD *)(v839 + 8);
                            v2162 = 0;
                          }
                        }
                        v637 = (std::__shared_weak_count *)*((_QWORD *)&v2181 + 1);
                        if (*((_QWORD *)&v2181 + 1))
                        {
                          v638 = (unint64_t *)(*((_QWORD *)&v2181 + 1) + 8);
                          do
                            v639 = __ldaxr(v638);
                          while (__stlxr(v639 - 1, v638));
                          if (!v639)
                          {
                            ((void (*)(std::__shared_weak_count *, void *))v637->__on_zero_shared)(v637, v581);
                            std::__shared_weak_count::__release_weak(v637);
                          }
                        }
                        v586 = (std::__shared_weak_count *)*((_QWORD *)&v2149[0] + 1);
                        goto LABEL_736;
                      }
                    }
                    v480 = 0;
                  }
                  else
                  {
                    v480 = 0;
                    v479 = 0;
                  }
LABEL_612:
                  v483 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 594, (uint64_t)"curr_state && prev_state", 24, (uint64_t)"[VIOBABase]: Cannot find the state IDs.", 39, (void (*)(void **))sub_21023DDB0);
                  v460 = __szc;
                  if (v483)
                    abort();
                  goto LABEL_613;
                }
              }
              v256 = v257;
              goto LABEL_486;
            }
          }
        }
LABEL_303:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) > 5)
          goto LABEL_390;
        v264 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
        v265 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
        v266 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
        if (((v266 == 0) & ~v265) != 0)
          goto LABEL_390;
        __sza = v264;
        *(_QWORD *)v2183 = v2107;
        *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v2183[24] = 5;
        *(_QWORD *)&v2183[32] = "unknown file";
        *(_DWORD *)&v2183[40] = 556;
        *(_QWORD *)&v2183[48] = "unknown function";
        *(_QWORD *)&v2183[56] = 0;
        *(_QWORD *)&v2183[64] = 0;
        v267 = **(_QWORD **)v2183;
        v268 = (const char *)(**(_QWORD **)v2183 + 16);
        v2010 = v268;
        if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
        {
          v268 = *(const char **)(v267 + 16);
          v269 = *(_QWORD *)(v267 + 24);
          v271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v271 & 1) != 0)
            goto LABEL_309;
        }
        else
        {
          v269 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
          v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v270 & 1) != 0)
            goto LABEL_309;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2150);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
          if (v2151[8] && (v2151[7] & 0x80000000) != 0)
            operator delete(v2150[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_309:
        if (byte_254A4A4F8[23] >= 0)
          v272 = byte_254A4A4F8;
        else
          v272 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v273 = byte_254A4A4F8[23];
        else
          v273 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v272, v268);
        if (v273 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v273 >= 0x17)
        {
          v275 = (v273 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v273 | 7) != 0x17)
            v275 = v273 | 7;
          v276 = v275 + 1;
          v274 = operator new(v275 + 1);
          *(_QWORD *)&object[24] = v276 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v274;
          *(_QWORD *)&object[16] = v273;
LABEL_322:
          memmove(v274, v272, v273);
          goto LABEL_323;
        }
        object[31] = v273;
        v274 = &object[8];
        if (v273)
          goto LABEL_322;
LABEL_323:
        v274[v273] = 0;
        object[32] = 1;
        if (v269 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v269 >= 0x17)
        {
          v279 = (v269 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v269 | 7) != 0x17)
            v279 = v269 | 7;
          v280 = v279 + 1;
          v277 = operator new(v279 + 1);
          *(_QWORD *)&object[56] = v280 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v277;
          *(_QWORD *)&object[48] = v269;
        }
        else
        {
          object[63] = v269;
          v277 = &object[40];
          if (!v269)
          {
            object[40] = 0;
            object[64] = 1;
            v278 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_327;
            goto LABEL_333;
          }
        }
        memmove(v277, v268, v269);
        v277[v269] = 0;
        object[64] = 1;
        v278 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_327:
          if (object[32])
            goto LABEL_334;
          goto LABEL_336;
        }
LABEL_333:
        operator delete(*(void **)&object[40]);
        if (object[32])
        {
LABEL_334:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
        }
LABEL_336:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v266 && *(_QWORD *)(v266 + 24))
        {
          v281 = _os_log_pack_size();
          v282 = (std::__shared_weak_count_vtbl *)operator new(v281, (std::align_val_t)8uLL);
          v283 = (std::__shared_weak_count *)operator new();
          v284 = v283;
          v283->__shared_owners_ = 0;
          v285 = (unint64_t *)&v283->__shared_owners_;
          v283->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v283->__shared_weak_owners_ = 0;
          v283[1].__vftable = v282;
          *(_QWORD *)object = v282;
          *(_QWORD *)&object[8] = v282;
          *(_QWORD *)&object[16] = v283;
          do
            v286 = __ldxr(v285);
          while (__stxr(v286 + 1, v285));
          memset(&object[24], 0, 24);
          do
            v287 = __ldaxr(v285);
          while (__stlxr(v287 - 1, v285));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v284);
          }
          v288 = *(_QWORD *)object;
          v289 = (_DWORD *)_os_log_pack_fill();
          *v289 = 67109120;
          v289[1] = v242;
          v290 = (char *)operator new();
          v291 = *(unsigned __int8 *)(v267 + 39);
          v292 = v2010;
          if ((v291 & 0x80u) != 0)
          {
            v292 = *(const char **)(v267 + 16);
            v291 = *(_QWORD *)(v267 + 24);
          }
          *(_QWORD *)v290 = v288;
          *(_OWORD *)(v290 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v290 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v290 + 5) = v292;
          *((_QWORD *)v290 + 6) = v291;
          v290[56] = 16;
          *(_QWORD *)&v2149[0] = 0;
          v2150[0] = v290;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v266 + 24) + 40))(*(_QWORD *)(v266 + 24), v2150);
          v293 = v2150[0];
          v2150[0] = 0;
          if (v293)
          {
            v294 = (std::__shared_weak_count *)*((_QWORD *)v293 + 4);
            if (v294)
            {
              v295 = (unint64_t *)&v294->__shared_owners_;
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
            v297 = (std::__shared_weak_count *)*((_QWORD *)v293 + 2);
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldaxr(v298);
              while (__stlxr(v299 - 1, v298));
              if (!v299)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
            MEMORY[0x212BC6398](v293, 0x10F0C40B62ED6C6);
            v300 = *(_QWORD *)&v2149[0];
            *(_QWORD *)&v2149[0] = 0;
            if (v300)
            {
              v301 = *(std::__shared_weak_count **)(v300 + 32);
              if (v301)
              {
                v302 = (unint64_t *)&v301->__shared_owners_;
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              v304 = *(std::__shared_weak_count **)(v300 + 16);
              if (v304)
              {
                v305 = (unint64_t *)&v304->__shared_owners_;
                do
                  v306 = __ldaxr(v305);
                while (__stlxr(v306 - 1, v305));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                  std::__shared_weak_count::__release_weak(v304);
                }
              }
              MEMORY[0x212BC6398](v300, 0x10F0C40B62ED6C6);
            }
          }
          v307 = *(std::__shared_weak_count **)&object[32];
          v308 = __sza;
          if (*(_QWORD *)&object[32])
          {
            v309 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v307);
            }
          }
          v311 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v312 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
        }
        else
        {
          os_log_type_enabled(v278, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109120;
          *(_DWORD *)&object[4] = v242;
          v314 = (void *)_os_log_send_and_compose_impl();
          v308 = __sza;
          if (v314)
            free(v314);
        }
        if (v308)
        {
          sub_20E8C003C((uint64_t)v2183, "The requested IMU State (%d) does not exist in the StateSet", v242);
          sub_20E863570((uint64_t)v2183);
        }
        sub_20E863570((uint64_t)v2183);
        v315 = *(std::__shared_weak_count **)&v2183[64];
        if (*(_QWORD *)&v2183[64])
        {
          v316 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
LABEL_390:
        sub_20F4AD5FC(v2107);
        if (**(int **)(*(_QWORD *)&v2107[0] + 56) <= 5)
        {
          v318 = *(unsigned __int8 *)(*(_QWORD *)&v2107[0] + 72);
          v319 = *(_BYTE *)(*(_QWORD *)&v2107[0] + 72) != 0;
          v320 = sub_20E8C31DC(*(uint64_t *)&v2107[0], "OSLogSurrogateAppender", 1, 0);
          if (((v320 == 0) & ~v319) == 0)
          {
            *(_QWORD *)v2183 = v2107;
            *(std::chrono::steady_clock::time_point *)&v2183[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v2183[16] = std::chrono::system_clock::now();
            *(_DWORD *)&v2183[24] = 5;
            *(_QWORD *)&v2183[32] = "unknown file";
            *(_DWORD *)&v2183[40] = 244;
            *(_QWORD *)&v2183[48] = "unknown function";
            *(_QWORD *)&v2183[56] = 0;
            *(_QWORD *)&v2183[64] = 0;
            v321 = **(_QWORD **)v2183;
            v322 = (const char *)(**(_QWORD **)v2183 + 16);
            __szb = v322;
            if (*(char *)(**(_QWORD **)v2183 + 39) < 0)
            {
              v322 = *(const char **)(v321 + 16);
              v323 = *(_QWORD *)(v321 + 24);
              v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v325 & 1) == 0)
              {
LABEL_1078:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2150);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2150);
                  if (v2151[8] && (v2151[7] & 0x80000000) != 0)
                    operator delete(v2150[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v323 = *(unsigned __int8 *)(**(_QWORD **)v2183 + 39);
              v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v324 & 1) == 0)
                goto LABEL_1078;
            }
            if (byte_254A4A4F8[23] >= 0)
              v326 = byte_254A4A4F8;
            else
              v326 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v327 = byte_254A4A4F8[23];
            else
              v327 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v326, v322);
            if (v327 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v327 >= 0x17)
            {
              v329 = (v327 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v327 | 7) != 0x17)
                v329 = v327 | 7;
              v330 = v329 + 1;
              v328 = operator new(v329 + 1);
              *(_QWORD *)&object[24] = v330 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v328;
              *(_QWORD *)&object[16] = v327;
            }
            else
            {
              object[31] = v327;
              v328 = &object[8];
              if (!v327)
              {
LABEL_410:
                v328[v327] = 0;
                object[32] = 1;
                if (v323 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v323 >= 0x17)
                {
                  v333 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v323 | 7) != 0x17)
                    v333 = v323 | 7;
                  v334 = v333 + 1;
                  v331 = operator new(v333 + 1);
                  *(_QWORD *)&object[56] = v334 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v331;
                  *(_QWORD *)&object[48] = v323;
                }
                else
                {
                  object[63] = v323;
                  v331 = &object[40];
                  if (!v323)
                  {
                    object[40] = 0;
                    object[64] = 1;
                    v332 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_414;
LABEL_420:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_421;
                    goto LABEL_423;
                  }
                }
                memmove(v331, v322, v323);
                v331[v323] = 0;
                object[64] = 1;
                v332 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_420;
LABEL_414:
                if (object[32])
                {
LABEL_421:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_423:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v320 && *(_QWORD *)(v320 + 24))
                {
                  v335 = _os_log_pack_size();
                  v336 = (std::__shared_weak_count_vtbl *)operator new(v335, (std::align_val_t)8uLL);
                  v337 = (std::__shared_weak_count *)operator new();
                  v338 = v337;
                  v337->__shared_owners_ = 0;
                  v339 = (unint64_t *)&v337->__shared_owners_;
                  v337->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v337->__shared_weak_owners_ = 0;
                  v337[1].__vftable = v336;
                  *(_QWORD *)object = v336;
                  *(_QWORD *)&object[8] = v336;
                  *(_QWORD *)&object[16] = v337;
                  do
                    v340 = __ldxr(v339);
                  while (__stxr(v340 + 1, v339));
                  memset(&object[24], 0, 24);
                  do
                    v341 = __ldaxr(v339);
                  while (__stlxr(v341 - 1, v339));
                  if (!v341)
                  {
                    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                    std::__shared_weak_count::__release_weak(v338);
                  }
                  v342 = *(_QWORD *)object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v343 = (char *)operator new();
                  v344 = *(unsigned __int8 *)(v321 + 39);
                  v345 = __szb;
                  if ((v344 & 0x80u) != 0)
                  {
                    v345 = *(const char **)(v321 + 16);
                    v344 = *(_QWORD *)(v321 + 24);
                  }
                  *(_QWORD *)v343 = v342;
                  *(_OWORD *)(v343 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v343 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v343 + 5) = v345;
                  *((_QWORD *)v343 + 6) = v344;
                  v343[56] = 16;
                  *(_QWORD *)&v2149[0] = 0;
                  v2150[0] = v343;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v320 + 24) + 40))(*(_QWORD *)(v320 + 24), v2150);
                  v346 = v2150[0];
                  v2150[0] = 0;
                  if (v346)
                  {
                    v347 = (std::__shared_weak_count *)*((_QWORD *)v346 + 4);
                    if (v347)
                    {
                      v348 = (unint64_t *)&v347->__shared_owners_;
                      do
                        v349 = __ldaxr(v348);
                      while (__stlxr(v349 - 1, v348));
                      if (!v349)
                      {
                        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                        std::__shared_weak_count::__release_weak(v347);
                      }
                    }
                    v350 = (std::__shared_weak_count *)*((_QWORD *)v346 + 2);
                    if (v350)
                    {
                      v351 = (unint64_t *)&v350->__shared_owners_;
                      do
                        v352 = __ldaxr(v351);
                      while (__stlxr(v352 - 1, v351));
                      if (!v352)
                      {
                        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                        std::__shared_weak_count::__release_weak(v350);
                      }
                    }
                    MEMORY[0x212BC6398](v346, 0x10F0C40B62ED6C6);
                    v353 = *(_QWORD *)&v2149[0];
                    *(_QWORD *)&v2149[0] = 0;
                    if (v353)
                    {
                      v354 = *(std::__shared_weak_count **)(v353 + 32);
                      if (v354)
                      {
                        v355 = (unint64_t *)&v354->__shared_owners_;
                        do
                          v356 = __ldaxr(v355);
                        while (__stlxr(v356 - 1, v355));
                        if (!v356)
                        {
                          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                          std::__shared_weak_count::__release_weak(v354);
                        }
                      }
                      v357 = *(std::__shared_weak_count **)(v353 + 16);
                      if (v357)
                      {
                        v358 = (unint64_t *)&v357->__shared_owners_;
                        do
                          v359 = __ldaxr(v358);
                        while (__stlxr(v359 - 1, v358));
                        if (!v359)
                        {
                          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
                          std::__shared_weak_count::__release_weak(v357);
                        }
                      }
                      MEMORY[0x212BC6398](v353, 0x10F0C40B62ED6C6);
                    }
                  }
                  v360 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v361 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  v363 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v364 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v365 = __ldaxr(v364);
                    while (__stlxr(v365 - 1, v364));
                    if (!v365)
                    {
                      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                      std::__shared_weak_count::__release_weak(v363);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v332, OS_LOG_TYPE_ERROR);
                  *(_WORD *)object = 0;
                  v366 = (void *)_os_log_send_and_compose_impl();
                  if (v366)
                    free(v366);
                }
                if (v318)
                {
                  sub_20E8C003C((uint64_t)v2183, "Unable to add IMU State");
                  sub_20E863570((uint64_t)v2183);
                }
                sub_20E863570((uint64_t)v2183);
                v367 = *(std::__shared_weak_count **)&v2183[64];
                if (*(_QWORD *)&v2183[64])
                {
                  v368 = (unint64_t *)(*(_QWORD *)&v2183[64] + 8);
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                goto LABEL_477;
              }
            }
            memmove(v328, v326, v327);
            goto LABEL_410;
          }
        }
LABEL_477:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 188, (uint64_t)"did_add_state", 13, (uint64_t)"Failed to add keyframe. This should never happen.", 49, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
LABEL_478:
        v370 = (_QWORD *)v229[1];
        if (v370)
        {
          do
          {
            v371 = v370;
            v370 = (_QWORD *)*v370;
          }
          while (v370);
        }
        else
        {
          do
          {
            v371 = (_QWORD *)v229[2];
            _ZF = *v371 == (_QWORD)v229;
            v229 = v371;
          }
          while (!_ZF);
        }
        v229 = v371;
        if (v371 == v2058)
          goto LABEL_1123;
      }
    }
    goto LABEL_1123;
  }
  if (*(_BYTE *)(v70 + 1317))
  {
    v203 = *(double *)v202;
    v204 = *(_QWORD *)(v202 + 8);
    v205 = *(double *)(v202 + 16);
    v206 = *(_QWORD *)(v202 + 24);
    *(_OWORD *)v2150 = *(_OWORD *)(v202 + 32);
    *(_QWORD *)v2151 = *(_QWORD *)(v202 + 48);
    v207 = *(_QWORD *)(v202 + 56);
    v2149[0] = *(_OWORD *)(v202 + 64);
    *(_QWORD *)&v2149[1] = *(_QWORD *)(v202 + 80);
    v208 = *(_OWORD *)(v202 + 88);
    *(_QWORD *)&v2107[1] = *(_QWORD *)(v202 + 104);
    v2107[0] = v208;
    v209 = *(_OWORD *)(v202 + 112);
    *(_QWORD *)&v2108[1] = *(_QWORD *)(v202 + 128);
    v2108[0] = v209;
    v2099 = *(_QWORD *)(v202 + 152);
    v2097 = *(_OWORD *)(v202 + 136);
    v210 = *(_OWORD *)(v202 + 160);
    v211 = *(_OWORD *)(v202 + 176);
    v212 = *(_OWORD *)(v202 + 192);
    v213 = *(_OWORD *)(v202 + 208);
    *(_QWORD *)&object[64] = *(_QWORD *)(v202 + 224);
    *(_OWORD *)&object[48] = v213;
    *(_OWORD *)&object[32] = v212;
    *(_OWORD *)object = v210;
    *(_OWORD *)&object[16] = v211;
    v214 = *(_OWORD *)(v202 + 232);
    v5 = *(int64x2_t *)(v202 + 248);
    v215 = *(_OWORD *)(v202 + 264);
    v216 = *(_OWORD *)(v202 + 280);
    *(_QWORD *)&v2183[64] = *(_QWORD *)(v202 + 296);
    *(_OWORD *)&v2183[48] = v216;
    *(_OWORD *)&v2183[32] = v215;
    *(double *)(v70 + 176) = v203 * *(double *)(v70 + 1320);
    *(_OWORD *)v2183 = v214;
    *(int64x2_t *)&v2183[16] = v5;
    v217 = v205 * *(double *)(v70 + 1328);
    *(_QWORD *)(v70 + 184) = v204;
    *(double *)(v70 + 192) = v217;
    *(_QWORD *)(v70 + 200) = v206;
    *(_OWORD *)(v70 + 208) = *(_OWORD *)v2150;
    *(_QWORD *)(v70 + 224) = *(_QWORD *)v2151;
    *(_QWORD *)(v70 + 232) = v207;
    v218 = v2149[0];
    *(_QWORD *)(v70 + 256) = *(_QWORD *)&v2149[1];
    *(_OWORD *)(v70 + 240) = v218;
    v219 = v2107[0];
    *(_QWORD *)(v70 + 280) = *(_QWORD *)&v2107[1];
    *(_OWORD *)(v70 + 264) = v219;
    v220 = v2108[0];
    *(_QWORD *)(v70 + 304) = *(_QWORD *)&v2108[1];
    *(_OWORD *)(v70 + 288) = v220;
    *(_QWORD *)(v70 + 328) = v2099;
    *(_OWORD *)(v70 + 312) = v2097;
    v221 = *(_OWORD *)object;
    v222 = *(_OWORD *)&object[16];
    v223 = *(_OWORD *)&object[32];
    v224 = *(_OWORD *)&object[48];
    *(_QWORD *)(v70 + 400) = *(_QWORD *)&object[64];
    *(_OWORD *)(v70 + 368) = v223;
    *(_OWORD *)(v70 + 384) = v224;
    *(_OWORD *)(v70 + 336) = v221;
    *(_OWORD *)(v70 + 352) = v222;
    v225 = *(_OWORD *)&v2183[16];
    *(_OWORD *)(v70 + 408) = *(_OWORD *)v2183;
    v226 = *(_OWORD *)&v2183[32];
    v227 = *(_OWORD *)&v2183[48];
    *(_QWORD *)(v70 + 472) = *(_QWORD *)&v2183[64];
    *(_OWORD *)(v70 + 440) = v226;
    *(_OWORD *)(v70 + 456) = v227;
    *(_OWORD *)(v70 + 424) = v225;
    goto LABEL_259;
  }
  v1312 = *(_OWORD *)(v202 + 16);
  *(_OWORD *)(v70 + 176) = *(_OWORD *)v202;
  *(_OWORD *)(v70 + 192) = v1312;
  v1313 = *(_OWORD *)(v202 + 32);
  *(_QWORD *)(v70 + 224) = *(_QWORD *)(v202 + 48);
  *(_OWORD *)(v70 + 208) = v1313;
  *(_QWORD *)(v70 + 232) = *(_QWORD *)(v202 + 56);
  v1314 = *(_OWORD *)(v202 + 64);
  *(_QWORD *)(v70 + 256) = *(_QWORD *)(v202 + 80);
  *(_OWORD *)(v70 + 240) = v1314;
  v1315 = *(_OWORD *)(v202 + 88);
  *(_QWORD *)(v70 + 280) = *(_QWORD *)(v202 + 104);
  *(_OWORD *)(v70 + 264) = v1315;
  v1316 = *(_OWORD *)(v202 + 112);
  *(_QWORD *)(v70 + 304) = *(_QWORD *)(v202 + 128);
  *(_OWORD *)(v70 + 288) = v1316;
  v1317 = *(_OWORD *)(v202 + 136);
  *(_QWORD *)(v70 + 328) = *(_QWORD *)(v202 + 152);
  *(_OWORD *)(v70 + 312) = v1317;
  v1319 = *(_OWORD *)(v202 + 192);
  v1318 = *(_OWORD *)(v202 + 208);
  v1320 = *(_OWORD *)(v202 + 176);
  *(_QWORD *)(v70 + 400) = *(_QWORD *)(v202 + 224);
  *(_OWORD *)(v70 + 368) = v1319;
  *(_OWORD *)(v70 + 384) = v1318;
  *(_OWORD *)(v70 + 352) = v1320;
  *(_OWORD *)(v70 + 336) = *(_OWORD *)(v202 + 160);
  v1321 = *(_OWORD *)(v202 + 264);
  v1322 = *(_OWORD *)(v202 + 280);
  v1323 = *(_QWORD *)(v202 + 296);
  *(_OWORD *)(v70 + 424) = *(_OWORD *)(v202 + 248);
  *(_QWORD *)(v70 + 472) = v1323;
  *(_OWORD *)(v70 + 440) = v1321;
  *(_OWORD *)(v70 + 456) = v1322;
  *(_OWORD *)(v70 + 408) = *(_OWORD *)(v202 + 232);
  v1324 = *(_QWORD *)(v70 + 8);
  v229 = *(_QWORD **)(v1324 + 48);
  v2058 = (_QWORD *)(v1324 + 56);
  if (v229 != (_QWORD *)(v1324 + 56))
    goto LABEL_260;
LABEL_1123:
  if (*(_BYTE *)(v2068 + 2144))
  {
    v1325 = v2068;
    if (!*(_BYTE *)(v2068 + 2149))
    {
      v1332 = *(_QWORD **)(v2068 + 8);
      v1333 = v1332[8];
      v2066 = v1332[39] * v1333;
      if (v2066)
      {
        v1334 = 0;
        v2038 = v1332[8];
        v2032 = *(_QWORD **)(v2068 + 8);
        while (1)
        {
          v1335 = v1334 / v1333;
          v1336 = v1334 % v1333;
          v1337 = (_QWORD *)v1332[6];
          if (((v1334 % v1333) & 0x8000000000000000) != 0)
          {
            do
            {
              v1349 = (_QWORD *)*v1337;
              if (*v1337)
              {
                do
                {
                  v1338 = v1349;
                  v1349 = (_QWORD *)v1349[1];
                }
                while (v1349);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (_ZF);
              }
              v1337 = v1338;
              _CF = __CFADD__(v1336++, 1);
            }
            while (!_CF);
          }
          else if (v1336)
          {
            do
            {
              v1348 = (_QWORD *)v1337[1];
              if (v1348)
              {
                do
                {
                  v1338 = v1348;
                  v1348 = (_QWORD *)*v1348;
                }
                while (v1348);
              }
              else
              {
                do
                {
                  v1338 = (_QWORD *)v1337[2];
                  _ZF = *v1338 == (_QWORD)v1337;
                  v1337 = v1338;
                }
                while (!_ZF);
              }
              v1337 = v1338;
              v1506 = v1336-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1338 = (_QWORD *)v1332[6];
          }
          v1339 = *((_OWORD *)v1338 + 2);
          v1340 = (_QWORD *)v1332[37];
          if (v1335 < 0)
          {
            do
            {
              v1350 = (_QWORD *)*v1340;
              if (*v1340)
              {
                do
                {
                  v1341 = v1350;
                  v1350 = (_QWORD *)v1350[1];
                }
                while (v1350);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (_ZF);
              }
              v1340 = v1341;
              _CF = __CFADD__(v1335++, 1);
            }
            while (!_CF);
          }
          else if (v1333 <= v1334)
          {
            do
            {
              v1351 = (_QWORD *)v1340[1];
              if (v1351)
              {
                do
                {
                  v1341 = v1351;
                  v1351 = (_QWORD *)*v1351;
                }
                while (v1351);
              }
              else
              {
                do
                {
                  v1341 = (_QWORD *)v1340[2];
                  _ZF = *v1341 == (_QWORD)v1340;
                  v1340 = v1341;
                }
                while (!_ZF);
              }
              v1340 = v1341;
              v1506 = v1335-- <= 1;
            }
            while (!v1506);
          }
          else
          {
            v1341 = (_QWORD *)v1332[37];
          }
          v1342 = *((_DWORD *)v1341 + 8);
          *(_OWORD *)v2150 = v1339;
          *(_DWORD *)v2151 = v1342;
          v1343 = *(_QWORD *)(v1325 + 16);
          if (v1343)
            break;
LABEL_1134:
          if (++v1334 == v2066)
            goto LABEL_1125;
        }
        v1344 = *(unsigned int *)(v1325 + 2156);
        *(_OWORD *)object = *(_OWORD *)v2150;
        *(_QWORD *)&object[16] = *(_QWORD *)v2151;
        memset(&object[24], 0, 24);
        sub_20F716CC8(v1343, (uint64_t)object);
        v1345 = *(_QWORD *)(v1325 + 5760);
        if (v1345 == *(_QWORD *)(v1325 + 5752))
        {
          v2060 = 0;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
            goto LABEL_1246;
        }
        else
        {
          v2060 = *(_DWORD *)(v1345 - 208) + 1;
          v1346 = *(_QWORD *)&object[24];
          v1347 = *(_QWORD *)&object[32];
          if (*(_QWORD *)&object[24] == *(_QWORD *)&object[32])
          {
LABEL_1246:
            if (v1346)
            {
              v1414 = (void *)v1346;
              if (*(_QWORD *)&object[32] != v1346)
              {
                v1415 = *(_QWORD *)&object[32] - 40;
                v1416 = (void (***)(uint64_t))(*(_QWORD *)&object[32] - 40);
                do
                {
                  v1417 = *v1416;
                  v1416 -= 5;
                  (*v1417)(v1415);
                  _ZF = v1415 == v1346;
                  v1415 = (uint64_t)v1416;
                }
                while (!_ZF);
                v1414 = *(void **)&object[24];
              }
              *(_QWORD *)&object[32] = v1346;
              operator delete(v1414);
            }
            v1333 = v2038;
            goto LABEL_1134;
          }
        }
        if (!*(_QWORD *)(*(_QWORD *)(v1325 + 16) + 8))
          goto LABEL_1246;
        while (1)
        {
          v1352 = *(_QWORD *)(v1325 + 16);
          v1355 = *(uint64_t **)(v1352 + 8);
          v1353 = (uint64_t *)(v1352 + 8);
          v1354 = v1355;
          if (v1355)
          {
            v1356 = *(_DWORD *)(v1346 + 16);
            v1357 = *(_QWORD *)(v1346 + 8);
            v1358 = v1353;
            do
            {
              v1359 = v1354[4];
              if (v1359 < v1357)
              {
                ++v1354;
              }
              else if (v1359 == v1357)
              {
                if (*((_DWORD *)v1354 + 10) < v1356)
                  ++v1354;
                else
                  v1358 = v1354;
              }
              else
              {
                v1358 = v1354;
              }
              v1354 = (uint64_t *)*v1354;
            }
            while (v1354);
            if (v1358 != v1353)
            {
              v1360 = v1358[4];
              if (v1357 >= v1360 && (v1357 != v1360 || v1356 >= *((_DWORD *)v1358 + 10)))
                break;
            }
          }
LABEL_1174:
          v1346 += 40;
          if (v1346 == v1347)
          {
            v1346 = *(_QWORD *)&object[24];
            goto LABEL_1246;
          }
        }
        v1361 = v1358[6];
        v1362 = (std::__shared_weak_count *)v1358[7];
        if (!v1362)
          goto LABEL_1195;
        v1363 = (unint64_t *)&v1362->__shared_owners_;
        do
          v1364 = __ldxr(v1363);
        while (__stxr(v1364 + 1, v1363));
        do
          v1365 = __ldxr(v1363);
        while (__stxr(v1365 + 1, v1363));
        do
          v1366 = __ldaxr(v1363);
        while (__stlxr(v1366 - 1, v1363));
        if (!v1366)
        {
          ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
          std::__shared_weak_count::__release_weak(v1362);
          if (!v1361)
            goto LABEL_1240;
        }
        else
        {
LABEL_1195:
          if (!v1361)
            goto LABEL_1240;
        }
        if (v1344 <= (uint64_t)(*(_QWORD *)(v1361 + 208) - *(_QWORD *)(v1361 + 200)) >> 5)
        {
          if (!*(_BYTE *)(v1361 + 192)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 132, (uint64_t)"track->getStructure()", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1367 = *(char **)(v1325 + 5560);
          v1368 = *(char **)(v1325 + 5568);
          if (v1368 != v1367)
          {
            v1369 = (v1368 - v1367) >> 4;
            do
            {
              v1370 = v1369 >> 1;
              v1371 = (unsigned int *)&v1367[16 * (v1369 >> 1)];
              v1373 = *v1371;
              v1372 = (char *)(v1371 + 4);
              v1369 += ~(v1369 >> 1);
              if (v1373 < v1356)
                v1367 = v1372;
              else
                v1369 = v1370;
            }
            while (v1369);
          }
          if (v1367 == v1368 || *(_DWORD *)v1367 != v1356)
          {
            v1374 = v1361 + 40;
            v1375 = *(unsigned __int8 *)(v1361 + 192);
            v1376 = *(_BYTE *)(v1361 + 192) ? v1361 + 40 : 0;
            *(_DWORD *)v2183 = v1356;
            v2183[4] = 1;
            *(_QWORD *)&v2183[8] = v1376;
            if (v1375)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                _Q1 = *(_OWORD *)(v1361 + 104);
                _D3 = *(_QWORD *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1874:
                  abort();
                }
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1874;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1374 + 24))(v1361 + 40))
              {
                v1380 = *(uint64_t **)(v1361 + 136);
                v1381 = *v1380;
                v1382 = (double *)v1380[2];
                v1383 = v1380[4];
                v1384 = (double *)v1380[6];
                _D1 = *(double *)(v1361 + 56) - v1382[1];
                v1386 = *(double *)(v1361 + 64) - v1382[2];
                _Q3.f64[0] = *(float64_t *)(v1381 + 16);
                _Q7 = *(_OWORD *)(v1381 + 48);
                _Q3.f64[1] = *(float64_t *)(v1381 + 40);
                v1389 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), *(double *)(v1361 + 48) - *v1382), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1381, *(int64x2_t *)(v1381 + 24)), _D1), _Q3, v1386);
                __asm { FMLA            D2, D1, V7.D[1] }
                v1391 = _D2 + *(double *)(v1381 + 64) * v1386;
                v1392 = v1389.f64[0] - *v1384;
                _D2 = v1389.f64[1] - v1384[1];
                v1394 = v1391 - v1384[2];
                _Q3.f64[0] = *(float64_t *)(v1383 + 16);
                _Q4 = *(int64x2_t *)v1383;
                _Q6 = *(int64x2_t *)(v1383 + 24);
                _Q16 = *(_OWORD *)(v1383 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v1383 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1383, _Q6), v1392), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1383, _Q6), _D2), _Q3, v1394);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v1394 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                *(_QWORD *)&v2183[16] = sqrt(_D2+ (_Q3.f64[0] + v1394 * *(double *)(v1383 + 64))* (_Q3.f64[0] + *(double *)(v1383 + 64) * v1394));
                _Q1 = *(_OWORD *)(v1361 + 104);
                _Q3.f64[0] = *(float64_t *)(v1361 + 112);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(_D2 + *(double *)(v1361 + 120) * *(double *)(v1361 + 120)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1874;
                }
                if (sub_20F7B73E4((uint64_t)v2005, (unsigned int *)v2183))
                {
                  *(_BYTE *)(v2068 + 6636) = 0;
                  *(_DWORD *)(v2068 + 6632) = 0;
                }
              }
            }
          }
          v1405 = v1361 + 40;
          if (!*(_BYTE *)(v1361 + 192))
            v1405 = 0;
          v1406 = *(_DWORD *)(v1405 + 40);
          v1407 = (__int128 *)*(unsigned int *)(v1405 + 48);
          if ((_DWORD)v1407 == *(_DWORD *)v2151 && *(void **)(v1405 + 32) == v2150[0] && v1406 == LODWORD(v2150[1]))
            goto LABEL_1239;
          v1410 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
          if (v1410)
          {
            v1411 = v1410[13];
            if (v1356 == *(_DWORD *)(v1361 + 32))
              goto LABEL_1238;
          }
          else
          {
            v1411 = 0;
            if (v1356 == *(_DWORD *)(v1361 + 32))
            {
LABEL_1238:
              sub_20F7B7674(v1406, v1407, v2150[1], *(unsigned int *)v2151, v1356, v1411, v2068 + 3144, v2060++, (__n128)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v1346 + 24) + 8)), *(float *)(*(_QWORD *)(v1346 + 24) + 32), v2068 + 4760);
LABEL_1239:
              v1325 = v2068;
              v1332 = v2032;
              goto LABEL_1240;
            }
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 144, (uint64_t)"landmarkID == track->ID().key()", 31, (uint64_t)"Landmark ID and track ID is different", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1356 = *(_DWORD *)(v1361 + 32);
          goto LABEL_1238;
        }
LABEL_1240:
        if (v1362)
        {
          v1412 = (unint64_t *)&v1362->__shared_owners_;
          do
            v1413 = __ldaxr(v1412);
          while (__stlxr(v1413 - 1, v1412));
          if (!v1413)
          {
            ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
            std::__shared_weak_count::__release_weak(v1362);
          }
        }
        goto LABEL_1174;
      }
    }
LABEL_1125:
    v1327 = *(uint64_t **)(v1325 + 24);
    v1326 = *(uint64_t **)(v1325 + 32);
    if (v1327 != v1326)
    {
      v2059 = *(_QWORD *)(v2068 + 8);
      __szf = *(_QWORD *)(v2059 + 64);
      if (__szf)
      {
        v1328 = *(_QWORD *)(v2059 + 312);
        if (v1328)
        {
          v1329 = *(unsigned int *)(v2068 + 2152);
          v1330 = *(_QWORD *)(v2068 + 5760);
          if (v1330 == *(_QWORD *)(v2068 + 5752))
            v1331 = 0;
          else
            v1331 = *(_DWORD *)(v1330 - 208) + 1;
          v1418 = v1328 * __szf;
          v1419 = *(double *)(v2068 + 2168);
          v2039 = *(uint64_t **)(v1325 + 32);
          v2033 = *(unsigned int *)(v2068 + 2152);
          while (1)
          {
            v1420 = *v1327;
            v1421 = *(_QWORD *)(*v1327 + 200);
            v1422 = *(_QWORD *)(*v1327 + 208);
            if (v1329 <= (v1422 - v1421) >> 6 && *(_DWORD *)(v1420 + 224) != 2)
              break;
LABEL_1255:
            if (++v1327 == v1326)
              goto LABEL_1338;
          }
          v1423 = *(_DWORD *)(v1420 + 32);
          v1424 = *(_QWORD *)(*(_QWORD *)(v2068 + 8) + 64);
          *(_QWORD *)v2183 = *(_QWORD *)(v2068 + 8);
          *(_QWORD *)&v2183[8] = v1424;
          *(_QWORD *)&v2183[16] = 0;
          *(_QWORD *)&v2149[0] = v1421;
          *(_QWORD *)object = v2183;
          *(_QWORD *)&object[8] = v2149;
          *(_QWORD *)&object[16] = v2059;
          *(_QWORD *)&object[24] = __szf;
          *(_QWORD *)&object[32] = v1418;
          *(_QWORD *)&object[40] = v1422;
          *(_QWORD *)&object[48] = v1420;
          v1425 = sub_20F6236F0((uint64_t **)object);
          if (!v1425)
            goto LABEL_1338;
          v1426 = (float32x2_t *)v1425;
          if (!*(_BYTE *)(*v1327 + 192)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 1321, (uint64_t)"track_ptr->getStructure()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1427 = *(char **)(v2068 + 5560);
          v1428 = *(char **)(v2068 + 5568);
          if (v1428 != v1427)
          {
            v1429 = (v1428 - v1427) >> 4;
            do
            {
              v1430 = v1429 >> 1;
              v1431 = (unsigned int *)&v1427[16 * (v1429 >> 1)];
              v1433 = *v1431;
              v1432 = (char *)(v1431 + 4);
              v1429 += ~(v1429 >> 1);
              if (v1433 < v1423)
                v1427 = v1432;
              else
                v1429 = v1430;
            }
            while (v1429);
          }
          if (v1427 == v1428)
          {
            v1435 = *v1327;
          }
          else
          {
            v1434 = *(_DWORD *)v1427;
            v1435 = *v1327;
            if (v1434 == v1423)
            {
LABEL_1287:
              if (*(_BYTE *)(v1435 + 192))
                v1468 = v1435 + 40;
              else
                v1468 = 0;
              v1469 = *(void **)(v1468 + 32);
              v1470 = *(_DWORD *)(v1468 + 40);
              v1471 = (__int128 *)*(unsigned int *)(v1468 + 48);
              do
              {
                v1472 = *(_QWORD *)&v2183[16];
                v1473 = *(_QWORD *)&v2183[16] / *(_QWORD *)&v2183[8];
                v1474 = *(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8];
                v1475 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                if (((*(_QWORD *)&v2183[16] % *(_QWORD *)&v2183[8]) & 0x8000000000000000) != 0)
                {
                  do
                  {
                    v1487 = (_QWORD *)*v1475;
                    if (*v1475)
                    {
                      do
                      {
                        v1476 = v1487;
                        v1487 = (_QWORD *)v1487[1];
                      }
                      while (v1487);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (_ZF);
                    }
                    v1475 = v1476;
                    _CF = __CFADD__(v1474++, 1);
                  }
                  while (!_CF);
                }
                else if (v1474)
                {
                  do
                  {
                    v1486 = (_QWORD *)v1475[1];
                    if (v1486)
                    {
                      do
                      {
                        v1476 = v1486;
                        v1486 = (_QWORD *)*v1486;
                      }
                      while (v1486);
                    }
                    else
                    {
                      do
                      {
                        v1476 = (_QWORD *)v1475[2];
                        _ZF = *v1476 == (_QWORD)v1475;
                        v1475 = v1476;
                      }
                      while (!_ZF);
                    }
                    v1475 = v1476;
                    v1506 = v1474-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1476 = *(_QWORD **)(*(_QWORD *)v2183 + 48);
                }
                v1477 = (void *)v1476[4];
                v1478 = (void *)v1476[5];
                v1479 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                if (v1473 < 0)
                {
                  do
                  {
                    v1488 = (_QWORD *)*v1479;
                    if (*v1479)
                    {
                      do
                      {
                        v1480 = v1488;
                        v1488 = (_QWORD *)v1488[1];
                      }
                      while (v1488);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (_ZF);
                    }
                    v1479 = v1480;
                    _CF = __CFADD__(v1473++, 1);
                  }
                  while (!_CF);
                }
                else if (*(_QWORD *)&v2183[8] <= *(_QWORD *)&v2183[16])
                {
                  do
                  {
                    v1489 = (_QWORD *)v1479[1];
                    if (v1489)
                    {
                      do
                      {
                        v1480 = v1489;
                        v1489 = (_QWORD *)*v1489;
                      }
                      while (v1489);
                    }
                    else
                    {
                      do
                      {
                        v1480 = (_QWORD *)v1479[2];
                        _ZF = *v1480 == (_QWORD)v1479;
                        v1479 = v1480;
                      }
                      while (!_ZF);
                    }
                    v1479 = v1480;
                    v1506 = v1473-- <= 1;
                  }
                  while (!v1506);
                }
                else
                {
                  v1480 = *(_QWORD **)(*(_QWORD *)v2183 + 296);
                }
                v1481 = *((_DWORD *)v1480 + 8);
                v2150[0] = v1477;
                v2150[1] = v1478;
                *(_DWORD *)v2151 = v1481;
                if ((_DWORD)v1471 != v1481 || v1469 != v1477 || v1470 != (_DWORD)v1478)
                {
                  v1484 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)(v2068 + 8) + 1784), (uint64_t *)v2150);
                  if (v1484)
                    v1485 = v1484[13];
                  else
                    v1485 = 0;
                  sub_20F7B7674(v1470, v1471, v2150[1], *(unsigned int *)v2151, v1423, v1485, v2068 + 3144, v1331++, (__n128)vcvtq_f64_f32(v1426[1]), v1419 * v1426[4].f32[0], v2068 + 4760);
                  v1472 = *(_QWORD *)&v2183[16];
                }
                *(_QWORD *)&v2183[16] = v1472 + 1;
                if (v1472 + 1 == v1418)
                  break;
                *(_QWORD *)&v2149[0] += 64;
                if (*(_QWORD *)&v2149[0] == v1422)
                  break;
                v1426 = (float32x2_t *)sub_20F6236F0((uint64_t **)object);
              }
              while (v1426);
              v1326 = v2039;
              v1329 = v2033;
              goto LABEL_1255;
            }
          }
          v1436 = (void *)(v1435 + 40);
          v1437 = *(unsigned __int8 *)(v1435 + 192);
          if (v1437)
            v1438 = v1436;
          else
            v1438 = 0;
          LODWORD(v2150[0]) = v1423;
          BYTE4(v2150[0]) = 1;
          v2150[1] = v1438;
          if (v1437)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v1436 + 24))(v1436))
            {
              v1439 = (double *)v2150[1];
              _Q1 = *((_OWORD *)v2150[1] + 4);
              _D3 = *((_QWORD *)v2150[1] + 9);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + *((double *)v2150[1] + 10) * *((double *)v2150[1] + 10)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v1439 = (double *)v2150[1];
              if (!v2150[1])
                goto LABEL_1286;
            }
            if ((*(unsigned int (**)(double *))(*(_QWORD *)v1439 + 24))(v1439))
            {
              v1443 = (uint64_t *)*((_QWORD *)v1439 + 12);
              v1444 = *v1443;
              v1445 = (double *)v1443[2];
              v1446 = v1443[4];
              v1447 = (double *)v1443[6];
              _D1 = v1439[2] - v1445[1];
              v1449 = v1439[3] - v1445[2];
              _Q3.f64[0] = *(float64_t *)(v1444 + 16);
              _Q7 = *(_OWORD *)(v1444 + 48);
              _Q3.f64[1] = *(float64_t *)(v1444 + 40);
              v1452 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), v1439[1] - *v1445), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1444, *(int64x2_t *)(v1444 + 24)), _D1), _Q3, v1449);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1454 = _D2 + *(double *)(v1444 + 64) * v1449;
              v1455 = v1452.f64[0] - *v1447;
              _D2 = v1452.f64[1] - v1447[1];
              v1457 = v1454 - v1447[2];
              _Q3.f64[0] = *(float64_t *)(v1446 + 16);
              _Q4 = *(int64x2_t *)v1446;
              _Q6 = *(int64x2_t *)(v1446 + 24);
              _Q16 = *(_OWORD *)(v1446 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v1446 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1446, _Q6), v1455), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1446, _Q6), _D2), _Q3, v1457);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v1457 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(_QWORD *)v2151 = sqrt(_D2+ (_Q3.f64[0] + v1457 * *(double *)(v1446 + 64))* (_Q3.f64[0] + *(double *)(v1446 + 64) * v1457));
              _Q1 = *((_OWORD *)v1439 + 4);
              _Q3.f64[0] = v1439[9];
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(_D2 + v1439[10] * v1439[10]) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (sub_20F7B73E4((uint64_t)v2005, (unsigned int *)v2150))
              {
                *(_BYTE *)(v2068 + 6636) = 0;
                *(_DWORD *)(v2068 + 6632) = 0;
              }
            }
          }
LABEL_1286:
          v1435 = *v1327;
          *(_DWORD *)(*v1327 + 224) = 1;
          goto LABEL_1287;
        }
      }
    }
  }
LABEL_1338:
  v2067 = *(unsigned int *)(v2068 + 2152);
  v2023 = *(unsigned int *)(v2068 + 1920);
  v1490 = *(_QWORD *)(v2068 + 24);
  for (k = *(_QWORD *)(v2068 + 32); v1490 != k; v1490 += 8)
  {
    if (v2067 > (uint64_t)(*(_QWORD *)(*(_QWORD *)v1490 + 208) - *(_QWORD *)(*(_QWORD *)v1490 + 200)) >> 6)
    {
      v1492 = *(_DWORD *)(*(_QWORD *)v1490 + 32);
      v1493 = *(char **)(v2068 + 5560);
      v1494 = *(char **)(v2068 + 5568);
      if (v1494 != v1493)
      {
        v1495 = (v1494 - v1493) >> 4;
        do
        {
          v1496 = v1495 >> 1;
          v1497 = (unsigned int *)&v1493[16 * (v1495 >> 1)];
          v1499 = *v1497;
          v1498 = (char *)(v1497 + 4);
          v1495 += ~(v1495 >> 1);
          if (v1499 < v1492)
            v1493 = v1498;
          else
            v1495 = v1496;
        }
        while (v1495);
      }
      if (v1493 != v1494 && *(_DWORD *)v1493 == v1492)
      {
        if (sub_20F623A0C((uint64_t)v2005, v1492))
        {
          *(_WORD *)(v2068 + 6636) = 0;
          *(_DWORD *)(v2068 + 6632) = 0;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2372, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        *(_DWORD *)(*(_QWORD *)v1490 + 224) = 0;
      }
    }
  }
  v1500 = sub_20F7BA718((uint64_t)v2005);
  v1501 = (uint64_t *)v2068;
  v1503 = *(_QWORD *)(v2068 + 24);
  v1502 = *(_QWORD *)(v2068 + 32);
  v1504 = v1502 - v1503;
  v1505 = (v1502 - v1503) >> 3;
  v1506 = v1505 > v2023 && *(_DWORD *)(v2068 + 2184) + v1500 > v2023;
  if (v1506)
  {
    if (*(_BYTE *)(v2068 + 2104))
    {
      v1541 = *(_QWORD **)(v2068 + 8);
      v1542 = v1541[8];
      v1543 = (_QWORD *)v1541[6];
      if ((v1542 & 0x1FFFFFFFELL) != 0)
      {
        v1544 = (v1542 >> 1);
        do
        {
          v1545 = (_QWORD *)v1543[1];
          if (v1545)
          {
            do
            {
              v1546 = v1545;
              v1545 = (_QWORD *)*v1545;
            }
            while (v1545);
          }
          else
          {
            do
            {
              v1546 = (_QWORD *)v1543[2];
              _ZF = *v1546 == (_QWORD)v1543;
              v1543 = v1546;
            }
            while (!_ZF);
          }
          v1543 = v1546;
          v1506 = v1544-- <= 1;
        }
        while (!v1506);
      }
      else
      {
        v1546 = (_QWORD *)v1541[6];
      }
      v1578 = v1541[225];
      *(_OWORD *)object = *((_OWORD *)v1546 + 2);
      v1579 = (_QWORD *)v1541[37];
      if (v1579 == v1541 + 38)
      {
        v2020 = (int64x2_t **)(v1578 + 40);
      }
      else
      {
        v1501 = (uint64_t *)v2068;
        do
        {
          *(_DWORD *)&object[16] = *((_DWORD *)v1579 + 8);
          v1580 = sub_20E9DF85C(v1541 + 223, (uint64_t *)object);
          if (v1580)
          {
            v2020 = (int64x2_t **)(v1580 + 5);
            v1501 = (uint64_t *)v2068;
            goto LABEL_1477;
          }
          v1581 = (_QWORD *)v1579[1];
          if (v1581)
          {
            do
            {
              v1582 = v1581;
              v1581 = (_QWORD *)*v1581;
            }
            while (v1581);
          }
          else
          {
            do
            {
              v1582 = (_QWORD *)v1579[2];
              _ZF = *v1582 == (_QWORD)v1579;
              v1579 = v1582;
            }
            while (!_ZF);
          }
          v1541 = *(_QWORD **)(v2068 + 8);
          v1579 = v1582;
        }
        while (v1582 != v1541 + 38);
        v2020 = 0;
      }
LABEL_1477:
      v1586 = v1501 + 4;
      v1587 = v1501 + 3;
      v1588 = (v1501[4] - v1501[3]) >> 3;
      *(int64x2_t *)object = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v2041 = v1501 + 396;
      sub_20F623C14((uint64_t)(v1501 + 396), v1588, object);
      v2150[0] = *(void **)(*(_QWORD *)(v2068 + 8) + 48);
      v1589 = v1501[3];
      v1590 = (uint64_t *)v1501[4];
      v1591 = 126 - 2 * __clz((uint64_t)((uint64_t)v1590 - v1589) >> 3);
      *(_QWORD *)object = v2068;
      *(_QWORD *)&object[8] = v2150;
      *(_QWORD *)v2183 = object;
      if (v1590 == (uint64_t *)v1589)
        v1592 = 0;
      else
        v1592 = v1591;
      sub_20F7BA994(v1589, v1590, (_QWORD ***)v2183, v1592, 1);
      v2035 = v2068 + 3216;
      bzero((void *)(v2068 + 3216), 0x480uLL);
      v1593 = (*v1586 - *v1587) >> 3;
      v2183[0] = 0;
      v2063 = (uint64_t *)(v2068 + 3192);
      sub_20EDCA4D0(v2068 + 3192, v1593, v2183);
      v1594 = *v1587;
      if (*v1586 == *v1587)
      {
        v1596 = 0;
        v2017 = *v1586;
        v1594 = *v1586;
        v2029 = 0;
        if (v2023)
          goto LABEL_1556;
LABEL_1847:
        v1868 = v2017;
        v1501 = (uint64_t *)v2068;
        if (v2017 != v1594)
        {
          v1869 = 0;
          do
          {
            if (((*(_QWORD *)(*v2063 + ((v1869 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1869) & 1) == 0)
            {
              v1870 = *(_QWORD *)(v1594 + 8 * v1869);
              if (sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(v1870 + 32)))
              {
                *(_WORD *)(v2068 + 6636) = 0;
                *(_DWORD *)(v2068 + 6632) = 0;
              }
              else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2285, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              *(_DWORD *)(v1870 + 224) = 0;
              v1501 = (uint64_t *)v2068;
              v1594 = *(_QWORD *)(v2068 + 24);
              v1868 = *(_QWORD *)(v2068 + 32);
            }
            ++v1869;
          }
          while (v1869 < (v1868 - v1594) >> 3);
        }
        goto LABEL_1359;
      }
      v1595 = 0;
      v1596 = 0;
      v1597 = 0;
      if ((unint64_t)((*v1586 - *v1587) >> 3) <= 1)
        v1598 = 1;
      else
        v1598 = (*v1586 - *v1587) >> 3;
      v1599 = v2068;
LABEL_1487:
      v1600 = *(_QWORD *)(v1594 + 8 * v1597);
      v1601 = *(_QWORD *)(v1600 + 32);
      if (*(_DWORD *)(v1600 + 224) == 2)
      {
        v1602 = *(char **)(v2068 + 5560);
        v1603 = *(char **)(v2068 + 5568);
        if (v1603 != v1602)
        {
          v1604 = (v1603 - v1602) >> 4;
          do
          {
            v1605 = v1604 >> 1;
            v1606 = (unsigned int *)&v1602[16 * (v1604 >> 1)];
            v1608 = *v1606;
            v1607 = (char *)(v1606 + 4);
            v1604 += ~(v1604 >> 1);
            if (v1608 < v1601)
              v1602 = v1607;
            else
              v1604 = v1605;
          }
          while (v1604);
        }
        if (v1602 != v1603 && *(_DWORD *)v1602 == (_DWORD)v1601)
          goto LABEL_1496;
      }
      v1632 = *(int8x8_t *)(v2068 + 3112);
      if (!*(_QWORD *)&v1632)
        goto LABEL_1531;
      v1633 = *(_QWORD *)(v1600 + 32);
      v1634 = (uint8x8_t)vcnt_s8(v1632);
      v1634.i16[0] = vaddlv_u8(v1634);
      if (v1634.u32[0] > 1uLL)
      {
        v1635 = *(_QWORD *)(v1600 + 32);
        if (*(_QWORD *)&v1632 <= v1633)
          v1635 = v1633 % *(_QWORD *)&v1632;
      }
      else
      {
        v1635 = (v1632.i32[0] - 1) & v1633;
      }
      v1636 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1635);
      if (!v1636 || (v1637 = *v1636) == 0)
      {
LABEL_1531:
        v1649 = *(char **)(v2068 + 5560);
        v1650 = *(char **)(v2068 + 5568);
        if (v1650 != v1649)
        {
          v1651 = (v1650 - v1649) >> 4;
          do
          {
            v1652 = v1651 >> 1;
            v1653 = (unsigned int *)&v1649[16 * (v1651 >> 1)];
            v1655 = *v1653;
            v1654 = (char *)(v1653 + 4);
            v1651 += ~(v1651 >> 1);
            if (v1655 < v1601)
              v1649 = v1654;
            else
              v1651 = v1652;
          }
          while (v1651);
        }
        if (v1649 == v1650 || *(_DWORD *)v1649 != (_DWORD)v1601)
        {
          *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
          ++v1596;
        }
        goto LABEL_1486;
      }
      if (v1634.u32[0] < 2uLL)
      {
        v1638 = *(_QWORD *)&v1632 - 1;
        while (1)
        {
          v1640 = v1637[1];
          if (v1640 == v1633)
          {
            if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
              goto LABEL_1523;
          }
          else if ((v1640 & v1638) != v1635)
          {
            goto LABEL_1531;
          }
          v1637 = (uint64_t *)*v1637;
          if (!v1637)
            goto LABEL_1531;
        }
      }
      while (1)
      {
        v1639 = v1637[1];
        if (v1639 == v1633)
        {
          if (*((_DWORD *)v1637 + 4) == (_DWORD)v1601)
          {
LABEL_1523:
            v1642 = *(char **)(v2068 + 5560);
            v1643 = *(char **)(v2068 + 5568);
            if (v1643 != v1642)
            {
              v1644 = (v1643 - v1642) >> 4;
              do
              {
                v1645 = v1644 >> 1;
                v1646 = (unsigned int *)&v1642[16 * (v1644 >> 1)];
                v1648 = *v1646;
                v1647 = (char *)(v1646 + 4);
                v1644 += ~(v1644 >> 1);
                if (v1648 < v1601)
                  v1642 = v1647;
                else
                  v1644 = v1645;
              }
              while (v1644);
            }
            if (v1642 == v1643 || *(_DWORD *)v1642 != (_DWORD)v1601)
              goto LABEL_1531;
LABEL_1496:
            v1609 = (double *)(*v2041 + 16 * v1597);
            v1610 = *v1609;
            if (*v1609 <= 6.28318531)
            {
              v1631 = v1609[1];
            }
            else
            {
              v1611 = v1600 + 40;
              if (!*(_BYTE *)(v1600 + 192))
                v1611 = 0;
              _Q1 = *(_OWORD *)(v1611 + 8);
              v1613 = (double *)v2020[2];
              v1614 = v2020[4];
              v1615 = (double *)v2020[6];
              v1616 = *(double *)&_Q1 - *v1613;
              *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1613[1];
              v1617 = *(double *)(v1611 + 24) - v1613[2];
              *(_QWORD *)&v1618.f64[0] = (*v2020)[1].i64[0];
              _Q7 = (*v2020)[3];
              *(_QWORD *)&v1618.f64[1] = (*v2020)[2].i64[1];
              v1620 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1616), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1618, v1617);
              __asm { FMLA            D2, D1, V7.D[1] }
              v1622 = _D2 + *(double *)(*v2020)[4].i64 * v1617;
              _D2 = v1620.f64[1] - v1615[1];
              v1624 = v1622 - v1615[2];
              *(_QWORD *)&v1618.f64[0] = v1614[1].i64[0];
              _Q7 = v1614[3];
              *(_QWORD *)&v1618.f64[1] = v1614[2].i64[1];
              __szk = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), v1620.f64[0] - *v1615), (float64x2_t)vzip2q_s64(*v1614, *(int64x2_t *)((char *)v1614 + 24)), _D2), v1618, v1624);
              __asm { FMLA            D1, D2, V7.D[1] }
              v1626 = *(double *)&_Q1 + *(double *)v1614[4].i64 * v1624;
              *(float *)&v1624 = __szk.f64[0];
              *(float *)&_Q1 = v1626;
              v1627 = v1594;
              v1610 = atan2f(*(float *)&v1624, *(float *)&_Q1) + 3.14159265;
              *v1609 = v1610;
              v1628 = __szk.f64[1];
              v1629 = sqrt(vmulq_f64(__szk, __szk).f64[0] + v1626 * v1626);
              v1630 = atan2f(v1628, v1629);
              v1594 = v1627;
              v1631 = v1630 + 1.57079633;
              v1609[1] = v1631;
            }
            v1641 = (unint64_t)(v1610 * 3.81971863) - ((unint64_t)(v1610 * 3.81971863) == 24);
            ++*(_DWORD *)(v2035
                        + 48 * v1641
                        + 4 * ((unint64_t)(v1631 * 3.81971863) - ((unint64_t)(v1631 * 3.81971863) == 12)));
            ++v1595;
            ++v1596;
            *(_QWORD *)(*v2063 + ((v1597 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1597;
LABEL_1486:
            if (++v1597 == v1598)
            {
              v1656 = 0;
              v1657 = 0;
              do
              {
                if ((*(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) & (1 << v1657)) == 0)
                {
                  v1682 = *(_QWORD *)(v1594 + 8 * v1657);
                  v1683 = *(_QWORD *)(v1682 + 200);
                  v1684 = *(_QWORD *)(v1682 + 208);
                  if (*(unsigned int *)(v1599 + 2112) <= (unint64_t)((v1684 - v1683) >> 6))
                  {
                    v1599 = v2068;
                    if (sub_20F71AB84(v1683, v1684) >= (unint64_t)*(unsigned int *)(v2068 + 2108))
                    {
                      ++v1595;
                      ++v1596;
                      *(_QWORD *)(*v2063 + 8 * (v1657 >> 6)) |= 1 << v1657;
                      if (v1595 >= v2023)
                      {
                        v1594 = *(_QWORD *)(v2068 + 24);
                        v2017 = *(_QWORD *)(v2068 + 32);
                        goto LABEL_1847;
                      }
                      v1685 = *v2041;
                      v1675 = *(double *)(*v2041 + v1656);
                      if (v1675 > 6.28318531)
                      {
                        v1658 = *(_QWORD *)(*(_QWORD *)(v2068 + 24) + 8 * v1657);
                        if (*(_BYTE *)(v1658 + 192))
                          v1659 = v1658 + 40;
                        else
                          v1659 = 0;
                        _Q1 = *(_OWORD *)(v1659 + 8);
                        v1661 = (double *)v2020[2];
                        v1662 = v2020[4];
                        v1663 = (double *)v2020[6];
                        v1664 = *(double *)&_Q1 - *v1661;
                        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1661[1];
                        v1665 = *(double *)(v1659 + 24) - v1661[2];
                        *(_QWORD *)&v1666.f64[0] = (*v2020)[1].i64[0];
                        _Q7 = (*v2020)[3];
                        *(_QWORD *)&v1666.f64[1] = (*v2020)[2].i64[1];
                        v1668 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1664), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1666, v1665);
                        __asm { FMLA            D2, D1, V7.D[1] }
                        v1670 = _D2 + *(double *)(*v2020)[4].i64 * v1665;
                        _D2 = v1668.f64[1] - v1663[1];
                        v1672 = v1670 - v1663[2];
                        *(_QWORD *)&v1666.f64[0] = v1662[1].i64[0];
                        _Q7 = v1662[3];
                        *(_QWORD *)&v1666.f64[1] = v1662[2].i64[1];
                        __szl = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), v1668.f64[0] - *v1663), (float64x2_t)vzip2q_s64(*v1662, *(int64x2_t *)((char *)v1662 + 24)), _D2), v1666, v1672);
                        __asm { FMLA            D1, D2, V7.D[1] }
                        v1674 = *(double *)&_Q1 + *(double *)v1662[4].i64 * v1672;
                        *(float *)&v1672 = __szl.f64[0];
                        *(float *)&_Q1 = v1674;
                        v1675 = atan2f(*(float *)&v1672, *(float *)&_Q1) + 3.14159265;
                        v1676 = (double *)(v1685 + v1656);
                        *v1676 = v1675;
                        v1677 = __szl.f64[1];
                        v1678 = sqrt(vmulq_f64(__szl, __szl).f64[0] + v1674 * v1674);
                        v1679 = atan2f(v1677, v1678) + 1.57079633;
                        v1676[1] = v1679;
                      }
                      else
                      {
                        v1679 = *(double *)(v1685 + v1656 + 8);
                      }
                      v1680 = (unint64_t)(v1675 * 3.81971863) - ((unint64_t)(v1675 * 3.81971863) == 24);
                      v1681 = 4
                            * ((unint64_t)(v1679 * 3.81971863) - ((unint64_t)(v1679 * 3.81971863) == 12));
                      ++*(_DWORD *)(v2035 + 48 * v1680 + v1681);
                    }
                  }
                }
                ++v1657;
                v1594 = *(_QWORD *)(v1599 + 24);
                v1656 += 16;
              }
              while (v1657 < (*(_QWORD *)(v1599 + 32) - v1594) >> 3);
              v2017 = *(_QWORD *)(v1599 + 32);
              v2029 = v1595;
              if (v1595 >= v2023)
                goto LABEL_1847;
LABEL_1556:
              v1686 = (v2017 - v1594) >> 3;
              if (v2017 == v1594)
              {
                if (v1596 < v1686)
                {
                  while (1)
                    ;
                }
                goto LABEL_1847;
              }
              v1687 = 1;
LABEL_1561:
              if (v1596 >= v1686)
                goto LABEL_1847;
              __szh = v1596;
              v1688 = 0;
              v1689 = 0;
              v1690 = *v2063;
              while (1)
              {
                v1691 = *(_QWORD *)(v1690 + 8 * (v1689 >> 6));
                if ((v1691 & (1 << v1689)) == 0)
                {
                  v1692 = *v2041;
                  v1693 = *(double *)(*v2041 + v1688);
                  if (v1693 <= 6.28318531)
                  {
                    v1716 = *(double *)(v1692 + v1688 + 8);
                  }
                  else
                  {
                    v1694 = *(_QWORD *)(v1594 + 8 * v1689);
                    v1695 = *(_BYTE *)(v1694 + 192) ? v1694 + 40 : 0;
                    _Q1 = *(_OWORD *)(v1695 + 8);
                    v1697 = (double *)v2020[2];
                    v1698 = v2020[4];
                    v1699 = (double *)v2020[6];
                    v1700 = *(double *)&_Q1 - *v1697;
                    *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1697[1];
                    v1701 = *(double *)(v1695 + 24) - v1697[2];
                    *(_QWORD *)&v1702.f64[0] = (*v2020)[1].i64[0];
                    _Q7 = (*v2020)[3];
                    *(_QWORD *)&v1702.f64[1] = (*v2020)[2].i64[1];
                    v1704 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), v1700), (float64x2_t)vzip2q_s64(**v2020, *(int64x2_t *)((char *)*v2020 + 24)), *(double *)&_Q1), v1702, v1701);
                    __asm { FMLA            D2, D1, V7.D[1] }
                    v1706 = _D2 + *(double *)(*v2020)[4].i64 * v1701;
                    _D2 = v1704.f64[1] - v1699[1];
                    v1708 = v1706 - v1699[2];
                    *(_QWORD *)&v1702.f64[0] = v1698[1].i64[0];
                    _Q7 = v1698[3];
                    *(_QWORD *)&v1702.f64[1] = v1698[2].i64[1];
                    __dstb = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), v1704.f64[0] - *v1699), (float64x2_t)vzip2q_s64(*v1698, *(int64x2_t *)((char *)v1698 + 24)), _D2), v1702, v1708);
                    __asm { FMLA            D1, D2, V7.D[1] }
                    v1710 = *(double *)&_Q1 + *(double *)v1698[4].i64 * v1708;
                    *(float *)&v1708 = __dstb.f64[0];
                    *(float *)&_Q1 = v1710;
                    v1711 = v1594;
                    v1693 = atan2f(*(float *)&v1708, *(float *)&_Q1) + 3.14159265;
                    v1712 = (double *)(v1692 + v1688);
                    *v1712 = v1693;
                    v1713 = __dstb.f64[1];
                    v1714 = sqrt(vmulq_f64(__dstb, __dstb).f64[0] + v1710 * v1710);
                    v1715 = atan2f(v1713, v1714);
                    v1594 = v1711;
                    v1716 = v1715 + 1.57079633;
                    v1712[1] = v1716;
                  }
                  v1717 = (unint64_t)(v1716 * 3.81971863) - ((unint64_t)(v1716 * 3.81971863) == 12);
                  v1718 = v2035
                        + 48 * ((unint64_t)(v1693 * 3.81971863) - ((unint64_t)(v1693 * 3.81971863) == 24));
                  v1719 = *(unsigned int *)(v1718 + 4 * v1717);
                  if (v1687 > v1719)
                  {
                    ++__szh;
                    *(_QWORD *)(v1690 + 8 * (v1689 >> 6)) = v1691 | (1 << v1689);
                    if (++v2029 >= v2023)
                    {
LABEL_1560:
                      ++v1687;
                      v1596 = __szh;
                      if (v2029 >= v2023)
                        goto LABEL_1847;
                      goto LABEL_1561;
                    }
                    *(_DWORD *)(v1718 + 4 * v1717) = v1719 + 1;
                  }
                }
                ++v1689;
                v1688 += 16;
                if (v1686 == v1689)
                  goto LABEL_1560;
              }
            }
            goto LABEL_1487;
          }
        }
        else
        {
          if (v1639 >= *(_QWORD *)&v1632)
            v1639 %= *(_QWORD *)&v1632;
          if (v1639 != v1635)
            goto LABEL_1531;
        }
        v1637 = (uint64_t *)*v1637;
        if (!v1637)
          goto LABEL_1531;
      }
    }
    v1547 = *(double *)(v2068 + 1992);
    v1548 = *(double *)(v2068 + 2000);
    v1549 = *(double *)(v2068 + 2008);
    v1550 = *(double *)(v2068 + 2016);
    v1551 = *(double *)(v2068 + 2024);
    v1552 = *(_DWORD *)(v2068 + 2100);
    v2028 = *(unsigned __int8 *)(v2068 + 2116);
    memset(v2183, 0, 24);
    v1553 = *(_QWORD **)(v2068 + 8);
    v1554 = v1553[39];
    v2003 = v1552;
    if (v1554)
    {
      if (v1554 >> 62)
        sub_20E867F44();
      v1555 = operator new(4 * v1554);
      v1554 = (unint64_t)&v1555[v1554];
      *(_QWORD *)v2183 = v1555;
      *(_QWORD *)&v2183[8] = v1555;
      *(_QWORD *)&v2183[16] = v1554;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
        goto LABEL_1422;
    }
    else
    {
      v1555 = 0;
      v1556 = (_QWORD *)v1553[37];
      if (v1556 != v1553 + 38)
      {
LABEL_1422:
        v2034 = v1503;
        v2040 = v1502;
        __szg = v1502 - v1503;
        v2061 = (v1502 - v1503) >> 3;
        v1557 = v1555;
        v1558 = v1555;
        while (1)
        {
          if (!(unsigned __int16)*((_DWORD *)v1556 + 8))
            goto LABEL_1427;
          v1559 = HIWORD(*((_DWORD *)v1556 + 8));
          if ((unint64_t)v1557 < v1554)
          {
            *v1557++ = v1559;
            v1555 = v1557;
LABEL_1427:
            v1560 = (_QWORD *)v1556[1];
            if (v1560)
              goto LABEL_1446;
            goto LABEL_1448;
          }
          v1561 = ((char *)v1557 - v1558) >> 2;
          v1562 = v1561 + 1;
          if ((unint64_t)(v1561 + 1) >> 62)
          {
            *(_QWORD *)&v2183[8] = v1555;
            sub_20E867F44();
          }
          if ((uint64_t)(v1554 - (_QWORD)v1558) >> 1 > v1562)
            v1562 = (uint64_t)(v1554 - (_QWORD)v1558) >> 1;
          if (v1554 - (unint64_t)v1558 >= 0x7FFFFFFFFFFFFFFCLL)
            v1563 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1563 = v1562;
          if (v1563)
          {
            if (v1563 >> 62)
            {
              *(_QWORD *)&v2183[8] = v1555;
              sub_20E877A38();
            }
            v1564 = operator new(4 * v1563);
            v1565 = &v1564[4 * v1561];
            *v1565 = v1559;
            v1555 = v1565 + 1;
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1443;
          }
          else
          {
            v1564 = 0;
            v1565 = (_DWORD *)(4 * v1561);
            *(_DWORD *)(4 * v1561) = v1559;
            v1555 = (_DWORD *)(4 * v1561 + 4);
            v1566 = (char *)v1557 - v1558;
            if (v1557 == (_DWORD *)v1558)
              goto LABEL_1443;
          }
          v1567 = v1566 - 4;
          if (v1567 < 0xBC)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          v1571 = ((char *)(v1557 - 1) - v1558) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v1564[(char *)v1557 - v1558 - 4 - v1571] > &v1564[(char *)v1557 - v1558 - 4])
          {
            v1568 = v1557;
            do
            {
LABEL_1442:
              v1569 = *--v1568;
              *--v1565 = v1569;
            }
            while (v1568 != (_DWORD *)v1558);
            goto LABEL_1443;
          }
          if ((_DWORD *)((char *)v1557 - v1571 - 4) > v1557 - 1)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          if ((unint64_t)(v1558 - v1564) < 0x20)
          {
            v1568 = v1557;
            goto LABEL_1442;
          }
          v1572 = (v1567 >> 2) + 1;
          v1573 = 4 * (v1572 & 0x7FFFFFFFFFFFFFF8);
          v1568 = &v1557[v1573 / 0xFFFFFFFFFFFFFFFCLL];
          v1565 = (_DWORD *)((char *)v1565 - v1573);
          v1574 = &v1564[4 * v1561 - 16];
          v1575 = (__int128 *)(v1557 - 4);
          v1576 = v1572 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v1577 = *v1575;
            *(v1574 - 1) = *(v1575 - 1);
            *v1574 = v1577;
            v1574 -= 2;
            v1575 -= 2;
            v1576 -= 8;
          }
          while (v1576);
          if (v1572 != (v1572 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_1442;
LABEL_1443:
          v1554 = (unint64_t)&v1564[4 * v1563];
          *(_QWORD *)v2183 = v1565;
          *(_QWORD *)&v2183[16] = v1554;
          if (v1558)
            operator delete(v1558);
          v1557 = v1555;
          v1558 = v1565;
          v1560 = (_QWORD *)v1556[1];
          if (v1560)
          {
            do
            {
LABEL_1446:
              v1570 = v1560;
              v1560 = (_QWORD *)*v1560;
            }
            while (v1560);
            goto LABEL_1423;
          }
          do
          {
LABEL_1448:
            v1570 = (_QWORD *)v1556[2];
            _ZF = *v1570 == (_QWORD)v1556;
            v1556 = v1570;
          }
          while (!_ZF);
LABEL_1423:
          v1553 = *(_QWORD **)(v2068 + 8);
          v1556 = v1570;
          if (v1570 == v1553 + 38)
          {
            *(_QWORD *)&v2183[8] = v1555;
            v1505 = v2061;
            v1504 = __szg;
            memset(object, 0, 48);
            if (v2040 == v2034)
              goto LABEL_1474;
LABEL_1576:
            v1585 = v2068;
            if (v1504 >= 0x7FFFFFFFFFFFFFF9)
              sub_20E867F44();
            v1720 = 2 * v1504;
            v1584 = (double *)operator new(v1720);
            *(_QWORD *)object = v1584;
            *(_QWORD *)&object[8] = v1584;
            v2062 = &v1584[2 * v1505];
            *(_QWORD *)&object[16] = v2062;
            v1583 = (double *)operator new(v1720);
            *(_QWORD *)&object[24] = v1583;
            *(_QWORD *)&object[32] = v1583;
            v2007 = (char *)&v1583[2 * v1505];
            *(_QWORD *)&object[40] = v2007;
            goto LABEL_1578;
          }
        }
      }
    }
    memset(object, 0, 48);
    if (v1502 != v1503)
      goto LABEL_1576;
LABEL_1474:
    v2007 = 0;
    v2062 = 0;
    v1583 = 0;
    v1584 = 0;
    v1585 = v2068;
LABEL_1578:
    v2150[0] = operator new(0x10uLL);
    v2150[1] = v2150[0];
    *(_QWORD *)v2151 = (char *)v2150[0] + 16;
    v1725 = *(uint64_t **)(v1585 + 24);
    __dst = *(uint64_t **)(v1585 + 32);
    if (v1725 == __dst)
    {
      v1726 = 0;
      v2018 = 0;
      v1802 = (uint64_t)v1583;
      v1728 = v1583;
      v1727 = v1584;
      v1803 = 0;
      goto LABEL_1728;
    }
    v1726 = 0;
    v2018 = 0;
    v2021 = (uint64_t *)v1553[6];
    v1727 = v1584;
    v1728 = v1583;
    while (1)
    {
      v1730 = *(_QWORD *)(*v1725 + 200);
      v1731 = *(unsigned __int16 *)(v1730 + 18);
      v1732 = (unint64_t)(*(_QWORD *)(*v1725 + 208) - v1730) >> 6;
      if (!(_DWORD)v1732)
      {
        v1757 = -1000.0;
        v1758 = *(_DWORD *)(*v1725 + 32);
        if (!v2028)
          goto LABEL_1676;
        goto LABEL_1672;
      }
      v2042 = v1726;
      v2150[1] = v2150[0];
      v1733 = *v1725;
      v1735 = *(uint64_t **)(*v1725 + 200);
      v1734 = *(uint64_t **)(*v1725 + 208);
      if (v1735 != v1734)
        break;
      v1736 = *(_QWORD *)(v2068 + 8);
      v1737 = (uint64_t *)(v1736 + 56);
      v1738 = *(uint64_t **)(v1736 + 56);
      v1739 = v2021;
      if (!v1738)
        goto LABEL_1613;
LABEL_1602:
      v1747 = *v1735;
      v1748 = *((_DWORD *)v1735 + 2);
      v1749 = v1737;
      do
      {
        v1750 = v1738[4];
        if (v1750 < v1747)
        {
          ++v1738;
        }
        else if (v1750 == v1747)
        {
          if (*((_DWORD *)v1738 + 10) < v1748)
            ++v1738;
          else
            v1749 = v1738;
        }
        else
        {
          v1749 = v1738;
        }
        v1738 = (uint64_t *)*v1738;
      }
      while (v1738);
      if (v1749 == v1737 || (v1751 = v1749[4], v1747 < v1751) || v1747 == v1751 && *((_DWORD *)v1749 + 10) > v1748)
LABEL_1613:
        v1749 = v1737;
      v2036 = v1731;
      v1752 = v1583;
      if (v1739 == v1749)
      {
        v1753 = 0;
      }
      else
      {
        v1753 = 0;
        v1754 = v1739;
        do
        {
          v1755 = (uint64_t *)v1754[1];
          if (v1755)
          {
            do
            {
              v1756 = v1755;
              v1755 = (uint64_t *)*v1755;
            }
            while (v1755);
          }
          else
          {
            do
            {
              v1756 = (uint64_t *)v1754[2];
              _ZF = *v1756 == (_QWORD)v1754;
              v1754 = v1756;
            }
            while (!_ZF);
          }
          ++v1753;
          v1754 = v1756;
        }
        while (v1756 != v1749);
      }
      __szi = 0.0;
      if (v1550 == 0.0)
      {
        v1759 = 0.0;
LABEL_1644:
        v1726 = v2042;
        if (v1551 == 0.0)
          goto LABEL_1671;
LABEL_1666:
        v1777 = *(_QWORD *)(v1733 + 200);
        v1778 = *(_QWORD *)(v1733 + 208);
        while (v1778 != v1777)
        {
          v1779 = v1778 - 64;
          v1780 = *(_DWORD *)(v1778 - 48);
          v1778 -= 64;
          if (v1780 == *(_DWORD *)(v1777 + 16))
          {
            v1777 = v1779 + 64;
            break;
          }
        }
        _Q1 = *(_OWORD *)(v1777 - 24);
        _D2 = *(_QWORD *)(v1777 - 16);
        __asm { FMLA            D3, D2, V1.D[1] }
        __szi = *(double *)&_D3;
        goto LABEL_1671;
      }
      v1759 = 15.0;
      if (*(_QWORD *)(v1733 + 208) - (_QWORD)v1735 < 0x80uLL)
        goto LABEL_1644;
      v1760 = *((_DWORD *)v1735 + 4);
      v1761 = *(_QWORD *)(v1736 + 1768);
      if (!v1761)
        goto LABEL_1639;
      v1762 = v1736 + 1768;
      v1763 = v1736 + 1768;
      do
      {
        v1764 = *(_DWORD *)(v1761 + 32);
        v1765 = v1764 >= v1760;
        if (v1764 >= v1760)
          v1766 = (uint64_t *)v1761;
        else
          v1766 = (uint64_t *)(v1761 + 8);
        if (v1765)
          v1763 = v1761;
        v1761 = *v1766;
      }
      while (*v1766);
      if (v1763 != v1762 && *(_DWORD *)(v1763 + 32) <= v1760)
      {
        v1767 = *(_QWORD *)(v1763 + 40);
        v1768 = *(_DWORD *)(v1767 + 992);
        if (v1768 != -1)
        {
LABEL_1640:
          if (v1768 <= 7)
            goto LABEL_1641;
          goto LABEL_1652;
        }
      }
      else
      {
LABEL_1639:
        v1767 = 0;
        v1768 = MEMORY[0x3E0];
        if (MEMORY[0x3E0] != -1)
          goto LABEL_1640;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1885;
      }
      v1768 = *(_DWORD *)(v1767 + 992);
      if (v1768 <= 7)
      {
LABEL_1641:
        if (!v1768)
        {
LABEL_1880:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          goto LABEL_1886;
        }
LABEL_1653:
        v2015 = *(double *)(v1767 + 16);
        goto LABEL_1654;
      }
LABEL_1652:
      if (v1768 < 0xF)
        goto LABEL_1653;
      v2015 = *(double *)(v1767 + 16);
      if (v1768 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_1885:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
LABEL_1886:
          abort();
        }
        if (!*(_DWORD *)(v1767 + 992))
          goto LABEL_1880;
      }
LABEL_1654:
      v1769 = *(float32x2_t **)(v1733 + 200);
      v1770 = *(float32x2_t **)(v1733 + 208);
      if (v1769 == v1770)
      {
        LODWORD(v1722) = 0;
        v1772 = 0;
      }
      else
      {
        v1771 = 0;
        v1772 = 0;
        v1773 = 1.0;
        LODWORD(v1722) = 0;
        do
        {
          while (v1769[2].i32[0] != v1760)
          {
            _D3 = v1724;
            v1769 += 8;
            if (v1769 == v1770)
              goto LABEL_1663;
          }
          _D3 = v1769[4];
          if ((v1771 & 1) != 0)
          {
            v1772 = vadd_f32(v1772, vmul_n_f32(vsub_f32(_D3, v1724), v1773));
            *(float *)&v1722 = *(float *)&v1722 + v1773;
            v1773 = v1773 * 1.2;
          }
          v1771 = 1;
          v1769 += 8;
          v1724 = _D3;
        }
        while (v1769 != v1770);
      }
LABEL_1663:
      v1774.f64[0] = v2015;
      v1774.f64[1] = *(float64_t *)(v1767 + 40);
      *(float32x2_t *)&v1774.f64[0] = vcvt_f32_f64(v1774);
      v1775 = vdiv_f32(v1772, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v1722, 0));
      v1776 = vdiv_f32(vsub_f32((float32x2_t)vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)&v1774.f64[0], *(float32x2_t *)&v1774.f64[0]), (int8x8_t)vcgtz_f32(v1775)), _D3), v1775);
      if (v1776.f32[1] < v1776.f32[0])
        v1776.f32[0] = v1776.f32[1];
      v1759 = fminf(fmaxf(v1776.f32[0], 0.0), 15.0);
      v1733 = *v1725;
      v1726 = v2042;
      if (v1551 != 0.0)
        goto LABEL_1666;
LABEL_1671:
      *(double *)&v1721 = v1550 * v1759
                        + v1549 * (double)v1753
                        + v1548 * (double)v1732
                        + v1547 * (double)(unint64_t)((((char *)v2150[1] - (char *)v2150[0]) >> 2) - 1);
      v1722 = v1551 * __szi;
      v1757 = v1551 * __szi + *(double *)&v1721;
      v1583 = v1752;
      v1731 = v2036;
      v1758 = *(_DWORD *)(v1733 + 32);
      if (!v2028)
        goto LABEL_1676;
LABEL_1672:
      v1783 = *(__int32 **)&v2183[8];
      v1784 = wmemchr(*(__int32 **)v2183, v1731, (uint64_t)(*(_QWORD *)&v2183[8] - *(_QWORD *)v2183) >> 2);
      if (v1784)
        v1785 = v1784;
      else
        v1785 = v1783;
      if (v1785 != v1783 || *(_QWORD *)v2183 == *(_QWORD *)&v2183[8])
      {
LABEL_1676:
        if (v1584 >= v2062)
        {
          v1786 = ((char *)v1584 - (char *)v1727) >> 4;
          v1787 = v1786 + 1;
          if ((unint64_t)(v1786 + 1) >> 60)
            goto LABEL_1870;
          if (v2062 - v1727 > v1787)
            v1787 = v2062 - v1727;
          if ((unint64_t)((char *)v2062 - (char *)v1727) >= 0x7FFFFFFFFFFFFFF0)
            v1788 = 0xFFFFFFFFFFFFFFFLL;
          else
            v1788 = v1787;
          if (v1788)
          {
            if (v1788 >> 60)
              goto LABEL_1872;
            v1789 = (char *)operator new(16 * v1788);
            v1790 = (uint64_t)&v1789[16 * v1786];
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
            {
LABEL_1686:
              v1791 = v1790;
              do
              {
                v1792 = (double *)(v1791 - 16);
                v1721 = *((_OWORD *)v1584 - 1);
                *(_OWORD *)(v1791 - 16) = v1721;
                v1584 -= 2;
                v1791 -= 16;
              }
              while (v1584 != v1727);
              v2062 = (double *)&v1789[16 * v1788];
              v1584 = (double *)(v1790 + 16);
              if (!v1727)
                goto LABEL_1690;
LABEL_1689:
              operator delete(v1727);
LABEL_1690:
              v1727 = v1792;
              goto LABEL_1581;
            }
          }
          else
          {
            v1789 = 0;
            v1790 = 16 * v1786;
            *(double *)v1790 = v1757;
            *(_DWORD *)(v1790 + 8) = v1758;
            if (v1584 != v1727)
              goto LABEL_1686;
          }
          v1792 = (double *)v1790;
          v2062 = (double *)&v1789[16 * v1788];
          v1584 = (double *)(v1790 + 16);
          if (!v1727)
            goto LABEL_1690;
          goto LABEL_1689;
        }
        *v1584 = v1757;
        *((_DWORD *)v1584 + 2) = v1758;
        v1584 += 2;
LABEL_1581:
        v1729 = *v1725++;
        if (*(_DWORD *)(v1729 + 224) == 2)
          ++v1726;
        if (v1725 == __dst)
        {
LABEL_1722:
          v1802 = (uint64_t)v1583;
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          v1803 = ((char *)v1584 - (char *)v1727) >> 4;
          if ((char *)v1584 - (char *)v1727 >= 1)
          {
            v1804 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1805 = ((char *)v1584 - (char *)v1727) >> 4;
            while (1)
            {
              v1806 = (double *)operator new(16 * v1805, v1804);
              if (v1806)
                break;
              v1506 = v1805 > 1;
              v1805 >>= 1;
              if (!v1506)
                goto LABEL_1728;
            }
            v1810 = v1806;
            sub_20F7BC404((uint64_t)v1727, v1584, ((char *)v1584 - (char *)v1727) >> 4, v1806, v1805, *(double *)&v1721);
            operator delete(v1810);
            v1808 = ((uint64_t)v1728 - v1802) >> 4;
            v1809 = v2003;
            if ((uint64_t)v1728 - v1802 < 1)
            {
LABEL_1734:
              sub_20F7BC404(v1802, v1728, v1808, 0, 0, v1807);
              v1814 = v2150[0];
              v1815 = v2018;
              if (!v2150[0])
              {
LABEL_1736:
                if (*(_QWORD *)v2183)
                {
                  *(_QWORD *)&v2183[8] = *(_QWORD *)v2183;
                  operator delete(*(void **)v2183);
                }
                v1816 = *(_QWORD *)&object[8];
                v1817 = *(_QWORD *)object;
                v1818 = ((*(_QWORD *)&object[8] - *(_QWORD *)object) >> 4) - v1726;
                v1819 = *(unsigned int **)&object[24];
                v1820 = (*(_QWORD *)&object[32] - *(_QWORD *)&object[24]) >> 4;
                v1821 = v1820 - v1815;
                v1822 = v1820 - v1815 + v1818;
                v1823 = v2023 - (v1726 + v1815);
                v1824 = v1822 - v1823;
                if (v1822 > v1823)
                {
                  if ((_DWORD)v1820 == v1815)
                  {
                    v1825 = 0;
                  }
                  else if (v1821 < v1809 || v1824 > v1822 - v1809)
                  {
                    if (v1821 >= v1823)
                      v1825 = v1821 - v1823;
                    else
                      v1825 = 0;
                    v1824 -= v1825;
                  }
                  else
                  {
                    _CF = v1818 >= v1823 - v1809;
                    v1827 = v1818 - (v1823 - v1809);
                    if (!_CF)
                      v1827 = 0;
                    v1825 = v1824 - v1827;
                    v1824 = v1827;
                  }
                  v1828 = (_DWORD *)(v2068 + 6632);
                  if (*(_QWORD *)object != *(_QWORD *)&object[8] && v1824)
                  {
                    do
                    {
                      v1829 = *(unsigned int *)(v1817 + 8);
                      v1830 = *(char **)(v2068 + 5560);
                      v1831 = *(char **)(v2068 + 5568);
                      if (v1831 != v1830)
                      {
                        v1832 = (v1831 - v1830) >> 4;
                        do
                        {
                          v1833 = v1832 >> 1;
                          v1834 = (unsigned int *)&v1830[16 * (v1832 >> 1)];
                          v1836 = *v1834;
                          v1835 = (char *)(v1834 + 4);
                          v1832 += ~(v1832 >> 1);
                          if (v1836 < v1829)
                            v1830 = v1835;
                          else
                            v1832 = v1833;
                        }
                        while (v1832);
                      }
                      if (v1830 == v1831 || *(_DWORD *)v1830 != (_DWORD)v1829)
                        v1830 = *(char **)(v2068 + 5568);
                      v1837 = *(int8x8_t *)(v2068 + 3112);
                      if (v1837)
                      {
                        v1838 = (uint8x8_t)vcnt_s8(v1837);
                        v1838.i16[0] = vaddlv_u8(v1838);
                        if (v1838.u32[0] > 1uLL)
                        {
                          v1839 = *(unsigned int *)(v1817 + 8);
                          if (*(_QWORD *)&v1837 <= v1829)
                            v1839 = v1829 % *(_QWORD *)&v1837;
                        }
                        else
                        {
                          v1839 = (v1837.i32[0] - 1) & v1829;
                        }
                        v1840 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1839);
                        if (v1840)
                        {
                          v1841 = *v1840;
                          if (v1841)
                          {
                            if (v1838.u32[0] < 2uLL)
                            {
                              v1842 = *(_QWORD *)&v1837 - 1;
                              while (1)
                              {
                                v1844 = v1841[1];
                                if (v1844 == v1829)
                                {
                                  if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                    goto LABEL_1757;
                                }
                                else if ((v1844 & v1842) != v1839)
                                {
                                  goto LABEL_1787;
                                }
                                v1841 = (uint64_t *)*v1841;
                                if (!v1841)
                                  goto LABEL_1787;
                              }
                            }
                            do
                            {
                              v1843 = v1841[1];
                              if (v1843 == v1829)
                              {
                                if (*((_DWORD *)v1841 + 4) == (_DWORD)v1829)
                                  goto LABEL_1757;
                              }
                              else
                              {
                                if (v1843 >= *(_QWORD *)&v1837)
                                  v1843 %= *(_QWORD *)&v1837;
                                if (v1843 != v1839)
                                  break;
                              }
                              v1841 = (uint64_t *)*v1841;
                            }
                            while (v1841);
                          }
                        }
                      }
LABEL_1787:
                      if (v1830 != v1831)
                      {
                        if (sub_20F623A0C((uint64_t)v2005, v1829))
                        {
                          *(_WORD *)(v2068 + 6636) = 0;
                          *v1828 = 0;
                        }
                        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                        {
LABEL_1878:
                          abort();
                        }
                        v1845 = *(_QWORD *)(v2068 + 24);
                        v1846 = *(_QWORD *)(v2068 + 32);
                        if (v1845 != v1846)
                        {
                          while (*(_DWORD *)(v1817 + 8) != *(_DWORD *)(*(_QWORD *)v1845 + 32))
                          {
                            v1845 += 8;
                            if (v1845 == v1846)
                              goto LABEL_1794;
                          }
                        }
                        if (v1845 == v1846)
                        {
LABEL_1794:
                          v1847 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                          v1845 = v1846;
                          if (v1847)
LABEL_1840:
                            abort();
                        }
                        *(_DWORD *)(*(_QWORD *)v1845 + 224) = 0;
                        if (!--v1824)
                          break;
                      }
LABEL_1757:
                      v1817 += 16;
                    }
                    while (v1817 != v1816);
                    v1819 = *(unsigned int **)&object[24];
                  }
                  if (v1825)
                  {
                    v1848 = *(unsigned int **)&object[32];
                    if (v1819 != *(unsigned int **)&object[32])
                    {
                      do
                      {
                        v1849 = v1819[2];
                        v1850 = *(char **)(v2068 + 5560);
                        v1851 = *(char **)(v2068 + 5568);
                        if (v1851 != v1850)
                        {
                          v1852 = (v1851 - v1850) >> 4;
                          do
                          {
                            v1853 = v1852 >> 1;
                            v1854 = (unsigned int *)&v1850[16 * (v1852 >> 1)];
                            v1856 = *v1854;
                            v1855 = (char *)(v1854 + 4);
                            v1852 += ~(v1852 >> 1);
                            if (v1856 < v1849)
                              v1850 = v1855;
                            else
                              v1852 = v1853;
                          }
                          while (v1852);
                        }
                        if (v1850 == v1851 || *(_DWORD *)v1850 != (_DWORD)v1849)
                          v1850 = *(char **)(v2068 + 5568);
                        v1857 = *(int8x8_t *)(v2068 + 3112);
                        if (v1857)
                        {
                          v1858 = (uint8x8_t)vcnt_s8(v1857);
                          v1858.i16[0] = vaddlv_u8(v1858);
                          if (v1858.u32[0] >= 2uLL)
                          {
                            v1859 = v1819[2];
                            if (*(_QWORD *)&v1857 <= v1849)
                              v1859 = v1849 % *(_QWORD *)&v1857;
                          }
                          else
                          {
                            v1859 = (v1857.i32[0] - 1) & v1849;
                          }
                          v1860 = *(uint64_t ***)(*(_QWORD *)(v2068 + 3104) + 8 * v1859);
                          if (v1860)
                          {
                            v1861 = *v1860;
                            if (v1861)
                            {
                              if (v1858.u32[0] < 2uLL)
                              {
                                v1862 = *(_QWORD *)&v1857 - 1;
                                while (1)
                                {
                                  v1864 = v1861[1];
                                  if (v1864 == v1849)
                                  {
                                    if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                      goto LABEL_1802;
                                  }
                                  else if ((v1864 & v1862) != v1859)
                                  {
                                    goto LABEL_1832;
                                  }
                                  v1861 = (uint64_t *)*v1861;
                                  if (!v1861)
                                    goto LABEL_1832;
                                }
                              }
                              do
                              {
                                v1863 = v1861[1];
                                if (v1863 == v1849)
                                {
                                  if (*((_DWORD *)v1861 + 4) == (_DWORD)v1849)
                                    goto LABEL_1802;
                                }
                                else
                                {
                                  if (v1863 >= *(_QWORD *)&v1857)
                                    v1863 %= *(_QWORD *)&v1857;
                                  if (v1863 != v1859)
                                    break;
                                }
                                v1861 = (uint64_t *)*v1861;
                              }
                              while (v1861);
                            }
                          }
                        }
LABEL_1832:
                        if (v1850 != v1851)
                        {
                          if ((sub_20F623A0C((uint64_t)v2005, v1849) & 1) != 0)
                          {
                            *(_WORD *)(v2068 + 6636) = 0;
                            *v1828 = 0;
                          }
                          else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2336, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a variable.", 28, (void (*)(void **))sub_21023DDB0))
                          {
                            goto LABEL_1878;
                          }
                          v1865 = *(_QWORD *)(v2068 + 24);
                          v1866 = *(_QWORD *)(v2068 + 32);
                          if (v1865 != v1866)
                          {
                            while (v1819[2] != *(_DWORD *)(*(_QWORD *)v1865 + 32))
                            {
                              v1865 += 8;
                              if (v1865 == v1866)
                                goto LABEL_1839;
                            }
                          }
                          if (v1865 == v1866)
                          {
LABEL_1839:
                            v1867 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2343, (uint64_t)"track_iter != viobadata_ref_.front_end_tracks.end()", 51, (uint64_t)"Failed to find the track in the the front-end tracks.", 53, (void (*)(void **))sub_21023DDB0);
                            v1865 = v1866;
                            if (v1867)
                              goto LABEL_1840;
                          }
                          *(_DWORD *)(*(_QWORD *)v1865 + 224) = 0;
                          if (!--v1825)
                            break;
                        }
LABEL_1802:
                        v1819 += 4;
                      }
                      while (v1819 != v1848);
                      v1819 = *(unsigned int **)&object[24];
                    }
                  }
                }
                v1501 = (uint64_t *)v2068;
                if (v1819)
                {
                  *(_QWORD *)&object[32] = v1819;
                  operator delete(v1819);
                }
                if (*(_QWORD *)object)
                {
                  *(_QWORD *)&object[8] = *(_QWORD *)object;
                  operator delete(*(void **)object);
                }
                goto LABEL_1359;
              }
LABEL_1735:
              v2150[1] = v1814;
              operator delete(v1814);
              goto LABEL_1736;
            }
LABEL_1731:
            v1811 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v1812 = v1808;
            while (1)
            {
              v1813 = (double *)operator new(16 * v1812, v1811);
              if (v1813)
                break;
              v1506 = v1812 > 1;
              v1812 >>= 1;
              if (!v1506)
                goto LABEL_1734;
            }
            v1826 = v1813;
            sub_20F7BC404(v1802, v1728, v1808, v1813, v1812, v1807);
            operator delete(v1826);
            v1814 = v2150[0];
            v1815 = v2018;
            if (!v2150[0])
              goto LABEL_1736;
            goto LABEL_1735;
          }
LABEL_1728:
          v1807 = sub_20F7BC404((uint64_t)v1727, v1584, v1803, 0, 0, *(double *)&v1721);
          v1808 = ((uint64_t)v1728 - v1802) >> 4;
          v1809 = v2003;
          if ((uint64_t)v1728 - v1802 < 1)
            goto LABEL_1734;
          goto LABEL_1731;
        }
      }
      else
      {
        if (v1728 >= (double *)v2007)
        {
          v1793 = ((char *)v1728 - (char *)v1583) >> 4;
          v1794 = v1793 + 1;
          if (!((unint64_t)(v1793 + 1) >> 60))
          {
            if ((v2007 - (char *)v1583) >> 3 > v1794)
              v1794 = (v2007 - (char *)v1583) >> 3;
            if ((unint64_t)(v2007 - (char *)v1583) >= 0x7FFFFFFFFFFFFFF0)
              v1795 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1795 = v1794;
            if (!v1795)
            {
              v1796 = 0;
              v1797 = 16 * v1793;
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
                goto LABEL_1706;
              goto LABEL_1720;
            }
            if (!(v1795 >> 60))
            {
              v1796 = (char *)operator new(16 * v1795);
              v1797 = (uint64_t)&v1796[16 * v1793];
              *(double *)v1797 = v1757;
              *(_DWORD *)(v1797 + 8) = v1758;
              if (v1728 != v1583)
              {
LABEL_1706:
                v1798 = v1797;
                do
                {
                  v1799 = (double *)(v1798 - 16);
                  v1721 = *((_OWORD *)v1728 - 1);
                  *(_OWORD *)(v1798 - 16) = v1721;
                  v1728 -= 2;
                  v1798 -= 16;
                }
                while (v1728 != v1583);
                v1728 = (double *)(v1797 + 16);
                *(_QWORD *)&object[24] = v1799;
                v2007 = &v1796[16 * v1795];
                *(_QWORD *)&object[40] = v2007;
                if (!v1583)
                  goto LABEL_1710;
LABEL_1709:
                operator delete(v1583);
LABEL_1710:
                v1583 = v1799;
                goto LABEL_1711;
              }
LABEL_1720:
              v1799 = (double *)v1797;
              v1728 = (double *)(v1797 + 16);
              *(_QWORD *)&object[24] = v1797;
              v2007 = &v1796[16 * v1795];
              *(_QWORD *)&object[40] = v2007;
              if (!v1583)
                goto LABEL_1710;
              goto LABEL_1709;
            }
LABEL_1872:
            *(_QWORD *)&object[32] = v1728;
            *(_QWORD *)&object[16] = v2062;
            *(_QWORD *)&object[8] = v1584;
            *(_QWORD *)object = v1727;
            sub_20E877A38();
          }
LABEL_1870:
          *(_QWORD *)&object[32] = v1728;
          *(_QWORD *)&object[16] = v2062;
          *(_QWORD *)&object[8] = v1584;
          *(_QWORD *)object = v1727;
          sub_20E867F44();
        }
        *v1728 = v1757;
        *((_DWORD *)v1728 + 2) = v1758;
        v1728 += 2;
LABEL_1711:
        v1800 = *v1725++;
        v1801 = v2018;
        if (*(_DWORD *)(v1800 + 224) == 2)
          v1801 = v2018 + 1;
        v2018 = v1801;
        if (v1725 == __dst)
          goto LABEL_1722;
      }
    }
    while (1)
    {
      v1740 = *((_DWORD *)v1735 + 4);
      v1741 = v2150[0];
      if (v2150[1] == v2150[0])
      {
        v1741 = v2150[1];
      }
      else
      {
        v1742 = ((char *)v2150[1] - (char *)v2150[0]) >> 2;
        do
        {
          v1743 = v1742 >> 1;
          v1744 = &v1741[v1742 >> 1];
          v1746 = *v1744;
          v1745 = v1744 + 1;
          v1742 += ~(v1742 >> 1);
          if (v1746 < v1740)
            v1741 = v1745;
          else
            v1742 = v1743;
        }
        while (v1742);
        if (v2150[1] != v1741 && *v1741 == v1740)
          goto LABEL_1589;
      }
      sub_20EDB3C7C(v2150, v1741, (char *)v1735 + 16);
LABEL_1589:
      v1735 += 8;
      if (v1735 == v1734)
      {
        v1733 = *v1725;
        v1735 = *(uint64_t **)(*v1725 + 200);
        v1736 = *(_QWORD *)(v2068 + 8);
        v1737 = (uint64_t *)(v1736 + 56);
        v1738 = *(uint64_t **)(v1736 + 56);
        v1739 = v2021;
        if (v1738)
          goto LABEL_1602;
        goto LABEL_1613;
      }
    }
  }
LABEL_1359:
  v1507 = v1501[6];
  v1508 = v1501[7];
  if (v1507 != v1508)
  {
    v1509 = (_DWORD *)(v2068 + 6632);
    do
    {
      if (0x86BCA1AF286BCA1BLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v1507 + 984) - *(_QWORD *)(*(_QWORD *)v1507 + 976)) >> 3) < v2067)
      {
        v1510 = *(_DWORD *)(*(_QWORD *)v1507 + 32);
        v1511 = *(char **)(v2068 + 5560);
        v1512 = *(char **)(v2068 + 5568);
        if (v1512 != v1511)
        {
          v1513 = (v1512 - v1511) >> 4;
          do
          {
            v1514 = v1513 >> 1;
            v1515 = (unsigned int *)&v1511[16 * (v1513 >> 1)];
            v1517 = *v1515;
            v1516 = (char *)(v1515 + 4);
            v1513 += ~(v1513 >> 1);
            if (v1517 < v1510)
              v1511 = v1516;
            else
              v1513 = v1514;
          }
          while (v1513);
        }
        if (v1511 != v1512 && *(_DWORD *)v1511 == v1510)
        {
          v1518 = sub_20F623A0C((uint64_t)v2005, v1510);
          v1519 = v1518;
          if (v1518)
          {
            *(_WORD *)(v2068 + 6636) = 0;
            *v1509 = 0;
          }
          if (!sub_20F623A0C((uint64_t)v2005, *(_DWORD *)(*(_QWORD *)v1507 + 32) + 1)
            || (*(_WORD *)(v2068 + 6636) = 0, *v1509 = 0, (v1519 & 1) == 0))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 2413, (uint64_t)"ret", 3, (uint64_t)"Failed to remove end point variables.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
      }
      v1507 += 8;
    }
    while (v1507 != v1508);
  }
  v1520 = *(_QWORD **)(v2068 + 16);
  if (v1520)
  {
    v1523 = (_QWORD *)*v1520;
    v1521 = v1520 + 1;
    v1522 = v1523;
    if (v1523 != v1521)
    {
      do
      {
        v1524 = v1522[6];
        v1525 = (std::__shared_weak_count *)v1522[7];
        *(_QWORD *)object = v1524;
        *(_QWORD *)&object[8] = v1525;
        if (v1525)
        {
          v1526 = (unint64_t *)&v1525->__shared_owners_;
          do
            v1527 = __ldxr(v1526);
          while (__stxr(v1527 + 1, v1526));
        }
        if (v2067 > (uint64_t)(*(_QWORD *)(v1524 + 208) - *(_QWORD *)(v1524 + 200)) >> 5)
        {
          v1528 = *(_DWORD *)(v1524 + 32);
          v1529 = *(char **)(v2068 + 5560);
          v1530 = *(char **)(v2068 + 5568);
          if (v1530 != v1529)
          {
            v1531 = (v1530 - v1529) >> 4;
            do
            {
              v1532 = v1531 >> 1;
              v1533 = (unsigned int *)&v1529[16 * (v1531 >> 1)];
              v1535 = *v1533;
              v1534 = (char *)(v1533 + 4);
              v1531 += ~(v1531 >> 1);
              if (v1535 < v1528)
                v1529 = v1534;
              else
                v1531 = v1532;
            }
            while (v1531);
          }
          if (v1529 != v1530 && *(_DWORD *)v1529 == v1528 && (*(_BYTE *)(*((_QWORD *)v1529 + 1) + 4) & 2) == 0)
          {
            if (sub_20F623A0C((uint64_t)v2005, v1528))
            {
              *(_WORD *)(v2068 + 6636) = 0;
              *(_DWORD *)(v2068 + 6632) = 0;
            }
            else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASolver.hpp", 179, (uint64_t)"ret", 3, (uint64_t)"Failed to remove a landmark variable.", 37, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
        }
        if (!v1525)
          goto LABEL_1401;
        v1536 = (unint64_t *)&v1525->__shared_owners_;
        do
          v1537 = __ldaxr(v1536);
        while (__stlxr(v1537 - 1, v1536));
        if (!v1537)
        {
          ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
          std::__shared_weak_count::__release_weak(v1525);
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
          {
            do
            {
LABEL_1405:
              v1539 = (_QWORD *)v1522[2];
              _ZF = *v1539 == (_QWORD)v1522;
              v1522 = v1539;
            }
            while (!_ZF);
            goto LABEL_1380;
          }
        }
        else
        {
LABEL_1401:
          v1538 = (_QWORD *)v1522[1];
          if (!v1538)
            goto LABEL_1405;
        }
        do
        {
          v1539 = v1538;
          v1538 = (_QWORD *)*v1538;
        }
        while (v1538);
LABEL_1380:
        v1522 = v1539;
      }
      while (v1539 != v1521);
    }
  }
  sub_20F7BA718((uint64_t)v2005);
  return kdebug_trace();
}

void sub_20F782C94(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2278]))
  {
    if (SLOBYTE(STACK[0x2277]) < 0)
      operator delete((void *)STACK[0x2260]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x41B0]);
  _Unwind_Resume(a1);
}

void sub_20F782D78()
{
  JUMPOUT(0x20F782E18);
}

void sub_20F782D80()
{
  sub_20E86E8C4((uint64_t *)&STACK[0x2260]);
  sub_20E86E8C4((uint64_t *)&STACK[0x1B50]);
  sub_20E86E658((uint64_t)&STACK[0x6100]);
  JUMPOUT(0x20F782E18);
}

void sub_20F782DB4()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20F782E18);
}

void sub_20F782DD4()
{
  JUMPOUT(0x20F782E18);
}

void sub_20F782DE0()
{
  JUMPOUT(0x20F782DF0);
}

void sub_20F782ECC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F782EE0(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xD10]);
  sub_20E86665C((uint64_t)&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_20F782EFC(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F782F10(_Unwind_Exception *a1)
{
  sub_20E86665C((uint64_t)&STACK[0xF30]);
  _Unwind_Resume(a1);
}

void sub_20F782F24()
{
  JUMPOUT(0x20F7833F0);
}

void sub_20F782F2C()
{
  JUMPOUT(0x20F7833FCLL);
}

void sub_20F782F34(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F782F4C(_Unwind_Exception *a1)
{
  sub_20E9AA8C8((uint64_t)&STACK[0x6100]);
  _Unwind_Resume(a1);
}

void sub_20F782F68()
{
  JUMPOUT(0x20F7833F0);
}

void sub_20F782F70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v5 = STACK[0x6118];
  if (STACK[0x6118])
  {
    v6 = STACK[0x6120];
    v7 = (void *)STACK[0x6118];
    if (STACK[0x6120] != v5)
    {
      v8 = (void (***)(_QWORD))(v6 - 40);
      v9 = (void (***)(_QWORD))(v6 - 40);
      do
      {
        v10 = *v9;
        v9 -= 5;
        (*v10)(v8);
        v11 = v8 == (void (***)(_QWORD))v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)STACK[0x6118];
    }
    STACK[0x6120] = v5;
    operator delete(v7);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F783438);
}

void sub_20F7831E8(_Unwind_Exception *a1)
{
  sub_20F59A618((_QWORD *)STACK[0xC50]);
  _Unwind_Resume(a1);
}

void sub_20F783200()
{
  JUMPOUT(0x20F78322CLL);
}

void sub_20F783208()
{
  JUMPOUT(0x20F783218);
}

void sub_20F783240()
{
  JUMPOUT(0x20F78326CLL);
}

void sub_20F783248()
{
  JUMPOUT(0x20F783258);
}

void sub_20F783280(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F783448(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0x6100]);
  sub_20F4F17C8(&STACK[0x2260]);
  _Unwind_Resume(a1);
}

void sub_20F783470()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F783484(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA028A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F7834BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA028A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F7834DC(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *p_p;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  std::chrono::steady_clock::time_point v50;
  double v51;
  uint64_t v52;
  double v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  _QWORD v58[3];
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _BYTE object[24];
  unint64_t v67;
  char v68;
  void *__p;
  size_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  sub_20F49BBF8(&v65);
  if (**(int **)(v65 + 56) > 3)
    return;
  v2 = *(unsigned __int8 *)(v65 + 72);
  v3 = sub_20E8C31DC(v65, "OSLogSurrogateAppender", 1, 0);
  if (!v2 && v3 == 0)
    return;
  v5 = v3;
  v58[0] = &v65;
  v58[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v58[2] = std::chrono::system_clock::now().__d_.__rep_;
  v59 = 3;
  v60 = "unknown file";
  v61 = 123;
  v63 = 0;
  v64 = 0;
  v62 = "unknown function";
  v6 = *(_QWORD *)(a1 + 8);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (double)(v7.__d_.__rep_ - *(_QWORD *)v6) / 1000000000.0;
  *(std::chrono::steady_clock::time_point *)v6 = v7;
  *(double *)(v6 + 8) = *(double *)(v6 + 8) + v8;
  v9 = **(_QWORD **)(a1 + 16) + 4760;
  LODWORD(v70) = 0;
  v10 = sub_20F783DDC(v9, (uint64_t)object);
  v11 = *(_QWORD *)v58[0];
  v12 = (const char *)(*(_QWORD *)v58[0] + 16);
  v57 = v12;
  if (*(char *)(*(_QWORD *)v58[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v58[0] + 39);
    v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v14 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v67)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v19 = v5;
    v20 = v12;
    v21 = v11;
    v22 = a1;
    v23 = v2;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v67 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v2 = v23;
    a1 = v22;
    v11 = v21;
    v12 = v20;
    v5 = v19;
    goto LABEL_23;
  }
  HIBYTE(v67) = v17;
  if (v17)
LABEL_23:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  v68 = 1;
  p_p = &__p;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    p_p = operator new(v28 + 1);
    v70 = v13;
    v71 = v29 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v71) = v13;
    if (!v13)
    {
      LOBYTE(__p) = 0;
      v72 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v71) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(p_p, v12, v13);
  *((_BYTE *)p_p + v13) = 0;
  v72 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_28:
    if (!v68)
      goto LABEL_37;
LABEL_35:
    if (SHIBYTE(v67) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(__p);
  if (v68)
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v33 = v32;
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
    }
    v37 = _os_log_pack_fill();
    *(_DWORD *)v37 = 134218240;
    *(double *)(v37 + 4) = v8;
    *(_WORD *)(v37 + 12) = 2048;
    *(double *)(v37 + 14) = v10;
    v38 = operator new();
    v39 = *(unsigned __int8 *)(v11 + 39);
    v40 = v57;
    if ((v39 & 0x80u) != 0)
    {
      v40 = *(const char **)(v11 + 16);
      v39 = *(_QWORD *)(v11 + 24);
    }
    *(_QWORD *)v38 = v31;
    *(_QWORD *)(v38 + 8) = v31;
    *(_QWORD *)(v38 + 16) = v33;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = v40;
    *(_QWORD *)(v38 + 48) = v39;
    *(_BYTE *)(v38 + 56) = 1;
    *(_QWORD *)object = v38;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), object);
    v41 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    if (v41)
    {
      v42 = *(std::__shared_weak_count **)(v41 + 32);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(std::__shared_weak_count **)(v41 + 16);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(double *)&object[4] = v8;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v10;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
  if (v2)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v51 = (double)(v50.__d_.__rep_ - *(_QWORD *)v49) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)v49 = v50;
    *(double *)(v49 + 8) = *(double *)(v49 + 8) + v51;
    v52 = **(_QWORD **)(a1 + 16) + 4760;
    LODWORD(v70) = 0;
    v53 = sub_20F783DDC(v52, (uint64_t)object);
    sub_20E8C003C((uint64_t)v58, "BA pulse (%f seconds / iteration, cost %f).", v51, v53);
    sub_20E863570((uint64_t)v58);
  }
  sub_20E863570((uint64_t)v58);
  v54 = v64;
  if (v64)
  {
    v55 = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_20F783BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v31 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F783D64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKN"
                     "S0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11Opt"
                     "ionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb0EEEvRKNS1_28OfflineMapOptimizatio"
                                "nConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODat"
                                "abaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16map_optimization16OfflineMapBAImplILb1ELb0EEEvRKNS1_28OfflineMapOptimizationConfigERKNS0_19batch_least_squares15IMUSampleBufferERNS0_13MapDataTraitsIXT0_EE15VIODatabaseTypeENS_3esn11OptionalRefIKNS1_18PoseGraphNodeGroupEEEybbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F783DD0()
{
  return &unk_24CA02900;
}

double sub_20F783DDC(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  double v5;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  __int128 *v24;
  _BOOL4 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v30;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v55;
  double v57;
  double v59;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  int8x16_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  float64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  _OWORD *v78;
  int v79;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v103;
  double v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t v119;
  double v120;
  double v121;
  float64x2_t v122;
  double v123;
  double v124;
  float64x2_t v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double *v132;
  int v133;
  uint64_t v134;
  double v137;
  long double v138;
  long double v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  _OWORD *v143;
  _BOOL4 v144;
  uint64_t v145;
  __int128 v146;
  double v153;
  double v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  unint64_t v167;
  uint64_t v168;
  uint64_t v170;
  double v171;
  double v172;
  uint64_t v173;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  double v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  double v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  double v224;
  unint64_t v225;
  unint64_t v226;
  double *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  double v235;
  long double v236;
  long double v237;
  long double v238;
  __int128 v239;
  unint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  float64x2_t v255;
  float64x2_t v256;
  _QWORD *v257;
  double *v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64_t v262;
  float64x2_t v263;
  double v264;
  float64x2_t v265;
  uint64_t v266;
  double v267;
  char v268;

  kdebug_trace();
  v11 = *(unsigned int *)(a2 + 48);
  if (v11 <= 5)
    bzero((void *)(a2 + 8 * v11), 48 - 8 * v11);
  *(_DWORD *)(a2 + 48) = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
    v12 = *(_QWORD *)(a1 + 896);
    v13 = *(__int128 **)(a1 + 904);
    v14 = 0.0;
    v15 = 0.0;
    if ((__int128 *)v12 == v13)
      goto LABEL_57;
    if (*(_BYTE *)(a1 + 1875))
    {
      v16 = (unint64_t)v13 - v12 - 504;
      if (v16 < 0x1F8)
      {
        v17 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_56:
          v15 = v15 + *(double *)(v17 + 464);
          v17 += 504;
        }
        while ((__int128 *)v17 != v13);
        goto LABEL_57;
      }
      v155 = v16 / 0x1F8 + 1;
      v17 = v12 + 504 * (v155 & 0x1FFFFFFFFFFFFFELL);
      v156 = v155 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(double *)(v12 + 464) + *(double *)(v12 + 968);
        v12 += 1008;
        v156 -= 2;
      }
      while (v156);
      if (v155 != (v155 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_56;
    }
    else
    {
      v98 = (__int128 *)(v12 + 344);
      do
      {
        if (*((_BYTE *)v98 + 128))
        {
          *((_QWORD *)v98 + 14) = *((_QWORD *)v98 - 1);
          v100 = *(__int128 *)((char *)v98 - 24);
          _Q5 = *(__int128 *)((char *)v98 - 56);
          v98[5] = *(__int128 *)((char *)v98 - 40);
          v98[6] = v100;
          _Q4 = *(__int128 *)((char *)v98 - 88);
          v98[3] = *(__int128 *)((char *)v98 - 72);
          v98[4] = _Q5;
          v103 = *(__int128 *)((char *)v98 - 120);
          v98[1] = *(__int128 *)((char *)v98 - 104);
          v98[2] = _Q4;
          *v98 = v103;
          _Q17 = *v98;
          _D19 = *((_QWORD *)v98 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v98 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v98 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v98 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v98 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v98 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v98 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v116 = *(double *)(a1 + 16) * (_D18 + *((double *)v98 + 14) * *((double *)v98 + 14));
          *((double *)v98 + 15) = v116;
          v15 = v15 + v116;
        }
        v99 = v98 + 10;
        v98 = (__int128 *)((char *)v98 + 504);
      }
      while (v99 != v13);
    }
LABEL_57:
    *(double *)a2 = v15 * 0.5;
    v157 = *(_QWORD *)(a1 + 920);
    v158 = *(_QWORD *)(a1 + 928);
    if (v157 == v158)
      goto LABEL_69;
    if (*(_BYTE *)(a1 + 1875))
    {
      v159 = v158 - v157 - 280;
      v14 = 0.0;
      if (v159 < 0x118)
      {
        v160 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_68:
          v14 = v14 + *(double *)(v160 + 240);
          v160 += 280;
        }
        while (v160 != v158);
        goto LABEL_69;
      }
      v167 = v159 / 0x118 + 1;
      v160 = v157 + 280 * (v167 & 0x1FFFFFFFFFFFFFELL);
      v168 = v167 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v14 = v14 + *(double *)(v157 + 240) + *(double *)(v157 + 520);
        v157 += 560;
        v168 -= 2;
      }
      while (v168);
      if (v167 != (v167 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_68;
    }
    else
    {
      v14 = 0.0;
      do
      {
        if (*(_BYTE *)(v157 + 248))
        {
          v161 = *(_OWORD *)(v157 + 160);
          *(_OWORD *)(v157 + 192) = *(_OWORD *)(v157 + 144);
          *(_OWORD *)(v157 + 208) = v161;
          _Q3 = *(_OWORD *)(v157 + 192);
          *(_OWORD *)(v157 + 224) = *(_OWORD *)(v157 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v157 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v161 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v157 + 240) = v161;
          v14 = v14 + *(double *)&v161;
        }
        v157 += 280;
      }
      while (v157 != v158);
    }
LABEL_69:
    *(double *)(a2 + 8) = v14 * 0.5;
    _X9 = *(_QWORD *)(a1 + 944);
    v170 = *(_QWORD *)(a1 + 952);
    v171 = 0.0;
    v172 = 0.0;
    if (_X9 == v170)
      goto LABEL_81;
    if (*(_BYTE *)(a1 + 1875))
    {
      if ((unint64_t)(v170 - _X9 - 8016) >> 4 < 0x1F5)
      {
        v173 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_80:
          v172 = v172 + *(double *)(v173 + 7976);
          v173 += 8016;
        }
        while (v173 != v170);
        goto LABEL_81;
      }
      v195 = (v170 - _X9 - 8016) / 0x1F50uLL + 1;
      v173 = _X9 + 8016 * (v195 & 0x1FFFFFFFFFFFFELL);
      v196 = v195 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v172 = v172 + *(double *)(_X9 + 7976) + *(double *)(_X9 + 15992);
        _X9 += 16032;
        v196 -= 2;
      }
      while (v196);
      if (v195 != (v195 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_80;
    }
    else
    {
      do
      {
        __asm { PRFM            #0, [X9,#0x7D20] }
        if (*(_BYTE *)(_X9 + 7984))
        {
          _X14 = _X9 + 31904;
          *(_QWORD *)(_X9 + 7968) = *(_QWORD *)(_X9 + 7848);
          v176 = *(_OWORD *)(_X9 + 7816);
          *(_OWORD *)(_X9 + 7920) = *(_OWORD *)(_X9 + 7800);
          *(_OWORD *)(_X9 + 7936) = v176;
          *(_OWORD *)(_X9 + 7952) = *(_OWORD *)(_X9 + 7832);
          v177 = *(_OWORD *)(_X9 + 7752);
          *(_OWORD *)(_X9 + 7856) = *(_OWORD *)(_X9 + 7736);
          *(_OWORD *)(_X9 + 7872) = v177;
          v178 = *(_OWORD *)(_X9 + 7784);
          *(_OWORD *)(_X9 + 7888) = *(_OWORD *)(_X9 + 7768);
          *(_OWORD *)(_X9 + 7904) = v178;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X9 + 7856);
          _D19 = *(_QWORD *)(_X9 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X9 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X9 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v194 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X9 + 7968) * *(double *)(_X9 + 7968));
          *(double *)(_X9 + 7976) = v194;
          v172 = v172 + v194;
        }
        _X9 += 8016;
      }
      while (_X9 != v170);
    }
LABEL_81:
    *(double *)(a2 + 16) = v172 * 0.5;
    _X9 = *(_QWORD *)(a1 + 968);
    v198 = *(_QWORD *)(a1 + 976);
    if (_X9 == v198)
      goto LABEL_93;
    if (*(_BYTE *)(a1 + 1875))
    {
      v199 = v198 - _X9 - 5336;
      v171 = 0.0;
      if (v199 >> 3 < 0x29B)
      {
        v200 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_92:
          v171 = v171 + *(double *)(v200 + 5296);
          v200 += 5336;
        }
        while (v200 != v198);
        goto LABEL_93;
      }
      v219 = v199 / 0x14D8 + 1;
      v200 = _X9 + 5336 * (v219 & 0x1FFFFFFFFFFFFELL);
      v220 = v219 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v171 = v171 + *(double *)(_X9 + 5296) + *(double *)(_X9 + 10632);
        _X9 += 10672;
        v220 -= 2;
      }
      while (v220);
      if (v219 != (v219 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_92;
    }
    else
    {
      v171 = 0.0;
      do
      {
        __asm { PRFM            #0, [X9,#0x5340] }
        if (*(_BYTE *)(_X9 + 5304))
        {
          _X14 = _X9 + 21184;
          *(_QWORD *)(_X9 + 5288) = *(_QWORD *)(_X9 + 5168);
          *(_OWORD *)(_X9 + 5240) = *(_OWORD *)(_X9 + 5120);
          *(_OWORD *)(_X9 + 5256) = *(_OWORD *)(_X9 + 5136);
          *(_OWORD *)(_X9 + 5272) = *(_OWORD *)(_X9 + 5152);
          *(_OWORD *)(_X9 + 5176) = *(_OWORD *)(_X9 + 5056);
          *(_OWORD *)(_X9 + 5192) = *(_OWORD *)(_X9 + 5072);
          *(_OWORD *)(_X9 + 5208) = *(_OWORD *)(_X9 + 5088);
          *(_OWORD *)(_X9 + 5224) = *(_OWORD *)(_X9 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X9 + 5176);
          _D19 = *(_QWORD *)(_X9 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X9 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X9 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X9 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X9 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X9 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X9 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v218 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X9 + 5288) * *(double *)(_X9 + 5288));
          *(double *)(_X9 + 5296) = v218;
          v171 = v171 + v218;
        }
        _X9 += 5336;
      }
      while (_X9 != v198);
    }
LABEL_93:
    *(double *)(a2 + 24) = v171 * 0.5;
    v221 = *(_QWORD *)(a1 + 992);
    v222 = *(_QWORD *)(a1 + 1000);
    v223 = 0.0;
    v224 = 0.0;
    if (v221 != v222)
    {
      if (*(_BYTE *)(a1 + 1875))
      {
        v225 = v222 - v221 - 216;
        if (v225 < 0xD8)
          goto LABEL_120;
        v226 = v225 / 0xD8 + 1;
        v227 = (double *)(v221 + 392);
        v228 = v226 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v224 = v224 + *(v227 - 27) + *v227;
          v227 += 54;
          v228 -= 2;
        }
        while (v228);
        v221 += 216 * (v226 & 0x3FFFFFFFFFFFFFELL);
        if (v226 != (v226 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_120:
          do
          {
            v224 = v224 + *(double *)(v221 + 176);
            v221 += 216;
          }
          while (v221 != v222);
        }
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v221 + 184))
          {
            *(_OWORD *)(v221 + 160) = *(_OWORD *)(v221 + 144);
            v256 = *(float64x2_t *)(v221 + 160);
            _D1 = v256.f64[1];
            __asm { FMLA            D0, D1, V2.D[1] }
            v235 = *(double *)(a1 + 88);
            v236 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
            v237 = v236 + 1.0;
            v238 = v235 * log1p(v236);
            *(long double *)(v221 + 176) = v238;
            *(float64x2_t *)(v221 + 160) = vmulq_n_f64(v256, sqrt(1.0 / v237));
            v224 = v224 + v238;
          }
          v221 += 216;
        }
        while (v221 != v222);
      }
    }
    *(double *)(a2 + 32) = v224 * 0.5;
    v229 = *(_QWORD *)(a1 + 1016);
    v230 = *(_QWORD *)(a1 + 1024);
    if (v229 == v230)
      goto LABEL_116;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v223 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 856))
        {
          v239 = *(_OWORD *)(v229 + 768);
          *(_OWORD *)(v229 + 800) = *(_OWORD *)(v229 + 752);
          *(_OWORD *)(v229 + 816) = v239;
          _Q2 = *(_OWORD *)(v229 + 800);
          *(_OWORD *)(v229 + 832) = *(_OWORD *)(v229 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v229 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v239 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v229 + 848) = v239;
          v223 = v223 + *(double *)&v239;
        }
        v229 += 888;
      }
      while (v229 != v230);
      goto LABEL_116;
    }
    v231 = v230 - v229 - 888;
    v223 = 0.0;
    if (v231 >= 0x378)
    {
      v245 = v231 / 0x378 + 1;
      v232 = v229 + 888 * (v245 & 0xFFFFFFFFFFFFFELL);
      v246 = v245 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v223 = v223 + *(double *)(v229 + 848) + *(double *)(v229 + 1736);
        v229 += 1776;
        v246 -= 2;
      }
      while (v246);
      if (v245 == (v245 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_116;
    }
    else
    {
      v232 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v223 = v223 + *(double *)(v232 + 848);
      v232 += 888;
    }
    while (v232 != v230);
LABEL_116:
    v154 = v223 * 0.5;
    goto LABEL_117;
  }
  v18 = (double *)(a1 + 8);
  v19 = (_QWORD *)(a1 + 120);
  v257 = (_QWORD *)(a1 + 120);
  v258 = (double *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 896);
  v21 = *(_QWORD *)(a1 + 904);
  v22 = 0.0;
  v23 = 0.0;
  if (v20 != v21)
  {
    do
    {
      while (1)
      {
        v24 = (__int128 *)(v20 + 344);
        v25 = sub_20F4AFF88((char *)(v20 + 8), (float64x2_t **)(v20 + 208), v20 + 344);
        *(_BYTE *)(v20 + 472) = v25;
        if (v25)
          break;
        *(_QWORD *)(v20 + 464) = 0;
        v20 += 504;
        if (v20 == v21)
          goto LABEL_15;
      }
      v26 = *(_QWORD *)(v20 + 480);
      if (v26)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 24))(v26, v20 + 344);
      _Q1 = *(_OWORD *)(v20 + 408);
      v27 = *(_OWORD *)(v20 + 424);
      _Q3 = *(_OWORD *)(v20 + 392);
      *(_OWORD *)(v20 + 288) = _Q1;
      *(_OWORD *)(v20 + 304) = v27;
      _Q2 = *(float64x2_t *)(v20 + 424);
      *(_OWORD *)(v20 + 320) = *(_OWORD *)(v20 + 440);
      *(_QWORD *)(v20 + 336) = *(_QWORD *)(v20 + 456);
      v30 = *(_OWORD *)(v20 + 360);
      _Q5 = *v24;
      _V7.D[1] = *((_QWORD *)&v30 + 1);
      *(_OWORD *)(v20 + 224) = *v24;
      *(_OWORD *)(v20 + 240) = v30;
      _Q4 = *(_OWORD *)(v20 + 376);
      v4 = *(float64x2_t *)(v20 + 392);
      *(_OWORD *)(v20 + 256) = _Q4;
      *(float64x2_t *)(v20 + 272) = v4;
      _Q6 = *(float64x2_t *)(v20 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v20 + 456) * *(double *)(v20 + 456));
      *(float64_t *)(v20 + 464) = v4.f64[0];
      v23 = v23 + v4.f64[0];
      v20 += 504;
    }
    while (v20 != v21);
LABEL_15:
    v19 = v257;
    v18 = v258;
  }
  *(double *)a2 = v23 * 0.5;
  v46 = (int8x16_t *)v19[100];
  v47 = (int8x16_t *)v19[101];
  if (v46 != v47)
  {
    v48 = v46 + 16;
    v22 = 0.0;
    do
    {
      while (!v48[-9].i64[1])
      {
        v48[-1].i8[8] = 0;
        v48[-1].i64[0] = 0;
        v49 = &v48[1].i64[1];
        v48 = (int8x16_t *)((char *)v48 + 280);
        if (v49 == (uint64_t *)v47)
          goto LABEL_23;
      }
      v50 = v48[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v50 + 48);
      v51 = *(float64x2_t *)(v50 + 32);
      _D2 = *(double *)(v50 + 72);
      v53 = *(float64x2_t *)(v50 + 56);
      _D4 = *(double *)(v50 + 96);
      v55 = *(float64x2_t *)(v50 + 80);
      *(_QWORD *)&_Q6.f64[0] = v48[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v48[-15] + 8);
      v57 = *(double *)v48[-12].i64;
      _Q17 = (float64x2_t)v48[-13];
      v59 = *(double *)&v48[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v48[-12] + 8);
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q7.f64[0]), v53, _Q17.f64[0]), v55, _Q19.f64[0]);
      v62 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v51, _Q7, 1), v53, _Q17, 1), v55, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v260 = v62;
      v259 = v61;
      v262 = _Q7.f64[0];
      v261 = v63;
      v263 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v51, _Q6.f64[0]), v53, v57), v55, v59);
      v264 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v57 + _D4 * v59;
      v266 = 0;
      v265 = 0uLL;
      sub_20E9733B8(&v259, v265.f64);
      v64 = v48 - 4;
      v65 = v265;
      v48[-3].i64[0] = v266;
      v48[-4] = (int8x16_t)v65;
      v65.f64[0] = *(float64_t *)(v50 + 120);
      *(_QWORD *)&v66.f64[0] = v48[-9].i64[0];
      *(float64x2_t *)((char *)&v48[-3] + 8) = vsubq_f64(*(float64x2_t *)(v50 + 104), (float64x2_t)v48[-10]);
      v48[-2].i64[1] = *(_OWORD *)&vsubq_f64(v65, v66);
      v67 = (float64x2_t *)v48[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v48[-2], v67[3]);
      v68 = (int8x16_t)vmulq_f64((float64x2_t)v48[-3], v67[2]);
      v69 = (int8x16_t)vmulq_f64((float64x2_t)v48[-4], v67[1]);
      v48[-4] = v69;
      v48[-3] = v68;
      v48[-2] = (int8x16_t)v4;
      v48[-1].i8[8] = 1;
      if (v48->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v48->i64[0] + 24))(v48->i64[0], v48 - 4);
        v68 = v48[-3];
        v4 = (float64x2_t)v48[-2];
        v69 = *v64;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v68, v68, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v69, v69, 8uLL).i64;
      v70 = v48 - 7;
      v71 = v48[-3];
      *v70 = *v64;
      v70[1] = v71;
      _Q6 = (float64x2_t)v48[-2];
      v70[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v72 = _Q2.f64[0] + *(double *)v68.i64 * *(double *)v68.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v18[3];
      v73 = v5 * v72;
      *(double *)v48[-1].i64 = v73;
      v22 = v22 + v73;
      v74 = &v48[1].i64[1];
      v48 = (int8x16_t *)((char *)v48 + 280);
    }
    while (v74 != (uint64_t *)v47);
LABEL_23:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 8) = v22 * 0.5;
  v75 = v19[103];
  v76 = v19[104];
  if (v75 == v76)
  {
    v77 = 0.0;
  }
  else
  {
    v77 = 0.0;
    do
    {
      while (1)
      {
        v78 = (_OWORD *)(v75 + 7856);
        v79 = sub_20F4B0BC8();
        *(_BYTE *)(v75 + 7984) = v79;
        if (v79)
          break;
        *(_QWORD *)(v75 + 7976) = 0;
        v75 += 8016;
        if (v75 == v76)
          goto LABEL_31;
      }
      _X8 = v75 + 24024;
      __asm { PRFM            #0, [X8] }
      v82 = *(_QWORD *)(v75 + 7992);
      if (v82)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 24))(v82, v75 + 7856);
      _X8 = v75 + 23888;
      v84 = *(_OWORD *)(v75 + 7936);
      *(_OWORD *)(v75 + 7800) = *(_OWORD *)(v75 + 7920);
      *(_OWORD *)(v75 + 7816) = v84;
      _Q2 = *(float64x2_t *)(v75 + 7936);
      *(_OWORD *)(v75 + 7832) = *(_OWORD *)(v75 + 7952);
      *(_QWORD *)(v75 + 7848) = *(_QWORD *)(v75 + 7968);
      v85 = *(_OWORD *)(v75 + 7872);
      *(_OWORD *)(v75 + 7736) = *v78;
      *(_OWORD *)(v75 + 7752) = v85;
      v86 = *(_OWORD *)(v75 + 7904);
      *(_OWORD *)(v75 + 7768) = *(_OWORD *)(v75 + 7888);
      *(_OWORD *)(v75 + 7784) = v86;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v75 + 7872);
      _Q7 = *v78;
      _D17 = *(_QWORD *)(v75 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v75 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v75 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v75 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v75 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v18[5];
      v97 = v5 * (_D16 + *(double *)(v75 + 7968) * *(double *)(v75 + 7968));
      *(double *)(v75 + 7976) = v97;
      v77 = v77 + v97;
      v75 += 8016;
    }
    while (v75 != v76);
LABEL_31:
    v19 = v257;
    v18 = v258;
  }
  *(double *)(a2 + 16) = v77 * 0.5;
  v268 = *(_BYTE *)(a1 + 1875);
  v267 = 0.0;
  v117 = v19[106];
  v118 = v19[107];
  *(_QWORD *)&v259.f64[0] = &v268;
  *(_QWORD *)&v259.f64[1] = v18 + 6;
  v260 = COERCE_DOUBLE(&v257);
  *(_QWORD *)&v261.f64[0] = &v267;
  sub_20F4D78F4(&v265, v117, v118, (uint64_t)&v259, v77 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v126 = v267 * 0.5;
  *(double *)(a2 + 24) = v267 * 0.5;
  v127 = v257;
  v128 = v257[109];
  v129 = v257[110];
  v130 = 0.0;
  v131 = 0.0;
  if (v128 != v129)
  {
    v132 = v258;
    do
    {
      while (1)
      {
        v133 = sub_20FC79C54(v128 + 8, (uint64_t *)(v128 + 56), v128 + 160, v126, v119.f64[0], v120, v121, v122, v123, v124, v125);
        *(_BYTE *)(v128 + 184) = v133;
        if (v133)
          break;
        *(_QWORD *)(v128 + 176) = 0;
        v128 += 216;
        if (v128 == v129)
          goto LABEL_44;
      }
      v134 = *(_QWORD *)(v128 + 192);
      if (v134)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 24))(v134, v128 + 160);
      *(_OWORD *)(v128 + 144) = *(_OWORD *)(v128 + 160);
      v255 = *(float64x2_t *)(v128 + 160);
      _D1 = v255.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v137 = v132[10];
      v138 = v132[11] * (v132[9] * _D0);
      v139 = v138 + 1.0;
      v126 = v137 * log1p(v138);
      *(double *)(v128 + 176) = v126;
      v120 = v255.f64[0];
      v119 = vmulq_n_f64(v255, sqrt(1.0 / v139));
      *(float64x2_t *)(v128 + 160) = v119;
      v131 = v131 + v126;
      v128 += 216;
    }
    while (v128 != v129);
LABEL_44:
    v127 = v257;
  }
  *(double *)(a2 + 32) = v131 * 0.5;
  v140 = v127[112];
  v141 = v127[113];
  if (v140 != v141)
  {
    v130 = 0.0;
    v142 = v258;
    do
    {
      while (1)
      {
        v143 = (_OWORD *)(v140 + 800);
        v144 = sub_20F3E115C(v140 + 8, (_QWORD *)(v140 + 736), (float64x2_t *)(v140 + 800));
        *(_BYTE *)(v140 + 856) = v144;
        if (v144)
          break;
        *(_QWORD *)(v140 + 848) = 0;
        v140 += 888;
        if (v140 == v141)
          goto LABEL_52;
      }
      v145 = *(_QWORD *)(v140 + 864);
      if (v145)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 24))(v145, v140 + 800);
      v146 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 752) = *v143;
      *(_OWORD *)(v140 + 768) = v146;
      _Q2 = *v143;
      _Q1 = *(_OWORD *)(v140 + 816);
      *(_OWORD *)(v140 + 784) = *(_OWORD *)(v140 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v140 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v153 = v142[13] * _D3;
      *(double *)(v140 + 848) = v153;
      v130 = v130 + v153;
      v140 += 888;
    }
    while (v140 != v141);
  }
LABEL_52:
  v154 = v130 * 0.5;
LABEL_117:
  *(double *)(a2 + 40) = v154;
  *(_WORD *)(a1 + 1875) = 257;
  v247 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v248 = *(double *)a2;
  v249 = *(double *)(a2 + 8);
  v250 = *(double *)(a2 + 16);
  v251 = *(double *)(a2 + 24);
  v252 = *(double *)(a2 + 32);
  v253 = *(double *)(a2 + 40);
  kdebug_trace();
  return v247 + v248 + v249 + v250 + v251 + v252 + v253;
}

