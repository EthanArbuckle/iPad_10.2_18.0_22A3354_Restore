void sub_20F0CD090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20F0CD0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,void *__p,void *a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  if (a35 && a34 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a16);
  if (!a12)
    _Unwind_Resume(a1);
  operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_20F0CD508(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62080);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62080))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62078);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62080);
  }
  *a1 = qword_254A62078;
}

void sub_20F0CD5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62080);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62080);
  _Unwind_Resume(a1);
}

void sub_20F0CD5FC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F0CD9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0CDA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0CDA18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F0CDA3C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)v38 = v10;
    *(_QWORD *)&v38[8] = v10;
    *(_QWORD *)&v38[16] = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v39 = 0uLL;
    v40 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = *(_QWORD *)v38;
    v17 = _os_log_pack_fill();
    v18 = *a5;
    *(_DWORD *)v17 = 134217984;
    *(_QWORD *)(v17 + 4) = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)&v38[8];
    *(_OWORD *)&v38[8] = 0uLL;
    *(_OWORD *)(v19 + 24) = v39;
    v39 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&v38[16];
    if (*(_QWORD *)&v38[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v38[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    *(_DWORD *)v38 = 134217984;
    *(_QWORD *)&v38[4] = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F0CDE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0CDE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0CDE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F0CDE7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  __int128 v19;

  __p = operator new(0x20uLL);
  v19 = xmmword_2102DBF70;
  strcpy((char *)__p, "Adaptive keyframing parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.enabled", v4, "Enable adaptive keyframing or not.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.num_inliers_to_drop", v5, "Number of inliers to drop the frame.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_num_inliers_to_consider_parallax", v6, "Minimal number of inliers to consider parallax.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.num_frames_to_start_adaptive_keyframing", v7, "Number of frames after which we start running adaptive keyframing.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.max_allowed_time", v9, "Max allowed time interval between previous keyframe and current one.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_time_to_consider_num_inliers", v10, "Min time interval between previous keyframe and current one to consider #inliers.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.parallax_square_threshold", v11, "Threshold for square of median parallax, in normalized image plane, unitless.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_rotation_threshold_deg", v12, "Threshold for minimal rotation, in degree.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.enable_visual_slam_baseline_determination", v13, "A flag indicating to use visual-slam baseline determination logic.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_motion_to_consider_good_goemetry_in_m", v14, "Minimum motion displacement to consider good geometry. Beyond this threshold, a keyframe should be added to VIO.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DCF0((unsigned int *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_num_triangulated_points_to_drop", v15, "Minimum number of triangulated points beyond a frame can be marked as bad-geometry (ie drop the frame).");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 88));
  return sub_20E8B2F9C((uint64_t *)&__p, "BaselineDeterminationConfig.min_rotation_rate_threshold_deg", v16, "Minimum rotation rate in deg/s. Beyond this threshold, a keyframe should be added to VIO.");
}

void sub_20F0CE16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0CE200(uint64_t result, uint64_t a2, double a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v16;
  int v17;
  double v18;
  uint64_t v19;

  if (*(double *)result <= *(double *)(a2 + 448))
  {
    v4 = *(unsigned int *)(a2 + 192);
    v3 = *(unsigned int *)(a2 + 196);
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v7 = *(unsigned __int8 *)(result + 64);
    v9 = v6 > v3 && v5 > v4;
    if (*(_BYTE *)(result + 64))
      v10 = !v9;
    else
      v10 = 0;
    if (v10 || (!*(_BYTE *)(result + 64) ? (v11 = v6 > v3) : (v11 = 0), v11 ? (v12 = v5 > v4) : (v12 = 0), v12))
    {
      v13 = *(_QWORD *)(result + 72) + 1;
      *(_QWORD *)(result + 72) = v13;
    }
    else
    {
      v13 = 0;
      *(_QWORD *)(result + 72) = 0;
    }
    v14 = 24;
    if (v7)
      v14 = 32;
    if (v13 >= *(unsigned int *)(result + v14))
    {
      *(_QWORD *)(result + 72) = 0;
      *(_BYTE *)(result + 64) = v7 ^ 1;
    }
  }
  if (*(_BYTE *)(result + 88))
  {
    v16 = *(_DWORD *)(a2 + 180) <= *(_DWORD *)(result + 40) || *(_DWORD *)(a2 + 188) <= *(_DWORD *)(result + 44);
    v17 = *(unsigned __int8 *)(result + 65);
    if (((v16 ^ (*(_BYTE *)(result + 65) == 0)) & 1) == 0)
    {
      v18 = *(double *)(result + 80);
      goto LABEL_36;
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(result + 65);
  }
  *(double *)(result + 80) = a3;
  *(_BYTE *)(result + 88) = 1;
  v18 = a3;
LABEL_36:
  v19 = 56;
  if (!v17)
    v19 = 48;
  if (a3 - v18 >= *(double *)(result + v19))
  {
    *(double *)(result + 80) = a3;
    *(_BYTE *)(result + 88) = 1;
    *(_BYTE *)(result + 65) = v17 ^ 1;
  }
  return result;
}

uint64_t *sub_20F0CE30C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p;
  __int128 v8;

  __p = operator new(0x28uLL);
  v8 = xmmword_2102DCA10;
  strcpy((char *)__p, "LowTextureDetectorConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "LowTextureDetectorConfig.min_num_frames_to_enable", v4, "Number of consecutive frames required to observe before declare low texture.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  return sub_20E8B2F9C((uint64_t *)&__p, "LowTextureDetectorConfig.min_num_frames_to_disable", v5, "Number of consecutive frames required to observe before declare rich texture.");
}

void sub_20F0CE3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0CE434(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  _OWORD *v34;
  char *v35;
  __int128 v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 192) = a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 200) = _Q0;
  *(_WORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_210123324(a1 + 272, *(_DWORD *)(a2 + 112));
  *(_WORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  v16 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 496) = v16;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 65537;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  v17 = *(_DWORD *)(a1 + 60);
  if (v17)
  {
    v18 = v17;
    v19 = *(char **)(a1 + 224);
    v20 = (uint64_t)(*(_QWORD *)(a1 + 232) - (_QWORD)v19) >> 5;
    if (v20 == v17)
      return a1;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/MovingIMUCameraDiscrepancyClassifier.cpp", 40, (uint64_t)"config_.vio_health_queue_size > 0u", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = *(unsigned int *)(a1 + 60);
    v19 = *(char **)(a1 + 224);
    v20 = (uint64_t)(*(_QWORD *)(a1 + 232) - (_QWORD)v19) >> 5;
    if (v20 == v18)
      return a1;
  }
  if ((_DWORD)v18)
  {
    v21 = operator new(32 * v18);
    v22 = v21;
    v23 = 0;
    v24 = (char *)&v21[2 * v18];
    do
    {
      v25 = &v21[v23];
      v25[2] = 0;
      v25[3] = 0;
      *v25 = 0xBFF0000000000000;
      v25[1] = 0;
      v23 += 2;
      *((_BYTE *)v25 + 16) = 0;
    }
    while (2 * v18 != v23);
    v26 = *(_QWORD *)(a1 + 264);
    if (v26 >= v18)
      v27 = v18;
    else
      v27 = *(_QWORD *)(a1 + 264);
    if (v26 <= v18)
    {
      if (v26)
      {
        v33 = *(_QWORD *)(a1 + 248);
        v34 = v21;
        do
        {
          v35 = &v19[32 * (v33 % v20)];
          v36 = *((_OWORD *)v35 + 1);
          *v34 = *(_OWORD *)v35;
          v34[1] = v36;
          v34 += 2;
          ++v33;
          --v26;
        }
        while (v26);
      }
      else if (!v19)
      {
LABEL_23:
        *(_QWORD *)(a1 + 224) = v22;
        *(_QWORD *)(a1 + 232) = v24;
        *(_QWORD *)(a1 + 240) = v24;
        *(_QWORD *)(a1 + 248) = 0;
        *(_QWORD *)(a1 + 256) = v27 % v18;
        *(_QWORD *)(a1 + 264) = v27;
        return a1;
      }
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 248);
      v29 = v27;
      v30 = v21;
      do
      {
        v31 = &v19[32 * (v28 % v20)];
        v32 = *((_OWORD *)v31 + 1);
        *v30 = *(_OWORD *)v31;
        v30[1] = v32;
        v30 += 2;
        ++v28;
        --v29;
      }
      while (v29);
    }
    *(_QWORD *)(a1 + 232) = v19;
    operator delete(v19);
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 232) = v19;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_20F0CE6B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 232) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0CE714(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;

  v2 = a2[5];
  if (v2)
  {
    if (v2 == 1)
    {
      *(_QWORD *)result = a2;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      for (i = 1; i != v2; ++i)
      {
        v5 = (uint64_t)(a2[1] - *a2) >> 5;
        if (*(_DWORD *)(*a2 + 32 * ((a2[3] + i) % v5) + 8) < *(_DWORD *)(*a2 + 32 * ((v3 + a2[3]) % v5) + 8))
        {
          v4 = i;
          v3 = i;
        }
      }
      *(_QWORD *)result = a2;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v4;
    }
  }
  else
  {
    *(_QWORD *)result = a2;
    *(_BYTE *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_20F0CE7C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;

  v2 = a2[5];
  if (v2)
  {
    if (v2 == 1)
    {
      *(_QWORD *)result = a2;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      for (i = 1; i != v2; ++i)
      {
        v5 = (uint64_t)(a2[1] - *a2) >> 5;
        if (*(_DWORD *)(*a2 + 32 * ((a2[3] + i) % v5) + 12) < *(_DWORD *)(*a2 + 32 * ((v3 + a2[3]) % v5) + 12))
        {
          v4 = i;
          v3 = i;
        }
      }
      *(_QWORD *)result = a2;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v4;
    }
  }
  else
  {
    *(_QWORD *)result = a2;
    *(_BYTE *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_20F0CE86C(uint64_t result, _BYTE *a2, unsigned int a3, int *a4, uint64_t a5, double a6)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned __int8 v15;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  double v35;
  uint64_t *v36;
  int v37;
  uint64_t *v38;
  unsigned __int8 v39;
  char *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t k;
  uint64_t v46;
  int v47;
  unsigned __int8 v48;
  char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t m;
  uint64_t v55;
  double v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint64_t *v72;
  unsigned __int8 v73;
  char *v75;
  size_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t n;
  uint64_t v80;
  double v81;
  unsigned int v82;
  unint64_t v83;
  double v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  double v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  __uint64_t v103[2];
  __int128 v104;
  uint64_t v105;
  char v106;
  void *v107;
  char v108;
  char v109;
  void *v110;
  char v111;
  char v112;
  void *v113;
  char v114;
  void *__p;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 57))
    return result;
  v11 = result;
  if (*(_BYTE *)(result + 152)
    && *(double *)(result + 144) >= a6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/MovingIMUCameraDiscrepancyClassifier.cpp", 205, (uint64_t)"current_state_timestamp > *last_update_timestamp_", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_219;
  }
  v12 = *(unsigned __int8 *)(v11 + 491);
  if (*(_BYTE *)(v11 + 491))
    v12 = *(_DWORD *)(v11 + 492) + 1;
  *(_DWORD *)(v11 + 492) = v12;
  if (*(double *)(v11 + 200) == -1.0)
    *(double *)(v11 + 200) = a6;
  if (*(_BYTE *)(v11 + 152) && a6 - *(double *)(v11 + 144) > 10.0)
  {
    *(double *)(v11 + 200) = a6;
    *(_WORD *)(v11 + 584) = 1;
    if (*(_BYTE *)(v11 + 576))
      *(_BYTE *)(v11 + 576) = 0;
    if (*(_BYTE *)(v11 + 424))
      *(_BYTE *)(v11 + 424) = 0;
    if (*(_BYTE *)(v11 + 456))
      *(_BYTE *)(v11 + 456) = 0;
    *(_BYTE *)(v11 + 488) = 0;
    *(_BYTE *)(v11 + 160) = 0;
    *(_QWORD *)(v11 + 256) = 0;
    *(_QWORD *)(v11 + 264) = 0;
    *(_QWORD *)(v11 + 248) = 0;
    *(_WORD *)(v11 + 184) = 0;
    if (*(_BYTE *)(v11 + 409))
      *(_BYTE *)(v11 + 409) = 0;
    *(_DWORD *)(v11 + 168) = 0;
    *(_QWORD *)(v11 + 176) = 0xBFF0000000000000;
    *(_QWORD *)(v11 + 328) = 0;
    *(_DWORD *)(v11 + 336) = 0;
    *(_QWORD *)(v11 + 344) = 0;
    *(_DWORD *)(v11 + 352) = 0;
    *(_QWORD *)(v11 + 360) = 0;
    *(_DWORD *)(v11 + 368) = 0;
    *(_QWORD *)(v11 + 376) = 0;
    *(_DWORD *)(v11 + 384) = 0;
    *(_QWORD *)(v11 + 392) = 0;
    *(_QWORD *)(v11 + 304) = 0;
    *(_QWORD *)(v11 + 312) = 0;
    *(_QWORD *)(v11 + 296) = 0;
    *(_DWORD *)(v11 + 320) = 0;
  }
  result = sub_20F095908(v11 + 496, a6);
  if (*(double *)(v11 + 208) == -1.0)
    *(double *)(v11 + 208) = a6;
  *(double *)(v11 + 144) = a6;
  *(_BYTE *)(v11 + 152) = 1;
  v13 = *(_DWORD *)(v11 + 188);
  *(_DWORD *)(v11 + 188) = a3;
  if (v13 < a3)
    *(double *)(v11 + 208) = a6;
  if (*a2 == 15)
  {
    *(_BYTE *)(v11 + 184) = 1;
    v14 = sub_210219C18();
    v15 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_72;
    LOWORD(v104) = 0;
    v17 = (char *)_os_log_send_and_compose_impl();
    v18 = strlen(v17);
    v103[0] = 0;
    pthread_threadid_np(0, v103);
    v19 = v103[0];
    timespec_get((timespec *)v103, 1);
    sub_210219E20(&v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v14 + 1), (__int128 *)(v14 + 5), "ICDVS: Simulated hint.", 0x16uLL, v17, v18, v19, v103);
    std::mutex::lock(&stru_254A5A410);
    v20 = qword_254A5A458;
    for (i = unk_254A5A460; v20 != i; v20 += 40)
    {
      v22 = *(_QWORD *)(v20 + 32);
      if (!v22)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 48))(v22, &v104);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v116 < 0)
    {
      operator delete(__p);
      if ((v114 & 0x80000000) == 0)
      {
LABEL_32:
        if (!v112)
        {
LABEL_65:
          if (v109 && v108 < 0)
            operator delete(v107);
          if (v106 < 0)
            operator delete(*((void **)&v104 + 1));
          if (v17)
            free(v17);
LABEL_72:
          result = os_signpost_enabled((os_log_t)*v14);
          if (!(_DWORD)result)
            return result;
          LOWORD(v104) = 0;
          return _os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_63:
        if (v111 < 0)
          operator delete(v110);
        goto LABEL_65;
      }
    }
    else if ((v114 & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v113);
    if (!v112)
      goto LABEL_65;
    goto LABEL_63;
  }
  if (!a2[16])
    goto LABEL_47;
  if (*(_BYTE *)(v11 + 72))
  {
LABEL_38:
    *(_BYTE *)(v11 + 185) = 1;
    v23 = sub_210219C18();
    v24 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_85;
    LOWORD(v104) = 0;
    v26 = (char *)_os_log_send_and_compose_impl();
    v27 = strlen(v26);
    v103[0] = 0;
    pthread_threadid_np(0, v103);
    v28 = v103[0];
    timespec_get((timespec *)v103, 1);
    sub_210219E20(&v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v23 + 1), (__int128 *)(v23 + 5), "ICDVS: Classified hint.", 0x17uLL, v26, v27, v28, v103);
    std::mutex::lock(&stru_254A5A410);
    v29 = qword_254A5A458;
    for (j = unk_254A5A460; v29 != j; v29 += 40)
    {
      v31 = *(_QWORD *)(v29 + 32);
      if (!v31)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v31 + 48))(v31, &v104);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v116 < 0)
    {
      operator delete(__p);
      if ((v114 & 0x80000000) == 0)
      {
LABEL_45:
        if (!v112)
        {
LABEL_78:
          if (v109 && v108 < 0)
            operator delete(v107);
          if (v106 < 0)
            operator delete(*((void **)&v104 + 1));
          if (v26)
            free(v26);
LABEL_85:
          result = os_signpost_enabled((os_log_t)*v23);
          if (!(_DWORD)result)
            return result;
          LOWORD(v104) = 0;
          return _os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_76:
        if (v111 < 0)
          operator delete(v110);
        goto LABEL_78;
      }
    }
    else if ((v114 & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v113);
    if (!v112)
      goto LABEL_78;
    goto LABEL_76;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/MovingIMUCameraDiscrepancyClassifier.cpp", 273, (uint64_t)"!tracking_status.is_platform_classified_as_movable_by_mpc || config_.enable_movable_platform_classification", 107, (uint64_t)"If the appearance-based movable platform classification (MPC) is ignored, tracking must not fail when the platform is classified as movable", 139, (void (*)(void **))sub_21023DDB0);
  if ((_DWORD)result)
LABEL_219:
    abort();
  if (a2[16])
    goto LABEL_38;
LABEL_47:
  *(_BYTE *)(v11 + 160) = 0;
  v32 = a2[13];
  v33 = *(_QWORD *)(a5 + 96);
  v34 = *(_DWORD *)(a5 + 296);
  v35 = *(double *)(v11 + 176);
  if (v35 > -1.0 && a6 - v35 > *(double *)(v11 + 96))
  {
    *(_DWORD *)(v11 + 168) = 0;
    *(_QWORD *)(v11 + 176) = 0xBFF0000000000000;
  }
  if ((!*(_BYTE *)(v11 + 73) || !*(_BYTE *)(v11 + 585))
    && (!*(_BYTE *)(v11 + 491) || *(_DWORD *)(v11 + 492) <= *(_DWORD *)(v11 + 104) && !*(_BYTE *)(v11 + 585))
    && (!*(_BYTE *)(v11 + 74) || !*(_BYTE *)(v11 + 217) || !*(_BYTE *)(v11 + 216)))
  {
    if (v32)
    {
      *(_BYTE *)(v11 + 160) = 1;
      kdebug_trace();
      v38 = sub_210219C18();
      v39 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_143;
      LODWORD(v104) = 134217984;
      *(double *)((char *)&v104 + 4) = a6;
      v41 = (char *)_os_log_send_and_compose_impl();
      v42 = strlen(v41);
      v103[0] = 0;
      pthread_threadid_np(0, v103);
      v43 = v103[0];
      timespec_get((timespec *)v103, 1);
      sub_210219E20(&v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v38 + 1), (__int128 *)(v38 + 5), "Concluding Moving Platform IMU-Camera discrepancy at %f, using IMU-propagated pose metric.", 0x5AuLL, v41, v42, v43, v103);
      std::mutex::lock(&stru_254A5A410);
      v44 = qword_254A5A458;
      for (k = unk_254A5A460; v44 != k; v44 += 40)
      {
        v46 = *(_QWORD *)(v44 + 32);
        if (!v46)
          sub_20E86D37C();
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v46 + 48))(v46, &v104);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v116 < 0)
      {
        operator delete(__p);
        if ((v114 & 0x80000000) == 0)
        {
LABEL_97:
          if (!v112)
          {
LABEL_136:
            if (v109 && v108 < 0)
              operator delete(v107);
            if (v106 < 0)
              operator delete(*((void **)&v104 + 1));
            if (v41)
              free(v41);
LABEL_143:
            result = os_signpost_enabled((os_log_t)*v38);
            if ((_DWORD)result)
            {
              LODWORD(v104) = 134217984;
              *(double *)((char *)&v104 + 4) = a6;
              result = _os_signpost_emit_unreliably_with_name_impl();
            }
LABEL_145:
            v57 = *(_DWORD *)(v11 + 168) + 1;
            v56 = a6;
LABEL_146:
            *(_DWORD *)(v11 + 168) = v57;
            *(double *)(v11 + 176) = v56;
            goto LABEL_147;
          }
LABEL_134:
          if (v111 < 0)
            operator delete(v110);
          goto LABEL_136;
        }
      }
      else if ((v114 & 0x80000000) == 0)
      {
        goto LABEL_97;
      }
      operator delete(v113);
      if (!v112)
        goto LABEL_136;
      goto LABEL_134;
    }
    if (*(_BYTE *)(v11 + 56))
      goto LABEL_147;
    v58 = *a4;
    v59 = a4[12];
    v60 = *(_QWORD *)(v11 + 224) + 32 * *(_QWORD *)(v11 + 256);
    *(double *)v60 = a6;
    *(_DWORD *)(v60 + 8) = v58;
    *(_DWORD *)(v60 + 12) = v59;
    *(_BYTE *)(v60 + 16) = (v34 & 0x10) != 0;
    *(_QWORD *)(v60 + 24) = v33;
    v61 = *(_QWORD *)(v11 + 224);
    v62 = (*(_QWORD *)(v11 + 232) - v61) >> 5;
    v63 = *(_QWORD *)(v11 + 264);
    v64 = *(_QWORD *)(v11 + 256) + 1;
    v65 = v64 >= v62 ? (*(_QWORD *)(v11 + 232) - v61) >> 5 : 0;
    *(_QWORD *)(v11 + 256) = v64 - v65;
    if (v63 == v62)
    {
      v66 = *(_QWORD *)(v11 + 248) + 1;
      v67 = v66 >= v62 ? v62 : 0;
      *(_QWORD *)(v11 + 248) = v66 - v67;
      v68 = v62;
    }
    else
    {
      v68 = v63 + 1;
      *(_QWORD *)(v11 + 264) = v68;
    }
    if (v68 < *(unsigned int *)(v11 + 60))
      goto LABEL_147;
    if (!v68)
    {
      v84 = 0.0;
LABEL_197:
      if (v84 / (double)v68 < *(double *)(v11 + 32))
        goto LABEL_147;
      result = sub_20F0CE714((uint64_t)&v104, (_QWORD *)(v11 + 224));
      if (*(_DWORD *)(*(_QWORD *)v104
                     + 32
                     * ((*(_QWORD *)(v104 + 24) + v105)
                      % (unint64_t)((uint64_t)(*(_QWORD *)(v104 + 8) - *(_QWORD *)v104) >> 5))
                     + 8) < *(_DWORD *)(v11 + 28))
        goto LABEL_147;
      if (*(_BYTE *)(v11 + 192))
      {
        result = sub_20F0CE7C0((uint64_t)&v104, (_QWORD *)(v11 + 224));
        if (*(_DWORD *)(*(_QWORD *)v104
                       + 32
                       * ((*(_QWORD *)(v104 + 24) + v105)
                        % (unint64_t)((uint64_t)(*(_QWORD *)(v104 + 8) - *(_QWORD *)v104) >> 5))
                       + 12) < *(_DWORD *)(v11 + 24))
          goto LABEL_147;
      }
      v91 = *(_QWORD *)(v11 + 264);
      if (!v91)
      {
        v96 = 0.0;
        goto LABEL_211;
      }
      v92 = *(_QWORD *)(v11 + 224);
      v93 = (*(_QWORD *)(v11 + 232) - v92) >> 5;
      if (v91 == 1)
      {
        v94 = 0;
        v95 = 0;
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v95 = v91 & 0xFFFFFFFFFFFFFFFELL;
        v99 = v91 & 0xFFFFFFFFFFFFFFFELL;
        v100 = *(_QWORD *)(v11 + 248);
        do
        {
          result = *(unsigned __int8 *)(v92 + 32 * (v100 % v93) + 16);
          v97 += result;
          v98 += *(unsigned __int8 *)(v92 + 32 * ((v100 + 1) % v93) + 16);
          v100 += 2;
          v99 -= 2;
        }
        while (v99);
        v94 = v98 + v97;
        if (v91 == v95)
          goto LABEL_210;
      }
      v101 = v91 - v95;
      v102 = v95 + *(_QWORD *)(v11 + 248);
      do
      {
        v94 += *(unsigned __int8 *)(v92 + 32 * (v102 % v93) + 16);
        ++v102;
        --v101;
      }
      while (v101);
LABEL_210:
      v96 = (double)v94;
LABEL_211:
      if (v96 / (double)v91 < *(double *)(v11 + 48))
        goto LABEL_147;
      goto LABEL_145;
    }
    v81 = *(double *)(v11 + 40);
    if (v68 == 1)
    {
      v82 = 0;
      v83 = 0;
    }
    else
    {
      v85 = 0;
      v86 = 0;
      v83 = v68 & 0xFFFFFFFFFFFFFFFELL;
      v87 = v68 & 0xFFFFFFFFFFFFFFFELL;
      v88 = *(_QWORD *)(v11 + 248);
      do
      {
        result = v61 + 32 * (v88 % v62);
        if (*(double *)(result + 24) > v81)
          ++v85;
        if (*(double *)(v61 + 32 * ((v88 + 1) % v62) + 24) > v81)
          ++v86;
        v88 += 2;
        v87 -= 2;
      }
      while (v87);
      v82 = v86 + v85;
      if (v68 == v83)
        goto LABEL_196;
    }
    v89 = v68 - v83;
    v90 = v83 + *(_QWORD *)(v11 + 248);
    do
    {
      if (*(double *)(v61 + 32 * (v90 % v62) + 24) > v81)
        ++v82;
      ++v90;
      --v89;
    }
    while (v89);
LABEL_196:
    v84 = (double)v82;
    goto LABEL_197;
  }
  if (v32)
  {
    v36 = sub_210219C18();
    if (*(_BYTE *)(v11 + 217))
      v37 = *(unsigned __int8 *)(v11 + 216);
    else
      v37 = 0;
    v47 = *(unsigned __int8 *)(v11 + 585);
    v48 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_120;
    LODWORD(v104) = 67109376;
    DWORD1(v104) = v47;
    WORD4(v104) = 1024;
    *(_DWORD *)((char *)&v104 + 10) = v37;
    v50 = (char *)_os_log_send_and_compose_impl();
    v51 = strlen(v50);
    v103[0] = 0;
    pthread_threadid_np(0, v103);
    v52 = v103[0];
    timespec_get((timespec *)v103, 1);
    sub_210219E20(&v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v36 + 1), (__int128 *)(v36 + 5), "ICDVS: Ignore hint. geo:%d, large-map:%d", 0x28uLL, v50, v51, v52, v103);
    std::mutex::lock(&stru_254A5A410);
    v53 = qword_254A5A458;
    for (m = unk_254A5A460; v53 != m; v53 += 40)
    {
      v55 = *(_QWORD *)(v53 + 32);
      if (!v55)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v55 + 48))(v55, &v104);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v116 < 0)
    {
      operator delete(__p);
      if ((v114 & 0x80000000) == 0)
      {
LABEL_107:
        if (!v112)
        {
LABEL_113:
          if (v109 && v108 < 0)
            operator delete(v107);
          if (v106 < 0)
            operator delete(*((void **)&v104 + 1));
          if (v50)
            free(v50);
LABEL_120:
          result = os_signpost_enabled((os_log_t)*v36);
          v56 = -1.0;
          if ((_DWORD)result)
          {
            LODWORD(v104) = 67109376;
            DWORD1(v104) = v47;
            WORD4(v104) = 1024;
            *(_DWORD *)((char *)&v104 + 10) = v37;
            result = _os_signpost_emit_unreliably_with_name_impl();
          }
          v57 = 0;
          goto LABEL_146;
        }
LABEL_111:
        if (v111 < 0)
          operator delete(v110);
        goto LABEL_113;
      }
    }
    else if ((v114 & 0x80000000) == 0)
    {
      goto LABEL_107;
    }
    operator delete(v113);
    if (!v112)
      goto LABEL_113;
    goto LABEL_111;
  }
LABEL_147:
  if (*(_BYTE *)(v11 + 72) && *(_BYTE *)(v11 + 456) && *(_BYTE *)(v11 + 480) && *(_DWORD *)(v11 + 476) == 1)
  {
    v69 = *(_DWORD *)(v11 + 168);
    if (*(double *)(v11 + 464) <= *(double *)(v11 + 88))
      v70 = *(_DWORD *)(v11 + 76);
    else
      v70 = *(_DWORD *)(v11 + 80);
    *(_BYTE *)(v11 + 160) = v69 >= v70;
    if (v69 < v70)
      return result;
  }
  else
  {
    v71 = *(_DWORD *)(v11 + 168);
    *(_BYTE *)(v11 + 160) = v71 != 0;
    if (!v71)
      return result;
  }
  kdebug_trace();
  v72 = sub_210219C18();
  v73 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v104) = 134217984;
    *(double *)((char *)&v104 + 4) = a6;
    v75 = (char *)_os_log_send_and_compose_impl();
    v76 = strlen(v75);
    v103[0] = 0;
    pthread_threadid_np(0, v103);
    v77 = v103[0];
    timespec_get((timespec *)v103, 1);
    sub_210219E20(&v104, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v72 + 1), (__int128 *)(v72 + 5), "Concluding Moving Platform IMU-Camera discrepancy at %f, using VIO health heuristics over re-initialization periods", 0x73uLL, v75, v76, v77, v103);
    std::mutex::lock(&stru_254A5A410);
    v78 = qword_254A5A458;
    for (n = unk_254A5A460; v78 != n; v78 += 40)
    {
      v80 = *(_QWORD *)(v78 + 32);
      if (!v80)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v80 + 48))(v80, &v104);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v116 < 0)
    {
      operator delete(__p);
      if ((v114 & 0x80000000) == 0)
      {
LABEL_161:
        if (!v112)
        {
LABEL_167:
          if (v109 && v108 < 0)
            operator delete(v107);
          if (v106 < 0)
            operator delete(*((void **)&v104 + 1));
          if (v75)
            free(v75);
          goto LABEL_174;
        }
LABEL_165:
        if (v111 < 0)
          operator delete(v110);
        goto LABEL_167;
      }
    }
    else if ((v114 & 0x80000000) == 0)
    {
      goto LABEL_161;
    }
    operator delete(v113);
    if (!v112)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_174:
  result = os_signpost_enabled((os_log_t)*v72);
  if ((_DWORD)result)
  {
    LODWORD(v104) = 134217984;
    *(double *)((char *)&v104 + 4) = a6;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F0CFA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20F0CFB08()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0CFB1CLL);
}

void sub_20F0CFB2C(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  void **v10;
  char v11;
  void **v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  __uint64_t v27[2];
  int v28;
  _BYTE v29[18];
  __int16 v30;
  void **v31;
  void *v32[2];
  char v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 272;
  sub_210123468((double *)(a1 + 272), a2, a3, a4);
  *(double *)(a1 + 448) = a4;
  *(_BYTE *)(a1 + 456) = 1;
  if (a2 || !*(_BYTE *)(a1 + 424))
  {
    *(double *)(a1 + 416) = a4;
    *(_BYTE *)(a1 + 424) = 1;
  }
  v9 = sub_210219C18();
  sub_210123194(a2, v25);
  if (v26 >= 0)
    v10 = v25;
  else
    v10 = (void **)v25[0];
  v11 = sub_210123684(v8);
  sub_210123194(v11, v23);
  if (v24 >= 0)
    v12 = v23;
  else
    v12 = (void **)v23[0];
  sub_210123684(v8);
  v14 = v13;
  v15 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v28 = 136315906;
    *(_QWORD *)v29 = v10;
    *(_WORD *)&v29[8] = 2048;
    *(double *)&v29[10] = a3;
    v30 = 2080;
    v31 = v12;
    LOWORD(v32[0]) = 2048;
    *(void **)((char *)v32 + 2) = v14;
    v17 = (char *)_os_log_send_and_compose_impl();
    v18 = strlen(v17);
    v27[0] = 0;
    pthread_threadid_np(0, v27);
    v19 = v27[0];
    timespec_get((timespec *)v27, 1);
    sub_210219E20(&v28, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "MPC:Push: %s : %f. Rolling. %s : %f", 0x23uLL, v17, v18, v19, v27);
    std::mutex::lock(&stru_254A5A410);
    v20 = qword_254A5A458;
    for (i = unk_254A5A460; v20 != i; v20 += 40)
    {
      v22 = *(_QWORD *)(v20 + 32);
      if (!v22)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v28);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v41 < 0)
    {
      operator delete(__p);
      if ((v39 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v37)
        {
LABEL_23:
          if (v34 && v33 < 0)
            operator delete(v32[0]);
          if (SHIBYTE(v31) < 0)
            operator delete(*(void **)&v29[4]);
          if (v17)
            free(v17);
          goto LABEL_30;
        }
LABEL_21:
        if (v36 < 0)
          operator delete(v35);
        goto LABEL_23;
      }
    }
    else if ((v39 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v38);
    if (!v37)
      goto LABEL_23;
    goto LABEL_21;
  }
LABEL_30:
  if (os_signpost_enabled((os_log_t)*v9))
  {
    v28 = 136315906;
    *(_QWORD *)v29 = v10;
    *(_WORD *)&v29[8] = 2048;
    *(double *)&v29[10] = a3;
    v30 = 2080;
    v31 = v12;
    LOWORD(v32[0]) = 2048;
    *(void **)((char *)v32 + 2) = v14;
    _os_signpost_emit_unreliably_with_name_impl();
    if ((v24 & 0x80000000) == 0)
    {
LABEL_32:
      if ((v26 & 0x80000000) == 0)
        return;
LABEL_36:
      operator delete(v25[0]);
      return;
    }
  }
  else if ((v24 & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v23[0]);
  if (v26 < 0)
    goto LABEL_36;
}

void sub_20F0CFF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  sub_20E96E218((uint64_t)&a27);
  if (v27)
  {
    free(v27);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if (a24 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if (a24 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

BOOL sub_20F0CFFA8(uint64_t a1)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  uint64_t *v10;
  unsigned __int8 v11;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 v20;
  void *v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  _BOOL8 result;
  uint64_t *v28;
  double *v29;
  uint64_t v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  __uint64_t v43[2];

  if (!*(_BYTE *)(a1 + 57)
    || !*(_BYTE *)(a1 + 72)
    || !*(_BYTE *)(a1 + 456)
    || !*(_BYTE *)(a1 + 152)
    || sub_210123684(a1 + 272) - 2 > 4)
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 585))
  {
    if (!*(_BYTE *)(a1 + 576)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/GeolocationManager.cpp", 118, (uint64_t)"opt_last_geo_location_", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(double **)(a1 + 616);
    v3 = *(double **)(a1 + 624);
    if (v2 != v3)
    {
      v4 = *(double *)(a1 + 520);
      v5 = *(double *)(a1 + 528);
      v6 = *(double *)(a1 + 512);
      while (1)
      {
        v7 = *v2;
        v8 = (v2[1] - v5) * 0.0174532925;
        v9 = cos((v4 + *v2) * 0.5 * 0.0174532925);
        if (sqrt((v7 - v4) * 0.0174532925 * ((v7 - v4) * 0.0174532925) + v8 * v9 * (v8 * v9)) * 6371000.0 < v6)
          break;
        v2 += 7;
        if (v2 == v3)
          goto LABEL_24;
      }
    }
    if (v2 != v3)
    {
      v10 = sub_210219C18();
      v11 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_63;
      LOWORD(v30) = 0;
      v13 = (char *)_os_log_send_and_compose_impl();
      v14 = strlen(v13);
      v43[0] = 0;
      pthread_threadid_np(0, v43);
      v15 = v43[0];
      timespec_get((timespec *)v43, 1);
      sub_210219E20(&v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v10 + 1), (__int128 *)(v10 + 5), "MPC:Suppressed. Geo-location", 0x1CuLL, v13, v14, v15, v43);
      std::mutex::lock(&stru_254A5A410);
      v16 = qword_254A5A458;
      for (i = unk_254A5A460; v16 != i; v16 += 40)
      {
        v18 = *(_QWORD *)(v16 + 32);
        if (!v18)
          sub_20E86D37C();
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v30);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v42 < 0)
      {
        operator delete(__p);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_22:
          if (!v38)
          {
LABEL_56:
            if (v35 && v34 < 0)
              operator delete(v33);
            if (v32 < 0)
              operator delete(v31);
            if (v13)
              free(v13);
LABEL_63:
            result = os_signpost_enabled((os_log_t)*v10);
            if (!result)
              return result;
            LOWORD(v30) = 0;
            goto LABEL_65;
          }
LABEL_54:
          if (v37 < 0)
            operator delete(v36);
          goto LABEL_56;
        }
      }
      else if ((v40 & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(v39);
      if (!v38)
        goto LABEL_56;
      goto LABEL_54;
    }
  }
LABEL_24:
  if (!*(_BYTE *)(a1 + 488))
  {
    if (!*(_BYTE *)(a1 + 152))
      sub_20E866B34();
    v23 = *(double *)(a1 + 144);
    v24 = v23 - *(double *)(a1 + 200);
    v25 = *(double *)(a1 + 8);
    if (v24 >= v25)
    {
      if (v24 <= *(double *)(a1 + 16))
      {
        if (*(_BYTE *)(a1 + 491) && (*(_DWORD *)(a1 + 492) > *(_DWORD *)(a1 + 104) || *(_BYTE *)(a1 + 585)))
        {
          v28 = sub_210219C18();
          sub_20F0D08CC((uint64_t)v28, 0xEEEEB0B5B2B2EEEELL);
        }
        else
        {
          v29 = (double *)(a1 + 432);
          if (!*(_BYTE *)(a1 + 440) || v23 - *v29 >= v25)
          {
            *v29 = *(double *)(a1 + 144);
            *(_BYTE *)(a1 + 440) = *(_BYTE *)(a1 + 152);
            return 1;
          }
        }
      }
      else
      {
        v26 = sub_210219C18();
        sub_20F0D0618((uint64_t)v26, 0xEEEEB0B5B2B2EEEELL);
      }
    }
    return 0;
  }
  v19 = sub_210219C18();
  v20 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v30) = 0;
    v22 = (void *)_os_log_send_and_compose_impl();
    v43[0] = (__uint64_t)v22;
    sub_21021A118(&v30, (uint64_t)v19, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "MPC:Suppressed. User declined", 0x1DuLL, (const char **)v43);
    sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)&v30);
    if (v42 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_29:
        if (!v38)
        {
LABEL_39:
          if (v35 && v34 < 0)
            operator delete(v33);
          if (v32 < 0)
            operator delete(v31);
          if (v22)
            free(v22);
          goto LABEL_46;
        }
LABEL_37:
        if (v37 < 0)
          operator delete(v36);
        goto LABEL_39;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_39;
    goto LABEL_37;
  }
LABEL_46:
  result = os_signpost_enabled((os_log_t)*v19);
  if (!result)
    return result;
  LOWORD(v30) = 0;
LABEL_65:
  _os_signpost_emit_unreliably_with_name_impl();
  return 0;
}

void sub_20F0D05B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20F0D0618(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MPC:Suppressed. Reached limit.", 0x1EuLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F0D088C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20F0D08CC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MPC:Suppressed. 3DoF + geolocation.", 0x23uLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F0D0B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

unint64_t sub_20F0D0B80(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_210123684(a1 + 272);
  if (!*(_BYTE *)(a1 + 184))
  {
    if (*(_BYTE *)(a1 + 185))
    {
      v4 = 0;
      *(_BYTE *)(a1 + 185) = 0;
      v5 = 0x10000;
      return v5 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v2 << 24) | v4 | 1;
    }
    if (!*(_BYTE *)(a1 + 75))
    {
      if (*(_BYTE *)(a1 + 72) && *(_BYTE *)(a1 + 456))
      {
        if (!*(_BYTE *)(a1 + 424))
          sub_20E866B34();
        if (*(double *)(a1 + 448) - *(double *)(a1 + 416) <= *(double *)(a1 + 64))
          return (unint64_t)v2 << 24;
      }
      else if (!*(_BYTE *)(a1 + 160))
      {
        return (unint64_t)v2 << 24;
      }
    }
    if (*(_BYTE *)(a1 + 160))
    {
      v5 = 0;
      *(_DWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
      v4 = 256;
      return v5 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v2 << 24) | v4 | 1;
    }
    return (unint64_t)v2 << 24;
  }
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a1 + 409))
  {
    v3 = *(_BYTE *)(a1 + 408);
    *(_BYTE *)(a1 + 409) = 0;
  }
  else
  {
    v3 = 0;
  }
  return ((unint64_t)v3 << 24) | 1;
}

uint64_t sub_20F0D0CAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  __int128 v29;

  __p = operator new(0x38uLL);
  v29 = xmmword_2102DCA30;
  strcpy((char *)__p, "MovingIMUCameraDiscrepancyClassifierConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_time_after_bad_health_to_consider_good_tracking_in_sec", v4, "Minimum time to consider good tracking after recovering from bad tracking.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_time_to_force_reinitialize_due_to_movable_platform_classification", v5, "Minimum time to force re-initialize due to movable platform classification");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.max_time_since_session_start_to_use_mpc_hint_in_sec", v6, "Maximum time since session start to use MPC-based hint");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_num_stereo_matches_to_conclude_moving_platform", v7, "Minimum number of stereo matches to conclude low texture.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.drift_ratio_to_conclude_moving_platform", v8, "Drift ratio to conclude moving platform.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.vision_stationary_ratio_to_conclude_moving_platform", v9, "Vision-stationary ratio to conclude moving platform.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_position_diff_to_conclude_moving_platform_in_m", v10, "Minimum propagated IMU pose difference in position to conclude drift in moving platform.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DCF0((unsigned int *)(a1 + 28));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_num_features_to_conclude_moving_platform", v11, "Minimum number of features to conclude moving platform.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.use_only_tracking_classifier_status", v12, "Whether to only use tracking status from the tracking status classifier.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 57));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.enable_moving_platform_hint", v13, "Toggle Moving Platform Hint.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DCF0((unsigned int *)(a1 + 60));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.vio_health_queue_size", v14, "VIO health buffer size.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_time_to_fallback_to_slam_based_hint_in_s", v15, "Minimum time in seconds before falling back to SLAM-based hint.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.enable_movable_platform_classification", v16, "A flag to enable appearance-based movable platform classifiction (MPC).");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 73));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.use_geolocation_info_to_suppress_slam_based_hint", v17, "A flag to toggle geo-location information utilization.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 74));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.use_map_based_heuristics_to_ignore_the_hint", v18, "Whether to use the map-based heuristics to ignore the hint");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 75));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.use_concurrently_slam_based_hint_with_mpc", v19, "A flag indicating to concurrently use SLAM-based hint along with Movable-Platform Classifier hint.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DCF0((unsigned int *)(a1 + 76));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.num_imu_camera_discrepancies_to_declare_moving_platform_in_low_light", v20, "Number of IMU-camera discrepancies before declaring moving platform hint in low light.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.num_imu_camera_discrepancies_to_declare_moving_platform_in_normal_light", v21, "Number of IMU-camera discrepancies before declaring moving platform hint in normal light.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.max_mcam_lux_for_low_light_state", v22, "Maximum MCAM LUX to consider low light.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.min_time_to_reset_imu_camera_discrepancy_in_sec", v23, "Minimum time to reset IMU-camera discrepancy counter.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EA9DCF0((unsigned int *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.num_slam_states_to_disable_travel_mode_hint_in_3dof", v24, "Number of SLAM-updates to disable Travel mode hint after 6DoF-to-3DoF transition.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EAA14D8((_BYTE *)(a1 + 108));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.immediatly_allow_travel_mode_hint_in_3dof", v25, "Allow travel mode hint immediatly after transitioning to 3DoF. Otherwise, we have to wait for a signal from ARKit.");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EA9DCF0((unsigned int *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingIMUCameraDiscrepancyClassifierConfig.vs_platform_window_size", v26, " Size of the movable platform types window (queue) that is used to elect a final type to be used in travel mode hint.");
  sub_20F0962FC((double *)(a1 + 120), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F0D11AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F0D12A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  __int128 v12;

  __p = operator new(0x28uLL);
  v12 = xmmword_2102DCA20;
  strcpy((char *)__p, "MovingObjectsFilteringConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.enable_moving_objects_filtering", v4, "Whether to enable the second PnP RANSAC.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.min_displacement_to_run_second_pnp_ransac_in_m", v5, "Minimum displacement in meters to run the run the second PnP RANSAC. Below this threshold the second PnP RANSAC is not attempted.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.max_2d_inliers_ratio_to_run_second_pnp_ransac", v6, "Maximum ratio of 2D-2D inliers  in P3P to run the second PnP RANSAC. Below this threshold a second PnP RANSAC is attempted on a subset of 2D-3D pairs that moved the least or infered to be part of the static scene.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.max_ratio_of_inlier_2d_3d_correspondences_to_run_second_pnp_ransac", v7, "Maximum ratio of 2D-3D inliers  in P3P to run the second PnP RANSAC. Below this threshold a second PnP RANSAC is attempted on a subset of 2D-3D pairs that moved the least or infered to be part of the static scene.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.ratio_of_points_to_compute_avg_point_displacement", v8, "Ratio of 2D-3D correspondences used to compute the averagre point image-domain displacement.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  return sub_20E8B2F9C((uint64_t *)&__p, "MovingObjectsFilteringConfig.point_displacement_tolerance_factor", v9, "Tolerance factor around the averagre point image-domain displacement to select the 2D-3D correspondences for the second PnP RANSAC.");
}

void sub_20F0D1444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0D14A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v18;
  std::string *v19;
  std::string *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int v26;
  std::string v27;
  void **p_p;

  __p = operator new(0x30uLL);
  v18 = xmmword_2102DC8D0;
  strcpy((char *)__p, "OnlineCameraCalibrationConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v23 = nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  v26 = 0;
  sub_20EAA4EB4(&v24, "Minimum camera stream frames used once online calibration initiated.");
  __p = &v24;
  *(_QWORD *)&v18 = " (default = ";
  *((_QWORD *)&v18 + 1) = &v24;
  v19 = (std::string *)" (default = ";
  v20 = (std::string *)" (default = ";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, char **))off_24C9F8C00[v26])(&v27, &v24);
  std::to_string(&v27, *(_DWORD *)a1);
  __p = &v24;
  *(_QWORD *)&v18 = &v27;
  *((_QWORD *)&v18 + 1) = &v24;
  v19 = &v27;
  v20 = &v27;
  if (v26 == -1)
    sub_20E877AB8();
  p_p = &__p;
  ((void (*)(void ***, char **))off_24C9F8BB8[v26])(&p_p, &v24);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  __p = &v24;
  *(_QWORD *)&v18 = ")";
  *((_QWORD *)&v18 + 1) = &v24;
  v19 = (std::string *)")";
  v20 = (std::string *)")";
  if (v26 == -1)
    sub_20E877AB8();
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, char **))off_24C9F8C18[v26])(&v27, &v24);
  if (v26 == -1)
    sub_20E877AB8();
  __p = &v27;
  ((void (*)(void **__return_ptr, void **, char **))off_24C9F8BE8[v26])(v21, &__p, &v24);
  if (v26 != -1)
    ((void (*)(void **, char **))off_24C9F8BD0[v26])(&__p, &v24);
  if (v22 >= 0)
    v5 = (char *)v21;
  else
    v5 = (char *)v21[0];
  sub_20E8B2F9C(&v23, "OnlineCameraCalibrationConfig.min_frames_needed_for_online_calibration", v4, v5);
  if (v22 < 0)
    operator delete(v21[0]);
  v24 = (char *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 4));
  sub_20EAA1AB0("Whether to enable the opportunistic online calibration.", (const char **)" (default = ", (_BYTE *)(a1 + 4), (const char **)")");
  if (v18 >= 0)
    v7 = (char *)&__p;
  else
    v7 = (char *)__p;
  sub_20E8B2F9C((uint64_t *)&v24, "OnlineCameraCalibrationConfig.use_opportunistic_calibration", v6, v7);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v24 = (char *)operator new(0x28uLL);
  v25 = xmmword_2102DCA10;
  strcpy(v24, "CameraCalibrationEnabler parameters");
  sub_20E8B30B4(&__p, (__int128 *)&v24, 180, 160);
  if (SHIBYTE(v25) < 0)
    operator delete(v24);
  v24 = (char *)nullsub_1(&__p);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.num_frames_in_sliding_window", v8, "Number of frames in the sliding window filter.");
  v24 = (char *)nullsub_1(&__p);
  v9 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.min_number_of_features", v9, "Minimum number of inlier features.");
  v24 = (char *)nullsub_1(&__p);
  v10 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.linear_velocity_stationary_threshold", v10, "Stationary threshold for the device linear velocity.");
  v24 = (char *)nullsub_1(&__p);
  v11 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.angular_velocity_stationary_threshold", v11, "Stationary threshold for the device angular velocity (rad/s).");
  v24 = (char *)nullsub_1(&__p);
  v12 = sub_20EA9DCF0((unsigned int *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.long_term_stationary_threshold", v12, "Threshold for consecutive stationary states to consider the device long-term stationary.");
  v24 = (char *)nullsub_1(&__p);
  v13 = sub_20EA9DCF0((unsigned int *)(a1 + 44));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.low_texture_threshold", v13, "Threshold for consecutive low texture states to disable calibration estimation.");
  v24 = (char *)nullsub_1(&__p);
  v14 = sub_20EA9DCF0((unsigned int *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.min_steps_since_last_poor_texture_environment", v14, "Minimum number of steps before estimation can be re-enabled after poor information environment.");
  v24 = (char *)nullsub_1(&__p);
  v15 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&v24, "CameraCalibrationEnablerConfig.max_seconds_between_calibration_attempts", v15, "Maximum seconds between calibration attempts for the non-selected stereo-pair.");
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F0D195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0D1A84(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  void **v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  size_t v43;
  size_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  const char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  const char *v100;
  const char *v101;
  _QWORD v102[3];
  int v103;
  const char *v104;
  int v105;
  const char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void *__dst[2];
  int64_t v110;
  _QWORD v111[2];
  _QWORD v112[3];
  const void *v113;
  uint64_t v114;
  const void *v115;
  unint64_t v116;
  void *__p;
  char v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  char *v125;
  std::__shared_weak_count *v126;
  _QWORD *v127;
  __int128 v128;
  _BYTE v129[24];
  __int128 v130;
  void *v131[2];
  unint64_t v132;
  char v133;
  _QWORD v134[5];

  v134[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 352) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 416) = v8;
  *(_OWORD *)(a1 + 368) = v6;
  *(_OWORD *)(a1 + 384) = v7;
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 464) = v10;
  *(_OWORD *)(a1 + 432) = v9;
  *(_QWORD *)(a1 + 480) = v11;
  *(_QWORD *)(a1 + 488) = a3;
  *(_BYTE *)(a1 + 496) = 0;
  *(double *)(a1 + 504) = a4 * a4;
  sub_20F0D26A4(&v122);
  if (**(int **)(v122 + 56) > 3)
    return a1;
  v12 = *(unsigned __int8 *)(v122 + 72);
  v13 = sub_20E8C31DC(v122, "OSLogSurrogateAppender", 1, 0);
  v14 = v13;
  if (!v12 && !v13)
    return a1;
  sub_20E863438((uint64_t)v111);
  sub_20E86A980(v112, (uint64_t)"Set Sampson threshold to ", 25);
  std::ostream::operator<<();
  if ((v120 & 0x10) != 0)
  {
    v17 = v119;
    if (v119 < v116)
    {
      v119 = v116;
      v17 = v116;
    }
    v18 = v115;
    v15 = v17 - (_QWORD)v115;
    if (v17 - (unint64_t)v115 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_62;
  }
  else
  {
    if ((v120 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v110) = 0;
      v16 = __dst;
      goto LABEL_17;
    }
    v18 = v113;
    v15 = v114 - (_QWORD)v113;
    if ((unint64_t)(v114 - (_QWORD)v113) > 0x7FFFFFFFFFFFFFF7)
LABEL_62:
      sub_20E860B7C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v16 = (void **)operator new(v19 + 1);
    __dst[1] = (void *)v15;
    v110 = v20 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_16;
  }
  HIBYTE(v110) = v15;
  v16 = __dst;
  if (v15)
LABEL_16:
    memmove(v16, v18, v15);
LABEL_17:
  *((_BYTE *)v16 + v15) = 0;
  v102[0] = &v122;
  v102[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v102[2] = std::chrono::system_clock::now().__d_.__rep_;
  v103 = 3;
  v104 = "unknown file";
  v105 = 34;
  v107 = 0;
  v108 = 0;
  v106 = "unknown function";
  if (v110 >= 0)
    v21 = (const char *)__dst;
  else
    v21 = (const char *)__dst[0];
  v22 = *(_QWORD *)v102[0];
  v23 = (const char *)(*(_QWORD *)v102[0] + 16);
  v101 = v23;
  if (*(char *)(*(_QWORD *)v102[0] + 39) < 0)
  {
    v23 = *(const char **)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v26 & 1) != 0)
      goto LABEL_24;
  }
  else
  {
    v24 = *(unsigned __int8 *)(*(_QWORD *)v102[0] + 39);
    v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v25 & 1) != 0)
      goto LABEL_24;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v129);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v129);
    if ((_BYTE)v130 && (v129[23] & 0x80000000) != 0)
      operator delete(*(void **)v129);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_24:
  if (byte_254A4A4F8[23] >= 0)
    v27 = byte_254A4A4F8;
  else
    v27 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v28 = byte_254A4A4F8[23];
  else
    v28 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v129 = os_log_create(v27, v23);
  v29 = &v129[8];
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v28 >= 0x17)
  {
    v100 = v23;
    v30 = v22;
    v31 = v14;
    v32 = v21;
    v33 = v12;
    v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v34 = v28 | 7;
    v35 = v34 + 1;
    v29 = operator new(v34 + 1);
    *(_QWORD *)&v129[16] = v28;
    *(_QWORD *)&v130 = v35 | 0x8000000000000000;
    *(_QWORD *)&v129[8] = v29;
    v12 = v33;
    v21 = v32;
    v14 = v31;
    v22 = v30;
    v23 = v100;
    goto LABEL_37;
  }
  BYTE7(v130) = v28;
  if (v28)
LABEL_37:
    memmove(v29, v27, v28);
  v29[v28] = 0;
  BYTE8(v130) = 1;
  v36 = v131;
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v24 >= 0x17)
  {
    v38 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v38 = v24 | 7;
    v39 = v38 + 1;
    v36 = (void **)operator new(v38 + 1);
    v131[1] = (void *)v24;
    v132 = v39 | 0x8000000000000000;
    v131[0] = v36;
  }
  else
  {
    HIBYTE(v132) = v24;
    if (!v24)
    {
      LOBYTE(v131[0]) = 0;
      v133 = 1;
      v37 = *(NSObject **)v129;
      if ((SHIBYTE(v132) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_48;
    }
  }
  memmove(v36, v23, v24);
  *((_BYTE *)v36 + v24) = 0;
  v133 = 1;
  v37 = *(NSObject **)v129;
  if ((SHIBYTE(v132) & 0x80000000) == 0)
  {
LABEL_42:
    if (!BYTE8(v130))
      goto LABEL_51;
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v131[0]);
  if (!BYTE8(v130))
    goto LABEL_51;
LABEL_49:
  if (SBYTE7(v130) < 0)
    operator delete(*(void **)&v129[8]);
LABEL_51:
  if (*(_QWORD *)v129)
    os_release(*(void **)v129);
  if (!v14 || !*(_QWORD *)(v14 + 24))
  {
    os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
    *(_DWORD *)v129 = 136315138;
    *(_QWORD *)&v129[4] = v21;
    v46 = (void *)_os_log_send_and_compose_impl();
    if (v46)
      free(v46);
    goto LABEL_127;
  }
  v40 = _os_log_pack_size();
  v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
  v42 = (std::__shared_weak_count *)operator new();
  v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v42->__shared_owners_ = 0;
  v42->__shared_weak_owners_ = 0;
  v42[1].__vftable = v41;
  *(_QWORD *)&v123 = v41;
  *((_QWORD *)&v123 + 1) = v41;
  v125 = 0;
  v126 = 0;
  v124 = v42;
  v43 = strlen(v21);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v44 = v43;
  if (v43 >= 0x17)
  {
    v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v47 = v43 | 7;
    v48 = v47 + 1;
    v45 = operator new(v47 + 1);
    *(_QWORD *)&v128 = v44;
    *((_QWORD *)&v128 + 1) = v48 | 0x8000000000000000;
    v127 = v45;
    goto LABEL_66;
  }
  HIBYTE(v128) = v43;
  v45 = &v127;
  if (v43)
LABEL_66:
    memcpy(v45, v21, v44);
  *((_BYTE *)v45 + v44) = 0;
  v49 = v127;
  v134[0] = v128;
  *(_QWORD *)((char *)v134 + 7) = *(_QWORD *)((char *)&v128 + 7);
  v50 = HIBYTE(v128);
  v51 = operator new(0x38uLL);
  v51[1] = 0;
  v51[2] = 0;
  v51[3] = off_24C9ABC20;
  *v51 = &off_24C9ABBD0;
  v52 = v134[0];
  v51[4] = v49;
  v51[5] = v52;
  *(_QWORD *)((char *)v51 + 47) = *(_QWORD *)((char *)v134 + 7);
  *((_BYTE *)v51 + 55) = v50;
  v134[0] = 0;
  *(_QWORD *)((char *)v134 + 7) = 0;
  v53 = v126;
  v125 = (char *)(v51 + 3);
  v126 = (std::__shared_weak_count *)v51;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_OWORD *)v129 = v123;
  v56 = v125;
  *(_QWORD *)&v129[16] = v124;
  if (v124)
  {
    v57 = (unint64_t *)&v124->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = v126;
  *(_QWORD *)&v130 = v56;
  *((_QWORD *)&v130 + 1) = v126;
  if (v126)
  {
    v60 = (unint64_t *)&v126->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    v131[0] = v56;
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    v131[0] = v56;
  }
  v63 = v124;
  if (v124)
  {
    v64 = (unint64_t *)&v124->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(_QWORD *)v129;
  if (*((char *)v131[0] + 31) >= 0)
    v67 = (char *)v131[0] + 8;
  else
    v67 = (char *)*((_QWORD *)v131[0] + 1);
  v68 = _os_log_pack_fill();
  *(_DWORD *)v68 = 136315138;
  *(_QWORD *)(v68 + 4) = v67;
  v69 = operator new();
  v70 = *(unsigned __int8 *)(v22 + 39);
  v71 = *(const char **)(v22 + 16);
  v72 = *(_QWORD *)(v22 + 24);
  v73 = v130;
  *(_OWORD *)(v69 + 8) = *(_OWORD *)&v129[8];
  if ((v70 & 0x80u) != 0)
    v70 = v72;
  else
    v71 = v101;
  *(_QWORD *)v69 = v66;
  *(_QWORD *)&v129[8] = 0;
  *(_QWORD *)&v129[16] = 0;
  *(_OWORD *)(v69 + 24) = v73;
  v130 = 0uLL;
  *(_QWORD *)(v69 + 40) = v71;
  *(_QWORD *)(v69 + 48) = v70;
  *(_BYTE *)(v69 + 56) = 1;
  v127 = 0;
  *(_QWORD *)&v123 = v69;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v123);
  v74 = v123;
  *(_QWORD *)&v123 = 0;
  if (v74)
  {
    v75 = *(std::__shared_weak_count **)(v74 + 32);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = *(std::__shared_weak_count **)(v74 + 16);
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    MEMORY[0x212BC6398](v74, 0x10F0C40B62ED6C6);
    v81 = v127;
    v127 = 0;
    if (v81)
    {
      v82 = (std::__shared_weak_count *)v81[4];
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v85 = (std::__shared_weak_count *)v81[2];
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      MEMORY[0x212BC6398](v81, 0x10F0C40B62ED6C6);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
  if (*((_QWORD *)&v130 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(std::__shared_weak_count **)&v129[16];
  if (*(_QWORD *)&v129[16])
  {
    v92 = (unint64_t *)(*(_QWORD *)&v129[16] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
LABEL_127:
  if (v12)
  {
    v94 = (const char *)__dst;
    if (v110 < 0)
      v94 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v102, "%s", v94);
    sub_20E863570((uint64_t)v102);
  }
  sub_20E863570((uint64_t)v102);
  v95 = v108;
  if (v108)
  {
    v96 = (unint64_t *)&v108->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v110) < 0)
    operator delete(__dst[0]);
  v111[0] = *MEMORY[0x24BEDB7F0];
  v98 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v111 + *(_QWORD *)(v111[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v112[0] = v98;
  v112[1] = MEMORY[0x24BEDB848] + 16;
  if (v118 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v121);
  return a1;
}

void sub_20F0D2558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a28);
  sub_20ED29320(v28 + 168);
  sub_20ED29320(v28);
  _Unwind_Resume(a1);
}

void sub_20F0D26A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62090);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62090))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62088);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62090);
  }
  *a1 = qword_254A62088;
}

void sub_20F0D2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62090);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62090);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0D2798(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  size_t v15;
  const char *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  const char *v88;
  size_t v89;
  _BYTE *v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *p_p;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  size_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t *v145;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v147;
  int v148;
  const char *v149;
  int v150;
  const char *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE object[24];
  __int128 v158;
  void *__p;
  size_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 88) == *(_QWORD *)(a2 + 80))
  {
    sub_20F0D26A4(&v154);
    if (**(int **)(v154 + 56) > 2)
      return 0;
    v17 = *(unsigned __int8 *)(v154 + 72);
    v18 = sub_20E8C31DC(v154, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (!v17 && v18 == 0)
      return 0;
    v145 = &v154;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v147 = std::chrono::system_clock::now().__d_.__rep_;
    v148 = 2;
    v149 = "unknown file";
    v150 = 43;
    v152 = 0;
    v153 = 0;
    v151 = "unknown function";
    v21 = v154;
    v22 = v154 + 16;
    if (*(char *)(v154 + 39) < 0)
    {
      v24 = *(const char **)(v154 + 16);
      v23 = *(_QWORD *)(v154 + 24);
      v87 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v87 & 1) != 0)
        goto LABEL_114;
    }
    else
    {
      v23 = *(unsigned __int8 *)(v154 + 39);
      v24 = (const char *)(*v145 + 16);
      v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v25 & 1) != 0)
        goto LABEL_114;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v158 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_114:
    if (byte_254A4A4F8[23] >= 0)
      v88 = byte_254A4A4F8;
    else
      v88 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v89 = byte_254A4A4F8[23];
    else
      v89 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v88, v24);
    v90 = &object[8];
    if (v89 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v89 >= 0x17)
    {
      v91 = v19;
      v92 = v24;
      v93 = v21;
      v94 = v17;
      v95 = v22;
      v96 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v89 | 7) != 0x17)
        v96 = v89 | 7;
      v97 = v96 + 1;
      v90 = operator new(v96 + 1);
      *(_QWORD *)&object[16] = v89;
      *(_QWORD *)&v158 = v97 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v90;
      v22 = v95;
      v17 = v94;
      v21 = v93;
      v24 = v92;
      v19 = v91;
    }
    else
    {
      BYTE7(v158) = v89;
      if (!v89)
      {
LABEL_128:
        v90[v89] = 0;
        BYTE8(v158) = 1;
        p_p = &__p;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v23 >= 0x17)
        {
          v99 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v99 = v23 | 7;
          v100 = v99 + 1;
          p_p = operator new(v99 + 1);
          v160 = v23;
          v161 = v100 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v161) = v23;
          if (!v23)
            goto LABEL_136;
        }
        memmove(p_p, v24, v23);
LABEL_136:
        *((_BYTE *)p_p + v23) = 0;
        v162 = 1;
        v101 = *(NSObject **)object;
        if (SHIBYTE(v161) < 0)
          operator delete(__p);
        if (BYTE8(v158) && SBYTE7(v158) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v19 && *(_QWORD *)(v19 + 24))
        {
          v102 = _os_log_pack_size();
          v103 = (std::__shared_weak_count_vtbl *)operator new(v102, (std::align_val_t)8uLL);
          v104 = (std::__shared_weak_count *)operator new();
          v105 = v104;
          v104->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v104->__shared_owners_;
          v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v104->__shared_weak_owners_ = 0;
          v104[1].__vftable = v103;
          *(_QWORD *)object = v103;
          *(_QWORD *)&object[8] = v103;
          *(_QWORD *)&object[16] = v104;
          do
            v107 = __ldxr(p_shared_owners);
          while (__stxr(v107 + 1, p_shared_owners));
          v158 = 0uLL;
          __p = 0;
          do
            v108 = __ldaxr(p_shared_owners);
          while (__stlxr(v108 - 1, p_shared_owners));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v105);
          }
          v109 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v110 = operator new();
          v111 = *(unsigned __int8 *)(v21 + 39);
          if ((v111 & 0x80u) == 0)
            v112 = v22;
          else
            v112 = *(_QWORD *)(v21 + 16);
          if ((v111 & 0x80u) != 0)
            v111 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)v110 = v109;
          *(_OWORD *)(v110 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v110 + 24) = v158;
          v158 = 0uLL;
          *(_QWORD *)(v110 + 40) = v112;
          *(_QWORD *)(v110 + 48) = v111;
          *(_BYTE *)(v110 + 56) = 2;
          v155 = 0;
          v156 = v110;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v156);
          v113 = v156;
          v156 = 0;
          if (v113)
          {
            v114 = *(std::__shared_weak_count **)(v113 + 32);
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = *(std::__shared_weak_count **)(v113 + 16);
            if (v117)
            {
              v118 = (unint64_t *)&v117->__shared_owners_;
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
            v120 = v155;
            v155 = 0;
            if (v120)
            {
              v121 = *(std::__shared_weak_count **)(v120 + 32);
              if (v121)
              {
                v122 = (unint64_t *)&v121->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              v124 = *(std::__shared_weak_count **)(v120 + 16);
              if (v124)
              {
                v125 = (unint64_t *)&v124->__shared_owners_;
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              MEMORY[0x212BC6398](v120, 0x10F0C40B62ED6C6);
            }
          }
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
          if (*((_QWORD *)&v158 + 1))
          {
            v128 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v130 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v131 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
        }
        else
        {
          os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v133 = (void *)_os_log_send_and_compose_impl();
          if (v133)
            free(v133);
        }
        if (v17)
        {
          sub_20E8C003C((uint64_t)&v145, "[LINE STATION]: Line tracking Disabled");
          sub_20E863570((uint64_t)&v145);
        }
        sub_20E863570((uint64_t)&v145);
        v134 = v153;
        if (v153)
        {
          v135 = (unint64_t *)&v153->__shared_owners_;
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        return 0;
      }
    }
    memmove(v90, v88, v89);
    goto LABEL_128;
  }
  sub_20F0D26A4(&v154);
  if (**(int **)(v154 + 56) <= 2)
  {
    v10 = *(unsigned __int8 *)(v154 + 72);
    v11 = sub_20E8C31DC(v154, "OSLogSurrogateAppender", 1, 0);
    v12 = v11;
    if (v10 || v11 != 0)
    {
      v141 = v10;
      v145 = &v154;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v147 = std::chrono::system_clock::now().__d_.__rep_;
      v148 = 2;
      v149 = "unknown file";
      v150 = 47;
      v152 = 0;
      v153 = 0;
      v151 = "unknown function";
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 16);
      v139 = v154;
      if (*(char *)(v154 + 39) < 0)
      {
        v16 = *(const char **)(v154 + 16);
        v15 = *(_QWORD *)(v154 + 24);
      }
      else
      {
        v15 = *(unsigned __int8 *)(v154 + 39);
        v16 = (const char *)(v154 + 16);
      }
      v138 = v154 + 16;
      v144 = a4;
      v140 = a5;
      v142 = *(_QWORD *)(v14 + 48);
      v143 = *(_QWORD *)(v14 + 56);
      v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v158 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v27 = byte_254A4A4F8;
      else
        v27 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v28 = byte_254A4A4F8[23];
      else
        v28 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v27, v16);
      v29 = &object[8];
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v28 >= 0x17)
      {
        v30 = v12;
        v31 = v16;
        v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v32 = v28 | 7;
        v33 = v32 + 1;
        v29 = operator new(v32 + 1);
        *(_QWORD *)&object[16] = v28;
        *(_QWORD *)&v158 = v33 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v29;
        v16 = v31;
        v12 = v30;
      }
      else
      {
        BYTE7(v158) = v28;
        if (!v28)
        {
LABEL_33:
          v29[v28] = 0;
          BYTE8(v158) = 1;
          v34 = &__p;
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a4 = v144;
          if (v15 >= 0x17)
          {
            v35 = v12;
            v36 = v16;
            v37 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v37 = v15 | 7;
            v38 = v37 + 1;
            v34 = operator new(v37 + 1);
            v160 = v15;
            v161 = v38 | 0x8000000000000000;
            __p = v34;
            v16 = v36;
            v12 = v35;
          }
          else
          {
            HIBYTE(v161) = v15;
            if (!v15)
              goto LABEL_41;
          }
          memmove(v34, v16, v15);
LABEL_41:
          *((_BYTE *)v34 + v15) = 0;
          v162 = 1;
          v39 = *(NSObject **)object;
          if (SHIBYTE(v161) < 0)
            operator delete(__p);
          if (BYTE8(v158) && SBYTE7(v158) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v12 && *(_QWORD *)(v12 + 24))
          {
            v40 = _os_log_pack_size();
            v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
            v42 = (std::__shared_weak_count *)operator new();
            v43 = v42;
            v42->__shared_owners_ = 0;
            v44 = (unint64_t *)&v42->__shared_owners_;
            v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v42->__shared_weak_owners_ = 0;
            v42[1].__vftable = v41;
            *(_QWORD *)object = v41;
            *(_QWORD *)&object[8] = v41;
            *(_QWORD *)&object[16] = v42;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v158 = 0uLL;
            __p = 0;
            do
              v46 = __ldaxr(v44);
            while (__stlxr(v46 - 1, v44));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v43);
            }
            v47 = *(_QWORD *)object;
            v48 = _os_log_pack_fill();
            *(_DWORD *)v48 = 134217984;
            *(_QWORD *)(v48 + 4) = (v143 - v142) >> 3;
            v49 = operator new();
            v50 = *(unsigned __int8 *)(v139 + 39);
            v51 = v138;
            if ((v50 & 0x80u) != 0)
            {
              v51 = *(_QWORD *)(v139 + 16);
              v50 = *(_QWORD *)(v139 + 24);
            }
            *(_QWORD *)v49 = v47;
            *(_OWORD *)(v49 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v49 + 24) = v158;
            v158 = 0uLL;
            *(_QWORD *)(v49 + 40) = v51;
            *(_QWORD *)(v49 + 48) = v50;
            *(_BYTE *)(v49 + 56) = 2;
            v155 = 0;
            v156 = v49;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v156);
            v52 = v141;
            v53 = v156;
            v156 = 0;
            a4 = v144;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
              v60 = v155;
              v155 = 0;
              if (v60)
              {
                v61 = *(std::__shared_weak_count **)(v60 + 32);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = *(std::__shared_weak_count **)(v60 + 16);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                MEMORY[0x212BC6398](v60, 0x10F0C40B62ED6C6);
              }
            }
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
            if (*((_QWORD *)&v158 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v71 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
          }
          else
          {
            os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)object = 134217984;
            *(_QWORD *)&object[4] = (v143 - v142) >> 3;
            v73 = (void *)_os_log_send_and_compose_impl();
            v52 = v141;
            if (v73)
              free(v73);
          }
          if (v52)
          {
            sub_20E8C003C((uint64_t)&v145, "[LINE STATION]: NumTrackedFeatures: %zu", (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16) + 48)) >> 3);
            sub_20E863570((uint64_t)&v145);
          }
          sub_20E863570((uint64_t)&v145);
          v74 = v153;
          if (v153)
          {
            v75 = (unint64_t *)&v153->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          a5 = v140;
          goto LABEL_101;
        }
      }
      memmove(v29, v27, v28);
      goto LABEL_33;
    }
  }
LABEL_101:
  v77 = sub_20F183E98(*(_QWORD *)(a2 + 80) + 168 * a3, a1 + 216, a1 + 168, 0, 0, 0, 0, a5, a4, 1u, 0);
  v78 = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3;
  object[0] = 1;
  sub_20EDCA4D0(a1 + 312, v78, object);
  sub_20E86811C((_QWORD *)(a1 + 288), *(char **)(a1 + 216), *(char **)(a1 + 224), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
  sub_20E86811C((_QWORD *)(a1 + 264), *(char **)(a1 + 168), *(char **)(a1 + 176), (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
  v79 = *(_QWORD *)(a2 + 80) + 168 * a3;
  v80 = *(_QWORD *)(v79 + 16);
  for (i = *(_QWORD *)(v79 + 24); v80 != i; v80 += 256)
  {
    v82 = *(uint64_t **)(v80 + 48);
    v83 = *(uint64_t **)(v80 + 56);
    while (v82 != v83)
    {
      v84 = *v82;
      if (*v82 && *(_DWORD *)v84 != -1 && *(_QWORD *)(v84 + 80))
      {
        v85 = 0;
        v86 = 1;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v84 + 88)
                   + (*(_QWORD *)(v84 + 112) + v85) % (*(_QWORD *)(v84 + 96) - *(_QWORD *)(v84 + 88))) = 1;
          v85 = v86++;
        }
        while (*(_QWORD *)(v84 + 80) > v85);
      }
      ++v82;
    }
  }
  return v77;
}

void sub_20F0D36C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F0D3710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E86E8C4(&a30);
  sub_20E86E8C4(&a29);
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F0D37A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0D37C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0D37D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a38 && a37 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F0D386C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F0D387C()
{
  JUMPOUT(0x20F0D3884);
}

uint64_t sub_20F0D388C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];

  __p = operator new(0x28uLL);
  v23 = xmmword_2102DBA80;
  strcpy((char *)__p, "OutlierRejectionConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.outlier_rejection_threshold_in_pixels", v4, "Max reprojection error in image domain (in pixels)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.min_num_inliers", v5, "Minimum number of inliers to accept an incremental pose.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.ransac_max_num_hypotheses", v6, "Maximum number of RANSAC hypothesis to run.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.ransac_max_trials", v7, "The maximum number of RANSAC trials");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DCF0((unsigned int *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.ransac_chunk_size", v8, "Preemptive RANSAC chunk size.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.ransac_pose_refinement", v9, "A flag indicating whether to do pose refinement.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.max_reprojection_error_sqr_in_distorted", v10, "Use velocity gating to modify stationary constraints.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.focal_plane_threshold", v11, "Focal plane threshold.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.max_depth_threshold", v12, "Maximum allowed depth for triangulated points.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.feature_bearing_direction_angle_cosine_threshold", v13, "Maximum allowed cosine of the angle between the 2D feature and triangulated 3D point in camera frame.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.vergence_cos_threshold", v14, "Cosine of the maximum vergence angle (for stereo 3D triangulation)");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.use_p3p_estimator_for_primary_stream_in_stereo", v15, "Use P3P estimator for the primary stream in stereo cameras. Otherwise, use an epipolar algorithm (5-point or 2-point).");
  __p = (void *)nullsub_1(a2);
  v16 = operator new();
  *(_QWORD *)v16 = &off_24C9C34F8;
  *(_QWORD *)(v16 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v16 + 120) = 0;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_QWORD *)(v16 + 109) = 0;
  v24 = (uint64_t)off_24C9F8C30 + 1;
  v25[0] = a1;
  sub_20EAA8294((uint64_t *)(v16 + 120), &v24);
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.epipolar_algorithm", v16, "Selects which algorithm for two-view epipolar verification. 0 for FivePoint and 1 for Two-Point.");
  if (v24)
  {
    if ((v24 & 1) == 0)
    {
      v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 & 0xFFFFFFFFFFFFFFFELL);
      if (v17)
        v17(v25, v25, 2);
    }
    v24 = 0;
  }
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.enable_semantics_outlier_check", v18, "Enable filtering of triangulated features using semantics.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.semantics_keyframe_search_dist_m_sq", v19, "Semantics outlier rejection nearby keyframe distance search range squared. (meter^2)");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "OutlierRejectionConfig.semantics_keyframe_search_orientation_deg", v20, "Semantics outlier rejection nearby keyframe orientation search range. (degree)");
  sub_20F0D12A4(a1 + 104, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F0D3CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0D3D88(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F8C40;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_22OutlierRejectionConfigEE4$_13" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_22OutlierRejectionConfigEE4$_13" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20F0D3E34(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)result + 28) = *a2;
  return result;
}

uint64_t sub_20F0D3E44(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  a2[1] = *a2;
  v9 = *a3;
  a3[1] = *a3;
  a4[1] = *a4;
  v10 = (_QWORD *)a1[3];
  v11 = (uint64_t)(a1[4] - (_QWORD)v10) >> 3;
  v12 = (a2[1] - v8) >> 3;
  if (v11 <= v12)
  {
    if (v11 < v12)
      a2[1] = v8 + 8 * v11;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a2, v11 - v12);
    v10 = (_QWORD *)a1[3];
    v9 = *a3;
  }
  v13 = (uint64_t)(a1[4] - (_QWORD)v10) >> 3;
  v14 = (a3[1] - v9) >> 3;
  if (v13 <= v14)
  {
    if (v13 < v14)
      a3[1] = v9 + 8 * v13;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a3, v13 - v14);
    v10 = (_QWORD *)a1[3];
  }
  v15 = (uint64_t)(a1[4] - (_QWORD)v10) >> 3;
  v16 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v15 <= v16)
  {
    if (v15 < v16)
      a4[1] = *a4 + 8 * v15;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a4, v15 - v16);
    v10 = (_QWORD *)a1[3];
  }
  v17 = (_QWORD *)a1[4];
  v18 = *a2;
  if (v17 == v10)
  {
    v19 = 0;
    v29 = 0;
    v31 = (a2[1] - v18) >> 3 == 0;
  }
  else
  {
    LODWORD(v19) = 0;
    v20 = v17 - v10;
    v21 = *a3;
    v22 = *a4;
    v23 = (_QWORD *)(a1[6] + 8);
    v24 = (_QWORD *)(*a1 + 8);
    v25 = 2;
    do
    {
      v26 = 8 * (2 * v19);
      *(_QWORD *)(v18 + v26) = *(v24 - 1);
      v27 = 8 * ((2 * (_DWORD)v19) | 1u);
      *(_QWORD *)(v18 + v27) = *v24;
      *(_QWORD *)(v21 + v26) = *v10;
      *(_QWORD *)(v21 + v27) = v10[1];
      *(_QWORD *)(v22 + v26) = *(v23 - 1);
      *(_QWORD *)(v22 + v27) = *v23;
      v19 = (v19 + 1);
      v23 += 2;
      v24 += 2;
      v10 += 2;
      v28 = v20 > v25;
      v25 += 2;
    }
    while (v28);
    v29 = (2 * v19);
    v30 = (a2[1] - v18) >> 3;
    v31 = v29 >= v30;
    if (v29 > v30)
    {
      sub_20E93D8FC((uint64_t)a2, v29 - v30);
      goto LABEL_21;
    }
  }
  if (!v31)
    a2[1] = v18 + 8 * v29;
LABEL_21:
  v32 = (a3[1] - *a3) >> 3;
  if (v29 <= v32)
  {
    if (v29 < v32)
      a3[1] = *a3 + 8 * v29;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a3, v29 - v32);
  }
  v33 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v29 > v33)
  {
    sub_20E93D8FC((uint64_t)a4, v29 - v33);
    return v19;
  }
  if (v29 >= v33)
    return v19;
  a4[1] = *a4 + 8 * v29;
  return v19;
}

uint64_t sub_20F0D40AC(double *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, double a8)
{
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;

  v16 = (a2[1] - *a2) >> 3;
  v17 = (a5[1] - *a5) >> 3;
  if (v16 <= v17)
  {
    if (v16 < v17)
      a5[1] = *a5 + 8 * v16;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a5, v16 - v17);
  }
  v18 = *a3;
  v19 = (a3[1] - *a3) >> 3;
  v20 = (a6[1] - *a6) >> 3;
  if (v19 <= v20)
  {
    if (v19 < v20)
      a6[1] = *a6 + 8 * v19;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a6, v19 - v20);
    v18 = *a3;
  }
  sub_20EB884A4((uint64_t)a7, (unint64_t)((a3[1] - v18) >> 3) >> 1, 0);
  v21 = *a3;
  v22 = a3[1] - *a3;
  if ((v22 & 0xFFFFFFFF0) != 0)
  {
    v23 = 0;
    v24 = 0;
    v25 = *a1;
    v26 = a1[1];
    v28 = a1[2];
    v27 = a1[3];
    v29 = a1[4];
    v30 = a1[5];
    v31 = a1[6];
    v32 = a1[7];
    v33 = a1[8];
    v34 = *a4;
    v35 = (a4[1] - *a4) >> 3;
    v36 = (v22 >> 4);
    v37 = *a2;
    v38 = *a7;
    v39 = *a5;
    v40 = 1;
    v41 = *a6;
    do
    {
      while (1)
      {
        v46 = 1.0;
        if (v35 == v36)
          v46 = *(double *)(v34 + 8 * v23) * *(double *)(v34 + 8 * v23);
        v47 = 8 * (v40 - 1);
        v48 = *(double *)(v37 + v47);
        v49 = 8 * v40;
        v50 = *(double *)(v37 + v49);
        v51 = *(double *)(v21 + v47);
        v52 = *(double *)(v21 + v49);
        v53 = v28 + v25 * v48 + v26 * v50;
        v54 = v30 + v27 * v48 + v29 * v50;
        v55 = v53 * v53
            + v54 * v54
            + (v31 + v25 * v51 + v27 * v52) * (v31 + v25 * v51 + v27 * v52)
            + (v32 + v26 * v51 + v29 * v52) * (v32 + v26 * v51 + v29 * v52);
        v56 = v33 + v31 * v48 + v32 * v50 + v53 * v51 + v54 * v52;
        v57 = v23 >> 6;
        v58 = 1 << v23;
        if (v56 * v56 > v46 * a8 * v55)
          break;
        v42 = *(_QWORD *)(v38 + 8 * v57) | v58;
        v43 = 8 * (2 * v24);
        v44 = (double *)(v39 + v43);
        *v44 = v48;
        v44[1] = v50;
        v45 = (double *)(v41 + v43);
        *v45 = v51;
        v45[1] = v52;
        v24 = (v24 + 1);
        *(_QWORD *)(v38 + 8 * v57) = v42;
        ++v23;
        v40 += 2;
        if (v36 == v23)
          goto LABEL_16;
      }
      *(_QWORD *)(v38 + 8 * v57) &= ~v58;
      ++v23;
      v40 += 2;
    }
    while (v36 != v23);
LABEL_16:
    v59 = (2 * v24);
    v60 = *a5;
    v61 = (a5[1] - *a5) >> 3;
    v62 = v59 >= v61;
    if (v59 > v61)
    {
      sub_20E93D8FC((uint64_t)a5, v59 - v61);
      goto LABEL_21;
    }
  }
  else
  {
    v24 = 0;
    v59 = 0;
    v60 = *a5;
    v62 = (a5[1] - *a5) >> 3 == 0;
  }
  if (!v62)
    a5[1] = v60 + 8 * v59;
LABEL_21:
  v63 = (a6[1] - *a6) >> 3;
  if (v59 <= v63)
  {
    if (v59 < v63)
      a6[1] = *a6 + 8 * v59;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a6, v59 - v63);
  }
  return v24;
}

double sub_20F0D436C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, double a7, double a8)
{
  _QWORD *v10;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  int64x2_t *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  unsigned int v30;
  int v31;
  double v32;
  double v33;
  double v35;
  double v41;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  float64x2_t v59;
  double v60;
  double v62;
  double v63;
  double v64;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int v73;
  int v74;
  BOOL v75;
  float64x2_t v76;
  double v77;
  double v79;
  double v80;
  float64x2_t v81;
  double v82;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  int v91;
  int v92;
  BOOL v93;
  float64x2_t v94;
  double v95;
  double v97;
  double v98;
  float64x2_t v99;
  double v100;
  float64x2_t v101;
  double v102;
  float64x2_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  float64x2_t v124;
  float64x2_t v128;
  float64x2_t v129;
  double v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  int v135;
  double v137;
  double v140;
  float64x2_t v144;
  float64x2_t v145;
  double v146;
  double v147;
  double v148;
  float64x2_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  float64x2_t v154;
  double v155;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  int v164;
  int v165;
  double v166;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  int v175;
  int v176;
  double v177;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  int v186;
  int v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  float64x2_t v194;
  double v195;
  double v196;
  double v197;
  double v198;
  BOOL v199;
  float64x2_t v200;
  double v201;
  double v203;
  double v204;
  int v205;
  double v206;
  float64x2_t v207;
  BOOL v208;
  float64x2_t v209;
  double v210;
  double v212;
  double v213;
  int v214;
  double v215;
  BOOL v216;
  float64x2_t v217;
  double v218;
  double v220;
  double v221;
  int v222;
  double v223;
  float64x2_t v224;
  double v230;
  double *v231;
  _QWORD *v232;
  const char *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  double *v237;
  uint64_t v238;
  unint64_t v239;
  int64x2_t *v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  double v247;
  float64x2_t v248;
  double v249;
  uint64_t *v250;
  double *v251;
  unsigned int v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  double v257;
  uint64_t v258;
  double *v259;
  uint64_t v260;
  double v261;
  double v262;
  uint64_t v263;
  double *v264;
  double v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  double v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  double *v275;
  unsigned int v276;
  uint64_t v277;
  int v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  double *v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  double v293;
  double v294;
  double v295;
  int v296;
  int v297;
  unint64_t v298;
  double v299;
  double v300;
  unint64_t v301;
  char *v302;
  unint64_t v303;
  double v304;
  unint64_t v305;
  double v306;
  double v307;
  int v308;
  int v309;
  double v310;
  double v311;
  int v312;
  double v313;
  unint64_t v314;
  double v315;
  int v316;
  double v317;
  double v318;
  int v319;
  char *v320;
  double v321;
  double v322;
  char *v323;
  double v324;
  double v325;
  unint64_t v326;
  double v327;
  double v328;
  int v329;
  double v330;
  double v331;
  double v332;
  int v333;
  double v334;
  double v335;
  double v336;
  int v337;
  double v338;
  double v339;
  int v340;
  double *v341;
  double *v342;
  double *v343;
  int v344;
  uint64_t v345;
  int v346;
  double v347;
  double v348;
  int v349;
  double v350;
  uint64_t v351;
  unint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  float64x2_t v358;
  float64x2_t v359;
  uint64_t v360;
  float64x2_t v361;
  uint64_t v362;
  double *v363;
  double *v364;
  char *v365;
  float64x2_t v366;
  uint64_t v367;

  v10 = a4;
  v367 = *MEMORY[0x24BDAC8D0];
  v16 = (uint64_t)(a4[1] - *a4) >> 3;
  if (0xAAAAAAAAAAAAAAABLL * v16 >= 0x5555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 143, (uint64_t)"in_3d_points.size() % 3u == 0u", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_507;
    }
    v16 = (uint64_t)(v10[1] - *v10) >> 3;
  }
  v17 = a3[1] - *a3;
  if ((v17 & 8) != 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 146, (uint64_t)"x_cur.size() % 2u == 0u", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_507;
    }
    v17 = a3[1] - *a3;
  }
  if (v17 != a2[1] - *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 147, (uint64_t)"x_cur.size() == x_ref.size()", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_507;
    }
    v17 = a3[1] - *a3;
  }
  v18 = v16 / 3;
  v19 = (v16 / 3);
  if (v19 != (unint64_t)(v17 >> 3) >> 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 149, (uint64_t)"x_cur.size() / 2u == num_3d_points", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a8 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 152, (uint64_t)"point_displacement_tolerance_factor > 0.", 40, (uint64_t)"Speed tolerance factor must be positive", 39, (void (*)(void **))sub_21023DDB0)|| a7 <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp",
         154,
         (uint64_t)"ratio_of_points_to_compute_avg_point_displacement > 0.",
         54,
         (uint64_t)"Ratio of stationary points must be greater than zero",
         52,
         (void (*)(void **))sub_21023DDB0)
    || a7 > 1.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 156, (uint64_t)"ratio_of_points_to_compute_avg_point_displacement <= 1.", 55, (uint64_t)"Ratio of stationary points must be smaller or equal to 1", 56, (void (*)(void **))sub_21023DDB0))
  {
LABEL_507:
    abort();
  }
  v20 = a3[1];
  v355 = *a3;
  v363 = 0;
  v364 = 0;
  v365 = 0;
  if ((_DWORD)v18)
  {
    v351 = v20;
    v352 = v16 / 3;
    v353 = a5;
    v354 = a6;
    v21 = (double *)operator new(16 * v18);
    v22 = 0;
    v363 = v21;
    v364 = v21;
    v23 = (int64x2_t *)(a1 + 168);
    v365 = (char *)&v21[2 * v18];
    v24 = "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)";
    v356 = a2;
    v357 = a1;
    while (1)
    {
      v25 = *v10;
      v26 = 8 * (3 * v22 + 2);
      v27 = *(double *)(*v10 + v26);
      v28 = 8 * (2 * v22);
      v361 = vmulq_n_f64(*(float64x2_t *)(*a2 + v28), v27);
      *(double *)&v362 = v27;
      v29 = *(double *)(v25 + v26);
      v359 = vmulq_n_f64(*(float64x2_t *)(*a3 + v28), v29);
      *(double *)&v360 = v29;
      v30 = *(_DWORD *)(a1 + 992);
      if (v30 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)v24, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_504;
        }
        v30 = *(_DWORD *)(a1 + 992);
        if (v30 <= 7)
        {
LABEL_25:
          if (v30 <= 3)
          {
            if (v30 <= 1)
            {
              if (!v30)
                goto LABEL_503;
              if (*(double *)&v362 < 0.00000001)
                goto LABEL_22;
              v366 = vmulq_n_f64(v361, 1.0 / *(double *)&v362);
LABEL_139:
              v101.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
              v101.f64[1] = v366.f64[1] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
              v358 = v101;
              v30 = 1;
              goto LABEL_188;
            }
            if (v30 == 2)
            {
              if (*(_DWORD *)(a1 + 212))
              {
                if (*(double *)&v362 < 0.00000001)
                  goto LABEL_22;
                _Q2 = vmulq_n_f64(v361, 1.0 / *(double *)&v362);
                _D0 = vmuld_lane_f64(1.0 / *(double *)&v362, v361, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v45 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
                v366.f64[0] = v45.f64[0];
              }
              else
              {
                if (*(double *)&v362 < 0.00000001)
                  goto LABEL_22;
                _Q2 = vmulq_n_f64(v361, 1.0 / *(double *)&v362);
                _D0 = vmuld_lane_f64(1.0 / *(double *)&v362, v361, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v45 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
              }
              goto LABEL_176;
            }
            _V0.D[1] = v361.f64[1];
            _D1 = v361.f64[1];
            __asm { FMLA            D6, D1, V0.D[1] }
            v86 = sqrt(_D6);
            v87 = fabs(*(double *)&v362);
            v88 = fabs(v86);
            v89 = v87 / v88;
            if (v87 >= v88)
              v89 = v88 / v87;
            if (v89 <= 0.414213562)
            {
              v91 = 1;
              v92 = 2;
              v90 = v89;
              if (_D6 >= 0.00000001)
                goto LABEL_111;
            }
            else
            {
              v90 = (v88 - v87) / (v87 + v88);
              if (v87 >= v88)
                v90 = -v90;
              v91 = -1;
              v92 = 1;
              if (_D6 >= 0.00000001)
              {
LABEL_111:
                if (v87 < v88)
                  v91 = -v91;
                else
                  v92 = v89 > 0.414213562;
                v93 = v86 == INFINITY && v87 == INFINITY;
                v94 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v90 * v90), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v90 * v90), (float64x2_t)xmmword_210315370), v90 * v90 * (v90 * v90))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v90 * v90), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v90 * v90), (float64x2_t)xmmword_210315380), v90 * v90 * (v90 * v90))),
                          v90 * v90 * (v90 * v90) * (v90 * v90 * (v90 * v90))));
                v95 = v90 + v90 * vdivq_f64(v94, (float64x2_t)vdupq_laneq_s64((int64x2_t)v94, 1)).f64[0];
                if (v93)
                  v95 = 0.785398163;
                if (v86 == 0.0 && *(double *)&v362 == 0.0)
                  v97 = 0.0;
                else
                  v97 = v95;
                if (v362 < 0)
                {
                  v92 = 4 - v92;
                  v91 = -v91;
                }
                if (v86 < 0.0)
                {
                  v92 = -v92;
                  v91 = -v91;
                }
                v98 = (double)v92 * 3.061617e-17 + (double)v92 * 0.785398163 + v97 * (double)v91;
                v99 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v98 * v98)), v98 * v98);
                v100 = 1.0 / v86 * (v98 + v98 * (v99.f64[0] + vmuld_lane_f64(v98 * v98 * (v98 * v98), v99, 1)));
                goto LABEL_171;
              }
            }
            v100 = 1.0 / *(double *)&v362;
LABEL_171:
            v45 = vmulq_n_f64(v361, v100);
            goto LABEL_172;
          }
          if (v30 <= 5)
          {
            if (v30 != 5)
            {
              _V0.D[1] = v361.f64[1];
              _D1 = v361.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v68 = sqrt(_D6);
              v69 = fabs(*(double *)&v362);
              v70 = fabs(v68);
              v71 = v69 / v70;
              if (v69 >= v70)
                v71 = v70 / v69;
              if (v71 <= 0.414213562)
              {
                v73 = 1;
                v74 = 2;
                v72 = v71;
                if (_D6 >= 0.00000001)
                  goto LABEL_86;
              }
              else
              {
                v72 = (v70 - v69) / (v69 + v70);
                if (v69 >= v70)
                  v72 = -v72;
                v73 = -1;
                v74 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_86:
                  if (v69 < v70)
                    v73 = -v73;
                  else
                    v74 = v71 > 0.414213562;
                  v75 = v68 == INFINITY && v69 == INFINITY;
                  v76 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v72 * v72), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v72 * v72), (float64x2_t)xmmword_210315370), v72 * v72 * (v72 * v72))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v72 * v72), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v72 * v72), (float64x2_t)xmmword_210315380), v72 * v72 * (v72 * v72))),
                            v72 * v72 * (v72 * v72) * (v72 * v72 * (v72 * v72))));
                  v77 = v72 + v72 * vdivq_f64(v76, (float64x2_t)vdupq_laneq_s64((int64x2_t)v76, 1)).f64[0];
                  if (v75)
                    v77 = 0.785398163;
                  if (v68 == 0.0 && *(double *)&v362 == 0.0)
                    v79 = 0.0;
                  else
                    v79 = v77;
                  if (v362 < 0)
                  {
                    v74 = 4 - v74;
                    v73 = -v73;
                  }
                  if (v68 < 0.0)
                  {
                    v74 = -v74;
                    v73 = -v73;
                  }
                  v80 = (double)v74 * 3.061617e-17 + (double)v74 * 0.785398163 + v79 * (double)v73;
                  v81 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v80 * v80)), v80 * v80);
                  v82 = 1.0 / v68 * (v80 + v80 * (v81.f64[0] + vmuld_lane_f64(v80 * v80 * (v80 * v80), v81, 1)));
LABEL_168:
                  v117 = vmulq_n_f64(v361, v82);
                  v118 = *(double *)a1;
                  v119 = *(double *)(a1 + 8);
                  v120 = v117.f64[1];
                  v121 = *(double *)(a1 + 16);
                  v123 = *(double *)(a1 + 32);
                  v122 = *(double *)(a1 + 40);
LABEL_198:
                  v134.f64[0] = v121 + v118 * v117.f64[0] + v119 * v120;
                  v134.f64[1] = v120 * v123 + v122;
                  v358 = v134;
                  v30 = 4;
                  goto LABEL_188;
                }
              }
              v82 = 1.0 / *(double *)&v362;
              goto LABEL_168;
            }
            v32 = v361.f64[0] * v361.f64[0] + v361.f64[1] * v361.f64[1];
            if (v32 >= 0.00000001)
            {
              v112 = sqrt(v32);
              if (v112 <= *(double *)&v362)
              {
                v130 = v112 / *(double *)&v362 * 0.785398163
                     - v112
                     / *(double *)&v362
                     * (v112 / *(double *)&v362 + -1.0)
                     * (v112 / *(double *)&v362 * 0.0663008339 + 0.244711287);
              }
              else
              {
                if (v112 <= -*(double *)&v362)
                {
                  v114 = v112 / *(double *)&v362 * 0.785398163
                       - v112
                       / *(double *)&v362
                       * (-1.0 - v112 / *(double *)&v362)
                       * (v112 / *(double *)&v362 * -0.0663008339 + 0.244711287);
                  v115 = 3.14159265;
                }
                else
                {
                  v113 = fabs(*(double *)&v362 / v112);
                  v114 = *(double *)&v362 / v112 * (v113 + -1.0) * (v113 * 0.0663008339 + 0.244711287)
                       + *(double *)&v362 / v112 * -0.785398163;
                  v115 = 1.57079633;
                }
                v130 = v114 + v115;
              }
              v131 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v130 * v130)), v130 * v130);
              v33 = (v130 + v130 * (v131.f64[0] + vmuld_lane_f64(v130 * v130 * (v130 * v130), v131, 1))) / v112;
            }
            else
            {
              if (*(double *)&v362 == 0.0)
                goto LABEL_22;
              v33 = 1.0 / *(double *)&v362;
            }
            v366.f64[0] = v361.f64[0] * v33;
            v366.f64[1] = v361.f64[1] * v33;
            v30 = 5;
            goto LABEL_185;
          }
          if (v30 == 6)
          {
            v46 = vaddq_f64(vdivq_f64(v361, (float64x2_t)vdupq_lane_s64(v362, 0)), *(float64x2_t *)(a1 + 192));
            v47 = sqrt(vaddvq_f64(vmulq_f64(v46, v46)));
            v366 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v46, v47* (v47* (*(double *)(a1 + 168) + v47 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v47)))+ 1.0));
LABEL_151:
            v111.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
            v111.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v366.f64[1];
            v358 = v111;
            if (v30 == 6)
              v30 = 6;
            else
              v30 = 7;
            goto LABEL_188;
          }
          v31 = sub_20EB31FFC(a1, &v366, &v361);
          goto LABEL_133;
        }
      }
      else if (v30 <= 7)
      {
        goto LABEL_25;
      }
      if (v30 > 0xB)
      {
        if (v30 <= 0xD)
        {
          if (v30 != 13 || *(double *)&v362 < 0.00000001)
            goto LABEL_22;
          _Q0 = vdivq_f64(v361, (float64x2_t)vdupq_lane_s64(v362, 0));
          v35 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v41 = v35 * (_D2 * v35);
          v366 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v41* (*(double *)(a1 + 168)+ v35 * *(double *)(a1 + 224)+ v41* (*(double *)(a1 + 176)+ v35 * *(double *)(a1 + 232)+ v41* (*(double *)(a1 + 184)+ v35 * *(double *)(a1 + 240)+ v41* (*(double *)(a1 + 192)+ v35 * *(double *)(a1 + 248)+ v41* (*(double *)(a1 + 200)+ v35 * *(double *)(a1 + 256)+ v41
                                       * (*(double *)(a1 + 208)
                                        + v35 * *(double *)(a1 + 264)
                                        + v41 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v35 + v41 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
          v30 = 13;
          goto LABEL_146;
        }
        if (v30 == 14)
          v31 = sub_20EB247C0(&v366, (uint64_t)&v361, (double *)v23->i64, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v31 = sub_20EB3E39C(a1, &v366, &v361);
      }
      else if (v30 > 9)
      {
        if (v30 == 10)
          v31 = sub_20EB24288(&v366, (uint64_t)&v361, (double *)v23->i64, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v31 = sub_20EB3A2E4(a1, &v366, &v361);
      }
      else
      {
        if (v30 != 9)
        {
          _V0.D[1] = v361.f64[1];
          _D1 = v361.f64[1];
          __asm { FMLA            D6, D1, V0.D[1] }
          v51 = sqrt(_D6);
          v52 = fabs(*(double *)&v362);
          v53 = fabs(v51);
          v54 = v52 / v53;
          if (v52 >= v53)
            v54 = v53 / v52;
          if (v54 <= 0.414213562)
          {
            v56 = 1;
            v57 = 2;
            v55 = v54;
            if (_D6 >= 0.00000001)
              goto LABEL_61;
          }
          else
          {
            v55 = (v53 - v52) / (v52 + v53);
            if (v52 >= v53)
              v55 = -v55;
            v56 = -1;
            v57 = 1;
            if (_D6 >= 0.00000001)
            {
LABEL_61:
              if (v52 < v53)
                v56 = -v56;
              else
                v57 = v54 > 0.414213562;
              _ZF = v51 == INFINITY && v52 == INFINITY;
              v59 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v55 * v55), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v55 * v55), (float64x2_t)xmmword_210315370), v55 * v55 * (v55 * v55))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v55 * v55), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v55 * v55), (float64x2_t)xmmword_210315380), v55 * v55 * (v55 * v55))),
                        v55 * v55 * (v55 * v55) * (v55 * v55 * (v55 * v55))));
              v60 = v55 + v55 * vdivq_f64(v59, (float64x2_t)vdupq_laneq_s64((int64x2_t)v59, 1)).f64[0];
              if (_ZF)
                v60 = 0.785398163;
              if (v51 == 0.0 && *(double *)&v362 == 0.0)
                v62 = 0.0;
              else
                v62 = v60;
              if (v362 < 0)
              {
                v57 = 4 - v57;
                v56 = -v56;
              }
              if (v51 < 0.0)
              {
                v57 = -v57;
                v56 = -v56;
              }
              v63 = (double)v57 * 3.061617e-17 + (double)v57 * 0.785398163 + v62 * (double)v56;
              v64 = 1.0
                  / v51
                  * (v63
                   * (v63
                    * v63
                    * (*(double *)(a1 + 168)
                     + v63
                     * v63
                     * (*(double *)(a1 + 176)
                      + v63
                      * v63
                      * (*(double *)(a1 + 184)
                       + v63
                       * v63
                       * (*(double *)(a1 + 192)
                        + v63
                        * v63
                        * (*(double *)(a1 + 200)
                         + v63 * v63 * (*(double *)(a1 + 208) + v63 * v63 * *(double *)(a1 + 216)))))))
                    + 1.0));
              goto LABEL_164;
            }
          }
          v64 = 1.0 / *(double *)&v362;
LABEL_164:
          v103 = vmulq_n_f64(v361, v64);
          v366 = v103;
          v102 = *(double *)a1;
          v107 = *(double *)(a1 + 8);
          v108 = v103.f64[1];
          v104 = *(double *)(a1 + 16);
          v106 = *(double *)(a1 + 32);
          v105 = *(double *)(a1 + 40);
LABEL_165:
          v116.f64[0] = v104 + v102 * v103.f64[0] + v107 * v108;
          v116.f64[1] = v108 * v106 + v105;
          v358 = v116;
          v30 = 8;
          goto LABEL_199;
        }
        v31 = sub_20EB3641C(a1, &v366, &v361);
      }
LABEL_133:
      if (!v31)
        goto LABEL_22;
      v30 = *(_DWORD *)(a1 + 992);
      if (v30 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)v24, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_504;
        }
        v30 = *(_DWORD *)(a1 + 992);
        if (v30 <= 7)
        {
LABEL_136:
          if (v30 <= 3)
          {
            if (v30 <= 1)
            {
              if (!v30)
                goto LABEL_503;
              goto LABEL_139;
            }
            v45 = v366;
            if (v30 == 2)
            {
LABEL_176:
              v128.f64[0] = *(double *)(a1 + 16)
                          + *(double *)a1 * v45.f64[0]
                          + vmuld_lane_f64(*(double *)(a1 + 8), v45, 1);
              v128.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v45, 1) + *(double *)(a1 + 40);
              v358 = v128;
              v30 = 2;
              goto LABEL_188;
            }
LABEL_172:
            v124.f64[0] = *(double *)(a1 + 16)
                        + *(double *)a1 * v45.f64[0]
                        + vmuld_lane_f64(*(double *)(a1 + 8), v45, 1);
            v124.f64[1] = vmuld_lane_f64(*(double *)(a1 + 32), v45, 1) + *(double *)(a1 + 40);
            v358 = v124;
            v30 = 3;
LABEL_188:
            if (v30 <= 3)
            {
              if (v30 > 1)
              {
                if (v30 == 2)
                {
                  if (*(_DWORD *)(a1 + 212))
                  {
                    if (*(double *)&v360 < 0.00000001)
                      goto LABEL_22;
                    _Q2 = vmulq_n_f64(v359, 1.0 / *(double *)&v360);
                    _D0 = vmuld_lane_f64(1.0 / *(double *)&v360, v359, 1);
                    __asm { FMLA            D1, D0, V2.D[1] }
                    v144 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
                    v366.f64[0] = v144.f64[0];
                  }
                  else
                  {
                    if (*(double *)&v360 < 0.00000001)
                      goto LABEL_22;
                    _Q2 = vmulq_n_f64(v359, 1.0 / *(double *)&v360);
                    _D0 = vmuld_lane_f64(1.0 / *(double *)&v360, v359, 1);
                    __asm { FMLA            D1, D0, V2.D[1] }
                    v144 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
                  }
                }
                else
                {
                  _V0.D[1] = v359.f64[1];
                  _D1 = v359.f64[1];
                  __asm { FMLA            D7, D1, V0.D[1] }
                  v181 = sqrt(_D7);
                  v182 = fabs(*(double *)&v360);
                  v183 = fabs(v181);
                  v184 = v182 / v183;
                  if (v182 >= v183)
                    v184 = v183 / v182;
                  v185 = (v183 - v182) / (v182 + v183);
                  if (v182 >= v183)
                    v185 = -v185;
                  if (v184 > 0.414213562)
                    v186 = 1;
                  else
                    v186 = 2;
                  if (v184 > 0.414213562)
                    v187 = -1;
                  else
                    v187 = 1;
                  if (v184 <= 0.414213562)
                    v185 = v184;
                  if (_D7 >= 0.00000001)
                  {
                    if (v182 < v183)
                      v187 = -v187;
                    else
                      v186 = v184 > 0.414213562;
                    v216 = v181 == INFINITY && v182 == INFINITY;
                    v217 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v185 * v185), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v185 * v185), (float64x2_t)xmmword_210315370), v185 * v185 * (v185 * v185))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v185 * v185), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v185 * v185), (float64x2_t)xmmword_210315380), v185 * v185 * (v185 * v185))),
                               v185 * v185 * (v185 * v185) * (v185 * v185 * (v185 * v185))));
                    v218 = v185 + v185 * vdivq_f64(v217, (float64x2_t)vdupq_laneq_s64((int64x2_t)v217, 1)).f64[0];
                    if (v216)
                      v218 = 0.785398163;
                    if (v181 == 0.0 && *(double *)&v360 == 0.0)
                      v220 = 0.0;
                    else
                      v220 = v218;
                    if (v360 < 0)
                    {
                      v186 = 4 - v186;
                      v187 = -v187;
                    }
                    if (v181 < 0.0)
                      v186 = -v186;
                    v221 = (double)v186;
                    if (v181 >= 0.0)
                      v222 = v187;
                    else
                      v222 = -v187;
                    v223 = v221 * 3.061617e-17 + v221 * 0.785398163 + v220 * (double)v222;
                    v224 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v223 * v223)), v223 * v223);
                    v144 = vmulq_n_f64(v359, 1.0/ v181* (v223 + v223 * (v224.f64[0] + vmuld_lane_f64(v223 * v223 * (v223 * v223), v224, 1))));
                  }
                  else
                  {
                    v144 = vmulq_n_f64(v359, 1.0 / *(double *)&v360);
                  }
                }
                goto LABEL_353;
              }
              if (!v30)
                goto LABEL_503;
              if (*(double *)&v360 < 0.00000001)
                goto LABEL_22;
              v366 = vmulq_n_f64(v359, 1.0 / *(double *)&v360);
              goto LABEL_270;
            }
            if (v30 <= 5)
            {
              if (v30 != 5)
              {
                _V0.D[1] = v359.f64[1];
                _D1 = v359.f64[1];
                __asm { FMLA            D7, D1, V0.D[1] }
                v159 = sqrt(_D7);
                v160 = fabs(*(double *)&v360);
                v161 = fabs(v159);
                v162 = v160 / v161;
                if (v160 >= v161)
                  v162 = v161 / v160;
                v163 = (v161 - v160) / (v160 + v161);
                if (v160 >= v161)
                  v163 = -v163;
                if (v162 > 0.414213562)
                  v164 = 1;
                else
                  v164 = 2;
                if (v162 > 0.414213562)
                  v165 = -1;
                else
                  v165 = 1;
                if (v162 <= 0.414213562)
                  v163 = v162;
                if (_D7 >= 0.00000001)
                {
                  if (v160 < v161)
                    v165 = -v165;
                  else
                    v164 = v162 > 0.414213562;
                  v199 = v159 == INFINITY && v160 == INFINITY;
                  v200 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v163 * v163), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v163 * v163), (float64x2_t)xmmword_210315370), v163 * v163 * (v163 * v163))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v163 * v163), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v163 * v163), (float64x2_t)xmmword_210315380), v163 * v163 * (v163 * v163))),
                             v163 * v163 * (v163 * v163) * (v163 * v163 * (v163 * v163))));
                  v201 = v163 + v163 * vdivq_f64(v200, (float64x2_t)vdupq_laneq_s64((int64x2_t)v200, 1)).f64[0];
                  if (v199)
                    v201 = 0.785398163;
                  if (v159 == 0.0 && *(double *)&v360 == 0.0)
                    v203 = 0.0;
                  else
                    v203 = v201;
                  if (v360 < 0)
                  {
                    v164 = 4 - v164;
                    v165 = -v165;
                  }
                  if (v159 < 0.0)
                    v164 = -v164;
                  v204 = (double)v164;
                  if (v159 >= 0.0)
                    v205 = v165;
                  else
                    v205 = -v165;
                  v206 = v204 * 3.061617e-17 + v204 * 0.785398163 + v203 * (double)v205;
                  v207 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v206 * v206)), v206 * v206);
                  v166 = 1.0
                       / v159
                       * (v206 + v206 * (v207.f64[0] + vmuld_lane_f64(v206 * v206 * (v206 * v206), v207, 1)));
                }
                else
                {
                  v166 = 1.0 / *(double *)&v360;
                }
                v194 = vmulq_n_f64(v359, v166);
                v192 = *(double *)a1;
                v189 = *(double *)(a1 + 8);
                v193 = v194.f64[1];
                v188 = *(double *)(a1 + 16);
                v191 = *(double *)(a1 + 32);
                v190 = *(double *)(a1 + 40);
LABEL_304:
                v154.f64[0] = v188 + v192 * v194.f64[0] + v189 * v193;
                v155 = v193 * v191 + v190;
                goto LABEL_354;
              }
              v133 = v359.f64[0] * v359.f64[0] + v359.f64[1] * v359.f64[1];
              if (v133 >= 0.00000001)
              {
                v195 = sqrt(v133);
                if (v195 <= *(double *)&v360)
                {
                  v247 = v195 / *(double *)&v360 * 0.785398163
                       - v195
                       / *(double *)&v360
                       * (v195 / *(double *)&v360 + -1.0)
                       * (v195 / *(double *)&v360 * 0.0663008339 + 0.244711287);
                }
                else
                {
                  if (v195 <= -*(double *)&v360)
                  {
                    v197 = v195 / *(double *)&v360 * 0.785398163
                         - v195
                         / *(double *)&v360
                         * (-1.0 - v195 / *(double *)&v360)
                         * (v195 / *(double *)&v360 * -0.0663008339 + 0.244711287);
                    v198 = 3.14159265;
                  }
                  else
                  {
                    v196 = fabs(*(double *)&v360 / v195);
                    v197 = *(double *)&v360 / v195 * (v196 + -1.0) * (v196 * 0.0663008339 + 0.244711287)
                         + *(double *)&v360 / v195 * -0.785398163;
                    v198 = 1.57079633;
                  }
                  v247 = v197 + v198;
                }
                v248 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v23, v23[1]), vmulq_n_f64((float64x2_t)vzip2q_s64(*v23, v23[1]), v247 * v247)), v247 * v247);
                v249 = (v247 + v247 * (v248.f64[0] + vmuld_lane_f64(v247 * v247 * (v247 * v247), v248, 1))) / v195;
                v366.f64[0] = v359.f64[0] * v249;
                v366.f64[1] = v359.f64[1] * v249;
              }
              else
              {
                if (*(double *)&v360 == 0.0)
                  goto LABEL_22;
                v366.f64[0] = v359.f64[0] * (1.0 / *(double *)&v360);
                v366.f64[1] = v359.f64[1] * (1.0 / *(double *)&v360);
              }
LABEL_270:
              if (v30 > 7)
                goto LABEL_215;
              goto LABEL_271;
            }
            if (v30 == 6)
            {
              v145 = vaddq_f64(vdivq_f64(v359, (float64x2_t)vdupq_lane_s64(v360, 0)), *(float64x2_t *)(a1 + 192));
              v146 = sqrt(vaddvq_f64(vmulq_f64(v145, v145)));
              v366 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v145, v146* (v146* (*(double *)(a1 + 168) + v146 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v146)))+ 1.0));
              goto LABEL_270;
            }
            v135 = sub_20EB31FFC(a1, &v366, &v359);
            goto LABEL_268;
          }
          if (v30 > 5)
            goto LABEL_151;
LABEL_185:
          v118 = *(double *)a1;
          v119 = *(double *)(a1 + 8);
          v120 = v366.f64[1];
          v117.f64[0] = v366.f64[0];
          v121 = *(double *)(a1 + 16);
          v123 = *(double *)(a1 + 32);
          v122 = *(double *)(a1 + 40);
          if (v30 != 5)
            goto LABEL_198;
          v132.f64[0] = v121 + v118 * v366.f64[0] + v119 * v366.f64[1];
          v132.f64[1] = v366.f64[1] * v123 + v122;
          v358 = v132;
LABEL_187:
          if (v30 <= 7)
            goto LABEL_188;
          goto LABEL_199;
        }
      }
      else if (v30 <= 7)
      {
        goto LABEL_136;
      }
      if (v30 <= 0xB)
      {
        v102 = *(double *)a1;
        v103.f64[0] = v366.f64[0];
        v104 = *(double *)(a1 + 16);
        v106 = *(double *)(a1 + 32);
        v105 = *(double *)(a1 + 40);
        if (v30 > 9)
        {
          v129.f64[0] = v104 + v102 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
          v129.f64[1] = v105 + v106 * v366.f64[1];
          v358 = v129;
          if (v30 == 10)
            v30 = 10;
          else
            v30 = 11;
          goto LABEL_199;
        }
        v107 = *(double *)(a1 + 8);
        v108 = v366.f64[1];
        if (v30 != 9)
          goto LABEL_165;
        v109.f64[0] = v104 + v102 * v366.f64[0] + v107 * v366.f64[1];
        v109.f64[1] = v366.f64[1] * v106 + v105;
        v358 = v109;
        v30 = 9;
        goto LABEL_199;
      }
LABEL_146:
      v110.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
      v110.f64[1] = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v366.f64[1];
      v358 = v110;
      if (v30 <= 0xD)
      {
        if (v30 == 13)
          v30 = 13;
        else
          v30 = 12;
        goto LABEL_199;
      }
      if (v30 == 14)
        goto LABEL_187;
      if (v30 != -1)
        goto LABEL_223;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)v24, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_504;
      }
      v30 = *(_DWORD *)(a1 + 992);
      if (v30 <= 7)
        goto LABEL_188;
LABEL_199:
      if (v30 > 0xB)
      {
        if (v30 <= 0xD)
        {
          if (v30 != 13 || *(double *)&v360 < 0.00000001)
            goto LABEL_22;
          _Q0 = vdivq_f64(v359, (float64x2_t)vdupq_lane_s64(v360, 0));
          v137 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v140 = v137 * (_D2 * v137);
          v366 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v140* (*(double *)(a1 + 168)+ v137 * *(double *)(a1 + 224)+ v140* (*(double *)(a1 + 176)+ v137 * *(double *)(a1 + 232)+ v140* (*(double *)(a1 + 184)+ v137 * *(double *)(a1 + 240)+ v140* (*(double *)(a1 + 192)+ v137 * *(double *)(a1 + 248)+ v140* (*(double *)(a1 + 200)+ v137 * *(double *)(a1 + 256)+ v140
                                       * (*(double *)(a1 + 208)
                                        + v137 * *(double *)(a1 + 264)
                                        + v140 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v137 + v140 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
          goto LABEL_270;
        }
        if (v30 == 14)
        {
          v135 = sub_20EB247C0(&v366, (uint64_t)&v359, (double *)v23->i64, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
          goto LABEL_268;
        }
LABEL_223:
        v135 = sub_20EB3E39C(a1, &v366, &v359);
        goto LABEL_268;
      }
      if (v30 > 9)
      {
        if (v30 == 10)
          v135 = sub_20EB24288(&v366, (uint64_t)&v359, (double *)v23->i64, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v135 = sub_20EB3A2E4(a1, &v366, &v359);
      }
      else
      {
        if (v30 != 9)
        {
          _V0.D[1] = v359.f64[1];
          _D1 = v359.f64[1];
          __asm { FMLA            D7, D1, V0.D[1] }
          v170 = sqrt(_D7);
          v171 = fabs(*(double *)&v360);
          v172 = fabs(v170);
          v173 = v171 / v172;
          if (v171 >= v172)
            v173 = v172 / v171;
          v174 = (v172 - v171) / (v171 + v172);
          if (v171 >= v172)
            v174 = -v174;
          if (v173 > 0.414213562)
            v175 = 1;
          else
            v175 = 2;
          if (v173 > 0.414213562)
            v176 = -1;
          else
            v176 = 1;
          if (v173 <= 0.414213562)
            v174 = v173;
          if (_D7 >= 0.00000001)
          {
            if (v171 < v172)
              v176 = -v176;
            else
              v175 = v173 > 0.414213562;
            v208 = v170 == INFINITY && v171 == INFINITY;
            v209 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v174 * v174), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v174 * v174), (float64x2_t)xmmword_210315370), v174 * v174 * (v174 * v174))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v174 * v174), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v174 * v174), (float64x2_t)xmmword_210315380), v174 * v174 * (v174 * v174))),
                       v174 * v174 * (v174 * v174) * (v174 * v174 * (v174 * v174))));
            v210 = v174 + v174 * vdivq_f64(v209, (float64x2_t)vdupq_laneq_s64((int64x2_t)v209, 1)).f64[0];
            if (v208)
              v210 = 0.785398163;
            if (v170 == 0.0 && *(double *)&v360 == 0.0)
              v212 = 0.0;
            else
              v212 = v210;
            if (v360 < 0)
            {
              v175 = 4 - v175;
              v176 = -v176;
            }
            if (v170 < 0.0)
              v175 = -v175;
            v213 = (double)v175;
            if (v170 >= 0.0)
              v214 = v176;
            else
              v214 = -v176;
            v215 = v213 * 3.061617e-17 + v213 * 0.785398163 + v212 * (double)v214;
            v177 = 1.0
                 / v170
                 * (v215
                  * (v215
                   * v215
                   * (*(double *)(a1 + 168)
                    + v215
                    * v215
                    * (*(double *)(a1 + 176)
                     + v215
                     * v215
                     * (*(double *)(a1 + 184)
                      + v215
                      * v215
                      * (*(double *)(a1 + 192)
                       + v215
                       * v215
                       * (*(double *)(a1 + 200)
                        + v215 * v215 * (*(double *)(a1 + 208) + v215 * v215 * *(double *)(a1 + 216)))))))
                   + 1.0));
          }
          else
          {
            v177 = 1.0 / *(double *)&v360;
          }
          v149 = vmulq_n_f64(v359, v177);
          v147 = *(double *)a1;
          v153 = *(double *)(a1 + 8);
          v148 = v149.f64[1];
          v152 = *(double *)(a1 + 16);
          v151 = *(double *)(a1 + 32);
          v150 = *(double *)(a1 + 40);
LABEL_328:
          v154.f64[0] = v152 + v147 * v149.f64[0] + v153 * v148;
          v155 = v148 * v151 + v150;
          goto LABEL_354;
        }
        v135 = sub_20EB3641C(a1, &v366, &v359);
      }
LABEL_268:
      if (!v135)
        goto LABEL_22;
      v30 = *(_DWORD *)(a1 + 992);
      if (v30 != -1)
        goto LABEL_270;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)v24, 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_504;
      }
      v30 = *(_DWORD *)(a1 + 992);
      if (v30 > 7)
      {
LABEL_215:
        v147 = *(double *)a1;
        v148 = v366.f64[1];
        v149.f64[0] = v366.f64[0];
        if (v30 > 0xB)
        {
          v154.f64[0] = *(double *)(a1 + 16) + v147 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
          v155 = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v366.f64[1];
          goto LABEL_354;
        }
        v151 = *(double *)(a1 + 32);
        v150 = *(double *)(a1 + 40);
        v153 = *(double *)(a1 + 8);
        v152 = *(double *)(a1 + 16);
        if (v30 > 9)
        {
          v154.f64[0] = v152 + v147 * v366.f64[0] + v153 * v366.f64[1];
          v155 = v150 + v151 * v366.f64[1];
          goto LABEL_354;
        }
        goto LABEL_328;
      }
LABEL_271:
      if (v30 > 3)
      {
        v189 = *(double *)(a1 + 8);
        v188 = *(double *)(a1 + 16);
        v191 = *(double *)(a1 + 32);
        v190 = *(double *)(a1 + 40);
        v192 = *(double *)a1;
        v193 = v366.f64[1];
        v194.f64[0] = v366.f64[0];
        if (v30 > 5)
        {
          v154.f64[0] = v188 + v192 * v366.f64[0] + v189 * v366.f64[1];
          v155 = v190 + v191 * v366.f64[1];
          goto LABEL_354;
        }
        goto LABEL_304;
      }
      if (v30 > 1)
      {
        v144 = v366;
LABEL_353:
        v154.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v144.f64[0] + vmuld_lane_f64(*(double *)(a1 + 8), v144, 1);
        v155 = vmuld_lane_f64(*(double *)(a1 + 32), v144, 1) + *(double *)(a1 + 40);
        goto LABEL_354;
      }
      if (!v30)
      {
LABEL_503:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_504:
        abort();
      }
      v154.f64[0] = *(double *)(a1 + 16) + *(double *)a1 * v366.f64[0] + *(double *)(a1 + 8) * v366.f64[1];
      v155 = v366.f64[1] * *(double *)(a1 + 32) + *(double *)(a1 + 40);
LABEL_354:
      v154.f64[1] = v155;
      _D2 = vsubq_f64(v154, v358).f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      v230 = sqrt(_D1);
      v231 = v364;
      if (v364 >= (double *)v365)
      {
        v232 = v10;
        v233 = v24;
        v234 = v22;
        v235 = a3;
        v236 = v232;
        v237 = v363;
        v238 = ((char *)v364 - (char *)v363) >> 4;
        v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60)
          sub_20EAA7068();
        v240 = v23;
        v241 = v365 - (char *)v363;
        if ((v365 - (char *)v363) >> 3 > v239)
          v239 = v241 >> 3;
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0)
          v242 = 0xFFFFFFFFFFFFFFFLL;
        else
          v242 = v239;
        if (v242 >> 60)
          sub_20E877A38();
        v243 = (char *)operator new(16 * v242);
        v244 = &v243[16 * v238];
        v22 = v234;
        *(_DWORD *)v244 = v234;
        *((double *)v244 + 1) = v230;
        if (v231 == v237)
        {
          v24 = v233;
          v21 = (double *)(v244 + 16);
          v363 = (double *)v244;
          v365 = &v243[16 * v242];
          if (v237)
            goto LABEL_366;
        }
        else
        {
          v245 = v244;
          v24 = v233;
          do
          {
            v246 = v245 - 16;
            *((_OWORD *)v245 - 1) = *((_OWORD *)v231 - 1);
            v231 -= 2;
            v245 -= 16;
          }
          while (v231 != v237);
          v21 = (double *)(v244 + 16);
          v363 = (double *)v246;
          v365 = &v243[16 * v242];
          if (v237)
LABEL_366:
            operator delete(v237);
        }
        v23 = v240;
        v10 = v236;
        a3 = v235;
        a2 = v356;
        a1 = v357;
        goto LABEL_21;
      }
      *(_DWORD *)v364 = v22;
      v231[1] = v230;
      v21 = v231 + 2;
LABEL_21:
      v364 = v21;
LABEL_22:
      if (++v22 == v19)
      {
        v250 = v10;
        v251 = v363;
        a5 = v353;
        a6 = v354;
        v20 = v351;
        LODWORD(v18) = v352;
        goto LABEL_376;
      }
    }
  }
  v250 = v10;
  v251 = 0;
  v21 = 0;
LABEL_376:
  v252 = ((double)(unint64_t)((v20 - v355) >> 3) * a7 * 0.5);
  v253 = ((char *)v21 - (char *)v251) >> 4;
  if (v253 >= v252)
    v254 = v252;
  else
    v254 = v253;
  v255 = (char *)&v251[2 * v254];
  if (v253 > v254 && v255 != (char *)v21)
  {
    v289 = v251;
    v290 = (char *)v21;
    do
    {
      v291 = (v290 - (char *)v289) >> 4;
      if (v291 < 2)
        break;
      if (v291 == 3)
      {
        v334 = v289[3];
        v335 = v289[1];
        v336 = *((double *)v290 - 1);
        if (v334 >= v335)
        {
          if (v336 < v334)
          {
            v346 = *((_DWORD *)v289 + 4);
            *((_DWORD *)v289 + 4) = *((_DWORD *)v290 - 4);
            *((_DWORD *)v290 - 4) = v346;
            v289[3] = v336;
            *((double *)v290 - 1) = v334;
            v347 = v289[3];
            v348 = v289[1];
            if (v347 < v348)
            {
              v349 = *(_DWORD *)v289;
              *(_DWORD *)v289 = *((_DWORD *)v289 + 4);
              *((_DWORD *)v289 + 4) = v349;
              v289[1] = v347;
              v289[3] = v348;
            }
          }
        }
        else
        {
          v337 = *(_DWORD *)v289;
          if (v336 >= v334)
          {
            *(_DWORD *)v289 = *((_DWORD *)v289 + 4);
            *((_DWORD *)v289 + 4) = v337;
            v289[1] = v334;
            v289[3] = v335;
            v350 = *((double *)v290 - 1);
            if (v350 < v335)
            {
              *((_DWORD *)v289 + 4) = *((_DWORD *)v290 - 4);
              *((_DWORD *)v290 - 4) = v337;
              v289[3] = v350;
              *((double *)v290 - 1) = v335;
            }
          }
          else
          {
            *(_DWORD *)v289 = *((_DWORD *)v290 - 4);
            *((_DWORD *)v290 - 4) = v337;
            v289[1] = v336;
            *((double *)v290 - 1) = v335;
          }
        }
        break;
      }
      if (v291 == 2)
      {
        v338 = *((double *)v290 - 1);
        v339 = v289[1];
        if (v338 < v339)
        {
          v340 = *(_DWORD *)v289;
          *(_DWORD *)v289 = *((_DWORD *)v290 - 4);
          *((_DWORD *)v290 - 4) = v340;
          v289[1] = v338;
          *((double *)v290 - 1) = v339;
        }
        break;
      }
      if (v290 - (char *)v289 <= 127)
      {
        while (v289 != (double *)(v290 - 16))
        {
          v341 = v289;
          v289 += 2;
          if (v341 != (double *)v290 && v289 != (double *)v290)
          {
            v342 = v289;
            v343 = v341;
            do
            {
              if (v342[1] < v343[1])
                v343 = v342;
              v342 += 2;
            }
            while (v342 != (double *)v290);
            if (v343 != v341)
            {
              v344 = *(_DWORD *)v341;
              *(_DWORD *)v341 = *(_DWORD *)v343;
              *(_DWORD *)v343 = v344;
              v345 = *((_QWORD *)v341 + 1);
              v341[1] = v343[1];
              *((_QWORD *)v343 + 1) = v345;
            }
          }
        }
        break;
      }
      v292 = (unint64_t)&v289[2 * (v291 >> 1)];
      v293 = *(double *)(v292 + 8);
      v294 = v289[1];
      v295 = *((double *)v290 - 1);
      if (v293 >= v294)
      {
        if (v295 >= v293)
        {
          v297 = 0;
          v298 = (unint64_t)(v290 - 16);
          v299 = v289[1];
          v300 = *(double *)(v292 + 8);
          if (v299 >= v300)
            goto LABEL_443;
          goto LABEL_425;
        }
        v309 = *(_DWORD *)v292;
        *(_DWORD *)v292 = *((_DWORD *)v290 - 4);
        *((_DWORD *)v290 - 4) = v309;
        *(double *)(v292 + 8) = v295;
        *((double *)v290 - 1) = v293;
        v310 = *(double *)(v292 + 8);
        v311 = v289[1];
        if (v310 < v311)
        {
          v312 = *(_DWORD *)v289;
          *(_DWORD *)v289 = *(_DWORD *)v292;
          *(_DWORD *)v292 = v312;
          v289[1] = v310;
          *(double *)(v292 + 8) = v311;
          goto LABEL_440;
        }
      }
      else
      {
        v296 = *(_DWORD *)v289;
        if (v295 < v293)
        {
          *(_DWORD *)v289 = *((_DWORD *)v290 - 4);
          *((_DWORD *)v290 - 4) = v296;
          v289[1] = v295;
          *((double *)v290 - 1) = v294;
          v297 = 1;
          v298 = (unint64_t)(v290 - 16);
          v299 = v289[1];
          v300 = *(double *)(v292 + 8);
          if (v299 >= v300)
            goto LABEL_443;
          goto LABEL_425;
        }
        *(_DWORD *)v289 = *(_DWORD *)v292;
        *(_DWORD *)v292 = v296;
        v289[1] = v293;
        *(double *)(v292 + 8) = v294;
        v313 = *((double *)v290 - 1);
        if (v313 < v294)
        {
          *(_DWORD *)v292 = *((_DWORD *)v290 - 4);
          *((_DWORD *)v290 - 4) = v296;
          *(double *)(v292 + 8) = v313;
          *((double *)v290 - 1) = v294;
LABEL_440:
          v297 = 2;
          v298 = (unint64_t)(v290 - 16);
          v299 = v289[1];
          v300 = *(double *)(v292 + 8);
          if (v299 >= v300)
            goto LABEL_443;
          goto LABEL_425;
        }
      }
      v297 = 1;
      v298 = (unint64_t)(v290 - 16);
      v299 = v289[1];
      v300 = *(double *)(v292 + 8);
      if (v299 >= v300)
      {
LABEL_443:
        v314 = v298;
        while (1)
        {
          v301 = v314 - 16;
          if ((double *)(v314 - 16) == v289)
            break;
          v315 = *(double *)(v314 - 8);
          v314 -= 16;
          if (v315 < v300)
          {
            v316 = *(_DWORD *)v289;
            *(_DWORD *)v289 = *(_DWORD *)v301;
            *(_DWORD *)v301 = v316;
            v289[1] = v315;
            *(double *)(v301 + 8) = v299;
            ++v297;
            v302 = (char *)(v289 + 2);
            if ((unint64_t)(v289 + 2) < v301)
              goto LABEL_426;
            goto LABEL_447;
          }
        }
        v323 = (char *)(v289 + 2);
        v324 = *((double *)v290 - 1);
        if (v299 >= v324)
        {
          if (v323 == (char *)v298)
            break;
          while (1)
          {
            v325 = *((double *)v323 + 1);
            if (v299 < v325)
              break;
            v323 += 16;
            if (v323 == (char *)v298)
              goto LABEL_384;
          }
          v329 = *(_DWORD *)v323;
          *(_DWORD *)v323 = *((_DWORD *)v290 - 4);
          *((_DWORD *)v290 - 4) = v329;
          *((double *)v323 + 1) = v324;
          *((double *)v290 - 1) = v325;
          v323 += 16;
        }
        if (v323 == (char *)v298)
          break;
        while (1)
        {
          v330 = v289[1];
          v320 = v323 - 16;
          do
          {
            v331 = *((double *)v320 + 3);
            v320 += 16;
          }
          while (v330 >= v331);
          v323 = v320 + 16;
          do
          {
            v332 = *(double *)(v298 - 8);
            v298 -= 16;
          }
          while (v330 < v332);
          if ((unint64_t)v320 >= v298)
            break;
          v333 = *(_DWORD *)v320;
          *(_DWORD *)v320 = *(_DWORD *)v298;
          *(_DWORD *)v298 = v333;
          *((double *)v320 + 1) = v332;
          *(double *)(v298 + 8) = v331;
        }
        if (v320 > v255)
          break;
        goto LABEL_480;
      }
LABEL_425:
      v301 = v298;
      v302 = (char *)(v289 + 2);
      if ((unint64_t)(v289 + 2) >= v301)
      {
LABEL_447:
        v305 = (unint64_t)v302;
      }
      else
      {
LABEL_426:
        v303 = (unint64_t)v302;
        while (1)
        {
          v304 = *(double *)(v292 + 8);
          v305 = v303 - 16;
          do
          {
            v306 = *(double *)(v305 + 24);
            v305 += 16;
          }
          while (v306 < v304);
          v303 = v305 + 16;
          do
          {
            v307 = *(double *)(v301 - 8);
            v301 -= 16;
          }
          while (v307 >= v304);
          if (v305 >= v301)
            break;
          v308 = *(_DWORD *)v305;
          *(_DWORD *)v305 = *(_DWORD *)v301;
          *(_DWORD *)v301 = v308;
          *(double *)(v305 + 8) = v307;
          *(double *)(v301 + 8) = v306;
          ++v297;
          if (v305 == v292)
            v292 = v301;
        }
      }
      if (v305 != v292)
      {
        v317 = *(double *)(v292 + 8);
        v318 = *(double *)(v305 + 8);
        if (v317 < v318)
        {
          v319 = *(_DWORD *)v305;
          *(_DWORD *)v305 = *(_DWORD *)v292;
          *(_DWORD *)v292 = v319;
          *(double *)(v305 + 8) = v317;
          *(double *)(v292 + 8) = v318;
          ++v297;
        }
      }
      if ((char *)v305 == v255)
        break;
      if (!v297)
      {
        if (v305 <= (unint64_t)v255)
        {
          v326 = v305 + 16;
          while ((char *)v326 != v290)
          {
            v327 = *(double *)(v326 + 8);
            v328 = *(double *)(v326 - 8);
            v326 += 16;
            if (v327 < v328)
              goto LABEL_453;
          }
        }
        else
        {
          while (v302 != (char *)v305)
          {
            v321 = *((double *)v302 + 1);
            v322 = *((double *)v302 - 1);
            v302 += 16;
            if (v321 < v322)
              goto LABEL_453;
          }
        }
        break;
      }
LABEL_453:
      if (v305 <= (unint64_t)v255)
      {
        v320 = (char *)(v305 + 16);
      }
      else
      {
        v290 = (char *)v305;
        v320 = (char *)v289;
      }
LABEL_480:
      v289 = (double *)v320;
    }
    while (v290 != v255);
  }
LABEL_384:
  v257 = 0.0;
  if ((_DWORD)v254)
  {
    if ((_DWORD)v254 == 1)
    {
      v258 = 0;
LABEL_390:
      v263 = v254 - v258;
      v264 = &v251[2 * v258 + 1];
      do
      {
        v265 = *v264;
        v264 += 2;
        v257 = v257 + v265;
        --v263;
      }
      while (v263);
      goto LABEL_392;
    }
    v258 = v254 & 0xFFFFFFFE;
    v259 = v251 + 3;
    v260 = v258;
    do
    {
      v261 = *(v259 - 2);
      v262 = *v259;
      v259 += 4;
      v257 = v257 + v261 + v262;
      v260 -= 2;
    }
    while (v260);
    if (v258 != v254)
      goto LABEL_390;
  }
LABEL_392:
  v266 = (2 * v18);
  v267 = (uint64_t)(a5[1] - *a5) >> 3;
  if (v266 <= v267)
  {
    if (v266 < v267)
      a5[1] = *a5 + 8 * v266;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a5, v266 - v267);
  }
  v268 = (3 * v18);
  v269 = (uint64_t)(a6[1] - *a6) >> 3;
  if (v268 <= v269)
  {
    if (v268 < v269)
      a6[1] = *a6 + 8 * v268;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a6, v268 - v269);
  }
  v270 = v257 / (double)v254;
  v271 = *a5;
  if (v21 == v251)
  {
    v272 = 0;
  }
  else
  {
    v272 = 0;
    v273 = *a3;
    v274 = *a6;
    v275 = v251 + 1;
    v276 = 1;
    v277 = *v250;
    do
    {
      if (*v275 <= v270 * a8)
      {
        v279 = *((_DWORD *)v275 - 2);
        v280 = (_QWORD *)(v271 + 8 * (2 * v272));
        v281 = (_QWORD *)(v273 + 8 * (2 * v279));
        *v280 = *v281;
        v280[1] = v281[1];
        v282 = (_QWORD *)(v274 + 8 * (3 * v272));
        v283 = (_QWORD *)(v277 + 8 * (3 * v279));
        *v282 = *v283;
        v282[1] = v283[1];
        v282[2] = v283[2];
        ++v272;
      }
      v275 += 2;
    }
    while (v253 > v276++);
  }
  v284 = (2 * v272);
  v285 = (a5[1] - v271) >> 3;
  if (v284 <= v285)
  {
    if (v284 < v285)
      a5[1] = v271 + 8 * v284;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a5, v284 - v285);
  }
  v286 = (3 * v272);
  v287 = (uint64_t)(a6[1] - *a6) >> 3;
  if (v286 <= v287)
  {
    if (v286 < v287)
      a6[1] = *a6 + 8 * v286;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a6, v286 - v287);
  }
  if (v251)
    operator delete(v251);
  return v270;
}

void sub_20F0D6910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20F0D6944(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  double v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  double v15;
  double v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  double v26;
  double v28;
  double v34;
  float64x2_t v38;
  float64x2_t v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  float64x2_t v59;
  double v60;
  double v62;
  double v63;
  double v64;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int v73;
  int v74;
  BOOL v75;
  float64x2_t v76;
  double v77;
  double v79;
  double v80;
  float64x2_t v81;
  double v82;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  int v91;
  int v92;
  BOOL v93;
  float64x2_t v94;
  double v95;
  double v97;
  double v98;
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  float64x2_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v115;
  float64x2_t v116;
  double v117;
  float64x2_t v119;
  uint64_t v120;
  float64x2_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = 0.0;
  if (*a2 == v4 || *a4 == a4[1])
    return v5;
  v10 = v4 - *a2;
  if ((v10 & 8) != 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 237, (uint64_t)"xc.size() % 2u == 0u", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_181;
    }
    v10 = a2[1] - *a2;
  }
  v11 = ((uint64_t)(a3[1] - *a3) >> 3) / 3uLL;
  if (v11 == (unint64_t)(v10 >> 3) >> 1)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 239, (uint64_t)"points_3d.size() / 3u == xc.size() / 2u", 39, (uint64_t)"The number of the 3D points must be equal to the number of 2D-points", 68, (void (*)(void **))sub_21023DDB0))
  {
LABEL_181:
    abort();
  }
  v11 = ((uint64_t)(a3[1] - *a3) >> 3) / 3uLL;
LABEL_9:
  if (v11 >= (uint64_t)(a4[1] - *a4) >> 2)
    v12 = (uint64_t)(a4[1] - *a4) >> 2;
  else
    v12 = v11;
  if (v12)
  {
    v13 = 0;
    v14 = (int64x2_t *)(a1 + 168);
    v15 = 1.79769313e308;
    v16 = -1.79769313e308;
    v17 = 2;
    v18 = -1.79769313e308;
    v19 = 1.79769313e308;
    while (1)
    {
      v22 = *(double *)(*a3 + 8 * v17);
      v119 = vmulq_n_f64(*(float64x2_t *)(*a2 + 8 * (2 * *(_DWORD *)(*a4 + 4 * v13))), v22);
      *(double *)&v120 = v22;
      v23 = *(_DWORD *)(a1 + 992);
      if (v23 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v23 = *(_DWORD *)(a1 + 992);
        if (v23 <= 7)
        {
LABEL_26:
          if (v23 > 3)
          {
            if (v23 > 5)
            {
              if (v23 == 6)
              {
                v39 = vaddq_f64(vdivq_f64(v119, (float64x2_t)vdupq_lane_s64(v120, 0)), *(float64x2_t *)(a1 + 192));
                v40 = sqrt(vaddvq_f64(vmulq_f64(v39, v39)));
                v121 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v39, v40* (v40* (*(double *)(a1 + 168) + v40 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v40)))+ 1.0));
                v24 = *(_DWORD *)(a1 + 992);
                if (v24 == -1)
                  goto LABEL_57;
                goto LABEL_144;
              }
              v25 = sub_20EB31FFC(a1, &v121, &v119);
LABEL_142:
              if ((v25 & 1) != 0)
              {
                v24 = *(_DWORD *)(a1 + 992);
                if (v24 == -1)
                  goto LABEL_57;
                goto LABEL_144;
              }
              goto LABEL_23;
            }
            if (v23 != 5)
            {
              _V0.D[1] = v119.f64[1];
              _D1 = v119.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v68 = sqrt(_D6);
              v69 = fabs(*(double *)&v120);
              v70 = fabs(v68);
              v71 = v69 / v70;
              if (v69 >= v70)
                v71 = v70 / v69;
              if (v71 <= 0.414213562)
              {
                v73 = 1;
                v74 = 2;
                v72 = v71;
                if (_D6 >= 0.00000001)
                  goto LABEL_95;
              }
              else
              {
                v72 = (v70 - v69) / (v69 + v70);
                if (v69 >= v70)
                  v72 = -v72;
                v73 = -1;
                v74 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_95:
                  if (v69 < v70)
                    v73 = -v73;
                  else
                    v74 = v71 > 0.414213562;
                  v75 = v68 == INFINITY && v69 == INFINITY;
                  v76 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v72 * v72), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v72 * v72), (float64x2_t)xmmword_210315370), v72 * v72 * (v72 * v72))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v72 * v72), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v72 * v72), (float64x2_t)xmmword_210315380), v72 * v72 * (v72 * v72))),
                            v72 * v72 * (v72 * v72) * (v72 * v72 * (v72 * v72))));
                  v77 = v72 + v72 * vdivq_f64(v76, (float64x2_t)vdupq_laneq_s64((int64x2_t)v76, 1)).f64[0];
                  if (v75)
                    v77 = 0.785398163;
                  if (v68 == 0.0 && *(double *)&v120 == 0.0)
                    v79 = 0.0;
                  else
                    v79 = v77;
                  if (v120 < 0)
                  {
                    v74 = 4 - v74;
                    v73 = -v73;
                  }
                  if (v68 < 0.0)
                  {
                    v74 = -v74;
                    v73 = -v73;
                  }
                  v80 = (double)v74 * 3.061617e-17 + (double)v74 * 0.785398163 + v79 * (double)v73;
                  v81 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v14, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v14, *(int64x2_t *)(a1 + 184)), v80 * v80)), v80 * v80);
                  v82 = 1.0 / v68 * (v80 + v80 * (v81.f64[0] + vmuld_lane_f64(v80 * v80 * (v80 * v80), v81, 1)));
                  goto LABEL_162;
                }
              }
              v82 = 1.0 / *(double *)&v120;
LABEL_162:
              v107 = vmulq_n_f64(v119, v82);
              v105 = *(double *)a1;
              v103 = *(double *)(a1 + 8);
              v106 = v107.f64[1];
              v102 = *(double *)(a1 + 16);
              v104 = *(double *)(a1 + 32);
              v101 = *(double *)(a1 + 40);
              goto LABEL_163;
            }
            v26 = v119.f64[0] * v119.f64[0] + v119.f64[1] * v119.f64[1];
            if (v26 >= 0.00000001)
            {
              v108 = sqrt(v26);
              if (v108 <= *(double *)&v120)
              {
                v115 = v108 / *(double *)&v120 * 0.785398163
                     - v108
                     / *(double *)&v120
                     * (v108 / *(double *)&v120 + -1.0)
                     * (v108 / *(double *)&v120 * 0.0663008339 + 0.244711287);
              }
              else
              {
                if (v108 <= -*(double *)&v120)
                {
                  v110 = v108 / *(double *)&v120 * 0.785398163
                       - v108
                       / *(double *)&v120
                       * (-1.0 - v108 / *(double *)&v120)
                       * (v108 / *(double *)&v120 * -0.0663008339 + 0.244711287);
                  v111 = 3.14159265;
                }
                else
                {
                  v109 = fabs(*(double *)&v120 / v108);
                  v110 = *(double *)&v120 / v108 * (v109 + -1.0) * (v109 * 0.0663008339 + 0.244711287)
                       + *(double *)&v120 / v108 * -0.785398163;
                  v111 = 1.57079633;
                }
                v115 = v110 + v111;
              }
              v116 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v14, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v14, *(int64x2_t *)(a1 + 184)), v115 * v115)), v115 * v115);
              v117 = (v115 + v115 * (v116.f64[0] + vmuld_lane_f64(v115 * v115 * (v115 * v115), v116, 1))) / v108;
              v121.f64[0] = v119.f64[0] * v117;
              v121.f64[1] = v119.f64[1] * v117;
              v24 = *(_DWORD *)(a1 + 992);
              if (v24 != -1)
                goto LABEL_144;
              goto LABEL_57;
            }
            if (*(double *)&v120 != 0.0)
            {
              v121.f64[0] = v119.f64[0] * (1.0 / *(double *)&v120);
              v121.f64[1] = v119.f64[1] * (1.0 / *(double *)&v120);
              v24 = *(_DWORD *)(a1 + 992);
              if (v24 == -1)
                goto LABEL_57;
              goto LABEL_144;
            }
          }
          else
          {
            if (v23 <= 1)
            {
              if (!v23)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              if (*(double *)&v120 < 0.00000001)
                goto LABEL_23;
              v121 = vmulq_n_f64(v119, 1.0 / *(double *)&v120);
              v24 = *(_DWORD *)(a1 + 992);
              if (v24 != -1)
                goto LABEL_144;
LABEL_57:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v24 = *(_DWORD *)(a1 + 992);
              if (v24 <= 7)
                goto LABEL_145;
              goto LABEL_59;
            }
            if (v23 != 2)
            {
              _V0.D[1] = v119.f64[1];
              _D1 = v119.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v86 = sqrt(_D6);
              v87 = fabs(*(double *)&v120);
              v88 = fabs(v86);
              v89 = v87 / v88;
              if (v87 >= v88)
                v89 = v88 / v87;
              if (v89 <= 0.414213562)
              {
                v91 = 1;
                v92 = 2;
                v90 = v89;
                if (_D6 >= 0.00000001)
                {
LABEL_120:
                  if (v87 < v88)
                    v91 = -v91;
                  else
                    v92 = v89 > 0.414213562;
                  v93 = v86 == INFINITY && v87 == INFINITY;
                  v94 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v90 * v90), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v90 * v90), (float64x2_t)xmmword_210315370), v90 * v90 * (v90 * v90))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v90 * v90), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v90 * v90), (float64x2_t)xmmword_210315380), v90 * v90 * (v90 * v90))),
                            v90 * v90 * (v90 * v90) * (v90 * v90 * (v90 * v90))));
                  v95 = v90 + v90 * vdivq_f64(v94, (float64x2_t)vdupq_laneq_s64((int64x2_t)v94, 1)).f64[0];
                  if (v93)
                    v95 = 0.785398163;
                  if (v86 == 0.0 && *(double *)&v120 == 0.0)
                    v97 = 0.0;
                  else
                    v97 = v95;
                  if (v120 < 0)
                  {
                    v92 = 4 - v92;
                    v91 = -v91;
                  }
                  if (v86 < 0.0)
                  {
                    v92 = -v92;
                    v91 = -v91;
                  }
                  v98 = (double)v92 * 3.061617e-17 + (double)v92 * 0.785398163 + v97 * (double)v91;
                  v99 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v14, *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v14, *(int64x2_t *)(a1 + 184)), v98 * v98)), v98 * v98);
                  v38 = vmulq_n_f64(v119, 1.0 / v86 * (v98 + v98 * (v99.f64[0] + vmuld_lane_f64(v98 * v98 * (v98 * v98), v99, 1))));
                  goto LABEL_168;
                }
              }
              else
              {
                v90 = (v88 - v87) / (v87 + v88);
                if (v87 >= v88)
                  v90 = -v90;
                v91 = -1;
                v92 = 1;
                if (_D6 >= 0.00000001)
                  goto LABEL_120;
              }
              v38 = vmulq_n_f64(v119, 1.0 / *(double *)&v120);
              goto LABEL_168;
            }
            if (*(_DWORD *)(a1 + 212))
            {
              if (*(double *)&v120 >= 0.00000001)
              {
                _Q2 = vmulq_n_f64(v119, 1.0 / *(double *)&v120);
                _D0 = vmuld_lane_f64(1.0 / *(double *)&v120, v119, 1);
                __asm { FMLA            D1, D0, V2.D[1] }
                v38 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
                v121.f64[0] = v38.f64[0];
                goto LABEL_168;
              }
            }
            else if (*(double *)&v120 >= 0.00000001)
            {
              _Q2 = vmulq_n_f64(v119, 1.0 / *(double *)&v120);
              _D0 = vmuld_lane_f64(1.0 / *(double *)&v120, v119, 1);
              __asm { FMLA            D1, D0, V2.D[1] }
              v38 = vmulq_n_f64(_Q2, *(double *)(a1 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
              goto LABEL_168;
            }
          }
          goto LABEL_23;
        }
      }
      else if (v23 <= 7)
      {
        goto LABEL_26;
      }
      if (v23 <= 0xB)
      {
        if (v23 > 9)
        {
          if (v23 == 10)
            v25 = sub_20EB24288(&v121, (uint64_t)&v119, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
          else
            v25 = sub_20EB3A2E4(a1, &v121, &v119);
        }
        else
        {
          if (v23 != 9)
          {
            _V0.D[1] = v119.f64[1];
            _D1 = v119.f64[1];
            __asm { FMLA            D6, D1, V0.D[1] }
            v51 = sqrt(_D6);
            v52 = fabs(*(double *)&v120);
            v53 = fabs(v51);
            v54 = v52 / v53;
            if (v52 >= v53)
              v54 = v53 / v52;
            if (v54 <= 0.414213562)
            {
              v56 = 1;
              v57 = 2;
              v55 = v54;
              if (_D6 >= 0.00000001)
                goto LABEL_70;
            }
            else
            {
              v55 = (v53 - v52) / (v52 + v53);
              if (v52 >= v53)
                v55 = -v55;
              v56 = -1;
              v57 = 1;
              if (_D6 >= 0.00000001)
              {
LABEL_70:
                if (v52 < v53)
                  v56 = -v56;
                else
                  v57 = v54 > 0.414213562;
                _ZF = v51 == INFINITY && v52 == INFINITY;
                v59 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v55 * v55), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v55 * v55), (float64x2_t)xmmword_210315370), v55 * v55 * (v55 * v55))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v55 * v55), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v55 * v55), (float64x2_t)xmmword_210315380), v55 * v55 * (v55 * v55))),
                          v55 * v55 * (v55 * v55) * (v55 * v55 * (v55 * v55))));
                v60 = v55 + v55 * vdivq_f64(v59, (float64x2_t)vdupq_laneq_s64((int64x2_t)v59, 1)).f64[0];
                if (_ZF)
                  v60 = 0.785398163;
                if (v51 == 0.0 && *(double *)&v120 == 0.0)
                  v62 = 0.0;
                else
                  v62 = v60;
                if (v120 < 0)
                {
                  v57 = 4 - v57;
                  v56 = -v56;
                }
                if (v51 < 0.0)
                {
                  v57 = -v57;
                  v56 = -v56;
                }
                v63 = (double)v57 * 3.061617e-17 + (double)v57 * 0.785398163 + v62 * (double)v56;
                v64 = 1.0
                    / v51
                    * (v63
                     * (v63
                      * v63
                      * (*(double *)(a1 + 168)
                       + v63
                       * v63
                       * (*(double *)(a1 + 176)
                        + v63
                        * v63
                        * (*(double *)(a1 + 184)
                         + v63
                         * v63
                         * (*(double *)(a1 + 192)
                          + v63
                          * v63
                          * (*(double *)(a1 + 200)
                           + v63 * v63 * (*(double *)(a1 + 208) + v63 * v63 * *(double *)(a1 + 216)))))))
                      + 1.0));
                goto LABEL_158;
              }
            }
            v64 = 1.0 / *(double *)&v120;
LABEL_158:
            v43 = vmulq_n_f64(v119, v64);
            v41 = *(double *)a1;
            v47 = *(double *)(a1 + 8);
            v42 = v43.f64[1];
            v46 = *(double *)(a1 + 16);
            v45 = *(double *)(a1 + 32);
            v44 = *(double *)(a1 + 40);
            goto LABEL_159;
          }
          v25 = sub_20EB3641C(a1, &v121, &v119);
        }
        goto LABEL_142;
      }
      if (v23 > 0xD)
      {
        if (v23 == 14)
          v25 = sub_20EB247C0(&v121, (uint64_t)&v119, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v25 = sub_20EB3E39C(a1, &v121, &v119);
        goto LABEL_142;
      }
      if (v23 == 13 && *(double *)&v120 >= 0.00000001)
      {
        _Q0 = vdivq_f64(v119, (float64x2_t)vdupq_lane_s64(v120, 0));
        v28 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v34 = v28 * (_D2 * v28);
        v121 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v34* (*(double *)(a1 + 168)+ v28 * *(double *)(a1 + 224)+ v34* (*(double *)(a1 + 176)+ v28 * *(double *)(a1 + 232)+ v34* (*(double *)(a1 + 184)+ v28 * *(double *)(a1 + 240)+ v34* (*(double *)(a1 + 192)+ v28 * *(double *)(a1 + 248)+ v34* (*(double *)(a1 + 200)+ v28 * *(double *)(a1 + 256)+ v34
                                     * (*(double *)(a1 + 208)
                                      + v28 * *(double *)(a1 + 264)
                                      + v34 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v28 + v34 * 0.0)))))))
                                / 100.0
                                + 1.0),
                                0));
        v24 = *(_DWORD *)(a1 + 992);
        if (v24 == -1)
          goto LABEL_57;
LABEL_144:
        if (v24 <= 7)
        {
LABEL_145:
          if (v24 <= 3)
          {
            if (v24 <= 1)
            {
              if (!v24)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v20 = *(double *)(a1 + 16) + *(double *)a1 * v121.f64[0] + *(double *)(a1 + 8) * v121.f64[1];
              v100 = *(double *)(a1 + 40);
              v101 = v121.f64[1] * *(double *)(a1 + 32);
LABEL_151:
              v21 = v101 + v100;
LABEL_15:
              if (v20 >= v16)
                v16 = v20;
              if (v15 >= v20)
                v15 = v20;
              if (v21 >= v18)
                v18 = v21;
              if (v19 >= v21)
                v19 = v21;
              goto LABEL_23;
            }
            v38 = v121;
LABEL_168:
            v20 = *(double *)(a1 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v38));
            v21 = vmuld_lane_f64(*(double *)(a1 + 32), v38, 1) + *(double *)(a1 + 40);
            goto LABEL_15;
          }
          v103 = *(double *)(a1 + 8);
          v102 = *(double *)(a1 + 16);
          v104 = *(double *)(a1 + 32);
          v101 = *(double *)(a1 + 40);
          v105 = *(double *)a1;
          v106 = v121.f64[1];
          v107.f64[0] = v121.f64[0];
          if (v24 > 5)
          {
            v20 = v102 + v105 * v121.f64[0] + v103 * v121.f64[1];
            v100 = v104 * v121.f64[1];
            goto LABEL_151;
          }
LABEL_163:
          v20 = v102 + v105 * v107.f64[0] + v103 * v106;
          v21 = v106 * v104 + v101;
          goto LABEL_15;
        }
LABEL_59:
        v41 = *(double *)a1;
        v42 = v121.f64[1];
        v43.f64[0] = v121.f64[0];
        if (v24 > 0xB)
        {
          v20 = *(double *)(a1 + 16) + v41 * v121.f64[0] + *(double *)(a1 + 8) * v121.f64[1];
          v21 = *(double *)(a1 + 40) + *(double *)(a1 + 32) * v121.f64[1];
          goto LABEL_15;
        }
        v45 = *(double *)(a1 + 32);
        v44 = *(double *)(a1 + 40);
        v47 = *(double *)(a1 + 8);
        v46 = *(double *)(a1 + 16);
        if (v24 > 9)
        {
          v20 = v46 + v41 * v121.f64[0] + v47 * v121.f64[1];
          v21 = v44 + v45 * v121.f64[1];
          goto LABEL_15;
        }
LABEL_159:
        v20 = v46 + v41 * v43.f64[0] + v47 * v42;
        v21 = v42 * v45 + v44;
        goto LABEL_15;
      }
LABEL_23:
      ++v13;
      v17 += 3;
      if (v12 == v13)
      {
        if (v15 == 1.79769313e308)
          return 0.0;
        else
          return (v18 - v19) * (v16 - v15);
      }
    }
  }
  return v5;
}

uint64_t sub_20F0D7898(uint64_t a1, _QWORD *a2, unsigned int *a3, _DWORD *a4, unsigned __int8 a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  char *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  BOOL v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  size_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  __int128 *v68;
  _OWORD *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  char *__src;
  uint64_t v101;
  unsigned int v102;
  unsigned __int8 v103;
  void *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  void *__p;
  char *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;

  v12 = *a3;
  if (*a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 331, (uint64_t)"pri_camera_stream_id.camera_id == kPrimaryCameraID", 50, (uint64_t)"Only supports main camera primary stream", 40, (void (*)(void **))sub_21023DDB0)|| a3[1] >= 2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 332, (uint64_t)"pri_camera_stream_id.stream_id <= 1u", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a4[1] >= 2u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp",
         333,
         (uint64_t)"sec_camera_stream_id.stream_id <= 1u",
         36,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*a3 == *a4)
  {
    v13 = a3[1];
    v14 = a4[1];
    v15 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v15 = v13 | (v14 << 32);
    v16 = v15 + 2;
    goto LABEL_116;
  }
  v101 = a1;
  v102 = v12;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  __p = 0;
  v111 = 0;
  v112 = 0;
  v103 = a5;
  if (*(_QWORD *)(*(_QWORD *)*a2 + 16) - *(_QWORD *)(*(_QWORD *)*a2 + 8) == 3328)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 284, (uint64_t)"camera_sensor_models[kPrimaryCameraID]->NumStreams() == 2u", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = v115;
    v17 = v113;
    v19 = (v114 - v113) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      goto LABEL_139;
  }
  v21 = v18 - (_QWORD)v17;
  if (v21 >> 2 > v20)
    v20 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22 >> 61)
    goto LABEL_141;
  v23 = (char *)operator new(8 * v22);
  v24 = &v23[8 * v22];
  v25 = &v23[8 * v19];
  *(_QWORD *)v25 = 0x100000000;
  v113 = v25;
  v115 = (unint64_t)v24;
  v114 = v25 + 8;
  v26 = a2[1] - *a2;
  if (v26 != 8)
  {
    v42 = v26 >> 3;
    v43 = 1;
    do
    {
      v45 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v43) + 8);
      if (*(_BYTE *)(v45 + 1592))
      {
        v46 = *(_DWORD *)(v45 + 1584);
        v47 = *(_DWORD *)(v45 + 1588);
        if (v46 | v47)
        {
          if (v46)
            v49 = 0;
          else
            v49 = v47 == 1;
          if (v49)
          {
            v50 = v111;
            if ((unint64_t)v111 >= v112)
            {
              v51 = (char *)sub_20F0D84E4(&__p, v43, 0);
            }
            else
            {
              *(_DWORD *)v111 = v43;
              *((_DWORD *)v50 + 1) = 0;
              if (v43 >= 0x10000
                && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| *((_DWORD *)v50 + 1) >= 0x10000u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
              {
                abort();
              }
              v51 = v50 + 8;
            }
            v111 = v51;
          }
        }
        else
        {
          v48 = v114;
          if ((unint64_t)v114 >= v115)
          {
            v44 = (char *)sub_20F0D84E4((void **)&v113, v43, 0);
          }
          else
          {
            *(_DWORD *)v114 = v43;
            *((_DWORD *)v48 + 1) = 0;
            if (v43 >= 0x10000
              && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| *((_DWORD *)v48 + 1) >= 0x10000u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
            {
              abort();
            }
            v44 = v48 + 8;
          }
          v114 = v44;
        }
      }
      ++v43;
    }
    while (v42 != v43);
  }
  v27 = (char *)__p;
  v28 = v111 - (_BYTE *)__p;
  if (v111 - (_BYTE *)__p >= 1)
  {
    v30 = v113;
    v29 = (unint64_t)v114;
    v31 = v113 + 8;
    v32 = v28 >> 3;
    if (v28 >> 3 > (uint64_t)(v115 - (_QWORD)v114) >> 3)
    {
      v33 = v32 + ((v114 - v113) >> 3);
      if (!(v33 >> 61))
      {
        v34 = v115 - (_QWORD)v113;
        if ((uint64_t)(v115 - (_QWORD)v113) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (!v35)
        {
          v37 = 0;
          v38 = 8;
          v39 = (char *)(8 * v32 + 8);
          v40 = v28 - 8;
          if ((unint64_t)(v28 - 8) < 0x28)
            goto LABEL_31;
          goto LABEL_70;
        }
        if (!(v35 >> 61))
        {
          v36 = v35;
          v37 = (char *)operator new(8 * v35);
          v35 = v36;
          v38 = (uint64_t)(v37 + 8);
          v39 = &v37[8 * v32 + 8];
          v40 = v28 - 8;
          if ((unint64_t)(v28 - 8) < 0x28)
          {
LABEL_31:
            v41 = (char *)v38;
            goto LABEL_74;
          }
LABEL_70:
          v41 = (char *)v38;
          if ((unint64_t)(v37 - v27 + 8) >= 0x20)
          {
            v65 = (v40 >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = (char *)(v38 + v66);
            v67 = &v27[v66];
            v68 = (__int128 *)(v27 + 16);
            v69 = v37 + 24;
            v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *(v69 - 1) = *(v68 - 1);
              *v69 = v71;
              v68 += 2;
              v69 += 2;
              v70 -= 4;
            }
            while (v70);
            v27 = v67;
            if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_75:
              v73 = v113;
              if (v113 == v31)
              {
LABEL_94:
                v89 = &v37[8 * v35];
                if ((char *)v29 != v31)
                  memmove(v39, v30 + 8, v29 - (_QWORD)v31);
                v90 = v113;
                v113 = (char *)v38;
                v114 = &v39[v29 - (_QWORD)v31];
                v115 = (unint64_t)v89;
                if (v90)
                  operator delete(v90);
                goto LABEL_98;
              }
              if ((unint64_t)(v30 - v113) < 0x18)
              {
                v74 = v30 + 8;
              }
              else
              {
                v74 = v30 + 8;
                if ((unint64_t)(v30 - v37) >= 0x20)
                {
                  v75 = ((unint64_t)(v30 - v113) >> 3) + 1;
                  v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
                  v74 = &v31[-v76];
                  v38 -= v76;
                  v77 = v37 - 8;
                  v78 = v30 - 8;
                  v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v80 = *(_OWORD *)v78;
                    *((_OWORD *)v77 - 1) = *((_OWORD *)v78 - 1);
                    *(_OWORD *)v77 = v80;
                    v77 -= 32;
                    v78 -= 32;
                    v79 -= 4;
                  }
                  while (v79);
                  if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_93;
                }
              }
              do
              {
                v88 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *(_QWORD *)(v38 - 8) = v88;
                v38 -= 8;
              }
              while (v74 != v73);
LABEL_93:
              v29 = (unint64_t)v114;
              goto LABEL_94;
            }
          }
          do
          {
LABEL_74:
            v72 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v41 = v72;
            v41 += 8;
          }
          while (v41 != v39);
          goto LABEL_75;
        }
LABEL_141:
        sub_20E877A38();
      }
LABEL_139:
      sub_20E92CED8();
    }
    v52 = v114 - v31;
    v53 = (v114 - v31) >> 3;
    if (v53 >= v32)
    {
      v57 = (char *)__p + 8 * v32;
      v56 = v114;
LABEL_64:
      v58 = &v31[8 * v32];
      v59 = v56 - v58;
      v60 = (v56 - v58) >> 3;
      v61 = &v56[-8 * v32];
      v62 = v56;
      if ((unint64_t)v61 < v29)
      {
        v63 = (unint64_t)&v30[v59 + 16];
        if (v29 > v63)
          v63 = v29;
        v64 = v63 - (_QWORD)&v30[v59] - 9;
        if (v64 >= 0x48)
        {
          v62 = v56;
          if ((unint64_t)(v58 - v30 - 8) >= 0x20)
          {
            v81 = (v64 >> 3) + 1;
            v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
            v61 += v82;
            v62 = &v56[v82];
            v83 = v56 + 16;
            v84 = &v30[8 * v60 + 24];
            v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *(_OWORD *)v84;
              *(v83 - 1) = *((_OWORD *)v84 - 1);
              *v83 = v86;
              v83 += 2;
              v84 += 32;
              v85 -= 4;
            }
            while (v85);
            if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_87;
          }
        }
        else
        {
          v62 = v56;
        }
        do
        {
          v87 = *(_QWORD *)v61;
          v61 += 8;
          *(_QWORD *)v62 = v87;
          v62 += 8;
        }
        while ((unint64_t)v61 < v29);
      }
LABEL_87:
      v114 = v62;
      if (v56 != v58)
        memmove(&v56[-8 * v60], v31, v59);
      if (v57 != v27)
        memmove(v31, v27, v57 - v27);
      goto LABEL_98;
    }
    __src = v113 + 8;
    v54 = (char *)__p + 8 * v53;
    v55 = (char *)(v111 - v54);
    if (v111 != v54)
      memmove(v114, (char *)__p + 8 * v53, v111 - v54);
    v56 = &v55[v29];
    v114 = &v55[v29];
    if (v52 >= 1)
    {
      v57 = v54;
      v31 = __src;
      goto LABEL_64;
    }
  }
LABEL_98:
  v91 = v113;
  v92 = v113;
  a5 = v103;
  a1 = v101;
  v12 = v102;
  if (v113 != v114)
  {
    v92 = v113;
    while (*(_DWORD *)v92 != *a4 || *((_DWORD *)v92 + 1) != a4[1])
    {
      v92 += 8;
      if (v92 == v114)
      {
        v92 = v114;
        break;
      }
    }
  }
  if (!*(_QWORD *)a3)
  {
    if (v92 != v114)
      goto LABEL_110;
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 371, (uint64_t)"sec_cam_stream_id_iter != stereo_streams_for_main_camera_pri_stream.end() && \"The secondary camera stream ID is not associated with the primary \" \"main-camera stream!\"", 167, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v91 = v113;
LABEL_110:
      v15 = (unsigned int *)operator new(8uLL);
      *(_QWORD *)v15 = ((unint64_t)(v92 - v91) >> 3 << 32) + 0x100000000;
      v16 = v15 + 2;
      v94 = (char *)__p;
      if (!__p)
        goto LABEL_112;
      goto LABEL_111;
    }
LABEL_144:
    abort();
  }
  if (v92 != v114 && !*a3 && a3[1] == 1)
  {
    v15 = (unsigned int *)operator new(0x10uLL);
    v15[2] = 0;
    v15[3] = ((unint64_t)(v92 - v91) >> 3) + 1;
    *(_QWORD *)v15 = 0x100000001;
    v16 = v15 + 4;
    v94 = (char *)__p;
    if (!__p)
      goto LABEL_112;
LABEL_111:
    v111 = v94;
    operator delete(v94);
    goto LABEL_112;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 408, (uint64_t)"false && \"This configuration is not supported. You may want to look how the stereo \" \"matches are stored in this case\"", 118, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_144;
  }
  v15 = 0;
  v16 = 0;
  v94 = (char *)__p;
  if (__p)
    goto LABEL_111;
LABEL_112:
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v15 == v16)
  {
    v16 = v15;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 428, (uint64_t)"!obs_streams_indices.empty()", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_140;
    }
  }
LABEL_116:
  v95 = ((char *)v16 - (char *)v15) >> 3;
  if (v95 != 2)
  {
    if (v95 == 1)
    {
      v96 = sub_20F17608C(*(_QWORD *)(a1 + 56) + 168 * v12, a6 + 48, a6, a6 + 24, 1u, (_QWORD *)(a6 + 72), 1u, 1, *v15, v15[1], a5);
      goto LABEL_128;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/OutlierRejectionUtil.cpp", 439, (uint64_t)"obs_streams_indices.size() == 2u", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_140:
      abort();
    }
  }
  v97 = sub_20F17608C(*(_QWORD *)(a1 + 56) + 168 * v12, a6 + 48, a6, a6 + 24, 1u, (_QWORD *)(a6 + 72), 1u, 1, *v15, v15[1], a5);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  __p = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v98 = sub_20F17608C(*(_QWORD *)(a1 + 56) + 168 * v12, (uint64_t)&v113, (uint64_t)&__p, (uint64_t)&v107, 1u, &v104, 1u, 1, *(v16 - 2), *(v16 - 1), a5);
  sub_20F0D86FC((char **)(a6 + 48), *(_BYTE **)(a6 + 56), v113, v114, (v114 - v113) >> 3);
  sub_20F0D86FC((char **)a6, *(_BYTE **)(a6 + 8), (char *)__p, v111, (v111 - (_BYTE *)__p) >> 3);
  sub_20F0D86FC((char **)(a6 + 24), *(_BYTE **)(a6 + 32), (char *)v107, v108, (v108 - (_BYTE *)v107) >> 3);
  sub_20F0D86FC((char **)(a6 + 72), *(_BYTE **)(a6 + 80), (char *)v104, v105, (v105 - (_BYTE *)v104) >> 3);
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = (char *)v107;
    operator delete(v107);
  }
  if (__p)
  {
    v111 = (char *)__p;
    operator delete(__p);
  }
  v96 = (v98 + v97);
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
LABEL_128:
  operator delete(v15);
  return v96;
}

void sub_20F0D83FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20F0D84E4(void **a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int *v12;
  _DWORD *v13;
  _DWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_20E92CED8();
  v9 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (!v10)
  {
    v11 = 0;
    v12 = (unsigned int *)(8 * v5);
    *(_DWORD *)(8 * v5) = a2;
    *(_DWORD *)(8 * v5 + 4) = a3;
    v13 = (_DWORD *)(8 * v5 + 4);
    if (a2 < 0x10000)
      goto LABEL_10;
LABEL_13:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_28;
    }
    if (*v13 < 0x10000u)
      goto LABEL_16;
LABEL_15:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))goto LABEL_16;
LABEL_28:
    abort();
  }
  if (v10 >> 61)
    sub_20E877A38();
  v11 = operator new(8 * v10);
  v12 = (unsigned int *)&v11[8 * v5];
  *v12 = a2;
  v12[1] = a3;
  v13 = v12 + 1;
  if (a2 >= 0x10000)
    goto LABEL_13;
LABEL_10:
  if (a3 >= 0x10000)
    goto LABEL_15;
LABEL_16:
  v14 = v12 + 2;
  v16 = *a1;
  v15 = a1[1];
  if (v15 != *a1)
  {
    v17 = v15 - (_BYTE *)*a1 - 8;
    if (v17 < 0x58)
      goto LABEL_32;
    if ((unint64_t)(v15 - v11 - v4) < 0x20)
      goto LABEL_32;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v15[-v19];
    v12 = (unsigned int *)((char *)v12 - v19);
    v21 = &v11[8 * v5 - 16];
    v22 = (__int128 *)(v15 - 16);
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    v15 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v12 - 1) = v25;
        v12 -= 2;
      }
      while (v15 != v16);
    }
    v15 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = &v11[8 * v10];
  if (v15)
    operator delete(v15);
  return v14;
}

void sub_20F0D86E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F0D86FC(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 3;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 3)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 3);
    if (v16 >> 61)
      sub_20E867F44();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v20 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
      v21 = v18;
      v22 = operator new(8 * v18);
      v18 = v21;
      v14 = (char *)v20;
      v13 = v12 >> 3;
      v7 = __src;
      v9 = a1;
    }
    else
    {
      v22 = 0;
    }
    v36 = &v22[8 * v13];
    v37 = &v36[8 * a5];
    v38 = v36;
    v39 = v7;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_56;
    v38 = &v22[8 * v13];
    v39 = v7;
    if ((unint64_t)(&v22[v12 & 0xFFFFFFFFFFFFFFF8] - v7) < 0x20)
      goto LABEL_56;
    v40 = (v5 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v38 = &v36[v41];
    v39 = &v7[v41];
    v42 = (__int128 *)(v7 + 16);
    v43 = &v22[8 * v13 + 16];
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v42;
      *(v43 - 1) = *(v42 - 1);
      *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v46 = *(_QWORD *)v39;
        v39 += 8;
        *(_QWORD *)v38 = v46;
        v38 += 8;
      }
      while (v38 != v37);
    }
    if ((_BYTE *)v11 == a2)
      goto LABEL_38;
    if ((unint64_t)(v12 - 8) >= 0x68)
    {
      v47 = v14;
      if ((v12 & 0xFFFFFFFFFFFFFFF8) + v11 - (unint64_t)&v22[v12 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v48 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v47 = &v14[-v49];
        v36 -= v49;
        v50 = 8 * v13 - 16;
        v51 = &v22[v50];
        v52 = (__int128 *)(v11 + v50);
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *v52;
          *(v51 - 1) = *(v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 2;
          v53 -= 4;
        }
        while (v53);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
    }
    else
    {
      v47 = v14;
    }
    do
    {
      v55 = *((_QWORD *)v47 - 1);
      v47 -= 8;
      *((_QWORD *)v36 - 1) = v55;
      v36 -= 8;
    }
    while (v47 != (char *)v11);
LABEL_38:
    v56 = &v22[8 * v18];
    v57 = v10 - (_QWORD)v14;
    if (v57)
      memmove(v37, v14, v57);
    *v9 = v36;
    v9[1] = &v37[v57];
    v9[2] = v56;
    if (v11)
      operator delete((void *)v11);
    return;
  }
  v23 = v10 - (_QWORD)v14;
  v24 = (uint64_t)(v10 - (_QWORD)v14) >> 3;
  if (v24 >= a5)
  {
    v25 = &__src[8 * a5];
    v27 = (unint64_t)a1[1];
    goto LABEL_18;
  }
  v25 = &__src[8 * v24];
  v26 = a4 - v25;
  if (a4 != v25)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
    memmove(a1[1], &__src[8 * v24], a4 - v25);
    v13 = v12 >> 3;
    v14 = (char *)v67;
  }
  v27 = v10 + v26;
  v9[1] = (char *)(v10 + v26);
  if (v23 >= 1)
  {
LABEL_18:
    v28 = &v14[8 * a5];
    v29 = v27 - (_QWORD)v28;
    v30 = (uint64_t)(v27 - (_QWORD)v28) >> 3;
    v31 = (uint64_t *)(v27 - 8 * a5);
    v32 = (char *)v27;
    if ((unint64_t)v31 < v10)
    {
      v33 = (v12 & 0xFFFFFFFFFFFFFFF8) + v29;
      v34 = v33 + v11 + 8;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v33;
      if (v35 >= 0x58)
      {
        v32 = (char *)v27;
        if ((unint64_t)&v28[-(v12 & 0xFFFFFFFFFFFFFFF8) - v11] >= 0x20)
        {
          v58 = (v35 >> 3) + 1;
          v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = (uint64_t *)((char *)v31 + v59);
          v32 = (char *)(v27 + v59);
          v60 = (_OWORD *)(v27 + 16);
          v61 = (__int128 *)(8 * v30 + 8 * v13 + v11 + 16);
          v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *v60 = v63;
            v60 += 2;
            v61 += 2;
            v62 -= 4;
          }
          while (v62);
          if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
      }
      else
      {
        v32 = (char *)v27;
      }
      do
      {
        v64 = *v31++;
        *(_QWORD *)v32 = v64;
        v32 += 8;
      }
      while ((unint64_t)v31 < v10);
    }
LABEL_47:
    v9[1] = v32;
    if ((char *)v27 != v28)
    {
      v65 = v14;
      memmove((void *)(v27 - 8 * v30), v14, v29);
      v14 = v65;
    }
    if (v25 != v7)
      memmove(v14, v7, v25 - v7);
  }
}

uint64_t sub_20F0D8AD4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 112) = v15;
  v17 = *(_OWORD *)(a2 + 160);
  v18 = *(_OWORD *)(a2 + 176);
  v19 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 192) = v19;
  *(_OWORD *)(a1 + 160) = v17;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v20 = (uint64_t *)(a1 + 240);
  *(_QWORD *)(a1 + 248) = 0;
  v21 = (uint64_t *)(a1 + 248);
  v22 = (uint64_t *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  v23 = *(_QWORD *)(*(_QWORD *)*a3 + 8);
  v24 = *(double *)(v23 + 1552);
  if (*(_BYTE *)(v23 + 1536))
    v25 = v23 + 96;
  else
    v25 = 0;
  v26 = *(_DWORD *)(v25 + 992);
  if (v26 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_20;
    }
    v26 = *(_DWORD *)(v25 + 992);
  }
  if (!v26)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_20:
    abort();
  }
  v27 = v24 / *(double *)v25;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)*a3 + 16) - *(_QWORD *)(*(_QWORD *)*a3 + 8)) >> 7)) >= 2)
  {
    v28 = operator new();
    sub_20F0DA54C(v28, a2 + 48, a4, a5, v27);
    v29 = (_QWORD *)*v20;
    *v20 = v28;
    if (v29)
    {
      v30 = sub_20ED291D8(v29);
      MEMORY[0x212BC6398](v30, 0x10F0C405208BBE6);
    }
  }
  if (*(_BYTE *)(a2 + 200))
  {
    if (a3[1] - *a3 >= 9uLL)
    {
      v31 = operator new();
      sub_20F0DA54C(v31, a2 + 48, a4, a5, v27);
      v32 = (_QWORD *)*v21;
      *v21 = v31;
      if (v32)
      {
        v33 = sub_20ED291D8(v32);
        MEMORY[0x212BC6398](v33, 0x10F0C405208BBE6);
      }
    }
    if (a3[1] - *a3 >= 0x11uLL)
    {
      v34 = operator new();
      sub_20F0DA54C(v34, a2 + 48, a4, a5, v27);
      v35 = (_QWORD *)*v22;
      *v22 = v34;
      if (v35)
      {
        v36 = sub_20ED291D8(v35);
        MEMORY[0x212BC6398](v36, 0x10F0C405208BBE6);
      }
    }
  }
  return a1;
}

void sub_20F0D8D98(_Unwind_Exception *a1)
{
  _QWORD **v1;
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;

  MEMORY[0x212BC6398](v4, 0x10F0C405208BBE6);
  sub_20F0D8DF8(v3);
  sub_20F0D8DF8(v2);
  sub_20F0D8DF8(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_20F0D8DF8(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20ED291D8(v2);
    MEMORY[0x212BC6398](v3, 0x10F0C405208BBE6);
  }
  return a1;
}

uint64_t sub_20F0D8E3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25[6];
  int v26;
  char v27;

  v16 = *(uint64_t **)(a1 + 240);
  if (!v16)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3PIncrementalPoseAndOurlierRejection.cpp", 75, (uint64_t)"p3p_primary_stereo_ != nullptr", 30, (uint64_t)"Primary stereo pair not initialized.", 36, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v16 = *(uint64_t **)(a1 + 240);
  }
  result = sub_20F0E0CD4(v16, a2, a3, (unsigned int *)a1, (unsigned int *)(a1 + 8), a6, *a4, a5, a8, a7);
  v18 = *(_QWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(v18 + 632);
  *(_BYTE *)(a1 + 220) = 1;
  if (*(_BYTE *)(a1 + 228))
    *(_BYTE *)(a1 + 228) = 0;
  if (*(_BYTE *)(a1 + 236))
    *(_BYTE *)(a1 + 236) = 0;
  if (*(_BYTE *)(a1 + 200))
  {
    v19 = 1008;
    if (!*(_BYTE *)(v18 + 1024))
      v19 = 984;
    v20 = 1000;
    if (!*(_BYTE *)(v18 + 1024))
      v20 = 976;
    if (*(_DWORD *)(a1 + 204) > ((*(_QWORD *)(v18 + v19) - *(_QWORD *)(v18 + v20)) >> 2))
    {
      result = sub_20F0D8FCC((unsigned int *)a1, a2, a6, a3, a4, v25);
      if (v27)
      {
        v21 = *(unsigned __int8 *)(a8 + 96);
        v22 = v25[3];
        *(int64x2_t *)(a8 + 32) = v25[2];
        *(int64x2_t *)(a8 + 48) = v22;
        v23 = v25[5];
        *(int64x2_t *)(a8 + 64) = v25[4];
        *(int64x2_t *)(a8 + 80) = v23;
        v24 = v25[1];
        *(int64x2_t *)a8 = v25[0];
        *(int64x2_t *)(a8 + 16) = v24;
        if (!v21)
          *(_BYTE *)(a8 + 96) = 1;
        *(_DWORD *)(a1 + 216) = v26;
        *(_BYTE *)(a1 + 220) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_20F0D8FCC@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, int64x2_t *a6@<X8>)
{
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  _QWORD *v13;
  uint64_t result;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  int v43;
  _QWORD *v44;
  size_t v45;
  __darwin_time_t tv_sec;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  int64x2_t v50;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 v59;
  char *v61;
  size_t v62;
  __darwin_time_t v63;
  uint64_t v64;
  uint64_t k;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned __int8 v69;
  char *v71;
  size_t v72;
  __darwin_time_t v73;
  uint64_t v74;
  uint64_t m;
  uint64_t v76;
  uint64_t v78;
  int8x8_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  int v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v98;
  int64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int8x16_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  BOOL v129;
  uint64_t v130;
  float64x2_t v131;
  __int32 v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v143;
  unint64_t v145;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  float64x2_t v165;
  int64x2_t v166;
  char v167;
  uint64_t *v168;
  int v169;
  int v170;
  unsigned __int8 v171;
  char *v173;
  size_t v174;
  __darwin_time_t v175;
  uint64_t v176;
  uint64_t j;
  uint64_t v178;
  double v179;
  double v180;
  double v181;
  void *v182;
  double v183;
  double v184;
  double v185;
  double v186;
  void *v187;
  double v188;
  double v189;
  double v190;
  double v191;
  void *v192;
  double v193;
  double v194;
  double v195;
  double v196;
  void *v197;
  int8x8_t v198;
  int v199;
  char *v200;
  double v201;
  int64x2_t *v202;
  unint64_t v203;
  int v204;
  timespec v205;
  unint64_t v206;
  void *v207;
  __int128 v208;
  void *v209;
  double v210;
  double v211;
  double v212;
  void *v213;
  double v214;
  double v215;
  double v216;
  void *v217;
  char v218;
  void *__p;
  char v220;
  uint64_t v221;

  v13 = a4;
  v221 = *MEMORY[0x24BDAC8D0];
  if (0x8E38E38E38E38E39 * ((uint64_t)(a5[1] - *a5) >> 3) != 0x4EC4EC4EC4EC4EC5
                                                             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*a4 + 8 * *a1) + 16)
                                                                        - *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *a1) + 8)) >> 7)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3PIncrementalPoseAndOurlierRejection.cpp", 117, (uint64_t)"R_gyro_prev_to_cur_cam_frame.size() == camera_sensor_models[config_.primary_stereo_primary_stream_id.camera_id]->NumStreams()", 125, (uint64_t)"Corrupted input, rotation size and stream size mismatch.", 56, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  result = *((_QWORD *)a1 + 31);
  v19 = (uint64_t *)*((_QWORD *)a1 + 32);
  if (result)
  {
    if (!v19)
    {
      v20 = 0;
      v198 = 0;
      goto LABEL_12;
    }
  }
  else if (!v19)
  {
    goto LABEL_188;
  }
  sub_20F0E0CD4(v19, a2, v13, a1 + 8, a1 + 10, a3, *a5 + 72 * a1[9], 0, (uint64_t)&v206, 0);
  v198 = (int8x8_t)v206;
  v197 = v207;
  v193 = *((double *)&v208 + 1);
  v195 = *(double *)&v208;
  v192 = v209;
  v190 = v210;
  v188 = v212;
  v189 = v211;
  v186 = v214;
  v187 = v213;
  v184 = v216;
  v185 = v215;
  result = *((_QWORD *)a1 + 31);
  v21 = *((_QWORD *)a1 + 32);
  v22 = 1008;
  if (!*(_BYTE *)(v21 + 1024))
    v22 = 984;
  v23 = 1000;
  if (!*(_BYTE *)(v21 + 1024))
    v23 = 976;
  v20 = v217;
  a1[58] = (*(_QWORD *)(v21 + v22) - *(_QWORD *)(v21 + v23)) >> 2;
  *((_BYTE *)a1 + 236) = 1;
  if (!result)
  {
    v28 = 0;
    v24 = 0;
    goto LABEL_18;
  }
LABEL_12:
  sub_20F0E0CD4((uint64_t *)result, a2, v13, a1 + 4, a1 + 6, a3, *a5 + 72 * a1[5], 0, (uint64_t)&v206, 0);
  v24 = (int8x8_t)v206;
  v6 = v207;
  v10 = *((double *)&v208 + 1);
  v8 = *(double *)&v208;
  v9 = v209;
  v179 = v210;
  v180 = v211;
  v181 = v212;
  v182 = v213;
  v11 = v215;
  v183 = v214;
  v7 = v216;
  v25 = *((_QWORD *)a1 + 31);
  v26 = 1008;
  if (!*(_BYTE *)(v25 + 1024))
    v26 = 984;
  v27 = 1000;
  if (!*(_BYTE *)(v25 + 1024))
    v27 = 976;
  v28 = v217;
  a1[56] = (*(_QWORD *)(v25 + v26) - *(_QWORD *)(v25 + v27)) >> 2;
  *((_BYTE *)a1 + 228) = 1;
LABEL_18:
  v29 = sub_210219C18();
  v30 = *((_QWORD *)a1 + 31);
  if (!v30)
  {
    LODWORD(v203) = 0;
    v204 = 0;
    v202 = a6;
    v34 = *((_QWORD *)a1 + 32);
    if (v34)
      goto LABEL_24;
LABEL_31:
    LODWORD(v38) = 0;
    v39 = 0;
    v41 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v41 & 1) != 0)
      goto LABEL_32;
    goto LABEL_194;
  }
  v31 = 1008;
  if (!*(_BYTE *)(v30 + 1024))
    v31 = 984;
  v32 = 1000;
  v33 = *(_QWORD *)(v30 + v31);
  if (!*(_BYTE *)(v30 + 1024))
    v32 = 976;
  v203 = (unint64_t)(v33 - *(_QWORD *)(v30 + v32)) >> 2;
  v204 = *(_DWORD *)(v30 + 632);
  v202 = a6;
  v34 = *((_QWORD *)a1 + 32);
  if (!v34)
    goto LABEL_31;
LABEL_24:
  v35 = 1008;
  if (!*(_BYTE *)(v34 + 1024))
    v35 = 984;
  v36 = 1000;
  v37 = *(_QWORD *)(v34 + v35);
  if (!*(_BYTE *)(v34 + 1024))
    v36 = 976;
  v38 = (unint64_t)(v37 - *(_QWORD *)(v34 + v36)) >> 2;
  v39 = *(_DWORD *)(v34 + 632);
  v40 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v40 & 1) == 0)
  {
LABEL_194:
    if (__cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
  }
LABEL_32:
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_51;
  v199 = v28;
  v43 = v20;
  v44 = v13;
  v206 = __PAIR64__(v203, 67109888);
  LOWORD(v207) = 1024;
  *(_DWORD *)((char *)&v207 + 2) = v204;
  HIWORD(v207) = 1024;
  LODWORD(v208) = v38;
  WORD2(v208) = 1024;
  *(_DWORD *)((char *)&v208 + 6) = v39;
  v200 = (char *)_os_log_send_and_compose_impl();
  v45 = strlen(v200);
  v205.tv_sec = 0;
  pthread_threadid_np(0, (__uint64_t *)&v205);
  tv_sec = v205.tv_sec;
  timespec_get(&v205, 1);
  sub_210219E20(&v206, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v29 + 1), (__int128 *)(v29 + 5), "ExtendedStereo. (%u/%u), (%u/ %u)", 0x21uLL, v200, v45, tv_sec, &v205);
  std::mutex::lock(&stru_254A5A410);
  v47 = qword_254A5A458;
  for (i = unk_254A5A460; v47 != i; v47 += 40)
  {
    v49 = *(_QWORD *)(v47 + 32);
    if (!v49)
      sub_20E86D37C();
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v49 + 48))(v49, &v206);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v220 & 0x80000000) == 0)
  {
    v13 = v44;
    v20 = v43;
    if ((v218 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_41:
    operator delete(v217);
    v28 = v199;
    if (!LOBYTE(v216))
      goto LABEL_44;
LABEL_42:
    if (SHIBYTE(v215) < 0)
      operator delete(v213);
    goto LABEL_44;
  }
  operator delete(__p);
  v13 = v44;
  v20 = v43;
  if (v218 < 0)
    goto LABEL_41;
LABEL_38:
  v28 = v199;
  if (LOBYTE(v216))
    goto LABEL_42;
LABEL_44:
  if (LOBYTE(v212) && SHIBYTE(v211) < 0)
    operator delete(v209);
  if (SHIBYTE(v208) < 0)
    operator delete(v207);
  if (v200)
    free(v200);
LABEL_51:
  result = os_signpost_enabled((os_log_t)*v29);
  if ((_DWORD)result)
  {
    v206 = __PAIR64__(v203, 67109888);
    LOWORD(v207) = 1024;
    *(_DWORD *)((char *)&v207 + 2) = v204;
    HIWORD(v207) = 1024;
    LODWORD(v208) = v38;
    WORD2(v208) = 1024;
    *(_DWORD *)((char *)&v208 + 6) = v39;
    result = _os_signpost_emit_unreliably_with_name_impl();
  }
  if (!v28)
  {
    a6 = v202;
    if (v20)
      goto LABEL_62;
    v168 = sub_210219C18();
    v169 = *(_DWORD *)(*((_QWORD *)a1 + 31) + 632);
    v170 = *(_DWORD *)(*((_QWORD *)a1 + 32) + 632);
    v171 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_185:
      result = os_signpost_enabled((os_log_t)*v168);
      if ((_DWORD)result)
      {
        LODWORD(v206) = 67109376;
        HIDWORD(v206) = v169;
        LOWORD(v207) = 1024;
        *(_DWORD *)((char *)&v207 + 2) = v170;
        goto LABEL_187;
      }
      goto LABEL_188;
    }
    LODWORD(v206) = 67109376;
    HIDWORD(v206) = v169;
    LOWORD(v207) = 1024;
    *(_DWORD *)((char *)&v207 + 2) = v170;
    v173 = (char *)_os_log_send_and_compose_impl();
    v174 = strlen(v173);
    v205.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v205);
    v175 = v205.tv_sec;
    timespec_get(&v205, 1);
    sub_210219E20(&v206, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v168 + 1), (__int128 *)(v168 + 5), "ExtendedStereo. Failure. 2D-3D-Left: %u, 2D-3D-Right: %u", 0x38uLL, v173, v174, v175, &v205);
    std::mutex::lock(&stru_254A5A410);
    v176 = qword_254A5A458;
    for (j = unk_254A5A460; v176 != j; v176 += 40)
    {
      v178 = *(_QWORD *)(v176 + 32);
      if (!v178)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v178 + 48))(v178, &v206);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v220 < 0)
    {
      operator delete(__p);
      if ((v218 & 0x80000000) == 0)
      {
LABEL_146:
        if (!LOBYTE(v216))
        {
LABEL_178:
          if (LOBYTE(v212) && SHIBYTE(v211) < 0)
            operator delete(v209);
          if (SHIBYTE(v208) < 0)
            operator delete(v207);
          if (v173)
            free(v173);
          goto LABEL_185;
        }
LABEL_176:
        if (SHIBYTE(v215) < 0)
          operator delete(v213);
        goto LABEL_178;
      }
    }
    else if ((v218 & 0x80000000) == 0)
    {
      goto LABEL_146;
    }
    operator delete(v217);
    if (!LOBYTE(v216))
      goto LABEL_178;
    goto LABEL_176;
  }
  a6 = v202;
  if (!*((_QWORD *)a1 + 31))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3PIncrementalPoseAndOurlierRejection.cpp", 204, (uint64_t)"!opt_left_increment_pose || p3p_left_stereo_", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  if (v20)
  {
LABEL_62:
    if (*((_QWORD *)a1 + 32))
    {
      v52 = 0;
      v53 = *((_QWORD *)a1 + 31);
      if (v53)
        goto LABEL_64;
    }
    else
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3PIncrementalPoseAndOurlierRejection.cpp", 205, (uint64_t)"!opt_right_increment_pose || p3p_right_stereo_", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
      v52 = 0;
      v53 = *((_QWORD *)a1 + 31);
      if (v53)
        goto LABEL_64;
    }
LABEL_58:
    LODWORD(v54) = 0;
    v55 = *((_QWORD *)a1 + 32);
    if (!v55)
      goto LABEL_59;
LABEL_65:
    v56 = (*(_QWORD *)(v55 + 128) - *(_QWORD *)(v55 + 120)) >> 4;
    v57 = (*(_QWORD *)(*((_QWORD *)a1 + 30) + 128) - *(_QWORD *)(*((_QWORD *)a1 + 30) + 120)) >> 4;
    if (v54 >= v57)
      goto LABEL_76;
    goto LABEL_66;
  }
  v52 = 1;
  v53 = *((_QWORD *)a1 + 31);
  if (!v53)
    goto LABEL_58;
LABEL_64:
  v54 = (*(_QWORD *)(v53 + 128) - *(_QWORD *)(v53 + 120)) >> 4;
  v55 = *((_QWORD *)a1 + 32);
  if (v55)
    goto LABEL_65;
LABEL_59:
  LODWORD(v56) = 0;
  v57 = (*(_QWORD *)(*((_QWORD *)a1 + 30) + 128) - *(_QWORD *)(*((_QWORD *)a1 + 30) + 120)) >> 4;
  if (v54 >= v57)
    goto LABEL_76;
LABEL_66:
  if (v56 < v57)
  {
    v58 = sub_210219C18();
    v59 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_159:
      result = os_signpost_enabled((os_log_t)*v58);
      if ((_DWORD)result)
      {
        LOWORD(v206) = 0;
LABEL_187:
        result = _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_188:
      v167 = 0;
      a6->i8[0] = 0;
      goto LABEL_189;
    }
    LOWORD(v206) = 0;
    v61 = (char *)_os_log_send_and_compose_impl();
    v62 = strlen(v61);
    v205.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v205);
    v63 = v205.tv_sec;
    timespec_get(&v205, 1);
    sub_210219E20(&v206, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v58 + 1), (__int128 *)(v58 + 5), "ExtendedStereo. Failure. Not enough inliers.", 0x2CuLL, v61, v62, v63, &v205);
    std::mutex::lock(&stru_254A5A410);
    v64 = qword_254A5A458;
    for (k = unk_254A5A460; v64 != k; v64 += 40)
    {
      v66 = *(_QWORD *)(v64 + 32);
      if (!v66)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v66 + 48))(v66, &v206);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v220 < 0)
    {
      operator delete(__p);
      if ((v218 & 0x80000000) == 0)
      {
LABEL_74:
        if (!LOBYTE(v216))
        {
LABEL_152:
          if (LOBYTE(v212) && SHIBYTE(v211) < 0)
            operator delete(v209);
          if (SHIBYTE(v208) < 0)
            operator delete(v207);
          if (v61)
            free(v61);
          goto LABEL_159;
        }
LABEL_150:
        if (SHIBYTE(v215) < 0)
          operator delete(v213);
        goto LABEL_152;
      }
    }
    else if ((v218 & 0x80000000) == 0)
    {
      goto LABEL_74;
    }
    operator delete(v217);
    if (!LOBYTE(v216))
      goto LABEL_152;
    goto LABEL_150;
  }
LABEL_76:
  v67 = a1[52];
  if (v54 < v67 && v56 < v67)
  {
    v68 = sub_210219C18();
    v69 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_172:
      result = os_signpost_enabled((os_log_t)*v68);
      if ((_DWORD)result)
      {
        LODWORD(v206) = 67109376;
        HIDWORD(v206) = v54;
        LOWORD(v207) = 1024;
        *(_DWORD *)((char *)&v207 + 2) = v56;
        goto LABEL_187;
      }
      goto LABEL_188;
    }
    LODWORD(v206) = 67109376;
    HIDWORD(v206) = v54;
    LOWORD(v207) = 1024;
    *(_DWORD *)((char *)&v207 + 2) = v56;
    v71 = (char *)_os_log_send_and_compose_impl();
    v72 = strlen(v71);
    v205.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v205);
    v73 = v205.tv_sec;
    timespec_get(&v205, 1);
    sub_210219E20(&v206, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v68 + 1), (__int128 *)(v68 + 5), "ExtendedStereo. Failure. Not enough inliers. 2D-3D-Left: %u, 2D-3D-Right: %u", 0x4CuLL, v71, v72, v73, &v205);
    std::mutex::lock(&stru_254A5A410);
    v74 = qword_254A5A458;
    for (m = unk_254A5A460; v74 != m; v74 += 40)
    {
      v76 = *(_QWORD *)(v74 + 32);
      if (!v76)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v76 + 48))(v76, &v206);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v220 < 0)
    {
      operator delete(__p);
      if ((v218 & 0x80000000) == 0)
      {
LABEL_85:
        if (!LOBYTE(v216))
        {
LABEL_165:
          if (LOBYTE(v212) && SHIBYTE(v211) < 0)
            operator delete(v209);
          if (SHIBYTE(v208) < 0)
            operator delete(v207);
          if (v71)
            free(v71);
          goto LABEL_172;
        }
LABEL_163:
        if (SHIBYTE(v215) < 0)
          operator delete(v213);
        goto LABEL_165;
      }
    }
    else if ((v218 & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(v217);
    if (!LOBYTE(v216))
      goto LABEL_165;
    goto LABEL_163;
  }
  if (v54 > v56)
    v52 = 1;
  _ZF = v52 == 0;
  v78 = 8;
  if (_ZF)
  {
    v79 = 0;
  }
  else
  {
    v78 = 4;
    v79 = (int8x8_t)-1;
  }
  if (_ZF)
    v80 = *(double *)&v197;
  else
    v80 = *(double *)&v6;
  if (_ZF)
    v81 = v195;
  else
    v81 = v8;
  if (_ZF)
    v82 = v193;
  else
    v82 = v10;
  if (_ZF)
    v83 = *(double *)&v192;
  else
    v83 = *(double *)&v9;
  if (_ZF)
    v84 = v190;
  else
    v84 = v179;
  if (_ZF)
    v85 = v189;
  else
    v85 = v180;
  if (_ZF)
    v86 = v188;
  else
    v86 = v181;
  if (_ZF)
    v87 = *(double *)&v187;
  else
    v87 = *(double *)&v182;
  if (_ZF)
    v88 = v186;
  else
    v88 = v183;
  if (_ZF)
    v11 = v185;
  if (_ZF)
    v7 = v184;
  if (_ZF)
    v89 = v20;
  else
    v89 = v28;
  v90 = *(_QWORD *)&a1[v78];
  if (!v89)
  {
    v191 = v83;
    v194 = v84;
    v196 = v80;
    v201 = v81;
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3PIncrementalPoseAndOurlierRejection.cpp", 239, (uint64_t)"opt_pose_increment.has_value()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v81 = v201;
    v80 = v196;
    v84 = v194;
    v83 = v191;
    if ((_DWORD)result)
      abort();
  }
  v91 = COERCE_DOUBLE(vbsl_s8(v79, v24, v198));
  v92 = *(_QWORD *)(*(_QWORD *)(*v13 + 8 * v90) + 8) + 1664 * HIDWORD(v90);
  v50.i64[0] = *(_QWORD *)(v92 + 16);
  _Q3.i64[0] = *(_QWORD *)(v92 + 40);
  v93 = *(float64x2_t *)(v92 + 24);
  _D5 = *(double *)(v92 + 64);
  v95 = *(float64x2_t *)(v92 + 48);
  v96 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v92, (int64x2_t)v93);
  _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v92, (int64x2_t)v93);
  v98 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
  _Q20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
  _D21 = *(double *)(v92 + 88);
  _Q22 = *(float64x2_t *)(v92 + 72);
  _Q4 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v96, vnegq_f64(_Q22).f64[0]), _Q1, _Q22, 1), (float64x2_t)vzip1q_s64(v50, (int64x2_t)_Q3), _D21, 0);
  _Q1.f64[0] = *(float64_t *)(v92 + 56);
  __asm
  {
    FMLS            D6, D1, V22.D[1]
    FMLS            D6, D5, V21.D[0]
  }
  v108 = (int64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)v98, 8uLL);
  v109 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v92, v108);
  v98.f64[0] = *(float64_t *)(v92 + 48);
  *(_QWORD *)&v98.f64[1] = vdupq_laneq_s64((int64x2_t)v95, 1).u64[0];
  v110 = (float64x2_t)vzip2q_s64((int64x2_t)v96, v108);
  v111 = vextq_s8((int8x16_t)v110, _Q3, 8uLL);
  v112 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v109, vnegq_f64(_Q4).f64[0]), v110, _Q4, 1), v98, _D6, 0);
  __asm
  {
    FMLS            D20, D3, V4.D[1]
    FMLS            D20, D5, V6.D[0]
  }
  *(_QWORD *)&v110.f64[1] = v111.i64[0];
  _Q20.f64[1] = 1.0;
  v113 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v91), v110, v83), v98, v87), (float64x2_t)0, v112);
  v114 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50.u64[0], v91), (float64x2_t)v111.u64[1], v83), (float64x2_t)*(unint64_t *)&_D5, v87), (float64x2_t)0, _Q20);
  v115 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v80), v110, v84), v98, v88), (float64x2_t)0, v112);
  v116 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50.u64[0], v80), (float64x2_t)v111.u64[1], v84), (float64x2_t)*(unint64_t *)&_D5, v88), (float64x2_t)0, _Q20);
  v117 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v81), v110, v85), v98, v11), (float64x2_t)0, v112);
  v118 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50.u64[0], v81), (float64x2_t)v111.u64[1], v85), (float64x2_t)*(unint64_t *)&_D5, v11), (float64x2_t)0, _Q20);
  v119 = vaddq_f64(v112, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v82), v110, v86), v98, v7));
  v120 = vaddq_f64(_Q20, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v50.u64[0], v82), (float64x2_t)v111.u64[1], v86), (float64x2_t)*(unint64_t *)&_D5, v7));
  v121 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, *(double *)v92), v115, v93.f64[0]), v117, v95.f64[0]), (float64x2_t)0, v119);
  v122 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v114, *(double *)v92), v116, v93.f64[0]), v118, v95.f64[0]), (float64x2_t)0, v120);
  v123 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v113, *(float64x2_t *)v92, 1), v115, v93, 1), v117, v95, 1), (float64x2_t)0, v119);
  v124 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v114, *(float64x2_t *)v92, 1), v116, v93, 1), v118, v95, 1), (float64x2_t)0, v120);
  v125 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, *(double *)v50.i64), v115, *(double *)_Q3.i64), v117, _D5), (float64x2_t)0, v119);
  v126 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v114, *(double *)v50.i64), v116, *(double *)_Q3.i64), v118, _D5), (float64x2_t)0, v120);
  v127 = vaddq_f64(v119, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, _Q4.f64[0]), v115, _Q4, 1), v117, _D6));
  v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, _Q4.f64[0]), v116, _Q4, 1), v118, _D6);
  v129 = a1[5] == HIDWORD(v90) && a1[4] == (_DWORD)v90;
  v130 = 64;
  if (v129)
    v130 = 62;
  v131 = vaddq_f64(v120, v128);
  v132 = *(_DWORD *)(*(_QWORD *)&a1[v130] + 632);
  v133 = *(_QWORD *)(*(_QWORD *)(*v13 + 8 * *a1) + 8) + 1664 * a1[1];
  v95.f64[0] = *(float64_t *)(v133 + 16);
  _Q4.f64[0] = *(float64_t *)(v133 + 40);
  v134 = *(float64x2_t *)(v133 + 24);
  _D2 = *(double *)(v133 + 64);
  v136 = *(float64x2_t *)(v133 + 48);
  v137 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v133, (int64x2_t)v134);
  v138 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v133, (int64x2_t)v134);
  v139 = (float64x2_t)vzip1q_s64((int64x2_t)v95, (int64x2_t)_Q4);
  _Q24 = vextq_s8((int8x16_t)v138, (int8x16_t)vdupq_laneq_s64((int64x2_t)v136, 1), 8uLL);
  _D25 = *(double *)(v133 + 88);
  _Q26 = *(float64x2_t *)(v133 + 72);
  v143 = vmlsq_laneq_f64(vmulq_n_f64(v137, vnegq_f64(_Q26).f64[0]), v138, _Q26, 1);
  _D9 = *(_QWORD *)(v133 + 56);
  v145 = *(_QWORD *)(v133 + 48);
  __asm { FMLS            D30, D9, V26.D[1] }
  *(_QWORD *)&v138.f64[1] = _Q24.i64[0];
  __asm { FMLS            D30, D2, V25.D[0] }
  _Q30.f64[1] = 1.0;
  _Q31 = vmlsq_lane_f64(v143, v139, _D25, 0);
  v149 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v137, (int64x2_t)v138), vnegq_f64(_Q31).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v137, (int64x2_t)v138), _Q31, 1), v136, _Q30.f64[0], 0);
  __asm
  {
    FMLS            D24, D4, V31.D[1]
    FMLS            D24, D2, V30.D[0]
  }
  v150 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v121.f64[0]), v138, v121, 1), v139, v122.f64[0]), _Q31, v122, 1);
  v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v145, v121.f64[0]), (float64x2_t)_Q24.u64[1], v121, 1), (float64x2_t)*(unint64_t *)&_D2, v122.f64[0]), _Q30, v122, 1);
  v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v123.f64[0]), v138, v123, 1), v139, v124.f64[0]), _Q31, v124, 1);
  v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v145, v123.f64[0]), (float64x2_t)_Q24.u64[1], v123, 1), (float64x2_t)*(unint64_t *)&_D2, v124.f64[0]), _Q30, v124, 1);
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v125.f64[0]), v138, v125, 1), v139, v126.f64[0]), _Q31, v126, 1);
  v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v145, v125.f64[0]), (float64x2_t)_Q24.u64[1], v125, 1), (float64x2_t)*(unint64_t *)&_D2, v126.f64[0]), _Q30, v126, 1);
  v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v137, v127.f64[0]), v138, v127, 1), v139, v131.f64[0]), _Q31, v131, 1);
  v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v145, v127.f64[0]), (float64x2_t)_Q24.u64[1], v127, 1), (float64x2_t)*(unint64_t *)&_D2, v131.f64[0]), _Q30, v131, 1);
  v158 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v150, *(double *)v133), v152, *(float64x2_t *)v133, 1), v154, v95.f64[0]), (float64x2_t)0, v156);
  v159 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, *(double *)v133), v153, *(float64x2_t *)v133, 1), v155, v95.f64[0]), (float64x2_t)0, v157);
  v160 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v150, v134.f64[0]), v152, v134, 1), v154, _Q4.f64[0]), (float64x2_t)0, v156);
  v161 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v134.f64[0]), v153, v134, 1), v155, _Q4.f64[0]), (float64x2_t)0, v157);
  v162 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v150, v136.f64[0]), v152, v136, 1), v154, _D2), (float64x2_t)0, v156);
  v163 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v136.f64[0]), v153, v136, 1), v155, _D2), (float64x2_t)0, v157);
  v164 = (int64x2_t)vaddq_f64(v156, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v150, v149.f64[0]), v152, v149, 1), v154, *(double *)_Q24.i64));
  v165 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, v149.f64[0]), v153, v149, 1), v155, *(double *)_Q24.i64);
  v166 = vzip2q_s64(v162, v164);
  v162.i64[1] = v164.i64[0];
  *a6 = vzip1q_s64(v158, v160);
  a6[1] = v162;
  a6[2] = vzip2q_s64(v158, v160);
  a6[3] = v166;
  a6[4] = vzip1q_s64(v159, v161);
  a6[5] = vzip1q_s64(v163, (int64x2_t)vaddq_f64(v157, v165));
  a6[6].i32[0] = v132;
  v167 = 1;
LABEL_189:
  a6[6].i8[8] = v167;
  return result;
}

void sub_20F0DA340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;

  sub_20E96E218((uint64_t)&a49);
  if (!v49)
    _Unwind_Resume(a1);
  free(v49);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F0DA3F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x38uLL);
  v9 = xmmword_2102DCA50;
  strcpy((char *)__p, "P3PIncrementalPoseAndOutlierRejection parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 200));
  sub_20E8B2F9C((uint64_t *)&__p, "P3PIncrementalPoseAndOutlierRejectionConfig.use_multi_stereo_pnp", v4, "A flag indicating whether to use multi-stereo PnP outlier rejection/pose estimation.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 204));
  sub_20E8B2F9C((uint64_t *)&__p, "P3PIncrementalPoseAndOutlierRejectionConfig.max_num_main_camera_pnp_inliers_to_run_extended_stereo", v5, "Maximum number of 2d3d pnp inliers on main camera below which we should fallback to extended stereo pairs.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 208));
  return sub_20E8B2F9C((uint64_t *)&__p, "P3PIncrementalPoseAndOutlierRejectionConfig.min_num_inlier_to_use_extended_stereo_pnp", v6, "Minimum number of 2d3d pnp inliers to use the pose from extended stereo pairs.");
}

void sub_20F0DA508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0DA54C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, double a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  __int128 v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int128 *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  _BYTE *v137;
  _BYTE *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 *v148;
  uint64_t v149;
  __int128 v150;
  int v151;
  _BYTE *v152;
  _BYTE *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  __int128 *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  int64x2_t v198;

  v9 = sub_20F0D1A84(a1, a2, a3, a5);
  *(_OWORD *)(v9 + 512) = xmmword_210378C50;
  *(_QWORD *)(v9 + 528) = 50;
  *(_QWORD *)(v9 + 536) = 0x3F747AE147AE147BLL;
  *(_QWORD *)(v9 + 544) = 0;
  *(_QWORD *)(v9 + 560) = 0;
  *(_QWORD *)(v9 + 552) = 0;
  v10 = operator new(8uLL);
  *(_QWORD *)(a1 + 544) = v10;
  *v10 = 20;
  *(_QWORD *)(a1 + 560) = v10 + 1;
  *(_QWORD *)(a1 + 552) = v10 + 1;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 576) = xmmword_210378560;
  *(_OWORD *)(a1 + 592) = xmmword_210378570;
  v198 = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(int64x2_t *)(a1 + 608) = v198;
  *(_QWORD *)(a1 + 624) = 0x3F1A36E2EB1C432DLL;
  *(_DWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1056) = a4;
  v11 = *(_QWORD *)(a2 + 12);
  v12 = *(unsigned int *)(a2 + 20);
  v13 = *(unsigned int *)(a2 + 8);
  v14 = *(_BYTE *)(a2 + 24);
  v15 = operator new(8uLL);
  *(_QWORD *)&v16 = v11;
  *((_QWORD *)&v16 + 1) = HIDWORD(v11);
  *v15 = v13;
  *(_OWORD *)(a1 + 512) = v16;
  *(_QWORD *)(a1 + 528) = v12;
  *(double *)(a1 + 536) = a5 * 0.5;
  *(_QWORD *)(a1 + 552) = v10;
  operator delete(v10);
  *(_QWORD *)(a1 + 544) = v15;
  *(_QWORD *)(a1 + 552) = v15 + 1;
  *(_QWORD *)(a1 + 560) = v15 + 1;
  *(_BYTE *)(a1 + 568) = v14;
  *(_OWORD *)(a1 + 576) = xmmword_210378560;
  *(_OWORD *)(a1 + 592) = xmmword_210378570;
  *(int64x2_t *)(a1 + 608) = v198;
  *(_QWORD *)(a1 + 624) = 0x3F1A36E2EB1C432DLL;
  v17 = *(_BYTE **)(a1 + 736);
  if (*(_QWORD *)(a1 + 752) - (_QWORD)v17 > 0xC7FuLL)
    goto LABEL_12;
  v18 = *(_BYTE **)(a1 + 744);
  v19 = (char *)operator new(0xC80uLL);
  v20 = v18 - v17;
  v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
  v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 8) < 0x58)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v31 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v22 - 1) = v31;
        v22 -= 8;
      }
      while (v18 != v17);
      goto LABEL_10;
    }
    v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
    if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_9;
    v23 = v20 >> 3;
    v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v18[-v25];
    v22 = &v21[-v25];
    v27 = &v19[8 * v23 - 16];
    v28 = (__int128 *)(v18 - 16);
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 4;
    }
    while (v29);
    v18 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)(a1 + 736) = v22;
  *(_QWORD *)(a1 + 744) = v21;
  *(_QWORD *)(a1 + 752) = v19 + 3200;
  if (v17)
    operator delete(v17);
LABEL_12:
  v32 = *(_BYTE **)(a1 + 784);
  if (*(_QWORD *)(a1 + 800) - (_QWORD)v32 > 0xC7FuLL)
    goto LABEL_23;
  v33 = *(_BYTE **)(a1 + 792);
  v34 = (char *)operator new(0xC80uLL);
  v35 = v33 - v32;
  v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
  v37 = v36;
  if (v33 != v32)
  {
    if ((unint64_t)(v35 - 8) < 0x58)
    {
      v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_20:
        v46 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v37 - 1) = v46;
        v37 -= 8;
      }
      while (v33 != v32);
      goto LABEL_21;
    }
    v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
    if (v33 - v34 - (v35 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_20;
    v38 = v35 >> 3;
    v39 = ((unint64_t)(v35 - 8) >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v41 = &v33[-v40];
    v37 = &v36[-v40];
    v42 = &v34[8 * v38 - 16];
    v43 = (__int128 *)(v33 - 16);
    v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    v33 = v41;
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)(a1 + 784) = v37;
  *(_QWORD *)(a1 + 792) = v36;
  *(_QWORD *)(a1 + 800) = v34 + 3200;
  if (v32)
    operator delete(v32);
LABEL_23:
  v47 = *(_BYTE **)(a1 + 760);
  if (*(_QWORD *)(a1 + 776) - (_QWORD)v47 > 0xC7FuLL)
    goto LABEL_34;
  v48 = *(_BYTE **)(a1 + 768);
  v49 = (char *)operator new(0xC80uLL);
  v50 = v48 - v47;
  v51 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
  v52 = v51;
  if (v48 != v47)
  {
    if ((unint64_t)(v50 - 8) < 0x58)
    {
      v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_31:
        v61 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *((_QWORD *)v52 - 1) = v61;
        v52 -= 8;
      }
      while (v48 != v47);
      goto LABEL_32;
    }
    v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
    if (v48 - v49 - (v50 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_31;
    v53 = v50 >> 3;
    v54 = ((unint64_t)(v50 - 8) >> 3) + 1;
    v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
    v56 = &v48[-v55];
    v52 = &v51[-v55];
    v57 = &v49[8 * v53 - 16];
    v58 = (__int128 *)(v48 - 16);
    v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *v58;
      *((_OWORD *)v57 - 1) = *(v58 - 1);
      *(_OWORD *)v57 = v60;
      v57 -= 32;
      v58 -= 2;
      v59 -= 4;
    }
    while (v59);
    v48 = v56;
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_31;
  }
LABEL_32:
  *(_QWORD *)(a1 + 760) = v52;
  *(_QWORD *)(a1 + 768) = v51;
  *(_QWORD *)(a1 + 776) = v49 + 3200;
  if (v47)
    operator delete(v47);
LABEL_34:
  v62 = *(_BYTE **)(a1 + 952);
  if (*(_QWORD *)(a1 + 968) - (_QWORD)v62 > 0xC7FuLL)
    goto LABEL_45;
  v63 = *(_BYTE **)(a1 + 960);
  v64 = (char *)operator new(0xC80uLL);
  v65 = v63 - v62;
  v66 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFF8];
  v67 = v66;
  if (v63 != v62)
  {
    if ((unint64_t)(v65 - 8) < 0x58)
    {
      v67 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_42:
        v76 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v67 - 1) = v76;
        v67 -= 8;
      }
      while (v63 != v62);
      goto LABEL_43;
    }
    v67 = &v64[(v63 - v62) & 0xFFFFFFFFFFFFFFF8];
    if (v63 - v64 - (v65 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_42;
    v68 = v65 >> 3;
    v69 = ((unint64_t)(v65 - 8) >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v71 = &v63[-v70];
    v67 = &v66[-v70];
    v72 = &v64[8 * v68 - 16];
    v73 = (__int128 *)(v63 - 16);
    v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v75 = *v73;
      *((_OWORD *)v72 - 1) = *(v73 - 1);
      *(_OWORD *)v72 = v75;
      v72 -= 32;
      v73 -= 2;
      v74 -= 4;
    }
    while (v74);
    v63 = v71;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_42;
  }
LABEL_43:
  *(_QWORD *)(a1 + 952) = v67;
  *(_QWORD *)(a1 + 960) = v66;
  *(_QWORD *)(a1 + 968) = v64 + 3200;
  if (v62)
    operator delete(v62);
LABEL_45:
  v77 = *(_BYTE **)(a1 + 808);
  if (*(_QWORD *)(a1 + 824) - (_QWORD)v77 > 0xC7FuLL)
    goto LABEL_56;
  v78 = *(_BYTE **)(a1 + 816);
  v79 = (char *)operator new(0xC80uLL);
  v80 = v78 - v77;
  v81 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFF8];
  v82 = v81;
  if (v78 != v77)
  {
    if ((unint64_t)(v80 - 8) < 0x58)
    {
      v82 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_53:
        v91 = *((_QWORD *)v78 - 1);
        v78 -= 8;
        *((_QWORD *)v82 - 1) = v91;
        v82 -= 8;
      }
      while (v78 != v77);
      goto LABEL_54;
    }
    v82 = &v79[(v78 - v77) & 0xFFFFFFFFFFFFFFF8];
    if (v78 - v79 - (v80 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_53;
    v83 = v80 >> 3;
    v84 = ((unint64_t)(v80 - 8) >> 3) + 1;
    v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
    v86 = &v78[-v85];
    v82 = &v81[-v85];
    v87 = &v79[8 * v83 - 16];
    v88 = (__int128 *)(v78 - 16);
    v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v90 = *v88;
      *((_OWORD *)v87 - 1) = *(v88 - 1);
      *(_OWORD *)v87 = v90;
      v87 -= 32;
      v88 -= 2;
      v89 -= 4;
    }
    while (v89);
    v78 = v86;
    if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_53;
  }
LABEL_54:
  *(_QWORD *)(a1 + 808) = v82;
  *(_QWORD *)(a1 + 816) = v81;
  *(_QWORD *)(a1 + 824) = v79 + 3200;
  if (v77)
    operator delete(v77);
LABEL_56:
  v92 = *(_BYTE **)(a1 + 856);
  if (*(_QWORD *)(a1 + 872) - (_QWORD)v92 > 0xC7FuLL)
    goto LABEL_67;
  v93 = *(_BYTE **)(a1 + 864);
  v94 = (char *)operator new(0xC80uLL);
  v95 = v93 - v92;
  v96 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFF8];
  v97 = v96;
  if (v93 != v92)
  {
    if ((unint64_t)(v95 - 8) < 0x58)
    {
      v97 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_64:
        v106 = *((_QWORD *)v93 - 1);
        v93 -= 8;
        *((_QWORD *)v97 - 1) = v106;
        v97 -= 8;
      }
      while (v93 != v92);
      goto LABEL_65;
    }
    v97 = &v94[(v93 - v92) & 0xFFFFFFFFFFFFFFF8];
    if (v93 - v94 - (v95 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_64;
    v98 = v95 >> 3;
    v99 = ((unint64_t)(v95 - 8) >> 3) + 1;
    v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
    v101 = &v93[-v100];
    v97 = &v96[-v100];
    v102 = &v94[8 * v98 - 16];
    v103 = (__int128 *)(v93 - 16);
    v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v105 = *v103;
      *((_OWORD *)v102 - 1) = *(v103 - 1);
      *(_OWORD *)v102 = v105;
      v102 -= 32;
      v103 -= 2;
      v104 -= 4;
    }
    while (v104);
    v93 = v101;
    if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_64;
  }
LABEL_65:
  *(_QWORD *)(a1 + 856) = v97;
  *(_QWORD *)(a1 + 864) = v96;
  *(_QWORD *)(a1 + 872) = v94 + 3200;
  if (v92)
    operator delete(v92);
LABEL_67:
  v107 = *(_BYTE **)(a1 + 832);
  if (*(_QWORD *)(a1 + 848) - (_QWORD)v107 > 0xC7FuLL)
    goto LABEL_78;
  v108 = *(_BYTE **)(a1 + 840);
  v109 = (char *)operator new(0xC80uLL);
  v110 = v108 - v107;
  v111 = &v109[(v108 - v107) & 0xFFFFFFFFFFFFFFF8];
  v112 = v111;
  if (v108 != v107)
  {
    if ((unint64_t)(v110 - 8) < 0x58)
    {
      v112 = &v109[(v108 - v107) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_75:
        v121 = *((_QWORD *)v108 - 1);
        v108 -= 8;
        *((_QWORD *)v112 - 1) = v121;
        v112 -= 8;
      }
      while (v108 != v107);
      goto LABEL_76;
    }
    v112 = &v109[(v108 - v107) & 0xFFFFFFFFFFFFFFF8];
    if (v108 - v109 - (v110 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_75;
    v113 = v110 >> 3;
    v114 = ((unint64_t)(v110 - 8) >> 3) + 1;
    v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
    v116 = &v108[-v115];
    v112 = &v111[-v115];
    v117 = &v109[8 * v113 - 16];
    v118 = (__int128 *)(v108 - 16);
    v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v120 = *v118;
      *((_OWORD *)v117 - 1) = *(v118 - 1);
      *(_OWORD *)v117 = v120;
      v117 -= 32;
      v118 -= 2;
      v119 -= 4;
    }
    while (v119);
    v108 = v116;
    if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_75;
  }
LABEL_76:
  *(_QWORD *)(a1 + 832) = v112;
  *(_QWORD *)(a1 + 840) = v111;
  *(_QWORD *)(a1 + 848) = v109 + 3200;
  if (v107)
    operator delete(v107);
LABEL_78:
  v122 = *(_BYTE **)(a1 + 976);
  if (*(_QWORD *)(a1 + 992) - (_QWORD)v122 > 0x63FuLL)
    goto LABEL_89;
  v123 = *(_BYTE **)(a1 + 984);
  v124 = (char *)operator new(0x640uLL);
  v125 = v123 - v122;
  v126 = &v124[(v123 - v122) & 0xFFFFFFFFFFFFFFFCLL];
  v127 = v126;
  if (v123 != v122)
  {
    if ((unint64_t)(v125 - 4) < 0x2C)
    {
      v127 = &v124[(v123 - v122) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_86:
        v136 = *((_DWORD *)v123 - 1);
        v123 -= 4;
        *((_DWORD *)v127 - 1) = v136;
        v127 -= 4;
      }
      while (v123 != v122);
      goto LABEL_87;
    }
    v127 = &v124[(v123 - v122) & 0xFFFFFFFFFFFFFFFCLL];
    if (v123 - v124 - (v125 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_86;
    v128 = v125 >> 2;
    v129 = ((unint64_t)(v125 - 4) >> 2) + 1;
    v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    v131 = &v123[-v130];
    v127 = &v126[-v130];
    v132 = &v124[4 * v128 - 16];
    v133 = (__int128 *)(v123 - 16);
    v134 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v135 = *v133;
      *((_OWORD *)v132 - 1) = *(v133 - 1);
      *(_OWORD *)v132 = v135;
      v132 -= 32;
      v133 -= 2;
      v134 -= 8;
    }
    while (v134);
    v123 = v131;
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_86;
  }
LABEL_87:
  *(_QWORD *)(a1 + 976) = v127;
  *(_QWORD *)(a1 + 984) = v126;
  *(_QWORD *)(a1 + 992) = v124 + 1600;
  if (v122)
    operator delete(v122);
LABEL_89:
  v137 = *(_BYTE **)(a1 + 1000);
  if (*(_QWORD *)(a1 + 1016) - (_QWORD)v137 > 0x63FuLL)
    goto LABEL_100;
  v138 = *(_BYTE **)(a1 + 1008);
  v139 = (char *)operator new(0x640uLL);
  v140 = v138 - v137;
  v141 = &v139[(v138 - v137) & 0xFFFFFFFFFFFFFFFCLL];
  v142 = v141;
  if (v138 != v137)
  {
    if ((unint64_t)(v140 - 4) < 0x2C)
    {
      v142 = &v139[(v138 - v137) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_97:
        v151 = *((_DWORD *)v138 - 1);
        v138 -= 4;
        *((_DWORD *)v142 - 1) = v151;
        v142 -= 4;
      }
      while (v138 != v137);
      goto LABEL_98;
    }
    v142 = &v139[(v138 - v137) & 0xFFFFFFFFFFFFFFFCLL];
    if (v138 - v139 - (v140 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_97;
    v143 = v140 >> 2;
    v144 = ((unint64_t)(v140 - 4) >> 2) + 1;
    v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
    v146 = &v138[-v145];
    v142 = &v141[-v145];
    v147 = &v139[4 * v143 - 16];
    v148 = (__int128 *)(v138 - 16);
    v149 = v144 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v150 = *v148;
      *((_OWORD *)v147 - 1) = *(v148 - 1);
      *(_OWORD *)v147 = v150;
      v147 -= 32;
      v148 -= 2;
      v149 -= 8;
    }
    while (v149);
    v138 = v146;
    if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_97;
  }
LABEL_98:
  *(_QWORD *)(a1 + 1000) = v142;
  *(_QWORD *)(a1 + 1008) = v141;
  *(_QWORD *)(a1 + 1016) = v139 + 1600;
  if (v137)
    operator delete(v137);
LABEL_100:
  v152 = *(_BYTE **)(a1 + 880);
  if ((*(_QWORD *)(a1 + 896) - (_QWORD)v152) >> 6 > 0x4AuLL)
    goto LABEL_111;
  v153 = *(_BYTE **)(a1 + 888);
  v154 = (char *)operator new(0x12C0uLL);
  v155 = v153 - v152;
  v156 = &v154[(v153 - v152) & 0xFFFFFFFFFFFFFFF8];
  v157 = v156;
  if (v153 != v152)
  {
    if ((unint64_t)(v155 - 8) < 0x58)
    {
      v157 = &v154[(v153 - v152) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_108:
        v166 = *((_QWORD *)v153 - 1);
        v153 -= 8;
        *((_QWORD *)v157 - 1) = v166;
        v157 -= 8;
      }
      while (v153 != v152);
      goto LABEL_109;
    }
    v157 = &v154[(v153 - v152) & 0xFFFFFFFFFFFFFFF8];
    if (v153 - v154 - (v155 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_108;
    v158 = v155 >> 3;
    v159 = ((unint64_t)(v155 - 8) >> 3) + 1;
    v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
    v161 = &v153[-v160];
    v157 = &v156[-v160];
    v162 = &v154[8 * v158 - 16];
    v163 = (__int128 *)(v153 - 16);
    v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v165 = *v163;
      *((_OWORD *)v162 - 1) = *(v163 - 1);
      *(_OWORD *)v162 = v165;
      v162 -= 32;
      v163 -= 2;
      v164 -= 4;
    }
    while (v164);
    v153 = v161;
    if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_108;
  }
LABEL_109:
  *(_QWORD *)(a1 + 880) = v157;
  *(_QWORD *)(a1 + 888) = v156;
  *(_QWORD *)(a1 + 896) = v154 + 4800;
  if (v152)
    operator delete(v152);
LABEL_111:
  v167 = *(_BYTE **)(a1 + 904);
  if ((*(_QWORD *)(a1 + 920) - (_QWORD)v167) >> 6 > 0x4AuLL)
    goto LABEL_122;
  v168 = *(_BYTE **)(a1 + 912);
  v169 = (char *)operator new(0x12C0uLL);
  v170 = v168 - v167;
  v171 = &v169[(v168 - v167) & 0xFFFFFFFFFFFFFFF8];
  v172 = v171;
  if (v168 != v167)
  {
    if ((unint64_t)(v170 - 8) < 0x58)
    {
      v172 = &v169[(v168 - v167) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_119:
        v181 = *((_QWORD *)v168 - 1);
        v168 -= 8;
        *((_QWORD *)v172 - 1) = v181;
        v172 -= 8;
      }
      while (v168 != v167);
      goto LABEL_120;
    }
    v172 = &v169[(v168 - v167) & 0xFFFFFFFFFFFFFFF8];
    if (v168 - v169 - (v170 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_119;
    v173 = v170 >> 3;
    v174 = ((unint64_t)(v170 - 8) >> 3) + 1;
    v175 = 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
    v176 = &v168[-v175];
    v172 = &v171[-v175];
    v177 = &v169[8 * v173 - 16];
    v178 = (__int128 *)(v168 - 16);
    v179 = v174 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v180 = *v178;
      *((_OWORD *)v177 - 1) = *(v178 - 1);
      *(_OWORD *)v177 = v180;
      v177 -= 32;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v168 = v176;
    if (v174 != (v174 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_119;
  }
LABEL_120:
  *(_QWORD *)(a1 + 904) = v172;
  *(_QWORD *)(a1 + 912) = v171;
  *(_QWORD *)(a1 + 920) = v169 + 4800;
  if (v167)
    operator delete(v167);
LABEL_122:
  v182 = *(_BYTE **)(a1 + 1032);
  if ((*(_QWORD *)(a1 + 1048) - (_QWORD)v182) >> 6 > 0x4AuLL)
    return a1;
  v183 = *(_BYTE **)(a1 + 1040);
  v184 = (char *)operator new(0x12C0uLL);
  v185 = v183 - v182;
  v186 = &v184[(v183 - v182) & 0xFFFFFFFFFFFFFFF8];
  v187 = v186;
  if (v183 != v182)
  {
    if ((unint64_t)(v185 - 8) < 0x58)
    {
      v187 = &v184[(v183 - v182) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_130:
        v196 = *((_QWORD *)v183 - 1);
        v183 -= 8;
        *((_QWORD *)v187 - 1) = v196;
        v187 -= 8;
      }
      while (v183 != v182);
      goto LABEL_131;
    }
    v187 = &v184[(v183 - v182) & 0xFFFFFFFFFFFFFFF8];
    if (v183 - v184 - (v185 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_130;
    v188 = v185 >> 3;
    v189 = ((unint64_t)(v185 - 8) >> 3) + 1;
    v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
    v191 = &v183[-v190];
    v187 = &v186[-v190];
    v192 = &v184[8 * v188 - 16];
    v193 = (__int128 *)(v183 - 16);
    v194 = v189 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v195 = *v193;
      *((_OWORD *)v192 - 1) = *(v193 - 1);
      *(_OWORD *)v192 = v195;
      v192 -= 32;
      v193 -= 2;
      v194 -= 4;
    }
    while (v194);
    v183 = v191;
    if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_130;
  }
LABEL_131:
  *(_QWORD *)(a1 + 1032) = v187;
  *(_QWORD *)(a1 + 1040) = v186;
  *(_QWORD *)(a1 + 1048) = v184 + 4800;
  if (v182)
    operator delete(v182);
  return a1;
}

void sub_20F0DB16C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  void *v21;

  v3 = (void *)v1[125];
  if (v3)
  {
    v1[126] = v3;
    operator delete(v3);
    v4 = (void *)v1[122];
    if (!v4)
    {
LABEL_3:
      v5 = (void *)v1[119];
      if (!v5)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else
  {
    v4 = (void *)v1[122];
    if (!v4)
      goto LABEL_3;
  }
  v1[123] = v4;
  operator delete(v4);
  v5 = (void *)v1[119];
  if (!v5)
  {
LABEL_4:
    v6 = (void *)v1[116];
    if (!v6)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  v1[120] = v5;
  operator delete(v5);
  v6 = (void *)v1[116];
  if (!v6)
  {
LABEL_5:
    v7 = (void *)v1[113];
    if (!v7)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  v1[117] = v6;
  operator delete(v6);
  v7 = (void *)v1[113];
  if (!v7)
  {
LABEL_6:
    v8 = (void *)v1[110];
    if (!v8)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  v1[114] = v7;
  operator delete(v7);
  v8 = (void *)v1[110];
  if (!v8)
  {
LABEL_7:
    v9 = (void *)v1[107];
    if (!v9)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  v1[111] = v8;
  operator delete(v8);
  v9 = (void *)v1[107];
  if (!v9)
  {
LABEL_8:
    v10 = (void *)v1[104];
    if (!v10)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v1[108] = v9;
  operator delete(v9);
  v10 = (void *)v1[104];
  if (!v10)
  {
LABEL_9:
    v11 = (void *)v1[101];
    if (!v11)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v1[105] = v10;
  operator delete(v10);
  v11 = (void *)v1[101];
  if (!v11)
  {
LABEL_10:
    v12 = (void *)v1[98];
    if (!v12)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v1[102] = v11;
  operator delete(v11);
  v12 = (void *)v1[98];
  if (!v12)
  {
LABEL_11:
    v13 = (void *)v1[95];
    if (!v13)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v1[99] = v12;
  operator delete(v12);
  v13 = (void *)v1[95];
  if (!v13)
  {
LABEL_12:
    v14 = (void *)v1[92];
    if (!v14)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v1[96] = v13;
  operator delete(v13);
  v14 = (void *)v1[92];
  if (!v14)
  {
LABEL_13:
    v15 = (void *)v1[89];
    if (!v15)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v1[93] = v14;
  operator delete(v14);
  v15 = (void *)v1[89];
  if (!v15)
  {
LABEL_14:
    v16 = (void *)v1[86];
    if (!v16)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v1[90] = v15;
  operator delete(v15);
  v16 = (void *)v1[86];
  if (!v16)
  {
LABEL_15:
    v17 = (void **)(v1 + 80);
    v18 = (void *)v1[83];
    if (!v18)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v1[87] = v16;
  operator delete(v16);
  v17 = (void **)(v1 + 80);
  v18 = (void *)v1[83];
  if (!v18)
  {
LABEL_16:
    v19 = (void **)(v1 + 68);
    v20 = *v17;
    if (!*v17)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v1[84] = v18;
  operator delete(v18);
  v19 = (void **)(v1 + 68);
  v20 = *v17;
  if (!*v17)
  {
LABEL_17:
    v21 = *v19;
    if (!*v19)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v1[81] = v20;
  operator delete(v20);
  v21 = *v19;
  if (!*v19)
  {
LABEL_18:
    sub_20ED29320((uint64_t)(v1 + 21));
    sub_20ED29320((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_35:
  v1[69] = v21;
  operator delete(v21);
  sub_20ED29320((uint64_t)(v1 + 21));
  sub_20ED29320((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20F0DB384(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A620A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A620A0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62098);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A620A0);
  }
  *a1 = qword_254A62098;
}

void sub_20F0DB420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A620A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A620A0);
  _Unwind_Resume(a1);
}

void sub_20F0DB478(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  unint64_t v20;
  void *v21;
  char *v22;
  double v23;
  int64x2_t v24;
  int64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  float64x2_t v35;
  unint64_t v36;
  int8x16_t v38;
  int8x16_t v39;
  float64x2_t v40;
  int8x16_t v41;
  uint64_t v47;
  float64x2_t v48;
  float64_t *v49;
  float64x2_t v52;
  uint64_t v54;
  float64x2_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int64_t v64;
  int64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _QWORD *v73;
  int64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  float64x2_t *v84;
  float64x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  const char *v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  unint64_t v111;
  const char *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  NSObject *v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *j;
  void *v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t *v196;
  unsigned int v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  size_t v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  const char *v206;
  size_t v207;
  unsigned __int8 v208;
  unsigned __int8 v209;
  const char *v210;
  size_t v211;
  _BYTE *v212;
  unint64_t v213;
  const char *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  size_t v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  __uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  void *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  void *v263;
  unsigned __int8 v264;
  _QWORD *v265;
  int v266;
  std::chrono::steady_clock::time_point v267;
  std::chrono::steady_clock::time_point *v268;
  uint64_t *v269;
  unsigned __int8 v270;
  char *v272;
  size_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t i;
  uint64_t v277;
  uint64_t v278;
  unsigned __int8 v279;
  const char *v280;
  size_t v281;
  _BYTE *v282;
  _QWORD *v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  uint64_t v288;
  uint64_t v289;
  NSObject *v290;
  unint64_t v291;
  unsigned int v292;
  double v293;
  double v294;
  unint64_t v295;
  double v296;
  size_t v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  __uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  void *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 v339;
  double v340;
  _QWORD *v341;
  int v342;
  std::chrono::steady_clock::time_point v343;
  uint64_t *v344;
  std::chrono::steady_clock::time_point *v345;
  uint64_t *v346;
  unsigned __int8 v347;
  unint64_t v348;
  __int16 *v349;
  _QWORD *v350;
  char *v351;
  size_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  _QWORD *v362;
  _QWORD *v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  size_t v369;
  const char *v370;
  _QWORD *v371;
  double v372;
  double v373;
  double v374;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  double v381;
  float64x2_t v382;
  float64x2_t v383;
  double v385;
  double v386;
  double v388;
  float64x2_t v390;
  double v393;
  float64x2_t v394;
  float64x2_t v396;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  double v407;
  double v408;
  double v409;
  double v413;
  double v417;
  _BOOL4 v418;
  int v419;
  uint64_t v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  const char *v425;
  size_t v426;
  int v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  size_t v432;
  const char *v433;
  unsigned __int8 v434;
  const char *v435;
  size_t v436;
  _BYTE *v437;
  unint64_t v438;
  const char *v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  NSObject *v447;
  size_t v448;
  std::__shared_weak_count_vtbl *v449;
  std::__shared_weak_count *v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  __int128 v460;
  __uint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  void *v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  void *v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  unsigned __int8 v486;
  const char *v487;
  size_t v488;
  _BYTE *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  double v496;
  uint64_t v497;
  uint64_t v498;
  NSObject *v499;
  unint64_t v500;
  size_t v501;
  std::__shared_weak_count_vtbl *v502;
  std::__shared_weak_count *v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  float64x2_t v514;
  void *v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  void *v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  void *v535;
  unint64_t *v536;
  unsigned __int8 v537;
  const char *v538;
  size_t v539;
  _BYTE *v540;
  uint64_t v541;
  uint64_t v542;
  _BYTE *v543;
  uint64_t v544;
  uint64_t v545;
  NSObject *v546;
  size_t v547;
  std::__shared_weak_count_vtbl *v548;
  std::__shared_weak_count *v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  const char *v558;
  uint64_t v559;
  __int128 v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  uint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  int v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  void *v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  uint64_t *v586;
  uint64_t v587;
  double v588;
  double v589;
  unsigned __int8 v590;
  uint64_t v591;
  double v592;
  unint64_t v593;
  double v594;
  char *v595;
  size_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t k;
  uint64_t v600;
  _OWORD *v601;
  void *v602;
  void *v603;
  void *v604;
  int v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  size_t v609;
  const char *v610;
  unsigned __int8 v611;
  const char *v612;
  size_t v613;
  _BYTE *v614;
  unint64_t v615;
  const char *v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  _BYTE *v621;
  uint64_t v622;
  uint64_t v623;
  NSObject *v624;
  size_t v625;
  std::__shared_weak_count_vtbl *v626;
  std::__shared_weak_count *v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  void *v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  _QWORD *v664;
  _QWORD *v665;
  double v666;
  double v667;
  uint64_t v668;
  int64x2_t v669;
  uint64_t v671;
  _QWORD *v672;
  _QWORD *v673;
  uint64_t v674;
  uint64_t v675;
  double v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t *v679;
  int v680;
  uint64_t v681;
  int64x2_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t *v688;
  uint64_t v689;
  unint64_t v690;
  float64_t v691;
  int v692;
  int64x2_t v693;
  uint64_t v694;
  _QWORD *v695;
  _QWORD *v696;
  const char *v697;
  uint64_t v698;
  float64x2_t v699;
  float64x2_t v700;
  void **v701;
  float64x2_t v702;
  uint64_t v703;
  int v704;
  float64x2_t v705;
  int64x2_t v706;
  int v707;
  unint64_t category;
  const char *categorya;
  int categoryb;
  char *categoryd[2];
  double categoryc;
  uint64_t v713;
  int v714[2];
  _QWORD *v715;
  double v716;
  _QWORD *v717;
  uint64_t v718;
  double v719;
  __uint64_t v720;
  uint64_t v721;
  float64x2_t v722;
  uint64_t v723;
  double v724;
  _QWORD *v725;
  const char *v726;
  double v727;
  uint64_t v728;
  void *__src[2];
  uint64_t __srca;
  _QWORD *__srcb;
  uint64_t __srcc;
  const char *__srcd;
  uint64_t __srce;
  __uint64_t v735[2];
  _BYTE v736[48];
  _BYTE v737[32];
  char v738;
  double v739;
  double v740;
  double v741;
  double v742;
  double v743;
  double v744;
  double v745;
  double v746;
  double v747;
  void *v748[2];
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  void *v754[2];
  uint64_t v755;
  void *__p;
  _BYTE *v757;
  uint64_t v758;
  void *v759;
  void *v760;
  void *v761;
  void *v762;
  uint64_t v763;
  __uint64_t v764[2];
  double v765;
  int v766;
  const char *v767;
  int v768;
  const char *v769;
  uint64_t v770;
  std::__shared_weak_count *v771;
  uint64_t v772;
  void *v773;
  __int128 v774;
  void *v775[2];
  uint64_t v776;
  void *v777[2];
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  _BYTE oslog[24];
  float64x2_t v782;
  void *v783;
  float64x2_t v784;
  double v785;
  _BYTE object[64];
  _BYTE v787[32];
  void *v788;
  char v789;
  void *v790;
  char v791;
  uint64_t v792;

  v792 = *MEMORY[0x24BDAC8D0];
  v13 = a7[4] - a7[3];
  if (v13 != a7[1] - *a7)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 153, (uint64_t)"x_ref_sec.size() == x_ref.size()", 32, (uint64_t)"Primary and secondary reference points must be of the same size", 63, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_870;
    }
    v13 = a7[1] - *a7;
  }
  if (a7[7] - a7[6] != v13
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 155, (uint64_t)"x_cur.size() == x_ref.size()", 28, (uint64_t)"Reference and current points must be of the same size", 53, (void (*)(void **))sub_21023DDB0))
  {
LABEL_870:
    abort();
  }
  a7[16] = a7[15];
  a7[13] = a7[12];
  a7[19] = 0;
  v14 = (_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a1 + 1000);
  *(_BYTE *)(a1 + 1024) = 0;
  v685 = (uint64_t *)(a1 + 784);
  v692 = sub_20F0D3E44(a7, (uint64_t *)(a1 + 736), (uint64_t *)(a1 + 760), (_QWORD *)(a1 + 784));
  v15.n128_u64[0] = *(_QWORD *)(a1 + 376);
  v679 = (uint64_t *)(a1 + 760);
  sub_2100EFF98((_QWORD *)(a1 + 736), (uint64_t *)(a1 + 760), a2, a3, a4, 1, (uint64_t)v754, *(float64_t *)(a1 + 368), v15, *(float64_t *)(a1 + 384), *(double *)(a1 + 400), *(double *)(a1 + 408));
  v688 = a7;
  v713 = a1;
  if (*(_BYTE *)(a1 + 416) && (v16 = *(_QWORD *)(a1 + 1056)) != 0)
  {
    v672 = (_QWORD *)(a1 + 736);
    v17 = v757;
    v18 = __p;
    v19 = v757 - (_BYTE *)__p;
    v20 = (v757 - (_BYTE *)__p) >> 3;
    if (3 * v20 != ((char *)v754[1] - (char *)v754[0]) >> 3)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 522, (uint64_t)"triangulation_result.world_points.size() == triangulation_result.inlier_indices.size() * 3u", 91, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v17 = v757;
      v18 = __p;
      v16 = *(_QWORD *)(a1 + 1056);
      v19 = v757 - (_BYTE *)__p;
      v20 = (v757 - (_BYTE *)__p) >> 3;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, double, double))(*(_QWORD *)v16 + 24))(object, v16, a6, *(double *)(a1 + 424), *(double *)(a1 + 432));
    v21 = *(void **)object;
    if (*(_QWORD *)object == *(_QWORD *)&object[8])
    {
      v716 = 0.0;
      v23 = 0.0;
      v739 = 0.0;
      v740 = 0.0;
      v741 = 0.0;
      v14 = (_QWORD *)(a1 + 736);
      if (!*(_QWORD *)object)
        goto LABEL_93;
      goto LABEL_92;
    }
    v735[0] = 0;
    v735[1] = 0;
    *(_QWORD *)v736 = 0;
    if (v20)
    {
      sub_20E93D8FC((uint64_t)v735, 3 * v20);
      v748[1] = 0;
      v748[0] = 0;
      *(_QWORD *)&v749 = 0;
      if ((v19 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v22 = (char *)operator new(v19);
      v748[0] = v22;
      v748[1] = v22;
      *(_QWORD *)&v749 = &v22[8 * v20];
    }
    else
    {
      v22 = 0;
      v748[1] = 0;
      v748[0] = 0;
      *(_QWORD *)&v749 = 0;
    }
    v28.f64[0] = *(float64_t *)(a6 + 16);
    v24 = *(int64x2_t *)a6;
    v25 = *(int64x2_t *)(a6 + 32);
    _D16 = *(double *)(a6 + 80);
    v27 = *(float64x2_t *)(a6 + 64);
    v28.f64[1] = *(float64_t *)(a6 + 48);
    _D0 = *(double *)(a6 + 112);
    _Q1 = *(float64x2_t *)(a6 + 96);
    v741 = 0.0;
    v739 = 0.0;
    v740 = 0.0;
    if (v17 != v18)
    {
      v676 = 0.0;
      v716 = 0.0;
      v23 = 0.0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      category = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
      v35 = (float64x2_t)vzip1q_s64(v24, v25);
      v36 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
      _Q2 = (float64x2_t)vzip2q_s64(v24, v25);
      v38 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
      v39 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
      v40 = vnegq_f64(_Q1);
      v41 = (int8x16_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v35, v40.f64[0]), _Q2, _Q1, 1), v28, _D0, 0);
      _Q6 = vmulq_f64(v27, v40);
      _Q2.f64[0] = v27.f64[1];
      __asm
      {
        FMLS            D6, D2, V1.D[1]
        FMLS            D6, D16, V0.D[0]
      }
      v699 = (float64x2_t)vextq_s8(v39, v38, 8uLL);
      v700 = _Q6;
      if (v20 <= 1)
        v47 = 1;
      else
        v47 = v20;
      v694 = v47;
      *(_QWORD *)&v35.f64[1] = v36;
      v48 = (float64x2_t)vextq_s8(v41, v41, 8uLL);
      v41.i64[1] = *(_QWORD *)&v48.f64[0];
      v702 = (float64x2_t)v41;
      v705 = v35;
      v689 = a6;
      v724 = _D16;
      *(float64x2_t *)__src = v28;
      while (1)
      {
        v49 = (float64_t *)((char *)v754[0] + 24 * v34);
        v48.f64[0] = v49[2];
        _Q1 = *(float64x2_t *)v49;
        _D4 = category;
        v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v705, *v49), v699, *(float64x2_t *)v49, 1), v28, v48.f64[0]);
        __asm { FMLA            D3, D4, V1.D[1] }
        v48.f64[0] = _D3 + _D16 * v48.f64[0];
        *(float64x2_t *)oslog = vaddq_f64(v52, v702);
        *(_QWORD *)&oslog[16] = *(_OWORD *)&vaddq_f64(v48, v700);
        v54 = *(_QWORD *)(a1 + 1056);
        v55 = *(float64x2_t *)v49;
        v765 = v49[2];
        *(float64x2_t *)v764 = v55;
        if (!(*(unsigned int (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, __uint64_t *, uint64_t))(*(_QWORD *)v54 + 32))(v54, oslog, object, a6, v764, 1))
        {
          *(double *)v714 = v23;
          v61 = v32;
          v62 = (char *)v748[1];
          v63 = (char *)v748[0];
          v64 = (char *)v748[1] - (char *)v748[0];
          v65 = ((char *)v748[1] - (char *)v748[0]) >> 3;
          v66 = (_QWORD *)(v735[0] + 24 * v65);
          *v66 = *(_QWORD *)v49;
          v66[1] = *((_QWORD *)v49 + 1);
          v66[2] = *((_QWORD *)v49 + 2);
          v67 = __p;
          _D16 = v724;
          v28 = *(float64x2_t *)__src;
          if ((unint64_t)v62 < (unint64_t)v749)
          {
            *(_QWORD *)v62 = *((_QWORD *)__p + v34);
            v68 = v62 + 8;
            a6 = v689;
            v32 = v61;
            a1 = v713;
            v23 = *(double *)v714;
LABEL_70:
            v748[1] = v68;
            goto LABEL_25;
          }
          v69 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61)
            goto LABEL_869;
          v70 = v749 - (_QWORD)v63;
          if ((uint64_t)(v749 - (_QWORD)v63) >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            if (v71 >> 61)
            {
LABEL_867:
              v739 = *(double *)v714;
              v740 = v716;
              v741 = v676;
              sub_20E877A38();
            }
            v72 = operator new(8 * v71);
            _D16 = v724;
            v28 = *(float64x2_t *)__src;
            v73 = &v72[8 * v65];
            *v73 = v67[v34];
            v68 = v73 + 1;
            v74 = v62 - v63;
            if (v62 != v63)
            {
LABEL_48:
              v75 = v74 - 8;
              if (v75 < 0x58)
              {
                v32 = v61;
                v23 = *(double *)v714;
                goto LABEL_66;
              }
              v80 = v62 - v72 - v64;
              v32 = v61;
              v23 = *(double *)v714;
              if (v80 < 0x20)
                goto LABEL_936;
              v81 = (v75 >> 3) + 1;
              v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
              v83 = &v62[-v82];
              v73 = (_QWORD *)((char *)v73 - v82);
              v84 = (float64x2_t *)&v72[8 * v65 - 16];
              v85 = (float64x2_t *)(v62 - 16);
              v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v48 = *v85;
                v84[-1] = v85[-1];
                *v84 = v48;
                v84 -= 2;
                v85 -= 2;
                v86 -= 4;
              }
              while (v86);
              v62 = v83;
              if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_936:
                do
                {
LABEL_66:
                  v87 = *((_QWORD *)v62 - 1);
                  v62 -= 8;
                  *--v73 = v87;
                }
                while (v62 != v63);
              }
LABEL_67:
              v748[0] = v73;
              v748[1] = v68;
              *(_QWORD *)&v749 = &v72[8 * v71];
              if (v63)
              {
                operator delete(v63);
                _D16 = v724;
                v28 = *(float64x2_t *)__src;
              }
              a1 = v713;
              a6 = v689;
              goto LABEL_70;
            }
          }
          else
          {
            v72 = 0;
            v73 = (_QWORD *)(8 * v65);
            *(_QWORD *)(8 * v65) = *((_QWORD *)__p + v34);
            v68 = (void *)(8 * v65 + 8);
            v74 = v62 - v63;
            if (v62 != v63)
              goto LABEL_48;
          }
          v32 = v61;
          v23 = *(double *)v714;
          goto LABEL_67;
        }
        v56 = __p;
        _D16 = v724;
        v28 = *(float64x2_t *)__src;
        if ((unint64_t)v33 >= v32)
          break;
        *(_QWORD *)v33 = *((_QWORD *)__p + v34);
        v33 += 8;
        v716 = *(double *)&v33;
LABEL_25:
        if (++v34 == v694)
        {
          v739 = v23;
          v740 = v716;
          v741 = v676;
          v94 = v748[1];
          v22 = (char *)v748[0];
          goto LABEL_80;
        }
      }
      v57 = (v33 - v31) >> 3;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61)
      {
        *(double *)v714 = v23;
LABEL_869:
        v739 = *(double *)v714;
        v740 = v716;
        v741 = v676;
        sub_20E867F44();
      }
      if ((uint64_t)(v32 - (_QWORD)v31) >> 2 > v58)
        v58 = (uint64_t)(v32 - (_QWORD)v31) >> 2;
      if (v32 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      if (v59)
      {
        *(double *)v714 = v23;
        if (v59 >> 61)
          goto LABEL_867;
        v60 = operator new(8 * v59);
        a6 = v689;
        _D16 = v724;
        v28 = *(float64x2_t *)__src;
      }
      else
      {
        v60 = 0;
      }
      *(_QWORD *)&v23 = &v60[8 * v57];
      **(_QWORD **)&v23 = v56[v34];
      *(_QWORD *)&v716 = *(_QWORD *)&v23 + 8;
      if (v33 == v31)
      {
        a1 = v713;
        v79 = &v60[8 * v59];
        v676 = *(double *)&v79;
        if (!v31)
          goto LABEL_57;
        goto LABEL_56;
      }
      v76 = v33 - v31 - 8;
      if (v76 < 0x168
        || (v88 = (v33 - 8 - v31) & 0xFFFFFFFFFFFFFFF8, &v60[v33 - v31 - 8 - v88] > &v60[v33 - v31 - 8])
        || &v33[-v88 - 8] > v33 - 8
        || (unint64_t)(v31 - v60) < 0x20)
      {
        v77 = v33;
        a1 = v713;
      }
      else
      {
        v89 = (v76 >> 3) + 1;
        v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
        v77 = &v33[-v90];
        *(_QWORD *)&v23 -= v90;
        v91 = (float64x2_t *)&v60[8 * v57 - 16];
        v92 = (float64x2_t *)(v33 - 16);
        v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v713;
        do
        {
          v48 = *v92;
          v91[-1] = v92[-1];
          *v91 = v48;
          v91 -= 2;
          v92 -= 2;
          v93 -= 4;
        }
        while (v93);
        if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          v79 = &v60[8 * v59];
          v676 = *(double *)&v79;
          if (!v31)
          {
LABEL_57:
            v31 = *(char **)&v23;
            v32 = (unint64_t)v79;
            v33 = *(char **)&v716;
            goto LABEL_25;
          }
LABEL_56:
          operator delete(v31);
          _D16 = v724;
          v28 = *(float64x2_t *)__src;
          goto LABEL_57;
        }
      }
      do
      {
        v78 = *((_QWORD *)v77 - 1);
        v77 -= 8;
        *(_QWORD *)(*(_QWORD *)&v23 - 8) = v78;
        *(_QWORD *)&v23 -= 8;
      }
      while (v77 != v31);
      goto LABEL_55;
    }
    v716 = 0.0;
    v23 = 0.0;
    v94 = v22;
LABEL_80:
    v95 = (v94 - v22) >> 3;
    v96 = v95 + ((v94 - v22) >> 2);
    v97 = (uint64_t)(v735[1] - v735[0]) >> 3;
    v14 = v672;
    if (v96 <= v97)
    {
      if (v96 < v97)
        v735[1] = v735[0] + 8 * v96;
    }
    else
    {
      sub_20E93D8FC((uint64_t)v735, v96 - v97);
      v22 = (char *)v748[0];
      v94 = v748[1];
      v95 = ((char *)v748[1] - (char *)v748[0]) >> 3;
    }
    v763 = v95;
    if (__p)
    {
      v757 = __p;
      operator delete(__p);
      v22 = (char *)v748[0];
      v94 = v748[1];
    }
    __p = v22;
    v757 = v94;
    v758 = v749;
    *(_QWORD *)&v749 = 0;
    v748[1] = 0;
    v748[0] = 0;
    v98 = v754[0];
    if (v754[0])
    {
      v754[1] = v754[0];
      operator delete(v754[0]);
      v98 = v748[0];
    }
    *(_OWORD *)v754 = *(_OWORD *)v735;
    v755 = *(_QWORD *)v736;
    v735[1] = 0;
    *(_QWORD *)v736 = 0;
    v735[0] = 0;
    if (v98)
    {
      v748[1] = v98;
      operator delete(v98);
      if (v735[0])
      {
        v735[1] = v735[0];
        operator delete((void *)v735[0]);
      }
    }
    v21 = *(void **)object;
    if (*(_QWORD *)object)
    {
LABEL_92:
      *(_QWORD *)&object[8] = v21;
      operator delete(v21);
    }
  }
  else
  {
    v716 = 0.0;
    v23 = 0.0;
  }
LABEL_93:
  *(_DWORD *)(a1 + 632) = v763;
  sub_20F0DB384(v764);
  if (**(int **)(v764[0] + 56) > 3)
    goto LABEL_182;
  v99 = *(unsigned __int8 *)(v764[0] + 72);
  v100 = sub_20E8C31DC(v764[0], "OSLogSurrogateAppender", 1, 0);
  v101 = v100;
  if (!v99 && !v100)
    goto LABEL_182;
  v673 = v14;
  v735[0] = (__uint64_t)v764;
  v735[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v736 = std::chrono::system_clock::now();
  *(_DWORD *)&v736[8] = 3;
  *(_QWORD *)&v736[16] = "unknown file";
  *(_DWORD *)&v736[24] = 199;
  *(_QWORD *)&v736[40] = 0;
  *(_QWORD *)v737 = 0;
  *(_QWORD *)&v736[32] = "unknown function";
  v102 = *(_QWORD *)v735[0];
  v103 = *(_QWORD *)v735[0] + 16;
  __srca = *(_QWORD *)v735[0];
  if (*(char *)(*(_QWORD *)v735[0] + 39) < 0)
  {
    v105 = *(const char **)(v102 + 16);
    v104 = *(_QWORD *)(v102 + 24);
    v107 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v107 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v104 = *(unsigned __int8 *)(*(_QWORD *)v735[0] + 39);
    v105 = (const char *)(*(_QWORD *)v735[0] + 16);
    v106 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v106 & 1) != 0)
      goto LABEL_100;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_100:
  if (byte_254A4A4F8[23] >= 0)
    v108 = byte_254A4A4F8;
  else
    v108 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v109 = byte_254A4A4F8[23];
  else
    v109 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v108, v105);
  v110 = &object[8];
  if (v109 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v109 >= 0x17)
  {
    v111 = v101;
    v112 = v105;
    v113 = v103;
    v114 = v99;
    v115 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v109 | 7) != 0x17)
      v115 = v109 | 7;
    v116 = v115 + 1;
    v110 = operator new(v115 + 1);
    *(_QWORD *)&object[24] = v116 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v110;
    *(_QWORD *)&object[16] = v109;
    v99 = v114;
    v103 = v113;
    v105 = v112;
    v101 = v111;
    goto LABEL_113;
  }
  object[31] = v109;
  if (v109)
LABEL_113:
    memmove(v110, v108, v109);
  v110[v109] = 0;
  object[32] = 1;
  v117 = &object[40];
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a1 = v713;
  if (v104 >= 0x17)
  {
    v119 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v119 = v104 | 7;
    v120 = v119 + 1;
    v117 = operator new(v119 + 1);
    *(_QWORD *)&object[56] = v120 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v117;
    *(_QWORD *)&object[48] = v104;
  }
  else
  {
    object[63] = v104;
    if (!v104)
    {
      object[40] = 0;
      v787[0] = 1;
      v118 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
        goto LABEL_118;
      goto LABEL_124;
    }
  }
  memmove(v117, v105, v104);
  v117[v104] = 0;
  v787[0] = 1;
  v118 = *(NSObject **)object;
  if ((object[63] & 0x80000000) == 0)
  {
LABEL_118:
    if (!object[32])
      goto LABEL_127;
LABEL_125:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_127;
  }
LABEL_124:
  operator delete(*(void **)&object[40]);
  if (object[32])
    goto LABEL_125;
LABEL_127:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v101 && *(_QWORD *)(v101 + 24))
  {
    v121 = _os_log_pack_size();
    v122 = (std::__shared_weak_count_vtbl *)operator new(v121, (std::align_val_t)8uLL);
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v123;
    v123->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v122;
    *(_QWORD *)object = v122;
    *(_QWORD *)&object[8] = v122;
    *(_QWORD *)&object[16] = v123;
    do
      v126 = __ldxr(p_shared_owners);
    while (__stxr(v126 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v127 = __ldaxr(p_shared_owners);
    while (__stlxr(v127 - 1, p_shared_owners));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v124);
    }
    v128 = *(_QWORD *)object;
    v129 = _os_log_pack_fill();
    v130 = v763;
    *(_DWORD *)v129 = 134218240;
    *(_QWORD *)(v129 + 4) = v130;
    *(_WORD *)(v129 + 12) = 1024;
    *(_DWORD *)(v129 + 14) = v692;
    v131 = (char *)operator new();
    v132 = *(unsigned __int8 *)(__srca + 39);
    v133 = *(_QWORD *)(__srca + 16);
    v134 = *(_QWORD *)(__srca + 24);
    v135 = *(_OWORD *)&object[24];
    *(_OWORD *)(v131 + 8) = *(_OWORD *)&object[8];
    if ((v132 & 0x80u) != 0)
      v132 = v134;
    else
      v133 = v103;
    *(_QWORD *)v131 = v128;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v131 + 24) = v135;
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v131 + 5) = v133;
    *((_QWORD *)v131 + 6) = v132;
    v131[56] = 1;
    *(_QWORD *)oslog = 0;
    v748[0] = v131;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v101 + 24) + 40))(*(_QWORD *)(v101 + 24), v748);
    v136 = v748[0];
    v748[0] = 0;
    v14 = v673;
    if (v136)
    {
      v137 = (std::__shared_weak_count *)*((_QWORD *)v136 + 4);
      if (v137)
      {
        v138 = (unint64_t *)&v137->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      v140 = (std::__shared_weak_count *)*((_QWORD *)v136 + 2);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      MEMORY[0x212BC6398](v136, 0x10F0C40B62ED6C6);
      v143 = *(_QWORD *)oslog;
      *(_QWORD *)oslog = 0;
      if (v143)
      {
        v144 = *(std::__shared_weak_count **)(v143 + 32);
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = *(std::__shared_weak_count **)(v143 + 16);
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        MEMORY[0x212BC6398](v143, 0x10F0C40B62ED6C6);
      }
    }
    v150 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v151 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v153 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v154 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
  }
  else
  {
    os_log_type_enabled(v118, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = v763;
    *(_WORD *)&object[12] = 1024;
    *(_DWORD *)&object[14] = v692;
    v156 = (void *)_os_log_send_and_compose_impl();
    v14 = v673;
    if (v156)
      free(v156);
  }
  if (v99)
  {
    sub_20E8C003C((uint64_t)v735, "[P3P Outlier Rejection] Triangulated %lu out of %u reference points", v763, v692);
    sub_20E863570((uint64_t)v735);
  }
  sub_20E863570((uint64_t)v735);
  v157 = *(std::__shared_weak_count **)v737;
  if (*(_QWORD *)v737)
  {
    v158 = (unint64_t *)(*(_QWORD *)v737 + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
LABEL_182:
  v160 = (_QWORD *)(a1 + 856);
  v161 = 2 * v763;
  v162 = *(_QWORD *)(a1 + 856);
  v163 = (*(_QWORD *)(a1 + 864) - v162) >> 3;
  if (2 * v763 <= v163)
  {
    if (2 * v763 < v163)
      *(_QWORD *)(a1 + 864) = v162 + 16 * v763;
  }
  else
  {
    sub_20E93D8FC(a1 + 856, 2 * v763 - v163);
    v161 = 2 * v763;
  }
  v164 = *(_QWORD *)(a1 + 808);
  v165 = (*(_QWORD *)(a1 + 816) - v164) >> 3;
  if (v161 <= v165)
  {
    if (v161 < v165)
      *(_QWORD *)(a1 + 816) = v164 + 8 * v161;
  }
  else
  {
    sub_20E93D8FC(a1 + 808, v161 - v165);
    v161 = 2 * v763;
  }
  v166 = *(_QWORD *)(a1 + 832);
  v167 = (*(_QWORD *)(a1 + 840) - v166) >> 3;
  if (v161 <= v167)
  {
    if (v161 < v167)
      *(_QWORD *)(a1 + 840) = v166 + 8 * v161;
  }
  else
  {
    sub_20E93D8FC(a1 + 832, v161 - v167);
  }
  j = (_QWORD *)(a1 + 880);
  v169 = *(void **)(a1 + 880);
  if (v169)
  {
    *(_QWORD *)(a1 + 888) = v169;
    operator delete(v169);
    *j = 0;
    *(_QWORD *)(a1 + 888) = 0;
    *(_QWORD *)(a1 + 896) = 0;
  }
  *(_OWORD *)(a1 + 880) = *(_OWORD *)v754;
  v170 = v763;
  *(_QWORD *)(a1 + 896) = v755;
  v755 = 0;
  v754[1] = 0;
  v754[0] = 0;
  if (v170)
  {
    v171 = 0;
    v172 = 0;
    v173 = *v160;
    v174 = __p;
    v175 = *v685;
    v176 = *(_QWORD *)(a1 + 808);
    v177 = *v14;
    v178 = *(_QWORD *)(a1 + 832);
    v179 = *v679;
    do
    {
      v180 = 8 * v171;
      v181 = 16 * v174[v172];
      v182 = (_QWORD *)(v173 + v180);
      *v182 = *(_QWORD *)(v175 + v181);
      v182[1] = *(_QWORD *)(v175 + v181 + 8);
      v183 = (_QWORD *)(v176 + v180);
      *v183 = *(_QWORD *)(v177 + v181);
      v183[1] = *(_QWORD *)(v177 + v181 + 8);
      v184 = (_QWORD *)(v179 + v181);
      v185 = (_QWORD *)(v178 + v180);
      *v185 = *v184;
      ++v172;
      v171 += 2;
      v185[1] = v184[1];
    }
    while (v170 > v172);
  }
  v186 = (uint64_t)(*(_QWORD *)&v716 - *(_QWORD *)&v23) >> 2;
  v187 = *(_QWORD *)(a1 + 1032);
  v188 = (*(_QWORD *)(a1 + 1040) - v187) >> 3;
  if (v186 <= v188)
  {
    if (v186 < v188)
      *(_QWORD *)(a1 + 1040) = v187 + 8 * v186;
  }
  else
  {
    sub_20E93D8FC(a1 + 1032, v186 - v188);
  }
  v725 = (_QWORD *)(a1 + 808);
  v189 = (uint64_t)(*(_QWORD *)&v716 - *(_QWORD *)&v23) >> 3;
  if (*(_QWORD *)&v716 != *(_QWORD *)&v23)
  {
    v190 = 0;
    v191 = 0;
    v192 = *(_QWORD *)(a1 + 1032);
    v193 = *v685;
    do
    {
      v194 = (_QWORD *)(v192 + 8 * v190);
      v195 = (_QWORD *)(v193 + 16 * *(_QWORD *)(*(_QWORD *)&v23 + 8 * v191));
      *v194 = *v195;
      v194[1] = v195[1];
      ++v191;
      v190 += 2;
    }
    while (v189 > v191);
  }
  v721 = a1 + 512;
  v715 = (_QWORD *)(a1 + 688);
  v717 = (_QWORD *)(a1 + 976);
  v196 = v688;
  __srcb = v688 + 18;
  if ((sub_20EB63308(a1 + 512, (_DWORD *)(a1 + 856), (uint64_t *)(a1 + 880), (uint64_t)v748, (char **)(a1 + 976), (char **)(a1 + 688), 1) & 1) == 0)
  {
    sub_20F0DB384(&v739);
    if (**(int **)(*(_QWORD *)&v739 + 56) > 3)
      goto LABEL_301;
    v202 = *(unsigned __int8 *)(*(_QWORD *)&v739 + 72);
    v203 = sub_20E8C31DC(*(uint64_t *)&v739, "OSLogSurrogateAppender", 1, 0);
    v204 = v203;
    if (!v202 && !v203)
      goto LABEL_301;
    v735[0] = (__uint64_t)&v739;
    v735[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v736 = std::chrono::system_clock::now();
    *(_DWORD *)&v736[8] = 3;
    *(_QWORD *)&v736[16] = "unknown file";
    *(_DWORD *)&v736[24] = 235;
    *(_QWORD *)&v736[40] = 0;
    *(_QWORD *)v737 = 0;
    *(_QWORD *)&v736[32] = "unknown function";
    v205 = *(_QWORD *)v735[0];
    v206 = (const char *)(*(_QWORD *)v735[0] + 16);
    v726 = v206;
    if (*(char *)(*(_QWORD *)v735[0] + 39) < 0)
    {
      v206 = *(const char **)(v205 + 16);
      v207 = *(_QWORD *)(v205 + 24);
      v209 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v209 & 1) != 0)
        goto LABEL_219;
    }
    else
    {
      v207 = *(unsigned __int8 *)(*(_QWORD *)v735[0] + 39);
      v208 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v208 & 1) != 0)
        goto LABEL_219;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_219:
    if (byte_254A4A4F8[23] >= 0)
      v210 = byte_254A4A4F8;
    else
      v210 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v211 = byte_254A4A4F8[23];
    else
      v211 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v210, v206);
    v212 = &object[8];
    if (v211 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v211 >= 0x17)
    {
      v213 = v204;
      v214 = v206;
      v215 = v205;
      v216 = v202;
      v217 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v211 | 7) != 0x17)
        v217 = v211 | 7;
      v218 = v217 + 1;
      v212 = operator new(v217 + 1);
      *(_QWORD *)&object[24] = v218 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v212;
      *(_QWORD *)&object[16] = v211;
      v202 = v216;
      v205 = v215;
      v206 = v214;
      v204 = v213;
    }
    else
    {
      object[31] = v211;
      if (!v211)
      {
LABEL_233:
        v212[v211] = 0;
        object[32] = 1;
        v219 = &object[40];
        if (v207 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v196 = v688;
        if (v207 >= 0x17)
        {
          v220 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v207 | 7) != 0x17)
            v220 = v207 | 7;
          v221 = v220 + 1;
          v219 = operator new(v220 + 1);
          *(_QWORD *)&object[56] = v221 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v219;
          *(_QWORD *)&object[48] = v207;
        }
        else
        {
          object[63] = v207;
          if (!v207)
            goto LABEL_241;
        }
        memmove(v219, v206, v207);
LABEL_241:
        v219[v207] = 0;
        v787[0] = 1;
        v222 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v204 && *(_QWORD *)(v204 + 24))
        {
          v223 = _os_log_pack_size();
          v224 = (std::__shared_weak_count_vtbl *)operator new(v223, (std::align_val_t)8uLL);
          v225 = (std::__shared_weak_count *)operator new();
          v226 = v225;
          v225->__shared_owners_ = 0;
          v227 = (unint64_t *)&v225->__shared_owners_;
          v225->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v225->__shared_weak_owners_ = 0;
          v225[1].__vftable = v224;
          *(_QWORD *)object = v224;
          *(_QWORD *)&object[8] = v224;
          *(_QWORD *)&object[16] = v225;
          do
            v228 = __ldxr(v227);
          while (__stxr(v228 + 1, v227));
          memset(&object[24], 0, 24);
          do
            v229 = __ldaxr(v227);
          while (__stlxr(v229 - 1, v227));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v226);
          }
          v230 = *(_QWORD *)object;
          v231 = _os_log_pack_fill();
          v232 = v763;
          *(_DWORD *)v231 = 134218240;
          *(_QWORD *)(v231 + 4) = v232;
          *(_WORD *)(v231 + 12) = 1024;
          *(_DWORD *)(v231 + 14) = v692;
          v233 = operator new();
          v234 = *(unsigned __int8 *)(v205 + 39);
          v235 = *(const char **)(v205 + 16);
          v236 = *(_QWORD *)(v205 + 24);
          v237 = *(_OWORD *)&object[24];
          *(_OWORD *)(v233 + 8) = *(_OWORD *)&object[8];
          if ((v234 & 0x80u) != 0)
            v234 = v236;
          else
            v235 = v726;
          *(_QWORD *)v233 = v230;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v233 + 24) = v237;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v233 + 40) = v235;
          *(_QWORD *)(v233 + 48) = v234;
          *(_BYTE *)(v233 + 56) = 1;
          v764[0] = 0;
          *(_QWORD *)oslog = v233;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v204 + 24) + 40))(*(_QWORD *)(v204 + 24), oslog);
          v238 = *(_QWORD *)oslog;
          *(_QWORD *)oslog = 0;
          if (v238)
          {
            v239 = *(std::__shared_weak_count **)(v238 + 32);
            if (v239)
            {
              v240 = (unint64_t *)&v239->__shared_owners_;
              do
                v241 = __ldaxr(v240);
              while (__stlxr(v241 - 1, v240));
              if (!v241)
              {
                ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                std::__shared_weak_count::__release_weak(v239);
              }
            }
            v242 = *(std::__shared_weak_count **)(v238 + 16);
            if (v242)
            {
              v243 = (unint64_t *)&v242->__shared_owners_;
              do
                v244 = __ldaxr(v243);
              while (__stlxr(v244 - 1, v243));
              if (!v244)
              {
                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                std::__shared_weak_count::__release_weak(v242);
              }
            }
            MEMORY[0x212BC6398](v238, 0x10F0C40B62ED6C6);
            v245 = v764[0];
            v764[0] = 0;
            if (v245)
            {
              v246 = *(std::__shared_weak_count **)(v245 + 32);
              if (v246)
              {
                v247 = (unint64_t *)&v246->__shared_owners_;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
              v249 = *(std::__shared_weak_count **)(v245 + 16);
              if (v249)
              {
                v250 = (unint64_t *)&v249->__shared_owners_;
                do
                  v251 = __ldaxr(v250);
                while (__stlxr(v251 - 1, v250));
                if (!v251)
                {
                  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                  std::__shared_weak_count::__release_weak(v249);
                }
              }
              MEMORY[0x212BC6398](v245, 0x10F0C40B62ED6C6);
            }
          }
          v252 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v253 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (!v254)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
            }
          }
          v255 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v256 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v255);
            }
          }
        }
        else
        {
          os_log_type_enabled(v222, OS_LOG_TYPE_INFO);
          *(_DWORD *)object = 134218240;
          *(_QWORD *)&object[4] = v763;
          *(_WORD *)&object[12] = 1024;
          *(_DWORD *)&object[14] = v692;
          v258 = (void *)_os_log_send_and_compose_impl();
          if (v258)
            free(v258);
        }
        if (v202)
        {
          sub_20E8C003C((uint64_t)v735, "Failed to estimate the relative pose using P3P RANSAC. Triangulated %lu out of %u reference points", v763, v692);
          sub_20E863570((uint64_t)v735);
        }
        sub_20E863570((uint64_t)v735);
        v259 = *(std::__shared_weak_count **)v737;
        if (*(_QWORD *)v737)
        {
          v260 = (unint64_t *)(*(_QWORD *)v737 + 8);
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
LABEL_301:
        sub_20EB884A4((uint64_t)__srcb, (unint64_t)((v196[7] - v196[6]) >> 3) >> 1, 0);
        v262 = v196[19];
        if (v262)
        {
          v263 = (void *)v196[18];
          if (v262 >= 0x40)
            bzero(v263, 8 * (v262 >> 6));
          if ((v262 & 0x3F) != 0)
            *((_QWORD *)v263 + (v262 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v262 & 0x3F));
        }
        kdebug_trace();
        v264 = atomic_load((unsigned __int8 *)&qword_254A620A8);
        if ((v264 & 1) == 0 && __cxa_guard_acquire(&qword_254A620A8))
        {
          v664 = operator new(0x28uLL);
          v664[1] = 0;
          v664[2] = 0;
          *v664 = &off_24C9C4340;
          *((_BYTE *)v664 + 24) = 0;
          *((_BYTE *)v664 + 32) = 0;
          qword_254A620B8 = (uint64_t)(v664 + 3);
          qword_254A620C0 = (uint64_t)v664;
          unk_254A620C8 = 100000000;
          __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A620B8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A620A8);
        }
        v265 = (_QWORD *)qword_254A620B8;
        v266 = *(unsigned __int8 *)(qword_254A620B8 + 8);
        v267.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (v266)
        {
          if (v267.__d_.__rep_ - *v265 < 100000000)
          {
LABEL_334:
            *(_BYTE *)a8 = 0;
            *(_BYTE *)(a8 + 96) = 0;
            goto LABEL_456;
          }
          v268 = (std::chrono::steady_clock::time_point *)qword_254A620B8;
        }
        else
        {
          v268 = (std::chrono::steady_clock::time_point *)qword_254A620B8;
          if (!*(_BYTE *)(qword_254A620B8 + 8))
            *(_BYTE *)(qword_254A620B8 + 8) = 1;
        }
        v268->__d_.__rep_ = v267.__d_.__rep_;
        v269 = sub_210219C18();
        v270 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v270 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
        {
LABEL_332:
          if (os_signpost_enabled((os_log_t)*v269))
          {
            *(_DWORD *)object = 134218240;
            *(_QWORD *)&object[4] = v763;
            *(_WORD *)&object[12] = 1024;
            *(_DWORD *)&object[14] = v692;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_334;
        }
        *(_DWORD *)object = 134218240;
        *(_QWORD *)&object[4] = v763;
        *(_WORD *)&object[12] = 1024;
        *(_DWORD *)&object[14] = v692;
        v272 = (char *)_os_log_send_and_compose_impl();
        v273 = strlen(v272);
        v735[0] = 0;
        pthread_threadid_np(0, v735);
        v274 = v735[0];
        timespec_get((timespec *)v735, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v269 + 1), (__int128 *)(v269 + 5), "P3P. Failure. Triang: %zu. Total2D3D: %u", 0x28uLL, v272, v273, v274, v735);
        std::mutex::lock(&stru_254A5A410);
        v275 = qword_254A5A458;
        for (i = unk_254A5A460; v275 != i; v275 += 40)
        {
          v277 = *(_QWORD *)(v275 + 32);
          if (!v277)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v277 + 48))(v277, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v791 < 0)
        {
          operator delete(v790);
          if ((v789 & 0x80000000) == 0)
          {
LABEL_319:
            if (!v787[24])
            {
LABEL_325:
              if (object[56] && (object[55] & 0x80000000) != 0)
                operator delete(*(void **)&object[32]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v272)
                free(v272);
              goto LABEL_332;
            }
LABEL_323:
            if ((v787[23] & 0x80000000) != 0)
              operator delete(*(void **)v787);
            goto LABEL_325;
          }
        }
        else if ((v789 & 0x80000000) == 0)
        {
          goto LABEL_319;
        }
        operator delete(v788);
        if (!v787[24])
          goto LABEL_325;
        goto LABEL_323;
      }
    }
    memmove(v212, v210, v211);
    goto LABEL_233;
  }
  v739 = *((double *)&v751 + 1) * *(double *)&v752 - *((double *)&v753 + 1) * *(double *)&v750;
  v740 = *((double *)&v751 + 1) * *((double *)&v752 + 1) - *((double *)&v753 + 1) * *((double *)&v750 + 1);
  v741 = *((double *)&v751 + 1) * *(double *)&v753 - *((double *)&v753 + 1) * *(double *)&v751;
  v742 = *((double *)&v753 + 1) * *(double *)v748 - *(double *)&v752 * *((double *)&v749 + 1);
  v743 = *((double *)&v753 + 1) * *(double *)&v748[1] - *((double *)&v752 + 1) * *((double *)&v749 + 1);
  v744 = *((double *)&v753 + 1) * *(double *)&v749 - *(double *)&v753 * *((double *)&v749 + 1);
  v745 = *(double *)&v750 * *((double *)&v749 + 1) - *((double *)&v751 + 1) * *(double *)v748;
  v746 = *((double *)&v750 + 1) * *((double *)&v749 + 1) - *((double *)&v751 + 1) * *(double *)&v748[1];
  v747 = *(double *)&v751 * *((double *)&v749 + 1) - *((double *)&v751 + 1) * *(double *)&v749;
  v701 = (void **)(v688 + 12);
  v197 = sub_20F0D40AC(&v739, v688, v688 + 6, v688 + 9, v688 + 12, v688 + 15, v688 + 18, *(double *)(a1 + 504));
  sub_20F0DB384(v777);
  if (**((int **)v777[0] + 7) > 3)
    goto LABEL_419;
  v198 = *((unsigned __int8 *)v777[0] + 72);
  v199 = sub_20E8C31DC((uint64_t)v777[0], "OSLogSurrogateAppender", 1, 0);
  if (!v198 && !v199)
    goto LABEL_419;
  v690 = v199;
  v735[0] = (__uint64_t)v777;
  v735[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v736 = std::chrono::system_clock::now();
  *(_DWORD *)&v736[8] = 3;
  *(_QWORD *)&v736[16] = "unknown file";
  *(_DWORD *)&v736[24] = 266;
  *(_QWORD *)&v736[40] = 0;
  *(_QWORD *)v737 = 0;
  *(_QWORD *)&v736[32] = "unknown function";
  v200 = *(_QWORD *)v735[0];
  v674 = *(_QWORD *)v735[0];
  if (*(char *)(*(_QWORD *)v735[0] + 39) < 0)
  {
    v201 = *(_QWORD *)(v200 + 24);
    categorya = *(const char **)(v200 + 16);
  }
  else
  {
    v201 = *(unsigned __int8 *)(*(_QWORD *)v735[0] + 39);
    categorya = (const char *)(*(_QWORD *)v735[0] + 16);
  }
  v677 = *(_QWORD *)v735[0] + 16;
  v680 = v198;
  v695 = (_QWORD *)(a1 + 856);
  v278 = v688[1];
  v686 = *v688;
  v279 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v279 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v196 = v688;
  }
  if (byte_254A4A4F8[23] >= 0)
    v280 = byte_254A4A4F8;
  else
    v280 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v281 = byte_254A4A4F8[23];
  else
    v281 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v280, categorya);
  v282 = &object[8];
  if (v281 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v281 >= 0x17)
  {
    v668 = v278;
    v283 = j;
    v284 = v197;
    v285 = (v281 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v281 | 7) != 0x17)
      v285 = v281 | 7;
    v286 = v285 + 1;
    v282 = operator new(v285 + 1);
    *(_QWORD *)&object[24] = v286 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v282;
    *(_QWORD *)&object[16] = v281;
    v197 = v284;
    j = v283;
    v278 = v668;
    goto LABEL_350;
  }
  object[31] = v281;
  if (v281)
LABEL_350:
    memmove(v282, v280, v281);
  v282[v281] = 0;
  object[32] = 1;
  v287 = &object[40];
  if (v201 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v160 = v695;
  if (v201 >= 0x17)
  {
    v288 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v201 | 7) != 0x17)
      v288 = v201 | 7;
    v289 = v288 + 1;
    v287 = operator new(v288 + 1);
    *(_QWORD *)&object[56] = v289 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v287;
    *(_QWORD *)&object[48] = v201;
  }
  else
  {
    object[63] = v201;
    if (!v201)
      goto LABEL_359;
  }
  memmove(v287, categorya, v201);
LABEL_359:
  v287[v201] = 0;
  v787[0] = 1;
  v290 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v291 = (v278 - v686) >> 3;
  v292 = v197;
  v293 = (double)v197;
  v294 = (double)v197 / ((double)v291 * 0.5);
  v295 = v291 >> 1;
  v296 = v294 * 100.0;
  if (v690 && *(_QWORD *)(v690 + 24))
  {
    v297 = _os_log_pack_size();
    v298 = (std::__shared_weak_count_vtbl *)operator new(v297, (std::align_val_t)8uLL);
    v299 = (std::__shared_weak_count *)operator new();
    v300 = v299;
    v299->__shared_owners_ = 0;
    v301 = (unint64_t *)&v299->__shared_owners_;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v298;
    *(_QWORD *)object = v298;
    *(_QWORD *)&object[8] = v298;
    *(_QWORD *)&object[16] = v299;
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
    memset(&object[24], 0, 24);
    do
      v303 = __ldaxr(v301);
    while (__stlxr(v303 - 1, v301));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v300);
    }
    v304 = *(_QWORD *)object;
    v305 = _os_log_pack_fill();
    v306 = v763;
    *(_DWORD *)v305 = 67110144;
    *(_DWORD *)(v305 + 4) = v292;
    *(_WORD *)(v305 + 8) = 2048;
    *(_QWORD *)(v305 + 10) = v295;
    *(_WORD *)(v305 + 18) = 2048;
    *(double *)(v305 + 20) = v296;
    *(_WORD *)(v305 + 28) = 2048;
    *(_QWORD *)(v305 + 30) = v306;
    *(_WORD *)(v305 + 38) = 1024;
    *(_DWORD *)(v305 + 40) = v692;
    v307 = operator new();
    v308 = *(unsigned __int8 *)(v674 + 39);
    v309 = *(_QWORD *)(v674 + 16);
    v310 = *(_QWORD *)(v674 + 24);
    v311 = *(_OWORD *)&object[24];
    *(_OWORD *)(v307 + 8) = *(_OWORD *)&object[8];
    if ((v308 & 0x80u) != 0)
      v308 = v310;
    else
      v309 = v677;
    *(_QWORD *)v307 = v304;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v307 + 24) = v311;
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v307 + 40) = v309;
    *(_QWORD *)(v307 + 48) = v308;
    *(_BYTE *)(v307 + 56) = 1;
    v764[0] = 0;
    *(_QWORD *)oslog = v307;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v690 + 24) + 40))(*(_QWORD *)(v690 + 24), oslog);
    v312 = *(_QWORD *)oslog;
    *(_QWORD *)oslog = 0;
    v160 = v695;
    v197 = v292;
    if (v312)
    {
      v313 = *(std::__shared_weak_count **)(v312 + 32);
      if (v313)
      {
        v314 = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      v316 = *(std::__shared_weak_count **)(v312 + 16);
      if (v316)
      {
        v317 = (unint64_t *)&v316->__shared_owners_;
        do
          v318 = __ldaxr(v317);
        while (__stlxr(v318 - 1, v317));
        if (!v318)
        {
          ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
          std::__shared_weak_count::__release_weak(v316);
        }
      }
      MEMORY[0x212BC6398](v312, 0x10F0C40B62ED6C6);
      v319 = v764[0];
      v764[0] = 0;
      if (v319)
      {
        v320 = *(std::__shared_weak_count **)(v319 + 32);
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v323 = *(std::__shared_weak_count **)(v319 + 16);
        if (v323)
        {
          v324 = (unint64_t *)&v323->__shared_owners_;
          do
            v325 = __ldaxr(v324);
          while (__stlxr(v325 - 1, v324));
          if (!v325)
          {
            ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
            std::__shared_weak_count::__release_weak(v323);
          }
        }
        MEMORY[0x212BC6398](v319, 0x10F0C40B62ED6C6);
      }
    }
    v326 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v327 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v328 = __ldaxr(v327);
      while (__stlxr(v328 - 1, v327));
      if (!v328)
      {
        ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
        std::__shared_weak_count::__release_weak(v326);
      }
    }
    v329 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v330 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v331 = __ldaxr(v330);
      while (__stlxr(v331 - 1, v330));
      if (!v331)
      {
        ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
        std::__shared_weak_count::__release_weak(v329);
      }
    }
  }
  else
  {
    os_log_type_enabled(v290, OS_LOG_TYPE_INFO);
    v196 = v688;
    *(_DWORD *)object = 67110144;
    *(_DWORD *)&object[4] = v292;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = v295;
    v197 = v292;
    *(_WORD *)&object[18] = 2048;
    *(double *)&object[20] = v296;
    *(_WORD *)&object[28] = 2048;
    *(_QWORD *)&object[30] = v763;
    *(_WORD *)&object[38] = 1024;
    *(_DWORD *)&object[40] = v692;
    v332 = (void *)_os_log_send_and_compose_impl();
    if (v332)
      free(v332);
  }
  if (v680)
  {
    v333 = (v196[1] - *v196) >> 3;
    sub_20E8C003C((uint64_t)v735, "The first P3P-based Two-view found %u inliers (of %zu total 2D-2D points = %f). Triangulated %lu out of %u reference 2D-3D correspondences", v197, v333 >> 1, v293 / ((double)v333 * 0.5) * 100.0, v763, v692);
    sub_20E863570((uint64_t)v735);
  }
  sub_20E863570((uint64_t)v735);
  v334 = *(std::__shared_weak_count **)v737;
  if (*(_QWORD *)v737)
  {
    v335 = (unint64_t *)(*(_QWORD *)v737 + 8);
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
LABEL_419:
  kdebug_trace();
  v338 = *v196;
  v337 = v196[1];
  categoryb = v763;
  v339 = atomic_load((unsigned __int8 *)&qword_254A620B0);
  if ((v339 & 1) == 0 && __cxa_guard_acquire(&qword_254A620B0))
  {
    v665 = operator new(0x28uLL);
    v665[1] = 0;
    v665[2] = 0;
    *v665 = &off_24C9C4340;
    *((_BYTE *)v665 + 24) = 0;
    *((_BYTE *)v665 + 32) = 0;
    qword_254A620D0 = (uint64_t)(v665 + 3);
    qword_254A620D8 = (uint64_t)v665;
    unk_254A620E0 = 200000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A620D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A620B0);
  }
  v340 = (double)(2 * v197) / (double)(unint64_t)((v337 - v338) >> 3);
  v341 = (_QWORD *)qword_254A620D0;
  v342 = *(unsigned __int8 *)(qword_254A620D0 + 8);
  v343.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v342)
  {
    v344 = v688;
    if (v343.__d_.__rep_ - *v341 < 200000000)
      goto LABEL_448;
    v345 = (std::chrono::steady_clock::time_point *)qword_254A620D0;
  }
  else
  {
    v345 = (std::chrono::steady_clock::time_point *)qword_254A620D0;
    if (!*(_BYTE *)(qword_254A620D0 + 8))
      *(_BYTE *)(qword_254A620D0 + 8) = 1;
    v344 = v688;
  }
  v345->__d_.__rep_ = v343.__d_.__rep_;
  v346 = sub_210219C18();
  v347 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v347 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v348 = atomic_load(&qword_254A5A450);
  v349 = &word_210313000;
  if (v348)
  {
    v696 = j;
    v350 = v160;
    *(_DWORD *)object = 67110144;
    *(_DWORD *)&object[4] = categoryb;
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = v692;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v197;
    *(_WORD *)&object[20] = 2048;
    *(double *)&object[22] = v340;
    *(_WORD *)&object[30] = 2048;
    *(_QWORD *)&object[32] = v189;
    v351 = (char *)_os_log_send_and_compose_impl();
    v352 = strlen(v351);
    v735[0] = 0;
    pthread_threadid_np(0, v735);
    v353 = v735[0];
    timespec_get((timespec *)v735, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v346 + 1), (__int128 *)(v346 + 5), "P3P. First Hypo. Triang: %u. Total2D3D: %u, Num2dInlier: %u, Ratio2dInlier: %f, NumSemOutlier: %lu", 0x62uLL, v351, v352, v353, v735);
    std::mutex::lock(&stru_254A5A410);
    v354 = qword_254A5A458;
    v355 = unk_254A5A460;
    v160 = v350;
    for (j = v696; v354 != v355; v354 += 40)
    {
      v356 = *(_QWORD *)(v354 + 32);
      if (!v356)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v356 + 48))(v356, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v791 < 0)
    {
      operator delete(v790);
      v344 = v688;
      v349 = &word_210313000;
      if ((v789 & 0x80000000) == 0)
      {
LABEL_433:
        if (!v787[24])
        {
LABEL_439:
          if (object[56] && (object[55] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v351)
            free(v351);
          goto LABEL_446;
        }
LABEL_437:
        if ((v787[23] & 0x80000000) != 0)
          operator delete(*(void **)v787);
        goto LABEL_439;
      }
    }
    else
    {
      v344 = v688;
      v349 = &word_210313000;
      if ((v789 & 0x80000000) == 0)
        goto LABEL_433;
    }
    operator delete(v788);
    if (!v787[24])
      goto LABEL_439;
    goto LABEL_437;
  }
LABEL_446:
  if (os_signpost_enabled((os_log_t)*v346))
  {
    *(_DWORD *)object = *((_QWORD *)v349 + 370);
    *(_DWORD *)&object[4] = categoryb;
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = v692;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v197;
    *(_WORD *)&object[20] = 2048;
    *(double *)&object[22] = v340;
    *(_WORD *)&object[30] = 2048;
    *(_QWORD *)&object[32] = v189;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_448:
  v357 = v713;
  if (!*(_BYTE *)(v713 + 440)
    || sqrt(*((double *)&v749 + 1) * *((double *)&v749 + 1)+ *((double *)&v751 + 1) * *((double *)&v751 + 1)+ *((double *)&v753 + 1) * *((double *)&v753 + 1)) < *(double *)(v713 + 448)|| *(double *)(v713 + 456) < v340)
  {
    goto LABEL_455;
  }
  v358 = *(_QWORD *)(v713 + 888) - *(_QWORD *)(v713 + 880);
  if ((unint64_t)v358 <= 0x10)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 123, (uint64_t)"triangulated_points_.size() >= 3u", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v357 = v713;
    v358 = *(_QWORD *)(v713 + 888) - *(_QWORD *)(v713 + 880);
  }
  if ((double)(unint64_t)((uint64_t)(*(_QWORD *)(v357 + 984) - *(_QWORD *)(v357 + 976)) >> 2)
     / (double)((v358 >> 3) / 3uLL) > *(double *)(v357 + 464))
    goto LABEL_455;
  v362 = (_QWORD *)(v357 + 952);
  v363 = (_QWORD *)(v357 + 904);
  sub_20F0D436C(a3, v725, v160, j, (_QWORD *)(v357 + 952), (_QWORD *)(v357 + 904), *(double *)(v357 + 472), *(double *)(v357 + 480));
  if (*(_QWORD *)(v357 + 912) - *(_QWORD *)(v357 + 904) <= 0x5FuLL)
  {
    sub_20F0DB384(v775);
    if (**((int **)v775[0] + 7) <= 3)
    {
      v364 = *((unsigned __int8 *)v775[0] + 72);
      v365 = sub_20E8C31DC((uint64_t)v775[0], "OSLogSurrogateAppender", 1, 0);
      v366 = v365;
      if (v364 || v365)
      {
        *(_QWORD *)oslog = v775;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        LODWORD(v782.f64[0]) = 3;
        *(_QWORD *)&v782.f64[1] = "unknown file";
        LODWORD(v783) = 81;
        v785 = 0.0;
        *(_QWORD *)&v784.f64[0] = "unknown function";
        v784.f64[1] = 0.0;
        v367 = **(_QWORD **)oslog;
        v368 = **(_QWORD **)oslog + 16;
        __srcc = **(_QWORD **)oslog;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v370 = *(const char **)(v367 + 16);
          v369 = *(_QWORD *)(v367 + 24);
        }
        else
        {
          v369 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v370 = (const char *)(**(_QWORD **)oslog + 16);
        }
        v434 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v434 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v435 = byte_254A4A4F8;
        else
          v435 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v436 = byte_254A4A4F8[23];
        else
          v436 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v435, v370);
        v437 = &object[8];
        if (v436 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v436 >= 0x17)
        {
          v438 = v366;
          v439 = v370;
          v440 = v368;
          v441 = v364;
          v442 = (v436 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v436 | 7) != 0x17)
            v442 = v436 | 7;
          v443 = v442 + 1;
          v437 = operator new(v442 + 1);
          *(_QWORD *)&object[24] = v443 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v437;
          *(_QWORD *)&object[16] = v436;
          v364 = v441;
          v368 = v440;
          v370 = v439;
          v366 = v438;
        }
        else
        {
          object[31] = v436;
          if (!v436)
          {
LABEL_505:
            v437[v436] = 0;
            object[32] = 1;
            v444 = &object[40];
            if (v369 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v369 >= 0x17)
            {
              v445 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v369 | 7) != 0x17)
                v445 = v369 | 7;
              v446 = v445 + 1;
              v444 = operator new(v445 + 1);
              *(_QWORD *)&object[56] = v446 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v444;
              *(_QWORD *)&object[48] = v369;
            }
            else
            {
              object[63] = v369;
              if (!v369)
                goto LABEL_513;
            }
            memmove(v444, v370, v369);
LABEL_513:
            v444[v369] = 0;
            v787[0] = 1;
            v447 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v366 && *(_QWORD *)(v366 + 24))
            {
              v448 = _os_log_pack_size();
              v449 = (std::__shared_weak_count_vtbl *)operator new(v448, (std::align_val_t)8uLL);
              v450 = (std::__shared_weak_count *)operator new();
              v451 = v450;
              v450->__shared_owners_ = 0;
              v452 = (unint64_t *)&v450->__shared_owners_;
              v450->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v450->__shared_weak_owners_ = 0;
              v450[1].__vftable = v449;
              *(_QWORD *)object = v449;
              *(_QWORD *)&object[8] = v449;
              *(_QWORD *)&object[16] = v450;
              do
                v453 = __ldxr(v452);
              while (__stxr(v453 + 1, v452));
              memset(&object[24], 0, 24);
              do
                v454 = __ldaxr(v452);
              while (__stlxr(v454 - 1, v452));
              if (!v454)
              {
                ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                std::__shared_weak_count::__release_weak(v451);
              }
              v455 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v456 = operator new();
              v457 = *(unsigned __int8 *)(__srcc + 39);
              v458 = *(_QWORD *)(__srcc + 16);
              v459 = *(_QWORD *)(__srcc + 24);
              v460 = *(_OWORD *)&object[24];
              *(_OWORD *)(v456 + 8) = *(_OWORD *)&object[8];
              if ((v457 & 0x80u) != 0)
                v457 = v459;
              else
                v458 = v368;
              *(_QWORD *)v456 = v455;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v456 + 24) = v460;
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v456 + 40) = v458;
              *(_QWORD *)(v456 + 48) = v457;
              *(_BYTE *)(v456 + 56) = 1;
              v777[0] = 0;
              v764[0] = v456;
              (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v366 + 24) + 40))(*(_QWORD *)(v366 + 24), v764);
              v461 = v764[0];
              v764[0] = 0;
              if (v461)
              {
                v462 = *(std::__shared_weak_count **)(v461 + 32);
                if (v462)
                {
                  v463 = (unint64_t *)&v462->__shared_owners_;
                  do
                    v464 = __ldaxr(v463);
                  while (__stlxr(v464 - 1, v463));
                  if (!v464)
                  {
                    ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                    std::__shared_weak_count::__release_weak(v462);
                  }
                }
                v465 = *(std::__shared_weak_count **)(v461 + 16);
                if (v465)
                {
                  v466 = (unint64_t *)&v465->__shared_owners_;
                  do
                    v467 = __ldaxr(v466);
                  while (__stlxr(v467 - 1, v466));
                  if (!v467)
                  {
                    ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                    std::__shared_weak_count::__release_weak(v465);
                  }
                }
                MEMORY[0x212BC6398](v461, 0x10F0C40B62ED6C6);
                v468 = v777[0];
                v777[0] = 0;
                if (v468)
                {
                  v469 = (std::__shared_weak_count *)*((_QWORD *)v468 + 4);
                  if (v469)
                  {
                    v470 = (unint64_t *)&v469->__shared_owners_;
                    do
                      v471 = __ldaxr(v470);
                    while (__stlxr(v471 - 1, v470));
                    if (!v471)
                    {
                      ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                      std::__shared_weak_count::__release_weak(v469);
                    }
                  }
                  v472 = (std::__shared_weak_count *)*((_QWORD *)v468 + 2);
                  if (v472)
                  {
                    v473 = (unint64_t *)&v472->__shared_owners_;
                    do
                      v474 = __ldaxr(v473);
                    while (__stlxr(v474 - 1, v473));
                    if (!v474)
                    {
                      ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                      std::__shared_weak_count::__release_weak(v472);
                    }
                  }
                  MEMORY[0x212BC6398](v468, 0x10F0C40B62ED6C6);
                }
              }
              v475 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v476 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v477 = __ldaxr(v476);
                while (__stlxr(v477 - 1, v476));
                if (!v477)
                {
                  ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                  std::__shared_weak_count::__release_weak(v475);
                }
              }
              v478 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v479 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v480 = __ldaxr(v479);
                while (__stlxr(v480 - 1, v479));
                if (!v480)
                {
                  ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                  std::__shared_weak_count::__release_weak(v478);
                }
              }
            }
            else
            {
              os_log_type_enabled(v447, OS_LOG_TYPE_INFO);
              *(_WORD *)object = 0;
              v481 = (void *)_os_log_send_and_compose_impl();
              if (v481)
                free(v481);
            }
            if (v364)
            {
              sub_20E8C003C((uint64_t)oslog, "Skipped the second PnP hypothesis for lack of points");
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v482 = *(std::__shared_weak_count **)&v785;
            if (v785 == 0.0)
              goto LABEL_455;
            v483 = (unint64_t *)(*(_QWORD *)&v785 + 8);
            do
              v484 = __ldaxr(v483);
            while (__stlxr(v484 - 1, v483));
            goto LABEL_654;
          }
        }
        memmove(v437, v435, v436);
        goto LABEL_505;
      }
    }
LABEL_455:
    v359 = v751;
    *(_OWORD *)(a8 + 32) = v750;
    *(_OWORD *)(a8 + 48) = v359;
    v360 = v753;
    *(_OWORD *)(a8 + 64) = v752;
    *(_OWORD *)(a8 + 80) = v360;
    v361 = v749;
    *(_OWORD *)a8 = *(_OWORD *)v748;
    *(_OWORD *)(a8 + 16) = v361;
    *(_BYTE *)(a8 + 96) = 1;
    goto LABEL_456;
  }
  v371 = (_QWORD *)(v357 + 1000);
  if ((sub_20EB63308(v721, (_DWORD *)(v357 + 952), (uint64_t *)(v357 + 904), (uint64_t)object, (char **)(v357 + 1000), (char **)(v357 + 712), 1) & 1) == 0)
  {
    sub_20F0DB384(&v773);
    if (**((int **)v773 + 7) > 3)
      goto LABEL_455;
    v427 = *((unsigned __int8 *)v773 + 72);
    v428 = sub_20E8C31DC((uint64_t)v773, "OSLogSurrogateAppender", 1, 0);
    v429 = v428;
    if (!v427 && !v428)
      goto LABEL_455;
    v764[0] = (__uint64_t)&v773;
    v764[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v765 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    v766 = 3;
    v767 = "unknown file";
    v768 = 94;
    v771 = 0;
    v769 = "unknown function";
    v770 = 0;
    v430 = *(_QWORD *)v764[0];
    v431 = *(_QWORD *)v764[0] + 16;
    v723 = *(_QWORD *)v764[0];
    if (*(char *)(*(_QWORD *)v764[0] + 39) < 0)
    {
      v433 = *(const char **)(v430 + 16);
      v432 = *(_QWORD *)(v430 + 24);
    }
    else
    {
      v432 = *(unsigned __int8 *)(*(_QWORD *)v764[0] + 39);
      v433 = (const char *)(*(_QWORD *)v764[0] + 16);
    }
    v485 = *(_QWORD *)(v713 + 912);
    v728 = *(_QWORD *)(v713 + 904);
    v486 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v486 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)oslog);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
      if (LOBYTE(v782.f64[0]) && (oslog[23] & 0x80000000) != 0)
        operator delete(*(void **)oslog);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v487 = byte_254A4A4F8;
    else
      v487 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v488 = byte_254A4A4F8[23];
    else
      v488 = *(_QWORD *)&byte_254A4A4F8[8];
    __srcd = v433;
    *(_QWORD *)oslog = os_log_create(v487, v433);
    v489 = &oslog[8];
    if (v488 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v488 >= 0x17)
    {
      v490 = v429;
      v491 = v485;
      v492 = v431;
      v493 = v427;
      v494 = (v488 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v488 | 7) != 0x17)
        v494 = v488 | 7;
      v495 = v494 + 1;
      v489 = operator new(v494 + 1);
      *(_QWORD *)&v782.f64[0] = v495 | 0x8000000000000000;
      *(_QWORD *)&oslog[8] = v489;
      *(_QWORD *)&oslog[16] = v488;
      v427 = v493;
      v431 = v492;
      v485 = v491;
      v429 = v490;
    }
    else
    {
      HIBYTE(v782.f64[0]) = v488;
      if (!v488)
      {
LABEL_588:
        v489[v488] = 0;
        LOBYTE(v782.f64[1]) = 1;
        v496 = COERCE_DOUBLE(&v783);
        if (v432 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v432 >= 0x17)
        {
          v497 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v432 | 7) != 0x17)
            v497 = v432 | 7;
          v498 = v497 + 1;
          v496 = COERCE_DOUBLE(operator new(v497 + 1));
          *(_QWORD *)&v784.f64[1] = v498 | 0x8000000000000000;
          *(double *)&v783 = v496;
          *(_QWORD *)&v784.f64[0] = v432;
        }
        else
        {
          HIBYTE(v784.f64[1]) = v432;
          if (!v432)
            goto LABEL_596;
        }
        memmove(*(void **)&v496, __srcd, v432);
LABEL_596:
        *(_BYTE *)(*(_QWORD *)&v496 + v432) = 0;
        LOBYTE(v785) = 1;
        v499 = *(NSObject **)oslog;
        if (SHIBYTE(v784.f64[1]) < 0)
          operator delete(v783);
        if (LOBYTE(v782.f64[1]) && SHIBYTE(v782.f64[0]) < 0)
          operator delete(*(void **)&oslog[8]);
        if (*(_QWORD *)oslog)
          os_release(*(void **)oslog);
        v500 = ((v485 - v728) >> 3) / 3uLL;
        if (v429 && *(_QWORD *)(v429 + 24))
        {
          v501 = _os_log_pack_size();
          v502 = (std::__shared_weak_count_vtbl *)operator new(v501, (std::align_val_t)8uLL);
          v503 = (std::__shared_weak_count *)operator new();
          v504 = v503;
          v503->__shared_owners_ = 0;
          v505 = (unint64_t *)&v503->__shared_owners_;
          v503->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v503->__shared_weak_owners_ = 0;
          v503[1].__vftable = v502;
          *(_QWORD *)oslog = v502;
          *(_QWORD *)&oslog[8] = v502;
          *(_QWORD *)&oslog[16] = v503;
          do
            v506 = __ldxr(v505);
          while (__stxr(v506 + 1, v505));
          v782 = 0uLL;
          *(double *)&v783 = 0.0;
          do
            v507 = __ldaxr(v505);
          while (__stlxr(v507 - 1, v505));
          if (!v507)
          {
            ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
            std::__shared_weak_count::__release_weak(v504);
          }
          v508 = *(_QWORD *)oslog;
          v509 = _os_log_pack_fill();
          *(_DWORD *)v509 = 134217984;
          *(_QWORD *)(v509 + 4) = v500;
          v510 = (char *)operator new();
          v511 = *(unsigned __int8 *)(v723 + 39);
          v512 = *(_QWORD *)(v723 + 16);
          v513 = *(_QWORD *)(v723 + 24);
          v514 = v782;
          *(_OWORD *)(v510 + 8) = *(_OWORD *)&oslog[8];
          if ((v511 & 0x80u) != 0)
            v511 = v513;
          else
            v512 = v431;
          *(_QWORD *)v510 = v508;
          *(_QWORD *)&oslog[8] = 0;
          *(_QWORD *)&oslog[16] = 0;
          *(float64x2_t *)(v510 + 24) = v514;
          v782 = 0uLL;
          *((_QWORD *)v510 + 5) = v512;
          *((_QWORD *)v510 + 6) = v511;
          v510[56] = 1;
          v775[0] = 0;
          v777[0] = v510;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v429 + 24) + 40))(*(_QWORD *)(v429 + 24), v777);
          v515 = v777[0];
          v777[0] = 0;
          if (v515)
          {
            v516 = (std::__shared_weak_count *)*((_QWORD *)v515 + 4);
            if (v516)
            {
              v517 = (unint64_t *)&v516->__shared_owners_;
              do
                v518 = __ldaxr(v517);
              while (__stlxr(v518 - 1, v517));
              if (!v518)
              {
                ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                std::__shared_weak_count::__release_weak(v516);
              }
            }
            v519 = (std::__shared_weak_count *)*((_QWORD *)v515 + 2);
            if (v519)
            {
              v520 = (unint64_t *)&v519->__shared_owners_;
              do
                v521 = __ldaxr(v520);
              while (__stlxr(v521 - 1, v520));
              if (!v521)
              {
                ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                std::__shared_weak_count::__release_weak(v519);
              }
            }
            MEMORY[0x212BC6398](v515, 0x10F0C40B62ED6C6);
            v522 = v775[0];
            v775[0] = 0;
            if (v522)
            {
              v523 = (std::__shared_weak_count *)*((_QWORD *)v522 + 4);
              if (v523)
              {
                v524 = (unint64_t *)&v523->__shared_owners_;
                do
                  v525 = __ldaxr(v524);
                while (__stlxr(v525 - 1, v524));
                if (!v525)
                {
                  ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
                  std::__shared_weak_count::__release_weak(v523);
                }
              }
              v526 = (std::__shared_weak_count *)*((_QWORD *)v522 + 2);
              if (v526)
              {
                v527 = (unint64_t *)&v526->__shared_owners_;
                do
                  v528 = __ldaxr(v527);
                while (__stlxr(v528 - 1, v527));
                if (!v528)
                {
                  ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
                  std::__shared_weak_count::__release_weak(v526);
                }
              }
              MEMORY[0x212BC6398](v522, 0x10F0C40B62ED6C6);
            }
          }
          v529 = *(std::__shared_weak_count **)&v782.f64[1];
          if (*(_QWORD *)&v782.f64[1])
          {
            v530 = (unint64_t *)(*(_QWORD *)&v782.f64[1] + 8);
            do
              v531 = __ldaxr(v530);
            while (__stlxr(v531 - 1, v530));
            if (!v531)
            {
              ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
              std::__shared_weak_count::__release_weak(v529);
            }
          }
          v532 = *(std::__shared_weak_count **)&oslog[16];
          if (*(_QWORD *)&oslog[16])
          {
            v533 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
            do
              v534 = __ldaxr(v533);
            while (__stlxr(v534 - 1, v533));
            if (!v534)
            {
              ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
              std::__shared_weak_count::__release_weak(v532);
            }
          }
        }
        else
        {
          os_log_type_enabled(v499, OS_LOG_TYPE_INFO);
          *(_DWORD *)oslog = 134217984;
          *(_QWORD *)&oslog[4] = ((v485 - v728) >> 3) / 3uLL;
          v535 = (void *)_os_log_send_and_compose_impl();
          if (v535)
            free(v535);
        }
        if (v427)
        {
          sub_20E8C003C((uint64_t)v764, "Second PnP RANSAC failed using %lu reference points", ((uint64_t)(*(_QWORD *)(v713 + 912) - *(_QWORD *)(v713 + 904)) >> 3) / 3uLL);
          sub_20E863570((uint64_t)v764);
        }
        sub_20E863570((uint64_t)v764);
        v482 = v771;
        if (!v771)
          goto LABEL_455;
        v536 = (unint64_t *)&v771->__shared_owners_;
        do
          v484 = __ldaxr(v536);
        while (__stlxr(v484 - 1, v536));
LABEL_654:
        if (!v484)
        {
          ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
          std::__shared_weak_count::__release_weak(v482);
        }
        goto LABEL_455;
      }
    }
    memmove(v489, v487, v488);
    goto LABEL_588;
  }
  *(_OWORD *)&v736[16] = *(_OWORD *)&object[32];
  *(_OWORD *)&v736[32] = *(_OWORD *)&object[48];
  *(_OWORD *)v737 = *(_OWORD *)v787;
  *(_OWORD *)&v737[16] = *(_OWORD *)&v787[16];
  *(_OWORD *)v735 = *(_OWORD *)object;
  *(_OWORD *)v736 = *(_OWORD *)&object[16];
  v738 = 1;
  v372 = *(double *)(v713 + 504);
  v373 = *((double *)&v749 + 1);
  v374 = *((double *)&v751 + 1);
  v375 = *((double *)&v753 + 1);
  v675 = v344[15];
  v687 = v344[1];
  v678 = *v344;
  v681 = v344[16];
  v777[1] = 0;
  v777[0] = 0;
  v778 = 0;
  v775[1] = 0;
  v775[0] = 0;
  v776 = 0;
  v774 = 0uLL;
  v773 = 0;
  v667 = *(double *)&v787[24];
  v376 = (float64x2_t)vextq_s8(*(int8x16_t *)&v736[8], *(int8x16_t *)&v736[8], 8uLL);
  *(float64x2_t *)&oslog[8] = vsubq_f64(vmulq_n_f64(*(float64x2_t *)&v737[8], *(double *)&object[56]), vmulq_n_f64(*(float64x2_t *)&v736[24], *(double *)&v787[24]));
  v782 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)object, *(double *)&v787[24]), vmulq_n_f64(*(float64x2_t *)v787, *(double *)&object[24]));
  v693 = *(int64x2_t *)object;
  v698 = *(_QWORD *)&v787[16];
  v377 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&object[40], 0);
  *(double *)oslog = *(double *)&object[56] * *(double *)v787
                   - vmuld_lane_f64(*(double *)&v787[24], *(float64x2_t *)&v736[8], 1);
  *(double *)&v783 = *(double *)&v787[24] * *(double *)&object[16]
                   - COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v376, *(float64x2_t *)(v737 + 8)).f64[1]);
  v722 = *(float64x2_t *)&v736[8];
  v377.f64[0] = *(float64_t *)&object[24];
  v784 = vsubq_f64(vmulq_f64(v376, v377), vmulq_n_f64(*(float64x2_t *)object, *(double *)&object[56]));
  *(_OWORD *)categoryd = *(_OWORD *)&v736[24];
  v666 = *(double *)&object[56];
  v691 = *(double *)&object[16];
  v785 = COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v376, *(float64x2_t *)(v736 + 24)).f64[1])
       - *(double *)&object[56] * *(double *)&object[16];
  v378 = sub_20F0D40AC((double *)oslog, v344, v688 + 6, v688 + 9, (uint64_t *)v777, (uint64_t *)v775, (uint64_t *)&v773, v372);
  v380 = *v344;
  v379 = v344[1];
  v381 = sub_20F0D6944(a3, v160, j, v717);
  v727 = sub_20F0D6944(a3, v362, v363, v371);
  *(void **)&v382.f64[0] = v748[0];
  *(_QWORD *)&v383.f64[0] = v749;
  *(void **)&_Q1.f64[0] = v748[1];
  _Q1.f64[1] = *((float64_t *)&v750 + 1);
  *(_QWORD *)&v382.f64[1] = v750;
  *(_QWORD *)&v383.f64[1] = v751;
  v385 = *(double *)(a5 + 16);
  v386 = *(double *)(a5 + 40);
  _Q21 = *(float64x2_t *)(a5 + 24);
  v388 = *(double *)(a5 + 64);
  _Q19 = *(float64x2_t *)(a5 + 48);
  v390 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, *(double *)a5), _Q1, *(float64x2_t *)a5, 1), v383, v385);
  _D5 = *((_QWORD *)&v752 + 1);
  v669 = *(int64x2_t *)a5;
  v671 = *(_QWORD *)&v385;
  __asm { FMLA            D6, D5, V7.D[1] }
  v393 = _D6 + *(double *)&v753 * v385;
  v394 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, _Q21.f64[0]), _Q1, _Q21, 1), v383, v386);
  v684 = (int64x2_t)_Q21;
  __asm { FMLA            D17, D5, V21.D[1] }
  v703 = *(_QWORD *)&v386;
  v706 = (int64x2_t)_Q19;
  v396 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v382, _Q19.f64[0]), _Q1, _Q19, 1), v383, v388);
  __asm { FMLA            D1, D5, V19.D[1] }
  *(float64x2_t *)object = v390;
  v718 = *(_QWORD *)&v388;
  *(double *)&object[16] = v393;
  *(double *)&object[40] = _D17 + *(double *)&v753 * v386;
  *(float64x2_t *)&object[24] = v394;
  *(double *)v787 = _Q1.f64[0] + *(double *)&v753 * v388;
  *(float64x2_t *)&object[48] = v396;
  v764[1] = 0;
  v764[0] = 0;
  v765 = 0.0;
  sub_20E9733B8((float64x2_t *)object, (double *)v764);
  _D26 = v671;
  _D24 = v703;
  _D22 = v718;
  *(_QWORD *)&v400.f64[0] = v693.i64[0];
  v400.f64[1] = v722.f64[1];
  *(char **)&v401.f64[1] = categoryd[1];
  v402 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v693, 1), *(int64x2_t *)categoryd);
  v401.f64[0] = v691;
  _V20.D[1] = v698;
  __asm
  {
    FMLA            D0, D26, V20.D[1]
    FMLA            D2, D24, V20.D[1]
    FMLA            D4, D22, V20.D[1]
  }
  v407 = v765;
  v720 = v764[1];
  *(float64x2_t *)object = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v400, *(double *)v669.i64), (float64x2_t)vdupq_laneq_s64(v669, 1), v402), (float64x2_t)vdupq_lane_s64(v671, 0), v401);
  *(_QWORD *)&object[16] = _D0;
  *(_QWORD *)&object[40] = _D2;
  *(float64x2_t *)&object[24] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v400, *(double *)v684.i64), (float64x2_t)vdupq_laneq_s64(v684, 1), v402), (float64x2_t)vdupq_lane_s64(v703, 0), v401);
  *(_QWORD *)v787 = _D4;
  *(float64x2_t *)&object[48] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v400, *(double *)v706.i64), (float64x2_t)vdupq_laneq_s64(v706, 1), v402), (float64x2_t)vdupq_lane_s64(v718, 0), v401);
  v764[1] = 0;
  v764[0] = 0;
  v765 = 0.0;
  sub_20E9733B8((float64x2_t *)object, (double *)v764);
  v408 = (double)(unint64_t)((v681 - v675) >> 3) / (double)(unint64_t)((v687 - v678) >> 3);
  v409 = (double)v378 / ((double)(unint64_t)((v379 - v380) >> 3) * 0.5);
  _V2.D[1] = v720;
  _D1 = v720;
  __asm { FMLA            D0, D1, V2.D[1] }
  v413 = sqrt(_D0 + v407 * v407) * 180.0 / 3.14159265;
  _V2.D[1] = v764[1];
  _D4 = v764[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  v417 = sqrt(_D3 + v765 * v765) * 180.0 / 3.14159265;
  v418 = v409 > v408;
  if (v727 > v381)
    v418 = 1;
  v419 = v417 < v413 || v418;
  sub_20F0DB384(&v772);
  v420 = v713;
  if (**(int **)(v772 + 56) <= 3)
  {
    v421 = *(unsigned __int8 *)(v772 + 72);
    v422 = sub_20E8C31DC(v772, "OSLogSurrogateAppender", 1, 0);
    v423 = v422;
    if (v421 || v422)
    {
      v704 = v421;
      v707 = v419;
      v764[0] = (__uint64_t)&v772;
      v764[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v765 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
      v766 = 3;
      v767 = "unknown file";
      v768 = 359;
      v771 = 0;
      v769 = "unknown function";
      v770 = 0;
      v424 = *(_QWORD *)v764[0];
      v425 = (const char *)(*(_QWORD *)v764[0] + 16);
      v697 = v425;
      if (*(char *)(*(_QWORD *)v764[0] + 39) < 0)
      {
        v425 = *(const char **)(v424 + 16);
        v426 = *(_QWORD *)(v424 + 24);
      }
      else
      {
        v426 = *(unsigned __int8 *)(*(_QWORD *)v764[0] + 39);
      }
      v537 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v537 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v538 = byte_254A4A4F8;
      else
        v538 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v539 = byte_254A4A4F8[23];
      else
        v539 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v538, v425);
      v540 = &object[8];
      if (v539 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v539 >= 0x17)
      {
        v541 = (v539 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v539 | 7) != 0x17)
          v541 = v539 | 7;
        v542 = v541 + 1;
        v540 = operator new(v541 + 1);
        *(_QWORD *)&object[24] = v542 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v540;
        *(_QWORD *)&object[16] = v539;
      }
      else
      {
        object[31] = v539;
        if (!v539)
        {
LABEL_672:
          v540[v539] = 0;
          object[32] = 1;
          v543 = &object[40];
          if (v426 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v420 = v713;
          if (v426 >= 0x17)
          {
            v544 = (v426 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v426 | 7) != 0x17)
              v544 = v426 | 7;
            v545 = v544 + 1;
            v543 = operator new(v544 + 1);
            *(_QWORD *)&object[56] = v545 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v543;
            *(_QWORD *)&object[48] = v426;
          }
          else
          {
            object[63] = v426;
            if (!v426)
              goto LABEL_680;
          }
          memmove(v543, v425, v426);
LABEL_680:
          v543[v426] = 0;
          v787[0] = 1;
          v546 = *(NSObject **)object;
          if ((object[63] & 0x80000000) != 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v719 = sqrt(v373 * v373 + v374 * v374 + v375 * v375);
          categoryc = sqrt(vmulq_f64(v722, v722).f64[0] + v666 * v666 + v667 * v667);
          if (v423 && *(_QWORD *)(v423 + 24))
          {
            v547 = _os_log_pack_size();
            v548 = (std::__shared_weak_count_vtbl *)operator new(v547, (std::align_val_t)8uLL);
            v549 = (std::__shared_weak_count *)operator new();
            v550 = v549;
            v549->__shared_owners_ = 0;
            v551 = (unint64_t *)&v549->__shared_owners_;
            v549->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v549->__shared_weak_owners_ = 0;
            v549[1].__vftable = v548;
            *(_QWORD *)object = v548;
            *(_QWORD *)&object[8] = v548;
            *(_QWORD *)&object[16] = v549;
            do
              v552 = __ldxr(v551);
            while (__stxr(v552 + 1, v551));
            memset(&object[24], 0, 24);
            do
              v553 = __ldaxr(v551);
            while (__stlxr(v553 - 1, v551));
            if (!v553)
            {
              ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
              std::__shared_weak_count::__release_weak(v550);
            }
            v554 = *(_QWORD *)object;
            v555 = _os_log_pack_fill();
            *(_DWORD *)v555 = 134219776;
            *(double *)(v555 + 4) = v719;
            *(_WORD *)(v555 + 12) = 2048;
            *(double *)(v555 + 14) = categoryc;
            *(_WORD *)(v555 + 22) = 2048;
            *(double *)(v555 + 24) = v408;
            *(_WORD *)(v555 + 32) = 2048;
            *(double *)(v555 + 34) = v409;
            *(_WORD *)(v555 + 42) = 2048;
            *(double *)(v555 + 44) = v381;
            *(_WORD *)(v555 + 52) = 2048;
            *(double *)(v555 + 54) = v727;
            *(_WORD *)(v555 + 62) = 2048;
            *(double *)(v555 + 64) = v413;
            *(_WORD *)(v555 + 72) = 2048;
            *(double *)(v555 + 74) = v417;
            v556 = operator new();
            v557 = *(unsigned __int8 *)(v424 + 39);
            v558 = *(const char **)(v424 + 16);
            v559 = *(_QWORD *)(v424 + 24);
            v560 = *(_OWORD *)&object[24];
            *(_OWORD *)(v556 + 8) = *(_OWORD *)&object[8];
            if ((v557 & 0x80u) != 0)
              v557 = v559;
            else
              v558 = v697;
            *(_QWORD *)v556 = v554;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v556 + 24) = v560;
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v556 + 40) = v558;
            *(_QWORD *)(v556 + 48) = v557;
            *(_BYTE *)(v556 + 56) = 1;
            v779 = 0;
            v780 = v556;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v423 + 24) + 40))(*(_QWORD *)(v423 + 24), &v780);
            v561 = v780;
            v780 = 0;
            v419 = v707;
            if (v561)
            {
              v562 = *(std::__shared_weak_count **)(v561 + 32);
              if (v562)
              {
                v563 = (unint64_t *)&v562->__shared_owners_;
                do
                  v564 = __ldaxr(v563);
                while (__stlxr(v564 - 1, v563));
                if (!v564)
                {
                  ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
                  std::__shared_weak_count::__release_weak(v562);
                }
              }
              v565 = *(std::__shared_weak_count **)(v561 + 16);
              if (v565)
              {
                v566 = (unint64_t *)&v565->__shared_owners_;
                do
                  v567 = __ldaxr(v566);
                while (__stlxr(v567 - 1, v566));
                if (!v567)
                {
                  ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                  std::__shared_weak_count::__release_weak(v565);
                }
              }
              MEMORY[0x212BC6398](v561, 0x10F0C40B62ED6C6);
              v568 = v779;
              v779 = 0;
              if (v568)
              {
                v569 = *(std::__shared_weak_count **)(v568 + 32);
                if (v569)
                {
                  v570 = (unint64_t *)&v569->__shared_owners_;
                  do
                    v571 = __ldaxr(v570);
                  while (__stlxr(v571 - 1, v570));
                  if (!v571)
                  {
                    ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
                    std::__shared_weak_count::__release_weak(v569);
                  }
                }
                v572 = *(std::__shared_weak_count **)(v568 + 16);
                if (v572)
                {
                  v573 = (unint64_t *)&v572->__shared_owners_;
                  do
                    v574 = __ldaxr(v573);
                  while (__stlxr(v574 - 1, v573));
                  if (!v574)
                  {
                    ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
                    std::__shared_weak_count::__release_weak(v572);
                  }
                }
                MEMORY[0x212BC6398](v568, 0x10F0C40B62ED6C6);
              }
            }
            v575 = *(std::__shared_weak_count **)&object[32];
            v576 = v704;
            if (*(_QWORD *)&object[32])
            {
              v577 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v578 = __ldaxr(v577);
              while (__stlxr(v578 - 1, v577));
              if (!v578)
              {
                ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
                std::__shared_weak_count::__release_weak(v575);
              }
            }
            v579 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v580 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v581 = __ldaxr(v580);
              while (__stlxr(v581 - 1, v580));
              if (!v581)
              {
                ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
                std::__shared_weak_count::__release_weak(v579);
              }
            }
          }
          else
          {
            os_log_type_enabled(v546, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134219776;
            *(double *)&object[4] = v719;
            *(_WORD *)&object[12] = 2048;
            *(double *)&object[14] = categoryc;
            *(_WORD *)&object[22] = 2048;
            *(double *)&object[24] = (double)(unint64_t)((v681 - v675) >> 3)
                                   / (double)(unint64_t)((v687 - v678) >> 3);
            *(_WORD *)&object[32] = 2048;
            *(double *)&object[34] = v409;
            *(_WORD *)&object[42] = 2048;
            *(double *)&object[44] = v381;
            *(_WORD *)&object[52] = 2048;
            *(double *)&object[54] = v727;
            *(_WORD *)&object[62] = 2048;
            *(double *)v787 = v413;
            *(_WORD *)&v787[8] = 2048;
            *(double *)&v787[10] = v417;
            v582 = (void *)_os_log_send_and_compose_impl();
            v419 = v707;
            v576 = v704;
            if (v582)
              free(v582);
          }
          if (v576)
          {
            sub_20E8C003C((uint64_t)v764, "Run the second PnP that resulted in: Displacement (%.5f vs %.5f), 2D inliers ratio (%.1f vs %.1f), Spatial distribution (%f vs %f), Gyro-vs-vision-angle-diff (%.4f vs %.4f)", v719, categoryc, v408, v409, v381, v727, v413, v417);
            sub_20E863570((uint64_t)v764);
          }
          sub_20E863570((uint64_t)v764);
          v583 = v771;
          if (v771)
          {
            v584 = (unint64_t *)&v771->__shared_owners_;
            do
              v585 = __ldaxr(v584);
            while (__stlxr(v585 - 1, v584));
            if (!v585)
            {
              ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
              std::__shared_weak_count::__release_weak(v583);
            }
          }
          goto LABEL_740;
        }
      }
      memmove(v540, v538, v539);
      goto LABEL_672;
    }
  }
LABEL_740:
  if (v419)
  {
    v586 = sub_210219C18();
    v587 = *(_QWORD *)(v420 + 1008) - *(_QWORD *)(v420 + 1000);
    v588 = v373 * v373 + v374 * v374 + v375 * v375;
    v589 = vmulq_f64(v722, v722).f64[0] + v666 * v666 + v667 * v667;
    v590 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v590 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v591 = v587 >> 2;
    v592 = sqrt(v588);
    v593 = atomic_load(&qword_254A5A450);
    v594 = sqrt(v589);
    if (!v593)
    {
LABEL_762:
      if (os_signpost_enabled((os_log_t)*v586))
      {
        *(_DWORD *)object = 134220032;
        *(_QWORD *)&object[4] = v591;
        *(_WORD *)&object[12] = 2048;
        *(double *)&object[14] = v592;
        *(_WORD *)&object[22] = 2048;
        *(double *)&object[24] = v594;
        *(_WORD *)&object[32] = 2048;
        *(double *)&object[34] = (double)(unint64_t)((v681 - v675) >> 3)
                               / (double)(unint64_t)((v687 - v678) >> 3);
        *(_WORD *)&object[42] = 2048;
        *(double *)&object[44] = v409;
        *(_WORD *)&object[52] = 2048;
        *(double *)&object[54] = v381;
        *(_WORD *)&object[62] = 2048;
        *(double *)v787 = v727;
        *(_WORD *)&v787[8] = 2048;
        *(double *)&v787[10] = v413;
        *(_WORD *)&v787[18] = 2048;
        *(double *)&v787[20] = v417;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v602 = *v701;
      if (*v701)
      {
        v688[13] = (uint64_t)v602;
        operator delete(v602);
        *v701 = 0;
        v688[13] = 0;
        v688[14] = 0;
      }
      *((_OWORD *)v688 + 6) = *(_OWORD *)v777;
      v688[14] = v778;
      v778 = 0;
      v777[1] = 0;
      v777[0] = 0;
      v603 = (void *)v688[15];
      if (v603)
      {
        v688[16] = (uint64_t)v603;
        operator delete(v603);
        v688[15] = 0;
        v688[16] = 0;
        v688[17] = 0;
      }
      *(_OWORD *)(v688 + 15) = *(_OWORD *)v775;
      v688[17] = v776;
      v776 = 0;
      v775[1] = 0;
      v775[0] = 0;
      v604 = (void *)v688[18];
      if (v604)
      {
        operator delete(v604);
        *__srcb = 0;
        v688[19] = 0;
        v688[20] = 0;
      }
      v688[18] = (uint64_t)v773;
      *(_OWORD *)(v688 + 19) = v774;
      v774 = 0uLL;
      v773 = 0;
      sub_20E9BF954(v715, *(char **)(v420 + 712), *(char **)(v420 + 720), (uint64_t)(*(_QWORD *)(v420 + 720) - *(_QWORD *)(v420 + 712)) >> 4);
      *(_BYTE *)(v420 + 1024) = 1;
      sub_20F0DB384(&v772);
      if (**(int **)(v772 + 56) > 3)
        goto LABEL_858;
      v605 = *(unsigned __int8 *)(v772 + 72);
      v606 = sub_20E8C31DC(v772, "OSLogSurrogateAppender", 1, 0);
      v607 = v606;
      if (!v605 && !v606)
        goto LABEL_858;
      v764[0] = (__uint64_t)&v772;
      v764[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v765 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
      v766 = 3;
      v767 = "unknown file";
      v768 = 379;
      v771 = 0;
      v769 = "unknown function";
      v770 = 0;
      v608 = *(_QWORD *)v764[0];
      if (*(char *)(*(_QWORD *)v764[0] + 39) < 0)
      {
        v610 = *(const char **)(v608 + 16);
        v609 = *(_QWORD *)(v608 + 24);
      }
      else
      {
        v609 = *(unsigned __int8 *)(*(_QWORD *)v764[0] + 39);
        v610 = (const char *)(*(_QWORD *)v764[0] + 16);
      }
      __srce = *(_QWORD *)v764[0] + 16;
      v611 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v611 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v612 = byte_254A4A4F8;
      else
        v612 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v613 = byte_254A4A4F8[23];
      else
        v613 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v612, v610);
      v614 = &object[8];
      if (v613 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v613 >= 0x17)
      {
        v615 = v607;
        v616 = v610;
        v617 = v608;
        v618 = v605;
        v619 = (v613 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v613 | 7) != 0x17)
          v619 = v613 | 7;
        v620 = v619 + 1;
        v614 = operator new(v619 + 1);
        *(_QWORD *)&object[24] = v620 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v614;
        *(_QWORD *)&object[16] = v613;
        v605 = v618;
        v608 = v617;
        v610 = v616;
        v607 = v615;
      }
      else
      {
        object[31] = v613;
        if (!v613)
        {
LABEL_791:
          v614[v613] = 0;
          object[32] = 1;
          v621 = &object[40];
          if (v609 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v609 >= 0x17)
          {
            v622 = (v609 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v609 | 7) != 0x17)
              v622 = v609 | 7;
            v623 = v622 + 1;
            v621 = operator new(v622 + 1);
            *(_QWORD *)&object[56] = v623 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v621;
            *(_QWORD *)&object[48] = v609;
          }
          else
          {
            object[63] = v609;
            if (!v609)
              goto LABEL_799;
          }
          memmove(v621, v610, v609);
LABEL_799:
          v621[v609] = 0;
          v787[0] = 1;
          v624 = *(NSObject **)object;
          if ((object[63] & 0x80000000) != 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v607 && *(_QWORD *)(v607 + 24))
          {
            v625 = _os_log_pack_size();
            v626 = (std::__shared_weak_count_vtbl *)operator new(v625, (std::align_val_t)8uLL);
            v627 = (std::__shared_weak_count *)operator new();
            v628 = v627;
            v627->__shared_owners_ = 0;
            v629 = (unint64_t *)&v627->__shared_owners_;
            v627->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v627->__shared_weak_owners_ = 0;
            v627[1].__vftable = v626;
            *(_QWORD *)object = v626;
            *(_QWORD *)&object[8] = v626;
            *(_QWORD *)&object[16] = v627;
            do
              v630 = __ldxr(v629);
            while (__stxr(v630 + 1, v629));
            memset(&object[24], 0, 24);
            do
              v631 = __ldaxr(v629);
            while (__stlxr(v631 - 1, v629));
            if (!v631)
            {
              ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
              std::__shared_weak_count::__release_weak(v628);
            }
            v632 = *(_QWORD *)object;
            v633 = _os_log_pack_fill();
            *(_DWORD *)v633 = 134218240;
            *(double *)(v633 + 4) = v409;
            *(_WORD *)(v633 + 12) = 2048;
            *(double *)(v633 + 14) = v727;
            v634 = operator new();
            v635 = *(unsigned __int8 *)(v608 + 39);
            v636 = __srce;
            if ((v635 & 0x80u) != 0)
            {
              v636 = *(_QWORD *)(v608 + 16);
              v635 = *(_QWORD *)(v608 + 24);
            }
            *(_QWORD *)v634 = v632;
            *(_OWORD *)(v634 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v634 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v634 + 40) = v636;
            *(_QWORD *)(v634 + 48) = v635;
            *(_BYTE *)(v634 + 56) = 1;
            v779 = 0;
            v780 = v634;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v607 + 24) + 40))(*(_QWORD *)(v607 + 24), &v780);
            v637 = v780;
            v780 = 0;
            if (v637)
            {
              v638 = *(std::__shared_weak_count **)(v637 + 32);
              if (v638)
              {
                v639 = (unint64_t *)&v638->__shared_owners_;
                do
                  v640 = __ldaxr(v639);
                while (__stlxr(v640 - 1, v639));
                if (!v640)
                {
                  ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                  std::__shared_weak_count::__release_weak(v638);
                }
              }
              v641 = *(std::__shared_weak_count **)(v637 + 16);
              if (v641)
              {
                v642 = (unint64_t *)&v641->__shared_owners_;
                do
                  v643 = __ldaxr(v642);
                while (__stlxr(v643 - 1, v642));
                if (!v643)
                {
                  ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
                  std::__shared_weak_count::__release_weak(v641);
                }
              }
              MEMORY[0x212BC6398](v637, 0x10F0C40B62ED6C6);
              v644 = v779;
              v779 = 0;
              if (v644)
              {
                v645 = *(std::__shared_weak_count **)(v644 + 32);
                if (v645)
                {
                  v646 = (unint64_t *)&v645->__shared_owners_;
                  do
                    v647 = __ldaxr(v646);
                  while (__stlxr(v647 - 1, v646));
                  if (!v647)
                  {
                    ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                    std::__shared_weak_count::__release_weak(v645);
                  }
                }
                v648 = *(std::__shared_weak_count **)(v644 + 16);
                if (v648)
                {
                  v649 = (unint64_t *)&v648->__shared_owners_;
                  do
                    v650 = __ldaxr(v649);
                  while (__stlxr(v650 - 1, v649));
                  if (!v650)
                  {
                    ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                    std::__shared_weak_count::__release_weak(v648);
                  }
                }
                MEMORY[0x212BC6398](v644, 0x10F0C40B62ED6C6);
              }
            }
            v651 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v652 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v653 = __ldaxr(v652);
              while (__stlxr(v653 - 1, v652));
              if (!v653)
              {
                ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
                std::__shared_weak_count::__release_weak(v651);
              }
            }
            v654 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v655 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v656 = __ldaxr(v655);
              while (__stlxr(v656 - 1, v655));
              if (!v656)
              {
                ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
                std::__shared_weak_count::__release_weak(v654);
              }
            }
          }
          else
          {
            os_log_type_enabled(v624, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134218240;
            *(double *)&object[4] = v409;
            *(_WORD *)&object[12] = 2048;
            *(double *)&object[14] = v727;
            v657 = (void *)_os_log_send_and_compose_impl();
            if (v657)
              free(v657);
          }
          if (v605)
          {
            sub_20E8C003C((uint64_t)v764, "Selected the second PnP RANSAC pose with %f inliers and %f spatial distribution", v409, v727);
            sub_20E863570((uint64_t)v764);
          }
          sub_20E863570((uint64_t)v764);
          v658 = v771;
          if (v771)
          {
            v659 = (unint64_t *)&v771->__shared_owners_;
            do
              v660 = __ldaxr(v659);
            while (__stlxr(v660 - 1, v659));
            if (!v660)
            {
              ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
              std::__shared_weak_count::__release_weak(v658);
            }
          }
LABEL_858:
          v601 = v735;
          goto LABEL_859;
        }
      }
      memmove(v614, v612, v613);
      goto LABEL_791;
    }
    *(_DWORD *)object = 134220032;
    *(_QWORD *)&object[4] = v591;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v592;
    *(_WORD *)&object[22] = 2048;
    *(double *)&object[24] = v594;
    *(_WORD *)&object[32] = 2048;
    *(double *)&object[34] = (double)(unint64_t)((v681 - v675) >> 3)
                           / (double)(unint64_t)((v687 - v678) >> 3);
    *(_WORD *)&object[42] = 2048;
    *(double *)&object[44] = v409;
    *(_WORD *)&object[52] = 2048;
    *(double *)&object[54] = v381;
    *(_WORD *)&object[62] = 2048;
    *(double *)v787 = v727;
    *(_WORD *)&v787[8] = 2048;
    *(double *)&v787[10] = v413;
    *(_WORD *)&v787[18] = 2048;
    *(double *)&v787[20] = v417;
    v595 = (char *)_os_log_send_and_compose_impl();
    v596 = strlen(v595);
    v764[0] = 0;
    pthread_threadid_np(0, v764);
    v597 = v764[0];
    timespec_get((timespec *)v764, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v586 + 1), (__int128 *)(v586 + 5), "P3P. Second Hypo. Total3D: %lu,  d1: %f, d2: %f, Ratio2dInlier1: %.2f, Ratio2dInlier2: %.2f, SpaDist1: %f, SpaDist2: %f, anglediff1: %f, anglediff2: %f", 0x97uLL, v595, v596, v597, v764);
    std::mutex::lock(&stru_254A5A410);
    v598 = qword_254A5A458;
    for (k = unk_254A5A460; v598 != k; v598 += 40)
    {
      v600 = *(_QWORD *)(v598 + 32);
      if (!v600)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v600 + 48))(v600, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v791 < 0)
    {
      operator delete(v790);
      v420 = v713;
      if ((v789 & 0x80000000) == 0)
      {
LABEL_748:
        if (!v787[24])
        {
LABEL_755:
          if (object[56] && (object[55] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v595)
            free(v595);
          goto LABEL_762;
        }
LABEL_753:
        if ((v787[23] & 0x80000000) != 0)
          operator delete(*(void **)v787);
        goto LABEL_755;
      }
    }
    else
    {
      v420 = v713;
      if ((v789 & 0x80000000) == 0)
        goto LABEL_748;
    }
    operator delete(v788);
    if (!v787[24])
      goto LABEL_755;
    goto LABEL_753;
  }
  v601 = v748;
LABEL_859:
  v661 = v601[3];
  *(_OWORD *)(a8 + 32) = v601[2];
  *(_OWORD *)(a8 + 48) = v661;
  v662 = v601[5];
  *(_OWORD *)(a8 + 64) = v601[4];
  *(_OWORD *)(a8 + 80) = v662;
  v663 = v601[1];
  *(_OWORD *)a8 = *v601;
  *(_OWORD *)(a8 + 16) = v663;
  *(_BYTE *)(a8 + 96) = 1;
  if (v773)
    operator delete(v773);
  if (v775[0])
  {
    v775[1] = v775[0];
    operator delete(v775[0]);
  }
  if (v777[0])
  {
    v777[1] = v777[0];
    operator delete(v777[0]);
  }
LABEL_456:
  if (v23 != 0.0)
    operator delete(*(void **)&v23);
  if (v761)
  {
    v762 = v761;
    operator delete(v761);
  }
  if (v759)
  {
    v760 = v759;
    operator delete(v759);
  }
  if (__p)
  {
    v757 = __p;
    operator delete(__p);
  }
  if (v754[0])
  {
    v754[1] = v754[0];
    operator delete(v754[0]);
  }
}

void sub_20F0E0448(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;
  void *v4;

  if (LOBYTE(STACK[0x478]) && SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x350]);
  if (STACK[0x3A8])
  {
    operator delete((void *)STACK[0x3A8]);
    v3 = (void *)STACK[0x3C0];
    if (STACK[0x3C0])
      goto LABEL_6;
  }
  else
  {
    v3 = (void *)STACK[0x3C0];
    if (STACK[0x3C0])
    {
LABEL_6:
      STACK[0x3C8] = (unint64_t)v3;
      operator delete(v3);
      v4 = (void *)STACK[0x3E0];
      if (!STACK[0x3E0])
        goto LABEL_11;
LABEL_10:
      STACK[0x3E8] = (unint64_t)v4;
      operator delete(v4);
LABEL_11:
      if (v1)
        operator delete(v1);
      sub_20F0E0C74((uint64_t)&STACK[0x2A0]);
      _Unwind_Resume(a1);
    }
  }
  v4 = (void *)STACK[0x3E0];
  if (!STACK[0x3E0])
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t sub_20F0E0C74(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F0E0CD4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned __int8 a8@<W7>, uint64_t a9@<X8>, char a10)
{
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t v23;
  int64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v30;
  unint64_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v43;
  int8x16_t v45;
  int8x16_t v46;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v61;
  unint64_t v62;
  float64x2_t v63;
  float64x2_t v66;
  float64x2_t v68;
  float64x2_t v69;
  int8x16_t v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  double v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v102;
  size_t v103;
  const char *v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  const char *v107;
  size_t v108;
  __int128 *v109;
  unint64_t v110;
  const char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void **v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  NSObject *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  unint64_t v126;
  os_log_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v159;
  int v160;
  int v161;
  _QWORD v162[3];
  int v163;
  const char *v164;
  int v165;
  const char *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  _OWORD v170[8];
  _OWORD v171[10];
  int v172;
  uint64_t v173;
  uint64_t v174;
  os_log_t v175;
  __int128 v176;
  __int128 v177;
  void *v178[2];
  unint64_t v179;
  char v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  v19 = *a4;
  memset(&v171[8], 0, 32);
  v172 = 733220816;
  kdebug_trace();
  v20 = sub_20F0D7898((uint64_t)a2, a3, a4, a5, a8, (uint64_t)a1);
  v21 = *(_QWORD *)(*(_QWORD *)(*a3 + 8 * *a4) + 8) + 1664 * a4[1];
  v22 = *(_QWORD *)(*(_QWORD *)(*a3 + 8 * *a5) + 8) + 1664 * a5[1];
  v23.f64[0] = *(float64_t *)(v22 + 16);
  v24 = *(int64x2_t *)(v22 + 24);
  _D18 = *(_QWORD *)(v22 + 64);
  v26 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v22, v24);
  v27 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v22, v24);
  v23.f64[1] = *(float64_t *)(v22 + 40);
  v28 = vextq_s8((int8x16_t)v27, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v22 + 48), 1), 8uLL);
  _Q0.f64[0] = *(float64_t *)(v22 + 88);
  _Q7 = *(float64x2_t *)(v22 + 72);
  v30 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v26, vnegq_f64(_Q7).f64[0]), v27, _Q7, 1), v23, _Q0.f64[0], 0);
  _D17 = *(_QWORD *)(v22 + 56);
  __asm
  {
    FMLS            D5, D17, V7.D[1]
    FMLS            D5, D18, V0.D[0]
  }
  _Q0 = (float64x2_t)*(unint64_t *)&_Q0.f64[0];
  _Q7.f64[0] = *(float64_t *)(v22 + 48);
  *(_QWORD *)&v27.f64[1] = v28.i64[0];
  v38 = _D18;
  _Q5.f64[1] = 1.0;
  v39 = *(double *)(v21 + 16);
  _D20 = *(double *)(v21 + 40);
  v41 = *(float64x2_t *)(v21 + 24);
  _D18 = *(double *)(v21 + 64);
  v43 = *(float64x2_t *)(v21 + 48);
  _Q22 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v21, (int64x2_t)v41);
  v45 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q22, 1);
  v46 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q22.f64[0], 0);
  _D27 = *(double *)(v21 + 88);
  _Q28 = *(float64x2_t *)(v21 + 72);
  v49 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v21, (int64x2_t)v41);
  v50 = vmlsq_laneq_f64(vmulq_n_f64(v49, vnegq_f64(_Q28).f64[0]), _Q22, _Q28, 1);
  _Q22.f64[0] = v39;
  _Q22.f64[1] = _D20;
  _Q31 = vmlsq_lane_f64(v50, _Q22, _D27, 0);
  _Q22.f64[0] = *(float64_t *)(v21 + 56);
  __asm
  {
    FMLS            D29, D22, V28.D[1]
    FMLS            D29, D18, V27.D[0]
  }
  _Q25 = (int64x2_t)vextq_s8(v46, v45, 8uLL);
  v55 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v49, _Q25), vnegq_f64(_Q31).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v49, _Q25), _Q31, 1), v43, _D29, 0);
  __asm
  {
    FMLS            D25, D20, V31.D[1]
    FMLS            D25, D18, V29.D[0]
  }
  v56 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], *(double *)v21), (float64x2_t)v28.u64[1], *(float64x2_t *)v21, 1), (float64x2_t)v38, v39), (float64x2_t)0, _Q5);
  v171[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)v21), v27, *(float64x2_t *)v21, 1), v23, v39), (float64x2_t)0, v30);
  v171[1] = v56;
  v171[2] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v41.f64[0]), v27, v41, 1), v23, _D20), (float64x2_t)0, v30);
  v171[3] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v41.f64[0]), (float64x2_t)v28.u64[1], v41, 1), (float64x2_t)v38, _D20), (float64x2_t)0, _Q5);
  v171[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v43.f64[0]), v27, v43, 1), v23, _D18), (float64x2_t)0, v30);
  v171[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v43.f64[0]), (float64x2_t)v28.u64[1], v43, 1), (float64x2_t)v38, _D18), (float64x2_t)0, _Q5);
  v171[6] = vaddq_f64(v30, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v55.f64[0]), v27, v55, 1), v23, *(double *)_Q25.i64));
  v171[7] = vaddq_f64(_Q5, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v55.f64[0]), (float64x2_t)v28.u64[1], v55, 1), (float64x2_t)v38, *(double *)_Q25.i64));
  if (*(_BYTE *)(v21 + 1536))
    v57 = v21 + 96;
  else
    v57 = 0;
  if (*(_BYTE *)(v22 + 1536))
    v58 = v22 + 96;
  else
    v58 = 0;
  v63.f64[0] = *(float64_t *)(v21 + 16);
  _Q5 = *(int64x2_t *)(v21 + 24);
  _D18 = *(double *)(v21 + 64);
  v61 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v21, _Q5);
  v62 = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v69 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v21, _Q5);
  v63.f64[1] = *(float64_t *)(v21 + 40);
  _D20 = *(double *)(v21 + 88);
  _Q7 = *(float64x2_t *)(v21 + 72);
  v66 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v61, vnegq_f64(_Q7).f64[0]), v69, _Q7, 1), v63, _D20, 0);
  _D21 = *(_QWORD *)(v21 + 56);
  __asm { FMLS            D5, D21, V7.D[1] }
  v68 = (float64x2_t)*(unint64_t *)(v21 + 48);
  __asm { FMLS            D5, D18, V20.D[0] }
  v70 = vextq_s8((int8x16_t)v69, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v21 + 48), 1), 8uLL);
  *(_QWORD *)&v69.f64[1] = v70.i64[0];
  _Q0.f64[0] = _D18;
  _Q5.f64[1] = 1.0;
  v72 = a2[4];
  if (v72 > 1)
  {
    v74 = v72 - 2;
    v73 = *a2;
  }
  else
  {
    v73 = *a2;
    v74 = v72 - 0x7063E7063E7063E7 * ((a2[1] - *a2) >> 3) - 2;
  }
  v75 = v73 + 328 * v74;
  _Q23.f64[0] = *(float64_t *)(v75 + 72);
  v77 = *(float64x2_t *)(v75 + 56);
  v78 = *(double *)(v75 + 96);
  v79 = *(float64x2_t *)(v75 + 80);
  v80 = *(double *)(v75 + 120);
  _Q21 = *(float64x2_t *)(v75 + 104);
  v82 = *(double *)(v75 + 216);
  *(_QWORD *)&v61.f64[1] = v62;
  v83 = vmulq_n_f64(v61, _Q23.f64[0]);
  v84 = vmulq_n_f64(v68, _Q23.f64[0]);
  _Q23.f64[1] = v78;
  v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v77, (int64x2_t)v79), *(double *)(v75 + 200)), (float64x2_t)vzip2q_s64((int64x2_t)v77, (int64x2_t)v79), *(float64x2_t *)(v75 + 200), 1), _Q23, v82);
  _D25 = *(_QWORD *)(v75 + 208);
  __asm { FMLA            D23, D25, V21.D[1] }
  _Q23.f64[0] = _Q23.f64[0] + v80 * v82;
  *(_QWORD *)&v87 = *(_OWORD *)&vnegq_f64(v85);
  v170[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v61, v77.f64[0]), v69, v79.f64[0]), v63, _Q21.f64[0]), (float64x2_t)0, v66);
  v170[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v68, v77.f64[0]), (float64x2_t)v70.u64[1], v79.f64[0]), _Q0, _Q21.f64[0]), (float64x2_t)0, _Q5);
  v170[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v61, v77, 1), v69, v79, 1), v63, _Q21, 1), (float64x2_t)0, v66);
  v170[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v68, v77, 1), (float64x2_t)v70.u64[1], v79, 1), _Q0, _Q21, 1), (float64x2_t)0, _Q5);
  v170[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v83, v69, v78), v63, v80), (float64x2_t)0, v66);
  v170[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v84, (float64x2_t)v70.u64[1], v78), _Q0, v80), (float64x2_t)0, _Q5);
  v170[6] = vaddq_f64(v66, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v61, v87), v69, v85, 1), v63, _Q23.f64[0], 0));
  v170[7] = vaddq_f64(_Q5, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v68, v87), (float64x2_t)v70.u64[1], v85, 1), _Q0, _Q23.f64[0], 0));
  sub_20F0DB478((uint64_t)a1, (uint64_t)v171, v57, v58, a7, (uint64_t)v170, a1, a9);
  if (a10)
  {
    v88 = *(_QWORD *)(a2[7] + 168 * v19 + 16);
    v90 = *(_QWORD *)(v88 + 48);
    v89 = *(_QWORD *)(v88 + 56);
    if (v89 != v90)
    {
      v91 = 0;
      v92 = 0;
      do
      {
        v93 = *(_QWORD **)(v90 + 8 * v91);
        if (v93)
        {
          v94 = v93[8];
          if ((int)v94 > (int)a6)
          {
            v95 = v93[9];
            v96 = (v94 + v93[12] - 1) % (unint64_t)(v93[10] - v95);
            if (((*(_QWORD *)(a1[18] + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v92) & 1) != 0)
            {
              *(_BYTE *)(v95 + v96) = 1;
              *(_BYTE *)(v93[9] + (unint64_t)(v93[12] + (int)v94 + ~(_DWORD)a6) % (v93[10] - v93[9])) = 1;
            }
            else
            {
              *(_BYTE *)(v95 + v96) = 0;
            }
            ++v92;
            v90 = *(_QWORD *)(v88 + 48);
            v89 = *(_QWORD *)(v88 + 56);
          }
        }
        ++v91;
      }
      while (v91 < (v89 - v90) >> 3);
    }
  }
  v97 = sub_20F0D2798((uint64_t)a1, (uint64_t)a2, v19, 0, a6);
  sub_20F0DB384(&v169);
  if (**(int **)(v169 + 56) <= 3)
  {
    v98 = *(unsigned __int8 *)(v169 + 72);
    v99 = sub_20E8C31DC(v169, "OSLogSurrogateAppender", 1, 0);
    v100 = v99;
    if (v98 || v99 != 0)
    {
      v160 = v98;
      v161 = v20;
      v162[0] = &v169;
      v162[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v162[2] = std::chrono::system_clock::now().__d_.__rep_;
      v163 = 3;
      v164 = "unknown file";
      v165 = 439;
      v167 = 0;
      v168 = 0;
      v166 = "unknown function";
      v102 = v169;
      if (*(char *)(v169 + 39) < 0)
      {
        v104 = *(const char **)(v169 + 16);
        v103 = *(_QWORD *)(v169 + 24);
        v159 = *(_QWORD *)v162[0] + 16;
        v106 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v106 & 1) != 0)
          goto LABEL_29;
      }
      else
      {
        v103 = *(unsigned __int8 *)(v169 + 39);
        v104 = (const char *)(*(_QWORD *)v162[0] + 16);
        v159 = (uint64_t)v104;
        v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v105 & 1) != 0)
          goto LABEL_29;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v175);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v175);
        if ((_BYTE)v177 && SHIBYTE(v176) < 0)
          operator delete(v175);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_29:
      if (byte_254A4A4F8[23] >= 0)
        v107 = byte_254A4A4F8;
      else
        v107 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v108 = byte_254A4A4F8[23];
      else
        v108 = *(_QWORD *)&byte_254A4A4F8[8];
      v175 = os_log_create(v107, v104);
      v109 = &v176;
      if (v108 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v108 >= 0x17)
      {
        v110 = v100;
        v111 = v104;
        v112 = v102;
        v113 = v97;
        v114 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v114 = v108 | 7;
        v115 = v114 + 1;
        v109 = (__int128 *)operator new(v114 + 1);
        *((_QWORD *)&v176 + 1) = v108;
        *(_QWORD *)&v177 = v115 | 0x8000000000000000;
        *(_QWORD *)&v176 = v109;
        v97 = v113;
        v102 = v112;
        v104 = v111;
        v100 = v110;
      }
      else
      {
        BYTE7(v177) = v108;
        if (!v108)
        {
LABEL_43:
          *((_BYTE *)v109 + v108) = 0;
          BYTE8(v177) = 1;
          v116 = v178;
          if (v103 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v103 >= 0x17)
          {
            v118 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v103 | 7) != 0x17)
              v118 = v103 | 7;
            v119 = v118 + 1;
            v116 = (void **)operator new(v118 + 1);
            v178[1] = (void *)v103;
            v179 = v119 | 0x8000000000000000;
            v178[0] = v116;
          }
          else
          {
            HIBYTE(v179) = v103;
            if (!v103)
            {
              LOBYTE(v178[0]) = 0;
              v180 = 1;
              v117 = v175;
              if ((SHIBYTE(v179) & 0x80000000) == 0)
                goto LABEL_47;
              goto LABEL_53;
            }
          }
          memmove(v116, v104, v103);
          *((_BYTE *)v116 + v103) = 0;
          v180 = 1;
          v117 = v175;
          if ((SHIBYTE(v179) & 0x80000000) == 0)
          {
LABEL_47:
            if (!BYTE8(v177))
              goto LABEL_56;
            goto LABEL_54;
          }
LABEL_53:
          operator delete(v178[0]);
          if (!BYTE8(v177))
          {
LABEL_56:
            if (v175)
              os_release(v175);
            if (v100 && *(_QWORD *)(v100 + 24))
            {
              v120 = _os_log_pack_size();
              v121 = operator new(v120, (std::align_val_t)8uLL);
              v122 = (std::__shared_weak_count *)operator new();
              v123 = v122;
              v122->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v122->__shared_owners_;
              v122->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v122->__shared_weak_owners_ = 0;
              v122[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
              v175 = v121;
              *(_QWORD *)&v176 = v121;
              *((_QWORD *)&v176 + 1) = v122;
              do
                v125 = __ldxr(p_shared_owners);
              while (__stxr(v125 + 1, p_shared_owners));
              v177 = 0uLL;
              v178[0] = 0;
              do
                v126 = __ldaxr(p_shared_owners);
              while (__stlxr(v126 - 1, p_shared_owners));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v123);
              }
              v127 = v175;
              v128 = _os_log_pack_fill();
              *(_DWORD *)v128 = 67109632;
              *(_DWORD *)(v128 + 4) = v161;
              *(_WORD *)(v128 + 8) = 1024;
              *(_DWORD *)(v128 + 10) = v97;
              *(_WORD *)(v128 + 14) = 2048;
              *(_QWORD *)(v128 + 16) = a6;
              v129 = operator new();
              v130 = *(unsigned __int8 *)(v102 + 39);
              v131 = v159;
              if ((v130 & 0x80u) != 0)
              {
                v131 = *(_QWORD *)(v102 + 16);
                v130 = *(_QWORD *)(v102 + 24);
              }
              *(_QWORD *)v129 = v127;
              *(_OWORD *)(v129 + 8) = v176;
              v176 = 0uLL;
              *(_OWORD *)(v129 + 24) = v177;
              v177 = 0uLL;
              *(_QWORD *)(v129 + 40) = v131;
              *(_QWORD *)(v129 + 48) = v130;
              *(_BYTE *)(v129 + 56) = 1;
              v173 = 0;
              v174 = v129;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v174);
              v132 = v174;
              v174 = 0;
              v133 = v161;
              if (v132)
              {
                v134 = *(std::__shared_weak_count **)(v132 + 32);
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
                v137 = *(std::__shared_weak_count **)(v132 + 16);
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
                v140 = v173;
                v173 = 0;
                if (v140)
                {
                  v141 = *(std::__shared_weak_count **)(v140 + 32);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  v144 = *(std::__shared_weak_count **)(v140 + 16);
                  if (v144)
                  {
                    v145 = (unint64_t *)&v144->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  MEMORY[0x212BC6398](v140, 0x10F0C40B62ED6C6);
                }
              }
              v147 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
              v148 = v160;
              if (*((_QWORD *)&v177 + 1))
              {
                v149 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                  std::__shared_weak_count::__release_weak(v147);
                }
              }
              v151 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
              if (*((_QWORD *)&v176 + 1))
              {
                v152 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            else
            {
              os_log_type_enabled(v117, OS_LOG_TYPE_INFO);
              LODWORD(v175) = 67109632;
              v133 = v161;
              HIDWORD(v175) = v161;
              LOWORD(v176) = 1024;
              *(_DWORD *)((char *)&v176 + 2) = v97;
              WORD3(v176) = 2048;
              *((_QWORD *)&v176 + 1) = a6;
              v154 = (void *)_os_log_send_and_compose_impl();
              v148 = v160;
              if (v154)
                free(v154);
            }
            if (v148)
            {
              sub_20E8C003C((uint64_t)v162, "Got %d point correspondences and %d line correspondences to reference frame (which is %zu frames back)", v133, v97, a6);
              sub_20E863570((uint64_t)v162);
            }
            sub_20E863570((uint64_t)v162);
            v155 = v168;
            if (v168)
            {
              v156 = (unint64_t *)&v168->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            return kdebug_trace();
          }
LABEL_54:
          if (SBYTE7(v177) < 0)
            operator delete((void *)v176);
          goto LABEL_56;
        }
      }
      memmove(v109, v107, v108);
      goto LABEL_43;
    }
  }
  return kdebug_trace();
}

void sub_20F0E1948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v7 - 152))
  {
    if (*(char *)(v7 - 153) < 0)
      operator delete(*(void **)(v7 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  sub_20E8E69C4(v7 - 240);
  _Unwind_Resume(a1);
}

void sub_20F0E1A54(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  double *v17;
  unsigned int v18;
  int v19;
  double v20;
  double v21;
  double v23;
  double v29;
  float64x2_t v30;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  int v46;
  float64x2_t v48;
  double v49;
  double v51;
  double v52;
  double v53;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  int v62;
  int v63;
  BOOL v64;
  float64x2_t v65;
  double v66;
  double v68;
  double v69;
  float64x2_t v70;
  double v71;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int v80;
  int v81;
  BOOL v82;
  float64x2_t v83;
  double v84;
  double v86;
  double v87;
  float64x2_t v88;
  unsigned int v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float64x2_t v98;
  double v99;
  unint64_t v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float64x2_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v116;
  float64x2_t v117;
  double *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  double *v124;
  uint64_t v125;
  _BYTE *v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  double *v136;
  unsigned int v137;
  int v138;
  double v139;
  double v140;
  double v142;
  double v145;
  float64x2_t v146;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  int v161;
  int v162;
  BOOL v163;
  float64x2_t v164;
  double v165;
  double v167;
  double v168;
  double v169;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  int v178;
  int v179;
  BOOL v180;
  float64x2_t v181;
  double v182;
  double v184;
  double v185;
  float64x2_t v186;
  double v187;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  int v196;
  int v197;
  BOOL v198;
  float64x2_t v199;
  double v200;
  double v202;
  double v203;
  float64x2_t v204;
  unsigned int v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  float64x2_t v214;
  double v215;
  unint64_t v216;
  double *v217;
  double v218;
  double v219;
  double v220;
  double v221;
  float64x2_t v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v232;
  float64x2_t v233;
  double *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  double *v240;
  uint64_t v241;
  _BYTE *v242;
  float64x2_t *v243;
  float64x2_t *v244;
  size_t v245;
  unint64_t v246;
  _BYTE *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  double *v252;
  unsigned int v253;
  int v254;
  double v255;
  double v256;
  double v258;
  double v261;
  float64x2_t v262;
  float64x2_t v266;
  float64x2_t v267;
  double v268;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  int v277;
  int v278;
  BOOL v279;
  float64x2_t v280;
  double v281;
  double v283;
  double v284;
  double v285;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  int v294;
  int v295;
  BOOL v296;
  float64x2_t v297;
  double v298;
  double v300;
  double v301;
  float64x2_t v302;
  double v303;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  int v312;
  int v313;
  BOOL v314;
  float64x2_t v315;
  double v316;
  double v318;
  double v319;
  float64x2_t v320;
  unsigned int v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  float64x2_t v330;
  double v331;
  unint64_t v332;
  double *v333;
  double v334;
  double v335;
  double v336;
  double v337;
  float64x2_t v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v348;
  float64x2_t v349;
  double *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  double *v356;
  uint64_t v357;
  _BYTE *v358;
  float64x2_t *v359;
  float64x2_t *v360;
  size_t v361;
  unint64_t v362;
  _BYTE *v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  int64x2_t *v368;
  double *v369;
  unsigned int v370;
  int v371;
  double v372;
  double v373;
  double v375;
  double v378;
  float64x2_t v379;
  float64x2_t v383;
  float64x2_t v384;
  double v385;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  int v394;
  int v395;
  BOOL v396;
  float64x2_t v397;
  double v398;
  double v400;
  double v401;
  double v402;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  int v411;
  int v412;
  BOOL v413;
  float64x2_t v414;
  double v415;
  double v417;
  double v418;
  float64x2_t v419;
  double v420;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  int v429;
  int v430;
  BOOL v431;
  float64x2_t v432;
  double v433;
  double v435;
  double v436;
  float64x2_t v437;
  unsigned int v438;
  double v439;
  double v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  double v446;
  float64x2_t v447;
  double v448;
  unint64_t v449;
  double *v450;
  double v451;
  double v452;
  double v453;
  double v454;
  float64x2_t v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v465;
  float64x2_t v466;
  double *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  char *v472;
  double *v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  double *v477;
  unsigned int v478;
  int v479;
  double v480;
  double v481;
  double v483;
  double v486;
  float64x2_t v487;
  float64x2_t v491;
  float64x2_t v492;
  double v493;
  double v497;
  double v498;
  double v499;
  double v500;
  double v501;
  int v502;
  int v503;
  BOOL v504;
  float64x2_t v505;
  double v506;
  double v508;
  double v509;
  double v510;
  double v514;
  double v515;
  double v516;
  double v517;
  double v518;
  int v519;
  int v520;
  BOOL v521;
  float64x2_t v522;
  double v523;
  double v525;
  double v526;
  float64x2_t v527;
  double v528;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  int v537;
  int v538;
  BOOL v539;
  float64x2_t v540;
  double v541;
  double v543;
  double v544;
  float64x2_t v545;
  unsigned int v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  double v554;
  float64x2_t v555;
  double v556;
  unint64_t v557;
  double *v558;
  double v559;
  double v560;
  double v561;
  double v562;
  float64x2_t v563;
  double v564;
  double v565;
  double v566;
  double v567;
  double v568;
  double v569;
  double v573;
  float64x2_t v574;
  double *v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unint64_t v579;
  char *v580;
  double *v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  double *v585;
  unsigned int v586;
  int v587;
  double v588;
  double v589;
  double v591;
  double v594;
  float64x2_t v595;
  float64x2_t v599;
  float64x2_t v600;
  double v601;
  double v605;
  double v606;
  double v607;
  double v608;
  double v609;
  int v610;
  int v611;
  BOOL v612;
  float64x2_t v613;
  double v614;
  double v616;
  double v617;
  double v618;
  double v622;
  double v623;
  double v624;
  double v625;
  double v626;
  int v627;
  int v628;
  BOOL v629;
  float64x2_t v630;
  double v631;
  double v633;
  double v634;
  float64x2_t v635;
  double v636;
  double v640;
  double v641;
  double v642;
  double v643;
  double v644;
  int v645;
  int v646;
  BOOL v647;
  float64x2_t v648;
  double v649;
  double v651;
  double v652;
  float64x2_t v653;
  unsigned int v654;
  double v655;
  double v656;
  double v657;
  double v658;
  double v659;
  double v660;
  double v661;
  double v662;
  float64x2_t v663;
  double v664;
  unint64_t v665;
  double *v666;
  double v667;
  double v668;
  double v669;
  double v670;
  float64x2_t v671;
  double v672;
  double v673;
  double v674;
  double v675;
  double v676;
  double v677;
  double v681;
  float64x2_t v682;
  double *v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v686;
  unint64_t v687;
  char *v688;
  double *v689;
  uint64_t v690;
  double *v691;
  double *v692;
  double *v693;
  double *v694;
  double *v695;
  double **v696;
  double **v697;
  double **v698;
  double **v699;
  double **v700;
  float64x2_t v701;
  double v702;
  float64x2_t v703;
  uint64_t v704;

  v704 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 + 96;
  v7 = *(unsigned __int8 *)(v5 + 1536);
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  if (!v7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 448, (uint64_t)"lens0", 5, (uint64_t)"Invalid lens model", 18, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v697 = (double **)(a3 + 24);
  v9 = a1[123];
  v10 = a1[122];
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)v11 > 0x3FFFFFFFFFFFFFFCLL)
      goto LABEL_1096;
    v12 = (char *)operator new(4 * v11);
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v12;
    *(_QWORD *)(a3 + 40) = &v12[16 * (v11 >> 2)];
  }
  v13 = a1[108] - a1[107];
  if ((unint64_t)v13 >= 0x10)
  {
    v475 = 0;
    v476 = (unint64_t)(v13 >> 3) >> 1;
    v695 = (double *)(v8 + 168);
    while (1)
    {
      v701 = *(float64x2_t *)(a1[107] + 16 * v475);
      v702 = 1.0;
      v478 = *(_DWORD *)(v8 + 992);
      if (v478 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1093;
        }
        v478 = *(_DWORD *)(v8 + 992);
        if (v478 > 7)
        {
LABEL_741:
          if (v478 <= 0xB)
          {
            if (v478 <= 9)
            {
              if (v478 == 9)
              {
                v479 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_843;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v497 = sqrt(_D6);
              v498 = fabs(v702);
              v499 = fabs(v497);
              v500 = v498 / v499;
              if (v498 >= v499)
                v500 = v499 / v498;
              if (v500 <= 0.414213562)
              {
                v502 = 1;
                v503 = 2;
                v501 = v500;
                if (_D6 >= 0.00000001)
                  goto LABEL_771;
              }
              else
              {
                v501 = (v499 - v498) / (v498 + v499);
                if (v498 >= v499)
                  v501 = -v501;
                v502 = -1;
                v503 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_771:
                  if (v498 < v499)
                    v502 = -v502;
                  else
                    v503 = v500 > 0.414213562;
                  v504 = v497 == INFINITY && v498 == INFINITY;
                  v505 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v501 * v501), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v501 * v501), (float64x2_t)xmmword_210315370), v501 * v501 * (v501 * v501))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v501 * v501), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v501 * v501), (float64x2_t)xmmword_210315380), v501 * v501 * (v501 * v501))),
                             v501 * v501 * (v501 * v501) * (v501 * v501 * (v501 * v501))));
                  v506 = v501 + v501 * vdivq_f64(v505, (float64x2_t)vdupq_laneq_s64((int64x2_t)v505, 1)).f64[0];
                  if (v504)
                    v506 = 0.785398163;
                  if (v497 == 0.0 && v702 == 0.0)
                    v508 = 0.0;
                  else
                    v508 = v506;
                  if (v702 < 0.0)
                  {
                    v503 = 4 - v503;
                    v502 = -v502;
                  }
                  if (v497 < 0.0)
                  {
                    v503 = -v503;
                    v502 = -v502;
                  }
                  v509 = (double)v503 * 3.061617e-17 + (double)v503 * 0.785398163 + v508 * (double)v502;
                  v510 = 1.0
                       / v497
                       * (v509
                        * (v509
                         * v509
                         * (*(double *)(v8 + 168)
                          + v509
                          * v509
                          * (*(double *)(v8 + 176)
                           + v509
                           * v509
                           * (*(double *)(v8 + 184)
                            + v509
                            * v509
                            * (*(double *)(v8 + 192)
                             + v509
                             * v509
                             * (*(double *)(v8 + 200)
                              + v509 * v509 * (*(double *)(v8 + 208) + v509 * v509 * *(double *)(v8 + 216)))))))
                         + 1.0));
LABEL_865:
                  v555 = vmulq_n_f64(v701, v510);
                  v703 = v555;
                  v553 = *(double *)v8;
                  v551 = *(double *)(v8 + 8);
                  v554 = v555.f64[1];
                  v550 = *(double *)(v8 + 16);
                  v552 = *(double *)(v8 + 32);
                  v549 = *(double *)(v8 + 40);
LABEL_866:
                  v547 = v550 + v553 * v555.f64[0] + v551 * v554;
                  v556 = v554 * v552 + v549;
                  v558 = *(double **)(a3 + 8);
                  v557 = *(_QWORD *)(a3 + 16);
                  if ((unint64_t)v558 >= v557)
                  {
LABEL_885:
                    v575 = *(double **)a3;
                    v576 = ((uint64_t)v558 - *(_QWORD *)a3) >> 4;
                    v577 = v576 + 1;
                    if ((unint64_t)(v576 + 1) >> 60)
                      sub_20E867F44();
                    v578 = v557 - (_QWORD)v575;
                    if (v578 >> 3 > v577)
                      v577 = v578 >> 3;
                    if ((unint64_t)v578 >= 0x7FFFFFFFFFFFFFF0)
                      v579 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v579 = v577;
                    if (v579)
                    {
                      if (v579 >> 60)
                        sub_20E877A38();
                      v580 = (char *)operator new(16 * v579);
                      v581 = (double *)&v580[16 * v576];
                      *v581 = v547;
                      v581[1] = v556;
                      v582 = (uint64_t)v581;
                      if (v558 == v575)
                      {
LABEL_894:
                        v477 = v581 + 2;
                        *(_QWORD *)a3 = v582;
                        *(_QWORD *)(a3 + 8) = v581 + 2;
                        *(_QWORD *)(a3 + 16) = &v580[16 * v579];
                        if (!v558)
                          goto LABEL_730;
LABEL_899:
                        operator delete(v558);
LABEL_730:
                        *(_QWORD *)(a3 + 8) = v477;
                        goto LABEL_731;
                      }
                    }
                    else
                    {
                      v580 = 0;
                      v581 = (double *)(16 * v576);
                      *v581 = v547;
                      v581[1] = v556;
                      v582 = 16 * v576;
                      if (v558 == v575)
                        goto LABEL_894;
                    }
                    do
                    {
                      *(_OWORD *)(v582 - 16) = *((_OWORD *)v558 - 1);
                      v582 -= 16;
                      v558 -= 2;
                    }
                    while (v558 != v575);
                    v558 = *(double **)a3;
                    v477 = v581 + 2;
                    *(_QWORD *)a3 = v582;
                    *(_QWORD *)(a3 + 8) = v581 + 2;
                    *(_QWORD *)(a3 + 16) = &v580[16 * v579];
                    if (!v558)
                      goto LABEL_730;
                    goto LABEL_899;
                  }
LABEL_729:
                  *v558 = v547;
                  v558[1] = v556;
                  v477 = v558 + 2;
                  goto LABEL_730;
                }
              }
              v510 = 1.0 / v702;
              goto LABEL_865;
            }
            if (v478 == 10)
              v479 = sub_20EB24288(&v703, (uint64_t)&v701, v695, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v479 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_843:
            if (!v479)
              goto LABEL_731;
            v546 = *(_DWORD *)(v8 + 992);
            if (v546 != -1)
            {
              if (v546 <= 7)
                goto LABEL_846;
LABEL_852:
              if (v546 <= 0xB)
              {
                v551 = *(double *)(v8 + 8);
                v550 = *(double *)(v8 + 16);
                v552 = *(double *)(v8 + 32);
                v549 = *(double *)(v8 + 40);
                v553 = *(double *)v8;
                v554 = v703.f64[1];
                v555.f64[0] = v703.f64[0];
                if (v546 <= 9)
                  goto LABEL_866;
                v547 = v550 + v553 * v703.f64[0] + v551 * v703.f64[1];
                v548 = v552 * v703.f64[1];
LABEL_855:
                v556 = v549 + v548;
                v558 = *(double **)(a3 + 8);
                v557 = *(_QWORD *)(a3 + 16);
                if ((unint64_t)v558 >= v557)
                  goto LABEL_885;
                goto LABEL_729;
              }
LABEL_858:
              v547 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v556 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v558 = *(double **)(a3 + 8);
              v557 = *(_QWORD *)(a3 + 16);
              if ((unint64_t)v558 >= v557)
                goto LABEL_885;
              goto LABEL_729;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1093;
            }
            v546 = *(_DWORD *)(v8 + 992);
            if (v546 > 7)
              goto LABEL_852;
LABEL_846:
            if (v546 <= 3)
            {
              if (v546 <= 1)
              {
                if (!v546)
                {
LABEL_1092:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1093:
                  abort();
                }
                goto LABEL_849;
              }
              v491 = v703;
LABEL_876:
              v547 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v491));
              v556 = vmuld_lane_f64(*(double *)(v8 + 32), v491, 1) + *(double *)(v8 + 40);
              v558 = *(double **)(a3 + 8);
              v557 = *(_QWORD *)(a3 + 16);
              if ((unint64_t)v558 >= v557)
                goto LABEL_885;
              goto LABEL_729;
            }
            if (v546 > 5)
              goto LABEL_858;
LABEL_883:
            v564 = *(double *)v8;
            v565 = *(double *)(v8 + 8);
            v566 = v703.f64[1];
            v563.f64[0] = v703.f64[0];
            v567 = *(double *)(v8 + 16);
            v569 = *(double *)(v8 + 32);
            v568 = *(double *)(v8 + 40);
LABEL_884:
            v547 = v567 + v564 * v563.f64[0] + v565 * v566;
            v556 = v566 * v569 + v568;
            v558 = *(double **)(a3 + 8);
            v557 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v558 >= v557)
              goto LABEL_885;
            goto LABEL_729;
          }
          if (v478 > 0xD)
          {
            if (v478 == 14)
              v479 = sub_20EB247C0(&v703, (uint64_t)&v701, v695, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v479 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_843;
          }
          if (v478 != 13 || v702 < 0.00000001)
            goto LABEL_731;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v483 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v486 = v483 * (_D2 * v483);
          v487 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v486* (*(double *)(v8 + 168)+ v483 * *(double *)(v8 + 224)+ v486* (*(double *)(v8 + 176)+ v483 * *(double *)(v8 + 232)+ v486* (*(double *)(v8 + 184)+ v483 * *(double *)(v8 + 240)+ v486* (*(double *)(v8 + 192)+ v483 * *(double *)(v8 + 248)+ v486* (*(double *)(v8 + 200)+ v483 * *(double *)(v8 + 256)+ v486
                                       * (*(double *)(v8 + 208)
                                        + v483 * *(double *)(v8 + 264)
                                        + v486 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v483 + v486 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
LABEL_762:
          v703 = v487;
          goto LABEL_858;
        }
      }
      else if (v478 > 7)
      {
        goto LABEL_741;
      }
      if (v478 > 3)
        break;
      if (v478 > 1)
      {
        if (v478 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_731;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v491 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v491.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_731;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v491 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_876;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v532 = sqrt(_D6);
        v533 = fabs(v702);
        v534 = fabs(v532);
        v535 = v533 / v534;
        if (v533 >= v534)
          v535 = v534 / v533;
        if (v535 <= 0.414213562)
        {
          v537 = 1;
          v538 = 2;
          v536 = v535;
          if (_D6 >= 0.00000001)
          {
LABEL_821:
            if (v533 < v534)
              v537 = -v537;
            else
              v538 = v535 > 0.414213562;
            v539 = v532 == INFINITY && v533 == INFINITY;
            v540 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v536 * v536), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v536 * v536), (float64x2_t)xmmword_210315370), v536 * v536 * (v536 * v536))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v536 * v536), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v536 * v536), (float64x2_t)xmmword_210315380), v536 * v536 * (v536 * v536))),
                       v536 * v536 * (v536 * v536) * (v536 * v536 * (v536 * v536))));
            v541 = v536 + v536 * vdivq_f64(v540, (float64x2_t)vdupq_laneq_s64((int64x2_t)v540, 1)).f64[0];
            if (v539)
              v541 = 0.785398163;
            if (v532 == 0.0 && v702 == 0.0)
              v543 = 0.0;
            else
              v543 = v541;
            if (v702 < 0.0)
            {
              v538 = 4 - v538;
              v537 = -v537;
            }
            if (v532 < 0.0)
            {
              v538 = -v538;
              v537 = -v537;
            }
            v544 = (double)v538 * 3.061617e-17 + (double)v538 * 0.785398163 + v543 * (double)v537;
            v545 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v544 * v544)), v544 * v544);
            v491 = vmulq_n_f64(v701, 1.0 / v532 * (v544 + v544 * (v545.f64[0] + vmuld_lane_f64(v544 * v544 * (v544 * v544), v545, 1))));
            goto LABEL_876;
          }
        }
        else
        {
          v536 = (v534 - v533) / (v533 + v534);
          if (v533 >= v534)
            v536 = -v536;
          v537 = -1;
          v538 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_821;
        }
        v491 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_876;
      }
      if (!v478)
        goto LABEL_1092;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_849:
        v547 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v548 = *(double *)(v8 + 40);
        v549 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_855;
      }
LABEL_731:
      if (++v475 == v476)
        goto LABEL_10;
    }
    if (v478 > 5)
    {
      if (v478 != 6)
      {
        v479 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_843;
      }
      v492 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v493 = sqrt(vaddvq_f64(vmulq_f64(v492, v492)));
      v487 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v492, v493 * (v493 * (*(double *)(v8 + 168) + v493 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v493)))+ 1.0));
      goto LABEL_762;
    }
    if (v478 == 5)
    {
      v480 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v480 >= 0.00000001)
      {
        v559 = sqrt(v480);
        if (v559 <= v702)
        {
          v573 = v559 / v702 * 0.785398163
               - v559 / v702 * (v559 / v702 + -1.0) * (v559 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v559 <= -v702)
          {
            v561 = v559 / v702 * 0.785398163
                 - v559 / v702 * (-1.0 - v559 / v702) * (v559 / v702 * -0.0663008339 + 0.244711287);
            v562 = 3.14159265;
          }
          else
          {
            v560 = fabs(v702 / v559);
            v561 = v702 / v559 * (v560 + -1.0) * (v560 * 0.0663008339 + 0.244711287) + v702 / v559 * -0.785398163;
            v562 = 1.57079633;
          }
          v573 = v561 + v562;
        }
        v574 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v573 * v573)), v573 * v573);
        v481 = (v573 + v573 * (v574.f64[0] + vmuld_lane_f64(v573 * v573 * (v573 * v573), v574, 1))) / v559;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_731;
        v481 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v481;
      v703.f64[1] = v701.f64[1] * v481;
      goto LABEL_883;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v514 = sqrt(_D6);
    v515 = fabs(v702);
    v516 = fabs(v514);
    v517 = v515 / v516;
    if (v515 >= v516)
      v517 = v516 / v515;
    if (v517 <= 0.414213562)
    {
      v519 = 1;
      v520 = 2;
      v518 = v517;
      if (_D6 >= 0.00000001)
      {
LABEL_796:
        if (v515 < v516)
          v519 = -v519;
        else
          v520 = v517 > 0.414213562;
        v521 = v514 == INFINITY && v515 == INFINITY;
        v522 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v518 * v518), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v518 * v518), (float64x2_t)xmmword_210315370), v518 * v518 * (v518 * v518))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v518 * v518), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v518 * v518), (float64x2_t)xmmword_210315380), v518 * v518 * (v518 * v518))), v518 * v518 * (v518 * v518) * (v518 * v518 * (v518 * v518))));
        v523 = v518 + v518 * vdivq_f64(v522, (float64x2_t)vdupq_laneq_s64((int64x2_t)v522, 1)).f64[0];
        if (v521)
          v523 = 0.785398163;
        if (v514 == 0.0 && v702 == 0.0)
          v525 = 0.0;
        else
          v525 = v523;
        if (v702 < 0.0)
        {
          v520 = 4 - v520;
          v519 = -v519;
        }
        if (v514 < 0.0)
        {
          v520 = -v520;
          v519 = -v519;
        }
        v526 = (double)v520 * 3.061617e-17 + (double)v520 * 0.785398163 + v525 * (double)v519;
        v527 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v526 * v526)), v526 * v526);
        v528 = 1.0 / v514 * (v526 + v526 * (v527.f64[0] + vmuld_lane_f64(v526 * v526 * (v526 * v526), v527, 1)));
        goto LABEL_870;
      }
    }
    else
    {
      v518 = (v516 - v515) / (v515 + v516);
      if (v515 >= v516)
        v518 = -v518;
      v519 = -1;
      v520 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_796;
    }
    v528 = 1.0 / v702;
LABEL_870:
    v563 = vmulq_n_f64(v701, v528);
    v564 = *(double *)v8;
    v565 = *(double *)(v8 + 8);
    v566 = v563.f64[1];
    v567 = *(double *)(v8 + 16);
    v569 = *(double *)(v8 + 32);
    v568 = *(double *)(v8 + 40);
    goto LABEL_884;
  }
LABEL_10:
  v14 = a1[130] - a1[129];
  if ((unint64_t)v14 >= 0x10)
  {
    v583 = 0;
    v584 = (unint64_t)(v14 >> 3) >> 1;
    v691 = (double *)(v8 + 168);
    v696 = (double **)(a3 + 120);
    while (1)
    {
      v701 = *(float64x2_t *)(a1[129] + 16 * v583);
      v702 = 1.0;
      v586 = *(_DWORD *)(v8 + 992);
      if (v586 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1095;
        }
        v586 = *(_DWORD *)(v8 + 992);
        if (v586 > 7)
        {
LABEL_913:
          if (v586 <= 0xB)
          {
            if (v586 <= 9)
            {
              if (v586 == 9)
              {
                v587 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_1015;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v605 = sqrt(_D6);
              v606 = fabs(v702);
              v607 = fabs(v605);
              v608 = v606 / v607;
              if (v606 >= v607)
                v608 = v607 / v606;
              if (v608 <= 0.414213562)
              {
                v610 = 1;
                v611 = 2;
                v609 = v608;
                if (_D6 >= 0.00000001)
                  goto LABEL_943;
              }
              else
              {
                v609 = (v607 - v606) / (v606 + v607);
                if (v606 >= v607)
                  v609 = -v609;
                v610 = -1;
                v611 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_943:
                  if (v606 < v607)
                    v610 = -v610;
                  else
                    v611 = v608 > 0.414213562;
                  v612 = v605 == INFINITY && v606 == INFINITY;
                  v613 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v609 * v609), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v609 * v609), (float64x2_t)xmmword_210315370), v609 * v609 * (v609 * v609))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v609 * v609), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v609 * v609), (float64x2_t)xmmword_210315380), v609 * v609 * (v609 * v609))),
                             v609 * v609 * (v609 * v609) * (v609 * v609 * (v609 * v609))));
                  v614 = v609 + v609 * vdivq_f64(v613, (float64x2_t)vdupq_laneq_s64((int64x2_t)v613, 1)).f64[0];
                  if (v612)
                    v614 = 0.785398163;
                  if (v605 == 0.0 && v702 == 0.0)
                    v616 = 0.0;
                  else
                    v616 = v614;
                  if (v702 < 0.0)
                  {
                    v611 = 4 - v611;
                    v610 = -v610;
                  }
                  if (v605 < 0.0)
                  {
                    v611 = -v611;
                    v610 = -v610;
                  }
                  v617 = (double)v611 * 3.061617e-17 + (double)v611 * 0.785398163 + v616 * (double)v610;
                  v618 = 1.0
                       / v605
                       * (v617
                        * (v617
                         * v617
                         * (*(double *)(v8 + 168)
                          + v617
                          * v617
                          * (*(double *)(v8 + 176)
                           + v617
                           * v617
                           * (*(double *)(v8 + 184)
                            + v617
                            * v617
                            * (*(double *)(v8 + 192)
                             + v617
                             * v617
                             * (*(double *)(v8 + 200)
                              + v617 * v617 * (*(double *)(v8 + 208) + v617 * v617 * *(double *)(v8 + 216)))))))
                         + 1.0));
LABEL_1037:
                  v663 = vmulq_n_f64(v701, v618);
                  v703 = v663;
                  v661 = *(double *)v8;
                  v659 = *(double *)(v8 + 8);
                  v662 = v663.f64[1];
                  v658 = *(double *)(v8 + 16);
                  v660 = *(double *)(v8 + 32);
                  v657 = *(double *)(v8 + 40);
LABEL_1038:
                  v655 = v658 + v661 * v663.f64[0] + v659 * v662;
                  v664 = v662 * v660 + v657;
                  v666 = *(double **)(a3 + 128);
                  v665 = *(_QWORD *)(a3 + 136);
                  if ((unint64_t)v666 >= v665)
                  {
LABEL_1057:
                    v683 = *v696;
                    v684 = ((char *)v666 - (char *)*v696) >> 4;
                    v685 = v684 + 1;
                    if ((unint64_t)(v684 + 1) >> 60)
                      sub_20E867F44();
                    v686 = v665 - (_QWORD)v683;
                    if (v686 >> 3 > v685)
                      v685 = v686 >> 3;
                    if ((unint64_t)v686 >= 0x7FFFFFFFFFFFFFF0)
                      v687 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v687 = v685;
                    if (v687)
                    {
                      if (v687 >> 60)
                        sub_20E877A38();
                      v688 = (char *)operator new(16 * v687);
                      v689 = (double *)&v688[16 * v684];
                      *v689 = v655;
                      v689[1] = v664;
                      v690 = (uint64_t)v689;
                      if (v666 == v683)
                      {
LABEL_1066:
                        v585 = v689 + 2;
                        *(_QWORD *)(a3 + 120) = v690;
                        *(_QWORD *)(a3 + 128) = v689 + 2;
                        *(_QWORD *)(a3 + 136) = &v688[16 * v687];
                        if (!v666)
                          goto LABEL_902;
LABEL_1071:
                        operator delete(v666);
LABEL_902:
                        *(_QWORD *)(a3 + 128) = v585;
                        goto LABEL_903;
                      }
                    }
                    else
                    {
                      v688 = 0;
                      v689 = (double *)(16 * v684);
                      *v689 = v655;
                      v689[1] = v664;
                      v690 = 16 * v684;
                      if (v666 == v683)
                        goto LABEL_1066;
                    }
                    do
                    {
                      *(_OWORD *)(v690 - 16) = *((_OWORD *)v666 - 1);
                      v690 -= 16;
                      v666 -= 2;
                    }
                    while (v666 != v683);
                    v666 = *v696;
                    v585 = v689 + 2;
                    *(_QWORD *)(a3 + 120) = v690;
                    *(_QWORD *)(a3 + 128) = v689 + 2;
                    *(_QWORD *)(a3 + 136) = &v688[16 * v687];
                    if (!v666)
                      goto LABEL_902;
                    goto LABEL_1071;
                  }
LABEL_901:
                  *v666 = v655;
                  v666[1] = v664;
                  v585 = v666 + 2;
                  goto LABEL_902;
                }
              }
              v618 = 1.0 / v702;
              goto LABEL_1037;
            }
            if (v586 == 10)
              v587 = sub_20EB24288(&v703, (uint64_t)&v701, v691, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v587 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_1015:
            if (!v587)
              goto LABEL_903;
            v654 = *(_DWORD *)(v8 + 992);
            if (v654 != -1)
            {
              if (v654 <= 7)
                goto LABEL_1018;
LABEL_1024:
              if (v654 <= 0xB)
              {
                v659 = *(double *)(v8 + 8);
                v658 = *(double *)(v8 + 16);
                v660 = *(double *)(v8 + 32);
                v657 = *(double *)(v8 + 40);
                v661 = *(double *)v8;
                v662 = v703.f64[1];
                v663.f64[0] = v703.f64[0];
                if (v654 <= 9)
                  goto LABEL_1038;
                v655 = v658 + v661 * v703.f64[0] + v659 * v703.f64[1];
                v656 = v660 * v703.f64[1];
LABEL_1027:
                v664 = v657 + v656;
                v666 = *(double **)(a3 + 128);
                v665 = *(_QWORD *)(a3 + 136);
                if ((unint64_t)v666 >= v665)
                  goto LABEL_1057;
                goto LABEL_901;
              }
LABEL_1030:
              v655 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v664 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v666 = *(double **)(a3 + 128);
              v665 = *(_QWORD *)(a3 + 136);
              if ((unint64_t)v666 >= v665)
                goto LABEL_1057;
              goto LABEL_901;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1095;
            }
            v654 = *(_DWORD *)(v8 + 992);
            if (v654 > 7)
              goto LABEL_1024;
LABEL_1018:
            if (v654 <= 3)
            {
              if (v654 <= 1)
              {
                if (!v654)
                {
LABEL_1094:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1095:
                  abort();
                }
                goto LABEL_1021;
              }
              v599 = v703;
LABEL_1048:
              v655 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v599));
              v664 = vmuld_lane_f64(*(double *)(v8 + 32), v599, 1) + *(double *)(v8 + 40);
              v666 = *(double **)(a3 + 128);
              v665 = *(_QWORD *)(a3 + 136);
              if ((unint64_t)v666 >= v665)
                goto LABEL_1057;
              goto LABEL_901;
            }
            if (v654 > 5)
              goto LABEL_1030;
LABEL_1055:
            v672 = *(double *)v8;
            v673 = *(double *)(v8 + 8);
            v674 = v703.f64[1];
            v671.f64[0] = v703.f64[0];
            v675 = *(double *)(v8 + 16);
            v677 = *(double *)(v8 + 32);
            v676 = *(double *)(v8 + 40);
LABEL_1056:
            v655 = v675 + v672 * v671.f64[0] + v673 * v674;
            v664 = v674 * v677 + v676;
            v666 = *(double **)(a3 + 128);
            v665 = *(_QWORD *)(a3 + 136);
            if ((unint64_t)v666 >= v665)
              goto LABEL_1057;
            goto LABEL_901;
          }
          if (v586 > 0xD)
          {
            if (v586 == 14)
              v587 = sub_20EB247C0(&v703, (uint64_t)&v701, v691, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v587 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_1015;
          }
          if (v586 != 13 || v702 < 0.00000001)
            goto LABEL_903;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v591 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v594 = v591 * (_D2 * v591);
          v595 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v594* (*(double *)(v8 + 168)+ v591 * *(double *)(v8 + 224)+ v594* (*(double *)(v8 + 176)+ v591 * *(double *)(v8 + 232)+ v594* (*(double *)(v8 + 184)+ v591 * *(double *)(v8 + 240)+ v594* (*(double *)(v8 + 192)+ v591 * *(double *)(v8 + 248)+ v594* (*(double *)(v8 + 200)+ v591 * *(double *)(v8 + 256)+ v594
                                       * (*(double *)(v8 + 208)
                                        + v591 * *(double *)(v8 + 264)
                                        + v594 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v591 + v594 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
LABEL_934:
          v703 = v595;
          goto LABEL_1030;
        }
      }
      else if (v586 > 7)
      {
        goto LABEL_913;
      }
      if (v586 > 3)
        break;
      if (v586 > 1)
      {
        if (v586 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_903;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v599 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v599.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_903;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v599 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_1048;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v640 = sqrt(_D6);
        v641 = fabs(v702);
        v642 = fabs(v640);
        v643 = v641 / v642;
        if (v641 >= v642)
          v643 = v642 / v641;
        if (v643 <= 0.414213562)
        {
          v645 = 1;
          v646 = 2;
          v644 = v643;
          if (_D6 >= 0.00000001)
          {
LABEL_993:
            if (v641 < v642)
              v645 = -v645;
            else
              v646 = v643 > 0.414213562;
            v647 = v640 == INFINITY && v641 == INFINITY;
            v648 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v644 * v644), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v644 * v644), (float64x2_t)xmmword_210315370), v644 * v644 * (v644 * v644))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v644 * v644), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v644 * v644), (float64x2_t)xmmword_210315380), v644 * v644 * (v644 * v644))),
                       v644 * v644 * (v644 * v644) * (v644 * v644 * (v644 * v644))));
            v649 = v644 + v644 * vdivq_f64(v648, (float64x2_t)vdupq_laneq_s64((int64x2_t)v648, 1)).f64[0];
            if (v647)
              v649 = 0.785398163;
            if (v640 == 0.0 && v702 == 0.0)
              v651 = 0.0;
            else
              v651 = v649;
            if (v702 < 0.0)
            {
              v646 = 4 - v646;
              v645 = -v645;
            }
            if (v640 < 0.0)
            {
              v646 = -v646;
              v645 = -v645;
            }
            v652 = (double)v646 * 3.061617e-17 + (double)v646 * 0.785398163 + v651 * (double)v645;
            v653 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v652 * v652)), v652 * v652);
            v599 = vmulq_n_f64(v701, 1.0 / v640 * (v652 + v652 * (v653.f64[0] + vmuld_lane_f64(v652 * v652 * (v652 * v652), v653, 1))));
            goto LABEL_1048;
          }
        }
        else
        {
          v644 = (v642 - v641) / (v641 + v642);
          if (v641 >= v642)
            v644 = -v644;
          v645 = -1;
          v646 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_993;
        }
        v599 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_1048;
      }
      if (!v586)
        goto LABEL_1094;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_1021:
        v655 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v656 = *(double *)(v8 + 40);
        v657 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_1027;
      }
LABEL_903:
      if (++v583 == v584)
        goto LABEL_11;
    }
    if (v586 > 5)
    {
      if (v586 != 6)
      {
        v587 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_1015;
      }
      v600 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v601 = sqrt(vaddvq_f64(vmulq_f64(v600, v600)));
      v595 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v600, v601 * (v601 * (*(double *)(v8 + 168) + v601 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v601)))+ 1.0));
      goto LABEL_934;
    }
    if (v586 == 5)
    {
      v588 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v588 >= 0.00000001)
      {
        v667 = sqrt(v588);
        if (v667 <= v702)
        {
          v681 = v667 / v702 * 0.785398163
               - v667 / v702 * (v667 / v702 + -1.0) * (v667 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v667 <= -v702)
          {
            v669 = v667 / v702 * 0.785398163
                 - v667 / v702 * (-1.0 - v667 / v702) * (v667 / v702 * -0.0663008339 + 0.244711287);
            v670 = 3.14159265;
          }
          else
          {
            v668 = fabs(v702 / v667);
            v669 = v702 / v667 * (v668 + -1.0) * (v668 * 0.0663008339 + 0.244711287) + v702 / v667 * -0.785398163;
            v670 = 1.57079633;
          }
          v681 = v669 + v670;
        }
        v682 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v681 * v681)), v681 * v681);
        v589 = (v681 + v681 * (v682.f64[0] + vmuld_lane_f64(v681 * v681 * (v681 * v681), v682, 1))) / v667;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_903;
        v589 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v589;
      v703.f64[1] = v701.f64[1] * v589;
      goto LABEL_1055;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v622 = sqrt(_D6);
    v623 = fabs(v702);
    v624 = fabs(v622);
    v625 = v623 / v624;
    if (v623 >= v624)
      v625 = v624 / v623;
    if (v625 <= 0.414213562)
    {
      v627 = 1;
      v628 = 2;
      v626 = v625;
      if (_D6 >= 0.00000001)
      {
LABEL_968:
        if (v623 < v624)
          v627 = -v627;
        else
          v628 = v625 > 0.414213562;
        v629 = v622 == INFINITY && v623 == INFINITY;
        v630 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v626 * v626), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v626 * v626), (float64x2_t)xmmword_210315370), v626 * v626 * (v626 * v626))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v626 * v626), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v626 * v626), (float64x2_t)xmmword_210315380), v626 * v626 * (v626 * v626))), v626 * v626 * (v626 * v626) * (v626 * v626 * (v626 * v626))));
        v631 = v626 + v626 * vdivq_f64(v630, (float64x2_t)vdupq_laneq_s64((int64x2_t)v630, 1)).f64[0];
        if (v629)
          v631 = 0.785398163;
        if (v622 == 0.0 && v702 == 0.0)
          v633 = 0.0;
        else
          v633 = v631;
        if (v702 < 0.0)
        {
          v628 = 4 - v628;
          v627 = -v627;
        }
        if (v622 < 0.0)
        {
          v628 = -v628;
          v627 = -v627;
        }
        v634 = (double)v628 * 3.061617e-17 + (double)v628 * 0.785398163 + v633 * (double)v627;
        v635 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v634 * v634)), v634 * v634);
        v636 = 1.0 / v622 * (v634 + v634 * (v635.f64[0] + vmuld_lane_f64(v634 * v634 * (v634 * v634), v635, 1)));
        goto LABEL_1042;
      }
    }
    else
    {
      v626 = (v624 - v623) / (v623 + v624);
      if (v623 >= v624)
        v626 = -v626;
      v627 = -1;
      v628 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_968;
    }
    v636 = 1.0 / v702;
LABEL_1042:
    v671 = vmulq_n_f64(v701, v636);
    v672 = *(double *)v8;
    v673 = *(double *)(v8 + 8);
    v674 = v671.f64[1];
    v675 = *(double *)(v8 + 16);
    v677 = *(double *)(v8 + 32);
    v676 = *(double *)(v8 + 40);
    goto LABEL_1056;
  }
LABEL_11:
  v15 = (char *)a1[123];
  v16 = (char *)a1[122];
  if ((v15 - v16) >> 1 > (unint64_t)((uint64_t)(a1[108] - a1[107]) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/P3POutlierRejection.cpp", 473, (uint64_t)"(2 * pnp_inlier_indices_.size()) <= valid_stereo_x_cur_.size()", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v16 = (char *)a1[122];
    v15 = (char *)a1[123];
  }
  if (v16 != v15)
  {
    v692 = (double *)(v8 + 168);
    while (1)
    {
      v701 = *(float64x2_t *)(a1[107] + 8 * (2 * *(_DWORD *)v16));
      v702 = 1.0;
      v18 = *(_DWORD *)(v8 + 992);
      if (v18 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1085;
        }
        v18 = *(_DWORD *)(v8 + 992);
        if (v18 > 7)
        {
LABEL_28:
          if (v18 <= 0xB)
          {
            if (v18 <= 9)
            {
              if (v18 == 9)
              {
                v19 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_130;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v40 = sqrt(_D6);
              v41 = fabs(v702);
              v42 = fabs(v40);
              v43 = v41 / v42;
              if (v41 >= v42)
                v43 = v42 / v41;
              if (v43 <= 0.414213562)
              {
                v45 = 1;
                v46 = 2;
                v44 = v43;
                if (_D6 >= 0.00000001)
                  goto LABEL_58;
              }
              else
              {
                v44 = (v42 - v41) / (v41 + v42);
                if (v41 >= v42)
                  v44 = -v44;
                v45 = -1;
                v46 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_58:
                  if (v41 < v42)
                    v45 = -v45;
                  else
                    v46 = v43 > 0.414213562;
                  _ZF = v40 == INFINITY && v41 == INFINITY;
                  v48 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v44 * v44), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v44 * v44), (float64x2_t)xmmword_210315370), v44 * v44 * (v44 * v44))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v44 * v44), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v44 * v44), (float64x2_t)xmmword_210315380), v44 * v44 * (v44 * v44))),
                            v44 * v44 * (v44 * v44) * (v44 * v44 * (v44 * v44))));
                  v49 = v44 + v44 * vdivq_f64(v48, (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1)).f64[0];
                  if (_ZF)
                    v49 = 0.785398163;
                  if (v40 == 0.0 && v702 == 0.0)
                    v51 = 0.0;
                  else
                    v51 = v49;
                  if (v702 < 0.0)
                  {
                    v46 = 4 - v46;
                    v45 = -v45;
                  }
                  if (v40 < 0.0)
                  {
                    v46 = -v46;
                    v45 = -v45;
                  }
                  v52 = (double)v46 * 3.061617e-17 + (double)v46 * 0.785398163 + v51 * (double)v45;
                  v53 = 1.0
                      / v40
                      * (v52
                       * (v52
                        * v52
                        * (*(double *)(v8 + 168)
                         + v52
                         * v52
                         * (*(double *)(v8 + 176)
                          + v52
                          * v52
                          * (*(double *)(v8 + 184)
                           + v52
                           * v52
                           * (*(double *)(v8 + 192)
                            + v52
                            * v52
                            * (*(double *)(v8 + 200)
                             + v52 * v52 * (*(double *)(v8 + 208) + v52 * v52 * *(double *)(v8 + 216)))))))
                        + 1.0));
LABEL_152:
                  v98 = vmulq_n_f64(v701, v53);
                  v703 = v98;
                  v96 = *(double *)v8;
                  v94 = *(double *)(v8 + 8);
                  v97 = v98.f64[1];
                  v93 = *(double *)(v8 + 16);
                  v95 = *(double *)(v8 + 32);
                  v92 = *(double *)(v8 + 40);
LABEL_153:
                  v90 = v93 + v96 * v98.f64[0] + v94 * v97;
                  v99 = v97 * v95 + v92;
                  v101 = *(double **)(a3 + 32);
                  v100 = *(_QWORD *)(a3 + 40);
                  if ((unint64_t)v101 >= v100)
                  {
LABEL_172:
                    v118 = *v697;
                    v119 = ((char *)v101 - (char *)*v697) >> 4;
                    v120 = v119 + 1;
                    if ((unint64_t)(v119 + 1) >> 60)
                      sub_20E867F44();
                    v121 = v100 - (_QWORD)v118;
                    if (v121 >> 3 > v120)
                      v120 = v121 >> 3;
                    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
                      v122 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v122 = v120;
                    if (v122)
                    {
                      if (v122 >> 60)
                        sub_20E877A38();
                      v123 = (char *)operator new(16 * v122);
                      v124 = (double *)&v123[16 * v119];
                      *v124 = v90;
                      v124[1] = v99;
                      v125 = (uint64_t)v124;
                      if (v101 == v118)
                      {
LABEL_181:
                        v17 = v124 + 2;
                        *(_QWORD *)(a3 + 24) = v125;
                        *(_QWORD *)(a3 + 32) = v124 + 2;
                        *(_QWORD *)(a3 + 40) = &v123[16 * v122];
                        if (!v101)
                          goto LABEL_17;
LABEL_186:
                        operator delete(v101);
LABEL_17:
                        *(_QWORD *)(a3 + 32) = v17;
                        goto LABEL_18;
                      }
                    }
                    else
                    {
                      v123 = 0;
                      v124 = (double *)(16 * v119);
                      *v124 = v90;
                      v124[1] = v99;
                      v125 = 16 * v119;
                      if (v101 == v118)
                        goto LABEL_181;
                    }
                    do
                    {
                      *(_OWORD *)(v125 - 16) = *((_OWORD *)v101 - 1);
                      v125 -= 16;
                      v101 -= 2;
                    }
                    while (v101 != v118);
                    v101 = *v697;
                    v17 = v124 + 2;
                    *(_QWORD *)(a3 + 24) = v125;
                    *(_QWORD *)(a3 + 32) = v124 + 2;
                    *(_QWORD *)(a3 + 40) = &v123[16 * v122];
                    if (!v101)
                      goto LABEL_17;
                    goto LABEL_186;
                  }
LABEL_16:
                  *v101 = v90;
                  v101[1] = v99;
                  v17 = v101 + 2;
                  goto LABEL_17;
                }
              }
              v53 = 1.0 / v702;
              goto LABEL_152;
            }
            if (v18 == 10)
              v19 = sub_20EB24288(&v703, (uint64_t)&v701, v692, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v19 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_130:
            if (!v19)
              goto LABEL_18;
            v89 = *(_DWORD *)(v8 + 992);
            if (v89 != -1)
            {
              if (v89 <= 7)
                goto LABEL_133;
LABEL_139:
              if (v89 <= 0xB)
              {
                v94 = *(double *)(v8 + 8);
                v93 = *(double *)(v8 + 16);
                v95 = *(double *)(v8 + 32);
                v92 = *(double *)(v8 + 40);
                v96 = *(double *)v8;
                v97 = v703.f64[1];
                v98.f64[0] = v703.f64[0];
                if (v89 <= 9)
                  goto LABEL_153;
                v90 = v93 + v96 * v703.f64[0] + v94 * v703.f64[1];
                v91 = v95 * v703.f64[1];
LABEL_142:
                v99 = v92 + v91;
                v101 = *(double **)(a3 + 32);
                v100 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v101 >= v100)
                  goto LABEL_172;
                goto LABEL_16;
              }
LABEL_145:
              v90 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v99 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v101 = *(double **)(a3 + 32);
              v100 = *(_QWORD *)(a3 + 40);
              if ((unint64_t)v101 >= v100)
                goto LABEL_172;
              goto LABEL_16;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1085;
            }
            v89 = *(_DWORD *)(v8 + 992);
            if (v89 > 7)
              goto LABEL_139;
LABEL_133:
            if (v89 <= 3)
            {
              if (v89 <= 1)
              {
                if (!v89)
                {
LABEL_1084:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1085:
                  abort();
                }
                goto LABEL_136;
              }
              v34 = v703;
LABEL_163:
              v90 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v34));
              v99 = vmuld_lane_f64(*(double *)(v8 + 32), v34, 1) + *(double *)(v8 + 40);
              v101 = *(double **)(a3 + 32);
              v100 = *(_QWORD *)(a3 + 40);
              if ((unint64_t)v101 >= v100)
                goto LABEL_172;
              goto LABEL_16;
            }
            if (v89 > 5)
              goto LABEL_145;
LABEL_170:
            v107 = *(double *)v8;
            v108 = *(double *)(v8 + 8);
            v109 = v703.f64[1];
            v106.f64[0] = v703.f64[0];
            v110 = *(double *)(v8 + 16);
            v112 = *(double *)(v8 + 32);
            v111 = *(double *)(v8 + 40);
LABEL_171:
            v90 = v110 + v107 * v106.f64[0] + v108 * v109;
            v99 = v109 * v112 + v111;
            v101 = *(double **)(a3 + 32);
            v100 = *(_QWORD *)(a3 + 40);
            if ((unint64_t)v101 >= v100)
              goto LABEL_172;
            goto LABEL_16;
          }
          if (v18 > 0xD)
          {
            if (v18 == 14)
              v19 = sub_20EB247C0(&v703, (uint64_t)&v701, v692, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v19 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_130;
          }
          if (v18 != 13 || v702 < 0.00000001)
            goto LABEL_18;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v23 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v29 = v23 * (_D2 * v23);
          v30 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v29* (*(double *)(v8 + 168)+ v23 * *(double *)(v8 + 224)+ v29* (*(double *)(v8 + 176)+ v23 * *(double *)(v8 + 232)+ v29* (*(double *)(v8 + 184)+ v23 * *(double *)(v8 + 240)+ v29* (*(double *)(v8 + 192)+ v23 * *(double *)(v8 + 248)+ v29* (*(double *)(v8 + 200)+ v23 * *(double *)(v8 + 256)+ v29
                                      * (*(double *)(v8 + 208)
                                       + v23 * *(double *)(v8 + 264)
                                       + v29 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v23 + v29 * 0.0)))))))
                                 / 100.0
                                 + 1.0),
                                 0));
LABEL_49:
          v703 = v30;
          goto LABEL_145;
        }
      }
      else if (v18 > 7)
      {
        goto LABEL_28;
      }
      if (v18 > 3)
        break;
      if (v18 > 1)
      {
        if (v18 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_18;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v34 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v34.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_18;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v34 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_163;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v75 = sqrt(_D6);
        v76 = fabs(v702);
        v77 = fabs(v75);
        v78 = v76 / v77;
        if (v76 >= v77)
          v78 = v77 / v76;
        if (v78 <= 0.414213562)
        {
          v80 = 1;
          v81 = 2;
          v79 = v78;
          if (_D6 >= 0.00000001)
          {
LABEL_108:
            if (v76 < v77)
              v80 = -v80;
            else
              v81 = v78 > 0.414213562;
            v82 = v75 == INFINITY && v76 == INFINITY;
            v83 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v79 * v79), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v79 * v79), (float64x2_t)xmmword_210315370), v79 * v79 * (v79 * v79))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v79 * v79), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v79 * v79), (float64x2_t)xmmword_210315380), v79 * v79 * (v79 * v79))), v79 * v79 * (v79 * v79) * (v79 * v79 * (v79 * v79))));
            v84 = v79 + v79 * vdivq_f64(v83, (float64x2_t)vdupq_laneq_s64((int64x2_t)v83, 1)).f64[0];
            if (v82)
              v84 = 0.785398163;
            if (v75 == 0.0 && v702 == 0.0)
              v86 = 0.0;
            else
              v86 = v84;
            if (v702 < 0.0)
            {
              v81 = 4 - v81;
              v80 = -v80;
            }
            if (v75 < 0.0)
            {
              v81 = -v81;
              v80 = -v80;
            }
            v87 = (double)v81 * 3.061617e-17 + (double)v81 * 0.785398163 + v86 * (double)v80;
            v88 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v87 * v87)), v87 * v87);
            v34 = vmulq_n_f64(v701, 1.0 / v75 * (v87 + v87 * (v88.f64[0] + vmuld_lane_f64(v87 * v87 * (v87 * v87), v88, 1))));
            goto LABEL_163;
          }
        }
        else
        {
          v79 = (v77 - v76) / (v76 + v77);
          if (v76 >= v77)
            v79 = -v79;
          v80 = -1;
          v81 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_108;
        }
        v34 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_163;
      }
      if (!v18)
        goto LABEL_1084;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_136:
        v90 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v91 = *(double *)(v8 + 40);
        v92 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_142;
      }
LABEL_18:
      v16 += 4;
      if (v16 == v15)
        goto LABEL_187;
    }
    if (v18 > 5)
    {
      if (v18 != 6)
      {
        v19 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_130;
      }
      v35 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)));
      v30 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v35, v36 * (v36 * (*(double *)(v8 + 168) + v36 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v36)))+ 1.0));
      goto LABEL_49;
    }
    if (v18 == 5)
    {
      v20 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v20 >= 0.00000001)
      {
        v102 = sqrt(v20);
        if (v102 <= v702)
        {
          v116 = v102 / v702 * 0.785398163
               - v102 / v702 * (v102 / v702 + -1.0) * (v102 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v102 <= -v702)
          {
            v104 = v102 / v702 * 0.785398163
                 - v102 / v702 * (-1.0 - v102 / v702) * (v102 / v702 * -0.0663008339 + 0.244711287);
            v105 = 3.14159265;
          }
          else
          {
            v103 = fabs(v702 / v102);
            v104 = v702 / v102 * (v103 + -1.0) * (v103 * 0.0663008339 + 0.244711287) + v702 / v102 * -0.785398163;
            v105 = 1.57079633;
          }
          v116 = v104 + v105;
        }
        v117 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v116 * v116)), v116 * v116);
        v21 = (v116 + v116 * (v117.f64[0] + vmuld_lane_f64(v116 * v116 * (v116 * v116), v117, 1))) / v102;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_18;
        v21 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v21;
      v703.f64[1] = v701.f64[1] * v21;
      goto LABEL_170;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v57 = sqrt(_D6);
    v58 = fabs(v702);
    v59 = fabs(v57);
    v60 = v58 / v59;
    if (v58 >= v59)
      v60 = v59 / v58;
    if (v60 <= 0.414213562)
    {
      v62 = 1;
      v63 = 2;
      v61 = v60;
      if (_D6 >= 0.00000001)
      {
LABEL_83:
        if (v58 < v59)
          v62 = -v62;
        else
          v63 = v60 > 0.414213562;
        v64 = v57 == INFINITY && v58 == INFINITY;
        v65 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v61 * v61), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v61 * v61), (float64x2_t)xmmword_210315370), v61 * v61 * (v61 * v61))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v61 * v61), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v61 * v61), (float64x2_t)xmmword_210315380), v61 * v61 * (v61 * v61))), v61 * v61 * (v61 * v61) * (v61 * v61 * (v61 * v61))));
        v66 = v61 + v61 * vdivq_f64(v65, (float64x2_t)vdupq_laneq_s64((int64x2_t)v65, 1)).f64[0];
        if (v64)
          v66 = 0.785398163;
        if (v57 == 0.0 && v702 == 0.0)
          v68 = 0.0;
        else
          v68 = v66;
        if (v702 < 0.0)
        {
          v63 = 4 - v63;
          v62 = -v62;
        }
        if (v57 < 0.0)
        {
          v63 = -v63;
          v62 = -v62;
        }
        v69 = (double)v63 * 3.061617e-17 + (double)v63 * 0.785398163 + v68 * (double)v62;
        v70 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v69 * v69)), v69 * v69);
        v71 = 1.0 / v57 * (v69 + v69 * (v70.f64[0] + vmuld_lane_f64(v69 * v69 * (v69 * v69), v70, 1)));
        goto LABEL_157;
      }
    }
    else
    {
      v61 = (v59 - v58) / (v58 + v59);
      if (v58 >= v59)
        v61 = -v61;
      v62 = -1;
      v63 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_83;
    }
    v71 = 1.0 / v702;
LABEL_157:
    v106 = vmulq_n_f64(v701, v71);
    v107 = *(double *)v8;
    v108 = *(double *)(v8 + 8);
    v109 = v106.f64[1];
    v110 = *(double *)(v8 + 16);
    v112 = *(double *)(v8 + 32);
    v111 = *(double *)(v8 + 40);
    goto LABEL_171;
  }
LABEL_187:
  v126 = *(_BYTE **)(a3 + 48);
  v127 = (char *)a1[126];
  v128 = (char *)a1[125];
  v129 = v127 - v128;
  v130 = (v127 - v128) >> 2;
  v698 = (double **)(a3 + 48);
  if (v130 > (uint64_t)(*(_QWORD *)(a3 + 64) - (_QWORD)v126) >> 4)
  {
    if (v129 > 0x3FFFFFFFFFFFFFFCLL)
      goto LABEL_1096;
    v131 = *(_BYTE **)(a3 + 56);
    v132 = (char *)operator new(4 * v129);
    v133 = &v132[(v131 - v126) & 0xFFFFFFFFFFFFFFF0];
    v134 = v133;
    if (v131 != v126)
    {
      v135 = &v132[(v131 - v126) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v134 = v135 - 16;
        *((_OWORD *)v135 - 1) = *((_OWORD *)v131 - 1);
        v131 -= 16;
        v135 -= 16;
      }
      while (v131 != v126);
    }
    *(_QWORD *)(a3 + 48) = v134;
    *(_QWORD *)(a3 + 56) = v133;
    *(_QWORD *)(a3 + 64) = &v132[16 * v130];
    if (v126)
    {
      operator delete(v126);
      v128 = (char *)a1[125];
      v127 = (char *)a1[126];
    }
  }
  if (v128 != v127)
  {
    v693 = (double *)(v8 + 168);
    while (1)
    {
      v701 = *(float64x2_t *)(a1[119] + 8 * (2 * *(_DWORD *)v128));
      v702 = 1.0;
      v137 = *(_DWORD *)(v8 + 992);
      if (v137 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1087;
        }
        v137 = *(_DWORD *)(v8 + 992);
        if (v137 > 7)
        {
LABEL_208:
          if (v137 <= 0xB)
          {
            if (v137 <= 9)
            {
              if (v137 == 9)
              {
                v138 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_310;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v156 = sqrt(_D6);
              v157 = fabs(v702);
              v158 = fabs(v156);
              v159 = v157 / v158;
              if (v157 >= v158)
                v159 = v158 / v157;
              if (v159 <= 0.414213562)
              {
                v161 = 1;
                v162 = 2;
                v160 = v159;
                if (_D6 >= 0.00000001)
                  goto LABEL_238;
              }
              else
              {
                v160 = (v158 - v157) / (v157 + v158);
                if (v157 >= v158)
                  v160 = -v160;
                v161 = -1;
                v162 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_238:
                  if (v157 < v158)
                    v161 = -v161;
                  else
                    v162 = v159 > 0.414213562;
                  v163 = v156 == INFINITY && v157 == INFINITY;
                  v164 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v160 * v160), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v160 * v160), (float64x2_t)xmmword_210315370), v160 * v160 * (v160 * v160))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v160 * v160), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v160 * v160), (float64x2_t)xmmword_210315380), v160 * v160 * (v160 * v160))),
                             v160 * v160 * (v160 * v160) * (v160 * v160 * (v160 * v160))));
                  v165 = v160 + v160 * vdivq_f64(v164, (float64x2_t)vdupq_laneq_s64((int64x2_t)v164, 1)).f64[0];
                  if (v163)
                    v165 = 0.785398163;
                  if (v156 == 0.0 && v702 == 0.0)
                    v167 = 0.0;
                  else
                    v167 = v165;
                  if (v702 < 0.0)
                  {
                    v162 = 4 - v162;
                    v161 = -v161;
                  }
                  if (v156 < 0.0)
                  {
                    v162 = -v162;
                    v161 = -v161;
                  }
                  v168 = (double)v162 * 3.061617e-17 + (double)v162 * 0.785398163 + v167 * (double)v161;
                  v169 = 1.0
                       / v156
                       * (v168
                        * (v168
                         * v168
                         * (*(double *)(v8 + 168)
                          + v168
                          * v168
                          * (*(double *)(v8 + 176)
                           + v168
                           * v168
                           * (*(double *)(v8 + 184)
                            + v168
                            * v168
                            * (*(double *)(v8 + 192)
                             + v168
                             * v168
                             * (*(double *)(v8 + 200)
                              + v168 * v168 * (*(double *)(v8 + 208) + v168 * v168 * *(double *)(v8 + 216)))))))
                         + 1.0));
LABEL_332:
                  v214 = vmulq_n_f64(v701, v169);
                  v703 = v214;
                  v212 = *(double *)v8;
                  v210 = *(double *)(v8 + 8);
                  v213 = v214.f64[1];
                  v209 = *(double *)(v8 + 16);
                  v211 = *(double *)(v8 + 32);
                  v208 = *(double *)(v8 + 40);
LABEL_333:
                  v206 = v209 + v212 * v214.f64[0] + v210 * v213;
                  v215 = v213 * v211 + v208;
                  v217 = *(double **)(a3 + 56);
                  v216 = *(_QWORD *)(a3 + 64);
                  if ((unint64_t)v217 >= v216)
                  {
LABEL_352:
                    v234 = *v698;
                    v235 = ((char *)v217 - (char *)*v698) >> 4;
                    v236 = v235 + 1;
                    if ((unint64_t)(v235 + 1) >> 60)
                      sub_20E867F44();
                    v237 = v216 - (_QWORD)v234;
                    if (v237 >> 3 > v236)
                      v236 = v237 >> 3;
                    if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF0)
                      v238 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v238 = v236;
                    if (v238)
                    {
                      if (v238 >> 60)
                        sub_20E877A38();
                      v239 = (char *)operator new(16 * v238);
                      v240 = (double *)&v239[16 * v235];
                      *v240 = v206;
                      v240[1] = v215;
                      v241 = (uint64_t)v240;
                      if (v217 == v234)
                      {
LABEL_361:
                        v136 = v240 + 2;
                        *(_QWORD *)(a3 + 48) = v241;
                        *(_QWORD *)(a3 + 56) = v240 + 2;
                        *(_QWORD *)(a3 + 64) = &v239[16 * v238];
                        if (!v217)
                          goto LABEL_197;
LABEL_366:
                        operator delete(v217);
LABEL_197:
                        *(_QWORD *)(a3 + 56) = v136;
                        goto LABEL_198;
                      }
                    }
                    else
                    {
                      v239 = 0;
                      v240 = (double *)(16 * v235);
                      *v240 = v206;
                      v240[1] = v215;
                      v241 = 16 * v235;
                      if (v217 == v234)
                        goto LABEL_361;
                    }
                    do
                    {
                      *(_OWORD *)(v241 - 16) = *((_OWORD *)v217 - 1);
                      v241 -= 16;
                      v217 -= 2;
                    }
                    while (v217 != v234);
                    v217 = *v698;
                    v136 = v240 + 2;
                    *(_QWORD *)(a3 + 48) = v241;
                    *(_QWORD *)(a3 + 56) = v240 + 2;
                    *(_QWORD *)(a3 + 64) = &v239[16 * v238];
                    if (!v217)
                      goto LABEL_197;
                    goto LABEL_366;
                  }
LABEL_196:
                  *v217 = v206;
                  v217[1] = v215;
                  v136 = v217 + 2;
                  goto LABEL_197;
                }
              }
              v169 = 1.0 / v702;
              goto LABEL_332;
            }
            if (v137 == 10)
              v138 = sub_20EB24288(&v703, (uint64_t)&v701, v693, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v138 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_310:
            if (!v138)
              goto LABEL_198;
            v205 = *(_DWORD *)(v8 + 992);
            if (v205 != -1)
            {
              if (v205 <= 7)
                goto LABEL_313;
LABEL_319:
              if (v205 <= 0xB)
              {
                v210 = *(double *)(v8 + 8);
                v209 = *(double *)(v8 + 16);
                v211 = *(double *)(v8 + 32);
                v208 = *(double *)(v8 + 40);
                v212 = *(double *)v8;
                v213 = v703.f64[1];
                v214.f64[0] = v703.f64[0];
                if (v205 <= 9)
                  goto LABEL_333;
                v206 = v209 + v212 * v703.f64[0] + v210 * v703.f64[1];
                v207 = v211 * v703.f64[1];
LABEL_322:
                v215 = v208 + v207;
                v217 = *(double **)(a3 + 56);
                v216 = *(_QWORD *)(a3 + 64);
                if ((unint64_t)v217 >= v216)
                  goto LABEL_352;
                goto LABEL_196;
              }
LABEL_325:
              v206 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v215 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v217 = *(double **)(a3 + 56);
              v216 = *(_QWORD *)(a3 + 64);
              if ((unint64_t)v217 >= v216)
                goto LABEL_352;
              goto LABEL_196;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1087;
            }
            v205 = *(_DWORD *)(v8 + 992);
            if (v205 > 7)
              goto LABEL_319;
LABEL_313:
            if (v205 <= 3)
            {
              if (v205 <= 1)
              {
                if (!v205)
                {
LABEL_1086:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1087:
                  abort();
                }
                goto LABEL_316;
              }
              v150 = v703;
LABEL_343:
              v206 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v150));
              v215 = vmuld_lane_f64(*(double *)(v8 + 32), v150, 1) + *(double *)(v8 + 40);
              v217 = *(double **)(a3 + 56);
              v216 = *(_QWORD *)(a3 + 64);
              if ((unint64_t)v217 >= v216)
                goto LABEL_352;
              goto LABEL_196;
            }
            if (v205 > 5)
              goto LABEL_325;
LABEL_350:
            v223 = *(double *)v8;
            v224 = *(double *)(v8 + 8);
            v225 = v703.f64[1];
            v222.f64[0] = v703.f64[0];
            v226 = *(double *)(v8 + 16);
            v228 = *(double *)(v8 + 32);
            v227 = *(double *)(v8 + 40);
LABEL_351:
            v206 = v226 + v223 * v222.f64[0] + v224 * v225;
            v215 = v225 * v228 + v227;
            v217 = *(double **)(a3 + 56);
            v216 = *(_QWORD *)(a3 + 64);
            if ((unint64_t)v217 >= v216)
              goto LABEL_352;
            goto LABEL_196;
          }
          if (v137 > 0xD)
          {
            if (v137 == 14)
              v138 = sub_20EB247C0(&v703, (uint64_t)&v701, v693, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v138 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_310;
          }
          if (v137 != 13 || v702 < 0.00000001)
            goto LABEL_198;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v142 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v145 = v142 * (_D2 * v142);
          v146 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v145* (*(double *)(v8 + 168)+ v142 * *(double *)(v8 + 224)+ v145* (*(double *)(v8 + 176)+ v142 * *(double *)(v8 + 232)+ v145* (*(double *)(v8 + 184)+ v142 * *(double *)(v8 + 240)+ v145* (*(double *)(v8 + 192)+ v142 * *(double *)(v8 + 248)+ v145* (*(double *)(v8 + 200)+ v142 * *(double *)(v8 + 256)+ v145
                                       * (*(double *)(v8 + 208)
                                        + v142 * *(double *)(v8 + 264)
                                        + v145 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v142 + v145 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
LABEL_229:
          v703 = v146;
          goto LABEL_325;
        }
      }
      else if (v137 > 7)
      {
        goto LABEL_208;
      }
      if (v137 > 3)
        break;
      if (v137 > 1)
      {
        if (v137 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_198;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v150 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v150.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_198;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v150 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_343;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v191 = sqrt(_D6);
        v192 = fabs(v702);
        v193 = fabs(v191);
        v194 = v192 / v193;
        if (v192 >= v193)
          v194 = v193 / v192;
        if (v194 <= 0.414213562)
        {
          v196 = 1;
          v197 = 2;
          v195 = v194;
          if (_D6 >= 0.00000001)
          {
LABEL_288:
            if (v192 < v193)
              v196 = -v196;
            else
              v197 = v194 > 0.414213562;
            v198 = v191 == INFINITY && v192 == INFINITY;
            v199 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v195 * v195), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v195 * v195), (float64x2_t)xmmword_210315370), v195 * v195 * (v195 * v195))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v195 * v195), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v195 * v195), (float64x2_t)xmmword_210315380), v195 * v195 * (v195 * v195))),
                       v195 * v195 * (v195 * v195) * (v195 * v195 * (v195 * v195))));
            v200 = v195 + v195 * vdivq_f64(v199, (float64x2_t)vdupq_laneq_s64((int64x2_t)v199, 1)).f64[0];
            if (v198)
              v200 = 0.785398163;
            if (v191 == 0.0 && v702 == 0.0)
              v202 = 0.0;
            else
              v202 = v200;
            if (v702 < 0.0)
            {
              v197 = 4 - v197;
              v196 = -v196;
            }
            if (v191 < 0.0)
            {
              v197 = -v197;
              v196 = -v196;
            }
            v203 = (double)v197 * 3.061617e-17 + (double)v197 * 0.785398163 + v202 * (double)v196;
            v204 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v203 * v203)), v203 * v203);
            v150 = vmulq_n_f64(v701, 1.0 / v191 * (v203 + v203 * (v204.f64[0] + vmuld_lane_f64(v203 * v203 * (v203 * v203), v204, 1))));
            goto LABEL_343;
          }
        }
        else
        {
          v195 = (v193 - v192) / (v192 + v193);
          if (v192 >= v193)
            v195 = -v195;
          v196 = -1;
          v197 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_288;
        }
        v150 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_343;
      }
      if (!v137)
        goto LABEL_1086;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_316:
        v206 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v207 = *(double *)(v8 + 40);
        v208 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_322;
      }
LABEL_198:
      v128 += 4;
      if (v128 == v127)
        goto LABEL_367;
    }
    if (v137 > 5)
    {
      if (v137 != 6)
      {
        v138 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_310;
      }
      v151 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v152 = sqrt(vaddvq_f64(vmulq_f64(v151, v151)));
      v146 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v151, v152 * (v152 * (*(double *)(v8 + 168) + v152 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v152)))+ 1.0));
      goto LABEL_229;
    }
    if (v137 == 5)
    {
      v139 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v139 >= 0.00000001)
      {
        v218 = sqrt(v139);
        if (v218 <= v702)
        {
          v232 = v218 / v702 * 0.785398163
               - v218 / v702 * (v218 / v702 + -1.0) * (v218 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v218 <= -v702)
          {
            v220 = v218 / v702 * 0.785398163
                 - v218 / v702 * (-1.0 - v218 / v702) * (v218 / v702 * -0.0663008339 + 0.244711287);
            v221 = 3.14159265;
          }
          else
          {
            v219 = fabs(v702 / v218);
            v220 = v702 / v218 * (v219 + -1.0) * (v219 * 0.0663008339 + 0.244711287) + v702 / v218 * -0.785398163;
            v221 = 1.57079633;
          }
          v232 = v220 + v221;
        }
        v233 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v232 * v232)), v232 * v232);
        v140 = (v232 + v232 * (v233.f64[0] + vmuld_lane_f64(v232 * v232 * (v232 * v232), v233, 1))) / v218;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_198;
        v140 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v140;
      v703.f64[1] = v701.f64[1] * v140;
      goto LABEL_350;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v173 = sqrt(_D6);
    v174 = fabs(v702);
    v175 = fabs(v173);
    v176 = v174 / v175;
    if (v174 >= v175)
      v176 = v175 / v174;
    if (v176 <= 0.414213562)
    {
      v178 = 1;
      v179 = 2;
      v177 = v176;
      if (_D6 >= 0.00000001)
      {
LABEL_263:
        if (v174 < v175)
          v178 = -v178;
        else
          v179 = v176 > 0.414213562;
        v180 = v173 == INFINITY && v174 == INFINITY;
        v181 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v177 * v177), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v177 * v177), (float64x2_t)xmmword_210315370), v177 * v177 * (v177 * v177))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v177 * v177), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v177 * v177), (float64x2_t)xmmword_210315380), v177 * v177 * (v177 * v177))), v177 * v177 * (v177 * v177) * (v177 * v177 * (v177 * v177))));
        v182 = v177 + v177 * vdivq_f64(v181, (float64x2_t)vdupq_laneq_s64((int64x2_t)v181, 1)).f64[0];
        if (v180)
          v182 = 0.785398163;
        if (v173 == 0.0 && v702 == 0.0)
          v184 = 0.0;
        else
          v184 = v182;
        if (v702 < 0.0)
        {
          v179 = 4 - v179;
          v178 = -v178;
        }
        if (v173 < 0.0)
        {
          v179 = -v179;
          v178 = -v178;
        }
        v185 = (double)v179 * 3.061617e-17 + (double)v179 * 0.785398163 + v184 * (double)v178;
        v186 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v185 * v185)), v185 * v185);
        v187 = 1.0 / v173 * (v185 + v185 * (v186.f64[0] + vmuld_lane_f64(v185 * v185 * (v185 * v185), v186, 1)));
        goto LABEL_337;
      }
    }
    else
    {
      v177 = (v175 - v174) / (v174 + v175);
      if (v174 >= v175)
        v177 = -v177;
      v178 = -1;
      v179 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_263;
    }
    v187 = 1.0 / v702;
LABEL_337:
    v222 = vmulq_n_f64(v701, v187);
    v223 = *(double *)v8;
    v224 = *(double *)(v8 + 8);
    v225 = v222.f64[1];
    v226 = *(double *)(v8 + 16);
    v228 = *(double *)(v8 + 32);
    v227 = *(double *)(v8 + 40);
    goto LABEL_351;
  }
LABEL_367:
  v242 = *(_BYTE **)(a3 + 72);
  v243 = (float64x2_t *)a1[87];
  v244 = (float64x2_t *)a1[86];
  v245 = (char *)v243 - (char *)v244;
  v246 = v243 - v244;
  v699 = (double **)(a3 + 72);
  if (v246 > (uint64_t)(*(_QWORD *)(a3 + 88) - (_QWORD)v242) >> 4)
  {
    if ((v245 & 0x8000000000000000) != 0)
      goto LABEL_1096;
    v247 = *(_BYTE **)(a3 + 80);
    v248 = (char *)operator new(v245);
    v249 = &v248[(v247 - v242) & 0xFFFFFFFFFFFFFFF0];
    v250 = v249;
    if (v247 != v242)
    {
      v251 = &v248[(v247 - v242) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v250 = v251 - 16;
        *((_OWORD *)v251 - 1) = *((_OWORD *)v247 - 1);
        v247 -= 16;
        v251 -= 16;
      }
      while (v247 != v242);
    }
    *(_QWORD *)(a3 + 72) = v250;
    *(_QWORD *)(a3 + 80) = v249;
    *(_QWORD *)(a3 + 88) = &v248[16 * v246];
    if (v242)
    {
      operator delete(v242);
      v244 = (float64x2_t *)a1[86];
      v243 = (float64x2_t *)a1[87];
    }
  }
  if (v244 != v243)
  {
    v694 = (double *)(v8 + 168);
    while (1)
    {
      v701 = *v244;
      v702 = 1.0;
      v253 = *(_DWORD *)(v8 + 992);
      if (v253 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1089;
        }
        v253 = *(_DWORD *)(v8 + 992);
        if (v253 > 7)
        {
LABEL_388:
          if (v253 <= 0xB)
          {
            if (v253 <= 9)
            {
              if (v253 == 9)
              {
                v254 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_490;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v272 = sqrt(_D6);
              v273 = fabs(v702);
              v274 = fabs(v272);
              v275 = v273 / v274;
              if (v273 >= v274)
                v275 = v274 / v273;
              if (v275 <= 0.414213562)
              {
                v277 = 1;
                v278 = 2;
                v276 = v275;
                if (_D6 >= 0.00000001)
                  goto LABEL_418;
              }
              else
              {
                v276 = (v274 - v273) / (v273 + v274);
                if (v273 >= v274)
                  v276 = -v276;
                v277 = -1;
                v278 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_418:
                  if (v273 < v274)
                    v277 = -v277;
                  else
                    v278 = v275 > 0.414213562;
                  v279 = v272 == INFINITY && v273 == INFINITY;
                  v280 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v276 * v276), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v276 * v276), (float64x2_t)xmmword_210315370), v276 * v276 * (v276 * v276))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v276 * v276), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v276 * v276), (float64x2_t)xmmword_210315380), v276 * v276 * (v276 * v276))),
                             v276 * v276 * (v276 * v276) * (v276 * v276 * (v276 * v276))));
                  v281 = v276 + v276 * vdivq_f64(v280, (float64x2_t)vdupq_laneq_s64((int64x2_t)v280, 1)).f64[0];
                  if (v279)
                    v281 = 0.785398163;
                  if (v272 == 0.0 && v702 == 0.0)
                    v283 = 0.0;
                  else
                    v283 = v281;
                  if (v702 < 0.0)
                  {
                    v278 = 4 - v278;
                    v277 = -v277;
                  }
                  if (v272 < 0.0)
                  {
                    v278 = -v278;
                    v277 = -v277;
                  }
                  v284 = (double)v278 * 3.061617e-17 + (double)v278 * 0.785398163 + v283 * (double)v277;
                  v285 = 1.0
                       / v272
                       * (v284
                        * (v284
                         * v284
                         * (*(double *)(v8 + 168)
                          + v284
                          * v284
                          * (*(double *)(v8 + 176)
                           + v284
                           * v284
                           * (*(double *)(v8 + 184)
                            + v284
                            * v284
                            * (*(double *)(v8 + 192)
                             + v284
                             * v284
                             * (*(double *)(v8 + 200)
                              + v284 * v284 * (*(double *)(v8 + 208) + v284 * v284 * *(double *)(v8 + 216)))))))
                         + 1.0));
LABEL_512:
                  v330 = vmulq_n_f64(v701, v285);
                  v703 = v330;
                  v328 = *(double *)v8;
                  v326 = *(double *)(v8 + 8);
                  v329 = v330.f64[1];
                  v325 = *(double *)(v8 + 16);
                  v327 = *(double *)(v8 + 32);
                  v324 = *(double *)(v8 + 40);
LABEL_513:
                  v322 = v325 + v328 * v330.f64[0] + v326 * v329;
                  v331 = v329 * v327 + v324;
                  v333 = *(double **)(a3 + 80);
                  v332 = *(_QWORD *)(a3 + 88);
                  if ((unint64_t)v333 >= v332)
                  {
LABEL_532:
                    v350 = *v699;
                    v351 = ((char *)v333 - (char *)*v699) >> 4;
                    v352 = v351 + 1;
                    if ((unint64_t)(v351 + 1) >> 60)
                      sub_20E867F44();
                    v353 = v332 - (_QWORD)v350;
                    if (v353 >> 3 > v352)
                      v352 = v353 >> 3;
                    if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF0)
                      v354 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v354 = v352;
                    if (v354)
                    {
                      if (v354 >> 60)
                        sub_20E877A38();
                      v355 = (char *)operator new(16 * v354);
                      v356 = (double *)&v355[16 * v351];
                      *v356 = v322;
                      v356[1] = v331;
                      v357 = (uint64_t)v356;
                      if (v333 == v350)
                      {
LABEL_541:
                        v252 = v356 + 2;
                        *(_QWORD *)(a3 + 72) = v357;
                        *(_QWORD *)(a3 + 80) = v356 + 2;
                        *(_QWORD *)(a3 + 88) = &v355[16 * v354];
                        if (!v333)
                          goto LABEL_377;
LABEL_546:
                        operator delete(v333);
LABEL_377:
                        *(_QWORD *)(a3 + 80) = v252;
                        goto LABEL_378;
                      }
                    }
                    else
                    {
                      v355 = 0;
                      v356 = (double *)(16 * v351);
                      *v356 = v322;
                      v356[1] = v331;
                      v357 = 16 * v351;
                      if (v333 == v350)
                        goto LABEL_541;
                    }
                    do
                    {
                      *(_OWORD *)(v357 - 16) = *((_OWORD *)v333 - 1);
                      v357 -= 16;
                      v333 -= 2;
                    }
                    while (v333 != v350);
                    v333 = *v699;
                    v252 = v356 + 2;
                    *(_QWORD *)(a3 + 72) = v357;
                    *(_QWORD *)(a3 + 80) = v356 + 2;
                    *(_QWORD *)(a3 + 88) = &v355[16 * v354];
                    if (!v333)
                      goto LABEL_377;
                    goto LABEL_546;
                  }
LABEL_376:
                  *v333 = v322;
                  v333[1] = v331;
                  v252 = v333 + 2;
                  goto LABEL_377;
                }
              }
              v285 = 1.0 / v702;
              goto LABEL_512;
            }
            if (v253 == 10)
              v254 = sub_20EB24288(&v703, (uint64_t)&v701, v694, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v254 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_490:
            if (!v254)
              goto LABEL_378;
            v321 = *(_DWORD *)(v8 + 992);
            if (v321 != -1)
            {
              if (v321 <= 7)
                goto LABEL_493;
LABEL_499:
              if (v321 <= 0xB)
              {
                v326 = *(double *)(v8 + 8);
                v325 = *(double *)(v8 + 16);
                v327 = *(double *)(v8 + 32);
                v324 = *(double *)(v8 + 40);
                v328 = *(double *)v8;
                v329 = v703.f64[1];
                v330.f64[0] = v703.f64[0];
                if (v321 <= 9)
                  goto LABEL_513;
                v322 = v325 + v328 * v703.f64[0] + v326 * v703.f64[1];
                v323 = v327 * v703.f64[1];
LABEL_502:
                v331 = v324 + v323;
                v333 = *(double **)(a3 + 80);
                v332 = *(_QWORD *)(a3 + 88);
                if ((unint64_t)v333 >= v332)
                  goto LABEL_532;
                goto LABEL_376;
              }
LABEL_505:
              v322 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v331 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v333 = *(double **)(a3 + 80);
              v332 = *(_QWORD *)(a3 + 88);
              if ((unint64_t)v333 >= v332)
                goto LABEL_532;
              goto LABEL_376;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1089;
            }
            v321 = *(_DWORD *)(v8 + 992);
            if (v321 > 7)
              goto LABEL_499;
LABEL_493:
            if (v321 <= 3)
            {
              if (v321 <= 1)
              {
                if (!v321)
                {
LABEL_1088:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1089:
                  abort();
                }
                goto LABEL_496;
              }
              v266 = v703;
LABEL_523:
              v322 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v266));
              v331 = vmuld_lane_f64(*(double *)(v8 + 32), v266, 1) + *(double *)(v8 + 40);
              v333 = *(double **)(a3 + 80);
              v332 = *(_QWORD *)(a3 + 88);
              if ((unint64_t)v333 >= v332)
                goto LABEL_532;
              goto LABEL_376;
            }
            if (v321 > 5)
              goto LABEL_505;
LABEL_530:
            v339 = *(double *)v8;
            v340 = *(double *)(v8 + 8);
            v341 = v703.f64[1];
            v338.f64[0] = v703.f64[0];
            v342 = *(double *)(v8 + 16);
            v344 = *(double *)(v8 + 32);
            v343 = *(double *)(v8 + 40);
LABEL_531:
            v322 = v342 + v339 * v338.f64[0] + v340 * v341;
            v331 = v341 * v344 + v343;
            v333 = *(double **)(a3 + 80);
            v332 = *(_QWORD *)(a3 + 88);
            if ((unint64_t)v333 >= v332)
              goto LABEL_532;
            goto LABEL_376;
          }
          if (v253 > 0xD)
          {
            if (v253 == 14)
              v254 = sub_20EB247C0(&v703, (uint64_t)&v701, v694, (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v254 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_490;
          }
          if (v253 != 13 || v702 < 0.00000001)
            goto LABEL_378;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v258 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v261 = v258 * (_D2 * v258);
          v262 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v261* (*(double *)(v8 + 168)+ v258 * *(double *)(v8 + 224)+ v261* (*(double *)(v8 + 176)+ v258 * *(double *)(v8 + 232)+ v261* (*(double *)(v8 + 184)+ v258 * *(double *)(v8 + 240)+ v261* (*(double *)(v8 + 192)+ v258 * *(double *)(v8 + 248)+ v261* (*(double *)(v8 + 200)+ v258 * *(double *)(v8 + 256)+ v261
                                       * (*(double *)(v8 + 208)
                                        + v258 * *(double *)(v8 + 264)
                                        + v261 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v258 + v261 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
LABEL_409:
          v703 = v262;
          goto LABEL_505;
        }
      }
      else if (v253 > 7)
      {
        goto LABEL_388;
      }
      if (v253 > 3)
        break;
      if (v253 > 1)
      {
        if (v253 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_378;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v266 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v266.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_378;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v266 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_523;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v307 = sqrt(_D6);
        v308 = fabs(v702);
        v309 = fabs(v307);
        v310 = v308 / v309;
        if (v308 >= v309)
          v310 = v309 / v308;
        if (v310 <= 0.414213562)
        {
          v312 = 1;
          v313 = 2;
          v311 = v310;
          if (_D6 >= 0.00000001)
          {
LABEL_468:
            if (v308 < v309)
              v312 = -v312;
            else
              v313 = v310 > 0.414213562;
            v314 = v307 == INFINITY && v308 == INFINITY;
            v315 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v311 * v311), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v311 * v311), (float64x2_t)xmmword_210315370), v311 * v311 * (v311 * v311))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v311 * v311), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v311 * v311), (float64x2_t)xmmword_210315380), v311 * v311 * (v311 * v311))),
                       v311 * v311 * (v311 * v311) * (v311 * v311 * (v311 * v311))));
            v316 = v311 + v311 * vdivq_f64(v315, (float64x2_t)vdupq_laneq_s64((int64x2_t)v315, 1)).f64[0];
            if (v314)
              v316 = 0.785398163;
            if (v307 == 0.0 && v702 == 0.0)
              v318 = 0.0;
            else
              v318 = v316;
            if (v702 < 0.0)
            {
              v313 = 4 - v313;
              v312 = -v312;
            }
            if (v307 < 0.0)
            {
              v313 = -v313;
              v312 = -v312;
            }
            v319 = (double)v313 * 3.061617e-17 + (double)v313 * 0.785398163 + v318 * (double)v312;
            v320 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v319 * v319)), v319 * v319);
            v266 = vmulq_n_f64(v701, 1.0 / v307 * (v319 + v319 * (v320.f64[0] + vmuld_lane_f64(v319 * v319 * (v319 * v319), v320, 1))));
            goto LABEL_523;
          }
        }
        else
        {
          v311 = (v309 - v308) / (v308 + v309);
          if (v308 >= v309)
            v311 = -v311;
          v312 = -1;
          v313 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_468;
        }
        v266 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_523;
      }
      if (!v253)
        goto LABEL_1088;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_496:
        v322 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v323 = *(double *)(v8 + 40);
        v324 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_502;
      }
LABEL_378:
      if (++v244 == v243)
        goto LABEL_547;
    }
    if (v253 > 5)
    {
      if (v253 != 6)
      {
        v254 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_490;
      }
      v267 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v268 = sqrt(vaddvq_f64(vmulq_f64(v267, v267)));
      v262 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v267, v268 * (v268 * (*(double *)(v8 + 168) + v268 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v268)))+ 1.0));
      goto LABEL_409;
    }
    if (v253 == 5)
    {
      v255 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v255 >= 0.00000001)
      {
        v334 = sqrt(v255);
        if (v334 <= v702)
        {
          v348 = v334 / v702 * 0.785398163
               - v334 / v702 * (v334 / v702 + -1.0) * (v334 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v334 <= -v702)
          {
            v336 = v334 / v702 * 0.785398163
                 - v334 / v702 * (-1.0 - v334 / v702) * (v334 / v702 * -0.0663008339 + 0.244711287);
            v337 = 3.14159265;
          }
          else
          {
            v335 = fabs(v702 / v334);
            v336 = v702 / v334 * (v335 + -1.0) * (v335 * 0.0663008339 + 0.244711287) + v702 / v334 * -0.785398163;
            v337 = 1.57079633;
          }
          v348 = v336 + v337;
        }
        v349 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v348 * v348)), v348 * v348);
        v256 = (v348 + v348 * (v349.f64[0] + vmuld_lane_f64(v348 * v348 * (v348 * v348), v349, 1))) / v334;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_378;
        v256 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v256;
      v703.f64[1] = v701.f64[1] * v256;
      goto LABEL_530;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v289 = sqrt(_D6);
    v290 = fabs(v702);
    v291 = fabs(v289);
    v292 = v290 / v291;
    if (v290 >= v291)
      v292 = v291 / v290;
    if (v292 <= 0.414213562)
    {
      v294 = 1;
      v295 = 2;
      v293 = v292;
      if (_D6 >= 0.00000001)
      {
LABEL_443:
        if (v290 < v291)
          v294 = -v294;
        else
          v295 = v292 > 0.414213562;
        v296 = v289 == INFINITY && v290 == INFINITY;
        v297 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v293 * v293), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v293 * v293), (float64x2_t)xmmword_210315370), v293 * v293 * (v293 * v293))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v293 * v293), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v293 * v293), (float64x2_t)xmmword_210315380), v293 * v293 * (v293 * v293))), v293 * v293 * (v293 * v293) * (v293 * v293 * (v293 * v293))));
        v298 = v293 + v293 * vdivq_f64(v297, (float64x2_t)vdupq_laneq_s64((int64x2_t)v297, 1)).f64[0];
        if (v296)
          v298 = 0.785398163;
        if (v289 == 0.0 && v702 == 0.0)
          v300 = 0.0;
        else
          v300 = v298;
        if (v702 < 0.0)
        {
          v295 = 4 - v295;
          v294 = -v294;
        }
        if (v289 < 0.0)
        {
          v295 = -v295;
          v294 = -v294;
        }
        v301 = (double)v295 * 3.061617e-17 + (double)v295 * 0.785398163 + v300 * (double)v294;
        v302 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v8 + 168), *(int64x2_t *)(v8 + 184)), v301 * v301)), v301 * v301);
        v303 = 1.0 / v289 * (v301 + v301 * (v302.f64[0] + vmuld_lane_f64(v301 * v301 * (v301 * v301), v302, 1)));
        goto LABEL_517;
      }
    }
    else
    {
      v293 = (v291 - v290) / (v290 + v291);
      if (v290 >= v291)
        v293 = -v293;
      v294 = -1;
      v295 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_443;
    }
    v303 = 1.0 / v702;
LABEL_517:
    v338 = vmulq_n_f64(v701, v303);
    v339 = *(double *)v8;
    v340 = *(double *)(v8 + 8);
    v341 = v338.f64[1];
    v342 = *(double *)(v8 + 16);
    v344 = *(double *)(v8 + 32);
    v343 = *(double *)(v8 + 40);
    goto LABEL_531;
  }
LABEL_547:
  v358 = *(_BYTE **)(a3 + 96);
  v359 = (float64x2_t *)a1[90];
  v360 = (float64x2_t *)a1[89];
  v361 = (char *)v359 - (char *)v360;
  v362 = v359 - v360;
  v700 = (double **)(a3 + 96);
  if (v362 > (uint64_t)(*(_QWORD *)(a3 + 112) - (_QWORD)v358) >> 4)
  {
    if ((v361 & 0x8000000000000000) == 0)
    {
      v363 = *(_BYTE **)(a3 + 104);
      v364 = (char *)operator new(v361);
      v365 = &v364[(v363 - v358) & 0xFFFFFFFFFFFFFFF0];
      v366 = v365;
      if (v363 != v358)
      {
        v367 = &v364[(v363 - v358) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v366 = v367 - 16;
          *((_OWORD *)v367 - 1) = *((_OWORD *)v363 - 1);
          v363 -= 16;
          v367 -= 16;
        }
        while (v363 != v358);
      }
      *(_QWORD *)(a3 + 96) = v366;
      *(_QWORD *)(a3 + 104) = v365;
      *(_QWORD *)(a3 + 112) = &v364[16 * v362];
      if (v358)
      {
        operator delete(v358);
        v360 = (float64x2_t *)a1[89];
        v359 = (float64x2_t *)a1[90];
      }
      goto LABEL_554;
    }
LABEL_1096:
    sub_20E867F44();
  }
LABEL_554:
  if (v360 != v359)
  {
    v368 = (int64x2_t *)(v8 + 168);
    while (1)
    {
      v701 = *v360;
      v702 = 1.0;
      v370 = *(_DWORD *)(v8 + 992);
      if (v370 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1091;
        }
        v370 = *(_DWORD *)(v8 + 992);
        if (v370 > 7)
        {
LABEL_568:
          if (v370 <= 0xB)
          {
            if (v370 <= 9)
            {
              if (v370 == 9)
              {
                v371 = sub_20EB3641C(v8, &v703, &v701);
                goto LABEL_670;
              }
              _V0.D[1] = v701.f64[1];
              _D1 = v701.f64[1];
              __asm { FMLA            D6, D1, V0.D[1] }
              v389 = sqrt(_D6);
              v390 = fabs(v702);
              v391 = fabs(v389);
              v392 = v390 / v391;
              if (v390 >= v391)
                v392 = v391 / v390;
              if (v392 <= 0.414213562)
              {
                v394 = 1;
                v395 = 2;
                v393 = v392;
                if (_D6 >= 0.00000001)
                  goto LABEL_598;
              }
              else
              {
                v393 = (v391 - v390) / (v390 + v391);
                if (v390 >= v391)
                  v393 = -v393;
                v394 = -1;
                v395 = 1;
                if (_D6 >= 0.00000001)
                {
LABEL_598:
                  if (v390 < v391)
                    v394 = -v394;
                  else
                    v395 = v392 > 0.414213562;
                  v396 = v389 == INFINITY && v390 == INFINITY;
                  v397 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v393 * v393), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v393 * v393), (float64x2_t)xmmword_210315370), v393 * v393 * (v393 * v393))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v393 * v393), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v393 * v393), (float64x2_t)xmmword_210315380), v393 * v393 * (v393 * v393))),
                             v393 * v393 * (v393 * v393) * (v393 * v393 * (v393 * v393))));
                  v398 = v393 + v393 * vdivq_f64(v397, (float64x2_t)vdupq_laneq_s64((int64x2_t)v397, 1)).f64[0];
                  if (v396)
                    v398 = 0.785398163;
                  if (v389 == 0.0 && v702 == 0.0)
                    v400 = 0.0;
                  else
                    v400 = v398;
                  if (v702 < 0.0)
                  {
                    v395 = 4 - v395;
                    v394 = -v394;
                  }
                  if (v389 < 0.0)
                  {
                    v395 = -v395;
                    v394 = -v394;
                  }
                  v401 = (double)v395 * 3.061617e-17 + (double)v395 * 0.785398163 + v400 * (double)v394;
                  v402 = 1.0
                       / v389
                       * (v401
                        * (v401
                         * v401
                         * (*(double *)(v8 + 168)
                          + v401
                          * v401
                          * (*(double *)(v8 + 176)
                           + v401
                           * v401
                           * (*(double *)(v8 + 184)
                            + v401
                            * v401
                            * (*(double *)(v8 + 192)
                             + v401
                             * v401
                             * (*(double *)(v8 + 200)
                              + v401 * v401 * (*(double *)(v8 + 208) + v401 * v401 * *(double *)(v8 + 216)))))))
                         + 1.0));
LABEL_692:
                  v447 = vmulq_n_f64(v701, v402);
                  v703 = v447;
                  v445 = *(double *)v8;
                  v443 = *(double *)(v8 + 8);
                  v446 = v447.f64[1];
                  v442 = *(double *)(v8 + 16);
                  v444 = *(double *)(v8 + 32);
                  v441 = *(double *)(v8 + 40);
LABEL_693:
                  v439 = v442 + v445 * v447.f64[0] + v443 * v446;
                  v448 = v446 * v444 + v441;
                  v450 = *(double **)(a3 + 104);
                  v449 = *(_QWORD *)(a3 + 112);
                  if ((unint64_t)v450 >= v449)
                  {
LABEL_712:
                    v467 = *v700;
                    v468 = ((char *)v450 - (char *)*v700) >> 4;
                    v469 = v468 + 1;
                    if ((unint64_t)(v468 + 1) >> 60)
                      sub_20E867F44();
                    v470 = v449 - (_QWORD)v467;
                    if (v470 >> 3 > v469)
                      v469 = v470 >> 3;
                    if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFF0)
                      v471 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v471 = v469;
                    if (v471)
                    {
                      if (v471 >> 60)
                        sub_20E877A38();
                      v472 = (char *)operator new(16 * v471);
                      v473 = (double *)&v472[16 * v468];
                      *v473 = v439;
                      v473[1] = v448;
                      v474 = (uint64_t)v473;
                      if (v450 == v467)
                      {
LABEL_721:
                        v369 = v473 + 2;
                        *(_QWORD *)(a3 + 96) = v474;
                        *(_QWORD *)(a3 + 104) = v473 + 2;
                        *(_QWORD *)(a3 + 112) = &v472[16 * v471];
                        if (!v450)
                          goto LABEL_557;
LABEL_726:
                        operator delete(v450);
LABEL_557:
                        *(_QWORD *)(a3 + 104) = v369;
                        goto LABEL_558;
                      }
                    }
                    else
                    {
                      v472 = 0;
                      v473 = (double *)(16 * v468);
                      *v473 = v439;
                      v473[1] = v448;
                      v474 = 16 * v468;
                      if (v450 == v467)
                        goto LABEL_721;
                    }
                    do
                    {
                      *(_OWORD *)(v474 - 16) = *((_OWORD *)v450 - 1);
                      v474 -= 16;
                      v450 -= 2;
                    }
                    while (v450 != v467);
                    v450 = *v700;
                    v369 = v473 + 2;
                    *(_QWORD *)(a3 + 96) = v474;
                    *(_QWORD *)(a3 + 104) = v473 + 2;
                    *(_QWORD *)(a3 + 112) = &v472[16 * v471];
                    if (!v450)
                      goto LABEL_557;
                    goto LABEL_726;
                  }
LABEL_556:
                  *v450 = v439;
                  v450[1] = v448;
                  v369 = v450 + 2;
                  goto LABEL_557;
                }
              }
              v402 = 1.0 / v702;
              goto LABEL_692;
            }
            if (v370 == 10)
              v371 = sub_20EB24288(&v703, (uint64_t)&v701, (double *)(v8 + 168), (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v371 = sub_20EB3A2E4(v8, &v703, &v701);
LABEL_670:
            if (!v371)
              goto LABEL_558;
            v438 = *(_DWORD *)(v8 + 992);
            if (v438 != -1)
            {
              if (v438 <= 7)
                goto LABEL_673;
LABEL_679:
              if (v438 <= 0xB)
              {
                v443 = *(double *)(v8 + 8);
                v442 = *(double *)(v8 + 16);
                v444 = *(double *)(v8 + 32);
                v441 = *(double *)(v8 + 40);
                v445 = *(double *)v8;
                v446 = v703.f64[1];
                v447.f64[0] = v703.f64[0];
                if (v438 <= 9)
                  goto LABEL_693;
                v439 = v442 + v445 * v703.f64[0] + v443 * v703.f64[1];
                v440 = v444 * v703.f64[1];
LABEL_682:
                v448 = v441 + v440;
                v450 = *(double **)(a3 + 104);
                v449 = *(_QWORD *)(a3 + 112);
                if ((unint64_t)v450 >= v449)
                  goto LABEL_712;
                goto LABEL_556;
              }
LABEL_685:
              v439 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
              v448 = *(double *)(v8 + 40) + *(double *)(v8 + 32) * v703.f64[1];
              v450 = *(double **)(a3 + 104);
              v449 = *(_QWORD *)(a3 + 112);
              if ((unint64_t)v450 >= v449)
                goto LABEL_712;
              goto LABEL_556;
            }
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1091;
            }
            v438 = *(_DWORD *)(v8 + 992);
            if (v438 > 7)
              goto LABEL_679;
LABEL_673:
            if (v438 <= 3)
            {
              if (v438 <= 1)
              {
                if (!v438)
                {
LABEL_1090:
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1091:
                  abort();
                }
                goto LABEL_676;
              }
              v383 = v703;
LABEL_703:
              v439 = *(double *)(v8 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)v8, v383));
              v448 = vmuld_lane_f64(*(double *)(v8 + 32), v383, 1) + *(double *)(v8 + 40);
              v450 = *(double **)(a3 + 104);
              v449 = *(_QWORD *)(a3 + 112);
              if ((unint64_t)v450 >= v449)
                goto LABEL_712;
              goto LABEL_556;
            }
            if (v438 > 5)
              goto LABEL_685;
LABEL_710:
            v456 = *(double *)v8;
            v457 = *(double *)(v8 + 8);
            v458 = v703.f64[1];
            v455.f64[0] = v703.f64[0];
            v459 = *(double *)(v8 + 16);
            v461 = *(double *)(v8 + 32);
            v460 = *(double *)(v8 + 40);
LABEL_711:
            v439 = v459 + v456 * v455.f64[0] + v457 * v458;
            v448 = v458 * v461 + v460;
            v450 = *(double **)(a3 + 104);
            v449 = *(_QWORD *)(a3 + 112);
            if ((unint64_t)v450 >= v449)
              goto LABEL_712;
            goto LABEL_556;
          }
          if (v370 > 0xD)
          {
            if (v370 == 14)
              v371 = sub_20EB247C0(&v703, (uint64_t)&v701, (double *)(v8 + 168), (*(double *)v8 + *(double *)(v8 + 32)) * 0.5);
            else
              v371 = sub_20EB3E39C(v8, &v703, &v701);
            goto LABEL_670;
          }
          if (v370 != 13 || v702 < 0.00000001)
            goto LABEL_558;
          _Q0 = vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0));
          v375 = (*(double *)v8 + *(double *)(v8 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v378 = v375 * (_D2 * v375);
          v379 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v378* (*(double *)(v8 + 168)+ v375 * *(double *)(v8 + 224)+ v378* (*(double *)(v8 + 176)+ v375 * *(double *)(v8 + 232)+ v378* (*(double *)(v8 + 184)+ v375 * *(double *)(v8 + 240)+ v378* (*(double *)(v8 + 192)+ v375 * *(double *)(v8 + 248)+ v378* (*(double *)(v8 + 200)+ v375 * *(double *)(v8 + 256)+ v378
                                       * (*(double *)(v8 + 208)
                                        + v375 * *(double *)(v8 + 264)
                                        + v378 * (*(double *)(v8 + 216) + *(double *)(v8 + 272) * v375 + v378 * 0.0)))))))
                                  / 100.0
                                  + 1.0),
                                  0));
LABEL_589:
          v703 = v379;
          goto LABEL_685;
        }
      }
      else if (v370 > 7)
      {
        goto LABEL_568;
      }
      if (v370 > 3)
        break;
      if (v370 > 1)
      {
        if (v370 == 2)
        {
          if (*(_DWORD *)(v8 + 212))
          {
            if (v702 < 0.00000001)
              goto LABEL_558;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v383 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v8 + 192), *(int8x16_t *)(v8 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v8 + 192), *(float64x2_t *)(v8 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v8 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v8 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v8 + 184) * *(double *)&_D1))));
            v703.f64[0] = v383.f64[0];
          }
          else
          {
            if (v702 < 0.00000001)
              goto LABEL_558;
            _Q2 = vmulq_n_f64(v701, 1.0 / v702);
            _D0 = vmuld_lane_f64(1.0 / v702, v701, 1);
            __asm { FMLA            D1, D0, V2.D[1] }
            v383 = vmulq_n_f64(_Q2, *(double *)(v8 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * _D1));
          }
          goto LABEL_703;
        }
        _V0.D[1] = v701.f64[1];
        _D1 = v701.f64[1];
        __asm { FMLA            D6, D1, V0.D[1] }
        v424 = sqrt(_D6);
        v425 = fabs(v702);
        v426 = fabs(v424);
        v427 = v425 / v426;
        if (v425 >= v426)
          v427 = v426 / v425;
        if (v427 <= 0.414213562)
        {
          v429 = 1;
          v430 = 2;
          v428 = v427;
          if (_D6 >= 0.00000001)
          {
LABEL_648:
            if (v425 < v426)
              v429 = -v429;
            else
              v430 = v427 > 0.414213562;
            v431 = v424 == INFINITY && v425 == INFINITY;
            v432 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v428 * v428), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v428 * v428), (float64x2_t)xmmword_210315370), v428 * v428 * (v428 * v428))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v428 * v428), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v428 * v428), (float64x2_t)xmmword_210315380), v428 * v428 * (v428 * v428))),
                       v428 * v428 * (v428 * v428) * (v428 * v428 * (v428 * v428))));
            v433 = v428 + v428 * vdivq_f64(v432, (float64x2_t)vdupq_laneq_s64((int64x2_t)v432, 1)).f64[0];
            if (v431)
              v433 = 0.785398163;
            if (v424 == 0.0 && v702 == 0.0)
              v435 = 0.0;
            else
              v435 = v433;
            if (v702 < 0.0)
            {
              v430 = 4 - v430;
              v429 = -v429;
            }
            if (v424 < 0.0)
            {
              v430 = -v430;
              v429 = -v429;
            }
            v436 = (double)v430 * 3.061617e-17 + (double)v430 * 0.785398163 + v435 * (double)v429;
            v437 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v368, *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v368, *(int64x2_t *)(v8 + 184)), v436 * v436)), v436 * v436);
            v383 = vmulq_n_f64(v701, 1.0 / v424 * (v436 + v436 * (v437.f64[0] + vmuld_lane_f64(v436 * v436 * (v436 * v436), v437, 1))));
            goto LABEL_703;
          }
        }
        else
        {
          v428 = (v426 - v425) / (v425 + v426);
          if (v425 >= v426)
            v428 = -v428;
          v429 = -1;
          v430 = 1;
          if (_D6 >= 0.00000001)
            goto LABEL_648;
        }
        v383 = vmulq_n_f64(v701, 1.0 / v702);
        goto LABEL_703;
      }
      if (!v370)
        goto LABEL_1090;
      if (v702 >= 0.00000001)
      {
        v703 = vmulq_n_f64(v701, 1.0 / v702);
LABEL_676:
        v439 = *(double *)(v8 + 16) + *(double *)v8 * v703.f64[0] + *(double *)(v8 + 8) * v703.f64[1];
        v440 = *(double *)(v8 + 40);
        v441 = v703.f64[1] * *(double *)(v8 + 32);
        goto LABEL_682;
      }
LABEL_558:
      if (++v360 == v359)
        return;
    }
    if (v370 > 5)
    {
      if (v370 != 6)
      {
        v371 = sub_20EB31FFC(v8, &v703, &v701);
        goto LABEL_670;
      }
      v384 = vaddq_f64(vdivq_f64(v701, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v702, 0)), *(float64x2_t *)(v8 + 192));
      v385 = sqrt(vaddvq_f64(vmulq_f64(v384, v384)));
      v379 = vaddq_f64(*(float64x2_t *)(v8 + 208), vmulq_n_f64(v384, v385 * (v385 * (*(double *)(v8 + 168) + v385 * (*(double *)(v8 + 176) + *(double *)(v8 + 184) * v385)))+ 1.0));
      goto LABEL_589;
    }
    if (v370 == 5)
    {
      v372 = v701.f64[0] * v701.f64[0] + v701.f64[1] * v701.f64[1];
      if (v372 >= 0.00000001)
      {
        v451 = sqrt(v372);
        if (v451 <= v702)
        {
          v465 = v451 / v702 * 0.785398163
               - v451 / v702 * (v451 / v702 + -1.0) * (v451 / v702 * 0.0663008339 + 0.244711287);
        }
        else
        {
          if (v451 <= -v702)
          {
            v453 = v451 / v702 * 0.785398163
                 - v451 / v702 * (-1.0 - v451 / v702) * (v451 / v702 * -0.0663008339 + 0.244711287);
            v454 = 3.14159265;
          }
          else
          {
            v452 = fabs(v702 / v451);
            v453 = v702 / v451 * (v452 + -1.0) * (v452 * 0.0663008339 + 0.244711287) + v702 / v451 * -0.785398163;
            v454 = 1.57079633;
          }
          v465 = v453 + v454;
        }
        v466 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v368, *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v368, *(int64x2_t *)(v8 + 184)), v465 * v465)), v465 * v465);
        v373 = (v465 + v465 * (v466.f64[0] + vmuld_lane_f64(v465 * v465 * (v465 * v465), v466, 1))) / v451;
      }
      else
      {
        if (v702 == 0.0)
          goto LABEL_558;
        v373 = 1.0 / v702;
      }
      v703.f64[0] = v701.f64[0] * v373;
      v703.f64[1] = v701.f64[1] * v373;
      goto LABEL_710;
    }
    _V0.D[1] = v701.f64[1];
    _D1 = v701.f64[1];
    __asm { FMLA            D6, D1, V0.D[1] }
    v406 = sqrt(_D6);
    v407 = fabs(v702);
    v408 = fabs(v406);
    v409 = v407 / v408;
    if (v407 >= v408)
      v409 = v408 / v407;
    if (v409 <= 0.414213562)
    {
      v411 = 1;
      v412 = 2;
      v410 = v409;
      if (_D6 >= 0.00000001)
      {
LABEL_623:
        if (v407 < v408)
          v411 = -v411;
        else
          v412 = v409 > 0.414213562;
        v413 = v406 == INFINITY && v407 == INFINITY;
        v414 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v410 * v410), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v410 * v410), (float64x2_t)xmmword_210315370), v410 * v410 * (v410 * v410))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v410 * v410), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v410 * v410), (float64x2_t)xmmword_210315380), v410 * v410 * (v410 * v410))), v410 * v410 * (v410 * v410) * (v410 * v410 * (v410 * v410))));
        v415 = v410 + v410 * vdivq_f64(v414, (float64x2_t)vdupq_laneq_s64((int64x2_t)v414, 1)).f64[0];
        if (v413)
          v415 = 0.785398163;
        if (v406 == 0.0 && v702 == 0.0)
          v417 = 0.0;
        else
          v417 = v415;
        if (v702 < 0.0)
        {
          v412 = 4 - v412;
          v411 = -v411;
        }
        if (v406 < 0.0)
        {
          v412 = -v412;
          v411 = -v411;
        }
        v418 = (double)v412 * 3.061617e-17 + (double)v412 * 0.785398163 + v417 * (double)v411;
        v419 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*v368, *(int64x2_t *)(v8 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*v368, *(int64x2_t *)(v8 + 184)), v418 * v418)), v418 * v418);
        v420 = 1.0 / v406 * (v418 + v418 * (v419.f64[0] + vmuld_lane_f64(v418 * v418 * (v418 * v418), v419, 1)));
        goto LABEL_697;
      }
    }
    else
    {
      v410 = (v408 - v407) / (v407 + v408);
      if (v407 >= v408)
        v410 = -v410;
      v411 = -1;
      v412 = 1;
      if (_D6 >= 0.00000001)
        goto LABEL_623;
    }
    v420 = 1.0 / v702;
LABEL_697:
    v455 = vmulq_n_f64(v701, v420);
    v456 = *(double *)v8;
    v457 = *(double *)(v8 + 8);
    v458 = v455.f64[1];
    v459 = *(double *)(v8 + 16);
    v461 = *(double *)(v8 + 32);
    v460 = *(double *)(v8 + 40);
    goto LABEL_711;
  }
}

void sub_20F0E70B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E70C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E70DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E70F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7118(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E712C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7140(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7154(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E717C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E7190(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E71A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F0E71B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0E71B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F0E7238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  int v9;
  char *v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void **v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void **v28;
  int64x2_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t v61;
  uint64_t v62;
  int64x2_t v63;
  char *v64;
  void *v65[2];
  char *v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 __p;
  void *v75;
  char v76;

  v2 = a2;
  v5 = *(_QWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 96);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = 0;
    v61 = a2;
    v62 = a1;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 6);
    if (v7 > 0x1E1E1E1E1E1E1E1)
      sub_20EABADD4();
    v8 = operator new(0xAAAAAAAAAAAAAAD8 * (v6 >> 6));
    v6 = (uint64_t)v8 + 136 * v7;
    v63.i64[0] = (uint64_t)v8;
    v63.i64[1] = (uint64_t)v8;
    v64 = (char *)v6;
    v61 = v2;
    v62 = a1;
    if (v4 != v5)
    {
      while (1)
      {
        *(_OWORD *)v65 = *(_OWORD *)(v5 + 32);
        v67 = *(_OWORD *)(v5 + 48);
        v69 = *(_OWORD *)(v5 + 64);
        v70 = *(_OWORD *)(v5 + 80);
        v71 = *(_OWORD *)(v5 + 96);
        if (*(_BYTE *)(v5 + 128))
        {
          *(_QWORD *)&v72 = *(_QWORD *)(v5 + 112);
          DWORD2(v72) = *(_DWORD *)(v5 + 120);
          v73 = 1;
          LOBYTE(__p) = 0;
          v76 = 0;
          v9 = *(unsigned __int8 *)(v5 + 184);
          if (!*(_BYTE *)(v5 + 184))
            goto LABEL_11;
        }
        else
        {
          LOBYTE(v72) = 0;
          v73 = 0;
          LOBYTE(__p) = 0;
          v76 = 0;
          v9 = *(unsigned __int8 *)(v5 + 184);
          if (!*(_BYTE *)(v5 + 184))
          {
LABEL_11:
            v11 = (void **)v63.i64[1];
            v10 = v64;
            if (v63.i64[1] >= (unint64_t)v64)
              goto LABEL_12;
            goto LABEL_23;
          }
        }
        if (*(char *)(v5 + 183) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v5 + 160), *(_QWORD *)(v5 + 168));
        }
        else
        {
          __p = *(_OWORD *)(v5 + 160);
          v75 = *(void **)(v5 + 176);
        }
        v76 = 1;
        v11 = (void **)v63.i64[1];
        v10 = v64;
        if (v63.i64[1] >= (unint64_t)v64)
        {
LABEL_12:
          v12 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v11 - v63.i64[0]) >> 3) + 1;
          if (v12 > 0x1E1E1E1E1E1E1E1)
            sub_20EABADD4();
          v13 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v10[-v63.i64[0]] >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0xF0F0F0F0F0F0F0)
            v14 = 0x1E1E1E1E1E1E1E1;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 > 0x1E1E1E1E1E1E1E1)
              sub_20E877A38();
            v15 = (char *)operator new(136 * v14);
          }
          else
          {
            v15 = 0;
          }
          v18 = &v15[8 * (((uint64_t)v11 - v63.i64[0]) >> 3)];
          *((_OWORD *)v18 + 4) = v71;
          *((_OWORD *)v18 + 5) = v72;
          v18[96] = v73;
          *(_OWORD *)v18 = *(_OWORD *)v65;
          *((_OWORD *)v18 + 1) = v67;
          *((_OWORD *)v18 + 2) = v69;
          *((_OWORD *)v18 + 3) = v70;
          v18[104] = 0;
          v18[128] = 0;
          if (v9)
          {
            *(_OWORD *)(v18 + 104) = __p;
            *((_QWORD *)v18 + 15) = v75;
            v75 = 0;
            __p = 0uLL;
            v18[128] = 1;
          }
          v17 = v18 + 136;
          if (v11 == (void **)v63.i64[0])
          {
            v63.i64[0] = (uint64_t)&v15[8 * (((uint64_t)v11 - v63.i64[0]) >> 3)];
            v64 = &v15[136 * v14];
          }
          else
          {
            v19 = 0;
            do
            {
              v20 = &v18[v19 * 8];
              v21 = &v11[v19];
              v22 = *(_OWORD *)&v11[v19 - 17];
              v23 = *(_OWORD *)&v11[v19 - 15];
              *(_OWORD *)(v20 - 104) = *(_OWORD *)&v11[v19 - 13];
              *(_OWORD *)(v20 - 120) = v23;
              *(_OWORD *)(v20 - 136) = v22;
              v24 = *(_OWORD *)&v11[v19 - 11];
              v25 = *(_OWORD *)&v11[v19 - 9];
              v26 = *(_OWORD *)&v11[v19 - 7];
              *(v20 - 40) = (char)v11[v19 - 5];
              *(_OWORD *)(v20 - 56) = v26;
              *(_OWORD *)(v20 - 72) = v25;
              *(_OWORD *)(v20 - 88) = v24;
              v18[v19 * 8 - 32] = 0;
              *(v20 - 8) = 0;
              if (LOBYTE(v11[v19 - 1]))
              {
                v27 = *((_OWORD *)v21 - 2);
                *(_QWORD *)&v18[v19 * 8 - 16] = *(v21 - 2);
                *(_OWORD *)&v18[v19 * 8 - 32] = v27;
                *(v21 - 3) = 0;
                *(v21 - 2) = 0;
                *(v21 - 4) = 0;
                *(v20 - 8) = 1;
              }
              v19 -= 17;
            }
            while (&v11[v19] != (void **)v63.i64[0]);
            v28 = (void **)v63.i64[1];
            v11 = (void **)v63.i64[0];
            v63.i64[0] = (uint64_t)&v18[v19 * 8];
            v64 = &v15[136 * v14];
            while (v28 != v11)
            {
              if (*((_BYTE *)v28 - 8) && *((char *)v28 - 9) < 0)
                operator delete(*(v28 - 4));
              v28 -= 17;
            }
          }
          if (v11)
            operator delete(v11);
          goto LABEL_43;
        }
LABEL_23:
        *((_OWORD *)v11 + 1) = v67;
        *((_OWORD *)v11 + 2) = v69;
        *(_OWORD *)v11 = *(_OWORD *)v65;
        *((_BYTE *)v11 + 96) = v73;
        *((_OWORD *)v11 + 4) = v71;
        *((_OWORD *)v11 + 5) = v72;
        *((_OWORD *)v11 + 3) = v70;
        *((_BYTE *)v11 + 104) = 0;
        *((_BYTE *)v11 + 128) = 0;
        if (v76)
        {
          v16 = __p;
          v11[15] = v75;
          *(_OWORD *)(v11 + 13) = v16;
          v75 = 0;
          __p = 0uLL;
          *((_BYTE *)v11 + 128) = 1;
        }
        v17 = (char *)(v11 + 17);
LABEL_43:
        v63.i64[1] = (uint64_t)v17;
        if (v76 && SHIBYTE(v75) < 0)
          operator delete((void *)__p);
        v5 += 192;
        if (v5 == v4)
        {
          v29 = v63;
          v6 = (uint64_t)v64;
          a1 = v62;
          goto LABEL_49;
        }
      }
    }
  }
  v29 = vdupq_n_s64((unint64_t)v8);
LABEL_49:
  *(int64x2_t *)a1 = v29;
  *(_QWORD *)(a1 + 16) = v6;
  v30 = *(char **)(v2 + 40);
  v31 = *(char **)(v2 + 48);
  v32 = v31 - v30;
  if (v31 != v30)
  {
    v33 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 2);
    if (v33 > 0x1555555555555555)
      sub_20EABADD4();
    v34 = (char *)operator new(v32);
    v66 = v34;
    v68 = &v34[12 * v33];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v36 = *(_DWORD *)v30;
          v35 = *((_DWORD *)v30 + 1);
          v37 = *((_DWORD *)v30 + 2);
          if (v34 >= v68)
            break;
          *(_DWORD *)v34 = v36;
          *((_DWORD *)v34 + 1) = v35;
          *((_DWORD *)v34 + 2) = v37;
          v34 += 12;
          v30 += 12;
          if (v30 == v31)
            goto LABEL_71;
        }
        v38 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v66) >> 2) + 1;
        if (v38 > 0x1555555555555555)
          sub_20EABADD4();
        if (0x5555555555555556 * ((v68 - v66) >> 2) > v38)
          v38 = 0x5555555555555556 * ((v68 - v66) >> 2);
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v66) >> 2) >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v38;
        if (v39)
        {
          if (v39 > 0x1555555555555555)
            sub_20E877A38();
          v40 = (char *)operator new(12 * v39);
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[4 * ((v34 - v66) >> 2)];
        *(_DWORD *)v41 = v36;
        *((_DWORD *)v41 + 1) = v35;
        *((_DWORD *)v41 + 2) = v37;
        v42 = v41 + 12;
        if (v34 != v66)
          break;
        v66 = &v40[4 * ((v34 - v66) >> 2)];
        v68 = &v40[12 * v39];
LABEL_70:
        operator delete(v34);
        v34 = v42;
        v30 += 12;
        if (v30 == v31)
        {
LABEL_71:
          v45 = v66;
          v46 = v68;
          v2 = v61;
          a1 = v62;
          goto LABEL_73;
        }
      }
      do
      {
        v43 = *(_QWORD *)(v34 - 12);
        v34 -= 12;
        v44 = *((_DWORD *)v34 + 2);
        *(_QWORD *)(v41 - 12) = v43;
        v41 -= 12;
        *((_DWORD *)v41 + 2) = v44;
      }
      while (v34 != v66);
      v34 = v66;
      v66 = v41;
      v68 = &v40[12 * v39];
      if (v34)
        goto LABEL_70;
      v34 = v42;
      v30 += 12;
      if (v30 == v31)
        goto LABEL_71;
    }
  }
  v46 = 0;
  v34 = 0;
  v45 = 0;
LABEL_73:
  *(_QWORD *)(a1 + 24) = v45;
  *(_QWORD *)(a1 + 32) = v34;
  *(_QWORD *)(a1 + 40) = v46;
  v47 = *(_OWORD *)(v2 + 208);
  v48 = *(_OWORD *)(v2 + 224);
  v49 = *(_OWORD *)(v2 + 240);
  v50 = *(_OWORD *)(v2 + 256);
  v51 = *(_OWORD *)(v2 + 144);
  v52 = *(_OWORD *)(v2 + 160);
  v53 = *(_OWORD *)(v2 + 176);
  v54 = *(_OWORD *)(v2 + 192);
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 80) = v53;
  *(_OWORD *)(a1 + 96) = v54;
  *(_OWORD *)(a1 + 48) = v51;
  *(_OWORD *)(a1 + 64) = v52;
  *(_OWORD *)(a1 + 144) = v49;
  *(_OWORD *)(a1 + 160) = v50;
  *(_OWORD *)(a1 + 112) = v47;
  *(_OWORD *)(a1 + 128) = v48;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v56 = *(_BYTE **)(v2 + 64);
  v55 = *(_BYTE **)(v2 + 72);
  v57 = v55 - v56;
  if (v55 != v56)
  {
    if (v57 < 0)
      sub_20EABADD4();
    v58 = (char *)operator new(v55 - v56);
    *(_QWORD *)(a1 + 176) = v58;
    *(_QWORD *)(a1 + 184) = v58;
    v59 = &v58[4 * (v57 >> 2)];
    *(_QWORD *)(a1 + 192) = v59;
    memcpy(v58, v56, v57);
    *(_QWORD *)(a1 + 184) = v59;
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)v2;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(v2 + 272);
  return a1;
}

void sub_20F0E7884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  void **v34;
  void *v36;
  void *v37;

  v36 = *v34;
  if (*v34)
  {
    *(_QWORD *)(a10 + 184) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(a10 + 24);
  if (v37)
  {
    *(_QWORD *)(a10 + 32) = v37;
    operator delete(v37);
  }
  sub_20EAB9DDC((void **)a10);
  _Unwind_Resume(a1);
}

void sub_20F0E7924()
{
  JUMPOUT(0x20F0E792CLL);
}

void sub_20F0E7950(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  float64x2_t v15;
  char *v16;
  double v18;
  float64x2_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  float64x2_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  void **v64;
  void **v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  float64_t v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  int64x2_t v77;
  float64x2_t v78;
  int64x2_t v79;
  char *v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64_t v84;
  double v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _BYTE v91[25];
  __int128 __p;
  uint64_t v93;
  char v94;
  float64x2_t *v95;

  v2 = a1;
  v3 = a2;
  *(_QWORD *)a2 = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 8) = -1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  v4 = a2 + 40;
  *(_BYTE *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 97) = 0u;
  *(_OWORD *)(a2 + 208) = xmmword_21039C168;
  *(_OWORD *)(a2 + 224) = unk_21039C178;
  *(_OWORD *)(a2 + 240) = xmmword_21039C188;
  *(_OWORD *)(a2 + 256) = unk_21039C198;
  *(_OWORD *)(a2 + 144) = xmmword_21039C128;
  *(_OWORD *)(a2 + 160) = unk_21039C138;
  *(_OWORD *)(a2 + 176) = xmmword_21039C148;
  *(_OWORD *)(a2 + 192) = unk_21039C158;
  *(_BYTE *)(a2 + 272) = 0;
  if ((uint64_t *)(a2 + 64) != a1 + 22)
    sub_20F0E80A4((_QWORD *)(a2 + 64), (char *)a1[22], (char *)a1[23], (a1[23] - a1[22]) >> 2);
  *(_QWORD *)v3 = v2[25];
  v5 = *((_OWORD *)v2 + 3);
  v6 = *((_OWORD *)v2 + 4);
  v7 = *((_OWORD *)v2 + 5);
  v8 = *((_OWORD *)v2 + 6);
  v9 = *((_OWORD *)v2 + 7);
  v10 = *((_OWORD *)v2 + 8);
  v11 = *((_OWORD *)v2 + 10);
  *(_OWORD *)(v3 + 240) = *((_OWORD *)v2 + 9);
  *(_OWORD *)(v3 + 256) = v11;
  *(_OWORD *)(v3 + 208) = v9;
  *(_OWORD *)(v3 + 224) = v10;
  *(_OWORD *)(v3 + 176) = v7;
  *(_OWORD *)(v3 + 192) = v8;
  *(_OWORD *)(v3 + 144) = v5;
  *(_OWORD *)(v3 + 160) = v6;
  *(_BYTE *)(v3 + 272) = *((_BYTE *)v2 + 208);
  v12 = *v2;
  v13 = v2[1];
  v80 = 0;
  v79 = 0uLL;
  if (v13 == v12)
  {
    v16 = 0;
    v14 = 0;
    goto LABEL_46;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 3) > 0x155555555555555)
    sub_20E867F44();
  v14 = (char *)operator new(0xB4B4B4B4B4B4B4C0 * ((v13 - v12) >> 3));
  v16 = &v14[0xB4B4B4B4B4B4B4C0 * ((v13 - v12) >> 3)];
  v79.i64[0] = (uint64_t)v14;
  v79.i64[1] = (uint64_t)v14;
  v80 = v16;
  if (v13 == v12)
  {
LABEL_46:
    v62 = vdupq_n_s64((unint64_t)v14);
    v63 = v3 + 88;
    v64 = *(void ***)(v3 + 88);
    if (!v64)
      goto LABEL_55;
    goto LABEL_47;
  }
  v75 = v2;
  v76 = v3;
  do
  {
    LOBYTE(v90) = 0;
    v91[0] = 0;
    v91[8] = 0;
    v91[24] = 0;
    LOBYTE(__p) = 0;
    v94 = 0;
    _Q0 = *(float64x2_t *)v12;
    v15.f64[0] = *(float64_t *)(v12 + 16);
    v18 = *(double *)(v12 + 24);
    _Q3 = vmulq_f64(_Q0, _Q0);
    _D4 = *(_QWORD *)(v12 + 8);
    __asm { FMLA            D3, D4, V0.D[1] }
    _Q3.f64[0] = 1.0 / sqrt(_Q3.f64[0] + v15.f64[0] * v15.f64[0]);
    _Q0 = vmulq_n_f64(*(float64x2_t *)v12, _Q3.f64[0]);
    _D5 = _Q0.f64[1];
    __asm { FMLA            D4, D5, V0.D[1] }
    *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vmulq_f64(v15, _Q3);
    v28.f64[1] = -v18;
    _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D4, v28.f64[0], v28.f64[0]) + v18 * v18);
    v81 = vmulq_n_f64(_Q0, _Q3.f64[0]);
    v82 = vmulq_n_f64(v28, _Q3.f64[0]);
    v83 = _Q0;
    v84 = v28.f64[0];
    v85 = v18;
    v29 = *(_OWORD *)(v12 + 56);
    v89 = *(_QWORD *)(v12 + 72);
    v88 = v29;
    v86 = *(_OWORD *)(v12 + 32);
    v87 = *(_QWORD *)(v12 + 48);
    if (*(_BYTE *)(v12 + 96))
    {
      v30 = *(_DWORD *)(v12 + 88);
      *(_QWORD *)&v90 = *(_QWORD *)(v12 + 80);
      DWORD2(v90) = v30;
      v91[0] = 1;
    }
    sub_20E869118((uint64_t)&__p, (_QWORD *)(v12 + 104));
    v31 = v79.i64[1];
    if (v79.i64[1] >= (unint64_t)v80)
    {
      v39 = v13;
      v40 = v79.i64[0];
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v79.i64[1] - v79.i64[0]) >> 6);
      v42 = v41 + 1;
      if (v41 + 1 > 0x155555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * ((uint64_t)&v80[-v79.i64[0]] >> 6) > v42)
        v42 = 0x5555555555555556 * ((uint64_t)&v80[-v79.i64[0]] >> 6);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v80[-v79.i64[0]] >> 6) >= 0xAAAAAAAAAAAAAALL)
        v43 = 0x155555555555555;
      else
        v43 = v42;
      if (v43)
      {
        if (v43 > 0x155555555555555)
          sub_20E877A38();
        v44 = (char *)operator new(192 * v43);
      }
      else
      {
        v44 = 0;
      }
      v45 = v82;
      v46 = &v44[64 * ((v79.i64[1] - v79.i64[0]) >> 6)];
      *(float64x2_t *)v46 = v81;
      *((float64x2_t *)v46 + 1) = v45;
      *((float64x2_t *)v46 + 2) = v83;
      *((float64_t *)v46 + 6) = v84;
      *((double *)v46 + 7) = v85;
      *((_OWORD *)v46 + 4) = v86;
      *((_QWORD *)v46 + 10) = v87;
      *((_QWORD *)v46 + 13) = v89;
      *(_OWORD *)(v46 + 88) = v88;
      v15 = *(float64x2_t *)v91;
      *((_OWORD *)v46 + 7) = v90;
      *((float64x2_t *)v46 + 8) = v15;
      *(_OWORD *)(v46 + 137) = *(_OWORD *)&v91[9];
      v47 = &v44[192 * v41];
      v47[160] = 0;
      v48 = v47 + 160;
      v49 = &v44[192 * v41];
      v49[184] = 0;
      v50 = v49 + 184;
      if (v94)
      {
        *(_OWORD *)v48 = __p;
        *((_QWORD *)v48 + 2) = v93;
        v93 = 0;
        __p = 0uLL;
        *v50 = 1;
      }
      v51 = &v44[192 * v43];
      v38 = v46 + 192;
      v13 = v39;
      if (v31 == v40)
      {
        v79.i64[0] = (uint64_t)v46;
        v79.i64[1] = (uint64_t)(v46 + 192);
        v80 = v51;
      }
      else
      {
        v52 = 0;
        do
        {
          v53 = &v46[v52];
          v54 = v31 + v52;
          v55 = *(_OWORD *)(v31 + v52 - 176);
          *((_OWORD *)v53 - 12) = *(_OWORD *)(v31 + v52 - 192);
          *((_OWORD *)v53 - 11) = v55;
          v56 = *(_OWORD *)(v31 + v52 - 160);
          *((_QWORD *)v53 - 18) = *(_QWORD *)(v31 + v52 - 144);
          *((_OWORD *)v53 - 10) = v56;
          *((_QWORD *)v53 - 17) = *(_QWORD *)(v31 + v52 - 136);
          v57 = *(_OWORD *)(v31 + v52 - 128);
          *((_QWORD *)v53 - 14) = *(_QWORD *)(v31 + v52 - 112);
          *((_OWORD *)v53 - 8) = v57;
          v58 = *(_OWORD *)(v31 + v52 - 104);
          *((_QWORD *)v53 - 11) = *(_QWORD *)(v31 + v52 - 88);
          *(_OWORD *)(v53 - 104) = v58;
          v59 = *(_OWORD *)(v31 + v52 - 80);
          v15 = *(float64x2_t *)(v31 + v52 - 64);
          *(_OWORD *)(v53 - 55) = *(_OWORD *)(v31 + v52 - 55);
          *((_OWORD *)v53 - 5) = v59;
          *((float64x2_t *)v53 - 4) = v15;
          v46[v52 - 32] = 0;
          *(v53 - 8) = 0;
          if (*(_BYTE *)(v31 + v52 - 8))
          {
            v60 = *(_OWORD *)(v54 - 32);
            *(_QWORD *)&v46[v52 - 16] = *(_QWORD *)(v54 - 16);
            *(_OWORD *)&v46[v52 - 32] = v60;
            *(_QWORD *)(v54 - 24) = 0;
            *(_QWORD *)(v54 - 16) = 0;
            *(_QWORD *)(v54 - 32) = 0;
            *(v53 - 8) = 1;
          }
          v52 -= 192;
        }
        while (v31 + v52 != v40);
        v61 = v79.i64[1];
        v31 = v79.i64[0];
        v79.i64[0] = (uint64_t)&v46[v52];
        v79.i64[1] = (uint64_t)(v46 + 192);
        v80 = v51;
        while (v61 != v31)
        {
          if (*(_BYTE *)(v61 - 8) && *(char *)(v61 - 9) < 0)
            operator delete(*(void **)(v61 - 32));
          v61 -= 192;
        }
      }
      if (v31)
        operator delete((void *)v31);
    }
    else
    {
      v32 = v82;
      *(float64x2_t *)v79.i64[1] = v81;
      *(float64x2_t *)(v31 + 16) = v32;
      v33 = v83;
      *(float64_t *)(v31 + 48) = v84;
      *(float64x2_t *)(v31 + 32) = v33;
      *(double *)(v31 + 56) = v85;
      v34 = v86;
      *(_QWORD *)(v31 + 80) = v87;
      *(_OWORD *)(v31 + 64) = v34;
      v35 = v88;
      *(_QWORD *)(v31 + 104) = v89;
      *(_OWORD *)(v31 + 88) = v35;
      v36 = v90;
      v15 = *(float64x2_t *)v91;
      *(_OWORD *)(v31 + 137) = *(_OWORD *)&v91[9];
      *(_OWORD *)(v31 + 112) = v36;
      *(float64x2_t *)(v31 + 128) = v15;
      *(_BYTE *)(v31 + 160) = 0;
      *(_BYTE *)(v31 + 184) = 0;
      if (v94)
      {
        v37 = __p;
        *(_QWORD *)(v31 + 176) = v93;
        *(_OWORD *)(v31 + 160) = v37;
        v93 = 0;
        __p = 0uLL;
        *(_BYTE *)(v31 + 184) = 1;
      }
      v38 = (char *)(v31 + 192);
    }
    v79.i64[1] = (uint64_t)v38;
    if (v94 && SHIBYTE(v93) < 0)
      operator delete((void *)__p);
    v12 += 136;
  }
  while (v12 != v13);
  v62 = v79;
  v16 = v80;
  v3 = v76;
  v2 = v75;
  v63 = v76 + 88;
  v64 = *(void ***)(v76 + 88);
  if (v64)
  {
LABEL_47:
    v77 = v62;
    v65 = *(void ***)(v3 + 96);
    v66 = v64;
    if (v65 != v64)
    {
      do
      {
        if (*((_BYTE *)v65 - 8) && *((char *)v65 - 9) < 0)
          operator delete(*(v65 - 4));
        v65 -= 24;
      }
      while (v65 != v64);
      v66 = *(void ***)v63;
    }
    *(_QWORD *)(v3 + 96) = v64;
    operator delete(v66);
    *(_QWORD *)v63 = 0;
    *(_QWORD *)(v63 + 8) = 0;
    *(_QWORD *)(v63 + 16) = 0;
    v62 = v77;
  }
LABEL_55:
  *(int64x2_t *)(v3 + 88) = v62;
  *(_QWORD *)(v3 + 104) = v16;
  v67 = v2[3];
  v68 = v2[4];
  v81 = 0uLL;
  v82.f64[0] = 0.0;
  v69 = v68 - v67;
  if (v68 == v67)
  {
    v73 = 0.0;
    v72 = 0uLL;
    v74 = *(void **)v4;
    if (!*(_QWORD *)v4)
      goto LABEL_61;
    goto LABEL_60;
  }
  v70 = 0xAAAAAAAAAAAAAAABLL * (v69 >> 2);
  if (v70 >= 0x1555555555555556)
    sub_20E867F44();
  *(_QWORD *)&v81.f64[0] = operator new(v69);
  v81.f64[1] = v81.f64[0];
  *(_QWORD *)&v82.f64[0] = *(_QWORD *)&v81.f64[0] + 12 * v70;
  v95 = &v81;
  do
  {
    v71 = *(_QWORD *)v67;
    v79.i32[2] = *(_DWORD *)(v67 + 8);
    v79.i64[0] = v71;
    sub_20EEEB61C((char ***)&v95, v79.i64);
    v67 += 12;
  }
  while (v67 != v68);
  v72 = v81;
  v73 = v82.f64[0];
  v74 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
LABEL_60:
    *(_QWORD *)(v3 + 48) = v74;
    v78 = v72;
    operator delete(v74);
    v72 = v78;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
LABEL_61:
  *(float64x2_t *)(v3 + 40) = v72;
  *(float64_t *)(v3 + 56) = v73;
}

void sub_20F0E8018(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E991850(v1);
  _Unwind_Resume(a1);
}

void sub_20F0E8030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;

  if (__p)
  {
    operator delete(__p);
    sub_20E991850(v45);
    _Unwind_Resume(a1);
  }
  sub_20E991850(v45);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F0E80A4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_20EABADD4();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20F0E81E8(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24C9F8C68[v3])(&v15);
  sub_20E89F7C4((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C9F8C68[v6])(&v15, a2);
  sub_20E89F7C4((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C9F8C68[v7])(&v15, a2);
  sub_20E89F7C4((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_20E877AB8();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C9F8C68[v8])(&v15, a2);
}

uint64_t sub_20F0E8338(uint64_t a1, uint64_t a2, int **a3)
{
  uint64_t v4;
  uint64_t v6;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if ((char *)a3[1] - (char *)*a3 <= 3)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24C9F8C80[v4])(&v15, a2);
    }
LABEL_19:
    sub_20E877AB8();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C9F8C68[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, **a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20E877AB8();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24C9F8C50[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24C9F8C68[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_20E877AB8();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24C9F8C50[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C9F8C68[v14])(&v15, a2);
}

void sub_20F0E8560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0E8584(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 48), *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 165) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 176) = 1;
  sub_20F0E8678((void **)(a1 + 120), *(unsigned int *)(a1 + 36));
  sub_20F0E88E8((void **)(a1 + 72), *((unsigned int *)a2 + 11));
  v7 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 28);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a1 + 24);
  *(_DWORD *)(a1 + 176) = v7;
  return a1;
}

void sub_20F0E864C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  sub_20F0E8BAC(v4);
  sub_20F0E8C04(v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20F0E8678(void **a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v3 = (uint64_t)a1[1];
  v4 = *a1;
  if (0x8E38E38E38E38E39 * ((v3 - (uint64_t)*a1) >> 4) != a2)
  {
    if (a2)
    {
      if (a2 >= 0x1C71C71C71C71C8)
        sub_20E867F44();
      v6 = 144 * a2;
      v7 = (char *)operator new(144 * a2);
      v8 = v7;
      v9 = 0;
      v10 = &v7[v6];
      do
      {
        v11 = &v7[v9];
        *(_OWORD *)(v11 + 8) = 0uLL;
        *(_OWORD *)(v11 + 104) = 0uLL;
        *(_OWORD *)(v11 + 88) = 0uLL;
        *((_QWORD *)v11 + 17) = 0;
        *(_OWORD *)(v11 + 120) = 0uLL;
        *(_OWORD *)(v11 + 24) = 0uLL;
        *(_QWORD *)v11 = 0x7FF8000000000000;
        v11[8] = -1;
        *(_OWORD *)(v11 + 40) = 0uLL;
        *(_OWORD *)(v11 + 56) = 0uLL;
        *(_OWORD *)(v11 + 72) = 0uLL;
        v9 += 144;
        *(_OWORD *)(v11 + 97) = 0uLL;
      }
      while (v6 != v9);
      v12 = (unint64_t)a1[5];
      if (v12 >= a2)
        v13 = a2;
      else
        v13 = (unint64_t)a1[5];
      if (v12 <= a2)
      {
        if (v12)
        {
          v17 = 0;
          v18 = (uint64_t)v7;
          do
          {
            sub_20F0EB0B8(v18, (__int128 *)*a1+ 9* (((unint64_t)a1[3] + (unint64_t)v17++)% (0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4))));
            v18 += 144;
          }
          while (v17 != a1[5]);
        }
      }
      else
      {
        v14 = 1;
        v15 = (uint64_t)v7;
        do
        {
          do
          {
            v16 = v14;
            sub_20F0EB0B8(v15, (__int128 *)*a1+ 9* (((unint64_t)a1[3] + v14 - 1) % (0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4))));
            v15 += 144;
            v14 = v16 + 1;
          }
          while (v13 != v16);
        }
        while ((void *)v16 == a1[5]);
      }
      v19 = *a1;
      if (*a1)
      {
        v20 = (uint64_t)a1[1];
        v21 = *a1;
        if ((void *)v20 != v19)
        {
          do
            v20 = sub_20E991850(v20 - 144);
          while ((void *)v20 != v19);
          v21 = *a1;
        }
        a1[1] = v19;
        operator delete(v21);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *a1 = v8;
      a1[1] = v10;
      a1[2] = v10;
      a1[3] = 0;
      a1[4] = (void *)(v13 % a2);
      a1[5] = (void *)v13;
    }
    else
    {
      while ((void *)v3 != v4)
        v3 = sub_20E991850(v3 - 144);
      a1[1] = v4;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
}

void sub_20F0E88D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F0E8BAC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F0E88E8(void **a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  void *v35;

  v3 = (uint64_t)a1[1];
  v4 = *a1;
  if (0xF0F0F0F0F0F0F0F1 * ((v3 - (uint64_t)*a1) >> 4) != a2)
  {
    if (a2)
    {
      if (a2 >= 0xF0F0F0F0F0F0F1)
        sub_20E867F44();
      v6 = 272 * a2;
      v7 = operator new(272 * a2);
      v8 = v7;
      v9 = 0;
      v10 = (char *)&v7[(unint64_t)v6 / 0x10];
      do
      {
        v11 = (char *)&v7[v9 / 0x10];
        *(_OWORD *)(v11 + 8) = 0uLL;
        *(_OWORD *)(v11 + 104) = 0uLL;
        *(_OWORD *)(v11 + 88) = 0uLL;
        *((_QWORD *)v11 + 17) = 0;
        *(_OWORD *)(v11 + 120) = 0uLL;
        *(_OWORD *)(v11 + 24) = 0uLL;
        *(_QWORD *)v11 = 0x7FF8000000000000;
        v11[8] = -1;
        *(_OWORD *)(v11 + 40) = 0uLL;
        *(_OWORD *)(v11 + 56) = 0uLL;
        *(_OWORD *)(v11 + 72) = 0uLL;
        *(_OWORD *)(v11 + 97) = 0uLL;
        *((_OWORD *)v11 + 11) = xmmword_21039C1C8;
        *((_OWORD *)v11 + 12) = unk_21039C1D8;
        *((_OWORD *)v11 + 9) = xmmword_21039C1A8;
        *((_OWORD *)v11 + 10) = unk_21039C1B8;
        *((_OWORD *)v11 + 15) = xmmword_21039C208;
        *((_OWORD *)v11 + 16) = unk_21039C218;
        v9 += 272;
        *((_OWORD *)v11 + 13) = xmmword_21039C1E8;
        *((_OWORD *)v11 + 14) = unk_21039C1F8;
      }
      while (v6 != v9);
      v12 = (unint64_t)a1[5];
      if (v12 >= a2)
        v13 = a2;
      else
        v13 = (unint64_t)a1[5];
      if (v12 <= a2)
      {
        if (v12)
        {
          v24 = 0;
          v25 = v7;
          do
          {
            v26 = (__int128 *)((char *)*a1
                             + 272
                             * (((unint64_t)a1[3] + (unint64_t)v24)
                              % (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4))));
            sub_20F0EB0B8((uint64_t)v25, v26);
            v27 = v26[12];
            v29 = v26[9];
            v28 = v26[10];
            v25[11] = v26[11];
            v25[12] = v27;
            v25[9] = v29;
            v25[10] = v28;
            v30 = v26[16];
            v32 = v26[13];
            v31 = v26[14];
            v25[15] = v26[15];
            v25[16] = v30;
            v25[13] = v32;
            v25[14] = v31;
            ++v24;
            v25 += 17;
          }
          while (v24 != a1[5]);
        }
      }
      else
      {
        v14 = 1;
        v15 = v7;
        do
        {
          do
          {
            v16 = v14;
            v17 = (__int128 *)((char *)*a1
                             + 272
                             * (((unint64_t)a1[3] + v14 - 1)
                              % (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4))));
            sub_20F0EB0B8((uint64_t)v15, v17);
            v18 = v17[12];
            v20 = v17[9];
            v19 = v17[10];
            v15[11] = v17[11];
            v15[12] = v18;
            v15[9] = v20;
            v15[10] = v19;
            v21 = v17[16];
            v23 = v17[13];
            v22 = v17[14];
            v15[15] = v17[15];
            v15[16] = v21;
            v15[13] = v23;
            v15[14] = v22;
            v14 = v16 + 1;
            v15 += 17;
          }
          while (v13 != v16);
        }
        while ((void *)v16 == a1[5]);
      }
      v33 = *a1;
      if (*a1)
      {
        v34 = (uint64_t)a1[1];
        v35 = *a1;
        if ((void *)v34 != v33)
        {
          do
            v34 = sub_20E991850(v34 - 272);
          while ((void *)v34 != v33);
          v35 = *a1;
        }
        a1[1] = v33;
        operator delete(v35);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *a1 = v8;
      a1[1] = v10;
      a1[2] = v10;
      a1[3] = 0;
      a1[4] = (void *)(v13 % a2);
      a1[5] = (void *)v13;
    }
    else
    {
      while ((void *)v3 != v4)
        v3 = sub_20E991850(v3 - 272);
      a1[1] = v4;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
}

void sub_20F0E8B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F0E8C04((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20F0E8BAC(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E991850(v3 - 144);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20F0E8C04(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E991850(v3 - 272);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_20F0E8C5C(uint64_t a1, int *a2, __int128 *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v32;
  int v33;
  _QWORD *v34;
  BOOL v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v111;
  const char *v112;
  size_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void **v125;
  __int128 v126;
  __int128 *v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  unint64_t *p_shared_owners;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  const char *v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  void *v180;
  _OWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  __int128 *v193;
  __int128 *v194;
  void *v195;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  const char *v205;
  int *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t *v213;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v215;
  int v216;
  const char *v217;
  int v218;
  const char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  void *v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  __int128 *v226;
  unint64_t v227;
  __int128 v228;
  __int128 v229;
  char v230;
  __int128 v231;
  _QWORD v232[4];
  _BYTE v233[40];
  void *v234;
  char v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  int v246;
  void *v247[2];
  char v248;
  char v249;
  uint64_t v250;
  _BYTE object[40];
  void *__p[12];
  char v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;

  v262 = *MEMORY[0x24BDAC8D0];
  v244 = 0u;
  v245 = 0u;
  v246 = 733223000;
  kdebug_trace();
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = (__int128 *)(v9 + 144 * v8);
  if (*(double *)v10 != a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/Plane3DTracker.cpp", 55, (uint64_t)"ExactlyEqual(hardware_timestamp_of_planes, plane_measurements.hardware_timestamp)", 81, (uint64_t)"Plane measurement time mismatch", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_QWORD *)&v228 = 0x7FF8000000000000;
  BYTE8(v228) = -1;
  LOBYTE(v229) = 0;
  v230 = 0;
  v235 = 0;
  v231 = 0u;
  memset(v232, 0, sizeof(v232));
  memset(v233, 0, 25);
  v240 = xmmword_21039C1E8;
  v241 = unk_21039C1F8;
  v242 = xmmword_21039C208;
  v243 = unk_21039C218;
  v236 = xmmword_21039C1A8;
  v237 = unk_21039C1B8;
  v238 = xmmword_21039C1C8;
  v239 = unk_21039C1D8;
  v11 = *((_BYTE *)v10 + 32);
  v12 = v10[1];
  v228 = *v10;
  v229 = v12;
  v230 = v11;
  if (&v228 != v10)
  {
    sub_20EDB523C(&v231, *(char **)(v9 + 144 * v8 + 40), *(char **)(v9 + 144 * v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 144 * v8 + 48) - *(_QWORD *)(v9 + 144 * v8 + 40)) >> 2));
    sub_20F0E80A4(&v232[1], *(char **)(v9 + 144 * v8 + 64), *(char **)(v9 + 144 * v8 + 72), (uint64_t)(*(_QWORD *)(v9 + 144 * v8 + 72) - *(_QWORD *)(v9 + 144 * v8 + 64)) >> 2);
    sub_20F0EA990((uint64_t *)v233, *(__int128 **)(v9 + 144 * v8 + 88), *(__int128 **)(v9 + 144 * v8 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 144 * v8 + 96) - *(_QWORD *)(v9 + 144 * v8 + 88)) >> 6));
  }
  sub_20F0EAC64((uint64_t)&v233[24], v9 + 144 * v8 + 112);
  v13 = *a2;
  if (!v230)
    v230 = 1;
  *(_QWORD *)&v229 = 0;
  DWORD2(v229) = v13;
  v14 = a3[5];
  v240 = a3[4];
  v241 = v14;
  v15 = a3[7];
  v242 = a3[6];
  v243 = v15;
  v16 = a3[1];
  v236 = *a3;
  v237 = v16;
  v17 = a3[3];
  v238 = a3[2];
  v239 = v17;
  *(_QWORD *)object = 0x7FF8000000000000;
  object[8] = -1;
  object[16] = 0;
  object[32] = 0;
  v253 = 0;
  memset(__p, 0, 73);
  sub_20F0EB0B8(*(_QWORD *)(a1 + 120) + 144 * *(_QWORD *)(a1 + 144), (__int128 *)object);
  sub_20E991850((uint64_t)object);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4);
  v20 = *(_QWORD *)(a1 + 144) + 1;
  if (v20 < v19)
    v19 = 0;
  *(_QWORD *)(a1 + 144) = v20 - v19;
  --*(_QWORD *)(a1 + 160);
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v198 = v18;
  if (!v18)
    goto LABEL_261;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v233[8] - *(_QWORD *)v233) >> 6);
  if (*(_QWORD *)&v233[8] != *(_QWORD *)v233)
  {
    if (((*(_QWORD *)&v233[8] - *(_QWORD *)v233) & 0x8000000000000000) != 0)
      sub_20E867F44();
    v21 = (v197 - 1) >> 6;
    v22 = operator new(8 * (v21 + 1));
    v23 = v22;
    v223 = v197;
    v224 = v21 + 1;
    v222 = v22;
    if (v197 >= 0x41)
      v24 = (v197 - 1) >> 6;
    else
      v24 = 0;
    v22[v24] = 0;
    if (v197 >= 0x40)
      bzero(v22, 8 * (v197 >> 6));
    if ((v197 & 0x3F) != 0)
      v23[v197 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v197 & 0x3F));
  }
  v25 = &qword_254A62000;
  v26 = 1;
  v200 = a1;
LABEL_21:
  v27 = *(_QWORD *)(a1 + 104);
  v28 = *(_QWORD *)(a1 + 72);
  v29 = v27 - v26;
  if (v27 < v26)
    v29 -= 0xF0F0F0F0F0F0F0FLL * ((*(_QWORD *)(a1 + 80) - v28) >> 4);
  v30 = v223 & 0x3F;
  if (v223 <= 0x3F && v30 == 0)
  {
    v35 = v197 == 0;
    if (!v197)
      goto LABEL_257;
LABEL_36:
    v199 = v26;
    v36 = atomic_load((unsigned __int8 *)&qword_254A620F0);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A620F0))
    {
      sub_21021D3D8(&v213);
      sub_20E8610C0(object, "cv3d.vio.odometry");
      sub_20E8C4068(&v213, (uint64_t)object, &qword_254A620E8);
      if ((object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_guard_release(&qword_254A620F0);
      a1 = v200;
      v25 = &qword_254A62000;
    }
    v207 = v28 + 272 * v29;
    v37 = v25[29];
    v250 = v37;
    if (**(int **)(v37 + 56) > 2
      || ((v38 = *(unsigned __int8 *)(v37 + 72),
           v39 = sub_20E8C31DC(v37, "OSLogSurrogateAppender", 1, 0),
           v40 = v39,
           !v38)
        ? (v41 = v39 == 0)
        : (v41 = 0),
          v41))
    {
LABEL_128:
      kdebug_trace();
      sub_20F0EB320(v207, (uint64_t)&v228, v28 + 272 * v29 + 144, (uint64_t)&v236, (double *)a1, &v222, &v211);
      kdebug_trace();
      v95 = (int *)v211;
      v206 = (int *)v212;
      if (v211 == v212)
        goto LABEL_246;
      while (1)
      {
        v96 = *v95;
        v97 = v95[1];
        *(_QWORD *)((char *)v222 + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v97;
        v98 = *(_QWORD *)(v207 + 88);
        v99 = v98 + 192 * (int)v96;
        v100 = *(_QWORD *)v233;
        v101 = (_QWORD *)(v99 + 112);
        v209 = v96;
        if (*(_BYTE *)(v99 + 128))
        {
          v102 = *(_DWORD *)(v99 + 120);
          v103 = *(_QWORD *)v233 + 192 * (int)v97;
          v104 = v103 + 112;
          if (!*(_BYTE *)(v103 + 128))
            goto LABEL_134;
        }
        else
        {
          v102 = *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176);
          *(_DWORD *)(a1 + 168) = v102;
          *v101 = 0;
          *(_DWORD *)(v99 + 120) = v102;
          *(_BYTE *)(v99 + 128) = 1;
          v114 = v98 + 192 * (int)v96;
          v115 = *(_OWORD *)(v207 + 16);
          *(_BYTE *)(v114 + 152) = *(_BYTE *)(v207 + 32);
          *(_OWORD *)(v114 + 136) = v115;
          v116 = v226;
          if ((unint64_t)v226 >= v227)
          {
            v127 = (__int128 *)sub_20F0EAD4C((char **)&v225, v99);
          }
          else
          {
            v117 = *(_OWORD *)(v99 + 16);
            *v226 = *(_OWORD *)v99;
            v116[1] = v117;
            v118 = *(_OWORD *)(v99 + 32);
            *((_QWORD *)v116 + 6) = *(_QWORD *)(v99 + 48);
            v116[2] = v118;
            *((_QWORD *)v116 + 7) = *(_QWORD *)(v99 + 56);
            v119 = v98 + 192 * (int)v96;
            v120 = *(_OWORD *)(v119 + 64);
            *((_QWORD *)v116 + 10) = *(_QWORD *)(v119 + 80);
            v116[4] = v120;
            v121 = *(_OWORD *)(v119 + 88);
            *((_QWORD *)v116 + 13) = *(_QWORD *)(v119 + 104);
            *(__int128 *)((char *)v116 + 88) = v121;
            v122 = *(_OWORD *)v101;
            v123 = *(_OWORD *)(v99 + 128);
            v124 = *(_OWORD *)(v99 + 137);
            *((_BYTE *)v116 + 160) = 0;
            *(__int128 *)((char *)v116 + 137) = v124;
            v116[7] = v122;
            v116[8] = v123;
            *((_BYTE *)v116 + 184) = 0;
            if (*(_BYTE *)(v119 + 184))
            {
              v125 = (void **)(v119 + 160);
              if (*(char *)(v99 + 183) < 0)
              {
                sub_20E860C04((_BYTE *)v116 + 160, *v125, *(_QWORD *)(v98 + 192 * (int)v96 + 168));
              }
              else
              {
                v126 = *(_OWORD *)v125;
                *((_QWORD *)v116 + 22) = *(_QWORD *)(v119 + 176);
                v116[10] = v126;
              }
              *((_BYTE *)v116 + 184) = 1;
            }
            v127 = v116 + 12;
            v25 = &qword_254A62000;
          }
          v226 = v127;
          v159 = v100 + 192 * (int)v97;
          v104 = v159 + 112;
          if (!*(_BYTE *)(v159 + 128))
LABEL_134:
            *(_BYTE *)(v104 + 16) = 1;
        }
        *(_QWORD *)v104 = 0;
        *(_DWORD *)(v104 + 8) = v102;
        v105 = atomic_load((unsigned __int8 *)&qword_254A620F0);
        if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A620F0))
        {
          sub_21021D3D8(&v213);
          sub_20E8610C0(object, "cv3d.vio.odometry");
          sub_20E8C4068(&v213, (uint64_t)object, &qword_254A620E8);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_guard_release(&qword_254A620F0);
          a1 = v200;
          v25 = &qword_254A62000;
        }
        v106 = v25[29];
        v210 = v106;
        if (**(int **)(v106 + 56) > 2)
          goto LABEL_131;
        v107 = *(unsigned __int8 *)(v106 + 72);
        v108 = sub_20E8C31DC(v106, "OSLogSurrogateAppender", 1, 0);
        v109 = v108;
        if (!v107 && v108 == 0)
          goto LABEL_131;
        v213 = &v210;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v215 = std::chrono::system_clock::now().__d_.__rep_;
        v216 = 2;
        v217 = "unknown file";
        v218 = 120;
        v219 = "unknown function";
        v220 = 0;
        v221 = 0;
        v111 = *v213;
        v112 = (const char *)(*v213 + 16);
        v201 = v112;
        v202 = *v213;
        if (*(char *)(*v213 + 39) < 0)
        {
          v112 = *(const char **)(v111 + 16);
          v113 = *(_QWORD *)(v111 + 24);
        }
        else
        {
          v113 = *(unsigned __int8 *)(*v213 + 39);
        }
        v203 = v107;
        v204 = *(_QWORD *)(a1 + 112);
        v128 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v247);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v247);
          if (v249 && v248 < 0)
            operator delete(v247[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          a1 = v200;
        }
        if (byte_254A4A4F8[23] >= 0)
          v129 = byte_254A4A4F8;
        else
          v129 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v130 = byte_254A4A4F8[23];
        else
          v130 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v129, v112);
        if (v130 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v130 >= 0x17)
        {
          v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v130 | 7) != 0x17)
            v132 = v130 | 7;
          v133 = v132 + 1;
          v131 = operator new(v132 + 1);
          *(_QWORD *)&object[24] = v133 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v131;
          *(_QWORD *)&object[16] = v130;
          a1 = v200;
LABEL_163:
          memmove(v131, v129, v130);
          goto LABEL_164;
        }
        object[31] = v130;
        v131 = &object[8];
        if (v130)
          goto LABEL_163;
LABEL_164:
        v131[v130] = 0;
        object[32] = 1;
        if (v113 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v113 >= 0x17)
        {
          v136 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v113 | 7) != 0x17)
            v136 = v113 | 7;
          v137 = v136 + 1;
          v134 = operator new(v136 + 1);
          __p[2] = (void *)(v137 | 0x8000000000000000);
          __p[0] = v134;
          __p[1] = (void *)v113;
        }
        else
        {
          HIBYTE(__p[2]) = v113;
          v134 = __p;
          if (!v113)
          {
            LOBYTE(__p[0]) = 0;
            LOBYTE(__p[3]) = 1;
            v135 = *(NSObject **)object;
            if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
              goto LABEL_168;
            goto LABEL_174;
          }
        }
        memmove(v134, v112, v113);
        *((_BYTE *)v134 + v113) = 0;
        LOBYTE(__p[3]) = 1;
        v135 = *(NSObject **)object;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
LABEL_168:
          if (!object[32])
            goto LABEL_177;
          goto LABEL_175;
        }
LABEL_174:
        operator delete(__p[0]);
        if (!object[32])
          goto LABEL_177;
LABEL_175:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_177:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v109 || !*(_QWORD *)(v109 + 24))
        {
          os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)object = 67109888;
          *(_DWORD *)&object[4] = v102;
          *(_WORD *)&object[8] = 2048;
          *(_QWORD *)&object[10] = v204;
          *(_WORD *)&object[18] = 2048;
          v157 = v209;
          *(_QWORD *)&object[20] = v209;
          *(_WORD *)&object[28] = 2048;
          *(_QWORD *)&object[30] = v97;
          v158 = (void *)_os_log_send_and_compose_impl();
          if (v158)
            free(v158);
          goto LABEL_229;
        }
        v138 = _os_log_pack_size();
        v139 = (std::__shared_weak_count_vtbl *)operator new(v138, (std::align_val_t)8uLL);
        v140 = (std::__shared_weak_count *)operator new();
        v141 = v140;
        v140->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v140->__shared_owners_;
        v140->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v140->__shared_weak_owners_ = 0;
        v140[1].__vftable = v139;
        *(_QWORD *)object = v139;
        *(_QWORD *)&object[8] = v139;
        *(_QWORD *)&object[16] = v140;
        do
          v143 = __ldxr(p_shared_owners);
        while (__stxr(v143 + 1, p_shared_owners));
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        __p[0] = 0;
        do
          v144 = __ldaxr(p_shared_owners);
        while (__stlxr(v144 - 1, p_shared_owners));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v141);
        }
        v145 = *(_QWORD *)object;
        v146 = _os_log_pack_fill();
        *(_DWORD *)v146 = 67109888;
        *(_DWORD *)(v146 + 4) = v102;
        *(_WORD *)(v146 + 8) = 2048;
        *(_QWORD *)(v146 + 10) = v204;
        *(_WORD *)(v146 + 18) = 2048;
        *(_QWORD *)(v146 + 20) = v209;
        *(_WORD *)(v146 + 28) = 2048;
        *(_QWORD *)(v146 + 30) = v97;
        v147 = (char *)operator new();
        v148 = *(unsigned __int8 *)(v202 + 39);
        v149 = v201;
        if ((v148 & 0x80u) != 0)
        {
          v149 = *(const char **)(v202 + 16);
          v148 = *(_QWORD *)(v202 + 24);
        }
        *(_QWORD *)v147 = v145;
        *(_OWORD *)(v147 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v147 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v147 + 5) = v149;
        *((_QWORD *)v147 + 6) = v148;
        v147[56] = 2;
        v250 = 0;
        v247[0] = v147;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v109 + 24) + 40))(*(_QWORD *)(v109 + 24), v247);
        v150 = v247[0];
        v247[0] = 0;
        if (!v150)
          goto LABEL_219;
        v151 = (std::__shared_weak_count *)*((_QWORD *)v150 + 4);
        if (!v151)
          goto LABEL_194;
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
          v154 = (std::__shared_weak_count *)*((_QWORD *)v150 + 2);
          if (!v154)
            goto LABEL_207;
        }
        else
        {
LABEL_194:
          v154 = (std::__shared_weak_count *)*((_QWORD *)v150 + 2);
          if (!v154)
            goto LABEL_207;
        }
        v155 = (unint64_t *)&v154->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
LABEL_207:
        MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
        v160 = v250;
        v250 = 0;
        if (v160)
        {
          v161 = *(std::__shared_weak_count **)(v160 + 32);
          if (!v161)
            goto LABEL_212;
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
            v164 = *(std::__shared_weak_count **)(v160 + 16);
            if (v164)
            {
LABEL_213:
              v165 = (unint64_t *)&v164->__shared_owners_;
              do
                v166 = __ldaxr(v165);
              while (__stlxr(v166 - 1, v165));
              if (!v166)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v164);
              }
            }
          }
          else
          {
LABEL_212:
            v164 = *(std::__shared_weak_count **)(v160 + 16);
            if (v164)
              goto LABEL_213;
          }
          MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
        }
LABEL_219:
        v167 = *(std::__shared_weak_count **)&object[32];
        v157 = v209;
        if (!*(_QWORD *)&object[32])
          goto LABEL_223;
        v168 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
          v170 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
LABEL_224:
            v171 = (unint64_t *)&v170->__shared_owners_;
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
        }
        else
        {
LABEL_223:
          v170 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
            goto LABEL_224;
        }
LABEL_229:
        if (v203)
        {
          sub_20E8C003C((uint64_t)&v213, "    Found matches plane track %u from anchor frame index %zu (%lu <-> %lu)", v102, *(_QWORD *)(a1 + 112), v157, v97);
          sub_20E863570((uint64_t)&v213);
        }
        sub_20E863570((uint64_t)&v213);
        v173 = v221;
        if (v221)
        {
          v174 = (unint64_t *)&v221->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v25 = &qword_254A62000;
LABEL_131:
        v95 += 2;
        if (v95 == v206)
        {
          v95 = (int *)v211;
LABEL_246:
          if (v95)
          {
            v212 = (char *)v95;
            operator delete(v95);
          }
          v26 = v199 + 1;
          if (v199 + 1 > v198)
            goto LABEL_259;
          goto LABEL_21;
        }
      }
    }
    v208 = v38;
    v213 = &v250;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v215 = std::chrono::system_clock::now().__d_.__rep_;
    v216 = 2;
    v217 = "unknown file";
    v218 = 88;
    v219 = "unknown function";
    v220 = 0;
    v221 = 0;
    v42 = *v213;
    v43 = (const char *)(*v213 + 16);
    v205 = v43;
    if (*(char *)(*v213 + 39) < 0)
    {
      v43 = *(const char **)(v42 + 16);
      v44 = *(_QWORD *)(v42 + 24);
      v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v46 & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      v44 = *(unsigned __int8 *)(*v213 + 39);
      v45 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v45 & 1) != 0)
        goto LABEL_46;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v247);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v247);
      if (v249 && v248 < 0)
        operator delete(v247[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_46:
    if (byte_254A4A4F8[23] >= 0)
      v47 = byte_254A4A4F8;
    else
      v47 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v48 = byte_254A4A4F8[23];
    else
      v48 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v47, v43);
    if (v48 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v48 >= 0x17)
    {
      v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17)
        v50 = v48 | 7;
      v51 = v50 + 1;
      v49 = operator new(v50 + 1);
      *(_QWORD *)&object[24] = v51 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v49;
      *(_QWORD *)&object[16] = v48;
    }
    else
    {
      object[31] = v48;
      v49 = &object[8];
      if (!v48)
      {
LABEL_60:
        v49[v48] = 0;
        object[32] = 1;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v44 >= 0x17)
        {
          v54 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v54 = v44 | 7;
          v55 = v54 + 1;
          v52 = operator new(v54 + 1);
          __p[2] = (void *)(v55 | 0x8000000000000000);
          __p[0] = v52;
          __p[1] = (void *)v44;
        }
        else
        {
          HIBYTE(__p[2]) = v44;
          v52 = __p;
          if (!v44)
          {
            LOBYTE(__p[0]) = 0;
            LOBYTE(__p[3]) = 1;
            v53 = *(NSObject **)object;
            if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
              goto LABEL_64;
            goto LABEL_70;
          }
        }
        memmove(v52, v43, v44);
        *((_BYTE *)v52 + v44) = 0;
        LOBYTE(__p[3]) = 1;
        v53 = *(NSObject **)object;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
LABEL_64:
          if (!object[32])
            goto LABEL_73;
          goto LABEL_71;
        }
LABEL_70:
        operator delete(__p[0]);
        if (!object[32])
        {
LABEL_73:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v40 && *(_QWORD *)(v40 + 24))
          {
            v56 = _os_log_pack_size();
            v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
            v58 = (std::__shared_weak_count *)operator new();
            v59 = v58;
            v58->__shared_owners_ = 0;
            v60 = (unint64_t *)&v58->__shared_owners_;
            v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v58->__shared_weak_owners_ = 0;
            v58[1].__vftable = v57;
            *(_QWORD *)object = v57;
            *(_QWORD *)&object[8] = v57;
            *(_QWORD *)&object[16] = v58;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            __p[0] = 0;
            do
              v62 = __ldaxr(v60);
            while (__stlxr(v62 - 1, v60));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v59);
            }
            v63 = *(_QWORD *)object;
            v64 = _os_log_pack_fill();
            v65 = *(_QWORD *)v207;
            v66 = v228;
            *(_DWORD *)v64 = 134218240;
            *(_QWORD *)(v64 + 4) = v65;
            *(_WORD *)(v64 + 12) = 2048;
            *(_QWORD *)(v64 + 14) = v66;
            v67 = (char *)operator new();
            v68 = *(unsigned __int8 *)(v42 + 39);
            v69 = v205;
            if ((v68 & 0x80u) != 0)
            {
              v69 = *(const char **)(v42 + 16);
              v68 = *(_QWORD *)(v42 + 24);
            }
            *(_QWORD *)v67 = v63;
            *(_OWORD *)(v67 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v67 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v67 + 5) = v69;
            *((_QWORD *)v67 + 6) = v68;
            v67[56] = 2;
            v211 = 0;
            v247[0] = v67;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v40 + 24) + 40))(*(_QWORD *)(v40 + 24), v247);
            v70 = v247[0];
            v247[0] = 0;
            a1 = v200;
            if (v70)
            {
              v71 = (std::__shared_weak_count *)*((_QWORD *)v70 + 4);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)v70 + 2);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
              v77 = v211;
              v211 = 0;
              if (v77)
              {
                v78 = (std::__shared_weak_count *)*((_QWORD *)v77 + 4);
                if (v78)
                {
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                v81 = (std::__shared_weak_count *)*((_QWORD *)v77 + 2);
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                MEMORY[0x212BC6398](v77, 0x10F0C40B62ED6C6);
              }
            }
            v84 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v85 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v88 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          else
          {
            os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG);
            v90 = *(_QWORD *)v207;
            *(_DWORD *)object = 134218240;
            *(_QWORD *)&object[4] = v90;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v228;
            v91 = (void *)_os_log_send_and_compose_impl();
            a1 = v200;
            if (v91)
              free(v91);
          }
          if (v208)
          {
            sub_20E8C003C((uint64_t)&v213, "  Match plane data %f -> %f", *(double *)v207, *(double *)&v228);
            sub_20E863570((uint64_t)&v213);
          }
          sub_20E863570((uint64_t)&v213);
          v92 = v221;
          if (v221)
          {
            v93 = (unint64_t *)&v221->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v25 = &qword_254A62000;
          goto LABEL_128;
        }
LABEL_71:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        goto LABEL_73;
      }
    }
    memmove(v49, v47, v48);
    goto LABEL_60;
  }
  v32 = 0;
  v33 = 0;
  v34 = v222;
  do
  {
    v33 += (*v34 >> v32) & 1;
    v34 += v32 == 63;
    if (v32 == 63)
      v32 = 0;
    else
      ++v32;
  }
  while (v32 != v30 || v34 != (_QWORD *)((char *)v222 + 8 * (v223 >> 6)));
  v35 = v197 == v33;
  if (v197 > v33)
    goto LABEL_36;
LABEL_257:
  if (!v35
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/Plane3DTracker.cpp", 81, (uint64_t)"matched_count == num_curr_planes", 32, (uint64_t)"Number matched cannot be higher than the initial count of planes", 64, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_259:
  if (v222)
    operator delete(v222);
LABEL_261:
  if (v235)
  {
    sub_20F0EA990((uint64_t *)&v233[24], (__int128 *)v225, v226, 0xAAAAAAAAAAAAAAABLL * (((char *)v226 - (_BYTE *)v225) >> 6));
    v176 = v235 == 0;
  }
  else
  {
    sub_20EE680C8(&v233[24], (__int128 **)&v225);
    v176 = 0;
    v235 = 1;
  }
  v177 = *(_QWORD *)(a1 + 104);
  v178 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)object = v228;
  *(_OWORD *)&object[16] = v229;
  object[32] = v230;
  v179 = v231;
  v180 = (void *)v232[0];
  memset(v232, 0, sizeof(v232));
  v231 = 0uLL;
  *(_OWORD *)__p = v179;
  *(_OWORD *)&__p[3] = *(_OWORD *)&v232[1];
  __p[2] = v180;
  __p[5] = (void *)v232[3];
  *(_OWORD *)&__p[6] = *(_OWORD *)v233;
  __p[8] = *(void **)&v233[16];
  memset(v233, 0, 24);
  LOBYTE(__p[9]) = 0;
  v253 = 0;
  if (!v176)
  {
    *(_OWORD *)&__p[9] = *(_OWORD *)&v233[24];
    __p[11] = v234;
    *(_QWORD *)&v233[32] = 0;
    v234 = 0;
    *(_QWORD *)&v233[24] = 0;
    v253 = 1;
  }
  v258 = v240;
  v259 = v241;
  v260 = v242;
  v261 = v243;
  v254 = v236;
  v255 = v237;
  v256 = v238;
  v257 = v239;
  sub_20F0EB0B8(v178 + 272 * v177, (__int128 *)object);
  v181 = (_OWORD *)(v178 + 272 * v177);
  v182 = v257;
  v184 = v254;
  v183 = v255;
  v181[11] = v256;
  v181[12] = v182;
  v181[9] = v184;
  v181[10] = v183;
  v185 = v261;
  v187 = v258;
  v186 = v259;
  v181[15] = v260;
  v181[16] = v185;
  v181[13] = v187;
  v181[14] = v186;
  sub_20E991850((uint64_t)object);
  v188 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  v189 = *(_QWORD *)(a1 + 112);
  v190 = *(_QWORD *)(a1 + 104) + 1;
  if (v190 >= v188)
    v191 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
  else
    v191 = 0;
  *(_QWORD *)(a1 + 104) = v190 - v191;
  if (v189 != v188)
  {
    *(_QWORD *)(a1 + 112) = v189 + 1;
    v193 = (__int128 *)v225;
    if (!v225)
      goto LABEL_283;
    goto LABEL_275;
  }
  v192 = *(_QWORD *)(a1 + 96) + 1;
  if (v192 < v188)
    v188 = 0;
  *(_QWORD *)(a1 + 96) = v192 - v188;
  v193 = (__int128 *)v225;
  if (v225)
  {
LABEL_275:
    v194 = v226;
    v195 = v193;
    if (v226 != v193)
    {
      do
      {
        if (*((_BYTE *)v194 - 8) && *((char *)v194 - 9) < 0)
          operator delete(*((void **)v194 - 4));
        v194 -= 12;
      }
      while (v194 != v193);
      v195 = v225;
    }
    v226 = v193;
    operator delete(v195);
  }
LABEL_283:
  sub_20E991850((uint64_t)&v228);
  kdebug_trace();
  return v198 != 0;
}

void sub_20F0EA4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  if (LOBYTE(STACK[0x2B0]) && SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a38);
  if (a47)
    operator delete(a47);
  sub_20EE60EA4(&a50);
  sub_20E991850((uint64_t)&a53);
  sub_20E8E69C4((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_20F0EA7DC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;

  v4 = a1[14];
  *(_QWORD *)a2 = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 8) = -1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  v5 = (_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 136) = 0;
  if (v4)
  {
    *(_OWORD *)(a2 + 97) = 0uLL;
    *(_OWORD *)(a2 + 72) = 0uLL;
    *(_OWORD *)(a2 + 88) = 0uLL;
    *(_OWORD *)v5 = 0uLL;
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_OWORD *)(a2 + 208) = xmmword_21039C1E8;
    *(_OWORD *)(a2 + 224) = unk_21039C1F8;
    *(_OWORD *)(a2 + 240) = xmmword_21039C208;
    *(_OWORD *)(a2 + 256) = unk_21039C218;
    *(_OWORD *)(a2 + 144) = xmmword_21039C1A8;
    *(_OWORD *)(a2 + 160) = unk_21039C1B8;
    *(_OWORD *)(a2 + 176) = xmmword_21039C1C8;
    *(_OWORD *)(a2 + 192) = unk_21039C1D8;
    *(_BYTE *)(a2 + 272) = 0;
    v6 = a1[13];
    if (v6)
    {
      v7 = a1[9];
      v8 = v6 - 1;
    }
    else
    {
      v9 = a1 + 9;
      v7 = a1[9];
      v8 = 0xF0F0F0F0F0F0F0F1 * ((v9[1] - v7) >> 4) - 1;
    }
    v10 = (_OWORD *)(v7 + 272 * v8);
    v11 = v10[9];
    v12 = v10[10];
    v10 += 9;
    v13 = v10[3];
    *(_OWORD *)(a2 + 176) = v10[2];
    *(_OWORD *)(a2 + 192) = v13;
    *(_OWORD *)(a2 + 144) = v11;
    *(_OWORD *)(a2 + 160) = v12;
    v14 = v10[4];
    v15 = v10[5];
    v16 = v10[7];
    *(_OWORD *)(a2 + 240) = v10[6];
    *(_OWORD *)(a2 + 256) = v16;
    *(_OWORD *)(a2 + 208) = v14;
    *(_OWORD *)(a2 + 224) = v15;
    v17 = (__int128 *)(v7 + 272 * v8);
    v18 = *v17;
    v19 = v17[1];
    *(_BYTE *)(a2 + 32) = *((_BYTE *)v17 + 32);
    *(_OWORD *)a2 = v18;
    *(_OWORD *)(a2 + 16) = v19;
    if (v17 != (__int128 *)a2)
    {
      sub_20EDB523C(v5, *((char **)v17 + 5), *((char **)v17 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v17 + 6) - *((_QWORD *)v17 + 5)) >> 2));
      sub_20F0E80A4((_QWORD *)(a2 + 64), *((char **)v17 + 8), *((char **)v17 + 9), (uint64_t)(*((_QWORD *)v17 + 9) - *((_QWORD *)v17 + 8)) >> 2);
      sub_20F0EA990((uint64_t *)(a2 + 88), *((__int128 **)v17 + 11), *((__int128 **)v17 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v17 + 12) - *((_QWORD *)v17 + 11)) >> 6));
    }
    sub_20F0EAC64(a2 + 112, (uint64_t)(v17 + 7));
  }
  else
  {
    *(_OWORD *)(a2 + 97) = 0uLL;
    *(_OWORD *)(a2 + 72) = 0uLL;
    *(_OWORD *)(a2 + 88) = 0uLL;
    *(_OWORD *)v5 = 0uLL;
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_OWORD *)(a2 + 208) = xmmword_21039C1E8;
    *(_OWORD *)(a2 + 224) = unk_21039C1F8;
    *(_OWORD *)(a2 + 240) = xmmword_21039C208;
    *(_OWORD *)(a2 + 256) = unk_21039C218;
    *(_OWORD *)(a2 + 144) = xmmword_21039C1A8;
    *(_OWORD *)(a2 + 160) = unk_21039C1B8;
    *(_OWORD *)(a2 + 176) = xmmword_21039C1C8;
    *(_OWORD *)(a2 + 192) = unk_21039C1D8;
    *(_BYTE *)(a2 + 272) = 0;
  }
}

void sub_20F0EA97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E991850(v1);
  _Unwind_Resume(a1);
}

void sub_20F0EA990(uint64_t *a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 6) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          if (*(_BYTE *)(v11 - 8) && *(char *)(v11 - 9) < 0)
            operator delete(*(void **)(v11 - 32));
          v11 -= 192;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x155555555555555)
      goto LABEL_36;
    v29 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    v30 = 2 * v29;
    if (2 * v29 <= __sz)
      v30 = __sz;
    v31 = v29 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v30;
    if (v31 > 0x155555555555555)
LABEL_36:
      sub_20E867F44();
    v32 = 192 * v31;
    v33 = operator new(192 * v31);
    *a1 = (uint64_t)v33;
    a1[1] = (uint64_t)v33;
    a1[2] = (uint64_t)v33 + v32;
    v21 = sub_20EE681D8(v9, v6, a3, (uint64_t)v33);
LABEL_28:
    a1[1] = v21;
    return;
  }
  v13 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 6) < __sz)
  {
    v14 = &a2[4 * ((v13 - v10) >> 6)];
    if (v13 != v10)
    {
      do
      {
        v15 = v6[1];
        *(_OWORD *)v10 = *v6;
        *(_OWORD *)(v10 + 16) = v15;
        v16 = v6[2];
        *(_QWORD *)(v10 + 48) = *((_QWORD *)v6 + 6);
        *(_OWORD *)(v10 + 32) = v16;
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v6 + 7);
        v17 = v6[4];
        *(_QWORD *)(v10 + 80) = *((_QWORD *)v6 + 10);
        *(_OWORD *)(v10 + 64) = v17;
        v18 = *(__int128 *)((char *)v6 + 88);
        *(_QWORD *)(v10 + 104) = *((_QWORD *)v6 + 13);
        *(_OWORD *)(v10 + 88) = v18;
        v19 = v6[7];
        v20 = v6[8];
        *(_OWORD *)(v10 + 137) = *(__int128 *)((char *)v6 + 137);
        *(_OWORD *)(v10 + 112) = v19;
        *(_OWORD *)(v10 + 128) = v20;
        sub_20E869118(v10 + 160, (_QWORD *)v6 + 20);
        v6 += 12;
        v10 += 192;
      }
      while (v6 != v14);
      v10 = a1[1];
    }
    v21 = sub_20EE681D8(v9, v14, a3, v10);
    goto LABEL_28;
  }
  if (a2 == a3)
  {
    v22 = *a1;
  }
  else
  {
    v22 = *a1;
    do
    {
      v23 = v6[1];
      *(_OWORD *)v10 = *v6;
      *(_OWORD *)(v10 + 16) = v23;
      v24 = v6[2];
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v6 + 6);
      *(_OWORD *)(v10 + 32) = v24;
      *(_QWORD *)(v10 + 56) = *((_QWORD *)v6 + 7);
      v25 = v6[4];
      *(_QWORD *)(v10 + 80) = *((_QWORD *)v6 + 10);
      *(_OWORD *)(v10 + 64) = v25;
      v26 = *(__int128 *)((char *)v6 + 88);
      *(_QWORD *)(v10 + 104) = *((_QWORD *)v6 + 13);
      *(_OWORD *)(v10 + 88) = v26;
      v27 = v6[7];
      v28 = v6[8];
      *(_OWORD *)(v10 + 137) = *(__int128 *)((char *)v6 + 137);
      *(_OWORD *)(v10 + 112) = v27;
      *(_OWORD *)(v10 + 128) = v28;
      sub_20E869118(v10 + 160, (_QWORD *)v6 + 20);
      v22 += 192;
      v6 += 12;
      v10 += 192;
    }
    while (v6 != a3);
    v13 = a1[1];
  }
  while (v13 != v22)
  {
    if (*(_BYTE *)(v13 - 8) && *(char *)(v13 - 9) < 0)
      operator delete(*(void **)(v13 - 32));
    v13 -= 192;
  }
  a1[1] = v22;
}

void sub_20F0EAC54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F0EAC5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F0EAC64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_20F0EA990((uint64_t *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 6));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(void **)a1;
      if (v4 != v3)
      {
        do
        {
          if (*(_BYTE *)(v4 - 8) && *(char *)(v4 - 9) < 0)
            operator delete(*(void **)(v4 - 32));
          v4 -= 192;
        }
        while (v4 != v3);
        v5 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    sub_20EE680C8((_QWORD *)a1, (__int128 **)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

char *sub_20F0EAD4C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v27;
  char *v28;
  char *v29;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6);
  v6 = v5 + 1;
  if (v5 + 1 > 0x155555555555555)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v3) >> 6) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v8 = 0x155555555555555;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x155555555555555)
      sub_20E877A38();
    v9 = (char *)operator new(192 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[192 * v5];
  v29 = &v9[192 * v8];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v10 + 7) = *(_QWORD *)(a2 + 56);
  *((_QWORD *)v10 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v10 + 4) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(a2 + 88);
  *((_QWORD *)v10 + 13) = *(_QWORD *)(a2 + 104);
  v12 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v10 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v10 + 8) = v12;
  *(_OWORD *)(v10 + 137) = *(_OWORD *)(a2 + 137);
  v10[160] = 0;
  v13 = v10 + 160;
  v10[184] = 0;
  if (!*(_BYTE *)(a2 + 184))
  {
    v14 = v10 + 192;
    v28 = v10 + 192;
    if (v4 != v3)
      goto LABEL_18;
LABEL_15:
    v15 = v3;
    goto LABEL_23;
  }
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20E860C04(v13, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 160);
    *((_QWORD *)v10 + 22) = *(_QWORD *)(a2 + 176);
  }
  v10[184] = 1;
  v14 = v10 + 192;
  v28 = v10 + 192;
  if (v4 == v3)
    goto LABEL_15;
LABEL_18:
  v16 = 0;
  do
  {
    v17 = &v10[v16];
    v18 = &v4[v16];
    v19 = *(_OWORD *)&v4[v16 - 176];
    *((_OWORD *)v17 - 12) = *(_OWORD *)&v4[v16 - 192];
    *((_OWORD *)v17 - 11) = v19;
    v20 = *(_OWORD *)&v4[v16 - 160];
    *((_QWORD *)v17 - 18) = *(_QWORD *)&v4[v16 - 144];
    *((_OWORD *)v17 - 10) = v20;
    *((_QWORD *)v17 - 17) = *(_QWORD *)&v4[v16 - 136];
    v21 = *(_OWORD *)&v4[v16 - 128];
    *((_QWORD *)v17 - 14) = *(_QWORD *)&v4[v16 - 112];
    *((_OWORD *)v17 - 8) = v21;
    v22 = *(_OWORD *)&v4[v16 - 104];
    *((_QWORD *)v17 - 11) = *(_QWORD *)&v4[v16 - 88];
    *(_OWORD *)(v17 - 104) = v22;
    v23 = *(_OWORD *)&v4[v16 - 80];
    v24 = *(_OWORD *)&v4[v16 - 64];
    *(_OWORD *)(v17 - 55) = *(_OWORD *)&v4[v16 - 55];
    *((_OWORD *)v17 - 5) = v23;
    *((_OWORD *)v17 - 4) = v24;
    v10[v16 - 32] = 0;
    *(v17 - 8) = 0;
    if (v4[v16 - 8])
    {
      v25 = *((_OWORD *)v18 - 2);
      *(_QWORD *)&v10[v16 - 16] = *((_QWORD *)v18 - 2);
      *(_OWORD *)&v10[v16 - 32] = v25;
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *(v17 - 8) = 1;
    }
    v16 -= 192;
  }
  while (&v4[v16] != v3);
  v15 = *a1;
  v3 = a1[1];
  v10 += v16;
  v14 = v28;
LABEL_23:
  *a1 = v10;
  a1[1] = v14;
  a1[2] = v29;
  if (v3 == v15)
  {
    if (v3)
LABEL_25:
      operator delete(v3);
  }
  else
  {
    do
    {
      v27 = v3 - 192;
      if (*(v3 - 8) && *(v3 - 9) < 0)
        operator delete(*((void **)v3 - 4));
      v3 -= 192;
    }
    while (v27 != v15);
    v3 = v15;
    if (v15)
      goto LABEL_25;
  }
  return v14;
}

void sub_20F0EB020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  _BYTE *v4;
  va_list va;

  va_start(va, a2);
  if (*v4)
  {
    if (*(char *)(v3 + 183) < 0)
      operator delete(*v2);
  }
  sub_20F0EB04C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0EB04C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 192;
      *(_QWORD *)(a1 + 16) = v2 - 192;
      if (*(_BYTE *)(v2 - 8) && *(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F0EB0B8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  _QWORD *v15;
  void **v16;
  void **v17;
  void *v18;
  void **v19;
  void **v20;
  void *v21;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = (_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 40);
  v8 = (_QWORD *)a2 + 5;
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  v10 = (void **)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 96);
    v13 = *(void **)(a1 + 88);
    if (v12 != v11)
    {
      do
      {
        if (*(_BYTE *)(v12 - 8) && *(char *)(v12 - 9) < 0)
          operator delete(*(void **)(v12 - 32));
        v12 -= 192;
      }
      while (v12 != v11);
      v13 = *v10;
    }
    *(_QWORD *)(a1 + 96) = v11;
    operator delete(v13);
    *v10 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v14 = (void **)(a1 + 112);
  v15 = a2 + 7;
  if (*(unsigned __int8 *)(a1 + 136) == *((unsigned __int8 *)a2 + 136))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      v16 = (void **)*v14;
      if (*v14)
      {
        v17 = *(void ***)(a1 + 120);
        v18 = *v14;
        if (v17 != v16)
        {
          do
          {
            if (*((_BYTE *)v17 - 8))
            {
              if (*((char *)v17 - 9) < 0)
                operator delete(*(v17 - 4));
            }
            v17 -= 24;
          }
          while (v17 != v16);
          v18 = *v14;
        }
        *(_QWORD *)(a1 + 120) = v16;
        operator delete(v18);
        *v14 = 0;
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 128) = 0;
      }
      *(_OWORD *)(a1 + 112) = a2[7];
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      *v15 = 0;
      *((_QWORD *)a2 + 15) = 0;
      *((_QWORD *)a2 + 16) = 0;
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 136))
  {
    *v14 = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 112) = a2[7];
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *v15 = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *(_BYTE *)(a1 + 136) = 1;
    return a1;
  }
  v19 = (void **)*v14;
  if (*v14)
  {
    v20 = *(void ***)(a1 + 120);
    v21 = *v14;
    if (v20 != v19)
    {
      do
      {
        if (*((_BYTE *)v20 - 8) && *((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 24;
      }
      while (v20 != v19);
      v21 = *v14;
    }
    *(_QWORD *)(a1 + 120) = v19;
    operator delete(v21);
  }
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_20F0EB320(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, _QWORD *a6@<X5>, char **a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v43;
  float64x2_t *v45;
  long double v49;
  double v54;
  uint64_t v55;
  float64x2_t v57;
  double v62;
  double v63;
  double v64;
  unsigned __int8 v65;
  double v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  size_t v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  _BYTE *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  unint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  double *v121;
  double *v123;
  char *v125;
  char **v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  double *v156;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  double v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  float64_t v166;
  int8x16_t v167;
  uint64_t v168;
  double v169;
  unint64_t v170;
  uint64_t v171;
  double category;
  const char *categorya;
  uint64_t *v174[3];
  int v175;
  const char *v176;
  int v177;
  const char *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  void *v182;
  char *v183;
  char *v184;
  void *v185;
  char *v186;
  char *v187;
  void *__p[2];
  char v189;
  char v190;
  uint64_t v191;
  _BYTE v192[24];
  __int128 v193;
  void *v194[2];
  unint64_t v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v10 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v11 = v8 - v7;
  if (v8 == v7 || v9 == v10)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  v13 = v11 / 192;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  if ((unint64_t)(v11 / 192) >> 60)
    sub_20EAA7068();
  v18 = (char *)operator new(16 * v13);
  v19 = (v9 - v10) / 192;
  v185 = v18;
  v187 = &v18[16 * v13];
  v153 = v11 / 192;
  v20 = v18;
  if (((v13 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_185;
  v21 = ((v13 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v20 = &v18[16 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
  v22 = v18 + 16;
  v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *((_DWORD *)v22 - 4) = -1;
    *(_DWORD *)v22 = -1;
    *((_QWORD *)v22 - 1) = 0;
    *((_QWORD *)v22 + 1) = 0;
    v22 += 32;
    v23 -= 2;
  }
  while (v23);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_185:
    do
    {
      *(_DWORD *)v20 = -1;
      *((_QWORD *)v20 + 1) = 0;
      v20 += 16;
    }
    while (v20 != &v18[16 * v13]);
  }
  v186 = &v18[16 * v13];
  v182 = 0;
  v183 = 0;
  v184 = 0;
  if (v19 >> 60)
    sub_20EAA7068();
  v24 = (char *)operator new(16 * v19);
  v151 = v11;
  v182 = v24;
  v184 = &v24[16 * v19];
  v26 = v24;
  if (((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_186;
  v27 = ((v19 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v26 = &v24[16 * (v27 & 0x1FFFFFFFFFFFFFFELL)];
  v28 = v24 + 16;
  v29 = v27 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *((_DWORD *)v28 - 4) = -1;
    *(_DWORD *)v28 = -1;
    *((_QWORD *)v28 - 1) = 0;
    *((_QWORD *)v28 + 1) = 0;
    v28 += 32;
    v29 -= 2;
  }
  while (v29);
  if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_186:
    do
    {
      *(_DWORD *)v26 = -1;
      *((_QWORD *)v26 + 1) = 0;
      v26 += 16;
    }
    while (v26 != &v24[16 * v19]);
  }
  v171 = 0;
  v183 = &v24[16 * v19];
  if (v19 <= 1)
    v30 = 1;
  else
    v30 = v19;
  v31 = v11 / 192;
  if (v153 <= 1)
    v31 = 1;
  v155 = v31;
  v156 = a5;
  v154 = a6;
  while (2)
  {
    for (i = 0; i != v30; ++i)
    {
      if (((*(_QWORD *)(*a6 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
        continue;
      v33 = *(_QWORD *)(a1 + 88) + 192 * v171;
      v34 = *(_QWORD *)(a2 + 88);
      v35 = *(double *)(v33 + 48);
      _Q1 = *(float64x2_t *)(v33 + 32);
      _D4 = *(_QWORD *)(a3 + 48);
      _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q1.f64[0]), *(float64x2_t *)(a3 + 32), _Q1, 1), *(float64x2_t *)(a3 + 64), v35);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = _Q2.f64[0] + *(double *)(a3 + 80) * v35;
      _Q0 = vmulq_f64(_Q3, _Q3);
      _Q1.f64[0] = _Q3.f64[1];
      __asm { FMLA            D0, D1, V3.D[1] }
      _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + _Q2.f64[0] * _Q2.f64[0]);
      v164 = _Q2.f64[0];
      v166 = _Q3.f64[1];
      *(_QWORD *)&v43 = *(_OWORD *)&vmulq_f64(_Q2, _Q0);
      _Q5 = vmulq_n_f64(_Q3, _Q0.f64[0]);
      v45 = (float64x2_t *)(v34 + 192 * i);
      _Q0.f64[0] = v45[3].f64[0];
      _Q1 = v45[2];
      v159 = *(float64x2_t *)(a4 + 32);
      v160 = *(float64x2_t *)a4;
      v161 = *(float64x2_t *)(a4 + 64);
      v162 = *(double *)(a4 + 80);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, _Q1.f64[0]), v159, _Q1, 1), v161, _Q0.f64[0]);
      v163 = *(_QWORD *)(a4 + 48);
      __asm { FMLA            D3, D6, V1.D[1] }
      _Q0.f64[0] = _Q3.f64[0] + v162 * _Q0.f64[0];
      _Q1 = vmulq_f64(_Q2, _Q2);
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, _Q1);
      _Q1.f64[0] = vmulq_n_f64(_Q2, *(double *)&_Q1).f64[1];
      v167 = (int8x16_t)_Q5;
      v169 = v43;
      __asm { FMLA            D2, D1, V5.D[1] }
      category = vmlad_n_f64(_Q2.f64[0], _Q0.f64[0], v43);
      v49 = a5[1];
      if (category < cos(v49))
        continue;
      _V5.D[1] = v166;
      _D0 = vextq_s8(v167, v167, 8uLL).u64[0];
      _D3 = *(_QWORD *)(a3 + 104);
      __asm { FMLA            D4, D3, V5.D[1] }
      v54 = *(double *)(v33 + 56) + _Q4.f64[0] + v164 * *(double *)(a3 + 112);
      _Q2.f64[0] = *(float64_t *)(a4 + 112);
      v55 = v34 + 192 * i;
      _Q4.f64[0] = *(float64_t *)(v55 + 104);
      _Q5 = *(float64x2_t *)(v55 + 88);
      v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v160, _Q5.f64[0]), v159, _Q5, 1), v161, _Q4.f64[0]);
      _D17 = v163;
      __asm { FMLA            D7, D17, V5.D[1] }
      _Q4.f64[0] = _D7 + v162 * _Q4.f64[0];
      _Q2 = vaddq_f64(_Q2, _Q4);
      _Q3 = vaddq_f64(*(float64x2_t *)(a4 + 96), v57);
      __asm { FMLA            D4, D0, V3.D[1] }
      v62 = vabdd_f64(vmlad_n_f64(_D4, v169, _Q2.f64[0]), v54);
      v63 = *a5;
      if (v62 > *a5)
        continue;
      v64 = acos(fmax(fmin(category, 1.0), -1.0));
      v65 = atomic_load((unsigned __int8 *)&qword_254A62100);
      if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A62100))
      {
        sub_21021D3D8(v174);
        sub_20E8610C0(v192, "cv3d.vio.odometry");
        sub_20E8C4068(v174, (uint64_t)v192, &qword_254A620F8);
        if ((v192[23] & 0x80000000) != 0)
          operator delete(*(void **)v192);
        __cxa_guard_release(&qword_254A62100);
        a5 = v156;
        a6 = v154;
      }
      v66 = v62 / v63 * (v62 / v63) + v64 / v49 * (v64 / v49);
      v181 = qword_254A620F8;
      if (**(int **)(qword_254A620F8 + 56) <= 2)
      {
        v67 = *(unsigned __int8 *)(qword_254A620F8 + 72);
        v68 = sub_20E8C31DC(qword_254A620F8, "OSLogSurrogateAppender", 1, 0);
        v69 = v68;
        if (v67 || v68)
        {
          v174[0] = &v181;
          v174[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
          v174[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
          v175 = 2;
          v176 = "unknown file";
          v177 = 77;
          v178 = "unknown function";
          v179 = 0;
          v180 = 0;
          v70 = *v174[0];
          v168 = *v174[0];
          if (*(char *)(*v174[0] + 39) < 0)
          {
            v71 = *(_QWORD *)(v70 + 24);
            categorya = *(const char **)(v70 + 16);
            v165 = *v174[0] + 16;
            v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v73 & 1) != 0)
              goto LABEL_39;
          }
          else
          {
            v71 = *(unsigned __int8 *)(*v174[0] + 39);
            categorya = (const char *)(*v174[0] + 16);
            v165 = (uint64_t)categorya;
            v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v72 & 1) != 0)
              goto LABEL_39;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
            if (v190 && v189 < 0)
              operator delete(__p[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            a6 = v154;
          }
LABEL_39:
          if (byte_254A4A4F8[23] >= 0)
            v74 = byte_254A4A4F8;
          else
            v74 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v75 = byte_254A4A4F8[23];
          else
            v75 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v192 = os_log_create(v74, categorya);
          if (v75 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v170 = v69;
          if (v75 >= 0x17)
          {
            v77 = v67;
            v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v75 | 7) != 0x17)
              v78 = v75 | 7;
            v79 = v78 + 1;
            v76 = operator new(v78 + 1);
            *(_QWORD *)&v192[16] = v75;
            *(_QWORD *)&v193 = v79 | 0x8000000000000000;
            *(_QWORD *)&v192[8] = v76;
            v67 = v77;
            a6 = v154;
          }
          else
          {
            BYTE7(v193) = v75;
            v76 = &v192[8];
            if (!v75)
            {
LABEL_53:
              v76[v75] = 0;
              BYTE8(v193) = 1;
              if (v71 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a5 = v156;
              if (v71 >= 0x17)
              {
                v83 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v71 | 7) != 0x17)
                  v83 = v71 | 7;
                v84 = v83 + 1;
                v80 = (void **)operator new(v83 + 1);
                v194[1] = (void *)v71;
                v195 = v84 | 0x8000000000000000;
                v194[0] = v80;
                v81 = v170;
              }
              else
              {
                HIBYTE(v195) = v71;
                v80 = v194;
                v81 = v170;
                if (!v71)
                {
                  LOBYTE(v194[0]) = 0;
                  v196 = 1;
                  v82 = *(NSObject **)v192;
                  if ((SHIBYTE(v195) & 0x80000000) == 0)
                    goto LABEL_57;
                  goto LABEL_63;
                }
              }
              memmove(v80, categorya, v71);
              *((_BYTE *)v80 + v71) = 0;
              v196 = 1;
              v82 = *(NSObject **)v192;
              if ((SHIBYTE(v195) & 0x80000000) == 0)
              {
LABEL_57:
                if (!BYTE8(v193))
                  goto LABEL_66;
                goto LABEL_64;
              }
LABEL_63:
              operator delete(v194[0]);
              if (!BYTE8(v193))
                goto LABEL_66;
LABEL_64:
              if (SBYTE7(v193) < 0)
                operator delete(*(void **)&v192[8]);
LABEL_66:
              if (*(_QWORD *)v192)
                os_release(*(void **)v192);
              if (!v81 || !*(_QWORD *)(v81 + 24))
              {
                os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v192 = 134218496;
                *(_QWORD *)&v192[4] = v171;
                *(_WORD *)&v192[12] = 2048;
                *(_QWORD *)&v192[14] = i;
                *(_WORD *)&v192[22] = 2048;
                *(double *)&v193 = v66;
                v104 = (void *)_os_log_send_and_compose_impl();
                if (v104)
                  free(v104);
                goto LABEL_113;
              }
              v85 = _os_log_pack_size();
              v86 = (std::__shared_weak_count_vtbl *)operator new(v85, (std::align_val_t)8uLL);
              v87 = (std::__shared_weak_count *)operator new();
              v88 = v87;
              v87->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v87->__shared_owners_;
              v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v87->__shared_weak_owners_ = 0;
              v87[1].__vftable = v86;
              *(_QWORD *)v192 = v86;
              *(_QWORD *)&v192[8] = v86;
              *(_QWORD *)&v192[16] = v87;
              do
                v90 = __ldxr(p_shared_owners);
              while (__stxr(v90 + 1, p_shared_owners));
              v193 = 0uLL;
              v194[0] = 0;
              a5 = v156;
              do
                v91 = __ldaxr(p_shared_owners);
              while (__stlxr(v91 - 1, p_shared_owners));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v88);
              }
              v92 = *(_QWORD *)v192;
              v93 = _os_log_pack_fill();
              *(_DWORD *)v93 = 134218496;
              *(_QWORD *)(v93 + 4) = v171;
              *(_WORD *)(v93 + 12) = 2048;
              *(_QWORD *)(v93 + 14) = i;
              *(_WORD *)(v93 + 22) = 2048;
              *(double *)(v93 + 24) = v66;
              v94 = (char *)operator new();
              v95 = *(unsigned __int8 *)(v168 + 39);
              v96 = v165;
              if ((v95 & 0x80u) != 0)
              {
                v96 = *(_QWORD *)(v168 + 16);
                v95 = *(_QWORD *)(v168 + 24);
              }
              *(_QWORD *)v94 = v92;
              *(_OWORD *)(v94 + 8) = *(_OWORD *)&v192[8];
              *(_QWORD *)&v192[8] = 0;
              *(_QWORD *)&v192[16] = 0;
              *(_OWORD *)(v94 + 24) = v193;
              v193 = 0uLL;
              *((_QWORD *)v94 + 5) = v96;
              *((_QWORD *)v94 + 6) = v95;
              v94[56] = 2;
              v191 = 0;
              __p[0] = v94;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), __p);
              v97 = __p[0];
              __p[0] = 0;
              if (!v97)
              {
LABEL_103:
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
                if (!*((_QWORD *)&v193 + 1))
                  goto LABEL_107;
                v113 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                  v115 = *(std::__shared_weak_count **)&v192[16];
                  if (*(_QWORD *)&v192[16])
                    goto LABEL_108;
                }
                else
                {
LABEL_107:
                  v115 = *(std::__shared_weak_count **)&v192[16];
                  if (*(_QWORD *)&v192[16])
                  {
LABEL_108:
                    v116 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                }
LABEL_113:
                if (v67)
                {
                  sub_20E8C003C((uint64_t)v174, "    Normal diff (%lu, %lu) -> ori_diff: %f", v171, i, v66);
                  sub_20E863570((uint64_t)v174);
                }
                sub_20E863570((uint64_t)v174);
                v118 = v180;
                if (v180)
                {
                  v119 = (unint64_t *)&v180->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                goto LABEL_120;
              }
              v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
              if (!v98)
                goto LABEL_83;
              v99 = (unint64_t *)&v98->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
                v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
                if (v101)
                  goto LABEL_84;
              }
              else
              {
LABEL_83:
                v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
                if (v101)
                {
LABEL_84:
                  v102 = (unint64_t *)&v101->__shared_owners_;
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (!v103)
                  {
                    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                    std::__shared_weak_count::__release_weak(v101);
                  }
                }
              }
              MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
              v105 = v191;
              v191 = 0;
              if (v105)
              {
                v106 = *(std::__shared_weak_count **)(v105 + 32);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                v109 = *(std::__shared_weak_count **)(v105 + 16);
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
              }
              goto LABEL_103;
            }
          }
          memmove(v76, v74, v75);
          goto LABEL_53;
        }
      }
LABEL_120:
      v121 = (double *)((char *)v185 + 16 * v171);
      if (*(_DWORD *)v121 == -1 || v121[1] > v66)
      {
        *(_DWORD *)v121 = i;
        v121[1] = v66;
      }
      v123 = (double *)((char *)v182 + 16 * i);
      if (*(_DWORD *)v123 == -1 || v123[1] > v66)
      {
        *(_DWORD *)v123 = v171;
        v123[1] = v66;
      }
    }
    if (++v171 != v155)
      continue;
    break;
  }
  v125 = 0;
  v126 = a7;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v127 = v153;
  if ((unint64_t)(v151 + 191) >= 0x17F)
  {
    v125 = (char *)operator new(8 * v153);
    *a7 = v125;
    a7[1] = v125;
    a7[2] = &v125[8 * v153];
  }
  v128 = 0;
  v129 = 0;
  while (2)
  {
    v131 = *((unsigned int *)v185 + 4 * v128);
    if ((_DWORD)v131 != -1 && *((_DWORD *)v182 + 4 * v131) == v129)
    {
      v132 = (unint64_t)v126[2];
      if ((unint64_t)v125 < v132)
      {
        *(_QWORD *)v125 = v128 | (v131 << 32);
        v130 = (uint64_t)(v125 + 8);
        goto LABEL_143;
      }
      v133 = *v126;
      v134 = (v125 - v133) >> 3;
      v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 61)
        sub_20E867F44();
      v136 = v132 - (_QWORD)v133;
      if (v136 >> 2 > v135)
        v135 = v136 >> 2;
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
        v137 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v137 = v135;
      if (v137)
      {
        if (v137 >> 61)
          sub_20E877A38();
        v138 = (char *)operator new(8 * v137);
        v139 = &v138[8 * v134];
        *(_QWORD *)v139 = v128 | (v131 << 32);
        v130 = (uint64_t)(v139 + 8);
        v140 = (char *)(v125 - v133);
        if (v125 != v133)
        {
LABEL_157:
          v141 = (unint64_t)(v140 - 8);
          if (v141 < 0x168
            || (v144 = (v125 - 8 - v133) & 0xFFFFFFFFFFFFFFF8, &v138[v125 - v133 - 8 - v144] > &v138[v125 - v133 - 8])
            || &v125[-v144 - 8] > v125 - 8
            || (unint64_t)(v133 - v138) < 0x20)
          {
            v142 = v125;
            v127 = v153;
          }
          else
          {
            v145 = (v141 >> 3) + 1;
            v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
            v142 = &v125[-v146];
            v139 -= v146;
            v147 = &v138[8 * v134 - 16];
            v148 = v125 - 16;
            v149 = v145 & 0x3FFFFFFFFFFFFFFCLL;
            v127 = v153;
            do
            {
              v150 = *(_OWORD *)v148;
              *((_OWORD *)v147 - 1) = *((_OWORD *)v148 - 1);
              *(_OWORD *)v147 = v150;
              v147 -= 32;
              v148 -= 32;
              v149 -= 4;
            }
            while (v149);
            if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_160:
              v126 = a7;
              v125 = *a7;
              *a7 = v139;
              a7[1] = (char *)v130;
              a7[2] = &v138[8 * v137];
              if (!v125)
              {
LABEL_143:
                v126[1] = (char *)v130;
                v125 = (char *)v130;
                goto LABEL_144;
              }
LABEL_164:
              operator delete(v125);
              goto LABEL_143;
            }
          }
          do
          {
            v143 = *((_QWORD *)v142 - 1);
            v142 -= 8;
            *((_QWORD *)v139 - 1) = v143;
            v139 -= 8;
          }
          while (v142 != v133);
          goto LABEL_160;
        }
      }
      else
      {
        v138 = 0;
        v139 = (char *)(8 * v134);
        *(_QWORD *)(8 * v134) = v128 | (v131 << 32);
        v130 = 8 * v134 + 8;
        v140 = (char *)(v125 - v133);
        if (v125 != v133)
          goto LABEL_157;
      }
      v126 = a7;
      v127 = v153;
      *a7 = v139;
      a7[1] = (char *)v130;
      a7[2] = &v138[8 * v137];
      if (!v125)
        goto LABEL_143;
      goto LABEL_164;
    }
LABEL_144:
    v128 = ++v129;
    if (v127 > v129)
      continue;
    break;
  }
  if (v182)
    operator delete(v182);
  if (v185)
    operator delete(v185);
}

void sub_20F0EC1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  void *__p;
  char a72;
  char a73;

  if (a73 && a72 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a52);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
    operator delete(a65);
  _Unwind_Resume(a1);
}

void sub_20F0EC380(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float64x2_t a3@<Q2>, float64x2_t a4@<Q3>, float64x2_t a5@<Q4>)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float64x2_t v14;
  float32x2_t *v15;
  unint64_t v16;
  double v26;
  float64x2_t v27;
  double v31;
  uint64_t v32;
  float64x2_t v33;
  unint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char **v42;
  int v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  __int128 v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t v50;
  unint64_t v51;
  __int128 v52;
  _BYTE v53[25];
  __int128 v54;
  uint64_t v55;
  char v56;

  *((_BYTE *)a2 + 16) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *(_OWORD *)(a2 + 5) = 0u;
  v6 = (void **)(a2 + 5);
  *((_BYTE *)a2 + 136) = 0;
  *(_OWORD *)(a2 + 7) = 0u;
  *(_OWORD *)(a2 + 9) = 0u;
  *(_OWORD *)(a2 + 11) = 0u;
  *(_OWORD *)((char *)a2 + 97) = 0u;
  *a2 = a1[20];
  *((_BYTE *)a2 + 8) = *((_BYTE *)a1 + 168);
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v42 = (char **)(a2 + 11);
    do
    {
      LOBYTE(v52) = 0;
      v53[0] = 0;
      v53[8] = 0;
      v53[24] = 0;
      LOBYTE(v54) = 0;
      v56 = 0;
      v49 = 0;
      v47 = 0u;
      v48 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v9 = *(uint64_t **)(v7 + 48);
      v10 = *(uint64_t **)(v7 + 56);
      v11 = ((char *)v10 - (char *)v9) >> 2;
      v12 = 0xAAAAAAAAAAAAAAABLL * v11;
      v13 = (-1431655765 * v11);
      if (-1431655765 * (_DWORD)v11)
      {
        v50 = 0uLL;
        v51 = 0;
        v14.f64[0] = 0.0;
        if (v9 == v10)
        {
          v16 = 0;
          a3.f64[0] = 0.0;
        }
        else
        {
          v15 = (float32x2_t *)v9;
          v16 = 0;
          a3.f64[0] = 0.0;
          do
          {
            a4 = vcvtq_f64_f32(*v15);
            a5.f64[0] = v15[1].f32[0];
            a3 = vaddq_f64(a3, a5);
            *(_QWORD *)&v14.f64[1] = v16;
            v14 = vaddq_f64(v14, a4);
            v16 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
            v50 = v14;
            v51 = *(_QWORD *)&a3.f64[0];
            v15 = (float32x2_t *)((char *)v15 + 12);
          }
          while (v15 != (float32x2_t *)v10);
        }
        a4.f64[0] = (double)(unint64_t)v12;
        *(_QWORD *)&v14.f64[1] = v16;
        v50 = vdivq_f64(v14, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v12), 0));
        v51 = *(_OWORD *)&vdivq_f64(a3, a4);
        _Q0 = *(float64x2_t *)(v7 + 16);
        _D3 = *(_QWORD *)(v7 + 8);
        __asm { FMLA            D2, D3, V1.D[1] }
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v26 = 1.0 / sqrt(_D2);
        v27 = vmulq_n_f64(_Q0, v26);
        _Q1 = vmulq_n_f64(*(float64x2_t *)v7, v26);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v31 = sqrt(vmlad_n_f64(_D2, v27.f64[0], v27.f64[0]));
        a4.f64[0] = 1.0 / v31;
        if (v31 == 0.0)
          a4.f64[0] = 1.0;
        v32 = *(_OWORD *)&vmulq_f64(v27, a4);
        v33 = vmulq_n_f64(_Q1, a4.f64[0]);
        if (v31 == 0.0)
          v31 = 1.0;
        v44 = _Q1;
        v45 = v27;
        v46 = v33;
        *(_QWORD *)&v47 = v32;
        *((double *)&v47 + 1) = -v27.f64[1] / v31;
        v48 = vsqrtq_f64(*(float64x2_t *)(v7 + 32));
        v49 = *a2;
        v43 = -1431655765 * ((unint64_t)(a2[12] - a2[11]) >> 6);
        sub_20EEFE640(v6, a2[6], v9, v10, v12);
        sub_20F0EC72C((unint64_t *)a2 + 8, (void *)a2[9], v13, (const float *)&v43);
        v34 = a2[12];
        if (v34 < a2[13])
        {
          v35 = v45;
          *(float64x2_t *)v34 = v44;
          *(float64x2_t *)(v34 + 16) = v35;
          v36 = v46;
          *(_QWORD *)(v34 + 48) = v47;
          *(float64x2_t *)(v34 + 32) = v36;
          *(_QWORD *)(v34 + 56) = *((_QWORD *)&v47 + 1);
          v37 = v48;
          *(_QWORD *)(v34 + 80) = v49;
          *(float64x2_t *)(v34 + 64) = v37;
          v38 = v50;
          *(_QWORD *)(v34 + 104) = v51;
          *(float64x2_t *)(v34 + 88) = v38;
          v39 = v52;
          v40 = *(_OWORD *)v53;
          a3.f64[1] = *(float64_t *)&v53[17];
          *(_OWORD *)(v34 + 137) = *(_OWORD *)&v53[9];
          *(_OWORD *)(v34 + 112) = v39;
          *(_OWORD *)(v34 + 128) = v40;
          *(_BYTE *)(v34 + 160) = 0;
          *(_BYTE *)(v34 + 184) = 0;
          if (v56)
          {
            if (SHIBYTE(v55) < 0)
            {
              sub_20E860C04((_BYTE *)(v34 + 160), (void *)v54, *((unint64_t *)&v54 + 1));
            }
            else
            {
              v41 = v54;
              *(_QWORD *)(v34 + 176) = v55;
              *(_OWORD *)(v34 + 160) = v41;
            }
            *(_BYTE *)(v34 + 184) = 1;
          }
          a2[12] = v34 + 192;
          a2[12] = v34 + 192;
          if (!v56)
            goto LABEL_3;
LABEL_23:
          if (SHIBYTE(v55) < 0)
            operator delete((void *)v54);
          goto LABEL_3;
        }
        a2[12] = (uint64_t)sub_20F0EAD4C(v42, (uint64_t)&v44);
        if (v56)
          goto LABEL_23;
      }
LABEL_3:
      v7 += 168;
    }
    while (v7 != v8);
  }
}

void sub_20F0EC6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  void **v41;

  if (*(_BYTE *)(v40 + 184) && *(char *)(v40 + 183) < 0)
    operator delete(*v41);
  *(_QWORD *)(v39 + 96) = v40;
  if (a39)
  {
    if (a38 < 0)
      operator delete(a33);
  }
  sub_20E991850(v39);
  _Unwind_Resume(a1);
}

const float *sub_20F0EC72C(unint64_t *a1, void *a2, unint64_t a3, const float *a4)
{
  unint64_t v4;
  uint64_t v5;
  const float *v6;
  const float *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  uint64_t v32;
  unint64_t v33;
  const float *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  int *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  unint64_t v63;
  float *v64;
  unint64_t v65;
  float32x4_t v67;
  float32x4_t *v68;
  unint64_t v69;

  v4 = *a1;
  v5 = (uint64_t)a2 - *a1;
  v6 = (const float *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFFCLL));
  if (!a3)
    return v6;
  v7 = a4;
  v10 = v5 >> 2;
  v12 = a1[1];
  v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 2)
  {
    v19 = (uint64_t)(v12 - (_QWORD)v6) >> 2;
    v20 = a3;
    if (a3 <= v19)
    {
      v21 = a1[1];
      v19 = a3;
      goto LABEL_42;
    }
    v21 = v12 + 4 * (a3 - v19);
    v22 = v20 * 4 - (v12 - (_QWORD)v6) - 4;
    if (v22 >= 0x4C)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (v23 = (_DWORD *)a1[1], (v22 & 0xFFFFFFFFFFFFFFFCLL) + v12 + 4 <= (unint64_t)a4))
      {
        v44 = (v22 >> 2) + 1;
        v23 = (_DWORD *)(v12 + 4 * (v44 & 0x7FFFFFFFFFFFFFF8));
        v45 = vld1q_dup_f32(a4);
        v46 = (float32x4_t *)(v12 + 16);
        v47 = v44 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v46[-1] = v45;
          *v46 = v45;
          v46 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_41:
          a1[1] = v21;
          if ((const float *)v12 == v6)
            return v6;
LABEL_42:
          v48 = (char *)&v6[v20];
          v49 = v21 - (_QWORD)&v6[v20];
          v50 = v49 >> 2;
          v51 = (int *)(v21 - v20 * 4);
          v52 = (_DWORD *)v21;
          if ((unint64_t)v51 < v12)
          {
            v53 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + v49;
            v54 = v53 + v4 + 4;
            if (v12 > v54)
              v54 = v12;
            v55 = v54 + ~v4 - v53;
            if (v55 >= 0x2C)
            {
              v52 = (_DWORD *)v21;
              if (v21 - ((v5 & 0xFFFFFFFFFFFFFFFCLL) + v4) - v49 >= 0x20)
              {
                v56 = (v55 >> 2) + 1;
                v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
                v51 = (int *)((char *)v51 + v57);
                v52 = (_DWORD *)(v21 + v57);
                v58 = (_OWORD *)(v21 + 16);
                v59 = (__int128 *)(4 * v50 + 4 * v10 + v4 + 16);
                v60 = v56 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v61 = *v59;
                  *(v58 - 1) = *(v59 - 1);
                  *v58 = v61;
                  v58 += 2;
                  v59 += 2;
                  v60 -= 8;
                }
                while (v60);
                if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_52;
              }
            }
            else
            {
              v52 = (_DWORD *)v21;
            }
            do
            {
              v62 = *v51++;
              *v52++ = v62;
            }
            while ((unint64_t)v51 < v12);
          }
LABEL_52:
          a1[1] = (unint64_t)v52;
          if ((char *)v21 != v48)
            memmove((void *)(v21 - 4 * v50), v6, v49);
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7)
              v63 = 0;
            else
              v63 = a3;
            v7 += v63;
          }
          if (v19 >= 0xC && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v19))
          {
            v64 = (float *)&v6[v19 & 0xFFFFFFFFFFFFFFF8];
            v65 = v19 & 7;
            v67 = vld1q_dup_f32(v7);
            v68 = (float32x4_t *)(v4 + 4 * v10 + 16);
            v69 = v19 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v68[-1] = v67;
              *v68 = v67;
              v68 += 2;
              v69 -= 8;
            }
            while (v69);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
              return v6;
          }
          else
          {
            v64 = (float *)v6;
            v65 = v19;
          }
          do
          {
            *v64++ = *v7;
            --v65;
          }
          while (v65);
          return v6;
        }
      }
    }
    else
    {
      v23 = (_DWORD *)a1[1];
    }
    do
      *v23++ = *(_DWORD *)a4;
    while (v23 != (_DWORD *)v21);
    goto LABEL_41;
  }
  v13 = a3 + ((uint64_t)(v12 - v4) >> 2);
  if (v13 >> 62)
    sub_20EABADD4();
  v15 = v11 - v4;
  if (v15 >> 1 > v13)
    v13 = v15 >> 1;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 >> 62)
      sub_20E877A38();
    v17 = v16;
    v18 = operator new(4 * v16);
    v16 = v17;
  }
  else
  {
    v18 = 0;
  }
  v24 = v5 >> 2;
  v25 = (unint64_t)&v18[4 * v10];
  v26 = (char *)(v25 + 4 * a3);
  v27 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v28 = (char *)v25;
  if (v27 < 0x13)
    goto LABEL_74;
  if (v25 < (unint64_t)(v7 + 1))
  {
    v28 = (char *)v25;
    if (&v18[4 * a3 + (v5 & 0xFFFFFFFFFFFFFFFCLL)] > (_BYTE *)v7)
      goto LABEL_74;
  }
  v29 = v27 + 1;
  v28 = (char *)(v25 + 4 * (v29 & 0x7FFFFFFFFFFFFFF8));
  v30 = vld1q_dup_f32(v7);
  v31 = (float32x4_t *)&v18[4 * v24 + 16];
  v32 = v29 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31[-1] = v30;
    *v31 = v30;
    v31 += 2;
    v32 -= 8;
  }
  while (v32);
  if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_74:
    do
    {
      *(float *)v28 = *v7;
      v28 += 4;
    }
    while (v28 != v26);
  }
  v33 = v25;
  if ((void *)v4 != a2)
  {
    v34 = v6;
    v33 = v25;
    if ((unint64_t)(v5 - 4) < 0x3C)
      goto LABEL_75;
    v34 = v6;
    v33 = v25;
    if ((v5 & 0xFFFFFFFFFFFFFFFCLL) + v4 - (unint64_t)&v18[v5 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
      goto LABEL_75;
    v35 = ((unint64_t)(v5 - 4) >> 2) + 1;
    v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
    v34 = &v6[v36 / 0xFFFFFFFFFFFFFFFCLL];
    v33 = v25 - v36;
    v37 = 4 * v24 - 16;
    v38 = &v18[v37];
    v39 = (__int128 *)(v4 + v37);
    v40 = v35 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 8;
    }
    while (v40);
    if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_75:
      do
      {
        v42 = *((_DWORD *)v34-- - 1);
        *(_DWORD *)(v33 - 4) = v42;
        v33 -= 4;
      }
      while (v34 != (const float *)v4);
    }
  }
  v43 = &v18[4 * v16];
  if ((const float *)v12 != v6)
    memmove(v26, v6, v12 - (_QWORD)v6);
  *a1 = v33;
  a1[1] = (unint64_t)&v26[v12 - (_QWORD)v6];
  a1[2] = (unint64_t)v43;
  if (v4)
    operator delete((void *)v4);
  return (const float *)v25;
}

uint64_t sub_20F0ECB80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  __int128 v29;

  __p = operator new(0x20uLL);
  v29 = xmmword_2102DB470;
  strcpy((char *)__p, "PoseTrackerConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_features", v4, "Max number of features per frame. ");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_frames", v5, "Minimum number of frames to buffer a window (to do BA).");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.min_num_frames_to_buffer_the_window", v6, "Number of frames in the BA window. ");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.remove_tracks_after_export", v7, "Whether to remove tracks from track index after they were used in BA.Setting this to true prevents double counting measurements.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_tracks", v8, "Maximum number of tracks in the BA window.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_tracks_in_window", v9, "Maximum number of tracks to be passed to the BA window.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_tracks_in_window_init", v10, "Maximum number of tracks to be passed to the BA window when initializing.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EB8894C(a1 + 560);
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.sandbox_path", v11, "Path for sandbox output folder");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 51));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.use_velocity_gate_stationary_constraints", v12, "Use velocity gating to modify stationary constraints.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_velocity_for_stationary_constraints", v13, "Maximum velocity allowed for stationary constraints.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.min_drift_velocity_for_stationary_constraints", v14, "Minimum speed at which stationary constraints are re-enabled. See also max_velocity_for_stationary_constraints.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 554));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.process_bad_geometry_frames_in_ak", v15, "If processing bad-geometry frames in adaptive keyframing or not (only valid when AK is enabled)");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 49));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.garbage_collect_unit_tracks", v16, "Whether to drop length-1 tracks.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 555));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.use_IMU", v17, "Use IMU in sliding window");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 584));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.use_line_segment_tracking", v18, "Use line segment observation for tracking");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DCF0((unsigned int *)(a1 + 588));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_inliers_to_extrapolate_pose_in_visual_slam", v19, "Maximum number of inliers to extrapolate the pose in visual slam. Below this threshold, Gyro rotation is used and the frame is marked as extrapolated.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DCF0((unsigned int *)(a1 + 592));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_num_2d_3d_points_to_extrapolate_pose_in_visual_slam", v20, "Maximum number of inliers to extrapolate the pose in visual slam. Below this threshold, Gyro rotation is used and the frame is marked as extrapolated.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)(a1 + 596));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.run_pnp_after_epipolar_outlier_rejection_in_visual_slam", v21, "Compute the incremental camera pose using PnP RANSAC after running the epipolar outlier rejection.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EA9DB90((double *)(a1 + 600));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.min_displacement_to_extrapolate_pose_in_visual_slam_in_m", v22, "Minimum translation from reference to current frame to extrapolate the pose. Beyond this threshold, Gyro rotation is used and the frame is marked as extrapolated. This will enforce using epipolar map-tracking.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EA9DB90((double *)(a1 + 608));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.max_norm2_gyro_rotation_to_extrapolate_pose_in_visual_slam_in_deg", v23, "Maximum frame-to-frame gyro-based rotation to check whether PnP RANSAC dispalcement exceeded the tolerated threshold. The idea here is to not check the positional-displacement limit during fast head-rotation.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EAA14D8((_BYTE *)(a1 + 616));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.enable_use_gyro_rotation_if_smaller_than_vision_based", v24, "Whether to enable replacing the vision-based with gyro-based rotation in the incremental camera pose. The incremental camera pose is used  in map-tracking and pre-BA points triangulation.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EA9DB90((double *)(a1 + 624));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.min_vision_rotation_rate_to_fallback_to_gyro_in_deg", v25, "Minimum vision rotation rate in deg/s to fallback to gyro rotation.");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EAA14D8((_BYTE *)(a1 + 552));
  sub_20E8B2F9C((uint64_t *)&__p, "PoseTrackerConfig.require_primary_cam_streams_consensus_for_good_geometry", v26, "Whether we need all primary camera streams' agreement to conclude good geometry.");
  sub_20F0D388C(a1 + 80, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F0CDE7C(a1 + 448, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F0DA3F8(a1 + 232, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F0ED0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F0ED1B8(int64_t a1, __int128 *a2, uint64_t **a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void **v64;
  char v65;
  __int128 v66;
  void *v67;
  size_t v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *i;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, const char *, uint64_t, void *, _QWORD);
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  __int128 v137;
  unint64_t v138;
  char *v139;
  void *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  char *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  uint64_t *v249;
  uint64_t v250;
  __int128 v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t j;
  uint64_t *v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  char v277;
  char v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  char v287;
  unsigned __int8 v288;
  uint64_t v289;
  uint64_t k;
  unsigned __int8 v291;
  unsigned __int8 v292;
  uint64_t v293;
  uint64_t m;
  unsigned __int8 v295;
  unint64_t v296;
  unint64_t v297;
  uint8x8_t v298;
  uint64_t **v299;
  uint64_t *v300;
  unint64_t v302;
  uint64_t v304;
  _QWORD *v305;
  float v306;
  float v307;
  _BOOL8 v308;
  unint64_t v309;
  unint64_t v310;
  size_t prime;
  unint64_t v312;
  uint8x8_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  unint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t *v321;
  unint64_t v322;
  int64_t v323;
  int v324;
  uint64_t *v325;
  int v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _OWORD *v332;
  _OWORD *v333;
  _OWORD *v334;
  int64_t v335;
  void *v336;
  _QWORD *v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  size_t v342;
  const char *v343;
  unsigned __int8 v344;
  unsigned __int8 v345;
  const char *v346;
  size_t v347;
  _BYTE *v348;
  unint64_t v349;
  const char *v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  _BYTE *v355;
  NSObject *v356;
  uint64_t v357;
  uint64_t v358;
  size_t v359;
  std::__shared_weak_count_vtbl *v360;
  std::__shared_weak_count *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  void *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t **v396;
  uint64_t *v397;
  uint64_t *v398;
  unsigned int *v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  int64_t v415;
  uint64_t v416;
  uint64_t v417;
  void *v418[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  __int128 v420;
  uint64_t v421;
  void *v422[2];
  std::__shared_weak_count *v423;
  __int128 v424;
  uint64_t v425;
  void *v426[2];
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  void *v430;
  __int128 v431;
  __int128 v432;
  uint64_t v433;
  __int128 v434;
  uint64_t v435;
  __int128 v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  __int128 v440;
  uint64_t v441;
  __int128 v442;
  uint64_t v443;
  void *v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  _BYTE object[48];
  _QWORD v466[7];
  __int128 v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  void *v471[3];
  __int128 v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  __int128 v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  __int128 v482;
  uint64_t v483;
  void *v484[3];
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  uint64_t v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  char *v507;
  char *v508;
  int64_t v509;

  sub_20F0F10C4(&v504);
  v415 = a1;
  v396 = a3;
  if (**(int **)(v504 + 56) > 3)
    goto LABEL_90;
  v10 = *(unsigned __int8 *)(v504 + 72);
  v11 = sub_20E8C31DC(v504, "OSLogSurrogateAppender", 1, 0);
  v12 = v11;
  v13 = !v10 && v11 == 0;
  if (v13)
    goto LABEL_90;
  v412 = a6;
  v418[0] = &v504;
  v418[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v420) = 3;
  *((_QWORD *)&v420 + 1) = "unknown file";
  LODWORD(v421) = 57;
  v422[1] = 0;
  v423 = 0;
  v422[0] = "unknown function";
  v14 = (const char *)(v504 + 16);
  v404 = v504 + 16;
  v407 = v504;
  if (*(char *)(v504 + 39) < 0)
  {
    v14 = *(const char **)(v504 + 16);
    v15 = *(_QWORD *)(v504 + 24);
    v410 = v10;
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v15 = *(unsigned __int8 *)(v504 + 39);
    v410 = v10;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v18 = byte_254A4A4F8;
  else
    v18 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8[23];
  else
    v19 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v18, v14);
  v20 = &object[8];
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v21 = v19 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *(_QWORD *)&object[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v20;
    *(_QWORD *)&object[16] = v19;
    a3 = v396;
    goto LABEL_23;
  }
  object[31] = v19;
  if (v19)
LABEL_23:
    memmove(v20, v18, v19);
  v20[v19] = 0;
  object[32] = 1;
  v23 = &object[40];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    v23 = operator new(v25 + 1);
    v466[1] = v26 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v23;
    v466[0] = v15;
  }
  else
  {
    HIBYTE(v466[1]) = v15;
    if (!v15)
    {
      object[40] = 0;
      LOBYTE(v466[2]) = 1;
      v24 = *(NSObject **)object;
      if ((SHIBYTE(v466[1]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v23, v14, v15);
  v23[v15] = 0;
  LOBYTE(v466[2]) = 1;
  v24 = *(NSObject **)object;
  if ((SHIBYTE(v466[1]) & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[32])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_37;
LABEL_35:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v12 && *(_QWORD *)(v12 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    *(_QWORD *)object = v28;
    *(_QWORD *)&object[8] = v28;
    *(_QWORD *)&object[16] = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v407 + 39);
    v37 = v404;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(_QWORD *)(v407 + 16);
      v36 = *(_QWORD *)(v407 + 24);
    }
    *(_QWORD *)v35 = v34;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v35 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 1;
    v505 = 0;
    *(_QWORD *)&v506 = v35;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v506);
    v38 = v506;
    *(_QWORD *)&v506 = 0;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
      v45 = v505;
      v505 = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = *(std::__shared_weak_count **)&object[32];
    a6 = v412;
    if (*(_QWORD *)&object[32])
    {
      v53 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v56 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v58 = (void *)_os_log_send_and_compose_impl();
    a6 = v412;
    if (v58)
      free(v58);
  }
  if (v410)
  {
    sub_20E8C003C((uint64_t)v418, "Initializing pose tracker");
    sub_20E863570((uint64_t)v418);
  }
  sub_20E863570((uint64_t)v418);
  v59 = v423;
  if (v423)
  {
    v60 = (unint64_t *)&v423->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      v62 = *(_QWORD *)(a4 + 40);
      if (*(_QWORD *)(a4 + 32) < v62)
        goto LABEL_91;
      goto LABEL_93;
    }
  }
LABEL_90:
  v62 = *(_QWORD *)(a4 + 40);
  if (*(_QWORD *)(a4 + 32) < v62)
  {
LABEL_91:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 62, (uint64_t)"pose_tracker_config.max_num_frames >= pose_tracker_config.min_num_frames_to_buffer_the_window", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_575;
    }
    v62 = *(_QWORD *)(a4 + 40);
  }
LABEL_93:
  if (v62 <= 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 63, (uint64_t)"pose_tracker_config.min_num_frames_to_buffer_the_window > 2", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_575;
  }
  v63 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 >= v63)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 64, (uint64_t)"pose_tracker_config.max_num_features < pose_tracker_config.max_num_tracks", 73, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_575;
    }
    v63 = *(_QWORD *)(a4 + 8);
  }
  if (*(_QWORD *)(a4 + 16) > v63)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 66, (uint64_t)"pose_tracker_config.max_num_tracks_in_window <= pose_tracker_config.max_num_tracks", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_575;
    }
    v63 = *(_QWORD *)(a4 + 8);
  }
  if (*(_QWORD *)(a4 + 32) >= v63
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 67, (uint64_t)"pose_tracker_config.max_num_frames < pose_tracker_config.max_num_tracks", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_BYTE *)(a4 + 596)&& *(_BYTE *)(a4 + 136)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 70, (uint64_t)"!pose_tracker_config.run_pnp_after_epipolar_outlier_rejection_in_visual_slam || !pose_tracker_config.outlier_rejection_config .use_p3p_estimator_for_primary_stream_in_stereo", 173, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_575:
    abort();
  }
  memcpy((void *)(a1 + 536), (const void *)a4, 0x230uLL);
  v399 = (unsigned int *)(a1 + 536);
  if (a1 + 536 != a4)
  {
    v64 = (void **)(a1 + 1096);
    v65 = *(_BYTE *)(a4 + 583);
    if (*(char *)(a1 + 1119) < 0)
    {
      if (v65 >= 0)
        v67 = (void *)(a4 + 560);
      else
        v67 = *(void **)(a4 + 560);
      if (v65 >= 0)
        v68 = *(unsigned __int8 *)(a4 + 583);
      else
        v68 = *(_QWORD *)(a4 + 568);
      sub_20E867CBC(v64, v67, v68);
    }
    else if ((*(_BYTE *)(a4 + 583) & 0x80) != 0)
    {
      sub_20E867BF8(v64, *(void **)(a4 + 560), *(_QWORD *)(a4 + 568));
    }
    else
    {
      v66 = *(_OWORD *)(a4 + 560);
      *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a4 + 576);
      *(_OWORD *)v64 = v66;
    }
  }
  v69 = *(_OWORD *)(a4 + 584);
  v70 = *(_OWORD *)(a4 + 600);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a4 + 616);
  *(_OWORD *)(a1 + 1136) = v70;
  *(_OWORD *)(a1 + 1120) = v69;
  v71 = 1;
  if (*(_BYTE *)(a1 + 984))
  {
    if (*(_BYTE *)(a1 + 1089))
      v71 = 2;
    else
      v71 = 1;
  }
  sub_20F112FD4((_QWORD *)(a1 + 56), a3, *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 568), *(_BYTE *)(a1 + 584), *(_BYTE *)(a1 + 585), v71, *(_BYTE *)(a1 + 1120));
  v72 = a1;
  v73 = *(_QWORD *)(a1 + 568);
  v74 = *(char **)(v72 + 264);
  v75 = (uint64_t)(*(_QWORD *)(v72 + 272) - (_QWORD)v74) >> 3;
  if (v75 != v73)
  {
    if (v73)
    {
      v413 = a6;
      if (v73 >> 61)
        sub_20E867F44();
      v76 = (char *)operator new(8 * v73);
      v77 = v76;
      v78 = &v76[8 * v73];
      v79 = v76;
      if (((v73 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_598;
      v80 = ((v73 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      v79 = &v76[8 * (v80 & 0x3FFFFFFFFFFFFFFELL)];
      v81 = v76 + 8;
      v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v81 - 2) = 0;
        *(_DWORD *)v81 = 0;
        *(v81 - 4) = 0;
        v81[4] = 0;
        v81 += 16;
        v82 -= 2;
      }
      while (v82);
      if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_598:
        do
        {
          *(_DWORD *)v79 = 0;
          v79[4] = 0;
          v79 += 8;
        }
        while (v79 != v78);
      }
      v83 = *(_QWORD *)(v415 + 304);
      if (v83 >= v73)
        v84 = v73;
      else
        v84 = *(_QWORD *)(v415 + 304);
      if (v83 <= v73)
      {
        if (v83)
        {
          v92 = *(_QWORD *)(v415 + 288);
          v93 = v76;
          do
          {
            v94 = &v74[8 * (v92 % v75)];
            *(_DWORD *)v93 = *(_DWORD *)v94;
            v93[4] = v94[4];
            ++v92;
            v93 += 8;
            --v83;
          }
          while (v83);
        }
        else if (!v74)
        {
LABEL_146:
          v72 = v415;
          *(_QWORD *)(v415 + 264) = v77;
          *(_QWORD *)(v415 + 272) = v78;
          *(_QWORD *)(v415 + 280) = v78;
          *(_QWORD *)(v415 + 288) = 0;
          *(_QWORD *)(v415 + 296) = v84 % v73;
          *(_QWORD *)(v415 + 304) = v84;
          a6 = v413;
          goto LABEL_147;
        }
      }
      else
      {
        v85 = *(_QWORD *)(v415 + 288);
        v86 = v84 - 1;
        v87 = v83 - 1;
        v88 = v76;
        do
        {
          do
          {
            v89 = v86;
            v90 = &v74[8 * (v85 % v75)];
            *(_DWORD *)v88 = *(_DWORD *)v90;
            v88[4] = v90[4];
            v86 = v89 - 1;
            ++v85;
            v88 += 8;
          }
          while (v87-- == 0);
        }
        while (v89);
      }
      *(_QWORD *)(v415 + 272) = v74;
      operator delete(v74);
      goto LABEL_146;
    }
    v72 = v415;
    *(_QWORD *)(v415 + 272) = v74;
    *(_QWORD *)(v415 + 296) = 0;
    *(_QWORD *)(v415 + 304) = 0;
    *(_QWORD *)(v415 + 288) = 0;
  }
LABEL_147:
  v95 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v72 + 816) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v72 + 832) = v95;
  v96 = *(_OWORD *)(a4 + 112);
  v97 = *(_OWORD *)(a4 + 128);
  v98 = *(_OWORD *)(a4 + 160);
  *(_OWORD *)(v72 + 880) = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v72 + 896) = v98;
  *(_OWORD *)(v72 + 848) = v96;
  *(_OWORD *)(v72 + 864) = v97;
  v99 = *(_OWORD *)(a4 + 176);
  v100 = *(_OWORD *)(a4 + 192);
  v101 = *(_OWORD *)(a4 + 208);
  *(_QWORD *)(v72 + 960) = *(_QWORD *)(a4 + 224);
  *(_OWORD *)(v72 + 928) = v100;
  *(_OWORD *)(v72 + 944) = v101;
  *(_OWORD *)(v72 + 912) = v99;
  v102 = operator new();
  sub_20F0D8AD4(v102, v72 + 768, a3, *(_QWORD *)(v72 + 536), a6);
  v103 = *(_QWORD **)(v72 + 208);
  *(_QWORD *)object = 0;
  *(_QWORD *)(v72 + 208) = v102;
  if (v103)
  {
    sub_20F1031CC(v72 + 208, v103);
    v104 = *(_QWORD **)object;
    *(_QWORD *)object = 0;
    if (v104)
      sub_20F1031CC((uint64_t)object, v104);
  }
  v105 = *(_QWORD **)(v72 + 184);
  for (i = *(_QWORD **)(v72 + 192); i != v105; sub_20F104368(i))
    i -= 77;
  *(_QWORD *)(v415 + 192) = v105;
  v107 = (_QWORD *)v415;
  v108 = *a3;
  v397 = a3[1];
  if (*a3 != v397)
  {
    v400 = (_QWORD *)(v415 + 200);
    v72 = (int64_t)&unk_21025533E;
    while (1)
    {
      v398 = v108;
      v405 = *v108;
      v402 = *(unsigned int *)*v108;
      if (v402 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_575;
      }
      v401 = -991146299 * ((*(_QWORD *)(v405 + 16) - *(_QWORD *)(v405 + 8)) >> 7);
      if ((_DWORD)v401)
        break;
LABEL_154:
      v108 = v398 + 1;
      if (v398 + 1 == v397)
      {
        v249 = *v396;
        v108 = v396[1];
        goto LABEL_345;
      }
    }
    v109 = 0;
    while (1)
    {
      v110 = *v399;
      v111 = *(_QWORD *)(v405 + 8) + 1664 * v109;
      v112 = *(double *)(v111 + 1552);
      if (*(_BYTE *)(v111 + 1536))
        v113 = v111 + 96;
      else
        v113 = 0;
      v114 = *(_DWORD *)(v113 + 992);
      if (v114 == -1)
      {
        v115 = v109;
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0);
        v116 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v117 = qword_254A6DE40;
          v118 = qword_254A6DE48;
          while (v117 != v118)
          {
            v120 = *(void (**)(uint64_t, const char *, uint64_t, void *, _QWORD))v117;
            v119 = *(_QWORD *)(v117 + 8);
            v117 += 16;
            v120(v119, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21025533E, 0);
          }
        }
        v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        v107 = (_QWORD *)v415;
        if (!byte_254A6DE68)
          goto LABEL_575;
        v109 = v115;
        qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21025533E, 0);
        v114 = *(_DWORD *)(v113 + 992);
      }
      if (!v114)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v122 = v402 | (v109 << 32);
      sub_20F002AEC((uint64_t)v418, v415 + 616, v110, v112 / *(double *)v113);
      *(_OWORD *)&object[8] = *(_OWORD *)v418;
      *(_QWORD *)object = v122;
      *(_QWORD *)&object[24] = rep;
      v418[0] = 0;
      v418[1] = 0;
      rep = 0;
      *(_OWORD *)&object[32] = v420;
      v123 = v421;
      v421 = 0;
      v420 = 0uLL;
      *(_OWORD *)&v466[1] = *(_OWORD *)v422;
      v466[0] = v123;
      v466[3] = v423;
      v422[1] = 0;
      v423 = 0;
      v422[0] = 0;
      *(_OWORD *)&v466[4] = v424;
      v124 = v425;
      v424 = 0uLL;
      v425 = 0;
      v467 = *(_OWORD *)v426;
      v125 = v429;
      v466[6] = v124;
      v468 = v427;
      v426[0] = 0;
      v426[1] = 0;
      v427 = 0;
      v469 = v428;
      v428 = 0uLL;
      v429 = 0;
      v126 = v433;
      v470 = v125;
      v471[0] = v430;
      v127 = v431;
      v431 = 0uLL;
      v430 = 0;
      *(_OWORD *)&v471[1] = v127;
      v472 = v432;
      v432 = 0uLL;
      v433 = 0;
      v474 = v434;
      v128 = v437;
      v473 = v126;
      v475 = v435;
      v434 = 0uLL;
      v435 = 0;
      v476 = v436;
      v436 = 0uLL;
      v437 = 0;
      v478 = v438;
      v129 = v441;
      v477 = v128;
      v479 = v439;
      v438 = 0uLL;
      v439 = 0;
      v480 = v440;
      v440 = 0uLL;
      v441 = 0;
      v482 = v442;
      v130 = v444;
      v481 = v129;
      v483 = v443;
      v442 = 0uLL;
      v443 = 0;
      *(_OWORD *)&v484[1] = v445;
      v445 = 0uLL;
      v444 = 0;
      v485 = v446;
      v486 = v447;
      v489 = v450;
      v490 = v451;
      v487 = v448;
      v488 = v449;
      v494 = v455;
      v495 = v456;
      v492 = v453;
      v493 = v454;
      v491 = v452;
      v496 = v457;
      v484[0] = v130;
      v497 = v458;
      v458 = 0;
      v457 = 0uLL;
      v498 = v459;
      v499 = v460;
      v459 = 0uLL;
      v460 = 0;
      v500 = v461;
      v501 = v462;
      v462 = 0;
      v461 = 0uLL;
      v131 = (void *)v463;
      v502 = v463;
      v503 = v464;
      v463 = 0uLL;
      v464 = 0;
      v133 = (char *)v107[23];
      v132 = (char *)v107[24];
      v134 = v132 - v133;
      if (v132 == v133)
      {
        v136 = (char *)v107[23];
        v137 = 0uLL;
      }
      else
      {
        v135 = 0x4FCACE213F2B3885 * (v134 >> 3);
        v136 = (char *)v107[23];
        v137 = 0uLL;
        do
        {
          v138 = v135 >> 1;
          v139 = &v136[616 * (v135 >> 1)];
          if (*(_DWORD *)v139 < *(_DWORD *)object
            || *(_DWORD *)v139 == *(_DWORD *)object && *((_DWORD *)v139 + 1) < *(_DWORD *)&object[4])
          {
            v136 = v139 + 616;
            v138 = v135 + ~v138;
          }
          v135 = v138;
        }
        while (v138);
      }
      if (v136 == v132)
        break;
      v140 = v131;
      if (*(_QWORD *)v136 != v122)
        break;
LABEL_267:
      if (v140)
      {
        *((_QWORD *)&v502 + 1) = v140;
        operator delete(v140);
      }
      v72 = (int64_t)&unk_21025533E;
      if ((_QWORD)v500)
      {
        *((_QWORD *)&v500 + 1) = v500;
        operator delete((void *)v500);
      }
      if ((_QWORD)v498)
      {
        *((_QWORD *)&v498 + 1) = v498;
        operator delete((void *)v498);
      }
      if ((_QWORD)v496)
      {
        *((_QWORD *)&v496 + 1) = v496;
        operator delete((void *)v496);
      }
      if (v484[0])
        operator delete(v484[0]);
      if ((_QWORD)v482)
      {
        *((_QWORD *)&v482 + 1) = v482;
        operator delete((void *)v482);
      }
      if ((_QWORD)v480)
      {
        *((_QWORD *)&v480 + 1) = v480;
        operator delete((void *)v480);
      }
      if ((_QWORD)v478)
      {
        *((_QWORD *)&v478 + 1) = v478;
        operator delete((void *)v478);
      }
      if ((_QWORD)v476)
      {
        *((_QWORD *)&v476 + 1) = v476;
        operator delete((void *)v476);
      }
      if ((_QWORD)v474)
      {
        *((_QWORD *)&v474 + 1) = v474;
        operator delete((void *)v474);
      }
      if ((_QWORD)v472)
      {
        *((_QWORD *)&v472 + 1) = v472;
        operator delete((void *)v472);
      }
      if (v471[0])
        operator delete(v471[0]);
      if ((_QWORD)v469)
      {
        *((_QWORD *)&v469 + 1) = v469;
        operator delete((void *)v469);
      }
      if ((_QWORD)v467)
      {
        *((_QWORD *)&v467 + 1) = v467;
        operator delete((void *)v467);
      }
      if (v466[4])
      {
        v466[5] = v466[4];
        operator delete((void *)v466[4]);
      }
      if (v466[1])
      {
        v466[2] = v466[1];
        operator delete((void *)v466[1]);
      }
      if (*(_QWORD *)&object[32])
      {
        *(_QWORD *)&object[40] = *(_QWORD *)&object[32];
        operator delete(*(void **)&object[32]);
      }
      if (*(_QWORD *)&object[8])
      {
        *(_QWORD *)&object[16] = *(_QWORD *)&object[8];
        operator delete(*(void **)&object[8]);
      }
      if ((_QWORD)v463)
      {
        *((_QWORD *)&v463 + 1) = v463;
        operator delete((void *)v463);
      }
      if ((_QWORD)v461)
      {
        *((_QWORD *)&v461 + 1) = v461;
        operator delete((void *)v461);
      }
      if ((_QWORD)v459)
      {
        *((_QWORD *)&v459 + 1) = v459;
        operator delete((void *)v459);
      }
      if ((_QWORD)v457)
      {
        *((_QWORD *)&v457 + 1) = v457;
        operator delete((void *)v457);
      }
      if (v444)
        operator delete(v444);
      if ((_QWORD)v442)
      {
        *((_QWORD *)&v442 + 1) = v442;
        operator delete((void *)v442);
      }
      if ((_QWORD)v440)
      {
        *((_QWORD *)&v440 + 1) = v440;
        operator delete((void *)v440);
      }
      if ((_QWORD)v438)
      {
        *((_QWORD *)&v438 + 1) = v438;
        operator delete((void *)v438);
      }
      if ((_QWORD)v436)
      {
        *((_QWORD *)&v436 + 1) = v436;
        operator delete((void *)v436);
      }
      if ((_QWORD)v434)
      {
        *((_QWORD *)&v434 + 1) = v434;
        operator delete((void *)v434);
      }
      if ((_QWORD)v432)
      {
        *((_QWORD *)&v432 + 1) = v432;
        operator delete((void *)v432);
      }
      if (v430)
        operator delete(v430);
      if ((_QWORD)v428)
      {
        *((_QWORD *)&v428 + 1) = v428;
        operator delete((void *)v428);
      }
      if (v426[0])
      {
        v426[1] = v426[0];
        operator delete(v426[0]);
      }
      if ((_QWORD)v424)
      {
        *((_QWORD *)&v424 + 1) = v424;
        operator delete((void *)v424);
      }
      if (v422[0])
      {
        v422[1] = v422[0];
        operator delete(v422[0]);
      }
      if ((_QWORD)v420)
      {
        *((_QWORD *)&v420 + 1) = v420;
        operator delete((void *)v420);
      }
      if (v418[0])
      {
        v418[1] = v418[0];
        operator delete(v418[0]);
      }
      if (++v109 == v401)
        goto LABEL_154;
    }
    v408 = v109;
    v141 = 0x4FCACE213F2B3885 * ((v136 - v133) >> 3);
    if ((unint64_t)v132 < *v400)
    {
      if (v136 == v132)
      {
        *(_QWORD *)v132 = v122;
        v157 = &v133[8 * ((v136 - v133) >> 3)];
        *(_OWORD *)(v157 + 8) = v137;
        v157 += 8;
        *((_QWORD *)v157 + 2) = 0;
        *(_OWORD *)v157 = *(_OWORD *)&object[8];
        *((_QWORD *)v157 + 2) = *(_QWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_OWORD *)&object[8] = v137;
        *((_QWORD *)v157 + 5) = 0;
        *(_OWORD *)(v157 + 24) = v137;
        *(_OWORD *)(v157 + 24) = *(_OWORD *)&object[32];
        *((_QWORD *)v157 + 5) = v466[0];
        v466[0] = 0;
        *(_OWORD *)&object[32] = v137;
        *((_QWORD *)v157 + 8) = 0;
        *((_OWORD *)v157 + 3) = v137;
        *((_OWORD *)v157 + 3) = *(_OWORD *)&v466[1];
        *((_QWORD *)v157 + 8) = v466[3];
        v466[3] = 0;
        *(_OWORD *)&v466[1] = v137;
        *((_QWORD *)v157 + 11) = 0;
        *(_OWORD *)(v157 + 72) = v137;
        *(_OWORD *)(v157 + 72) = *(_OWORD *)&v466[4];
        *((_QWORD *)v157 + 11) = v466[6];
        v466[6] = 0;
        *(_OWORD *)&v466[4] = v137;
        *((_QWORD *)v157 + 14) = 0;
        *((_OWORD *)v157 + 6) = v137;
        *((_OWORD *)v157 + 6) = v467;
        *((_QWORD *)v157 + 14) = v468;
        v468 = 0;
        v467 = v137;
        *((_QWORD *)v157 + 17) = 0;
        *(_OWORD *)(v157 + 120) = v137;
        *(_OWORD *)(v157 + 120) = v469;
        *((_QWORD *)v157 + 17) = v470;
        v470 = 0;
        v469 = v137;
        *((void **)v157 + 18) = v471[0];
        *((void **)v157 + 19) = v471[1];
        *((void **)v157 + 20) = v471[2];
        v471[2] = 0;
        *(_OWORD *)v471 = v137;
        *((_QWORD *)v157 + 23) = 0;
        *(_OWORD *)(v157 + 168) = v137;
        *(_OWORD *)(v157 + 168) = v472;
        *((_QWORD *)v157 + 23) = v473;
        v473 = 0;
        v472 = v137;
        *((_QWORD *)v157 + 26) = 0;
        *((_OWORD *)v157 + 12) = v137;
        *((_OWORD *)v157 + 12) = v474;
        *((_QWORD *)v157 + 26) = v475;
        v475 = 0;
        v474 = v137;
        *((_QWORD *)v157 + 29) = 0;
        *(_OWORD *)(v157 + 216) = v137;
        *(_OWORD *)(v157 + 216) = v476;
        *((_QWORD *)v157 + 29) = v477;
        v477 = 0;
        v476 = v137;
        *((_QWORD *)v157 + 32) = 0;
        *((_OWORD *)v157 + 15) = v137;
        *((_OWORD *)v157 + 15) = v478;
        *((_QWORD *)v157 + 32) = v479;
        v479 = 0;
        v478 = v137;
        *((_QWORD *)v157 + 35) = 0;
        *(_OWORD *)(v157 + 264) = v137;
        *(_OWORD *)(v157 + 264) = v480;
        *((_QWORD *)v157 + 35) = v481;
        v481 = 0;
        v480 = v137;
        *((_QWORD *)v157 + 38) = 0;
        *((_OWORD *)v157 + 18) = v137;
        *((_OWORD *)v157 + 18) = v482;
        *((_QWORD *)v157 + 38) = v483;
        v483 = 0;
        v482 = v137;
        *((void **)v157 + 39) = v484[0];
        *((void **)v157 + 40) = v484[1];
        *((void **)v157 + 41) = v484[2];
        v484[2] = 0;
        *(_OWORD *)v484 = v137;
        v158 = v485;
        v159 = v487;
        *((_OWORD *)v157 + 22) = v486;
        *((_OWORD *)v157 + 23) = v159;
        *((_OWORD *)v157 + 21) = v158;
        v160 = v488;
        v161 = v489;
        v162 = v491;
        *((_OWORD *)v157 + 26) = v490;
        *((_OWORD *)v157 + 27) = v162;
        *((_OWORD *)v157 + 24) = v160;
        *((_OWORD *)v157 + 25) = v161;
        v163 = v492;
        v164 = v493;
        v165 = v495;
        *((_OWORD *)v157 + 30) = v494;
        *((_OWORD *)v157 + 31) = v165;
        *((_OWORD *)v157 + 28) = v163;
        *((_OWORD *)v157 + 29) = v164;
        *((_QWORD *)v157 + 66) = 0;
        *((_OWORD *)v157 + 32) = v137;
        *((_OWORD *)v157 + 32) = v496;
        *((_QWORD *)v157 + 66) = v497;
        v497 = 0;
        v496 = v137;
        *((_QWORD *)v157 + 69) = 0;
        *(_OWORD *)(v157 + 536) = v137;
        *(_OWORD *)(v157 + 536) = v498;
        *((_QWORD *)v157 + 69) = v499;
        v499 = 0;
        v498 = v137;
        *((_QWORD *)v157 + 72) = 0;
        *((_OWORD *)v157 + 35) = v137;
        *((_OWORD *)v157 + 35) = v500;
        *((_QWORD *)v157 + 72) = v501;
        v501 = 0;
        v500 = v137;
        *((_QWORD *)v157 + 75) = 0;
        *(_OWORD *)(v157 + 584) = v137;
        *(_OWORD *)(v157 + 584) = v502;
        *((_QWORD *)v157 + 75) = v503;
        v502 = 0uLL;
        v503 = 0;
        v107[24] = v132 + 616;
      }
      else
      {
        v142 = v132 - 616;
        v143 = v107[24];
        v144 = v132 - 616;
        if ((unint64_t)v132 >= 0x268)
        {
          do
          {
            *(_QWORD *)v143 = *(_QWORD *)v144;
            *(_QWORD *)(v143 + 8) = 0;
            *(_OWORD *)(v143 + 16) = v137;
            *(_OWORD *)(v143 + 8) = *(_OWORD *)(v144 + 8);
            *(_QWORD *)(v143 + 24) = *((_QWORD *)v144 + 3);
            *((_QWORD *)v144 + 3) = 0;
            *(_OWORD *)(v144 + 8) = v137;
            *(_QWORD *)(v143 + 48) = 0;
            *(_OWORD *)(v143 + 32) = v137;
            *(_OWORD *)(v143 + 32) = *((_OWORD *)v144 + 2);
            *(_QWORD *)(v143 + 48) = *((_QWORD *)v144 + 6);
            *((_QWORD *)v144 + 6) = 0;
            *((_OWORD *)v144 + 2) = v137;
            *(_QWORD *)(v143 + 72) = 0;
            *(_OWORD *)(v143 + 56) = v137;
            *(_OWORD *)(v143 + 56) = *(_OWORD *)(v144 + 56);
            *(_QWORD *)(v143 + 72) = *((_QWORD *)v144 + 9);
            *((_QWORD *)v144 + 9) = 0;
            *(_OWORD *)(v144 + 56) = v137;
            *(_QWORD *)(v143 + 96) = 0;
            *(_OWORD *)(v143 + 80) = v137;
            *(_OWORD *)(v143 + 80) = *((_OWORD *)v144 + 5);
            *(_QWORD *)(v143 + 96) = *((_QWORD *)v144 + 12);
            *((_QWORD *)v144 + 12) = 0;
            *((_OWORD *)v144 + 5) = v137;
            *(_QWORD *)(v143 + 120) = 0;
            *(_OWORD *)(v143 + 104) = v137;
            *(_OWORD *)(v143 + 104) = *(_OWORD *)(v144 + 104);
            *(_QWORD *)(v143 + 120) = *((_QWORD *)v144 + 15);
            *((_QWORD *)v144 + 15) = 0;
            *(_OWORD *)(v144 + 104) = v137;
            *(_QWORD *)(v143 + 144) = 0;
            *(_OWORD *)(v143 + 128) = v137;
            *(_OWORD *)(v143 + 128) = *((_OWORD *)v144 + 8);
            *(_QWORD *)(v143 + 144) = *((_QWORD *)v144 + 18);
            *((_QWORD *)v144 + 18) = 0;
            *((_OWORD *)v144 + 8) = v137;
            *(_QWORD *)(v143 + 152) = *((_QWORD *)v144 + 19);
            *(_QWORD *)(v143 + 160) = *((_QWORD *)v144 + 20);
            *(_QWORD *)(v143 + 168) = *((_QWORD *)v144 + 21);
            *((_QWORD *)v144 + 21) = 0;
            *(_OWORD *)(v144 + 152) = v137;
            *(_QWORD *)(v143 + 192) = 0;
            *(_OWORD *)(v143 + 176) = v137;
            *(_OWORD *)(v143 + 176) = *((_OWORD *)v144 + 11);
            *(_QWORD *)(v143 + 192) = *((_QWORD *)v144 + 24);
            *((_QWORD *)v144 + 24) = 0;
            *((_OWORD *)v144 + 11) = v137;
            *(_QWORD *)(v143 + 216) = 0;
            *(_OWORD *)(v143 + 200) = v137;
            *(_OWORD *)(v143 + 200) = *(_OWORD *)(v144 + 200);
            *(_QWORD *)(v143 + 216) = *((_QWORD *)v144 + 27);
            *((_QWORD *)v144 + 27) = 0;
            *(_OWORD *)(v144 + 200) = v137;
            *(_QWORD *)(v143 + 240) = 0;
            *(_OWORD *)(v143 + 224) = v137;
            *(_OWORD *)(v143 + 224) = *((_OWORD *)v144 + 14);
            *(_QWORD *)(v143 + 240) = *((_QWORD *)v144 + 30);
            *((_QWORD *)v144 + 30) = 0;
            *((_OWORD *)v144 + 14) = v137;
            *(_QWORD *)(v143 + 264) = 0;
            *(_OWORD *)(v143 + 248) = v137;
            *(_OWORD *)(v143 + 248) = *(_OWORD *)(v144 + 248);
            *(_QWORD *)(v143 + 264) = *((_QWORD *)v144 + 33);
            *((_QWORD *)v144 + 33) = 0;
            *(_OWORD *)(v144 + 248) = v137;
            *(_QWORD *)(v143 + 288) = 0;
            *(_OWORD *)(v143 + 272) = v137;
            *(_OWORD *)(v143 + 272) = *((_OWORD *)v144 + 17);
            *(_QWORD *)(v143 + 288) = *((_QWORD *)v144 + 36);
            *((_QWORD *)v144 + 36) = 0;
            *((_OWORD *)v144 + 17) = v137;
            *(_QWORD *)(v143 + 312) = 0;
            *(_OWORD *)(v143 + 296) = v137;
            *(_QWORD *)(v143 + 296) = *((_QWORD *)v144 + 37);
            *(_QWORD *)(v143 + 304) = *((_QWORD *)v144 + 38);
            *(_QWORD *)(v143 + 312) = *((_QWORD *)v144 + 39);
            *((_QWORD *)v144 + 39) = 0;
            *(_OWORD *)(v144 + 296) = v137;
            *(_QWORD *)(v143 + 320) = *((_QWORD *)v144 + 40);
            *(_QWORD *)(v143 + 328) = *((_QWORD *)v144 + 41);
            *(_QWORD *)(v143 + 336) = *((_QWORD *)v144 + 42);
            *((_QWORD *)v144 + 42) = 0;
            *((_OWORD *)v144 + 20) = v137;
            v145 = *(_OWORD *)(v144 + 344);
            v146 = *(_OWORD *)(v144 + 376);
            *(_OWORD *)(v143 + 360) = *(_OWORD *)(v144 + 360);
            *(_OWORD *)(v143 + 376) = v146;
            *(_OWORD *)(v143 + 344) = v145;
            v147 = *(_OWORD *)(v144 + 392);
            v148 = *(_OWORD *)(v144 + 408);
            v149 = *(_OWORD *)(v144 + 440);
            *(_OWORD *)(v143 + 424) = *(_OWORD *)(v144 + 424);
            *(_OWORD *)(v143 + 440) = v149;
            *(_OWORD *)(v143 + 392) = v147;
            *(_OWORD *)(v143 + 408) = v148;
            v150 = *(_OWORD *)(v144 + 456);
            v151 = *(_OWORD *)(v144 + 472);
            v152 = *(_OWORD *)(v144 + 504);
            *(_OWORD *)(v143 + 488) = *(_OWORD *)(v144 + 488);
            *(_OWORD *)(v143 + 504) = v152;
            *(_OWORD *)(v143 + 456) = v150;
            *(_OWORD *)(v143 + 472) = v151;
            *(_QWORD *)(v143 + 536) = 0;
            *(_OWORD *)(v143 + 520) = v137;
            *(_QWORD *)(v143 + 520) = *((_QWORD *)v144 + 65);
            *(_QWORD *)(v143 + 528) = *((_QWORD *)v144 + 66);
            *(_QWORD *)(v143 + 536) = *((_QWORD *)v144 + 67);
            *((_QWORD *)v144 + 67) = 0;
            *(_OWORD *)(v144 + 520) = v137;
            *(_QWORD *)(v143 + 560) = 0;
            *(_OWORD *)(v143 + 544) = v137;
            *(_OWORD *)(v143 + 544) = *((_OWORD *)v144 + 34);
            *(_QWORD *)(v143 + 560) = *((_QWORD *)v144 + 70);
            *((_QWORD *)v144 + 70) = 0;
            *((_OWORD *)v144 + 34) = v137;
            *(_QWORD *)(v143 + 584) = 0;
            *(_OWORD *)(v143 + 568) = v137;
            *(_QWORD *)(v143 + 568) = *((_QWORD *)v144 + 71);
            *(_QWORD *)(v143 + 576) = *((_QWORD *)v144 + 72);
            *(_QWORD *)(v143 + 584) = *((_QWORD *)v144 + 73);
            *((_QWORD *)v144 + 73) = 0;
            *(_OWORD *)(v144 + 568) = v137;
            *(_QWORD *)(v143 + 608) = 0;
            *(_OWORD *)(v143 + 592) = v137;
            *(_OWORD *)(v143 + 592) = *((_OWORD *)v144 + 37);
            *(_QWORD *)(v143 + 608) = *((_QWORD *)v144 + 76);
            *((_QWORD *)v144 + 76) = 0;
            *((_OWORD *)v144 + 37) = v137;
            v143 += 616;
            v144 += 616;
          }
          while (v144 < v132);
        }
        v107[24] = v143;
        if (v132 != v136 + 616)
        {
          v153 = 8 * ((v132 - (v136 + 616)) >> 3);
          do
          {
            *(_QWORD *)v142 = *(_QWORD *)&v136[v153 - 616];
            sub_20F104424((uint64_t)(v142 + 8), (uint64_t)&v136[v153 - 608]);
            v142 -= 616;
            v153 -= 616;
          }
          while (v153);
        }
        *(_QWORD *)v136 = *(_QWORD *)object;
        sub_20F104424((uint64_t)&v133[8 * ((v136 - v133) >> 3) + 8], (uint64_t)&object[8]);
        v107 = (_QWORD *)v415;
      }
      v109 = v408;
LABEL_266:
      v140 = (void *)v502;
      goto LABEL_267;
    }
    v154 = 0x4FCACE213F2B3885 * (v134 >> 3) + 1;
    if (v154 > 0x6A63BD81A98EF6)
      sub_20E867F44();
    if (0x9F959C427E56710ALL * ((uint64_t)(*v400 - (_QWORD)v133) >> 3) > v154)
      v154 = 0x9F959C427E56710ALL * ((uint64_t)(*v400 - (_QWORD)v133) >> 3);
    if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(*v400 - (_QWORD)v133) >> 3)) >= 0x3531DEC0D4C77BLL)
      v155 = 0x6A63BD81A98EF6;
    else
      v155 = v154;
    v509 = v415 + 200;
    if (v155)
    {
      if (v155 > 0x6A63BD81A98EF6)
        sub_20E877A38();
      v156 = (char *)operator new(616 * v155);
      v137 = 0uLL;
    }
    else
    {
      v156 = 0;
    }
    v166 = &v156[8 * ((v136 - v133) >> 3)];
    *(_QWORD *)&v506 = v156;
    *((_QWORD *)&v506 + 1) = v166;
    v507 = v166;
    v508 = &v156[616 * v155];
    v13 = v141 == v155;
    v107 = (_QWORD *)v415;
    if (v13)
    {
      if (v136 - v133 < 1)
      {
        if (v133 == v136)
          v168 = 1;
        else
          v168 = 0x9F959C427E56710ALL * ((v136 - v133) >> 3);
        if (v168 > 0x6A63BD81A98EF6)
          sub_20E877A38();
        v169 = (char *)operator new(616 * v168);
        v166 = &v169[616 * (v168 >> 2)];
        *(_QWORD *)&v506 = v169;
        *((_QWORD *)&v506 + 1) = v166;
        v508 = &v169[616 * v168];
        if (v156)
          operator delete(v156);
        v107 = (_QWORD *)v415;
        v137 = 0uLL;
      }
      else
      {
        v167 = v141 + 2;
        if (v141 >= -1)
          v167 = v141 + 1;
        v166 -= 616 * (v167 >> 1);
        *((_QWORD *)&v506 + 1) = v166;
      }
    }
    *((_QWORD *)v166 + 2) = 0;
    *((_QWORD *)v166 + 3) = 0;
    *(_OWORD *)(v166 + 8) = *(_OWORD *)&object[8];
    v170 = *(_QWORD *)&object[24];
    *(_QWORD *)v166 = *(_QWORD *)object;
    *((_QWORD *)v166 + 3) = v170;
    memset(&object[8], 0, 24);
    *((_QWORD *)v166 + 5) = 0;
    *((_QWORD *)v166 + 6) = 0;
    *((_OWORD *)v166 + 2) = *(_OWORD *)&object[32];
    *((_QWORD *)v166 + 6) = v466[0];
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[40] = 0;
    v466[0] = 0;
    *((_QWORD *)v166 + 8) = 0;
    *((_QWORD *)v166 + 9) = 0;
    *(_OWORD *)(v166 + 56) = *(_OWORD *)&v466[1];
    *((_QWORD *)v166 + 9) = v466[3];
    memset(&v466[1], 0, 24);
    *((_QWORD *)v166 + 11) = 0;
    *((_QWORD *)v166 + 12) = 0;
    *((_OWORD *)v166 + 5) = *(_OWORD *)&v466[4];
    *((_QWORD *)v166 + 12) = v466[6];
    memset(&v466[4], 0, 24);
    *((_QWORD *)v166 + 14) = 0;
    *((_QWORD *)v166 + 15) = 0;
    *(_OWORD *)(v166 + 104) = v467;
    *((_QWORD *)v166 + 15) = v468;
    v467 = 0uLL;
    v468 = 0;
    *((_QWORD *)v166 + 17) = 0;
    *((_QWORD *)v166 + 18) = 0;
    *((_OWORD *)v166 + 8) = v469;
    *((_QWORD *)v166 + 18) = v470;
    v469 = 0uLL;
    v470 = 0;
    *((void **)v166 + 19) = v471[0];
    *((void **)v166 + 20) = v471[1];
    *((void **)v166 + 21) = v471[2];
    memset(v471, 0, sizeof(v471));
    *((_QWORD *)v166 + 23) = 0;
    *((_QWORD *)v166 + 24) = 0;
    *((_OWORD *)v166 + 11) = v472;
    *((_QWORD *)v166 + 24) = v473;
    v472 = 0uLL;
    v473 = 0;
    *((_QWORD *)v166 + 26) = 0;
    *((_QWORD *)v166 + 27) = 0;
    *(_OWORD *)(v166 + 200) = v474;
    *((_QWORD *)v166 + 27) = v475;
    v474 = 0uLL;
    v475 = 0;
    *((_QWORD *)v166 + 29) = 0;
    *((_QWORD *)v166 + 30) = 0;
    *((_OWORD *)v166 + 14) = v476;
    *((_QWORD *)v166 + 30) = v477;
    v476 = 0uLL;
    v477 = 0;
    *((_QWORD *)v166 + 32) = 0;
    *((_QWORD *)v166 + 33) = 0;
    *(_OWORD *)(v166 + 248) = v478;
    *((_QWORD *)v166 + 33) = v479;
    v478 = 0uLL;
    v479 = 0;
    *((_QWORD *)v166 + 35) = 0;
    *((_QWORD *)v166 + 36) = 0;
    *((_OWORD *)v166 + 17) = v480;
    *((_QWORD *)v166 + 36) = v481;
    v480 = 0uLL;
    v481 = 0;
    *((_QWORD *)v166 + 38) = 0;
    *((_QWORD *)v166 + 39) = 0;
    *(_OWORD *)(v166 + 296) = v482;
    *((_QWORD *)v166 + 39) = v483;
    v482 = 0uLL;
    v483 = 0;
    *((void **)v166 + 40) = v484[0];
    *((void **)v166 + 41) = v484[1];
    *((void **)v166 + 42) = v484[2];
    memset(v484, 0, sizeof(v484));
    v171 = v486;
    *(_OWORD *)(v166 + 344) = v485;
    *(_OWORD *)(v166 + 360) = v171;
    v172 = v487;
    v173 = v488;
    v174 = v490;
    *(_OWORD *)(v166 + 408) = v489;
    *(_OWORD *)(v166 + 424) = v174;
    *(_OWORD *)(v166 + 376) = v172;
    *(_OWORD *)(v166 + 392) = v173;
    v175 = v491;
    v176 = v492;
    v177 = v495;
    *(_OWORD *)(v166 + 488) = v494;
    *(_OWORD *)(v166 + 504) = v177;
    v178 = v493;
    *(_OWORD *)(v166 + 456) = v176;
    *(_OWORD *)(v166 + 472) = v178;
    *(_OWORD *)(v166 + 440) = v175;
    *(_OWORD *)(v166 + 520) = v496;
    *((_QWORD *)v166 + 67) = v497;
    v496 = 0uLL;
    v497 = 0;
    *((_OWORD *)v166 + 34) = v498;
    *((_QWORD *)v166 + 70) = v499;
    v498 = 0uLL;
    v499 = 0;
    *((_QWORD *)v166 + 73) = 0;
    *(_OWORD *)(v166 + 568) = v500;
    *((_QWORD *)v166 + 73) = v501;
    v500 = 0uLL;
    v501 = 0;
    *((_QWORD *)v166 + 76) = 0;
    *((_OWORD *)v166 + 37) = v502;
    *((_QWORD *)v166 + 76) = v503;
    v502 = 0uLL;
    v503 = 0;
    v179 = v166 + 616;
    v507 = v166 + 616;
    v180 = (char *)v107[23];
    if (v180 == v136)
    {
      v109 = v408;
      *((_QWORD *)&v506 + 1) = v166;
      v221 = (char *)v107[24];
      if (v221 == v136)
      {
LABEL_225:
        v230 = (char *)v107[23];
        v107[23] = v166;
        v107[24] = v179;
        v107[25] = v508;
        while (v136 != v230)
        {
          v231 = (void *)*((_QWORD *)v136 - 3);
          if (v231)
          {
            *((_QWORD *)v136 - 2) = v231;
            operator delete(v231);
          }
          v232 = (void *)*((_QWORD *)v136 - 6);
          if (v232)
          {
            *((_QWORD *)v136 - 5) = v232;
            operator delete(v232);
          }
          v233 = (void *)*((_QWORD *)v136 - 9);
          if (v233)
          {
            *((_QWORD *)v136 - 8) = v233;
            operator delete(v233);
          }
          v234 = (void *)*((_QWORD *)v136 - 12);
          if (v234)
          {
            *((_QWORD *)v136 - 11) = v234;
            operator delete(v234);
          }
          v235 = (void *)*((_QWORD *)v136 - 37);
          if (v235)
            operator delete(v235);
          v236 = (void *)*((_QWORD *)v136 - 40);
          if (v236)
          {
            *((_QWORD *)v136 - 39) = v236;
            operator delete(v236);
          }
          v237 = (void *)*((_QWORD *)v136 - 43);
          if (v237)
          {
            *((_QWORD *)v136 - 42) = v237;
            operator delete(v237);
          }
          v238 = (void *)*((_QWORD *)v136 - 46);
          if (v238)
          {
            *((_QWORD *)v136 - 45) = v238;
            operator delete(v238);
          }
          v239 = (void *)*((_QWORD *)v136 - 49);
          if (v239)
          {
            *((_QWORD *)v136 - 48) = v239;
            operator delete(v239);
          }
          v240 = (void *)*((_QWORD *)v136 - 52);
          if (v240)
          {
            *((_QWORD *)v136 - 51) = v240;
            operator delete(v240);
          }
          v241 = (void *)*((_QWORD *)v136 - 55);
          if (v241)
          {
            *((_QWORD *)v136 - 54) = v241;
            operator delete(v241);
          }
          v242 = (void *)*((_QWORD *)v136 - 58);
          if (v242)
            operator delete(v242);
          v243 = (void *)*((_QWORD *)v136 - 61);
          if (v243)
          {
            *((_QWORD *)v136 - 60) = v243;
            operator delete(v243);
          }
          v244 = (void *)*((_QWORD *)v136 - 64);
          if (v244)
          {
            *((_QWORD *)v136 - 63) = v244;
            operator delete(v244);
          }
          v245 = (void *)*((_QWORD *)v136 - 67);
          if (v245)
          {
            *((_QWORD *)v136 - 66) = v245;
            operator delete(v245);
          }
          v246 = (void *)*((_QWORD *)v136 - 70);
          if (v246)
          {
            *((_QWORD *)v136 - 69) = v246;
            operator delete(v246);
          }
          v247 = (void *)*((_QWORD *)v136 - 73);
          if (v247)
          {
            *((_QWORD *)v136 - 72) = v247;
            operator delete(v247);
          }
          v248 = (void *)*((_QWORD *)v136 - 76);
          if (v248)
          {
            *((_QWORD *)v136 - 75) = v248;
            operator delete(v248);
          }
          v136 -= 616;
        }
        if (v230)
          operator delete(v230);
        goto LABEL_266;
      }
    }
    else
    {
      v181 = 0;
      v109 = v408;
      do
      {
        v182 = &v166[v181];
        v183 = &v136[v181];
        v184 = *(_QWORD *)&v136[v181 - 616];
        v185 = (uint64_t)&v166[v181 - 608];
        v186 = (uint64_t)&v136[v181 - 608];
        *(_QWORD *)v185 = 0;
        *(_QWORD *)&v166[v181 - 616] = v184;
        *(_OWORD *)(v185 + 8) = v137;
        *(_OWORD *)v185 = *(_OWORD *)v186;
        *(_QWORD *)&v166[v181 - 592] = *(_QWORD *)&v136[v181 - 592];
        *(_QWORD *)(v186 + 16) = 0;
        *(_OWORD *)v186 = v137;
        v187 = (uint64_t)&v166[v181 - 584];
        v188 = (uint64_t)&v136[v181 - 584];
        *(_QWORD *)(v187 + 16) = 0;
        *(_OWORD *)v187 = v137;
        *(_OWORD *)v187 = *(_OWORD *)v188;
        *(_QWORD *)&v166[v181 - 568] = *(_QWORD *)&v136[v181 - 568];
        *(_QWORD *)(v188 + 16) = 0;
        *(_OWORD *)v188 = v137;
        v189 = (uint64_t)&v166[v181 - 560];
        v190 = (uint64_t)&v136[v181 - 560];
        *(_QWORD *)(v189 + 16) = 0;
        *(_OWORD *)v189 = v137;
        *(_OWORD *)v189 = *(_OWORD *)v190;
        *(_QWORD *)&v166[v181 - 544] = *(_QWORD *)&v136[v181 - 544];
        *(_QWORD *)(v190 + 16) = 0;
        *(_OWORD *)v190 = v137;
        v191 = (uint64_t)&v166[v181 - 536];
        v192 = (uint64_t)&v136[v181 - 536];
        *(_QWORD *)(v191 + 16) = 0;
        *(_OWORD *)v191 = v137;
        *(_OWORD *)v191 = *(_OWORD *)v192;
        *(_QWORD *)&v166[v181 - 520] = *(_QWORD *)&v136[v181 - 520];
        *(_QWORD *)(v192 + 16) = 0;
        v193 = &v166[v181 - 512];
        v194 = (uint64_t)&v136[v181 - 512];
        *(_OWORD *)v192 = v137;
        *(_QWORD *)&v166[v181 - 504] = 0;
        *(_QWORD *)v193 = 0;
        *((_QWORD *)v193 + 2) = 0;
        *(_OWORD *)v193 = *(_OWORD *)v194;
        *(_QWORD *)&v166[v181 - 496] = *(_QWORD *)&v136[v181 - 496];
        *(_QWORD *)&v136[v181 - 504] = 0;
        *(_QWORD *)v194 = 0;
        *(_QWORD *)(v194 + 16) = 0;
        v195 = &v166[v181 - 488];
        v196 = (uint64_t)&v136[v181 - 488];
        *(_QWORD *)&v166[v181 - 480] = 0;
        *(_QWORD *)v195 = 0;
        *((_QWORD *)v195 + 2) = 0;
        *(_OWORD *)v195 = *(_OWORD *)v196;
        *(_QWORD *)&v166[v181 - 472] = *(_QWORD *)&v136[v181 - 472];
        *(_QWORD *)(v196 + 16) = 0;
        *(_QWORD *)&v136[v181 - 480] = 0;
        *(_QWORD *)v196 = 0;
        v197 = &v136[v181 - 464];
        *(_QWORD *)&v166[v181 - 464] = *(_QWORD *)v197;
        v198 = &v136[v181 - 456];
        *(_QWORD *)&v166[v181 - 456] = *(_QWORD *)v198;
        *(_QWORD *)&v166[v181 - 448] = *(_QWORD *)&v136[v181 - 448];
        *(_QWORD *)v198 = 0;
        *(_QWORD *)v197 = 0;
        *((_QWORD *)v197 + 2) = 0;
        v199 = &v166[v181 - 440];
        v200 = (uint64_t)&v136[v181 - 440];
        *(_QWORD *)&v166[v181 - 432] = 0;
        *(_QWORD *)v199 = 0;
        *((_QWORD *)v199 + 2) = 0;
        *(_OWORD *)v199 = *(_OWORD *)v200;
        *(_QWORD *)&v166[v181 - 424] = *(_QWORD *)&v136[v181 - 424];
        *(_QWORD *)&v136[v181 - 432] = 0;
        *(_QWORD *)v200 = 0;
        *(_QWORD *)(v200 + 16) = 0;
        v201 = &v166[v181 - 416];
        v202 = (uint64_t)&v136[v181 - 416];
        *(_QWORD *)&v166[v181 - 408] = 0;
        *(_QWORD *)v201 = 0;
        *((_QWORD *)v201 + 2) = 0;
        *(_OWORD *)v201 = *(_OWORD *)v202;
        *(_QWORD *)&v166[v181 - 400] = *(_QWORD *)&v136[v181 - 400];
        *(_QWORD *)&v136[v181 - 408] = 0;
        *(_QWORD *)v202 = 0;
        v203 = &v166[v181 - 392];
        v204 = (uint64_t)&v136[v181 - 392];
        *(_QWORD *)(v202 + 16) = 0;
        *(_QWORD *)&v166[v181 - 384] = 0;
        *(_QWORD *)v203 = 0;
        *((_QWORD *)v203 + 2) = 0;
        *(_OWORD *)v203 = *(_OWORD *)v204;
        *(_QWORD *)&v166[v181 - 376] = *(_QWORD *)&v136[v181 - 376];
        *(_QWORD *)&v136[v181 - 384] = 0;
        *(_QWORD *)v204 = 0;
        *(_QWORD *)(v204 + 16) = 0;
        v205 = &v166[v181 - 368];
        v206 = (uint64_t)&v136[v181 - 368];
        *(_QWORD *)&v166[v181 - 360] = 0;
        *(_QWORD *)v205 = 0;
        *((_QWORD *)v205 + 2) = 0;
        *(_OWORD *)v205 = *(_OWORD *)v206;
        *(_QWORD *)&v166[v181 - 352] = *(_QWORD *)&v136[v181 - 352];
        *(_QWORD *)&v136[v181 - 360] = 0;
        *(_QWORD *)v206 = 0;
        *(_QWORD *)(v206 + 16) = 0;
        v207 = &v166[v181 - 344];
        v208 = (uint64_t)&v136[v181 - 344];
        *(_QWORD *)&v166[v181 - 336] = 0;
        *(_QWORD *)v207 = 0;
        *((_QWORD *)v207 + 2) = 0;
        *(_OWORD *)v207 = *(_OWORD *)v208;
        *(_QWORD *)&v166[v181 - 328] = *(_QWORD *)&v136[v181 - 328];
        *(_QWORD *)&v136[v181 - 336] = 0;
        *(_QWORD *)v208 = 0;
        v209 = &v166[v181 - 320];
        v210 = (uint64_t)&v136[v181 - 320];
        *(_QWORD *)(v208 + 16) = 0;
        *(_QWORD *)&v166[v181 - 312] = 0;
        *(_QWORD *)v209 = 0;
        *((_QWORD *)v209 + 2) = 0;
        *(_OWORD *)v209 = *(_OWORD *)v210;
        *(_QWORD *)&v166[v181 - 304] = *(_QWORD *)&v136[v181 - 304];
        *(_QWORD *)(v210 + 16) = 0;
        *(_QWORD *)&v136[v181 - 312] = 0;
        *(_QWORD *)v210 = 0;
        v211 = &v136[v181 - 296];
        *(_QWORD *)&v166[v181 - 296] = *(_QWORD *)v211;
        v212 = &v136[v181 - 288];
        *(_QWORD *)&v166[v181 - 288] = *(_QWORD *)v212;
        *(_QWORD *)&v166[v181 - 280] = *(_QWORD *)&v136[v181 - 280];
        *((_QWORD *)v211 + 2) = 0;
        *(_QWORD *)v212 = 0;
        *(_QWORD *)v211 = 0;
        v213 = *(_OWORD *)&v136[v181 - 272];
        v214 = *(_OWORD *)&v136[v181 - 240];
        *((_OWORD *)v182 - 16) = *(_OWORD *)&v136[v181 - 256];
        *((_OWORD *)v182 - 15) = v214;
        *(_OWORD *)&v166[v181 - 272] = v213;
        v215 = *(_OWORD *)&v136[v181 - 224];
        v216 = *(_OWORD *)&v136[v181 - 208];
        v217 = *(_OWORD *)&v136[v181 - 176];
        *((_OWORD *)v182 - 12) = *(_OWORD *)&v136[v181 - 192];
        *((_OWORD *)v182 - 11) = v217;
        *((_OWORD *)v182 - 14) = v215;
        *((_OWORD *)v182 - 13) = v216;
        v218 = *(_OWORD *)&v136[v181 - 160];
        v219 = *(_OWORD *)&v136[v181 - 144];
        v220 = *(_OWORD *)&v136[v181 - 112];
        *((_OWORD *)v182 - 8) = *(_OWORD *)&v136[v181 - 128];
        *((_OWORD *)v182 - 7) = v220;
        *((_QWORD *)v182 - 11) = 0;
        *((_QWORD *)v182 - 10) = 0;
        *((_OWORD *)v182 - 10) = v218;
        *((_OWORD *)v182 - 9) = v219;
        *((_QWORD *)v182 - 12) = 0;
        *((_OWORD *)v182 - 6) = *(_OWORD *)&v136[v181 - 96];
        *((_QWORD *)v182 - 10) = *(_QWORD *)&v136[v181 - 80];
        *((_QWORD *)v183 - 12) = 0;
        *((_QWORD *)v183 - 11) = 0;
        *((_QWORD *)v183 - 10) = 0;
        *((_QWORD *)v182 - 9) = 0;
        *((_QWORD *)v182 - 8) = 0;
        *((_QWORD *)v182 - 7) = 0;
        *(_OWORD *)(v182 - 72) = *(_OWORD *)&v136[v181 - 72];
        *((_QWORD *)v182 - 7) = *(_QWORD *)&v136[v181 - 56];
        *((_QWORD *)v183 - 9) = 0;
        *((_QWORD *)v183 - 8) = 0;
        *((_QWORD *)v183 - 7) = 0;
        *((_QWORD *)v182 - 6) = 0;
        *((_QWORD *)v182 - 5) = 0;
        *((_QWORD *)v182 - 4) = 0;
        *((_OWORD *)v182 - 3) = *(_OWORD *)&v136[v181 - 48];
        *((_QWORD *)v182 - 4) = *(_QWORD *)&v136[v181 - 32];
        *((_QWORD *)v183 - 6) = 0;
        *((_QWORD *)v183 - 5) = 0;
        *((_QWORD *)v183 - 4) = 0;
        *((_QWORD *)v182 - 3) = 0;
        *((_QWORD *)v182 - 2) = 0;
        *((_QWORD *)v182 - 1) = 0;
        *(_OWORD *)(v182 - 24) = *(_OWORD *)&v136[v181 - 24];
        *((_QWORD *)v182 - 1) = *(_QWORD *)&v136[v181 - 8];
        *((_QWORD *)v183 - 3) = 0;
        *((_QWORD *)v183 - 2) = 0;
        *((_QWORD *)v183 - 1) = 0;
        v181 -= 616;
      }
      while (&v136[v181] != v180);
      v179 = v507;
      v166 += v181;
      *((_QWORD *)&v506 + 1) = v166;
      v221 = (char *)v107[24];
      if (v221 == v136)
        goto LABEL_225;
    }
    do
    {
      *(_QWORD *)v179 = *(_QWORD *)v136;
      *((_QWORD *)v179 + 1) = 0;
      *((_OWORD *)v179 + 1) = v137;
      *(_OWORD *)(v179 + 8) = *(_OWORD *)(v136 + 8);
      *((_QWORD *)v179 + 3) = *((_QWORD *)v136 + 3);
      *((_QWORD *)v136 + 3) = 0;
      *(_OWORD *)(v136 + 8) = v137;
      *((_QWORD *)v179 + 6) = 0;
      *((_OWORD *)v179 + 2) = v137;
      *((_OWORD *)v179 + 2) = *((_OWORD *)v136 + 2);
      *((_QWORD *)v179 + 6) = *((_QWORD *)v136 + 6);
      *((_QWORD *)v136 + 6) = 0;
      *((_OWORD *)v136 + 2) = v137;
      *((_QWORD *)v179 + 9) = 0;
      *(_OWORD *)(v179 + 56) = v137;
      *(_OWORD *)(v179 + 56) = *(_OWORD *)(v136 + 56);
      *((_QWORD *)v179 + 9) = *((_QWORD *)v136 + 9);
      *((_QWORD *)v136 + 9) = 0;
      *(_OWORD *)(v136 + 56) = v137;
      *((_QWORD *)v179 + 12) = 0;
      *((_OWORD *)v179 + 5) = v137;
      *((_OWORD *)v179 + 5) = *((_OWORD *)v136 + 5);
      *((_QWORD *)v179 + 12) = *((_QWORD *)v136 + 12);
      *((_QWORD *)v136 + 12) = 0;
      *((_OWORD *)v136 + 5) = v137;
      *((_QWORD *)v179 + 15) = 0;
      *(_OWORD *)(v179 + 104) = v137;
      *(_OWORD *)(v179 + 104) = *(_OWORD *)(v136 + 104);
      *((_QWORD *)v179 + 15) = *((_QWORD *)v136 + 15);
      *((_QWORD *)v136 + 15) = 0;
      *(_OWORD *)(v136 + 104) = v137;
      *((_QWORD *)v179 + 18) = 0;
      *((_OWORD *)v179 + 8) = v137;
      *((_OWORD *)v179 + 8) = *((_OWORD *)v136 + 8);
      *((_QWORD *)v179 + 18) = *((_QWORD *)v136 + 18);
      *((_QWORD *)v136 + 18) = 0;
      *((_OWORD *)v136 + 8) = v137;
      *((_QWORD *)v179 + 19) = *((_QWORD *)v136 + 19);
      *((_QWORD *)v179 + 20) = *((_QWORD *)v136 + 20);
      *((_QWORD *)v179 + 21) = *((_QWORD *)v136 + 21);
      *((_QWORD *)v136 + 21) = 0;
      *(_OWORD *)(v136 + 152) = v137;
      *((_QWORD *)v179 + 24) = 0;
      *((_OWORD *)v179 + 11) = v137;
      *((_OWORD *)v179 + 11) = *((_OWORD *)v136 + 11);
      *((_QWORD *)v179 + 24) = *((_QWORD *)v136 + 24);
      *((_QWORD *)v136 + 24) = 0;
      *((_OWORD *)v136 + 11) = v137;
      *((_QWORD *)v179 + 27) = 0;
      *(_OWORD *)(v179 + 200) = v137;
      *(_OWORD *)(v179 + 200) = *(_OWORD *)(v136 + 200);
      *((_QWORD *)v179 + 27) = *((_QWORD *)v136 + 27);
      *((_QWORD *)v136 + 27) = 0;
      *(_OWORD *)(v136 + 200) = v137;
      *((_QWORD *)v179 + 30) = 0;
      *((_OWORD *)v179 + 14) = v137;
      *((_OWORD *)v179 + 14) = *((_OWORD *)v136 + 14);
      *((_QWORD *)v179 + 30) = *((_QWORD *)v136 + 30);
      *((_QWORD *)v136 + 30) = 0;
      *((_OWORD *)v136 + 14) = v137;
      *((_QWORD *)v179 + 33) = 0;
      *(_OWORD *)(v179 + 248) = v137;
      *(_OWORD *)(v179 + 248) = *(_OWORD *)(v136 + 248);
      *((_QWORD *)v179 + 33) = *((_QWORD *)v136 + 33);
      *((_QWORD *)v136 + 33) = 0;
      *(_OWORD *)(v136 + 248) = v137;
      *((_QWORD *)v179 + 36) = 0;
      *((_OWORD *)v179 + 17) = v137;
      *((_OWORD *)v179 + 17) = *((_OWORD *)v136 + 17);
      *((_QWORD *)v179 + 36) = *((_QWORD *)v136 + 36);
      *((_QWORD *)v136 + 36) = 0;
      *((_OWORD *)v136 + 17) = v137;
      *((_QWORD *)v179 + 39) = 0;
      *(_OWORD *)(v179 + 296) = v137;
      *((_QWORD *)v179 + 37) = *((_QWORD *)v136 + 37);
      *((_QWORD *)v179 + 38) = *((_QWORD *)v136 + 38);
      *((_QWORD *)v179 + 39) = *((_QWORD *)v136 + 39);
      *((_QWORD *)v136 + 39) = 0;
      *(_OWORD *)(v136 + 296) = v137;
      *((_QWORD *)v179 + 40) = *((_QWORD *)v136 + 40);
      *((_QWORD *)v179 + 41) = *((_QWORD *)v136 + 41);
      *((_QWORD *)v179 + 42) = *((_QWORD *)v136 + 42);
      *((_QWORD *)v136 + 42) = 0;
      *((_OWORD *)v136 + 20) = v137;
      v222 = *(_OWORD *)(v136 + 344);
      v223 = *(_OWORD *)(v136 + 376);
      *(_OWORD *)(v179 + 360) = *(_OWORD *)(v136 + 360);
      *(_OWORD *)(v179 + 376) = v223;
      *(_OWORD *)(v179 + 344) = v222;
      v224 = *(_OWORD *)(v136 + 392);
      v225 = *(_OWORD *)(v136 + 408);
      v226 = *(_OWORD *)(v136 + 440);
      *(_OWORD *)(v179 + 424) = *(_OWORD *)(v136 + 424);
      *(_OWORD *)(v179 + 440) = v226;
      *(_OWORD *)(v179 + 392) = v224;
      *(_OWORD *)(v179 + 408) = v225;
      v227 = *(_OWORD *)(v136 + 456);
      v228 = *(_OWORD *)(v136 + 472);
      v229 = *(_OWORD *)(v136 + 504);
      *(_OWORD *)(v179 + 488) = *(_OWORD *)(v136 + 488);
      *(_OWORD *)(v179 + 504) = v229;
      *(_OWORD *)(v179 + 456) = v227;
      *(_OWORD *)(v179 + 472) = v228;
      *((_QWORD *)v179 + 67) = 0;
      *(_OWORD *)(v179 + 520) = v137;
      *((_QWORD *)v179 + 65) = *((_QWORD *)v136 + 65);
      *((_QWORD *)v179 + 66) = *((_QWORD *)v136 + 66);
      *((_QWORD *)v179 + 67) = *((_QWORD *)v136 + 67);
      *((_QWORD *)v136 + 67) = 0;
      *(_OWORD *)(v136 + 520) = v137;
      *((_QWORD *)v179 + 70) = 0;
      *((_OWORD *)v179 + 34) = v137;
      *((_OWORD *)v179 + 34) = *((_OWORD *)v136 + 34);
      *((_QWORD *)v179 + 70) = *((_QWORD *)v136 + 70);
      *((_QWORD *)v136 + 70) = 0;
      *((_OWORD *)v136 + 34) = v137;
      *((_QWORD *)v179 + 73) = 0;
      *(_OWORD *)(v179 + 568) = v137;
      *((_QWORD *)v179 + 71) = *((_QWORD *)v136 + 71);
      *((_QWORD *)v179 + 72) = *((_QWORD *)v136 + 72);
      *((_QWORD *)v179 + 73) = *((_QWORD *)v136 + 73);
      *((_QWORD *)v136 + 73) = 0;
      *(_OWORD *)(v136 + 568) = v137;
      *((_QWORD *)v179 + 76) = 0;
      *((_OWORD *)v179 + 37) = v137;
      *((_OWORD *)v179 + 37) = *((_OWORD *)v136 + 37);
      *((_QWORD *)v179 + 76) = *((_QWORD *)v136 + 76);
      *((_QWORD *)v136 + 76) = 0;
      *((_OWORD *)v136 + 37) = v137;
      v179 += 616;
      v136 += 616;
    }
    while (v136 != v221);
    v166 = (char *)*((_QWORD *)&v506 + 1);
    v136 = (char *)v107[24];
    goto LABEL_225;
  }
  v249 = *a3;
LABEL_345:
  v506 = 0uLL;
  v507 = 0;
  memset(object, 0, 24);
  v250 = (char *)v108 - (char *)v249;
  if (v108 == v249)
  {
    v252 = 0;
    v251 = 0uLL;
  }
  else
  {
    if (v250 < 0)
      sub_20E867F44();
    *(_QWORD *)object = operator new((unint64_t)v250 >> 1);
    *(_QWORD *)&object[8] = *(_QWORD *)object;
    *(_QWORD *)&object[16] = *(_QWORD *)object + 4 * (v250 >> 3);
    v418[0] = object;
    do
    {
      LODWORD(v505) = -991146299 * ((*(_QWORD *)(*v249 + 16) - *(_QWORD *)(*v249 + 8)) >> 7);
      sub_20EA9AB98((uint64_t *)v418, &v505);
      ++v249;
    }
    while (v249 != v108);
    v251 = *(_OWORD *)object;
    v252 = *(char **)&object[16];
  }
  v506 = v251;
  v507 = v252;
  v253 = operator new();
  sub_20FD39B74(v253, 1, (uint64_t *)&v506);
  v254 = *(_QWORD *)(v415 + 480);
  *(_QWORD *)(v415 + 480) = v253;
  if (v254)
  {
    v255 = sub_20F103270(v254);
    MEMORY[0x212BC6398](v255, 0x10B0C40C824C1ACLL);
  }
  v256 = *a2;
  v257 = a2[2];
  *(_OWORD *)(v415 + 328) = a2[1];
  *(_OWORD *)(v415 + 344) = v257;
  *(_OWORD *)(v415 + 312) = v256;
  v258 = a2[3];
  v259 = a2[4];
  v260 = a2[6];
  *(_OWORD *)(v415 + 392) = a2[5];
  *(_OWORD *)(v415 + 408) = v260;
  *(_OWORD *)(v415 + 360) = v258;
  *(_OWORD *)(v415 + 376) = v259;
  v261 = a2[7];
  v262 = a2[8];
  v263 = a2[9];
  *(_QWORD *)(v415 + 472) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(v415 + 440) = v262;
  *(_OWORD *)(v415 + 456) = v263;
  *(_OWORD *)(v415 + 424) = v261;
  v264 = *a5;
  v265 = a5[2];
  *(_OWORD *)(v415 + 1192) = a5[1];
  *(_OWORD *)(v415 + 1208) = v265;
  *(_OWORD *)(v415 + 1176) = v264;
  v266 = a5[3];
  v267 = a5[4];
  v268 = a5[5];
  *(_BYTE *)(v415 + 1272) = *((_BYTE *)a5 + 96);
  *(_OWORD *)(v415 + 1240) = v267;
  *(_OWORD *)(v415 + 1256) = v268;
  *(_OWORD *)(v415 + 1224) = v266;
  if (*(_BYTE *)(v415 + 984))
  {
    v269 = (uint64_t *)(v415 + 1736);
    if (*(_QWORD *)(v415 + 1760))
    {
      v270 = *(_QWORD **)(v415 + 1752);
      if (v270)
      {
        do
        {
          v318 = (_QWORD *)*v270;
          v319 = v270[3];
          v270[3] = 0;
          if (v319)
            MEMORY[0x212BC6398](v319, 0x1000C403B260825);
          operator delete(v270);
          v270 = v318;
        }
        while (v318);
      }
      *(_QWORD *)(v415 + 1752) = 0;
      v271 = *(_QWORD *)(v415 + 1744);
      if (v271)
      {
        for (j = 0; j != v271; ++j)
          *(_QWORD *)(*v269 + 8 * j) = 0;
      }
      *(_QWORD *)(v415 + 1760) = 0;
    }
    v273 = *v396;
    v403 = v396[1];
    if (*v396 != v403)
    {
      v414 = (_QWORD *)(v415 + 1752);
      while (1)
      {
        v406 = v273;
        v274 = (unsigned int *)*v273;
        v275 = *(_DWORD *)*v273;
        if (v275 >= 0x10000
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v411 = -991146299 * ((*((_QWORD *)v274 + 2) - *((_QWORD *)v274 + 1)) >> 7);
        if ((_DWORD)v411)
          break;
LABEL_362:
        v273 = v406 + 1;
        if (v406 + 1 == v403)
          goto LABEL_465;
      }
      v276 = 0;
      v409 = v275 << 16;
LABEL_370:
      while (2)
      {
        v277 = *(_BYTE *)(v415 + 984);
        v278 = *(_BYTE *)(v415 + 985);
        v279 = *(_OWORD *)(v415 + 1066);
        *(_OWORD *)&v466[2] = *(_OWORD *)(v415 + 1050);
        *(_OWORD *)&v466[4] = v279;
        *(_QWORD *)((char *)&v466[5] + 6) = *(_QWORD *)(v415 + 1080);
        v280 = *(_OWORD *)(v415 + 1002);
        *(_OWORD *)object = *(_OWORD *)(v415 + 986);
        *(_OWORD *)&object[16] = v280;
        v281 = *(_OWORD *)(v415 + 1034);
        *(_OWORD *)&object[32] = *(_OWORD *)(v415 + 1018);
        *(_OWORD *)v466 = v281;
        v282 = operator new();
        v283 = v282;
        v284 = *(_OWORD *)&object[32];
        *(_OWORD *)(v282 + 50) = *(_OWORD *)v466;
        v285 = *(_OWORD *)&v466[4];
        *(_OWORD *)(v282 + 66) = *(_OWORD *)&v466[2];
        *(_OWORD *)(v282 + 82) = v285;
        v286 = *(_OWORD *)&object[16];
        *(_OWORD *)(v282 + 2) = *(_OWORD *)object;
        *(_OWORD *)(v282 + 18) = v286;
        if ((_DWORD)v276)
          v287 = 1;
        else
          v287 = v278;
        *(_BYTE *)v282 = v277;
        *(_BYTE *)(v282 + 1) = v287;
        *(_QWORD *)(v282 + 96) = *(_QWORD *)((char *)&v466[5] + 6);
        *(_OWORD *)(v282 + 34) = v284;
        *(_DWORD *)(v282 + 104) = 0;
        if (v275 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v288 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v289 = qword_254A6DE40;
            for (k = qword_254A6DE48; v289 != k; v289 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v289)(*(_QWORD *)(v289 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v291 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_574:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v276 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v292 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v292 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v293 = qword_254A6DE40;
            for (m = qword_254A6DE48; v293 != m; v293 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v293)(*(_QWORD *)(v293 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v295 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_574;
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v296 = (unsigned __int16)v276 | v409;
        v297 = *(_QWORD *)(v415 + 1744);
        if (v297)
        {
          v298 = (uint8x8_t)vcnt_s8((int8x8_t)v297);
          v298.i16[0] = vaddlv_u8(v298);
          if (v298.u32[0] > 1uLL)
          {
            v72 = (unsigned __int16)v276 | v409;
            if (v297 <= v296)
              v72 = v296 % v297;
          }
          else
          {
            v72 = ((_DWORD)v297 - 1) & v296;
          }
          v299 = *(uint64_t ***)(*v269 + 8 * v72);
          if (v299)
          {
            v300 = *v299;
            if (v300)
            {
              if (v298.u32[0] < 2uLL)
              {
                while (1)
                {
                  v304 = v300[1];
                  if (v304 == v296)
                  {
                    if (*((_DWORD *)v300 + 4) == v275 && *((_DWORD *)v300 + 5) == (_DWORD)v276)
                      goto LABEL_437;
                  }
                  else if ((v304 & (v297 - 1)) != v72)
                  {
                    goto LABEL_417;
                  }
                  v300 = (uint64_t *)*v300;
                  if (!v300)
                    goto LABEL_417;
                }
              }
              do
              {
                v302 = v300[1];
                if (v302 == v296)
                {
                  if (*((_DWORD *)v300 + 4) == v275 && *((_DWORD *)v300 + 5) == (_DWORD)v276)
                  {
LABEL_437:
                    MEMORY[0x212BC6398](v283, 0x1000C403B260825);
                    if (++v276 == v411)
                      goto LABEL_362;
                    goto LABEL_370;
                  }
                }
                else
                {
                  if (v302 >= v297)
                    v302 %= v297;
                  if (v302 != v72)
                    break;
                }
                v300 = (uint64_t *)*v300;
              }
              while (v300);
            }
          }
        }
LABEL_417:
        v305 = operator new(0x20uLL);
        v418[0] = v305;
        v418[1] = (void *)(v415 + 1752);
        *v305 = 0;
        v305[1] = v296;
        v305[2] = v275 | ((unint64_t)v276 << 32);
        v305[3] = v283;
        LOBYTE(rep) = 1;
        v306 = (float)(unint64_t)(*(_QWORD *)(v415 + 1760) + 1);
        v307 = *(float *)(v415 + 1768);
        if (v297 && (float)(v307 * (float)v297) >= v306)
        {
          v296 = v72;
        }
        else
        {
          v308 = (v297 & (v297 - 1)) != 0;
          if (v297 < 3)
            v308 = 1;
          v309 = v308 | (2 * v297);
          v310 = vcvtps_u32_f32(v306 / v307);
          if (v309 <= v310)
            prime = v310;
          else
            prime = v309;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v297 = *(_QWORD *)(v415 + 1744);
          }
          if (prime > v297)
            goto LABEL_430;
          if (prime < v297)
          {
            v312 = vcvtps_u32_f32((float)*(unint64_t *)(v415 + 1760) / *(float *)(v415 + 1768));
            if (v297 < 3
              || (v313 = (uint8x8_t)vcnt_s8((int8x8_t)v297), v313.i16[0] = vaddlv_u8(v313), v313.u32[0] > 1uLL))
            {
              v312 = std::__next_prime(v312);
            }
            else
            {
              v314 = 1 << -(char)__clz(v312 - 1);
              if (v312 >= 2)
                v312 = v314;
            }
            if (prime <= v312)
              prime = v312;
            if (prime < v297)
LABEL_430:
              sub_20E8D2B3C((uint64_t)v269, prime);
          }
          v297 = *(_QWORD *)(v415 + 1744);
          if ((v297 & (v297 - 1)) != 0)
          {
            if (v297 <= v296)
              v296 %= v297;
          }
          else
          {
            v296 = ((_DWORD)v297 - 1) & v296;
          }
        }
        v315 = *v269;
        v316 = *(_QWORD **)(*v269 + 8 * v296);
        if (v316)
        {
          *v305 = *v316;
        }
        else
        {
          *v305 = *v414;
          *v414 = v305;
          *(_QWORD *)(v315 + 8 * v296) = v414;
          if (!*v305)
          {
LABEL_369:
            ++*(_QWORD *)(v415 + 1760);
            if (++v276 == v411)
              goto LABEL_362;
            continue;
          }
          v317 = *(_QWORD *)(*v305 + 8);
          if ((v297 & (v297 - 1)) != 0)
          {
            if (v317 >= v297)
              v317 %= v297;
          }
          else
          {
            v317 &= v297 - 1;
          }
          v316 = (_QWORD *)(*v269 + 8 * v317);
        }
        break;
      }
      *v316 = v305;
      goto LABEL_369;
    }
  }
LABEL_465:
  v321 = *v396;
  v320 = v396[1];
  if (*v396 == v320)
  {
    v324 = 0;
    v323 = v415;
    goto LABEL_473;
  }
  v322 = (char *)v320 - (char *)v321 - 8;
  v323 = v415;
  v324 = 0;
  if (v322 < 8)
  {
    v325 = *v396;
    do
    {
LABEL_472:
      v330 = *v325++;
      v324 -= 991146299 * ((*(_QWORD *)(v330 + 16) - *(_QWORD *)(v330 + 8)) >> 7);
    }
    while (v325 != v320);
    goto LABEL_473;
  }
  v326 = 0;
  v327 = (v322 >> 3) + 1;
  v325 = &v321[v327 & 0x3FFFFFFFFFFFFFFELL];
  v328 = v321 + 1;
  v329 = v327 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v324 -= 991146299 * ((*(_QWORD *)(*(v328 - 1) + 16) - *(_QWORD *)(*(v328 - 1) + 8)) >> 7);
    v326 -= 991146299 * ((*(_QWORD *)(*v328 + 16) - *(_QWORD *)(*v328 + 8)) >> 7);
    v328 += 2;
    v329 -= 2;
  }
  while (v329);
  v324 += v326;
  if (v327 != (v327 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_472;
LABEL_473:
  v331 = (v324 + v324 * *(_DWORD *)(v323 + 568));
  if (!(_DWORD)v331)
  {
    v332 = 0;
    v333 = 0;
    v335 = v415;
    v337 = (_QWORD *)(v415 + 216);
    v336 = *(void **)(v415 + 216);
    if (!v336)
      goto LABEL_478;
    goto LABEL_477;
  }
  v332 = operator new(160 * v331);
  v333 = &v332[10 * v331];
  v334 = v332;
  do
  {
    v334[8] = 0uLL;
    v334[9] = 0uLL;
    v334[6] = 0uLL;
    v334[7] = 0uLL;
    v334[4] = 0uLL;
    v334[5] = 0uLL;
    v334[2] = 0uLL;
    v334[3] = 0uLL;
    *v334 = 0uLL;
    v334[1] = 0uLL;
    *((_DWORD *)v334 + 4) = -1;
    *((_BYTE *)v334 + 144) = 2;
    v334 += 10;
  }
  while (v334 != v333);
  v335 = v415;
  v337 = (_QWORD *)(v415 + 216);
  v336 = *(void **)(v415 + 216);
  if (v336)
  {
LABEL_477:
    *(_QWORD *)(v335 + 224) = v336;
    operator delete(v336);
    *v337 = 0;
    v337[1] = 0;
    v337[2] = 0;
  }
LABEL_478:
  *(_QWORD *)(v335 + 216) = v332;
  *(_QWORD *)(v335 + 224) = v333;
  *(_QWORD *)(v335 + 232) = v333;
  *(_QWORD *)(v335 + 240) = 0;
  *(_QWORD *)(v335 + 248) = 0;
  *(_QWORD *)(v335 + 256) = 0;
  *(_BYTE *)v335 = 1;
  sub_20F0F10C4(&v417);
  if (**(int **)(v417 + 56) > 3)
    goto LABEL_568;
  v338 = *(unsigned __int8 *)(v417 + 72);
  v339 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
  v340 = v339;
  if (!v338 && !v339)
    goto LABEL_568;
  v418[0] = &v417;
  v418[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v420) = 3;
  *((_QWORD *)&v420 + 1) = "unknown file";
  LODWORD(v421) = 174;
  v422[1] = 0;
  v423 = 0;
  v422[0] = "unknown function";
  v341 = *(_QWORD *)v418[0];
  if (*(char *)(*(_QWORD *)v418[0] + 39) < 0)
  {
    v343 = *(const char **)(v341 + 16);
    v342 = *(_QWORD *)(v341 + 24);
    v416 = *(_QWORD *)v418[0] + 16;
    v345 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v345 & 1) != 0)
      goto LABEL_487;
  }
  else
  {
    v342 = *(unsigned __int8 *)(*(_QWORD *)v418[0] + 39);
    v343 = (const char *)(*(_QWORD *)v418[0] + 16);
    v416 = (uint64_t)v343;
    v344 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v344 & 1) != 0)
      goto LABEL_487;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_487:
  if (byte_254A4A4F8[23] >= 0)
    v346 = byte_254A4A4F8;
  else
    v346 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v347 = byte_254A4A4F8[23];
  else
    v347 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v346, v343);
  v348 = &object[8];
  if (v347 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v347 >= 0x17)
  {
    v349 = v340;
    v350 = v343;
    v351 = v341;
    v352 = v338;
    v353 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v347 | 7) != 0x17)
      v353 = v347 | 7;
    v354 = v353 + 1;
    v348 = operator new(v353 + 1);
    *(_QWORD *)&object[24] = v354 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v348;
    *(_QWORD *)&object[16] = v347;
    v338 = v352;
    v341 = v351;
    v343 = v350;
    v340 = v349;
    goto LABEL_500;
  }
  object[31] = v347;
  if (v347)
LABEL_500:
    memmove(v348, v346, v347);
  v348[v347] = 0;
  object[32] = 1;
  v355 = &object[40];
  if (v342 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v342 >= 0x17)
  {
    v357 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v342 | 7) != 0x17)
      v357 = v342 | 7;
    v358 = v357 + 1;
    v355 = operator new(v357 + 1);
    v466[1] = v358 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v355;
    v466[0] = v342;
  }
  else
  {
    HIBYTE(v466[1]) = v342;
    if (!v342)
    {
      object[40] = 0;
      LOBYTE(v466[2]) = 1;
      v356 = *(NSObject **)object;
      if ((SHIBYTE(v466[1]) & 0x80000000) == 0)
        goto LABEL_505;
      goto LABEL_511;
    }
  }
  memmove(v355, v343, v342);
  v355[v342] = 0;
  LOBYTE(v466[2]) = 1;
  v356 = *(NSObject **)object;
  if ((SHIBYTE(v466[1]) & 0x80000000) == 0)
  {
LABEL_505:
    if (!object[32])
      goto LABEL_514;
LABEL_512:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_514;
  }
LABEL_511:
  operator delete(*(void **)&object[40]);
  if (object[32])
    goto LABEL_512;
LABEL_514:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v340 && *(_QWORD *)(v340 + 24))
  {
    v359 = _os_log_pack_size();
    v360 = (std::__shared_weak_count_vtbl *)operator new(v359, (std::align_val_t)8uLL);
    v361 = (std::__shared_weak_count *)operator new();
    v362 = v361;
    v361->__shared_owners_ = 0;
    v363 = (unint64_t *)&v361->__shared_owners_;
    v361->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v361->__shared_weak_owners_ = 0;
    v361[1].__vftable = v360;
    *(_QWORD *)object = v360;
    *(_QWORD *)&object[8] = v360;
    *(_QWORD *)&object[16] = v361;
    do
      v364 = __ldxr(v363);
    while (__stxr(v364 + 1, v363));
    memset(&object[24], 0, 24);
    do
      v365 = __ldaxr(v363);
    while (__stlxr(v365 - 1, v363));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v362);
    }
    v366 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v367 = operator new();
    v368 = *(unsigned __int8 *)(v341 + 39);
    v369 = v416;
    if ((v368 & 0x80u) != 0)
    {
      v369 = *(_QWORD *)(v341 + 16);
      v368 = *(_QWORD *)(v341 + 24);
    }
    *(_QWORD *)v367 = v366;
    *(_OWORD *)(v367 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v367 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v367 + 40) = v369;
    *(_QWORD *)(v367 + 48) = v368;
    *(_BYTE *)(v367 + 56) = 1;
    v504 = 0;
    v505 = v367;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v340 + 24) + 40))(*(_QWORD *)(v340 + 24), &v505);
    v370 = v505;
    v505 = 0;
    if (v370)
    {
      v371 = *(std::__shared_weak_count **)(v370 + 32);
      if (v371)
      {
        v372 = (unint64_t *)&v371->__shared_owners_;
        do
          v373 = __ldaxr(v372);
        while (__stlxr(v373 - 1, v372));
        if (!v373)
        {
          ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
          std::__shared_weak_count::__release_weak(v371);
        }
      }
      v374 = *(std::__shared_weak_count **)(v370 + 16);
      if (v374)
      {
        v375 = (unint64_t *)&v374->__shared_owners_;
        do
          v376 = __ldaxr(v375);
        while (__stlxr(v376 - 1, v375));
        if (!v376)
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
      v377 = v504;
      v504 = 0;
      if (v377)
      {
        v378 = *(std::__shared_weak_count **)(v377 + 32);
        if (v378)
        {
          v379 = (unint64_t *)&v378->__shared_owners_;
          do
            v380 = __ldaxr(v379);
          while (__stlxr(v380 - 1, v379));
          if (!v380)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
        }
        v381 = *(std::__shared_weak_count **)(v377 + 16);
        if (v381)
        {
          v382 = (unint64_t *)&v381->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        MEMORY[0x212BC6398](v377, 0x10F0C40B62ED6C6);
      }
    }
    v384 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v385 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v386 = __ldaxr(v385);
      while (__stlxr(v386 - 1, v385));
      if (!v386)
      {
        ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
        std::__shared_weak_count::__release_weak(v384);
      }
    }
    v387 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v388 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v389 = __ldaxr(v388);
      while (__stlxr(v389 - 1, v388));
      if (!v389)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
  }
  else
  {
    os_log_type_enabled(v356, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v390 = (void *)_os_log_send_and_compose_impl();
    if (v390)
      free(v390);
  }
  if (v338)
  {
    sub_20E8C003C((uint64_t)v418, "Done initializing pose tracker");
    sub_20E863570((uint64_t)v418);
  }
  sub_20E863570((uint64_t)v418);
  v391 = v423;
  if (v423)
  {
    v392 = (unint64_t *)&v423->__shared_owners_;
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
LABEL_568:
  if ((_QWORD)v506)
    operator delete((void *)v506);
}

void sub_20F0F0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;
  void *v63;

  if (LOBYTE(STACK[0x418]) && SLOBYTE(STACK[0x417]) < 0)
    operator delete((void *)STACK[0x400]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a61);
  v63 = *(void **)(v61 - 160);
  if (!v63)
    _Unwind_Resume(a1);
  operator delete(v63);
  _Unwind_Resume(a1);
}

void sub_20F0F10C4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62110);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62110))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62108);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62110);
  }
  *a1 = qword_254A62108;
}

void sub_20F0F1160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62110);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62110);
  _Unwind_Resume(a1);
}

BOOL sub_20F0F11B8(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  const char *v22;
  size_t v23;
  _BYTE *v24;
  unint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t i;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  float64x2_t v101;
  double v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  int8x16_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int8x16_t v121;
  float64x2_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t *v134;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 *v148;
  double v154;
  unint64_t v155;
  int v156;
  int v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  char **v170;
  char **v171;
  uint64_t v172;
  char **v173;
  char *v174;
  char *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned __int8 v181;
  const char *v182;
  size_t v183;
  _BYTE *v184;
  unint64_t v185;
  const char *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  size_t v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  char **v225;
  char **v226;
  uint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  size_t v237;
  const char *v238;
  unsigned __int8 v239;
  const char *v240;
  size_t v241;
  _BYTE *v242;
  const char *v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  uint64_t v248;
  uint64_t v249;
  NSObject *v250;
  size_t v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  int v285;
  int v286;
  void *v287;
  uint64_t v288;
  char **v289;
  char **v290;
  uint64_t v291;
  char **v292;
  char *v293;
  char *v294;
  unint64_t v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  char **v300;
  char **v301;
  uint64_t v302;
  char *v303;
  char *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  char *v313;
  char *v314;
  void *v315;
  char *v316;
  void *v317;
  void *v318;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v328;
  uint64_t v329;
  float64x2_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  void *__p;
  char *v335;
  void *v336;
  char *v337;
  char *v338;
  uint64_t *v339;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v341;
  int v342;
  const char *v343;
  int v344;
  const char *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE v350[24];
  __int128 v351;
  void **v352;
  size_t v353;
  unint64_t v354;
  char v355;
  uint64_t v356;

  v356 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 480)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 188, (uint64_t)"window_", 7, (uint64_t)"Window is not set", 17, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v332 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 80);
  v326 = *(_QWORD *)(a1 + 576);
  if (v332 >= v326)
  {
    sub_20F0F10C4(&v349);
    v3 = v332;
    if (**(int **)(v349 + 56) > 3)
      goto LABEL_91;
    v4 = *(unsigned __int8 *)(v349 + 72);
    v5 = sub_20E8C31DC(v349, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (!v4 && v5 == 0)
      goto LABEL_91;
    v339 = &v349;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v341 = std::chrono::system_clock::now().__d_.__rep_;
    v342 = 3;
    v343 = "unknown file";
    v344 = 198;
    v346 = 0;
    v347 = 0;
    v345 = "unknown function";
    v329 = v349;
    if (*(char *)(v349 + 39) < 0)
    {
      v9 = *(const char **)(v349 + 16);
      v8 = *(_QWORD *)(v349 + 24);
      v323 = v349 + 16;
      v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v21 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v8 = *(unsigned __int8 *)(v349 + 39);
      v9 = (const char *)(v349 + 16);
      v323 = v349 + 16;
      v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v10 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v350);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v350);
      if ((_BYTE)v351 && (v350[23] & 0x80000000) != 0)
        operator delete(*(void **)v350);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v332;
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v22 = byte_254A4A4F8;
    else
      v22 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8[23];
    else
      v23 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v350 = os_log_create(v22, v9);
    v24 = &v350[8];
    if (v23 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v23 >= 0x17)
    {
      v25 = v6;
      v26 = v9;
      v27 = v4;
      v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v28 = v23 | 7;
      v29 = v28 + 1;
      v24 = operator new(v28 + 1);
      *(_QWORD *)&v350[16] = v23;
      *(_QWORD *)&v351 = v29 | 0x8000000000000000;
      *(_QWORD *)&v350[8] = v24;
      v4 = v27;
      v9 = v26;
      v6 = v25;
    }
    else
    {
      BYTE7(v351) = v23;
      if (!v23)
      {
LABEL_35:
        v24[v23] = 0;
        BYTE8(v351) = 1;
        v30 = (void **)&v352;
        if (v8 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v8 >= 0x17)
        {
          v31 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v31 = v8 | 7;
          v32 = v31 + 1;
          v30 = (void **)operator new(v31 + 1);
          v353 = v8;
          v354 = v32 | 0x8000000000000000;
          v352 = v30;
        }
        else
        {
          HIBYTE(v354) = v8;
          if (!v8)
            goto LABEL_43;
        }
        memmove(v30, v9, v8);
LABEL_43:
        *((_BYTE *)v30 + v8) = 0;
        v355 = 1;
        v33 = *(NSObject **)v350;
        if (SHIBYTE(v354) < 0)
          operator delete(v352);
        if (BYTE8(v351) && SBYTE7(v351) < 0)
          operator delete(*(void **)&v350[8]);
        if (*(_QWORD *)v350)
          os_release(*(void **)v350);
        if (v6 && *(_QWORD *)(v6 + 24))
        {
          v34 = _os_log_pack_size();
          v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
          v36 = (std::__shared_weak_count *)operator new();
          v37 = v36;
          v36->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v36->__shared_weak_owners_ = 0;
          v36[1].__vftable = v35;
          *(_QWORD *)v350 = v35;
          *(_QWORD *)&v350[8] = v35;
          *(_QWORD *)&v350[16] = v36;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          v351 = 0uLL;
          v352 = 0;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v37);
          }
          v41 = *(_QWORD *)v350;
          v42 = _os_log_pack_fill();
          *(_DWORD *)v42 = 134217984;
          *(_QWORD *)(v42 + 4) = v3;
          v43 = (char *)operator new();
          v44 = *(unsigned __int8 *)(v329 + 39);
          v45 = v323;
          if ((v44 & 0x80u) != 0)
          {
            v45 = *(_QWORD *)(v329 + 16);
            v44 = *(_QWORD *)(v329 + 24);
          }
          *(_QWORD *)v43 = v41;
          *(_OWORD *)(v43 + 8) = *(_OWORD *)&v350[8];
          *(_QWORD *)&v350[8] = 0;
          *(_QWORD *)&v350[16] = 0;
          *(_OWORD *)(v43 + 24) = v351;
          v351 = 0uLL;
          *((_QWORD *)v43 + 5) = v45;
          *((_QWORD *)v43 + 6) = v44;
          v43[56] = 1;
          __p = 0;
          v336 = v43;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v336);
          v46 = v336;
          v336 = 0;
          if (v46)
          {
            v47 = (std::__shared_weak_count *)*((_QWORD *)v46 + 4);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = (std::__shared_weak_count *)*((_QWORD *)v46 + 2);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            MEMORY[0x212BC6398](v46, 0x10F0C40B62ED6C6);
            __p = 0;
          }
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
          if (*((_QWORD *)&v351 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v56 = *(std::__shared_weak_count **)&v350[16];
          if (*(_QWORD *)&v350[16])
          {
            v57 = (unint64_t *)(*(_QWORD *)&v350[16] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
        }
        else
        {
          os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
          *(_DWORD *)v350 = 134217984;
          *(_QWORD *)&v350[4] = v3;
          v59 = (void *)_os_log_send_and_compose_impl();
          if (v59)
            free(v59);
        }
        if (v4)
        {
          sub_20E8C003C((uint64_t)&v339, "RunBAFilter creating a window with %lu frames", v3);
          sub_20E863570((uint64_t)&v339);
        }
        sub_20E863570((uint64_t)&v339);
        v60 = v347;
        if (v347)
        {
          v61 = (unint64_t *)&v347->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
LABEL_91:
        kdebug_trace();
        v63 = *(_QWORD *)(a1 + 480);
        v64 = *(_QWORD *)(v63 + 296);
        v65 = (*(_QWORD *)(v63 + 304) - v64) >> 2;
        if (v3 <= v65)
        {
          if (v3 < v65)
            *(_QWORD *)(v63 + 304) = v64 + 4 * v3;
        }
        else
        {
          sub_20EAC24FC(v63 + 296, v3 - v65);
          v3 = v332;
        }
        v66 = *(_QWORD *)(v63 + 320);
        v67 = (*(_QWORD *)(v63 + 328) - v66) >> 3;
        if (v3 <= v67)
        {
          if (v3 < v67)
            *(_QWORD *)(v63 + 328) = v66 + 8 * v3;
        }
        else
        {
          sub_20E93D8FC(v63 + 320, v3 - v67);
          v3 = v332;
        }
        v68 = *(_QWORD *)(v63 + 344);
        v69 = (*(_QWORD *)(v63 + 352) - v68) >> 3;
        if (v3 <= v69)
        {
          if (v3 < v69)
            *(_QWORD *)(v63 + 352) = v68 + 8 * v3;
        }
        else
        {
          sub_20E93D8FC(v63 + 344, v3 - v69);
          v3 = v332;
        }
        v70 = *(_QWORD *)(v63 + 368);
        v71 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v63 + 376) - v70) >> 3);
        if (v3 <= v71)
        {
          if (v3 < v71)
            *(_QWORD *)(v63 + 376) = v70 + 40 * v3;
          *(_QWORD *)(v63 + 480) = *(_QWORD *)(v63 + 472);
          if (!v3)
          {
            v324 = 1;
            goto LABEL_111;
          }
        }
        else
        {
          sub_20F103604((void **)(v63 + 368), v3 - v71);
          *(_QWORD *)(v63 + 480) = *(_QWORD *)(v63 + 472);
          v3 = v332;
        }
        v72 = 0;
        v73 = 0;
        do
        {
          v74 = *(_QWORD *)(a1 + 56)
              + 328
              * ((v73 + *(_QWORD *)(a1 + 80))
               % (0x8F9C18F9C18F9C19 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)));
          *(_DWORD *)(*(_QWORD *)(v63 + 296) + 4 * v73) = *(_DWORD *)v74;
          v75 = 8 * v73;
          *(_QWORD *)(*(_QWORD *)(v63 + 320) + v75) = *(_QWORD *)(v74 + 8);
          *(_QWORD *)(*(_QWORD *)(v63 + 344) + v75) = *(_QWORD *)(v74 + 16);
          v76 = *(_QWORD *)(v63 + 368) + v72;
          v77 = *(_OWORD *)(v74 + 288);
          v78 = *(_OWORD *)(v74 + 304);
          *(_QWORD *)(v76 + 32) = *(_QWORD *)(v74 + 320);
          *(_OWORD *)v76 = v77;
          *(_OWORD *)(v76 + 16) = v78;
          ++v73;
          v72 += 40;
        }
        while (v3 != v73);
        v324 = 0;
LABEL_111:
        v79 = (_QWORD *)(*(_QWORD *)(a1 + 480) + 96);
        v80 = *(_QWORD *)(a1 + 96);
        sub_20FD30C88((uint64_t)v79, 0, 0, v80);
        if (v80)
        {
          v81 = 0;
          for (i = 0; i != v80; ++i)
          {
            v83 = *(_QWORD *)(a1 + 56)
                + 328
                * ((i + *(_QWORD *)(a1 + 80))
                 % (0x8F9C18F9C18F9C19 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)));
            v84 = *v79 + v81;
            v85 = *(_OWORD *)(v83 + 120);
            v86 = *(_OWORD *)(v83 + 152);
            v87 = *(_OWORD *)(v83 + 104);
            *(_OWORD *)(v84 + 80) = *(_OWORD *)(v83 + 136);
            *(_OWORD *)(v84 + 96) = v86;
            *(_OWORD *)(v84 + 48) = v87;
            *(_OWORD *)(v84 + 64) = v85;
            v88 = *(_OWORD *)(v83 + 184);
            v89 = *(_OWORD *)(v83 + 200);
            v90 = *(_OWORD *)(v83 + 168);
            *(_QWORD *)(v84 + 160) = *(_QWORD *)(v83 + 216);
            *(_OWORD *)(v84 + 128) = v88;
            *(_OWORD *)(v84 + 144) = v89;
            *(_OWORD *)(v84 + 112) = v90;
            v91 = *(_OWORD *)(v83 + 56);
            v92 = *(_OWORD *)(v83 + 88);
            *(_OWORD *)(v84 + 16) = *(_OWORD *)(v83 + 72);
            *(_OWORD *)(v84 + 32) = v92;
            *(_OWORD *)v84 = v91;
            v81 += 168;
          }
        }
        sub_20F09CBA0((uint64_t *)(a1 + 56), *(_QWORD *)(a1 + 480) + 512, 0, *(_QWORD *)(a1 + 96) - 1);
        v93 = *(_QWORD **)(a1 + 480);
        v94 = v93[15];
        v95 = v93[16] - v94;
        if (v95 >= 1)
        {
          v96 = *(_QWORD *)(*(_QWORD *)*a2 + 8);
          v97 = v95 / 0x680uLL + 1;
          do
          {
            v94 = sub_20EB8200C(v94, v96) + 1664;
            --v97;
          }
          while (v97 > 1);
          v93 = *(_QWORD **)(a1 + 480);
        }
        v98 = (_DWORD *)v93[37];
        v99 = (_DWORD *)v93[38];
        if (v98 != v99)
        {
          v100 = 0;
          v101 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
          v330 = v101;
          while (1)
          {
            v103 = *(_QWORD **)(a1 + 112);
            v104 = v103[10];
            if (!v104)
            {
LABEL_413:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VisualSlidingWindow.h", 478, (uint64_t)"", 0, (uint64_t)"Frame id doesn't exist", 22, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v105 = v103[8];
            v107 = v103 + 5;
            v106 = v103[5];
            v108 = 0x6DB6DB6DB6DB6DB7 * ((v107[1] - v106) >> 3);
            while (*(_DWORD *)(v106 + 56 * (v105 % v108)) != *v98)
            {
              ++v105;
              if (!--v104)
                goto LABEL_413;
            }
            v109 = *(_QWORD *)(*(_QWORD *)(a1 + 480) + 120) + 1664 * v100;
            v110 = *(_BYTE *)(v109 + 1536) ? v109 + 96 : 0;
            v111 = *(_QWORD *)(v106 + 56 * (v105 % v108) + 32);
            v112 = *(_DWORD *)(v110 + 992);
            if (v112 == -1)
              break;
            if (v112 <= 7)
              goto LABEL_135;
LABEL_136:
            v101.f64[0] = *(float64_t *)(v111 + 64);
            v114 = *(float64x2_t *)(v111 + 32);
            v113 = *(float64x2_t *)(v111 + 48);
            v116 = *(int8x16_t *)v111;
            v115 = *(float64x2_t *)(v111 + 16);
            v117 = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
            v118 = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
            v119 = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
            v120 = vextq_s8(v116, v116, 8uLL).u64[0];
            v121 = (int8x16_t)vabdq_f64(*(float64x2_t *)v111, *(float64x2_t *)v110);
            v122 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v330, (float64x2_t)vextq_s8(v121, v121, 8uLL)), (int32x4_t)vcgeq_f64(v330, vabdq_f64(v115, *(float64x2_t *)(v110 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v330, vabdq_f64(v114, *(float64x2_t *)(v110 + 32))), (int32x4_t)vcgeq_f64(v330, vabdq_f64(v113,
                                                                                  *(float64x2_t *)(v110 + 48))))));
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v122)) & 1) != 0
              || (v122.f64[0] = *(float64_t *)(v110 + 64), vabdq_f64(v101, v122).f64[0] > 1.0e-10))
            {
              v116.i64[1] = v120;
              *(_QWORD *)&v115.f64[1] = v119;
              *(int8x16_t *)v110 = v116;
              *(float64x2_t *)(v110 + 16) = v115;
              *(_QWORD *)&v114.f64[1] = v118;
              *(float64_t *)(v110 + 64) = v101.f64[0];
              *(_QWORD *)&v113.f64[1] = v117;
              *(float64x2_t *)(v110 + 32) = v114;
              *(float64x2_t *)(v110 + 48) = v113;
              v102 = *(double *)v111 * *(double *)(v111 + 32);
              *(double *)(v110 + 72) = 1.0 / *(double *)v111;
              *(double *)(v110 + 80) = -*(double *)(v111 + 8) / v102;
              *(double *)(v110 + 88) = -(*(double *)(v111 + 32) * *(double *)(v111 + 16)
                                       - *(double *)(v111 + 8) * *(double *)(v111 + 40))
                                     / v102;
              *(_QWORD *)(v110 + 96) = 0;
              *(double *)(v110 + 104) = 1.0 / *(double *)(v111 + 32);
              *(double *)(v110 + 112) = -*(double *)(v111 + 40) / *(double *)(v111 + 32);
              *(_QWORD *)(v110 + 120) = 0;
              *(_QWORD *)(v110 + 128) = 0;
              v101.f64[1] = NAN;
              *(_OWORD *)(v110 + 136) = xmmword_2102E3C70;
              *(_QWORD *)(v110 + 152) = 0x7FF8000000000000;
              *(_BYTE *)(v110 + 160) = 0;
            }
            ++v98;
            ++v100;
            if (v98 == v99)
              goto LABEL_139;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v112 = *(_DWORD *)(v110 + 992);
          if (v112 > 7)
            goto LABEL_136;
LABEL_135:
          if (!v112)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_136;
        }
LABEL_139:
        v123 = 552;
        if (!*(_BYTE *)(a1 + 1168))
          v123 = 560;
        v124 = *(_QWORD *)(a1 + v123);
        if (*(_QWORD *)(a1 + 176) >= v124)
          v125 = v124;
        else
          v125 = *(_QWORD *)(a1 + 176);
        v127 = *a2;
        v126 = a2[1];
        if (v126 != *a2)
        {
          v128 = 0;
          do
          {
            v129 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 168 * v128 + 24)
                 - *(_QWORD *)(*(_QWORD *)(a1 + 112) + 168 * v128 + 16);
            if (v129)
            {
              v130 = 0;
              v131 = v129 >> 8;
              do
              {
                v132 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + 48)
                                                      + 24 * v128)
                                          + 520 * v130);
                sub_20F1766E8((_QWORD *)(*(_QWORD *)(a1 + 112) + 168 * v128), v132, (uint64_t)(v132 + 62), 0, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 168 * v128 + 80) - 1, v125, v130);
                v133 = *(_QWORD *)(a1 + 136);
                if (*(_QWORD *)(a1 + 144) != v133)
                {
                  v134 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + 72)
                                                        + 24 * v128)
                                            + 520 * v130);
                  sub_20F184774((_QWORD *)(v133 + 168 * v128), v134, (uint64_t)(v134 + 62), 0, *(_QWORD *)(v133 + 168 * v128 + 80) - 1, v125, v130);
                }
                ++v130;
              }
              while (v131 != v130);
              v127 = *a2;
              v126 = a2[1];
            }
            ++v128;
          }
          while (v128 < (v126 - v127) >> 3);
        }
        v135 = 0;
        v136 = 0;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        if ((v324 & 1) == 0)
        {
          if (v332 >> 59)
            sub_20E867F44();
          v135 = operator new(32 * v332);
          v336 = v135;
          v338 = (char *)&v135[8 * v332];
          bzero(v135, 32 * v332);
          v136 = (char *)&v135[8 * v332];
          v337 = v136;
          v139 = *(_QWORD *)(a1 + 80);
          v140 = *(_QWORD *)(a1 + 56);
          v141 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v140) >> 3);
          v142 = v135 + 6;
          v143 = *(_QWORD *)(a1 + 480);
          v144 = 96;
          v145 = v332;
          do
          {
            v146 = *(_OWORD *)(v140 + 328 * (v139 % v141) + 256);
            *(_OWORD *)(v142 - 3) = *(_OWORD *)(v140 + 328 * (v139 % v141) + 268);
            *(_OWORD *)(v142 - 6) = v146;
            v147 = *(_QWORD *)(v143 + 96);
            if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v143 + 104) - v147) >> 3) == v332)
            {
              if (*(_BYTE *)(a1 + 587))
              {
                v148 = (__int128 *)(v147 + v144);
                _Q1 = *v148;
                _D3 = *((_QWORD *)v148 + 1);
                __asm { FMLA            D2, D3, V1.D[1] }
                v154 = sqrt(_D2 + *((double *)v148 + 2) * *((double *)v148 + 2));
                if (v154 > *(double *)(a1 + 592) && v154 < *(double *)(a1 + 600))
                  *v142 &= ~0x20u;
              }
            }
            v142 += 8;
            v144 += 168;
            ++v139;
            --v145;
          }
          while (v145);
        }
        sub_20F0F37E8(&__p, v332);
        if ((v324 & 1) == 0)
        {
          v155 = 0;
          v156 = *(unsigned __int8 *)(a1 + 586);
          v157 = v156;
          do
          {
            if (v157)
              v135[8 * v155 + 6] &= ~0x20u;
            v158 = *(_QWORD **)(a1 + 1720);
            if (v158)
            {
              v159 = vcvtad_u64_f64(*(double *)(*(_QWORD *)(a1 + 56)+ 328* ((*(_QWORD *)(a1 + 80) + v155)% (0x8F9C18F9C18F9C19 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3)))+ 8)* 1000.0);
              v160 = (_QWORD *)(a1 + 1720);
              do
              {
                v161 = v158[4];
                _CF = v161 >= v159;
                if (v161 >= v159)
                  v163 = v158;
                else
                  v163 = v158 + 1;
                if (_CF)
                  v160 = v158;
                v158 = (_QWORD *)*v163;
              }
              while (*v163);
              if (v160 != (_QWORD *)(a1 + 1720) && v160[4] <= v159)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v335 - (_BYTE *)__p) >> 3) <= v155)
                  goto LABEL_415;
                v164 = (char *)__p + 24 * v155;
                if (v164 != v160 + 5)
                {
                  sub_20F103878(v164, (char *)v160[5], (char *)v160[6], 0x8E38E38E38E38E39 * ((uint64_t)(v160[6] - v160[5]) >> 4));
                  v156 = *(unsigned __int8 *)(a1 + 586);
                }
                if (v156)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v335 - (_BYTE *)__p) >> 3) <= v155)
LABEL_415:
                    sub_20EDB40C4();
                  v165 = *((_QWORD *)__p + 3 * v155);
                  if (*(_BYTE *)v165 && fabs(*(double *)(v165 + 8)) < *(double *)(a1 + 608))
                    v135[8 * v155 + 6] |= 0x20u;
                  v156 = 1;
                  v157 = 1;
                }
                else
                {
                  v157 = 0;
                }
              }
            }
            ++v155;
          }
          while (v155 != v332);
        }
        sub_20F103A10((_QWORD *)(*(_QWORD *)(a1 + 480) + 240), (char *)v135, v136, (v136 - (char *)v135) >> 5);
        sub_20F103B5C(*(_QWORD *)(a1 + 480) + 264, (char **)__p, (uint64_t)v335, 0xAAAAAAAAAAAAAAABLL * ((v335 - (_BYTE *)__p) >> 3));
        v137 = *(_QWORD *)(a1 + 296);
        v11 = v332;
        v138 = *(_QWORD *)(a1 + 264);
        if (!v137)
          v137 = (*(_QWORD *)(a1 + 272) - v138) >> 3;
        *(_BYTE *)(*(_QWORD *)(a1 + 480) + 504) = *(_BYTE *)(v138 + 8 * v137 - 4);
        kdebug_trace();
        sub_20F0F10C4(&v333);
        if (**(int **)(v333 + 56) > 3
          || (v166 = *(unsigned __int8 *)(v333 + 72),
              v167 = sub_20E8C31DC(v333, "OSLogSurrogateAppender", 1, 0),
              v168 = v167,
              !v166)
          && !v167)
        {
LABEL_402:
          v313 = (char *)__p;
          if (__p)
          {
            v314 = v335;
            v315 = __p;
            if (v335 != __p)
            {
              v316 = v335;
              do
              {
                v318 = (void *)*((_QWORD *)v316 - 3);
                v316 -= 24;
                v317 = v318;
                if (v318)
                {
                  *((_QWORD *)v314 - 2) = v317;
                  operator delete(v317);
                }
                v314 = v316;
              }
              while (v316 != v313);
              v315 = __p;
            }
            v335 = v313;
            operator delete(v315);
          }
          if (v336)
            operator delete(v336);
          return v11 >= v326;
        }
        v339 = &v333;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v341 = std::chrono::system_clock::now().__d_.__rep_;
        v342 = 3;
        v343 = "unknown file";
        v344 = 321;
        v346 = 0;
        v347 = 0;
        v345 = "unknown function";
        v169 = *(_QWORD **)(a1 + 480);
        v170 = (char **)v169[6];
        v171 = (char **)v169[7];
        if (v170 != v171)
        {
          v172 = 0;
          v173 = (char **)v169[6];
          while (1)
          {
            v175 = *v173;
            v174 = v173[1];
            if (*v173 != v174)
            {
              v176 = v174 - v175 - 520;
              if (v176 >= 0x208)
              {
                v178 = 0;
                v179 = v176 / 0x208 + 1;
                v177 = &v175[520 * (v179 & 0xFFFFFFFFFFFFFELL)];
                v180 = v179 & 0xFFFFFFFFFFFFFELL;
                do
                {
                  v172 += *(_QWORD *)v175;
                  v178 += *((_QWORD *)v175 + 65);
                  v175 += 1040;
                  v180 -= 2;
                }
                while (v180);
                v172 += v178;
                if (v179 == (v179 & 0xFFFFFFFFFFFFFELL))
                  goto LABEL_196;
              }
              else
              {
                v177 = *v173;
              }
              do
              {
                v172 += *(_QWORD *)v177;
                v177 += 520;
              }
              while (v177 != v174);
            }
LABEL_196:
            v173 += 3;
            if (v173 == v171)
              goto LABEL_281;
          }
        }
        v172 = 0;
LABEL_281:
        v225 = (char **)v169[9];
        v226 = (char **)v169[10];
        if (v225 != v226)
        {
          v227 = 0;
          while (1)
          {
            v229 = *v225;
            v228 = v225[1];
            if (*v225 != v228)
            {
              v230 = v228 - v229 - 520;
              if (v230 >= 0x208)
              {
                v232 = 0;
                v233 = v230 / 0x208 + 1;
                v231 = &v229[520 * (v233 & 0xFFFFFFFFFFFFFELL)];
                v234 = v233 & 0xFFFFFFFFFFFFFELL;
                do
                {
                  v227 += *(_QWORD *)v229;
                  v232 += *((_QWORD *)v229 + 65);
                  v229 += 1040;
                  v234 -= 2;
                }
                while (v234);
                v227 += v232;
                if (v233 == (v233 & 0xFFFFFFFFFFFFFELL))
                  goto LABEL_283;
              }
              else
              {
                v231 = *v225;
              }
              do
              {
                v227 += *(_QWORD *)v231;
                v231 += 520;
              }
              while (v231 != v228);
            }
LABEL_283:
            v225 += 3;
            if (v225 == v226)
              goto LABEL_293;
          }
        }
        v227 = 0;
LABEL_293:
        v235 = *v170;
        v236 = *v339;
        v321 = *v339;
        if (*(char *)(*v339 + 39) < 0)
        {
          v238 = *(const char **)(v236 + 16);
          v237 = *(_QWORD *)(v236 + 24);
        }
        else
        {
          v237 = *(unsigned __int8 *)(*v339 + 39);
          v238 = (const char *)(*v339 + 16);
        }
        v320 = *v339 + 16;
        v322 = (int *)v169[37];
        v325 = v169[38];
        v328 = *((_QWORD *)v235 + 1);
        v331 = v168;
        v239 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v239 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v350);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v350);
          if ((_BYTE)v351 && (v350[23] & 0x80000000) != 0)
            operator delete(*(void **)v350);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v240 = byte_254A4A4F8;
        else
          v240 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v241 = byte_254A4A4F8[23];
        else
          v241 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v350 = os_log_create(v240, v238);
        v242 = &v350[8];
        if (v241 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v241 >= 0x17)
        {
          v243 = v238;
          v244 = v166;
          v245 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v241 | 7) != 0x17)
            v245 = v241 | 7;
          v246 = v245 + 1;
          v242 = operator new(v245 + 1);
          *(_QWORD *)&v350[16] = v241;
          *(_QWORD *)&v351 = v246 | 0x8000000000000000;
          *(_QWORD *)&v350[8] = v242;
          v166 = v244;
          v238 = v243;
        }
        else
        {
          BYTE7(v351) = v241;
          if (!v241)
          {
LABEL_311:
            v242[v241] = 0;
            BYTE8(v351) = 1;
            v247 = (void **)&v352;
            if (v237 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v237 >= 0x17)
            {
              v248 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v237 | 7) != 0x17)
                v248 = v237 | 7;
              v249 = v248 + 1;
              v247 = (void **)operator new(v248 + 1);
              v353 = v237;
              v354 = v249 | 0x8000000000000000;
              v352 = v247;
            }
            else
            {
              HIBYTE(v354) = v237;
              if (!v237)
                goto LABEL_319;
            }
            memmove(v247, v238, v237);
LABEL_319:
            *((_BYTE *)v247 + v237) = 0;
            v355 = 1;
            v250 = *(NSObject **)v350;
            if (SHIBYTE(v354) < 0)
              operator delete(v352);
            if (BYTE8(v351) && SBYTE7(v351) < 0)
              operator delete(*(void **)&v350[8]);
            if (*(_QWORD *)v350)
              os_release(*(void **)v350);
            if (v331 && *(_QWORD *)(v331 + 24))
            {
              v251 = _os_log_pack_size();
              v252 = (std::__shared_weak_count_vtbl *)operator new(v251, (std::align_val_t)8uLL);
              v253 = (std::__shared_weak_count *)operator new();
              v254 = v253;
              v253->__shared_owners_ = 0;
              v255 = (unint64_t *)&v253->__shared_owners_;
              v253->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v253->__shared_weak_owners_ = 0;
              v253[1].__vftable = v252;
              *(_QWORD *)v350 = v252;
              *(_QWORD *)&v350[8] = v252;
              *(_QWORD *)&v350[16] = v253;
              do
                v256 = __ldxr(v255);
              while (__stxr(v256 + 1, v255));
              v351 = 0uLL;
              v352 = 0;
              do
                v257 = __ldaxr(v255);
              while (__stlxr(v257 - 1, v255));
              if (!v257)
              {
                ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                std::__shared_weak_count::__release_weak(v254);
              }
              v258 = *(_QWORD *)v350;
              v259 = _os_log_pack_fill();
              v260 = *v322;
              v261 = *(_DWORD *)(v325 - 4);
              *(_DWORD *)v259 = 134219008;
              *(_QWORD *)(v259 + 4) = v172;
              *(_WORD *)(v259 + 12) = 2048;
              *(_QWORD *)(v259 + 14) = v227;
              *(_WORD *)(v259 + 22) = 2048;
              *(_QWORD *)(v259 + 24) = v328;
              *(_WORD *)(v259 + 32) = 1024;
              *(_DWORD *)(v259 + 34) = v260;
              *(_WORD *)(v259 + 38) = 1024;
              *(_DWORD *)(v259 + 40) = v261;
              v262 = operator new();
              v263 = *(unsigned __int8 *)(v321 + 39);
              v264 = v320;
              if ((v263 & 0x80u) != 0)
              {
                v264 = *(_QWORD *)(v321 + 16);
                v263 = *(_QWORD *)(v321 + 24);
              }
              *(_QWORD *)v262 = v258;
              *(_OWORD *)(v262 + 8) = *(_OWORD *)&v350[8];
              *(_QWORD *)&v350[8] = 0;
              *(_QWORD *)&v350[16] = 0;
              *(_OWORD *)(v262 + 24) = v351;
              v351 = 0uLL;
              *(_QWORD *)(v262 + 40) = v264;
              *(_QWORD *)(v262 + 48) = v263;
              *(_BYTE *)(v262 + 56) = 1;
              v348 = 0;
              v349 = v262;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v331 + 24) + 40))(*(_QWORD *)(v331 + 24), &v349);
              v265 = v349;
              v349 = 0;
              if (v265)
              {
                v266 = *(std::__shared_weak_count **)(v265 + 32);
                if (v266)
                {
                  v267 = (unint64_t *)&v266->__shared_owners_;
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }
                v269 = *(std::__shared_weak_count **)(v265 + 16);
                if (v269)
                {
                  v270 = (unint64_t *)&v269->__shared_owners_;
                  do
                    v271 = __ldaxr(v270);
                  while (__stlxr(v271 - 1, v270));
                  if (!v271)
                  {
                    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                    std::__shared_weak_count::__release_weak(v269);
                  }
                }
                MEMORY[0x212BC6398](v265, 0x10F0C40B62ED6C6);
                v272 = v348;
                v348 = 0;
                if (v272)
                {
                  v273 = *(std::__shared_weak_count **)(v272 + 32);
                  if (v273)
                  {
                    v274 = (unint64_t *)&v273->__shared_owners_;
                    do
                      v275 = __ldaxr(v274);
                    while (__stlxr(v275 - 1, v274));
                    if (!v275)
                    {
                      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                      std::__shared_weak_count::__release_weak(v273);
                    }
                  }
                  v276 = *(std::__shared_weak_count **)(v272 + 16);
                  if (v276)
                  {
                    v277 = (unint64_t *)&v276->__shared_owners_;
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                      std::__shared_weak_count::__release_weak(v276);
                    }
                  }
                  MEMORY[0x212BC6398](v272, 0x10F0C40B62ED6C6);
                }
              }
              v279 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
              if (*((_QWORD *)&v351 + 1))
              {
                v280 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
                do
                  v281 = __ldaxr(v280);
                while (__stlxr(v281 - 1, v280));
                if (!v281)
                {
                  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                  std::__shared_weak_count::__release_weak(v279);
                }
              }
              v282 = *(std::__shared_weak_count **)&v350[16];
              if (*(_QWORD *)&v350[16])
              {
                v283 = (unint64_t *)(*(_QWORD *)&v350[16] + 8);
                do
                  v284 = __ldaxr(v283);
                while (__stlxr(v284 - 1, v283));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                  std::__shared_weak_count::__release_weak(v282);
                }
              }
            }
            else
            {
              os_log_type_enabled(v250, OS_LOG_TYPE_INFO);
              v285 = *v322;
              v286 = *(_DWORD *)(v325 - 4);
              *(_DWORD *)v350 = 134219008;
              *(_QWORD *)&v350[4] = v172;
              *(_WORD *)&v350[12] = 2048;
              *(_QWORD *)&v350[14] = v227;
              *(_WORD *)&v350[22] = 2048;
              *(_QWORD *)&v351 = v328;
              WORD4(v351) = 1024;
              *(_DWORD *)((char *)&v351 + 10) = v285;
              HIWORD(v351) = 1024;
              LODWORD(v352) = v286;
              v287 = (void *)_os_log_send_and_compose_impl();
              if (v287)
                free(v287);
            }
            v11 = v332;
            if (v166)
            {
              v288 = *(_QWORD *)(a1 + 480);
              v289 = *(char ***)(v288 + 48);
              v290 = *(char ***)(v288 + 56);
              if (v289 != v290)
              {
                v291 = 0;
                v292 = *(char ***)(v288 + 48);
                while (1)
                {
                  v294 = *v292;
                  v293 = v292[1];
                  if (*v292 != v293)
                  {
                    v295 = v293 - v294 - 520;
                    if (v295 >= 0x208)
                    {
                      v297 = 0;
                      v298 = v295 / 0x208 + 1;
                      v296 = &v294[520 * (v298 & 0xFFFFFFFFFFFFFELL)];
                      v299 = v298 & 0xFFFFFFFFFFFFFELL;
                      do
                      {
                        v291 += *(_QWORD *)v294;
                        v297 += *((_QWORD *)v294 + 65);
                        v294 += 1040;
                        v299 -= 2;
                      }
                      while (v299);
                      v291 += v297;
                      if (v298 == (v298 & 0xFFFFFFFFFFFFFELL))
                        goto LABEL_374;
                    }
                    else
                    {
                      v296 = *v292;
                    }
                    do
                    {
                      v291 += *(_QWORD *)v296;
                      v296 += 520;
                    }
                    while (v296 != v293);
                  }
LABEL_374:
                  v292 += 3;
                  if (v292 == v290)
                    goto LABEL_384;
                }
              }
              v291 = 0;
LABEL_384:
              v300 = *(char ***)(v288 + 72);
              v301 = *(char ***)(v288 + 80);
              if (v300 != v301)
              {
                v302 = 0;
                while (1)
                {
                  v303 = *v300;
                  v304 = v300[1];
                  if (*v300 != v304)
                  {
                    v305 = v304 - v303 - 520;
                    if (v305 >= 0x208)
                    {
                      v307 = 0;
                      v308 = v305 / 0x208 + 1;
                      v306 = &v303[520 * (v308 & 0xFFFFFFFFFFFFFELL)];
                      v309 = v308 & 0xFFFFFFFFFFFFFELL;
                      do
                      {
                        v302 += *(_QWORD *)v303;
                        v307 += *((_QWORD *)v303 + 65);
                        v303 += 1040;
                        v309 -= 2;
                      }
                      while (v309);
                      v302 += v307;
                      if (v308 == (v308 & 0xFFFFFFFFFFFFFELL))
                        goto LABEL_386;
                    }
                    else
                    {
                      v306 = *v300;
                    }
                    do
                    {
                      v302 += *(_QWORD *)v306;
                      v306 += 520;
                    }
                    while (v306 != v304);
                  }
LABEL_386:
                  v300 += 3;
                  if (v300 == v301)
                    goto LABEL_396;
                }
              }
              v302 = 0;
LABEL_396:
              sub_20E8C003C((uint64_t)&v339, "Submitting a window to BA with %zu point tracks, %zu line tracks, and %zu frames (IDs %d...%d)", v291, v302, *((_QWORD *)*v289 + 1), **(_DWORD **)(v288 + 296), *(_DWORD *)(*(_QWORD *)(v288 + 304) - 4));
              sub_20E863570((uint64_t)&v339);
            }
            sub_20E863570((uint64_t)&v339);
            v310 = v347;
            if (v347)
            {
              v311 = (unint64_t *)&v347->__shared_owners_;
              do
                v312 = __ldaxr(v311);
              while (__stlxr(v312 - 1, v311));
              if (!v312)
              {
                ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                std::__shared_weak_count::__release_weak(v310);
              }
            }
            goto LABEL_402;
          }
        }
        memmove(v242, v240, v241);
        goto LABEL_311;
      }
    }
    memmove(v24, v22, v23);
    goto LABEL_35;
  }
  sub_20F0F10C4(&v349);
  v11 = v332;
  if (**(int **)(v349 + 56) > 3)
    return v11 >= v326;
  v12 = *(unsigned __int8 *)(v349 + 72);
  v13 = sub_20E8C31DC(v349, "OSLogSurrogateAppender", 1, 0);
  v14 = v13;
  if (!v12 && v13 == 0)
    return v11 >= v326;
  v339 = &v349;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v341 = std::chrono::system_clock::now().__d_.__rep_;
  v342 = 3;
  v343 = "unknown file";
  v344 = 194;
  v346 = 0;
  v347 = 0;
  v345 = "unknown function";
  v16 = v349;
  v17 = v349 + 16;
  if (*(char *)(v349 + 39) < 0)
  {
    v19 = *(const char **)(v349 + 16);
    v18 = *(_QWORD *)(v349 + 24);
    v181 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v181 & 1) != 0)
      goto LABEL_207;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v349 + 39);
    v19 = (const char *)(*v339 + 16);
    v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v20 & 1) != 0)
      goto LABEL_207;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v350);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v350);
    if ((_BYTE)v351 && (v350[23] & 0x80000000) != 0)
      operator delete(*(void **)v350);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_207:
  if (byte_254A4A4F8[23] >= 0)
    v182 = byte_254A4A4F8;
  else
    v182 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v183 = byte_254A4A4F8[23];
  else
    v183 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v350 = os_log_create(v182, v19);
  v184 = &v350[8];
  if (v183 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v183 >= 0x17)
  {
    v185 = v14;
    v186 = v19;
    v187 = v16;
    v188 = v12;
    v189 = v17;
    v190 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v183 | 7) != 0x17)
      v190 = v183 | 7;
    v191 = v190 + 1;
    v184 = operator new(v190 + 1);
    *(_QWORD *)&v350[16] = v183;
    *(_QWORD *)&v351 = v191 | 0x8000000000000000;
    *(_QWORD *)&v350[8] = v184;
    v17 = v189;
    v12 = v188;
    v16 = v187;
    v19 = v186;
    v14 = v185;
    goto LABEL_220;
  }
  BYTE7(v351) = v183;
  if (v183)
LABEL_220:
    memmove(v184, v182, v183);
  v184[v183] = 0;
  BYTE8(v351) = 1;
  v192 = (void **)&v352;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v18 >= 0x17)
  {
    v193 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v193 = v18 | 7;
    v194 = v193 + 1;
    v192 = (void **)operator new(v193 + 1);
    v353 = v18;
    v354 = v194 | 0x8000000000000000;
    v352 = v192;
  }
  else
  {
    HIBYTE(v354) = v18;
    if (!v18)
      goto LABEL_229;
  }
  memmove(v192, v19, v18);
LABEL_229:
  *((_BYTE *)v192 + v18) = 0;
  v355 = 1;
  v195 = *(NSObject **)v350;
  if (SHIBYTE(v354) < 0)
    operator delete(v352);
  if (BYTE8(v351) && SBYTE7(v351) < 0)
    operator delete(*(void **)&v350[8]);
  if (*(_QWORD *)v350)
    os_release(*(void **)v350);
  if (v14 && *(_QWORD *)(v14 + 24))
  {
    v196 = _os_log_pack_size();
    v197 = (std::__shared_weak_count_vtbl *)operator new(v196, (std::align_val_t)8uLL);
    v198 = (std::__shared_weak_count *)operator new();
    v199 = v198;
    v198->__shared_owners_ = 0;
    v200 = (unint64_t *)&v198->__shared_owners_;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v197;
    *(_QWORD *)v350 = v197;
    *(_QWORD *)&v350[8] = v197;
    *(_QWORD *)&v350[16] = v198;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
    v351 = 0uLL;
    v352 = 0;
    do
      v202 = __ldaxr(v200);
    while (__stlxr(v202 - 1, v200));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v199);
    }
    v203 = *(_QWORD *)v350;
    v204 = _os_log_pack_fill();
    *(_DWORD *)v204 = 134217984;
    *(_QWORD *)(v204 + 4) = v332;
    v205 = (char *)operator new();
    v206 = *(unsigned __int8 *)(v16 + 39);
    if ((v206 & 0x80u) == 0)
      v207 = v17;
    else
      v207 = *(_QWORD *)(v16 + 16);
    if ((v206 & 0x80u) != 0)
      v206 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)v205 = v203;
    *(_OWORD *)(v205 + 8) = *(_OWORD *)&v350[8];
    *(_QWORD *)&v350[8] = 0;
    *(_QWORD *)&v350[16] = 0;
    *(_OWORD *)(v205 + 24) = v351;
    v351 = 0uLL;
    *((_QWORD *)v205 + 5) = v207;
    *((_QWORD *)v205 + 6) = v206;
    v205[56] = 1;
    __p = 0;
    v336 = v205;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), &v336);
    v208 = v336;
    v336 = 0;
    if (v208)
    {
      v209 = (std::__shared_weak_count *)*((_QWORD *)v208 + 4);
      if (v209)
      {
        v210 = (unint64_t *)&v209->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v212 = (std::__shared_weak_count *)*((_QWORD *)v208 + 2);
      if (v212)
      {
        v213 = (unint64_t *)&v212->__shared_owners_;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 - 1, v213));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
      }
      MEMORY[0x212BC6398](v208, 0x10F0C40B62ED6C6);
      __p = 0;
    }
    v215 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    v11 = v332;
    if (*((_QWORD *)&v351 + 1))
    {
      v216 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
    v218 = *(std::__shared_weak_count **)&v350[16];
    if (*(_QWORD *)&v350[16])
    {
      v219 = (unint64_t *)(*(_QWORD *)&v350[16] + 8);
      do
        v220 = __ldaxr(v219);
      while (__stlxr(v220 - 1, v219));
      if (!v220)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
  }
  else
  {
    os_log_type_enabled(v195, OS_LOG_TYPE_INFO);
    *(_DWORD *)v350 = 134217984;
    *(_QWORD *)&v350[4] = v332;
    v11 = v332;
    v221 = (void *)_os_log_send_and_compose_impl();
    if (v221)
      free(v221);
  }
  if (v12)
  {
    sub_20E8C003C((uint64_t)&v339, "RunBAFilter has only %lu frames.", v11);
    sub_20E863570((uint64_t)&v339);
  }
  sub_20E863570((uint64_t)&v339);
  v222 = v347;
  if (v347)
  {
    v223 = (unint64_t *)&v347->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  return v11 >= v326;
}

void sub_20F0F34E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 168) && *(char *)(v32 - 169) < 0)
    operator delete(*(void **)(v32 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680(&a26);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F0F37E8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20F0F3890(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20F0F38E8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  size_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned int **v69;
  unsigned int *v70;
  unint64_t v71;
  unsigned int **v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  unsigned int v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned int **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  _BYTE *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char **v135;
  _BYTE *v136;
  char *v137;
  size_t v138;
  void *v139;
  char *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  __int128 *v174;
  double v180;
  unint64_t v181;
  int v182;
  int v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  char **v199;
  char **v200;
  uint64_t v201;
  char **v202;
  char *v203;
  char *v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  const char *v211;
  size_t v212;
  _BYTE *v213;
  unint64_t v214;
  const char *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  size_t v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  char **v254;
  char **v255;
  uint64_t v256;
  char *v257;
  char *v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  size_t v266;
  const char *v267;
  unsigned __int8 v268;
  const char *v269;
  size_t v270;
  _BYTE *v271;
  const char *v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  void **v277;
  uint64_t v278;
  uint64_t v279;
  NSObject *v280;
  size_t v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  int v315;
  int v316;
  void *v317;
  uint64_t v318;
  char **v319;
  char **v320;
  uint64_t v321;
  char **v322;
  char *v323;
  char *v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char **v330;
  char **v331;
  uint64_t v332;
  char *v333;
  char *v334;
  unint64_t v335;
  char *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  void *v345;
  char *v346;
  void *v347;
  void *v348;
  unsigned int **v350;
  char v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  char *v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  void *__p;
  char *v371;
  void *v372;
  char *v373;
  char *v374;
  uint64_t *v375;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v377;
  int v378;
  const char *v379;
  int v380;
  const char *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  uint64_t v384;
  uint64_t v385;
  _BYTE v386[24];
  __int128 v387;
  void **v388;
  size_t v389;
  unint64_t v390;
  char v391;
  uint64_t v392;

  v392 = *MEMORY[0x24BDAC8D0];
  if (!a1[60]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 328, (uint64_t)"window_", 7, (uint64_t)"Window is not set", 17, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v368 = a1;
  v365 = *(_QWORD *)(a1[14] + 80);
  v353 = a1[72];
  if (v365 >= v353)
  {
    v360 = a2;
    sub_20F0F10C4(&v385);
    v5 = v365;
    if (**(int **)(v385 + 56) > 3)
      goto LABEL_94;
    v6 = *(unsigned __int8 *)(v385 + 72);
    v7 = sub_20E8C31DC(v385, "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (!v6 && v7 == 0)
      goto LABEL_94;
    v375 = &v385;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v377 = std::chrono::system_clock::now().__d_.__rep_;
    v378 = 3;
    v379 = "unknown file";
    v380 = 338;
    v382 = 0;
    v383 = 0;
    v381 = "unknown function";
    v10 = v385;
    v11 = v385 + 16;
    if (*(char *)(v385 + 39) < 0)
    {
      v13 = *(const char **)(v385 + 16);
      v12 = *(_QWORD *)(v385 + 24);
      v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v25 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v385 + 39);
      v13 = (const char *)(*v375 + 16);
      v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v14 & 1) != 0)
        goto LABEL_21;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v386);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v386);
      if ((_BYTE)v387 && (v386[23] & 0x80000000) != 0)
        operator delete(*(void **)v386);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_21:
    if (byte_254A4A4F8[23] >= 0)
      v26 = byte_254A4A4F8;
    else
      v26 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v27 = byte_254A4A4F8[23];
    else
      v27 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v386 = os_log_create(v26, v13);
    v28 = &v386[8];
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v27 >= 0x17)
    {
      v29 = v8;
      v30 = v10;
      v31 = v11;
      v32 = v6;
      v33 = v13;
      v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v34 = v27 | 7;
      v35 = v34 + 1;
      v28 = operator new(v34 + 1);
      *(_QWORD *)&v386[16] = v27;
      *(_QWORD *)&v387 = v35 | 0x8000000000000000;
      *(_QWORD *)&v386[8] = v28;
      v13 = v33;
      v6 = v32;
      v11 = v31;
      v10 = v30;
      v8 = v29;
    }
    else
    {
      BYTE7(v387) = v27;
      if (!v27)
      {
LABEL_35:
        v28[v27] = 0;
        BYTE8(v387) = 1;
        v36 = (void **)&v388;
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v12 >= 0x17)
        {
          v37 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v37 = v12 | 7;
          v38 = v37 + 1;
          v36 = (void **)operator new(v37 + 1);
          v389 = v12;
          v390 = v38 | 0x8000000000000000;
          v388 = v36;
        }
        else
        {
          HIBYTE(v390) = v12;
          if (!v12)
            goto LABEL_43;
        }
        memmove(v36, v13, v12);
LABEL_43:
        *((_BYTE *)v36 + v12) = 0;
        v391 = 1;
        v39 = *(NSObject **)v386;
        if (SHIBYTE(v390) < 0)
          operator delete(v388);
        if (BYTE8(v387) && SBYTE7(v387) < 0)
          operator delete(*(void **)&v386[8]);
        if (*(_QWORD *)v386)
          os_release(*(void **)v386);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v40 = _os_log_pack_size();
          v41 = (std::__shared_weak_count_vtbl *)operator new(v40, (std::align_val_t)8uLL);
          v42 = (std::__shared_weak_count *)operator new();
          v43 = v42;
          v42->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          v42->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v42->__shared_weak_owners_ = 0;
          v42[1].__vftable = v41;
          *(_QWORD *)v386 = v41;
          *(_QWORD *)&v386[8] = v41;
          *(_QWORD *)&v386[16] = v42;
          do
            v45 = __ldxr(p_shared_owners);
          while (__stxr(v45 + 1, p_shared_owners));
          v387 = 0uLL;
          v388 = 0;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v43);
          }
          v47 = *(_QWORD *)v386;
          v48 = _os_log_pack_fill();
          *(_DWORD *)v48 = 134217984;
          *(_QWORD *)(v48 + 4) = v365;
          v49 = (char *)operator new();
          v50 = *(unsigned __int8 *)(v10 + 39);
          if ((v50 & 0x80u) == 0)
            v51 = v11;
          else
            v51 = *(_QWORD *)(v10 + 16);
          if ((v50 & 0x80u) != 0)
            v50 = *(_QWORD *)(v10 + 24);
          *(_QWORD *)v49 = v47;
          *(_OWORD *)(v49 + 8) = *(_OWORD *)&v386[8];
          *(_QWORD *)&v386[8] = 0;
          *(_QWORD *)&v386[16] = 0;
          *(_OWORD *)(v49 + 24) = v387;
          v387 = 0uLL;
          *((_QWORD *)v49 + 5) = v51;
          *((_QWORD *)v49 + 6) = v50;
          v49[56] = 1;
          __p = 0;
          v372 = v49;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v372);
          v52 = v372;
          v372 = 0;
          if (v52)
          {
            v53 = (std::__shared_weak_count *)*((_QWORD *)v52 + 4);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v56 = (std::__shared_weak_count *)*((_QWORD *)v52 + 2);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
            __p = 0;
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
          v5 = v365;
          if (*((_QWORD *)&v387 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v62 = *(std::__shared_weak_count **)&v386[16];
          if (*(_QWORD *)&v386[16])
          {
            v63 = (unint64_t *)(*(_QWORD *)&v386[16] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        else
        {
          os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
          *(_DWORD *)v386 = 134217984;
          *(_QWORD *)&v386[4] = v365;
          v5 = v365;
          v65 = (void *)_os_log_send_and_compose_impl();
          if (v65)
            free(v65);
        }
        if (v6)
        {
          sub_20E8C003C((uint64_t)&v375, "RunBAFilter creating a window with %lu frames", v5);
          sub_20E863570((uint64_t)&v375);
        }
        sub_20E863570((uint64_t)&v375);
        v66 = v383;
        if (v383)
        {
          v67 = (unint64_t *)&v383->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
LABEL_94:
        kdebug_trace();
        v69 = (unsigned int **)(v368[60] + 472);
        v357 = v368[60];
        v70 = *v69;
        v71 = (uint64_t)(*(_QWORD *)(v357 + 480) - (_QWORD)*v69) >> 2;
        if (v5 <= v71)
        {
          v72 = (unsigned int **)(v368[60] + 472);
          if (v5 < v71)
            *(_QWORD *)(v357 + 480) = &v70[v5];
          if (!v5)
          {
LABEL_117:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 366, (uint64_t)"had_missing_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v79 = 0;
            v351 = 1;
            v5 = v365;
            goto LABEL_120;
          }
        }
        else
        {
          v72 = (unsigned int **)(v368[60] + 472);
          sub_20EAC24FC((uint64_t)v69, v5 - v71);
          v70 = *v72;
          v5 = v365;
        }
        v73 = v368[10];
        v74 = v368[7];
        v75 = 0x8F9C18F9C18F9C19 * ((v368[8] - v74) >> 3);
        if (a3)
        {
          v76 = (_QWORD *)(*a3 + 56);
          v77 = (uint64_t *)*v76;
          v78 = *(_DWORD *)(v74 + 328 * (v73 % v75));
          *v70 = v78;
          if (v77)
          {
            v79 = 0;
            v80 = 0;
            while (1)
            {
              v81 = v76;
              v82 = v77;
              do
              {
                while (v82[4])
                {
                  v81 = v82;
                  v82 = (uint64_t *)*v82;
                  if (!v82)
                    goto LABEL_109;
                }
                if (*((_DWORD *)v82 + 10) < v78)
                  ++v82;
                else
                  v81 = v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
LABEL_109:
              if (v81 == v76 || v81[4] || *((_DWORD *)v81 + 10) > v78 || !v81[6])
                break;
              if (v79 == v5 - 1)
                goto LABEL_117;
              v80 = ++v79 >= v5;
              v78 = *(_DWORD *)(v74 + 328 * ((v79 + v73) % v75));
              v70[v79] = v78;
            }
            v351 = v80;
          }
          else
          {
            v351 = 0;
            v79 = 0;
          }
        }
        else
        {
          v351 = 0;
          v79 = 0;
          *v70 = *(_DWORD *)(v74 + 328 * (v73 % v75));
        }
LABEL_120:
        v83 = v5 - v79;
        v84 = *(_QWORD *)(v357 + 296);
        v85 = (*(_QWORD *)(v357 + 304) - v84) >> 2;
        if (v5 - v79 <= v85)
        {
          if (v5 - v79 < v85)
            *(_QWORD *)(v357 + 304) = v84 + 4 * v83;
        }
        else
        {
          sub_20EAC24FC(v357 + 296, v5 - v79 - v85);
          v5 = v365;
        }
        v86 = *(_QWORD *)(v357 + 320);
        v87 = (*(_QWORD *)(v357 + 328) - v86) >> 3;
        if (v83 <= v87)
        {
          if (v83 < v87)
            *(_QWORD *)(v357 + 328) = v86 + 8 * v83;
        }
        else
        {
          sub_20E93D8FC(v357 + 320, v83 - v87);
          v5 = v365;
        }
        v88 = *(_QWORD *)(v357 + 344);
        v89 = (*(_QWORD *)(v357 + 352) - v88) >> 3;
        if (v83 <= v89)
        {
          v90 = (_QWORD *)(v357 + 344);
          if (v83 < v89)
            *(_QWORD *)(v357 + 352) = v88 + 8 * v83;
        }
        else
        {
          v90 = (_QWORD *)(v357 + 344);
          sub_20E93D8FC(v357 + 344, v83 - v89);
          v5 = v365;
        }
        v91 = *(_QWORD *)(v357 + 368);
        v92 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v357 + 376) - v91) >> 3);
        if (v83 <= v92)
        {
          if (v83 < v92)
            *(_QWORD *)(v357 + 376) = v91 + 40 * v83;
        }
        else
        {
          sub_20F103604((void **)(v357 + 368), v83 - v92);
          v5 = v365;
        }
        v93 = a3;
        if (v5 > v79)
        {
          v94 = v72;
          v95 = 0;
          do
          {
            v101 = v368[7];
            v102 = (v368[10] + v79) % (0x8F9C18F9C18F9C19 * ((v368[8] - v101) >> 3));
            v103 = (unsigned int *)(v101 + 328 * v102);
            v104 = *v103;
            if (v93)
            {
              v105 = *(_QWORD *)(*v93 + 56);
              if (v105)
              {
                v106 = *v93 + 56;
                do
                {
                  while (*(_QWORD *)(v105 + 32))
                  {
                    v106 = v105;
                    v105 = *(_QWORD *)v105;
                    if (!v105)
                      goto LABEL_148;
                  }
                  if (*(_DWORD *)(v105 + 40) < v104)
                    v105 += 8;
                  else
                    v106 = v105;
                  v105 = *(_QWORD *)v105;
                }
                while (v105);
LABEL_148:
                if (v106 != *v93 + 56 && !*(_QWORD *)(v106 + 32) && *(_DWORD *)(v106 + 40) <= v104)
                {
                  if (*(_QWORD *)(v106 + 48))
                  {
                    v350 = v94;
                    v107 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 376, (uint64_t)"!vio_state_exists(frame_id)", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v93 = a3;
                    v94 = v350;
                    if (v107)
                      abort();
                  }
                }
              }
            }
            (*v94)[v79] = v104;
            *(_DWORD *)(*(_QWORD *)(v357 + 296) + 4 * v95) = v104;
            v96 = 8 * v95;
            *(_QWORD *)(*(_QWORD *)(v357 + 320) + v96) = *((_QWORD *)v103 + 1);
            *(_QWORD *)(*v90 + v96) = *((_QWORD *)v103 + 2);
            v97 = v101 + 328 * v102;
            v98 = *(_QWORD *)(v357 + 368) + 40 * v95;
            v99 = *(_OWORD *)(v97 + 288);
            v100 = *(_OWORD *)(v97 + 304);
            *(_QWORD *)(v98 + 32) = *(_QWORD *)(v97 + 320);
            *(_OWORD *)v98 = v99;
            *(_OWORD *)(v98 + 16) = v100;
            ++v79;
            ++v95;
          }
          while (v95 != v83);
        }
        v355 = *(_QWORD *)(v357 + 296);
        v358 = *(_QWORD *)(v357 + 304);
        v108 = v358 - v355;
        if (v351 & 1 | (v358 == v355)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 389, (uint64_t)"!frame_ids.empty() && had_missing_state", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v352 = v358 - v355;
        v363 = v108 >> 2;
        v109 = v365 - 1;
        v110 = (_QWORD *)(v368[60] + 96);
        v366 = v365 - (v108 >> 2);
        sub_20FD30C88((uint64_t)v110, 0, 0, v108 >> 2);
        v111 = v368;
        if (v108 >> 2)
        {
          v112 = 0;
          v113 = -v363;
          do
          {
            v114 = v368[7]
                 + 328 * ((v365 + v113 + v368[10]) % (0x8F9C18F9C18F9C19 * ((uint64_t)(v368[8] - v368[7]) >> 3)));
            v115 = *v110 + v112;
            v116 = *(_OWORD *)(v114 + 120);
            v117 = *(_OWORD *)(v114 + 152);
            v118 = *(_OWORD *)(v114 + 104);
            *(_OWORD *)(v115 + 80) = *(_OWORD *)(v114 + 136);
            *(_OWORD *)(v115 + 96) = v117;
            *(_OWORD *)(v115 + 48) = v118;
            *(_OWORD *)(v115 + 64) = v116;
            v119 = *(_OWORD *)(v114 + 184);
            v120 = *(_OWORD *)(v114 + 200);
            v121 = *(_OWORD *)(v114 + 168);
            *(_QWORD *)(v115 + 160) = *(_QWORD *)(v114 + 216);
            *(_OWORD *)(v115 + 128) = v119;
            *(_OWORD *)(v115 + 144) = v120;
            *(_OWORD *)(v115 + 112) = v121;
            v122 = *(_OWORD *)(v114 + 56);
            v123 = *(_OWORD *)(v114 + 88);
            *(_OWORD *)(v115 + 16) = *(_OWORD *)(v114 + 72);
            *(_OWORD *)(v115 + 32) = v123;
            *(_OWORD *)v115 = v122;
            v112 += 168;
            _CF = __CFADD__(v113++, 1);
          }
          while (!_CF);
        }
        v124 = v368[60];
        if ((_QWORD *)(v124 + 624) == v368 + 27)
        {
LABEL_182:
          v141 = *((_OWORD *)v111 + 15);
          *(_QWORD *)(v124 + 664) = v111[32];
          *(_OWORD *)(v124 + 648) = v141;
          if (v366)
            v142 = v366 - 1;
          else
            v142 = 0;
          sub_20F09CBA0(v111 + 7, v111[60] + 512, v142, v109);
          v143 = v368[60];
          v144 = *v360;
          v145 = *(_QWORD *)(v143 + 120);
          v146 = *(_QWORD *)(v143 + 128) - v145;
          if (v146 < 1)
          {
            v149 = v360;
          }
          else
          {
            v147 = *(_QWORD *)(*(_QWORD *)v144 + 8);
            v148 = v146 / 0x680uLL + 1;
            do
            {
              v145 = sub_20EB8200C(v145, v147) + 1664;
              --v148;
            }
            while (v148 > 1);
            v149 = v360;
            v144 = *v360;
          }
          v150 = 69;
          if (!*((_BYTE *)v368 + 1168))
            v150 = 70;
          v151 = v368[v150];
          if (v368[22] >= v151)
            v152 = v151;
          else
            v152 = v368[22];
          v153 = v149[1];
          if (v153 != v144)
          {
            v154 = 0;
            do
            {
              v155 = *(_QWORD *)(v368[14] + 168 * v154 + 24) - *(_QWORD *)(v368[14] + 168 * v154 + 16);
              if (v155)
              {
                v156 = 0;
                v157 = v155 >> 8;
                do
                {
                  v158 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v368[60] + 48) + 24 * v154)
                                  + 520 * v156);
                  sub_20F1796A0((_QWORD *)(v368[14] + 168 * v154), v158, (uint64_t)(v158 + 62), v366, v109, v152, v156);
                  v159 = v368[17];
                  if (v368[18] != v159)
                  {
                    v160 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v368[60] + 72) + 24 * v154)
                                    + 520 * v156);
                    sub_20F187678((_QWORD *)(v159 + 168 * v154), v160, (uint64_t)(v160 + 62), v366, v109, v152, v156);
                  }
                  ++v156;
                }
                while (v157 != v156);
                v144 = *v360;
                v153 = v360[1];
              }
              ++v154;
            }
            while (v154 < (v153 - v144) >> 3);
          }
          v372 = 0;
          v373 = 0;
          v374 = 0;
          if (v355 == v358)
          {
            v361 = 0;
            v163 = 0;
            v162 = v363;
            v164 = v365;
            v161 = v358 - v355;
            if (v366 >= v365)
              goto LABEL_216;
          }
          else
          {
            v161 = v358 - v355;
            v162 = v363;
            if (v352 >= 0x1FFFFFFFFFFFFFFDLL)
              sub_20E867F44();
            v163 = operator new(8 * v352);
            v372 = v163;
            v374 = (char *)&v163[8 * v363];
            bzero(v163, 8 * v352);
            v361 = (char *)&v163[2 * v352];
            v373 = v361;
            v164 = v365;
            if (v366 >= v365)
            {
LABEL_216:
              sub_20F0F37E8(&__p, v162);
              if (v366 < v164)
              {
                v181 = v366;
                v182 = *((unsigned __int8 *)v368 + 586);
                v183 = v182;
                do
                {
                  v184 = v181 - v366;
                  if (v183)
                    v163[8 * v184 + 6] &= ~0x20u;
                  v185 = (_QWORD *)v368[215];
                  if (v185)
                  {
                    v186 = vcvtad_u64_f64(*(double *)(v368[7]+ 328* ((v368[10] + v181)% (0x8F9C18F9C18F9C19 * ((uint64_t)(v368[8] - v368[7]) >> 3)))+ 8)* 1000.0);
                    v187 = v368 + 215;
                    do
                    {
                      v188 = v185[4];
                      _CF = v188 >= v186;
                      if (v188 >= v186)
                        v190 = v185;
                      else
                        v190 = v185 + 1;
                      if (_CF)
                        v187 = v185;
                      v185 = (_QWORD *)*v190;
                    }
                    while (*v190);
                    if (v187 != v368 + 215 && v187[4] <= v186)
                    {
                      if (0xAAAAAAAAAAAAAAABLL * ((v371 - (_BYTE *)__p) >> 3) <= v184)
                        goto LABEL_465;
                      v191 = (char *)__p + 24 * v184;
                      if (v191 != v187 + 5)
                      {
                        sub_20F103878(v191, (char *)v187[5], (char *)v187[6], 0x8E38E38E38E38E39 * ((uint64_t)(v187[6] - v187[5]) >> 4));
                        v182 = *((unsigned __int8 *)v368 + 586);
                      }
                      if (v182)
                      {
                        if (0xAAAAAAAAAAAAAAABLL * ((v371 - (_BYTE *)__p) >> 3) <= v184)
LABEL_465:
                          sub_20EDB40C4();
                        v192 = *((_QWORD *)__p + 3 * v184);
                        if (*(_BYTE *)v192 && fabs(*(double *)(v192 + 8)) < *((double *)v368 + 76))
                          v163[8 * v184 + 6] |= 0x20u;
                        v182 = 1;
                        v183 = 1;
                      }
                      else
                      {
                        v183 = 0;
                      }
                    }
                  }
                  ++v181;
                }
                while (v181 != v365);
              }
              sub_20F103A10((_QWORD *)(v368[60] + 240), (char *)v163, v361, (v361 - (char *)v163) >> 5);
              sub_20F103B5C(v368[60] + 264, (char **)__p, (uint64_t)v371, 0xAAAAAAAAAAAAAAABLL * ((v371 - (_BYTE *)__p) >> 3));
              v193 = v368[37];
              v15 = v365;
              v194 = v368[33];
              if (!v193)
                v193 = (v368[34] - v194) >> 3;
              *(_BYTE *)(v368[60] + 504) = *(_BYTE *)(v194 + 8 * v193 - 4);
              kdebug_trace();
              sub_20F0F10C4(&v369);
              if (**(int **)(v369 + 56) > 3
                || (v195 = *(unsigned __int8 *)(v369 + 72),
                    v196 = sub_20E8C31DC(v369, "OSLogSurrogateAppender", 1, 0),
                    v197 = v196,
                    !v195)
                && !v196)
              {
LABEL_454:
                v343 = (char *)__p;
                if (__p)
                {
                  v344 = v371;
                  v345 = __p;
                  if (v371 != __p)
                  {
                    v346 = v371;
                    do
                    {
                      v348 = (void *)*((_QWORD *)v346 - 3);
                      v346 -= 24;
                      v347 = v348;
                      if (v348)
                      {
                        *((_QWORD *)v344 - 2) = v347;
                        operator delete(v347);
                      }
                      v344 = v346;
                    }
                    while (v346 != v343);
                    v345 = __p;
                  }
                  v371 = v343;
                  operator delete(v345);
                }
                if (v372)
                  operator delete(v372);
                return v15 >= v353;
              }
              v375 = &v369;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v377 = std::chrono::system_clock::now().__d_.__rep_;
              v378 = 3;
              v379 = "unknown file";
              v380 = 492;
              v382 = 0;
              v383 = 0;
              v381 = "unknown function";
              v198 = (_QWORD *)v368[60];
              v199 = (char **)v198[6];
              v200 = (char **)v198[7];
              if (v199 != v200)
              {
                v201 = 0;
                v202 = (char **)v198[6];
                while (1)
                {
                  v204 = *v202;
                  v203 = v202[1];
                  if (*v202 != v203)
                  {
                    v205 = v203 - v204 - 520;
                    if (v205 >= 0x208)
                    {
                      v207 = 0;
                      v208 = v205 / 0x208 + 1;
                      v206 = &v204[520 * (v208 & 0xFFFFFFFFFFFFFELL)];
                      v209 = v208 & 0xFFFFFFFFFFFFFELL;
                      do
                      {
                        v201 += *(_QWORD *)v204;
                        v207 += *((_QWORD *)v204 + 65);
                        v204 += 1040;
                        v209 -= 2;
                      }
                      while (v209);
                      v201 += v207;
                      if (v208 == (v208 & 0xFFFFFFFFFFFFFELL))
                        goto LABEL_249;
                    }
                    else
                    {
                      v206 = *v202;
                    }
                    do
                    {
                      v201 += *(_QWORD *)v206;
                      v206 += 520;
                    }
                    while (v206 != v203);
                  }
LABEL_249:
                  v202 += 3;
                  if (v202 == v200)
                    goto LABEL_333;
                }
              }
              v201 = 0;
LABEL_333:
              v254 = (char **)v198[9];
              v255 = (char **)v198[10];
              if (v254 != v255)
              {
                v256 = 0;
                while (1)
                {
                  v258 = *v254;
                  v257 = v254[1];
                  if (*v254 != v257)
                  {
                    v259 = v257 - v258 - 520;
                    if (v259 >= 0x208)
                    {
                      v261 = 0;
                      v262 = v259 / 0x208 + 1;
                      v260 = &v258[520 * (v262 & 0xFFFFFFFFFFFFFELL)];
                      v263 = v262 & 0xFFFFFFFFFFFFFELL;
                      do
                      {
                        v256 += *(_QWORD *)v258;
                        v261 += *((_QWORD *)v258 + 65);
                        v258 += 1040;
                        v263 -= 2;
                      }
                      while (v263);
                      v256 += v261;
                      if (v262 == (v262 & 0xFFFFFFFFFFFFFELL))
                        goto LABEL_335;
                    }
                    else
                    {
                      v260 = *v254;
                    }
                    do
                    {
                      v256 += *(_QWORD *)v260;
                      v260 += 520;
                    }
                    while (v260 != v257);
                  }
LABEL_335:
                  v254 += 3;
                  if (v254 == v255)
                    goto LABEL_345;
                }
              }
              v256 = 0;
LABEL_345:
              v264 = *v199;
              v265 = *v375;
              v359 = *v375;
              if (*(char *)(*v375 + 39) < 0)
              {
                v267 = *(const char **)(v265 + 16);
                v266 = *(_QWORD *)(v265 + 24);
              }
              else
              {
                v266 = *(unsigned __int8 *)(*v375 + 39);
                v267 = (const char *)(*v375 + 16);
              }
              v356 = *v375 + 16;
              v362 = (int *)v198[37];
              v364 = v198[38];
              v367 = *((_QWORD *)v264 + 1);
              v268 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v386);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v386);
                if ((_BYTE)v387 && (v386[23] & 0x80000000) != 0)
                  operator delete(*(void **)v386);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v269 = byte_254A4A4F8;
              else
                v269 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v270 = byte_254A4A4F8[23];
              else
                v270 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v386 = os_log_create(v269, v267);
              v271 = &v386[8];
              if (v270 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v270 >= 0x17)
              {
                v272 = v267;
                v273 = v197;
                v274 = v195;
                v275 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v270 | 7) != 0x17)
                  v275 = v270 | 7;
                v276 = v275 + 1;
                v271 = operator new(v275 + 1);
                *(_QWORD *)&v386[16] = v270;
                *(_QWORD *)&v387 = v276 | 0x8000000000000000;
                *(_QWORD *)&v386[8] = v271;
                v195 = v274;
                v197 = v273;
                v267 = v272;
              }
              else
              {
                BYTE7(v387) = v270;
                if (!v270)
                {
LABEL_363:
                  v271[v270] = 0;
                  BYTE8(v387) = 1;
                  v277 = (void **)&v388;
                  if (v266 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v266 >= 0x17)
                  {
                    v278 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v266 | 7) != 0x17)
                      v278 = v266 | 7;
                    v279 = v278 + 1;
                    v277 = (void **)operator new(v278 + 1);
                    v389 = v266;
                    v390 = v279 | 0x8000000000000000;
                    v388 = v277;
                  }
                  else
                  {
                    HIBYTE(v390) = v266;
                    if (!v266)
                      goto LABEL_371;
                  }
                  memmove(v277, v267, v266);
LABEL_371:
                  *((_BYTE *)v277 + v266) = 0;
                  v391 = 1;
                  v280 = *(NSObject **)v386;
                  if (SHIBYTE(v390) < 0)
                    operator delete(v388);
                  v15 = v365;
                  if (BYTE8(v387) && SBYTE7(v387) < 0)
                    operator delete(*(void **)&v386[8]);
                  if (*(_QWORD *)v386)
                    os_release(*(void **)v386);
                  if (v197 && *(_QWORD *)(v197 + 24))
                  {
                    v281 = _os_log_pack_size();
                    v282 = (std::__shared_weak_count_vtbl *)operator new(v281, (std::align_val_t)8uLL);
                    v283 = (std::__shared_weak_count *)operator new();
                    v284 = v283;
                    v283->__shared_owners_ = 0;
                    v285 = (unint64_t *)&v283->__shared_owners_;
                    v283->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v283->__shared_weak_owners_ = 0;
                    v283[1].__vftable = v282;
                    *(_QWORD *)v386 = v282;
                    *(_QWORD *)&v386[8] = v282;
                    *(_QWORD *)&v386[16] = v283;
                    do
                      v286 = __ldxr(v285);
                    while (__stxr(v286 + 1, v285));
                    v387 = 0uLL;
                    v388 = 0;
                    do
                      v287 = __ldaxr(v285);
                    while (__stlxr(v287 - 1, v285));
                    if (!v287)
                    {
                      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                      std::__shared_weak_count::__release_weak(v284);
                    }
                    v288 = *(_QWORD *)v386;
                    v289 = _os_log_pack_fill();
                    v290 = *v362;
                    v291 = *(_DWORD *)(v364 - 4);
                    *(_DWORD *)v289 = 134219008;
                    *(_QWORD *)(v289 + 4) = v201;
                    *(_WORD *)(v289 + 12) = 2048;
                    *(_QWORD *)(v289 + 14) = v256;
                    *(_WORD *)(v289 + 22) = 2048;
                    *(_QWORD *)(v289 + 24) = v367;
                    *(_WORD *)(v289 + 32) = 1024;
                    *(_DWORD *)(v289 + 34) = v290;
                    *(_WORD *)(v289 + 38) = 1024;
                    *(_DWORD *)(v289 + 40) = v291;
                    v292 = operator new();
                    v293 = *(unsigned __int8 *)(v359 + 39);
                    v294 = v356;
                    if ((v293 & 0x80u) != 0)
                    {
                      v294 = *(_QWORD *)(v359 + 16);
                      v293 = *(_QWORD *)(v359 + 24);
                    }
                    *(_QWORD *)v292 = v288;
                    *(_OWORD *)(v292 + 8) = *(_OWORD *)&v386[8];
                    *(_QWORD *)&v386[8] = 0;
                    *(_QWORD *)&v386[16] = 0;
                    *(_OWORD *)(v292 + 24) = v387;
                    v387 = 0uLL;
                    *(_QWORD *)(v292 + 40) = v294;
                    *(_QWORD *)(v292 + 48) = v293;
                    *(_BYTE *)(v292 + 56) = 1;
                    v384 = 0;
                    v385 = v292;
                    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v197 + 24) + 40))(*(_QWORD *)(v197 + 24), &v385);
                    v295 = v385;
                    v385 = 0;
                    v15 = v365;
                    if (v295)
                    {
                      v296 = *(std::__shared_weak_count **)(v295 + 32);
                      if (v296)
                      {
                        v297 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v298 = __ldaxr(v297);
                        while (__stlxr(v298 - 1, v297));
                        if (!v298)
                        {
                          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                          std::__shared_weak_count::__release_weak(v296);
                        }
                      }
                      v299 = *(std::__shared_weak_count **)(v295 + 16);
                      if (v299)
                      {
                        v300 = (unint64_t *)&v299->__shared_owners_;
                        do
                          v301 = __ldaxr(v300);
                        while (__stlxr(v301 - 1, v300));
                        if (!v301)
                        {
                          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                          std::__shared_weak_count::__release_weak(v299);
                        }
                      }
                      MEMORY[0x212BC6398](v295, 0x10F0C40B62ED6C6);
                      v302 = v384;
                      v384 = 0;
                      if (v302)
                      {
                        v303 = *(std::__shared_weak_count **)(v302 + 32);
                        if (v303)
                        {
                          v304 = (unint64_t *)&v303->__shared_owners_;
                          do
                            v305 = __ldaxr(v304);
                          while (__stlxr(v305 - 1, v304));
                          if (!v305)
                          {
                            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                            std::__shared_weak_count::__release_weak(v303);
                          }
                        }
                        v306 = *(std::__shared_weak_count **)(v302 + 16);
                        if (v306)
                        {
                          v307 = (unint64_t *)&v306->__shared_owners_;
                          do
                            v308 = __ldaxr(v307);
                          while (__stlxr(v308 - 1, v307));
                          if (!v308)
                          {
                            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                            std::__shared_weak_count::__release_weak(v306);
                          }
                        }
                        MEMORY[0x212BC6398](v302, 0x10F0C40B62ED6C6);
                      }
                    }
                    v309 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                    if (*((_QWORD *)&v387 + 1))
                    {
                      v310 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                      do
                        v311 = __ldaxr(v310);
                      while (__stlxr(v311 - 1, v310));
                      if (!v311)
                      {
                        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                        std::__shared_weak_count::__release_weak(v309);
                      }
                    }
                    v312 = *(std::__shared_weak_count **)&v386[16];
                    if (*(_QWORD *)&v386[16])
                    {
                      v313 = (unint64_t *)(*(_QWORD *)&v386[16] + 8);
                      do
                        v314 = __ldaxr(v313);
                      while (__stlxr(v314 - 1, v313));
                      if (!v314)
                      {
                        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                        std::__shared_weak_count::__release_weak(v312);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v280, OS_LOG_TYPE_INFO);
                    v315 = *v362;
                    v316 = *(_DWORD *)(v364 - 4);
                    *(_DWORD *)v386 = 134219008;
                    *(_QWORD *)&v386[4] = v201;
                    *(_WORD *)&v386[12] = 2048;
                    *(_QWORD *)&v386[14] = v256;
                    *(_WORD *)&v386[22] = 2048;
                    *(_QWORD *)&v387 = v367;
                    WORD4(v387) = 1024;
                    *(_DWORD *)((char *)&v387 + 10) = v315;
                    HIWORD(v387) = 1024;
                    LODWORD(v388) = v316;
                    v317 = (void *)_os_log_send_and_compose_impl();
                    if (v317)
                      free(v317);
                  }
                  if (v195)
                  {
                    v318 = v368[60];
                    v319 = *(char ***)(v318 + 48);
                    v320 = *(char ***)(v318 + 56);
                    if (v319 != v320)
                    {
                      v321 = 0;
                      v322 = *(char ***)(v318 + 48);
                      while (1)
                      {
                        v324 = *v322;
                        v323 = v322[1];
                        if (*v322 != v323)
                        {
                          v325 = v323 - v324 - 520;
                          if (v325 >= 0x208)
                          {
                            v327 = 0;
                            v328 = v325 / 0x208 + 1;
                            v326 = &v324[520 * (v328 & 0xFFFFFFFFFFFFFELL)];
                            v329 = v328 & 0xFFFFFFFFFFFFFELL;
                            do
                            {
                              v321 += *(_QWORD *)v324;
                              v327 += *((_QWORD *)v324 + 65);
                              v324 += 1040;
                              v329 -= 2;
                            }
                            while (v329);
                            v321 += v327;
                            if (v328 == (v328 & 0xFFFFFFFFFFFFFELL))
                              goto LABEL_426;
                          }
                          else
                          {
                            v326 = *v322;
                          }
                          do
                          {
                            v321 += *(_QWORD *)v326;
                            v326 += 520;
                          }
                          while (v326 != v323);
                        }
LABEL_426:
                        v322 += 3;
                        if (v322 == v320)
                          goto LABEL_436;
                      }
                    }
                    v321 = 0;
LABEL_436:
                    v330 = *(char ***)(v318 + 72);
                    v331 = *(char ***)(v318 + 80);
                    if (v330 != v331)
                    {
                      v332 = 0;
                      while (1)
                      {
                        v333 = *v330;
                        v334 = v330[1];
                        if (*v330 != v334)
                        {
                          v335 = v334 - v333 - 520;
                          if (v335 >= 0x208)
                          {
                            v337 = 0;
                            v338 = v335 / 0x208 + 1;
                            v336 = &v333[520 * (v338 & 0xFFFFFFFFFFFFFELL)];
                            v339 = v338 & 0xFFFFFFFFFFFFFELL;
                            do
                            {
                              v332 += *(_QWORD *)v333;
                              v337 += *((_QWORD *)v333 + 65);
                              v333 += 1040;
                              v339 -= 2;
                            }
                            while (v339);
                            v332 += v337;
                            if (v338 == (v338 & 0xFFFFFFFFFFFFFELL))
                              goto LABEL_438;
                          }
                          else
                          {
                            v336 = *v330;
                          }
                          do
                          {
                            v332 += *(_QWORD *)v336;
                            v336 += 520;
                          }
                          while (v336 != v334);
                        }
LABEL_438:
                        v330 += 3;
                        if (v330 == v331)
                          goto LABEL_448;
                      }
                    }
                    v332 = 0;
LABEL_448:
                    sub_20E8C003C((uint64_t)&v375, "Submitting a window to BA with %zu point tracks, %zu line tracks, and %zu frames (IDs %d...%d)", v321, v332, *((_QWORD *)*v319 + 1), **(_DWORD **)(v318 + 296), *(_DWORD *)(*(_QWORD *)(v318 + 304) - 4));
                    sub_20E863570((uint64_t)&v375);
                  }
                  sub_20E863570((uint64_t)&v375);
                  v340 = v383;
                  if (v383)
                  {
                    v341 = (unint64_t *)&v383->__shared_owners_;
                    do
                      v342 = __ldaxr(v341);
                    while (__stlxr(v342 - 1, v341));
                    if (!v342)
                    {
                      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                      std::__shared_weak_count::__release_weak(v340);
                    }
                  }
                  goto LABEL_454;
                }
              }
              memmove(v271, v269, v270);
              goto LABEL_363;
            }
          }
          v165 = v368[7];
          v166 = 0x8F9C18F9C18F9C19 * ((v368[8] - v165) >> 3);
          v167 = -(uint64_t)v162;
          v168 = v368[10] + v164;
          v169 = v368[60];
          v170 = v163 + 6;
          v171 = 96;
          do
          {
            v172 = *(_OWORD *)(v165 + 328 * ((v168 + v167) % v166) + 256);
            *(_OWORD *)(v170 - 3) = *(_OWORD *)(v165 + 328 * ((v168 + v167) % v166) + 268);
            *(_OWORD *)(v170 - 6) = v172;
            v173 = *(_QWORD *)(v169 + 96);
            if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v169 + 104) - v173) >> 3) == (v161 >> 2))
            {
              if (*((_BYTE *)v368 + 587))
              {
                v174 = (__int128 *)(v173 + v171);
                _Q1 = *v174;
                _D3 = *((_QWORD *)v174 + 1);
                __asm { FMLA            D2, D3, V1.D[1] }
                v180 = sqrt(_D2 + *((double *)v174 + 2) * *((double *)v174 + 2));
                if (v180 > *((double *)v368 + 74) && v180 < *((double *)v368 + 75))
                  *v170 &= ~0x20u;
              }
            }
            v170 += 8;
            v171 += 168;
            _CF = __CFADD__(v167++, 1);
          }
          while (!_CF);
          goto LABEL_216;
        }
        v125 = (char *)v368[27];
        v126 = (_BYTE *)v368[28];
        v127 = v126 - v125;
        v128 = 0xCCCCCCCCCCCCCCCDLL * ((v126 - v125) >> 5);
        v129 = *(_QWORD *)(v124 + 640);
        v130 = *(char **)(v124 + 624);
        if (0xCCCCCCCCCCCCCCCDLL * ((v129 - (uint64_t)v130) >> 5) < v128)
        {
          if (v130)
          {
            *(_QWORD *)(v124 + 632) = v130;
            operator delete(v130);
            v129 = 0;
            *(_QWORD *)(v124 + 624) = 0;
            *(_QWORD *)(v124 + 632) = 0;
            *(_QWORD *)(v124 + 640) = 0;
          }
          if (v128 > 0x199999999999999)
            sub_20E867F44();
          v131 = 0xCCCCCCCCCCCCCCCDLL * (v129 >> 5);
          v132 = 2 * v131;
          if (2 * v131 <= v128)
            v132 = 0xCCCCCCCCCCCCCCCDLL * ((v126 - v125) >> 5);
          if (v131 >= 0xCCCCCCCCCCCCCCLL)
            v133 = 0x199999999999999;
          else
            v133 = v132;
          if (v133 > 0x199999999999999)
            sub_20E867F44();
          v134 = (char *)operator new(160 * v133);
          v130 = v134;
          *(_QWORD *)(v124 + 624) = v134;
          v135 = (char **)(v124 + 632);
          *(_QWORD *)(v124 + 632) = v134;
          *(_QWORD *)(v124 + 640) = &v134[160 * v133];
          if (v126 != v125)
            memcpy(v134, v125, v127 - 4);
          goto LABEL_181;
        }
        v135 = (char **)(v124 + 632);
        v136 = *(_BYTE **)(v124 + 632);
        if (0xCCCCCCCCCCCCCCCDLL * ((v136 - v130) >> 5) >= v128)
        {
          if (v126 == v125)
          {
LABEL_181:
            *v135 = &v130[v127];
            v111 = v368;
            goto LABEL_182;
          }
          v138 = v127 - 4;
          v139 = *(void **)(v124 + 624);
          v140 = (char *)v368[27];
        }
        else
        {
          v137 = &v125[32 * ((v136 - v130) >> 5)];
          if (v136 != v130)
          {
            memmove(*(void **)(v124 + 624), (const void *)v368[27], v136 - v130 - 4);
            v130 = *v135;
          }
          v127 = v126 - v137;
          if (v126 == v137)
            goto LABEL_181;
          v138 = v127 - 4;
          v139 = v130;
          v140 = v137;
        }
        memmove(v139, v140, v138);
        goto LABEL_181;
      }
    }
    memmove(v28, v26, v27);
    goto LABEL_35;
  }
  sub_20F0F10C4(&v385);
  v15 = v365;
  if (**(int **)(v385 + 56) > 3)
    return v15 >= v353;
  v16 = *(unsigned __int8 *)(v385 + 72);
  v17 = sub_20E8C31DC(v385, "OSLogSurrogateAppender", 1, 0);
  v18 = v17;
  if (!v16 && v17 == 0)
    return v15 >= v353;
  v375 = &v385;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v377 = std::chrono::system_clock::now().__d_.__rep_;
  v378 = 3;
  v379 = "unknown file";
  v380 = 334;
  v382 = 0;
  v383 = 0;
  v381 = "unknown function";
  v20 = v385;
  v21 = v385 + 16;
  if (*(char *)(v385 + 39) < 0)
  {
    v23 = *(const char **)(v385 + 16);
    v22 = *(_QWORD *)(v385 + 24);
    v210 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v210 & 1) != 0)
      goto LABEL_259;
  }
  else
  {
    v22 = *(unsigned __int8 *)(v385 + 39);
    v23 = (const char *)(*v375 + 16);
    v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v24 & 1) != 0)
      goto LABEL_259;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v386);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v386);
    if ((_BYTE)v387 && (v386[23] & 0x80000000) != 0)
      operator delete(*(void **)v386);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_259:
  if (byte_254A4A4F8[23] >= 0)
    v211 = byte_254A4A4F8;
  else
    v211 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v212 = byte_254A4A4F8[23];
  else
    v212 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v386 = os_log_create(v211, v23);
  v213 = &v386[8];
  if (v212 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v212 >= 0x17)
  {
    v214 = v18;
    v215 = v23;
    v216 = v20;
    v217 = v16;
    v218 = v21;
    v219 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v212 | 7) != 0x17)
      v219 = v212 | 7;
    v220 = v219 + 1;
    v213 = operator new(v219 + 1);
    *(_QWORD *)&v386[16] = v212;
    *(_QWORD *)&v387 = v220 | 0x8000000000000000;
    *(_QWORD *)&v386[8] = v213;
    v21 = v218;
    v16 = v217;
    v20 = v216;
    v23 = v215;
    v18 = v214;
    goto LABEL_272;
  }
  BYTE7(v387) = v212;
  if (v212)
LABEL_272:
    memmove(v213, v211, v212);
  v213[v212] = 0;
  BYTE8(v387) = 1;
  v221 = (void **)&v388;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v22 >= 0x17)
  {
    v222 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v222 = v22 | 7;
    v223 = v222 + 1;
    v221 = (void **)operator new(v222 + 1);
    v389 = v22;
    v390 = v223 | 0x8000000000000000;
    v388 = v221;
    v15 = v365;
  }
  else
  {
    HIBYTE(v390) = v22;
    v15 = v365;
    if (!v22)
      goto LABEL_281;
  }
  memmove(v221, v23, v22);
LABEL_281:
  *((_BYTE *)v221 + v22) = 0;
  v391 = 1;
  v224 = *(NSObject **)v386;
  if (SHIBYTE(v390) < 0)
    operator delete(v388);
  if (BYTE8(v387) && SBYTE7(v387) < 0)
    operator delete(*(void **)&v386[8]);
  if (*(_QWORD *)v386)
    os_release(*(void **)v386);
  if (v18 && *(_QWORD *)(v18 + 24))
  {
    v225 = _os_log_pack_size();
    v226 = (std::__shared_weak_count_vtbl *)operator new(v225, (std::align_val_t)8uLL);
    v227 = (std::__shared_weak_count *)operator new();
    v228 = v227;
    v227->__shared_owners_ = 0;
    v229 = (unint64_t *)&v227->__shared_owners_;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v226;
    *(_QWORD *)v386 = v226;
    *(_QWORD *)&v386[8] = v226;
    *(_QWORD *)&v386[16] = v227;
    do
      v230 = __ldxr(v229);
    while (__stxr(v230 + 1, v229));
    v387 = 0uLL;
    v388 = 0;
    do
      v231 = __ldaxr(v229);
    while (__stlxr(v231 - 1, v229));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v228);
    }
    v232 = *(_QWORD *)v386;
    v233 = _os_log_pack_fill();
    *(_DWORD *)v233 = 134217984;
    *(_QWORD *)(v233 + 4) = v365;
    v234 = (char *)operator new();
    v235 = *(unsigned __int8 *)(v20 + 39);
    if ((v235 & 0x80u) == 0)
      v236 = v21;
    else
      v236 = *(_QWORD *)(v20 + 16);
    if ((v235 & 0x80u) != 0)
      v235 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)v234 = v232;
    *(_OWORD *)(v234 + 8) = *(_OWORD *)&v386[8];
    *(_QWORD *)&v386[8] = 0;
    *(_QWORD *)&v386[16] = 0;
    *(_OWORD *)(v234 + 24) = v387;
    v387 = 0uLL;
    *((_QWORD *)v234 + 5) = v236;
    *((_QWORD *)v234 + 6) = v235;
    v234[56] = 1;
    __p = 0;
    v372 = v234;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), &v372);
    v237 = v372;
    v372 = 0;
    v15 = v365;
    if (v237)
    {
      v238 = (std::__shared_weak_count *)*((_QWORD *)v237 + 4);
      if (v238)
      {
        v239 = (unint64_t *)&v238->__shared_owners_;
        do
          v240 = __ldaxr(v239);
        while (__stlxr(v240 - 1, v239));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
        }
      }
      v241 = (std::__shared_weak_count *)*((_QWORD *)v237 + 2);
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      MEMORY[0x212BC6398](v237, 0x10F0C40B62ED6C6);
      __p = 0;
    }
    v244 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
    if (*((_QWORD *)&v387 + 1))
    {
      v245 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    v247 = *(std::__shared_weak_count **)&v386[16];
    if (*(_QWORD *)&v386[16])
    {
      v248 = (unint64_t *)(*(_QWORD *)&v386[16] + 8);
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
  }
  else
  {
    os_log_type_enabled(v224, OS_LOG_TYPE_INFO);
    *(_DWORD *)v386 = 134217984;
    *(_QWORD *)&v386[4] = v15;
    v250 = (void *)_os_log_send_and_compose_impl();
    if (v250)
      free(v250);
  }
  if (v16)
  {
    sub_20E8C003C((uint64_t)&v375, "RunBAFilter has only %lu frames.", v15);
    sub_20E863570((uint64_t)&v375);
  }
  sub_20E863570((uint64_t)&v375);
  v251 = v383;
  if (v383)
  {
    v252 = (unint64_t *)&v383->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  return v15 >= v353;
}

void sub_20F0F5EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 152) && *(char *)(v32 - 153) < 0)
    operator delete(*(void **)(v32 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a32);
  sub_20E9DD680(&a26);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F0F61C0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  float64x2_t v21;
  unsigned int shared_owners;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t j;
  uint64_t v26;
  unsigned __int8 v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  float64x2_t v37;
  unsigned int v38;
  double v39;
  unsigned __int8 v40;
  uint64_t ii;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t k;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t m;
  uint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t n;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  _DWORD *v67;
  uint64_t v69;
  unint64_t v70;
  float64x2_t v72;
  _DWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[2];
  int v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;

  v3 = *(_QWORD **)(a1 + 480);
  if (v3[3])
  {
    v4 = (_QWORD *)v3[2];
    while (v4)
    {
      v63 = v4;
      v4 = (_QWORD *)*v4;
      v64 = (std::__shared_weak_count *)v63[6];
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      operator delete(v63);
    }
    v3[2] = 0;
    v5 = v3[1];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v3 + 8 * i) = 0;
    }
    v3[3] = 0;
    v3 = *(_QWORD **)(a1 + 480);
  }
  v74 = (_DWORD *)v3[37];
  v67 = (_DWORD *)v3[38];
  if (v74 != v67)
  {
    v72 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    do
    {
      v7 = a3[5];
      if (v7)
      {
        v8 = a3[3];
        v9 = *a3;
        v10 = (a3[1] - *a3) >> 5;
        while (*v74 != *(_DWORD *)(v9 + 32 * (v8 % v10)))
        {
          ++v8;
          if (!--v7)
            goto LABEL_14;
        }
        v69 = v9 + 32 * (v8 % v10);
        v11 = a2[1] - *a2;
        if (v11)
        {
LABEL_18:
          v12 = 0;
          v13 = v11 >> 3;
          if (v13 <= 1)
            v13 = 1;
          v70 = v13;
          while (1)
          {
            v77 = *a2;
            v14 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v12) + 8);
            if (*(_QWORD *)(*(_QWORD *)(*a2 + 8 * v12) + 16) != v14)
              break;
LABEL_21:
            if (++v12 == v70)
              goto LABEL_9;
          }
          v15 = 0;
          v75 = (uint64_t *)(*(_QWORD *)(v69 + 8) + 32 * v12 + 8);
          v76 = v12;
          while (2)
          {
            v16 = *v75;
            v17 = v14 + 1664 * v15;
            if (*(_BYTE *)(v17 + 1536))
              v18 = v17 + 96;
            else
              v18 = 0;
            v19 = (std::__shared_weak_count *)operator new(0x5B8uLL);
            v19->__shared_owners_ = 0;
            v20 = (unint64_t *)&v19->__shared_owners_;
            v19->__shared_weak_owners_ = 0;
            v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E9760;
            sub_20E972DB4((uint64_t)&v19[1], v18);
            memcpy(&v19[42].__shared_weak_owners_, (const void *)(v18 + 1000), 0x1B8uLL);
            shared_owners = v19[42].__shared_owners_;
            if (shared_owners == -1)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v24 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v26 = qword_254A6DE40;
                for (j = qword_254A6DE48; v26 != j; v26 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v26)(*(_QWORD *)(v26 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              }
              v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_119;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              shared_owners = v19[42].__shared_owners_;
              v23 = v16 + 72 * v15;
              if (shared_owners <= 7)
                goto LABEL_39;
            }
            else
            {
              v23 = v16 + 72 * v15;
              if (shared_owners > 7)
                goto LABEL_40;
LABEL_39:
              if (!shared_owners)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_119:
                abort();
              }
            }
LABEL_40:
            v21.f64[0] = *(float64_t *)(v23 + 64);
            v29 = *(float64x2_t *)(v23 + 32);
            v28 = *(float64x2_t *)(v23 + 48);
            v31 = *(int8x16_t *)v23;
            v30 = *(float64x2_t *)(v23 + 16);
            v32 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
            v33 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
            v34 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
            v35 = vextq_s8(v31, v31, 8uLL).u64[0];
            v36 = (int8x16_t)vabdq_f64(*(float64x2_t *)v23, (float64x2_t)v19[1].std::__shared_count);
            v37 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v72, (float64x2_t)vextq_s8(v36, v36, 8uLL)), (int32x4_t)vcgeq_f64(v72, vabdq_f64(v30, *(float64x2_t *)&v19[1].__shared_weak_owners_))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v72, vabdq_f64(v29, *(float64x2_t *)&v19[2].__shared_owners_)), (int32x4_t)vcgeq_f64(v72, vabdq_f64(v28,
                                                                                 (float64x2_t)v19[3].std::__shared_count)))));
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v37)) & 1) != 0
              || (*(_QWORD *)&v37.f64[0] = v19[3].__shared_weak_owners_, vabdq_f64(v21, v37).f64[0] > 1.0e-10))
            {
              v31.i64[1] = v35;
              v19[1].std::__shared_count = (std::__shared_count)v31;
              *(_QWORD *)&v30.f64[1] = v34;
              *(float64x2_t *)&v19[1].__shared_weak_owners_ = v30;
              *(_QWORD *)&v29.f64[1] = v33;
              *(float64x2_t *)&v19[2].__shared_owners_ = v29;
              *(_QWORD *)&v28.f64[1] = v32;
              v19[3].__shared_weak_owners_ = *(_QWORD *)&v21.f64[0];
              v19[3].std::__shared_count = (std::__shared_count)v28;
              v39 = *(double *)v23 * *(double *)(v23 + 32);
              *(double *)&v19[4].__vftable = 1.0 / *(double *)v23;
              *(double *)&v19[4].__shared_owners_ = -*(double *)(v23 + 8) / v39;
              *(double *)&v19[4].__shared_weak_owners_ = -(*(double *)(v23 + 32) * *(double *)(v23 + 16)
                                                         - *(double *)(v23 + 8) * *(double *)(v23 + 40))
                                                       / v39;
              v19[5].__vftable = 0;
              *(double *)&v19[5].__shared_owners_ = 1.0 / *(double *)(v23 + 32);
              *(double *)&v19[5].__shared_weak_owners_ = -*(double *)(v23 + 40) / *(double *)(v23 + 32);
              v19[6].__vftable = 0;
              v19[6].__shared_owners_ = 0;
              *(_OWORD *)&v19[6].__shared_weak_owners_ = xmmword_2102E3C70;
              v19[7].__shared_owners_ = 0x7FF8000000000000;
              LOBYTE(v19[7].__shared_weak_owners_) = 0;
              v38 = **(_DWORD **)(v77 + 8 * v76);
              if (v38 < 0x10000)
              {
LABEL_53:
                if (v15 >= 0x10000)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                  v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v46 = qword_254A6DE40;
                    for (k = qword_254A6DE48; v46 != k; v46 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v46)(*(_QWORD *)(v46 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                  }
                  v47 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_117;
                  qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                if (v38 >= 0x10000)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                  v48 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v50 = qword_254A6DE40;
                    for (m = qword_254A6DE48; v50 != m; v50 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v50)(*(_QWORD *)(v50 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                  }
                  v51 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_117;
                  qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                if (v15 >= 0x10000)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                  v52 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v54 = qword_254A6DE40;
                    for (n = qword_254A6DE48; v54 != n; v54 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v54)(*(_QWORD *)(v54 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                  }
                  v55 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_117;
                  qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                v56 = *v74;
                v57 = *(_QWORD *)(a1 + 480);
                v78[0] = 0;
                v78[1] = v56;
                v79 = (unsigned __int16)v15 | ((unsigned __int16)v38 << 16);
                v80 = v19 + 1;
                v81 = v19;
                do
                  v58 = __ldxr(v20);
                while (__stxr(v58 + 1, v20));
                sub_20F1048C8(v57, v78, (uint64_t)v78);
                v59 = v81;
                if (v81)
                {
                  v60 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                do
                  v62 = __ldaxr(v20);
                while (__stlxr(v62 - 1, v20));
                v12 = v76;
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
                ++v15;
                v14 = *(_QWORD *)(*(_QWORD *)(v77 + 8 * v76) + 8);
                if (v15 >= 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*(_QWORD *)(v77 + 8 * v76) + 16) - v14) >> 7))
                  goto LABEL_21;
                continue;
              }
            }
            else
            {
              v38 = **(_DWORD **)(v77 + 8 * v76);
              if (v38 < 0x10000)
                goto LABEL_53;
            }
            break;
          }
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v42 = qword_254A6DE40;
            for (ii = qword_254A6DE48; v42 != ii; v42 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v42)(*(_QWORD *)(v42 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v43 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_117:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          goto LABEL_53;
        }
      }
      else
      {
LABEL_14:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 515, (uint64_t)"state_and_intrinsic_pair", 24, (uint64_t)"Fail to find the state and instrinsic pair", 42, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v69 = 0;
        v11 = a2[1] - *a2;
        if (v11)
          goto LABEL_18;
      }
LABEL_9:
      ++v74;
    }
    while (v74 != v67);
  }
}

void sub_20F0F6D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t v30;

  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F0F6E38(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  const char *v28;
  uint64_t v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  __int128 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  int v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  __int128 *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  size_t v123;
  const char *v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  const char *v127;
  size_t v128;
  __int128 *v129;
  unint64_t v130;
  const char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void **v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  size_t v141;
  NSObject *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  os_log_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  const char *__src;
  uint64_t v182;
  uint64_t v183;
  void *__p;
  void *v185;
  char *v186;
  uint64_t *v187;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v189;
  int v190;
  const char *v191;
  int v192;
  const char *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  uint64_t v197;
  os_log_t v198;
  __int128 v199;
  __int128 v200;
  void **v201;
  size_t v202;
  unint64_t v203;
  char v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 1280) = *((_DWORD *)a2 + 166);
  v4 = a2 + 31;
  v5 = (_OWORD *)(a1 + 1288);
  v6 = *(_OWORD *)(a2 + 43);
  v8 = *(_OWORD *)(a2 + 37);
  v7 = *(_OWORD *)(a2 + 39);
  *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 1384) = v6;
  *(_OWORD *)(a1 + 1336) = v8;
  *(_OWORD *)(a1 + 1352) = v7;
  v9 = *(_OWORD *)(a2 + 51);
  v11 = *(_OWORD *)(a2 + 45);
  v10 = *(_OWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 1448) = v9;
  *(_OWORD *)(a1 + 1400) = v11;
  *(_OWORD *)(a1 + 1416) = v10;
  v13 = *(_OWORD *)(a2 + 55);
  v12 = *(_OWORD *)(a2 + 57);
  v14 = *(_OWORD *)(a2 + 53);
  *(_QWORD *)(a1 + 1512) = a2[59];
  *(_OWORD *)(a1 + 1480) = v13;
  *(_OWORD *)(a1 + 1496) = v12;
  *(_OWORD *)(a1 + 1464) = v14;
  v15 = *(_OWORD *)(a2 + 31);
  v16 = *(_OWORD *)(a2 + 35);
  *(_OWORD *)(a1 + 1304) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 1320) = v16;
  *(_OWORD *)(a1 + 1288) = v15;
  if ((uint64_t *)(a1 + 1288) == a2 + 31)
  {
    v20 = *(_OWORD *)(a2 + 65);
    v21 = *(_OWORD *)(a2 + 67);
    v22 = *(_OWORD *)(a2 + 69);
    *(_OWORD *)(a1 + 1604) = *(_OWORD *)((char *)a2 + 564);
    *(_OWORD *)(a1 + 1576) = v21;
    *(_OWORD *)(a1 + 1592) = v22;
    *(_OWORD *)(a1 + 1560) = v20;
  }
  else
  {
    *(_DWORD *)(a1 + 1552) = *((_DWORD *)a2 + 128);
    sub_20EE62010((_QWORD *)(a1 + 1520), (uint64_t *)a2[62], 0);
    v17 = v4[17];
    v18 = v4[18];
    v19 = v4[19];
    *(_OWORD *)((char *)v5 + 316) = *(_OWORD *)((char *)v4 + 316);
    v5[18] = v18;
    v5[19] = v19;
    v5[17] = v17;
    *(_DWORD *)(a1 + 1656) = *((_DWORD *)a2 + 154);
    sub_20EC1D1DC((_QWORD *)(a1 + 1624), (uint64_t *)a2[75], 0);
    *(_DWORD *)(a1 + 1696) = *((_DWORD *)a2 + 164);
    sub_20EC1D1DC((_QWORD *)(a1 + 1664), (uint64_t *)a2[80], 0);
  }
  v182 = a1;
  sub_20F0F10C4(&v196);
  if (**(int **)(v196 + 56) > 3)
    goto LABEL_91;
  v23 = *(unsigned __int8 *)(v196 + 72);
  v24 = sub_20E8C31DC(v196, "OSLogSurrogateAppender", 1, 0);
  v25 = v24;
  if (!v23 && !v24)
    goto LABEL_91;
  v187 = &v196;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v189 = std::chrono::system_clock::now().__d_.__rep_;
  v190 = 3;
  v191 = "unknown file";
  v192 = 549;
  v194 = 0;
  v195 = 0;
  v193 = "unknown function";
  v26 = v196;
  if (*(char *)(v196 + 39) < 0)
  {
    v28 = *(const char **)(v196 + 16);
    v27 = *(_QWORD *)(v196 + 24);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v196 + 39);
    v28 = (const char *)(*v187 + 16);
  }
  v29 = *a2;
  v180 = a2[1];
  v176 = v196 + 16;
  v177 = (int *)a2[25];
  v178 = a2[26];
  v179 = *((_DWORD *)a2 + 166);
  v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v198);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v198);
    if ((_BYTE)v200 && SHIBYTE(v199) < 0)
      operator delete(v198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v31 = byte_254A4A4F8;
  else
    v31 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8[23];
  else
    v32 = *(_QWORD *)&byte_254A4A4F8[8];
  __src = v28;
  v198 = os_log_create(v31, v28);
  v33 = &v199;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v34 = v23;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v33 = (__int128 *)operator new(v35 + 1);
    *((_QWORD *)&v199 + 1) = v32;
    *(_QWORD *)&v200 = v36 | 0x8000000000000000;
    *(_QWORD *)&v199 = v33;
    v34 = v23;
    goto LABEL_24;
  }
  BYTE7(v200) = v32;
  if (v32)
LABEL_24:
    memmove(v33, v31, v32);
  *((_BYTE *)v33 + v32) = 0;
  BYTE8(v200) = 1;
  v37 = (void **)&v201;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v27 >= 0x17)
  {
    v39 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v39 = v27 | 7;
    v40 = v39 + 1;
    v37 = (void **)operator new(v39 + 1);
    v202 = v27;
    v203 = v40 | 0x8000000000000000;
    v201 = v37;
  }
  else
  {
    HIBYTE(v203) = v27;
    if (!v27)
    {
      LOBYTE(v201) = 0;
      v204 = 1;
      v38 = v198;
      if ((SHIBYTE(v203) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  memmove(v37, __src, v27);
  *((_BYTE *)v37 + v27) = 0;
  v204 = 1;
  v38 = v198;
  if ((SHIBYTE(v203) & 0x80000000) == 0)
  {
LABEL_29:
    if (!BYTE8(v200))
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v201);
  if (!BYTE8(v200))
    goto LABEL_38;
LABEL_36:
  if (SBYTE7(v200) < 0)
    operator delete((void *)v199);
LABEL_38:
  if (v198)
    os_release(v198);
  v41 = 0xCF3CF3CF3CF3CF3DLL * ((v180 - v29) >> 3);
  if (v25 && *(_QWORD *)(v25 + 24))
  {
    v42 = _os_log_pack_size();
    v43 = operator new(v42, (std::align_val_t)8uLL);
    v44 = (std::__shared_weak_count *)operator new();
    v45 = v44;
    v44->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v44->__shared_weak_owners_ = 0;
    v44[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
    v198 = v43;
    *(_QWORD *)&v199 = v43;
    *((_QWORD *)&v199 + 1) = v44;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
    v200 = 0uLL;
    v201 = 0;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v45);
    }
    v49 = v198;
    v50 = _os_log_pack_fill();
    v51 = *v177;
    v52 = *(_DWORD *)(v178 - 4);
    *(_DWORD *)v50 = 67109888;
    *(_DWORD *)(v50 + 4) = v179;
    *(_WORD *)(v50 + 8) = 2048;
    *(_QWORD *)(v50 + 10) = v41;
    *(_WORD *)(v50 + 18) = 1024;
    *(_DWORD *)(v50 + 20) = v51;
    *(_WORD *)(v50 + 24) = 1024;
    *(_DWORD *)(v50 + 26) = v52;
    v53 = (char *)operator new();
    v54 = *(unsigned __int8 *)(v26 + 39);
    v55 = v176;
    if ((v54 & 0x80u) != 0)
    {
      v55 = *(_QWORD *)(v26 + 16);
      v54 = *(_QWORD *)(v26 + 24);
    }
    *(_QWORD *)v53 = v49;
    *(_OWORD *)(v53 + 8) = v199;
    v199 = 0uLL;
    *(_OWORD *)(v53 + 24) = v200;
    v200 = 0uLL;
    *((_QWORD *)v53 + 5) = v55;
    *((_QWORD *)v53 + 6) = v54;
    v53[56] = 1;
    v197 = 0;
    __p = v53;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &__p);
    v56 = __p;
    __p = 0;
    if (v56)
    {
      v57 = (std::__shared_weak_count *)*((_QWORD *)v56 + 4);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)v56 + 2);
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
      v63 = v197;
      v197 = 0;
      if (v63)
      {
        v64 = *(std::__shared_weak_count **)(v63 + 32);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = *(std::__shared_weak_count **)(v63 + 16);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    if (*((_QWORD *)&v200 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
    v76 = *v177;
    v77 = *(_DWORD *)(v178 - 4);
    v198 = (os_log_t)__PAIR64__(v179, 67109888);
    LOWORD(v199) = 2048;
    *(_QWORD *)((char *)&v199 + 2) = 0xCF3CF3CF3CF3CF3DLL * ((v180 - v29) >> 3);
    WORD5(v199) = 1024;
    HIDWORD(v199) = v76;
    LOWORD(v200) = 1024;
    *(_DWORD *)((char *)&v200 + 2) = v77;
    v78 = (void *)_os_log_send_and_compose_impl();
    if (v78)
      free(v78);
  }
  if (v34)
  {
    sub_20E8C003C((uint64_t)&v187, "Updating track index from an estimate (ID=%d) containing %zu frames (IDs %d...%d)", *((_DWORD *)a2 + 166), 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3), *(_DWORD *)a2[25], *(_DWORD *)(a2[26] - 4));
    sub_20E863570((uint64_t)&v187);
  }
  sub_20E863570((uint64_t)&v187);
  v79 = v195;
  if (!v195)
    goto LABEL_91;
  v80 = (unint64_t *)&v195->__shared_owners_;
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (v81)
  {
LABEL_91:
    __p = 0;
    v185 = 0;
    v186 = 0;
    v82 = *a2;
    if (a2[1] == *a2)
      goto LABEL_112;
    goto LABEL_92;
  }
  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
  std::__shared_weak_count::__release_weak(v79);
  __p = 0;
  v185 = 0;
  v186 = 0;
  v82 = *a2;
  if (a2[1] == *a2)
    goto LABEL_112;
LABEL_92:
  v83 = 0;
  v84 = 0;
  do
  {
    v94 = (__int128 *)(v82 + 168 * v84);
    if (v83 < v186)
    {
      v85 = *v94;
      v86 = v94[2];
      *((_OWORD *)v83 + 1) = v94[1];
      *((_OWORD *)v83 + 2) = v86;
      *(_OWORD *)v83 = v85;
      v87 = v94[3];
      v88 = v94[4];
      v89 = v94[6];
      *((_OWORD *)v83 + 5) = v94[5];
      *((_OWORD *)v83 + 6) = v89;
      *((_OWORD *)v83 + 3) = v87;
      *((_OWORD *)v83 + 4) = v88;
      v90 = v94[7];
      v91 = v94[8];
      v92 = v94[9];
      *((_QWORD *)v83 + 20) = *((_QWORD *)v94 + 20);
      *((_OWORD *)v83 + 8) = v91;
      *((_OWORD *)v83 + 9) = v92;
      *((_OWORD *)v83 + 7) = v90;
      v93 = v83 + 168;
    }
    else
    {
      v95 = (char *)__p;
      v96 = 0xCF3CF3CF3CF3CF3DLL * ((v83 - (_BYTE *)__p) >> 3);
      v97 = v96 + 1;
      if (v96 + 1 > 0x186186186186186)
        sub_20E867F44();
      if (0x9E79E79E79E79E7ALL * ((v186 - (_BYTE *)__p) >> 3) > v97)
        v97 = 0x9E79E79E79E79E7ALL * ((v186 - (_BYTE *)__p) >> 3);
      if (0xCF3CF3CF3CF3CF3DLL * ((v186 - (_BYTE *)__p) >> 3) >= 0xC30C30C30C30C3)
        v98 = 0x186186186186186;
      else
        v98 = v97;
      if (v98)
      {
        if (v98 > 0x186186186186186)
          sub_20E877A38();
        v99 = (char *)operator new(168 * v98);
      }
      else
      {
        v99 = 0;
      }
      v100 = &v99[168 * v96];
      v101 = *v94;
      v102 = v94[2];
      *((_OWORD *)v100 + 1) = v94[1];
      *((_OWORD *)v100 + 2) = v102;
      *(_OWORD *)v100 = v101;
      v103 = v94[3];
      v104 = v94[4];
      v105 = v94[6];
      *((_OWORD *)v100 + 5) = v94[5];
      *((_OWORD *)v100 + 6) = v105;
      *((_OWORD *)v100 + 3) = v103;
      *((_OWORD *)v100 + 4) = v104;
      v106 = v94[7];
      v107 = v94[8];
      v108 = v94[9];
      *((_QWORD *)v100 + 20) = *((_QWORD *)v94 + 20);
      *((_OWORD *)v100 + 8) = v107;
      *((_OWORD *)v100 + 9) = v108;
      *((_OWORD *)v100 + 7) = v106;
      v109 = v100;
      if (v83 != v95)
      {
        do
        {
          v110 = *(_OWORD *)(v83 - 168);
          v111 = *(_OWORD *)(v83 - 152);
          *(_OWORD *)(v109 - 136) = *(_OWORD *)(v83 - 136);
          *(_OWORD *)(v109 - 152) = v111;
          *(_OWORD *)(v109 - 168) = v110;
          v112 = *(_OWORD *)(v83 - 120);
          v113 = *(_OWORD *)(v83 - 104);
          v114 = *(_OWORD *)(v83 - 88);
          *(_OWORD *)(v109 - 72) = *(_OWORD *)(v83 - 72);
          *(_OWORD *)(v109 - 88) = v114;
          *(_OWORD *)(v109 - 104) = v113;
          *(_OWORD *)(v109 - 120) = v112;
          v115 = *(_OWORD *)(v83 - 56);
          v116 = *(_OWORD *)(v83 - 40);
          v117 = *(_OWORD *)(v83 - 24);
          *((_QWORD *)v109 - 1) = *((_QWORD *)v83 - 1);
          *(_OWORD *)(v109 - 24) = v117;
          *(_OWORD *)(v109 - 40) = v116;
          *(_OWORD *)(v109 - 56) = v115;
          v109 -= 168;
          v83 -= 168;
        }
        while (v83 != v95);
        v83 = v95;
      }
      v93 = v100 + 168;
      __p = v109;
      v185 = v100 + 168;
      v186 = &v99[168 * v98];
      if (v83)
        operator delete(v83);
    }
    v185 = v93;
    ++v84;
    v82 = *a2;
    v83 = v93;
  }
  while (v84 < 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3));
LABEL_112:
  if (sub_20F09D130((uint64_t *)(v182 + 56), (uint64_t *)&__p, a2 + 25))
    goto LABEL_204;
  sub_20F0F10C4(&v183);
  if (**(int **)(v183 + 56) > 4)
    goto LABEL_204;
  v118 = *(unsigned __int8 *)(v183 + 72);
  v119 = sub_20E8C31DC(v183, "OSLogSurrogateAppender", 1, 0);
  v120 = v119;
  if (!v118 && !v119)
    goto LABEL_204;
  v187 = &v183;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v189 = std::chrono::system_clock::now().__d_.__rep_;
  v190 = 4;
  v191 = "unknown file";
  v192 = 559;
  v194 = 0;
  v195 = 0;
  v193 = "unknown function";
  v121 = *v187;
  v122 = *v187 + 16;
  if (*(char *)(*v187 + 39) < 0)
  {
    v124 = *(const char **)(v121 + 16);
    v123 = *(_QWORD *)(v121 + 24);
    v126 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v126 & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v123 = *(unsigned __int8 *)(*v187 + 39);
    v124 = (const char *)(*v187 + 16);
    v125 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v125 & 1) != 0)
      goto LABEL_120;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v198);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v198);
    if ((_BYTE)v200 && SHIBYTE(v199) < 0)
      operator delete(v198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_120:
  if (byte_254A4A4F8[23] >= 0)
    v127 = byte_254A4A4F8;
  else
    v127 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v128 = byte_254A4A4F8[23];
  else
    v128 = *(_QWORD *)&byte_254A4A4F8[8];
  v198 = os_log_create(v127, v124);
  v129 = &v199;
  if (v128 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v128 >= 0x17)
  {
    v130 = v120;
    v131 = v124;
    v132 = v121;
    v133 = v118;
    v134 = v122;
    v135 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17)
      v135 = v128 | 7;
    v136 = v135 + 1;
    v129 = (__int128 *)operator new(v135 + 1);
    *((_QWORD *)&v199 + 1) = v128;
    *(_QWORD *)&v200 = v136 | 0x8000000000000000;
    *(_QWORD *)&v199 = v129;
    v122 = v134;
    v118 = v133;
    v121 = v132;
    v124 = v131;
    v120 = v130;
    goto LABEL_133;
  }
  BYTE7(v200) = v128;
  if (v128)
LABEL_133:
    memmove(v129, v127, v128);
  *((_BYTE *)v129 + v128) = 0;
  BYTE8(v200) = 1;
  v137 = (void **)&v201;
  if (v123 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v123 >= 0x17)
  {
    v138 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17)
      v138 = v123 | 7;
    v139 = v138 + 1;
    v137 = (void **)operator new(v138 + 1);
    v202 = v123;
    v203 = v139 | 0x8000000000000000;
    v201 = v137;
  }
  else
  {
    HIBYTE(v203) = v123;
    if (!v123)
      goto LABEL_142;
  }
  memmove(v137, v124, v123);
LABEL_142:
  *((_BYTE *)v137 + v123) = 0;
  v204 = 1;
  v140 = v198;
  if (SHIBYTE(v203) < 0)
    operator delete(v201);
  if (BYTE8(v200) && SBYTE7(v200) < 0)
    operator delete((void *)v199);
  if (v198)
    os_release(v198);
  if (v120 && *(_QWORD *)(v120 + 24))
  {
    v141 = _os_log_pack_size();
    v142 = operator new(v141, (std::align_val_t)8uLL);
    v143 = (std::__shared_weak_count *)operator new();
    v144 = v143;
    v143->__shared_owners_ = 0;
    v145 = (unint64_t *)&v143->__shared_owners_;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
    v198 = v142;
    *(_QWORD *)&v199 = v142;
    *((_QWORD *)&v199 + 1) = v143;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
    v200 = 0uLL;
    v201 = 0;
    do
      v147 = __ldaxr(v145);
    while (__stlxr(v147 - 1, v145));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v144);
    }
    v148 = v198;
    *(_WORD *)_os_log_pack_fill() = 0;
    v149 = operator new();
    v150 = *(unsigned __int8 *)(v121 + 39);
    if ((v150 & 0x80u) == 0)
      v151 = v122;
    else
      v151 = *(_QWORD *)(v121 + 16);
    if ((v150 & 0x80u) != 0)
      v150 = *(_QWORD *)(v121 + 24);
    *(_QWORD *)v149 = v148;
    *(_OWORD *)(v149 + 8) = v199;
    v199 = 0uLL;
    *(_OWORD *)(v149 + 24) = v200;
    v200 = 0uLL;
    *(_QWORD *)(v149 + 40) = v151;
    *(_QWORD *)(v149 + 48) = v150;
    *(_BYTE *)(v149 + 56) = 16;
    v196 = 0;
    v197 = v149;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v120 + 24) + 40))(*(_QWORD *)(v120 + 24), &v197);
    v152 = v197;
    v197 = 0;
    if (v152)
    {
      v153 = *(std::__shared_weak_count **)(v152 + 32);
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = *(std::__shared_weak_count **)(v152 + 16);
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      MEMORY[0x212BC6398](v152, 0x10F0C40B62ED6C6);
      v159 = v196;
      v196 = 0;
      if (v159)
      {
        v160 = *(std::__shared_weak_count **)(v159 + 32);
        if (v160)
        {
          v161 = (unint64_t *)&v160->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        v163 = *(std::__shared_weak_count **)(v159 + 16);
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
      }
    }
    v166 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
    if (*((_QWORD *)&v200 + 1))
    {
      v167 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
  else
  {
    os_log_type_enabled(v140, OS_LOG_TYPE_ERROR);
    LOWORD(v198) = 0;
    v172 = (void *)_os_log_send_and_compose_impl();
    if (v172)
      free(v172);
  }
  if (v118)
  {
    sub_20E8C003C((uint64_t)&v187, "Incoming estimate from BA has 0 overlap with current sliding window");
    sub_20E863570((uint64_t)&v187);
  }
  sub_20E863570((uint64_t)&v187);
  v173 = v195;
  if (v195)
  {
    v174 = (unint64_t *)&v195->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
LABEL_204:
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
}

void sub_20F0F7FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (*(_BYTE *)(v26 - 152) && *(char *)(v26 - 153) < 0)
    operator delete(*(void **)(v26 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a26);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0F8214(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int64x2_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float64x2_t v8;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  unsigned __int8 v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  _BOOL4 v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  double v47;
  _BOOL4 v48;
  uint64_t v49;
  double v50;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  int8x16_t v57;
  float64x2_t v61;
  int64x2_t v68;
  uint64_t v69;
  int64x2_t v70;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v76;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  BOOL v106;
  double v107;
  unsigned __int8 v109;
  const char *v110;
  size_t v111;
  _BYTE *v112;
  unint64_t v113;
  const char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *p_p;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  size_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  double v159;
  uint64_t v160;
  float64_t v161;
  float64x2_t v162;
  _BYTE object[24];
  __int128 v164;
  void *__p;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;
  __int128 v173;
  _BYTE v174[48];
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179[3];

  v10 = *(_DWORD *)(a1 + 1780);
  if (v10 >= *(_DWORD *)(a1 + 1008))
  {
    if (*(_BYTE *)(a1 + 1785) && *(_BYTE *)(a1 + 1784) == 1)
      return 1;
    v22 = *(_QWORD *)(a1 + 88);
    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 56);
      v24 = v23 + 328 * v22 - 328;
      if (v22 != 1)
      {
LABEL_17:
        v27 = *(double *)(v24 + 8);
        v28 = *(double *)(v23 + 328 * (v22 - 2) + 8);
        v30 = *a3;
        v29 = a3[1];
        if (*(_QWORD *)a3 || !*(_BYTE *)(a1 + 672))
        {
          v31 = *(char **)(a1 + 184);
          v32 = *(char **)(a1 + 192);
          if (v32 != v31)
          {
            v33 = 0x4FCACE213F2B3885 * ((v32 - v31) >> 3);
            do
            {
              v34 = v33 >> 1;
              v35 = (unsigned int *)&v31[616 * (v33 >> 1)];
              if (*v35 < v30 || *v35 == v30 && v35[1] < v29)
              {
                v31 = (char *)(v35 + 154);
                v34 = v33 + ~v34;
              }
              v33 = v34;
            }
            while (v34);
          }
          if (v31 == v32 || *(_DWORD *)v31 != v30 || *((_DWORD *)v31 + 1) != v29)
          {
            v36 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 860, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"Unfound camera stream", 21, (void (*)(void **))sub_21023DDB0);
            v31 = v32;
            if (v36)
              goto LABEL_149;
          }
          v37 = v31 + 8;
          if (!*(_BYTE *)(a1 + 1056))
            goto LABEL_36;
        }
        else
        {
          v37 = *(_QWORD **)(*(_QWORD *)(a1 + 208) + 240);
          if (!*(_BYTE *)(a1 + 1056))
          {
LABEL_36:
            sub_20F0F91AC((_BYTE *)a1, *(_DWORD *)v24, *a3, a3[1], (uint64_t)object);
            if (v172
              || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 744, (uint64_t)"opt_current_incremental_pose.has_value()", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              *(_OWORD *)&v174[16] = v168;
              *(_OWORD *)&v174[32] = v169;
              v175 = v170;
              v176 = v171;
              v173 = v166;
              *(_OWORD *)v174 = v167;
              goto LABEL_52;
            }
LABEL_149:
            abort();
          }
        }
        v38 = *(_QWORD *)(a1 + 88);
        if (v38)
        {
          v39 = *(_QWORD *)(a1 + 56);
          if (!*(_BYTE *)a1)
            goto LABEL_49;
        }
        else
        {
          v39 = *(_QWORD *)(a1 + 56);
          v38 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v39) >> 3);
          if (!*(_BYTE *)a1)
            goto LABEL_49;
        }
        v40 = *(_QWORD *)(a1 + 256);
        if (v40)
        {
          v41 = *(_DWORD *)(v39 + 328 * v38 - 328);
          v42 = *(_QWORD *)(a1 + 240);
          while (1)
          {
            v43 = *(_QWORD *)(a1 + 216)
                + 160 * (v42 % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5)));
            if (!*(_DWORD *)(v43 + 16) && *(_DWORD *)(v43 + 12) == v41)
              break;
            ++v42;
            if (!--v40)
              goto LABEL_49;
          }
          v44.f64[0] = *(float64_t *)(v43 + 48);
          v45.i64[0] = *(_QWORD *)(v43 + 56);
          v3.i64[0] = *(_QWORD *)(v43 + 64);
          v8 = *(float64x2_t *)(v43 + 72);
          v46 = *(int64x2_t *)(v43 + 88);
          v7 = *(double *)(v43 + 104);
          v47 = *(double *)(v43 + 112);
          v4 = *(double *)(v43 + 120);
          v5 = *(double *)(v43 + 128);
          v6 = *(double *)(v43 + 136);
          v162 = (float64x2_t)v46;
          if (*(_BYTE *)(v43 + 144))
          {
            v160 = *(_QWORD *)(v43 + 56);
            v161 = *(double *)(v43 + 48);
            v159 = *(double *)(v43 + 112);
            v48 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1629, (uint64_t)"opt_current_incremental_pose->type == cv_types::IncrementalCameraPose::DoFType::SixDoF", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v44.f64[0] = v161;
            v46 = (int64x2_t)v162;
            v47 = v159;
            v45.i64[0] = v160;
            if (v48)
              goto LABEL_149;
          }
          if (*(_QWORD *)a3)
          {
            v49 = *(_QWORD *)(**(_QWORD **)a2 + 8);
            v50 = *(double *)(v49 + 16);
            _D5 = *(double *)(v49 + 40);
            v52 = *(float64x2_t *)(v49 + 24);
            _D7 = *(double *)(v49 + 64);
            v54 = *(float64x2_t *)(v49 + 48);
            _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v49, (int64x2_t)v52);
            v56 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
            v57 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
            _D19 = *(double *)(v49 + 88);
            _Q20 = *(float64x2_t *)(v49 + 72);
            _Q25 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v49, (int64x2_t)v52);
            v61 = vmlsq_laneq_f64(vmulq_n_f64(_Q25, vnegq_f64(_Q20).f64[0]), _Q0, _Q20, 1);
            _Q0.f64[0] = v50;
            _Q0.f64[1] = _D5;
            _Q1 = vmlsq_lane_f64(v61, _Q0, _D19, 0);
            _Q0.f64[0] = *(float64_t *)(v49 + 56);
            __asm
            {
              FMLS            D2, D0, V20.D[1]
              FMLS            D2, D7, V19.D[0]
            }
            v68 = (int64x2_t)vextq_s8(v57, (int8x16_t)v56, 8uLL);
            v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * *a3) + 8) + 1664 * a3[1];
            v56.f64[0] = *(float64_t *)(v69 + 16);
            v70 = *(int64x2_t *)(v69 + 24);
            _D26 = *(_QWORD *)(v69 + 64);
            v72 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v69, v70);
            v56.f64[1] = *(float64_t *)(v69 + 40);
            v73 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v69, v70);
            _Q24 = vextq_s8((int8x16_t)v73, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v69 + 48), 1), 8uLL);
            _Q0.f64[0] = *(float64_t *)(v69 + 88);
            _Q22 = *(float64x2_t *)(v69 + 72);
            v76 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v72, vnegq_f64(_Q22).f64[0]), v73, _Q22, 1), v56, _Q0.f64[0], 0);
            _D28 = *(_QWORD *)(v69 + 56);
            __asm
            {
              FMLS            D20, D28, V22.D[1]
              FMLS            D20, D26, V0.D[0]
            }
            _Q22.f64[0] = *(float64_t *)(v69 + 48);
            *(_QWORD *)&v73.f64[1] = _Q24.i64[0];
            _Q24.i64[0] = _D26;
            _Q20.f64[1] = 1.0;
            v78 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q25, v68), vnegq_f64(_Q1).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q25, v68), _Q1, 1), v54, _D2, 0);
            __asm
            {
              FMLS            D25, D5, V1.D[1]
              FMLS            D25, D7, V2.D[0]
            }
            v79 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, *(double *)v49), v73, *(float64x2_t *)v49, 1), v56, v50), (float64x2_t)0, v76);
            v80 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q22.f64[0], *(double *)v49), (float64x2_t)_Q24.u64[1], *(float64x2_t *)v49, 1), (float64x2_t)_Q24.u64[0], v50), (float64x2_t)0, _Q20);
            v81 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v52.f64[0]), v73, v52, 1), v56, _D5), (float64x2_t)0, v76);
            v82 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q22.f64[0], v52.f64[0]), (float64x2_t)_Q24.u64[1], v52, 1), (float64x2_t)_Q24.u64[0], _D5), (float64x2_t)0, _Q20);
            _Q6 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v54.f64[0]), v73, v54, 1), v56, _D7), (float64x2_t)0, v76);
            v84 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q22.f64[0], v54.f64[0]), (float64x2_t)_Q24.u64[1], v54, 1), (float64x2_t)_Q24.u64[0], _D7), (float64x2_t)0, _Q20);
            v85 = vaddq_f64(v76, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, v78.f64[0]), v73, v78, 1), v56, _Q25.f64[0]));
            v86 = vaddq_f64(_Q20, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q22.f64[0], v78.f64[0]), (float64x2_t)_Q24.u64[1], v78, 1), (float64x2_t)_Q24.u64[0], _Q25.f64[0]));
            v87 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, v44.f64[0]), v82, v8, 1), v84, v47), (float64x2_t)0, v86);
            v88 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, *(double *)v45.i64), v82, v162.f64[0]), v84, v4), (float64x2_t)0, v86);
            v89 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v80, *(double *)v3.i64), v82, v162, 1), v84, v5), (float64x2_t)0, v86);
            v90 = vaddq_f64(v86, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v8.f64[0]), v82, v7), v84, v6));
            v91 = v86.f64[0];
            v92 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v44.f64[0]), v81, v8, 1), _Q6, v47), (float64x2_t)0, v85);
            v93 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v79, *(double *)v45.i64), v81, v162.f64[0]), _Q6, v4), (float64x2_t)0, v85);
            v94 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, *(double *)v3.i64), v81, v162, 1), _Q6, v5), (float64x2_t)0, v85);
            v95 = vaddq_f64(v85, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v79, v8.f64[0]), v81, v7), _Q6, v6));
            *(_QWORD *)&v91 ^= 0x8000000000000000;
            v96 = *(_QWORD *)&v85.f64[1] ^ 0x8000000000000000;
            v97 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v79, (int64x2_t)v81), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v85.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v85.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v79, (int64x2_t)v81)), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v91), (float64x2_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v82));
            *(_QWORD *)&_Q25.f64[0] = v96;
            __asm { FMLA            D24, D25, V6.D[1] }
            *(double *)_Q24.i64 = vmlad_n_f64(*(double *)_Q24.i64, v91, v84.f64[0]);
            v44 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v92, v79.f64[0]), v93, v81.f64[0]), v94, _Q6.f64[0]), (float64x2_t)0, v95);
            *(_QWORD *)&v47 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v79.f64[0]), v88, v81.f64[0]), v89, _Q6.f64[0]), (float64x2_t)0, v90);
            v45 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v92, v79, 1), v93, v81, 1), v94, _Q6, 1), (float64x2_t)0, v95);
            *(_QWORD *)&v4 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v87, v79, 1), v88, v81, 1), v89, _Q6, 1), (float64x2_t)0, v90);
            v3 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v92, v80.f64[0]), v93, v82.f64[0]), v94, v84.f64[0]), (float64x2_t)0, v95);
            *(_QWORD *)&v5 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v80.f64[0]), v88, v82.f64[0]), v89, v84.f64[0]), (float64x2_t)0, v90);
            v98 = vaddq_f64(v95, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v97.f64[0]), v93, v97, 1), v94, *(double *)_Q24.i64));
            *(_QWORD *)&v6 = *(_OWORD *)&vaddq_f64(v90, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, v97.f64[0]), v88, v97, 1), v89, *(double *)_Q24.i64));
            v7 = v98.f64[1];
            v8.f64[1] = v44.f64[1];
            v8.f64[0] = v98.f64[0];
            v46 = vzip2q_s64(v45, v3);
          }
LABEL_51:
          *(float64_t *)&v173 = v44.f64[0];
          *((_QWORD *)&v173 + 1) = v45.i64[0];
          *(float64x2_t *)&v174[8] = v8;
          *(int64x2_t *)&v174[24] = v46;
          *(_QWORD *)v174 = v3.i64[0];
          *(double *)&v174[40] = v7;
          *(double *)&v175 = v47;
          *((double *)&v175 + 1) = v4;
          *(double *)&v176 = v5;
          *((double *)&v176 + 1) = v6;
LABEL_52:
          *(_QWORD *)object = a3;
          v99 = sub_20F104CC0(a1 + 1736, (int *)a3, (_QWORD **)object)[3];
          v100 = *(_QWORD *)(a1 + 304);
          if (v100)
          {
            v101 = *(_QWORD *)(a1 + 288);
            v102 = *(_QWORD *)(a1 + 264);
            v103 = (*(_QWORD *)(a1 + 272) - v102) >> 3;
            v104 = v100 - 1;
            do
            {
              v105 = *(_BYTE *)(v102 + 8 * (v101 % v103) + 4) != 0;
              if (*(_BYTE *)(v102 + 8 * (v101 % v103) + 4))
                v106 = 1;
              else
                v106 = v104 == 0;
              --v104;
              ++v101;
            }
            while (!v106);
            v107 = v27 - v28;
            if (*(_BYTE *)(v99 + 72))
              return sub_20F0C9744(v99, (double *)&v173, v105, (v37[16] - v37[15]) >> 4, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 216), v107);
          }
          else
          {
            v105 = 0;
            v107 = v27 - v28;
            if (*(_BYTE *)(v99 + 72))
              return sub_20F0C9744(v99, (double *)&v173, v105, (v37[16] - v37[15]) >> 4, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 216), v107);
          }
          *(_OWORD *)object = v173;
          *(_QWORD *)&object[16] = *(_QWORD *)v174;
          v164 = *(_OWORD *)&v174[16];
          __p = *(void **)&v174[32];
          v166 = v175;
          *(_QWORD *)&v167 = v176;
          return sub_20F0CA9C4(v99, v37 + 12, v37 + 15, (double *)object, v107);
        }
LABEL_49:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 738, (uint64_t)"opt_P_CRef_to_Ccur.has_value()", 30, (uint64_t)"The pose must be valid", 22, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_149;
        }
        v44.f64[0] = 0.0;
        goto LABEL_51;
      }
      v25 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v23) >> 3);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(a1 + 64);
      v25 = 0x8F9C18F9C18F9C19 * ((v26 - v23) >> 3);
      v24 = v26 - 328;
    }
    v22 += v25;
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 1780) = v10 + 1;
  sub_20F0F10C4(&v177);
  if (**(int **)(v177 + 56) <= 2)
  {
    v11 = *(unsigned __int8 *)(v177 + 72);
    v12 = sub_20E8C31DC(v177, "OSLogSurrogateAppender", 1, 0);
    if (v11 || v12 != 0)
    {
      v14 = v12;
      *(_QWORD *)&v173 = &v177;
      *((std::chrono::steady_clock::time_point *)&v173 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)v174 = std::chrono::system_clock::now();
      *(_DWORD *)&v174[8] = 2;
      *(_QWORD *)&v174[16] = "unknown file";
      *(_DWORD *)&v174[24] = 707;
      *(_QWORD *)&v174[40] = 0;
      *(_QWORD *)&v175 = 0;
      *(_QWORD *)&v174[32] = "unknown function";
      v15 = v177;
      v16 = v177 + 16;
      if (*(char *)(v177 + 39) < 0)
      {
        v18 = *(const char **)(v177 + 16);
        v17 = *(_QWORD *)(v177 + 24);
        v109 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v109 & 1) != 0)
          goto LABEL_64;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v177 + 39);
        v18 = (const char *)(*(_QWORD *)v173 + 16);
        v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v19 & 1) != 0)
          goto LABEL_64;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v164 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_64:
      if (byte_254A4A4F8[23] >= 0)
        v110 = byte_254A4A4F8;
      else
        v110 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v111 = byte_254A4A4F8[23];
      else
        v111 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v110, v18);
      v112 = &object[8];
      if (v111 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v111 >= 0x17)
      {
        v113 = v14;
        v114 = v18;
        v115 = v15;
        v116 = v11;
        v117 = v16;
        v118 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v118 = v111 | 7;
        v119 = v118 + 1;
        v112 = operator new(v118 + 1);
        *(_QWORD *)&object[16] = v111;
        *(_QWORD *)&v164 = v119 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v112;
        v16 = v117;
        v11 = v116;
        v15 = v115;
        v18 = v114;
        v14 = v113;
      }
      else
      {
        BYTE7(v164) = v111;
        if (!v111)
        {
LABEL_78:
          v112[v111] = 0;
          BYTE8(v164) = 1;
          p_p = &__p;
          if (v17 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v17 >= 0x17)
          {
            v121 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v121 = v17 | 7;
            v122 = v121 + 1;
            p_p = operator new(v121 + 1);
            *(_QWORD *)&v166 = v17;
            *((_QWORD *)&v166 + 1) = v122 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v166) = v17;
            if (!v17)
              goto LABEL_86;
          }
          memmove(p_p, v18, v17);
LABEL_86:
          *((_BYTE *)p_p + v17) = 0;
          LOBYTE(v167) = 1;
          v123 = *(NSObject **)object;
          if (SHIBYTE(v166) < 0)
            operator delete(__p);
          if (BYTE8(v164) && SBYTE7(v164) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v14 && *(_QWORD *)(v14 + 24))
          {
            v124 = _os_log_pack_size();
            v125 = (std::__shared_weak_count_vtbl *)operator new(v124, (std::align_val_t)8uLL);
            v126 = (std::__shared_weak_count *)operator new();
            v127 = v126;
            v126->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v126->__shared_owners_;
            v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v126->__shared_weak_owners_ = 0;
            v126[1].__vftable = v125;
            *(_QWORD *)object = v125;
            *(_QWORD *)&object[8] = v125;
            *(_QWORD *)&object[16] = v126;
            do
              v129 = __ldxr(p_shared_owners);
            while (__stxr(v129 + 1, p_shared_owners));
            v164 = 0uLL;
            __p = 0;
            do
              v130 = __ldaxr(p_shared_owners);
            while (__stlxr(v130 - 1, p_shared_owners));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v127);
            }
            v131 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v132 = operator new();
            v133 = *(unsigned __int8 *)(v15 + 39);
            if ((v133 & 0x80u) == 0)
              v134 = v16;
            else
              v134 = *(_QWORD *)(v15 + 16);
            if ((v133 & 0x80u) != 0)
              v133 = *(_QWORD *)(v15 + 24);
            *(_QWORD *)v132 = v131;
            *(_OWORD *)(v132 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v132 + 24) = v164;
            v164 = 0uLL;
            *(_QWORD *)(v132 + 40) = v134;
            *(_QWORD *)(v132 + 48) = v133;
            *(_BYTE *)(v132 + 56) = 2;
            v178 = 0;
            v179[0] = v132;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), v179);
            v135 = v179[0];
            v179[0] = 0;
            if (v135)
            {
              v136 = *(std::__shared_weak_count **)(v135 + 32);
              if (v136)
              {
                v137 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              v139 = *(std::__shared_weak_count **)(v135 + 16);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
              v142 = v178;
              v178 = 0;
              if (v142)
              {
                v143 = *(std::__shared_weak_count **)(v142 + 32);
                if (v143)
                {
                  v144 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }
                v146 = *(std::__shared_weak_count **)(v142 + 16);
                if (v146)
                {
                  v147 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                MEMORY[0x212BC6398](v142, 0x10F0C40B62ED6C6);
              }
            }
            v149 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
            if (*((_QWORD *)&v164 + 1))
            {
              v150 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            v152 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v153 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
          }
          else
          {
            os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v155 = (void *)_os_log_send_and_compose_impl();
            if (v155)
              free(v155);
          }
          if (v11)
          {
            sub_20E8C003C((uint64_t)&v173, "Add a keyframe because it's in initialization period.");
            sub_20E863570((uint64_t)&v173);
          }
          sub_20E863570((uint64_t)&v173);
          v156 = (std::__shared_weak_count *)v175;
          if ((_QWORD)v175)
          {
            v157 = (unint64_t *)(v175 + 8);
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          return 1;
        }
      }
      memmove(v112, v110, v111);
      goto LABEL_78;
    }
  }
  return 1;
}

void sub_20F0F9084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_20F0F90C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_20E86E8C4((uint64_t *)(v53 - 168));
  sub_20E86E8C4((uint64_t *)(v53 - 176));
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F0F90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F0F910C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  MEMORY[0x212BC6398](v53, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F0F9138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E863714((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F0F9154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_20E863714((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F0F9168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a38 && a37 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a56);
  _Unwind_Resume(a1);
}

_BYTE *sub_20F0F91AC@<X0>(_BYTE *result@<X0>, int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  char v6;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v6 = *result;
  if (!*result)
    goto LABEL_17;
  v10 = result;
  if (a3 >= 0x10000
    && (result = (_BYTE *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| a4 >= 0x10000&& (result = (_BYTE *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result)
    || a3 >= 0x10000
    && (result = (_BYTE *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| a4 >= 0x10000&& (result = (_BYTE *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result))
  {
    abort();
  }
  v11 = v10[32];
  if (!v11)
  {
LABEL_16:
    v6 = 0;
LABEL_17:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 160) = v6;
    return result;
  }
  v12 = (unsigned __int16)a4 | ((unsigned __int16)a3 << 16);
  v13 = v10[30];
  while (1)
  {
    v14 = v10[27] + 160 * (v13 % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10[28] - v10[27]) >> 5)));
    if (v12 == *(_DWORD *)(v14 + 16) && *(_DWORD *)(v14 + 12) == a2)
      break;
    ++v13;
    if (!--v11)
      goto LABEL_16;
  }
  v15 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(a5 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(a5 + 112) = v15;
  v16 = *(_OWORD *)(v14 + 144);
  *(_OWORD *)(a5 + 128) = *(_OWORD *)(v14 + 128);
  *(_OWORD *)(a5 + 144) = v16;
  v17 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(a5 + 48) = v17;
  v18 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(a5 + 80) = v18;
  v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v14;
  *(_OWORD *)(a5 + 16) = v19;
  *(_BYTE *)(a5 + 160) = 1;
  return result;
}

void sub_20F0F9394(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t i;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  float64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  char v46;
  unsigned int *v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int *v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float v66;
  float v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  unsigned __int8 v71;
  float64x2_t v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  double v76;
  _BOOL4 v83;
  _BOOL4 v84;
  float64x2_t v85;
  int v86;
  uint64_t v87;
  size_t v88;
  unsigned __int8 v89;
  const char *v90;
  size_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  NSObject *v99;
  size_t v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  char *v142;
  int v144;
  unint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  char *v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  char *v158;
  unsigned __int8 v159;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v160;
  const char *v161;
  NSObject *v162;
  unsigned __int8 v163;
  uint64_t v164;
  const char *v165;
  NSObject *v166;
  const char *v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  char *v173;
  unsigned __int8 v174;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v175;
  const char *v176;
  NSObject *v177;
  unsigned __int8 v178;
  uint64_t v179;
  const char *v180;
  NSObject *v181;
  const char *v182;
  double **v183;
  float64x2_t **v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  int v192;
  _BOOL4 v193;
  int v194;
  int v195;
  uint64_t v196;
  size_t v197;
  const char *v198;
  unsigned __int8 v199;
  const char *v200;
  size_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  NSObject *v208;
  size_t v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unsigned int v246;
  void *v247;
  size_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *__src;
  uint64_t v252;
  int v253;
  uint64_t v254;
  char *category;
  char *categorya;
  unint64_t v257;
  int v258;
  int v259;
  _BOOL4 v260;
  uint64_t v261;
  unint64_t v262;
  double v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int v266;
  unint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  double v281[9];
  const char *v282;
  uint64_t *v283;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v284;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v285;
  int v286;
  const char *v287;
  int v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  void *v300;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v302;
  int v303;
  const char *v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  void *object;
  _BYTE v310[40];
  unint64_t v311;
  unint64_t v312;
  char v313;
  uint64_t v314;

  v314 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 672))
  {
    v2 = *(_QWORD **)(*(_QWORD *)(a1 + 208) + 240);
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
    {
LABEL_3:
      v4 = *(_QWORD *)(a1 + 56);
      v5 = v3;
      if (!*(_BYTE *)a1)
        return;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 184);
    v7 = *(_QWORD **)(a1 + 192);
    if (v7 == v6 || *v6)
    {
      v8 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 860, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"Unfound camera stream", 21, (void (*)(void **))sub_21023DDB0);
      v6 = v7;
      if (v8)
        goto LABEL_370;
    }
    v2 = v6 + 1;
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      goto LABEL_3;
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v4) >> 3);
  if (!*(_BYTE *)a1)
    return;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 256);
  if (!v9)
    return;
  v10 = v5 - 1;
  v11 = *(_DWORD *)(v4 + 328 * (v5 - 1));
  for (i = *(_QWORD *)(a1 + 240); ; ++i)
  {
    v13 = *(_QWORD *)(a1 + 216)
        + 160 * (i % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5)));
    if (!*(_DWORD *)(v13 + 16) && *(_DWORD *)(v13 + 12) == v11)
      break;
    if (!--v9)
      return;
  }
  v14 = *(double *)(v13 + 56);
  v15 = *(double *)(v13 + 64);
  v16 = *(double *)(v13 + 80);
  v17 = *(double *)(v13 + 88);
  v18 = *(double *)(v13 + 96);
  v20 = *(double *)(v13 + 112);
  v19 = *(double *)(v13 + 120);
  v21 = *(double *)(v13 + 128);
  v281[0] = *(double *)(v13 + 48);
  v281[1] = v14;
  v281[2] = v15;
  v281[3] = v16;
  v281[4] = v17;
  v281[5] = v18;
  v281[6] = v20;
  v281[7] = v19;
  v281[8] = v21;
  v270 = 0;
  v272 = 0u;
  v273 = 0;
  v280 = 0u;
  v279 = 0u;
  v278 = 0u;
  v277 = 0u;
  v276 = 0u;
  v275 = 0u;
  v269 = 0u;
  v268 = 0x3FF0000000000000;
  v271 = 0x3FF0000000000000;
  v274 = 0x3FF0000000000000;
  v263 = v281[0];
  if (*((_BYTE *)v2 + 496))
  {
    if (v3 <= 1)
      v3 -= 0x7063E7063E7063E7 * ((*(_QWORD *)(a1 + 64) - v4) >> 3);
    v22 = (uint64_t *)(v4 + 328 * (v3 - 2) + 56);
  }
  else
  {
    v22 = &v268;
  }
  v23 = v4 + 328 * v10;
  v24 = *(_QWORD *)(v23 + 224);
  v25 = *(_QWORD *)(v23 + 232);
  if (sub_20F0FB730(a1 + 1176, v2, v2 + 6))
    v28 = 16;
  else
    v28 = 0;
  v266 = v28;
  if (!*(_BYTE *)(a1 + 1176) || *(unsigned __int8 *)(a1 + 1492) | *(unsigned __int8 *)(a1 + 1457))
  {
    v267 = 0;
    v35 = 0;
    v36 = 0.0;
    goto LABEL_34;
  }
  v262 = v10;
  v30 = v2[15];
  v29 = v2[16];
  v31 = v29 - v30;
  if ((((_DWORD)v29 - (_DWORD)v30) & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include_private/VIO/Odometry/StationaryStateDetection.h", 142, (uint64_t)"cur_point_inliers.size() % kPointDimension == 0", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| ((*((_DWORD *)v2 + 26) - *((_DWORD *)v2 + 24)) & 8) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include_private/VIO/Odometry/StationaryStateDetection.h", 143, (uint64_t)"ref_point_inliers.size() % kPointDimension == 0", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_370:
    abort();
  }
  v32 = v2 + 12;
  v267 = (unint64_t)(v31 >> 3) >> 1;
  if (*(_BYTE *)(a1 + 1177) == 1)
  {
    v35 = sub_20EB80A30(v281, v2 + 15, v32, *(long double *)(a1 + 1224));
  }
  else if (*(_BYTE *)(a1 + 1177)
         || (v33 = (float64x2_t *)v2[15], v34 = v2[16] - (_QWORD)v33, (unint64_t)v34 < 0x10))
  {
    v35 = 0;
  }
  else
  {
    v35 = 0;
    v58 = (unint64_t)(v34 >> 3) >> 1;
    if (v58 <= 1)
      v58 = 1;
    v59 = (double *)(*v32 + 8);
    do
    {
      v60 = *(v59 - 1);
      v61 = v21 + v20 * v60 + v19 * *v59;
      v62 = 1.0 / v61;
      if (v61 == 0.0)
        v62 = 1.0;
      v63.f64[0] = (v15 + v263 * v60 + v14 * *v59) * v62;
      v63.f64[1] = (v18 + v16 * v60 + v17 * *v59) * v62;
      v64 = *v33++;
      v65 = vsubq_f64(v64, v63);
      if (sqrt(vaddvq_f64(vmulq_f64(v65, v65))) < *(double *)(a1 + 1224))
        ++v35;
      v59 += 2;
      --v58;
    }
    while (v58);
  }
  v66 = (float)(unint64_t)v35;
  v67 = *(float *)(a1 + 1232) * (float)v267;
  v264 = *(_QWORD *)(a1 + 1184);
  if (v24 == v25)
  {
    v71 = 1;
    v73 = 1;
    v74 = 1;
    v75 = 1;
  }
  else
  {
    *(_QWORD *)&v26.f64[0] = v22[17];
    v70 = *(float64x2_t *)(v22 + 15);
    *(_QWORD *)&v27.f64[0] = v22[11];
    v72 = *(float64x2_t *)(v22 + 9);
    v68 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    v69 = *(double *)(a1 + 1208);
    *(_QWORD *)&v70.f64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
    v71 = 1;
    v72.f64[1] = v68.f64[0];
    v73 = 1;
    v74 = 1;
    v75 = 1;
    do
    {
      v68.f64[0] = *(float64_t *)(v24 + 48);
      *(_QWORD *)&v76 = *(_OWORD *)&vsubq_f64(v68, v26);
      _Q16 = vsubq_f64(*(float64x2_t *)(v24 + 32), v70);
      _D19 = _Q16.f64[1];
      __asm { FMLA            D18, D19, V16.D[1] }
      if (vabdd_f64(sqrt(vmlad_n_f64(_D18, v76, v76)), *(double *)(a1 + 1216)) > *(double *)(a1 + 1200))
      {
        v71 = 0;
        v75 = 0;
      }
      _Q16.f64[0] = *(float64_t *)(v24 + 24);
      *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64(_Q16, v27);
      v68 = vsubq_f64(*(float64x2_t *)(v24 + 8), v72);
      v83 = fabs(v68.f64[0]) > v69;
      if (fabs(v68.f64[1]) > v69)
        v83 = 1;
      if (fabs(_Q16.f64[0]) > v69)
        v83 = 1;
      if (v83)
      {
        v73 = 0;
        v74 = 0;
      }
      v24 += 56;
    }
    while (v24 != v25);
  }
  v84 = v267 >= v264;
  v260 = v74 != 0;
  if ((unint64_t)v31 >= 0x10)
    v36 = v66 / (float)v267;
  else
    v36 = 0.0;
  sub_20F0F10C4(&v298);
  v10 = v262;
  if (**((int **)v298 + 7) <= 3)
  {
    v86 = *((unsigned __int8 *)v298 + 72);
    v257 = sub_20E8C31DC((uint64_t)v298, "OSLogSurrogateAppender", 1, 0);
    if (v86 || v257)
    {
      v253 = v86;
      v300 = &v298;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v302 = std::chrono::system_clock::now().__d_.__rep_;
      v303 = 3;
      v304 = "unknown file";
      LODWORD(v305) = 301;
      v308 = 0;
      v306 = "unknown function";
      v307 = 0;
      v87 = *(_QWORD *)v300;
      if (*(char *)(*(_QWORD *)v300 + 39) < 0)
      {
        v88 = *(_QWORD *)(v87 + 24);
        category = *(char **)(v87 + 16);
      }
      else
      {
        v88 = *(unsigned __int8 *)(*(_QWORD *)v300 + 39);
        category = (char *)(*(_QWORD *)v300 + 16);
      }
      v249 = *(_QWORD *)v300 + 16;
      v250 = *(_QWORD *)v300;
      v89 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if (v310[16] && (v310[15] & 0x80000000) != 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v90 = byte_254A4A4F8;
      else
        v90 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v91 = byte_254A4A4F8[23];
      else
        v91 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v90;
      object = os_log_create(v90, category);
      v92 = v310;
      if (v91 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v91 >= 0x17)
      {
        v248 = v88;
        v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v91 | 7) != 0x17)
          v93 = v91 | 7;
        v94 = v93 + 1;
        v92 = operator new(v93 + 1);
        *(_QWORD *)&v310[16] = v94 | 0x8000000000000000;
        *(_QWORD *)v310 = v92;
        *(_QWORD *)&v310[8] = v91;
        v88 = v248;
      }
      else
      {
        v310[23] = v91;
        if (!v91)
        {
LABEL_108:
          v92[v91] = 0;
          v310[24] = 1;
          v95 = &v310[32];
          if (v88 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v88 >= 0x17)
          {
            v96 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v88 | 7) != 0x17)
              v96 = v88 | 7;
            v97 = v88;
            v98 = v96 + 1;
            v95 = operator new(v96 + 1);
            v312 = v98 | 0x8000000000000000;
            *(_QWORD *)&v310[32] = v95;
            v311 = v97;
            v88 = v97;
          }
          else
          {
            HIBYTE(v312) = v88;
            if (!v88)
              goto LABEL_116;
          }
          memmove(v95, category, v88);
LABEL_116:
          v95[v88] = 0;
          v313 = 1;
          v99 = object;
          if (SHIBYTE(v312) < 0)
            operator delete(*(void **)&v310[32]);
          if (v310[24] && (v310[23] & 0x80000000) != 0)
            operator delete(*(void **)v310);
          if (object)
            os_release(object);
          if (v257 && *(_QWORD *)(v257 + 24))
          {
            v100 = _os_log_pack_size();
            v101 = (std::__shared_weak_count_vtbl *)operator new(v100, (std::align_val_t)8uLL);
            v102 = (std::__shared_weak_count *)operator new();
            v103 = v102;
            v102->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v102->__shared_owners_;
            v102->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v102->__shared_weak_owners_ = 0;
            v102[1].__vftable = v101;
            object = v101;
            *(_QWORD *)v310 = v101;
            *(_QWORD *)&v310[8] = v102;
            do
              v105 = __ldxr(p_shared_owners);
            while (__stxr(v105 + 1, p_shared_owners));
            memset(&v310[16], 0, 24);
            do
              v106 = __ldaxr(p_shared_owners);
            while (__stlxr(v106 - 1, p_shared_owners));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v103);
            }
            v247 = object;
            v107 = _os_log_pack_fill();
            *(_DWORD *)v107 = 67110656;
            *(_DWORD *)(v107 + 4) = v71;
            *(_WORD *)(v107 + 8) = 1024;
            *(_DWORD *)(v107 + 10) = v73;
            *(_WORD *)(v107 + 14) = 1024;
            *(_DWORD *)(v107 + 16) = v67 < v66;
            *(_WORD *)(v107 + 20) = 1024;
            *(_DWORD *)(v107 + 22) = v267 >= v264;
            *(_WORD *)(v107 + 26) = 2048;
            *(double *)(v107 + 28) = v36;
            *(_WORD *)(v107 + 36) = 2048;
            *(_QWORD *)(v107 + 38) = v35;
            *(_WORD *)(v107 + 46) = 2048;
            *(_QWORD *)(v107 + 48) = v267;
            v108 = operator new();
            v109 = *(unsigned __int8 *)(v250 + 39);
            v110 = v249;
            if ((v109 & 0x80u) != 0)
            {
              v110 = *(_QWORD *)(v250 + 16);
              v109 = *(_QWORD *)(v250 + 24);
            }
            *(_QWORD *)v108 = v247;
            *(_OWORD *)(v108 + 8) = *(_OWORD *)v310;
            *(_QWORD *)v310 = 0;
            *(_QWORD *)&v310[8] = 0;
            *(_OWORD *)(v108 + 24) = *(_OWORD *)&v310[16];
            *(_QWORD *)&v310[16] = 0;
            *(_QWORD *)&v310[24] = 0;
            *(_QWORD *)(v108 + 40) = v110;
            *(_QWORD *)(v108 + 48) = v109;
            *(_BYTE *)(v108 + 56) = 1;
            v292 = 0;
            v283 = (uint64_t *)v108;
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v257 + 24) + 40))(*(_QWORD *)(v257 + 24), &v283);
            v10 = v262;
            v111 = v283;
            v283 = 0;
            if (v111)
            {
              v112 = (std::__shared_weak_count *)v111[4];
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              v115 = (std::__shared_weak_count *)v111[2];
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
              v118 = v292;
              v292 = 0;
              if (v118)
              {
                v119 = (std::__shared_weak_count *)*((_QWORD *)v118 + 4);
                if (v119)
                {
                  v120 = (unint64_t *)&v119->__shared_owners_;
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
                v122 = (std::__shared_weak_count *)*((_QWORD *)v118 + 2);
                if (v122)
                {
                  v123 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                MEMORY[0x212BC6398](v118, 0x10F0C40B62ED6C6);
              }
            }
            v125 = *(std::__shared_weak_count **)&v310[24];
            if (*(_QWORD *)&v310[24])
            {
              v126 = (unint64_t *)(*(_QWORD *)&v310[24] + 8);
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v128 = *(std::__shared_weak_count **)&v310[8];
            if (*(_QWORD *)&v310[8])
            {
              v129 = (unint64_t *)(*(_QWORD *)&v310[8] + 8);
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
          }
          else
          {
            os_log_type_enabled(v99, OS_LOG_TYPE_INFO);
            LODWORD(object) = 67110656;
            HIDWORD(object) = v71;
            *(_WORD *)v310 = 1024;
            *(_DWORD *)&v310[2] = v73;
            *(_WORD *)&v310[6] = 1024;
            *(_DWORD *)&v310[8] = v67 < v66;
            *(_WORD *)&v310[12] = 1024;
            *(_DWORD *)&v310[14] = v267 >= v264;
            *(_WORD *)&v310[18] = 2048;
            *(double *)&v310[20] = v36;
            *(_WORD *)&v310[28] = 2048;
            *(_QWORD *)&v310[30] = v35;
            *(_WORD *)&v310[38] = 2048;
            v311 = v267;
            v131 = (void *)_os_log_send_and_compose_impl();
            v10 = v262;
            if (v131)
              free(v131);
          }
          if (v253)
          {
            sub_20E8C003C((uint64_t)&v300, "Accel: %d. Gyro: %d. Vision: %d (%d). Inlier fraction %f (%zu of %zu)", v71, v73, v67 < v66, v267 >= v264, v36, v35, v267);
            sub_20E863570((uint64_t)&v300);
          }
          sub_20E863570((uint64_t)&v300);
          v132 = v308;
          if (v308)
          {
            v133 = (unint64_t *)&v308->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v84 = v267 >= v264;
          goto LABEL_176;
        }
      }
      memmove(v92, __src, v91);
      goto LABEL_108;
    }
  }
LABEL_176:
  v266 |= (4 * (v67 < v66)) | (8 * v84) | v75 & 0xF1 | (2 * v260);
  if (*(_BYTE *)(a1 + 1248))
  {
    if (v267 < v264)
    {
      if (!v73)
        goto LABEL_34;
      sub_20F0F10C4(&v298);
      if (**((int **)v298 + 7) <= 3)
      {
        v152 = *((unsigned __int8 *)v298 + 72);
        v153 = sub_20E8C31DC((uint64_t)v298, "OSLogSurrogateAppender", 1, 0);
        v154 = v153 ? v153 + 16 : 0;
        if (v152 || v153)
        {
          v300 = &v298;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v302 = std::chrono::system_clock::now().__d_.__rep_;
          v303 = 3;
          v304 = "unknown file";
          LODWORD(v305) = 336;
          v308 = 0;
          v306 = "unknown function";
          v307 = 0;
          v155 = *(_QWORD *)v300;
          v156 = (uint64_t *)(*(_QWORD *)v300 + 16);
          if (*(char *)(*(_QWORD *)v300 + 39) < 0)
          {
            v158 = *(char **)(v155 + 16);
            v157 = *(_QWORD *)(v155 + 24);
          }
          else
          {
            v157 = *(unsigned __int8 *)(*(_QWORD *)v300 + 39);
            v158 = (char *)(*(_QWORD *)v300 + 16);
          }
          v292 = v158;
          v293 = v157;
          v159 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v159 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if (v310[16] && (v310[15] & 0x80000000) != 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v10 = v262;
          }
          v160 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v161 = byte_254A4A4F8;
          }
          else
          {
            v160 = *(_QWORD *)&byte_254A4A4F8[8];
            v161 = *(const char **)byte_254A4A4F8;
          }
          v283 = (uint64_t *)v161;
          v284 = v160;
          object = os_log_create(v161, v292);
          sub_20E86E5A8(v310, (uint64_t)&v283);
          sub_20E86E5A8(&v310[32], (uint64_t)&v292);
          v162 = object;
          sub_20E86E44C((uint64_t)&object);
          sub_20F10604C(v154, v156, v162, OS_LOG_TYPE_INFO);
          if (v152)
          {
            sub_20E8C003C((uint64_t)&v300, "Gyro-based stationary detection.");
            sub_20E863570((uint64_t)&v300);
          }
          sub_20E863714((uint64_t)&v300);
        }
      }
    }
    else
    {
      if (v67 >= v66)
        goto LABEL_34;
      sub_20F0F10C4(&v295);
      if (**(int **)(v295 + 56) <= 3)
      {
        v135 = *(unsigned __int8 *)(v295 + 72);
        v136 = sub_20E8C31DC(v295, "OSLogSurrogateAppender", 1, 0);
        v137 = v136 ? v136 + 16 : 0;
        if (v135 || v136)
        {
          sub_20E863438((uint64_t)&object);
          sub_20E86A980(&v310[8], (uint64_t)"Vision-based stationary detection. Inliers: ", 44);
          std::ostream::operator<<();
          sub_20E923E88(&object, &v292);
          v283 = &v295;
          v284 = std::chrono::steady_clock::now().__d_.__rep_;
          v285 = std::chrono::system_clock::now().__d_.__rep_;
          v286 = 3;
          v287 = "unknown file";
          v288 = 328;
          v290 = 0;
          v291 = 0;
          v289 = "unknown function";
          if (v294 >= 0)
            v138 = (const char *)&v292;
          else
            v138 = v292;
          v282 = v138;
          v139 = *v283;
          v140 = (uint64_t *)(*v283 + 16);
          if (*(char *)(*v283 + 39) < 0)
          {
            v142 = *(char **)(v139 + 16);
            v141 = *(_QWORD *)(v139 + 24);
          }
          else
          {
            v141 = *(unsigned __int8 *)(*v283 + 39);
            v142 = (char *)(*v283 + 16);
          }
          v296 = v142;
          v297 = v141;
          v178 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v300);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v300);
            if ((_BYTE)v303 && SHIBYTE(v302) < 0)
              operator delete(v300);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v10 = v262;
          }
          v179 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v180 = byte_254A4A4F8;
          }
          else
          {
            v179 = *(_QWORD *)&byte_254A4A4F8[8];
            v180 = *(const char **)byte_254A4A4F8;
          }
          v298 = v180;
          v299 = v179;
          v300 = os_log_create(v180, v296);
          sub_20E86E5A8(&rep, (uint64_t)&v298);
          sub_20E86E5A8(&v305, (uint64_t)&v296);
          v181 = v300;
          sub_20E86E44C((uint64_t)&v300);
          sub_20F105A48(v137, v140, v181, OS_LOG_TYPE_INFO, &v282);
          if (v135)
          {
            v182 = (const char *)&v292;
            if (v294 < 0)
              v182 = v292;
            sub_20E8C003C((uint64_t)&v283, "%s", v182);
            sub_20E863570((uint64_t)&v283);
          }
          sub_20E863714((uint64_t)&v283);
          if (v294 < 0)
            operator delete(v292);
          sub_20E863784((uint64_t)&object);
        }
      }
    }
    v266 |= 0x20u;
    goto LABEL_273;
  }
  _CF = v67 >= v66 && v267 >= v264;
  if (!_CF && v73 && v71)
  {
    sub_20F0F10C4(&v295);
    if (**(int **)(v295 + 56) <= 3)
    {
      v144 = *(unsigned __int8 *)(v295 + 72);
      v145 = sub_20E8C31DC(v295, "OSLogSurrogateAppender", 1, 0);
      v146 = v145 ? v145 + 16 : 0;
      if (v144 || v145)
      {
        sub_20E863438((uint64_t)&object);
        sub_20E86A980(&v310[8], (uint64_t)"All three stationary. Inliers: ", 31);
        std::ostream::operator<<();
        sub_20E923E88(&object, &v292);
        v283 = &v295;
        v284 = std::chrono::steady_clock::now().__d_.__rep_;
        v285 = std::chrono::system_clock::now().__d_.__rep_;
        v286 = 3;
        v287 = "unknown file";
        v288 = 309;
        v290 = 0;
        v291 = 0;
        v289 = "unknown function";
        if (v294 >= 0)
          v147 = (const char *)&v292;
        else
          v147 = v292;
        v282 = v147;
        v148 = *v283;
        v149 = (uint64_t *)(*v283 + 16);
        if (*(char *)(*v283 + 39) < 0)
        {
          v151 = *(char **)(v148 + 16);
          v150 = *(_QWORD *)(v148 + 24);
        }
        else
        {
          v150 = *(unsigned __int8 *)(*v283 + 39);
          v151 = (char *)(*v283 + 16);
        }
        v296 = v151;
        v297 = v150;
        v163 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v300);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v300);
          if ((_BYTE)v303 && SHIBYTE(v302) < 0)
            operator delete(v300);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v164 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v165 = byte_254A4A4F8;
        }
        else
        {
          v164 = *(_QWORD *)&byte_254A4A4F8[8];
          v165 = *(const char **)byte_254A4A4F8;
        }
        v298 = v165;
        v299 = v164;
        v300 = os_log_create(v165, v296);
        sub_20E86E5A8(&rep, (uint64_t)&v298);
        sub_20E86E5A8(&v305, (uint64_t)&v296);
        v166 = v300;
        sub_20E86E44C((uint64_t)&v300);
        sub_20F105058(v146, v149, v166, OS_LOG_TYPE_INFO, &v282);
        v10 = v262;
        if (v144)
        {
          v167 = (const char *)&v292;
          if (v294 < 0)
            v167 = v292;
          sub_20E8C003C((uint64_t)&v283, "%s", v167);
          sub_20E863570((uint64_t)&v283);
        }
        sub_20E863714((uint64_t)&v283);
        if (v294 < 0)
          operator delete(v292);
        sub_20E863784((uint64_t)&object);
      }
    }
    v266 |= 0x20u;
  }
  if (v267 < v264 || v67 >= v66 || !v71)
  {
    if (v267 >= v264 || (v266 & 0x20) == 0)
      goto LABEL_34;
LABEL_273:
    v183 = (double **)(v2 + 33);
    v184 = (float64x2_t **)(v2 + 36);
    v187 = v2 + 36;
    v186 = v2[36];
    v185 = v187[1];
    *(double *)&v296 = 0.0;
    v85.f64[0] = *(float64_t *)(a1 + 1224);
    v188 = sub_20EB80B5C(v281, v184, v183, &v296, v85);
    v189 = v188;
    v190 = (unint64_t)((v185 - v186) >> 3) >> 2;
    v191 = v296;
    if (*(_QWORD *)(a1 + 1192) <= v190)
    {
      v193 = *(double *)(a1 + 1240) <= *(double *)&v296;
      if ((float)(*(float *)(a1 + 1232) * (float)v190) > (float)(unint64_t)v188)
        v193 = 0;
      v192 = *(float *)(a1 + 1236) > (float)((int)v190 - v188) || v193;
    }
    else
    {
      v192 = 1;
    }
    sub_20F0F10C4(&v298);
    if (**((int **)v298 + 7) > 2)
      goto LABEL_367;
    v194 = *((unsigned __int8 *)v298 + 72);
    v195 = v298[72] != 0;
    v265 = sub_20E8C31DC((uint64_t)v298, "OSLogSurrogateAppender", 1, 0);
    if (((v265 == 0) & ~v195) != 0)
      goto LABEL_367;
    v258 = v194;
    v300 = &v298;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v302 = std::chrono::system_clock::now().__d_.__rep_;
    v303 = 2;
    v304 = "unknown file";
    LODWORD(v305) = 79;
    v308 = 0;
    v306 = "unknown function";
    v307 = 0;
    v196 = *(_QWORD *)v300;
    if (*(char *)(*(_QWORD *)v300 + 39) < 0)
    {
      v198 = *(const char **)(v196 + 16);
      v197 = *(_QWORD *)(v196 + 24);
    }
    else
    {
      v197 = *(unsigned __int8 *)(*(_QWORD *)v300 + 39);
      v198 = (const char *)(*(_QWORD *)v300 + 16);
    }
    v252 = *(_QWORD *)v300 + 16;
    v254 = *(_QWORD *)v300;
    v261 = v189;
    v259 = v192;
    v199 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if (v310[16] && (v310[15] & 0x80000000) != 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v200 = byte_254A4A4F8;
    else
      v200 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v201 = byte_254A4A4F8[23];
    else
      v201 = *(_QWORD *)&byte_254A4A4F8[8];
    categorya = (char *)v198;
    object = os_log_create(v200, v198);
    v202 = v310;
    if (v201 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v201 >= 0x17)
    {
      v203 = (v201 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v201 | 7) != 0x17)
        v203 = v201 | 7;
      v204 = v203 + 1;
      v202 = operator new(v203 + 1);
      *(_QWORD *)&v310[16] = v204 | 0x8000000000000000;
      *(_QWORD *)v310 = v202;
      *(_QWORD *)&v310[8] = v201;
    }
    else
    {
      v310[23] = v201;
      if (!v201)
      {
LABEL_300:
        v202[v201] = 0;
        v310[24] = 1;
        v205 = &v310[32];
        if (v197 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v10 = v262;
        v192 = v259;
        if (v197 >= 0x17)
        {
          v206 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v197 | 7) != 0x17)
            v206 = v197 | 7;
          v207 = v206 + 1;
          v205 = operator new(v206 + 1);
          v312 = v207 | 0x8000000000000000;
          *(_QWORD *)&v310[32] = v205;
          v311 = v197;
        }
        else
        {
          HIBYTE(v312) = v197;
          if (!v197)
            goto LABEL_308;
        }
        memmove(v205, categorya, v197);
LABEL_308:
        v205[v197] = 0;
        v313 = 1;
        v208 = object;
        if (SHIBYTE(v312) < 0)
          operator delete(*(void **)&v310[32]);
        if (v310[24] && (v310[23] & 0x80000000) != 0)
          operator delete(*(void **)v310);
        if (object)
          os_release(object);
        if (v265 && *(_QWORD *)(v265 + 24))
        {
          v209 = _os_log_pack_size();
          v210 = (std::__shared_weak_count_vtbl *)operator new(v209, (std::align_val_t)8uLL);
          v211 = (std::__shared_weak_count *)operator new();
          v212 = v211;
          v211->__shared_owners_ = 0;
          v213 = (unint64_t *)&v211->__shared_owners_;
          v211->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v211->__shared_weak_owners_ = 0;
          v211[1].__vftable = v210;
          object = v210;
          *(_QWORD *)v310 = v210;
          *(_QWORD *)&v310[8] = v211;
          do
            v214 = __ldxr(v213);
          while (__stxr(v214 + 1, v213));
          memset(&v310[16], 0, 24);
          do
            v215 = __ldaxr(v213);
          while (__stlxr(v215 - 1, v213));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v212);
          }
          v216 = object;
          v217 = _os_log_pack_fill();
          *(_DWORD *)v217 = 67109888;
          *(_DWORD *)(v217 + 4) = v259;
          *(_WORD *)(v217 + 8) = 2048;
          *(_QWORD *)(v217 + 10) = v191;
          *(_WORD *)(v217 + 18) = 2048;
          *(_QWORD *)(v217 + 20) = v190;
          *(_WORD *)(v217 + 28) = 2048;
          *(_QWORD *)(v217 + 30) = v189;
          v218 = operator new();
          v219 = *(unsigned __int8 *)(v254 + 39);
          v220 = v252;
          if ((v219 & 0x80u) != 0)
          {
            v220 = *(_QWORD *)(v254 + 16);
            v219 = *(_QWORD *)(v254 + 24);
          }
          *(_QWORD *)v218 = v216;
          *(_OWORD *)(v218 + 8) = *(_OWORD *)v310;
          *(_QWORD *)v310 = 0;
          *(_QWORD *)&v310[8] = 0;
          *(_OWORD *)(v218 + 24) = *(_OWORD *)&v310[16];
          *(_QWORD *)&v310[16] = 0;
          *(_QWORD *)&v310[24] = 0;
          *(_QWORD *)(v218 + 40) = v220;
          *(_QWORD *)(v218 + 48) = v219;
          *(_BYTE *)(v218 + 56) = 2;
          v292 = 0;
          v283 = (uint64_t *)v218;
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v265 + 24) + 40))(*(_QWORD *)(v265 + 24), &v283);
          v221 = v258;
          v222 = v283;
          v283 = 0;
          v10 = v262;
          if (v222)
          {
            v223 = (std::__shared_weak_count *)v222[4];
            if (v223)
            {
              v224 = (unint64_t *)&v223->__shared_owners_;
              do
                v225 = __ldaxr(v224);
              while (__stlxr(v225 - 1, v224));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                std::__shared_weak_count::__release_weak(v223);
              }
            }
            v226 = (std::__shared_weak_count *)v222[2];
            if (v226)
            {
              v227 = (unint64_t *)&v226->__shared_owners_;
              do
                v228 = __ldaxr(v227);
              while (__stlxr(v228 - 1, v227));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
              }
            }
            MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
            v229 = v292;
            v292 = 0;
            if (v229)
            {
              v230 = (std::__shared_weak_count *)*((_QWORD *)v229 + 4);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              v233 = (std::__shared_weak_count *)*((_QWORD *)v229 + 2);
              if (v233)
              {
                v234 = (unint64_t *)&v233->__shared_owners_;
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }
              MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
            }
          }
          v236 = *(std::__shared_weak_count **)&v310[24];
          v189 = v261;
          if (*(_QWORD *)&v310[24])
          {
            v237 = (unint64_t *)(*(_QWORD *)&v310[24] + 8);
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
          }
          v239 = *(std::__shared_weak_count **)&v310[8];
          if (*(_QWORD *)&v310[8])
          {
            v240 = (unint64_t *)(*(_QWORD *)&v310[8] + 8);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 - 1, v240));
            if (!v241)
            {
              ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
              std::__shared_weak_count::__release_weak(v239);
            }
          }
        }
        else
        {
          os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG);
          object = (void *)__PAIR64__(v259, 67109888);
          *(_WORD *)v310 = 2048;
          *(_QWORD *)&v310[2] = v191;
          *(_WORD *)&v310[10] = 2048;
          *(_QWORD *)&v310[12] = v190;
          *(_WORD *)&v310[20] = 2048;
          *(_QWORD *)&v310[22] = v189;
          v242 = (void *)_os_log_send_and_compose_impl();
          v221 = v258;
          if (v242)
            free(v242);
        }
        if (v221)
        {
          sub_20E8C003C((uint64_t)&v300, "[LINE STATION] reject stationary? %d : inlier_eigenvalue %f, num_lines %zu, num_line_inliers %zu", v259, *(double *)&v191, v190, v189);
          sub_20E863570((uint64_t)&v300);
        }
        sub_20E863570((uint64_t)&v300);
        v243 = v308;
        if (v308)
        {
          v244 = (unint64_t *)&v308->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
LABEL_367:
        v246 = v266;
        if (!v192)
          v246 = v266 & 0xFFFFFFDF;
        v266 = v246;
        goto LABEL_34;
      }
    }
    memmove(v202, v200, v201);
    goto LABEL_300;
  }
  sub_20F0F10C4(&v298);
  if (**((int **)v298 + 7) <= 3)
  {
    v168 = *((unsigned __int8 *)v298 + 72);
    v169 = sub_20E8C31DC((uint64_t)v298, "OSLogSurrogateAppender", 1, 0);
    v170 = v169 ? v169 + 16 : 0;
    if (v168 || v169)
    {
      v300 = &v298;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v302 = std::chrono::system_clock::now().__d_.__rep_;
      v303 = 3;
      v304 = "unknown file";
      LODWORD(v305) = 315;
      v308 = 0;
      v306 = "unknown function";
      v307 = 0;
      v171 = (uint64_t *)(v298 + 16);
      if (v298[39] < 0)
      {
        v173 = (char *)*((_QWORD *)v298 + 2);
        v172 = *((_QWORD *)v298 + 3);
      }
      else
      {
        v172 = *((unsigned __int8 *)v298 + 39);
        v173 = (char *)(v298 + 16);
      }
      v292 = v173;
      v293 = v172;
      v174 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if (v310[16] && (v310[15] & 0x80000000) != 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v10 = v262;
      }
      v175 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v176 = byte_254A4A4F8;
      }
      else
      {
        v175 = *(_QWORD *)&byte_254A4A4F8[8];
        v176 = *(const char **)byte_254A4A4F8;
      }
      v283 = (uint64_t *)v176;
      v284 = v175;
      object = os_log_create(v176, v292);
      sub_20E86E5A8(v310, (uint64_t)&v283);
      sub_20E86E5A8(&v310[32], (uint64_t)&v292);
      v177 = object;
      sub_20E86E44C((uint64_t)&object);
      sub_20F10565C(v170, v171, v177, OS_LOG_TYPE_INFO);
      if (v168)
      {
        sub_20E8C003C((uint64_t)&v300, "Pure rotation or static motion.");
        sub_20E863570((uint64_t)&v300);
      }
      sub_20E863714((uint64_t)&v300);
    }
  }
  v266 |= 0x20u;
LABEL_34:
  if (*(_BYTE *)(a1 + 1272))
  {
    v37 = (v266 >> 4) & 1;
    v38 = *(_QWORD **)(a1 + 184);
    v39 = *(_QWORD **)(a1 + 192);
    if (v38 != v39)
    {
      v40 = v38 + 7;
      do
      {
        v41 = v40 - 7;
        if (*(v40 - 7))
          v37 |= sub_20F0FB730(a1 + 1176, v40 - 6, v40);
        v40 += 77;
      }
      while (v41 + 77 != v39);
    }
    if ((v37 & 1) != 0)
      v42 = 16;
    else
      v42 = 0;
    v43 = v42 | v266 & 0xFFFFFFEF;
  }
  else
  {
    v43 = v266;
  }
  v44 = (v43 >> 5) & 1;
  v45 = v4 + 328 * v10;
  *(_BYTE *)(v45 + 248) = (v43 & 0x20) != 0;
  *(float *)(v45 + 256) = v36;
  *(_QWORD *)(v45 + 264) = v35;
  *(_QWORD *)(v45 + 272) = v267;
  *(_DWORD *)(v45 + 280) = v43;
  v46 = *(_BYTE *)(v45 + 249);
  if (v46 == 2)
  {
    v47 = (unsigned int *)(v4 + 328 * v10 + 280);
    v48 = v43 & 0xFFFFFFDF;
    if (!v44)
    {
      v49 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    v49 = 0;
    v47 = (unsigned int *)(v4 + 328 * v10 + 280);
    v48 = v43 & 0xFFFFFFDF;
    if (!v44 || v46 != 1)
      goto LABEL_51;
  }
  v49 = 32;
LABEL_51:
  *v47 = v49 | v48;
  v50 = *(_QWORD *)(a1 + 88);
  if (v50 > 1)
  {
    v52 = v50 - 2;
    v51 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v51 = *(_QWORD *)(a1 + 56);
    v52 = v50 - 0x7063E7063E7063E7 * ((*(_QWORD *)(a1 + 64) - v51) >> 3) - 2;
  }
  v53 = v51 + 328 * v52;
  *(_BYTE *)(v53 + 248) = (v43 & 0x20) != 0;
  *(float *)(v53 + 256) = v36;
  *(_QWORD *)(v53 + 264) = v35;
  *(_QWORD *)(v53 + 272) = v267;
  *(_DWORD *)(v53 + 280) = v43;
  v54 = *(_BYTE *)(v53 + 249);
  if (v54 != 2)
  {
    v57 = 0;
    v55 = (unsigned int *)(v51 + 328 * v52 + 280);
    v56 = v43 & 0xFFFFFFDF;
    if (!v44 || v54 != 1)
      goto LABEL_60;
    goto LABEL_59;
  }
  v55 = (unsigned int *)(v51 + 328 * v52 + 280);
  v56 = v43 & 0xFFFFFFDF;
  if (v44)
  {
LABEL_59:
    v57 = 32;
    goto LABEL_60;
  }
  v57 = 0;
LABEL_60:
  *v55 = v57 | v56;
}

void sub_20F0FB34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a72;

  if (LOBYTE(STACK[0x250]) && SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a63);
  if (SLOBYTE(STACK[0x20F]) < 0)
  {
    operator delete(a72);
    sub_20E863784((uint64_t)&STACK[0x280]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0FB620()
{
  JUMPOUT(0x20F0FB628);
}

void sub_20F0FB64C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_20F0FB668(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_20F0FB680(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2A0]) && SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (STACK[0x280])
    os_release((void *)STACK[0x280]);
  sub_20E863714((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_20F0FB6BC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_20F0FB6D0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2A0]) && SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (STACK[0x280])
    os_release((void *)STACK[0x280]);
  sub_20E863714((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_20F0FB710(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F0FB728);
}

void sub_20F0FB724(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_20F0FB730(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  double *v9;
  uint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  double *v14;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  double *v26;
  int64_t v27;
  unint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  double *v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  double *v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = a3[1] - *a3;
  if (v6 != a2[1] - *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include_private/VIO/Odometry/StationaryStateDetection.h", 174, (uint64_t)"cur_points.size() == ref_points.size()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_47;
    }
    v6 = a3[1] - *a3;
  }
  if ((v6 & 8) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include_private/VIO/Odometry/StationaryStateDetection.h", 176, (uint64_t)"cur_points.size() % kPointDim == 0u", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_47:
    abort();
  }
  v7 = a2[1] - *a2;
  if (*(_DWORD *)(a1 + 76) > (v7 >> 4))
    return 0;
  v41 = v7 >> 4;
  v42 = a1;
  if ((v7 >> 4))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = (v7 >> 4);
    v43 = v13;
    while (1)
    {
      while (1)
      {
        _D2 = vsubq_f64(*(float64x2_t *)(*a2 + 8 * (2 * v10)), *(float64x2_t *)(*a3 + 8 * (2 * v10))).f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        v21 = sqrt(_D1);
        if (v9 >= v11)
          break;
        *v9++ = v21;
        v14 = v9;
        if (++v10 == v13)
          goto LABEL_41;
      }
      v22 = v9 - v12;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        sub_20E867F44();
      if (((char *)v11 - (char *)v12) >> 2 > v23)
        v23 = ((char *)v11 - (char *)v12) >> 2;
      if ((unint64_t)((char *)v11 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          sub_20E877A38();
        v25 = operator new(8 * v24);
        v26 = (double *)&v25[8 * v22];
        *v26 = v21;
        v14 = v26 + 1;
        v27 = (char *)v9 - (char *)v12;
        if (v9 == v12)
          goto LABEL_26;
      }
      else
      {
        v25 = 0;
        v26 = (double *)(8 * v22);
        *(double *)(8 * v22) = v21;
        v14 = (double *)(8 * v22 + 8);
        v27 = (char *)v9 - (char *)v12;
        if (v9 == v12)
          goto LABEL_26;
      }
      v28 = v27 - 8;
      if (v28 >= 0x168)
      {
        v31 = ((char *)(v9 - 1) - (char *)v12) & 0xFFFFFFFFFFFFFFF8;
        if (&v25[(char *)v9 - (char *)v12 - 8 - v31] > &v25[(char *)v9 - (char *)v12 - 8])
        {
          v29 = v9;
        }
        else if ((double *)((char *)v9 - v31 - 8) > v9 - 1)
        {
          v29 = v9;
        }
        else if ((unint64_t)((char *)v12 - v25) >= 0x20)
        {
          v32 = (v28 >> 3) + 1;
          v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
          v29 = &v9[v33 / 0xFFFFFFFFFFFFFFF8];
          v26 = (double *)((char *)v26 - v33);
          v34 = &v25[8 * v22 - 16];
          v35 = v9 - 2;
          v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 4;
            v36 -= 4;
          }
          while (v36);
          if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
        }
        else
        {
          v29 = v9;
        }
      }
      else
      {
        v29 = v9;
      }
      do
      {
        v30 = *((_QWORD *)v29-- - 1);
        *((_QWORD *)v26-- - 1) = v30;
      }
      while (v29 != v12);
LABEL_26:
      v11 = (double *)&v25[8 * v24];
      if (v12)
        operator delete(v12);
      v12 = v26;
      v13 = v43;
      ++v10;
      v9 = v14;
      if (v10 == v43)
        goto LABEL_41;
    }
  }
  v14 = 0;
  v12 = 0;
LABEL_41:
  v38 = vcvtmd_u64_f64(*(double *)(v42 + 88) * (double)v41);
  v39 = &v12[v38];
  if (v39 != v14)
    sub_20EDE2884(v12, &v12[v38], v14);
  v8 = *v39 < *(double *)(v42 + 80);
  operator delete(v12);
  return v8;
}

void sub_20F0FBA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20F0FBAB8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int *v39[3];
  char *v40;
  char *v41;
  uint64_t v42;
  int v43;

  v43 = a2;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v3 = *(_QWORD *)(a1 + 256);
  v39[0] = &v43;
  v39[1] = (int *)a1;
  v39[2] = (int *)&v40;
  if (!v3)
    goto LABEL_14;
  v4 = 0;
  while (1)
  {
    v5 = sub_20F103F34(v39, (uint64_t *)(*(_QWORD *)(a1 + 216)+ 160* ((v4 + *(_QWORD *)(a1 + 240))% (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5)))));
    v6 = v4 + 1;
    v7 = *(_QWORD *)(a1 + 256);
    if (v5)
      break;
    ++v4;
    if (v6 == v7)
      goto LABEL_14;
  }
  if (v6 == v7)
  {
    v8 = v4 + 1;
LABEL_13:
    v22 = v4 - v8;
    if (v22)
    {
      v33 = *(_QWORD *)(a1 + 248);
      do
      {
        v36 = *(_QWORD *)(a1 + 216);
        if (!v33)
          v33 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v36) >> 5);
        v37 = v36 + 160 * v33;
        *(_BYTE *)(v37 - 160) = 0;
        *(_BYTE *)(v37 - 152) = 0;
        *(_QWORD *)(v37 - 148) = 0xFFFFFFFF00000000;
        *(_BYTE *)(v37 - 136) = 0;
        *(_BYTE *)(v37 - 128) = 0;
        *(_OWORD *)(v37 - 120) = 0uLL;
        *(_OWORD *)(v37 - 104) = 0uLL;
        *(_OWORD *)(v37 - 88) = 0uLL;
        *(_OWORD *)(v37 - 72) = 0uLL;
        *(_OWORD *)(v37 - 56) = 0uLL;
        *(_OWORD *)(v37 - 40) = 0uLL;
        *(_QWORD *)(v37 - 24) = 0;
        *(_BYTE *)(v37 - 16) = 2;
        *(_BYTE *)(v37 - 12) = 0;
        *(_BYTE *)(v37 - 8) = 0;
        v38 = *(_QWORD *)(a1 + 248);
        if (!v38)
          v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5);
        v33 = v38 - 1;
        v34 = *(_QWORD *)(a1 + 256) - 1;
        *(_QWORD *)(a1 + 248) = v33;
        *(_QWORD *)(a1 + 256) = v34;
      }
      while (!__CFADD__(v22++, 1));
    }
    goto LABEL_14;
  }
  v9 = 0;
  do
  {
    while (!sub_20F103F34(v39, (uint64_t *)(*(_QWORD *)(a1 + 216)+ 160* ((v6 + *(_QWORD *)(a1 + 240))% (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5))))))
    {
      v10 = *(_QWORD *)(a1 + 240);
      v11 = *(_QWORD *)(a1 + 216);
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v11) >> 5);
      v13 = (_OWORD *)(v11 + 160 * ((v6 + v10) % v12));
      v14 = (_OWORD *)(v11 + 160 * ((v10 + v4) % v12));
      v15 = v13[5];
      v17 = v13[2];
      v16 = v13[3];
      v14[4] = v13[4];
      v14[5] = v15;
      v14[2] = v17;
      v14[3] = v16;
      v19 = v13[7];
      v18 = v13[8];
      v20 = v13[6];
      *(_OWORD *)((char *)v14 + 140) = *(_OWORD *)((char *)v13 + 140);
      v14[7] = v19;
      v14[8] = v18;
      v14[6] = v20;
      v21 = v13[1];
      *v14 = *v13;
      v14[1] = v21;
      ++v4;
      v8 = *(_QWORD *)(a1 + 256);
      v9 = v4 == v8;
      if (++v6 == v8)
        goto LABEL_12;
    }
    v8 = *(_QWORD *)(a1 + 256);
    ++v6;
  }
  while (v6 != v8);
LABEL_12:
  if (!v9)
    goto LABEL_13;
LABEL_14:
  v23 = v40;
  v24 = v41;
  if (v40 != v41)
  {
    v25 = *(_QWORD *)(a1 + 248);
    v26 = *(_QWORD *)(a1 + 216);
    v27 = v40;
    do
    {
      while (1)
      {
        memmove((void *)(v26 + 160 * v25), v27, 0x9CuLL);
        v26 = *(_QWORD *)(a1 + 216);
        v28 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v26) >> 5);
        v29 = *(_QWORD *)(a1 + 256);
        v30 = *(_QWORD *)(a1 + 248) + 1;
        v31 = v30 >= v28 ? 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v26) >> 5) : 0;
        v25 = v30 - v31;
        *(_QWORD *)(a1 + 248) = v25;
        if (v29 == v28)
          break;
        *(_QWORD *)(a1 + 256) = v29 + 1;
        v27 += 160;
        if (v27 == v24)
          goto LABEL_24;
      }
      v32 = *(_QWORD *)(a1 + 240) + 1;
      if (v32 < v28)
        v28 = 0;
      *(_QWORD *)(a1 + 240) = v32 - v28;
      v27 += 160;
    }
    while (v27 != v24);
  }
LABEL_24:
  if (v23)
  {
    v41 = v23;
    operator delete(v23);
  }
}

void sub_20F0FBDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0FBDDC(uint64_t result, unsigned int a2, unsigned int a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v7 = result;
  if (!*(_QWORD *)(*(_QWORD *)(result + 112) + 80))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1573, (uint64_t)"sliding_window_.NumFrames() > 0u", 32, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_44;
  }
  v8 = *(_QWORD *)(v7 + 88);
  if (v8)
  {
    v9 = (unsigned int *)(*(_QWORD *)(v7 + 56) + 328 * v8 - 328);
    v10 = *v9;
    if (a2 < 0x10000)
      goto LABEL_8;
  }
  else
  {
    v9 = (unsigned int *)(*(_QWORD *)(v7 + 56) + 8 * ((uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3) - 328);
    v10 = *v9;
    if (a2 < 0x10000)
      goto LABEL_8;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
  if ((_DWORD)result)
    goto LABEL_44;
LABEL_8:
  if (a3 >= 0x10000
    && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| a2 >= 0x10000&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result)
    || a3 >= 0x10000
    && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| a2 >= 0x10000&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result))
  {
LABEL_44:
    abort();
  }
  if (a3 >= 0x10000)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_44;
  }
  else if (!(a3 | a2) && (*(_BYTE *)(v7 + 1132) || *(_BYTE *)(v7 + 672)))
  {
    v11 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(v7 + 208) + 216);
    v13 = v12 & 0xFF00000000;
    v14 = v12 & 0xFFFFFF00;
    v15 = v12;
    v16 = (unsigned __int16)a3 | ((unsigned __int16)a2 << 16);
    if (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 80) != 1)
      goto LABEL_21;
LABEL_26:
    v20 = *((_QWORD *)v9 + 2);
    v37 = a4[2];
    v39 = a4[3];
    v41 = a4[4];
    v43 = a4[5];
    v33 = *a4;
    v35 = a4[1];
    v21 = (v13 | v14 | v15) << 24;
    v22 = *(_QWORD *)(v7 + 216) + 160 * *(_QWORD *)(v7 + 248);
    *(_BYTE *)v22 = 0;
    *(_BYTE *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 12) = v10 | (v16 << 32);
    *(_BYTE *)(v22 + 24) = 0;
    *(_BYTE *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = v20;
    *(_OWORD *)(v22 + 80) = v37;
    *(_OWORD *)(v22 + 96) = v39;
    *(_OWORD *)(v22 + 112) = v41;
    *(_OWORD *)(v22 + 128) = v43;
    *(_OWORD *)(v22 + 48) = v33;
    *(_OWORD *)(v22 + 64) = v35;
    *(_BYTE *)(v22 + 144) = v11;
    goto LABEL_36;
  }
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v11 = 1;
  v16 = (unsigned __int16)a3 | ((unsigned __int16)a2 << 16);
  if (*(_QWORD *)(*(_QWORD *)(v7 + 112) + 80) == 1)
    goto LABEL_26;
LABEL_21:
  v17 = *(_QWORD *)(v7 + 88);
  v31 = v10;
  v32 = v9;
  v30 = v11;
  if (v17 > 1)
  {
    v18 = *(_QWORD *)(v7 + 56) + 328 * (v17 - 2);
    v19 = *(_DWORD *)v18;
    if (a2 < 0x10000)
      goto LABEL_29;
  }
  else
  {
    v18 = *(_QWORD *)(v7 + 56)
        + 328 * (v17 - 0x7063E7063E7063E7 * ((uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 3) - 2);
    v19 = *(_DWORD *)v18;
    if (a2 < 0x10000)
      goto LABEL_29;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
  if ((_DWORD)result)
    goto LABEL_44;
LABEL_29:
  if (a3 >= 0x10000)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_44;
  }
  if (a2 >= 0x10000)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_44;
  }
  if (a3 >= 0x10000)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_44;
  }
  v23 = *(_QWORD *)(v18 + 16);
  v24 = *((_QWORD *)v32 + 2);
  v38 = a4[2];
  v40 = a4[3];
  v42 = a4[4];
  v44 = a4[5];
  v34 = *a4;
  v36 = a4[1];
  v21 = (v13 | v14 | v15) << 24;
  v22 = *(_QWORD *)(v7 + 216) + 160 * *(_QWORD *)(v7 + 248);
  *(_QWORD *)v22 = v19 | ((unint64_t)v16 << 32);
  *(_BYTE *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 12) = v31 | (v16 << 32);
  *(_QWORD *)(v22 + 24) = v23;
  *(_BYTE *)(v22 + 32) = 1;
  *(_QWORD *)(v22 + 40) = v24;
  *(_OWORD *)(v22 + 80) = v38;
  *(_OWORD *)(v22 + 96) = v40;
  *(_OWORD *)(v22 + 112) = v42;
  *(_OWORD *)(v22 + 128) = v44;
  *(_OWORD *)(v22 + 48) = v34;
  *(_OWORD *)(v22 + 64) = v36;
  *(_BYTE *)(v22 + 144) = v30;
LABEL_36:
  *(_QWORD *)(v22 + 145) = v21;
  v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v7 + 224) - *(_QWORD *)(v7 + 216)) >> 5);
  v26 = *(_QWORD *)(v7 + 256);
  v27 = *(_QWORD *)(v7 + 248) + 1;
  if (v27 >= v25)
    v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v7 + 224) - *(_QWORD *)(v7 + 216)) >> 5);
  else
    v28 = 0;
  *(_QWORD *)(v7 + 248) = v27 - v28;
  if (v26 == v25)
  {
    v29 = *(_QWORD *)(v7 + 240) + 1;
    if (v29 < v25)
      v25 = 0;
    *(_QWORD *)(v7 + 240) = v29 - v25;
  }
  else
  {
    *(_QWORD *)(v7 + 256) = v26 + 1;
  }
  return result;
}

void sub_20F0FC378(uint64_t a1, unsigned int ***a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const char *v50;
  size_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  const char *v54;
  size_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int **v99;
  unsigned int **v100;
  unsigned int *v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  unsigned int **v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t i;
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t j;
  unsigned __int8 v128;
  char v129;
  uint64_t *v130;
  int v131;
  unsigned __int8 v132;
  uint64_t v133;
  uint64_t k;
  unsigned __int8 v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t m;
  unsigned __int8 v139;
  char *v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  unsigned __int8 v145;
  uint64_t v146;
  uint64_t n;
  unsigned __int8 v148;
  char v149;
  char v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t ii;
  unsigned __int8 v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t jj;
  unsigned __int8 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t kk;
  unsigned __int8 v168;
  _DWORD *v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  double v183;
  double v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  double v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  int8x16_t v198;
  unsigned int v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char v215;
  unsigned __int16 v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  double v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v230;
  double *v231;
  float64_t v232;
  double v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  float64x2_t v241;
  unsigned __int8 v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  const char *v247;
  unsigned __int8 v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  unsigned __int8 v253;
  const char *v254;
  size_t v255;
  _BYTE *v256;
  const char *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  NSObject *v262;
  const char *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  size_t v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  int v313;
  char *v314;
  char *v315;
  unint64_t v316;
  unint64_t v317;
  unsigned int *v318;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int mm;
  _DWORD *v337;
  char *v338;
  char *v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  BOOL v343;
  unsigned __int8 v344;
  uint64_t v345;
  uint64_t nn;
  unsigned __int8 v347;
  uint64_t v348;
  double *v349;
  int *v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v355;
  size_t v356;
  const char *v357;
  uint64_t v358;
  int v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  size_t v363;
  const char *v364;
  double v365;
  double v366;
  unsigned __int8 v367;
  const char *v368;
  size_t v369;
  _BYTE *v370;
  unint64_t v371;
  const char *v372;
  uint64_t v373;
  double *v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  NSObject *v381;
  double v382;
  size_t v383;
  std::__shared_weak_count_vtbl *v384;
  std::__shared_weak_count *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  int v416;
  void *v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  double v421;
  double v422;
  unsigned __int8 v423;
  const char *v424;
  size_t v425;
  _BYTE *v426;
  unint64_t v427;
  double *v428;
  const char *v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  _BYTE *v434;
  uint64_t v435;
  uint64_t v436;
  NSObject *v437;
  double v438;
  size_t v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  void *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  int v472;
  void *v473;
  unint64_t *v474;
  _QWORD *v475;
  _QWORD *i1;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *i2;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  const char *v487;
  size_t v488;
  unsigned __int8 v489;
  const char *v490;
  size_t v491;
  _BYTE *v492;
  uint64_t v493;
  uint64_t v494;
  _BYTE *v495;
  NSObject *v496;
  uint64_t v497;
  uint64_t v498;
  size_t v499;
  std::__shared_weak_count_vtbl *v500;
  std::__shared_weak_count *v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  void *v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  void *v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  uint64_t v535;
  unsigned int **v536;
  unsigned int **v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  size_t __len;
  char *v542;
  double v543;
  double v544;
  double v545;
  char *v546;
  uint64_t v548;
  float64_t v549;
  int8x16_t v550;
  uint64_t v551;
  int8x16_t v552;
  uint64_t v553;
  uint64_t v554;
  unsigned int *v556;
  uint64_t v557;
  uint64_t *v558;
  const char *v559;
  const char *v560;
  _BOOL4 v561;
  int8x16_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  _BOOL4 v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  __int128 v572;
  double v573;
  int v574;
  const char *v575;
  int v576;
  const char *v577;
  uint64_t v578;
  std::__shared_weak_count *v579;
  uint64_t v580;
  unint64_t v581;
  void *v582[2];
  char v583;
  char v584;
  uint64_t v585;
  _BYTE oslog[48];
  int8x16_t v587;
  int8x16_t v588;
  __int128 v589;
  char v590;
  _BYTE object[48];
  int8x16_t v592;
  int8x16_t v593;
  __int128 v594;
  char v595;
  uint64_t v596;

  v596 = *MEMORY[0x24BDAC8D0];
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 733223216;
  kdebug_trace();
  v558 = (uint64_t *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 1776) && *(_BYTE *)(a1 + 1089))
  {
    v6 = *(_QWORD *)(a1 + 112);
    v7 = *(_QWORD *)(a1 + 120);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      if (v8 != v9)
      {
        v10 = v8 + 168;
        do
        {
          sub_20F0E80A4((_QWORD *)v10, *(char **)(v10 + 24), *(char **)(v10 + 32), (uint64_t)(*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 2);
          v11 = v10 + 88;
          v10 += 256;
        }
        while (v11 != v9);
      }
      v6 += 168;
    }
    v12 = *(_QWORD *)(a1 + 136);
    v13 = *(_QWORD *)(a1 + 144);
    while (v12 != v13)
    {
      v14 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v14 != v15)
      {
        v16 = v14 + 168;
        do
        {
          sub_20F0E80A4((_QWORD *)v16, *(char **)(v16 + 24), *(char **)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 2);
          v17 = v16 + 88;
          v16 += 256;
        }
        while (v17 != v15);
      }
      v12 += 168;
    }
    v18 = *(_QWORD *)(a1 + 88);
    if (v18)
    {
      v19 = *v558;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 56);
      v18 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v19) >> 3);
    }
    sub_20F0FBAB8(a1, *(_DWORD *)(v19 + 328 * v18 - 328));
    sub_20F113E50(v558);
    *(_BYTE *)(a1 + 1776) = 1;
  }
  sub_20F113C18(v558, a2, a3, a4);
  if (!*(_BYTE *)(a1 + 1776) && !*(_BYTE *)(a1 + 1089))
  {
    v20 = *(_QWORD *)(a1 + 88);
    if (v20 > 1)
    {
      v22 = v20 - 2;
      v21 = *v558;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = v20 - 0x7063E7063E7063E7 * ((*(_QWORD *)(a1 + 64) - v21) >> 3) - 2;
    }
    sub_20F0FBAB8(a1, *(_DWORD *)(v21 + 328 * v22));
    v23 = *(_QWORD *)(a1 + 88);
    if (v23 > 1)
    {
      v25 = v23 - 2;
      v24 = *v558;
      v26 = *(_QWORD *)(a1 + 304);
      if (!v26)
      {
LABEL_33:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 958, (uint64_t)"iter != is_state_reconstructed_using_extrapolation_.end()", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v33 = *(_QWORD *)(a1 + 304);
        v32 = v26 + 1;
        if (v26 + 1 == v33)
          goto LABEL_52;
        if (v26 == -1)
        {
          v27 = -1;
          v34 = *(_QWORD *)(a1 + 304);
        }
        else
        {
          v34 = -1;
          v27 = v26;
        }
        goto LABEL_42;
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 56);
      v25 = v23 - 0x7063E7063E7063E7 * ((*(_QWORD *)(a1 + 64) - v24) >> 3) - 2;
      v26 = *(_QWORD *)(a1 + 304);
      if (!v26)
        goto LABEL_33;
    }
    v27 = 0;
    v28 = *(_DWORD *)(v24 + 328 * v25);
    v30 = *(_QWORD *)(a1 + 264);
    v29 = *(_QWORD *)(a1 + 272);
    v31 = (v29 - v30) >> 3;
    while (1)
    {
      v32 = v27 + 1;
      if (*(_DWORD *)(v30 + 8 * ((*(_QWORD *)(a1 + 288) + v27) % v31)) == v28)
        break;
      ++v27;
      if (v26 == v32)
        goto LABEL_33;
    }
    if (v26 - 1 == v27)
    {
      if (v27)
      {
        v34 = -1;
        goto LABEL_46;
      }
      v34 = -v26;
LABEL_45:
      v30 = *(_QWORD *)(a1 + 264);
      v31 = (v29 - v30) >> 3;
LABEL_46:
      v40 = *(_QWORD *)(a1 + 296);
      v41 = v34;
      do
      {
        if (!v40)
          v40 = v31;
        --v40;
        v42 = v30 + 8 * v40;
        *(_DWORD *)v42 = 0;
        *(_BYTE *)(v42 + 4) = 0;
      }
      while (!__CFADD__(v41++, 1));
      *(_QWORD *)(a1 + 296) = v40;
      *(_QWORD *)(a1 + 304) = v26 + v34;
      goto LABEL_52;
    }
    v34 = -1;
    v33 = v26;
LABEL_42:
    v35 = *(_QWORD *)(a1 + 288);
    v36 = *(_QWORD *)(a1 + 264);
    v29 = *(_QWORD *)(a1 + 272);
    v37 = (v29 - v36) >> 3;
    do
    {
      v38 = v36 + 8 * ((v35 + v32) % v37);
      v39 = v36 + 8 * ((v35 + v27) % v37);
      *(_DWORD *)v39 = *(_DWORD *)v38;
      *(_BYTE *)(v39 + 4) = *(_BYTE *)(v38 + 4);
      ++v32;
      ++v27;
    }
    while (v33 != v32);
    v26 = v33;
    if (!v34)
    {
LABEL_52:
      sub_20F113D38(v558);
      *(_BYTE *)(a1 + 1776) = 1;
      goto LABEL_53;
    }
    goto LABEL_45;
  }
LABEL_53:
  kdebug_trace();
  v44 = *(_QWORD *)(a1 + 88);
  if (v44)
  {
    v45 = *v558;
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 56);
    v44 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v45) >> 3);
  }
  sub_20F0F10C4(&v585);
  v535 = v45 + 328 * v44 - 328;
  v557 = a1;
  if (**(int **)(v585 + 56) > 3)
    goto LABEL_143;
  v46 = *(unsigned __int8 *)(v585 + 72);
  v47 = sub_20E8C31DC(v585, "OSLogSurrogateAppender", 1, 0);
  v48 = v47;
  if (!v46 && !v47)
    goto LABEL_143;
  *(_QWORD *)oslog = &v585;
  *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
  *(_DWORD *)&oslog[24] = 3;
  *(_QWORD *)&oslog[32] = "unknown file";
  *(_DWORD *)&oslog[40] = 1100;
  v588.i64[0] = 0;
  v587.i64[0] = (uint64_t)"unknown function";
  v587.i64[1] = 0;
  v49 = **(_QWORD **)oslog;
  v50 = (const char *)(**(_QWORD **)oslog + 16);
  v560 = v50;
  if (*(char *)(**(_QWORD **)oslog + 39) < 0)
  {
    v50 = *(const char **)(v49 + 16);
    v51 = *(_QWORD *)(v49 + 24);
  }
  else
  {
    v51 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
  }
  v565 = *(_DWORD *)v535;
  v52 = *(_QWORD *)(v535 + 8);
  v53 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v54 = byte_254A4A4F8;
  else
    v54 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v55 = byte_254A4A4F8[23];
  else
    v55 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v54, v50);
  v56 = &object[8];
  if (v55 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v55 >= 0x17)
  {
    v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v57 = v55 | 7;
    v58 = v57 + 1;
    v56 = operator new(v57 + 1);
    *(_QWORD *)&object[24] = v58 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v56;
    *(_QWORD *)&object[16] = v55;
    goto LABEL_76;
  }
  object[31] = v55;
  if (v55)
LABEL_76:
    memmove(v56, v54, v55);
  v56[v55] = 0;
  object[32] = 1;
  v59 = &object[40];
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v51 >= 0x17)
  {
    v61 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v61 = v51 | 7;
    v62 = v61 + 1;
    v59 = operator new(v61 + 1);
    v592.i64[1] = v62 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v59;
    v592.i64[0] = v51;
  }
  else
  {
    v592.i8[15] = v51;
    if (!v51)
    {
      object[40] = 0;
      v593.i8[0] = 1;
      v60 = *(NSObject **)object;
      if ((v592.i8[15] & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_87;
    }
  }
  memmove(v59, v50, v51);
  v59[v51] = 0;
  v593.i8[0] = 1;
  v60 = *(NSObject **)object;
  if ((v592.i8[15] & 0x80000000) == 0)
  {
LABEL_81:
    if (!object[32])
      goto LABEL_90;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_90;
LABEL_88:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_90:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v48 && *(_QWORD *)(v48 + 24))
  {
    v63 = _os_log_pack_size();
    v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
    v65 = (std::__shared_weak_count *)operator new();
    v66 = v65;
    v65->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v64;
    *(_QWORD *)object = v64;
    *(_QWORD *)&object[8] = v64;
    *(_QWORD *)&object[16] = v65;
    do
      v68 = __ldxr(p_shared_owners);
    while (__stxr(v68 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v66);
    }
    v70 = *(_QWORD *)object;
    v71 = _os_log_pack_fill();
    *(_DWORD *)v71 = 67109376;
    *(_DWORD *)(v71 + 4) = v565;
    *(_WORD *)(v71 + 8) = 2048;
    *(_QWORD *)(v71 + 10) = v52;
    v72 = operator new();
    v73 = *(unsigned __int8 *)(v49 + 39);
    v74 = v560;
    if ((v73 & 0x80u) != 0)
    {
      v74 = *(const char **)(v49 + 16);
      v73 = *(_QWORD *)(v49 + 24);
    }
    *(_QWORD *)v72 = v70;
    *(_OWORD *)(v72 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v72 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v72 + 40) = v74;
    *(_QWORD *)(v72 + 48) = v73;
    *(_BYTE *)(v72 + 56) = 1;
    v582[0] = 0;
    *(_QWORD *)&v572 = v72;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v48 + 24) + 40))(*(_QWORD *)(v48 + 24), &v572);
    v75 = v572;
    *(_QWORD *)&v572 = 0;
    a1 = v557;
    if (v75)
    {
      v76 = *(std::__shared_weak_count **)(v75 + 32);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *(std::__shared_weak_count **)(v75 + 16);
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      MEMORY[0x212BC6398](v75, 0x10F0C40B62ED6C6);
      v82 = v582[0];
      v582[0] = 0;
      if (v82)
      {
        v83 = (std::__shared_weak_count *)*((_QWORD *)v82 + 4);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = (std::__shared_weak_count *)*((_QWORD *)v82 + 2);
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        MEMORY[0x212BC6398](v82, 0x10F0C40B62ED6C6);
      }
    }
    v89 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v90 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v93 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  else
  {
    os_log_type_enabled(v60, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109376;
    *(_DWORD *)&object[4] = v565;
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = v52;
    v95 = (void *)_os_log_send_and_compose_impl();
    a1 = v557;
    if (v95)
      free(v95);
  }
  if (v46)
  {
    sub_20E8C003C((uint64_t)oslog, "Processing frame %d with timestamp %f", *(_DWORD *)v535, *(double *)(v535 + 8));
    sub_20E863570((uint64_t)oslog);
  }
  sub_20E863570((uint64_t)oslog);
  v96 = (std::__shared_weak_count *)v588.i64[0];
  if (v588.i64[0])
  {
    v97 = (unint64_t *)(v588.i64[0] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 80) == 1)
        goto LABEL_144;
LABEL_167:
      *(_BYTE *)(a1 + 1776) = *(_BYTE *)(a1 + 984) ^ 1;
      v113 = *a2;
      v114 = a2[1];
      if (0x4EC4EC4EC4EC4EC5 * ((a3[1] - *a3) >> 3) != v114 - *a2)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1125, (uint64_t)"features.size() == camera_sensor_models.size()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v113 = *a2;
        v114 = a2[1];
      }
      if (v113 != v114)
      {
        v546 = 0;
        v115 = 0;
        v542 = 0;
        v554 = a1 + 536;
        v536 = v114;
        while (1)
        {
          v116 = **v113;
          v118 = *((_QWORD *)*v113 + 1);
          v117 = *((_QWORD *)*v113 + 2);
          v556 = *v113;
          if (0x8E38E38E38E38E39
             * ((uint64_t)(*(_QWORD *)(*a3 + 104 * v116 + 88)
                        - *(_QWORD *)(*a3 + 104 * v116 + 80)) >> 3) != 0x4EC4EC4EC4EC4EC5
                                                                                     * ((v117 - v118) >> 7))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1132, (uint64_t)"features[camera_id].R_gyro_prev_to_cur_cam_frame.size() == camera_model->NumStreams()", 85, (uint64_t)"Number of incremental camera rotations does not match number of camera streams", 78, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v118 = *((_QWORD *)v556 + 1);
            v117 = *((_QWORD *)v556 + 2);
          }
          v537 = v113;
          if (v117 != v118)
            break;
LABEL_172:
          v113 = v537 + 1;
          if (v537 + 1 == v536)
            goto LABEL_534;
        }
        LODWORD(v119) = 0;
        while (1)
        {
          v120 = *a3;
          kdebug_trace();
          v571 = __PAIR64__(v119, v116);
          if (v116 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v122 = qword_254A6DE40;
              for (i = qword_254A6DE48; v122 != i; v122 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v122)(*(_QWORD *)(v122 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v124 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v119 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v125 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v126 = qword_254A6DE40;
              for (j = qword_254A6DE48; v126 != j; v126 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v126)(*(_QWORD *)(v126 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v128 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v129 = 0;
          v130 = (uint64_t *)(v120 + 104 * v116 + 80);
          object[0] = 0;
          v595 = 0;
          v131 = v119 | v116;
          if (!(v119 | v116))
          {
            if (*(_BYTE *)(a1 + 672))
            {
              sub_20F0D8E3C(*(_QWORD *)(a1 + 208), v558, a2, v130, 0, 1, 1, (uint64_t)oslog);
              v595 = v590;
              v593 = v588;
              v594 = v589;
              *(_OWORD *)object = *(_OWORD *)oslog;
              *(_OWORD *)&object[16] = *(_OWORD *)&oslog[16];
              *(_OWORD *)&object[32] = *(_OWORD *)&oslog[32];
              v592 = v587;
              if (v590)
                goto LABEL_249;
              v129 = 1;
            }
            else
            {
              v129 = 0;
            }
          }
          if (v116 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v132 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v133 = qword_254A6DE40;
              for (k = qword_254A6DE48; v133 != k; v133 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v133)(*(_QWORD *)(v133 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v135 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v119 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v136 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v137 = qword_254A6DE40;
              for (m = qword_254A6DE48; v137 != m; v137 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v137)(*(_QWORD *)(v137 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v139 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v140 = *(char **)(a1 + 184);
          v141 = *(char **)(a1 + 192);
          if (v141 != v140)
          {
            v142 = 0x4FCACE213F2B3885 * ((v141 - v140) >> 3);
            do
            {
              v143 = v142 >> 1;
              v144 = &v140[616 * (v142 >> 1)];
              if (*(_DWORD *)v144 < v116
                || *(_DWORD *)v144 == (_DWORD)v116 && *((_DWORD *)v144 + 1) < v119)
              {
                v140 = v144 + 616;
                v143 = v142 + ~v143;
              }
              v142 = v143;
            }
            while (v143);
          }
          if (v140 == v141 || *(_DWORD *)v140 != (_DWORD)v116 || *((_DWORD *)v140 + 1) != (_DWORD)v119)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1047, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v146 = qword_254A6DE40;
              for (n = qword_254A6DE48; v146 != n; v146 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v146)(*(_QWORD *)(v146 + 8), "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "", 0);
            }
            v148 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            a1 = v557;
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "", 0);
            v140 = v141;
          }
          sub_20F002EE8((uint64_t)(v140 + 8), (uint64_t)v558, v116, v119, 1, (double *)(*v130 + 72 * v119), (uint64_t)oslog);
          *(_OWORD *)&object[32] = *(_OWORD *)&oslog[32];
          v592 = v587;
          v593 = v588;
          v594 = v589;
          *(_OWORD *)object = *(_OWORD *)oslog;
          *(_OWORD *)&object[16] = *(_OWORD *)&oslog[16];
          if (v595)
          {
            if (v131)
              v149 = 1;
            else
              v149 = v129;
            if ((v149 & 1) != 0)
              goto LABEL_249;
          }
          else
          {
            v595 = 1;
            if (v131)
              v150 = 1;
            else
              v150 = v129;
            if ((v150 & 1) != 0)
              goto LABEL_249;
          }
          if (*(_BYTE *)(a1 + 1132))
          {
            sub_20F0D8E3C(*(_QWORD *)(a1 + 208), v558, a2, v130, 1u, 1, 0, (uint64_t)oslog);
            v593 = v588;
            v594 = v589;
            v595 = v590;
            *(_OWORD *)object = *(_OWORD *)oslog;
            *(_OWORD *)&object[16] = *(_OWORD *)&oslog[16];
            *(_OWORD *)&object[32] = *(_OWORD *)&oslog[32];
            v592 = v587;
          }
LABEL_249:
          if (v116 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v151 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v152 = qword_254A6DE40;
              for (ii = qword_254A6DE48; v152 != ii; v152 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v152)(*(_QWORD *)(v152 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v154 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v119 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v155 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v156 = qword_254A6DE40;
              for (jj = qword_254A6DE48; v156 != jj; v156 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v156)(*(_QWORD *)(v156 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v158 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_883;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v159 = *v130;
          v581 = v116 | ((unint64_t)v119 << 32);
          if (v131 || !*(_BYTE *)(a1 + 672))
          {
            v160 = *(char **)(a1 + 184);
            v161 = *(char **)(a1 + 192);
            if (v161 != v160)
            {
              v162 = 0x4FCACE213F2B3885 * ((v161 - v160) >> 3);
              do
              {
                v163 = v162 >> 1;
                v164 = &v160[616 * (v162 >> 1)];
                if (*(_DWORD *)v164 < v116
                  || *(_DWORD *)v164 == (_DWORD)v116 && *((_DWORD *)v164 + 1) < v119)
                {
                  v160 = v164 + 616;
                  v163 = v162 + ~v163;
                }
                v162 = v163;
              }
              while (v163);
            }
            if (v160 == v161 || *(_DWORD *)v160 != (_DWORD)v116 || *((_DWORD *)v160 + 1) != (_DWORD)v119)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 860, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"Unfound camera stream", 21, (void (*)(void **))sub_21023DDB0);
              v165 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v166 = qword_254A6DE40;
                for (kk = qword_254A6DE48; v166 != kk; v166 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v166)(*(_QWORD *)(v166 + 8), "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "Unfound camera stream", 21);
              }
              v168 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_883;
              qword_254A6DE58(unk_254A6DE60, "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "Unfound camera stream", 21);
              v160 = v161;
            }
            v169 = v160 + 8;
            v170 = *(_QWORD *)(a1 + 208);
            if (!*(_BYTE *)(v170 + 220))
            {
LABEL_291:
              v171 = -1;
              goto LABEL_292;
            }
          }
          else
          {
            v170 = *(_QWORD *)(a1 + 208);
            v169 = *(_DWORD **)(v170 + 240);
            if (!*(_BYTE *)(v170 + 220))
              goto LABEL_291;
          }
          v171 = *(_DWORD *)(v170 + 216);
LABEL_292:
          v172 = v159 + 72 * v119;
          v173 = (*((_QWORD *)v169 + 13) - *((_QWORD *)v169 + 12)) >> 4;
          v566 = sub_20F106438(v554, &v581, (uint64_t)object, v172, v171, v173);
          v561 = 0;
          if (!*(_BYTE *)(a1 + 1152) || !v595)
            goto LABEL_304;
          v174 = *(_QWORD *)(a1 + 88);
          if (v174)
          {
            v175 = *v558;
            v176 = *v558 + 328 * v174 - 328;
            if (v174 != 1)
              goto LABEL_299;
            v177 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v175) >> 3);
          }
          else
          {
            v175 = *(_QWORD *)(a1 + 56);
            v178 = *(_QWORD *)(a1 + 64);
            v177 = 0x8F9C18F9C18F9C19 * ((v178 - v175) >> 3);
            v176 = v178 - 328;
          }
          v174 += v177;
LABEL_299:
          v550 = *(int8x16_t *)object;
          v552 = *(int8x16_t *)&object[32];
          v179 = *(_QWORD *)&object[16];
          v180 = v592.i64[0];
          v562 = v593;
          v181 = v594;
          v182 = *(double *)(v175 + 328 * (v174 - 2) + 16);
          v183 = *(double *)(v176 + 16);
          v184 = *(double *)(a1 + 1160);
          if (v183 <= v182
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerUtil.cpp", 101, (uint64_t)"cur_frame_timestamp > prev_frame_timestamp", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_883;
          }
          v186 = v550;
          v185 = v552;
          v187 = v562;
          v186.i64[1] = vextq_s8(v186, v186, 8uLL).u64[0];
          *(int8x16_t *)oslog = v186;
          *(_QWORD *)&oslog[16] = v179;
          *(_QWORD *)&oslog[40] = v180;
          v185.i64[1] = vextq_s8(v185, v185, 8uLL).u64[0];
          *(int8x16_t *)&oslog[24] = v185;
          v588.i64[0] = v181;
          v187.i64[1] = vextq_s8(v187, v187, 8uLL).u64[0];
          v587 = v187;
          v572 = 0uLL;
          v573 = 0.0;
          sub_20E9733B8((float64x2_t *)oslog, (double *)&v572);
          _V1.D[1] = *((_QWORD *)&v572 + 1);
          _D3 = *((_QWORD *)&v572 + 1);
          __asm { FMLA            D2, D3, V1.D[1] }
          v193 = sqrt(_D2 + v573 * v573) * 180.0 / 3.14159265;
          if (v193 / (v183 - v182) >= v184)
          {
            v194 = *(_QWORD *)(v172 + 16);
            v195 = *(_QWORD *)(v172 + 40);
            v196 = *(_OWORD *)(v172 + 24);
            v197 = *(_QWORD *)(v172 + 64);
            v198 = *(int8x16_t *)(v172 + 48);
            *(_OWORD *)oslog = *(_OWORD *)v172;
            *(_OWORD *)&oslog[24] = v196;
            *(_QWORD *)&oslog[16] = v194;
            *(_QWORD *)&oslog[40] = v195;
            v587 = v198;
            v588.i64[0] = v197;
            v572 = 0uLL;
            v573 = 0.0;
            sub_20E9733B8((float64x2_t *)oslog, (double *)&v572);
            _V1.D[1] = *((_QWORD *)&v572 + 1);
            _D3 = *((_QWORD *)&v572 + 1);
            __asm { FMLA            D2, D3, V1.D[1] }
            v561 = sqrt(_D2 + v573 * v573) * 180.0 / 3.14159265 < v193;
          }
          else
          {
            v561 = 0;
          }
LABEL_304:
          v202 = v581;
          v203 = *(_QWORD *)(a1 + 88);
          if (v203)
          {
            v204 = *v558;
            if (v581)
              goto LABEL_321;
          }
          else
          {
            v204 = *(_QWORD *)(a1 + 56);
            v203 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v204) >> 3);
            if (v581)
              goto LABEL_321;
          }
          v205 = *(_DWORD *)(v204 + 328 * v203 - 328);
          v206 = *(_QWORD *)(a1 + 304);
          v207 = *(_QWORD *)(a1 + 264);
          if (v206)
          {
            v208 = *(_QWORD *)(a1 + 288);
            v209 = (*(_QWORD *)(a1 + 272) - v207) >> 3;
            v210 = *(_QWORD *)(a1 + 304);
            while (*(_DWORD *)(v207 + 8 * (v208 % v209)) != v205)
            {
              ++v208;
              if (!--v210)
                goto LABEL_314;
            }
LABEL_321:
            v215 = v566;
            if (v561)
              v215 = 1;
            if ((v215 & 1) == 0)
              goto LABEL_358;
            goto LABEL_324;
          }
          v209 = (*(_QWORD *)(a1 + 272) - v207) >> 3;
LABEL_314:
          v211 = *(_QWORD *)(a1 + 296);
          v212 = v207 + 8 * v211;
          *(_DWORD *)v212 = v205;
          *(_BYTE *)(v212 + 4) = v566;
          if (v211 + 1 >= v209)
            v213 = v209;
          else
            v213 = 0;
          *(_QWORD *)(a1 + 296) = v211 + 1 - v213;
          if (v206 == v209)
          {
            v214 = *(_QWORD *)(a1 + 288) + 1;
            if (v214 < v206)
              v206 = 0;
            *(_QWORD *)(a1 + 288) = v214 - v206;
            goto LABEL_321;
          }
          *(_QWORD *)(a1 + 304) = v206 + 1;
          v249 = v566;
          if (v561)
            v249 = 1;
          if ((v249 & 1) == 0)
          {
LABEL_358:
            v250 = *(_QWORD *)object;
            v251 = *(_QWORD *)&object[8];
            v252 = *(_OWORD *)&object[16];
            v235 = *(_QWORD *)&object[32];
            v236 = *(_QWORD *)&object[40];
            v233 = *(double *)&v592.i64[1];
            v237 = v592.i64[0];
            v239 = v593.i64[1];
            v238 = v593.i64[0];
            v234 = *((double *)&v594 + 1);
            v240 = v594;
            goto LABEL_443;
          }
LABEL_324:
          if (!*(_BYTE *)(a1 + 672) && *(_DWORD *)(a1 + 644) && !*(_BYTE *)(a1 + 1132))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1508, (uint64_t)"pose_tracker_config_.outlier_rejection_config .use_p3p_estimator_for_primary_stream_in_stereo || pose_tracker_config_.outlier_rejection_config.epipolar_algorithm == EpipolarAlgorithm::FivePoint || pose_tracker_config_.run_pnp_after_epipolar_outlier_rejection_in_visual_slam", 273, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_883;
            }
            v202 = v581;
          }
          if (v202 >= 0x10000
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_883:
            abort();
          }
          v216 = WORD2(v581);
          if (HIDWORD(v581) >= 0x10000)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_883;
            }
            v216 = WORD2(v581);
          }
          v217 = v216 | ((unsigned __int16)v581 << 16);
          if (v566)
          {
            v218 = *(_QWORD *)(a1 + 88);
            v219 = *(_QWORD *)(a1 + 56);
            if (v218 <= 1)
              v218 -= 0x7063E7063E7063E7 * ((*(_QWORD *)(a1 + 64) - v219) >> 3);
            v220 = v218 - 2;
            v221 = *(_QWORD *)(a1 + 256);
            if (v221)
            {
              v222 = *(double *)(v219 + 328 * v220 + 16);
              v223 = *(_QWORD *)(a1 + 240);
              v224 = *(_QWORD *)(a1 + 216);
              v225 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v224) >> 5);
              v226 = *(_QWORD *)(a1 + 256);
              while (1)
              {
                v227 = v223 % v225;
                v228 = v224 + 160 * (v223 % v225);
                if (*(_DWORD *)(v228 + 16) == v217 && *(double *)(v228 + 40) == v222)
                  break;
                ++v223;
                if (!--v226)
                  goto LABEL_340;
              }
            }
            else
            {
LABEL_340:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1522, (uint64_t)"iter != incremental_pose_per_frame_.end()", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_883;
              }
              v224 = *(_QWORD *)(a1 + 216);
              v227 = (*(_QWORD *)(a1 + 240) + v221) % (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 224) - v224) >> 5));
            }
            v230 = v224 + 160 * v227;
            v231 = (double *)(v230 + 48);
            v232 = *(double *)(v230 + 72);
          }
          else
          {
            v232 = *(double *)&object[24];
            v231 = (double *)object;
          }
          v233 = v231[7];
          v234 = v231[11];
          v553 = *(_QWORD *)v172;
          v551 = *(_QWORD *)(v172 + 8);
          v235 = *(_QWORD *)(v172 + 24);
          v548 = *(_QWORD *)(v172 + 16);
          v549 = v232;
          v236 = *(_QWORD *)(v172 + 32);
          v237 = *(_QWORD *)(v172 + 40);
          v238 = *(_QWORD *)(v172 + 48);
          v239 = *(_QWORD *)(v172 + 56);
          v240 = *(_QWORD *)(v172 + 64);
          v241.f64[0] = v232;
          v241.f64[1] = v232;
          v544 = (double)v173;
          v545 = (double)v171;
          v543 = sqrt(vmulq_f64(v241, v241).f64[0] + v233 * v233 + v234 * v234);
          kdebug_trace();
          v242 = atomic_load((unsigned __int8 *)&qword_254A62110);
          if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_254A62110))
          {
            sub_21021D3D8(&v572);
            sub_20E8610C0(oslog, "cv3d.vio.odometry");
            sub_20E8C4068((uint64_t **)&v572, (uint64_t)oslog, &qword_254A62108);
            if ((oslog[23] & 0x80000000) != 0)
              operator delete(*(void **)oslog);
            __cxa_guard_release(&qword_254A62110);
            a1 = v557;
          }
          v580 = qword_254A62108;
          if (**(int **)(qword_254A62108 + 56) > 3)
            goto LABEL_442;
          v243 = *(unsigned __int8 *)(qword_254A62108 + 72);
          v244 = sub_20E8C31DC(qword_254A62108, "OSLogSurrogateAppender", 1, 0);
          v245 = v244;
          if (!v243 && !v244)
            goto LABEL_442;
          *(_QWORD *)&v572 = &v580;
          *((std::chrono::steady_clock::time_point *)&v572 + 1) = std::chrono::steady_clock::now();
          v573 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
          v574 = 3;
          v575 = "unknown file";
          v576 = 1545;
          v577 = "unknown function";
          v578 = 0;
          v579 = 0;
          v246 = *(_QWORD *)v572;
          if (*(char *)(*(_QWORD *)v572 + 39) < 0)
          {
            v247 = *(const char **)(v246 + 16);
            __len = *(_QWORD *)(v246 + 24);
            v538 = *(_QWORD *)v572 + 16;
            v539 = *(_QWORD *)v572;
            v253 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v253 & 1) != 0)
              goto LABEL_361;
          }
          else
          {
            v247 = (const char *)(*(_QWORD *)v572 + 16);
            __len = *(unsigned __int8 *)(*(_QWORD *)v572 + 39);
            v538 = (uint64_t)v247;
            v539 = *(_QWORD *)v572;
            v248 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v248 & 1) != 0)
              goto LABEL_361;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v582);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v582);
            if (v584 && v583 < 0)
              operator delete(v582[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_361:
          if (byte_254A4A4F8[23] >= 0)
            v254 = byte_254A4A4F8;
          else
            v254 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v255 = byte_254A4A4F8[23];
          else
            v255 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)oslog = os_log_create(v254, v247);
          if (v255 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v540 = v243;
          if (v255 >= 0x17)
          {
            v257 = v247;
            v258 = v245;
            v259 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v255 | 7) != 0x17)
              v259 = v255 | 7;
            v260 = v259 + 1;
            v256 = operator new(v259 + 1);
            *(_QWORD *)&oslog[24] = v260 | 0x8000000000000000;
            *(_QWORD *)&oslog[8] = v256;
            *(_QWORD *)&oslog[16] = v255;
            v245 = v258;
            v247 = v257;
LABEL_374:
            memmove(v256, v254, v255);
            goto LABEL_375;
          }
          oslog[31] = v255;
          v256 = &oslog[8];
          if (v255)
            goto LABEL_374;
LABEL_375:
          v256[v255] = 0;
          oslog[32] = 1;
          if (__len > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          a1 = v557;
          if (__len >= 0x17)
          {
            v263 = v247;
            v264 = v245;
            v265 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v265 = __len | 7;
            v266 = v265 + 1;
            v261 = operator new(v265 + 1);
            v587.i64[1] = v266 | 0x8000000000000000;
            *(_QWORD *)&oslog[40] = v261;
            v587.i64[0] = __len;
            v245 = v264;
            v247 = v263;
          }
          else
          {
            v587.i8[15] = __len;
            v261 = &oslog[40];
            if (!__len)
            {
              oslog[40] = 0;
              v588.i8[0] = 1;
              v262 = *(NSObject **)oslog;
              if ((v587.i8[15] & 0x80000000) == 0)
                goto LABEL_379;
              goto LABEL_385;
            }
          }
          memmove(v261, v247, __len);
          v261[__len] = 0;
          v588.i8[0] = 1;
          v262 = *(NSObject **)oslog;
          if ((v587.i8[15] & 0x80000000) == 0)
          {
LABEL_379:
            if (!oslog[32])
              goto LABEL_388;
            goto LABEL_386;
          }
LABEL_385:
          operator delete(*(void **)&oslog[40]);
          if (!oslog[32])
            goto LABEL_388;
LABEL_386:
          if ((oslog[31] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[8]);
LABEL_388:
          if (*(_QWORD *)oslog)
            os_release(*(void **)oslog);
          if (!v245 || !*(_QWORD *)(v245 + 24))
          {
            os_log_type_enabled(v262, OS_LOG_TYPE_INFO);
            *(_DWORD *)oslog = 67110912;
            *(_DWORD *)&oslog[4] = v217;
            *(_WORD *)&oslog[8] = 2048;
            *(double *)&oslog[10] = v545;
            *(_WORD *)&oslog[18] = 2048;
            *(double *)&oslog[20] = v544;
            *(_WORD *)&oslog[28] = 2048;
            *(double *)&oslog[30] = v543;
            *(_WORD *)&oslog[38] = 2048;
            *(_QWORD *)&oslog[40] = 0;
            v587.i16[0] = 2048;
            *(uint64_t *)((char *)v587.i64 + 2) = 0;
            v587.i16[5] = 1024;
            v587.i32[3] = v566;
            v588.i16[0] = 1024;
            *(__int32 *)((char *)v588.i32 + 2) = v561;
            v286 = (void *)_os_log_send_and_compose_impl();
            if (v286)
              free(v286);
            goto LABEL_435;
          }
          v267 = _os_log_pack_size();
          v268 = (std::__shared_weak_count_vtbl *)operator new(v267, (std::align_val_t)8uLL);
          v269 = (std::__shared_weak_count *)operator new();
          v270 = v269;
          v269->__shared_owners_ = 0;
          v271 = (unint64_t *)&v269->__shared_owners_;
          v269->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v269->__shared_weak_owners_ = 0;
          v269[1].__vftable = v268;
          *(_QWORD *)oslog = v268;
          *(_QWORD *)&oslog[8] = v268;
          *(_QWORD *)&oslog[16] = v269;
          do
            v272 = __ldxr(v271);
          while (__stxr(v272 + 1, v271));
          memset(&oslog[24], 0, 24);
          a1 = v557;
          do
            v273 = __ldaxr(v271);
          while (__stlxr(v273 - 1, v271));
          if (!v273)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v270);
          }
          v274 = *(_QWORD *)oslog;
          v275 = _os_log_pack_fill();
          *(_DWORD *)v275 = 67110912;
          *(_DWORD *)(v275 + 4) = v217;
          *(_WORD *)(v275 + 8) = 2048;
          *(double *)(v275 + 10) = v545;
          *(_WORD *)(v275 + 18) = 2048;
          *(double *)(v275 + 20) = v544;
          *(_WORD *)(v275 + 28) = 2048;
          *(double *)(v275 + 30) = v543;
          *(_WORD *)(v275 + 38) = 2048;
          *(_QWORD *)(v275 + 40) = 0;
          *(_WORD *)(v275 + 48) = 2048;
          *(_QWORD *)(v275 + 50) = 0;
          *(_WORD *)(v275 + 58) = 1024;
          *(_DWORD *)(v275 + 60) = v566;
          *(_WORD *)(v275 + 64) = 1024;
          *(_DWORD *)(v275 + 66) = v561;
          v276 = (char *)operator new();
          v277 = *(unsigned __int8 *)(v539 + 39);
          v278 = v538;
          if ((v277 & 0x80u) != 0)
          {
            v278 = *(_QWORD *)(v539 + 16);
            v277 = *(_QWORD *)(v539 + 24);
          }
          *(_QWORD *)v276 = v274;
          *(_OWORD *)(v276 + 8) = *(_OWORD *)&oslog[8];
          *(_QWORD *)&oslog[8] = 0;
          *(_QWORD *)&oslog[16] = 0;
          *(_OWORD *)(v276 + 24) = *(_OWORD *)&oslog[24];
          *(_QWORD *)&oslog[24] = 0;
          *(_QWORD *)&oslog[32] = 0;
          *((_QWORD *)v276 + 5) = v278;
          *((_QWORD *)v276 + 6) = v277;
          v276[56] = 1;
          v585 = 0;
          v582[0] = v276;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v245 + 24) + 40))(*(_QWORD *)(v245 + 24), v582);
          v279 = v582[0];
          v582[0] = 0;
          if (!v279)
            goto LABEL_425;
          v280 = (std::__shared_weak_count *)*((_QWORD *)v279 + 4);
          if (!v280)
            goto LABEL_405;
          v281 = (unint64_t *)&v280->__shared_owners_;
          do
            v282 = __ldaxr(v281);
          while (__stlxr(v282 - 1, v281));
          if (!v282)
          {
            ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
            std::__shared_weak_count::__release_weak(v280);
            v283 = (std::__shared_weak_count *)*((_QWORD *)v279 + 2);
            if (!v283)
              goto LABEL_413;
          }
          else
          {
LABEL_405:
            v283 = (std::__shared_weak_count *)*((_QWORD *)v279 + 2);
            if (!v283)
              goto LABEL_413;
          }
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
LABEL_413:
          MEMORY[0x212BC6398](v279, 0x10F0C40B62ED6C6);
          v287 = v585;
          v585 = 0;
          if (v287)
          {
            v288 = *(std::__shared_weak_count **)(v287 + 32);
            if (!v288)
              goto LABEL_418;
            v289 = (unint64_t *)&v288->__shared_owners_;
            do
              v290 = __ldaxr(v289);
            while (__stlxr(v290 - 1, v289));
            if (!v290)
            {
              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
              std::__shared_weak_count::__release_weak(v288);
              v291 = *(std::__shared_weak_count **)(v287 + 16);
              if (v291)
              {
LABEL_419:
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
            }
            else
            {
LABEL_418:
              v291 = *(std::__shared_weak_count **)(v287 + 16);
              if (v291)
                goto LABEL_419;
            }
            MEMORY[0x212BC6398](v287, 0x10F0C40B62ED6C6);
          }
LABEL_425:
          v294 = *(std::__shared_weak_count **)&oslog[32];
          if (!*(_QWORD *)&oslog[32])
            goto LABEL_429;
          v295 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
          do
            v296 = __ldaxr(v295);
          while (__stlxr(v296 - 1, v295));
          if (!v296)
          {
            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
            std::__shared_weak_count::__release_weak(v294);
            v297 = *(std::__shared_weak_count **)&oslog[16];
            if (*(_QWORD *)&oslog[16])
            {
LABEL_430:
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldaxr(v298);
              while (__stlxr(v299 - 1, v298));
              if (!v299)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
          }
          else
          {
LABEL_429:
            v297 = *(std::__shared_weak_count **)&oslog[16];
            if (*(_QWORD *)&oslog[16])
              goto LABEL_430;
          }
LABEL_435:
          if (v540)
          {
            sub_20E8C003C((uint64_t)&v572, "VSExtrapolation. Source: %u, NumTriang: %f, 2dInliers: %f, translation: %f, GyroR: %f, VisionR: %f, PositionExtra: %d, UseGyroRot: %d", v217, v545, v544, v543, 0.0, 0.0, v566, v561);
            sub_20E863570((uint64_t)&v572);
          }
          sub_20E863570((uint64_t)&v572);
          v300 = v579;
          if (v579)
          {
            v301 = (unint64_t *)&v579->__shared_owners_;
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
          }
LABEL_442:
          *((float64_t *)&v252 + 1) = v549;
          *(_QWORD *)&v252 = v548;
          v250 = v553;
          v251 = v551;
LABEL_443:
          *(_QWORD *)object = v250;
          *(_QWORD *)&object[8] = v251;
          *(_OWORD *)&object[16] = v252;
          *(_QWORD *)&object[32] = v235;
          *(_QWORD *)&object[40] = v236;
          v592.i64[0] = v237;
          *(double *)&v592.i64[1] = v233;
          v593.i64[0] = v238;
          v593.i64[1] = v239;
          *(_QWORD *)&v594 = v240;
          *((double *)&v594 + 1) = v234;
          if (!v595)
            v595 = 1;
          sub_20F0FBDDC(a1, v116, v119, (__int128 *)object);
          kdebug_trace();
          memset(oslog, 0, 32);
          *(_DWORD *)&oslog[32] = 733223232;
          kdebug_trace();
          if (!*(_BYTE *)(a1 + 984) || (_DWORD)v571 != *(_DWORD *)(a1 + 1092))
            goto LABEL_488;
          if (*(_BYTE *)(a1 + 1088))
          {
            if (!HIDWORD(v571))
              goto LABEL_458;
            if (HIDWORD(v571) != 1)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 684, (uint64_t)"", 0, (uint64_t)"Camera stream ID is neither 0 nor 1, likely a config issue.", 59, (void (*)(void **))sub_21023DDB0);
LABEL_891:
              abort();
            }
            if (*(_BYTE *)(a1 + 1776))
            {
              if (((char *)v115 - v546 != 12 || *((_DWORD *)v546 + 1))
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 678, (uint64_t)"num_inliers_per_cam_stream.size() == 1 && num_inliers_per_cam_stream[0].first.stream_id == 0", 92, (uint64_t)"Stream 0 should come before 1.", 30, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_891;
              }
LABEL_458:
              *(_BYTE *)(a1 + 1776) = sub_20F0F8214(a1, (uint64_t)a2, (unsigned int *)&v571);
              v303 = v571;
              v304 = HIDWORD(v571);
              if (v571)
                goto LABEL_474;
              goto LABEL_459;
            }
          }
          else if (!*(_BYTE *)(a1 + 1776))
          {
            goto LABEL_458;
          }
          v303 = v571;
          v304 = HIDWORD(v571);
          if (v571)
            goto LABEL_474;
LABEL_459:
          if (*(_BYTE *)(a1 + 672))
          {
            v305 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 240) + 104)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 240) + 96)) >> 4;
            if (v115 < (int *)v542)
              goto LABEL_487;
            goto LABEL_461;
          }
LABEL_474:
          v314 = *(char **)(a1 + 184);
          v315 = *(char **)(a1 + 192);
          if (v315 != v314)
          {
            v316 = 0x4FCACE213F2B3885 * ((v315 - v314) >> 3);
            do
            {
              v317 = v316 >> 1;
              v318 = (unsigned int *)&v314[616 * (v316 >> 1)];
              if (*v318 < v303 || *v318 == v303 && v318[1] < v304)
              {
                v314 = (char *)(v318 + 154);
                v317 = v316 + ~v317;
              }
              v316 = v317;
            }
            while (v317);
          }
          if (v314 == v315 || *(_DWORD *)v314 != v303 || *((_DWORD *)v314 + 1) != v304)
          {
            v319 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 860, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"Unfound camera stream", 21, (void (*)(void **))sub_21023DDB0);
            v314 = v315;
            if (v319)
              abort();
          }
          v305 = (*((_QWORD *)v314 + 14) - *((_QWORD *)v314 + 13)) >> 4;
          if (v115 < (int *)v542)
          {
LABEL_487:
            *(_QWORD *)v115 = v571;
            v115[2] = v305;
            v115 += 3;
            goto LABEL_488;
          }
LABEL_461:
          v306 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - v546) >> 2) + 1;
          if (v306 > 0x1555555555555555)
            sub_20E867F44();
          if (0x5555555555555556 * ((v542 - v546) >> 2) > v306)
            v306 = 0x5555555555555556 * ((v542 - v546) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v542 - v546) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v307 = 0x1555555555555555;
          else
            v307 = v306;
          if (v307 > 0x1555555555555555)
            sub_20E877A38();
          v308 = (char *)operator new(12 * v307);
          v309 = &v308[4 * (((char *)v115 - v546) >> 2)];
          *(_QWORD *)v309 = v571;
          *((_DWORD *)v309 + 2) = v305;
          v310 = v309;
          if (v115 == (int *)v546)
          {
            v311 = v546;
            v542 = &v308[12 * v307];
            v115 = (int *)(v309 + 12);
            if (!v546)
              goto LABEL_473;
          }
          else
          {
            v311 = v546;
            do
            {
              v312 = *(_QWORD *)(v115 - 3);
              v115 -= 3;
              v313 = v115[2];
              *(_QWORD *)(v310 - 12) = v312;
              v310 -= 12;
              *((_DWORD *)v310 + 2) = v313;
            }
            while (v115 != (int *)v546);
            v542 = &v308[12 * v307];
            v115 = (int *)(v309 + 12);
            if (!v546)
              goto LABEL_473;
          }
          operator delete(v311);
LABEL_473:
          v546 = v310;
LABEL_488:
          kdebug_trace();
          v119 = (v119 + 1);
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v556 + 2) - *((_QWORD *)v556 + 1)) >> 7) <= v119)
            goto LABEL_172;
        }
      }
      v546 = 0;
      v115 = 0;
LABEL_534:
      if (*(_BYTE *)(a1 + 1776) && *(_BYTE *)(a1 + 1089))
      {
        v320 = *(_QWORD *)(a1 + 112);
        v321 = *(_QWORD *)(a1 + 120);
        while (v320 != v321)
        {
          v322 = *(_QWORD **)(v320 + 16);
          v323 = *(_QWORD **)(v320 + 24);
          if (v322 != v323)
          {
            v324 = v322 + 24;
            do
            {
              sub_20F0E80A4(v324, (char *)*(v324 - 3), (char *)*(v324 - 2), (uint64_t)(*(v324 - 2) - *(v324 - 3)) >> 2);
              v325 = v324 + 8;
              v324 += 32;
            }
            while (v325 != v323);
          }
          v320 += 168;
        }
        v326 = *(_QWORD *)(a1 + 136);
        v327 = *(_QWORD *)(a1 + 144);
        while (v326 != v327)
        {
          v328 = *(_QWORD **)(v326 + 16);
          v329 = *(_QWORD **)(v326 + 24);
          if (v328 != v329)
          {
            v330 = v328 + 24;
            do
            {
              sub_20F0E80A4(v330, (char *)*(v330 - 3), (char *)*(v330 - 2), (uint64_t)(*(v330 - 2) - *(v330 - 3)) >> 2);
              v331 = v330 + 8;
              v330 += 32;
            }
            while (v331 != v329);
          }
          v326 += 168;
        }
      }
      v572 = 0uLL;
      v332 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 3;
      if (v332 >= 4)
        v332 = 4;
      else
        v332 = v332;
      v563 = v332;
      if ((_DWORD)v332)
      {
        v333 = 0;
        do
        {
          v334 = (*a2)[v333];
          v335 = *v334;
          if (*v334 >= 0x10000
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_884:
            abort();
          }
          v567 = -991146299 * ((*((_QWORD *)v334 + 2) - *((_QWORD *)v334 + 1)) >> 7);
          if (v567)
          {
            for (mm = 0; mm != v567; ++mm)
            {
              if (mm | v335 || !*(_BYTE *)(v557 + 672))
              {
                v338 = *(char **)(v557 + 184);
                v339 = *(char **)(v557 + 192);
                if (v339 != v338)
                {
                  v340 = 0x4FCACE213F2B3885 * ((v339 - v338) >> 3);
                  do
                  {
                    v341 = v340 >> 1;
                    v342 = &v338[616 * (v340 >> 1)];
                    if (*(_DWORD *)v342 < v335 || *(_DWORD *)v342 == v335 && *((_DWORD *)v342 + 1) < mm)
                    {
                      v338 = v342 + 616;
                      v341 = v340 + ~v341;
                    }
                    v340 = v341;
                  }
                  while (v341);
                }
                if (v338 == v339
                  || (*(_DWORD *)v338 == v335 ? (v343 = *((_DWORD *)v338 + 1) == mm) : (v343 = 0), !v343))
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 860, (uint64_t)"iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, (uint64_t)"Unfound camera stream", 21, (void (*)(void **))sub_21023DDB0);
                  v344 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v345 = qword_254A6DE40;
                    for (nn = qword_254A6DE48; v345 != nn; v345 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v345)(*(_QWORD *)(v345 + 8), "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "Unfound camera stream", 21);
                  }
                  v347 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v347 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_884;
                  qword_254A6DE58(unk_254A6DE60, "iter != epipolar_outlier_rejection_per_camera_stream_.end()", 59, "Unfound camera stream", 21);
                  v338 = v339;
                }
                v337 = v338 + 8;
              }
              else
              {
                v337 = *(_DWORD **)(*(_QWORD *)(v557 + 208) + 240);
              }
              *((_DWORD *)&v572 + v333) += (*((_QWORD *)v337 + 13) - *((_QWORD *)v337 + 12)) >> 4;
            }
          }
          ++v333;
        }
        while (v333 != v563);
      }
      a1 = v557;
      v348 = *(_QWORD *)(v557 + 1792);
      if (v348)
        sub_20F7F99CC(&v572, v348);
      if (!*(_BYTE *)(v557 + 1776) && *(_BYTE *)(v557 + 1089))
      {
        v349 = *(double **)(*a3 + 8);
        goto LABEL_606;
      }
      sub_20F113F68((unint64_t)v558);
      v349 = *(double **)(*a3 + 8);
      if (!*(_BYTE *)(v557 + 1776))
      {
LABEL_606:
        v358 = *(_QWORD *)(v557 + 480);
        *(_DWORD *)(v358 + 496) = *(_DWORD *)v535;
        *(_BYTE *)(v358 + 500) = 1;
        sub_20F0F10C4(&v581);
        if (**(int **)(v581 + 56) > 3
          || (v359 = *(unsigned __int8 *)(v581 + 72),
              v360 = sub_20E8C31DC(v581, "OSLogSurrogateAppender", 1, 0),
              v361 = v360,
              !v359)
          && !v360)
        {
LABEL_776:
          if (*(_BYTE *)(a1 + 1176))
            sub_20F0F9394(a1);
          goto LABEL_778;
        }
        *(_QWORD *)oslog = &v581;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 3;
        *(_QWORD *)&oslog[32] = "unknown file";
        *(_DWORD *)&oslog[40] = 1197;
        v588.i64[0] = 0;
        v587.i64[0] = (uint64_t)"unknown function";
        v587.i64[1] = 0;
        v362 = **(_QWORD **)oslog;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v364 = *(const char **)(v362 + 16);
          v363 = *(_QWORD *)(v362 + 24);
        }
        else
        {
          v363 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v364 = (const char *)(**(_QWORD **)oslog + 16);
        }
        v568 = **(_QWORD **)oslog + 16;
        v365 = v349[1];
        v366 = v349[2];
        v367 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v367 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v368 = byte_254A4A4F8;
        else
          v368 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v369 = byte_254A4A4F8[23];
        else
          v369 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v368, v364);
        v370 = &object[8];
        if (v369 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v369 >= 0x17)
        {
          v371 = v361;
          v372 = v364;
          v373 = v362;
          v374 = v349;
          v375 = v359;
          v376 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v369 | 7) != 0x17)
            v376 = v369 | 7;
          v377 = v376 + 1;
          v370 = operator new(v376 + 1);
          *(_QWORD *)&object[24] = v377 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v370;
          *(_QWORD *)&object[16] = v369;
          v359 = v375;
          v349 = v374;
          v362 = v373;
          v364 = v372;
          v361 = v371;
        }
        else
        {
          object[31] = v369;
          if (!v369)
          {
LABEL_627:
            v370[v369] = 0;
            object[32] = 1;
            v378 = &object[40];
            if (v363 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v363 >= 0x17)
            {
              v379 = (v363 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v363 | 7) != 0x17)
                v379 = v363 | 7;
              v380 = v379 + 1;
              v378 = operator new(v379 + 1);
              v592.i64[1] = v380 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v378;
              v592.i64[0] = v363;
            }
            else
            {
              v592.i8[15] = v363;
              if (!v363)
                goto LABEL_635;
            }
            memmove(v378, v364, v363);
LABEL_635:
            v378[v363] = 0;
            v593.i8[0] = 1;
            v381 = *(NSObject **)object;
            if (v592.i8[15] < 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v382 = v365 + v366;
            if (v361 && *(_QWORD *)(v361 + 24))
            {
              v383 = _os_log_pack_size();
              v384 = (std::__shared_weak_count_vtbl *)operator new(v383, (std::align_val_t)8uLL);
              v385 = (std::__shared_weak_count *)operator new();
              v386 = v385;
              v385->__shared_owners_ = 0;
              v387 = (unint64_t *)&v385->__shared_owners_;
              v385->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v385->__shared_weak_owners_ = 0;
              v385[1].__vftable = v384;
              *(_QWORD *)object = v384;
              *(_QWORD *)&object[8] = v384;
              *(_QWORD *)&object[16] = v385;
              do
                v388 = __ldxr(v387);
              while (__stxr(v388 + 1, v387));
              memset(&object[24], 0, 24);
              do
                v389 = __ldaxr(v387);
              while (__stlxr(v389 - 1, v387));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                std::__shared_weak_count::__release_weak(v386);
              }
              v390 = *(_QWORD *)object;
              v391 = _os_log_pack_fill();
              v392 = *(_DWORD *)v349;
              *(_DWORD *)v391 = 67109376;
              *(_DWORD *)(v391 + 4) = v392;
              *(_WORD *)(v391 + 8) = 2048;
              *(double *)(v391 + 10) = v382;
              v393 = (char *)operator new();
              v394 = *(unsigned __int8 *)(v362 + 39);
              v395 = v568;
              if ((v394 & 0x80u) != 0)
              {
                v395 = *(_QWORD *)(v362 + 16);
                v394 = *(_QWORD *)(v362 + 24);
              }
              *(_QWORD *)v393 = v390;
              *(_OWORD *)(v393 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v393 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *((_QWORD *)v393 + 5) = v395;
              *((_QWORD *)v393 + 6) = v394;
              v393[56] = 1;
              v585 = 0;
              v582[0] = v393;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v361 + 24) + 40))(*(_QWORD *)(v361 + 24), v582);
              v396 = v582[0];
              v582[0] = 0;
              a1 = v557;
              if (v396)
              {
                v397 = (std::__shared_weak_count *)*((_QWORD *)v396 + 4);
                if (v397)
                {
                  v398 = (unint64_t *)&v397->__shared_owners_;
                  do
                    v399 = __ldaxr(v398);
                  while (__stlxr(v399 - 1, v398));
                  if (!v399)
                  {
                    ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                    std::__shared_weak_count::__release_weak(v397);
                  }
                }
                v400 = (std::__shared_weak_count *)*((_QWORD *)v396 + 2);
                if (v400)
                {
                  v401 = (unint64_t *)&v400->__shared_owners_;
                  do
                    v402 = __ldaxr(v401);
                  while (__stlxr(v402 - 1, v401));
                  if (!v402)
                  {
                    ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                    std::__shared_weak_count::__release_weak(v400);
                  }
                }
                MEMORY[0x212BC6398](v396, 0x10F0C40B62ED6C6);
                v403 = v585;
                v585 = 0;
                if (v403)
                {
                  v404 = *(std::__shared_weak_count **)(v403 + 32);
                  if (v404)
                  {
                    v405 = (unint64_t *)&v404->__shared_owners_;
                    do
                      v406 = __ldaxr(v405);
                    while (__stlxr(v406 - 1, v405));
                    if (!v406)
                    {
                      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                      std::__shared_weak_count::__release_weak(v404);
                    }
                  }
                  v407 = *(std::__shared_weak_count **)(v403 + 16);
                  if (v407)
                  {
                    v408 = (unint64_t *)&v407->__shared_owners_;
                    do
                      v409 = __ldaxr(v408);
                    while (__stlxr(v409 - 1, v408));
                    if (!v409)
                    {
                      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                      std::__shared_weak_count::__release_weak(v407);
                    }
                  }
                  MEMORY[0x212BC6398](v403, 0x10F0C40B62ED6C6);
                }
              }
              v410 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v411 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v412 = __ldaxr(v411);
                while (__stlxr(v412 - 1, v411));
                if (!v412)
                {
                  ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                  std::__shared_weak_count::__release_weak(v410);
                }
              }
              v413 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v414 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v415 = __ldaxr(v414);
                while (__stlxr(v415 - 1, v414));
                if (!v415)
                {
                  ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                  std::__shared_weak_count::__release_weak(v413);
                }
              }
            }
            else
            {
              os_log_type_enabled(v381, OS_LOG_TYPE_INFO);
              v416 = *(_DWORD *)v349;
              *(_DWORD *)object = 67109376;
              *(_DWORD *)&object[4] = v416;
              *(_WORD *)&object[8] = 2048;
              *(double *)&object[10] = v382;
              v417 = (void *)_os_log_send_and_compose_impl();
              a1 = v557;
              if (v417)
                free(v417);
            }
            if (v359)
            {
              sub_20E8C003C((uint64_t)oslog, "No keyframe is added with ID %d at timestamp %f.", *(_DWORD *)v349, v349[1] + v349[2]);
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v418 = (std::__shared_weak_count *)v588.i64[0];
            if (!v588.i64[0])
              goto LABEL_776;
            v419 = (unint64_t *)(v588.i64[0] + 8);
            do
              v420 = __ldaxr(v419);
            while (__stlxr(v420 - 1, v419));
            goto LABEL_774;
          }
        }
        memmove(v370, v368, v369);
        goto LABEL_627;
      }
      if (v546 != (char *)v115)
      {
        v350 = (int *)v546;
        do
        {
          *(_QWORD *)object = v350;
          *(_DWORD *)(sub_20F104CC0(v557 + 1736, v350, (_QWORD **)object)[3] + 104) = v350[2];
          v350 += 3;
        }
        while (v350 != v115);
      }
      sub_20F0F10C4(&v581);
      if (**(int **)(v581 + 56) > 3)
        goto LABEL_776;
      v351 = *(unsigned __int8 *)(v581 + 72);
      v352 = sub_20E8C31DC(v581, "OSLogSurrogateAppender", 1, 0);
      v353 = v352;
      if (!v351 && v352 == 0)
        goto LABEL_776;
      *(_QWORD *)oslog = &v581;
      *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
      *(_DWORD *)&oslog[24] = 3;
      *(_QWORD *)&oslog[32] = "unknown file";
      *(_DWORD *)&oslog[40] = 1190;
      v588.i64[0] = 0;
      v587.i64[0] = (uint64_t)"unknown function";
      v587.i64[1] = 0;
      v355 = **(_QWORD **)oslog;
      if (*(char *)(**(_QWORD **)oslog + 39) < 0)
      {
        v357 = *(const char **)(v355 + 16);
        v356 = *(_QWORD *)(v355 + 24);
      }
      else
      {
        v356 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
        v357 = (const char *)(**(_QWORD **)oslog + 16);
      }
      v569 = **(_QWORD **)oslog + 16;
      v421 = v349[1];
      v422 = v349[2];
      v423 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v423 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v424 = byte_254A4A4F8;
      else
        v424 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v425 = byte_254A4A4F8[23];
      else
        v425 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v424, v357);
      v426 = &object[8];
      if (v425 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v425 >= 0x17)
      {
        v427 = v353;
        v428 = v349;
        v429 = v357;
        v430 = v355;
        v431 = v351;
        v432 = (v425 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v425 | 7) != 0x17)
          v432 = v425 | 7;
        v433 = v432 + 1;
        v426 = operator new(v432 + 1);
        *(_QWORD *)&object[24] = v433 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v426;
        *(_QWORD *)&object[16] = v425;
        v351 = v431;
        v355 = v430;
        v357 = v429;
        v349 = v428;
        v353 = v427;
      }
      else
      {
        object[31] = v425;
        if (!v425)
        {
LABEL_709:
          v426[v425] = 0;
          object[32] = 1;
          v434 = &object[40];
          if (v356 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v356 >= 0x17)
          {
            v435 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v356 | 7) != 0x17)
              v435 = v356 | 7;
            v436 = v435 + 1;
            v434 = operator new(v435 + 1);
            v592.i64[1] = v436 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v434;
            v592.i64[0] = v356;
          }
          else
          {
            v592.i8[15] = v356;
            if (!v356)
              goto LABEL_717;
          }
          memmove(v434, v357, v356);
LABEL_717:
          v434[v356] = 0;
          v593.i8[0] = 1;
          v437 = *(NSObject **)object;
          if (v592.i8[15] < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          v438 = v421 + v422;
          if (v353 && *(_QWORD *)(v353 + 24))
          {
            v439 = _os_log_pack_size();
            v440 = (std::__shared_weak_count_vtbl *)operator new(v439, (std::align_val_t)8uLL);
            v441 = (std::__shared_weak_count *)operator new();
            v442 = v441;
            v441->__shared_owners_ = 0;
            v443 = (unint64_t *)&v441->__shared_owners_;
            v441->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v441->__shared_weak_owners_ = 0;
            v441[1].__vftable = v440;
            *(_QWORD *)object = v440;
            *(_QWORD *)&object[8] = v440;
            *(_QWORD *)&object[16] = v441;
            do
              v444 = __ldxr(v443);
            while (__stxr(v444 + 1, v443));
            memset(&object[24], 0, 24);
            do
              v445 = __ldaxr(v443);
            while (__stlxr(v445 - 1, v443));
            if (!v445)
            {
              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
              std::__shared_weak_count::__release_weak(v442);
            }
            v446 = *(_QWORD *)object;
            v447 = _os_log_pack_fill();
            v448 = *(_DWORD *)v349;
            *(_DWORD *)v447 = 67109376;
            *(_DWORD *)(v447 + 4) = v448;
            *(_WORD *)(v447 + 8) = 2048;
            *(double *)(v447 + 10) = v438;
            v449 = (char *)operator new();
            v450 = *(unsigned __int8 *)(v355 + 39);
            v451 = v569;
            if ((v450 & 0x80u) != 0)
            {
              v451 = *(_QWORD *)(v355 + 16);
              v450 = *(_QWORD *)(v355 + 24);
            }
            *(_QWORD *)v449 = v446;
            *(_OWORD *)(v449 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v449 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v449 + 5) = v451;
            *((_QWORD *)v449 + 6) = v450;
            v449[56] = 1;
            v585 = 0;
            v582[0] = v449;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v353 + 24) + 40))(*(_QWORD *)(v353 + 24), v582);
            v452 = v582[0];
            v582[0] = 0;
            a1 = v557;
            if (v452)
            {
              v453 = (std::__shared_weak_count *)*((_QWORD *)v452 + 4);
              if (v453)
              {
                v454 = (unint64_t *)&v453->__shared_owners_;
                do
                  v455 = __ldaxr(v454);
                while (__stlxr(v455 - 1, v454));
                if (!v455)
                {
                  ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                  std::__shared_weak_count::__release_weak(v453);
                }
              }
              v456 = (std::__shared_weak_count *)*((_QWORD *)v452 + 2);
              if (v456)
              {
                v457 = (unint64_t *)&v456->__shared_owners_;
                do
                  v458 = __ldaxr(v457);
                while (__stlxr(v458 - 1, v457));
                if (!v458)
                {
                  ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                  std::__shared_weak_count::__release_weak(v456);
                }
              }
              MEMORY[0x212BC6398](v452, 0x10F0C40B62ED6C6);
              v459 = v585;
              v585 = 0;
              if (v459)
              {
                v460 = *(std::__shared_weak_count **)(v459 + 32);
                if (v460)
                {
                  v461 = (unint64_t *)&v460->__shared_owners_;
                  do
                    v462 = __ldaxr(v461);
                  while (__stlxr(v462 - 1, v461));
                  if (!v462)
                  {
                    ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                    std::__shared_weak_count::__release_weak(v460);
                  }
                }
                v463 = *(std::__shared_weak_count **)(v459 + 16);
                if (v463)
                {
                  v464 = (unint64_t *)&v463->__shared_owners_;
                  do
                    v465 = __ldaxr(v464);
                  while (__stlxr(v465 - 1, v464));
                  if (!v465)
                  {
                    ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                    std::__shared_weak_count::__release_weak(v463);
                  }
                }
                MEMORY[0x212BC6398](v459, 0x10F0C40B62ED6C6);
              }
            }
            v466 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v467 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v468 = __ldaxr(v467);
              while (__stlxr(v468 - 1, v467));
              if (!v468)
              {
                ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                std::__shared_weak_count::__release_weak(v466);
              }
            }
            v469 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v470 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v471 = __ldaxr(v470);
              while (__stlxr(v471 - 1, v470));
              if (!v471)
              {
                ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                std::__shared_weak_count::__release_weak(v469);
              }
            }
          }
          else
          {
            os_log_type_enabled(v437, OS_LOG_TYPE_INFO);
            v472 = *(_DWORD *)v349;
            *(_DWORD *)object = 67109376;
            *(_DWORD *)&object[4] = v472;
            *(_WORD *)&object[8] = 2048;
            *(double *)&object[10] = v438;
            v473 = (void *)_os_log_send_and_compose_impl();
            a1 = v557;
            if (v473)
              free(v473);
          }
          if (v351)
          {
            sub_20E8C003C((uint64_t)oslog, "Add a keyframe with ID %d at timestamp %f.", *(_DWORD *)v349, v349[1] + v349[2]);
            sub_20E863570((uint64_t)oslog);
          }
          sub_20E863570((uint64_t)oslog);
          v418 = (std::__shared_weak_count *)v588.i64[0];
          if (!v588.i64[0])
            goto LABEL_776;
          v474 = (unint64_t *)(v588.i64[0] + 8);
          do
            v420 = __ldaxr(v474);
          while (__stlxr(v420 - 1, v474));
LABEL_774:
          if (!v420)
          {
            ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
            std::__shared_weak_count::__release_weak(v418);
          }
          goto LABEL_776;
        }
      }
      memmove(v426, v424, v425);
      goto LABEL_709;
    }
  }
LABEL_143:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 80) != 1)
    goto LABEL_167;
LABEL_144:
  *(_QWORD *)&object[40] = 0x3FF0000000000000;
  *(_QWORD *)object = 0x3FF0000000000000;
  memset(&object[8], 0, 32);
  v592 = 0u;
  v593 = 0u;
  v594 = xmmword_21030D320;
  v99 = *a2;
  v100 = a2[1];
  if (*a2 != v100)
  {
    do
    {
      v101 = *v99;
      if (*((_QWORD *)*v99 + 2) != *((_QWORD *)*v99 + 1))
      {
        LODWORD(v102) = 0;
        do
        {
          sub_20F0FBDDC(a1, *v101, v102, (__int128 *)object);
          v102 = (v102 + 1);
        }
        while (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v101 + 2) - *((_QWORD *)v101 + 1)) >> 7) > v102);
      }
      ++v99;
    }
    while (v99 != v100);
  }
  v103 = *(_DWORD *)v535;
  v104 = *(_QWORD *)(a1 + 304);
  v105 = *(_QWORD *)(a1 + 264);
  if (v104)
  {
    v106 = *(_QWORD *)(a1 + 288);
    v107 = (*(_QWORD *)(a1 + 272) - v105) >> 3;
    v108 = *(_QWORD *)(a1 + 304);
    while (*(_DWORD *)(v105 + 8 * (v106 % v107)) != v103)
    {
      ++v106;
      if (!--v108)
        goto LABEL_157;
    }
  }
  else
  {
    v107 = (*(_QWORD *)(a1 + 272) - v105) >> 3;
LABEL_157:
    v109 = *(_QWORD *)(a1 + 296);
    v110 = v105 + 8 * v109;
    *(_DWORD *)v110 = v103;
    *(_BYTE *)(v110 + 4) = 0;
    if (v109 + 1 >= v107)
      v111 = v107;
    else
      v111 = 0;
    *(_QWORD *)(a1 + 296) = v109 + 1 - v111;
    if (v104 == v107)
    {
      v112 = *(_QWORD *)(a1 + 288) + 1;
      if (v112 < v104)
        v104 = 0;
      *(_QWORD *)(a1 + 288) = v112 - v104;
    }
    else
    {
      *(_QWORD *)(a1 + 304) = v104 + 1;
    }
  }
  v546 = 0;
LABEL_778:
  v475 = *(_QWORD **)(a1 + 112);
  for (i1 = *(_QWORD **)(a1 + 120); v475 != i1; v475 += 21)
  {
    while (1)
    {
      v477 = v475[9];
      if (v477)
        break;
      *(_BYTE *)(v475[5] + 8 * ((uint64_t)(v475[6] - v475[5]) >> 3) - 32) = 1;
      v475 += 21;
      if (v475 == i1)
        goto LABEL_783;
    }
    *(_BYTE *)(v475[5] + 56 * v477 - 32) = 1;
  }
LABEL_783:
  v478 = *(_QWORD **)(a1 + 136);
  for (i2 = *(_QWORD **)(a1 + 144); v478 != i2; v478 += 21)
  {
    while (1)
    {
      v480 = v478[9];
      if (v480)
        break;
      *(_BYTE *)(v478[5] + 8 * ((uint64_t)(v478[6] - v478[5]) >> 3) - 32) = 1;
      v478 += 21;
      if (v478 == i2)
        goto LABEL_788;
    }
    *(_BYTE *)(v478[5] + 56 * v480 - 32) = 1;
  }
LABEL_788:
  v481 = *(_QWORD *)(a1 + 88);
  if (v481)
  {
    v482 = *v558;
  }
  else
  {
    v482 = *(_QWORD *)(a1 + 56);
    v481 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(a1 + 64) - v482) >> 3);
  }
  *(_BYTE *)(v482 + 328 * v481 - 304) = 1;
  sub_20F0F10C4(&v585);
  if (**(int **)(v585 + 56) <= 3)
  {
    v483 = *(unsigned __int8 *)(v585 + 72);
    v484 = sub_20E8C31DC(v585, "OSLogSurrogateAppender", 1, 0);
    v485 = v484;
    if (v483 || v484)
    {
      *(_QWORD *)oslog = &v585;
      *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
      *(_DWORD *)&oslog[24] = 3;
      *(_QWORD *)&oslog[32] = "unknown file";
      *(_DWORD *)&oslog[40] = 1212;
      v588.i64[0] = 0;
      v587.i64[0] = (uint64_t)"unknown function";
      v587.i64[1] = 0;
      v486 = **(_QWORD **)oslog;
      v487 = (const char *)(**(_QWORD **)oslog + 16);
      v559 = v487;
      if (*(char *)(**(_QWORD **)oslog + 39) < 0)
      {
        v487 = *(const char **)(v486 + 16);
        v488 = *(_QWORD *)(v486 + 24);
      }
      else
      {
        v488 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
      }
      v564 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 80);
      v570 = *(_QWORD *)(a1 + 168);
      v489 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v489 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v490 = byte_254A4A4F8;
      else
        v490 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v491 = byte_254A4A4F8[23];
      else
        v491 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v490, v487);
      v492 = &object[8];
      if (v491 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v491 >= 0x17)
      {
        v493 = (v491 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v491 | 7) != 0x17)
          v493 = v491 | 7;
        v494 = v493 + 1;
        v492 = operator new(v493 + 1);
        *(_QWORD *)&object[24] = v494 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v492;
        *(_QWORD *)&object[16] = v491;
      }
      else
      {
        object[31] = v491;
        if (!v491)
        {
LABEL_812:
          v492[v491] = 0;
          object[32] = 1;
          v495 = &object[40];
          if (v488 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v488 >= 0x17)
          {
            v497 = (v488 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v488 | 7) != 0x17)
              v497 = v488 | 7;
            v498 = v497 + 1;
            v495 = operator new(v497 + 1);
            v592.i64[1] = v498 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v495;
            v592.i64[0] = v488;
          }
          else
          {
            v592.i8[15] = v488;
            if (!v488)
            {
              object[40] = 0;
              v593.i8[0] = 1;
              v496 = *(NSObject **)object;
              if ((v592.i8[15] & 0x80000000) == 0)
                goto LABEL_816;
              goto LABEL_822;
            }
          }
          memmove(v495, v487, v488);
          v495[v488] = 0;
          v593.i8[0] = 1;
          v496 = *(NSObject **)object;
          if ((v592.i8[15] & 0x80000000) == 0)
          {
LABEL_816:
            if (!object[32])
              goto LABEL_825;
            goto LABEL_823;
          }
LABEL_822:
          operator delete(*(void **)&object[40]);
          if (!object[32])
          {
LABEL_825:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v485 && *(_QWORD *)(v485 + 24))
            {
              v499 = _os_log_pack_size();
              v500 = (std::__shared_weak_count_vtbl *)operator new(v499, (std::align_val_t)8uLL);
              v501 = (std::__shared_weak_count *)operator new();
              v502 = v501;
              v501->__shared_owners_ = 0;
              v503 = (unint64_t *)&v501->__shared_owners_;
              v501->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v501->__shared_weak_owners_ = 0;
              v501[1].__vftable = v500;
              *(_QWORD *)object = v500;
              *(_QWORD *)&object[8] = v500;
              *(_QWORD *)&object[16] = v501;
              do
                v504 = __ldxr(v503);
              while (__stxr(v504 + 1, v503));
              memset(&object[24], 0, 24);
              do
                v505 = __ldaxr(v503);
              while (__stlxr(v505 - 1, v503));
              if (!v505)
              {
                ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                std::__shared_weak_count::__release_weak(v502);
              }
              v506 = *(_QWORD *)object;
              v507 = _os_log_pack_fill();
              *(_DWORD *)v507 = 134218240;
              *(_QWORD *)(v507 + 4) = v564;
              *(_WORD *)(v507 + 12) = 2048;
              *(_QWORD *)(v507 + 14) = v570;
              v508 = operator new();
              v509 = *(unsigned __int8 *)(v486 + 39);
              v510 = v559;
              if ((v509 & 0x80u) != 0)
              {
                v510 = *(const char **)(v486 + 16);
                v509 = *(_QWORD *)(v486 + 24);
              }
              *(_QWORD *)v508 = v506;
              *(_OWORD *)(v508 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v508 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v508 + 40) = v510;
              *(_QWORD *)(v508 + 48) = v509;
              *(_BYTE *)(v508 + 56) = 1;
              v582[0] = 0;
              *(_QWORD *)&v572 = v508;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v485 + 24) + 40))(*(_QWORD *)(v485 + 24), &v572);
              v511 = v572;
              *(_QWORD *)&v572 = 0;
              if (v511)
              {
                v512 = *(std::__shared_weak_count **)(v511 + 32);
                if (v512)
                {
                  v513 = (unint64_t *)&v512->__shared_owners_;
                  do
                    v514 = __ldaxr(v513);
                  while (__stlxr(v514 - 1, v513));
                  if (!v514)
                  {
                    ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                    std::__shared_weak_count::__release_weak(v512);
                  }
                }
                v515 = *(std::__shared_weak_count **)(v511 + 16);
                if (v515)
                {
                  v516 = (unint64_t *)&v515->__shared_owners_;
                  do
                    v517 = __ldaxr(v516);
                  while (__stlxr(v517 - 1, v516));
                  if (!v517)
                  {
                    ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                    std::__shared_weak_count::__release_weak(v515);
                  }
                }
                MEMORY[0x212BC6398](v511, 0x10F0C40B62ED6C6);
                v518 = v582[0];
                v582[0] = 0;
                if (v518)
                {
                  v519 = (std::__shared_weak_count *)*((_QWORD *)v518 + 4);
                  if (v519)
                  {
                    v520 = (unint64_t *)&v519->__shared_owners_;
                    do
                      v521 = __ldaxr(v520);
                    while (__stlxr(v521 - 1, v520));
                    if (!v521)
                    {
                      ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                      std::__shared_weak_count::__release_weak(v519);
                    }
                  }
                  v522 = (std::__shared_weak_count *)*((_QWORD *)v518 + 2);
                  if (v522)
                  {
                    v523 = (unint64_t *)&v522->__shared_owners_;
                    do
                      v524 = __ldaxr(v523);
                    while (__stlxr(v524 - 1, v523));
                    if (!v524)
                    {
                      ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                      std::__shared_weak_count::__release_weak(v522);
                    }
                  }
                  MEMORY[0x212BC6398](v518, 0x10F0C40B62ED6C6);
                }
              }
              v525 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v526 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v527 = __ldaxr(v526);
                while (__stlxr(v527 - 1, v526));
                if (!v527)
                {
                  ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                  std::__shared_weak_count::__release_weak(v525);
                }
              }
              v528 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v529 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v530 = __ldaxr(v529);
                while (__stlxr(v530 - 1, v529));
                if (!v530)
                {
                  ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                  std::__shared_weak_count::__release_weak(v528);
                }
              }
            }
            else
            {
              os_log_type_enabled(v496, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v564;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v570;
              v531 = (void *)_os_log_send_and_compose_impl();
              if (v531)
                free(v531);
            }
            if (v483)
            {
              sub_20E8C003C((uint64_t)oslog, "Track index has %zu frames (of %zu capacity)", *(_QWORD *)(*(_QWORD *)(v557 + 112) + 80), *(_QWORD *)(v557 + 168));
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v532 = (std::__shared_weak_count *)v588.i64[0];
            if (v588.i64[0])
            {
              v533 = (unint64_t *)(v588.i64[0] + 8);
              do
                v534 = __ldaxr(v533);
              while (__stlxr(v534 - 1, v533));
              if (!v534)
              {
                ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                std::__shared_weak_count::__release_weak(v532);
              }
            }
            goto LABEL_879;
          }
LABEL_823:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_825;
        }
      }
      memmove(v492, v490, v491);
      goto LABEL_812;
    }
  }
LABEL_879:
  if (v546)
    operator delete(v546);
}

void sub_20F100CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;

  if (LOBYTE(STACK[0x278]) && SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&object);
  if (!a34)
    _Unwind_Resume(a1);
  operator delete(a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1011E4(uint64_t result, float64x2_t *a2, char a3, uint64_t *a4, char a5, int a6, double a7, double a8)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t *v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  unint64_t v77;
  int8x16_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  int64x2_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  _QWORD *v142;
  _QWORD *i;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *j;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v161;
  float64_t v162;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  _QWORD *v172;

  v10 = (_QWORD *)result;
  v11 = *(_QWORD *)(result + 88);
  if (v11 >= 2)
  {
    v12 = *(_QWORD *)(result + 56);
    v166 = v12 + 328 * v11 - 656;
    if (*(double *)(v12 + 328 * v11 - 640) == a7)
      goto LABEL_8;
  }
  else
  {
    v12 = *(_QWORD *)(result + 56);
    v166 = v12 + 328 * (v11 - 0x7063E7063E7063E7 * ((*(_QWORD *)(result + 64) - v12) >> 3)) - 656;
    if (!v11)
      v11 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(result + 64) - v12) >> 3);
    if (*(double *)(v166 + 16) == a7)
      goto LABEL_8;
  }
  v13 = (_QWORD *)result;
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1314, (uint64_t)"cva::exactlyEqual(ref_state_original_timestamp, ref_frame.original_timestamp())", 79, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  v10 = v13;
  if ((_DWORD)result)
    goto LABEL_208;
LABEL_8:
  v169 = v12 + 328 * v11 - 328;
  if (*(double *)(v12 + 328 * v11 - 312) != a8)
  {
    v14 = v10;
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1316, (uint64_t)"cva::exactlyEqual(cur_state_original_timestamp, curr_frame.original_timestamp())", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v10 = v14;
    if ((_DWORD)result)
LABEL_208:
      abort();
  }
  v15 = *a4;
  v161 = a4[1];
  if (*a4 != v161)
  {
    v16 = &qword_254A6DE40;
    __asm { FMOV            V0.2D, #1.0 }
    v162 = *((double *)&_Q0 + 1);
    v172 = v10;
    do
    {
      v171 = v15;
      v21 = *(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8);
      if (v21)
      {
        v22 = 0;
        v167 = 0x4EC4EC4EC4EC4EC5 * (v21 >> 7);
        do
        {
          v168 = *(_DWORD *)v169;
          v170 = *(_DWORD *)v171;
          if (*(_DWORD *)v171 >= 0x10000u)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v31 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v102 = *v16;
              v103 = v16[1];
              if (*v16 != v103)
              {
                do
                {
                  v105 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v102;
                  v104 = *(_QWORD *)(v102 + 8);
                  v102 += 16;
                  v105(v104, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                while (v102 != v103);
              }
            }
            v32 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v22 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v33 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v106 = *v16;
              v107 = v16[1];
              if (*v16 != v107)
              {
                do
                {
                  v109 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v106;
                  v108 = *(_QWORD *)(v106 + 8);
                  v106 += 16;
                  v109(v108, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                while (v106 != v107);
              }
            }
            v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          if (v170 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v110 = *v16;
              v111 = v16[1];
              if (*v16 != v111)
              {
                do
                {
                  v113 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v110;
                  v112 = *(_QWORD *)(v110 + 8);
                  v110 += 16;
                  v113(v112, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                while (v110 != v111);
              }
            }
            v36 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v22 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v37 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v114 = *v16;
              v115 = v16[1];
              if (*v16 != v115)
              {
                do
                {
                  v117 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v114;
                  v116 = *(_QWORD *)(v114 + 8);
                  v114 += 16;
                  v117(v116, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                while (v114 != v115);
              }
            }
            v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v39 = *(_DWORD *)v171;
          if (*(_DWORD *)v171 >= 0x10000u)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v119 = *v16;
              v118 = v16[1];
              if (*v16 != v118)
              {
                do
                {
                  v121 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v119;
                  v120 = *(_QWORD *)(v119 + 8);
                  v119 += 16;
                  v121(v120, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                while (v119 != v118);
              }
            }
            v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v22 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v42 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v123 = *v16;
              v122 = v16[1];
              if (*v16 != v122)
              {
                do
                {
                  v125 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v123;
                  v124 = *(_QWORD *)(v123 + 8);
                  v123 += 16;
                  v125(v124, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                while (v123 != v122);
              }
            }
            v43 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          if (v39 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v127 = *v16;
              v126 = v16[1];
              if (*v16 != v126)
              {
                do
                {
                  v129 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v127;
                  v128 = *(_QWORD *)(v127 + 8);
                  v127 += 16;
                  v129(v128, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                while (v127 != v126);
              }
            }
            v45 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v22 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v46 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v131 = *v16;
              v130 = v16[1];
              if (*v16 != v130)
              {
                do
                {
                  v133 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v131;
                  v132 = *(_QWORD *)(v131 + 8);
                  v131 += 16;
                  v133(v132, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                while (v131 != v130);
              }
            }
            v47 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v48 = v172[32];
          if (v48)
          {
            v49 = 0;
            v50 = v172[27];
            while (1)
            {
              v51 = (v172[30] + v49) % (0xCCCCCCCCCCCCCCCDLL * ((v172[28] - v50) >> 5));
              v52 = v50 + 160 * v51;
              if (((unsigned __int16)v22 | ((unsigned __int16)v170 << 16)) == *(_DWORD *)(v52 + 16)
                && v168 == *(_DWORD *)(v52 + 12))
              {
                break;
              }
              if (v48 == ++v49)
                goto LABEL_79;
            }
            v10 = v172;
          }
          else
          {
LABEL_79:
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1336, (uint64_t)"query_iter != incremental_pose_per_frame_.end()", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v53 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v99 = qword_254A6DE40;
              v98 = qword_254A6DE48;
              while (v99 != v98)
              {
                v101 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v99;
                v100 = *(_QWORD *)(v99 + 8);
                v99 += 16;
                v101(v100, "query_iter != incremental_pose_per_frame_.end()", 47, "", 0);
              }
            }
            v54 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "query_iter != incremental_pose_per_frame_.end()", 47, "", 0);
            v10 = v172;
            v50 = v172[27];
            v51 = (v172[30] + v48) % (0xCCCCCCCCCCCCCCCDLL * ((v172[28] - v50) >> 5));
            v49 = v48;
            v16 = &qword_254A6DE40;
          }
          v55 = v50 + 160 * v51;
          if (*(_BYTE *)(v55 + 32))
            _ZF = *(double *)(v166 + 16) == *(double *)(v55 + 24);
          else
            _ZF = 0;
          v57 = v16;
          if (!_ZF)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1338, (uint64_t)"ExactlyEqual(ref_frame.original_timestamp(), query_iter->ref_frame_orig_timestamp)", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v135 = *v16;
              v134 = v16[1];
              if (*v16 != v134)
              {
                do
                {
                  v137 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v135;
                  v136 = *(_QWORD *)(v135 + 8);
                  v135 += 16;
                  v137(v136, "ExactlyEqual(ref_frame.original_timestamp(), query_iter->ref_frame_orig_timestamp)", 82, "", 0);
                }
                while (v135 != v134);
              }
            }
            v59 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "ExactlyEqual(ref_frame.original_timestamp(), query_iter->ref_frame_orig_timestamp)", 82, "", 0);
            v10 = v172;
            v50 = v172[27];
            v51 = (v172[30] + v49) % (0xCCCCCCCCCCCCCCCDLL * ((v172[28] - v50) >> 5));
            v57 = v16;
          }
          if (*(double *)(v169 + 16) != *(double *)(v50 + 160 * v51 + 40))
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerFG.cpp", 1340, (uint64_t)"ExactlyEqual(curr_frame.original_timestamp(), query_iter->curr_frame_orig_timestamp)", 84, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v60 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v139 = *v16;
              v138 = v16[1];
              if (*v16 != v138)
              {
                do
                {
                  v141 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v139;
                  v140 = *(_QWORD *)(v139 + 8);
                  v139 += 16;
                  v141(v140, "ExactlyEqual(curr_frame.original_timestamp(), query_iter->curr_frame_orig_timestamp)", 84, "", 0);
                }
                while (v139 != v138);
              }
            }
            v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, v16, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_208;
            result = qword_254A6DE58(unk_254A6DE60, "ExactlyEqual(curr_frame.original_timestamp(), query_iter->curr_frame_orig_timestamp)", 84, "", 0);
            v10 = v172;
            v57 = v16;
          }
          v62 = *(_QWORD *)(v171 + 8) + 1664 * v22;
          v63 = *(double *)(v62 + 16);
          v64 = *(float64x2_t *)v62;
          v65 = *(double *)(v62 + 40);
          v66 = *(float64x2_t *)(v62 + 24);
          v67 = *(double *)(v62 + 64);
          _Q1 = *(float64x2_t *)(v62 + 48);
          v69 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v62, (int64x2_t)v66);
          v70 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, (int64x2_t)v66);
          v71.f64[0] = v63;
          v71.f64[1] = v65;
          v72 = *(double *)(v62 + 88);
          v73 = *(float64x2_t *)(v62 + 72);
          v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v73.f64[0]), v70, v73, 1), v71, v72);
          _Q7 = vmulq_f64(_Q1, v73);
          _D18 = *(_QWORD *)(v62 + 80);
          __asm { FMLA            D7, D18, V1.D[1] }
          _Q7.f64[0] = _Q7.f64[0] + v67 * v72;
          v77 = *(_QWORD *)(v62 + 48);
          v78 = vextq_s8((int8x16_t)v70, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1), 8uLL);
          *(_QWORD *)&v70.f64[1] = v78.i64[0];
          v79.f64[1] = v162;
          *(_QWORD *)&v79.f64[0] = *(_OWORD *)&vnegq_f64(_Q7);
          v80 = a2[1];
          v82 = a2[2];
          v81 = a2[3];
          v84 = a2[4];
          v83 = a2[5];
          v86 = a2[6];
          v85 = a2[7];
          v87 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, a2->f64[0]), v70, *a2, 1), v71, v80.f64[0]), v74, v80, 1);
          v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v77, a2->f64[0]), (float64x2_t)v78.u64[1], *a2, 1), (float64x2_t)*(unint64_t *)&v67, v80.f64[0]), v79, v80, 1);
          v89 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v82.f64[0]), v70, v82, 1), v71, v81.f64[0]), v74, v81, 1);
          v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v77, v82.f64[0]), (float64x2_t)v78.u64[1], v82, 1), (float64x2_t)*(unint64_t *)&v67, v81.f64[0]), v79, v81, 1);
          v91 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v84.f64[0]), v70, v84, 1), v71, v83.f64[0]), v74, v83, 1);
          v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v77, v84.f64[0]), (float64x2_t)v78.u64[1], v84, 1), (float64x2_t)*(unint64_t *)&v67, v83.f64[0]), v79, v83, 1);
          v93 = vmlsq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v86.f64[0]), v70, v86, 1), v71, v85.f64[0]), v74, v85, 1);
          v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v77, v86.f64[0]), (float64x2_t)v78.u64[1], v86, 1), (float64x2_t)*(unint64_t *)&v67, v85.f64[0]), v79, v85, 1);
          v95 = vaddq_f64(v93, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, v73.f64[0]), v89, v73, 1), v91, v72));
          v96 = (int64x2_t)vaddq_f64(v94, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v73.f64[0]), v90, v73, 1), v92, v72));
          if (a6)
          {
            v29 = v10[27];
            v30 = (v10[30] + v49) % (0xCCCCCCCCCCCCCCCDLL * ((v10[28] - v29) >> 5));
            v97 = (_QWORD *)(v29 + 160 * v30);
            v97[9] = *(_QWORD *)&v95.f64[0];
            v97[13] = *(_QWORD *)&v95.f64[1];
            v97[17] = v96.i64[0];
          }
          else
          {
            v23 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, v64.f64[0]), v89, v64, 1), v91, v63), (float64x2_t)0, v93);
            v24 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v64.f64[0]), v90, v64, 1), v92, v63), (float64x2_t)0, v94);
            v25 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, v66.f64[0]), v89, v66, 1), v91, v65), (float64x2_t)0, v93);
            v26 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v66.f64[0]), v90, v66, 1), v92, v65), (float64x2_t)0, v94);
            v27 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, _Q1.f64[0]), v89, _Q1, 1), v91, v67), (float64x2_t)0, v93);
            v28 = (int64x2_t *)(v10[27]
                              + 160 * ((v10[30] + v49) % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10[28] - v10[27]) >> 5))));
            v28[3] = vzip1q_s64(v23, v25);
            v28[4].i64[0] = v27.i64[0];
            v28[4].i64[1] = *(_QWORD *)&v95.f64[0];
            v28[5] = vzip2q_s64(v23, v25);
            v28[6] = vzip2q_s64(v27, vdupq_n_s64(*(unint64_t *)&v95.f64[1]));
            v28[7] = vzip1q_s64(v24, v26);
            v28[8] = vzip1q_s64((int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, _Q1.f64[0]), v90, _Q1, 1), v92, v67), (float64x2_t)0, v94), v96);
            v29 = v10[27];
            v30 = (v10[30] + v49) % (0xCCCCCCCCCCCCCCCDLL * ((v10[28] - v29) >> 5));
          }
          *(_BYTE *)(v29 + 160 * v30 + 144) = a3;
          ++v22;
          v16 = v57;
        }
        while (v22 != v167);
      }
      v15 = v171 + 32;
    }
    while (v171 + 32 != v161);
  }
  v142 = (_QWORD *)v10[14];
  for (i = (_QWORD *)v10[15]; v142 != i; v142 += 21)
  {
    while (1)
    {
      v144 = v142[9];
      if (!v144)
        break;
      *(_BYTE *)(v142[5] + 56 * v144 - 32) = 1;
      v142 += 21;
      if (v142 == i)
        goto LABEL_186;
    }
    *(_BYTE *)(v142[5] + 8 * ((uint64_t)(v142[6] - v142[5]) >> 3) - 32) = 1;
  }
LABEL_186:
  v145 = (_QWORD *)v10[17];
  for (j = (_QWORD *)v10[18]; v145 != j; v145 += 21)
  {
    while (1)
    {
      v147 = v145[9];
      if (!v147)
        break;
      *(_BYTE *)(v145[5] + 56 * v147 - 32) = 1;
      v145 += 21;
      if (v145 == j)
        goto LABEL_191;
    }
    *(_BYTE *)(v145[5] + 8 * ((uint64_t)(v145[6] - v145[5]) >> 3) - 32) = 1;
  }
LABEL_191:
  v148 = v10[11];
  v149 = v10[7];
  if (!v148)
    v148 = 0x8F9C18F9C18F9C19 * ((v10[8] - v149) >> 3);
  *(_BYTE *)(v149 + 328 * v148 - 304) = 1;
  v150 = *(_DWORD *)v169;
  v151 = v10[38];
  v152 = v10[33];
  if (v151)
  {
    v153 = v10[36];
    v154 = (v10[34] - v152) >> 3;
    v155 = v10[38];
    while (*(_DWORD *)(v152 + 8 * (v153 % v154)) != v150)
    {
      ++v153;
      if (!--v155)
        goto LABEL_199;
    }
  }
  else
  {
    v154 = (v10[34] - v152) >> 3;
LABEL_199:
    v156 = v10[37];
    v157 = v152 + 8 * v156;
    *(_DWORD *)v157 = v150;
    *(_BYTE *)(v157 + 4) = a5;
    if (v156 + 1 >= v154)
      v158 = v154;
    else
      v158 = 0;
    v10[37] = v156 + 1 - v158;
    if (v151 == v154)
    {
      v159 = v10[36] + 1;
      if (v159 < v151)
        v151 = 0;
      v10[36] = v159 - v151;
    }
    else
    {
      v10[38] = v151 + 1;
    }
  }
  return result;
}

void sub_20F102700(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v17;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  void **v42;
  char *v43;
  unint64_t v45;
  uint64_t v47;
  float v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v79;
  int *v80;
  char v81;
  _BYTE v83[160];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  uint64_t v94;

  v3 = (unint64_t)a1;
  v94 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 1;
  *(_QWORD *)(a2 + 48) = 0xBFF0000000000000;
  *(_BYTE *)(a2 + 56) = 0;
  v75 = a2 + 56;
  *(_BYTE *)(a2 + 60) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  v76 = a2 + 64;
  *(_BYTE *)(a2 + 68) = 0;
  v4 = a1[11];
  v5 = a1[7];
  if (!v4)
    v4 = 0x8F9C18F9C18F9C19 * ((a1[8] - v5) >> 3);
  v6 = v5 + 328 * v4 - 328;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v6 + 8);
  v7 = (uint64_t *)a1[23];
  v79 = (uint64_t *)a1[24];
  v80 = (int *)v6;
  if (v7 != v79)
  {
    v77 = (_QWORD *)(a2 + 16);
    while (1)
    {
      sub_20F0F91AC((_BYTE *)v3, *v80, *(_DWORD *)v7, *((_DWORD *)v7 + 1), (uint64_t)v83);
      v8 = v83[0];
      v91 = *(_OWORD *)&v83[97];
      v92 = *(_OWORD *)&v83[113];
      v93[0] = *(_OWORD *)&v83[129];
      *(_OWORD *)((char *)v93 + 15) = *(_OWORD *)&v83[144];
      v87 = *(_OWORD *)&v83[33];
      v88 = *(_OWORD *)&v83[49];
      v89 = *(_OWORD *)&v83[65];
      v90 = *(_OWORD *)&v83[81];
      v85 = *(_OWORD *)&v83[1];
      v86 = *(_OWORD *)&v83[17];
      v81 = v84;
      v2 = v7[16];
      v9 = v7[17];
      v10 = *v7;
      if (*v7 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v10) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v11 = ((_DWORD)v10 << 16) | (unint64_t)WORD2(v10);
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
      {
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v3 = ((_DWORD)v10 << 16) | (unint64_t)WORD2(v10);
          if (v12 <= v11)
            v3 = v11 % v12;
        }
        else
        {
          v3 = ((_DWORD)v12 - 1) & v11;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v3);
        if (v14)
        {
          v15 = *v14;
          if (v15)
          {
            if (v13.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v15[1];
                if (v19 == v11)
                {
                  if (*((_DWORD *)v15 + 4) == (_DWORD)v10 && *((_DWORD *)v15 + 5) == HIDWORD(v10))
                    goto LABEL_75;
                }
                else if ((v19 & (v12 - 1)) != v3)
                {
                  goto LABEL_35;
                }
                v15 = (uint64_t *)*v15;
                if (!v15)
                  goto LABEL_35;
              }
            }
            do
            {
              v17 = v15[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v10 && *((_DWORD *)v15 + 5) == HIDWORD(v10))
                  goto LABEL_75;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != v3)
                  break;
              }
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_35:
      v20 = (char *)operator new(0xC8uLL);
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = v11;
      *((_QWORD *)v20 + 2) = v10;
      *((_QWORD *)v20 + 3) = (unint64_t)((uint64_t)(v9 - v2) >> 3) >> 1;
      v20[32] = v8;
      v21 = v92;
      *(_OWORD *)(v20 + 129) = v91;
      *(_OWORD *)(v20 + 145) = v21;
      *(_OWORD *)(v20 + 161) = v93[0];
      *((_OWORD *)v20 + 11) = *(_OWORD *)((char *)v93 + 15);
      v22 = v88;
      *(_OWORD *)(v20 + 65) = v87;
      *(_OWORD *)(v20 + 81) = v22;
      v23 = v90;
      *(_OWORD *)(v20 + 97) = v89;
      *(_OWORD *)(v20 + 113) = v23;
      v24 = v86;
      *(_OWORD *)(v20 + 33) = v85;
      *(_OWORD *)(v20 + 49) = v24;
      v20[192] = v81;
      v2 = a2;
      v25 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
      v26 = *(float *)(a2 + 32);
      if (v12 && (float)(v26 * (float)v12) >= v25)
        goto LABEL_64;
      v27 = v12 < 3 || (v12 & (v12 - 1)) != 0;
      v28 = v27 | (2 * v12);
      v29 = vcvtps_u32_f32(v25 / v26);
      if (v28 <= v29)
        prime = v29;
      else
        prime = v28;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v12 = *(_QWORD *)(a2 + 8);
      }
      if (prime > v12)
        goto LABEL_48;
      if (prime < v12)
      {
        v31 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
        if (v12 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          v31 = std::__next_prime(v31);
        }
        else
        {
          v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2)
            v31 = v33;
        }
        if (prime <= v31)
          prime = v31;
        if (prime < v12)
LABEL_48:
          sub_20E8D2B3C(a2, prime);
      }
      v12 = *(_QWORD *)(a2 + 8);
      if ((v12 & (v12 - 1)) == 0)
      {
        v3 = ((_DWORD)v12 - 1) & v11;
        v34 = *(_QWORD *)a2;
        v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3);
        if (v35)
          goto LABEL_65;
        goto LABEL_67;
      }
      if (v12 > v11)
        break;
      v3 = v11 % v12;
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v11 % v12));
      if (v35)
      {
LABEL_65:
        *(_QWORD *)v20 = *v35;
        goto LABEL_73;
      }
LABEL_67:
      *(_QWORD *)v20 = *v77;
      *v77 = v20;
      *(_QWORD *)(v34 + 8 * v3) = v77;
      if (!*(_QWORD *)v20)
        goto LABEL_74;
      v36 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v36 >= v12)
          v36 %= v12;
      }
      else
      {
        v36 &= v12 - 1;
      }
      v35 = (_QWORD *)(*(_QWORD *)a2 + 8 * v36);
LABEL_73:
      *v35 = v20;
LABEL_74:
      ++*(_QWORD *)(a2 + 24);
LABEL_75:
      v7 += 77;
      v3 = (unint64_t)a1;
      if (v7 == v79)
        goto LABEL_76;
    }
    v3 = ((_DWORD)v10 << 16) | (unint64_t)WORD2(v10);
LABEL_64:
    v34 = *(_QWORD *)a2;
    v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3);
    if (v35)
      goto LABEL_65;
    goto LABEL_67;
  }
LABEL_76:
  if (*(_QWORD *)(v3 + 208))
  {
    v37 = **(_QWORD **)(v3 + 184);
    v38 = a2;
    if (v37 >= 0x10000
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v37) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v39 = ((_DWORD)v37 << 16) | (unint64_t)WORD2(v37);
    v40 = *(_QWORD *)(a2 + 8);
    if (v40)
    {
      v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
      v41.i16[0] = vaddlv_u8(v41);
      if (v41.u32[0] > 1uLL)
      {
        v2 = ((_DWORD)v37 << 16) | (unint64_t)WORD2(v37);
        if (v40 <= v39)
          v2 = v39 % v40;
      }
      else
      {
        v2 = ((_DWORD)v40 - 1) & v39;
      }
      v42 = *(void ***)(*(_QWORD *)a2 + 8 * v2);
      if (v42)
      {
        v43 = (char *)*v42;
        if (*v42)
        {
          if (v41.u32[0] < 2uLL)
          {
            while (1)
            {
              v47 = *((_QWORD *)v43 + 1);
              if (v47 == v39)
              {
                if (*((_DWORD *)v43 + 4) == (_DWORD)v37 && *((_DWORD *)v43 + 5) == HIDWORD(v37))
                  goto LABEL_147;
              }
              else if ((v47 & (v40 - 1)) != v2)
              {
                goto LABEL_108;
              }
              v43 = *(char **)v43;
              if (!v43)
                goto LABEL_108;
            }
          }
          do
          {
            v45 = *((_QWORD *)v43 + 1);
            if (v45 == v39)
            {
              if (*((_DWORD *)v43 + 4) == (_DWORD)v37 && *((_DWORD *)v43 + 5) == HIDWORD(v37))
                goto LABEL_147;
            }
            else
            {
              if (v45 >= v40)
                v45 %= v40;
              if (v45 != v2)
                break;
            }
            v43 = *(char **)v43;
          }
          while (v43);
        }
      }
    }
LABEL_108:
    v43 = (char *)operator new(0xC8uLL);
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = v39;
    *((_QWORD *)v43 + 2) = v37;
    *(_OWORD *)(v43 + 24) = 0u;
    *(_OWORD *)(v43 + 40) = 0u;
    *(_OWORD *)(v43 + 56) = 0u;
    *(_OWORD *)(v43 + 72) = 0u;
    *(_OWORD *)(v43 + 88) = 0u;
    *(_OWORD *)(v43 + 104) = 0u;
    *(_OWORD *)(v43 + 120) = 0u;
    *(_OWORD *)(v43 + 136) = 0u;
    *(_OWORD *)(v43 + 152) = 0u;
    *(_OWORD *)(v43 + 168) = 0u;
    *(_OWORD *)(v43 + 184) = 0u;
    v48 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
    v49 = *(float *)(a2 + 32);
    if (!v40 || (float)(v49 * (float)v40) < v48)
    {
      v50 = 1;
      if (v40 >= 3)
        v50 = (v40 & (v40 - 1)) != 0;
      v51 = v50 | (2 * v40);
      v52 = vcvtps_u32_f32(v48 / v49);
      if (v51 <= v52)
        v53 = v52;
      else
        v53 = v51;
      if (v53 == 1)
      {
        v53 = 2;
      }
      else if ((v53 & (v53 - 1)) != 0)
      {
        v53 = std::__next_prime(v53);
        v40 = *(_QWORD *)(a2 + 8);
      }
      if (v53 > v40)
        goto LABEL_120;
      if (v53 < v40)
      {
        v54 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
        if (v40 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v40), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
        {
          v54 = std::__next_prime(v54);
        }
        else
        {
          v56 = 1 << -(char)__clz(v54 - 1);
          if (v54 >= 2)
            v54 = v56;
        }
        if (v53 <= v54)
          v53 = v54;
        if (v53 < v40)
LABEL_120:
          sub_20E8D2B3C(a2, v53);
      }
      v38 = a2;
      v40 = *(_QWORD *)(a2 + 8);
      if ((v40 & (v40 - 1)) == 0)
      {
        v2 = ((_DWORD)v40 - 1) & v39;
        v57 = *(_QWORD *)a2;
        v58 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v2);
        if (!v58)
          goto LABEL_139;
LABEL_137:
        *(_QWORD *)v43 = *v58;
        goto LABEL_145;
      }
      if (v40 <= v39)
      {
        v2 = v39 % v40;
        v57 = *(_QWORD *)a2;
        v58 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v39 % v40));
        if (v58)
          goto LABEL_137;
        goto LABEL_139;
      }
      v2 = ((_DWORD)v37 << 16) | (unint64_t)WORD2(v37);
    }
    v57 = *(_QWORD *)v38;
    v58 = *(_QWORD **)(*(_QWORD *)v38 + 8 * v2);
    if (v58)
      goto LABEL_137;
LABEL_139:
    *(_QWORD *)v43 = *(_QWORD *)(v38 + 16);
    *(_QWORD *)(v38 + 16) = v43;
    *(_QWORD *)(v57 + 8 * v2) = v38 + 16;
    if (!*(_QWORD *)v43)
      goto LABEL_146;
    v59 = *(_QWORD *)(*(_QWORD *)v43 + 8);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v59 >= v40)
        v59 %= v40;
    }
    else
    {
      v59 &= v40 - 1;
    }
    v58 = (_QWORD *)(*(_QWORD *)v38 + 8 * v59);
LABEL_145:
    *v58 = v43;
LABEL_146:
    ++*(_QWORD *)(v38 + 24);
LABEL_147:
    v60 = *(_QWORD *)(*(_QWORD *)(v3 + 208) + 240);
    if (v60)
      v60 = (unint64_t)((uint64_t)(*(_QWORD *)(v60 + 128) - *(_QWORD *)(v60 + 120)) >> 3) >> 1;
    *(_QWORD *)v83 = v60;
    sub_20F0F91AC((_BYTE *)v3, *v80, v37, HIDWORD(v37), (uint64_t)&v83[8]);
    v62 = *(_OWORD *)&v83[144];
    v61 = v84;
    *(_OWORD *)(v43 + 152) = *(_OWORD *)&v83[128];
    *(_OWORD *)(v43 + 168) = v62;
    *(_OWORD *)(v43 + 184) = v61;
    v64 = *(_OWORD *)&v83[96];
    v63 = *(_OWORD *)&v83[112];
    v65 = *(_OWORD *)&v83[80];
    *(_OWORD *)(v43 + 88) = *(_OWORD *)&v83[64];
    *(_OWORD *)(v43 + 104) = v65;
    *(_OWORD *)(v43 + 120) = v64;
    *(_OWORD *)(v43 + 136) = v63;
    v67 = *(_OWORD *)&v83[32];
    v66 = *(_OWORD *)&v83[48];
    v68 = *(_OWORD *)&v83[16];
    *(_OWORD *)(v43 + 24) = *(_OWORD *)v83;
    *(_OWORD *)(v43 + 40) = v68;
    *(_OWORD *)(v43 + 56) = v67;
    *(_OWORD *)(v43 + 72) = v66;
    v69 = *(_QWORD *)(v3 + 208);
    v70 = *(_QWORD *)(v69 + 240);
    if (v70)
    {
      v71 = 1008;
      if (!*(_BYTE *)(v70 + 1024))
        v71 = 984;
      v72 = 1000;
      if (!*(_BYTE *)(v70 + 1024))
        v72 = 976;
      v70 = (*(_QWORD *)(v70 + v71) - *(_QWORD *)(v70 + v72)) >> 2;
    }
    *(_DWORD *)(v38 + 40) = v70;
    *(_BYTE *)(v38 + 44) = 1;
    v73 = *(_DWORD *)(v69 + 224);
    *(_BYTE *)(v75 + 4) = *(_BYTE *)(v69 + 228);
    *(_DWORD *)v75 = v73;
    v74 = *(_DWORD *)(v69 + 232);
    *(_BYTE *)(v76 + 4) = *(_BYTE *)(v69 + 236);
    *(_DWORD *)v76 = v74;
  }
}

void sub_20F103094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_20E8C25A8(a16);
  _Unwind_Resume(a1);
}

void sub_20F1030E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_20E8C25A8(a16);
  _Unwind_Resume(a1);
}

void sub_20F1030F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_20E8C25A8(a16);
  _Unwind_Resume(a1);
}

void sub_20F10310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_20E8C25A8(a16);
  _Unwind_Resume(a1);
}

void sub_20F103120(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[9];

  v4 = *(_QWORD *)(a1 + 208);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 240);
    if (v5)
    {
      sub_20F0E1A54(v5, a2, (uint64_t)v15);
      v6 = v15[0];
      v7 = v15[1];
      v8 = v15[2];
      v9 = v15[3];
      v10 = v15[4];
      v11 = v15[5];
      v12 = v15[6];
      v13 = v15[7];
      v14 = v15[8];
    }
    else
    {
      v6 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
    }
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    *(_OWORD *)(a3 + 32) = v8;
    *(_OWORD *)(a3 + 48) = v9;
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 80) = v11;
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 112) = v13;
    *(_OWORD *)(a3 + 128) = v14;
    *(_BYTE *)(a3 + 144) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
  }
}

void sub_20F1031CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = (_QWORD *)a2[32];
    a2[32] = 0;
    if (v3)
    {
      v4 = sub_20ED291D8(v3);
      MEMORY[0x212BC6398](v4, 0x10F0C405208BBE6);
    }
    v5 = (_QWORD *)a2[31];
    a2[31] = 0;
    if (v5)
    {
      v6 = sub_20ED291D8(v5);
      MEMORY[0x212BC6398](v6, 0x10F0C405208BBE6);
    }
    v7 = (_QWORD *)a2[30];
    a2[30] = 0;
    if (v7)
    {
      v8 = sub_20ED291D8(v7);
      MEMORY[0x212BC6398](v8, 0x10F0C405208BBE6);
    }
    JUMPOUT(0x212BC6398);
  }
}

uint64_t sub_20F103270(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;
  void **v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(_QWORD *)(a1 + 568) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 512);
  if (v4)
  {
    *(_QWORD *)(a1 + 520) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 472);
  if (v5)
  {
    *(_QWORD *)(a1 + 480) = v5;
    operator delete(v5);
  }
  sub_20F103380((_QWORD *)(a1 + 96));
  v6 = *(void ***)(a1 + 72);
  if (v6)
  {
    sub_20F103410(a1 + 72, v6);
    operator delete(*(void **)(a1 + 72));
  }
  v7 = *(void ***)(a1 + 48);
  if (v7)
  {
    sub_20F103410(a1 + 48, v7);
    operator delete(*(void **)(a1 + 48));
  }
  v8 = *(_QWORD **)(a1 + 16);
  while (v8)
  {
    v11 = v8;
    v8 = (_QWORD *)*v8;
    v12 = (std::__shared_weak_count *)v11[6];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v9 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t sub_20F103380(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[40];
  if (v3)
  {
    a1[41] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[37];
  if (v4)
  {
    a1[38] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[34];
  if (v5)
  {
    a1[35] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[31];
  if (v6)
  {
    a1[32] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[28];
  if (v7)
  {
    a1[29] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  return sub_20F028B60((uint64_t)a1);
}

void sub_20F103410(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(void ***)(a1 + 8);
    do
    {
      v8 = *(v5 - 3);
      v5 -= 3;
      v7 = v8;
      if (v8)
      {
        v9 = *(v4 - 2);
        v6 = v7;
        if (v9 != v7)
        {
          do
          {
            v10 = (void *)*(v9 - 3);
            if (v10)
            {
              *(v9 - 2) = v10;
              operator delete(v10);
            }
            v11 = *((unsigned int *)v9 - 8);
            if ((_DWORD)v11)
            {
              v12 = 0;
              v13 = 80 * v11;
              do
              {
                v14 = &v9[v12 / 8];
                v15 = (void *)v9[v12 / 8 - 27];
                if (v15)
                {
                  *(v14 - 26) = v15;
                  operator delete(v15);
                }
                v16 = (void *)*(v14 - 31);
                if (v16)
                {
                  v9[v12 / 8 - 30] = v16;
                  operator delete(v16);
                }
                v17 = (void *)*(v14 - 34);
                if (v17)
                {
                  v9[v12 / 8 - 33] = v17;
                  operator delete(v17);
                }
                v12 += 80;
              }
              while (v13 != v12);
            }
            *((_DWORD *)v9 - 8) = 0;
            v18 = (void *)*(v9 - 37);
            if (v18)
            {
              *(v9 - 36) = v18;
              operator delete(v18);
            }
            v19 = (void *)*(v9 - 40);
            if (v19)
            {
              *(v9 - 39) = v19;
              operator delete(v19);
            }
            v20 = (void *)*(v9 - 43);
            if (v20)
            {
              *(v9 - 42) = v20;
              operator delete(v20);
            }
            v21 = (void *)*(v9 - 46);
            if (v21)
            {
              *(v9 - 45) = v21;
              operator delete(v21);
            }
            v22 = (void *)*(v9 - 49);
            if (v22)
            {
              *(v9 - 48) = v22;
              operator delete(v22);
            }
            v23 = (void *)*(v9 - 52);
            if (v23)
            {
              *(v9 - 51) = v23;
              operator delete(v23);
            }
            v24 = (void *)*(v9 - 55);
            if (v24)
            {
              *(v9 - 54) = v24;
              operator delete(v24);
            }
            v25 = (void *)*(v9 - 58);
            if (v25)
            {
              *(v9 - 57) = v25;
              operator delete(v25);
            }
            v26 = (void *)*(v9 - 61);
            if (v26)
            {
              *(v9 - 60) = v26;
              operator delete(v26);
            }
            v9 -= 65;
          }
          while (v9 != v7);
          v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20F103604(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v30;
  __int128 v31;
  __int128 v32;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 40 * a2 - 40;
      __asm { FMOV            V0.2D, #1.0 }
      if (v12 < 0x28)
        goto LABEL_36;
      v18 = v12 / 0x28 + 1;
      v6 = &v5[40 * (v18 & 0xFFFFFFFFFFFFFFELL)];
      v19 = v5 + 40;
      v20 = v18 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v19 - 5) = 0;
        *(_QWORD *)v19 = 0;
        *(_OWORD *)(v19 + 8) = _Q0;
        *((_OWORD *)v19 - 2) = _Q0;
        *((_OWORD *)v19 - 1) = _Q0;
        *(_OWORD *)(v19 + 24) = _Q0;
        v19 += 80;
        v20 -= 2;
      }
      while (v20);
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *(_QWORD *)v6 = 0;
          *(_OWORD *)(v6 + 8) = _Q0;
          *(_OWORD *)(v6 + 24) = _Q0;
          v6 += 40;
        }
        while (v6 != &v5[40 * a2]);
      }
      v6 = &v5[40 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666)
      sub_20E867F44();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        sub_20E877A38();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v21 = &v11[40 * v7];
    v22 = &v21[40 * a2];
    v23 = 40 * a2 - 40;
    v24 = v21;
    if (v23 < 0x28)
      goto LABEL_24;
    v25 = v23 / 0x28 + 1;
    v24 = &v21[40 * (v25 & 0xFFFFFFFFFFFFFFELL)];
    v26 = (uint64_t)&v11[40 * v7 + 40];
    __asm { FMOV            V0.2D, #1.0 }
    v28 = v25 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v26 - 40) = 0;
      *(_QWORD *)v26 = 0;
      *(_OWORD *)(v26 + 8) = _Q0;
      *(_OWORD *)(v26 - 32) = _Q0;
      *(_OWORD *)(v26 - 16) = _Q0;
      *(_OWORD *)(v26 + 24) = _Q0;
      v26 += 80;
      v28 -= 2;
    }
    while (v28);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_24:
      __asm { FMOV            V0.2D, #1.0 }
      do
      {
        *(_QWORD *)v24 = 0;
        *(_OWORD *)(v24 + 8) = _Q0;
        *(_OWORD *)(v24 + 24) = _Q0;
        v24 += 40;
      }
      while (v24 != v22);
    }
    v30 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        v31 = *(_OWORD *)(v6 - 40);
        v32 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v21 - 24) = v32;
        *(_OWORD *)(v21 - 40) = v31;
        v21 -= 40;
        v6 -= 40;
      }
      while (v6 != v30);
      v6 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v22;
    a1[2] = &v11[40 * v10];
    if (v6)
      operator delete(v6);
  }
}

_QWORD *sub_20F103878(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x8E38E38E38E38E39 * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1C71C71C71C71C7)
      goto LABEL_23;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v11;
    if (v12 > 0x1C71C71C71C71C7)
LABEL_23:
      sub_20E867F44();
    v13 = 18 * v12;
    result = operator new(144 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x8E38E38E38E38E39 * ((v16 - v9) >> 4) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20F103A10(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_22;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_22:
      sub_20E867F44();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 4);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 4;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 4);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 4;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20F103B5C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E867F44();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20F103DF8(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20F103878(v10, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 4));
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20F103DF8(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20F103878(v10, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 4));
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20F103DE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F103DF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20F103DF8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (0x8E38E38E38E38E39 * (v10 >> 4) >= 0x1C71C71C71C71C8)
          sub_20E867F44();
        v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F103EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F103F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20F103F34(int **a1, uint64_t *a2)
{
  int v2;
  int v3;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  _BYTE v77[13];

  v2 = *((_DWORD *)a2 + 3);
  v3 = **a1;
  if (v2 == v3 && *((_BYTE *)a2 + 8) != 0)
  {
    v5 = a1[1];
    v6 = *((_QWORD *)v5 + 32);
    if (v6)
    {
      v7 = *((_QWORD *)v5 + 30);
      v9 = v5 + 54;
      v8 = *((_QWORD *)v5 + 27);
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9[1] - v8) >> 5);
      while (1)
      {
        v11 = v8 + 160 * (v7 % v10);
        if (*(_BYTE *)(v11 + 8))
        {
          if (*(_DWORD *)(v11 + 4) == *((_DWORD *)a2 + 4) && *(_DWORD *)v11 == v2)
            break;
        }
        ++v7;
        if (!--v6)
          return v2 == v3;
      }
      v12 = v8 + 160 * (v7 % v10);
      v13 = *((double *)a2 + 6);
      v14 = *((double *)a2 + 7);
      v16 = *(_QWORD *)(v12 + 40);
      v15 = *(double *)(v12 + 48);
      v17 = *(double *)(v12 + 56);
      v18 = *(double *)(v12 + 64);
      v19 = *((double *)a2 + 10);
      v20 = *((double *)a2 + 11);
      v21 = *((double *)a2 + 14);
      v22 = *((double *)a2 + 15);
      v23 = v13 * v15 + v19 * v17 + v21 * v18;
      v24 = v15 * v14 + v17 * v20 + v18 * v22;
      v25 = *((double *)a2 + 8);
      v26 = *((double *)a2 + 9);
      v27 = *((double *)a2 + 16);
      v28 = *((double *)a2 + 17);
      v29 = *((double *)a2 + 12);
      v30 = *((double *)a2 + 13);
      v31 = v15 * v25 + v18 * v27 + v17 * v29;
      v32 = *(double *)(v12 + 80);
      v33 = *(double *)(v12 + 72) + v15 * v26 + v18 * v28 + v17 * v30;
      v34 = *(double *)(v12 + 88);
      v35 = *(double *)(v12 + 96);
      v36 = v13 * v32 + v19 * v34 + v21 * v35;
      v37 = v14 * v32 + v20 * v34 + v22 * v35;
      v38 = v29 * v34 + v25 * v32 + v27 * v35;
      v39 = v26 * v32;
      v40 = *(double *)(v12 + 112);
      v41 = v30 * v34 + v28 * v35 + v39 + *(double *)(v12 + 104);
      v43 = *(double *)(v12 + 120);
      v42 = *(double *)(v12 + 128);
      v44 = v13 * v40 + v21 * v42 + v19 * v43;
      v45 = v14 * v40 + v22 * v42 + v20 * v43;
      v46 = v25 * v40 + v27 * v42 + v29 * v43;
      v47 = v30 * v43 + v26 * v40 + v28 * v42 + *(double *)(v12 + 136);
      v48 = (char **)a1[2];
      v49 = *a2;
      v50 = *(_QWORD *)(v12 + 12);
      *(_QWORD *)&v77[4] = a2[3];
      v77[12] = *((_BYTE *)a2 + 32);
      v51 = *((_BYTE *)a2 + 144);
      v52 = ((unint64_t)*(unsigned int *)(v12 + 148) << 24) | ((unint64_t)*(unsigned __int8 *)(v12 + 152) << 56);
      v54 = v48[1];
      v53 = (unint64_t)v48[2];
      if ((unint64_t)v54 >= v53)
      {
        v56 = *v48;
        v57 = 0xCCCCCCCCCCCCCCCDLL * ((v54 - *v48) >> 5);
        v58 = v57 + 1;
        if (v57 + 1 > 0x199999999999999)
          sub_20E867F44();
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v56) >> 5);
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0xCCCCCCCCCCCCCCLL)
          v60 = 0x199999999999999;
        else
          v60 = v58;
        if (v60)
        {
          v71 = ((unint64_t)*(unsigned int *)(v12 + 148) << 24) | ((unint64_t)*(unsigned __int8 *)(v12 + 152) << 56);
          v72 = v36;
          v73 = v33;
          v74 = v31;
          v75 = v24;
          v76 = v23;
          if (v60 > 0x199999999999999)
            sub_20E877A38();
          v61 = (char *)operator new(160 * v60);
          v24 = v75;
          v23 = v76;
          v33 = v73;
          v31 = v74;
          v36 = v72;
          v52 = v71;
        }
        else
        {
          v61 = 0;
        }
        v62 = &v61[160 * v57];
        *(_QWORD *)v62 = v49;
        v62[8] = 1;
        *(_QWORD *)(v62 + 12) = v50;
        *(_QWORD *)(v62 + 20) = *(_QWORD *)v77;
        *(_QWORD *)(v62 + 25) = *(_QWORD *)&v77[5];
        *((_QWORD *)v62 + 5) = v16;
        *((double *)v62 + 6) = v23;
        *((double *)v62 + 7) = v24;
        *((double *)v62 + 8) = v31;
        *((double *)v62 + 9) = v33;
        *((double *)v62 + 10) = v36;
        *((double *)v62 + 11) = v37;
        *((double *)v62 + 12) = v38;
        *((double *)v62 + 13) = v41;
        *((double *)v62 + 14) = v44;
        *((double *)v62 + 15) = v45;
        *((double *)v62 + 16) = v46;
        *((double *)v62 + 17) = v47;
        v62[144] = v51;
        v55 = v62 + 160;
        *(_QWORD *)(v62 + 145) = v52;
        if (v54 != v56)
        {
          do
          {
            v63 = *((_OWORD *)v54 - 9);
            *((_OWORD *)v62 - 10) = *((_OWORD *)v54 - 10);
            *((_OWORD *)v62 - 9) = v63;
            v64 = *((_OWORD *)v54 - 8);
            v65 = *((_OWORD *)v54 - 7);
            v66 = *((_OWORD *)v54 - 5);
            *((_OWORD *)v62 - 6) = *((_OWORD *)v54 - 6);
            *((_OWORD *)v62 - 5) = v66;
            *((_OWORD *)v62 - 8) = v64;
            *((_OWORD *)v62 - 7) = v65;
            v67 = *((_OWORD *)v54 - 4);
            v68 = *((_OWORD *)v54 - 3);
            v69 = *((_OWORD *)v54 - 2);
            *(_OWORD *)(v62 - 20) = *(_OWORD *)(v54 - 20);
            *((_OWORD *)v62 - 3) = v68;
            *((_OWORD *)v62 - 2) = v69;
            *((_OWORD *)v62 - 4) = v67;
            v62 -= 160;
            v54 -= 160;
          }
          while (v54 != v56);
          v54 = *v48;
        }
        *v48 = v62;
        v48[1] = v55;
        v48[2] = &v61[160 * v60];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v54 = v49;
        v54[8] = 1;
        *(_QWORD *)(v54 + 12) = v50;
        *(_QWORD *)(v54 + 20) = *(_QWORD *)v77;
        *(_QWORD *)(v54 + 25) = *(_QWORD *)&v77[5];
        *((_QWORD *)v54 + 5) = v16;
        *((double *)v54 + 6) = v23;
        *((double *)v54 + 7) = v24;
        *((double *)v54 + 8) = v31;
        *((double *)v54 + 9) = v33;
        *((double *)v54 + 10) = v36;
        *((double *)v54 + 11) = v37;
        *((double *)v54 + 12) = v38;
        *((double *)v54 + 13) = v41;
        *((double *)v54 + 14) = v44;
        *((double *)v54 + 15) = v45;
        *((double *)v54 + 16) = v46;
        *((double *)v54 + 17) = v47;
        v54[144] = v51;
        v55 = v54 + 160;
        *(_QWORD *)(v54 + 145) = v52;
      }
      v48[1] = v55;
    }
  }
  return v2 == v3;
}

uint64_t sub_20F104368(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[74];
  if (v2)
  {
    a1[75] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[71];
  if (v3)
  {
    a1[72] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[68];
  if (v4)
  {
    a1[69] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[65];
  if (v5)
  {
    a1[66] = v5;
    operator delete(v5);
  }
  sub_20ED29320((uint64_t)(a1 + 22));
  return sub_20ED29320((uint64_t)(a1 + 1));
}

uint64_t sub_20F1043D4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 616;
    sub_20F104368((_QWORD *)(i - 616));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F104424(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(_QWORD *)(a1 + 128) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v10 = *(void **)(a1 + 144);
  if (v10)
  {
    operator delete(v10);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v12 = *(void **)(a1 + 168);
  if (v12)
  {
    *(_QWORD *)(a1 + 176) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v13 = *(void **)(a1 + 192);
  if (v13)
  {
    *(_QWORD *)(a1 + 200) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v14 = *(void **)(a1 + 216);
  if (v14)
  {
    *(_QWORD *)(a1 + 224) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  v15 = *(void **)(a1 + 240);
  if (v15)
  {
    *(_QWORD *)(a1 + 248) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  v16 = *(void **)(a1 + 264);
  if (v16)
  {
    *(_QWORD *)(a1 + 272) = v16;
    operator delete(v16);
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  v17 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v17;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  v18 = *(void **)(a1 + 288);
  if (v18)
  {
    *(_QWORD *)(a1 + 296) = v18;
    operator delete(v18);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  v19 = *(void **)(a1 + 312);
  if (v19)
  {
    operator delete(v19);
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v20 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v20;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  v21 = *(_OWORD *)(a2 + 432);
  v23 = *(_OWORD *)(a2 + 384);
  v22 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v21;
  *(_OWORD *)(a1 + 384) = v23;
  *(_OWORD *)(a1 + 400) = v22;
  v24 = *(_OWORD *)(a2 + 496);
  v26 = *(_OWORD *)(a2 + 448);
  v25 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v24;
  *(_OWORD *)(a1 + 448) = v26;
  *(_OWORD *)(a1 + 464) = v25;
  v27 = *(_OWORD *)(a2 + 368);
  v28 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 336) = v28;
  v29 = *(void **)(a1 + 512);
  if (v29)
  {
    *(_QWORD *)(a1 + 520) = v29;
    operator delete(v29);
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 520) = 0;
    *(_QWORD *)(a1 + 528) = 0;
  }
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 528) = 0;
  v30 = *(void **)(a1 + 536);
  if (v30)
  {
    *(_QWORD *)(a1 + 544) = v30;
    operator delete(v30);
    *(_QWORD *)(a1 + 536) = 0;
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 552) = 0;
  }
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 536) = 0;
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a2 + 552) = 0;
  v31 = *(void **)(a1 + 560);
  if (v31)
  {
    *(_QWORD *)(a1 + 568) = v31;
    operator delete(v31);
    *(_QWORD *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 568) = 0;
    *(_QWORD *)(a1 + 576) = 0;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 560) = 0;
  *(_QWORD *)(a2 + 568) = 0;
  *(_QWORD *)(a2 + 576) = 0;
  v32 = *(void **)(a1 + 584);
  if (v32)
  {
    *(_QWORD *)(a1 + 592) = v32;
    operator delete(v32);
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 592) = 0;
    *(_QWORD *)(a1 + 600) = 0;
  }
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  *(_OWORD *)(a2 + 584) = 0u;
  return a1;
}

uint64_t sub_20F10486C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      v2[3] = 0;
      if (v3)
        MEMORY[0x212BC6398](v3, 0x1000C403B260825);
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_20F1048C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  int8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 2);
  v8 = v7 ^ __ROR4__(v6, 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v9 <= v8)
        v3 = v8 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        v13 = *a2;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v12 + 1);
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_27;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_27;
          }
        }
        do
        {
          v14 = *((_QWORD *)v12 + 1);
          if (v14 == v8)
          {
            if (*((_DWORD *)v12 + 8) == v6 && *((_QWORD *)v12 + 2) == v13 && *((_DWORD *)v12 + 6) == v7)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_27:
  v16 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_30:
      *(_QWORD *)v12 = *v20;
LABEL_65:
      *v20 = v12;
      goto LABEL_66;
    }
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v25)
      goto LABEL_41;
    if (prime < *(_QWORD *)&v25)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v25 < 3uLL || (v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < *(_QWORD *)&v25)
LABEL_41:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v20)
          goto LABEL_30;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v20)
          goto LABEL_30;
      }
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v20)
        goto LABEL_30;
    }
  }
  *(_QWORD *)v12 = *v16;
  *v16 = v12;
  *(_QWORD *)(v19 + 8 * v3) = v16;
  if (*(_QWORD *)v12)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20F104C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F104C44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F104C44(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[6];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20F104CC0(uint64_t a1, int *a2, _QWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_72;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_72:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v18 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a3;
  v13[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    v9 = v3;
  }
  else
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_46;
    if (prime < v10)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v10)
LABEL_46:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v29)
  {
    *v13 = *v29;
LABEL_69:
    *v29 = v13;
    goto LABEL_70;
  }
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v28 + 8 * v9) = v18;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20F105044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F10486C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F105058(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1055CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1055F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F105604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F10565C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F1059EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F105A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F105A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F105A48(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F105FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F105FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F105FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F10604C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F1063DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F106400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F106414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

BOOL sub_20F106438(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  _BOOL4 v6;
  _BOOL8 result;
  double v10;
  double v11;
  double v12;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  double v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  double v39;
  const char *v40;
  size_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  const char *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  unsigned __int8 v55;
  const char *v56;
  size_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  _BYTE *v104;
  unint64_t v105;
  const char *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void *p_p;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  size_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  unint64_t *v147;
  unsigned __int8 v148;
  uint64_t v149;
  const char *v150;
  NSObject *v151;
  unsigned __int8 v152;
  uint64_t v153;
  const char *v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  __int128 v161;
  double v162;
  int v163;
  const char *v164;
  int v165;
  const char *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  double v169;
  unsigned int v170;
  char *category;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE object[24];
  __int128 v176;
  void *__p;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v170 = a5;
  v6 = *a2 == 0;
  if (*(unsigned __int8 *)(a1 + 596) | *(unsigned __int8 *)(a1 + 136))
  {
    if (*(_BYTE *)(a3 + 96))
    {
      v10 = *(double *)(a3 + 24);
      v11 = *(double *)(a3 + 56);
      v12 = *(double *)(a3 + 88);
      v169 = 0.0;
      if (v6)
      {
        v14 = *(_DWORD *)(a1 + 592);
        v15 = *(_QWORD *)(a4 + 16);
        v16 = *(_OWORD *)(a4 + 24);
        v17 = *(void **)(a4 + 40);
        v18 = *(_OWORD *)(a4 + 48);
        v19 = *(_QWORD *)(a4 + 64);
        *(_OWORD *)object = *(_OWORD *)a4;
        *(_QWORD *)&object[16] = v15;
        __p = v17;
        v176 = v16;
        v179 = v19;
        v178 = v18;
        v161 = 0uLL;
        v162 = 0.0;
        sub_20E9733B8((float64x2_t *)object, (double *)&v161);
        _V1.D[1] = *((_QWORD *)&v161 + 1);
        _D3 = *((_QWORD *)&v161 + 1);
        __asm { FMLA            D2, D3, V1.D[1] }
        v169 = sqrt(_D2 + v162 * v162) * 180.0 / 3.14159265;
        v26 = sqrt(v10 * v10 + v11 * v11 + v12 * v12);
        v27 = v26 > *(double *)(a1 + 600);
        if (v169 >= *(double *)(a1 + 608))
          v27 = 0;
        if (*(_DWORD *)(a1 + 588) <= a6)
        {
          if (v14 <= a5)
          {
            if (!v27)
              return 0;
            sub_20F107944(&v160);
            if (**(int **)(v160 + 56) > 3)
              return 1;
            v48 = *(unsigned __int8 *)(v160 + 72);
            v49 = sub_20E8C31DC(v160, "OSLogSurrogateAppender", 1, 0);
            v50 = v49 ? v49 + 16 : 0;
            if (!v48 && !v49)
              return 1;
            *(_QWORD *)&v161 = &v160;
            *((std::chrono::steady_clock::time_point *)&v161 + 1) = std::chrono::steady_clock::now();
            v162 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
            v163 = 3;
            v164 = "unknown file";
            v165 = 89;
            v167 = 0;
            v168 = 0;
            v166 = "unknown function";
            v159 = v26;
            v51 = *(_QWORD *)v161;
            v52 = (uint64_t *)(*(_QWORD *)v161 + 16);
            if (*(char *)(*(_QWORD *)v161 + 39) < 0)
            {
              v54 = *(char **)(v51 + 16);
              v53 = *(_QWORD *)(v51 + 24);
            }
            else
            {
              v53 = *(unsigned __int8 *)(*(_QWORD *)v161 + 39);
              v54 = (char *)(*(_QWORD *)v161 + 16);
            }
            category = v54;
            v172 = v53;
            v152 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if ((_BYTE)v176 && (object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v153 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v154 = byte_254A4A4F8;
            }
            else
            {
              v153 = *(_QWORD *)&byte_254A4A4F8[8];
              v154 = *(const char **)byte_254A4A4F8;
            }
            v173 = (uint64_t)v154;
            v174 = v153;
            *(_QWORD *)object = os_log_create(v154, category);
            sub_20E86E5A8(&object[8], (uint64_t)&v173);
            sub_20E86E5A8(&__p, (uint64_t)&category);
            v155 = *(NSObject **)object;
            sub_20E86E44C((uint64_t)object);
            sub_20F107E78(v50, v52, v155, OS_LOG_TYPE_INFO, (uint64_t *)&v159, (uint64_t *)&v169);
            if (v48)
            {
              sub_20E8C003C((uint64_t)&v161, "We should extrapolate the pose because exceeded the maximum frame-to-frame displacement (%f) while gyro-angle is %f.", v26, v169);
              sub_20E863570((uint64_t)&v161);
            }
          }
          else
          {
            sub_20F107944(&v160);
            if (**(int **)(v160 + 56) > 3)
              return 1;
            v28 = *(unsigned __int8 *)(v160 + 72);
            v29 = sub_20E8C31DC(v160, "OSLogSurrogateAppender", 1, 0);
            v30 = v29 ? v29 + 16 : 0;
            if (!v28 && !v29)
              return 1;
            *(_QWORD *)&v161 = &v160;
            *((std::chrono::steady_clock::time_point *)&v161 + 1) = std::chrono::steady_clock::now();
            v162 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
            v163 = 3;
            v164 = "unknown file";
            v165 = 83;
            v167 = 0;
            v168 = 0;
            v166 = "unknown function";
            v31 = *(_QWORD *)v161;
            v32 = (uint64_t *)(*(_QWORD *)v161 + 16);
            if (*(char *)(*(_QWORD *)v161 + 39) < 0)
            {
              v34 = *(char **)(v31 + 16);
              v33 = *(_QWORD *)(v31 + 24);
            }
            else
            {
              v33 = *(unsigned __int8 *)(*(_QWORD *)v161 + 39);
              v34 = (char *)(*(_QWORD *)v161 + 16);
            }
            category = v34;
            v172 = v33;
            v148 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if ((_BYTE)v176 && (object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v149 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v150 = byte_254A4A4F8;
            }
            else
            {
              v149 = *(_QWORD *)&byte_254A4A4F8[8];
              v150 = *(const char **)byte_254A4A4F8;
            }
            v173 = (uint64_t)v150;
            v174 = v149;
            *(_QWORD *)object = os_log_create(v150, category);
            sub_20E86E5A8(&object[8], (uint64_t)&v173);
            sub_20E86E5A8(&__p, (uint64_t)&category);
            v151 = *(NSObject **)object;
            sub_20E86E44C((uint64_t)object);
            sub_20F107A38(v30, v32, v151, OS_LOG_TYPE_INFO, (int *)&v170);
            if (v28)
            {
              sub_20E8C003C((uint64_t)&v161, "We should extrapolate the pose because we dont have enough 2D-3D correspondences to run PnP RANSAC (%u).", v170);
              sub_20E863570((uint64_t)&v161);
            }
          }
          sub_20E863714((uint64_t)&v161);
          return 1;
        }
      }
      else if (*(_DWORD *)(a1 + 588) <= a6)
      {
        return 0;
      }
      sub_20F107944(&v160);
      if (**(int **)(v160 + 56) > 3)
        return 1;
      v42 = *(unsigned __int8 *)(v160 + 72);
      v43 = sub_20E8C31DC(v160, "OSLogSurrogateAppender", 1, 0);
      v44 = v43;
      if (!v42 && !v43)
        return 1;
      *(_QWORD *)&v161 = &v160;
      *((std::chrono::steady_clock::time_point *)&v161 + 1) = std::chrono::steady_clock::now();
      v162 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
      v163 = 3;
      v164 = "unknown file";
      v165 = 77;
      v167 = 0;
      v168 = 0;
      v166 = "unknown function";
      v45 = *(_QWORD *)v161;
      v158 = *(_QWORD *)v161;
      if (*(char *)(*(_QWORD *)v161 + 39) < 0)
      {
        v47 = *(const char **)(v45 + 16);
        v46 = *(_QWORD *)(v45 + 24);
      }
      else
      {
        v46 = *(unsigned __int8 *)(*(_QWORD *)v161 + 39);
        v47 = (const char *)(*(_QWORD *)v161 + 16);
      }
      v156 = *(_QWORD *)v161 + 16;
      v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v176 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v102 = byte_254A4A4F8;
      else
        v102 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v103 = byte_254A4A4F8[23];
      else
        v103 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v102, v47);
      v104 = &object[8];
      if (v103 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v103 >= 0x17)
      {
        v105 = v44;
        v106 = v47;
        v107 = v42;
        v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v108 = v103 | 7;
        v109 = v108 + 1;
        v104 = operator new(v108 + 1);
        *(_QWORD *)&object[16] = v103;
        *(_QWORD *)&v176 = v109 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v104;
        v42 = v107;
        v47 = v106;
        v44 = v105;
      }
      else
      {
        BYTE7(v176) = v103;
        if (!v103)
        {
LABEL_140:
          v104[v103] = 0;
          BYTE8(v176) = 1;
          p_p = &__p;
          if (v46 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v46 >= 0x17)
          {
            v111 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v46 | 7) != 0x17)
              v111 = v46 | 7;
            v112 = v111 + 1;
            p_p = operator new(v111 + 1);
            *(_QWORD *)&v178 = v46;
            *((_QWORD *)&v178 + 1) = v112 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v178) = v46;
            if (!v46)
              goto LABEL_148;
          }
          memmove(p_p, v47, v46);
LABEL_148:
          *((_BYTE *)p_p + v46) = 0;
          LOBYTE(v179) = 1;
          v113 = *(NSObject **)object;
          if (SHIBYTE(v178) < 0)
            operator delete(__p);
          if (BYTE8(v176) && SBYTE7(v176) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v44 && *(_QWORD *)(v44 + 24))
          {
            v114 = _os_log_pack_size();
            v115 = (std::__shared_weak_count_vtbl *)operator new(v114, (std::align_val_t)8uLL);
            v116 = (std::__shared_weak_count *)operator new();
            v117 = v116;
            v116->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v116->__shared_owners_;
            v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v116->__shared_weak_owners_ = 0;
            v116[1].__vftable = v115;
            *(_QWORD *)object = v115;
            *(_QWORD *)&object[8] = v115;
            *(_QWORD *)&object[16] = v116;
            do
              v119 = __ldxr(p_shared_owners);
            while (__stxr(v119 + 1, p_shared_owners));
            v176 = 0uLL;
            __p = 0;
            do
              v120 = __ldaxr(p_shared_owners);
            while (__stlxr(v120 - 1, p_shared_owners));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v117);
            }
            v121 = *(_QWORD *)object;
            v122 = (_DWORD *)_os_log_pack_fill();
            *v122 = 67109120;
            v122[1] = a6;
            v123 = operator new();
            v124 = *(unsigned __int8 *)(v158 + 39);
            v125 = v156;
            if ((v124 & 0x80u) != 0)
            {
              v125 = *(_QWORD *)(v158 + 16);
              v124 = *(_QWORD *)(v158 + 24);
            }
            *(_QWORD *)v123 = v121;
            *(_OWORD *)(v123 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v123 + 24) = v176;
            v176 = 0uLL;
            *(_QWORD *)(v123 + 40) = v125;
            *(_QWORD *)(v123 + 48) = v124;
            *(_BYTE *)(v123 + 56) = 1;
            category = 0;
            v173 = v123;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v44 + 24) + 40))(*(_QWORD *)(v44 + 24), &v173);
            v126 = v173;
            v173 = 0;
            if (v126)
            {
              v127 = *(std::__shared_weak_count **)(v126 + 32);
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              v130 = *(std::__shared_weak_count **)(v126 + 16);
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              MEMORY[0x212BC6398](v126, 0x10F0C40B62ED6C6);
              v133 = category;
              category = 0;
              if (v133)
              {
                v134 = (std::__shared_weak_count *)*((_QWORD *)v133 + 4);
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
                v137 = (std::__shared_weak_count *)*((_QWORD *)v133 + 2);
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                MEMORY[0x212BC6398](v133, 0x10F0C40B62ED6C6);
              }
            }
            v140 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
            if (*((_QWORD *)&v176 + 1))
            {
              v141 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
            }
            v143 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v144 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
          }
          else
          {
            os_log_type_enabled(v113, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 67109120;
            *(_DWORD *)&object[4] = a6;
            v146 = (void *)_os_log_send_and_compose_impl();
            if (v146)
              free(v146);
          }
          if (v42)
          {
            sub_20E8C003C((uint64_t)&v161, "We should extrapolate the pose because we dont have enough inliers (%u).", a6);
            sub_20E863570((uint64_t)&v161);
          }
          sub_20E863570((uint64_t)&v161);
          v98 = v168;
          if (!v168)
            return 1;
          v147 = (unint64_t *)&v168->__shared_owners_;
          do
            v100 = __ldaxr(v147);
          while (__stlxr(v100 - 1, v147));
          goto LABEL_205;
        }
      }
      memmove(v104, v102, v103);
      goto LABEL_140;
    }
    sub_20F107944(&v169);
    if (**(int **)(*(_QWORD *)&v169 + 56) > 3)
      return 1;
    v35 = *(unsigned __int8 *)(*(_QWORD *)&v169 + 72);
    v36 = sub_20E8C31DC(*(uint64_t *)&v169, "OSLogSurrogateAppender", 1, 0);
    v37 = v36;
    if (!v35 && v36 == 0)
      return 1;
    *(_QWORD *)&v161 = &v169;
    *((std::chrono::steady_clock::time_point *)&v161 + 1) = std::chrono::steady_clock::now();
    v162 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    v163 = 3;
    v164 = "unknown file";
    v165 = 42;
    v167 = 0;
    v168 = 0;
    v166 = "unknown function";
    v39 = v169;
    v40 = (const char *)(*(_QWORD *)&v169 + 16);
    v157 = *(_QWORD *)&v169 + 16;
    if (*(char *)(*(_QWORD *)&v169 + 39) < 0)
    {
      v40 = *(const char **)(*(_QWORD *)&v169 + 16);
      v41 = *(_QWORD *)(*(_QWORD *)&v169 + 24);
    }
    else
    {
      v41 = *(unsigned __int8 *)(*(_QWORD *)&v169 + 39);
    }
    v55 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v176 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v56 = byte_254A4A4F8;
    else
      v56 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v57 = byte_254A4A4F8[23];
    else
      v57 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v56, v40);
    v58 = &object[8];
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v57 >= 0x17)
    {
      v59 = v35;
      v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v60 = v57 | 7;
      v61 = v60 + 1;
      v58 = operator new(v60 + 1);
      *(_QWORD *)&object[16] = v57;
      *(_QWORD *)&v176 = v61 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v58;
      v35 = v59;
    }
    else
    {
      BYTE7(v176) = v57;
      if (!v57)
      {
LABEL_58:
        v58[v57] = 0;
        BYTE8(v176) = 1;
        v62 = &__p;
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v41 >= 0x17)
        {
          v63 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v63 = v41 | 7;
          v64 = v63 + 1;
          v62 = operator new(v63 + 1);
          *(_QWORD *)&v178 = v41;
          *((_QWORD *)&v178 + 1) = v64 | 0x8000000000000000;
          __p = v62;
        }
        else
        {
          HIBYTE(v178) = v41;
          if (!v41)
            goto LABEL_66;
        }
        memmove(v62, v40, v41);
LABEL_66:
        *((_BYTE *)v62 + v41) = 0;
        LOBYTE(v179) = 1;
        v65 = *(NSObject **)object;
        if (SHIBYTE(v178) < 0)
          operator delete(__p);
        if (BYTE8(v176) && SBYTE7(v176) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v37 && *(_QWORD *)(v37 + 24))
        {
          v66 = _os_log_pack_size();
          v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
          v68 = (std::__shared_weak_count *)operator new();
          v69 = v68;
          v68->__shared_owners_ = 0;
          v70 = (unint64_t *)&v68->__shared_owners_;
          v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v68->__shared_weak_owners_ = 0;
          v68[1].__vftable = v67;
          *(_QWORD *)object = v67;
          *(_QWORD *)&object[8] = v67;
          *(_QWORD *)&object[16] = v68;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
          v176 = 0uLL;
          __p = 0;
          do
            v72 = __ldaxr(v70);
          while (__stlxr(v72 - 1, v70));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v69);
          }
          v73 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v74 = operator new();
          v75 = *(unsigned __int8 *)(*(_QWORD *)&v39 + 39);
          v76 = v157;
          if ((v75 & 0x80u) != 0)
          {
            v76 = *(_QWORD *)(*(_QWORD *)&v39 + 16);
            v75 = *(_QWORD *)(*(_QWORD *)&v39 + 24);
          }
          *(_QWORD *)v74 = v73;
          *(_OWORD *)(v74 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v74 + 24) = v176;
          v176 = 0uLL;
          *(_QWORD *)(v74 + 40) = v76;
          *(_QWORD *)(v74 + 48) = v75;
          *(_BYTE *)(v74 + 56) = 1;
          category = 0;
          v173 = v74;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v37 + 24) + 40))(*(_QWORD *)(v37 + 24), &v173);
          v77 = v173;
          v173 = 0;
          if (v77)
          {
            v78 = *(std::__shared_weak_count **)(v77 + 32);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v81 = *(std::__shared_weak_count **)(v77 + 16);
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            MEMORY[0x212BC6398](v77, 0x10F0C40B62ED6C6);
            v84 = category;
            category = 0;
            if (v84)
            {
              v85 = (std::__shared_weak_count *)*((_QWORD *)v84 + 4);
              if (v85)
              {
                v86 = (unint64_t *)&v85->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              v88 = (std::__shared_weak_count *)*((_QWORD *)v84 + 2);
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
            }
          }
          v91 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
          if (*((_QWORD *)&v176 + 1))
          {
            v92 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v95 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
        }
        else
        {
          os_log_type_enabled(v65, OS_LOG_TYPE_INFO);
          *(_WORD *)object = 0;
          v97 = (void *)_os_log_send_and_compose_impl();
          if (v97)
            free(v97);
        }
        if (v35)
        {
          sub_20E8C003C((uint64_t)&v161, "We should extrapolate the pose because PnP has failed");
          sub_20E863570((uint64_t)&v161);
        }
        sub_20E863570((uint64_t)&v161);
        v98 = v168;
        if (!v168)
          return 1;
        v99 = (unint64_t *)&v168->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
LABEL_205:
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
        return 1;
      }
    }
    memmove(v58, v56, v57);
    goto LABEL_58;
  }
  if (*(_BYTE *)(a3 + 96))
    return 0;
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/PoseTrackerUtil.cpp", 37, (uint64_t)"opt_P_Cref_to_Ccur.has_value()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
  return result;
}

void sub_20F1076A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20F1076F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a38 && a37 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20F107938(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20F107944(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62120);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62120))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62118);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62120);
  }
  *a1 = qword_254A62118;
}

void sub_20F1079E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62120);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62120);
  _Unwind_Resume(a1);
}

void sub_20F107A38(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F107E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F107E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F107E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F107E78(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[24];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)v42 = v12;
    *(_QWORD *)&v42[8] = v12;
    *(_QWORD *)&v42[16] = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = *(_QWORD *)v42;
    v19 = _os_log_pack_fill();
    v20 = *a5;
    v21 = *a6;
    *(_DWORD *)v19 = 134218240;
    *(_QWORD *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v21;
    v22 = operator new();
    v23 = *((unsigned __int8 *)a2 + 23);
    if ((v23 & 0x80u) == 0)
      v24 = a2;
    else
      v24 = (uint64_t *)*a2;
    if ((v23 & 0x80u) != 0)
      v23 = a2[1];
    *(_QWORD *)v22 = v18;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)&v42[8];
    *(_OWORD *)&v42[8] = 0uLL;
    *(_OWORD *)(v22 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v22 + 40) = v24;
    *(_QWORD *)(v22 + 48) = v23;
    *(_BYTE *)(v22 + 56) = type;
    v41 = v22;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v41);
    v25 = v41;
    v41 = 0;
    if (v25)
    {
      v26 = *(std::__shared_weak_count **)(v25 + 32);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = *(std::__shared_weak_count **)(v25 + 16);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      MEMORY[0x212BC6398](v25, 0x10F0C40B62ED6C6);
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = *(std::__shared_weak_count **)&v42[16];
    if (*(_QWORD *)&v42[16])
    {
      v36 = (unint64_t *)(*(_QWORD *)&v42[16] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v38 = *a5;
    v39 = *a6;
    *(_DWORD *)v42 = 134218240;
    *(_QWORD *)&v42[4] = v38;
    *(_WORD *)&v42[12] = 2048;
    *(_QWORD *)&v42[14] = v39;
    v40 = (void *)_os_log_send_and_compose_impl();
    if (v40)
      free(v40);
  }
}

void sub_20F108288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1082AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1082C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1082E4(uint64_t a1, double *a2, int a3, double a4)
{
  int v4;
  double v9;
  unsigned int v10;
  double v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  unsigned __int8 v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint64_t *v28[3];
  int v29;
  const char *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *category[2];
  void *__p;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD v41[4];
  _QWORD v42[2];

  LOBYTE(v4) = *((_BYTE *)a2 + 8);
  if ((_BYTE)v4)
  {
    v9 = *(double *)(a1 + 16);
    if (*a2 == v9)
    {
      v4 = *(_DWORD *)(a1 + 24);
      v10 = v4 & 0xFFFFFF00;
      v11 = *(double *)a1;
      *(double *)a1 = v9;
      *(double *)(a1 + 16) = v11;
      v12 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v4;
      *(_DWORD *)(a1 + 24) = v12;
      v13 = 0x100000000;
    }
    else if (*a2 == *(double *)a1)
    {
      v4 = *(_DWORD *)(a1 + 8);
      v10 = v4 & 0xFFFFFF00;
      v13 = 0x100000000;
    }
    else
    {
      if (*(double *)a1 > 0.0)
      {
        v14 = atomic_load((unsigned __int8 *)&qword_254A62130);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A62130))
        {
          sub_21021D3D8(v28);
          sub_20E8610C0(&__p, "cv3d.vio.odometry");
          sub_20E8C4068(v28, (uint64_t)&__p, &qword_254A62128);
          if (v39 < 0)
            operator delete(__p);
          __cxa_guard_release(&qword_254A62130);
        }
        v35 = qword_254A62128;
        if (**(int **)(qword_254A62128 + 56) <= 4)
        {
          v15 = *(unsigned __int8 *)(qword_254A62128 + 72);
          v16 = sub_20E8C31DC(qword_254A62128, "OSLogSurrogateAppender", 1, 0);
          v17 = v16 ? v16 + 16 : 0;
          if (v15 || v16 != 0)
          {
            v28[0] = &v35;
            v28[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
            v28[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
            v29 = 4;
            v30 = "unknown file";
            v31 = 65;
            v33 = 0;
            v34 = 0;
            v32 = "unknown function";
            v19 = *v28[0];
            v20 = (uint64_t *)(*v28[0] + 16);
            if (*(char *)(*v28[0] + 39) < 0)
            {
              v22 = *(char **)(v19 + 16);
              v21 = *(char **)(v19 + 24);
            }
            else
            {
              v21 = (char *)*(unsigned __int8 *)(*v28[0] + 39);
              v22 = (char *)(*v28[0] + 16);
            }
            category[0] = v22;
            category[1] = v21;
            v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&__p);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
              if (v40 && v39 < 0)
                operator delete(__p);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v24 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v25 = byte_254A4A4F8;
            }
            else
            {
              v24 = *(_QWORD *)&byte_254A4A4F8[8];
              v25 = *(const char **)byte_254A4A4F8;
            }
            v42[0] = v25;
            v42[1] = v24;
            __p = os_log_create(v25, category[0]);
            sub_20E86E5A8(&v38, (uint64_t)v42);
            sub_20E86E5A8(v41, (uint64_t)category);
            v26 = __p;
            sub_20E86E44C((uint64_t)&__p);
            sub_20F1086E0(v17, v20, v26, OS_LOG_TYPE_ERROR, (uint64_t *)a2);
            if (v15)
            {
              sub_20E8C003C((uint64_t)v28, "The class has already been initialized, but the reference frame @%f was never added before.", *a2);
              sub_20E863570((uint64_t)v28);
            }
            sub_20E863714((uint64_t)v28);
          }
        }
      }
      v13 = 0;
      LOBYTE(v4) = 0;
      v10 = 0;
    }
    *(double *)(a1 + 16) = a4;
    *(_DWORD *)(a1 + 24) = a3;
  }
  else
  {
    v13 = 0;
    v10 = 0;
  }
  return v13 & 0x100000000 | v10 & 0xFFFFFF00 | v4;
}

void sub_20F108608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28)
  {
    if (a27 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F108648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62130);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62130);
  _Unwind_Resume(a1);
}

void sub_20F10868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F1086E0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)v38 = v10;
    *(_QWORD *)&v38[8] = v10;
    *(_QWORD *)&v38[16] = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v39 = 0uLL;
    v40 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = *(_QWORD *)v38;
    v17 = _os_log_pack_fill();
    v18 = *a5;
    *(_DWORD *)v17 = 134217984;
    *(_QWORD *)(v17 + 4) = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)&v38[8];
    *(_OWORD *)&v38[8] = 0uLL;
    *(_OWORD *)(v19 + 24) = v39;
    v39 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&v38[16];
    if (*(_QWORD *)&v38[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v38[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    *(_DWORD *)v38 = 134217984;
    *(_QWORD *)&v38[4] = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F108AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F108AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F108AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F108B20(_DWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  const char *v10;
  size_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v16;
  std::string *v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  void *v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  __CFError *v42;
  void *v43;
  int v44;
  unsigned __int8 v45;
  const char *v46;
  size_t v47;
  std::string::size_type *p_size;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  size_t v59;
  void *v60;
  _QWORD *v61;
  size_t v62;
  size_t v63;
  _BYTE *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __CFError *v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __CFError *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string::size_type v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::string::size_type v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  __int128 v142;
  std::string::size_type v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::string *p_object;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  const char *v171;
  const char *v172;
  int __src;
  const char *__srca;
  std::string __p;
  char *v176;
  const char *v177;
  int v178;
  const char *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::string __dst;
  uint64_t v183;
  _BYTE v184[24];
  char *v185;
  std::__shared_weak_count *v186;
  __CFError *v187;
  __int128 v188;
  std::string object;
  __int128 v190;
  void *v191[2];
  unint64_t v192;
  const void *v193;
  unint64_t v194;
  void *v195;
  char v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  _BYTE v200[24];
  __int128 v201;
  char *v202;
  const char *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  _QWORD v206[5];

  v206[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 <= 2u)
  {
    *((_BYTE *)&object.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&object, "com.apple.arkit");
    v200[23] = 20;
    strcpy(v200, "slam-short-data-drop");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2102E3F90;
    strcpy(__p.__r_.__value_.__l.__data_, "Short Data Drop Reinitialization occurred.");
    v184[0] = 0;
    v184[16] = 0;
    sub_20E8A7D90((uint64_t *)&object, (uint64_t *)v200, (uint64_t *)&__p, (uint64_t)v184, 1, 1, 0, 0, (uint64_t)&v187);
    if (!v184[16])
      goto LABEL_7;
    v2 = *(std::__shared_weak_count **)&v184[8];
    if (!*(_QWORD *)&v184[8])
      goto LABEL_7;
    v3 = (unint64_t *)(*(_QWORD *)&v184[8] + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        if ((v200[23] & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_28;
      }
    }
    else
    {
LABEL_7:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_8;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v200[23] & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_29;
    }
LABEL_28:
    operator delete(*(void **)v200);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if (BYTE8(v188))
      {
LABEL_11:
        sub_20F10A2AC(&v183);
        if (**(int **)(v183 + 56) > 4
          || (v5 = *(unsigned __int8 *)(v183 + 72),
              v6 = sub_20E8C31DC(v183, "OSLogSurrogateAppender", 1, 0),
              v7 = v6,
              !v5)
          && !v6)
        {
LABEL_281:
          v167 = BYTE8(v188);
          ++*a1;
          if (v167)
          {
            v168 = (std::__shared_weak_count *)v188;
            if ((_QWORD)v188)
            {
              v169 = (unint64_t *)(v188 + 8);
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
          }
          return;
        }
        *(_QWORD *)v200 = &v183;
        *(std::chrono::steady_clock::time_point *)&v200[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v200[16] = std::chrono::system_clock::now();
        LODWORD(v201) = 4;
        *((_QWORD *)&v201 + 1) = "unknown file";
        LODWORD(v202) = 44;
        v204 = 0;
        v205 = 0;
        v203 = "unknown function";
        p_dst = &__dst;
        sub_20EA670D8(&v187, &__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v9 = **(_QWORD **)v200;
        v10 = (const char *)(**(_QWORD **)v200 + 16);
        v171 = v10;
        if (*(char *)(**(_QWORD **)v200 + 39) < 0)
        {
          v10 = *(const char **)(v9 + 16);
          v11 = *(_QWORD *)(v9 + 24);
        }
        else
        {
          v11 = *(unsigned __int8 *)(**(_QWORD **)v200 + 39);
        }
        v45 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v190 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
            operator delete(object.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v46 = byte_254A4A4F8;
        else
          v46 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v47 = byte_254A4A4F8[23];
        else
          v47 = *(_QWORD *)&byte_254A4A4F8[8];
        __srca = v10;
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v46, v10);
        p_size = &object.__r_.__value_.__l.__size_;
        if (v47 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v47 >= 0x17)
        {
          v49 = v7;
          v50 = v9;
          v51 = p_dst;
          v52 = v5;
          v53 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17)
            v53 = v47 | 7;
          v54 = v53 + 1;
          p_size = (std::string::size_type *)operator new(v53 + 1);
          object.__r_.__value_.__r.__words[2] = v47;
          *(_QWORD *)&v190 = v54 | 0x8000000000000000;
          object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
          v5 = v52;
          p_dst = v51;
          v9 = v50;
          v7 = v49;
        }
        else
        {
          BYTE7(v190) = v47;
          if (!v47)
          {
LABEL_103:
            *((_BYTE *)p_size + v47) = 0;
            BYTE8(v190) = 1;
            v55 = v191;
            if (v11 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v11 >= 0x17)
            {
              v56 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v11 | 7) != 0x17)
                v56 = v11 | 7;
              v57 = v56 + 1;
              v55 = operator new(v56 + 1);
              v191[1] = (void *)v11;
              v192 = v57 | 0x8000000000000000;
              v191[0] = v55;
            }
            else
            {
              HIBYTE(v192) = v11;
              if (!v11)
              {
LABEL_111:
                *((_BYTE *)v55 + v11) = 0;
                LOBYTE(v193) = 1;
                v58 = object.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v192) < 0)
                  operator delete(v191[0]);
                if (BYTE8(v190) && SBYTE7(v190) < 0)
                  operator delete((void *)object.__r_.__value_.__l.__size_);
                if (object.__r_.__value_.__r.__words[0])
                  os_release(object.__r_.__value_.__l.__data_);
                if (!v7 || !*(_QWORD *)(v7 + 24))
                {
                  os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
                  LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
                  v65 = (void *)_os_log_send_and_compose_impl();
                  if (v65)
                    free(v65);
                  goto LABEL_267;
                }
                v59 = _os_log_pack_size();
                v60 = operator new(v59, (std::align_val_t)8uLL);
                v61 = (_QWORD *)operator new();
                *v61 = &off_24C9ABB80;
                v61[1] = 0;
                v61[2] = 0;
                v61[3] = v60;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
                v176 = 0;
                v177 = 0;
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v61;
                v62 = strlen((const char *)p_dst);
                if (v62 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v63 = v62;
                if (v62 >= 0x17)
                {
                  v116 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v62 | 7) != 0x17)
                    v116 = v62 | 7;
                  v117 = v116 + 1;
                  v64 = operator new(v116 + 1);
                  *(_QWORD *)&v184[8] = v63;
                  *(_QWORD *)&v184[16] = v117 | 0x8000000000000000;
                  *(_QWORD *)v184 = v64;
                }
                else
                {
                  v184[23] = v62;
                  v64 = v184;
                  if (!v62)
                  {
LABEL_207:
                    v64[v63] = 0;
                    v206[0] = *(_QWORD *)&v184[8];
                    v118 = *(_QWORD *)v184;
                    *(_QWORD *)((char *)v206 + 7) = *(_QWORD *)&v184[15];
                    v119 = v184[23];
                    v120 = operator new(0x38uLL);
                    v120[1] = 0;
                    v120[2] = 0;
                    v120[3] = off_24C9ABC20;
                    *v120 = &off_24C9ABBD0;
                    v121 = v206[0];
                    v120[4] = v118;
                    v120[5] = v121;
                    *(_QWORD *)((char *)v120 + 47) = *(_QWORD *)((char *)v206 + 7);
                    *((_BYTE *)v120 + 55) = v119;
                    v206[0] = 0;
                    *(_QWORD *)((char *)v206 + 7) = 0;
                    v122 = (std::__shared_weak_count *)v177;
                    v176 = (char *)(v120 + 3);
                    v177 = (const char *)v120;
                    if (v122)
                    {
                      p_shared_owners = (unint64_t *)&v122->__shared_owners_;
                      do
                        v124 = __ldaxr(p_shared_owners);
                      while (__stlxr(v124 - 1, p_shared_owners));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
                    object = __p;
                    v125 = v176;
                    if (__p.__r_.__value_.__r.__words[2])
                    {
                      v126 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                      do
                        v127 = __ldxr(v126);
                      while (__stxr(v127 + 1, v126));
                    }
                    v128 = (std::__shared_weak_count *)v177;
                    *(_QWORD *)&v190 = v125;
                    *((_QWORD *)&v190 + 1) = v177;
                    if (v177)
                    {
                      v129 = (unint64_t *)(v177 + 8);
                      do
                        v130 = __ldxr(v129);
                      while (__stxr(v130 + 1, v129));
                      v191[0] = v125;
                      do
                        v131 = __ldaxr(v129);
                      while (__stlxr(v131 - 1, v129));
                      if (!v131)
                      {
                        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                        std::__shared_weak_count::__release_weak(v128);
                      }
                    }
                    else
                    {
                      v191[0] = v125;
                    }
                    v132 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                    if (__p.__r_.__value_.__r.__words[2])
                    {
                      v133 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                      do
                        v134 = __ldaxr(v133);
                      while (__stlxr(v134 - 1, v133));
                      if (!v134)
                      {
                        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                        std::__shared_weak_count::__release_weak(v132);
                      }
                    }
                    v135 = object.__r_.__value_.__r.__words[0];
                    if (*((char *)v191[0] + 31) >= 0)
                      v136 = (char *)v191[0] + 8;
                    else
                      v136 = (char *)*((_QWORD *)v191[0] + 1);
                    v137 = _os_log_pack_fill();
                    *(_DWORD *)v137 = 136315138;
                    *(_QWORD *)(v137 + 4) = v136;
                    v138 = operator new();
                    v139 = *(unsigned __int8 *)(v9 + 39);
                    v140 = *(const char **)(v9 + 16);
                    v141 = *(_QWORD *)(v9 + 24);
                    v142 = v190;
                    *(_OWORD *)(v138 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                    if ((v139 & 0x80u) != 0)
                      v139 = v141;
                    else
                      v140 = v171;
                    *(_QWORD *)v138 = v135;
                    *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_OWORD *)(v138 + 24) = v142;
                    v190 = 0uLL;
                    *(_QWORD *)(v138 + 40) = v140;
                    *(_QWORD *)(v138 + 48) = v139;
                    *(_BYTE *)(v138 + 56) = 16;
                    *(_QWORD *)v184 = 0;
                    __p.__r_.__value_.__r.__words[0] = v138;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &__p);
                    v143 = __p.__r_.__value_.__r.__words[0];
                    __p.__r_.__value_.__r.__words[0] = 0;
                    if (v143)
                    {
                      v144 = *(std::__shared_weak_count **)(v143 + 32);
                      if (v144)
                      {
                        v145 = (unint64_t *)&v144->__shared_owners_;
                        do
                          v146 = __ldaxr(v145);
                        while (__stlxr(v146 - 1, v145));
                        if (!v146)
                        {
                          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                          std::__shared_weak_count::__release_weak(v144);
                        }
                      }
                      v147 = *(std::__shared_weak_count **)(v143 + 16);
                      if (v147)
                      {
                        v148 = (unint64_t *)&v147->__shared_owners_;
                        do
                          v149 = __ldaxr(v148);
                        while (__stlxr(v149 - 1, v148));
                        if (!v149)
                        {
                          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                          std::__shared_weak_count::__release_weak(v147);
                        }
                      }
                      MEMORY[0x212BC6398](v143, 0x10F0C40B62ED6C6);
                      v150 = *(_QWORD *)v184;
                      *(_QWORD *)v184 = 0;
                      if (v150)
                      {
                        v151 = *(std::__shared_weak_count **)(v150 + 32);
                        if (v151)
                        {
                          v152 = (unint64_t *)&v151->__shared_owners_;
                          do
                            v153 = __ldaxr(v152);
                          while (__stlxr(v153 - 1, v152));
                          if (!v153)
                          {
                            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                            std::__shared_weak_count::__release_weak(v151);
                          }
                        }
                        v154 = *(std::__shared_weak_count **)(v150 + 16);
                        if (v154)
                        {
                          v155 = (unint64_t *)&v154->__shared_owners_;
                          do
                            v156 = __ldaxr(v155);
                          while (__stlxr(v156 - 1, v155));
                          if (!v156)
                          {
                            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                            std::__shared_weak_count::__release_weak(v154);
                          }
                        }
                        MEMORY[0x212BC6398](v150, 0x10F0C40B62ED6C6);
                      }
                    }
                    v157 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
                    if (*((_QWORD *)&v190 + 1))
                    {
                      v158 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    v160 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                    if (object.__r_.__value_.__r.__words[2])
                    {
                      v161 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
LABEL_267:
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    if (v5)
                    {
                      sub_20EA670D8(&v187, &object);
                      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_object = &object;
                      else
                        p_object = (std::string *)object.__r_.__value_.__r.__words[0];
                      sub_20E8C003C((uint64_t)v200, "Error with poducing DiagnosticRequest tailspin request: %s", (const char *)p_object);
                      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(object.__r_.__value_.__l.__data_);
                      sub_20E863570((uint64_t)v200);
                    }
                    sub_20E863570((uint64_t)v200);
                    v164 = v205;
                    if (v205)
                    {
                      v165 = (unint64_t *)&v205->__shared_owners_;
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    goto LABEL_281;
                  }
                }
                memcpy(v64, p_dst, v63);
                goto LABEL_207;
              }
            }
            memmove(v55, __srca, v11);
            goto LABEL_111;
          }
        }
        memmove(p_size, v46, v47);
        goto LABEL_103;
      }
LABEL_30:
      ++*a1;
      return;
    }
LABEL_29:
    operator delete(object.__r_.__value_.__l.__data_);
    if (BYTE8(v188))
      goto LABEL_11;
    goto LABEL_30;
  }
  sub_20F10A2AC(&v183);
  if (**(int **)(v183 + 56) <= 4)
  {
    v12 = *(unsigned __int8 *)(v183 + 72);
    v13 = sub_20E8C31DC(v183, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (v12 || v13 != 0)
    {
      sub_20E863438((uint64_t)&object);
      __src = v12;
      if ((v198 & 0x10) != 0)
      {
        v18 = v197;
        if (v197 < v194)
        {
          v197 = v194;
          v18 = v194;
        }
        v19 = v193;
        v16 = v18 - (_QWORD)v193;
        if (v18 - (unint64_t)v193 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_86;
      }
      else
      {
        if ((v198 & 8) == 0)
        {
          v16 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          v17 = &__dst;
          goto LABEL_41;
        }
        v19 = v191[0];
        v16 = v192 - (unint64_t)v191[0];
        if (v192 - (unint64_t)v191[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_86:
          sub_20E860B7C();
      }
      if (v16 >= 0x17)
      {
        v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v20 = v16 | 7;
        v21 = v20 + 1;
        v17 = (std::string *)operator new(v20 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
        v17 = &__dst;
        if (!v16)
        {
LABEL_41:
          v17->__r_.__value_.__s.__data_[v16] = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v176) = 4;
          v177 = "unknown file";
          v178 = 50;
          v180 = 0;
          v181 = 0;
          v179 = "unknown function";
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &__dst;
          else
            v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          v23 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v24 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v172 = v24;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v24 = *(const char **)(v23 + 16);
            v25 = *(_QWORD *)(v23 + 24);
            v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v27 & 1) != 0)
              goto LABEL_48;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v26 & 1) != 0)
              goto LABEL_48;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v200);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v200);
            if ((_BYTE)v201 && (v200[23] & 0x80000000) != 0)
              operator delete(*(void **)v200);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_48:
          if (byte_254A4A4F8[23] >= 0)
            v28 = byte_254A4A4F8;
          else
            v28 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v29 = byte_254A4A4F8[23];
          else
            v29 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v200 = os_log_create(v28, v24);
          v30 = &v200[8];
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            *(_QWORD *)&v200[16] = v29;
            *(_QWORD *)&v201 = v32 | 0x8000000000000000;
            *(_QWORD *)&v200[8] = v30;
          }
          else
          {
            BYTE7(v201) = v29;
            if (!v29)
            {
LABEL_62:
              v30[v29] = 0;
              BYTE8(v201) = 1;
              v33 = (char *)&v202;
              if (v25 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v25 >= 0x17)
              {
                v34 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17)
                  v34 = v25 | 7;
                v35 = v34 + 1;
                v33 = (char *)operator new(v34 + 1);
                v203 = (const char *)v25;
                v204 = v35 | 0x8000000000000000;
                v202 = v33;
              }
              else
              {
                HIBYTE(v204) = v25;
                if (!v25)
                {
LABEL_70:
                  v33[v25] = 0;
                  LOBYTE(v205) = 1;
                  v36 = *(NSObject **)v200;
                  if (SHIBYTE(v204) < 0)
                    operator delete(v202);
                  if (BYTE8(v201) && SBYTE7(v201) < 0)
                    operator delete(*(void **)&v200[8]);
                  if (*(_QWORD *)v200)
                    os_release(*(void **)v200);
                  if (!v14 || !*(_QWORD *)(v14 + 24))
                  {
                    os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v200 = 136315138;
                    *(_QWORD *)&v200[4] = v22;
                    v43 = (void *)_os_log_send_and_compose_impl();
                    v44 = __src;
                    if (v43)
                      free(v43);
                    goto LABEL_189;
                  }
                  v37 = _os_log_pack_size();
                  v38 = operator new(v37, (std::align_val_t)8uLL);
                  v39 = (_QWORD *)operator new();
                  *v39 = &off_24C9ABB80;
                  v39[1] = 0;
                  v39[2] = 0;
                  v39[3] = v38;
                  *(_QWORD *)v184 = v38;
                  *(_QWORD *)&v184[8] = v38;
                  v185 = 0;
                  v186 = 0;
                  *(_QWORD *)&v184[16] = v39;
                  v40 = strlen((const char *)v22);
                  if (v40 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v41 = v40;
                  if (v40 >= 0x17)
                  {
                    v66 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v40 | 7) != 0x17)
                      v66 = v40 | 7;
                    v67 = v66 + 1;
                    v42 = (__CFError *)operator new(v66 + 1);
                    *(_QWORD *)&v188 = v41;
                    *((_QWORD *)&v188 + 1) = v67 | 0x8000000000000000;
                    v187 = v42;
                  }
                  else
                  {
                    HIBYTE(v188) = v40;
                    v42 = (__CFError *)&v187;
                    if (!v40)
                    {
LABEL_130:
                      *((_BYTE *)v42 + v41) = 0;
                      v68 = v187;
                      v206[0] = v188;
                      *(_QWORD *)((char *)v206 + 7) = *(_QWORD *)((char *)&v188 + 7);
                      v69 = HIBYTE(v188);
                      v70 = operator new(0x38uLL);
                      v70[1] = 0;
                      v70[2] = 0;
                      v70[3] = off_24C9ABC20;
                      *v70 = &off_24C9ABBD0;
                      v71 = v206[0];
                      v70[4] = v68;
                      v70[5] = v71;
                      *(_QWORD *)((char *)v70 + 47) = *(_QWORD *)((char *)v206 + 7);
                      *((_BYTE *)v70 + 55) = v69;
                      v206[0] = 0;
                      *(_QWORD *)((char *)v206 + 7) = 0;
                      v72 = v186;
                      v185 = (char *)(v70 + 3);
                      v186 = (std::__shared_weak_count *)v70;
                      if (v72)
                      {
                        v73 = (unint64_t *)&v72->__shared_owners_;
                        do
                          v74 = __ldaxr(v73);
                        while (__stlxr(v74 - 1, v73));
                        if (!v74)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                      }
                      *(_OWORD *)v200 = *(_OWORD *)v184;
                      v75 = v185;
                      *(_QWORD *)&v200[16] = *(_QWORD *)&v184[16];
                      if (*(_QWORD *)&v184[16])
                      {
                        v76 = (unint64_t *)(*(_QWORD *)&v184[16] + 8);
                        do
                          v77 = __ldxr(v76);
                        while (__stxr(v77 + 1, v76));
                      }
                      v78 = v186;
                      *(_QWORD *)&v201 = v75;
                      *((_QWORD *)&v201 + 1) = v186;
                      if (v186)
                      {
                        v79 = (unint64_t *)&v186->__shared_owners_;
                        do
                          v80 = __ldxr(v79);
                        while (__stxr(v80 + 1, v79));
                        v202 = v75;
                        do
                          v81 = __ldaxr(v79);
                        while (__stlxr(v81 - 1, v79));
                        if (!v81)
                        {
                          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                          std::__shared_weak_count::__release_weak(v78);
                        }
                      }
                      else
                      {
                        v202 = v75;
                      }
                      v82 = *(std::__shared_weak_count **)&v184[16];
                      if (*(_QWORD *)&v184[16])
                      {
                        v83 = (unint64_t *)(*(_QWORD *)&v184[16] + 8);
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      v85 = *(_QWORD *)v200;
                      if (v202[31] >= 0)
                        v86 = v202 + 8;
                      else
                        v86 = (char *)*((_QWORD *)v202 + 1);
                      v87 = _os_log_pack_fill();
                      *(_DWORD *)v87 = 136315138;
                      *(_QWORD *)(v87 + 4) = v86;
                      v88 = operator new();
                      v89 = *(unsigned __int8 *)(v23 + 39);
                      v90 = v172;
                      if ((v89 & 0x80u) != 0)
                      {
                        v90 = *(const char **)(v23 + 16);
                        v89 = *(_QWORD *)(v23 + 24);
                      }
                      *(_QWORD *)v88 = v85;
                      *(_OWORD *)(v88 + 8) = *(_OWORD *)&v200[8];
                      *(_QWORD *)&v200[8] = 0;
                      *(_QWORD *)&v200[16] = 0;
                      *(_OWORD *)(v88 + 24) = v201;
                      v201 = 0uLL;
                      *(_QWORD *)(v88 + 40) = v90;
                      *(_QWORD *)(v88 + 48) = v89;
                      *(_BYTE *)(v88 + 56) = 16;
                      v187 = 0;
                      *(_QWORD *)v184 = v88;
                      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), v184);
                      v91 = *(_QWORD *)v184;
                      *(_QWORD *)v184 = 0;
                      v44 = __src;
                      if (v91)
                      {
                        v92 = *(std::__shared_weak_count **)(v91 + 32);
                        if (v92)
                        {
                          v93 = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldaxr(v93);
                          while (__stlxr(v94 - 1, v93));
                          if (!v94)
                          {
                            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                            std::__shared_weak_count::__release_weak(v92);
                          }
                        }
                        v95 = *(std::__shared_weak_count **)(v91 + 16);
                        if (v95)
                        {
                          v96 = (unint64_t *)&v95->__shared_owners_;
                          do
                            v97 = __ldaxr(v96);
                          while (__stlxr(v97 - 1, v96));
                          if (!v97)
                          {
                            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                            std::__shared_weak_count::__release_weak(v95);
                          }
                        }
                        MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                        v98 = v187;
                        v187 = 0;
                        if (v98)
                        {
                          v99 = (std::__shared_weak_count *)*((_QWORD *)v98 + 4);
                          if (v99)
                          {
                            v100 = (unint64_t *)&v99->__shared_owners_;
                            do
                              v101 = __ldaxr(v100);
                            while (__stlxr(v101 - 1, v100));
                            if (!v101)
                            {
                              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                              std::__shared_weak_count::__release_weak(v99);
                            }
                          }
                          v102 = (std::__shared_weak_count *)*((_QWORD *)v98 + 2);
                          if (v102)
                          {
                            v103 = (unint64_t *)&v102->__shared_owners_;
                            do
                              v104 = __ldaxr(v103);
                            while (__stlxr(v104 - 1, v103));
                            if (!v104)
                            {
                              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                              std::__shared_weak_count::__release_weak(v102);
                            }
                          }
                          MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
                        }
                      }
                      v105 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
                      if (*((_QWORD *)&v201 + 1))
                      {
                        v106 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      v108 = *(std::__shared_weak_count **)&v200[16];
                      if (*(_QWORD *)&v200[16])
                      {
                        v109 = (unint64_t *)(*(_QWORD *)&v200[16] + 8);
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 - 1, v109));
                        if (!v110)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }
LABEL_189:
                      if (v44)
                      {
                        v111 = &__dst;
                        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v111 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                        sub_20E8C003C((uint64_t)&__p, "%s", (const char *)v111);
                        sub_20E863570((uint64_t)&__p);
                      }
                      sub_20E863570((uint64_t)&__p);
                      v112 = v181;
                      if (v181)
                      {
                        v113 = (unint64_t *)&v181->__shared_owners_;
                        do
                          v114 = __ldaxr(v113);
                        while (__stlxr(v114 - 1, v113));
                        if (!v114)
                        {
                          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                          std::__shared_weak_count::__release_weak(v112);
                        }
                      }
                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__dst.__r_.__value_.__l.__data_);
                      object.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                      v115 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words
                                                + *(_QWORD *)(object.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      object.__r_.__value_.__r.__words[2] = v115;
                      *(_QWORD *)&v190 = MEMORY[0x24BEDB848] + 16;
                      if (v196 < 0)
                        operator delete(v195);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v199);
                      return;
                    }
                  }
                  memcpy(v42, v22, v41);
                  goto LABEL_130;
                }
              }
              memmove(v33, v24, v25);
              goto LABEL_70;
            }
          }
          memmove(v30, v28, v29);
          goto LABEL_62;
        }
      }
      memmove(v17, v19, v16);
      goto LABEL_41;
    }
  }
}

void sub_20F109F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,void *a39,int a40,__int16 a41,char a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (a44 && a43 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  if (a28 < 0)
    operator delete(a23);
  sub_20E863714(v48 - 192);
  sub_20E869AA8((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F10A178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863784((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F10A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863784((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F10A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_20E863714(&a13);
  if (a28 < 0)
    operator delete(a23);
  sub_20E863784(&a38);
  _Unwind_Resume(a1);
}

void sub_20F10A1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_20E869AA8((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_20F10A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  if (*(_BYTE *)(v38 - 160) && *(char *)(v38 - 161) < 0)
    operator delete(*(void **)(v38 - 184));
  v40 = *(void **)(v38 - 192);
  if (v40)
    os_release(v40);
  sub_20E863714((uint64_t)&a13);
  if (a28 < 0)
    operator delete(a23);
  sub_20E863784((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20F10A218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F10A2AC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62140);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62140))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62138);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62140);
  }
  *a1 = qword_254A62138;
}

void sub_20F10A348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62140);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62140);
  _Unwind_Resume(a1);
}

void sub_20F10A3A0(char **a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  BOOL v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  if (v3 != a2)
  {
    if (a2)
    {
      if (a2 >= 0x666666666666667)
        sub_20E867F44();
      v6 = (char *)operator new(40 * a2);
      v7 = v6;
      v8 = &v6[40 * a2];
      v9 = v6;
      do
      {
        *(_OWORD *)v9 = 0uLL;
        *((_OWORD *)v9 + 1) = 0uLL;
        *((_QWORD *)v9 + 3) = 0xBFF0000000000000;
        *((_QWORD *)v9 + 4) = 0;
        *((_DWORD *)v9 + 8) = -1;
        v9 += 40;
      }
      while (v9 != v8);
      v10 = (unint64_t)a1[5];
      if (v10 >= a2)
        v11 = a2;
      else
        v11 = (unint64_t)a1[5];
      if (v10 <= a2)
      {
        if (v10)
        {
          v22 = a1[3];
          v23 = v6;
          do
          {
            v24 = &v2[40 * ((unint64_t)v22 % v3)];
            v25 = *(_OWORD *)v24;
            v26 = *((_OWORD *)v24 + 1);
            *((_DWORD *)v23 + 8) = *((_DWORD *)v24 + 8);
            *(_OWORD *)v23 = v25;
            *((_OWORD *)v23 + 1) = v26;
            v23 += 40;
            ++v22;
            --v10;
          }
          while (v10);
        }
        else if (!v2)
        {
LABEL_25:
          *a1 = v7;
          a1[1] = v8;
          a1[2] = v8;
          a1[3] = 0;
          a1[4] = (char *)(v11 % a2);
          a1[5] = (char *)v11;
          return;
        }
      }
      else
      {
        v12 = a1[3];
        v13 = v11 - 1;
        v14 = v10 - 1;
        v15 = v6;
        do
        {
          v16 = v13;
          v17 = &v2[40 * ((unint64_t)v12 % v3)];
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 1);
          *((_DWORD *)v15 + 8) = *((_DWORD *)v17 + 8);
          v20 = v14-- != 0;
          *(_OWORD *)v15 = v18;
          *((_OWORD *)v15 + 1) = v19;
          v21 = v20;
          v15 += 40;
          v13 = v16 - 1;
          ++v12;
        }
        while (v16 || (v21 & 1) == 0);
      }
      a1[1] = v2;
      operator delete(v2);
      goto LABEL_25;
    }
    a1[1] = v2;
    a1[4] = 0;
    a1[5] = 0;
    a1[3] = 0;
  }
}

uint64_t sub_20F10A540(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  _BYTE *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = a3;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 102) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 320) = _Q0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 352) = _Q0;
  *(_BYTE *)(a1 + 368) = 0;
  v10 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2)
  {
    v11 = (std::__shared_weak_count *)a2[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      *(_QWORD *)(a1 + 16) = a4;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = a4;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_20F10A634(_QWORD *a1, int *a2, uint64_t a3, uint64_t a4, __int16 a5, double a6)
{
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (*(_BYTE *)(a4 + 16))
    v8 = *(double *)a4;
  else
    v8 = -1.0;
  v9 = *a2;
  v10 = a2[2] + a2[1] + a2[3];
  v11 = *(_DWORD *)(a3 + 180);
  v12 = *(_DWORD *)(a3 + 192);
  if ((a5 & 0xFF00) != 0)
    v13 = a5;
  else
    v13 = -1;
  v14 = a1[5];
  v15 = a1 + 5;
  v16 = a1[6] - v14;
  if (v16)
  {
    v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 >> 3);
    if (a1[10] != v17 || *(double *)(v14 + 40 * a1[8]) < a6 + -1.2)
      goto LABEL_13;
    v18 = 2 * v17;
  }
  else
  {
    v18 = 1;
  }
  sub_20F10A3A0((char **)a1 + 5, v18);
  v14 = *v15;
LABEL_13:
  v19 = v14 + 40 * a1[9];
  *(double *)v19 = a6;
  *(_DWORD *)(v19 + 8) = v9;
  *(_DWORD *)(v19 + 12) = v10;
  *(_DWORD *)(v19 + 16) = v11;
  *(_DWORD *)(v19 + 20) = v12;
  *(double *)(v19 + 24) = v8;
  *(_DWORD *)(v19 + 32) = v13;
  v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[6] - a1[5]) >> 3);
  v21 = a1[10];
  v22 = a1[9] + 1;
  if (v22 >= v20)
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[6] - a1[5]) >> 3);
  else
    v23 = 0;
  a1[9] = v22 - v23;
  if (v21 == v20)
  {
    v24 = a1[8] + 1;
    if (v24 < v20)
      v20 = 0;
    a1[8] = v24 - v20;
  }
  else
  {
    a1[10] = v21 + 1;
  }
}

void sub_20F10A798(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  double v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  double v65;
  __int128 v66;
  __int128 v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  __int128 __dst;
  _BYTE v90[24];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  double v127;
  _QWORD v128[3];

  v128[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 88) < *(_DWORD *)(a1 + 92) && (v5 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 48) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72))
      v11 = *(_QWORD *)(a1 + 72);
    else
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 48) - v8) >> 3);
    v12 = *(double *)(v8 + 40 * v11 - 40) + -1.2;
    v13 = *(_QWORD *)(a1 + 80);
    while (1)
    {
      v14 = (v7 + v10) % v9;
      v15 = *(double *)(v8 + 40 * v14);
      if (v15 >= v12)
        break;
      ++v7;
      --v13;
      if (v7 == v5)
        goto LABEL_9;
    }
    v16 = v8 + 40 * v14;
    LODWORD(v12) = *(_DWORD *)(v16 + 8);
    LODWORD(v15) = *(_DWORD *)(v16 + 12);
    v17 = (double)*(unint64_t *)&v12;
    v18 = v17 * v17;
    v19 = (double)*(unint64_t *)&v15;
    LODWORD(v12) = *(_DWORD *)(v16 + 16);
    LODWORD(v15) = *(_DWORD *)(v16 + 20);
    v20 = (double)*(unint64_t *)&v12;
    v80 = v17 * v17;
    v81 = v20 * v20;
    v21 = (double)*(unint64_t *)&v15;
    v82 = v19 * v19;
    v83 = v21 * v21;
    v22 = *(double *)(v16 + 24);
    v23 = v22 * v22;
    v24 = (double)*(int *)(v16 + 32);
    v25 = v24 * v24;
    v84 = v24 * v24;
    v85 = v22 * v22;
    if (v7 + 1 == v5)
    {
      v13 = 1;
      v72 = v19;
      v73 = v19;
      v75 = v19;
      v76 = v20;
      v70 = v17;
      v71 = v20;
      v26 = v17;
      v27 = v21;
      v77 = v21;
      v78 = (double)*(int *)(v16 + 32);
      v28 = *(double *)(v16 + 24);
      v79 = v28;
      v29 = v78;
      v74 = v17;
    }
    else
    {
      v30 = v10 + v7;
      v31 = 1;
      v32 = v19;
      v33 = v19;
      v34 = v20;
      v35 = v20;
      v26 = v17;
      v27 = v21;
      v36 = v21;
      v28 = *(double *)(v16 + 24);
      v37 = v28;
      v29 = (double)*(int *)(v16 + 32);
      v38 = v29;
      v39 = v17;
      v41 = v24 * v24;
      v40 = v22 * v22;
      v43 = v19 * v19;
      v42 = v21 * v21;
      v45 = v17 * v17;
      v44 = v20 * v20;
      do
      {
        v46 = v8 + 40 * ((v30 + v31) % v9);
        LODWORD(v25) = *(_DWORD *)(v46 + 8);
        LODWORD(v23) = *(_DWORD *)(v46 + 12);
        v47 = (double)*(unint64_t *)&v25;
        if (v17 < v47)
          v17 = v47;
        v39 = v39 + v47;
        if (v26 > v47)
          v26 = v47;
        v45 = v45 + v47 * v47;
        v48 = (double)*(unint64_t *)&v23;
        if (v32 < (double)*(unint64_t *)&v23)
          v32 = (double)*(unint64_t *)&v23;
        v33 = v33 + v48;
        v49 = v48 * v48;
        v43 = v43 + v48 * v48;
        LODWORD(v49) = *(_DWORD *)(v46 + 16);
        LODWORD(v18) = *(_DWORD *)(v46 + 20);
        if (v19 > v48)
          v19 = v48;
        v50 = (double)*(unint64_t *)&v49;
        if (v20 < (double)*(unint64_t *)&v49)
          v20 = (double)*(unint64_t *)&v49;
        v35 = v35 + v50;
        if (v34 > v50)
          v34 = (double)*(unint64_t *)&v49;
        v44 = v44 + v50 * v50;
        v51 = (double)*(unint64_t *)&v18;
        if (v21 < (double)*(unint64_t *)&v18)
          v21 = (double)*(unint64_t *)&v18;
        v36 = v36 + v51;
        v42 = v42 + v51 * v51;
        v23 = *(double *)(v46 + 24);
        v18 = v23 * v23;
        if (v27 > v51)
          v27 = v51;
        v40 = v40 + v18;
        if (v22 < v23)
          v22 = *(double *)(v46 + 24);
        v37 = v37 + v23;
        if (v28 > v23)
          v28 = *(double *)(v46 + 24);
        v52 = (double)*(int *)(v46 + 32);
        if (v24 < v52)
          v24 = (double)*(int *)(v46 + 32);
        if (v29 > v52)
          v29 = (double)*(int *)(v46 + 32);
        v38 = v38 + v52;
        v25 = v52 * v52;
        v41 = v41 + v25;
        ++v31;
      }
      while (v13 != v31);
      v70 = v39;
      v71 = v34;
      v72 = v33;
      v73 = v32;
      v74 = v17;
      v75 = v19;
      v80 = v45;
      v81 = v44;
      v76 = v35;
      v77 = v36;
      v82 = v43;
      v83 = v42;
      v78 = v38;
      v79 = v37;
      v84 = v41;
      v85 = v40;
    }
    sub_20E8965F4();
    v88 = v86;
    sub_20E893368((unsigned int *)&__dst, &v88);
    v128[0] = (__dst | ((unint64_t)BYTE4(__dst) << 32) | ((unint64_t)BYTE5(__dst) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE7(__dst) << 56) | ((unint64_t)(HIWORD(DWORD1(__dst)) & 0xF | 0x40u) << 48);
    v128[1] = ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | DWORD2(__dst) & 0xFFFFFF00 | ((unint64_t)HIDWORD(__dst) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE14(__dst) << 48) | BYTE8(__dst) & 0x3F | 0x80;
    sub_2102323F4((unsigned __int8 *)v128, &__dst);
    v53 = operator new(0x28uLL);
    v54 = *(_OWORD *)v90;
    *v53 = __dst;
    v53[1] = v54;
    *((_DWORD *)v53 + 8) = *(_DWORD *)&v90[16];
    *((_BYTE *)v53 + 36) = 0;
    sub_20E860C04(&__dst, v53, 0x24uLL);
    sub_20FCCCE84((std::string *)(*a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32)), (uint64_t)&v90[8]);
    *(double *)&v95 = v74;
    *((double *)&v95 + 1) = v26;
    *(_QWORD *)&v96 = v13;
    *((double *)&v96 + 1) = v70;
    v97 = v80;
    *(double *)&v101 = v73;
    *((double *)&v101 + 1) = v75;
    *(_QWORD *)&v102 = v13;
    *((double *)&v102 + 1) = v72;
    v103 = v82;
    *(double *)&v107 = v20;
    *((double *)&v107 + 1) = v71;
    *(_QWORD *)&v108 = v13;
    *((double *)&v108 + 1) = v76;
    v109 = v81;
    *(double *)&v113 = v21;
    *(_QWORD *)&v114 = v13;
    *((double *)&v113 + 1) = v27;
    *((double *)&v114 + 1) = v77;
    v115 = v83;
    *(double *)&v119 = v22;
    *(_QWORD *)&v120 = v13;
    *((double *)&v119 + 1) = v28;
    *((double *)&v120 + 1) = v79;
    v121 = v85;
    *(double *)&v125 = v24;
    *(_QWORD *)&v126 = v13;
    *((double *)&v125 + 1) = v29;
    *((double *)&v126 + 1) = v78;
    v127 = v84;
    ++*(_DWORD *)(a1 + 88);
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)v90;
    __dst = 0uLL;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v90[8];
    v55 = v91;
    *(_QWORD *)&v90[8] = 0;
    *(_QWORD *)&v90[16] = 0;
    v91 = 0;
    *(_QWORD *)(a3 + 40) = v55;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)v90 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v56 = v95;
    *(_OWORD *)(a3 + 88) = v96;
    *(_OWORD *)(a3 + 72) = v56;
    v57 = v103;
    *(double *)(a3 + 104) = v97;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v58 = v101;
    *(_OWORD *)(a3 + 152) = v102;
    *(_OWORD *)(a3 + 136) = v58;
    *(double *)(a3 + 168) = v57;
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 192) = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v59 = v107;
    v60 = v108;
    v61 = v115;
    *(double *)(a3 + 232) = v109;
    *(_OWORD *)(a3 + 216) = v60;
    *(_OWORD *)(a3 + 200) = v59;
    *(_QWORD *)(a3 + 240) = 0;
    *(_QWORD *)(a3 + 248) = 0;
    v62 = a3 + 240;
    *(_QWORD *)(v62 + 16) = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v63 = v113;
    *(_OWORD *)(v62 + 40) = v114;
    *(_OWORD *)(v62 + 24) = v63;
    *(double *)(v62 + 56) = v61;
    *(_QWORD *)(v62 + 64) = 0;
    *(_QWORD *)(v62 + 72) = 0;
    *(_QWORD *)(v62 + 80) = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v64 = v119;
    *(_OWORD *)(v62 + 104) = v120;
    *(_OWORD *)(v62 + 88) = v64;
    v65 = v127;
    *(double *)(v62 + 120) = v121;
    *(_QWORD *)(v62 + 128) = 0;
    *(_QWORD *)(v62 + 136) = 0;
    *(_QWORD *)(v62 + 144) = 0;
    v123 = 0;
    v122 = 0;
    v124 = 0;
    v66 = v125;
    v67 = v126;
    *(double *)(v62 + 184) = v65;
    *(_OWORD *)(v62 + 168) = v67;
    *(_OWORD *)(v62 + 152) = v66;
    *(_BYTE *)(v62 + 192) = 1;
    sub_20F10B8D8((uint64_t)&__dst);
    operator delete(v53);
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v69 = __ldaxr(p_shared_owners);
      while (__stlxr(v69 - 1, p_shared_owners));
      if (!v69)
      {
        ((void (*)())v87->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v87);
      }
    }
  }
  else
  {
LABEL_9:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 432) = 0;
  }
}

void sub_20F10ADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a35 < 0)
    operator delete(__p);
  operator delete(v35);
  sub_20E896798((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20F10ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E896798((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20F10ADEC(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  void **v22;
  void **v23;
  void **v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  double v35;
  _QWORD *v36;
  __int128 __dst;
  void *v38[2];
  __int128 v39;
  void *v40[2];
  _OWORD v41[3];
  __int128 v42;
  void *__p[2];
  _BYTE v44[49];

  if (*(_BYTE *)(a1 + 296)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationCAManager.cpp", 180, (uint64_t)"!opt_reinitialization_event_", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_OWORD *)__p = 0u;
  memset(v44, 0, 48);
  v42 = 0u;
  memset(v41, 0, sizeof(v41));
  v39 = 0u;
  *(_OWORD *)v40 = 0u;
  __dst = 0u;
  *(_OWORD *)v38 = 0u;
  v6 = (char *)operator new(0x19uLL);
  strcpy(v6, "reason_reinitialization");
  BYTE8(v39) = 0;
  sub_20E860C04(v40, v6, 0x17uLL);
  operator delete(v6);
  v7 = (char *)operator new(0x20uLL);
  strcpy(v7, "time_to_initialize_tracking");
  BYTE8(v41[0]) = 0;
  LOBYTE(v41[1]) = 0;
  sub_20E860C04((_BYTE *)&v41[1] + 8, v7, 0x1BuLL);
  operator delete(v7);
  v8 = (char *)operator new(0x20uLL);
  v36 = a3;
  strcpy(v8, "time_since_last_initialization");
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  sub_20E860C04(__p, v8, 0x1EuLL);
  operator delete(v8);
  v44[8] = 0;
  v44[16] = 0;
  strcpy(&v44[24], "time_to_update_anchor");
  *(_WORD *)&v44[47] = 277;
  if (!*(_BYTE *)(a1 + 296))
  {
    *(_BYTE *)(a1 + 120) = 0;
    v16 = *((_QWORD *)&__dst + 1);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = v16;
    __dst = 0uLL;
    *(_BYTE *)(a1 + 144) = 0;
    if (BYTE8(v39))
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)v38;
      *(_QWORD *)(a1 + 136) = v39;
      v38[1] = 0;
      *(_QWORD *)&v39 = 0;
      v38[0] = 0;
      *(_BYTE *)(a1 + 144) = 1;
    }
    *(_OWORD *)(a1 + 152) = *(_OWORD *)v40;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)&v41[0];
    v40[1] = 0;
    *(_QWORD *)&v41[0] = 0;
    v40[0] = 0;
    v17 = *(_OWORD *)((char *)&v41[1] + 8);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)((char *)v41 + 8);
    *(_OWORD *)(a1 + 192) = v17;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)&v41[2] + 1);
    memset((char *)&v41[1] + 8, 0, 24);
    *(_OWORD *)(a1 + 216) = v42;
    v18 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)v44;
    *(_OWORD *)(a1 + 232) = v18;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v44 = 0;
    v19 = *(_OWORD *)&v44[8];
    v20 = *(_OWORD *)&v44[24];
    *(_QWORD *)(a1 + 288) = *(_QWORD *)&v44[40];
    *(_OWORD *)(a1 + 256) = v19;
    *(_OWORD *)(a1 + 272) = v20;
    memset(&v44[24], 0, 24);
    *(_BYTE *)(a1 + 296) = 1;
    v21 = a2;
    goto LABEL_31;
  }
  v9 = *((_QWORD *)&__dst + 1);
  __dst = 0uLL;
  v10 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v9;
  if (!v10)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = a1 + 120;
    v14 = *(unsigned __int8 *)(a1 + 144);
    if (v14 == BYTE8(v39))
    {
LABEL_9:
      if (v14)
      {
        if (*(char *)(a1 + 143) < 0)
          operator delete(*(void **)v13);
        *(_OWORD *)v13 = *(_OWORD *)v38;
        *(_QWORD *)(v13 + 16) = v39;
        BYTE7(v39) = 0;
        LOBYTE(v38[0]) = 0;
        v15 = a1 + 152;
        if (*(char *)(a1 + 175) < 0)
          goto LABEL_23;
        goto LABEL_24;
      }
LABEL_22:
      v15 = a1 + 152;
      if ((*(char *)(a1 + 175) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_8:
    v13 = a1 + 120;
    v14 = *(unsigned __int8 *)(a1 + 144);
    if (v14 == BYTE8(v39))
      goto LABEL_9;
  }
  if (v14)
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)v13);
    *(_BYTE *)(a1 + 144) = 0;
    goto LABEL_22;
  }
  *(_OWORD *)v13 = *(_OWORD *)v38;
  *(_QWORD *)(v13 + 16) = v39;
  v38[1] = 0;
  *(_QWORD *)&v39 = 0;
  v38[0] = 0;
  *(_BYTE *)(a1 + 144) = 1;
  v15 = a1 + 152;
  if (*(char *)(a1 + 175) < 0)
LABEL_23:
    operator delete(*(void **)v15);
LABEL_24:
  *(_OWORD *)v15 = *(_OWORD *)v40;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)&v41[0];
  BYTE7(v41[0]) = 0;
  LOBYTE(v40[0]) = 0;
  *(_QWORD *)(a1 + 176) = *((_QWORD *)&v41[0] + 1);
  *(_BYTE *)(a1 + 184) = v41[1];
  v22 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)((char *)&v41[1] + 8);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)&v41[2] + 1);
  HIBYTE(v41[2]) = 0;
  BYTE8(v41[1]) = 0;
  *(_QWORD *)(a1 + 216) = v42;
  *(_BYTE *)(a1 + 224) = BYTE8(v42);
  v23 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)v44;
  v44[7] = 0;
  LOBYTE(__p[0]) = 0;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)&v44[8];
  *(_BYTE *)(a1 + 264) = v44[16];
  v24 = (void **)(a1 + 272);
  a3 = v36;
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v24);
  *(_OWORD *)v24 = *(_OWORD *)&v44[24];
  *(_QWORD *)(a1 + 288) = *(_QWORD *)&v44[40];
  v44[47] = 0;
  v44[24] = 0;
  v21 = a2;
  if (!v44[48])
  {
LABEL_45:
    if ((*((char *)v21 + 23) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_52;
  }
LABEL_31:
  if ((v44[7] & 0x80000000) != 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SBYTE7(v41[0]) & 0x80000000) == 0)
        goto LABEL_34;
LABEL_38:
      operator delete(v40[0]);
      if (!BYTE8(v39))
        goto LABEL_41;
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*((void **)&v41[1] + 1));
  if (SBYTE7(v41[0]) < 0)
    goto LABEL_38;
LABEL_34:
  if (!BYTE8(v39))
    goto LABEL_41;
LABEL_39:
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
LABEL_41:
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_45;
  v25 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
    goto LABEL_45;
  (*(void (**)(_QWORD))(**((_QWORD **)&__dst + 1) + 16))(*((_QWORD *)&__dst + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&__dst + 1));
  if ((*((char *)v21 + 23) & 0x80000000) == 0)
  {
LABEL_46:
    __dst = *v21;
    v38[0] = *((void **)v21 + 2);
    LOBYTE(v38[1]) = 1;
    v27 = (void **)(a1 + 120);
    if (*(_BYTE *)(a1 + 144))
      goto LABEL_47;
LABEL_53:
    *(_OWORD *)v27 = __dst;
    v27[2] = v38[0];
    *(_BYTE *)(a1 + 144) = 1;
    v29 = *a3;
    v28 = a3[1];
    if (!v28)
      goto LABEL_56;
    goto LABEL_54;
  }
LABEL_52:
  sub_20E860C04(&__dst, *(void **)v21, *((_QWORD *)v21 + 1));
  LOBYTE(v38[1]) = 1;
  v27 = (void **)(a1 + 120);
  if (!*(_BYTE *)(a1 + 144))
    goto LABEL_53;
LABEL_47:
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = __dst;
  v27[2] = v38[0];
  v29 = *a3;
  v28 = a3[1];
  if (v28)
  {
LABEL_54:
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
LABEL_56:
  v32 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v28;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (*(_BYTE *)(a1 + 336))
        goto LABEL_61;
LABEL_63:
      v35 = -1.0;
      goto LABEL_64;
    }
  }
  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_63;
LABEL_61:
  v35 = *(double *)(a1 + 360) - *(double *)(a1 + 352);
LABEL_64:
  *(double *)(a1 + 216) = v35;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 328);
}

void sub_20F10B44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  operator delete(v31);
  if (a30 < 0)
    operator delete(__p);
  sub_20EF6F7C0(v30);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F10B4FC(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  char __p[20];
  char v20;

  if (!*(_BYTE *)(a1 + 24))
    return;
  if (*(_BYTE *)(a1 + 304))
  {
    *(double *)(a1 + 328) = a4;
    if (*(_BYTE *)(a1 + 336))
      goto LABEL_4;
  }
  else
  {
    *(double *)(a1 + 312) = a4;
    *(double *)(a1 + 320) = a4;
    *(_BYTE *)(a1 + 304) = 1;
    *(double *)(a1 + 328) = a4;
    if (*(_BYTE *)(a1 + 336))
    {
LABEL_4:
      *(double *)(a1 + 360) = a4;
      if (*(_BYTE *)(a1 + 296))
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  *(double *)(a1 + 344) = a4;
  *(double *)(a1 + 352) = a4;
  *(_BYTE *)(a1 + 336) = 1;
  *(double *)(a1 + 360) = a4;
  if (*(_BYTE *)(a1 + 296))
  {
LABEL_5:
    if (*(_BYTE *)(a2 + 88))
    {
      *(double *)(a1 + 176) = a4 - *(double *)(a1 + 320);
      *(_BYTE *)(a1 + 184) = 1;
      *(double *)(a1 + 352) = a4;
      sub_20FDC3CB0((uint64_t *)a1, a1 + 104);
      if (*(_BYTE *)(a1 + 296))
      {
        sub_20F04BF8C(a1 + 104);
        *(_BYTE *)(a1 + 296) = 0;
      }
      if (*(_BYTE *)(a1 + 102))
        *(_BYTE *)(a1 + 102) = 0;
    }
    return;
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 368))
  {
    if (*(_BYTE *)(a1 + 102))
    {
      sub_20FCCCE84((std::string *)(*(unsigned int *)(a1 + 96) | ((unint64_t)*(unsigned __int16 *)(a1 + 100) << 32)), (uint64_t)__p);
      v6 = *a3;
      v7 = (std::__shared_weak_count *)a3[1];
      v17[0] = v6;
      v17[1] = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      sub_20F10ADEC(a1, (__int128 *)__p, v17);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v20 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 368) = 1;
    *(double *)(a1 + 352) = a4;
    v20 = 19;
    strcpy(__p, "FirstInitialization");
    v12 = (std::__shared_weak_count *)a3[1];
    v18[0] = *a3;
    v18[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_20F10ADEC(a1, (__int128 *)__p, v18);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v20 < 0)
      operator delete(*(void **)__p);
    if (*(_BYTE *)(a1 + 224))
      *(_BYTE *)(a1 + 224) = 0;
  }
}

void sub_20F10B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10B75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E86665C((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F10B780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  __int16 v14;
  _BYTE v15[432];
  char v16;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(_QWORD *)a1;
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = atomic_load((unint64_t *)(v4 + 128));
    v9 = (v8 & 0xFF00000000) != 0 || (v8 & 0xFF0000000000) == 0;
    v10 = *(_BYTE *)a2 == 11 && v9;
    if (v5)
    {
      v11 = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v10)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    if (v10)
LABEL_16:
      sub_20F108B20((_DWORD *)(a1 + 32));
  }
LABEL_17:
  sub_20F10A798(a1, (unsigned int *)a2, (uint64_t)v15);
  if (v16)
  {
    if (!*(_BYTE *)(a1 + 24) || (sub_20FDC2A14((_QWORD *)a1, (uint64_t)v15), v16))
      sub_20F10B8D8((uint64_t)v15);
  }
  v13 = *(unsigned __int8 *)(a1 + 102);
  v14 = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)a2;
  *(_WORD *)(a1 + 100) = v14;
  if (!v13)
    *(_BYTE *)(a1 + 102) = 1;
}

void sub_20F10B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  if (a64)
    sub_20F10B8D8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F10B8D8(uint64_t a1)
{
  if (*(char *)(a1 + 391) < 0)
  {
    operator delete(*(void **)(a1 + 368));
    if ((*(char *)(a1 + 327) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 263) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 304));
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 240));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 176));
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_16;
LABEL_8:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_17:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20F10B9C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  __int128 v22;

  __p = operator new(0x28uLL);
  v22 = xmmword_2102DB450;
  strcpy((char *)__p, "ReinitializationLogicConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.min_health_for_init", v4, "Minimum health that has to be reached after initialization.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.initialization_time_s", v5, "Time allocated to initialization to show good health before attempting a re-initialization.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 24));
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.enable_reinitialization_anytime", v7, "Toggle for allowing mid-sequence reinitialization.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.immediate_reinitialization_given_heuristics", v8, "Immediatly re-intialize if heuristics are conclusive.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 33));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.keep_reinitializing_during_force_reinit_failure", v9, "This is used to allow re-initialization while tracking is Paused.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 40));
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.time_internal_in_poor_heuristics_before_declaring_re_initialization_s", v11, "The amount of time needed for heuristics to decalre re_initialization. Unit: sec.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.time_internal_in_good_heuristics_before_declaring_re_initialization_s", v12, "This is the time that we need to wait after last poor heuristic before concluding good tracking again. Unit: sec.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.skip_reinitialization_during_severe_lux_changes", v13, "Flag controlling whether reinitialization should be skipped / delayed for a short period of time when there are significant changes in camera lux values.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.seconds_to_skip_reinitialization", v14, "Time (seconds) to skip reinitialization in the event that there's a significant change in the lux estimates. Unit: sec.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.seconds_to_check_early_exit_of_skipped_reinitialization", v15, "Time (seconds) to check if there is an early exit of skipped reinitialization. Unit: sec.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.seconds_to_disable_catastrophic_lux_detector", v16, "Seconds to disable detector for catastrophic changes in lux. This prevents consecutively skipping reinitialization for a short period of time.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.use_heuristics", v17, "Toggle for using heuristics based reinitalization.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DCF0((unsigned int *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.num_slam_states_to_disable_travel_mode_hint_in_3dof", v18, "Number of SLAM-updates to disable Travel mode hint after 6DoF-to-3DoF transition.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 100));
  return sub_20E8B2F9C((uint64_t *)&__p, "ReinitializationLogicConfig.immediatly_allow_travel_mode_hint_in_3dof", v19, "Allow travel mode hint immediatly after transitioning to 3DoF. Otherwise, we have to wait for a signal from ARKit.");
}

void sub_20F10BD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F10BDF4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  v4 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 191) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 195) = 1;
  *(_BYTE *)(a1 + 197) = 0;
  *(_DWORD *)(a1 + 203) = 256;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 272) = 1;
  *(_BYTE *)(a1 + 274) = 0;
  *(_QWORD *)&v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 276) = 0;
  if (*(double *)&v5 >= *(double *)&v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 43, (uint64_t)"config_.time_internal_in_poor_health_before_declaring_re_initialization_s < config_.health_check_interval_after_initialization_s", 128, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20F10BEF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 264);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 264);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20F10BF34(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  BOOL v14;
  int v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  int v21;
  _QWORD *v22;
  std::chrono::steady_clock::time_point v23;
  uint64_t *v24;
  unsigned __int8 v25;
  char *v27;
  size_t v28;
  __darwin_time_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::chrono::steady_clock::time_point *v33;
  unsigned __int8 v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  size_t v38;
  __darwin_time_t tv_sec;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t *v45;
  unsigned __int8 v46;
  std::string::size_type v48;
  char *v49;
  size_t v50;
  __darwin_time_t v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  double v55;
  BOOL v56;
  uint64_t *v57;
  double v58;
  unsigned __int8 v59;
  double v60;
  char *v62;
  size_t v63;
  __darwin_time_t v64;
  uint64_t v65;
  uint64_t m;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned __int8 v70;
  std::string::size_type v72;
  char *v73;
  size_t v74;
  __darwin_time_t v75;
  uint64_t *ii;
  uint64_t v77;
  std::string::size_type v78;
  uint64_t *v79;
  unsigned __int8 v80;
  char *v82;
  size_t v83;
  __darwin_time_t v84;
  uint64_t *n;
  uint64_t v86;
  std::string::size_type v87;
  uint64_t *v88;
  unsigned __int8 v89;
  char *v91;
  size_t v92;
  __darwin_time_t v93;
  uint64_t v94;
  uint64_t k;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  double v107;
  double v108;
  double v109;
  int v110;
  unint64_t v111;
  double v112;
  unsigned __int8 v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  double v117;
  unsigned __int8 v118;
  uint64_t v119;
  const char *v120;
  NSObject *v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  size_t v127;
  const char *v128;
  double v129;
  double v130;
  unsigned __int8 v131;
  const char *v132;
  size_t v133;
  std::string::size_type *p_size;
  unint64_t v135;
  const char *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  size_t v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *p_shared_owners;
  unint64_t v149;
  unint64_t v150;
  std::string::size_type v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  char *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unsigned int v180;
  int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  char *v186;
  unsigned __int8 v187;
  uint64_t v188;
  const char *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  timespec v197;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v199;
  const char *v200;
  int v201;
  const char *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  char *category;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::string object;
  void *v211[2];
  void *v212;
  size_t v213;
  unint64_t v214;
  void *v215;
  char v216;
  char v217;
  void *v218;
  char v219;
  void *__p;
  char v221;
  uint64_t v222;

  v222 = *MEMORY[0x24BDAC8D0];
  a1[204] = a2;
  if (!a1[273]
    && a1[274]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 150, (uint64_t)"force_reinitialization_failure_ || !enable_travel_mode_hint_during_3DoF_", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_272;
  }
  if (a1[274])
  {
    v14 = a1[273] != 0;
    v15 = a1[203];
    if (a1[273])
      goto LABEL_15;
  }
  else
  {
    v14 = 0;
    v15 = a1[203];
  }
  if (v15)
  {
    if (a3[5])
      a1[198] = 1;
    if (a3[6])
      a1[199] = 1;
    if (a3[7])
      a1[200] = 1;
    return;
  }
LABEL_15:
  v16 = a1 + 197;
  if (!a1[273])
    v14 = 1;
  if (v14)
  {
    if (!a1[64] || !a1[192])
      goto LABEL_215;
    v17 = 0;
    v18 = a3[1];
    if (a3[1] && *(_BYTE *)(a4 + 16))
      v17 = *(_BYTE *)(a4 + 8) != 0;
    v19 = atomic_load((unsigned __int8 *)&qword_254A62148);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A62148))
    {
      v191 = operator new(0x28uLL);
      v191[1] = 0;
      v191[2] = 0;
      *v191 = &off_24C9C4340;
      *((_BYTE *)v191 + 24) = 0;
      *((_BYTE *)v191 + 32) = 0;
      qword_254A62178 = (uint64_t)(v191 + 3);
      qword_254A62180 = (uint64_t)v191;
      unk_254A62188 = 300000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A62178, &dword_20E81F000);
      __cxa_guard_release(&qword_254A62148);
    }
    v20 = atomic_load((unsigned __int8 *)&qword_254A62150);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A62150))
    {
      qword_254A62168 = 0;
      qword_254A62170 = 0;
      v192 = operator new(0x20uLL);
      v192[1] = 0;
      v192[2] = 0;
      *v192 = &off_24C9F6898;
      *((_WORD *)v192 + 12) = 0;
      qword_254A62168 = (uint64_t)(v192 + 3);
      qword_254A62170 = (uint64_t)v192;
      __cxa_atexit((void (*)(void *))sub_20EFF38D8, &qword_254A62168, &dword_20E81F000);
      __cxa_guard_release(&qword_254A62150);
    }
    v21 = sub_20EFF3940((BOOL **)&qword_254A62168, 0, (uint64_t)a3, a4, a5, a6, a7, a8, v17);
    v22 = (_QWORD *)qword_254A62178;
    LODWORD(v9) = *(unsigned __int8 *)(qword_254A62178 + 8);
    if (v21)
    {
      if (*(_BYTE *)(qword_254A62178 + 8))
        *(_BYTE *)(qword_254A62178 + 8) = 0;
      v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    }
    else
    {
      v23.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if ((_DWORD)v9)
      {
        if (v23.__d_.__rep_ - *v22 < 300000000)
          goto LABEL_82;
        v33 = (std::chrono::steady_clock::time_point *)qword_254A62178;
LABEL_47:
        v33->__d_.__rep_ = v23.__d_.__rep_;
        v9 = sub_210219C18();
        v34 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        v35 = atomic_load(&qword_254A5A450);
        v36 = &xmmword_2102EF000;
        if (!v35)
          goto LABEL_80;
        v194 = v18;
        LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(object.__r_.__value_.__r.__words[0]) = v17;
        v37 = (char *)_os_log_send_and_compose_impl();
        v38 = strlen(v37);
        v197.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v197);
        tv_sec = v197.tv_sec;
        timespec_get(&v197, 1);
        sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v9 + 1), (__int128 *)(v9 + 5), "[RLC] Significant lux change:%{BOOL}d", 0x25uLL, v37, v38, tv_sec, &v197);
        std::mutex::lock(&stru_254A5A410);
        v40 = qword_254A5A458;
        for (i = unk_254A5A460; v40 != i; v40 += 40)
        {
          v42 = *(_QWORD *)(v40 + 32);
          if (!v42)
            sub_20E86D37C();
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v42 + 48))(v42, &object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v221 < 0)
        {
          operator delete(__p);
          v18 = v194;
          v16 = a1 + 197;
          v36 = &xmmword_2102EF000;
          if ((v219 & 0x80000000) == 0)
          {
LABEL_54:
            if (!v217)
            {
LABEL_73:
              if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                operator delete(v211[1]);
              if (SHIBYTE(v211[0]) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (v37)
                free(v37);
LABEL_80:
              if (os_signpost_enabled((os_log_t)*v9))
              {
                LODWORD(object.__r_.__value_.__l.__data_) = *((_QWORD *)v36 + 7);
                HIDWORD(object.__r_.__value_.__r.__words[0]) = v17;
                _os_signpost_emit_unreliably_with_name_impl();
              }
LABEL_82:
              v43 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
              if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
              {
                sub_20FCFB524();
                __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6D9C8);
              }
              if (*(_BYTE *)(a4 + 16))
                v44 = *(_BYTE *)(a4 + 8);
              else
                v44 = 0;
              sub_210237040("[RLC] Significant lux change: %d %d %d %d", &object, a1[232] == 0, v18, v44, a1[216] == 0);
              sub_20EA5C6C8((uint64_t)&object, qword_254A6D9A8);
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                operator delete(object.__r_.__value_.__l.__data_);
              if ((_DWORD)v18 && !a1[232] && *(_BYTE *)(a4 + 16) && *(_BYTE *)(a4 + 8))
              {
                if (!a1[216])
                {
                  *((double *)a1 + 26) = *((double *)a1 + 9) + a9;
                  a1[216] = 1;
                  v45 = sub_210219C18();
                  v46 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                  {
                    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DDD0);
                  }
                  if (!atomic_load(&qword_254A5A450))
                  {
LABEL_175:
                    if (os_signpost_enabled((os_log_t)*v45))
                    {
                      v87 = *((_QWORD *)a1 + 9);
                      LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v87;
                      goto LABEL_177;
                    }
                    goto LABEL_178;
                  }
                  v48 = *((_QWORD *)a1 + 9);
                  LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v48;
                  v49 = (char *)_os_log_send_and_compose_impl();
                  v50 = strlen(v49);
                  v197.tv_sec = 0;
                  pthread_threadid_np(0, (__uint64_t *)&v197);
                  v51 = v197.tv_sec;
                  timespec_get(&v197, 1);
                  sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v45 + 1), (__int128 *)(v45 + 5), "[RLC] Large change in lux detected, delay reinitialization for %f seconds", 0x49uLL, v49, v50, v51, &v197);
                  std::mutex::lock(&stru_254A5A410);
                  v52 = qword_254A5A458;
                  for (j = unk_254A5A460; v52 != j; v52 += 40)
                  {
                    v54 = *(_QWORD *)(v52 + 32);
                    if (!v54)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v54 + 48))(v54, &object);
                  }
                  std::mutex::unlock(&stru_254A5A410);
                  if (v221 < 0)
                  {
                    operator delete(__p);
                    if ((v219 & 0x80000000) == 0)
                    {
LABEL_100:
                      if (!v217)
                      {
LABEL_168:
                        if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                          operator delete(v211[1]);
                        if (SHIBYTE(v211[0]) < 0)
                          operator delete((void *)object.__r_.__value_.__l.__size_);
                        if (v49)
                          free(v49);
                        goto LABEL_175;
                      }
LABEL_166:
                      if (v216 < 0)
                        operator delete(v215);
                      goto LABEL_168;
                    }
                  }
                  else if ((v219 & 0x80000000) == 0)
                  {
                    goto LABEL_100;
                  }
                  operator delete(v218);
                  if (!v217)
                    goto LABEL_168;
                  goto LABEL_166;
                }
              }
              else if (!a1[216])
              {
                goto LABEL_153;
              }
              v55 = *((double *)a1 + 26);
              v56 = *a3 == 7 && v55 - *((double *)a1 + 9) + *((double *)a1 + 10) < a9;
              if (v55 > a9 && !v56)
              {
                v57 = sub_210219C18();
                v58 = *((double *)a1 + 26);
                v59 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                {
                  __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DDD0);
                }
                v60 = v58 - a9;
                if (!atomic_load(&qword_254A5A450))
                {
LABEL_138:
                  if (os_signpost_enabled((os_log_t)*v57))
                  {
                    LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                    *(double *)((char *)object.__r_.__value_.__r.__words + 4) = v60;
LABEL_177:
                    _os_signpost_emit_unreliably_with_name_impl();
                  }
LABEL_178:
                  v88 = sub_210219C18();
                  v89 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                  if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                  {
                    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DDD0);
                  }
                  if (!atomic_load(&qword_254A5A450))
                  {
LABEL_198:
                    if (os_signpost_enabled((os_log_t)*v88))
                    {
                      LOWORD(object.__r_.__value_.__l.__data_) = 0;
                      goto LABEL_200;
                    }
                    return;
                  }
                  LOWORD(object.__r_.__value_.__l.__data_) = 0;
                  v91 = (char *)_os_log_send_and_compose_impl();
                  v92 = strlen(v91);
                  v197.tv_sec = 0;
                  pthread_threadid_np(0, (__uint64_t *)&v197);
                  v93 = v197.tv_sec;
                  timespec_get(&v197, 1);
                  sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v88 + 1), (__int128 *)(v88 + 5), "[RLC] Delayed updating re-initialization due to: Lux Change.", 0x3CuLL, v91, v92, v93, &v197);
                  std::mutex::lock(&stru_254A5A410);
                  v94 = qword_254A5A458;
                  for (k = unk_254A5A460; v94 != k; v94 += 40)
                  {
                    v96 = *(_QWORD *)(v94 + 32);
                    if (!v96)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v96 + 48))(v96, &object);
                  }
                  std::mutex::unlock(&stru_254A5A410);
                  if (v221 < 0)
                  {
                    operator delete(__p);
                    if ((v219 & 0x80000000) == 0)
                    {
LABEL_185:
                      if (!v217)
                      {
LABEL_191:
                        if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                          operator delete(v211[1]);
                        if (SHIBYTE(v211[0]) < 0)
                          operator delete((void *)object.__r_.__value_.__l.__size_);
                        if (v91)
                          free(v91);
                        goto LABEL_198;
                      }
LABEL_189:
                      if (v216 < 0)
                        operator delete(v215);
                      goto LABEL_191;
                    }
                  }
                  else if ((v219 & 0x80000000) == 0)
                  {
                    goto LABEL_185;
                  }
                  operator delete(v218);
                  if (!v217)
                    goto LABEL_191;
                  goto LABEL_189;
                }
                LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                *(double *)((char *)object.__r_.__value_.__r.__words + 4) = v60;
                v62 = (char *)_os_log_send_and_compose_impl();
                v63 = strlen(v62);
                v197.tv_sec = 0;
                pthread_threadid_np(0, (__uint64_t *)&v197);
                v64 = v197.tv_sec;
                timespec_get(&v197, 1);
                sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v57 + 1), (__int128 *)(v57 + 5), "[RLC] Seconds until reinit re-enabled: %f", 0x29uLL, v62, v63, v64, &v197);
                std::mutex::lock(&stru_254A5A410);
                v65 = qword_254A5A458;
                for (m = unk_254A5A460; v65 != m; v65 += 40)
                {
                  v67 = *(_QWORD *)(v65 + 32);
                  if (!v67)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v67 + 48))(v67, &object);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (v221 < 0)
                {
                  operator delete(__p);
                  if ((v219 & 0x80000000) == 0)
                  {
LABEL_115:
                    if (!v217)
                    {
LABEL_131:
                      if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                        operator delete(v211[1]);
                      if (SHIBYTE(v211[0]) < 0)
                        operator delete((void *)object.__r_.__value_.__l.__size_);
                      if (v62)
                        free(v62);
                      goto LABEL_138;
                    }
LABEL_129:
                    if (v216 < 0)
                      operator delete(v215);
                    goto LABEL_131;
                  }
                }
                else if ((v219 & 0x80000000) == 0)
                {
                  goto LABEL_115;
                }
                operator delete(v218);
                if (!v217)
                  goto LABEL_131;
                goto LABEL_129;
              }
              a1[232] = 1;
              a1[208] = 0;
              a1[216] = 0;
              *((double *)a1 + 28) = *((double *)a1 + 11) + a9;
              v68 = sub_210219C18();
              if (!a1[232])
                sub_20E866B34();
              v69 = v68;
              v70 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              if (!atomic_load(&qword_254A5A450))
              {
LABEL_151:
                if (os_signpost_enabled((os_log_t)*v69))
                {
                  v78 = *((_QWORD *)a1 + 28);
                  LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v78;
                  _os_signpost_emit_unreliably_with_name_impl();
                }
LABEL_153:
                if (a1[232] && *((double *)a1 + 28) < a9)
                {
                  v79 = sub_210219C18();
                  v80 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                  if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                  {
                    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DDD0);
                  }
                  if (!atomic_load(&qword_254A5A450))
                    goto LABEL_212;
                  LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                  *(double *)((char *)object.__r_.__value_.__r.__words + 4) = a9;
                  v82 = (char *)_os_log_send_and_compose_impl();
                  v83 = strlen(v82);
                  v197.tv_sec = 0;
                  pthread_threadid_np(0, (__uint64_t *)&v197);
                  v84 = v197.tv_sec;
                  timespec_get(&v197, 1);
                  sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v79 + 1), (__int128 *)(v79 + 5), "[RLC] Large lux change detector re-enabled @ %f", 0x2FuLL, v82, v83, v84, &v197);
                  std::mutex::lock(&stru_254A5A410);
                  v9 = (uint64_t *)qword_254A5A458;
                  for (n = (uint64_t *)unk_254A5A460; v9 != n; v9 += 5)
                  {
                    v86 = v9[4];
                    if (!v86)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v86 + 48))(v86, &object);
                  }
                  std::mutex::unlock(&stru_254A5A410);
                  if (v221 < 0)
                  {
                    operator delete(__p);
                    if ((v219 & 0x80000000) == 0)
                    {
LABEL_162:
                      if (!v217)
                      {
LABEL_205:
                        if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                          operator delete(v211[1]);
                        if (SHIBYTE(v211[0]) < 0)
                          operator delete((void *)object.__r_.__value_.__l.__size_);
                        if (v82)
                          free(v82);
LABEL_212:
                        if (os_signpost_enabled((os_log_t)*v79))
                        {
                          LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
                          *(double *)((char *)object.__r_.__value_.__r.__words + 4) = a9;
                          _os_signpost_emit_unreliably_with_name_impl();
                        }
                        a1[224] = 0;
                        a1[232] = 0;
                        goto LABEL_215;
                      }
LABEL_203:
                      if (v216 < 0)
                        operator delete(v215);
                      goto LABEL_205;
                    }
                  }
                  else if ((v219 & 0x80000000) == 0)
                  {
                    goto LABEL_162;
                  }
                  operator delete(v218);
                  if (!v217)
                    goto LABEL_205;
                  goto LABEL_203;
                }
LABEL_215:
                if (*a3 == 15)
                {
                  v97 = a1[203];
                  a1[197] = 9;
                  *(_DWORD *)(a1 + 198) = 0;
                  a1[202] = 0;
                  if (v97)
                  {
LABEL_217:
                    v98 = 1;
                    goto LABEL_397;
                  }
LABEL_233:
                  v98 = 1;
                  a1[203] = 1;
                  goto LABEL_397;
                }
                if (a3[4])
                {
                  v99 = a1[203];
                  a1[197] = 5;
                  *(_DWORD *)(a1 + 198) = 0;
                  a1[202] = 0;
                  if (!v99)
                    a1[203] = 1;
                  a1[205] = 1;
                  sub_20F10E724(&v205);
                  if (**(int **)(v205 + 56) <= 3)
                  {
                    v100 = *(unsigned __int8 *)(v205 + 72);
                    v101 = sub_20E8C31DC(v205, "OSLogSurrogateAppender", 1, 0);
                    v102 = v101 ? v101 + 16 : 0;
                    if (v100 || v101)
                    {
                      v197.tv_sec = (__darwin_time_t)&v205;
                      v197.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
                      rep = std::chrono::system_clock::now().__d_.__rep_;
                      v199 = 3;
                      v200 = "unknown file";
                      v201 = 209;
                      v203 = 0;
                      v204 = 0;
                      v202 = "unknown function";
                      v103 = *(_QWORD *)v197.tv_sec;
                      v104 = (uint64_t *)(*(_QWORD *)v197.tv_sec + 16);
                      if (*(char *)(*(_QWORD *)v197.tv_sec + 39) < 0)
                      {
                        v106 = *(char **)(v103 + 16);
                        v105 = *(_QWORD *)(v103 + 24);
                      }
                      else
                      {
                        v105 = *(unsigned __int8 *)(*(_QWORD *)v197.tv_sec + 39);
                        v106 = (char *)(*(_QWORD *)v197.tv_sec + 16);
                      }
                      category = v106;
                      v207 = v105;
                      v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)&object);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                        if (LOBYTE(v211[0]) && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(object.__r_.__value_.__l.__data_);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
                      v119 = byte_254A4A4F8[23];
                      if (byte_254A4A4F8[23] >= 0)
                      {
                        v120 = byte_254A4A4F8;
                      }
                      else
                      {
                        v119 = *(_QWORD *)&byte_254A4A4F8[8];
                        v120 = *(const char **)byte_254A4A4F8;
                      }
                      v208 = (uint64_t)v120;
                      v209 = v119;
                      object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v120, category);
                      sub_20E86E5A8(&object.__r_.__value_.__l.__size_, (uint64_t)&v208);
                      sub_20E86E5A8(&v212, (uint64_t)&category);
                      v121 = object.__r_.__value_.__r.__words[0];
                      sub_20E86E44C((uint64_t)&object);
                      sub_20F10EE40(v102, v104, v121, OS_LOG_TYPE_INFO);
                      if (v100)
                      {
                        sub_20E8C003C((uint64_t)&v197, "Re-initializing because the pose is out of space boundaries in moving slam");
                        sub_20E863570((uint64_t)&v197);
                      }
                      sub_20E863714((uint64_t)&v197);
                    }
                  }
                  v98 = a1[203];
                  if (!a1[203])
                    goto LABEL_407;
                  goto LABEL_397;
                }
                if (!a1[204])
                {
                  v110 = a1[203];
                  a1[197] = 6;
                  *(_DWORD *)(a1 + 198) = 0;
                  a1[202] = 0;
                  if (v110)
                    goto LABEL_217;
                  goto LABEL_233;
                }
                v107 = *((double *)a1 + 2);
                v108 = *((double *)a1 + 3);
                a1[193] = a3[1];
                if (a1[112])
                {
                  v109 = *((double *)a1 + 13);
                }
                else
                {
                  *((double *)a1 + 13) = a9;
                  a1[112] = 1;
                  v109 = a9;
                }
                LOBYTE(v111) = 0;
                v112 = a9 - v109;
                v113 = a3[16];
                if (!v113)
                {
                  v114 = 0;
                  goto LABEL_245;
                }
                v114 = 0;
                if (v112 < v107)
                  goto LABEL_245;
                v111 = sub_20F3E90F8(a3);
                v114 = BYTE6(v111);
                if ((BYTE6(v111)
                   || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 334, (uint64_t)"opt_reinit_reason", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))&& (v111 == 2|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 335, (uint64_t)"opt_reinit_reason->reason == ReasonForReinitialization::MovingPlatformHint", 74, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
                {
                  v9 = (uint64_t *)(v111 >> 8);
                  v113 = BYTE5(v111);
                  if (!BYTE5(v111))
                  {
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 336, (uint64_t)"opt_reinit_reason->is_platform_classified_as_movable_by_mpc", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      goto LABEL_272;
                    }
                    v113 = 0;
                  }
LABEL_245:
                  v115 = (unsigned __int16)v114;
                  if ((_WORD)v114)
                  {
                    v115 = ((v114 << 48) | ((unint64_t)v113 << 40) | ((unint64_t)v9 << 8)) >> 8;
                    v98 = 1;
                    goto LABEL_396;
                  }
                  v116 = *a1;
                  if (!*a1)
                    goto LABEL_289;
                  if (a3[2])
                  {
                    if (a1[160])
                      a1[160] = 0;
                    if (a3[3] && a1[176])
                    {
                      v117 = *((double *)a1 + 21);
                    }
                    else
                    {
                      *((double *)a1 + 21) = a9;
                      a1[176] = 1;
                      v117 = a9;
                    }
                    if (a9 - v117 >= *((double *)a1 + 7))
                    {
                      v115 = 0;
                      v116 = 2;
                      goto LABEL_279;
                    }
LABEL_275:
                    v115 = 0;
                    v116 = 0;
LABEL_279:
                    if (a1[272])
                    {
                      LODWORD(v115) = v115 ^ 1;
                      v115 = a1[1] ? v115 : 1;
                      if ((v115 & 1) == 0)
                      {
                        sub_20F10E724(&v205);
                        if (**(int **)(v205 + 56) <= 3)
                        {
                          v123 = *(unsigned __int8 *)(v205 + 72);
                          v124 = sub_20E8C31DC(v205, "OSLogSurrogateAppender", 1, 0);
                          v125 = v124;
                          if (v123 || v124)
                          {
                            v197.tv_sec = (__darwin_time_t)&v205;
                            v197.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
                            rep = std::chrono::system_clock::now().__d_.__rep_;
                            v199 = 3;
                            v200 = "unknown file";
                            v201 = 376;
                            v203 = 0;
                            v204 = 0;
                            v202 = "unknown function";
                            v126 = *(_QWORD *)v197.tv_sec;
                            if (*(char *)(*(_QWORD *)v197.tv_sec + 39) < 0)
                            {
                              v128 = *(const char **)(v126 + 16);
                              v127 = *(_QWORD *)(v126 + 24);
                            }
                            else
                            {
                              v127 = *(unsigned __int8 *)(*(_QWORD *)v197.tv_sec + 39);
                              v128 = (const char *)(*(_QWORD *)v197.tv_sec + 16);
                            }
                            v193 = *(_QWORD *)v197.tv_sec + 16;
                            v195 = *(_QWORD *)v197.tv_sec;
                            v196 = v16;
                            v131 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                            if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                            {
                              sub_20E9E46F8((uint64_t)&object);
                              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                              if (LOBYTE(v211[0]) && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(object.__r_.__value_.__l.__data_);
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A4A510);
                            }
                            if (byte_254A4A4F8[23] >= 0)
                              v132 = byte_254A4A4F8;
                            else
                              v132 = *(const char **)byte_254A4A4F8;
                            if (byte_254A4A4F8[23] >= 0)
                              v133 = byte_254A4A4F8[23];
                            else
                              v133 = *(_QWORD *)&byte_254A4A4F8[8];
                            object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v132, v128);
                            p_size = &object.__r_.__value_.__l.__size_;
                            if (v133 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v133 >= 0x17)
                            {
                              v135 = v125;
                              v136 = v128;
                              v137 = v123;
                              v138 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v133 | 7) != 0x17)
                                v138 = v133 | 7;
                              v139 = v138 + 1;
                              p_size = (std::string::size_type *)operator new(v138 + 1);
                              object.__r_.__value_.__r.__words[2] = v133;
                              v211[0] = (void *)(v139 | 0x8000000000000000);
                              object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                              v123 = v137;
                              v128 = v136;
                              v125 = v135;
                            }
                            else
                            {
                              HIBYTE(v211[0]) = v133;
                              if (!v133)
                              {
LABEL_328:
                                *((_BYTE *)p_size + v133) = 0;
                                LOBYTE(v211[1]) = 1;
                                v140 = &v212;
                                if (v127 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                v16 = v196;
                                if (v127 >= 0x17)
                                {
                                  v141 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v127 | 7) != 0x17)
                                    v141 = v127 | 7;
                                  v142 = v141 + 1;
                                  v140 = operator new(v141 + 1);
                                  v213 = v127;
                                  v214 = v142 | 0x8000000000000000;
                                  v212 = v140;
                                }
                                else
                                {
                                  HIBYTE(v214) = v127;
                                  if (!v127)
                                    goto LABEL_336;
                                }
                                memmove(v140, v128, v127);
LABEL_336:
                                *((_BYTE *)v140 + v127) = 0;
                                LOBYTE(v215) = 1;
                                v143 = object.__r_.__value_.__r.__words[0];
                                if (SHIBYTE(v214) < 0)
                                  operator delete(v212);
                                if (LOBYTE(v211[1]) && SHIBYTE(v211[0]) < 0)
                                  operator delete((void *)object.__r_.__value_.__l.__size_);
                                if (object.__r_.__value_.__r.__words[0])
                                  os_release(object.__r_.__value_.__l.__data_);
                                if (v125 && *(_QWORD *)(v125 + 24))
                                {
                                  v144 = _os_log_pack_size();
                                  v145 = (std::__shared_weak_count_vtbl *)operator new(v144, (std::align_val_t)8uLL);
                                  v146 = (std::__shared_weak_count *)operator new();
                                  v147 = v146;
                                  v146->__shared_owners_ = 0;
                                  p_shared_owners = (unint64_t *)&v146->__shared_owners_;
                                  v146->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                  v146->__shared_weak_owners_ = 0;
                                  v146[1].__vftable = v145;
                                  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
                                  object.__r_.__value_.__l.__size_ = (std::string::size_type)v145;
                                  object.__r_.__value_.__r.__words[2] = (std::string::size_type)v146;
                                  do
                                    v149 = __ldxr(p_shared_owners);
                                  while (__stxr(v149 + 1, p_shared_owners));
                                  v211[0] = 0;
                                  v211[1] = 0;
                                  v212 = 0;
                                  do
                                    v150 = __ldaxr(p_shared_owners);
                                  while (__stlxr(v150 - 1, p_shared_owners));
                                  if (!v150)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                    std::__shared_weak_count::__release_weak(v147);
                                  }
                                  v151 = object.__r_.__value_.__r.__words[0];
                                  *(_WORD *)_os_log_pack_fill() = 0;
                                  v152 = operator new();
                                  v153 = *(unsigned __int8 *)(v195 + 39);
                                  v154 = v193;
                                  if ((v153 & 0x80u) != 0)
                                  {
                                    v154 = *(_QWORD *)(v195 + 16);
                                    v153 = *(_QWORD *)(v195 + 24);
                                  }
                                  *(_QWORD *)v152 = v151;
                                  *(_OWORD *)(v152 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                  *(_OWORD *)(v152 + 24) = *(_OWORD *)v211;
                                  v211[0] = 0;
                                  v211[1] = 0;
                                  *(_QWORD *)(v152 + 40) = v154;
                                  *(_QWORD *)(v152 + 48) = v153;
                                  *(_BYTE *)(v152 + 56) = 1;
                                  category = 0;
                                  v208 = v152;
                                  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v125 + 24) + 40))(*(_QWORD *)(v125 + 24), &v208);
                                  v155 = v208;
                                  v208 = 0;
                                  if (v155)
                                  {
                                    v156 = *(std::__shared_weak_count **)(v155 + 32);
                                    if (v156)
                                    {
                                      v157 = (unint64_t *)&v156->__shared_owners_;
                                      do
                                        v158 = __ldaxr(v157);
                                      while (__stlxr(v158 - 1, v157));
                                      if (!v158)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                                        std::__shared_weak_count::__release_weak(v156);
                                      }
                                    }
                                    v159 = *(std::__shared_weak_count **)(v155 + 16);
                                    if (v159)
                                    {
                                      v160 = (unint64_t *)&v159->__shared_owners_;
                                      do
                                        v161 = __ldaxr(v160);
                                      while (__stlxr(v161 - 1, v160));
                                      if (!v161)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                                        std::__shared_weak_count::__release_weak(v159);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v155, 0x10F0C40B62ED6C6);
                                    v162 = category;
                                    category = 0;
                                    if (v162)
                                    {
                                      v163 = (std::__shared_weak_count *)*((_QWORD *)v162 + 4);
                                      if (v163)
                                      {
                                        v164 = (unint64_t *)&v163->__shared_owners_;
                                        do
                                          v165 = __ldaxr(v164);
                                        while (__stlxr(v165 - 1, v164));
                                        if (!v165)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                          std::__shared_weak_count::__release_weak(v163);
                                        }
                                      }
                                      v166 = (std::__shared_weak_count *)*((_QWORD *)v162 + 2);
                                      if (v166)
                                      {
                                        v167 = (unint64_t *)&v166->__shared_owners_;
                                        do
                                          v168 = __ldaxr(v167);
                                        while (__stlxr(v168 - 1, v167));
                                        if (!v168)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                          std::__shared_weak_count::__release_weak(v166);
                                        }
                                      }
                                      MEMORY[0x212BC6398](v162, 0x10F0C40B62ED6C6);
                                      v16 = v196;
                                    }
                                  }
                                  v169 = (std::__shared_weak_count *)v211[1];
                                  if (v211[1])
                                  {
                                    v170 = (unint64_t *)((char *)v211[1] + 8);
                                    do
                                      v171 = __ldaxr(v170);
                                    while (__stlxr(v171 - 1, v170));
                                    if (!v171)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                                      std::__shared_weak_count::__release_weak(v169);
                                    }
                                  }
                                  v172 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                  if (object.__r_.__value_.__r.__words[2])
                                  {
                                    v173 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                    do
                                      v174 = __ldaxr(v173);
                                    while (__stlxr(v174 - 1, v173));
                                    if (!v174)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                                      std::__shared_weak_count::__release_weak(v172);
                                    }
                                  }
                                }
                                else
                                {
                                  os_log_type_enabled(v143, OS_LOG_TYPE_INFO);
                                  LOWORD(object.__r_.__value_.__l.__data_) = 0;
                                  v175 = (void *)_os_log_send_and_compose_impl();
                                  if (v175)
                                    free(v175);
                                }
                                if (v123)
                                {
                                  sub_20E8C003C((uint64_t)&v197, "Immediate re-initialization due to Heuristics");
                                  sub_20E863570((uint64_t)&v197);
                                }
                                sub_20E863570((uint64_t)&v197);
                                v176 = v204;
                                if (v204)
                                {
                                  v177 = (unint64_t *)&v204->__shared_owners_;
                                  do
                                    v178 = __ldaxr(v177);
                                  while (__stlxr(v178 - 1, v177));
                                  if (!v178)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                                    std::__shared_weak_count::__release_weak(v176);
                                  }
                                }
                                goto LABEL_395;
                              }
                            }
                            memmove(p_size, v132, v133);
                            goto LABEL_328;
                          }
                        }
LABEL_395:
                        v179 = sub_20F3E90F8(a3);
                        v115 = (v179 >> 8) & 0xFFFFFFFFFFFFLL;
                        v98 = BYTE6(v179);
                        LOBYTE(v111) = v179;
                        goto LABEL_396;
                      }
                    }
LABEL_289:
                    v129 = *((double *)a1 + 2);
                    if (v112 >= v129)
                    {
                      if (v112 <= v107 + v108 || (a1[194] = 1, (v115 = a1[32]) != 0))
                      {
                        v115 = a1[272];
                        if (a1[272])
                        {
                          if (v116 != 1)
                          {
                            if (a1[193])
                            {
                              if (v116 == 2 || !*a1)
                              {
                                if (!a1[192])
                                  ++*((_DWORD *)a1 + 47);
                                a1[192] = 1;
                                if (!a1[128])
                                {
                                  *((double *)a1 + 15) = a9;
                                  a1[128] = 1;
                                }
                              }
                              v98 = 0;
                              LOBYTE(v111) = 0;
                              v115 = 0;
                              a1[136] = 0;
                              a1[144] = 0;
                            }
                            else
                            {
                              if (a1[144])
                              {
                                v130 = *((double *)a1 + 17);
                              }
                              else
                              {
                                *((double *)a1 + 13) = fmax(a9 - v129, 0.0);
                                a1[112] = 1;
                                *((double *)a1 + 17) = a9;
                                a1[144] = 1;
                                v130 = a9;
                              }
                              if (a9 - v130 >= *((double *)a1 + 5))
                              {
                                sub_20F10E724(&v205);
                                if (**(int **)(v205 + 56) <= 3)
                                {
                                  v181 = *(unsigned __int8 *)(v205 + 72);
                                  v182 = sub_20E8C31DC(v205, "OSLogSurrogateAppender", 1, 0);
                                  v183 = v182 ? v182 + 16 : 0;
                                  if (v181 || v182)
                                  {
                                    v197.tv_sec = (__darwin_time_t)&v205;
                                    v197.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
                                    rep = std::chrono::system_clock::now().__d_.__rep_;
                                    v199 = 3;
                                    v200 = "unknown file";
                                    v201 = 450;
                                    v203 = 0;
                                    v204 = 0;
                                    v202 = "unknown function";
                                    v184 = (uint64_t *)(v205 + 16);
                                    if (*(char *)(v205 + 39) < 0)
                                    {
                                      v186 = *(char **)(v205 + 16);
                                      v185 = *(_QWORD *)(v205 + 24);
                                    }
                                    else
                                    {
                                      v185 = *(unsigned __int8 *)(v205 + 39);
                                      v186 = (char *)(v205 + 16);
                                    }
                                    category = v186;
                                    v207 = v185;
                                    v187 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                    if ((v187 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                    {
                                      sub_20E9E46F8((uint64_t)&object);
                                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                                      if (LOBYTE(v211[0]) && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(object.__r_.__value_.__l.__data_);
                                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                      __cxa_guard_release(&qword_254A4A510);
                                    }
                                    v188 = byte_254A4A4F8[23];
                                    if (byte_254A4A4F8[23] >= 0)
                                    {
                                      v189 = byte_254A4A4F8;
                                    }
                                    else
                                    {
                                      v188 = *(_QWORD *)&byte_254A4A4F8[8];
                                      v189 = *(const char **)byte_254A4A4F8;
                                    }
                                    v208 = (uint64_t)v189;
                                    v209 = v188;
                                    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v189, category);
                                    sub_20E86E5A8(&object.__r_.__value_.__l.__size_, (uint64_t)&v208);
                                    sub_20E86E5A8(&v212, (uint64_t)&category);
                                    v190 = object.__r_.__value_.__r.__words[0];
                                    sub_20E86E44C((uint64_t)&object);
                                    sub_20F10F22C(v183, v184, v190, OS_LOG_TYPE_INFO);
                                    if (v181)
                                    {
                                      sub_20E8C003C((uint64_t)&v197, "Re-initializing due to Health");
                                      sub_20E863570((uint64_t)&v197);
                                    }
                                    sub_20E863714((uint64_t)&v197);
                                  }
                                }
                                v115 = 0;
                                LOBYTE(v111) = 8;
                                v98 = 1;
                              }
                              else
                              {
                                v98 = 0;
                                LOBYTE(v111) = 0;
                                v115 = 0;
                              }
                            }
LABEL_396:
                            v16[6] = v98;
                            *((_WORD *)v16 + 2) = v115 >> 24;
                            *(_DWORD *)v16 = v111 | ((_DWORD)v115 << 8);
                            if (!v98)
                            {
LABEL_407:
                              if (a1[274])
                              {
                                v180 = *((_DWORD *)a1 + 69) + 1;
                                *((_DWORD *)a1 + 69) = v180;
                                a1[192] = 0;
                                if (v180 > *((_DWORD *)a1 + 24))
                                {
                                  a1[274] = 0;
                                  *((_DWORD *)a1 + 69) = 0;
                                  if (!a1[273])
                                  {
                                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 231, (uint64_t)"InForcedFailure()", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                                    {
                                      abort();
                                    }
                                    v98 = a1[203];
                                  }
                                  a1[197] = 1;
                                  *(_DWORD *)(a1 + 198) = 0;
                                  a1[202] = 0;
                                  if (!v98)
                                    a1[203] = 1;
                                }
                              }
                              return;
                            }
LABEL_397:
                            *((_WORD *)a1 + 96) = 0;
                            a1[194] = 0;
                            if (a1[112])
                              a1[112] = 0;
                            if (a1[128])
                              a1[128] = 0;
                            if (a1[144])
                              a1[144] = 0;
                            if (a1[160])
                              a1[160] = 0;
                            if (a1[176])
                              a1[176] = 0;
                            goto LABEL_407;
                          }
                          goto LABEL_395;
                        }
                        if (!a1[192])
                          ++*((_DWORD *)a1 + 47);
                        a1[192] = 1;
                        v98 = a1[193];
                        if (!a1[193])
                        {
                          LOBYTE(v111) = 0;
                          goto LABEL_396;
                        }
                        v98 = a1[128];
                        if (!a1[128])
                        {
                          LOBYTE(v111) = 0;
                          *((double *)a1 + 15) = a9;
                          v115 = 1;
                          a1[128] = 1;
                          goto LABEL_396;
                        }
                      }
                    }
                    v98 = 0;
                    LOBYTE(v111) = 0;
                    goto LABEL_396;
                  }
                  if (a1[176])
                    a1[176] = 0;
                  if (!a1[160])
                  {
                    *((double *)a1 + 13) = fmax(a9 - *((double *)a1 + 2), 0.0);
                    a1[112] = 1;
                    *((double *)a1 + 19) = a9;
                    a1[160] = 1;
                  }
                  v122 = *a3;
                  if ((v122 - 11) >= 2)
                  {
                    if (v122 == 10)
                    {
                      if (a3[13]
                        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 281, (uint64_t)"!tracking_status.is_moving_platform_imu_camera_discrepancy", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_272;
                      }
                    }
                    else if (a9 - *((double *)a1 + 19) < *((double *)a1 + 6))
                    {
                      goto LABEL_275;
                    }
                  }
                  v115 = 1;
                  v116 = 1;
                  goto LABEL_279;
                }
LABEL_272:
                abort();
              }
              v72 = *((_QWORD *)a1 + 28);
              LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v72;
              v73 = (char *)_os_log_send_and_compose_impl();
              v74 = strlen(v73);
              v197.tv_sec = 0;
              pthread_threadid_np(0, (__uint64_t *)&v197);
              v75 = v197.tv_sec;
              timespec_get(&v197, 1);
              sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v69 + 1), (__int128 *)(v69 + 5), "[RLC] Delayed reinitialization feature disabled until timestamp: @ %f", 0x45uLL, v73, v74, v75, &v197);
              std::mutex::lock(&stru_254A5A410);
              v9 = (uint64_t *)qword_254A5A458;
              for (ii = (uint64_t *)unk_254A5A460; v9 != ii; v9 += 5)
              {
                v77 = v9[4];
                if (!v77)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v77 + 48))(v77, &object);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (v221 < 0)
              {
                operator delete(__p);
                if ((v219 & 0x80000000) == 0)
                {
LABEL_125:
                  if (!v217)
                  {
LABEL_144:
                    if ((_BYTE)v214 && SHIBYTE(v213) < 0)
                      operator delete(v211[1]);
                    if (SHIBYTE(v211[0]) < 0)
                      operator delete((void *)object.__r_.__value_.__l.__size_);
                    if (v73)
                      free(v73);
                    goto LABEL_151;
                  }
LABEL_142:
                  if (v216 < 0)
                    operator delete(v215);
                  goto LABEL_144;
                }
              }
              else if ((v219 & 0x80000000) == 0)
              {
                goto LABEL_125;
              }
              operator delete(v218);
              if (!v217)
                goto LABEL_144;
              goto LABEL_142;
            }
LABEL_71:
            if (v216 < 0)
              operator delete(v215);
            goto LABEL_73;
          }
        }
        else
        {
          v18 = v194;
          v16 = a1 + 197;
          v36 = &xmmword_2102EF000;
          if ((v219 & 0x80000000) == 0)
            goto LABEL_54;
        }
        operator delete(v218);
        if (!v217)
          goto LABEL_73;
        goto LABEL_71;
      }
    }
    v33 = (std::chrono::steady_clock::time_point *)qword_254A62178;
    if (!*(_BYTE *)(qword_254A62178 + 8))
      *(_BYTE *)(qword_254A62178 + 8) = 1;
    goto LABEL_47;
  }
  if (a1[33])
  {
    *(_WORD *)(a1 + 201) = 0;
    *(_DWORD *)v16 = 0;
    if (!v15)
      a1[203] = 1;
    return;
  }
  v24 = sub_210219C18();
  v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    v27 = (char *)_os_log_send_and_compose_impl();
    v28 = strlen(v27);
    v197.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v197);
    v29 = v197.tv_sec;
    timespec_get(&v197, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v24 + 1), (__int128 *)(v24 + 5), "[RLC] Delayed updating re-initialization due to: Force Reinitialization Failure.", 0x50uLL, v27, v28, v29, &v197);
    std::mutex::lock(&stru_254A5A410);
    v30 = qword_254A5A458;
    v31 = unk_254A5A460;
    while (v30 != v31)
    {
      v32 = *(_QWORD *)(v30 + 32);
      if (!v32)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 48))(v32, &object);
      v30 += 40;
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v221 < 0)
    {
      operator delete(__p);
      if ((v219 & 0x80000000) == 0)
      {
LABEL_40:
        if (!v217)
        {
LABEL_60:
          if ((_BYTE)v214 && SHIBYTE(v213) < 0)
            operator delete(v211[1]);
          if (SHIBYTE(v211[0]) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (v27)
            free(v27);
          goto LABEL_67;
        }
LABEL_58:
        if (v216 < 0)
          operator delete(v215);
        goto LABEL_60;
      }
    }
    else if ((v219 & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(v218);
    if (!v217)
      goto LABEL_60;
    goto LABEL_58;
  }
LABEL_67:
  if (os_signpost_enabled((os_log_t)*v24))
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
LABEL_200:
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20F10E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F10E360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F10E378(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A62150);
  _Unwind_Resume(a1);
}

void sub_20F10E390(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A62148);
  _Unwind_Resume(a1);
}

void sub_20F10E3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F10E528(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F10E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  sub_20E96E218((uint64_t)&a31);
  if (!v31)
    _Unwind_Resume(a1);
  free(v31);
  _Unwind_Resume(a1);
}

void sub_20F10E540()
{
  JUMPOUT(0x20F10E5CCLL);
}

void sub_20F10E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a63 < 0)
  {
    operator delete(__p);
    if ((a57 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a57 & 0x80000000) == 0)
  {
LABEL_3:
    if (!a51)
      goto LABEL_9;
LABEL_7:
    if (a50 < 0)
      operator delete(a45);
LABEL_9:
    if (a44 && a43 < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (v63)
      JUMPOUT(0x20F10E6DCLL);
    _Unwind_Resume(a1);
  }
  operator delete(a52);
  if (!a51)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F10E550(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F10E55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(a1);
  JUMPOUT(0x20F10E61CLL);
}

void sub_20F10E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  sub_20E96E218((uint64_t)&a31);
  if (!v31)
    JUMPOUT(0x20F10E70CLL);
  free(v31);
  _Unwind_Resume(a1);
}

void sub_20F10E570(_Unwind_Exception *a1)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(a1);
  free(v1);
  _Unwind_Resume(a1);
}

void sub_20F10E57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F10E598()
{
  JUMPOUT(0x20F10E6D8);
}

void sub_20F10E5A0()
{
  JUMPOUT(0x20F10E708);
}

void sub_20F10E5B0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E5C4);
}

void sub_20F10E5E0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E5F0);
}

void sub_20F10E600()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E610);
}

void sub_20F10E62C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E640);
}

void sub_20F10E650()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E664);
}

void sub_20F10E6EC()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F10E700);
}

void sub_20F10E724(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62160);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62160))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62158);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62160);
  }
  *a1 = qword_254A62158;
}

void sub_20F10E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62160);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62160);
  _Unwind_Resume(a1);
}

uint64_t sub_20F10E818(uint64_t a1)
{
  char v1;
  char v2;
  uint64_t result;
  char v4;
  char v5;

  v1 = *(_BYTE *)(a1 + 196);
  if ((v1 & 1) == 0)
  {
    *(_WORD *)(a1 + 192) = 0;
    *(_BYTE *)(a1 + 194) = 0;
    if (*(_BYTE *)(a1 + 112))
      *(_BYTE *)(a1 + 112) = 0;
    if (*(_BYTE *)(a1 + 128))
      *(_BYTE *)(a1 + 128) = 0;
    if (*(_BYTE *)(a1 + 144))
      *(_BYTE *)(a1 + 144) = 0;
    if (*(_BYTE *)(a1 + 160))
      *(_BYTE *)(a1 + 160) = 0;
    if (*(_BYTE *)(a1 + 176))
      *(_BYTE *)(a1 + 176) = 0;
  }
  if (*(_BYTE *)(a1 + 203))
    *(_BYTE *)(a1 + 203) = 0;
  v2 = *(_BYTE *)(a1 + 195);
  *(_WORD *)(a1 + 204) = 1;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  ++*(_DWORD *)(a1 + 184);
  if (*(_BYTE *)(a1 + 273))
    *(_BYTE *)(a1 + 206) = 1;
  result = *(_QWORD *)(a1 + 264);
  if (result)
  {
    v5 = v2 & 1;
    v4 = v1 & 1;
    return (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)result + 48))(result, &v5, &v4);
  }
  return result;
}

uint64_t sub_20F10E8EC(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  unsigned __int8 v4;
  int v5;
  int v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t result;
  int v15;
  __uint64_t v16[2];
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  ++*(_DWORD *)(a1 + 188);
  v2 = sub_210219C18();
  v3 = *(_DWORD *)(a1 + 188);
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v5 = v3 - 1;
  if (atomic_load(&qword_254A5A450))
  {
    v7 = *(_DWORD *)(a1 + 188);
    LODWORD(v17) = 67109376;
    HIDWORD(v17) = v3 - 1;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v7;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v10 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v2 + 1), (__int128 *)(v2 + 5), "Incrementing the number of recoveries from %u to %u", 0x33uLL, v8, v9, v10, v16);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(v18);
          if (v8)
            free(v8);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  result = os_signpost_enabled((os_log_t)*v2);
  if ((_DWORD)result)
  {
    v15 = *(_DWORD *)(a1 + 188);
    LODWORD(v17) = 67109376;
    HIDWORD(v17) = v5;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v15;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F10EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F10ECA0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F10EE34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

void sub_20F10EE40(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F10F1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10F208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F10F22C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F10F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F10F5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F10F618(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t i;
  unsigned __int8 v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float64x2_t v86;
  uint64_t v87;
  unsigned int v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  int8x16_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int8x16_t v97;
  float64x2_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t j;
  unsigned __int8 v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int8 v129;
  uint64_t k;
  uint64_t v131;
  unsigned __int8 v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int8x16_t v141;
  float64x2_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t m;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  uint64_t n;
  uint64_t v152;
  unsigned __int8 v153;
  unsigned int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  int v165;
  float64x2_t v166;
  unsigned int v167;
  uint64_t v169;
  int v170;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  float64x2_t v175;
  uint64_t v176;
  int v178;
  uint64_t v179;
  _QWORD v180[3];
  int v181;
  const char *v182;
  int v183;
  const char *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  void *__p[2];
  char v189;
  char v190;
  uint64_t v191;
  os_log_t v192;
  __int128 v193;
  __int128 v194;
  void **v195;
  size_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v3 = a3[1];
  if (*a3 != v3)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_DWORD *)v5;
    v7 = *(double *)(v5 + 8) + *(double *)(v5 + 16);
    v161 = a3[1];
    v165 = *(_DWORD *)v5;
    while (1)
    {
      v8 = *(_DWORD *)v4;
      sub_20F11127C(&v187);
      if (**(int **)(v187 + 56) <= 3)
      {
        v9 = *(unsigned __int8 *)(v187 + 72);
        v10 = *(_BYTE *)(v187 + 72) != 0;
        v11 = sub_20E8C31DC(v187, "OSLogSurrogateAppender", 1, 0);
        if (((v11 == 0) & ~v10) == 0)
          break;
      }
LABEL_91:
      v63 = *(_QWORD *)(a1 + 56);
      *((_QWORD *)&v193 + 1) = 0xBFF0000000000000;
      v64 = (_QWORD *)(v63 + 168 * v8);
      LOBYTE(v194) = 0;
      v195 = 0;
      v196 = 0;
      *((_QWORD *)&v194 + 1) = 0;
      LODWORD(v192) = v6;
      *(double *)&v193 = v7;
      sub_20F18C2DC(v64 + 5, (__int128 *)&v192);
      v66 = v64[2];
      v65 = v64[3];
      if (v66 != v65)
      {
        v67 = v65 - v66 - 256;
        v68 = v64[2];
        if (v67 < 0x100)
          goto LABEL_303;
        v69 = (v67 >> 8) + 1;
        v68 = v66 + ((v69 & 0x1FFFFFFFFFFFFFELL) << 8);
        v70 = (uint64_t *)(v66 + 488);
        v71 = v69 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v72 = *v70;
          *(v70 - 31) = *(v70 - 32);
          v70[1] = v72;
          v70 += 64;
          v71 -= 2;
        }
        while (v71);
        if (v69 != (v69 & 0x1FFFFFFFFFFFFFELL))
        {
LABEL_303:
          do
          {
            *(_QWORD *)(v68 + 240) = *(_QWORD *)(v68 + 232);
            v68 += 256;
          }
          while (v68 != v65);
        }
      }
      if (*((_QWORD *)&v194 + 1))
      {
        v195 = (void **)*((_QWORD *)&v194 + 1);
        operator delete(*((void **)&v194 + 1));
      }
      sub_20F16FC18(v64, v6, *(_QWORD *)(v4 + 32), (_QWORD *)(*(_QWORD *)(v4 + 8) + 24), 0);
      if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3)) >= 2)
      {
        sub_20F172D08(v64, *(_QWORD *)(v4 + 32) + 72, *(_QWORD *)(v4 + 8) + 464, v8);
        sub_20F16FC18(v64, v6, *(_QWORD *)(v4 + 32) + 72, (_QWORD *)(*(_QWORD *)(v4 + 8) + 464), 1u);
      }
      v4 += 104;
      if (v4 == v3)
        goto LABEL_106;
    }
    v178 = v9;
    v180[0] = &v187;
    v180[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v180[2] = std::chrono::system_clock::now().__d_.__rep_;
    v181 = 3;
    v182 = "unknown file";
    v183 = 151;
    v184 = "unknown function";
    v185 = 0;
    v186 = 0;
    v12 = *(_QWORD *)v180[0];
    v13 = (const char *)(*(_QWORD *)v180[0] + 16);
    v174 = v13;
    if (*(char *)(*(_QWORD *)v180[0] + 39) < 0)
    {
      v13 = *(const char **)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v180[0] + 39);
      v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (v190 && v189 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v161;
    }
LABEL_10:
    if (byte_254A4A4F8[23] >= 0)
      v17 = byte_254A4A4F8;
    else
      v17 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v18 = byte_254A4A4F8[23];
    else
      v18 = *(_QWORD *)&byte_254A4A4F8[8];
    v192 = os_log_create(v17, v13);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v18 >= 0x17)
    {
      v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v20 = v18 | 7;
      v21 = v20 + 1;
      v19 = (__int128 *)operator new(v20 + 1);
      *((_QWORD *)&v193 + 1) = v18;
      *(_QWORD *)&v194 = v21 | 0x8000000000000000;
      *(_QWORD *)&v193 = v19;
      v3 = v161;
    }
    else
    {
      BYTE7(v194) = v18;
      v19 = &v193;
      if (!v18)
      {
LABEL_24:
        *((_BYTE *)v19 + v18) = 0;
        BYTE8(v194) = 1;
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v14 >= 0x17)
        {
          v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v24 = v14 | 7;
          v25 = v24 + 1;
          v22 = (void **)operator new(v24 + 1);
          v196 = v14;
          v197 = v25 | 0x8000000000000000;
          v195 = v22;
        }
        else
        {
          HIBYTE(v197) = v14;
          v22 = (void **)&v195;
          if (!v14)
          {
            LOBYTE(v195) = 0;
            v198 = 1;
            v23 = v192;
            if ((SHIBYTE(v197) & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_34;
          }
        }
        memmove(v22, v13, v14);
        *((_BYTE *)v22 + v14) = 0;
        v198 = 1;
        v23 = v192;
        if ((SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_28:
          if (!BYTE8(v194))
            goto LABEL_37;
          goto LABEL_35;
        }
LABEL_34:
        operator delete(v195);
        if (!BYTE8(v194))
        {
LABEL_37:
          if (v192)
            os_release(v192);
          if (v11 && *(_QWORD *)(v11 + 24))
          {
            v26 = _os_log_pack_size();
            v27 = operator new(v26, (std::align_val_t)8uLL);
            v28 = (std::__shared_weak_count *)operator new();
            v29 = v28;
            v28->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
            v192 = v27;
            *(_QWORD *)&v193 = v27;
            *((_QWORD *)&v193 + 1) = v28;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            v194 = 0uLL;
            v195 = 0;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v29);
            }
            v33 = v192;
            v34 = _os_log_pack_fill();
            *(_DWORD *)v34 = 67109376;
            *(_DWORD *)(v34 + 4) = v8;
            *(_WORD *)(v34 + 8) = 2048;
            *(double *)(v34 + 10) = v7;
            v35 = (char *)operator new();
            v36 = *(unsigned __int8 *)(v12 + 39);
            v37 = v174;
            if ((v36 & 0x80u) != 0)
            {
              v37 = *(const char **)(v12 + 16);
              v36 = *(_QWORD *)(v12 + 24);
            }
            *(_QWORD *)v35 = v33;
            *(_OWORD *)(v35 + 8) = v193;
            v193 = 0uLL;
            *(_OWORD *)(v35 + 24) = v194;
            v194 = 0uLL;
            *((_QWORD *)v35 + 5) = v37;
            *((_QWORD *)v35 + 6) = v36;
            v35[56] = 1;
            v191 = 0;
            __p[0] = v35;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), __p);
            v38 = __p[0];
            __p[0] = 0;
            v6 = v165;
            if (v38)
            {
              v39 = (std::__shared_weak_count *)*((_QWORD *)v38 + 4);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = (std::__shared_weak_count *)*((_QWORD *)v38 + 2);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
              v45 = v191;
              v191 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
            v53 = v178;
            if (*((_QWORD *)&v194 + 1))
            {
              v54 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
            if (*((_QWORD *)&v193 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
            LODWORD(v192) = 67109376;
            HIDWORD(v192) = v8;
            LOWORD(v193) = 2048;
            *(double *)((char *)&v193 + 2) = v7;
            v59 = (void *)_os_log_send_and_compose_impl();
            v6 = v165;
            v53 = v178;
            if (v59)
              free(v59);
          }
          if (v53)
          {
            sub_20E8C003C((uint64_t)v180, "VSL starts to process feature sample of camera ID: %u, @%f", v8, v7);
            sub_20E863570((uint64_t)v180);
          }
          sub_20E863570((uint64_t)v180);
          v60 = v186;
          if (v186)
          {
            v61 = (unint64_t *)&v186->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          goto LABEL_91;
        }
LABEL_35:
        if (SBYTE7(v194) < 0)
          operator delete((void *)v193);
        goto LABEL_37;
      }
    }
    memmove(v19, v17, v18);
    goto LABEL_24;
  }
LABEL_106:
  v73 = a2[1] - *a2;
  if (v73)
  {
    v74 = 0;
    v169 = v73 >> 3;
    v175 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    do
    {
      v172 = v74 + 1;
      if (*(_QWORD *)(*(_QWORD *)(*a2 + 8 * v74) + 16)
         - *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v74) + 8) == 3328)
      {
        v75 = v172;
        v76 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v172 != v76)
        {
          do
          {
            v77 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v75) + 8);
            if ((v74 & 0xFFFF0000) != 0)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v78 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v79 = qword_254A6DE40;
                for (i = qword_254A6DE48; v79 != i; v79 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v79)(*(_QWORD *)(v79 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v81 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (!*(_BYTE *)(v77 + 1592))
              goto LABEL_113;
            if (*(_DWORD *)(v77 + 1584) != (_DWORD)v74 || *(_DWORD *)(v77 + 1588) != 1)
              goto LABEL_113;
            v83 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v75) + 8);
            if (*(_BYTE *)(v83 + 1536))
              v84 = v83 + 96;
            else
              v84 = 0;
            v85 = operator new();
            sub_20E972DB4(v85, v84);
            memcpy((void *)(v85 + 1000), (const void *)(v84 + 1000), 0x1B8uLL);
            v87 = *(_QWORD *)(*a3 + 104 * v75 + 32);
            v88 = *(_DWORD *)(v85 + 992);
            if (v88 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_298;
              }
              v88 = *(_DWORD *)(v85 + 992);
              if (v88 > 7)
                goto LABEL_138;
            }
            else if (v88 > 7)
            {
              goto LABEL_138;
            }
            if (!v88)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_21028A836, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_298:
              abort();
            }
LABEL_138:
            v86.f64[0] = *(float64_t *)(v87 + 64);
            v90 = *(float64x2_t *)(v87 + 32);
            v89 = *(float64x2_t *)(v87 + 48);
            v92 = *(int8x16_t *)v87;
            v91 = *(float64x2_t *)(v87 + 16);
            v93 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
            v94 = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
            v95 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
            v96 = vextq_s8(v92, v92, 8uLL).u64[0];
            v97 = (int8x16_t)vabdq_f64(*(float64x2_t *)v87, *(float64x2_t *)v85);
            v98 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v175, (float64x2_t)vextq_s8(v97, v97, 8uLL)), (int32x4_t)vcgeq_f64(v175, vabdq_f64(v91, *(float64x2_t *)(v85 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v175, vabdq_f64(v90, *(float64x2_t *)(v85 + 32))), (int32x4_t)vcgeq_f64(v175, vabdq_f64(v89,
                                                                                 *(float64x2_t *)(v85 + 48))))));
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v98)) & 1) != 0
              || (v98.f64[0] = *(float64_t *)(v85 + 64), vabdq_f64(v86, v98).f64[0] > 1.0e-10))
            {
              v92.i64[1] = v96;
              *(_QWORD *)&v91.f64[1] = v95;
              *(int8x16_t *)v85 = v92;
              *(float64x2_t *)(v85 + 16) = v91;
              *(_QWORD *)&v90.f64[1] = v94;
              *(float64_t *)(v85 + 64) = v86.f64[0];
              *(_QWORD *)&v89.f64[1] = v93;
              *(float64x2_t *)(v85 + 32) = v90;
              *(float64x2_t *)(v85 + 48) = v89;
              v99 = *(double *)v87 * *(double *)(v87 + 32);
              *(double *)(v85 + 72) = 1.0 / *(double *)v87;
              *(double *)(v85 + 80) = -*(double *)(v87 + 8) / v99;
              *(double *)(v85 + 88) = -(*(double *)(v87 + 32) * *(double *)(v87 + 16)
                                      - *(double *)(v87 + 8) * *(double *)(v87 + 40))
                                    / v99;
              *(_QWORD *)(v85 + 96) = 0;
              *(double *)(v85 + 104) = 1.0 / *(double *)(v87 + 32);
              *(double *)(v85 + 112) = -*(double *)(v87 + 40) / *(double *)(v87 + 32);
              *(_QWORD *)(v85 + 120) = 0;
              *(_QWORD *)(v85 + 128) = 0;
              *(_OWORD *)(v85 + 136) = xmmword_2102E3C70;
              *(_QWORD *)(v85 + 152) = 0x7FF8000000000000;
              *(_BYTE *)(v85 + 160) = 0;
            }
            v100 = *(_QWORD *)(a1 + 56);
            v101 = *(_QWORD *)(*a3 + 104 * v75 + 8);
            v180[0] = v75;
            if (v75 >= 0x10000
              && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v180[0]) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
            {
              abort();
            }
            sub_20F1733B4(v100 + 168 * v74, (_QWORD *)(v101 + 24), 0, v85, 0, v180);
            v192 = 0;
            v102 = *(_DWORD *)(v85 + 992);
            if (v102 == -1)
              goto LABEL_112;
            if (v102 > 7)
            {
              if (v102 > 0xB)
              {
                if (v102 >= 0xF)
                {
                  v103 = *(std::__shared_weak_count **)(v85 + 896);
                  if (v103)
                  {
                    v107 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v107);
                    while (__stlxr(v105 - 1, v107));
LABEL_168:
                    if (!v105)
                    {
                      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                      std::__shared_weak_count::__release_weak(v103);
                    }
                  }
                }
              }
              else if (v102 > 9)
              {
                if (v102 != 10)
                {
                  v103 = *(std::__shared_weak_count **)(v85 + 672);
                  if (v103)
                  {
                    v108 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v108);
                    while (__stlxr(v105 - 1, v108));
                    goto LABEL_168;
                  }
                }
              }
              else if (v102 == 9)
              {
                v103 = *(std::__shared_weak_count **)(v85 + 504);
                if (v103)
                {
                  v106 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v106);
                  while (__stlxr(v105 - 1, v106));
                  goto LABEL_168;
                }
              }
            }
            else if (v102 == 7)
            {
              v103 = *(std::__shared_weak_count **)(v85 + 480);
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                goto LABEL_168;
              }
            }
LABEL_112:
            MEMORY[0x212BC6398](v85, 0x1000C408CB30F5BLL);
LABEL_113:
            ++v75;
          }
          while (v75 != v76);
        }
      }
      ++v74;
    }
    while (v172 != v169);
    v109 = a2[1] - *a2;
    if (v109)
    {
      v110 = 0;
      v162 = v109 >> 3;
      v166 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      while (1)
      {
        v163 = v110 + 1;
        v111 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v110) + 16)
             - *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v110) + 8);
        if (v111)
          break;
LABEL_176:
        v110 = v163;
        if (v163 == (char *)v162)
          return;
      }
      v179 = 0;
      v167 = v110;
      v164 = 0x4EC4EC4EC4EC4EC5 * (v111 >> 7);
      v173 = v110 & 0xFFFF0000;
      v170 = (int)v110;
      while (1)
      {
        v112 = v163;
        v176 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v163 != v176)
          break;
LABEL_179:
        if (++v179 == v164)
          goto LABEL_176;
      }
      while (1)
      {
        v113 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v112) + 8);
        if (v173)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v114 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v115 = qword_254A6DE40;
            v116 = qword_254A6DE48;
            while (v115 != v116)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v115)(*(_QWORD *)(v115 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              v115 += 16;
            }
          }
          v117 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v179 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v118 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v119 = qword_254A6DE40;
            for (j = qword_254A6DE48; v119 != j; v119 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v119)(*(_QWORD *)(v119 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        if (!*(_BYTE *)(v113 + 1592))
          goto LABEL_183;
        if (*(_DWORD *)(v113 + 1584) != (_DWORD)v110 || *(_DWORD *)(v113 + 1588) != (_DWORD)v179)
          goto LABEL_183;
        v123 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v112) + 8);
        if (*(_BYTE *)(v123 + 1536))
          v124 = v123 + 96;
        else
          v124 = 0;
        v125 = operator new();
        sub_20E972DB4(v125, v124);
        memcpy((void *)(v125 + 1000), (const void *)(v124 + 1000), 0x1B8uLL);
        v192 = (os_log_t)v125;
        v127 = *(_QWORD *)(*a3 + 104 * v112 + 32);
        v128 = *(_DWORD *)(v125 + 992);
        if (v128 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0);
          v129 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v131 = qword_254A6DE40;
            for (k = qword_254A6DE48; v131 != k; v131 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v131)(*(_QWORD *)(v131 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21028A836, 0);
          }
          v132 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v110) = v170;
          if (!byte_254A6DE68)
            goto LABEL_294;
          qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21028A836, 0);
          v128 = *(_DWORD *)(v125 + 992);
          if (v128 > 7)
            goto LABEL_224;
        }
        else if (v128 > 7)
        {
          goto LABEL_224;
        }
        if (!v128)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_21028A836, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_294:
          abort();
        }
LABEL_224:
        v126.f64[0] = *(float64_t *)(v127 + 64);
        v134 = *(float64x2_t *)(v127 + 32);
        v133 = *(float64x2_t *)(v127 + 48);
        v136 = *(int8x16_t *)v127;
        v135 = *(float64x2_t *)(v127 + 16);
        v137 = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
        v138 = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
        v139 = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
        v140 = vextq_s8(v136, v136, 8uLL).u64[0];
        v141 = (int8x16_t)vabdq_f64(*(float64x2_t *)v127, *(float64x2_t *)v125);
        v142 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v166, (float64x2_t)vextq_s8(v141, v141, 8uLL)), (int32x4_t)vcgeq_f64(v166, vabdq_f64(v135, *(float64x2_t *)(v125 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v166, vabdq_f64(v134, *(float64x2_t *)(v125 + 32))), (int32x4_t)vcgeq_f64(v166, vabdq_f64(v133, *(float64x2_t *)(v125 + 48))))));
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v142)) & 1) != 0
          || (v142.f64[0] = *(float64_t *)(v125 + 64), vabdq_f64(v126, v142).f64[0] > 1.0e-10))
        {
          v136.i64[1] = v140;
          *(_QWORD *)&v135.f64[1] = v139;
          *(int8x16_t *)v125 = v136;
          *(float64x2_t *)(v125 + 16) = v135;
          *(_QWORD *)&v134.f64[1] = v138;
          *(float64_t *)(v125 + 64) = v126.f64[0];
          *(_QWORD *)&v133.f64[1] = v137;
          *(float64x2_t *)(v125 + 32) = v134;
          *(float64x2_t *)(v125 + 48) = v133;
          v143 = *(double *)v127 * *(double *)(v127 + 32);
          *(double *)(v125 + 72) = 1.0 / *(double *)v127;
          *(double *)(v125 + 80) = -*(double *)(v127 + 8) / v143;
          *(double *)(v125 + 88) = -(*(double *)(v127 + 32) * *(double *)(v127 + 16)
                                   - *(double *)(v127 + 8) * *(double *)(v127 + 40))
                                 / v143;
          *(_QWORD *)(v125 + 96) = 0;
          *(double *)(v125 + 104) = 1.0 / *(double *)(v127 + 32);
          *(double *)(v125 + 112) = -*(double *)(v127 + 40) / *(double *)(v127 + 32);
          *(_QWORD *)(v125 + 120) = 0;
          *(_QWORD *)(v125 + 128) = 0;
          *(_OWORD *)(v125 + 136) = xmmword_2102E3C70;
          *(_QWORD *)(v125 + 152) = 0x7FF8000000000000;
          *(_BYTE *)(v125 + 160) = 0;
        }
        v144 = *(_QWORD *)(a1 + 56);
        v145 = *(_QWORD *)(*a3 + 104 * v112 + 8);
        v180[0] = v112;
        if (v112 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v146 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v148 = qword_254A6DE40;
            for (m = qword_254A6DE48; v148 != m; v148 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v148)(*(_QWORD *)(v148 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v149 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v110) = v170;
          if (!byte_254A6DE68)
LABEL_292:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          if (HIDWORD(v180[0]) >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v150 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v152 = qword_254A6DE40;
              for (n = qword_254A6DE48; v152 != n; v152 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v152)(*(_QWORD *)(v152 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v153 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            LODWORD(v110) = v170;
            if (!byte_254A6DE68)
              goto LABEL_292;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        sub_20F1733B4(v144 + 168 * v167, (_QWORD *)(v145 + 24), v179, v125, 1, v180);
        v192 = 0;
        v154 = *(_DWORD *)(v125 + 992);
        if (v154 == -1)
          goto LABEL_182;
        if (v154 > 7)
        {
          if (v154 > 0xB)
          {
            if (v154 < 0xF)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 896);
            if (!v155)
              goto LABEL_182;
            v159 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v159);
            while (__stlxr(v157 - 1, v159));
          }
          else if (v154 > 9)
          {
            if (v154 == 10)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 672);
            if (!v155)
              goto LABEL_182;
            v160 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v160);
            while (__stlxr(v157 - 1, v160));
          }
          else
          {
            if (v154 != 9)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 504);
            if (!v155)
              goto LABEL_182;
            v158 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v158);
            while (__stlxr(v157 - 1, v158));
          }
        }
        else
        {
          if (v154 != 7)
            goto LABEL_182;
          v155 = *(std::__shared_weak_count **)(v125 + 480);
          if (!v155)
            goto LABEL_182;
          v156 = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
        }
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
LABEL_182:
        MEMORY[0x212BC6398](v125, 0x1000C408CB30F5BLL);
LABEL_183:
        if (++v112 == v176)
          goto LABEL_179;
      }
    }
  }
}

void sub_20F111084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F1110C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  sub_20E86E8C4(&a38);
  sub_20E86E8C4((uint64_t *)(v38 - 200));
  sub_20E86E658(v38 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F1110F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E86E658(v28 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F11110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  MEMORY[0x212BC6398](v28, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F111138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F11114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (*(char *)(v28 - 161) < 0)
    operator delete(*(void **)(v28 - 184));
  v30 = *(void **)(v28 - 192);
  if (v30)
    os_release(v30);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F1111C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = 0;
  sub_20E8E931C(v2 - 192, v1);
  _Unwind_Resume(a1);
}

void sub_20F111224()
{
  JUMPOUT(0x20F11122CLL);
}

void sub_20F111254(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = 0;
  sub_20E8E931C(v2 - 192, v1);
  _Unwind_Resume(a1);
}

void sub_20F11127C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62198);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62198))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62190);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62198);
  }
  *a1 = qword_254A62190;
}

void sub_20F111318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62198);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62198);
  _Unwind_Resume(a1);
}

void sub_20F111370(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t i;
  unsigned __int8 v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float64x2_t v86;
  uint64_t v87;
  unsigned int v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  int8x16_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int8x16_t v97;
  float64x2_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t j;
  unsigned __int8 v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int8 v129;
  uint64_t k;
  uint64_t v131;
  unsigned __int8 v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int8x16_t v141;
  float64x2_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t m;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int8 v150;
  uint64_t n;
  uint64_t v152;
  unsigned __int8 v153;
  unsigned int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  int v165;
  float64x2_t v166;
  unsigned int v167;
  uint64_t v169;
  int v170;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  float64x2_t v175;
  uint64_t v176;
  int v178;
  uint64_t v179;
  _QWORD v180[3];
  int v181;
  const char *v182;
  int v183;
  const char *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  void *__p[2];
  char v189;
  char v190;
  uint64_t v191;
  os_log_t v192;
  __int128 v193;
  __int128 v194;
  void **v195;
  size_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v3 = a3[1];
  if (*a3 != v3)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_DWORD *)v5;
    v7 = *(double *)(v5 + 8) + *(double *)(v5 + 16);
    v161 = a3[1];
    v165 = *(_DWORD *)v5;
    while (1)
    {
      v8 = *(_DWORD *)v4;
      sub_20F11127C(&v187);
      if (**(int **)(v187 + 56) <= 3)
      {
        v9 = *(unsigned __int8 *)(v187 + 72);
        v10 = *(_BYTE *)(v187 + 72) != 0;
        v11 = sub_20E8C31DC(v187, "OSLogSurrogateAppender", 1, 0);
        if (((v11 == 0) & ~v10) == 0)
          break;
      }
LABEL_91:
      v63 = *(_QWORD *)(a1 + 80);
      *((_QWORD *)&v193 + 1) = 0xBFF0000000000000;
      v64 = (_QWORD *)(v63 + 168 * v8);
      LOBYTE(v194) = 0;
      v195 = 0;
      v196 = 0;
      *((_QWORD *)&v194 + 1) = 0;
      LODWORD(v192) = v6;
      *(double *)&v193 = v7;
      sub_20F18C2DC(v64 + 5, (__int128 *)&v192);
      v66 = v64[2];
      v65 = v64[3];
      if (v66 != v65)
      {
        v67 = v65 - v66 - 256;
        v68 = v64[2];
        if (v67 < 0x100)
          goto LABEL_303;
        v69 = (v67 >> 8) + 1;
        v68 = v66 + ((v69 & 0x1FFFFFFFFFFFFFELL) << 8);
        v70 = (uint64_t *)(v66 + 488);
        v71 = v69 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v72 = *v70;
          *(v70 - 31) = *(v70 - 32);
          v70[1] = v72;
          v70 += 64;
          v71 -= 2;
        }
        while (v71);
        if (v69 != (v69 & 0x1FFFFFFFFFFFFFELL))
        {
LABEL_303:
          do
          {
            *(_QWORD *)(v68 + 240) = *(_QWORD *)(v68 + 232);
            v68 += 256;
          }
          while (v68 != v65);
        }
      }
      if (*((_QWORD *)&v194 + 1))
      {
        v195 = (void **)*((_QWORD *)&v194 + 1);
        operator delete(*((void **)&v194 + 1));
      }
      sub_20F17DF7C(v64, v6, *(_QWORD *)(v4 + 32), (uint64_t *)(*(_QWORD *)(v4 + 8) + 232), 0);
      if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3)) >= 2)
      {
        sub_20F18077C(v64, *(_QWORD *)(v4 + 32) + 72, *(_QWORD *)(v4 + 8) + 672, v8);
        sub_20F17DF7C(v64, v6, *(_QWORD *)(v4 + 32) + 72, (uint64_t *)(*(_QWORD *)(v4 + 8) + 672), 1u);
      }
      v4 += 104;
      if (v4 == v3)
        goto LABEL_106;
    }
    v178 = v9;
    v180[0] = &v187;
    v180[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v180[2] = std::chrono::system_clock::now().__d_.__rep_;
    v181 = 3;
    v182 = "unknown file";
    v183 = 151;
    v184 = "unknown function";
    v185 = 0;
    v186 = 0;
    v12 = *(_QWORD *)v180[0];
    v13 = (const char *)(*(_QWORD *)v180[0] + 16);
    v174 = v13;
    if (*(char *)(*(_QWORD *)v180[0] + 39) < 0)
    {
      v13 = *(const char **)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v180[0] + 39);
      v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (v190 && v189 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v3 = v161;
    }
LABEL_10:
    if (byte_254A4A4F8[23] >= 0)
      v17 = byte_254A4A4F8;
    else
      v17 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v18 = byte_254A4A4F8[23];
    else
      v18 = *(_QWORD *)&byte_254A4A4F8[8];
    v192 = os_log_create(v17, v13);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v18 >= 0x17)
    {
      v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v20 = v18 | 7;
      v21 = v20 + 1;
      v19 = (__int128 *)operator new(v20 + 1);
      *((_QWORD *)&v193 + 1) = v18;
      *(_QWORD *)&v194 = v21 | 0x8000000000000000;
      *(_QWORD *)&v193 = v19;
      v3 = v161;
    }
    else
    {
      BYTE7(v194) = v18;
      v19 = &v193;
      if (!v18)
      {
LABEL_24:
        *((_BYTE *)v19 + v18) = 0;
        BYTE8(v194) = 1;
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v14 >= 0x17)
        {
          v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v24 = v14 | 7;
          v25 = v24 + 1;
          v22 = (void **)operator new(v24 + 1);
          v196 = v14;
          v197 = v25 | 0x8000000000000000;
          v195 = v22;
        }
        else
        {
          HIBYTE(v197) = v14;
          v22 = (void **)&v195;
          if (!v14)
          {
            LOBYTE(v195) = 0;
            v198 = 1;
            v23 = v192;
            if ((SHIBYTE(v197) & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_34;
          }
        }
        memmove(v22, v13, v14);
        *((_BYTE *)v22 + v14) = 0;
        v198 = 1;
        v23 = v192;
        if ((SHIBYTE(v197) & 0x80000000) == 0)
        {
LABEL_28:
          if (!BYTE8(v194))
            goto LABEL_37;
          goto LABEL_35;
        }
LABEL_34:
        operator delete(v195);
        if (!BYTE8(v194))
        {
LABEL_37:
          if (v192)
            os_release(v192);
          if (v11 && *(_QWORD *)(v11 + 24))
          {
            v26 = _os_log_pack_size();
            v27 = operator new(v26, (std::align_val_t)8uLL);
            v28 = (std::__shared_weak_count *)operator new();
            v29 = v28;
            v28->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
            v192 = v27;
            *(_QWORD *)&v193 = v27;
            *((_QWORD *)&v193 + 1) = v28;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            v194 = 0uLL;
            v195 = 0;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v29);
            }
            v33 = v192;
            v34 = _os_log_pack_fill();
            *(_DWORD *)v34 = 67109376;
            *(_DWORD *)(v34 + 4) = v8;
            *(_WORD *)(v34 + 8) = 2048;
            *(double *)(v34 + 10) = v7;
            v35 = (char *)operator new();
            v36 = *(unsigned __int8 *)(v12 + 39);
            v37 = v174;
            if ((v36 & 0x80u) != 0)
            {
              v37 = *(const char **)(v12 + 16);
              v36 = *(_QWORD *)(v12 + 24);
            }
            *(_QWORD *)v35 = v33;
            *(_OWORD *)(v35 + 8) = v193;
            v193 = 0uLL;
            *(_OWORD *)(v35 + 24) = v194;
            v194 = 0uLL;
            *((_QWORD *)v35 + 5) = v37;
            *((_QWORD *)v35 + 6) = v36;
            v35[56] = 1;
            v191 = 0;
            __p[0] = v35;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), __p);
            v38 = __p[0];
            __p[0] = 0;
            v6 = v165;
            if (v38)
            {
              v39 = (std::__shared_weak_count *)*((_QWORD *)v38 + 4);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = (std::__shared_weak_count *)*((_QWORD *)v38 + 2);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
              v45 = v191;
              v191 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
            v53 = v178;
            if (*((_QWORD *)&v194 + 1))
            {
              v54 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
            if (*((_QWORD *)&v193 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
            LODWORD(v192) = 67109376;
            HIDWORD(v192) = v8;
            LOWORD(v193) = 2048;
            *(double *)((char *)&v193 + 2) = v7;
            v59 = (void *)_os_log_send_and_compose_impl();
            v6 = v165;
            v53 = v178;
            if (v59)
              free(v59);
          }
          if (v53)
          {
            sub_20E8C003C((uint64_t)v180, "VSL starts to process feature sample of camera ID: %u, @%f", v8, v7);
            sub_20E863570((uint64_t)v180);
          }
          sub_20E863570((uint64_t)v180);
          v60 = v186;
          if (v186)
          {
            v61 = (unint64_t *)&v186->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          goto LABEL_91;
        }
LABEL_35:
        if (SBYTE7(v194) < 0)
          operator delete((void *)v193);
        goto LABEL_37;
      }
    }
    memmove(v19, v17, v18);
    goto LABEL_24;
  }
LABEL_106:
  v73 = a2[1] - *a2;
  if (v73)
  {
    v74 = 0;
    v169 = v73 >> 3;
    v175 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    do
    {
      v172 = v74 + 1;
      if (*(_QWORD *)(*(_QWORD *)(*a2 + 8 * v74) + 16)
         - *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v74) + 8) == 3328)
      {
        v75 = v172;
        v76 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v172 != v76)
        {
          do
          {
            v77 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v75) + 8);
            if ((v74 & 0xFFFF0000) != 0)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v78 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v79 = qword_254A6DE40;
                for (i = qword_254A6DE48; v79 != i; v79 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v79)(*(_QWORD *)(v79 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v81 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (!*(_BYTE *)(v77 + 1592))
              goto LABEL_113;
            if (*(_DWORD *)(v77 + 1584) != (_DWORD)v74 || *(_DWORD *)(v77 + 1588) != 1)
              goto LABEL_113;
            v83 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v75) + 8);
            if (*(_BYTE *)(v83 + 1536))
              v84 = v83 + 96;
            else
              v84 = 0;
            v85 = operator new();
            sub_20E972DB4(v85, v84);
            memcpy((void *)(v85 + 1000), (const void *)(v84 + 1000), 0x1B8uLL);
            v87 = *(_QWORD *)(*a3 + 104 * v75 + 32);
            v88 = *(_DWORD *)(v85 + 992);
            if (v88 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_298;
              }
              v88 = *(_DWORD *)(v85 + 992);
              if (v88 > 7)
                goto LABEL_138;
            }
            else if (v88 > 7)
            {
              goto LABEL_138;
            }
            if (!v88)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_21028A836, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_298:
              abort();
            }
LABEL_138:
            v86.f64[0] = *(float64_t *)(v87 + 64);
            v90 = *(float64x2_t *)(v87 + 32);
            v89 = *(float64x2_t *)(v87 + 48);
            v92 = *(int8x16_t *)v87;
            v91 = *(float64x2_t *)(v87 + 16);
            v93 = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
            v94 = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
            v95 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
            v96 = vextq_s8(v92, v92, 8uLL).u64[0];
            v97 = (int8x16_t)vabdq_f64(*(float64x2_t *)v87, *(float64x2_t *)v85);
            v98 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v175, (float64x2_t)vextq_s8(v97, v97, 8uLL)), (int32x4_t)vcgeq_f64(v175, vabdq_f64(v91, *(float64x2_t *)(v85 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v175, vabdq_f64(v90, *(float64x2_t *)(v85 + 32))), (int32x4_t)vcgeq_f64(v175, vabdq_f64(v89,
                                                                                 *(float64x2_t *)(v85 + 48))))));
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v98)) & 1) != 0
              || (v98.f64[0] = *(float64_t *)(v85 + 64), vabdq_f64(v86, v98).f64[0] > 1.0e-10))
            {
              v92.i64[1] = v96;
              *(_QWORD *)&v91.f64[1] = v95;
              *(int8x16_t *)v85 = v92;
              *(float64x2_t *)(v85 + 16) = v91;
              *(_QWORD *)&v90.f64[1] = v94;
              *(float64_t *)(v85 + 64) = v86.f64[0];
              *(_QWORD *)&v89.f64[1] = v93;
              *(float64x2_t *)(v85 + 32) = v90;
              *(float64x2_t *)(v85 + 48) = v89;
              v99 = *(double *)v87 * *(double *)(v87 + 32);
              *(double *)(v85 + 72) = 1.0 / *(double *)v87;
              *(double *)(v85 + 80) = -*(double *)(v87 + 8) / v99;
              *(double *)(v85 + 88) = -(*(double *)(v87 + 32) * *(double *)(v87 + 16)
                                      - *(double *)(v87 + 8) * *(double *)(v87 + 40))
                                    / v99;
              *(_QWORD *)(v85 + 96) = 0;
              *(double *)(v85 + 104) = 1.0 / *(double *)(v87 + 32);
              *(double *)(v85 + 112) = -*(double *)(v87 + 40) / *(double *)(v87 + 32);
              *(_QWORD *)(v85 + 120) = 0;
              *(_QWORD *)(v85 + 128) = 0;
              *(_OWORD *)(v85 + 136) = xmmword_2102E3C70;
              *(_QWORD *)(v85 + 152) = 0x7FF8000000000000;
              *(_BYTE *)(v85 + 160) = 0;
            }
            v100 = *(_QWORD *)(a1 + 80);
            v101 = *(_QWORD *)(*a3 + 104 * v75 + 8);
            v180[0] = v75;
            if (v75 >= 0x10000
              && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v180[0]) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
            {
              abort();
            }
            sub_20F180E28(v100 + 168 * v74, (_QWORD *)(v101 + 232), 0, v85, 0, v180);
            v192 = 0;
            v102 = *(_DWORD *)(v85 + 992);
            if (v102 == -1)
              goto LABEL_112;
            if (v102 > 7)
            {
              if (v102 > 0xB)
              {
                if (v102 >= 0xF)
                {
                  v103 = *(std::__shared_weak_count **)(v85 + 896);
                  if (v103)
                  {
                    v107 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v107);
                    while (__stlxr(v105 - 1, v107));
LABEL_168:
                    if (!v105)
                    {
                      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                      std::__shared_weak_count::__release_weak(v103);
                    }
                  }
                }
              }
              else if (v102 > 9)
              {
                if (v102 != 10)
                {
                  v103 = *(std::__shared_weak_count **)(v85 + 672);
                  if (v103)
                  {
                    v108 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v108);
                    while (__stlxr(v105 - 1, v108));
                    goto LABEL_168;
                  }
                }
              }
              else if (v102 == 9)
              {
                v103 = *(std::__shared_weak_count **)(v85 + 504);
                if (v103)
                {
                  v106 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v106);
                  while (__stlxr(v105 - 1, v106));
                  goto LABEL_168;
                }
              }
            }
            else if (v102 == 7)
            {
              v103 = *(std::__shared_weak_count **)(v85 + 480);
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                goto LABEL_168;
              }
            }
LABEL_112:
            MEMORY[0x212BC6398](v85, 0x1000C408CB30F5BLL);
LABEL_113:
            ++v75;
          }
          while (v75 != v76);
        }
      }
      ++v74;
    }
    while (v172 != v169);
    v109 = a2[1] - *a2;
    if (v109)
    {
      v110 = 0;
      v162 = v109 >> 3;
      v166 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      while (1)
      {
        v163 = v110 + 1;
        v111 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v110) + 16)
             - *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v110) + 8);
        if (v111)
          break;
LABEL_176:
        v110 = v163;
        if (v163 == (char *)v162)
          return;
      }
      v179 = 0;
      v167 = v110;
      v164 = 0x4EC4EC4EC4EC4EC5 * (v111 >> 7);
      v173 = v110 & 0xFFFF0000;
      v170 = (int)v110;
      while (1)
      {
        v112 = v163;
        v176 = (uint64_t)(a2[1] - *a2) >> 3;
        if (v163 != v176)
          break;
LABEL_179:
        if (++v179 == v164)
          goto LABEL_176;
      }
      while (1)
      {
        v113 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v112) + 8);
        if (v173)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v114 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v115 = qword_254A6DE40;
            v116 = qword_254A6DE48;
            while (v115 != v116)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v115)(*(_QWORD *)(v115 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              v115 += 16;
            }
          }
          v117 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v179 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v118 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v119 = qword_254A6DE40;
            for (j = qword_254A6DE48; v119 != j; v119 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v119)(*(_QWORD *)(v119 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v121 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        if (!*(_BYTE *)(v113 + 1592))
          goto LABEL_183;
        if (*(_DWORD *)(v113 + 1584) != (_DWORD)v110 || *(_DWORD *)(v113 + 1588) != (_DWORD)v179)
          goto LABEL_183;
        v123 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v112) + 8);
        if (*(_BYTE *)(v123 + 1536))
          v124 = v123 + 96;
        else
          v124 = 0;
        v125 = operator new();
        sub_20E972DB4(v125, v124);
        memcpy((void *)(v125 + 1000), (const void *)(v124 + 1000), 0x1B8uLL);
        v192 = (os_log_t)v125;
        v127 = *(_QWORD *)(*a3 + 104 * v112 + 32);
        v128 = *(_DWORD *)(v125 + 992);
        if (v128 == -1)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0);
          v129 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v131 = qword_254A6DE40;
            for (k = qword_254A6DE48; v131 != k; v131 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v131)(*(_QWORD *)(v131 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21028A836, 0);
          }
          v132 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v132 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v110) = v170;
          if (!byte_254A6DE68)
            goto LABEL_294;
          qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_21028A836, 0);
          v128 = *(_DWORD *)(v125 + 992);
          if (v128 > 7)
            goto LABEL_224;
        }
        else if (v128 > 7)
        {
          goto LABEL_224;
        }
        if (!v128)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_21028A836, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_294:
          abort();
        }
LABEL_224:
        v126.f64[0] = *(float64_t *)(v127 + 64);
        v134 = *(float64x2_t *)(v127 + 32);
        v133 = *(float64x2_t *)(v127 + 48);
        v136 = *(int8x16_t *)v127;
        v135 = *(float64x2_t *)(v127 + 16);
        v137 = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
        v138 = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
        v139 = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
        v140 = vextq_s8(v136, v136, 8uLL).u64[0];
        v141 = (int8x16_t)vabdq_f64(*(float64x2_t *)v127, *(float64x2_t *)v125);
        v142 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v166, (float64x2_t)vextq_s8(v141, v141, 8uLL)), (int32x4_t)vcgeq_f64(v166, vabdq_f64(v135, *(float64x2_t *)(v125 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v166, vabdq_f64(v134, *(float64x2_t *)(v125 + 32))), (int32x4_t)vcgeq_f64(v166, vabdq_f64(v133, *(float64x2_t *)(v125 + 48))))));
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v142)) & 1) != 0
          || (v142.f64[0] = *(float64_t *)(v125 + 64), vabdq_f64(v126, v142).f64[0] > 1.0e-10))
        {
          v136.i64[1] = v140;
          *(_QWORD *)&v135.f64[1] = v139;
          *(int8x16_t *)v125 = v136;
          *(float64x2_t *)(v125 + 16) = v135;
          *(_QWORD *)&v134.f64[1] = v138;
          *(float64_t *)(v125 + 64) = v126.f64[0];
          *(_QWORD *)&v133.f64[1] = v137;
          *(float64x2_t *)(v125 + 32) = v134;
          *(float64x2_t *)(v125 + 48) = v133;
          v143 = *(double *)v127 * *(double *)(v127 + 32);
          *(double *)(v125 + 72) = 1.0 / *(double *)v127;
          *(double *)(v125 + 80) = -*(double *)(v127 + 8) / v143;
          *(double *)(v125 + 88) = -(*(double *)(v127 + 32) * *(double *)(v127 + 16)
                                   - *(double *)(v127 + 8) * *(double *)(v127 + 40))
                                 / v143;
          *(_QWORD *)(v125 + 96) = 0;
          *(double *)(v125 + 104) = 1.0 / *(double *)(v127 + 32);
          *(double *)(v125 + 112) = -*(double *)(v127 + 40) / *(double *)(v127 + 32);
          *(_QWORD *)(v125 + 120) = 0;
          *(_QWORD *)(v125 + 128) = 0;
          *(_OWORD *)(v125 + 136) = xmmword_2102E3C70;
          *(_QWORD *)(v125 + 152) = 0x7FF8000000000000;
          *(_BYTE *)(v125 + 160) = 0;
        }
        v144 = *(_QWORD *)(a1 + 80);
        v145 = *(_QWORD *)(*a3 + 104 * v112 + 8);
        v180[0] = v112;
        if (v112 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v146 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v148 = qword_254A6DE40;
            for (m = qword_254A6DE48; v148 != m; v148 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v148)(*(_QWORD *)(v148 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v149 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          LODWORD(v110) = v170;
          if (!byte_254A6DE68)
LABEL_292:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          if (HIDWORD(v180[0]) >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v150 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v152 = qword_254A6DE40;
              for (n = qword_254A6DE48; v152 != n; v152 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v152)(*(_QWORD *)(v152 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v153 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v153 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            LODWORD(v110) = v170;
            if (!byte_254A6DE68)
              goto LABEL_292;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        sub_20F180E28(v144 + 168 * v167, (_QWORD *)(v145 + 232), v179, v125, 1, v180);
        v192 = 0;
        v154 = *(_DWORD *)(v125 + 992);
        if (v154 == -1)
          goto LABEL_182;
        if (v154 > 7)
        {
          if (v154 > 0xB)
          {
            if (v154 < 0xF)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 896);
            if (!v155)
              goto LABEL_182;
            v159 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v159);
            while (__stlxr(v157 - 1, v159));
          }
          else if (v154 > 9)
          {
            if (v154 == 10)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 672);
            if (!v155)
              goto LABEL_182;
            v160 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v160);
            while (__stlxr(v157 - 1, v160));
          }
          else
          {
            if (v154 != 9)
              goto LABEL_182;
            v155 = *(std::__shared_weak_count **)(v125 + 504);
            if (!v155)
              goto LABEL_182;
            v158 = (unint64_t *)&v155->__shared_owners_;
            do
              v157 = __ldaxr(v158);
            while (__stlxr(v157 - 1, v158));
          }
        }
        else
        {
          if (v154 != 7)
            goto LABEL_182;
          v155 = *(std::__shared_weak_count **)(v125 + 480);
          if (!v155)
            goto LABEL_182;
          v156 = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
        }
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
LABEL_182:
        MEMORY[0x212BC6398](v125, 0x1000C408CB30F5BLL);
LABEL_183:
        if (++v112 == v176)
          goto LABEL_179;
      }
    }
  }
}

void sub_20F112DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a44)
  {
    if (a43 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  sub_20E86E8C4(&a38);
  sub_20E86E8C4((uint64_t *)(v38 - 200));
  sub_20E86E658(v38 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E86E658(v28 - 192);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  MEMORY[0x212BC6398](v28, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (*(char *)(v28 - 161) < 0)
    operator delete(*(void **)(v28 - 184));
  v30 = *(void **)(v28 - 192);
  if (v30)
    os_release(v30);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F112F20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = 0;
  sub_20E8E931C(v2 - 192, v1);
  _Unwind_Resume(a1);
}

void sub_20F112F7C()
{
  JUMPOUT(0x20F112F84);
}

void sub_20F112FAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = 0;
  sub_20E8E931C(v2 - 192, v1);
  _Unwind_Resume(a1);
}

void sub_20F112FD4(_QWORD *a1, uint64_t **a2, uint64_t a3, unint64_t a4, char a5, char a6, int a7, char a8)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v38;
  _OWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v55;
  __int128 v56;
  _OWORD *v58;
  double v60;
  double v61;
  double v62;
  double v63;
  int64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  char *v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *p_shared_owners;
  unint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  char *v100;
  _OWORD *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v118;
  __int128 v119;
  _OWORD *v121;
  double v123;
  double v124;
  double v125;
  double v126;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  char *v130;
  char *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t *v141;
  char v143;
  uint64_t **v144;
  _QWORD *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  void *__p;
  char *v154;
  __int128 v155;
  _QWORD *v156;

  v12 = a1;
  sub_20F09C7BC(a1, a4);
  *((_BYTE *)v12 + 48) = 1;
  v12[14] = a4;
  v12[15] = a3;
  v144 = a2;
  v145 = v12;
  v13 = (char *)a2[1] - (char *)*a2;
  v14 = v13 >> 3;
  v15 = v12[7];
  v16 = v12[8];
  v17 = 0xCF3CF3CF3CF3CF3DLL * ((v16 - v15) >> 3);
  v18 = (v13 >> 3) - v17;
  v143 = a8;
  if (v13 >> 3 <= v17)
  {
    if (v14 < v17)
    {
      v50 = v15 + 168 * v14;
      while (v16 != v50)
      {
        v16 -= 168;
        sub_20F114208((_QWORD *)v16);
      }
      goto LABEL_32;
    }
    v50 = v12[8];
    v51 = v12[7];
    v52 = *v144;
    v53 = v144[1];
    if (*v144 == v53 && v51 == v50)
      goto LABEL_71;
    while (1)
    {
LABEL_36:
      sub_20EB830D4(*v52, (uint64_t)&__p);
      sub_20F16E518(v51, (uint64_t **)&__p, a3, a4, a5, a6, a7, v60, v61, v62, v63, v64, v65, v66);
      v67 = (char *)__p;
      if (!__p)
        goto LABEL_69;
      v68 = v154;
      v69 = __p;
      if (v154 != __p)
        break;
LABEL_68:
      v154 = v67;
      operator delete(v69);
LABEL_69:
      ++v52;
      v51 += 168;
      if (v52 == v53 && v51 == v50)
        goto LABEL_71;
    }
    while (1)
    {
      v71 = *((_QWORD *)v68 - 1);
      v68 -= 8;
      v70 = v71;
      *(_QWORD *)v68 = 0;
      if (!v71)
        goto LABEL_40;
      v72 = *(_DWORD *)(v70 + 992);
      if (v72 != -1)
      {
        if (v72 > 7)
        {
          if (v72 > 0xB)
          {
            if (v72 >= 0xF)
            {
              v73 = *(std::__shared_weak_count **)(v70 + 896);
              if (v73)
              {
                p_shared_owners = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(p_shared_owners);
                while (__stlxr(v75 - 1, p_shared_owners));
LABEL_65:
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
            }
          }
          else if (v72 > 9)
          {
            if (v72 != 10)
            {
              v73 = *(std::__shared_weak_count **)(v70 + 672);
              if (v73)
              {
                v78 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v78);
                while (__stlxr(v75 - 1, v78));
                goto LABEL_65;
              }
            }
          }
          else if (v72 == 9)
          {
            v73 = *(std::__shared_weak_count **)(v70 + 504);
            if (v73)
            {
              v76 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v76);
              while (__stlxr(v75 - 1, v76));
              goto LABEL_65;
            }
          }
        }
        else if (v72 == 7)
        {
          v73 = *(std::__shared_weak_count **)(v70 + 480);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            goto LABEL_65;
          }
        }
      }
      MEMORY[0x212BC6398](v70, 0x1000C408CB30F5BLL);
LABEL_40:
      if (v68 == v67)
      {
        v69 = __p;
        goto LABEL_68;
      }
    }
  }
  v21 = v12[9];
  v20 = v12 + 9;
  v19 = v21;
  if (0xCF3CF3CF3CF3CF3DLL * ((v21 - v16) >> 3) < v18)
  {
    if ((unint64_t)v13 > 0xC30C30C30C30C30)
      sub_20E867F44();
    v22 = 0xCF3CF3CF3CF3CF3DLL * ((v19 - v15) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= v14)
      v23 = v14;
    if (v22 >= 0xC30C30C30C30C3)
      v24 = 0x186186186186186;
    else
      v24 = v23;
    v156 = v20;
    if (v24 > 0x186186186186186)
      goto LABEL_159;
    v25 = 168 * v24;
    v26 = (char *)operator new(168 * v24);
    v27 = 168 * v17;
    v28 = &v26[168 * v17];
    __p = v26;
    v154 = v28;
    v29 = &v26[v25];
    *((_QWORD *)&v155 + 1) = &v26[v25];
    v30 = 168 * v14;
    v31 = &v26[168 * v14];
    v32 = v30 - v27;
    v33 = 0uLL;
    __asm { FMOV            V1.2D, #-1.0 }
    v146 = _Q1;
    v38 = v28;
    do
    {
      *((_QWORD *)v38 + 20) = 0;
      *((_OWORD *)v38 + 8) = v33;
      *((_OWORD *)v38 + 9) = v33;
      *((_OWORD *)v38 + 6) = v33;
      *((_OWORD *)v38 + 7) = v33;
      *((_OWORD *)v38 + 4) = v33;
      *((_OWORD *)v38 + 5) = v33;
      *((_OWORD *)v38 + 2) = v33;
      *((_OWORD *)v38 + 3) = v33;
      *(_OWORD *)v38 = v33;
      *((_OWORD *)v38 + 1) = v33;
      v38[9] = 1;
      *((_DWORD *)v38 + 3) = 1;
      v39 = operator new(0x38uLL);
      *((_QWORD *)v38 + 6) = (char *)v39 + 56;
      *((_QWORD *)v38 + 7) = (char *)v39 + 56;
      v33 = 0uLL;
      *v39 = 0u;
      v39[1] = 0u;
      *(_DWORD *)v39 = -1;
      *(_OWORD *)((char *)v39 + 8) = v146;
      *((_QWORD *)v39 + 5) = 0;
      *((_QWORD *)v39 + 6) = 0;
      *((_QWORD *)v38 + 5) = v39;
      *((_OWORD *)v38 + 4) = 0u;
      *((_OWORD *)v38 + 5) = 0u;
      *((_OWORD *)v38 + 6) = 0u;
      v38[112] = 0;
      *(_OWORD *)(v38 + 120) = 0u;
      *(_OWORD *)(v38 + 136) = 0u;
      *(_OWORD *)(v38 + 152) = 0u;
      v38 += 168;
      *((_QWORD *)v39 + 4) = 0;
      v32 -= 168;
    }
    while (v32);
    *(_QWORD *)&v155 = v31;
    v40 = (char *)v145[7];
    v41 = (char *)v145[8];
    if (v41 == v40)
    {
      v145[7] = v28;
      v145[8] = v31;
      v145[9] = v29;
      v48 = v145;
      if (v41)
LABEL_18:
        operator delete(v41);
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = &v41[v42];
        v44 = &v28[v42];
        *(_OWORD *)(v44 - 168) = *(_OWORD *)&v41[v42 - 168];
        *((_QWORD *)v44 - 18) = 0;
        *((_QWORD *)v44 - 17) = 0;
        *((_QWORD *)v44 - 19) = 0;
        *(_OWORD *)(v44 - 152) = *(_OWORD *)&v41[v42 - 152];
        *((_QWORD *)v44 - 17) = *(_QWORD *)&v41[v42 - 136];
        *((_QWORD *)v43 - 19) = 0;
        *((_QWORD *)v43 - 18) = 0;
        *((_QWORD *)v43 - 17) = 0;
        *((_QWORD *)v44 - 16) = 0;
        *((_QWORD *)v44 - 15) = 0;
        *((_QWORD *)v44 - 14) = 0;
        *((_OWORD *)v44 - 8) = *(_OWORD *)&v41[v42 - 128];
        *((_QWORD *)v44 - 14) = *(_QWORD *)&v41[v42 - 112];
        *((_QWORD *)v43 - 16) = 0;
        *((_QWORD *)v43 - 15) = 0;
        v45 = *(_QWORD *)&v41[v42 - 104];
        *((_QWORD *)v43 - 14) = 0;
        *((_QWORD *)v43 - 13) = 0;
        *((_QWORD *)v44 - 13) = v45;
        v46 = *(_QWORD *)&v41[v42 - 96];
        *((_QWORD *)v43 - 12) = 0;
        *((_QWORD *)v44 - 12) = v46;
        v47 = *(_QWORD *)&v41[v42 - 88];
        *((_QWORD *)v43 - 11) = 0;
        *((_QWORD *)v44 - 11) = v47;
        *((_QWORD *)v44 - 10) = 0;
        *((_QWORD *)v44 - 9) = 0;
        *((_QWORD *)v44 - 8) = 0;
        *((_OWORD *)v44 - 5) = *(_OWORD *)&v41[v42 - 80];
        *((_QWORD *)v44 - 8) = *(_QWORD *)&v41[v42 - 64];
        *((_QWORD *)v43 - 9) = 0;
        *((_QWORD *)v43 - 8) = 0;
        LOBYTE(v47) = v41[v42 - 56];
        *((_QWORD *)v43 - 10) = 0;
        *(v44 - 56) = v47;
        *((_QWORD *)v44 - 5) = 0;
        *((_QWORD *)v44 - 4) = 0;
        *((_QWORD *)v44 - 6) = 0;
        *((_OWORD *)v44 - 3) = *(_OWORD *)&v41[v42 - 48];
        *((_QWORD *)v44 - 4) = *(_QWORD *)&v41[v42 - 32];
        *((_QWORD *)v43 - 6) = 0;
        *((_QWORD *)v43 - 5) = 0;
        *((_QWORD *)v43 - 4) = 0;
        *((_QWORD *)v44 - 3) = 0;
        *((_QWORD *)v44 - 2) = 0;
        *((_QWORD *)v44 - 1) = 0;
        *(_OWORD *)(v44 - 24) = *(_OWORD *)&v41[v42 - 24];
        *((_QWORD *)v44 - 1) = *(_QWORD *)&v41[v42 - 8];
        *((_QWORD *)v43 - 3) = 0;
        *((_QWORD *)v43 - 2) = 0;
        *((_QWORD *)v43 - 1) = 0;
        v42 -= 168;
      }
      while (&v41[v42] != v40);
      v48 = v145;
      v41 = (char *)v145[7];
      v49 = (char *)v145[8];
      v145[7] = &v28[v42];
      for (*((_OWORD *)v145 + 4) = v155; v49 != v41; v49 = (char *)sub_20F114208((_QWORD *)v49 - 21))
        ;
      if (v41)
        goto LABEL_18;
    }
    v51 = v48[7];
    v50 = v48[8];
    v52 = *v144;
    v53 = v144[1];
    if (*v144 != v53 || v51 != v50)
      goto LABEL_36;
    goto LABEL_71;
  }
  v50 = v16 + 168 * v18;
  v55 = 168 * v14 - 8 * ((v16 - v15) >> 3);
  v56 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  v147 = _Q1;
  do
  {
    *(_QWORD *)(v16 + 160) = 0;
    *(_OWORD *)(v16 + 128) = v56;
    *(_OWORD *)(v16 + 144) = v56;
    *(_OWORD *)(v16 + 96) = v56;
    *(_OWORD *)(v16 + 112) = v56;
    *(_OWORD *)(v16 + 64) = v56;
    *(_OWORD *)(v16 + 80) = v56;
    *(_OWORD *)(v16 + 32) = v56;
    *(_OWORD *)(v16 + 48) = v56;
    *(_OWORD *)v16 = v56;
    *(_OWORD *)(v16 + 16) = v56;
    *(_BYTE *)(v16 + 9) = 1;
    *(_DWORD *)(v16 + 12) = 1;
    v58 = operator new(0x38uLL);
    *(_QWORD *)(v16 + 40) = v58;
    *(_QWORD *)(v16 + 56) = (char *)v58 + 56;
    v56 = 0uLL;
    *v58 = 0u;
    v58[1] = 0u;
    *(_DWORD *)v58 = -1;
    *(_OWORD *)((char *)v58 + 8) = v147;
    *((_QWORD *)v58 + 5) = 0;
    *((_QWORD *)v58 + 6) = 0;
    *((_QWORD *)v58 + 4) = 0;
    *(_QWORD *)(v16 + 48) = (char *)v58 + 56;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_BYTE *)(v16 + 112) = 0;
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    v16 += 168;
    v55 -= 168;
  }
  while (v55);
  v12 = v145;
LABEL_32:
  v12[8] = v50;
  v51 = v12[7];
  v52 = *v144;
  v53 = v144[1];
  if (*v144 != v53 || v51 != v50)
    goto LABEL_36;
LABEL_71:
  if ((v143 & 1) == 0)
    goto LABEL_148;
  v79 = v145;
  v80 = (char *)v144[1] - (char *)*v144;
  v81 = v80 >> 3;
  v82 = v145[10];
  v83 = v145[11];
  v84 = 0xCF3CF3CF3CF3CF3DLL * ((v83 - v82) >> 3);
  v85 = (v80 >> 3) - v84;
  if (v80 >> 3 <= v84)
  {
    if (v80 >> 3 < v84)
    {
      v113 = v82 + 168 * v81;
      while (v83 != v113)
      {
        v83 -= 168;
        sub_20F114444((_QWORD *)v83);
      }
      goto LABEL_109;
    }
    v113 = v145[11];
    v112 = v145[10];
    v114 = *v144;
    v115 = v144[1];
    if (*v144 == v115 && v112 == v113)
      goto LABEL_148;
    while (1)
    {
LABEL_113:
      sub_20EB830D4(*v114, (uint64_t)&__p);
      sub_20F17CA3C(v112, (uint64_t **)&__p, a3, a4, a5, a6, a7, v123, v124, v125, v126, v127, v128, v129);
      v130 = (char *)__p;
      if (!__p)
        goto LABEL_146;
      v131 = v154;
      v132 = __p;
      if (v154 != __p)
        break;
LABEL_145:
      v154 = v130;
      operator delete(v132);
LABEL_146:
      ++v114;
      v112 += 168;
      if (v114 == v115 && v112 == v113)
        goto LABEL_148;
    }
    while (1)
    {
      v134 = *((_QWORD *)v131 - 1);
      v131 -= 8;
      v133 = v134;
      *(_QWORD *)v131 = 0;
      if (!v134)
        goto LABEL_117;
      v135 = *(_DWORD *)(v133 + 992);
      if (v135 != -1)
      {
        if (v135 > 7)
        {
          if (v135 > 0xB)
          {
            if (v135 >= 0xF)
            {
              v136 = *(std::__shared_weak_count **)(v133 + 896);
              if (v136)
              {
                v140 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v140);
                while (__stlxr(v138 - 1, v140));
LABEL_142:
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
            }
          }
          else if (v135 > 9)
          {
            if (v135 != 10)
            {
              v136 = *(std::__shared_weak_count **)(v133 + 672);
              if (v136)
              {
                v141 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v141);
                while (__stlxr(v138 - 1, v141));
                goto LABEL_142;
              }
            }
          }
          else if (v135 == 9)
          {
            v136 = *(std::__shared_weak_count **)(v133 + 504);
            if (v136)
            {
              v139 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldaxr(v139);
              while (__stlxr(v138 - 1, v139));
              goto LABEL_142;
            }
          }
        }
        else if (v135 == 7)
        {
          v136 = *(std::__shared_weak_count **)(v133 + 480);
          if (v136)
          {
            v137 = (unint64_t *)&v136->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            goto LABEL_142;
          }
        }
      }
      MEMORY[0x212BC6398](v133, 0x1000C408CB30F5BLL);
LABEL_117:
      if (v131 == v130)
      {
        v132 = __p;
        goto LABEL_145;
      }
    }
  }
  v86 = v145[12];
  if (0xCF3CF3CF3CF3CF3DLL * ((v86 - v83) >> 3) < v85)
  {
    if ((unint64_t)v80 > 0xC30C30C30C30C30)
      sub_20E867F44();
    v87 = 0xCF3CF3CF3CF3CF3DLL * ((v86 - v82) >> 3);
    v88 = 2 * v87;
    if (2 * v87 <= v81)
      v88 = v81;
    if (v87 >= 0xC30C30C30C30C3)
      v89 = 0x186186186186186;
    else
      v89 = v88;
    v156 = v145 + 12;
    if (v89 <= 0x186186186186186)
    {
      v90 = 168 * v89;
      v91 = (char *)operator new(168 * v89);
      v92 = 168 * v84;
      v93 = &v91[168 * v84];
      __p = v91;
      v154 = v93;
      v94 = &v91[v90];
      *((_QWORD *)&v155 + 1) = &v91[v90];
      v95 = 168 * v81;
      v96 = &v91[168 * v81];
      v97 = v95 - v92;
      v98 = 0uLL;
      __asm { FMOV            V1.2D, #-1.0 }
      v148 = _Q1;
      v100 = v93;
      do
      {
        *((_QWORD *)v100 + 20) = 0;
        *((_OWORD *)v100 + 8) = v98;
        *((_OWORD *)v100 + 9) = v98;
        *((_OWORD *)v100 + 6) = v98;
        *((_OWORD *)v100 + 7) = v98;
        *((_OWORD *)v100 + 4) = v98;
        *((_OWORD *)v100 + 5) = v98;
        *((_OWORD *)v100 + 2) = v98;
        *((_OWORD *)v100 + 3) = v98;
        *(_OWORD *)v100 = v98;
        *((_OWORD *)v100 + 1) = v98;
        v100[9] = 1;
        *((_DWORD *)v100 + 3) = 1;
        v101 = operator new(0x38uLL);
        *((_QWORD *)v100 + 6) = (char *)v101 + 56;
        *((_QWORD *)v100 + 7) = (char *)v101 + 56;
        v98 = 0uLL;
        *v101 = 0u;
        v101[1] = 0u;
        *(_DWORD *)v101 = -1;
        *(_OWORD *)((char *)v101 + 8) = v148;
        *((_QWORD *)v101 + 5) = 0;
        *((_QWORD *)v101 + 6) = 0;
        *((_QWORD *)v100 + 5) = v101;
        *((_OWORD *)v100 + 4) = 0u;
        *((_OWORD *)v100 + 5) = 0u;
        *((_OWORD *)v100 + 6) = 0u;
        v100[112] = 0;
        *(_OWORD *)(v100 + 120) = 0u;
        *(_OWORD *)(v100 + 136) = 0u;
        *(_OWORD *)(v100 + 152) = 0u;
        v100 += 168;
        *((_QWORD *)v101 + 4) = 0;
        v97 -= 168;
      }
      while (v97);
      *(_QWORD *)&v155 = v96;
      v102 = (char *)v145[10];
      v103 = (char *)v145[11];
      if (v103 == v102)
      {
        v145[10] = v93;
        v145[11] = v96;
        v145[12] = v94;
        v110 = v145;
        if (v103)
LABEL_89:
          operator delete(v103);
      }
      else
      {
        v104 = 0;
        do
        {
          v105 = &v103[v104];
          v106 = &v93[v104];
          *(_OWORD *)(v106 - 168) = *(_OWORD *)&v103[v104 - 168];
          *((_QWORD *)v106 - 18) = 0;
          *((_QWORD *)v106 - 17) = 0;
          *((_QWORD *)v106 - 19) = 0;
          *(_OWORD *)(v106 - 152) = *(_OWORD *)&v103[v104 - 152];
          *((_QWORD *)v106 - 17) = *(_QWORD *)&v103[v104 - 136];
          *((_QWORD *)v105 - 19) = 0;
          *((_QWORD *)v105 - 18) = 0;
          *((_QWORD *)v105 - 17) = 0;
          *((_QWORD *)v106 - 16) = 0;
          *((_QWORD *)v106 - 15) = 0;
          *((_QWORD *)v106 - 14) = 0;
          *((_OWORD *)v106 - 8) = *(_OWORD *)&v103[v104 - 128];
          *((_QWORD *)v106 - 14) = *(_QWORD *)&v103[v104 - 112];
          *((_QWORD *)v105 - 16) = 0;
          *((_QWORD *)v105 - 15) = 0;
          v107 = *(_QWORD *)&v103[v104 - 104];
          *((_QWORD *)v105 - 14) = 0;
          *((_QWORD *)v105 - 13) = 0;
          *((_QWORD *)v106 - 13) = v107;
          v108 = *(_QWORD *)&v103[v104 - 96];
          *((_QWORD *)v105 - 12) = 0;
          *((_QWORD *)v106 - 12) = v108;
          v109 = *(_QWORD *)&v103[v104 - 88];
          *((_QWORD *)v105 - 11) = 0;
          *((_QWORD *)v106 - 11) = v109;
          *((_QWORD *)v106 - 10) = 0;
          *((_QWORD *)v106 - 9) = 0;
          *((_QWORD *)v106 - 8) = 0;
          *((_OWORD *)v106 - 5) = *(_OWORD *)&v103[v104 - 80];
          *((_QWORD *)v106 - 8) = *(_QWORD *)&v103[v104 - 64];
          *((_QWORD *)v105 - 9) = 0;
          *((_QWORD *)v105 - 8) = 0;
          LOBYTE(v109) = v103[v104 - 56];
          *((_QWORD *)v105 - 10) = 0;
          *(v106 - 56) = v109;
          *((_QWORD *)v106 - 5) = 0;
          *((_QWORD *)v106 - 4) = 0;
          *((_QWORD *)v106 - 6) = 0;
          *((_OWORD *)v106 - 3) = *(_OWORD *)&v103[v104 - 48];
          *((_QWORD *)v106 - 4) = *(_QWORD *)&v103[v104 - 32];
          *((_QWORD *)v105 - 6) = 0;
          *((_QWORD *)v105 - 5) = 0;
          *((_QWORD *)v105 - 4) = 0;
          *((_QWORD *)v106 - 3) = 0;
          *((_QWORD *)v106 - 2) = 0;
          *((_QWORD *)v106 - 1) = 0;
          *(_OWORD *)(v106 - 24) = *(_OWORD *)&v103[v104 - 24];
          *((_QWORD *)v106 - 1) = *(_QWORD *)&v103[v104 - 8];
          *((_QWORD *)v105 - 3) = 0;
          *((_QWORD *)v105 - 2) = 0;
          *((_QWORD *)v105 - 1) = 0;
          v104 -= 168;
        }
        while (&v103[v104] != v102);
        v110 = v145;
        v103 = (char *)v145[10];
        v111 = (char *)v145[11];
        v145[10] = &v93[v104];
        for (*(_OWORD *)(v145 + 11) = v155; v111 != v103; v111 = (char *)sub_20F114444((_QWORD *)v111 - 21))
          ;
        if (v103)
          goto LABEL_89;
      }
      v112 = v110[10];
      v113 = v110[11];
      v114 = *v144;
      v115 = v144[1];
      if (*v144 != v115 || v112 != v113)
        goto LABEL_113;
      goto LABEL_148;
    }
LABEL_159:
    sub_20E877A38();
  }
  v113 = v83 + 168 * v85;
  v118 = 168 * v81 - 8 * ((v83 - v82) >> 3);
  v119 = 0uLL;
  __asm { FMOV            V1.2D, #-1.0 }
  v149 = _Q1;
  do
  {
    *(_QWORD *)(v83 + 160) = 0;
    *(_OWORD *)(v83 + 128) = v119;
    *(_OWORD *)(v83 + 144) = v119;
    *(_OWORD *)(v83 + 96) = v119;
    *(_OWORD *)(v83 + 112) = v119;
    *(_OWORD *)(v83 + 64) = v119;
    *(_OWORD *)(v83 + 80) = v119;
    *(_OWORD *)(v83 + 32) = v119;
    *(_OWORD *)(v83 + 48) = v119;
    *(_OWORD *)v83 = v119;
    *(_OWORD *)(v83 + 16) = v119;
    *(_BYTE *)(v83 + 9) = 1;
    *(_DWORD *)(v83 + 12) = 1;
    v121 = operator new(0x38uLL);
    *(_QWORD *)(v83 + 40) = v121;
    *(_QWORD *)(v83 + 56) = (char *)v121 + 56;
    v119 = 0uLL;
    *v121 = 0u;
    v121[1] = 0u;
    *(_DWORD *)v121 = -1;
    *(_OWORD *)((char *)v121 + 8) = v149;
    *((_QWORD *)v121 + 5) = 0;
    *((_QWORD *)v121 + 6) = 0;
    *((_QWORD *)v121 + 4) = 0;
    *(_QWORD *)(v83 + 48) = (char *)v121 + 56;
    *(_OWORD *)(v83 + 64) = 0u;
    *(_OWORD *)(v83 + 80) = 0u;
    *(_OWORD *)(v83 + 96) = 0u;
    *(_BYTE *)(v83 + 112) = 0;
    *(_OWORD *)(v83 + 120) = 0u;
    *(_OWORD *)(v83 + 136) = 0u;
    *(_OWORD *)(v83 + 152) = 0u;
    v83 += 168;
    v118 -= 168;
  }
  while (v118);
  v79 = v145;
LABEL_109:
  v79[11] = v113;
  v112 = v79[10];
  v114 = *v144;
  v115 = v144[1];
  if (*v144 != v115 || v112 != v113)
    goto LABEL_113;
LABEL_148:
  *((_BYTE *)v145 + 104) = 1;
}

void sub_20F113B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  *(_QWORD *)(a12 + 88) = v12;
  _Unwind_Resume(a1);
}

void sub_20F113B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20F1142E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F113B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *__p, uint64_t *a19, uint64_t a20)
{
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v24;

  if (__p)
  {
    v21 = __p;
    if (a19 != __p)
    {
      v22 = a19 - 1;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          sub_20E8E931C((uint64_t)v22, v24);
      }
      while (v22-- != __p);
      v21 = __p;
    }
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F113C18(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *a3;
  if (*a3 == a3[1])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 69, (uint64_t)"!camera_feature_samples.empty()", 31, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_11;
    }
    v9 = *(_QWORD *)(*a3 + 8);
    if (v9 != *(_QWORD *)(*a3 + 16))
      goto LABEL_8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9 != *(_QWORD *)(v8 + 16))
      goto LABEL_8;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 70, (uint64_t)"!camera_feature_samples.front().feature_samples.empty()", 55, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_11:
    abort();
  }
  v9 = *(_QWORD *)(*a3 + 8);
LABEL_8:
  sub_20F09C64C(a1, *(_DWORD *)v9, a4, *(double *)(v9 + 8) + *(double *)(v9 + 16), *(double *)(v9 + 8));
  sub_20F10F618((uint64_t)a1, a2, a3);
  if (a1[11] != a1[10])
    sub_20F111370((uint64_t)a1, a2, a3);
}

void sub_20F113D38(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[7];
  v3 = (_QWORD *)a1[8];
  if (v2 != v3)
  {
    while ((sub_20F1739E4(v2) & 1) != 0
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 113, (uint64_t)"window.CollapsePreviousFrame()", 30, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
    {
      v2 += 21;
      if (v2 == v3)
        goto LABEL_7;
    }
LABEL_12:
    abort();
  }
LABEL_7:
  v4 = (_QWORD *)a1[10];
  v5 = (_QWORD *)a1[11];
  if (v4 != v5)
  {
    while ((sub_20F18146C(v4) & 1) != 0
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 113, (uint64_t)"window.CollapsePreviousFrame()", 30, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
    {
      v4 += 21;
      if (v4 == v5)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_20F09DBF8(a1);
}

void sub_20F113E50(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[7];
  v3 = (_QWORD *)a1[8];
  if (v2 != v3)
  {
    while ((sub_20F174F70(v2) & 1) != 0
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 118, (uint64_t)"window.CollapseLatestFrame()", 28, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
    {
      v2 += 21;
      if (v2 == v3)
        goto LABEL_7;
    }
LABEL_12:
    abort();
  }
LABEL_7:
  v4 = (_QWORD *)a1[10];
  v5 = (_QWORD *)a1[11];
  if (v4 != v5)
  {
    while ((sub_20F182CAC(v4) & 1) != 0
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/SlidingWindow.cpp", 118, (uint64_t)"window.CollapseLatestFrame()", 28, (uint64_t)&unk_21028A836, 0, (void (*)(void **))sub_21023DDB0))
    {
      v4 += 21;
      if (v4 == v5)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_20F09DF74(a1);
}

unint64_t sub_20F113F68(unint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(result + 56);
  for (i = *(_QWORD *)(result + 64); v1 != i; v1 += 168)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    v5 = v4 - v3;
    if (v4 != v3)
    {
      v6 = 0;
      v7 = v5 >> 8;
      do
      {
        v8 = v3 + (v6 << 8);
        v9 = *(uint64_t **)(v8 + 48);
        v10 = *(uint64_t **)(v8 + 56);
        while (v9 != v10)
        {
          v11 = *v9;
          if (*v9)
          {
            v12 = *(_QWORD *)(v11 + 64);
            if ((int)v12 >= 2
              && !*(_BYTE *)(*(_QWORD *)(v11 + 72)
                           + (unint64_t)(v12 + *(_QWORD *)(v11 + 96) - 1)
                           % (*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72))))
            {
              *(_DWORD *)v11 = -1;
            }
          }
          ++v9;
        }
        ++v6;
      }
      while (v6 != v7);
    }
  }
  v13 = *(_QWORD *)(result + 80);
  for (j = *(_QWORD *)(result + 88); v13 != j; v13 += 168)
  {
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v17 = v16 - v15;
    if (v16 != v15)
    {
      v18 = 0;
      v19 = v17 >> 8;
      do
      {
        v20 = v15 + (v18 << 8);
        v21 = *(uint64_t **)(v20 + 48);
        v22 = *(uint64_t **)(v20 + 56);
        while (v21 != v22)
        {
          v23 = *v21;
          if (*v21)
          {
            v24 = *(_QWORD *)(v23 + 80);
            if ((int)v24 >= 2)
            {
              v25 = *(_QWORD *)(v23 + 88);
              result = *(_QWORD *)(v23 + 96) - v25;
              if (!*(_BYTE *)(v25 + (v24 + *(_QWORD *)(v23 + 112) - 1) % result))
                *(_DWORD *)v23 = -1;
            }
          }
          ++v21;
        }
        ++v18;
      }
      while (v18 != v19);
    }
  }
  return result;
}

uint64_t sub_20F1140A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    sub_20F114208((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20F1140F4(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[21];
  if (v4)
  {
    a1[22] = (uint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = (uint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = (uint64_t)v7;
    operator delete(v7);
  }
  v8 = (void *)a1[9];
  if (v8)
  {
    a1[10] = (uint64_t)v8;
    operator delete(v8);
  }
  v9 = (void *)a1[6];
  if (v9)
  {
    a1[7] = (uint64_t)v9;
    operator delete(v9);
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = a1[2];
    v12 = (void *)a1[1];
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 56);
        if (v13)
        {
          *(_QWORD *)(v11 - 48) = v13;
          operator delete(v13);
        }
        v14 = *(void **)(v11 - 104);
        if (v14)
        {
          *(_QWORD *)(v11 - 96) = v14;
          operator delete(v14);
        }
        v11 -= 128;
      }
      while (v11 != v10);
      v12 = (void *)a1[1];
    }
    a1[2] = v10;
    operator delete(v12);
  }
  v15 = *a1;
  *a1 = 0;
  if (v15)
    sub_20E8E931C((uint64_t)a1, v15);
  return a1;
}

_QWORD *sub_20F114208(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = a1[5];
  if (v5)
  {
    v6 = a1[6];
    v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        v6 -= 56;
      }
      while (v6 != v5);
      v7 = (void *)a1[5];
    }
    a1[6] = v5;
    operator delete(v7);
  }
  v9 = (uint64_t *)a1[2];
  if (v9)
  {
    v10 = (uint64_t *)a1[3];
    v11 = (void *)a1[2];
    if (v10 != v9)
    {
      do
        v10 = sub_20F1140F4(v10 - 32);
      while (v10 != v9);
      v11 = (void *)a1[2];
    }
    a1[3] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_20F1142E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    sub_20F114444((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20F114330(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[21];
  if (v4)
  {
    a1[22] = (uint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = (uint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = (uint64_t)v7;
    operator delete(v7);
  }
  v8 = (void *)a1[9];
  if (v8)
  {
    a1[10] = (uint64_t)v8;
    operator delete(v8);
  }
  v9 = (void *)a1[6];
  if (v9)
  {
    a1[7] = (uint64_t)v9;
    operator delete(v9);
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = a1[2];
    v12 = (void *)a1[1];
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 56);
        if (v13)
        {
          *(_QWORD *)(v11 - 48) = v13;
          operator delete(v13);
        }
        v14 = *(void **)(v11 - 104);
        if (v14)
        {
          *(_QWORD *)(v11 - 96) = v14;
          operator delete(v14);
        }
        v11 -= 144;
      }
      while (v11 != v10);
      v12 = (void *)a1[1];
    }
    a1[2] = v10;
    operator delete(v12);
  }
  v15 = *a1;
  *a1 = 0;
  if (v15)
    sub_20E8E931C((uint64_t)a1, v15);
  return a1;
}

_QWORD *sub_20F114444(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = a1[5];
  if (v5)
  {
    v6 = a1[6];
    v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        v6 -= 56;
      }
      while (v6 != v5);
      v7 = (void *)a1[5];
    }
    a1[6] = v5;
    operator delete(v7);
  }
  v9 = (uint64_t *)a1[2];
  if (v9)
  {
    v10 = (uint64_t *)a1[3];
    v11 = (void *)a1[2];
    if (v10 != v9)
    {
      do
        v10 = sub_20F114330(v10 - 32);
      while (v10 != v9);
      v11 = (void *)a1[2];
    }
    a1[3] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_20F11451C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v6;
  double v8;
  double v16;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  int v29;
  uint64_t result;
  double v31;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  double v42;
  float64x2_t v43;
  double v44;
  double v45;
  float64x2_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  const char *v52;
  unsigned __int8 v53;
  const char *v54;
  size_t v55;
  void *v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *p_p;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  size_t v67;
  std::__shared_weak_count_vtbl *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  void *v105;
  unint64_t v106;
  const char *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  size_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v155;
  int v156;
  const char *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  void *object;
  void *v164[2];
  __int128 v165;
  void *__p;
  size_t v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  _QWORD v171[2];

  *(_BYTE *)(a1 + 93) = 0;
  if (a5 > 0.1)
    goto LABEL_25;
  v6 = *(double *)(a2 + 16);
  _Q3 = *(int8x16_t *)a2;
  v8 = *(double *)(a3 + 16);
  _Q1 = *(int8x16_t *)a3;
  _D6 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D5, D6, V3.D[1] }
  v16 = sqrt(_D5 + v6 * v6);
  _D7 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D6, D7, V1.D[1] }
  if (vabdd_f64(sqrt(_D6 + v8 * v8), *(double *)(a1 + 32)) > *(double *)(a1 + 24) || v16 > *(double *)(a1 + 16))
  {
LABEL_25:
    if (!*(_BYTE *)(a1 + 92))
    {
      result = 0;
LABEL_120:
      *(_QWORD *)(a1 + 2376) = 0;
      *(_QWORD *)(a1 + 2368) = 0;
      *(_QWORD *)(a1 + 2384) = 0;
      *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 92) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      return result;
    }
    sub_20F1155C0(&v162);
    if (**(int **)(v162 + 56) > 3
      || (v47 = *(unsigned __int8 *)(v162 + 72),
          v48 = sub_20E8C31DC(v162, "OSLogSurrogateAppender", 1, 0),
          v49 = v48,
          !v47)
      && !v48)
    {
LABEL_117:
      if (sub_20F1156B4((uint64_t *)a1, v42, v43, v44, v45, v46))
        result = 2;
      else
        result = 0;
      goto LABEL_120;
    }
    v153 = &v162;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v155 = std::chrono::system_clock::now().__d_.__rep_;
    v156 = 3;
    v157 = "unknown file";
    v158 = 132;
    v160 = 0;
    v161 = 0;
    v159 = "unknown function";
    v50 = v162;
    if (*(char *)(v162 + 39) < 0)
    {
      v52 = *(const char **)(v162 + 16);
      v51 = *(_QWORD *)(v162 + 24);
    }
    else
    {
      v51 = *(unsigned __int8 *)(v162 + 39);
      v52 = (const char *)(*v153 + 16);
    }
    v151 = *v153 + 16;
    v53 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v165 && SHIBYTE(v164[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v54 = byte_254A4A4F8;
    else
      v54 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v55 = byte_254A4A4F8[23];
    else
      v55 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v54, v52);
    v56 = v164;
    if (v55 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v55 >= 0x17)
    {
      v57 = v49;
      v58 = v52;
      v59 = v50;
      v60 = v47;
      v61 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v61 = v55 | 7;
      v62 = v61 + 1;
      v56 = operator new(v61 + 1);
      v164[1] = (void *)v55;
      *(_QWORD *)&v165 = v62 | 0x8000000000000000;
      v164[0] = v56;
      v47 = v60;
      v50 = v59;
      v52 = v58;
      v49 = v57;
    }
    else
    {
      BYTE7(v165) = v55;
      if (!v55)
      {
LABEL_50:
        *((_BYTE *)v56 + v55) = 0;
        BYTE8(v165) = 1;
        p_p = &__p;
        if (v51 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v51 >= 0x17)
        {
          v64 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v51 | 7) != 0x17)
            v64 = v51 | 7;
          v65 = v64 + 1;
          p_p = operator new(v64 + 1);
          v167 = v51;
          v168 = v65 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v168) = v51;
          if (!v51)
            goto LABEL_58;
        }
        memmove(p_p, v52, v51);
LABEL_58:
        *((_BYTE *)p_p + v51) = 0;
        v169 = 1;
        v66 = object;
        if (SHIBYTE(v168) < 0)
          operator delete(__p);
        if (BYTE8(v165) && SBYTE7(v165) < 0)
          operator delete(v164[0]);
        if (object)
          os_release(object);
        if (v49 && *(_QWORD *)(v49 + 24))
        {
          v67 = _os_log_pack_size();
          v68 = (std::__shared_weak_count_vtbl *)operator new(v67, (std::align_val_t)8uLL);
          v69 = (std::__shared_weak_count *)operator new();
          v70 = v69;
          v69->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          v69->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v69->__shared_weak_owners_ = 0;
          v69[1].__vftable = v68;
          object = v68;
          v164[0] = v68;
          v164[1] = v69;
          do
            v72 = __ldxr(p_shared_owners);
          while (__stxr(v72 + 1, p_shared_owners));
          v165 = 0uLL;
          __p = 0;
          do
            v73 = __ldaxr(p_shared_owners);
          while (__stlxr(v73 - 1, p_shared_owners));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v70);
          }
          v74 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v75 = operator new();
          v76 = *(unsigned __int8 *)(v50 + 39);
          v77 = v151;
          if ((v76 & 0x80u) != 0)
          {
            v77 = *(_QWORD *)(v50 + 16);
            v76 = *(_QWORD *)(v50 + 24);
          }
          *(_QWORD *)v75 = v74;
          *(_OWORD *)(v75 + 8) = *(_OWORD *)v164;
          v164[0] = 0;
          v164[1] = 0;
          *(_OWORD *)(v75 + 24) = v165;
          v165 = 0uLL;
          *(_QWORD *)(v75 + 40) = v77;
          *(_QWORD *)(v75 + 48) = v76;
          *(_BYTE *)(v75 + 56) = 1;
          v170 = 0;
          v171[0] = v75;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v49 + 24) + 40))(*(_QWORD *)(v49 + 24), v171);
          v78 = v171[0];
          v171[0] = 0;
          if (v78)
          {
            v79 = *(std::__shared_weak_count **)(v78 + 32);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v82 = *(std::__shared_weak_count **)(v78 + 16);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
            v85 = v170;
            v170 = 0;
            if (v85)
            {
              v86 = *(std::__shared_weak_count **)(v85 + 32);
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              v89 = *(std::__shared_weak_count **)(v85 + 16);
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
            }
          }
          v92 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
            v93 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v95 = (std::__shared_weak_count *)v164[1];
          if (v164[1])
          {
            v96 = (unint64_t *)((char *)v164[1] + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        else
        {
          os_log_type_enabled(v66, OS_LOG_TYPE_INFO);
          LOWORD(object) = 0;
          v98 = (void *)_os_log_send_and_compose_impl();
          if (v98)
            free(v98);
        }
        if (v47)
        {
          sub_20E8C003C((uint64_t)&v153, "Initializing...");
          sub_20E863570((uint64_t)&v153);
        }
        sub_20E863570((uint64_t)&v153);
        v99 = v161;
        if (v161)
        {
          v100 = (unint64_t *)&v161->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        goto LABEL_117;
      }
    }
    memmove(v56, v54, v55);
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(a1 + 2344) + 56 * *(_QWORD *)(a1 + 2376);
  *(double *)v20 = a4;
  *(double *)(v20 + 24) = v6;
  _Q3.i64[1] = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
  *(int8x16_t *)(v20 + 8) = _Q3;
  *(double *)(v20 + 48) = v8;
  _Q1.i64[1] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
  *(int8x16_t *)(v20 + 32) = _Q1;
  v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344)) >> 3);
  v22 = *(_QWORD *)(a1 + 2376) + 1;
  if (v22 >= v21)
    v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 2352) - *(_QWORD *)(a1 + 2344)) >> 3);
  else
    v23 = 0;
  *(_QWORD *)(a1 + 2376) = v22 - v23;
  v24 = *(_QWORD *)(a1 + 2384);
  if (v24 != v21)
  {
    *(_QWORD *)(a1 + 2384) = v24 + 1;
    v26 = *(double *)(a1 + 80);
    if (v26 >= 0.0)
      goto LABEL_14;
LABEL_32:
    *(double *)(a1 + 80) = a4;
    *(_DWORD *)(a1 + 88) = 0;
    return 1;
  }
  v25 = *(_QWORD *)(a1 + 2368) + 1;
  if (v25 < v21)
    v21 = 0;
  *(_QWORD *)(a1 + 2368) = v25 - v21;
  v26 = *(double *)(a1 + 80);
  if (v26 < 0.0)
    goto LABEL_32;
LABEL_14:
  v27 = a4 - v26;
  v28 = *(double *)(a1 + 8);
  if (v27 + 2.22044605e-16 >= v28)
    *(_BYTE *)(a1 + 92) = 1;
  v29 = llround(v27 / v28 * 100.0);
  if (v29 >= 100)
    v29 = 100;
  *(_DWORD *)(a1 + 88) = v29;
  result = 1;
  if (*(_BYTE *)(a1 + 94) && v29 > 99)
  {
    sub_20F1155C0(&v162);
    if (**(int **)(v162 + 56) > 3
      || (v36 = *(unsigned __int8 *)(v162 + 72),
          v37 = sub_20E8C31DC(v162, "OSLogSurrogateAppender", 1, 0),
          v38 = v37,
          !v36)
      && !v37)
    {
LABEL_205:
      if (sub_20F1156B4((uint64_t *)a1, v31, v32, v33, v34, v35))
        return 2;
      else
        return 1;
    }
    v153 = &v162;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v155 = std::chrono::system_clock::now().__d_.__rep_;
    v156 = 3;
    v157 = "unknown file";
    v158 = 143;
    v160 = 0;
    v161 = 0;
    v159 = "unknown function";
    v39 = v162;
    if (*(char *)(v162 + 39) < 0)
    {
      v41 = *(const char **)(v162 + 16);
      v40 = *(_QWORD *)(v162 + 24);
    }
    else
    {
      v40 = *(unsigned __int8 *)(v162 + 39);
      v41 = (const char *)(*v153 + 16);
    }
    v152 = *v153 + 16;
    v102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v165 && SHIBYTE(v164[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v103 = byte_254A4A4F8;
    else
      v103 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v104 = byte_254A4A4F8[23];
    else
      v104 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v103, v41);
    v105 = v164;
    if (v104 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v104 >= 0x17)
    {
      v106 = v38;
      v107 = v41;
      v108 = v39;
      v109 = v36;
      v110 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17)
        v110 = v104 | 7;
      v111 = v110 + 1;
      v105 = operator new(v110 + 1);
      v164[1] = (void *)v104;
      *(_QWORD *)&v165 = v111 | 0x8000000000000000;
      v164[0] = v105;
      v36 = v109;
      v39 = v108;
      v41 = v107;
      v38 = v106;
    }
    else
    {
      BYTE7(v165) = v104;
      if (!v104)
      {
LABEL_138:
        *((_BYTE *)v105 + v104) = 0;
        BYTE8(v165) = 1;
        v112 = &__p;
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v40 >= 0x17)
        {
          v113 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v113 = v40 | 7;
          v114 = v113 + 1;
          v112 = operator new(v113 + 1);
          v167 = v40;
          v168 = v114 | 0x8000000000000000;
          __p = v112;
        }
        else
        {
          HIBYTE(v168) = v40;
          if (!v40)
            goto LABEL_146;
        }
        memmove(v112, v41, v40);
LABEL_146:
        *((_BYTE *)v112 + v40) = 0;
        v169 = 1;
        v115 = object;
        if (SHIBYTE(v168) < 0)
          operator delete(__p);
        if (BYTE8(v165) && SBYTE7(v165) < 0)
          operator delete(v164[0]);
        if (object)
          os_release(object);
        if (v38 && *(_QWORD *)(v38 + 24))
        {
          v116 = _os_log_pack_size();
          v117 = (std::__shared_weak_count_vtbl *)operator new(v116, (std::align_val_t)8uLL);
          v118 = (std::__shared_weak_count *)operator new();
          v119 = v118;
          v118->__shared_owners_ = 0;
          v120 = (unint64_t *)&v118->__shared_owners_;
          v118->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v118->__shared_weak_owners_ = 0;
          v118[1].__vftable = v117;
          object = v117;
          v164[0] = v117;
          v164[1] = v118;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
          v165 = 0uLL;
          __p = 0;
          do
            v122 = __ldaxr(v120);
          while (__stlxr(v122 - 1, v120));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v119);
          }
          v123 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v124 = operator new();
          v125 = *(unsigned __int8 *)(v39 + 39);
          v126 = v152;
          if ((v125 & 0x80u) != 0)
          {
            v126 = *(_QWORD *)(v39 + 16);
            v125 = *(_QWORD *)(v39 + 24);
          }
          *(_QWORD *)v124 = v123;
          *(_OWORD *)(v124 + 8) = *(_OWORD *)v164;
          v164[0] = 0;
          v164[1] = 0;
          *(_OWORD *)(v124 + 24) = v165;
          v165 = 0uLL;
          *(_QWORD *)(v124 + 40) = v126;
          *(_QWORD *)(v124 + 48) = v125;
          *(_BYTE *)(v124 + 56) = 1;
          v170 = 0;
          v171[0] = v124;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), v171);
          v127 = v171[0];
          v171[0] = 0;
          if (v127)
          {
            v128 = *(std::__shared_weak_count **)(v127 + 32);
            if (v128)
            {
              v129 = (unint64_t *)&v128->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            v131 = *(std::__shared_weak_count **)(v127 + 16);
            if (v131)
            {
              v132 = (unint64_t *)&v131->__shared_owners_;
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            MEMORY[0x212BC6398](v127, 0x10F0C40B62ED6C6);
            v134 = v170;
            v170 = 0;
            if (v134)
            {
              v135 = *(std::__shared_weak_count **)(v134 + 32);
              if (v135)
              {
                v136 = (unint64_t *)&v135->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              v138 = *(std::__shared_weak_count **)(v134 + 16);
              if (v138)
              {
                v139 = (unint64_t *)&v138->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              MEMORY[0x212BC6398](v134, 0x10F0C40B62ED6C6);
            }
          }
          v141 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
            v142 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v144 = (std::__shared_weak_count *)v164[1];
          if (v164[1])
          {
            v145 = (unint64_t *)((char *)v164[1] + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
        }
        else
        {
          os_log_type_enabled(v115, OS_LOG_TYPE_INFO);
          LOWORD(object) = 0;
          v147 = (void *)_os_log_send_and_compose_impl();
          if (v147)
            free(v147);
        }
        if (v36)
        {
          sub_20E8C003C((uint64_t)&v153, "Initializing early...");
          sub_20E863570((uint64_t)&v153);
        }
        sub_20E863570((uint64_t)&v153);
        v148 = v161;
        if (v161)
        {
          v149 = (unint64_t *)&v161->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        goto LABEL_205;
      }
    }
    memmove(v105, v103, v104);
    goto LABEL_138;
  }
  return result;
}

void sub_20F115414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F11545C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 96));
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1154F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F115520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1155C0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A621A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A621A8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A621A0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A621A8);
  }
  *a1 = qword_254A621A0;
}

void sub_20F11565C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A621A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A621A8);
  _Unwind_Resume(a1);
}

BOOL sub_20F1156B4(uint64_t *a1, double a2, float64x2_t a3, double a4, double a5, float64x2_t a6)
{
  float64x2_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  float64x2_t v21;
  int8x16_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  unint64_t v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  double v42;
  double v43;
  double v50;
  float64_t v52;
  float64_t v53;
  float64_t v54;
  float64x2_t v55;
  double v56;
  double v58;
  double v60;
  double v62;
  double v63;
  int64x2_t v64;
  double v65;
  int8x16_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  double v77;
  double v78;
  __double2 v79;
  __double2 v80;
  double v81;
  double v82;
  double v86;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v104;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  double v110;
  unint64_t v111;
  uint64_t v112;
  float64_t v113;

  v7 = a1[298];
  if (v7 >= 2)
  {
    v9 = 0;
    v10 = a1 + 33;
    *((_OWORD *)a1 + 6) = 0u;
    a1[26] = 0;
    *((_OWORD *)a1 + 11) = 0u;
    *((_OWORD *)a1 + 12) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    v11 = a1[296];
    v12 = a1[293];
    v13 = 0x6DB6DB6DB6DB6DB7 * ((a1[294] - v12) >> 3);
    _Q0 = 0uLL;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    do
    {
      v20 = (double *)(v12 + 56 * ((v11 + v9) % v13));
      v19 = v19 + v20[1];
      *((double *)a1 + 12) = v19;
      v18 = v18 + v20[2];
      *((double *)a1 + 13) = v18;
      v17 = v17 + v20[3];
      *((double *)a1 + 14) = v17;
      v16 = v16 + v20[4];
      *((double *)a1 + 15) = v16;
      v15 = v15 + v20[5];
      *((double *)a1 + 16) = v15;
      _Q0.f64[0] = _Q0.f64[0] + v20[6];
      a1[17] = *(_QWORD *)&_Q0.f64[0];
      ++v9;
    }
    while (v7 != v9);
    _Q0.f64[0] = 1.0 / (double)v7;
    *(_QWORD *)&a3.f64[0] = a1[14];
    v21 = vmulq_f64(_Q0, a3);
    v22 = (int8x16_t)vmulq_n_f64(*((float64x2_t *)a1 + 6), _Q0.f64[0]);
    *((int8x16_t *)a1 + 6) = v22;
    a1[14] = *(_QWORD *)&v21.f64[0];
    *(_QWORD *)&a6.f64[0] = a1[17];
    v23 = *(float64x2_t *)(a1 + 15);
    *(_QWORD *)&v24 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v25 = vmulq_f64(_Q0, a6);
    v26 = vmulq_n_f64(v23, _Q0.f64[0]);
    v27 = (float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
    *(float64x2_t *)(a1 + 15) = v26;
    a1[17] = *(_QWORD *)&v25.f64[0];
    v28 = 0uLL;
    v29 = 0.0;
    v111 = vextq_s8(v22, v22, 8uLL).u64[0];
    v112 = v22.i64[0];
    *(_QWORD *)&v30.f64[0] = v22.i64[0];
    *(_QWORD *)&v30.f64[1] = v111;
    v31.f64[0] = v26.f64[0];
    v31.f64[1] = v27.f64[0];
    v32 = v7;
    v33 = 0.0;
    v34 = 0uLL;
    do
    {
      v35 = v12 + 56 * (v11 % v13);
      v6.f64[0] = *(float64_t *)(v35 + 24);
      v36 = vsubq_f64(v6, v21);
      v37 = vsubq_f64(*(float64x2_t *)(v35 + 8), v30);
      v28 = vaddq_f64(v28, vmulq_f64(v37, v37));
      *((float64x2_t *)a1 + 9) = v28;
      v33 = v33 + vmuld_n_f64(v36.f64[0], v36.f64[0]);
      *((double *)a1 + 20) = v33;
      v36.f64[0] = *(float64_t *)(v35 + 48);
      v6 = vsubq_f64(v36, v25);
      v38 = vsubq_f64(*(float64x2_t *)(v35 + 32), v31);
      v34 = vaddq_f64(v34, vmulq_f64(v38, v38));
      *(float64x2_t *)(a1 + 21) = v34;
      v29 = v29 + vmuld_n_f64(v6.f64[0], v6.f64[0]);
      *((double *)a1 + 23) = v29;
      ++v11;
      --v32;
    }
    while (v32);
    v30.f64[0] = 1.0;
    v39 = 1.0 / (double)(v7 - 1);
    _Q16 = vsqrtq_f64(vmulq_n_f64(v28, v39));
    *((float64x2_t *)a1 + 9) = _Q16;
    _Q18 = vsqrtq_f64(vmulq_n_f64(v34, v39));
    *(float64x2_t *)(a1 + 21) = _Q18;
    v42 = sqrt(v39 * v33);
    *((double *)a1 + 20) = v42;
    v43 = sqrt(v39 * v29);
    *((double *)a1 + 23) = v43;
    *((_OWORD *)a1 + 12) = *((_OWORD *)a1 + 6);
    a1[26] = a1[14];
    _D20 = _Q16.f64[1];
    __asm { FMLA            D19, D20, V16.D[1] }
    v50 = _D19 + v42 * v42;
    _D17 = _Q18.f64[1];
    __asm { FMLA            D16, D17, V18.D[1] }
    v52 = _Q16.f64[0] + v43 * v43;
    v110 = v50;
    _Q16.f64[0] = v50;
    _Q16.f64[1] = v52;
    *(float64x2_t *)(a1 + 291) = _Q16;
    v53 = _Q0.f64[0] * v24;
    v54 = _Q0.f64[0] * a6.f64[0];
    v26.f64[1] = v27.f64[0];
    v55 = vmulq_f64(v26, v26);
    v56 = sqrt(v55.f64[0] + v53 * v27.f64[0] + v54 * v25.f64[0]);
    if (v56 == 0.0)
      _Q0.f64[0] = 1.0;
    else
      _Q0.f64[0] = 1.0 / v56;
    _Q3 = vmulq_n_f64(v26, _Q0.f64[0]);
    v58 = vmulq_f64(v25, _Q0).f64[0];
    _D8 = 0.0;
    _Q0.f64[0] = 0.0 * v58 - _Q3.f64[1];
    v60 = _Q3.f64[0] - 0.0 * v58;
    v55.f64[0] = vmuld_lane_f64(0.0, _Q3, 1) - 0.0 * _Q3.f64[0];
    v27.f64[0] = sqrt(_Q0.f64[0] * _Q0.f64[0] + v60 * v60 + v55.f64[0] * v55.f64[0]);
    __asm { FMLA            D7, D8, V3.D[1] }
    v62 = v58 + _D7;
    v113 = v21.f64[0];
    if (v27.f64[0] >= 2.22507386e-308)
    {
      if (v27.f64[0] < 2.22044605e-16)
      {
        v30.f64[0] = 1.0 / v27.f64[0];
        v65 = v55.f64[0] * (1.0 / v27.f64[0]);
        v55 = vmulq_f64(v55, v30);
        _Q0.f64[1] = v60;
        _Q0 = vmulq_n_f64(_Q0, v30.f64[0]);
        _D1 = v60 * v30.f64[0];
        *(_QWORD *)&v60 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
        __asm { FMLA            D6, D1, V0.D[1] }
        v27.f64[0] = sqrt(vmlad_n_f64(_D6, v65, v55.f64[0]));
      }
      v27.f64[0] = 1.0 / v27.f64[0];
      v68 = (int8x16_t)vmulq_f64(v55, v27);
      _Q0.f64[1] = v60;
      v69 = vmulq_n_f64(_Q0, v27.f64[0]);
      v70 = fmax(fmin(v62, 1.0), -1.0);
      v71 = sqrt(1.0 - v70 * v70);
      v72 = vmuld_n_f64(v69.f64[0], *(double *)v68.i64);
      v73 = vmulq_laneq_f64(v69, v69, 1);
      *((double *)a1 + 27) = vmuld_n_f64(v69.f64[0], v69.f64[0]);
      a1[28] = *(_QWORD *)&v73.f64[0];
      *((double *)a1 + 29) = v72;
      *((float64x2_t *)a1 + 15) = v73;
      v74 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v69, v68, 8uLL), *(double *)v68.i64);
      a1[32] = *(_QWORD *)&v74.f64[0];
      *((double *)a1 + 33) = v72;
      *((float64x2_t *)a1 + 17) = v74;
      v30.f64[0] = 1.0 - v70;
      *(_QWORD *)&v74.f64[0] = a1[35];
      v75 = vmulq_n_f64(*(float64x2_t *)(a1 + 31), 1.0 - v70);
      v76 = vmulq_n_f64(*(float64x2_t *)(a1 + 29), 1.0 - v70).f64[0];
      *((double *)a1 + 27) = v70 + vmulq_n_f64(*(float64x2_t *)(a1 + 27), 1.0 - v70).f64[0];
      v30.f64[0] = v70 + vmulq_f64(v30, v74).f64[0];
      _D8 = vmuld_lane_f64(v71, v69, 1) + v76;
      v63 = v75.f64[1] - v71 * v69.f64[0];
    }
    else
    {
      v63 = 0.0;
      if (v62 <= 0.0)
      {
        *(_OWORD *)(a1 + 27) = xmmword_21039C230;
        a1[33] = 0x8000000000000000;
        v64 = vdupq_n_s64(0x8000000000000000);
        *(int64x2_t *)(a1 + 29) = v64;
        *(_OWORD *)(a1 + 31) = 0u;
        *((_OWORD *)a1 + 17) = 0u;
        *(_QWORD *)&v30.f64[0] = a1[35];
        v30.f64[0] = vaddq_f64(v30, v30).f64[0] + -1.0;
        _D8 = *(double *)v64.i64 + 0.0;
        v63 = 0.0 + 0.0;
      }
    }
    v77 = atan2(-v63, v30.f64[0]);
    v78 = asin(_D8);
    v79 = __sincos_stret(v77);
    v80 = __sincos_stret(v78);
    a1[27] = *(_QWORD *)&v80.__cosval;
    a1[28] = 0;
    a1[29] = *(_QWORD *)&v80.__sinval;
    *((double *)a1 + 30) = v79.__sinval * v80.__sinval;
    v81 = -(v79.__sinval * v80.__cosval);
    a1[31] = *(_QWORD *)&v79.__cosval;
    *((double *)a1 + 32) = v81;
    v82 = -(v79.__cosval * v80.__sinval);
    *((double *)a1 + 33) = v82;
    a1[34] = *(_QWORD *)&v79.__sinval;
    *((double *)a1 + 35) = v79.__cosval * v80.__cosval;
    _D17 = *((double *)a1 + 5);
    _Q5 = *(float64x2_t *)(a1 + 27);
    _Q18 = *((float64x2_t *)a1 + 15);
    v86 = *((double *)v10 + 2);
    _Q16 = *(float64x2_t *)v10;
    v88 = (float64x2_t)vzip1q_s64((int64x2_t)_Q5, (int64x2_t)_Q18);
    v89 = (float64x2_t)vzip2q_s64((int64x2_t)_Q5, (int64x2_t)_Q18);
    v90.f64[0] = v80.__sinval;
    v90.f64[1] = v81;
    v91 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v88, _D17), (float64x2_t)0, v89), (float64x2_t)0, v90);
    _D24 = 0;
    __asm { FMLA            D23, D24, V16.D[1] }
    v94 = vmulq_f64(v88, (float64x2_t)0);
    v95 = vmlaq_f64(vmlaq_n_f64(v94, v89, _D17), (float64x2_t)0, v90);
    __asm { FMLA            D27, D17, V16.D[1] }
    _D17 = _D27 + v86 * 0.0;
    v98 = vmlaq_f64(vmlaq_f64(v94, (float64x2_t)0, v89), (float64x2_t)vdupq_n_s64(0x3E45798EE2308C3AuLL), v90);
    __asm { FMLA            D26, D24, V16.D[1] }
    v89.f64[0] = _D26 + v86 * 0.00000001;
    v100 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q5.f64[0]), v95, _Q5, 1), v98, v80.__sinval);
    __asm { FMLA            D24, D17, V5.D[1] }
    v102 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q18.f64[0]), v95, _Q18, 1), v98, v81);
    __asm { FMLA            D27, D17, V18.D[1] }
    v104 = vmulq_n_f64(v91, *(double *)v10);
    __asm { FMLA            D23, D17, V16.D[1] }
    *((double *)v10 + 5) = _D24 + v89.f64[0] * v80.__sinval;
    *(float64x2_t *)(v10 + 3) = v100;
    *((double *)v10 + 8) = _D27 + v89.f64[0] * v81;
    *((float64x2_t *)v10 + 3) = v102;
    *((double *)v10 + 11) = _D23 + v89.f64[0] * v86;
    *(float64x2_t *)(v10 + 9) = vmlaq_n_f64(vmlaq_laneq_f64(v104, v95, _Q16, 1), v98, v86);
    *(_OWORD *)(a1 + 57) = 0u;
    *(_OWORD *)(a1 + 59) = 0u;
    *(_OWORD *)(a1 + 61) = 0u;
    *(_OWORD *)(a1 + 63) = 0u;
    a1[65] = 0;
    a1[45] = *(_QWORD *)&_Q5.f64[0];
    a1[46] = 0;
    a1[47] = *(_QWORD *)&v80.__sinval;
    *((double *)a1 + 48) = v79.__sinval * v80.__sinval;
    a1[49] = *(_QWORD *)&v79.__cosval;
    *((double *)a1 + 50) = v81;
    *((double *)a1 + 51) = v82;
    a1[52] = *(_QWORD *)&v79.__sinval;
    *((double *)a1 + 53) = v79.__cosval * v80.__cosval;
    *(_QWORD *)&v106 = v112;
    *((_QWORD *)&v106 + 1) = v111;
    *((_OWORD *)a1 + 27) = v106;
    *((float64_t *)a1 + 56) = v113;
    *((_OWORD *)a1 + 30) = *(_OWORD *)(a1 + 7);
    a1[62] = a1[9];
    bzero(a1 + 69, 0x6F0uLL);
    *((_OWORD *)a1 + 33) = *(_OWORD *)(v10 + 3);
    a1[68] = v10[5];
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a1 + 39);
    a1[83] = a1[41];
    *((_OWORD *)a1 + 48) = *((_OWORD *)a1 + 21);
    a1[98] = a1[44];
    v107 = *a1;
    a1[210] = *a1;
    a1[226] = v107;
    a1[242] = v107;
    v108 = a1[6];
    a1[162] = v108;
    a1[178] = v108;
    a1[194] = v108;
    *((double *)a1 + 114) = v110;
    *((double *)a1 + 130) = v110;
    *((double *)a1 + 146) = v110;
    *((_BYTE *)a1 + 93) = 1;
  }
  return v7 > 1;
}

uint64_t *sub_20F115CF0@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  __int128 v16;

  __p = operator new(0x30uLL);
  v16 = xmmword_2102DC8D0;
  strcpy((char *)__p, "StationaryInertialCalibration parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.accel_bias_var", v4, "Initial accelerometer bias variance (m^2/s^4)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90(a1 + 1);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.window_duration", v5, "Minimum length of stationary time in the beginning (s)");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90(a1 + 2);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.max_gyro_norm", v6, "Maximum norm of the any gyro for state to be considered stationary. (rad/s)");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90(a1 + 3);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.max_accel_norm", v7, "Maximum norm of the any accelerometer for state to be considered stationary. (m/s^2)");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90(a1 + 4);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.nominal_accel_norm", v8, "Acceleration due to gravity. (m/s^2)");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90(a1 + 5);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.orientation_variance", v9, "Variance of the pitch/roll components of the initial orientation.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90(a1 + 6);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.velocity_variance", v10, "Variance of each velocity component for the initial state.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90(a1 + 7);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.initial_accel_bias_x", v11, "Initial bias of the x-accelerometer (m/s^2).");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90(a1 + 8);
  sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.initial_accel_bias_y", v12, "Initial bias of the y-accelerometer (m/s^2).");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90(a1 + 9);
  return sub_20E8B2F9C((uint64_t *)&__p, "StationaryInertialCalibrationConfig.initial_accel_bias_z", v13, "Initial bias of the z-accelerometer (m/s^2).");
}

void sub_20F115F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F115FCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  __int128 v21;

  __p = operator new(0x28uLL);
  v21 = xmmword_2102DC910;
  strcpy((char *)__p, "Stationary State Detection parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.enabled", v4, "Whether stationary state detection is enabled or not.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.min_two_view_point_inliers", v5, "Minimum inliers for stationary state.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.acceleration_norm_threshold", v6, "Max acceleration for stationary state.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.rotational_velocity_threshold", v7, "Max rotational velocity for stationary state.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.acceleration_due_to_gravity", v8, "Magnitude of acceleration due to gravity for stationary state.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EF4E784((float *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.rotation_inlier_fraction", v9, "Fraction of 2-view inliers that are also rotation-only inliers for stationary state.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.normalized_reprojection_threshold", v10, "Reprojection error in radian as threshold for stationary state detection.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EF4E784((float *)(a1 + 60));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.rotation_line_outlier_min", v11, "Minimum number of line outliers above which we assume stationarity is unlikely.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.min_line_inlier_eigenvalue", v12, "Threshold below which the line evidence is insufficient to conclude stationarity.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.min_two_view_line_inliers", v13, "Minimum number of line observations for lines to be considered.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.use_vision_only_if_conclusive", v14, " Whether to purely rely on vision for stationary detection if it's conclusive. Otherwise fallback to gyro-based stationary detection");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.use_vision_only_if_conclusive", v15, "Minimum number of points to check vision-only stationary detection. Below this threshold, the stationary flag is set to false.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.max_error_in_normalized_space_for_vision_only_stationary", v16, "Maximum error in normalized space for vision only stationary detection.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.percentile_of_stationary_points_to_conclude_stationary_vision", v17, "Percentile of stationary points to conclude vision is stationary.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 96));
  return sub_20E8B2F9C((uint64_t *)&__p, "DetectStationaryStateConfig.use_non_primary_camera_for_stationary_detection", v18, "Whether the non-primary camera(s) should be used for vision-based stationary detection.");
}

void sub_20F116328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1163CC(uint64_t a1, const void *a2)
{
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  double v10;
  double v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;

  *(_DWORD *)a1 = 16843010;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 9) = 0;
  memcpy((void *)(a1 + 24), a2, 0x1A8uLL);
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  v3 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  if (v3)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = (char *)operator new(8 * v3);
    *(_QWORD *)(a1 + 488) = v4;
    *(_QWORD *)(a1 + 504) = &v4[8 * v3];
    bzero(v4, 8 * v3);
    *(_QWORD *)(a1 + 496) = &v4[8 * v3];
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    if (v3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E969238();
    v5 = (char *)operator new(24 * v3);
    *(_QWORD *)(a1 + 536) = v5;
    *(_QWORD *)(a1 + 552) = &v5[24 * v3];
    *(_QWORD *)(a1 + 544) = &v5[24 * v3];
  }
  else
  {
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
  }
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 640) = v3;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  if ((_DWORD)v3)
  {
    v6 = (char *)operator new(8 * v3);
    *(_QWORD *)(a1 + 648) = v6;
    *(_QWORD *)(a1 + 664) = &v6[8 * v3];
    bzero(v6, 8 * v3);
    *(_QWORD *)(a1 + 656) = &v6[8 * v3];
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_QWORD *)(a1 + 720) = 0;
    v7 = (char *)operator new(8 * v3);
    *(_QWORD *)(a1 + 704) = v7;
    *(_QWORD *)(a1 + 720) = &v7[8 * v3];
    bzero(v7, 8 * v3);
    *(_QWORD *)(a1 + 712) = &v7[8 * v3];
    *(_OWORD *)(a1 + 728) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_QWORD *)(a1 + 776) = 0;
    v8 = (char *)operator new(8 * v3);
    *(_QWORD *)(a1 + 760) = v8;
    *(_QWORD *)(a1 + 776) = &v8[8 * v3];
    bzero(v8, 8 * v3);
    *(_QWORD *)(a1 + 768) = &v8[8 * v3];
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_QWORD *)(a1 + 832) = 0;
    v9 = (char *)operator new(8 * v3);
    *(_QWORD *)(a1 + 816) = v9;
    *(_QWORD *)(a1 + 832) = &v9[8 * v3];
    bzero(v9, 8 * v3);
    *(_QWORD *)(a1 + 824) = &v9[8 * v3];
  }
  else
  {
    *(_QWORD *)(a1 + 832) = 0;
    *(_OWORD *)(a1 + 800) = 0uLL;
    *(_OWORD *)(a1 + 816) = 0uLL;
    *(_OWORD *)(a1 + 768) = 0uLL;
    *(_OWORD *)(a1 + 784) = 0uLL;
    *(_OWORD *)(a1 + 736) = 0uLL;
    *(_OWORD *)(a1 + 752) = 0uLL;
    *(_OWORD *)(a1 + 704) = 0uLL;
    *(_OWORD *)(a1 + 720) = 0uLL;
    *(_OWORD *)(a1 + 672) = 0uLL;
    *(_OWORD *)(a1 + 688) = 0uLL;
  }
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 968) = -1;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  v11 = *(double *)(a1 + 64);
  v10 = *(double *)(a1 + 72);
  *(_QWORD *)(a1 + 1015) = 0;
  if (v10 < v11
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 46, (uint64_t)"config_.min_acceptable_health_for_reinit >= config_.min_acceptable_health", 73, (uint64_t)"Reinit health should be greater than tracking health threshold", 62, (void (*)(void **))sub_21023DDB0)|| (LODWORD(v11) = *(_DWORD *)(a1 + 256), *(double *)(a1 + 264) > (double)*(unint64_t *)&v11)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 48, (uint64_t)"config_.max_num_features_to_consider_low_texture <= config_.min_num_features_to_conclude_moving_platform", 104, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_DWORD *)(a1 + 352)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp",
         49,
         (uint64_t)"config_.max_size_stationary_flag_buffer > 0u",
         44,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0)
    || *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 48)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 50, (uint64_t)"config_.min_inlier_tracked_features < config_.num_inliers_for_low_inliers_mode", 78, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v12 = *(unsigned int *)(a1 + 352);
  v13 = *(char **)(a1 + 872);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 880) - (_QWORD)v13) >> 3);
  if (v14 != v12)
  {
    if ((_DWORD)v12)
    {
      v15 = (char *)operator new(40 * v12);
      v16 = v15;
      v17 = &v15[40 * v12];
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = 0;
        *(_OWORD *)(v18 + 8) = 0uLL;
        *(_OWORD *)(v18 + 24) = 0uLL;
        v18 += 40;
      }
      while (v18 != v17);
      v19 = *(_QWORD *)(a1 + 912);
      if (v19 >= v12)
        v20 = v12;
      else
        v20 = *(_QWORD *)(a1 + 912);
      if (v19 <= v12)
      {
        if (v19)
        {
          v26 = *(_QWORD *)(a1 + 896);
          v27 = v15;
          do
          {
            v28 = &v13[40 * (v26 % v14)];
            *(_DWORD *)v27 = *(_DWORD *)v28;
            v29 = *(_OWORD *)(v28 + 8);
            *(_OWORD *)(v27 + 20) = *(_OWORD *)(v28 + 20);
            *(_OWORD *)(v27 + 8) = v29;
            ++v26;
            v27 += 40;
            --v19;
          }
          while (v19);
        }
        else if (!v13)
        {
LABEL_35:
          *(_QWORD *)(a1 + 872) = v16;
          *(_QWORD *)(a1 + 880) = v17;
          *(_QWORD *)(a1 + 888) = v17;
          *(_QWORD *)(a1 + 912) = v20;
          *(_QWORD *)(a1 + 896) = 0;
          *(_QWORD *)(a1 + 904) = v20 % v12;
          return a1;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 896);
        v22 = v20;
        v23 = v15;
        do
        {
          v24 = &v13[40 * (v21 % v14)];
          *(_DWORD *)v23 = *(_DWORD *)v24;
          v25 = *(_OWORD *)(v24 + 8);
          *(_OWORD *)(v23 + 20) = *(_OWORD *)(v24 + 20);
          *(_OWORD *)(v23 + 8) = v25;
          ++v21;
          v23 += 40;
          --v22;
        }
        while (v22);
      }
      *(_QWORD *)(a1 + 880) = v13;
      operator delete(v13);
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 880) = v13;
    *(_QWORD *)(a1 + 896) = 0;
    *(_QWORD *)(a1 + 912) = 0;
    *(_QWORD *)(a1 + 904) = 0;
  }
  return a1;
}

void sub_20F1168D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v1 + 648);
  if (v8)
  {
    *(_QWORD *)(v1 + 656) = v8;
    operator delete(v8);
  }
  sub_20EBCBAD8(v2);
  _Unwind_Resume(a1);
}

double sub_20F1169B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int32x4_t *a10, unsigned __int8 a11)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  int v21;
  _BOOL4 v23;
  int v24;
  int v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  double v33;
  double result;
  _BYTE v35[17];

  *(_DWORD *)v35 = 16843010;
  *(_QWORD *)&v35[4] = 0;
  *(_QWORD *)&v35[9] = 0;
  if (*(_BYTE *)(a1 + 1020))
  {
    v35[0] = 15;
    goto LABEL_52;
  }
  if (*(_BYTE *)(a1 + 1021))
    v35[16] = 1;
  if (*(_BYTE *)(a1 + 960))
  {
    v15 = *(double *)(a2 + 448);
    if (v15 >= *(double *)(a1 + 80))
      goto LABEL_7;
  }
  else
  {
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 960) = 1;
    v15 = *(double *)(a2 + 448);
    if (v15 >= *(double *)(a1 + 80))
    {
LABEL_7:
      if (v15 >= *(double *)(a1 + 72))
        goto LABEL_8;
LABEL_48:
      *(_WORD *)v35 = 0;
      if (!a4)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  v35[0] = 1;
  if (v15 < *(double *)(a1 + 72))
    goto LABEL_48;
LABEL_8:
  if (a4)
  {
LABEL_9:
    sub_20F116BD0(a1, a2, a3, a6, a7, a8, a9, a10, a11, v35);
    v15 = *(double *)(a2 + 448);
  }
LABEL_10:
  v17 = *(double *)(a2 + 48);
  v16 = *(double *)(a2 + 56);
  v19 = *(double *)(a1 + 88);
  v18 = *(double *)(a1 + 96);
  v35[7] = v16 > v18;
  v20 = v17 > v19 && *(_BYTE *)(a2 + 168) == 0;
  v21 = v20;
  if (v20)
    v35[6] = 1;
  if (*(double *)(a1 + 64) <= v15)
  {
    if (a5 && v35[0] <= 2u)
    {
      v35[0] = 8;
      v35[4] = 1;
    }
  }
  else
  {
    v23 = *(_DWORD *)(a2 + 180) < *(_DWORD *)(a1 + 32) || *(_BYTE *)(a2 + 441) != 0;
    v35[1] = 0;
    v24 = v16 > v18 || v23;
    v25 = v21 | v24;
    if (v23)
      v26 = 5;
    else
      v26 = 4;
    if (v35[15])
      v27 = 14;
    else
      v27 = 3;
    if (v25)
      v28 = v26;
    else
      v28 = v27;
    v35[0] = v28;
  }
  if (*(_BYTE *)(a3 + 193))
  {
    v29 = *(_DWORD *)(a2 + 192);
    v30 = *(_DWORD *)(a1 + 48);
    v31 = v30 >= v29;
    v32 = v30 - v29;
    if (!v31)
      v32 = 0;
    v33 = fmin((double)v32 / (double)(v30 - *(_DWORD *)(a1 + 24)), 1.0);
  }
  else
  {
    v33 = 0.0;
  }
  *(double *)(a1 + 1000) = v33;
LABEL_52:
  result = *(double *)v35;
  *(_OWORD *)a1 = *(_OWORD *)v35;
  *(_BYTE *)(a1 + 16) = v35[16];
  return result;
}

void sub_20F116BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t k, uint64_t a6, uint64_t a7, int32x4_t *a8, unsigned __int8 a9, char *a10)
{
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  int v41;
  char v42;
  double v43;
  int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  int v56;
  double v57;
  double v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v63;
  BOOL v64;
  unsigned __int8 v65;
  _BOOL4 v66;
  uint64_t *v67;
  unsigned __int8 v68;
  unint64_t v69;
  __int128 *v70;
  size_t v71;
  __darwin_time_t v72;
  uint64_t v73;
  uint64_t n;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  double v79;
  BOOL v80;
  double v81;
  __int32 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t i;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  size_t v119;
  unsigned int v120;
  double v121;
  unsigned int v122;
  _BOOL4 v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  double v132;
  _BOOL4 v133;
  unsigned int v134;
  char v135;
  int v136;
  _BYTE *v137;
  char v138;
  unsigned __int8 v139;
  const char *v140;
  size_t v141;
  _BYTE *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  size_t v148;
  uint64_t v149;
  NSObject *v150;
  size_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  int v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t j;
  BOOL v196;
  double v197;
  double v198;
  double v199;
  unsigned int v200;
  uint64_t v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t *v204;
  unsigned __int8 v205;
  uint64_t v207;
  size_t v208;
  __darwin_time_t v209;
  uint64_t v210;
  uint64_t m;
  uint64_t v212;
  _BOOL4 v213;
  uint64_t v214;
  unsigned __int8 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  uint64_t *v226;
  unsigned __int8 v227;
  int v229;
  size_t v230;
  __darwin_time_t tv_sec;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  size_t v240;
  unsigned __int8 v241;
  const char *v242;
  size_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  _QWORD **v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  size_t v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  double v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  void *v297;
  double v298;
  double v299;
  int v300;
  double v301;
  double v302;
  double v303;
  double v304;
  _BOOL4 v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  char v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  _BOOL4 v316;
  void *v317;
  char *v318;
  char *v319;
  _QWORD **v320;
  uint64_t v321;
  uint64_t v322;
  double *v323;
  int v324;
  unint64_t v325;
  int *v326;
  unint64_t v327;
  int v328;
  char *category;
  _BOOL4 categorya;
  uint64_t v331;
  uint64_t v332;
  int v333;
  int v334;
  char *v335;
  char *v336;
  char *v337;
  char *v339;
  __int16 v340;
  timespec v341;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v343;
  const char *v344;
  int v345;
  const char *v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _BYTE object[40];
  double v353;
  _BYTE v354[30];
  __int16 v355;
  _BOOL4 v356;
  __int16 v357;
  int v358;
  __int16 v359;
  int v360;
  void *v361;
  char v362;
  void *v363;
  char v364;
  uint64_t v365;

  v365 = *MEMORY[0x24BDAC8D0];
  v17 = sub_20FDB723C(a2, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a3 + 248), *(_DWORD *)(a3 + 252), *(double *)(a1 + 56));
  if (!*(_BYTE *)(a2 + 216))
  {
    v29 = sub_20FDB8F50(a2, *(_DWORD *)(a1 + 24), (unsigned int **)(a3 + 200));
    v41 = a9;
    if (!v17)
      goto LABEL_33;
    goto LABEL_29;
  }
  v19 = *(_DWORD *)a3 != -1;
  if (*(_DWORD *)a3 == -1)
  {
    v20 = *(_DWORD *)(a3 + 24);
    _ZF = v20 == -1;
    v19 = v20 != -1;
    if (_ZF)
    {
      v21 = *(_DWORD *)(a3 + 48);
      _ZF = v21 == -1;
      v19 = v21 != -1;
      if (_ZF)
      {
        v22 = *(_DWORD *)(a3 + 72);
        _ZF = v22 == -1;
        v19 = v22 != -1;
        if (_ZF)
        {
          v23 = *(_DWORD *)(a3 + 96);
          _ZF = v23 == -1;
          v19 = v23 != -1;
          if (_ZF)
          {
            v24 = *(_DWORD *)(a3 + 120);
            _ZF = v24 == -1;
            v19 = v24 != -1;
            if (_ZF)
            {
              v25 = *(_DWORD *)(a3 + 144);
              _ZF = v25 == -1;
              v19 = v25 != -1;
              if (_ZF)
                v19 = *(_DWORD *)(a3 + 168) != -1;
            }
          }
        }
      }
    }
  }
  v26 = 1.0;
  if (v19)
  {
    v27 = k;
    v28 = a3;
    if (*(_DWORD *)a3)
    {
      v28 = a3 + 24;
      if (*(_DWORD *)(a3 + 24))
      {
        v28 = a3 + 48;
        if (*(_DWORD *)(a3 + 48))
        {
          v28 = a3 + 72;
          if (*(_DWORD *)(a3 + 72))
          {
            v28 = a3 + 96;
            if (*(_DWORD *)(a3 + 96))
            {
              v28 = a3 + 120;
              if (*(_DWORD *)(a3 + 120))
              {
                v28 = a3 + 144;
                if (*(_DWORD *)(a3 + 144))
                {
                  if (*(_DWORD *)(a3 + 168))
                    v28 = a3 + 192;
                  else
                    v28 = a3 + 168;
                }
              }
            }
          }
        }
      }
    }
    sub_20EEA57DC(a3, 0, v28);
    v26 = *(double *)(v28 + 8);
    k = v27;
  }
  LODWORD(v18) = *(_DWORD *)(a1 + 36);
  v29 = sub_20FDB80A0(a2, (unint64_t)(v26 * (double)v18), (unsigned int **)(a3 + 200), *(double *)(a1 + 56));
  v41 = a9;
  if (v17)
  {
LABEL_29:
    if (v41)
      v42 = 14;
    else
      v42 = 7;
    *a10 = v42;
    a10[2] = 0;
    a10[5] = 1;
  }
LABEL_33:
  if (v29)
    a10[3] = 0;
  a10[15] = v41;
  v36.f64[0] = *(float64_t *)(a2 + 224);
  v43 = *(double *)(a1 + 432);
  a10[14] = v36.f64[0] > v43;
  v340 = 0;
  if (!*(_BYTE *)(a4 + 168))
    goto LABEL_156;
  v44 = *(unsigned __int8 *)(k + 56);
  if (*(_BYTE *)(k + 56))
  {
    a10[8] = sub_20F119600(a1, a2, a4, k, a6, &v340, v36, v43, v37, v38, v39, v40);
    if (!*(_BYTE *)(a4 + 168))
      goto LABEL_156;
    v45 = HIBYTE(v340);
    v44 = v340;
  }
  else
  {
    v45 = 0;
  }
  v334 = v44;
  if (v45)
    _ZF = v44 == 0;
  else
    _ZF = 1;
  v47 = !_ZF;
  v335 = (char *)v47;
  v48 = *(_QWORD *)(a3 + 200);
  v49 = *(_QWORD *)(a3 + 208);
  a10[13] = 0;
  if (*(_DWORD *)(a2 + 128) == -1)
    goto LABEL_59;
  if (v48 == v49)
  {
    v51 = 0.0;
    goto LABEL_57;
  }
  v50 = v49 - v48 - 8;
  if (v50 < 8)
  {
    v51 = 0.0;
    v52 = v48;
    do
    {
LABEL_56:
      LODWORD(v36.f64[0]) = *(_DWORD *)(v52 + 4);
      v36.f64[0] = (double)*(unint64_t *)&v36.f64[0];
      v51 = v51 + v36.f64[0];
      v52 += 8;
    }
    while (v52 != v49);
    goto LABEL_57;
  }
  v53 = (v50 >> 3) + 1;
  v52 = v48 + 8 * (v53 & 0x3FFFFFFFFFFFFFFELL);
  v54 = (int *)(v48 + 12);
  v51 = 0.0;
  v55 = v53 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    LODWORD(v36.f64[0]) = *(v54 - 2);
    v56 = *v54;
    v54 += 4;
    LODWORD(v43) = v56;
    v43 = (double)*(unint64_t *)&v43;
    v36.f64[0] = v51 + (double)*(unint64_t *)&v36.f64[0];
    v51 = v36.f64[0] + v43;
    v55 -= 2;
  }
  while (v55);
  if (v53 != (v53 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_56;
LABEL_57:
  if (!*(_BYTE *)(a1 + 960))
    goto LABEL_470;
  v57 = *(double *)(a2 + 88);
  v58 = v57 - *(double *)(a1 + 952);
  if (v58 >= *(double *)(a1 + 360))
  {
    v333 = v45;
    if (*(double *)(a2 + 120) != v57
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 384, (uint64_t)"cva::exactlyEqual(propagated_pose_diff.target_state_timestamp, health_metrics.vio_update_health_metrics.latest_state_timestamp)", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_474;
    }
    v76 = *(_QWORD *)(a1 + 912);
    if (v76)
    {
      v77 = *(_DWORD *)(a2 + 132);
      v78 = *(_QWORD *)(a1 + 904);
      if (v78)
      {
        if (v77 > *(_DWORD *)(*(_QWORD *)(a1 + 872) + 40 * v78 - 40))
          goto LABEL_94;
      }
      else if (v77 > *(_DWORD *)(*(_QWORD *)(a1 + 872)
                                + 8 * ((uint64_t)(*(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872)) >> 3)
                                - 40))
      {
        goto LABEL_94;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 387, (uint64_t)"vision_only_stationary_flag_.empty() || propagated_pose_diff.target_state_id > vision_only_stationary_flag_.back().first", 120, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_474;
      }
      v76 = *(_QWORD *)(a1 + 912);
    }
LABEL_94:
    v79 = v51 / (double)(unint64_t)((v49 - v48) >> 3);
    v80 = (*(_BYTE *)(a2 + 296) & 0x10) != 0;
    v81 = *(double *)(a2 + 96);
    v82 = a8[3].i32[0];
    v83 = *(_QWORD *)(a1 + 904);
    v84 = *(_QWORD *)(a1 + 872);
    v85 = v84 + 40 * v83;
    *(_DWORD *)v85 = *(_DWORD *)(a2 + 132);
    *(_BYTE *)(v85 + 8) = v80;
    *(double *)(v85 + 16) = v79;
    *(double *)(v85 + 24) = v81;
    *(_DWORD *)(v85 + 32) = v82;
    v86 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 880) - v84) >> 3);
    v87 = v83 + 1;
    if (v83 + 1 >= v86)
      v88 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 880) - v84) >> 3);
    else
      v88 = 0;
    *(_QWORD *)(a1 + 904) = v87 - v88;
    v45 = v333;
    if (v76 == v86)
    {
      v89 = *(_QWORD *)(a1 + 896) + 1;
      if (v89 >= v76)
        v90 = v76;
      else
        v90 = 0;
      *(_QWORD *)(a1 + 896) = v89 - v90;
      if (v76 < *(unsigned int *)(a1 + 196))
        goto LABEL_59;
    }
    else
    {
      *(_QWORD *)(a1 + 912) = ++v76;
      if (v76 < *(unsigned int *)(a1 + 196))
        goto LABEL_59;
    }
    v91 = *(_QWORD *)(a1 + 896);
    if (!v76)
    {
      v94 = *(double *)(v84 + 40 * (v91 % v86) + 16);
      v95 = 0.0;
      v96 = NAN;
      v97 = 0.0;
      goto LABEL_126;
    }
    if (v76 == 1)
    {
      v92 = 0;
      v93 = 0;
    }
    else
    {
      v98 = 0;
      v99 = 0;
      v93 = v76 & 0xFFFFFFFFFFFFFFFELL;
      v100 = v76 & 0xFFFFFFFFFFFFFFFELL;
      v101 = *(_QWORD *)(a1 + 896);
      do
      {
        v98 += *(unsigned __int8 *)(v84 + 40 * (v101 % v86) + 8);
        v99 += *(unsigned __int8 *)(v84 + 40 * ((v101 + 1) % v86) + 8);
        v101 += 2;
        v100 -= 2;
      }
      while (v100);
      v92 = v99 + v98;
      if (v76 == v93)
      {
LABEL_113:
        v104 = (double)v92;
        v95 = (double)v76;
        if (v76 >= 2)
        {
          v106 = 0;
          v105 = 0;
          for (i = 1; i != v76; ++i)
          {
            if (*(double *)(v84 + 40 * ((v91 + i) % v86) + 16) < *(double *)(v84 + 40 * ((v106 + v91) % v86) + 16))
            {
              v105 = i;
              v106 = i;
            }
          }
        }
        else
        {
          v105 = 0;
        }
        v96 = v104 / v95;
        v94 = *(double *)(v84 + 40 * ((v105 + v91) % v86) + 16);
        if (v76 >= 2)
        {
          v108 = v76 & 0xFFFFFFFFFFFFFFFELL;
          v97 = 0.0;
          v109 = v76 & 0xFFFFFFFFFFFFFFFELL;
          v110 = *(_QWORD *)(a1 + 896);
          do
          {
            v81 = v97 + *(double *)(v84 + 40 * (v110 % v86) + 16);
            v97 = v81 + *(double *)(v84 + 40 * ((v110 + 1) % v86) + 16);
            v110 += 2;
            v109 -= 2;
          }
          while (v109);
          if (v76 == v108)
          {
LABEL_126:
            if (v87 == v88)
              v113 = v86;
            else
              v113 = v87 - v88;
            v114 = *(double *)(v84 + 40 * v113 - 16);
            LODWORD(v81) = *(_DWORD *)(a1 + 256);
            v332 = k;
            if (v79 < (double)*(unint64_t *)&v81)
            {
              *(_BYTE *)(a1 + 1022) = 1;
              *(_DWORD *)(a1 + 968) = 0;
              sub_20F11C4EC(&v349);
              if (**(int **)(v349 + 56) > 3)
                goto LABEL_284;
              v115 = *(unsigned __int8 *)(v349 + 72);
              v116 = sub_20E8C31DC(v349, "OSLogSurrogateAppender", 1, 0);
              v117 = v116;
              if (!v115 && !v116)
                goto LABEL_284;
              v341.tv_sec = (__darwin_time_t)&v349;
              v341.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
              rep = std::chrono::system_clock::now().__d_.__rep_;
              v343 = 3;
              v344 = "unknown file";
              v345 = 502;
              v347 = 0;
              v348 = 0;
              v346 = "unknown function";
              v118 = *(_QWORD *)v341.tv_sec;
              if (*(char *)(*(_QWORD *)v341.tv_sec + 39) < 0)
              {
                v119 = *(_QWORD *)(v118 + 24);
                category = *(char **)(v118 + 16);
              }
              else
              {
                v119 = *(unsigned __int8 *)(*(_QWORD *)v341.tv_sec + 39);
                category = (char *)(*(_QWORD *)v341.tv_sec + 16);
              }
              v317 = (void *)(*(_QWORD *)v341.tv_sec + 16);
              v321 = *(_QWORD *)v341.tv_sec;
              v327 = v117;
              v324 = v115;
              v139 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)object);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                if (object[24] && (object[23] & 0x80000000) != 0)
                  operator delete(*(void **)object);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v140 = byte_254A4A4F8;
              else
                v140 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v141 = byte_254A4A4F8[23];
              else
                v141 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)object = os_log_create(v140, category);
              v142 = &object[8];
              if (v141 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v141 >= 0x17)
              {
                v143 = v119;
                v144 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v141 | 7) != 0x17)
                  v144 = v141 | 7;
                v145 = v144 + 1;
                v142 = operator new(v144 + 1);
                *(_QWORD *)&object[16] = v141;
                *(_QWORD *)&object[24] = v145 | 0x8000000000000000;
                *(_QWORD *)&object[8] = v142;
                v119 = v143;
              }
              else
              {
                object[31] = v141;
                if (!v141)
                {
LABEL_217:
                  v142[v141] = 0;
                  object[32] = 1;
                  *(double *)&v146 = COERCE_DOUBLE(&v353);
                  if (v119 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  k = v332;
                  if (v119 >= 0x17)
                  {
                    v147 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v119 | 7) != 0x17)
                      v147 = v119 | 7;
                    v148 = v119;
                    v149 = v147 + 1;
                    *(double *)&v146 = COERCE_DOUBLE(operator new(v147 + 1));
                    *(_QWORD *)v354 = v148;
                    *(_QWORD *)&v354[8] = v149 | 0x8000000000000000;
                    v353 = *(double *)&v146;
                    v119 = v148;
                  }
                  else
                  {
                    v354[15] = v119;
                    if (!v119)
                      goto LABEL_225;
                  }
                  memmove(v146, category, v119);
LABEL_225:
                  *((_BYTE *)v146 + v119) = 0;
                  v354[16] = 1;
                  v150 = *(NSObject **)object;
                  if ((v354[15] & 0x80000000) != 0)
                    operator delete(*(void **)&v353);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v327 && *(_QWORD *)(v327 + 24))
                  {
                    v151 = _os_log_pack_size();
                    v152 = (std::__shared_weak_count_vtbl *)operator new(v151, (std::align_val_t)8uLL);
                    v153 = (std::__shared_weak_count *)operator new();
                    v154 = v153;
                    v153->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
                    v153->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v153->__shared_weak_owners_ = 0;
                    v153[1].__vftable = v152;
                    *(_QWORD *)object = v152;
                    *(_QWORD *)&object[8] = v152;
                    *(_QWORD *)&object[16] = v153;
                    do
                      v156 = __ldxr(p_shared_owners);
                    while (__stxr(v156 + 1, p_shared_owners));
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    v353 = 0.0;
                    do
                      v157 = __ldaxr(p_shared_owners);
                    while (__stlxr(v157 - 1, p_shared_owners));
                    if (!v157)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                    v158 = *(_QWORD *)object;
                    v159 = _os_log_pack_fill();
                    *(_DWORD *)v159 = 134217984;
                    *(double *)(v159 + 4) = v79;
                    v160 = operator new();
                    v161 = *(unsigned __int8 *)(v321 + 39);
                    v162 = v317;
                    if ((v161 & 0x80u) != 0)
                    {
                      v162 = *(void **)(v321 + 16);
                      v161 = *(_QWORD *)(v321 + 24);
                    }
                    *(_QWORD *)v160 = v158;
                    *(_OWORD *)(v160 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v160 + 24) = *(_OWORD *)&object[24];
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *(_QWORD *)(v160 + 40) = v162;
                    *(_QWORD *)(v160 + 48) = v161;
                    *(_BYTE *)(v160 + 56) = 1;
                    v350 = 0;
                    v351 = v160;
                    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v327 + 24) + 40))(*(_QWORD *)(v327 + 24), &v351);
                    v163 = v351;
                    v351 = 0;
                    k = v332;
                    v164 = v324;
                    if (v163)
                    {
                      v165 = *(std::__shared_weak_count **)(v163 + 32);
                      if (v165)
                      {
                        v166 = (unint64_t *)&v165->__shared_owners_;
                        do
                          v167 = __ldaxr(v166);
                        while (__stlxr(v167 - 1, v166));
                        if (!v167)
                        {
                          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                          std::__shared_weak_count::__release_weak(v165);
                        }
                      }
                      v168 = *(std::__shared_weak_count **)(v163 + 16);
                      if (v168)
                      {
                        v169 = (unint64_t *)&v168->__shared_owners_;
                        do
                          v170 = __ldaxr(v169);
                        while (__stlxr(v170 - 1, v169));
                        if (!v170)
                        {
                          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                          std::__shared_weak_count::__release_weak(v168);
                        }
                      }
                      MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
                      v171 = v350;
                      v350 = 0;
                      if (v171)
                      {
                        v172 = *(std::__shared_weak_count **)(v171 + 32);
                        if (v172)
                        {
                          v173 = (unint64_t *)&v172->__shared_owners_;
                          do
                            v174 = __ldaxr(v173);
                          while (__stlxr(v174 - 1, v173));
                          if (!v174)
                          {
                            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                            std::__shared_weak_count::__release_weak(v172);
                          }
                        }
                        v175 = *(std::__shared_weak_count **)(v171 + 16);
                        if (v175)
                        {
                          v176 = (unint64_t *)&v175->__shared_owners_;
                          do
                            v177 = __ldaxr(v176);
                          while (__stlxr(v177 - 1, v176));
                          if (!v177)
                          {
                            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                            std::__shared_weak_count::__release_weak(v175);
                          }
                        }
                        MEMORY[0x212BC6398](v171, 0x10F0C40B62ED6C6);
                      }
                    }
                    v178 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v179 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v180 = __ldaxr(v179);
                      while (__stlxr(v180 - 1, v179));
                      if (!v180)
                      {
                        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                        std::__shared_weak_count::__release_weak(v178);
                      }
                    }
                    v181 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v182 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v183 = __ldaxr(v182);
                      while (__stlxr(v183 - 1, v182));
                      if (!v183)
                      {
                        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                        std::__shared_weak_count::__release_weak(v181);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v150, OS_LOG_TYPE_INFO);
                    *(_DWORD *)object = 134217984;
                    *(double *)&object[4] = v79;
                    v184 = (void *)_os_log_send_and_compose_impl();
                    v164 = v324;
                    if (v184)
                      free(v184);
                  }
                  if (v164)
                  {
                    sub_20E8C003C((uint64_t)&v341, "Reset IMU-Camera discrepancy detection due to low texture %f", v79);
                    sub_20E863570((uint64_t)&v341);
                  }
                  sub_20E863570((uint64_t)&v341);
                  v185 = v348;
                  if (v348)
                  {
                    v186 = (unint64_t *)&v348->__shared_owners_;
                    do
                      v187 = __ldaxr(v186);
                    while (__stlxr(v187 - 1, v186));
                    if (!v187)
                    {
                      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                      std::__shared_weak_count::__release_weak(v185);
                    }
                  }
                  goto LABEL_284;
                }
              }
              memmove(v142, v140, v141);
              goto LABEL_217;
            }
            if (!*(_BYTE *)(a1 + 1022))
              goto LABEL_284;
            v120 = *(_DWORD *)(a1 + 968);
            v121 = *(double *)(a1 + 336);
            if (v121 >= (double)v120)
            {
LABEL_139:
              v122 = v120 + 1;
              *(_DWORD *)(a1 + 968) = v122;
              if (v121 <= (double)v122)
              {
                *(_BYTE *)(a1 + 1022) = 0;
                *(_DWORD *)(a1 + 968) = 0;
              }
LABEL_284:
              if (*(double *)(a1 + 360) <= v58 && *(double *)(a1 + 264) >= v97 / v95)
              {
                v188 = *(double *)(a1 + 240) <= v96 && *(double *)(a1 + 208) < v114;
                if (*(double *)(a1 + 248) <= v96 && *(double *)(a1 + 216) < v114)
                  v188 = 1;
              }
              else
              {
                v188 = 0;
              }
              if (!sub_20F11C5E0(a1, v94, v114, v58))
                goto LABEL_317;
              v189 = *(_QWORD *)(a1 + 912);
              v190 = *(_QWORD *)(a1 + 872);
              v191 = *(_QWORD *)(a1 + 896);
              v192 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 880) - v190) >> 3);
              if (v189 >= 2)
              {
                v194 = 0;
                v193 = 0;
                for (j = 1; j != v189; ++j)
                {
                  if (*(_DWORD *)(v190 + 40 * ((v191 + j) % v192) + 32) < *(_DWORD *)(v190
                                                                                     + 40 * ((v194 + v191) % v192)
                                                                                     + 32))
                  {
                    v193 = j;
                    v194 = j;
                  }
                }
              }
              else
              {
                v193 = 0;
              }
              if (*(_DWORD *)(v190 + 40 * ((v193 + v191) % v192) + 32) >= *(_DWORD *)(a1 + 260))
              {
                v196 = *(double *)(a1 + 224) <= v96 && *(double *)(a1 + 200) < v114;
                if (*(double *)(a1 + 232) <= v96 && *(double *)(a1 + 216) < v114)
                  v196 = 1;
              }
              else
              {
                v196 = 0;
              }
              a10[13] = v196;
              if ((_DWORD)v335)
              {
                v197 = *(double *)(a2 + 152);
                v198 = *(double *)(a2 + 48);
                v199 = *(double *)(a2 + 88);
                *(double *)(a1 + 976) = v199;
                *(_BYTE *)(a1 + 984) = 1;
                if (v199 - v199 > *(double *)(a1 + 328))
                  *(_DWORD *)(a1 + 992) = 0;
                if (*(double *)(a1 + 288) <= v96
                  && *(double *)(a1 + 280) <= v114
                  && *(double *)(a1 + 304) > v197
                  && *(double *)(a1 + 296) <= v198)
                {
                  v200 = *(_DWORD *)(a1 + 992) + 1;
                }
                else
                {
                  v200 = 0;
                }
                *(_DWORD *)(a1 + 992) = v200;
                categorya = v200 >= *(_DWORD *)(a1 + 320);
              }
              else
              {
LABEL_317:
                categorya = 0;
              }
              if (*(_QWORD *)(a1 + 904))
              {
                v325 = *(_QWORD *)(a1 + 904);
                v201 = *(_QWORD *)(a1 + 872);
              }
              else
              {
                v201 = *(_QWORD *)(a1 + 872);
                v325 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 880) - v201) >> 3);
              }
              v202 = atomic_load((unsigned __int8 *)&qword_254A621C0);
              if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A621C0))
              {
                v311 = operator new(0x20uLL);
                v311[1] = 0;
                v311[2] = 0;
                *v311 = &off_24C9F8458;
                v311[3] = 0;
                qword_254A621F8 = (uint64_t)(v311 + 3);
                qword_254A62200 = (uint64_t)v311;
                dword_254A62208 = 2;
                __cxa_atexit((void (*)(void *))sub_20F09A968, &qword_254A621F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A621C0);
              }
              v203 = qword_254A621F8;
              v328 = v188;
              if (*(_BYTE *)(qword_254A621F8 + 4) && *(int *)qword_254A621F8 <= 0)
              {
                ++*(_DWORD *)qword_254A621F8;
                goto LABEL_347;
              }
              v322 = v201;
              *(_DWORD *)qword_254A621F8 = 0;
              *(_BYTE *)(v203 + 4) = 1;
              v204 = sub_210219C18();
              v205 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              if (!atomic_load(&qword_254A5A450))
              {
LABEL_345:
                v213 = os_signpost_enabled((os_log_t)*v204);
                v201 = v322;
                if (v213)
                {
                  v214 = *(_QWORD *)(a2 + 48);
                  *(_DWORD *)object = 134218496;
                  *(double *)&object[4] = v96;
                  *(_WORD *)&object[12] = 2048;
                  *(double *)&object[14] = v114;
                  *(_WORD *)&object[22] = 2048;
                  *(_QWORD *)&object[24] = v214;
                  _os_signpost_emit_unreliably_with_name_impl();
                }
LABEL_347:
                v215 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
                if ((v215 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
                {
                  sub_20FCFB524();
                  __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6D9C8);
                }
                v216 = v201 + 40 * (v325 - 1);
                v326 = (int *)(v216 + 32);
                v323 = (double *)(v216 + 16);
                sub_210237040("ICDVS: STR:%f, AVGF:%f, Stereo:%u, ERR:%f, PropVsBAPosERR:%f, PropVsBAOriERR:%f, AvgGyro:%f, vel:%f", (std::string *)object, *(_QWORD *)&v96, *(_QWORD *)(v216 + 16), *(unsigned int *)(v216 + 32), *(_QWORD *)&v114, *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), *(_QWORD *)(a1 + 696), *(_QWORD *)(a2 + 48));
                v217 = sub_20EA5C6C8((uint64_t)object, qword_254A6D9A8);
                if ((object[23] & 0x80000000) != 0)
                  operator delete(*(void **)object);
                v225 = atomic_load((unsigned __int8 *)&qword_254A621C8);
                if ((v225 & 1) == 0)
                {
                  v217 = __cxa_guard_acquire(&qword_254A621C8);
                  if ((_DWORD)v217)
                  {
                    qword_254A621D8 = 0;
                    qword_254A621E0 = 0;
                    v312 = operator new(0x20uLL);
                    v312[1] = 0;
                    v312[2] = 0;
                    *((_BYTE *)v312 + 24) = 0;
                    *v312 = &off_24C9F8CA8;
                    *((_BYTE *)v312 + 28) = 0;
                    qword_254A621D8 = (uint64_t)(v312 + 3);
                    qword_254A621E0 = (uint64_t)v312;
                    __cxa_atexit((void (*)(void *))sub_20F11CEF0, &qword_254A621D8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A621C8);
                  }
                }
                if (!sub_20F11CF58(v217, v218, v219, v220, v221, v222, v223, v224, (int)v335, SHIDWORD(v335), v188, 0, categorya, 0, a10[13]))
                {
LABEL_374:
                  sub_20F11C4EC(&v349);
                  if (**(int **)(v349 + 56) > 2)
                    goto LABEL_462;
                  v236 = *(unsigned __int8 *)(v349 + 72);
                  v237 = sub_20E8C31DC(v349, "OSLogSurrogateAppender", 1, 0);
                  if (!v236 && !v237)
                    goto LABEL_462;
                  v320 = (_QWORD **)v237;
                  v315 = v236;
                  v341.tv_sec = (__darwin_time_t)&v349;
                  v341.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
                  rep = std::chrono::system_clock::now().__d_.__rep_;
                  v343 = 2;
                  v344 = "unknown file";
                  v345 = 483;
                  v347 = 0;
                  v348 = 0;
                  v346 = "unknown function";
                  v238 = *(_QWORD *)(a1 + 696);
                  v316 = sub_20F11C5E0(a1, v94, v114, v58);
                  v239 = *(_QWORD *)v341.tv_sec;
                  v314 = *(_QWORD *)v341.tv_sec;
                  if (*(char *)(*(_QWORD *)v341.tv_sec + 39) < 0)
                  {
                    v240 = *(_QWORD *)(v239 + 24);
                    v337 = *(char **)(v239 + 16);
                  }
                  else
                  {
                    v240 = *(unsigned __int8 *)(*(_QWORD *)v341.tv_sec + 39);
                    v337 = (char *)(*(_QWORD *)v341.tv_sec + 16);
                  }
                  v313 = *(_QWORD *)v341.tv_sec + 16;
                  v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v241 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)object);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                    if (object[24] && (object[23] & 0x80000000) != 0)
                      operator delete(*(void **)object);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v242 = byte_254A4A4F8;
                  else
                    v242 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v243 = byte_254A4A4F8[23];
                  else
                    v243 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)object = os_log_create(v242, v337);
                  v244 = &object[8];
                  if (v243 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v243 >= 0x17)
                  {
                    v245 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v243 | 7) != 0x17)
                      v245 = v243 | 7;
                    v246 = v245 + 1;
                    v244 = operator new(v245 + 1);
                    *(_QWORD *)&object[16] = v243;
                    *(_QWORD *)&object[24] = v246 | 0x8000000000000000;
                    *(_QWORD *)&object[8] = v244;
                    v188 = v328;
                  }
                  else
                  {
                    object[31] = v243;
                    if (!v243)
                    {
LABEL_395:
                      v244[v243] = 0;
                      object[32] = 1;
                      *(double *)&v247 = COERCE_DOUBLE(&v353);
                      if (v240 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      k = v332;
                      if (v240 >= 0x17)
                      {
                        v249 = v188;
                        v250 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v240 | 7) != 0x17)
                          v250 = v240 | 7;
                        v251 = v250 + 1;
                        *(double *)&v247 = COERCE_DOUBLE(operator new(v250 + 1));
                        *(_QWORD *)v354 = v240;
                        *(_QWORD *)&v354[8] = v251 | 0x8000000000000000;
                        v353 = *(double *)&v247;
                        v188 = v249;
                        v248 = v320;
                      }
                      else
                      {
                        v354[15] = v240;
                        v248 = v320;
                        if (!v240)
                          goto LABEL_403;
                      }
                      memmove(v247, v337, v240);
LABEL_403:
                      *((_BYTE *)v247 + v240) = 0;
                      v354[16] = 1;
                      v252 = *(NSObject **)object;
                      if ((v354[15] & 0x80000000) != 0)
                        operator delete(*(void **)&v353);
                      if (object[32] && (object[31] & 0x80000000) != 0)
                        operator delete(*(void **)&object[8]);
                      if (*(_QWORD *)object)
                        os_release(*(void **)object);
                      if (v248 && v248[3])
                      {
                        v253 = _os_log_pack_size();
                        v254 = (std::__shared_weak_count_vtbl *)operator new(v253, (std::align_val_t)8uLL);
                        v255 = (std::__shared_weak_count *)operator new();
                        v256 = v255;
                        v255->__shared_owners_ = 0;
                        v257 = (unint64_t *)&v255->__shared_owners_;
                        v255->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v255->__shared_weak_owners_ = 0;
                        v255[1].__vftable = v254;
                        *(_QWORD *)object = v254;
                        *(_QWORD *)&object[8] = v254;
                        *(_QWORD *)&object[16] = v255;
                        do
                          v258 = __ldxr(v257);
                        while (__stxr(v258 + 1, v257));
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        v353 = 0.0;
                        do
                          v259 = __ldaxr(v257);
                        while (__stlxr(v259 - 1, v257));
                        if (!v259)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v256);
                        }
                        v260 = *(_QWORD *)object;
                        v261 = _os_log_pack_fill();
                        v262 = *(_QWORD *)(a2 + 88);
                        v263 = *v323;
                        v264 = *v326;
                        v265 = *(_QWORD *)(a2 + 152);
                        v266 = *(_QWORD *)(a2 + 48);
                        v267 = a10[13];
                        *(_DWORD *)v261 = 134220800;
                        *(_QWORD *)(v261 + 4) = v262;
                        *(_WORD *)(v261 + 12) = 2048;
                        *(double *)(v261 + 14) = v96;
                        *(_WORD *)(v261 + 22) = 2048;
                        *(double *)(v261 + 24) = v263;
                        *(_WORD *)(v261 + 32) = 1024;
                        *(_DWORD *)(v261 + 34) = v264;
                        *(_WORD *)(v261 + 38) = 2048;
                        *(double *)(v261 + 40) = v114;
                        *(_WORD *)(v261 + 48) = 2048;
                        *(_QWORD *)(v261 + 50) = v265;
                        *(_WORD *)(v261 + 58) = 2048;
                        *(_QWORD *)(v261 + 60) = v238;
                        *(_WORD *)(v261 + 68) = 2048;
                        *(_QWORD *)(v261 + 70) = v266;
                        *(_WORD *)(v261 + 78) = 1024;
                        *(_DWORD *)(v261 + 80) = v316;
                        *(_WORD *)(v261 + 84) = 1024;
                        *(_DWORD *)(v261 + 86) = v328;
                        *(_WORD *)(v261 + 90) = 1024;
                        *(_DWORD *)(v261 + 92) = v267;
                        *(_WORD *)(v261 + 96) = 1024;
                        *(_DWORD *)(v261 + 98) = categorya;
                        v268 = operator new();
                        v269 = *(unsigned __int8 *)(v314 + 39);
                        v270 = v313;
                        if ((v269 & 0x80u) != 0)
                        {
                          v270 = *(_QWORD *)(v314 + 16);
                          v269 = *(_QWORD *)(v314 + 24);
                        }
                        *(_QWORD *)v268 = v260;
                        *(_OWORD *)(v268 + 8) = *(_OWORD *)&object[8];
                        *(_QWORD *)&object[8] = 0;
                        *(_QWORD *)&object[16] = 0;
                        *(_OWORD *)(v268 + 24) = *(_OWORD *)&object[24];
                        *(_QWORD *)&object[24] = 0;
                        *(_QWORD *)&object[32] = 0;
                        *(_QWORD *)(v268 + 40) = v270;
                        *(_QWORD *)(v268 + 48) = v269;
                        *(_BYTE *)(v268 + 56) = 2;
                        v350 = 0;
                        v351 = v268;
                        (*(void (**)(_QWORD *, uint64_t *))(*v320[3] + 40))(v320[3], &v351);
                        v271 = v351;
                        v351 = 0;
                        k = v332;
                        if (v271)
                        {
                          v272 = *(std::__shared_weak_count **)(v271 + 32);
                          if (v272)
                          {
                            v273 = (unint64_t *)&v272->__shared_owners_;
                            do
                              v274 = __ldaxr(v273);
                            while (__stlxr(v274 - 1, v273));
                            if (!v274)
                            {
                              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                              std::__shared_weak_count::__release_weak(v272);
                            }
                          }
                          v275 = *(std::__shared_weak_count **)(v271 + 16);
                          if (v275)
                          {
                            v276 = (unint64_t *)&v275->__shared_owners_;
                            do
                              v277 = __ldaxr(v276);
                            while (__stlxr(v277 - 1, v276));
                            if (!v277)
                            {
                              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                              std::__shared_weak_count::__release_weak(v275);
                            }
                          }
                          MEMORY[0x212BC6398](v271, 0x10F0C40B62ED6C6);
                          v278 = v350;
                          v350 = 0;
                          if (v278)
                          {
                            v279 = *(std::__shared_weak_count **)(v278 + 32);
                            if (v279)
                            {
                              v280 = (unint64_t *)&v279->__shared_owners_;
                              do
                                v281 = __ldaxr(v280);
                              while (__stlxr(v281 - 1, v280));
                              if (!v281)
                              {
                                ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                                std::__shared_weak_count::__release_weak(v279);
                              }
                            }
                            v282 = *(std::__shared_weak_count **)(v278 + 16);
                            if (v282)
                            {
                              v283 = (unint64_t *)&v282->__shared_owners_;
                              do
                                v284 = __ldaxr(v283);
                              while (__stlxr(v284 - 1, v283));
                              if (!v284)
                              {
                                ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                                std::__shared_weak_count::__release_weak(v282);
                              }
                            }
                            MEMORY[0x212BC6398](v278, 0x10F0C40B62ED6C6);
                          }
                        }
                        v285 = *(std::__shared_weak_count **)&object[32];
                        if (*(_QWORD *)&object[32])
                        {
                          v286 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                          do
                            v287 = __ldaxr(v286);
                          while (__stlxr(v287 - 1, v286));
                          if (!v287)
                          {
                            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                            std::__shared_weak_count::__release_weak(v285);
                          }
                        }
                        v288 = *(std::__shared_weak_count **)&object[16];
                        if (*(_QWORD *)&object[16])
                        {
                          v289 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                          do
                            v290 = __ldaxr(v289);
                          while (__stlxr(v290 - 1, v289));
                          if (!v290)
                          {
                            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                            std::__shared_weak_count::__release_weak(v288);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG);
                        v291 = *(_QWORD *)(a2 + 88);
                        v292 = *v323;
                        v293 = *v326;
                        v294 = *(_QWORD *)(a2 + 152);
                        v295 = *(_QWORD *)(a2 + 48);
                        v296 = a10[13];
                        *(_DWORD *)object = 134220800;
                        *(_QWORD *)&object[4] = v291;
                        *(_WORD *)&object[12] = 2048;
                        *(double *)&object[14] = v96;
                        *(_WORD *)&object[22] = 2048;
                        *(double *)&object[24] = v292;
                        *(_WORD *)&object[32] = 1024;
                        *(_DWORD *)&object[34] = v293;
                        *(_WORD *)&object[38] = 2048;
                        v353 = v114;
                        *(_WORD *)v354 = 2048;
                        *(_QWORD *)&v354[2] = v294;
                        *(_WORD *)&v354[10] = 2048;
                        *(_QWORD *)&v354[12] = v238;
                        *(_WORD *)&v354[20] = 2048;
                        *(_QWORD *)&v354[22] = v295;
                        v355 = 1024;
                        v356 = v316;
                        v357 = 1024;
                        v358 = v188;
                        v359 = 1024;
                        v360 = v296;
                        LOWORD(v361) = 1024;
                        *(_DWORD *)((char *)&v361 + 2) = categorya;
                        v297 = (void *)_os_log_send_and_compose_impl();
                        if (v297)
                          free(v297);
                      }
                      if (v315)
                      {
                        v298 = *(double *)(a2 + 88);
                        v299 = *v323;
                        v300 = *v326;
                        v301 = *(double *)(a2 + 152);
                        v302 = *(double *)(a1 + 696);
                        v303 = v94;
                        v304 = *(double *)(a2 + 48);
                        v305 = sub_20F11C5E0(a1, v303, v114, v58);
                        sub_20E8C003C((uint64_t)&v341, "Time: %f ICDVS: STR:%f, AVGF:%f, Stereo:%u, ERR:%f, PropVsBAOriERR:%f, AvgGyro:%f, vel:%f  should: %d drift: [%d | %d | %d]", v298, v96, v299, v300, v114, v301, v302, v304, v305, v328, a10[13], categorya);
                        sub_20E863570((uint64_t)&v341);
                      }
                      sub_20E863570((uint64_t)&v341);
                      v306 = v348;
                      LOBYTE(v188) = v328;
                      if (v348)
                      {
                        v307 = (unint64_t *)&v348->__shared_owners_;
                        do
                          v308 = __ldaxr(v307);
                        while (__stlxr(v308 - 1, v307));
                        if (!v308)
                        {
                          ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                          std::__shared_weak_count::__release_weak(v306);
                        }
                      }
LABEL_462:
                      if (a10[13])
                        v309 = 1;
                      else
                        v309 = v188;
                      if (categorya)
                        v309 = 1;
                      v45 = v333;
                      a10[10] = v309;
                      if (!*(_BYTE *)(a4 + 168))
                        goto LABEL_156;
                      goto LABEL_60;
                    }
                  }
                  memmove(v244, v242, v243);
                  goto LABEL_395;
                }
                v226 = sub_210219C18();
                v227 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                if ((v227 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                {
                  __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DDD0);
                }
                if (!atomic_load(&qword_254A5A450))
                {
LABEL_372:
                  if (os_signpost_enabled((os_log_t)*v226))
                  {
                    v235 = a10[13];
                    *(_DWORD *)object = 67109888;
                    *(_DWORD *)&object[4] = (_DWORD)v335;
                    *(_WORD *)&object[8] = 1024;
                    *(_DWORD *)&object[10] = v188;
                    *(_WORD *)&object[14] = 1024;
                    *(_DWORD *)&object[16] = categorya;
                    *(_WORD *)&object[20] = 1024;
                    *(_DWORD *)&object[22] = v235;
                    _os_signpost_emit_unreliably_with_name_impl();
                  }
                  goto LABEL_374;
                }
                v229 = a10[13];
                *(_DWORD *)object = 67109888;
                *(_DWORD *)&object[4] = (_DWORD)v335;
                *(_WORD *)&object[8] = 1024;
                *(_DWORD *)&object[10] = v188;
                *(_WORD *)&object[14] = 1024;
                *(_DWORD *)&object[16] = categorya;
                *(_WORD *)&object[20] = 1024;
                *(_DWORD *)&object[22] = v229;
                v319 = (char *)_os_log_send_and_compose_impl();
                v230 = strlen(v319);
                v341.tv_sec = 0;
                pthread_threadid_np(0, (__uint64_t *)&v341);
                tv_sec = v341.tv_sec;
                timespec_get(&v341, 1);
                sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v226 + 1), (__int128 *)(v226 + 5), "ICDVS: IMUSt:%{BOOL}d, DL:%{BOOL}d, DH:%{BOOL}d, DMVP:%{BOOL}d", 0x3EuLL, v319, v230, tv_sec, &v341);
                std::mutex::lock(&stru_254A5A410);
                v232 = qword_254A5A458;
                v233 = unk_254A5A460;
                for (k = v332; v232 != v233; v232 += 40)
                {
                  v234 = *(_QWORD *)(v232 + 32);
                  if (!v234)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v234 + 48))(v234, object);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (v364 < 0)
                {
                  operator delete(v363);
                  v188 = v328;
                  if ((v362 & 0x80000000) == 0)
                  {
LABEL_359:
                    if (!BYTE2(v358))
                    {
LABEL_365:
                      if (v354[8] && (v354[7] & 0x80000000) != 0)
                        operator delete(*(void **)&object[32]);
                      if ((object[31] & 0x80000000) != 0)
                        operator delete(*(void **)&object[8]);
                      if (v319)
                        free(v319);
                      goto LABEL_372;
                    }
LABEL_363:
                    if (SBYTE1(v358) < 0)
                      operator delete(*(void **)&v354[16]);
                    goto LABEL_365;
                  }
                }
                else
                {
                  v188 = v328;
                  if ((v362 & 0x80000000) == 0)
                    goto LABEL_359;
                }
                operator delete(v361);
                if (!BYTE2(v358))
                  goto LABEL_365;
                goto LABEL_363;
              }
              v207 = *(_QWORD *)(a2 + 48);
              *(_DWORD *)object = 134218496;
              *(double *)&object[4] = v96;
              *(_WORD *)&object[12] = 2048;
              *(double *)&object[14] = v114;
              *(_WORD *)&object[22] = 2048;
              *(_QWORD *)&object[24] = v207;
              v318 = (char *)_os_log_send_and_compose_impl();
              v208 = strlen(v318);
              v341.tv_sec = 0;
              pthread_threadid_np(0, (__uint64_t *)&v341);
              v209 = v341.tv_sec;
              timespec_get(&v341, 1);
              sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v204 + 1), (__int128 *)(v204 + 5), "[Stationary drift] Stationary ratio:%f, Pos. Error:%f,  Velocity:%f", 0x43uLL, v318, v208, v209, &v341);
              std::mutex::lock(&stru_254A5A410);
              v210 = qword_254A5A458;
              for (m = unk_254A5A460; v210 != m; v210 += 40)
              {
                v212 = *(_QWORD *)(v210 + 32);
                if (!v212)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v212 + 48))(v212, object);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (v364 < 0)
              {
                operator delete(v363);
                k = v332;
                if ((v362 & 0x80000000) == 0)
                {
LABEL_331:
                  if (!BYTE2(v358))
                  {
LABEL_338:
                    if (v354[8] && (v354[7] & 0x80000000) != 0)
                      operator delete(*(void **)&object[32]);
                    if ((object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
                    if (v318)
                      free(v318);
                    goto LABEL_345;
                  }
LABEL_336:
                  if (SBYTE1(v358) < 0)
                    operator delete(*(void **)&v354[16]);
                  goto LABEL_338;
                }
              }
              else
              {
                k = v332;
                if ((v362 & 0x80000000) == 0)
                  goto LABEL_331;
              }
              operator delete(v361);
              if (!BYTE2(v358))
                goto LABEL_338;
              goto LABEL_336;
            }
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TrackingStatusClassifier.cpp", 505, (uint64_t)"num_states_since_last_low_texture_ <= config_.min_num_states_to_wait_after_low_texture", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v120 = *(_DWORD *)(a1 + 968);
              v121 = *(double *)(a1 + 336);
              goto LABEL_139;
            }
LABEL_474:
            abort();
          }
        }
        else
        {
          v108 = 0;
          v97 = 0.0;
        }
        v111 = v76 - v108;
        v112 = v108 + v91;
        do
        {
          v81 = *(double *)(v84 + 40 * (v112 % v86) + 16);
          v97 = v97 + v81;
          ++v112;
          --v111;
        }
        while (v111);
        goto LABEL_126;
      }
    }
    v102 = v76 - v93;
    v103 = v93 + v91;
    do
    {
      v92 += *(unsigned __int8 *)(v84 + 40 * (v103 % v86) + 8);
      ++v103;
      --v102;
    }
    while (v102);
    goto LABEL_113;
  }
LABEL_59:
  a10[10] = 0;
  if (!*(_BYTE *)(a4 + 168))
    goto LABEL_156;
LABEL_60:
  if (v45 && !a10[13])
  {
    if (!*(_BYTE *)(a1 + 440))
    {
      v64 = 0;
LABEL_155:
      a10[9] = v64;
      goto LABEL_156;
    }
    v59 = 0;
    if (v334)
    {
      v60 = vaddvq_s32(a8[3]);
      _CF = fabs(*(double *)(a2 + 64)) < *(double *)(a1 + 312) || v60 >= *(_DWORD *)(a1 + 40);
      if (!_CF && *(_DWORD *)(a1 + 44) > *(_DWORD *)(a2 + 196))
        v59 = *(_DWORD *)(a1 + 996) + 1;
    }
    v331 = k;
    *(_DWORD *)(a1 + 996) = v59;
    v63 = *(_DWORD *)(a1 + 320);
    v64 = v59 >= v63;
    v65 = atomic_load((unsigned __int8 *)&qword_254A621D0);
    if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A621D0))
    {
      qword_254A621E8 = 0;
      qword_254A621F0 = 0;
      v310 = operator new(0x20uLL);
      v310[1] = 0;
      v310[2] = 0;
      *v310 = &off_24C9F6898;
      *((_WORD *)v310 + 12) = 0;
      qword_254A621E8 = (uint64_t)(v310 + 3);
      qword_254A621F0 = (uint64_t)v310;
      __cxa_atexit((void (*)(void *))sub_20EFF38D8, &qword_254A621E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A621D0);
    }
    v66 = v59 >= v63;
    if (!sub_20EFF3940((BOOL **)&qword_254A621E8, 0, v30, v31, v32, v33, v34, v35, v66))
    {
LABEL_154:
      k = v331;
      goto LABEL_155;
    }
    v67 = sub_210219C18();
    v68 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v69 = atomic_load(&qword_254A5A450);
    v70 = &xmmword_2102EF000;
    if (!v69)
    {
LABEL_152:
      if (os_signpost_enabled((os_log_t)*v67))
      {
        *(_DWORD *)object = *((_QWORD *)v70 + 7);
        *(_DWORD *)&object[4] = v66;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_154;
    }
    v336 = (char *)v67;
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = v66;
    v339 = (char *)_os_log_send_and_compose_impl();
    v71 = strlen(v339);
    v341.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v341);
    v72 = v341.tv_sec;
    timespec_get(&v341, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v67 + 1), (__int128 *)(v67 + 5), "Drift VIO/IMU discrepancy camera occlusion: %d", 0x2EuLL, v339, v71, v72, &v341);
    std::mutex::lock(&stru_254A5A410);
    v73 = qword_254A5A458;
    for (n = unk_254A5A460; v73 != n; v73 += 40)
    {
      v75 = *(_QWORD *)(v73 + 32);
      if (!v75)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v75 + 48))(v75, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v364 < 0)
    {
      operator delete(v363);
      v67 = (uint64_t *)v336;
      v70 = &xmmword_2102EF000;
      if ((v362 & 0x80000000) == 0)
      {
LABEL_82:
        if (!BYTE2(v358))
        {
LABEL_145:
          if (v354[8] && (v354[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v339)
            free(v339);
          goto LABEL_152;
        }
LABEL_143:
        if (SBYTE1(v358) < 0)
          operator delete(*(void **)&v354[16]);
        goto LABEL_145;
      }
    }
    else
    {
      v67 = (uint64_t *)v336;
      v70 = &xmmword_2102EF000;
      if ((v362 & 0x80000000) == 0)
        goto LABEL_82;
    }
    operator delete(v361);
    if (!BYTE2(v358))
      goto LABEL_145;
    goto LABEL_143;
  }
LABEL_156:
  v123 = 0;
  if (!*(_BYTE *)(a1 + 424) || !*(_BYTE *)(a7 + 160))
  {
LABEL_172:
    a10[12] = 0;
    if (!*(_BYTE *)(a1 + 425))
      goto LABEL_187;
    goto LABEL_173;
  }
  if (!*(_BYTE *)(a1 + 960))
LABEL_470:
    sub_20E866B34();
  if (*(double *)(a2 + 88) - *(double *)(a1 + 952) < *(double *)(a1 + 384))
  {
    v123 = 0;
    a10[12] = 0;
    if (!*(_BYTE *)(a1 + 425))
      goto LABEL_187;
    goto LABEL_173;
  }
  if (*(_DWORD *)(a7 + 148) <= *(_DWORD *)(a1 + 380))
  {
    v124 = 0;
    *(_DWORD *)(a1 + 1012) = 0;
    if (*(double *)(a2 + 8) <= *(double *)(a1 + 400))
    {
LABEL_164:
      v125 = 0;
      *(_DWORD *)(a1 + 1016) = 0;
      v126 = *(_DWORD *)(a1 + 376);
      if (*(_BYTE *)(k + 56))
        goto LABEL_165;
LABEL_170:
      v133 = 1;
      if (v124 >= v126)
        goto LABEL_183;
      goto LABEL_171;
    }
  }
  else
  {
    v124 = *(_DWORD *)(a1 + 1012) + 1;
    *(_DWORD *)(a1 + 1012) = v124;
    if (*(double *)(a2 + 8) <= *(double *)(a1 + 400))
      goto LABEL_164;
  }
  v125 = *(_DWORD *)(a1 + 1016) + 1;
  *(_DWORD *)(a1 + 1016) = v125;
  v126 = *(_DWORD *)(a1 + 376);
  if (!*(_BYTE *)(k + 56))
    goto LABEL_170;
LABEL_165:
  _Q1 = *(_OWORD *)(k + 8);
  _D3 = *(_QWORD *)(k + 16);
  __asm { FMLA            D2, D3, V1.D[1] }
  v132 = *(double *)(a1 + 416);
  if (sqrt(_D2 + *(double *)(k + 24) * *(double *)(k + 24)) <= v132)
  {
    v133 = *(double *)(a2 + 56) <= v132;
    if (v124 >= v126)
      goto LABEL_183;
    goto LABEL_171;
  }
  v133 = 0;
  if (v124 < v126)
  {
LABEL_171:
    v123 = 0;
    goto LABEL_172;
  }
LABEL_183:
  v123 = v125 >= *(_DWORD *)(a1 + 408) && v133;
  a10[12] = v123;
  if (!*(_BYTE *)(a1 + 425))
  {
LABEL_187:
    a10[11] = 0;
    if (!v123)
      goto LABEL_188;
    goto LABEL_178;
  }
LABEL_173:
  if (!*(_BYTE *)(a7 + 160))
    goto LABEL_187;
  if (*(_DWORD *)(a7 + 148) <= *(_DWORD *)(a1 + 396) && *(_DWORD *)(a2 + 200) < *(_DWORD *)(a1 + 28))
  {
    v134 = *(_DWORD *)(a1 + 1008) + 1;
    *(_DWORD *)(a1 + 1008) = v134;
    _CF = v134 >= *(_DWORD *)(a1 + 392);
    a10[11] = _CF;
    if (!_CF)
      goto LABEL_177;
LABEL_180:
    v135 = 12;
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1008) = 0;
  v136 = *(_DWORD *)(a1 + 392);
  a10[11] = v136 == 0;
  if (!v136)
    goto LABEL_180;
LABEL_177:
  if (v123)
  {
LABEL_178:
    v135 = 11;
LABEL_181:
    *a10 = v135;
    a10[2] = 0;
    v137 = a10 + 3;
    goto LABEL_199;
  }
LABEL_188:
  if (a10[10])
  {
    if (a10[13])
      v138 = 16;
    else
      v138 = 10;
  }
  else if (a10[8])
  {
    v138 = 9;
  }
  else if (a10[9])
  {
    v138 = 17;
  }
  else
  {
    if (!a10[14])
      return;
    v138 = 13;
  }
  *a10 = v138;
  v137 = a10 + 2;
LABEL_199:
  *v137 = 0;
}

void sub_20F119234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F11927C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A621C8);
  _Unwind_Resume(a1);
}

void sub_20F119294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F1192AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A621C0);
  _Unwind_Resume(a1);
}

void sub_20F1192C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A621D0);
  _Unwind_Resume(a1);
}

void sub_20F1192DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E86E8C4(&a46);
  sub_20E86E8C4(&a45);
  sub_20E86E658((uint64_t)&a47);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F119350()
{
  JUMPOUT(0x20F119358);
}

void sub_20F119384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F119398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *object,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a54 && a53 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F1193D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F1193EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *object,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a54 && a53 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F119420(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F119430()
{
  JUMPOUT(0x20F1194A8);
}

void sub_20F11944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a67;
  void *a68;
  char a72;
  void *a73;
  char a74;

  if (a74 < 0)
  {
    operator delete(a73);
    if ((a72 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a72 & 0x80000000) == 0)
  {
LABEL_3:
    if (!a67)
      goto LABEL_9;
LABEL_7:
    if (a66 < 0)
      operator delete(a61);
LABEL_9:
    if (a60 && a59 < 0)
      operator delete(a54);
    if (a53 < 0)
      operator delete(__p);
    if (!a25)
      _Unwind_Resume(a1);
    free(a25);
    _Unwind_Resume(a1);
  }
  operator delete(a68);
  if (!a67)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20F119600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, float64x2_t a7, double a8, double a9, double a10, double a11, float64x2_t a12)
{
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v16;
  double v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  const char *v33;
  unsigned int v34;
  float64x2_t *v35;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  unint64_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  const char *v69;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  _BYTE *v73;
  unint64_t v74;
  const char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  size_t v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  double v145;
  unint64_t v146;
  double v147;
  double v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v157;
  double v158;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  double v166;
  double v168;
  unint64_t v172;
  double v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  double v177;
  double v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  double v182;
  float64x2_t v183;
  double v184;
  double v185;
  unsigned __int8 v186;
  const char *v187;
  size_t v188;
  _BYTE *v189;
  unint64_t v190;
  const char *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  unint64_t *p_shared_owners;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  double v236;
  double v237;
  double v238;
  double v240;
  int v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  unint64_t v249;
  double v250;
  double v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  double v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  unint64_t v260;
  double v262;
  double v263;
  unsigned int v264;
  double v265;
  unsigned int v266;
  double v267;
  unsigned int v268;
  double v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  __int128 v273;
  unint64_t v274;
  unint64_t v275;
  _BOOL4 v278;
  double v279;
  _BOOL4 v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  const char *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  char *v291;
  unsigned __int8 v292;
  const char *v293;
  size_t v294;
  _BYTE *v295;
  unint64_t v296;
  const char *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE *v303;
  uint64_t v304;
  uint64_t v305;
  NSObject *v306;
  size_t v307;
  std::__shared_weak_count_vtbl *v308;
  std::__shared_weak_count *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  char *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  void *v339;
  unint64_t *v340;
  unsigned __int8 v342;
  uint64_t v343;
  const char *v344;
  NSObject *tv_sec;
  const char *v346;
  uint64_t *v347;
  unsigned __int8 v348;
  char *v350;
  size_t v351;
  __darwin_time_t v352;
  uint64_t v353;
  uint64_t i;
  uint64_t v355;
  uint64_t *v356;
  unsigned __int8 v357;
  char *v359;
  size_t v360;
  __darwin_time_t v361;
  uint64_t v362;
  uint64_t j;
  uint64_t v364;
  int v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  unsigned __int8 v371;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v372;
  const char *v373;
  NSObject *v374;
  int v375;
  unint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  const char *v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  char *v387;
  unsigned __int8 v388;
  uint64_t v389;
  const char *v390;
  NSObject *v391;
  const char *v392;
  uint64_t *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  _BOOL4 v397;
  uint64_t v398;
  _BOOL4 v399;
  const char *v400;
  uint64_t *v401;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v402;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v403;
  int v404;
  const char *v405;
  int v406;
  const char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410[2];
  char v411;
  uint64_t v412;
  char *category;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  timespec v417;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v419;
  const char *v420;
  uint64_t v421;
  const char *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  _BYTE object[48];
  size_t v426;
  unint64_t v427;
  void *v428;
  char v429;
  char v430;
  void *v431;
  char v432;
  void *v433;
  char v434;
  uint64_t v435;

  v435 = *MEMORY[0x24BDAC8D0];
  v16 = *(double *)a4;
  if (!*(_BYTE *)(a1 + 480))
  {
    v26 = 0;
    *(double *)(a1 + 472) = v16;
    *(_BYTE *)(a1 + 480) = 1;
    return v26;
  }
  v17 = v16 - *(double *)(a1 + 472);
  if (v17 < *(double *)(a1 + 160))
  {
    if (v17 < 0.001)
    {
      sub_20F11C4EC(&v415);
      if (**((int **)v415 + 7) > 2)
        return 0;
      v18 = *((unsigned __int8 *)v415 + 72);
      v19 = sub_20E8C31DC((uint64_t)v415, "OSLogSurrogateAppender", 1, 0);
      v20 = v19;
      if (!v18 && v19 == 0)
        return 0;
      v417.tv_sec = (__darwin_time_t)&v415;
      v417.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v419 = 2;
      v420 = "unknown file";
      LODWORD(v421) = 708;
      v423 = 0;
      v424 = 0;
      v422 = "unknown function";
      v22 = *(_QWORD *)v417.tv_sec;
      v23 = *(_QWORD *)v417.tv_sec + 16;
      if (*(char *)(*(_QWORD *)v417.tv_sec + 39) < 0)
      {
        v25 = *(const char **)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
      }
      else
      {
        v24 = *(unsigned __int8 *)(*(_QWORD *)v417.tv_sec + 39);
        v25 = (const char *)(*(_QWORD *)v417.tv_sec + 16);
      }
      v186 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v187 = byte_254A4A4F8;
      else
        v187 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v188 = byte_254A4A4F8[23];
      else
        v188 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v187, v25);
      v189 = &object[8];
      if (v188 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v188 >= 0x17)
      {
        v190 = v20;
        v191 = v25;
        v192 = v22;
        v193 = v18;
        v194 = v23;
        v195 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v188 | 7) != 0x17)
          v195 = v188 | 7;
        v196 = v195 + 1;
        v189 = operator new(v195 + 1);
        *(_QWORD *)&object[16] = v188;
        *(_QWORD *)&object[24] = v196 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v189;
        v23 = v194;
        v18 = v193;
        v22 = v192;
        v25 = v191;
        v20 = v190;
      }
      else
      {
        object[31] = v188;
        if (!v188)
        {
LABEL_199:
          v189[v188] = 0;
          object[32] = 1;
          v197 = &object[40];
          if (v24 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v24 >= 0x17)
          {
            v198 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v198 = v24 | 7;
            v199 = v198 + 1;
            v197 = operator new(v198 + 1);
            v426 = v24;
            v427 = v199 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v197;
          }
          else
          {
            HIBYTE(v427) = v24;
            if (!v24)
              goto LABEL_207;
          }
          memmove(v197, v25, v24);
LABEL_207:
          v197[v24] = 0;
          LOBYTE(v428) = 1;
          v200 = *(NSObject **)object;
          if (SHIBYTE(v427) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v20 && *(_QWORD *)(v20 + 24))
          {
            v201 = _os_log_pack_size();
            v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
            v203 = (std::__shared_weak_count *)operator new();
            v204 = v203;
            v203->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v203->__shared_owners_;
            v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v203->__shared_weak_owners_ = 0;
            v203[1].__vftable = v202;
            *(_QWORD *)object = v202;
            *(_QWORD *)&object[8] = v202;
            *(_QWORD *)&object[16] = v203;
            do
              v206 = __ldxr(p_shared_owners);
            while (__stxr(v206 + 1, p_shared_owners));
            memset(&object[24], 0, 24);
            do
              v207 = __ldaxr(p_shared_owners);
            while (__stlxr(v207 - 1, p_shared_owners));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v204);
            }
            v208 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v209 = operator new();
            v210 = *(unsigned __int8 *)(v22 + 39);
            if ((v210 & 0x80u) == 0)
              v211 = v23;
            else
              v211 = *(_QWORD *)(v22 + 16);
            if ((v210 & 0x80u) != 0)
              v210 = *(_QWORD *)(v22 + 24);
            *(_QWORD *)v209 = v208;
            *(_OWORD *)(v209 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v209 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v209 + 40) = v211;
            *(_QWORD *)(v209 + 48) = v210;
            *(_BYTE *)(v209 + 56) = 2;
            v410[0] = 0;
            v401 = (uint64_t *)v209;
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v401);
            v212 = v401;
            v401 = 0;
            if (v212)
            {
              v213 = (std::__shared_weak_count *)v212[4];
              if (v213)
              {
                v214 = (unint64_t *)&v213->__shared_owners_;
                do
                  v215 = __ldaxr(v214);
                while (__stlxr(v215 - 1, v214));
                if (!v215)
                {
                  ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                  std::__shared_weak_count::__release_weak(v213);
                }
              }
              v216 = (std::__shared_weak_count *)v212[2];
              if (v216)
              {
                v217 = (unint64_t *)&v216->__shared_owners_;
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                  std::__shared_weak_count::__release_weak(v216);
                }
              }
              MEMORY[0x212BC6398](v212, 0x10F0C40B62ED6C6);
              v219 = v410[0];
              v410[0] = 0;
              if (v219)
              {
                v220 = (std::__shared_weak_count *)*((_QWORD *)v219 + 4);
                if (v220)
                {
                  v221 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v222 = __ldaxr(v221);
                  while (__stlxr(v222 - 1, v221));
                  if (!v222)
                  {
                    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                    std::__shared_weak_count::__release_weak(v220);
                  }
                }
                v223 = (std::__shared_weak_count *)*((_QWORD *)v219 + 2);
                if (v223)
                {
                  v224 = (unint64_t *)&v223->__shared_owners_;
                  do
                    v225 = __ldaxr(v224);
                  while (__stlxr(v225 - 1, v224));
                  if (!v225)
                  {
                    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                    std::__shared_weak_count::__release_weak(v223);
                  }
                }
                MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
              }
            }
            v226 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v227 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v228 = __ldaxr(v227);
              while (__stlxr(v228 - 1, v227));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
              }
            }
            v229 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v230 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
              }
            }
          }
          else
          {
            os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v232 = (void *)_os_log_send_and_compose_impl();
            if (v232)
              free(v232);
          }
          if (v18)
          {
            sub_20E8C003C((uint64_t)&v417, "[TrackingStatusClassifier] Invalid time delta between measurements");
            sub_20E863570((uint64_t)&v417);
          }
          sub_20E863570((uint64_t)&v417);
          v233 = v424;
          if (!v424)
            return 0;
          v234 = (unint64_t *)&v424->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          goto LABEL_410;
        }
      }
      memmove(v189, v187, v188);
      goto LABEL_199;
    }
    v34 = vcvtad_u64_f64(*(double *)(a1 + 152) / v17);
    if (v34 && *(_QWORD *)(a1 + 184) == v34)
    {
      v35 = (float64x2_t *)(a1 + 592);
      a12.f64[0] = *(float64_t *)(a3 + 112);
      _Q6 = *(float64x2_t *)(a3 + 96);
      a7.f64[0] = *(float64_t *)(a5 + 16);
      _Q4 = *(float64x2_t *)a5;
      _D2 = *(_QWORD *)(a5 + 8);
      __asm { FMLA            D1, D2, V6.D[1] }
      _Q3 = vmulq_f64(_Q4, _Q4);
      __asm { FMLA            D3, D2, V4.D[1] }
      _Q3.f64[0] = (_D1 + a12.f64[0] * a7.f64[0]) / (_Q3.f64[0] + a7.f64[0] * a7.f64[0]);
      v44 = vmulq_f64(a7, _Q3);
      v45 = vmulq_n_f64(*(float64x2_t *)a5, _Q3.f64[0]);
      v46 = vsubq_f64(a12, v44);
      _Q5 = vsubq_f64(_Q6, v45);
      v48 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      v49 = *(double *)(a1 + 584) + 1.0;
      *(double *)(a1 + 584) = v49;
      v12.f64[0] = *(float64_t *)(a1 + 608);
      v50 = vaddq_f64(v12, v46);
      v51 = vaddq_f64(*(float64x2_t *)(a1 + 592), _Q5);
      *(float64x2_t *)(a1 + 592) = v51;
      *(float64_t *)(a1 + 608) = v50.f64[0];
      v12.f64[0] = *(float64_t *)(a1 + 632);
      v52 = vmlaq_f64(v12, v46, v46);
      v53 = vmlaq_f64(*(float64x2_t *)(a1 + 616), _Q5, _Q5);
      *(float64x2_t *)(a1 + 616) = v53;
      *(float64_t *)(a1 + 632) = v52.f64[0];
      v54 = *(_QWORD *)(a1 + 528);
      v55 = *(_QWORD *)(a1 + 488);
      v56 = (*(_QWORD *)(a1 + 496) - v55) >> 3;
      if (v54 >= v56)
      {
        v13.f64[0] = *(float64_t *)(v55 + 8 * *(_QWORD *)(a1 + 512));
        *(double *)(a1 + 584) = v49 - v13.f64[0];
        v57 = *(_QWORD *)(a1 + 536) + 24 * *(_QWORD *)(a1 + 560);
        v58 = *(float64x2_t *)v57;
        v14.f64[0] = *(float64_t *)(v57 + 16);
        *(_QWORD *)&v51.f64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
        *v35 = vmlsq_lane_f64(v51, *(float64x2_t *)v57, v13.f64[0], 0);
        *(_QWORD *)(a1 + 608) = *(_OWORD *)&vmlsq_f64(v50, v13, v14);
        *(_QWORD *)&v53.f64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        *(float64x2_t *)(a1 + 616) = vmlsq_lane_f64(v53, vmulq_f64(v58, v58), v13.f64[0], 0);
        *(_QWORD *)(a1 + 632) = *(_OWORD *)&vmlsq_f64(v52, v13, vmulq_f64(v14, v14));
      }
      v59 = *(_QWORD *)(a1 + 520);
      *(_QWORD *)(v55 + 8 * v59) = 0x3FF0000000000000;
      v60 = v59 + 1;
      if (v59 + 1 >= v56)
        v61 = v56;
      else
        v61 = 0;
      *(_QWORD *)(a1 + 520) = v60 - v61;
      if (v54 == v56)
      {
        v62 = *(_QWORD *)(a1 + 512) + 1;
        if (v62 < v54)
          v54 = 0;
        *(_QWORD *)(a1 + 512) = v62 - v54;
      }
      else
      {
        *(_QWORD *)(a1 + 528) = v54 + 1;
      }
      v135 = *(_QWORD *)(a1 + 536) + 24 * *(_QWORD *)(a1 + 568);
      *(float64_t *)(v135 + 16) = v46.f64[0];
      *(_QWORD *)&_Q5.f64[1] = v48;
      *(float64x2_t *)v135 = _Q5;
      v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
      v137 = *(_QWORD *)(a1 + 568) + 1;
      if (v137 >= v136)
        v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
      else
        v138 = 0;
      *(_QWORD *)(a1 + 568) = v137 - v138;
      v139 = *(_QWORD *)(a1 + 576);
      if (v139 == v136)
      {
        v140 = *(_QWORD *)(a1 + 560) + 1;
        if (v140 >= v136)
          v141 = v136;
        else
          v141 = 0;
        *(_QWORD *)(a1 + 560) = v140 - v141;
      }
      else
      {
        v136 = v139 + 1;
        *(_QWORD *)(a1 + 576) = v139 + 1;
      }
      _Q6 = *(_OWORD *)(a4 + 8);
      _D16 = *(_QWORD *)(a4 + 16);
      __asm { FMLA            D7, D16, V6.D[1] }
      v145 = sqrt(_D7 + *(double *)(a4 + 24) * *(double *)(a4 + 24));
      v146 = *(_QWORD *)(a1 + 688);
      v147 = (double)v146;
      v148 = *(double *)(a1 + 696) * (double)v146;
      *(double *)(a1 + 696) = v148;
      v149 = *(_QWORD *)(a1 + 648);
      v150 = (*(_QWORD *)(a1 + 656) - v149) >> 3;
      if (v146 >= v150)
      {
        v151 = *(_QWORD *)(a1 + 680);
        if (!v151)
          v151 = (*(_QWORD *)(a1 + 656) - v149) >> 3;
        *(double *)(a1 + 696) = v148 - *(double *)(v149 + 8 * v151 - 8);
      }
      v152 = *(_QWORD *)(a1 + 672);
      if (!v152)
        v152 = v150;
      v153 = v152 - 1;
      *(_QWORD *)(a1 + 672) = v153;
      *(double *)(v149 + 8 * v153) = v145;
      if (v146 == v150)
      {
        if (*(_QWORD *)(a1 + 680))
          v146 = *(_QWORD *)(a1 + 680);
        *(_QWORD *)(a1 + 680) = v146 - 1;
      }
      else
      {
        v154 = v146 + 1;
        *(_QWORD *)(a1 + 688) = v154;
        v147 = (double)v154;
      }
      *(double *)(a1 + 696) = (v145 + *(double *)(a1 + 696)) / v147;
      _Q6 = *(float64x2_t *)(a4 + 32);
      _Q7 = vmulq_f64(_Q6, _Q6);
      _D16 = *(_QWORD *)(a4 + 40);
      __asm { FMLA            D7, D16, V6.D[1] }
      _Q5.f64[0] = sqrt(_Q7.f64[0] + *(double *)(a4 + 48) * *(double *)(a4 + 48));
      v157 = *(_QWORD *)(a1 + 744);
      v158 = (double)v157;
      _Q7.f64[0] = *(double *)(a1 + 752) * (double)v157;
      *(float64_t *)(a1 + 752) = _Q7.f64[0];
      v160 = *(_QWORD *)(a1 + 704);
      v161 = (*(_QWORD *)(a1 + 712) - v160) >> 3;
      if (v157 >= v161)
      {
        v162 = *(_QWORD *)(a1 + 736);
        if (!v162)
          v162 = (*(_QWORD *)(a1 + 712) - v160) >> 3;
        *(double *)(a1 + 752) = _Q7.f64[0] - *(double *)(v160 + 8 * v162 - 8);
      }
      v163 = *(_QWORD *)(a1 + 728);
      if (!v163)
        v163 = v161;
      v164 = v163 - 1;
      *(_QWORD *)(a1 + 728) = v164;
      *(float64_t *)(v160 + 8 * v164) = _Q5.f64[0];
      if (v157 == v161)
      {
        if (*(_QWORD *)(a1 + 736))
          v157 = *(_QWORD *)(a1 + 736);
        *(_QWORD *)(a1 + 736) = v157 - 1;
      }
      else
      {
        v165 = v157 + 1;
        *(_QWORD *)(a1 + 744) = v165;
        v158 = (double)v165;
      }
      *(double *)(a1 + 752) = (_Q5.f64[0] + *(double *)(a1 + 752)) / v158;
      _Q7.f64[0] = *(float64_t *)(a3 + 40);
      v166 = *(double *)(a4 + 48);
      _Q20 = *(float64x2_t *)(a4 + 32);
      __asm { FMLA            D5, D7, V20.D[1] }
      _Q5.f64[0] = _Q5.f64[0] + *(double *)(a3 + 64) * v166;
      _Q7.f64[0] = *(float64_t *)(a5 + 16);
      *(_QWORD *)&v168 = *(_OWORD *)&vsubq_f64(_Q5, _Q7);
      _Q6 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a3, _Q20.f64[0]), *(float64x2_t *)(a3 + 24), _Q20, 1), *(float64x2_t *)(a3 + 48), v166), *(float64x2_t *)a5);
      _D16 = _Q6.f64[1];
      __asm { FMLA            D7, D16, V6.D[1] }
      _Q6.f64[0] = sqrt(vmlad_n_f64(_D7, v168, v168));
      v172 = *(_QWORD *)(a1 + 800);
      v173 = (double)v172;
      _Q5.f64[0] = *(double *)(a1 + 808) * (double)v172;
      *(float64_t *)(a1 + 808) = _Q5.f64[0];
      v174 = *(_QWORD *)(a1 + 760);
      v175 = (*(_QWORD *)(a1 + 768) - v174) >> 3;
      if (v172 >= v175)
      {
        v176 = *(_QWORD *)(a1 + 792);
        if (!v176)
          v176 = (*(_QWORD *)(a1 + 768) - v174) >> 3;
        *(double *)(a1 + 808) = _Q5.f64[0] - *(double *)(v174 + 8 * v176 - 8);
      }
      *(_QWORD *)&v177 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
      *(_QWORD *)&v178 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
      v179 = *(_QWORD *)(a1 + 784);
      if (!v179)
        v179 = v175;
      v180 = v179 - 1;
      *(_QWORD *)(a1 + 784) = v180;
      *(float64_t *)(v174 + 8 * v180) = _Q6.f64[0];
      if (v172 == v175)
      {
        if (*(_QWORD *)(a1 + 792))
          v172 = *(_QWORD *)(a1 + 792);
        *(_QWORD *)(a1 + 792) = v172 - 1;
      }
      else
      {
        v181 = v172 + 1;
        *(_QWORD *)(a1 + 800) = v181;
        v173 = (double)v181;
      }
      v182 = (_Q6.f64[0] + *(double *)(a1 + 808)) / v173;
      *(double *)(a1 + 808) = v182;
      if (!v136)
        goto LABEL_182;
      v183.f64[0] = 0.0;
      v184 = 0.0;
      v185 = 0.0;
      if (!*(_QWORD *)(a1 + 528))
        goto LABEL_269;
      _Q4.f64[0] = *(float64_t *)(a1 + 584);
      if (_Q4.f64[0] >= 0.00001)
      {
        _Q6.f64[0] = *(float64_t *)(a1 + 608);
        *(_QWORD *)&v185 = *(_OWORD *)&vdivq_f64(_Q6, _Q4);
        v183 = vdivq_f64(*v35, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q4.f64[0], 0));
        *(_QWORD *)&v184 = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u64[0];
      }
      else
      {
LABEL_182:
        v183.f64[0] = 0.0;
        v184 = 0.0;
        v185 = 0.0;
      }
LABEL_269:
      v183.f64[1] = v184;
      v236 = vmulq_f64(v183, v183).f64[0] + v184 * v184;
      v237 = *(double *)(a1 + 752);
      v238 = *(double *)(a5 + 16);
      _Q19 = *(float64x2_t *)a5;
      v240 = *(double *)(a1 + 696);
      v241 = *(unsigned __int8 *)(a1 + 944);
      v45.f64[1] = v178;
      v242 = vmulq_f64(v45, v45).f64[0] + v177 * _Q3.f64[0] * v178 + a7.f64[0] * _Q3.f64[0] * v44.f64[0];
      v243 = *(double *)(a1 + 136);
      v244 = *(double *)(a1 + 144);
      v245 = *(double *)(a1 + 120);
      v246 = *(double *)(a1 + 128);
      v247 = *(double *)(a1 + 112);
      v248 = 1.0;
      if (*(double *)(a2 + 96) >= *(double *)(a1 + 168))
        v248 = 0.0;
      v249 = *(_QWORD *)(a1 + 856);
      v250 = (double)v249;
      v251 = *(double *)(a1 + 864) * (double)v249;
      *(double *)(a1 + 864) = v251;
      v252 = *(_QWORD *)(a1 + 816);
      v253 = (*(_QWORD *)(a1 + 824) - v252) >> 3;
      if (v249 >= v253)
      {
        v254 = *(_QWORD *)(a1 + 848);
        if (!v254)
          v254 = (*(_QWORD *)(a1 + 824) - v252) >> 3;
        *(double *)(a1 + 864) = v251 - *(double *)(v252 + 8 * v254 - 8);
      }
      _D22 = _Q19.f64[1];
      v256 = v236 + v185 * v185;
      v257 = *(_QWORD *)(a1 + 840);
      if (!v257)
        v257 = v253;
      v258 = v257 - 1;
      *(_QWORD *)(a1 + 840) = v258;
      *(double *)(v252 + 8 * v258) = v248;
      v259 = sqrt(v242);
      if (v249 == v253)
      {
        if (*(_QWORD *)(a1 + 848))
          v249 = *(_QWORD *)(a1 + 848);
        *(_QWORD *)(a1 + 848) = v249 - 1;
      }
      else
      {
        v260 = v249 + 1;
        *(_QWORD *)(a1 + 856) = v260;
        v250 = (double)v260;
      }
      __asm { FMLA            D16, D22, V19.D[1] }
      v262 = sqrt(v256);
      v263 = (v248 + *(double *)(a1 + 864)) / v250;
      *(double *)(a1 + 864) = v263;
      if (v259 <= v244)
      {
        v264 = 0;
        v265 = _D16 + v238 * v238;
        *(_DWORD *)(a1 + 464) = 0;
        if (v262 <= v247)
        {
LABEL_284:
          v266 = 0;
          *(_DWORD *)(a1 + 448) = 0;
          _NF = v240 < v243;
          v267 = sqrt(v265);
          if (!_NF)
            goto LABEL_285;
          goto LABEL_291;
        }
      }
      else
      {
        v264 = *(_DWORD *)(a1 + 464) + 1;
        v265 = _D16 + v238 * v238;
        *(_DWORD *)(a1 + 464) = v264;
        if (v262 <= v247)
          goto LABEL_284;
      }
      v266 = *(_DWORD *)(a1 + 448) + 1;
      *(_DWORD *)(a1 + 448) = v266;
      _NF = v240 < v243;
      v267 = sqrt(v265);
      if (!_NF)
      {
LABEL_285:
        v268 = 0;
        v269 = vabdd_f64(v237, v267);
        *(_DWORD *)(a1 + 452) = 0;
        if (v182 >= v246)
          goto LABEL_286;
        goto LABEL_292;
      }
LABEL_291:
      v268 = *(_DWORD *)(a1 + 452) + 1;
      v269 = vabdd_f64(v237, v267);
      *(_DWORD *)(a1 + 452) = v268;
      if (v182 >= v246)
      {
LABEL_286:
        v270 = 0;
        v271 = a1 + 920;
        *(_DWORD *)(a1 + 456) = 0;
        if (v269 >= v245)
        {
LABEL_287:
          v272 = 0;
          goto LABEL_294;
        }
LABEL_293:
        v272 = *(_DWORD *)(a1 + 460) + 1;
LABEL_294:
        *(_DWORD *)(a1 + 460) = v272;
        *(_QWORD *)(a1 + 472) = *(_QWORD *)a4;
        *(_BYTE *)(a1 + 480) = 1;
        v273 = *(_OWORD *)(a3 + 96);
        *(_QWORD *)(v271 + 16) = *(_QWORD *)(a3 + 112);
        *(_OWORD *)v271 = v273;
        if (!v241)
          *(_BYTE *)(a1 + 944) = 1;
        v274 = v266;
        v275 = *(_QWORD *)(a1 + 184);
        v399 = v275 <= v266;
        v396 = v270;
        v395 = v272;
        v278 = (v275 <= v270 || v275 <= v272) && v275 <= v268;
        v397 = v278;
        v279 = *(double *)(a1 + 176);
        if (a6[1])
          a6[1] = 0;
        *a6 = v278;
        a6[1] = 1;
        if (v278)
        {
          v281 = v275 <= v274 || v264 > *(_DWORD *)(a1 + 192);
          v399 = v281;
        }
        sub_20F11C4EC(&v412);
        if (**(int **)(v412 + 56) <= 2)
        {
          v282 = *(unsigned __int8 *)(v412 + 72);
          v283 = sub_20E8C31DC(v412, "OSLogSurrogateAppender", 1, 0);
          v284 = v283 ? v283 + 16 : 0;
          if (v282 || v283)
          {
            sub_20E863438((uint64_t)object);
            sub_20E86A980(&object[16], (uint64_t)"consistent_avg_propagated_pose: ", 32);
            v285 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v285, (uint64_t)" avg: ", 6);
            v286 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v286, (uint64_t)" is consistent: ", 16);
            std::ostream::operator<<();
            sub_20E923E88(object, v410);
            v401 = &v412;
            v402 = std::chrono::steady_clock::now().__d_.__rep_;
            v403 = std::chrono::system_clock::now().__d_.__rep_;
            v404 = 2;
            v405 = "unknown file";
            v406 = 798;
            v408 = 0;
            v409 = 0;
            v407 = "unknown function";
            if (v411 >= 0)
              v287 = (const char *)v410;
            else
              v287 = v410[0];
            v400 = v287;
            v288 = *v401;
            v289 = (uint64_t *)(*v401 + 16);
            if (*(char *)(*v401 + 39) < 0)
            {
              v291 = *(char **)(v288 + 16);
              v290 = *(_QWORD *)(v288 + 24);
            }
            else
            {
              v290 = *(unsigned __int8 *)(*v401 + 39);
              v291 = (char *)(*v401 + 16);
            }
            category = v291;
            v414 = v290;
            v342 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v342 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v417);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v417);
              if ((_BYTE)v419 && SHIBYTE(rep) < 0)
                operator delete((void *)v417.tv_sec);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v343 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v344 = byte_254A4A4F8;
            }
            else
            {
              v343 = *(_QWORD *)&byte_254A4A4F8[8];
              v344 = *(const char **)byte_254A4A4F8;
            }
            v415 = v344;
            v416 = v343;
            v417.tv_sec = (__darwin_time_t)os_log_create(v344, category);
            sub_20E86E5A8(&v417.tv_nsec, (uint64_t)&v415);
            sub_20E86E5A8(&v421, (uint64_t)&category);
            tv_sec = v417.tv_sec;
            sub_20E86E44C((uint64_t)&v417);
            sub_20F11D318(v284, v289, tv_sec, OS_LOG_TYPE_DEBUG, &v400);
            if (v282)
            {
              v346 = (const char *)v410;
              if (v411 < 0)
                v346 = v410[0];
              sub_20E8C003C((uint64_t)&v401, "%s", v346);
              sub_20E863570((uint64_t)&v401);
            }
            sub_20E863714((uint64_t)&v401);
            if (v411 < 0)
              operator delete(v410[0]);
            sub_20E863784((uint64_t)object);
          }
        }
        if (v263 <= v279)
          v26 = v399 & v397;
        else
          v26 = 0;
        if ((_DWORD)v26 != 1)
          goto LABEL_488;
        v347 = sub_210219C18();
        v348 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v348 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (atomic_load(&qword_254A5A450))
        {
          *(_DWORD *)object = 134218752;
          *(double *)&object[4] = v262;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = v240;
          *(_WORD *)&object[22] = 2048;
          *(double *)&object[24] = v182;
          *(_WORD *)&object[32] = 2048;
          *(double *)&object[34] = v269;
          v350 = (char *)_os_log_send_and_compose_impl();
          v351 = strlen(v350);
          v417.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v417);
          v352 = v417.tv_sec;
          timespec_get(&v417, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v347 + 1), (__int128 *)(v347 + 5), "IMUFaultDetectionMeasurements: %f, %f, %f, %f", 0x2DuLL, v350, v351, v352, &v417);
          std::mutex::lock(&stru_254A5A410);
          v353 = qword_254A5A458;
          for (i = unk_254A5A460; v353 != i; v353 += 40)
          {
            v355 = *(_QWORD *)(v353 + 32);
            if (!v355)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v355 + 48))(v355, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v434 < 0)
            operator delete(v433);
          if (v432 < 0)
            operator delete(v431);
          if (v430 && v429 < 0)
            operator delete(v428);
          if ((_BYTE)v427 && SHIBYTE(v426) < 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v350)
            free(v350);
        }
        if (os_signpost_enabled((os_log_t)*v347))
        {
          *(_DWORD *)object = 134218752;
          *(double *)&object[4] = v262;
          *(_WORD *)&object[12] = 2048;
          *(double *)&object[14] = v240;
          *(_WORD *)&object[22] = 2048;
          *(double *)&object[24] = v182;
          *(_WORD *)&object[32] = 2048;
          *(double *)&object[34] = v269;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        v356 = sub_210219C18();
        v357 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v357 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
        {
LABEL_471:
          if (os_signpost_enabled((os_log_t)*v356))
          {
            *(_QWORD *)object = 0x104000400;
            *(_WORD *)&object[8] = 1024;
            *(_DWORD *)&object[10] = 1;
            *(_WORD *)&object[14] = 1024;
            *(_DWORD *)&object[16] = v275 <= v396;
            *(_WORD *)&object[20] = 1024;
            *(_DWORD *)&object[22] = v275 <= v395;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          sub_20F11C4EC(&v415);
          if (**((int **)v415 + 7) <= 3)
          {
            v365 = *((unsigned __int8 *)v415 + 72);
            v366 = sub_20E8C31DC((uint64_t)v415, "OSLogSurrogateAppender", 1, 0);
            v367 = v366 + 16;
            if (!v366)
              v367 = 0;
            if (v365 || v366)
            {
              v394 = v367;
              v417.tv_sec = (__darwin_time_t)&v415;
              v417.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
              rep = std::chrono::system_clock::now().__d_.__rep_;
              v419 = 3;
              v420 = "unknown file";
              LODWORD(v421) = 813;
              v423 = 0;
              v424 = 0;
              v422 = "unknown function";
              v368 = *(_QWORD *)v417.tv_sec;
              if (*(char *)(*(_QWORD *)v417.tv_sec + 39) < 0)
              {
                v370 = *(char **)(v368 + 16);
                v369 = *(char **)(v368 + 24);
              }
              else
              {
                v369 = (char *)*(unsigned __int8 *)(*(_QWORD *)v417.tv_sec + 39);
                v370 = (char *)(*(_QWORD *)v417.tv_sec + 16);
              }
              v393 = (uint64_t *)(*(_QWORD *)v417.tv_sec + 16);
              v410[0] = v370;
              v410[1] = v369;
              v371 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v371 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)object);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                if (object[24] && (object[23] & 0x80000000) != 0)
                  operator delete(*(void **)object);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              v372 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v373 = byte_254A4A4F8;
              }
              else
              {
                v372 = *(_QWORD *)&byte_254A4A4F8[8];
                v373 = *(const char **)byte_254A4A4F8;
              }
              v401 = (uint64_t *)v373;
              v402 = v372;
              *(_QWORD *)object = os_log_create(v373, v410[0]);
              sub_20E86E5A8(&object[8], (uint64_t)&v401);
              sub_20E86E5A8(&object[40], (uint64_t)v410);
              v374 = *(NSObject **)object;
              sub_20E86E44C((uint64_t)object);
              sub_20F11D91C(v394, v393, v374, OS_LOG_TYPE_INFO, (_DWORD *)(a1 + 448), (int *)(a1 + 452), (int *)(a1 + 456), (int *)(a1 + 460));
              if (v365)
              {
                sub_20E8C003C((uint64_t)&v417, "[TrackingStatusClassifier] IMU fault detected: %u, %u, %u, %u", *(_DWORD *)(a1 + 448), *(_DWORD *)(a1 + 452), *(_DWORD *)(a1 + 456), *(_DWORD *)(a1 + 460));
                sub_20E863570((uint64_t)&v417);
              }
              sub_20E863714((uint64_t)&v417);
            }
          }
LABEL_488:
          sub_20F11C4EC(&v412);
          if (**(int **)(v412 + 56) <= 2)
          {
            v375 = *(unsigned __int8 *)(v412 + 72);
            v376 = sub_20E8C31DC(v412, "OSLogSurrogateAppender", 1, 0);
            v377 = v376 ? v376 + 16 : 0;
            if (v375 || v376)
            {
              sub_20E863438((uint64_t)object);
              sub_20E86A980(&object[16], (uint64_t)"Time: ", 6);
              v378 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v378, (uint64_t)" consistent_avg_propagated_pose: ", 33);
              v379 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v379, (uint64_t)" avg: ", 6);
              v380 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v380, (uint64_t)" is consistent: ", 16);
              v381 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v381, (uint64_t)" vio_moving ", 12);
              v382 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v382, (uint64_t)" imu_stationary ", 16);
              std::ostream::operator<<();
              sub_20E923E88(object, v410);
              v401 = &v412;
              v402 = std::chrono::steady_clock::now().__d_.__rep_;
              v403 = std::chrono::system_clock::now().__d_.__rep_;
              v404 = 2;
              v405 = "unknown file";
              v406 = 820;
              v408 = 0;
              v409 = 0;
              v407 = "unknown function";
              if (v411 >= 0)
                v383 = (const char *)v410;
              else
                v383 = v410[0];
              v400 = v383;
              v384 = *v401;
              v385 = (uint64_t *)(*v401 + 16);
              if (*(char *)(*v401 + 39) < 0)
              {
                v387 = *(char **)(v384 + 16);
                v386 = *(_QWORD *)(v384 + 24);
              }
              else
              {
                v386 = *(unsigned __int8 *)(*v401 + 39);
                v387 = (char *)(*v401 + 16);
              }
              category = v387;
              v414 = v386;
              v388 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v388 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v417);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v417);
                if ((_BYTE)v419 && SHIBYTE(rep) < 0)
                  operator delete((void *)v417.tv_sec);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              v389 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v390 = byte_254A4A4F8;
              }
              else
              {
                v389 = *(_QWORD *)&byte_254A4A4F8[8];
                v390 = *(const char **)byte_254A4A4F8;
              }
              v415 = v390;
              v416 = v389;
              v417.tv_sec = (__darwin_time_t)os_log_create(v390, category);
              sub_20E86E5A8(&v417.tv_nsec, (uint64_t)&v415);
              sub_20E86E5A8(&v421, (uint64_t)&category);
              v391 = v417.tv_sec;
              sub_20E86E44C((uint64_t)&v417);
              sub_20F11DDC0(v377, v385, v391, OS_LOG_TYPE_DEBUG, &v400);
              if (v375)
              {
                v392 = (const char *)v410;
                if (v411 < 0)
                  v392 = v410[0];
                sub_20E8C003C((uint64_t)&v401, "%s", v392);
                sub_20E863570((uint64_t)&v401);
              }
              sub_20E863714((uint64_t)&v401);
              if (v411 < 0)
                operator delete(v410[0]);
              sub_20E863784((uint64_t)object);
            }
          }
          kdebug_trace();
          kdebug_trace();
          return v26;
        }
        *(_QWORD *)object = 0x104000400;
        *(_WORD *)&object[8] = 1024;
        *(_DWORD *)&object[10] = 1;
        *(_WORD *)&object[14] = 1024;
        *(_DWORD *)&object[16] = v275 <= v396;
        *(_WORD *)&object[20] = 1024;
        *(_DWORD *)&object[22] = v275 <= v395;
        v359 = (char *)_os_log_send_and_compose_impl();
        v360 = strlen(v359);
        v417.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v417);
        v361 = v417.tv_sec;
        timespec_get(&v417, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v356 + 1), (__int128 *)(v356 + 5), "[TrackingStatusClassifier] IMU fault Criteria: %{BOOL}d, %{BOOL}d, %{BOOL}d, %{BOOL}d", 0x55uLL, v359, v360, v361, &v417);
        std::mutex::lock(&stru_254A5A410);
        v362 = qword_254A5A458;
        for (j = unk_254A5A460; v362 != j; v362 += 40)
        {
          v364 = *(_QWORD *)(v362 + 32);
          if (!v364)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v364 + 48))(v364, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v434 < 0)
        {
          operator delete(v433);
          if ((v432 & 0x80000000) == 0)
          {
LABEL_458:
            if (!v430)
            {
LABEL_464:
              if ((_BYTE)v427 && SHIBYTE(v426) < 0)
                operator delete(*(void **)&object[32]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v359)
                free(v359);
              goto LABEL_471;
            }
LABEL_462:
            if (v429 < 0)
              operator delete(v428);
            goto LABEL_464;
          }
        }
        else if ((v432 & 0x80000000) == 0)
        {
          goto LABEL_458;
        }
        operator delete(v431);
        if (!v430)
          goto LABEL_464;
        goto LABEL_462;
      }
LABEL_292:
      v270 = *(_DWORD *)(a1 + 456) + 1;
      v271 = a1 + 920;
      *(_DWORD *)(a1 + 456) = v270;
      if (v269 >= v245)
        goto LABEL_287;
      goto LABEL_293;
    }
    sub_20F11C4EC(&v415);
    if (**((int **)v415 + 7) > 2)
      return 0;
    v63 = *((unsigned __int8 *)v415 + 72);
    v64 = sub_20E8C31DC((uint64_t)v415, "OSLogSurrogateAppender", 1, 0);
    v65 = v64;
    if (!v63 && !v64)
      return 0;
    v417.tv_sec = (__darwin_time_t)&v415;
    v417.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v419 = 2;
    v420 = "unknown file";
    LODWORD(v421) = 716;
    v423 = 0;
    v424 = 0;
    v422 = "unknown function";
    v66 = *(_QWORD *)v417.tv_sec;
    v67 = *(_QWORD *)v417.tv_sec + 16;
    if (*(char *)(*(_QWORD *)v417.tv_sec + 39) < 0)
    {
      v69 = *(const char **)(v66 + 16);
      v68 = *(_QWORD *)(v66 + 24);
    }
    else
    {
      v68 = *(unsigned __int8 *)(*(_QWORD *)v417.tv_sec + 39);
      v69 = (const char *)(*(_QWORD *)v417.tv_sec + 16);
    }
    v292 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v292 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v293 = byte_254A4A4F8;
    else
      v293 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v294 = byte_254A4A4F8[23];
    else
      v294 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v293, v69);
    v295 = &object[8];
    if (v294 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v294 >= 0x17)
    {
      v296 = v65;
      v297 = v69;
      v298 = v66;
      v299 = v63;
      v300 = v67;
      v301 = (v294 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v294 | 7) != 0x17)
        v301 = v294 | 7;
      v302 = v301 + 1;
      v295 = operator new(v301 + 1);
      *(_QWORD *)&object[16] = v294;
      *(_QWORD *)&object[24] = v302 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v295;
      v67 = v300;
      v63 = v299;
      v66 = v298;
      v69 = v297;
      v65 = v296;
    }
    else
    {
      object[31] = v294;
      if (!v294)
      {
LABEL_342:
        v295[v294] = 0;
        object[32] = 1;
        v303 = &object[40];
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v68 >= 0x17)
        {
          v304 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v304 = v68 | 7;
          v305 = v304 + 1;
          v303 = operator new(v304 + 1);
          v426 = v68;
          v427 = v305 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v303;
        }
        else
        {
          HIBYTE(v427) = v68;
          if (!v68)
            goto LABEL_350;
        }
        memmove(v303, v69, v68);
LABEL_350:
        v303[v68] = 0;
        LOBYTE(v428) = 1;
        v306 = *(NSObject **)object;
        if (SHIBYTE(v427) < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v65 && *(_QWORD *)(v65 + 24))
        {
          v307 = _os_log_pack_size();
          v308 = (std::__shared_weak_count_vtbl *)operator new(v307, (std::align_val_t)8uLL);
          v309 = (std::__shared_weak_count *)operator new();
          v310 = v309;
          v309->__shared_owners_ = 0;
          v311 = (unint64_t *)&v309->__shared_owners_;
          v309->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v309->__shared_weak_owners_ = 0;
          v309[1].__vftable = v308;
          *(_QWORD *)object = v308;
          *(_QWORD *)&object[8] = v308;
          *(_QWORD *)&object[16] = v309;
          do
            v312 = __ldxr(v311);
          while (__stxr(v312 + 1, v311));
          memset(&object[24], 0, 24);
          do
            v313 = __ldaxr(v311);
          while (__stlxr(v313 - 1, v311));
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
            std::__shared_weak_count::__release_weak(v310);
          }
          v314 = *(_QWORD *)object;
          v315 = _os_log_pack_fill();
          *(_DWORD *)v315 = 134217984;
          *(double *)(v315 + 4) = v17;
          v316 = operator new();
          v317 = *(unsigned __int8 *)(v66 + 39);
          if ((v317 & 0x80u) == 0)
            v318 = v67;
          else
            v318 = *(_QWORD *)(v66 + 16);
          if ((v317 & 0x80u) != 0)
            v317 = *(_QWORD *)(v66 + 24);
          *(_QWORD *)v316 = v314;
          *(_OWORD *)(v316 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v316 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v316 + 40) = v318;
          *(_QWORD *)(v316 + 48) = v317;
          *(_BYTE *)(v316 + 56) = 2;
          v410[0] = 0;
          v401 = (uint64_t *)v316;
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v65 + 24) + 40))(*(_QWORD *)(v65 + 24), &v401);
          v319 = v401;
          v401 = 0;
          if (v319)
          {
            v320 = (std::__shared_weak_count *)v319[4];
            if (v320)
            {
              v321 = (unint64_t *)&v320->__shared_owners_;
              do
                v322 = __ldaxr(v321);
              while (__stlxr(v322 - 1, v321));
              if (!v322)
              {
                ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                std::__shared_weak_count::__release_weak(v320);
              }
            }
            v323 = (std::__shared_weak_count *)v319[2];
            if (v323)
            {
              v324 = (unint64_t *)&v323->__shared_owners_;
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                std::__shared_weak_count::__release_weak(v323);
              }
            }
            MEMORY[0x212BC6398](v319, 0x10F0C40B62ED6C6);
            v326 = v410[0];
            v410[0] = 0;
            if (v326)
            {
              v327 = (std::__shared_weak_count *)*((_QWORD *)v326 + 4);
              if (v327)
              {
                v328 = (unint64_t *)&v327->__shared_owners_;
                do
                  v329 = __ldaxr(v328);
                while (__stlxr(v329 - 1, v328));
                if (!v329)
                {
                  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                  std::__shared_weak_count::__release_weak(v327);
                }
              }
              v330 = (std::__shared_weak_count *)*((_QWORD *)v326 + 2);
              if (v330)
              {
                v331 = (unint64_t *)&v330->__shared_owners_;
                do
                  v332 = __ldaxr(v331);
                while (__stlxr(v332 - 1, v331));
                if (!v332)
                {
                  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                  std::__shared_weak_count::__release_weak(v330);
                }
              }
              MEMORY[0x212BC6398](v326, 0x10F0C40B62ED6C6);
            }
          }
          v333 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v334 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v335 = __ldaxr(v334);
            while (__stlxr(v335 - 1, v334));
            if (!v335)
            {
              ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
              std::__shared_weak_count::__release_weak(v333);
            }
          }
          v336 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v337 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v338 = __ldaxr(v337);
            while (__stlxr(v338 - 1, v337));
            if (!v338)
            {
              ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
              std::__shared_weak_count::__release_weak(v336);
            }
          }
        }
        else
        {
          os_log_type_enabled(v306, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = v17;
          v339 = (void *)_os_log_send_and_compose_impl();
          if (v339)
            free(v339);
        }
        if (v63)
        {
          sub_20E8C003C((uint64_t)&v417, "[TrackingStatusClassifier] Invalid window side (time duration: %f)", v17);
          sub_20E863570((uint64_t)&v417);
        }
        sub_20E863570((uint64_t)&v417);
        v233 = v424;
        if (!v424)
          return 0;
        v340 = (unint64_t *)&v424->__shared_owners_;
        do
          v235 = __ldaxr(v340);
        while (__stlxr(v235 - 1, v340));
LABEL_410:
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
          std::__shared_weak_count::__release_weak(v233);
        }
        return 0;
      }
    }
    memmove(v295, v293, v294);
    goto LABEL_342;
  }
  sub_20F11C4EC(&v415);
  if (**((int **)v415 + 7) <= 2)
  {
    v27 = *((unsigned __int8 *)v415 + 72);
    v28 = sub_20E8C31DC((uint64_t)v415, "OSLogSurrogateAppender", 1, 0);
    if (v27 || v28 != 0)
    {
      v30 = v28;
      v417.tv_sec = (__darwin_time_t)&v415;
      v417.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v419 = 2;
      v420 = "unknown file";
      LODWORD(v421) = 334;
      v423 = 0;
      v424 = 0;
      v422 = "unknown function";
      v31 = *(_QWORD *)v417.tv_sec;
      if (*(char *)(*(_QWORD *)v417.tv_sec + 39) < 0)
      {
        v33 = *(const char **)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(*(_QWORD *)v417.tv_sec + 39);
        v33 = (const char *)(*(_QWORD *)v417.tv_sec + 16);
      }
      v398 = *(_QWORD *)v417.tv_sec + 16;
      v70 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v71 = byte_254A4A4F8;
      else
        v71 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v72 = byte_254A4A4F8[23];
      else
        v72 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v71, v33);
      v73 = &object[8];
      if (v72 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v72 >= 0x17)
      {
        v74 = v30;
        v75 = v33;
        v76 = v31;
        v77 = v27;
        v78 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v78 = v72 | 7;
        v79 = v78 + 1;
        v73 = operator new(v78 + 1);
        *(_QWORD *)&object[16] = v72;
        *(_QWORD *)&object[24] = v79 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v73;
        v27 = v77;
        v31 = v76;
        v33 = v75;
        v30 = v74;
      }
      else
      {
        object[31] = v72;
        if (!v72)
        {
LABEL_51:
          v73[v72] = 0;
          object[32] = 1;
          v80 = &object[40];
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v32 >= 0x17)
          {
            v81 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v81 = v32 | 7;
            v82 = v81 + 1;
            v80 = operator new(v81 + 1);
            v426 = v32;
            v427 = v82 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v80;
          }
          else
          {
            HIBYTE(v427) = v32;
            if (!v32)
              goto LABEL_59;
          }
          memmove(v80, v33, v32);
LABEL_59:
          v80[v32] = 0;
          LOBYTE(v428) = 1;
          v83 = *(NSObject **)object;
          if (SHIBYTE(v427) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v30 && *(_QWORD *)(v30 + 24))
          {
            v84 = _os_log_pack_size();
            v85 = (std::__shared_weak_count_vtbl *)operator new(v84, (std::align_val_t)8uLL);
            v86 = (std::__shared_weak_count *)operator new();
            v87 = v86;
            v86->__shared_owners_ = 0;
            v88 = (unint64_t *)&v86->__shared_owners_;
            v86->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v86->__shared_weak_owners_ = 0;
            v86[1].__vftable = v85;
            *(_QWORD *)object = v85;
            *(_QWORD *)&object[8] = v85;
            *(_QWORD *)&object[16] = v86;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
            memset(&object[24], 0, 24);
            do
              v90 = __ldaxr(v88);
            while (__stlxr(v90 - 1, v88));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v87);
            }
            v91 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v92 = operator new();
            v93 = *(unsigned __int8 *)(v31 + 39);
            v94 = v398;
            if ((v93 & 0x80u) != 0)
            {
              v94 = *(_QWORD *)(v31 + 16);
              v93 = *(_QWORD *)(v31 + 24);
            }
            *(_QWORD *)v92 = v91;
            *(_OWORD *)(v92 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v92 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v92 + 40) = v94;
            *(_QWORD *)(v92 + 48) = v93;
            *(_BYTE *)(v92 + 56) = 2;
            v410[0] = 0;
            v401 = (uint64_t *)v92;
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), &v401);
            v95 = v401;
            v401 = 0;
            if (v95)
            {
              v96 = (std::__shared_weak_count *)v95[4];
              if (v96)
              {
                v97 = (unint64_t *)&v96->__shared_owners_;
                do
                  v98 = __ldaxr(v97);
                while (__stlxr(v98 - 1, v97));
                if (!v98)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v96);
                }
              }
              v99 = (std::__shared_weak_count *)v95[2];
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
              v102 = v410[0];
              v410[0] = 0;
              if (v102)
              {
                v103 = (std::__shared_weak_count *)*((_QWORD *)v102 + 4);
                if (v103)
                {
                  v104 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v106 = (std::__shared_weak_count *)*((_QWORD *)v102 + 2);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
              }
            }
            v109 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v110 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            v112 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v113 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
          }
          else
          {
            os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v115 = (void *)_os_log_send_and_compose_impl();
            if (v115)
              free(v115);
          }
          if (v27)
          {
            sub_20E8C003C((uint64_t)&v417, "[TrackingStatusClassifier] ClearCache");
            sub_20E863570((uint64_t)&v417);
          }
          sub_20E863570((uint64_t)&v417);
          v116 = v424;
          if (v424)
          {
            v117 = (unint64_t *)&v424->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          goto LABEL_118;
        }
      }
      memmove(v73, v71, v72);
      goto LABEL_51;
    }
  }
LABEL_118:
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  sub_20F11D04C((_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 640));
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  v119 = *(_QWORD *)(a1 + 640);
  v120 = *(_QWORD *)(a1 + 536);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 544) - v120) >> 3) != v119)
  {
    if (v119)
    {
      memset(object, 0, 24);
      sub_20F11D1A8((void **)object, v119);
      v121 = (void **)(a1 + 536);
      v122 = *(_QWORD *)object;
      v123 = *(_QWORD *)(a1 + 576);
      v124 = v123 > v119;
      if (v123 < v119)
        v119 = *(_QWORD *)(a1 + 576);
      if (v124)
      {
        v125 = 1;
        do
        {
          do
          {
            v126 = v125;
            v127 = *(_QWORD *)(a1 + 536)
                 + 24
                 * ((v125 + *(_QWORD *)(a1 + 560) - 1)
                  % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3)));
            v128 = *(_OWORD *)v127;
            *(_QWORD *)(v122 + 16) = *(_QWORD *)(v127 + 16);
            *(_OWORD *)v122 = v128;
            v122 += 24;
            v125 = v126 + 1;
          }
          while (v119 != v126);
        }
        while (v126 == *(_QWORD *)(a1 + 576));
      }
      else if (v123)
      {
        v129 = 0;
        do
        {
          v130 = *(_QWORD *)(a1 + 536)
               + 24
               * ((v129 + *(_QWORD *)(a1 + 560))
                % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3)));
          v131 = *(_OWORD *)v130;
          *(_QWORD *)(v122 + 16) = *(_QWORD *)(v130 + 16);
          *(_OWORD *)v122 = v131;
          v122 += 24;
          ++v129;
        }
        while (v129 != *(_QWORD *)(a1 + 576));
      }
      v132 = *v121;
      if (*v121)
      {
        *(_QWORD *)(a1 + 544) = v132;
        operator delete(v132);
        *v121 = 0;
        *(_QWORD *)(a1 + 544) = 0;
        *(_QWORD *)(a1 + 552) = 0;
      }
      v133 = *(_QWORD *)object;
      *(_QWORD *)(a1 + 536) = *(_QWORD *)object;
      v134 = *(_QWORD *)&object[8];
      *(_OWORD *)(a1 + 544) = *(_OWORD *)&object[8];
      *(_QWORD *)(a1 + 576) = v119;
      *(_QWORD *)(a1 + 560) = 0;
      *(_QWORD *)(a1 + 568) = v119 % (0xAAAAAAAAAAAAAAABLL * ((v134 - v133) >> 3));
    }
    else
    {
      *(_QWORD *)(a1 + 544) = v120;
      *(_QWORD *)(a1 + 560) = 0;
      *(_QWORD *)(a1 + 576) = 0;
      *(_QWORD *)(a1 + 568) = 0;
    }
  }
  v26 = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  return v26;
}

void sub_20F11C058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a61)
  {
    if (a60 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void sub_20F11C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20E863714((uint64_t)&a22);
  if (SHIBYTE(a33) < 0)
  {
    operator delete(a31);
    sub_20E863784((uint64_t)&a52);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F11C47CLL);
}

void sub_20F11C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_20E96E218((uint64_t)&a49);
  if (v49)
    JUMPOUT(0x20F11C4D0);
  _Unwind_Resume(a1);
}

void sub_20F11C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  MEMORY[0x212BC6398](v39, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86E8C4(&a22);
  sub_20E86E8C4(&a31);
  sub_20E86E658((uint64_t)&a49);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E86E658((uint64_t)&a49);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C2DC()
{
  JUMPOUT(0x20F11C2E4);
}

void sub_20F11C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C36C(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F11C378()
{
  JUMPOUT(0x20F11C4CCLL);
}

void sub_20F11C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863784((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F11C3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F11C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F11C468(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F11C48C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F11C4A0);
}

void sub_20F11C4B0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F11C4C4);
}

void sub_20F11C4EC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A621B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A621B8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A621B0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A621B8);
  }
  *a1 = qword_254A621B0;
}

void sub_20F11C588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A621B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A621B8);
  _Unwind_Resume(a1);
}

BOOL sub_20F11C5E0(uint64_t a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  double v14;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD v67[3];
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE object[24];
  __int128 v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  uint64_t v82;

  v4 = a3;
  v82 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 1022))
  {
    LODWORD(a3) = *(_DWORD *)(a1 + 968);
    if (*(double *)(a1 + 336) > (double)*(unint64_t *)&a3)
      return 0;
  }
  v5 = *(double *)(*(_QWORD *)(a1 + 872)
                 + 40
                 * ((*(_QWORD *)(a1 + 896) + (*(_QWORD *)(a1 + 912) >> 1))
                  % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872)) >> 3)))
                 + 24);
  if (v5 > *(double *)(a1 + 344) * v4)
  {
    sub_20F11C4EC(&v74);
    if (**(int **)(v74 + 56) <= 3)
    {
      v6 = *(unsigned __int8 *)(v74 + 72);
      v7 = sub_20E8C31DC(v74, "OSLogSurrogateAppender", 1, 0);
      v8 = v7;
      if (v6 || v7)
      {
        v67[0] = &v74;
        v67[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v67[2] = std::chrono::system_clock::now().__d_.__rep_;
        v68 = 3;
        v69 = "unknown file";
        v70 = 531;
        v72 = 0;
        v73 = 0;
        v71 = "unknown function";
        v9 = v74;
        v10 = v74 + 16;
        if (*(char *)(v74 + 39) < 0)
        {
          v12 = *(const char **)(v74 + 16);
          v11 = *(_QWORD *)(v74 + 24);
          v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v16 & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          v11 = *(unsigned __int8 *)(v74 + 39);
          v12 = (const char *)(*(_QWORD *)v67[0] + 16);
          v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v13 & 1) != 0)
            goto LABEL_14;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v78 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_14:
        if (byte_254A4A4F8[23] >= 0)
          v17 = byte_254A4A4F8;
        else
          v17 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v18 = byte_254A4A4F8[23];
        else
          v18 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v17, v12);
        v19 = &object[8];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v18 >= 0x17)
        {
          v20 = v8;
          v21 = v12;
          v22 = v9;
          v23 = v6;
          v24 = v10;
          v25 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v25 = v18 | 7;
          v26 = v25 + 1;
          v19 = operator new(v25 + 1);
          *(_QWORD *)&object[16] = v18;
          *(_QWORD *)&v78 = v26 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v19;
          v10 = v24;
          v6 = v23;
          v9 = v22;
          v12 = v21;
          v8 = v20;
        }
        else
        {
          BYTE7(v78) = v18;
          if (!v18)
          {
LABEL_28:
            v19[v18] = 0;
            BYTE8(v78) = 1;
            v27 = __p;
            if (v11 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v11 >= 0x17)
            {
              v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v11 | 7) != 0x17)
                v28 = v11 | 7;
              v29 = v28 + 1;
              v27 = operator new(v28 + 1);
              __p[1] = (void *)v11;
              v80 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v80) = v11;
              if (!v11)
                goto LABEL_36;
            }
            memmove(v27, v12, v11);
LABEL_36:
            *((_BYTE *)v27 + v11) = 0;
            v81 = 1;
            v30 = *(NSObject **)object;
            if (SHIBYTE(v80) < 0)
              operator delete(__p[0]);
            if (BYTE8(v78) && SBYTE7(v78) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v8 && *(_QWORD *)(v8 + 24))
            {
              v31 = _os_log_pack_size();
              v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
              v33 = (std::__shared_weak_count *)operator new();
              v34 = v33;
              v33->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v33->__shared_weak_owners_ = 0;
              v33[1].__vftable = v32;
              *(_QWORD *)object = v32;
              *(_QWORD *)&object[8] = v32;
              *(_QWORD *)&object[16] = v33;
              do
                v36 = __ldxr(p_shared_owners);
              while (__stxr(v36 + 1, p_shared_owners));
              v78 = 0uLL;
              __p[0] = 0;
              do
                v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v34);
              }
              v38 = *(_QWORD *)object;
              v39 = _os_log_pack_fill();
              *(_DWORD *)v39 = 134218240;
              *(double *)(v39 + 4) = v5;
              *(_WORD *)(v39 + 12) = 2048;
              *(double *)(v39 + 14) = v4;
              v40 = operator new();
              v41 = *(unsigned __int8 *)(v9 + 39);
              if ((v41 & 0x80u) == 0)
                v42 = v10;
              else
                v42 = *(_QWORD *)(v9 + 16);
              if ((v41 & 0x80u) != 0)
                v41 = *(_QWORD *)(v9 + 24);
              *(_QWORD *)v40 = v38;
              *(_OWORD *)(v40 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v40 + 24) = v78;
              v78 = 0uLL;
              *(_QWORD *)(v40 + 40) = v42;
              *(_QWORD *)(v40 + 48) = v41;
              *(_BYTE *)(v40 + 56) = 1;
              v75 = 0;
              v76 = v40;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v76);
              v43 = v76;
              v76 = 0;
              if (v43)
              {
                v44 = *(std::__shared_weak_count **)(v43 + 32);
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                v47 = *(std::__shared_weak_count **)(v43 + 16);
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
                v50 = v75;
                v75 = 0;
                if (v50)
                {
                  v51 = *(std::__shared_weak_count **)(v50 + 32);
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v54 = *(std::__shared_weak_count **)(v50 + 16);
                  if (v54)
                  {
                    v55 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
                }
              }
              v57 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
              if (*((_QWORD *)&v78 + 1))
              {
                v58 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v61 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
            }
            else
            {
              os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134218240;
              *(double *)&object[4] = v5;
              *(_WORD *)&object[12] = 2048;
              *(double *)&object[14] = v4;
              v63 = (void *)_os_log_send_and_compose_impl();
              if (v63)
                free(v63);
            }
            if (v6)
            {
              sub_20E8C003C((uint64_t)v67, "Skip IMU-Camera discrepancy because the error is decreasing  %f --> %f", v5, v4);
              sub_20E863570((uint64_t)v67);
            }
            sub_20E863570((uint64_t)v67);
            v64 = v73;
            if (v73)
            {
              v65 = (unint64_t *)&v73->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            return 0;
          }
        }
        memmove(v19, v17, v18);
        goto LABEL_28;
      }
    }
    return 0;
  }
  v14 = *(double *)(a1 + 368);
  if (v14 > a4)
    return 0;
  LODWORD(v14) = *(_DWORD *)(a1 + 256);
  return (double)*(unint64_t *)&v14 <= a2;
}

void sub_20F11CDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F11CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11CE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11CE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F11CEF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F11CF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  _BYTE *v15;
  uint64_t result;

  v15 = (_BYTE *)qword_254A621D8;
  if (*(_BYTE *)(qword_254A621D8 + 4)
    && a9 == *(unsigned __int8 *)qword_254A621D8
    && a11 == *(unsigned __int8 *)(qword_254A621D8 + 1)
    && a13 == *(unsigned __int8 *)(qword_254A621D8 + 2)
    && a15 == *(unsigned __int8 *)(qword_254A621D8 + 3))
  {
    return 0;
  }
  *(_BYTE *)qword_254A621D8 = a9 != 0;
  v15[1] = a11 != 0;
  v15[2] = a13 != 0;
  v15[3] = a15 != 0;
  result = 1;
  v15[4] = 1;
  return result;
}

void sub_20F11D004(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F11D014(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F11D04C(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  double result;
  _QWORD *v21;
  __int128 v22;

  if (a2 != (uint64_t)(a1[1] - *a1) >> 3)
  {
    v2 = a2;
    if (a2)
    {
      v21 = 0;
      v22 = 0uLL;
      sub_20E93D8FC((uint64_t)&v21, a2);
      v4 = v21;
      v5 = a1[5];
      v6 = v5 > v2;
      if (v5 < v2)
        v2 = a1[5];
      if (v6)
      {
        v7 = (_QWORD *)*a1;
        v8 = a1[3];
        v9 = (uint64_t)(a1[1] - *a1) >> 3;
        v10 = v2 - 1;
        v11 = v5 - 1;
        v12 = v21;
        do
        {
          do
          {
            v13 = v10;
            *v12++ = v7[v8 % v9];
            --v10;
            ++v8;
          }
          while (v11-- == 0);
        }
        while (v13);
      }
      else if (v5)
      {
        v15 = a1[3];
        v16 = (_QWORD *)*a1;
        v17 = (uint64_t)(a1[1] - *a1) >> 3;
        v18 = v21;
        do
        {
          *v18++ = v16[v15 % v17];
          ++v15;
          --v5;
        }
        while (v5);
      }
      v19 = (_QWORD *)*a1;
      if (*a1)
      {
        a1[1] = v19;
        operator delete(v19);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v4 = v21;
      }
      *a1 = v4;
      result = *(double *)&v22;
      *(_OWORD *)(a1 + 1) = v22;
      a1[3] = 0;
      a1[4] = v2 % ((uint64_t)(*(_QWORD *)&result - (_QWORD)v4) >> 3);
      a1[5] = v2;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20F11D18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F11D1A8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    a1[1] = &v5[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E969238();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    v13 = &v12[24 * (24 * a2 / 0x18)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[24 * v10];
    if (v5)
      operator delete(v5);
  }
}

void sub_20F11D318(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F11D88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F11D8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F11D91C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, _DWORD *a5, int *a6, int *a7, int *a8)
{
  size_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE v50[32];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v15 = _os_log_pack_size();
    v16 = (std::__shared_weak_count_vtbl *)operator new(v15, (std::align_val_t)8uLL);
    v17 = (std::__shared_weak_count *)operator new();
    v18 = v17;
    v17->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v16;
    v49 = (unint64_t)v16;
    *(_QWORD *)v50 = v16;
    *(_QWORD *)&v50[8] = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    *(_OWORD *)&v50[16] = 0uLL;
    v51 = 0;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    v22 = v49;
    v23 = _os_log_pack_fill();
    v24 = *a5;
    v25 = *a6;
    v26 = *a7;
    v27 = *a8;
    *(_DWORD *)v23 = 67109888;
    *(_DWORD *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 8) = 1024;
    *(_DWORD *)(v23 + 10) = v25;
    *(_WORD *)(v23 + 14) = 1024;
    *(_DWORD *)(v23 + 16) = v26;
    *(_WORD *)(v23 + 20) = 1024;
    *(_DWORD *)(v23 + 22) = v27;
    v28 = operator new();
    v29 = *((unsigned __int8 *)a2 + 23);
    if ((v29 & 0x80u) == 0)
      v30 = a2;
    else
      v30 = (uint64_t *)*a2;
    if ((v29 & 0x80u) != 0)
      v29 = a2[1];
    *(_QWORD *)v28 = v22;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)v50;
    *(_OWORD *)v50 = 0uLL;
    *(_OWORD *)(v28 + 24) = *(_OWORD *)&v50[16];
    *(_OWORD *)&v50[16] = 0uLL;
    *(_QWORD *)(v28 + 40) = v30;
    *(_QWORD *)(v28 + 48) = v29;
    *(_BYTE *)(v28 + 56) = type;
    v48 = v28;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v48);
    v31 = v48;
    v48 = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 32);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v31 + 16);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      MEMORY[0x212BC6398](v31, 0x10F0C40B62ED6C6);
    }
    v38 = *(std::__shared_weak_count **)&v50[24];
    if (*(_QWORD *)&v50[24])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v50[24] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(std::__shared_weak_count **)&v50[8];
    if (*(_QWORD *)&v50[8])
    {
      v42 = (unint64_t *)(*(_QWORD *)&v50[8] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v44 = *a6;
    v45 = *a7;
    v46 = *a8;
    v49 = __PAIR64__(*a5, 67109888);
    *(_WORD *)v50 = 1024;
    *(_DWORD *)&v50[2] = v44;
    *(_WORD *)&v50[6] = 1024;
    *(_DWORD *)&v50[8] = v45;
    *(_WORD *)&v50[12] = 1024;
    *(_DWORD *)&v50[14] = v46;
    v47 = (void *)_os_log_send_and_compose_impl();
    if (v47)
      free(v47);
  }
}

void sub_20F11DD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F11DD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11DD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F11DDC0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F11E334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F11E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F11E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F11E3C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *__p;
  __int128 v55;

  __p = operator new(0x20uLL);
  v55 = xmmword_2102DBFF0;
  strcpy((char *)__p, "TrackingStatusConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_inlier_tracked_features", v4, "Minimum inliers to decleare low texture.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.vio_moving_threshold_meters_per_sec", v5, "Threshold to consider VIO velocity non-stationary.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.raw_accel_moving_threshold_meters_per_sec_sq", v6, "Threshold to consider accel stationary.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.accel_moving_threshold_meters_per_sec_sq", v7, "Threshold to consider (gravity-compensated) accel stationary.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.gyro_moving_threshold_rad_per_sec", v8, "Threshold to consider the gyro measurements stationary.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.vio_imu_discrepancy_time_horizon_sec", v9, "Time window over which to consider IMU and VIO velocity data.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.vertical_velocity_threshold_meters_per_sec", v10, "Threshold for classifying non-trivial vertical motion (m/s).");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA1CB0((unint64_t *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.window_size", v11, "Rolling buffer window size.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DCF0((unsigned int *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_vertical_motion_frames_while_stationary", v12, "Number of frames to consider non-trivial vertical motion.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DCF0((unsigned int *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_vertical_motion_frames_while_stationary", v13, "Number of frames to consider non-trivial vertical motion.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_vio_imu_propagated_position_error_m", v14, "Max pose position error between propagated pose from history states and VIO estimates to be consider consistent.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 152));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.avg_consistent_propagated_pose_ratio", v15, "Ratio threshold of consistent pose within the window to be considered as consistent.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EA9DCF0((unsigned int *)(a1 + 172));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_states_to_check_imu_camera_discrepancy_moving_platform", v16, "Maximum propagated pose difference in position to declare IMU/camera discrepancy.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 184));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_position_diff_to_detect_stationary_vision_swim_in_m", v17, " Minimum propagated IMU pose difference in position to detect stationary vision swim.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DB90((double *)(a1 + 192));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_position_diff_to_detect_stationary_vision_drift_in_m", v18, " Minimum propagated IMU pose difference in position to detect stationary vision drift.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 176));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_position_diff_to_conclude_moving_platform_in_m", v19, " Minimum propagated IMU pose difference in position to conclude swim/drift in moving platfrom.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)(a1 + 200));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stationary_rate_to_detect_swim_in_moving_platform", v20, "Minimum rate of vision-stationary to detect swim in moving platform.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EA9DB90((double *)(a1 + 208));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stationary_rate_to_detect_drift_in_moving_platform", v21, "Minimum rate of vision-stationary to detect drift in moving platform.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EA9DB90((double *)(a1 + 216));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stationary_rate_to_detect_swim_in_low_texture", v22, "Minimum rate of vision-stationary to detect VIO swim in low texture.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EA9DB90((double *)(a1 + 224));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stationary_rate_to_detect_drift_in_low_texture", v23, "Minimum rate of vision-stationary to detect VIO drift in low texture.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EA9DCF0((unsigned int *)(a1 + 232));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_features_to_conclude_moving_platform", v24, "Minimum number of features to conclude IMU/camera discrepancy due to moving platforms.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EA9DCF0((unsigned int *)(a1 + 236));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_stereo_matches_to_conclude_moving_platform", v25, "Minimum number of stereo matches to conclude IMU/camera discrepancy due to moving platforms.");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EA9DB90((double *)(a1 + 240));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_num_features_to_consider_low_texture", v26, "Maximum number of features to check MU/camera discrepancy  in low texture.");
  __p = (void *)nullsub_1(a2);
  v27 = sub_20EA9DB90((double *)(a1 + 312));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_states_to_wait_after_low_texture", v27, "Minimum number of states to wait after low texture before resuming IMU/camera moving platform discrepancy detection.");
  __p = (void *)nullsub_1(a2);
  v28 = sub_20EA9DB90((double *)(a1 + 336));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_time_after_reinit_to_start_vision_stationary_drift_detection", v28, "Minimum time after re-initialization to start vision-stationary drift detection.");
  __p = (void *)nullsub_1(a2);
  v29 = sub_20EA9DB90((double *)(a1 + 336));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_time_after_reinit_to_start_vision_stationary_drift_detection", v29, "Minimum time after re-initialization to conclude moving platform swim.");
  __p = (void *)nullsub_1(a2);
  v30 = sub_20EA9DCF0((unsigned int *)(a1 + 328));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_size_stationary_flag_buffer", v30, "Maximum size of the stationary flag buffer.");
  __p = (void *)nullsub_1(a2);
  v31 = sub_20EA9DB90((double *)(a1 + 320));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.imu_propagated_diff_to_skip_moving_platform_detection", v31, "Factor of IMU propagated position difference to skip moving platform detection. It happens that the IMU propagated pose diff is high but is improving (decreasing rapidly) over time. Example: on a 2 seconds period of states, we check the difference between the mid-sequence state and current state. If the IMU propagated pose diffrence has improved by at least 30%, we skip the moving platform detection and will check on the next states.");
  __p = (void *)nullsub_1(a2);
  v32 = sub_20EA9DB90((double *)(a1 + 256));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_position_diff_to_detect_drift_high_texture_in_m", v32, "Minimum propageted IMU pose difference in position to detect drift in high texture scenes.");
  __p = (void *)nullsub_1(a2);
  v33 = sub_20EA9DB90((double *)(a1 + 264));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stationary_rate_to_detect_drift_in_high_texture", v33, "Minimum rate of vision-stationary to detect VIO drift in high texture.");
  __p = (void *)nullsub_1(a2);
  v34 = sub_20EA9DB90((double *)(a1 + 272));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_vio_speed_to_detect_vio_drift_in_high_texture", v34, "Minimum VIO velocity during vision-stationary to detect VIO drift in high texture. (m/s)");
  __p = (void *)nullsub_1(a2);
  v35 = sub_20EA9DB90((double *)(a1 + 280));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_propagated_and_ba_orientation_error_drift_high_texture_deg", v35, "Maximum propagated and BA orientation error to detect VIO drift in high texture. (degree)");
  __p = (void *)nullsub_1(a2);
  v36 = sub_20EA9DCF0((unsigned int *)(a1 + 296));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_of_consecutive_high_texture_drift_indicator_for_vio_drift", v36, "Mininum number of consecutive high texture drift trigger to determine VIO is drifted.");
  __p = (void *)nullsub_1(a2);
  v37 = sub_20EA9DB90((double *)(a1 + 304));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_seconds_since_last_high_texture_drift_indicator", v37, "Mininum number of consecutive high texture drift trigger to determine VIO is drifted.");
  __p = (void *)nullsub_1(a2);
  v38 = sub_20EAA14D8((_BYTE *)(a1 + 248));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.enable_stationary_vision_high_texture_drift_detection", v38, "Flag to enable high texture drift detection.");
  __p = (void *)nullsub_1(a2);
  v39 = sub_20EA9DCF0((unsigned int *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_stereo_inlier_tracked_features_to_accept_intialization", v39, "Minimum stereo inliers required to accept intialization.");
  __p = (void *)nullsub_1(a2);
  v40 = sub_20EA9DCF0((unsigned int *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.num_inliers_for_low_inliers_mode", v40, "Minimum number of inleirs to trigger low inliers mode.");
  __p = (void *)nullsub_1(a2);
  v41 = sub_20EA9DCF0((unsigned int *)(a1 + 352));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_frames_wt_enough_triangulated_points_to_consider_drift_visual_slam", v41, "Minimum number of consecutive frames of large-stereo view to consider moving objects drift in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v42 = sub_20EA9DCF0((unsigned int *)(a1 + 356));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_triangulated_points_to_consider_moving_object_drift_visual_slam", v42, "Minimum number of triangulated points to consider moving object drift in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v43 = sub_20EA9DB90((double *)(a1 + 360));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_time_after_reinit_to_detect_moving_object_drift_visual_slam_in_sec", v43, "Minimum time after re-initialization to start moving object drift detection in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v44 = sub_20EA9DCF0((unsigned int *)(a1 + 368));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_num_failed_pnp_to_consider_reinitialization", v44, "Minimum number of failed fram-to-frame PnP to consider re-initialization in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v45 = sub_20EA9DCF0((unsigned int *)(a1 + 372));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_num_triangulated_points_to_consider_failed_pnp", v45, "Maximum number of triangulated points to consider PnP failure.");
  __p = (void *)nullsub_1(a2);
  v46 = sub_20EA9DB90((double *)(a1 + 376));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_large_residual_ratio_to_consider_moving_object_drift_visual_slam", v46, "Minimum of large residual ratio to consider drift detection in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v47 = sub_20EA9DCF0((unsigned int *)(a1 + 384));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.min_frames_wt_large_residual_ratio_to_consider_drift_visual_slam", v47, "Minimum number of consecutive frames of large residual ratio to consider moving objects drift in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v48 = sub_20EA9DB90((double *)(a1 + 392));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_gyro_rate_to_consider_moving_object_drift_visual_slam_in_rad", v48, "Maximum gyro rate  to consider moving object drift detection in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v49 = sub_20EAA14D8((_BYTE *)(a1 + 400));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.enable_moving_object_drift_detection_in_visual_slam", v49, "Whether to enable moving objects drift detection in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v50 = sub_20EAA14D8((_BYTE *)(a1 + 401));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.enable_pnp_failure_drift_detection_in_visual_slam", v50, "Whether to enable PnP failure drift detection in visual SLAM.");
  __p = (void *)nullsub_1(a2);
  v51 = sub_20EA9DB90((double *)(a1 + 408));
  sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.max_allowed_camera_extrinsic_rotation_diff_wrt_defualt_in_rad", v51, "Max allowed camera extrinsic rotation difference w.r.t. defualt value out of all input camera streams before determining drift in camera extrinsic, in rad.");
  __p = (void *)nullsub_1(a2);
  v52 = sub_20EAA14D8((_BYTE *)(a1 + 416));
  return sub_20E8B2F9C((uint64_t *)&__p, "TrackingStatusConfig.enable_camera_imu_discrepancy_with_occlusion_reinit", v52, "Whether to enable reinitialization for Camera-IMU discrepancy due to camera occlusion.");
}

void sub_20F11ED84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F11EF38(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)a1 = &off_24C9F8CF8;
  v4 = a2[10];
  v5 = a2[11];
  v6 = *((_QWORD *)a2 + 24);
  v7 = a2[6];
  v8 = a2[7];
  v10 = a2[8];
  v9 = a2[9];
  v11 = a2[2];
  v12 = a2[3];
  v14 = a2[4];
  v13 = a2[5];
  v16 = *a2;
  v15 = a2[1];
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v12;
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  sub_20F129158(a1 + 232, a3);
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  sub_20F11F060(a1);
  return a1;
}

void sub_20F11F018(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v9;

  v7 = v4;
  sub_20F11F4D0(v7);
  sub_20E8C25A8(v5);
  sub_20F11F538(v3);
  sub_20E8C25A8(v2);
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 216) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_20F11F060(uint64_t a1)
{
  double **v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  _QWORD *v10;
  double v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __double2 v21;
  unsigned int v22;
  double *v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  double *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  double *v36;
  double *v37;
  __int128 v38;
  double *v39;
  double *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;

  v2 = (double **)(a1 + 208);
  v3 = *(void **)(a1 + 208);
  v4 = *(_DWORD *)(a1 + 76);
  v5 = 0x168 / v4;
  *(_QWORD *)(a1 + 216) = v3;
  v48 = 0xB4 / v4;
  v6 = (0xB4 / v4 - 2) * (0x168 / v4) + 2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 224) - (_QWORD)v3) >> 3) < v6)
  {
    v7 = 24 * v6;
    v8 = (char *)operator new(24 * v6);
    *(_QWORD *)(a1 + 208) = v8;
    *(_QWORD *)(a1 + 216) = v8;
    *(_QWORD *)(a1 + 224) = &v8[v7];
    if (v3)
      operator delete(v3);
  }
  if (v4 <= 0xB4)
  {
    v9 = 0;
    while (v9)
    {
      if (v9 != v48 - 1)
      {
        v21 = __sincos_stret((double)v9 * 3.14159265 / (double)(v48 - 1));
        v22 = 0;
        v23 = *(double **)(a1 + 216);
        while (1)
        {
          while (1)
          {
            v24 = __sincos_stret((double)v22 * 6.28318531 / (double)v5);
            v25 = *(double *)(a1 + 80);
            v26 = v21.__sinval * v25 * v24.__cosval;
            v27 = v21.__sinval * v25 * v24.__sinval;
            v28 = v21.__cosval * v25;
            v29 = *(_QWORD *)(a1 + 224);
            if ((unint64_t)v23 >= v29)
              break;
            *v23 = v26;
            v23[1] = v27;
            v23[2] = v28;
            *(_QWORD *)(a1 + 216) = v23 + 3;
            ++v22;
            v23 += 3;
            if (v22 == v5)
              goto LABEL_9;
          }
          v30 = *v2;
          v31 = 0xAAAAAAAAAAAAAAABLL * (v23 - *v2);
          v32 = v31 + 1;
          if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
            break;
          v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v30) >> 3);
          if (2 * v33 > v32)
            v32 = 2 * v33;
          if (v33 >= 0x555555555555555)
            v34 = 0xAAAAAAAAAAAAAAALL;
          else
            v34 = v32;
          if (v34)
          {
            if (v34 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_64;
            v35 = (char *)operator new(24 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = (double *)&v35[24 * v31];
          *v36 = v26;
          v36[1] = v27;
          v36[2] = v28;
          v37 = v36;
          if (v23 != v30)
          {
            do
            {
              v38 = *(_OWORD *)(v23 - 3);
              *(v37 - 1) = *(v23 - 1);
              *(_OWORD *)(v37 - 3) = v38;
              v37 -= 3;
              v23 -= 3;
            }
            while (v23 != v30);
            v23 = *v2;
          }
          v39 = v36 + 3;
          *(_QWORD *)(a1 + 208) = v37;
          *(_QWORD *)(a1 + 216) = v36 + 3;
          *(_QWORD *)(a1 + 224) = &v35[24 * v34];
          if (v23)
            operator delete(v23);
          *(_QWORD *)(a1 + 216) = v39;
          ++v22;
          v23 = v39;
          if (v22 == v5)
            goto LABEL_9;
        }
LABEL_63:
        sub_20E969238();
      }
      v11 = -*(double *)(a1 + 80);
      v13 = *(double **)(a1 + 216);
      v12 = *(_QWORD *)(a1 + 224);
      if ((unint64_t)v13 < v12)
      {
        *v13 = 0.0;
        v13[1] = 0.0;
        v10 = v13 + 3;
        v13[2] = v11;
        goto LABEL_8;
      }
      v40 = *v2;
      v41 = 0xAAAAAAAAAAAAAAABLL * (v13 - *v2);
      v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_63;
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v40) >> 3);
      if (2 * v43 > v42)
        v42 = 2 * v43;
      if (v43 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v42;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
LABEL_64:
          sub_20E877A38();
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v44 = &v20[24 * v41];
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((double *)v44 + 2) = v11;
      v45 = (double *)v44;
      if (v13 != v40)
      {
        do
        {
          v47 = *(_OWORD *)(v13 - 3);
          *(v45 - 1) = *(v13 - 1);
          *(_OWORD *)(v45 - 3) = v47;
          v45 -= 3;
          v13 -= 3;
        }
        while (v13 != v40);
LABEL_60:
        v13 = *v2;
      }
LABEL_61:
      v10 = v44 + 24;
      *(_QWORD *)(a1 + 208) = v45;
      *(_QWORD *)(a1 + 216) = v44 + 24;
      *(_QWORD *)(a1 + 224) = &v20[24 * v19];
      if (v13)
        operator delete(v13);
LABEL_8:
      *(_QWORD *)(a1 + 216) = v10;
LABEL_9:
      if (++v9 == v48)
        return;
    }
    v13 = *(double **)(a1 + 216);
    v14 = *(_QWORD *)(a1 + 224);
    if ((unint64_t)v13 < v14)
    {
      *v13 = 0.0;
      v13[1] = 0.0;
      v13[2] = *(double *)(a1 + 80);
      v10 = v13 + 3;
      goto LABEL_8;
    }
    v15 = *v2;
    v16 = 0xAAAAAAAAAAAAAAABLL * (v13 - *v2);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_63;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_64;
      v20 = (char *)operator new(24 * v19);
    }
    else
    {
      v20 = 0;
    }
    v44 = &v20[24 * v16];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 2) = *(_QWORD *)(a1 + 80);
    v45 = (double *)v44;
    if (v13 == v15)
      goto LABEL_61;
    do
    {
      v46 = *(_OWORD *)(v13 - 3);
      *(v45 - 1) = *(v13 - 1);
      *(_OWORD *)(v45 - 3) = v46;
      v45 -= 3;
      v13 -= 3;
    }
    while (v13 != v15);
    goto LABEL_60;
  }
}

uint64_t sub_20F11F4D0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[16];
      if (v6)
      {
        v2[17] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20F11F538(uint64_t a1)
{
  void *v2;

  sub_20F129600(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_20F11F570(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v4;
  uint64_t *v5;
  int v10;
  int v11;
  uint64_t v14;
  int v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  int v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v40;
  unint64_t v41;
  int *v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  float v48;
  float v49;
  _QWORD *v50;
  _QWORD *v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t prime;
  void *v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  _QWORD *i;
  size_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  size_t v71;
  void *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t *v86;
  uint64_t *v87;
  unint64_t v88;
  int8x8_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unint64_t v95;
  int8x8_t v96;
  unint64_t v97;
  uint8x8_t v98;
  uint64_t v99;
  char v100;
  double v102;
  char v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  char *v110;
  unsigned __int8 v111;
  uint64_t v112;
  const char *v113;
  NSObject *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint8x8_t v120;
  uint64_t **v121;
  uint64_t *v122;
  unint64_t v124;
  uint64_t v126;
  char *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  float v131;
  float v132;
  _BOOL8 v133;
  unint64_t v134;
  unint64_t v135;
  size_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  size_t v142;
  size_t v143;
  size_t v144;
  _QWORD *j;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint8x8_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  void *v159;
  __int128 v160;
  int64x2_t v161;
  int64x2_t v162;
  unint64_t v163;
  int *v164;
  uint64_t v165;
  char *category[2];
  _QWORD v167[2];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  _BYTE v175[1464];
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD v181[2];
  __int128 v182;
  __int128 v183;
  int v184;
  __int128 v185;
  __int128 v186;
  int v187;
  _BYTE v188[72];
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  _BYTE v192[1448];
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[2];
  __int128 v200;
  __int128 v201;
  int v202;
  __int128 v203;
  __int128 __p;
  int v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)(a1 + 248);
  if (!v5)
    return 0;
  v10 = *a2;
  v11 = a2[1];
  while (*((_DWORD *)v5 + 4) != v10 || *((_DWORD *)v5 + 5) != v11)
  {
    if (*((_DWORD *)v5 + 6) == v10 && *((_DWORD *)v5 + 7) == v11)
      break;
    v5 = (uint64_t *)*v5;
    if (!v5)
      return 0;
  }
  if (*(_BYTE *)(a3 + 1536))
    v14 = a3 + 96;
  else
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 992);
  if (v15 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v15 = *(_DWORD *)(v14 + 992);
  }
  if (!v15)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v161 = *(int64x2_t *)v14;
  v162 = *(int64x2_t *)(v14 + 32);
  v160 = *(_OWORD *)(v14 + 16);
  sub_20EB81E74((uint64_t)&v168, a3);
  v163 = a3;
  v164 = a2;
  *(_OWORD *)&v188[24] = v169;
  *(_OWORD *)&v188[40] = v170;
  *(_OWORD *)&v188[56] = v171;
  v183 = 0u;
  v182 = 0u;
  v184 = 1065353216;
  v185 = 0u;
  v186 = 0u;
  v187 = 1065353216;
  *(_QWORD *)v188 = *(_QWORD *)a2;
  v189 = v172;
  *(_OWORD *)&v188[8] = v168;
  v191 = v174;
  v190 = v173;
  sub_20E972C70(v192, (uint64_t)v175);
  v194 = v176;
  v193 = *(_OWORD *)&v175[1448];
  v195 = v177;
  v177 = 0u;
  v197 = v179;
  v198 = v180;
  v199[0] = v181[0];
  v196 = v178;
  *(_OWORD *)((char *)v199 + 9) = *(_OWORD *)((char *)v181 + 9);
  v16 = v182;
  v182 = 0u;
  v200 = v16;
  v201 = v183;
  v202 = v184;
  if (*((_QWORD *)&v183 + 1))
  {
    v17 = *(_QWORD *)(v183 + 8);
    if ((*((_QWORD *)&v16 + 1) & (*((_QWORD *)&v16 + 1) - 1)) != 0)
    {
      if (v17 >= *((_QWORD *)&v16 + 1))
        v17 %= *((_QWORD *)&v16 + 1);
    }
    else
    {
      v17 &= *((_QWORD *)&v16 + 1) - 1;
    }
    *(_QWORD *)(v16 + 8 * v17) = &v201;
    v183 = 0uLL;
  }
  v18 = v185;
  v185 = 0u;
  v203 = v18;
  __p = v186;
  v205 = v187;
  if (*((_QWORD *)&v186 + 1))
  {
    v19 = *(_QWORD *)(v186 + 8);
    if ((*((_QWORD *)&v18 + 1) & (*((_QWORD *)&v18 + 1) - 1)) != 0)
    {
      if (v19 >= *((_QWORD *)&v18 + 1))
        v19 %= *((_QWORD *)&v18 + 1);
    }
    else
    {
      v19 &= *((_QWORD *)&v18 + 1) - 1;
    }
    *(_QWORD *)(v18 + 8 * v19) = &__p;
    v186 = 0uLL;
  }
  if (*(_DWORD *)v188 >= 0x10000u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_320;
  }
  v20 = *(_DWORD *)&v188[4];
  if (*(_DWORD *)&v188[4] >= 0x10000u)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v20 = *(_DWORD *)&v188[4];
      goto LABEL_37;
    }
LABEL_320:
    abort();
  }
LABEL_37:
  v21 = (void **)(a1 + 272);
  v22 = (unsigned __int16)v20 | (*(unsigned __int16 *)v188 << 16);
  v23 = *(_QWORD *)(a1 + 280);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v20 | (*(unsigned __int16 *)v188 << 16);
      if (v23 <= v22)
        v4 = v22 % v23;
    }
    else
    {
      v4 = ((_DWORD)v23 - 1) & v22;
    }
    v25 = (uint64_t **)*((_QWORD *)*v21 + v4);
    if (v25)
    {
      v26 = *v25;
      if (v26)
      {
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            v38 = v26[1];
            if (v38 == v22)
            {
              if (*((_DWORD *)v26 + 4) == *(_DWORD *)v188 && *((_DWORD *)v26 + 5) == v20)
                goto LABEL_67;
            }
            else if ((v38 & (v23 - 1)) != v4)
            {
              goto LABEL_56;
            }
            v26 = (uint64_t *)*v26;
            if (!v26)
              goto LABEL_56;
          }
        }
        do
        {
          v28 = v26[1];
          if (v28 == v22)
          {
            if (*((_DWORD *)v26 + 4) == *(_DWORD *)v188 && *((_DWORD *)v26 + 5) == v20)
            {
LABEL_67:
              v40 = 1;
              v41 = a3;
              v42 = v164;
              goto LABEL_149;
            }
          }
          else
          {
            if (v28 >= v23)
              v28 %= v23;
            if (v28 != v4)
              break;
          }
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
LABEL_56:
  v29 = (char *)operator new(0x6E8uLL);
  v30 = *(_OWORD *)&v188[8];
  *(_OWORD *)(v29 + 40) = *(_OWORD *)&v188[24];
  v31 = *(_OWORD *)&v188[56];
  *(_OWORD *)(v29 + 56) = *(_OWORD *)&v188[40];
  *(_OWORD *)(v29 + 72) = v31;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = *(_QWORD *)v188;
  *((_QWORD *)v29 + 11) = v189;
  *(_OWORD *)(v29 + 24) = v30;
  *((_OWORD *)v29 + 6) = v190;
  *((_QWORD *)v29 + 14) = v191;
  sub_20E972C70(v29 + 120, (uint64_t)v192);
  *((_OWORD *)v29 + 98) = v193;
  *(_OWORD *)(v29 + 1592) = v195;
  v32 = v196;
  *(_OWORD *)(v29 + 1624) = v197;
  v33 = v199[0];
  *(_OWORD *)(v29 + 1640) = v198;
  *(_OWORD *)(v29 + 1656) = v33;
  *((_QWORD *)v29 + 198) = v194;
  v195 = 0uLL;
  *(_OWORD *)(v29 + 1608) = v32;
  *(_OWORD *)(v29 + 1665) = *(_OWORD *)((char *)v199 + 9);
  v34 = v200;
  v200 = 0u;
  *(_OWORD *)(v29 + 1688) = v34;
  v35 = v201;
  *((_QWORD *)v29 + 213) = v201;
  v36 = *((_QWORD *)&v201 + 1);
  *((_QWORD *)v29 + 214) = *((_QWORD *)&v201 + 1);
  *((_DWORD *)v29 + 430) = v202;
  if (v36)
  {
    v37 = *(_QWORD *)(v35 + 8);
    if ((*((_QWORD *)&v34 + 1) & (*((_QWORD *)&v34 + 1) - 1)) != 0)
    {
      if (v37 >= *((_QWORD *)&v34 + 1))
        v37 %= *((_QWORD *)&v34 + 1);
    }
    else
    {
      v37 &= *((_QWORD *)&v34 + 1) - 1;
    }
    *(_QWORD *)(v34 + 8 * v37) = v29 + 1704;
    v201 = 0uLL;
  }
  v43 = (_QWORD *)(a1 + 288);
  v44 = v203;
  v203 = 0uLL;
  *((_OWORD *)v29 + 108) = v44;
  v45 = __p;
  *((_QWORD *)v29 + 218) = __p;
  v46 = *((_QWORD *)&__p + 1);
  *((_QWORD *)v29 + 219) = *((_QWORD *)&__p + 1);
  *((_DWORD *)v29 + 440) = v205;
  if (v46)
  {
    v47 = *(_QWORD *)(v45 + 8);
    if ((*((_QWORD *)&v44 + 1) & (*((_QWORD *)&v44 + 1) - 1)) != 0)
    {
      if (v47 >= *((_QWORD *)&v44 + 1))
        v47 %= *((_QWORD *)&v44 + 1);
    }
    else
    {
      v47 &= *((_QWORD *)&v44 + 1) - 1;
    }
    *(_QWORD *)(v44 + 8 * v47) = v29 + 1744;
    __p = 0uLL;
  }
  v48 = (float)(unint64_t)(*(_QWORD *)(a1 + 296) + 1);
  v49 = *(float *)(a1 + 304);
  if (!v23 || (float)(v49 * (float)v23) < v48)
  {
    v52 = v23 < 3 || (v23 & (v23 - 1)) != 0;
    v53 = v52 | (2 * v23);
    v54 = vcvtps_u32_f32(v48 / v49);
    if (v53 <= v54)
      prime = v54;
    else
      prime = v53;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(_QWORD *)(a1 + 280);
    if (prime > v23)
    {
LABEL_92:
      if (prime >> 61)
        sub_20E877A38();
      v56 = operator new(8 * prime);
      v57 = *v21;
      *v21 = v56;
      if (v57)
        operator delete(v57);
      v58 = 0;
      *(_QWORD *)(a1 + 280) = prime;
      do
        *((_QWORD *)*v21 + v58++) = 0;
      while (prime != v58);
      v59 = (_QWORD *)*v43;
      if (!*v43)
        goto LABEL_124;
      v60 = v59[1];
      v61 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v62 = v60 & v61;
        *((_QWORD *)*v21 + v62) = v43;
        for (i = (_QWORD *)*v59; *v59; i = (_QWORD *)*v59)
        {
          v64 = i[1] & v61;
          if (v64 == v62)
          {
            v59 = i;
          }
          else if (*((_QWORD *)*v21 + v64))
          {
            *v59 = *i;
            v65 = 8 * v64;
            *i = **(_QWORD **)((char *)*v21 + v65);
            **(_QWORD **)((char *)*v21 + v65) = i;
          }
          else
          {
            *((_QWORD *)*v21 + v64) = v59;
            v59 = i;
            v62 = v64;
          }
        }
        goto LABEL_124;
      }
      if (v60 >= prime)
        v60 %= prime;
      *((_QWORD *)*v21 + v60) = v43;
      v69 = (_QWORD *)*v59;
      if (!*v59)
      {
LABEL_124:
        v23 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_125;
        goto LABEL_140;
      }
      while (1)
      {
        v71 = v69[1];
        if (v71 >= prime)
          v71 %= prime;
        if (v71 == v60)
          goto LABEL_118;
        if (*((_QWORD *)*v21 + v71))
        {
          *v59 = *v69;
          v70 = 8 * v71;
          *v69 = **(_QWORD **)((char *)*v21 + v70);
          **(_QWORD **)((char *)*v21 + v70) = v69;
          v69 = v59;
LABEL_118:
          v59 = v69;
          v69 = (_QWORD *)*v69;
          if (!v69)
            goto LABEL_124;
        }
        else
        {
          *((_QWORD *)*v21 + v71) = v59;
          v59 = v69;
          v69 = (_QWORD *)*v69;
          v60 = v71;
          if (!v69)
            goto LABEL_124;
        }
      }
    }
    if (prime < v23)
    {
      v66 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 296) / *(float *)(a1 + 304));
      if (v23 < 3 || (v67 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        v66 = std::__next_prime(v66);
      }
      else
      {
        v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2)
          v66 = v68;
      }
      if (prime <= v66)
        prime = v66;
      if (prime < v23)
      {
        if (!prime)
        {
          v72 = *v21;
          *v21 = 0;
          if (v72)
            operator delete(v72);
          v23 = 0;
          *(_QWORD *)(a1 + 280) = 0;
          goto LABEL_140;
        }
        goto LABEL_92;
      }
      v23 = *(_QWORD *)(a1 + 280);
    }
    if ((v23 & (v23 - 1)) != 0)
    {
LABEL_125:
      if (v23 <= v22)
      {
        v4 = v22 % v23;
        v50 = *v21;
        v51 = (_QWORD *)*((_QWORD *)*v21 + v22 % v23);
        if (v51)
          goto LABEL_80;
      }
      else
      {
        v4 = v22;
        v50 = *v21;
        v51 = (_QWORD *)*((_QWORD *)*v21 + v22);
        if (v51)
          goto LABEL_80;
      }
      goto LABEL_141;
    }
LABEL_140:
    v4 = ((_DWORD)v23 - 1) & v22;
    v50 = *v21;
    v51 = (_QWORD *)*((_QWORD *)*v21 + v4);
    if (v51)
      goto LABEL_80;
    goto LABEL_141;
  }
  v50 = *v21;
  v51 = (_QWORD *)*((_QWORD *)*v21 + v4);
  if (v51)
  {
LABEL_80:
    *(_QWORD *)v29 = *v51;
    v41 = a3;
    v42 = v164;
LABEL_147:
    *v51 = v29;
    goto LABEL_148;
  }
LABEL_141:
  *(_QWORD *)v29 = *v43;
  *v43 = v29;
  v50[v4] = v43;
  v41 = a3;
  v42 = v164;
  if (*(_QWORD *)v29)
  {
    v73 = *(_QWORD *)(*(_QWORD *)v29 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v73 >= v23)
        v73 %= v23;
    }
    else
    {
      v73 &= v23 - 1;
    }
    v51 = (char *)*v21 + 8 * v73;
    goto LABEL_147;
  }
LABEL_148:
  v40 = 0;
  ++*(_QWORD *)(a1 + 296);
LABEL_149:
  v74 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v75 = (_QWORD *)*v74;
      operator delete(v74);
      v74 = v75;
    }
    while (v75);
  }
  v76 = (void *)v203;
  *(_QWORD *)&v203 = 0;
  if (v76)
    operator delete(v76);
  v77 = (_QWORD *)v201;
  if ((_QWORD)v201)
  {
    do
    {
      v78 = (_QWORD *)*v77;
      operator delete(v77);
      v77 = v78;
    }
    while (v78);
  }
  v79 = (void *)v200;
  *(_QWORD *)&v200 = 0;
  if (v79)
    operator delete(v79);
  sub_20EB8188C((uint64_t)&v188[8]);
  v80 = (_QWORD *)v186;
  if ((_QWORD)v186)
  {
    do
    {
      v81 = (_QWORD *)*v80;
      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = (void *)v185;
  *(_QWORD *)&v185 = 0;
  if (v82)
    operator delete(v82);
  v83 = (_QWORD *)v183;
  if ((_QWORD)v183)
  {
    do
    {
      v84 = (_QWORD *)*v83;
      operator delete(v83);
      v83 = v84;
    }
    while (v84);
  }
  v85 = (void *)v182;
  *(_QWORD *)&v182 = 0;
  if (v85)
    operator delete(v85);
  sub_20EB8188C((uint64_t)&v168);
  if ((v40 & 1) != 0)
    return 0;
  v86 = sub_20EB8DE00((_QWORD *)(a1 + 272), v42);
  v87 = v86;
  if (!v86)
    sub_20E89FD20("unordered_map::at: key not found");
  v88 = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3))/ *((float *)v86 + 430));
  if (v88 == 1)
  {
    v88 = 2;
  }
  else if ((v88 & (v88 - 1)) != 0)
  {
    v88 = std::__next_prime(v88);
  }
  v89 = (int8x8_t)v87[212];
  if (v88 > *(_QWORD *)&v89)
    goto LABEL_172;
  if (v88 < *(_QWORD *)&v89)
  {
    v90 = vcvtps_u32_f32((float)(unint64_t)v87[214] / *((float *)v87 + 430));
    if (*(_QWORD *)&v89 < 3uLL || (v91 = (uint8x8_t)vcnt_s8(v89), v91.i16[0] = vaddlv_u8(v91), v91.u32[0] > 1uLL))
    {
      v90 = std::__next_prime(v90);
    }
    else
    {
      v92 = 1 << -(char)__clz(v90 - 1);
      if (v90 >= 2)
        v90 = v92;
    }
    if (v88 <= v90)
      v88 = v90;
    if (v88 < *(_QWORD *)&v89)
LABEL_172:
      sub_20E8D2B3C((uint64_t)(v87 + 211), v88);
  }
  v93 = sub_20EB8DE00((_QWORD *)(a1 + 272), v42);
  v94 = v93;
  if (!v93)
    sub_20E89FD20("unordered_map::at: key not found");
  v95 = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3))/ *((float *)v93 + 440));
  if (v95 == 1)
  {
    v95 = 2;
  }
  else if ((v95 & (v95 - 1)) != 0)
  {
    v95 = std::__next_prime(v95);
  }
  v96 = (int8x8_t)v94[217];
  if (v95 > *(_QWORD *)&v96)
    goto LABEL_189;
  if (v95 < *(_QWORD *)&v96)
  {
    v97 = vcvtps_u32_f32((float)(unint64_t)v94[219] / *((float *)v94 + 440));
    if (*(_QWORD *)&v96 < 3uLL || (v98 = (uint8x8_t)vcnt_s8(v96), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
    {
      v97 = std::__next_prime(v97);
    }
    else
    {
      v99 = 1 << -(char)__clz(v97 - 1);
      if (v97 >= 2)
        v97 = v99;
    }
    if (v95 <= v97)
      v95 = v97;
    if (v95 < *(_QWORD *)&v96)
LABEL_189:
      sub_20E8D2B3C((uint64_t)(v94 + 216), v95);
  }
  sub_20EFE9CC0(a1 + 352, v42, v42, (unsigned int *)(a1 + 104));
  if ((v100 & 1) == 0)
    return 0;
  if (*(_BYTE *)(v41 + 1624))
  {
    v102 = ((*(double *)v162.i64 + *(double *)v161.i64 / *(double *)(v41 + 1616)) * 0.5 - *(double *)(v41 + 1608))
         / *(double *)(v41 + 1600);
    v103 = 1;
  }
  else
  {
    sub_20F120B68(&v165);
    if (**(int **)(v165 + 56) <= 4)
    {
      v104 = *(unsigned __int8 *)(v165 + 72);
      v105 = sub_20E8C31DC(v165, "OSLogSurrogateAppender", 1, 0);
      v106 = v105 ? v105 + 16 : 0;
      if (v104 || v105)
      {
        *(_QWORD *)&v168 = &v165;
        *((std::chrono::steady_clock::time_point *)&v168 + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v169 = std::chrono::system_clock::now();
        DWORD2(v169) = 4;
        *(_QWORD *)&v170 = "unknown file";
        DWORD2(v170) = 75;
        *((_QWORD *)&v171 + 1) = 0;
        v172 = 0;
        *(_QWORD *)&v171 = "unknown function";
        v107 = *(_QWORD *)v168;
        v108 = (uint64_t *)(*(_QWORD *)v168 + 16);
        if (*(char *)(*(_QWORD *)v168 + 39) < 0)
        {
          v110 = *(char **)(v107 + 16);
          v109 = *(char **)(v107 + 24);
        }
        else
        {
          v109 = (char *)*(unsigned __int8 *)(*(_QWORD *)v168 + 39);
          v110 = (char *)(*(_QWORD *)v168 + 16);
        }
        category[0] = v110;
        category[1] = v109;
        v111 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v188);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v188);
          if (v188[24] && (v188[23] & 0x80000000) != 0)
            operator delete(*(void **)v188);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v41 = v163;
          v42 = v164;
        }
        v112 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v113 = byte_254A4A4F8;
        }
        else
        {
          v112 = *(_QWORD *)&byte_254A4A4F8[8];
          v113 = *(const char **)byte_254A4A4F8;
        }
        v167[0] = v113;
        v167[1] = v112;
        *(_QWORD *)v188 = os_log_create(v113, category[0]);
        sub_20E86E5A8(&v188[8], (uint64_t)v167);
        sub_20E86E5A8(&v188[40], (uint64_t)category);
        v114 = *(NSObject **)v188;
        sub_20E86E44C((uint64_t)v188);
        sub_20F12973C(v106, v108, v114, OS_LOG_TYPE_ERROR);
        if (v104)
        {
          sub_20E8C003C((uint64_t)&v168, "Thermocompensation model is missing. Calibration convergence detection will be inaccurate.");
          sub_20E863570((uint64_t)&v168);
        }
        sub_20E863714((uint64_t)&v168);
      }
    }
    v103 = 0;
    v102 = 0.0;
  }
  v115 = *(_OWORD *)(v41 + 48);
  *(_OWORD *)&v188[32] = *(_OWORD *)(v41 + 32);
  *(_OWORD *)&v188[48] = v115;
  *(_QWORD *)&v188[64] = *(_QWORD *)(v41 + 64);
  v116 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v188 = *(_OWORD *)v41;
  *(_OWORD *)&v188[16] = v116;
  v117 = *(_QWORD *)v42;
  if (*(_QWORD *)v42 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (HIDWORD(v117) >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v118 = ((_DWORD)v117 << 16) | (unint64_t)WORD2(v117);
  v119 = *(_QWORD *)(a1 + 320);
  if (v119)
  {
    v120 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
    v120.i16[0] = vaddlv_u8(v120);
    if (v120.u32[0] > 1uLL)
    {
      v41 = ((_DWORD)v117 << 16) | (unint64_t)WORD2(v117);
      if (v119 <= v118)
        v41 = v118 % v119;
    }
    else
    {
      v41 = ((_DWORD)v119 - 1) & v118;
    }
    v121 = *(uint64_t ***)(*(_QWORD *)(a1 + 312) + 8 * v41);
    if (v121)
    {
      v122 = *v121;
      if (v122)
      {
        if (v120.u32[0] < 2uLL)
        {
          while (1)
          {
            v126 = v122[1];
            if (v126 == v118)
            {
              if (*((_DWORD *)v122 + 4) == (_DWORD)v117 && *((_DWORD *)v122 + 5) == HIDWORD(v117))
                return 0;
            }
            else if ((v126 & (v119 - 1)) != v41)
            {
              goto LABEL_252;
            }
            v122 = (uint64_t *)*v122;
            if (!v122)
              goto LABEL_252;
          }
        }
        do
        {
          v124 = v122[1];
          if (v124 == v118)
          {
            if (*((_DWORD *)v122 + 4) == (_DWORD)v117 && *((_DWORD *)v122 + 5) == HIDWORD(v117))
              return 0;
          }
          else
          {
            if (v124 >= v119)
              v124 %= v119;
            if (v124 != v41)
              break;
          }
          v122 = (uint64_t *)*v122;
        }
        while (v122);
      }
    }
  }
LABEL_252:
  v127 = (char *)operator new(0x98uLL);
  *(_QWORD *)&v128 = v160;
  *((_QWORD *)&v128 + 1) = v162.i64[1];
  *(_QWORD *)v127 = 0;
  *((_QWORD *)v127 + 1) = v118;
  *((_QWORD *)v127 + 2) = v117;
  *((double *)v127 + 3) = v102;
  v127[32] = v103;
  *(int64x2_t *)(v127 + 40) = vzip1q_s64(v161, v162);
  *(_OWORD *)(v127 + 56) = v128;
  v129 = *(_OWORD *)v188;
  *(_OWORD *)(v127 + 88) = *(_OWORD *)&v188[16];
  v130 = *(_OWORD *)&v188[48];
  *(_OWORD *)(v127 + 104) = *(_OWORD *)&v188[32];
  *(_OWORD *)(v127 + 120) = v130;
  *((_QWORD *)v127 + 17) = *(_QWORD *)&v188[64];
  *(_OWORD *)(v127 + 72) = v129;
  v131 = (float)(unint64_t)(*(_QWORD *)(a1 + 336) + 1);
  *((double *)v127 + 18) = a4;
  v132 = *(float *)(a1 + 344);
  if ((((float)(v132 * (float)v119) >= v131) & ~(v119 == 0)) == 0)
  {
    v133 = 1;
    if (v119 >= 3)
      v133 = (v119 & (v119 - 1)) != 0;
    v134 = v133 | (2 * v119);
    v135 = vcvtps_u32_f32(v131 / v132);
    if (v134 <= v135)
      v136 = v135;
    else
      v136 = v134;
    if (v136 == 1)
    {
      v136 = 2;
    }
    else if ((v136 & (v136 - 1)) != 0)
    {
      v136 = std::__next_prime(v136);
      v119 = *(_QWORD *)(a1 + 320);
    }
    if (v136 <= v119)
    {
      if (v136 >= v119)
        goto LABEL_296;
      v149 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 336) / *(float *)(a1 + 344));
      if (v119 < 3 || (v150 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v150.i16[0] = vaddlv_u8(v150), v150.u32[0] > 1uLL))
      {
        v149 = std::__next_prime(v149);
      }
      else
      {
        v151 = 1 << -(char)__clz(v149 - 1);
        if (v149 >= 2)
          v149 = v151;
      }
      if (v136 <= v149)
        v136 = v149;
      if (v136 >= v119)
      {
        v119 = *(_QWORD *)(a1 + 320);
LABEL_296:
        if ((v119 & (v119 - 1)) != 0)
        {
          if (v119 <= v118)
            v41 = v118 % v119;
          else
            v41 = ((_DWORD)v117 << 16) | (unint64_t)WORD2(v117);
        }
        else
        {
          v41 = ((_DWORD)v119 - 1) & v118;
        }
        goto LABEL_301;
      }
      if (!v136)
      {
        v159 = *(void **)(a1 + 312);
        *(_QWORD *)(a1 + 312) = 0;
        if (v159)
          operator delete(v159);
        v119 = 0;
        *(_QWORD *)(a1 + 320) = 0;
        goto LABEL_296;
      }
    }
    if (v136 >> 61)
      sub_20E877A38();
    v137 = operator new(8 * v136);
    v138 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v137;
    if (v138)
      operator delete(v138);
    v139 = 0;
    *(_QWORD *)(a1 + 320) = v136;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v139++) = 0;
    while (v136 != v139);
    v140 = *(_QWORD **)(a1 + 328);
    if (!v140)
    {
LABEL_295:
      v119 = v136;
      goto LABEL_296;
    }
    v141 = a1 + 328;
    v142 = v140[1];
    v143 = v136 - 1;
    if ((v136 & (v136 - 1)) == 0)
    {
      v144 = v142 & v143;
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v144) = v141;
      for (j = (_QWORD *)*v140; *v140; j = (_QWORD *)*v140)
      {
        v146 = j[1] & v143;
        if (v146 == v144)
        {
          v140 = j;
        }
        else
        {
          v147 = *(_QWORD *)(a1 + 312);
          if (*(_QWORD *)(v147 + 8 * v146))
          {
            *v140 = *j;
            v148 = 8 * v146;
            *j = **(_QWORD **)(*(_QWORD *)(a1 + 312) + v148);
            **(_QWORD **)(*(_QWORD *)(a1 + 312) + v148) = j;
          }
          else
          {
            *(_QWORD *)(v147 + 8 * v146) = v140;
            v140 = j;
            v144 = v146;
          }
        }
      }
      goto LABEL_295;
    }
    if (v142 >= v136)
      v142 %= v136;
    *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v142) = v141;
    v152 = (_QWORD *)*v140;
    if (!*v140)
      goto LABEL_295;
    while (1)
    {
      v154 = v152[1];
      if (v154 >= v136)
        v154 %= v136;
      if (v154 == v142)
        goto LABEL_289;
      v155 = *(_QWORD *)(a1 + 312);
      if (*(_QWORD *)(v155 + 8 * v154))
      {
        *v140 = *v152;
        v153 = 8 * v154;
        *v152 = **(_QWORD **)(*(_QWORD *)(a1 + 312) + v153);
        **(_QWORD **)(*(_QWORD *)(a1 + 312) + v153) = v152;
        v152 = v140;
LABEL_289:
        v140 = v152;
        v152 = (_QWORD *)*v152;
        if (!v152)
          goto LABEL_295;
      }
      else
      {
        *(_QWORD *)(v155 + 8 * v154) = v140;
        v140 = v152;
        v152 = (_QWORD *)*v152;
        v142 = v154;
        if (!v152)
          goto LABEL_295;
      }
    }
  }
LABEL_301:
  v156 = *(_QWORD *)(a1 + 312);
  v157 = *(_QWORD **)(v156 + 8 * v41);
  if (v157)
  {
    *(_QWORD *)v127 = *v157;
    *v157 = v127;
  }
  else
  {
    *(_QWORD *)v127 = *(_QWORD *)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v127;
    *(_QWORD *)(v156 + 8 * v41) = a1 + 328;
    if (*(_QWORD *)v127)
    {
      v158 = *(_QWORD *)(*(_QWORD *)v127 + 8);
      if ((v119 & (v119 - 1)) != 0)
      {
        if (v158 >= v119)
          v158 %= v119;
      }
      else
      {
        v158 &= v119 - 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v158) = v127;
    }
  }
  ++*(_QWORD *)(a1 + 336);
  sub_20F120C5C((_QWORD *)a1, v42);
  *(double *)(a1 + 392) = a4;
  return 1;
}

void sub_20F12095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  if (LOBYTE(STACK[0x768]))
  {
    if (SLOBYTE(STACK[0x767]) < 0)
      operator delete((void *)STACK[0x750]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F12099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1209F8()
{
  JUMPOUT(0x20F120A78);
}

_QWORD *sub_20F120A80(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[216];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[214];
  a1[214] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[211];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[209];
  a1[209] = 0;
  if (v7)
    operator delete(v7);
  sub_20EB8188C((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_20F120AF8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (_QWORD *)a1[215];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[213];
  a1[213] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[210];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[208];
  a1[208] = 0;
  if (v7)
    operator delete(v7);
  return sub_20EB8188C((uint64_t)a1);
}

void sub_20F120B68(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62218);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62218))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62210);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62218);
  }
  *a1 = qword_254A62210;
}

void sub_20F120C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62218);
  _Unwind_Resume(a1);
}

void sub_20F120C5C(_QWORD *a1, int *a2)
{
  unint64_t v2;
  float64x2_t v4;
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  float64x2_t *v25;
  double v26;
  uint64_t v31;
  unsigned int v32;
  char v33;
  double v34;
  double v35;
  double v37;
  double v40;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  int v57;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  int v65;
  int v66;
  unint64_t v67;
  uint8x8_t v68;
  void **v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  float64x2_t v82;
  double v83;
  double v85;
  double v86;
  float64x2_t v87;
  double v88;
  double v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  void **v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  float v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  size_t v103;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  unint64_t v115;
  uint64_t **v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t *v122;
  BOOL v123;
  double v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  float64x2_t v129;
  double v130;
  double v132;
  double v133;
  double v140;
  float64x2_t v141;
  _QWORD *v142;
  _QWORD *v143;
  float64x2_t v144;
  unint64_t v145;
  float64x2_t v147;
  double v148;
  double v149;
  float64x2_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  sub_20F122E68((uint64_t)&v147, (uint64_t)a1, a2);
  v4 = v147;
  v5 = v148;
  v6 = v149;
  v7 = sub_20EB8DE00(a1 + 34, a2);
  if (!v7)
    sub_20E89FD20("unordered_map::at: key not found");
  v8 = v7;
  v9 = v7 + 211;
  if (v7[214])
  {
    v10 = (_QWORD *)v7[213];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    v8[213] = 0;
    v12 = v8[212];
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*v9 + 8 * i) = 0;
    }
    v8[214] = 0;
  }
  v14 = v8 + 216;
  if (v8[219])
  {
    v15 = (_QWORD *)v8[218];
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    v8[218] = 0;
    v17 = v8[217];
    if (v17)
    {
      for (j = 0; j != v17; ++j)
        *(_QWORD *)(*v14 + 8 * j) = 0;
    }
    v8[219] = 0;
  }
  v19 = a1[27] - a1[26];
  if (!v19)
    return;
  v20 = 0;
  v145 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
  v142 = v8 + 218;
  v143 = v8 + 213;
  v21 = 1.0;
  v22 = sub_20EB8DE00(a1 + 39, a2);
  while (2)
  {
    if (!v22)
      sub_20E89FD20("unordered_map::at: key not found");
    v25 = (float64x2_t *)(a1[26] + 24 * v20);
    *(_QWORD *)&_Q2.f64[0] = v22[14];
    v26 = v25[1].f64[0];
    _Q7 = *v25;
    __asm { FMLA            D0, D2, V7.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + *((double *)v22 + 17) * v26;
    *(_QWORD *)&_Q2.f64[0] = v8[14];
    v147 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v22 + 9), v25->f64[0]), *((float64x2_t *)v22 + 6), *v25, 1), *(float64x2_t *)(v22 + 15), v26), *((float64x2_t *)v8 + 6));
    v148 = vaddq_f64(_Q0, _Q2).f64[0];
    if (v148 < 0.1)
      goto LABEL_19;
    if (*((_BYTE *)v8 + 1560))
      v31 = (uint64_t)(v8 + 15);
    else
      v31 = 0;
    v32 = *(_DWORD *)(v31 + 992);
    if (v32 != -1)
    {
      if (v32 <= 7)
        goto LABEL_28;
LABEL_35:
      if (v32 > 0xB)
      {
        if (v32 <= 0xD)
        {
          if (v32 != 13 || v148 < 0.00000001)
            goto LABEL_19;
          _Q0 = vdivq_f64(v147, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v148, 0));
          v37 = (*(double *)v31 + *(double *)(v31 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v40 = v37 * (_D2 * v37);
          v150 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v40* (*(double *)(v31 + 168)+ v37 * *(double *)(v31 + 224)+ v40* (*(double *)(v31 + 176)+ v37 * *(double *)(v31 + 232)+ v40* (*(double *)(v31 + 184)+ v37 * *(double *)(v31 + 240)+ v40* (*(double *)(v31 + 192)+ v37 * *(double *)(v31 + 248)+ v40* (*(double *)(v31 + 200)+ v37 * *(double *)(v31 + 256)+ v40
                                       * (*(double *)(v31 + 208)
                                        + v37 * *(double *)(v31 + 264)
                                        + v40 * (*(double *)(v31 + 216) + *(double *)(v31 + 272) * v37 + v40 * 0.0)))))))
                                  / 100.0
                                  + v21),
                                  0));
          goto LABEL_76;
        }
        if (v32 == 14)
          v33 = sub_20EB247C0(&v150, (uint64_t)&v147, (double *)(v31 + 168), (*(double *)v31 + *(double *)(v31 + 32)) * 0.5);
        else
          v33 = sub_20EB3E39C(v31, &v150, &v147);
      }
      else if (v32 > 9)
      {
        if (v32 == 10)
          v33 = sub_20EB24288(&v150, (uint64_t)&v147, (double *)(v31 + 168), (*(double *)v31 + *(double *)(v31 + 32)) * 0.5);
        else
          v33 = sub_20EB3A2E4(v31, &v150, &v147);
      }
      else
      {
        if (v32 != 9)
        {
          v47 = v148;
          _Q0 = v147;
          _D1 = v147.f64[1];
          __asm { FMLA            D6, D1, V0.D[1] }
          v60 = sqrt(_D6);
          v61 = fabs(v148);
          v62 = fabs(v60);
          v63 = v61 / v62;
          if (v61 >= v62)
            v63 = v62 / v61;
          if (v63 <= 0.414213562)
          {
            v65 = 1;
            v66 = 2;
            v64 = v63;
            if (_D6 < 0.00000001)
              goto LABEL_273;
          }
          else
          {
            v64 = (v62 - v61) / (v61 + v62);
            if (v61 >= v62)
              v64 = -v64;
            v65 = -1;
            v66 = 1;
            if (_D6 < 0.00000001)
              goto LABEL_273;
          }
          if (v61 < v62)
            v65 = -v65;
          else
            v66 = v63 > 0.414213562;
          v128 = v60 == INFINITY && v61 == INFINITY;
          v129 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v64 * v64), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v64 * v64), (float64x2_t)xmmword_210315370), v64 * v64 * (v64 * v64))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v64 * v64), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v64 * v64), (float64x2_t)xmmword_210315380), v64 * v64 * (v64 * v64))), v64 * v64 * (v64 * v64) * (v64 * v64 * (v64 * v64))));
          v130 = v64 + v64 * vdivq_f64(v129, (float64x2_t)vdupq_laneq_s64((int64x2_t)v129, 1)).f64[0];
          if (v128)
            v130 = 0.785398163;
          if (v60 == 0.0 && v148 == 0.0)
            v132 = 0.0;
          else
            v132 = v130;
          if (v148 < 0.0)
          {
            v66 = 4 - v66;
            v65 = -v65;
          }
          if (v60 < 0.0)
          {
            v66 = -v66;
            v65 = -v65;
          }
          v133 = (double)v66 * 3.061617e-17 + (double)v66 * 0.785398163 + v132 * (double)v65;
          v88 = v133
              * (v133
               * v133
               * (*(double *)(v31 + 168)
                + v133
                * v133
                * (*(double *)(v31 + 176)
                 + v133
                 * v133
                 * (*(double *)(v31 + 184)
                  + v133
                  * v133
                  * (*(double *)(v31 + 192)
                   + v133
                   * v133
                   * (*(double *)(v31 + 200)
                    + v133 * v133 * (*(double *)(v31 + 208) + v133 * v133 * *(double *)(v31 + 216)))))))
               + 1.0);
          v21 = 1.0;
          v89 = 1.0 / v60;
          goto LABEL_293;
        }
        v33 = sub_20EB3641C(v31, &v150, &v147);
      }
      goto LABEL_75;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v32 = *(_DWORD *)(v31 + 992);
    if (v32 > 7)
      goto LABEL_35;
LABEL_28:
    if (v32 > 3)
    {
      if (v32 <= 5)
      {
        if (v32 != 5)
        {
LABEL_58:
          v47 = v148;
          _Q0 = v147;
          _D1 = v147.f64[1];
          __asm { FMLA            D6, D1, V0.D[1] }
          v51 = sqrt(_D6);
          v52 = fabs(v148);
          v53 = fabs(v51);
          v54 = v52 / v53;
          if (v52 >= v53)
            v54 = v53 / v52;
          if (v54 > 0.414213562)
          {
            v55 = (v53 - v52) / (v52 + v53);
            if (v52 >= v53)
              v55 = -v55;
            v56 = -1;
            v57 = 1;
            if (_D6 < 0.00000001)
              goto LABEL_273;
            goto LABEL_117;
          }
          v56 = 1;
          v57 = 2;
          v55 = v54;
          if (_D6 >= 0.00000001)
          {
LABEL_117:
            if (v52 < v53)
              v56 = -v56;
            else
              v57 = v54 > 0.414213562;
            _ZF = v51 == INFINITY && v52 == INFINITY;
            v82 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v55 * v55), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v55 * v55), (float64x2_t)xmmword_210315370), v55 * v55 * (v55 * v55))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v55 * v55), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v55 * v55), (float64x2_t)xmmword_210315380), v55 * v55 * (v55 * v55))), v55 * v55 * (v55 * v55) * (v55 * v55 * (v55 * v55))));
            v83 = v55 + v55 * vdivq_f64(v82, (float64x2_t)vdupq_laneq_s64((int64x2_t)v82, 1)).f64[0];
            if (_ZF)
              v83 = 0.785398163;
            if (v51 == 0.0 && v148 == 0.0)
              v85 = 0.0;
            else
              v85 = v83;
            if (v148 < 0.0)
            {
              v57 = 4 - v57;
              v56 = -v56;
            }
            if (v51 < 0.0)
            {
              v57 = -v57;
              v56 = -v56;
            }
            v86 = (double)v57 * 3.061617e-17 + (double)v57 * 0.785398163 + v85 * (double)v56;
            v87 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v31 + 168), *(int64x2_t *)(v31 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v31 + 168), *(int64x2_t *)(v31 + 184)), v86 * v86)), v86 * v86);
            v88 = v86 + v86 * (v87.f64[0] + vmuld_lane_f64(v86 * v86 * (v86 * v86), v87, 1));
            v89 = v21 / v51;
LABEL_293:
            v44 = vmulq_n_f64(_Q0, v89 * v88);
            goto LABEL_77;
          }
LABEL_273:
          v44 = vmulq_n_f64(_Q0, v21 / v47);
          goto LABEL_77;
        }
        v34 = v147.f64[0] * v147.f64[0] + v147.f64[1] * v147.f64[1];
        if (v34 >= 0.00000001)
        {
          v124 = sqrt(v34);
          if (v124 <= v148)
          {
            v140 = v124 / v148 * 0.785398163
                 - v124 / v148 * (v124 / v148 + -1.0) * (v124 / v148 * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v124 <= -v148)
            {
              v126 = v124 / v148 * 0.785398163
                   - v124 / v148 * (-1.0 - v124 / v148) * (v124 / v148 * -0.0663008339 + 0.244711287);
              v127 = 3.14159265;
            }
            else
            {
              v125 = fabs(v148 / v124);
              v126 = v148 / v124 * (v125 + -1.0) * (v125 * 0.0663008339 + 0.244711287) + v148 / v124 * -0.785398163;
              v127 = 1.57079633;
            }
            v140 = v126 + v127;
          }
          v141 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v31 + 168), *(int64x2_t *)(v31 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v31 + 168), *(int64x2_t *)(v31 + 184)), v140 * v140)), v140 * v140);
          v35 = (v140 + v140 * (v141.f64[0] + vmuld_lane_f64(v140 * v140 * (v140 * v140), v141, 1))) / v124;
        }
        else
        {
          if (v148 == 0.0)
            goto LABEL_19;
          v35 = v21 / v148;
        }
        v150.f64[0] = v147.f64[0] * v35;
        v150.f64[1] = v147.f64[1] * v35;
LABEL_76:
        v44 = v150;
        goto LABEL_77;
      }
      if (v32 == 6)
      {
        v45 = vaddq_f64(vdivq_f64(v147, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v148, 0)), *(float64x2_t *)(v31 + 192));
        v46 = sqrt(vaddvq_f64(vmulq_f64(v45, v45)));
        v150 = vaddq_f64(*(float64x2_t *)(v31 + 208), vmulq_n_f64(v45, v46* (v46* (*(double *)(v31 + 168) + v46 * (*(double *)(v31 + 176) + *(double *)(v31 + 184) * v46)))+ v21));
        goto LABEL_76;
      }
      v33 = sub_20EB31FFC(v31, &v150, &v147);
LABEL_75:
      if ((v33 & 1) == 0)
        goto LABEL_19;
      goto LABEL_76;
    }
    if (v32 <= 1)
    {
      if (!v32)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v148 < 0.00000001)
        goto LABEL_19;
      v150 = vmulq_n_f64(v147, v21 / v148);
      goto LABEL_76;
    }
    if (v32 != 2)
      goto LABEL_58;
    if (*(_DWORD *)(v31 + 212))
    {
      if (v148 < 0.00000001)
        goto LABEL_19;
      _Q2 = vmulq_n_f64(v147, 1.0 / v148);
      _D0 = vmuld_lane_f64(1.0 / v148, v147, 1);
      __asm { FMLA            D1, D0, V2.D[1] }
      v21 = 1.0;
      v44 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2))), (float64x2_t)vextq_s8(*(int8x16_t *)(v31 + 192), *(int8x16_t *)(v31 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v31 + 192), *(float64x2_t *)(v31 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v31 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v31 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v31 + 184) * *(double *)&_D1))));
    }
    else
    {
      if (v148 < 0.00000001)
        goto LABEL_19;
      _Q2 = vmulq_n_f64(v147, 1.0 / v148);
      _D0 = vmuld_lane_f64(1.0 / v148, v147, 1);
      __asm { FMLA            D1, D0, V2.D[1] }
      v21 = 1.0;
      v44 = vmulq_n_f64(_Q2, *(double *)(v31 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(v31 + 176) + *(double *)(v31 + 184) * _D1));
    }
LABEL_77:
    v144 = v44;
    v67 = v8[212];
    if (v67)
    {
      v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
      v68.i16[0] = vaddlv_u8(v68);
      if (v68.u32[0] > 1uLL)
      {
        v2 = v20;
        if (v67 <= v20)
          v2 = v20 % v67;
      }
      else
      {
        v2 = ((_DWORD)v67 - 1) & v20;
      }
      v69 = *(void ***)(*v9 + 8 * v2);
      if (v69)
      {
        v70 = *v69;
        if (*v69)
        {
          if (v68.u32[0] < 2uLL)
          {
            while (1)
            {
              v72 = v70[1];
              if (v72 == v20)
              {
                if (*((_DWORD *)v70 + 4) == (_DWORD)v20)
                  goto LABEL_156;
              }
              else if ((v72 & (v67 - 1)) != v2)
              {
                goto LABEL_97;
              }
              v70 = (_QWORD *)*v70;
              if (!v70)
                goto LABEL_97;
            }
          }
          do
          {
            v71 = v70[1];
            if (v71 == v20)
            {
              if (*((_DWORD *)v70 + 4) == (_DWORD)v20)
                goto LABEL_156;
            }
            else
            {
              if (v71 >= v67)
                v71 %= v67;
              if (v71 != v2)
                break;
            }
            v70 = (_QWORD *)*v70;
          }
          while (v70);
        }
      }
    }
LABEL_97:
    v70 = operator new(0x28uLL);
    *v70 = 0;
    v70[1] = v20;
    *((_DWORD *)v70 + 4) = v20;
    *(float *)v44.f64 = (float)(unint64_t)(v8[214] + 1);
    v73 = *((float *)v8 + 430);
    if ((((float)(v73 * (float)v67) >= *(float *)v44.f64) & ~(v67 == 0)) == 0)
    {
      v74 = v67 < 3 || (v67 & (v67 - 1)) != 0;
      v75 = v74 | (2 * v67);
      v76 = vcvtps_u32_f32(*(float *)v44.f64 / v73);
      if (v75 <= v76)
        prime = v76;
      else
        prime = v75;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v67 = v8[212];
      }
      if (prime > v67)
        goto LABEL_109;
      if (prime < v67)
      {
        v78 = vcvtps_u32_f32((float)(unint64_t)v8[214] / *((float *)v8 + 430));
        if (v67 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
        {
          v78 = std::__next_prime(v78);
        }
        else
        {
          v80 = 1 << -(char)__clz(v78 - 1);
          if (v78 >= 2)
            v78 = v80;
        }
        if (prime <= v78)
          prime = v78;
        if (prime < v67)
LABEL_109:
          sub_20E8D2B3C((uint64_t)v9, prime);
      }
      v67 = v8[212];
      if ((v67 & (v67 - 1)) == 0)
      {
        v2 = ((_DWORD)v67 - 1) & v20;
        v90 = *v9;
        v91 = *(_QWORD **)(*v9 + 8 * v2);
        if (!v91)
          goto LABEL_142;
LABEL_148:
        *v70 = *v91;
LABEL_154:
        *v91 = v70;
        goto LABEL_155;
      }
      if (v67 <= v20)
      {
        v2 = v20 % v67;
        v90 = *v9;
        v91 = *(_QWORD **)(*v9 + 8 * v2);
        if (v91)
          goto LABEL_148;
        goto LABEL_142;
      }
      v2 = v20;
    }
    v90 = *v9;
    v91 = *(_QWORD **)(*v9 + 8 * v2);
    if (v91)
      goto LABEL_148;
LABEL_142:
    *v70 = *v143;
    *v143 = v70;
    *(_QWORD *)(v90 + 8 * v2) = v143;
    if (*v70)
    {
      v92 = *(_QWORD *)(*v70 + 8);
      if ((v67 & (v67 - 1)) != 0)
      {
        if (v92 >= v67)
          v92 %= v67;
      }
      else
      {
        v92 &= v67 - 1;
      }
      v91 = (_QWORD *)(*v9 + 8 * v92);
      goto LABEL_154;
    }
LABEL_155:
    ++v8[214];
LABEL_156:
    *((double *)v70 + 3) = v5 + vmuld_lane_f64(0.0, v144, 1) + v4.f64[0] * v144.f64[0];
    *((double *)v70 + 4) = v6 + vmuld_lane_f64(v4.f64[1], v144, 1);
    v93 = v8[217];
    if (v93)
    {
      v94 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
      v94.i16[0] = vaddlv_u8(v94);
      if (v94.u32[0] > 1uLL)
      {
        v2 = v20;
        if (v93 <= v20)
          v2 = v20 % v93;
      }
      else
      {
        v2 = ((_DWORD)v93 - 1) & v20;
      }
      v95 = *(void ***)(*v14 + 8 * v2);
      if (v95)
      {
        v96 = *v95;
        if (*v95)
        {
          if (v94.u32[0] < 2uLL)
          {
            while (1)
            {
              v98 = v96[1];
              if (v98 == v20)
              {
                if (*((_DWORD *)v96 + 4) == (_DWORD)v20)
                  goto LABEL_214;
              }
              else if ((v98 & (v93 - 1)) != v2)
              {
                goto LABEL_176;
              }
              v96 = (_QWORD *)*v96;
              if (!v96)
                goto LABEL_176;
            }
          }
          do
          {
            v97 = v96[1];
            if (v97 == v20)
            {
              if (*((_DWORD *)v96 + 4) == (_DWORD)v20)
                goto LABEL_214;
            }
            else
            {
              if (v97 >= v93)
                v97 %= v93;
              if (v97 != v2)
                break;
            }
            v96 = (_QWORD *)*v96;
          }
          while (v96);
        }
      }
    }
LABEL_176:
    v96 = operator new(0x30uLL);
    *v96 = 0;
    v96[1] = v20;
    *((_DWORD *)v96 + 4) = v20;
    *(float *)v44.f64 = (float)(unint64_t)(v8[219] + 1);
    v99 = *((float *)v8 + 440);
    if ((((float)(v99 * (float)v93) >= *(float *)v44.f64) & ~(v93 == 0)) == 0)
    {
      v100 = (v93 & (v93 - 1)) != 0;
      if (v93 < 3)
        v100 = 1;
      v101 = v100 | (2 * v93);
      v102 = vcvtps_u32_f32(*(float *)v44.f64 / v99);
      if (v101 <= v102)
        v103 = v102;
      else
        v103 = v101;
      if (v103 == 1)
      {
        v103 = 2;
      }
      else if ((v103 & (v103 - 1)) != 0)
      {
        v103 = std::__next_prime(v103);
        v93 = v8[217];
      }
      if (v103 > v93)
        goto LABEL_187;
      if (v103 < v93)
      {
        v104 = vcvtps_u32_f32((float)(unint64_t)v8[219] / *((float *)v8 + 440));
        if (v93 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v93), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
        {
          v104 = std::__next_prime(v104);
        }
        else
        {
          v106 = 1 << -(char)__clz(v104 - 1);
          if (v104 >= 2)
            v104 = v106;
        }
        if (v103 <= v104)
          v103 = v104;
        if (v103 < v93)
LABEL_187:
          sub_20E8D2B3C((uint64_t)(v8 + 216), v103);
      }
      v93 = v8[217];
      if ((v93 & (v93 - 1)) == 0)
      {
        v2 = ((_DWORD)v93 - 1) & v20;
        v107 = *v14;
        v108 = *(_QWORD **)(*v14 + 8 * v2);
        if (!v108)
          goto LABEL_200;
LABEL_206:
        *v96 = *v108;
LABEL_212:
        *v108 = v96;
        goto LABEL_213;
      }
      if (v93 <= v20)
      {
        v2 = v20 % v93;
        v107 = *v14;
        v108 = *(_QWORD **)(*v14 + 8 * v2);
        if (v108)
          goto LABEL_206;
        goto LABEL_200;
      }
      v2 = v20;
    }
    v107 = *v14;
    v108 = *(_QWORD **)(*v14 + 8 * v2);
    if (v108)
      goto LABEL_206;
LABEL_200:
    *v96 = *v142;
    *v142 = v96;
    *(_QWORD *)(v107 + 8 * v2) = v142;
    if (*v96)
    {
      v109 = *(_QWORD *)(*v96 + 8);
      if ((v93 & (v93 - 1)) != 0)
      {
        if (v109 >= v93)
          v109 %= v93;
      }
      else
      {
        v109 &= v93 - 1;
      }
      v108 = (_QWORD *)(*v14 + 8 * v109);
      goto LABEL_212;
    }
LABEL_213:
    ++v8[219];
LABEL_214:
    v96[3] = 0;
    v96[4] = 0;
    v96[5] = 0;
    if (*((_BYTE *)v8 + 1560))
      v110 = v8 + 15;
    else
      v110 = 0;
    v111 = *((_DWORD *)v110 + 248);
    if (v111 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v111 = *((_DWORD *)v110 + 248);
      if (v111 <= 7)
        goto LABEL_219;
    }
    else if (v111 <= 7)
    {
LABEL_219:
      if (v111 <= 3)
      {
        if (!v111)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        goto LABEL_19;
      }
      if (v111 < 7)
        goto LABEL_19;
      goto LABEL_231;
    }
    if (v111 > 0xB)
    {
      if (v111 < 0xF)
        goto LABEL_19;
    }
    else if (v111 > 9)
    {
      if (v111 == 10)
        goto LABEL_19;
    }
    else if (v111 != 9)
    {
      goto LABEL_19;
    }
LABEL_231:
    if (*((_BYTE *)v8 + 1560))
      v112 = (uint64_t)(v8 + 15);
    else
      v112 = 0;
    v113 = v8[217];
    if (!v113)
      goto LABEL_309;
    v114 = (uint8x8_t)vcnt_s8((int8x8_t)v113);
    v114.i16[0] = vaddlv_u8(v114);
    if (v114.u32[0] > 1uLL)
    {
      v115 = v20;
      if (v113 <= v20)
        v115 = v20 % v113;
    }
    else
    {
      v115 = ((_DWORD)v113 - 1) & v20;
    }
    v116 = *(uint64_t ***)(*v14 + 8 * v115);
    if (!v116 || (v117 = *v116) == 0)
LABEL_309:
      sub_20E89FD20("unordered_map::at: key not found");
    if (v114.u32[0] < 2uLL)
    {
      v118 = v113 - 1;
      while (1)
      {
        v120 = v117[1];
        if (v120 == v20)
        {
          if (*((_DWORD *)v117 + 4) == (_DWORD)v20)
            goto LABEL_254;
        }
        else if ((v120 & v118) != v115)
        {
          goto LABEL_309;
        }
        v117 = (uint64_t *)*v117;
        if (!v117)
          goto LABEL_309;
      }
    }
    while (1)
    {
      v119 = v117[1];
      if (v119 == v20)
        break;
      if (v119 >= v113)
        v119 %= v113;
      if (v119 != v115)
        goto LABEL_309;
LABEL_244:
      v117 = (uint64_t *)*v117;
      if (!v117)
        goto LABEL_309;
    }
    if (*((_DWORD *)v117 + 4) != (_DWORD)v20)
      goto LABEL_244;
LABEL_254:
    v121 = *(_DWORD *)(v112 + 992);
    if (v121 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v121 = *(_DWORD *)(v112 + 992);
      v122 = v117 + 3;
      if (v121 > 7)
        goto LABEL_261;
LABEL_256:
      if (v121 <= 3)
      {
        if (!v121)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        goto LABEL_296;
      }
      if (v121 < 7)
        goto LABEL_296;
      v123 = sub_20EB339E4(v112, &v150, (float64x2_t *)v122, &v147);
      goto LABEL_301;
    }
    v122 = v117 + 3;
    if (v121 <= 7)
      goto LABEL_256;
LABEL_261:
    if (v121 > 0xB)
    {
      if (v121 <= 0xE)
        goto LABEL_295;
      v123 = sub_20EB3F514(v112, &v150, (float64x2_t *)v122, &v147);
LABEL_301:
      if (!v123
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TriangulationBasedCalibrationChangeDetector.cpp", 345, (uint64_t)"reference.model.lens_model()->calibrated_to_ray( direction.data(), reference.offsets.at(i).data(), xc.data())", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      goto LABEL_19;
    }
    if (v121 > 9)
    {
      if (v121 == 10)
        goto LABEL_295;
      v123 = sub_20EB3B45C(v112, &v150, (float64x2_t *)v122, &v147);
      goto LABEL_301;
    }
    if (v121 == 9)
    {
      v123 = sub_20EB378CC(v112, &v150, (float64x2_t *)v122, &v147);
      goto LABEL_301;
    }
LABEL_295:
    v44.f64[0] = v148;
    _Q1 = v147;
    _Q2 = vmulq_f64(_Q1, _Q1);
    _D3 = v147.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q2.f64[0] = v21 / sqrt(_Q2.f64[0] + v44.f64[0] * v44.f64[0]);
    v150 = vmulq_n_f64(v147, _Q2.f64[0]);
    v151 = *(_OWORD *)&vmulq_f64(v44, _Q2);
LABEL_296:
    *v122 = 0;
    v122[1] = 0;
    v122[2] = 0;
LABEL_19:
    if (++v20 != v145)
    {
      v22 = sub_20EB8DE00(a1 + 39, a2);
      continue;
    }
    break;
  }
}

void sub_20F122100(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F122114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F12212C(_QWORD *a1, int *a2, uint64_t a3, int64x2_t *a4, uint64_t a5, unsigned int a6, int a7, int a8, double a9, double a10, double a11, double a12)
{
  uint64_t *v12;
  int v25;
  int v26;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v32;
  double v33;
  uint64_t *v34;
  __int128 v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  size_t v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  size_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  double v111;
  uint64_t *v112;
  double v113;
  uint64_t *v114;
  double v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unsigned int v125;
  char *category;
  uint64_t *v127;
  uint64_t *v128;
  int64x2_t v129;
  int v130;
  int64x2_t v131;
  unint64_t v132;
  int64x2_t v133;
  int v134;
  _QWORD v135[3];
  int v136;
  const char *v137;
  int v138;
  const char *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  __int128 v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  void *object[2];
  std::__shared_weak_count *v148;
  _BYTE v149[32];
  unint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  unsigned int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v12 = (uint64_t *)a1[31];
  if (!v12)
    return 0;
  v25 = *a2;
  v26 = a2[1];
  while (*((_DWORD *)v12 + 4) != v25 || *((_DWORD *)v12 + 5) != v26)
  {
    if (*((_DWORD *)v12 + 6) == v25 && *((_DWORD *)v12 + 7) == v26)
      break;
    v12 = (uint64_t *)*v12;
    if (!v12)
      return 0;
  }
  v29 = a1 + 39;
  v30 = sub_20EB8DE00(a1 + 39, a2);
  if (!v30)
    goto LABEL_126;
  if (*((double *)v30 + 18) > a9)
    return 0;
  v32 = sub_20EB8DE00(a1 + 39, a2);
  if (!v32)
    goto LABEL_126;
  v33 = *(double *)a3;
  *((_BYTE *)v32 + 32) = *(_BYTE *)(a3 + 8);
  *((double *)v32 + 3) = v33;
  v131 = a4[1];
  v133 = a4[2];
  v129 = *a4;
  v34 = sub_20EB8DE00(a1 + 39, a2);
  if (!v34)
    goto LABEL_126;
  *((_QWORD *)&v35 + 1) = v133.i64[1];
  *(_QWORD *)&v35 = v131.i64[0];
  *(_OWORD *)(v34 + 7) = v35;
  *(int64x2_t *)(v34 + 5) = vzip1q_s64(v129, v133);
  v36 = sub_20EB8DE00(a1 + 39, a2);
  if (!v36)
    goto LABEL_126;
  *(_OWORD *)(v36 + 9) = *(_OWORD *)a5;
  v37 = *(_OWORD *)(a5 + 16);
  v38 = *(_OWORD *)(a5 + 32);
  v39 = *(_OWORD *)(a5 + 48);
  v36[17] = *(_QWORD *)(a5 + 64);
  *(_OWORD *)(v36 + 15) = v39;
  *(_OWORD *)(v36 + 13) = v38;
  *(_OWORD *)(v36 + 11) = v37;
  v40 = sub_20EB8DE00(a1 + 39, a2);
  if (!v40 || (v134 = a7, *((double *)v40 + 18) = a9, (v41 = sub_20EB8DE00(a1 + 39, a2)) == 0))
LABEL_126:
    sub_20E89FD20("unordered_map::at: key not found");
  object[0] = 0;
  object[1] = 0;
  *(double *)&v148 = 0.0;
  sub_20E9733B8((float64x2_t *)(v41 + 9), (double *)object);
  v143 = *(_OWORD *)object;
  v144 = *(double *)&v148;
  v42 = sub_20EB8DE00(a1 + 44, a2);
  if (!v42)
    sub_20E89FD20("unordered_map::at: key not found");
  sub_20F122E68((uint64_t)object, (uint64_t)a1, a2);
  if (*(_BYTE *)(a3 + 8))
    v43 = *(double *)a3;
  else
    v43 = 0.0;
  sub_20EFE3AB8((uint64_t)(v42 + 3), object, &v143, a6, v134, a8, a9, a10, a11, v43, a12);
  sub_20F120B68(&v142);
  if (**(int **)(v142 + 56) <= 2)
  {
    v130 = *(unsigned __int8 *)(v142 + 72);
    v132 = sub_20E8C31DC(v142, "OSLogSurrogateAppender", 1, 0);
    if (((v132 == 0) & ~(v130 != 0)) == 0)
    {
      v125 = a6;
      v135[0] = &v142;
      v135[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v135[2] = std::chrono::system_clock::now().__d_.__rep_;
      v136 = 2;
      v137 = "unknown file";
      v138 = 127;
      v140 = 0;
      v141 = 0;
      v139 = "unknown function";
      v124 = (std::__shared_weak_count *)a1[37];
      v44 = -273.15;
      if (*(_BYTE *)(a3 + 8))
        v45 = *(double *)a3;
      else
        v45 = -273.15;
      v46 = v132;
      v47 = sub_20EB8DE00(a1 + 39, a2);
      if (!v47
        || (v128 = sub_20EB8DE00(a1 + 39, a2)) == 0
        || (v127 = sub_20EB8DE00(a1 + 39, a2)) == 0
        || (v123 = sub_20EB8DE00(a1 + 39, a2)) == 0)
      {
        sub_20E89FD20("unordered_map::at: key not found");
      }
      v48 = *(_QWORD *)v135[0];
      v121 = *(_QWORD *)v135[0];
      if (*(char *)(*(_QWORD *)v135[0] + 39) < 0)
      {
        v49 = *(_QWORD *)(v48 + 24);
        category = *(char **)(v48 + 16);
      }
      else
      {
        v49 = *(unsigned __int8 *)(*(_QWORD *)v135[0] + 39);
        category = (char *)(*(_QWORD *)v135[0] + 16);
      }
      v120 = *(_QWORD *)v135[0] + 16;
      v122 = v47;
      v50 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (v149[0] && SHIBYTE(v148) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v46 = v132;
      }
      if (byte_254A4A4F8[23] >= 0)
        v51 = byte_254A4A4F8;
      else
        v51 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v52 = byte_254A4A4F8[23];
      else
        v52 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v51, category);
      v53 = &object[1];
      if (v52 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v52 >= 0x17)
      {
        v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v54 = v52 | 7;
        v55 = v54 + 1;
        v53 = (void **)operator new(v54 + 1);
        v148 = (std::__shared_weak_count *)v52;
        *(_QWORD *)v149 = v55 | 0x8000000000000000;
        object[1] = v53;
        v46 = v132;
      }
      else
      {
        v149[7] = v52;
        if (!v52)
        {
LABEL_52:
          *((_BYTE *)v53 + v52) = 0;
          v149[8] = 1;
          v56 = &v149[16];
          if (v49 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v57 = v125;
          if (v49 >= 0x17)
          {
            v58 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v49 | 7) != 0x17)
              v58 = v49 | 7;
            v59 = v58 + 1;
            v56 = operator new(v58 + 1);
            *(_QWORD *)&v149[24] = v49;
            v150 = v59 | 0x8000000000000000;
            *(_QWORD *)&v149[16] = v56;
            v46 = v132;
          }
          else
          {
            HIBYTE(v150) = v49;
            if (!v49)
              goto LABEL_60;
          }
          memmove(v56, category, v49);
LABEL_60:
          v56[v49] = 0;
          LOBYTE(v151) = 1;
          v60 = object[0];
          if (SHIBYTE(v150) < 0)
            operator delete(*(void **)&v149[16]);
          if (v149[8] && (v149[7] & 0x80000000) != 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v46 && *(_QWORD *)(v46 + 24))
          {
            v61 = _os_log_pack_size();
            v62 = (std::__shared_weak_count_vtbl *)operator new(v61, (std::align_val_t)8uLL);
            v63 = (std::__shared_weak_count *)operator new();
            v64 = v63;
            v63->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v63->__shared_owners_;
            v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v63->__shared_weak_owners_ = 0;
            v63[1].__vftable = v62;
            object[0] = v62;
            object[1] = v62;
            v148 = v63;
            do
              v66 = __ldxr(p_shared_owners);
            while (__stxr(v66 + 1, p_shared_owners));
            memset(v149, 0, 24);
            v57 = v125;
            do
              v67 = __ldaxr(p_shared_owners);
            while (__stlxr(v67 - 1, p_shared_owners));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v64);
            }
            v68 = _os_log_pack_fill();
            v69 = *a2;
            v70 = a2[1];
            v71 = v122[5];
            v72 = v128[6];
            v73 = v127[7];
            v74 = v123[8];
            v75 = v143;
            v76 = v144;
            *(_DWORD *)v68 = 67113216;
            *(_DWORD *)(v68 + 4) = v69;
            *(_WORD *)(v68 + 8) = 1024;
            *(_DWORD *)(v68 + 10) = v70;
            *(_WORD *)(v68 + 14) = 2048;
            *(_QWORD *)(v68 + 16) = v124;
            *(_WORD *)(v68 + 24) = 2048;
            *(double *)(v68 + 26) = v45;
            *(_WORD *)(v68 + 34) = 2048;
            *(_QWORD *)(v68 + 36) = v71;
            *(_WORD *)(v68 + 44) = 2048;
            *(_QWORD *)(v68 + 46) = v72;
            *(_WORD *)(v68 + 54) = 2048;
            *(_QWORD *)(v68 + 56) = v73;
            *(_WORD *)(v68 + 64) = 2048;
            *(_QWORD *)(v68 + 66) = v74;
            *(_WORD *)(v68 + 74) = 2048;
            *(_QWORD *)(v68 + 76) = v75;
            *(_WORD *)(v68 + 84) = 2048;
            *(_QWORD *)(v68 + 86) = *((_QWORD *)&v75 + 1);
            *(_WORD *)(v68 + 94) = 2048;
            *(double *)(v68 + 96) = v76;
            *(_WORD *)(v68 + 104) = 2048;
            *(double *)(v68 + 106) = a10;
            *(_WORD *)(v68 + 114) = 1024;
            *(_DWORD *)(v68 + 116) = v125;
            *(_WORD *)(v68 + 120) = 1024;
            *(_DWORD *)(v68 + 122) = v134;
            *(_WORD *)(v68 + 126) = 1024;
            *(_DWORD *)(v68 + 128) = a8;
            *(_WORD *)(v68 + 132) = 2048;
            *(double *)(v68 + 134) = a11;
            *(_WORD *)(v68 + 142) = 2048;
            *(double *)(v68 + 144) = a12;
            v77 = operator new();
            v78 = *(unsigned __int8 *)(v121 + 39);
            v79 = v120;
            if ((v78 & 0x80u) != 0)
            {
              v79 = *(_QWORD *)(v121 + 16);
              v78 = *(_QWORD *)(v121 + 24);
            }
            *(_OWORD *)v77 = *(_OWORD *)object;
            *(double *)(v77 + 16) = *(double *)&v148;
            object[1] = 0;
            *(double *)&v148 = 0.0;
            *(_OWORD *)(v77 + 24) = *(_OWORD *)v149;
            *(_QWORD *)v149 = 0;
            *(_QWORD *)&v149[8] = 0;
            *(_QWORD *)(v77 + 40) = v79;
            *(_QWORD *)(v77 + 48) = v78;
            *(_BYTE *)(v77 + 56) = 2;
            v145 = 0;
            v146 = v77;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v132 + 24) + 40))(*(_QWORD *)(v132 + 24), &v146);
            v80 = v146;
            v146 = 0;
            if (v80)
            {
              v81 = *(std::__shared_weak_count **)(v80 + 32);
              if (v81)
              {
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              v84 = *(std::__shared_weak_count **)(v80 + 16);
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
              v87 = v145;
              v145 = 0;
              if (v87)
              {
                v88 = *(std::__shared_weak_count **)(v87 + 32);
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                v91 = *(std::__shared_weak_count **)(v87 + 16);
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                MEMORY[0x212BC6398](v87, 0x10F0C40B62ED6C6);
              }
            }
            v94 = *(std::__shared_weak_count **)&v149[8];
            if (*(_QWORD *)&v149[8])
            {
              v95 = (unint64_t *)(*(_QWORD *)&v149[8] + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            v97 = v148;
            if (*(double *)&v148 != 0.0)
            {
              v98 = (unint64_t *)&v148->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
          }
          else
          {
            os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG);
            v100 = *a2;
            v101 = a2[1];
            v102 = v122[5];
            v103 = v128[6];
            v104 = v127[7];
            v105 = v123[8];
            LODWORD(object[0]) = 67113216;
            HIDWORD(object[0]) = v100;
            LOWORD(object[1]) = 1024;
            *(_DWORD *)((char *)&object[1] + 2) = v101;
            HIWORD(object[1]) = 2048;
            v148 = v124;
            *(_WORD *)v149 = 2048;
            *(double *)&v149[2] = v45;
            *(_WORD *)&v149[10] = 2048;
            *(_QWORD *)&v149[12] = v102;
            *(_WORD *)&v149[20] = 2048;
            *(_QWORD *)&v149[22] = v103;
            *(_WORD *)&v149[30] = 2048;
            v150 = v104;
            v151 = 2048;
            v152 = v105;
            v153 = 2048;
            v154 = v143;
            v155 = 2048;
            v156 = *((_QWORD *)&v143 + 1);
            v157 = 2048;
            v158 = v144;
            v159 = 2048;
            v160 = a10;
            v161 = 1024;
            v162 = v125;
            v163 = 1024;
            v164 = v134;
            v165 = 1024;
            v166 = a8;
            v167 = 2048;
            v168 = a11;
            v169 = 2048;
            v170 = a12;
            v106 = (void *)_os_log_send_and_compose_impl();
            if (v106)
              free(v106);
          }
          if (v130)
          {
            v107 = *a2;
            v108 = a2[1];
            v109 = a1[37];
            if (*(_BYTE *)(a3 + 8))
              v44 = *(double *)a3;
            v110 = sub_20EB8DE00(v29, a2);
            if (!v110
              || (v111 = *((double *)v110 + 5), (v112 = sub_20EB8DE00(v29, a2)) == 0)
              || (v113 = *((double *)v112 + 6), (v114 = sub_20EB8DE00(v29, a2)) == 0)
              || (v115 = *((double *)v114 + 7), (v116 = sub_20EB8DE00(v29, a2)) == 0))
            {
              sub_20E89FD20("unordered_map::at: key not found");
            }
            sub_20E8C003C((uint64_t)v135, "CCD: [%d:%d] num_streams=%zu, t=%f, fx=%f, fy=%f, cx=%f, cy=%f, rx=%f, ry=%f, rz=%f, health=%f, inlier_points=%d, stationary=%d, calibration_enabled=%d, vergence_angle=%f, lux=%e", v107, v108, v109, v44, v111, v113, v115, *((double *)v116 + 8), *(double *)&v143, *((double *)&v143 + 1), v144, a10, v57, v134, a8, a11,
              a12);
            sub_20E863570((uint64_t)v135);
          }
          sub_20E863570((uint64_t)v135);
          v117 = v141;
          if (v141)
          {
            v118 = (unint64_t *)&v141->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          return 1;
        }
      }
      memmove(v53, v51, v52);
      goto LABEL_52;
    }
  }
  return 1;
}

void sub_20F122D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a65)
  {
    if (a64 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F122D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E8C4(&a58);
  sub_20E86E8C4(&a57);
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F122D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F122DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  MEMORY[0x212BC6398](v43, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F122DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F122DE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F122E68(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v6;
  uint64_t *result;
  __int128 v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  double v12;
  double v13;
  double v14;

  v6 = (_QWORD *)(a2 + 312);
  result = sub_20EB8DE00((_QWORD *)(a2 + 312), a3);
  if (!result)
    goto LABEL_10;
  v8 = *(_OWORD *)(result + 7);
  *(_OWORD *)a1 = *(_OWORD *)(result + 5);
  *(_OWORD *)(a1 + 16) = v8;
  if (!*(_BYTE *)(a2 + 96))
    return result;
  v9 = (_QWORD *)(a2 + 272);
  result = sub_20EB8DE00(v9, a3);
  if (!result)
    goto LABEL_10;
  if (!*((_BYTE *)result + 1648))
    return result;
  v10 = sub_20EB8DE00(v9, a3);
  if (!v10)
    goto LABEL_10;
  v11 = v10;
  if (!*((_BYTE *)v10 + 1648))
    sub_20E866B34();
  v12 = *((double *)v10 + 203);
  result = sub_20EB8DE00(v6, a3);
  if (!result)
LABEL_10:
    sub_20E89FD20("unordered_map::at: key not found");
  v13 = v12 * (30.0 - *((double *)result + 3));
  v14 = *(double *)(a1 + 8) + v13;
  *(double *)a1 = *(double *)a1 + v13 * *((double *)v11 + 205);
  *(double *)(a1 + 8) = v14;
  return result;
}

void sub_20F122F48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  size_t prime;
  _QWORD *i;
  uint64_t **v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  float64x2_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  int *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned __int8 v33;
  unsigned int v34;
  uint64_t v36;
  void *v37;
  __uint64_t v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  __darwin_time_t tv_sec;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  char v63;
  int *v64;
  double v65;
  double v66;
  uint64_t *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned __int8 v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  char *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t k;
  uint64_t v81;
  unsigned __int8 v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t *v86;
  size_t v87;
  _BYTE *v88;
  uint64_t *v89;
  char v90;
  float64x2_t v91;
  uint64_t *v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  unsigned __int8 v97;
  unsigned int v98;
  uint64_t v100;
  char *v101;
  size_t v102;
  __darwin_time_t v103;
  uint64_t v104;
  uint64_t m;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  unsigned __int8 v109;
  unsigned int v110;
  unint64_t v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  __uint64_t *v115;
  unsigned __int8 v116;
  char *v118;
  size_t v119;
  __darwin_time_t v120;
  uint64_t v121;
  uint64_t j;
  uint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  _QWORD *v127;
  float64x2_t v128;
  int v129;
  float64x2_t v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t *v134;
  __uint64_t __dst[2];
  int64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  const void *v143;
  uint64_t v144;
  const void *v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  int v149;
  uint64_t v150[19];
  timespec v151;
  void *v152;
  _BYTE v153[22];
  __int16 v154;
  void *v155;
  __int16 v156;
  __uint64_t v157;
  __int16 v158;
  int64_t v159;
  __int16 v160;
  _BYTE v161[10];
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  _BYTE v166[12];
  char v167;
  void *__p;
  char v169;
  uint64_t v170;

  v170 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 296);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  prime = (unint64_t)(float)v4;
  if (prime == 1)
  {
    prime = 2;
LABEL_6:
    sub_20E8D2B3C(a2, prime);
    goto LABEL_7;
  }
  if ((prime & (prime - 1)) != 0)
    prime = std::__next_prime(prime);
  if (prime)
    goto LABEL_6;
LABEL_7:
  for (i = *(_QWORD **)(a1 + 288); i; i = (_QWORD *)*i)
  {
    v141 = i[2];
    LOBYTE(v142) = 0;
    sub_20EFEA18C(a2, (int *)&v141, (uint64_t)&v141);
  }
  v127 = (_QWORD *)(a1 + 312);
  v7 = (uint64_t **)(a1 + 328);
  v8 = (double *)(a1 + 328);
  while (1)
  {
    v8 = *(double **)v8;
    if (!v8)
      break;
    if (v8[18] - *(double *)(a1 + 392) < *(double *)(a1 + 16))
      return;
  }
  v133 = a1;
  v9 = MEMORY[0x24BEDB870];
  v10 = MEMORY[0x24BEDB870] + 64;
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v150[0] = MEMORY[0x24BEDB870] + 64;
  v141 = v11;
  *(uint64_t *)((char *)&v141 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v141 + *(_QWORD *)(v141 - 24));
  v124 = a2;
  std::ios_base::init(v13, &v142);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v141 = v9 + 24;
  v150[0] = v10;
  std::streambuf::basic_streambuf();
  v142 = MEMORY[0x24BEDB848] + 16;
  v14.f64[1] = 0.0;
  v147 = 0u;
  v148 = 0u;
  v149 = 16;
  v15 = *v7;
  v16 = v133;
  v17 = v127;
  if (!*v7)
    goto LABEL_68;
  v125 = 1;
  do
  {
    v18 = (int *)(v15 + 2);
    v19 = sub_20EB8DE00((_QWORD *)(v133 + 352), (int *)v15 + 4);
    if (!v19)
      sub_20E89FD20("unordered_map::at: key not found");
    sub_20EFE44D0((uint64_t)(v19 + 3), (uint64_t)__dst);
    if (!v140)
    {
      sub_20E86A980(&v141, (uint64_t)"[", 1);
      v20 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v20, (uint64_t)":", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v21, (uint64_t)"]", 1);
      v125 = 0;
    }
    v22 = *(double *)(v16 + 392);
    if (v22 < *((double *)v15 + 18))
      v22 = *((double *)v15 + 18);
    *(double *)(v16 + 392) = v22;
    v23 = sub_20EB8DE00(v17, (int *)v15 + 4);
    if (!v23)
      sub_20E89FD20("unordered_map::at: key not found");
    *(_QWORD *)v153 = 0;
    v152 = 0;
    *(_QWORD *)&v153[8] = 0;
    sub_20E9733B8((float64x2_t *)(v23 + 9), (double *)&v152);
    v24 = v152;
    v25 = *(_QWORD *)v153;
    v26 = *(_QWORD *)&v153[8];
    v134 = sub_210219C18();
    v27 = *((_DWORD *)v15 + 5);
    if (v27 >= 0xA)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v27 = *((_DWORD *)v15 + 5);
    }
    v28 = *v18;
    v129 = *(_DWORD *)(v16 + 296);
    v131 = v140;
    v29 = sub_20EB8DE00(v17, (int *)v15 + 4);
    if (!v29
      || (v30 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0
      || (v31 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0
      || (v32 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0)
    {
      sub_20E89FD20("unordered_map::at: key not found");
    }
    v33 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v34 = v27 + 10 * v28;
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_49;
    v36 = v29[5];
    v37 = (void *)v30[6];
    v38 = v31[7];
    v39 = v32[8];
    LODWORD(v152) = 67111424;
    v126 = v34;
    HIDWORD(v152) = v34;
    *(_WORD *)v153 = 1024;
    *(_DWORD *)&v153[2] = v129;
    *(_WORD *)&v153[6] = 1024;
    *(_DWORD *)&v153[8] = v131;
    *(_WORD *)&v153[12] = 2048;
    *(_QWORD *)&v153[14] = v36;
    v154 = 2048;
    v155 = v37;
    v156 = 2048;
    v157 = v38;
    v158 = 2048;
    v159 = v39;
    v160 = 2048;
    *(_QWORD *)v161 = v24;
    *(_WORD *)&v161[8] = 2048;
    v162 = v25;
    v163 = 2048;
    v164 = v26;
    v40 = (char *)_os_log_send_and_compose_impl();
    v41 = strlen(v40);
    v151.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v151);
    tv_sec = v151.tv_sec;
    timespec_get(&v151, 1);
    sub_210219E20(&v152, 0xEEEEB0B5B2B2EEEELL, "CCDConvergence", 0xEuLL, (__int128 *)(v134 + 1), (__int128 *)(v134 + 5), "CCD: [%02u] num_streams=%u, converged=%{BOOL}d, fx=%f, fy=%f, cx=%f, cy=%f, rx=%f, ry=%f, rz=%f", 0x5FuLL, v40, v41, tv_sec, &v151);
    std::mutex::lock(&stru_254A5A410);
    v43 = qword_254A5A458;
    v44 = unk_254A5A460;
    while (v43 != v44)
    {
      v45 = *(_QWORD *)(v43 + 32);
      if (!v45)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v45 + 48))(v45, &v152);
      v43 += 40;
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v169 < 0)
    {
      operator delete(__p);
      v16 = v133;
      v17 = v127;
      v34 = v126;
      if ((v167 & 0x80000000) == 0)
      {
LABEL_37:
        if (BYTE6(v164))
          goto LABEL_41;
        goto LABEL_43;
      }
    }
    else
    {
      v16 = v133;
      v17 = v127;
      v34 = v126;
      if ((v167 & 0x80000000) == 0)
        goto LABEL_37;
    }
    operator delete(*(void **)&v166[4]);
    if (BYTE6(v164))
    {
LABEL_41:
      if (SBYTE5(v164) < 0)
        operator delete(*(void **)&v161[2]);
    }
LABEL_43:
    if (BYTE4(v159) && SBYTE3(v159) < 0)
      operator delete(v155);
    if ((SHIBYTE(v154) & 0x80000000) == 0)
    {
      if (!v40)
        goto LABEL_49;
LABEL_48:
      free(v40);
      goto LABEL_49;
    }
    operator delete(*(void **)v153);
    if (v40)
      goto LABEL_48;
LABEL_49:
    if (os_signpost_enabled((os_log_t)*v134))
    {
      v46 = v29[5];
      v47 = (void *)v30[6];
      v48 = v31[7];
      v49 = v32[8];
      LODWORD(v152) = 67111424;
      HIDWORD(v152) = v34;
      *(_WORD *)v153 = 1024;
      *(_DWORD *)&v153[2] = v129;
      *(_WORD *)&v153[6] = 1024;
      *(_DWORD *)&v153[8] = v131;
      *(_WORD *)&v153[12] = 2048;
      *(_QWORD *)&v153[14] = v46;
      v154 = 2048;
      v155 = v47;
      v156 = 2048;
      v157 = v48;
      v158 = 2048;
      v159 = v49;
      v160 = 2048;
      *(_QWORD *)v161 = v24;
      *(_WORD *)&v161[8] = 2048;
      v162 = v25;
      v163 = 2048;
      v164 = v26;
      _os_signpost_emit_unreliably_with_name_impl();
    }
    v50 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
    {
      sub_20FCFB524();
      __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D9C8);
      v16 = v133;
      v17 = v127;
    }
    v51 = *((_DWORD *)v15 + 5);
    if (v51 >= 0xA)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v51 = *((_DWORD *)v15 + 5);
    }
    v52 = *v18;
    v53 = *(unsigned int *)(v16 + 296);
    v54 = v140;
    v55 = sub_20EB8DE00(v17, (int *)v15 + 4);
    if (!v55
      || (v56 = v55[5], (v57 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0)
      || (v58 = v57[6], (v59 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0)
      || (v60 = v59[7], (v61 = sub_20EB8DE00(v17, (int *)v15 + 4)) == 0))
    {
      sub_20E89FD20("unordered_map::at: key not found");
    }
    sub_210237040("CCD: [%02u] num_streams=%u, converged=%d, fx=%f, fy=%f, cx=%f, cy=%f, rx=%f, ry=%f, rz=%f", (std::string *)&v152, v51 + 10 * v52, v53, v54, v56, v58, v60, v61[8], v24, v25, v26);
    sub_20EA5C6C8((uint64_t)&v152, qword_254A6D9A8);
    if ((v153[15] & 0x80000000) != 0)
      operator delete(v152);
    v15 = (uint64_t *)*v15;
  }
  while (v15);
  if ((v125 & 1) == 0)
  {
    v86 = sub_210219C18();
    if ((v149 & 0x10) != 0)
    {
      v111 = *((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1) < v146)
      {
        *((_QWORD *)&v148 + 1) = v146;
        v111 = v146;
      }
      v112 = v145;
      v87 = v111 - (_QWORD)v145;
      if (v111 - (unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_185;
    }
    else
    {
      if ((v149 & 8) == 0)
      {
        v87 = 0;
        HIBYTE(v136) = 0;
        v88 = __dst;
        goto LABEL_172;
      }
      v112 = v143;
      v87 = v144 - (_QWORD)v143;
      if ((unint64_t)(v144 - (_QWORD)v143) >= 0x7FFFFFFFFFFFFFF8)
LABEL_185:
        sub_20E860B7C();
    }
    if (v87 >= 0x17)
    {
      v113 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v113 = v87 | 7;
      v114 = v113 + 1;
      v88 = operator new(v113 + 1);
      __dst[1] = v87;
      v136 = v114 | 0x8000000000000000;
      __dst[0] = (__uint64_t)v88;
    }
    else
    {
      HIBYTE(v136) = v87;
      v88 = __dst;
      if (!v87)
      {
LABEL_172:
        v88[v87] = 0;
        if (v136 >= 0)
          v115 = __dst;
        else
          v115 = (__uint64_t *)__dst[0];
        v116 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_197;
        v152 = (void *)67109378;
        *(_WORD *)v153 = 2082;
        *(_QWORD *)&v153[2] = v115;
        v118 = (char *)_os_log_send_and_compose_impl();
        v119 = strlen(v118);
        v151.tv_sec = 0;
        pthread_threadid_np(0, (__uint64_t *)&v151);
        v120 = v151.tv_sec;
        timespec_get(&v151, 1);
        sub_210219E20(&v152, 0xEEEEB0B5B2B2EEEELL, "CCDConvergence", 0xEuLL, (__int128 *)(v86 + 1), (__int128 *)(v86 + 5), "CCD: %hhu: waiting for %{public}s to converge", 0x2DuLL, v118, v119, v120, &v151);
        std::mutex::lock(&stru_254A5A410);
        v121 = qword_254A5A458;
        for (j = unk_254A5A460; v121 != j; v121 += 40)
        {
          v123 = *(_QWORD *)(v121 + 32);
          if (!v123)
            sub_20E86D37C();
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v123 + 48))(v123, &v152);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v169 < 0)
        {
          operator delete(__p);
          if ((v167 & 0x80000000) == 0)
          {
LABEL_182:
            if (!BYTE6(v164))
            {
LABEL_190:
              if (BYTE4(v159) && SBYTE3(v159) < 0)
                operator delete(v155);
              if (SHIBYTE(v154) < 0)
                operator delete(*(void **)v153);
              if (v118)
                free(v118);
LABEL_197:
              if (os_signpost_enabled((os_log_t)*v86))
              {
                v152 = (void *)67109378;
                *(_WORD *)v153 = 2082;
                *(_QWORD *)&v153[2] = v115;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              if (SHIBYTE(v136) < 0)
                operator delete((void *)__dst[0]);
              goto LABEL_201;
            }
LABEL_188:
            if (SBYTE5(v164) < 0)
              operator delete(*(void **)&v161[2]);
            goto LABEL_190;
          }
        }
        else if ((v167 & 0x80000000) == 0)
        {
          goto LABEL_182;
        }
        operator delete(*(void **)&v166[4]);
        if (!BYTE6(v164))
          goto LABEL_190;
        goto LABEL_188;
      }
    }
    memmove(v88, v112, v87);
    goto LABEL_172;
  }
LABEL_68:
  v62 = *(uint64_t **)(v16 + 248);
  if (v62)
  {
    v63 = 0;
    while (1)
    {
      v64 = (int *)(v62 + 3);
      if ((!sub_20EB8DE00(v17, (int *)v62 + 4) || !sub_20EB8DE00(v17, (int *)v62 + 6))
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TriangulationBasedCalibrationChangeDetector.cpp", 195, (uint64_t)"estimated_vision_sensor_model_.count(base_id) && estimated_vision_sensor_model_.count(ref_id)", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v65 = sub_20F124890(v16, (int *)v62 + 4, (int *)v62 + 6);
      v66 = *(double *)(v16 + 64);
      v67 = sub_210219C18();
      v68 = *((_DWORD *)v62 + 5);
      if (v68 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v68 = *((_DWORD *)v62 + 5);
      }
      v69 = *((_DWORD *)v62 + 4);
      v70 = *((_DWORD *)v62 + 7);
      if (v70 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v70 = *((_DWORD *)v62 + 7);
      }
      v71 = *v64;
      v72 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v73 = v68 + 10 * v69;
      v74 = atomic_load(&qword_254A5A450);
      v75 = v70 + 10 * v71;
      if (!v74)
        goto LABEL_99;
      LODWORD(v152) = 67109888;
      HIDWORD(v152) = v68 + 10 * v69;
      *(_WORD *)v153 = 1024;
      *(_DWORD *)&v153[2] = v75;
      *(_WORD *)&v153[6] = 2048;
      *(double *)&v153[8] = v65;
      *(_WORD *)&v153[16] = 1024;
      *(_DWORD *)&v153[18] = v65 > v66;
      v76 = (char *)_os_log_send_and_compose_impl();
      v77 = strlen(v76);
      __dst[0] = 0;
      pthread_threadid_np(0, __dst);
      v78 = __dst[0];
      timespec_get((timespec *)__dst, 1);
      sub_210219E20(&v152, 0xEEEEB0B5B2B2EEEELL, "CCDChange", 9uLL, (__int128 *)(v67 + 1), (__int128 *)(v67 + 5), "CCD: [%02u][%02u] depth_change=%f, should_update=%{BOOL}d", 0x39uLL, v76, v77, v78, __dst);
      std::mutex::lock(&stru_254A5A410);
      v79 = qword_254A5A458;
      for (k = unk_254A5A460; v79 != k; v79 += 40)
      {
        v81 = *(_QWORD *)(v79 + 32);
        if (!v81)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 48))(v81, &v152);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v169 < 0)
      {
        operator delete(__p);
        v16 = v133;
        if (v167 < 0)
        {
LABEL_90:
          operator delete(*(void **)&v166[4]);
          if (!BYTE6(v164))
            goto LABEL_93;
          goto LABEL_91;
        }
      }
      else
      {
        v16 = v133;
        if (v167 < 0)
          goto LABEL_90;
      }
      if (!BYTE6(v164))
        goto LABEL_93;
LABEL_91:
      if (SBYTE5(v164) < 0)
        operator delete(*(void **)&v161[2]);
LABEL_93:
      if (BYTE4(v159) && SBYTE3(v159) < 0)
        operator delete(v155);
      if (SHIBYTE(v154) < 0)
      {
        operator delete(*(void **)v153);
        if (!v76)
          goto LABEL_99;
LABEL_98:
        free(v76);
        goto LABEL_99;
      }
      if (v76)
        goto LABEL_98;
LABEL_99:
      if (os_signpost_enabled((os_log_t)*v67))
      {
        v152 = (void *)__PAIR64__(v73, 67109888);
        *(_WORD *)v153 = 1024;
        *(_DWORD *)&v153[2] = v75;
        *(_WORD *)&v153[6] = 2048;
        *(double *)&v153[8] = v65;
        *(_WORD *)&v153[16] = 1024;
        *(_DWORD *)&v153[18] = v65 > v66;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v82 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
      {
        sub_20FCFB524();
        __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9C8);
        v16 = v133;
      }
      v83 = *((_DWORD *)v62 + 5);
      v17 = v127;
      if (v83 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_211;
        }
        v83 = *((_DWORD *)v62 + 5);
      }
      v84 = *((_DWORD *)v62 + 4);
      v85 = *((_DWORD *)v62 + 7);
      if (v85 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_211:
          abort();
        }
        v85 = *((_DWORD *)v62 + 7);
      }
      sub_210237040("CCD: [%02u][%02u] depth_change=%f, should_update=%d", (std::string *)&v152, v83 + 10 * v84, v85 + 10 * *v64, *(_QWORD *)&v65, v65 > v66);
      sub_20EA5C6C8((uint64_t)&v152, qword_254A6D9A8);
      if ((v153[15] & 0x80000000) != 0)
        operator delete(v152);
      v63 |= v65 > v66;
      v62 = (uint64_t *)*v62;
      if (!v62)
        goto LABEL_120;
    }
  }
  v63 = 0;
LABEL_120:
  v89 = *(uint64_t **)(v124 + 16);
  if (v89)
  {
    if ((v63 & 1) != 0)
      v90 = 6;
    else
      v90 = 1;
    v132 = v90;
    v14.f64[0] = 57.2957795;
    v130 = v14;
    v128 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
    do
    {
      *((_BYTE *)v89 + 24) = v132;
      (*(void (**)(__uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(__dst, v16, v89 + 2);
      *(_QWORD *)&v91.f64[0] = v136;
      *(float64x2_t *)__dst = vmulq_f64(*(float64x2_t *)__dst, v128);
      v136 = *(_OWORD *)&vmulq_f64(v91, v130);
      v92 = sub_210219C18();
      v93 = *((_DWORD *)v89 + 5);
      if (v93 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v93 = *((_DWORD *)v89 + 5);
      }
      v94 = *((_DWORD *)v89 + 4);
      v95 = *(_DWORD *)(v133 + 296);
      v96 = *((unsigned __int8 *)v89 + 24);
      v97 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v98 = v93 + 10 * v94;
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_148;
      v100 = *(_QWORD *)(v133 + 392);
      LODWORD(v152) = 67111680;
      HIDWORD(v152) = v93 + 10 * v94;
      *(_WORD *)v153 = 1024;
      *(_DWORD *)&v153[2] = v95;
      *(_WORD *)&v153[6] = 1024;
      *(_DWORD *)&v153[8] = v96;
      *(_WORD *)&v153[12] = 2048;
      *(_QWORD *)&v153[14] = v100;
      v154 = 2048;
      v155 = (void *)__dst[0];
      v156 = 2048;
      v157 = __dst[1];
      v158 = 2048;
      v159 = v136;
      v160 = 2048;
      *(_QWORD *)v161 = v137;
      *(_WORD *)&v161[8] = 2048;
      v162 = v138;
      v163 = 2048;
      v164 = *((_QWORD *)&v138 + 1);
      v165 = 2048;
      *(_QWORD *)v166 = v139;
      v101 = (char *)_os_log_send_and_compose_impl();
      v102 = strlen(v101);
      v151.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v151);
      v103 = v151.tv_sec;
      timespec_get(&v151, 1);
      sub_210219E20(&v152, 0xEEEEB0B5B2B2EEEELL, "CCDDiff", 7uLL, (__int128 *)(v92 + 1), (__int128 *)(v92 + 5), "CCD: [%02u] num_streams=%u, result=%hhu, t=%f, dr_deg=[%f, %f, %f], dk=[%f, %f, %f, %f]", 0x57uLL, v101, v102, v103, &v151);
      std::mutex::lock(&stru_254A5A410);
      v104 = qword_254A5A458;
      for (m = unk_254A5A460; v104 != m; v104 += 40)
      {
        v106 = *(_QWORD *)(v104 + 32);
        if (!v106)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 48))(v106, &v152);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v169 < 0)
      {
        operator delete(__p);
        if (v167 < 0)
        {
LABEL_139:
          operator delete(*(void **)&v166[4]);
          if (!BYTE6(v164))
            goto LABEL_142;
          goto LABEL_140;
        }
      }
      else if (v167 < 0)
      {
        goto LABEL_139;
      }
      if (!BYTE6(v164))
        goto LABEL_142;
LABEL_140:
      if (SBYTE5(v164) < 0)
        operator delete(*(void **)&v161[2]);
LABEL_142:
      if (BYTE4(v159) && SBYTE3(v159) < 0)
        operator delete(v155);
      if (SHIBYTE(v154) < 0)
      {
        operator delete(*(void **)v153);
        if (!v101)
          goto LABEL_148;
LABEL_147:
        free(v101);
        goto LABEL_148;
      }
      if (v101)
        goto LABEL_147;
LABEL_148:
      v107 = os_signpost_enabled((os_log_t)*v92);
      v16 = v133;
      if (v107)
      {
        v108 = *(_QWORD *)(v133 + 392);
        LODWORD(v152) = 67111680;
        HIDWORD(v152) = v98;
        *(_WORD *)v153 = 1024;
        *(_DWORD *)&v153[2] = v95;
        *(_WORD *)&v153[6] = 1024;
        *(_DWORD *)&v153[8] = v96;
        *(_WORD *)&v153[12] = 2048;
        *(_QWORD *)&v153[14] = v108;
        v154 = 2048;
        v155 = (void *)__dst[0];
        v156 = 2048;
        v157 = __dst[1];
        v158 = 2048;
        v159 = v136;
        v160 = 2048;
        *(_QWORD *)v161 = v137;
        *(_WORD *)&v161[8] = 2048;
        v162 = v138;
        v163 = 2048;
        v164 = *((_QWORD *)&v138 + 1);
        v165 = 2048;
        *(_QWORD *)v166 = v139;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v109 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
      if ((v109 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
      {
        sub_20FCFB524();
        __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6D9C8);
        v16 = v133;
      }
      v110 = *((_DWORD *)v89 + 5);
      if (v110 >= 0xA)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v110 = *((_DWORD *)v89 + 5);
      }
      sub_210237040("CCD: [%02u] num_streams=%u, result=%hhu, t=%f, dr_deg=[%f, %f, %f], dk=[%f, %f, %f, %f]", (std::string *)&v152, v110 + 10 * *((_DWORD *)v89 + 4), *(_QWORD *)(v16 + 296), *((unsigned __int8 *)v89 + 24), *(_QWORD *)(v16 + 392), __dst[0], __dst[1], v136, v137, v138, v139);
      sub_20EA5C6C8((uint64_t)&v152, qword_254A6D9A8);
      if ((v153[15] & 0x80000000) != 0)
        operator delete(v152);
      v89 = (uint64_t *)*v89;
    }
    while (v89);
  }
LABEL_201:
  v141 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v141 + *(_QWORD *)(v141 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v142 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v148) < 0)
    operator delete((void *)v147);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BC6290](v150);
}

void sub_20F12460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  sub_20E9977BC((uint64_t)&a46);
  sub_20E8C25A8(a21);
  _Unwind_Resume(a1);
}

void sub_20F1247E0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F1247F8);
}

void sub_20F124808()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F124820);
}

void sub_20F12484C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F124864);
}

double sub_20F124890(uint64_t a1, int *a2, int *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t *v15;
  int64x2_t v16;
  uint64_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v40;
  unint64_t v41;
  int8x16_t v42;
  int32x4_t v43;
  uint64_t v45;
  int8x8_t v46;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  double v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  double v67;
  double v68;
  float64_t v69;
  _QWORD *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  _QWORD *f64;
  float64x2_t *v75;
  uint64_t v76;
  char v77;
  double v78;
  float64x2_t *v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  _QWORD *v85;
  float64x2_t *v86;
  uint64_t v87;
  double *v88;
  _QWORD *v89;
  uint64_t v90;
  double *v91;
  double v92;
  double v93;
  __int128 v94;
  float64x2_t v95;
  double *v96;
  double v97;
  double v98;
  float64x2_t v99;
  __int128 v100;
  int64x2_t v101;
  _QWORD *v102;
  float64x2_t *v103;
  uint64_t v104;
  double v105;
  uint64_t v107;
  int8x8_t v108;
  unint64_t v109;
  uint8x8_t v110;
  unint64_t v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  double v118;
  float64x2_t v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  _OWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  double *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  double *v132;
  uint64_t v133;
  float64x2_t *v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  double *v144;
  double *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  uint64_t v151;
  float64x2_t v154;
  double *v157;
  double *v158;
  double *v159;
  int64_t v160;
  int64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  double *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double *v170;
  float64x2_t *v171;
  float64x2_t *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  double v177;
  double v178;
  double *v179;
  double v180;
  unint64_t v181;
  double *v182;
  double v183;
  uint64_t v184;
  double *v185;
  float64x2_t *v186;
  double *v187;
  double v188;
  double *v189;
  double *v190;
  double v191;
  double *v192;
  double *v193;
  double *v194;
  double v195;
  double v196;
  double v197;
  uint64_t *v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double *v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  double *v208;
  uint64_t v209;
  float64x2_t *v210;
  uint64_t v211;
  float64x2_t v212;
  float64x2_t v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double *v218;
  double v219;
  unint64_t v220;
  float64x2_t v221;
  float64x2_t *v222;
  uint64_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  double v228;
  double v229;
  double v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  size_t v235;
  float64x2_t *p_dst;
  double v237;
  double v238;
  double v239;
  double v240;
  int v241;
  unint64_t v242;
  unint64_t v243;
  int *v244;
  unsigned int v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  const char *v249;
  size_t v250;
  double v251;
  const void *v252;
  unsigned __int8 v253;
  const char *v254;
  size_t v255;
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  NSObject *v262;
  double v263;
  size_t v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  int *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  float64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  void *v297;
  int *v298;
  unsigned int v299;
  int v300;
  int *v301;
  unsigned int v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  float64_t v309;
  uint64_t v310;
  uint64_t v311;
  size_t v312;
  const char *v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  const char *v316;
  size_t v317;
  _BYTE *v318;
  unint64_t v319;
  uint64_t v320;
  double v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  uint64_t v328;
  NSObject *v329;
  size_t v330;
  void *v331;
  float64x2_t *v332;
  size_t v333;
  size_t v334;
  uint64_t *v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  std::__shared_weak_count *v341;
  float64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *p_shared_owners;
  unint64_t v345;
  float64x2_t *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  __int128 v363;
  float64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  float64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v390;
  unint64_t v391;
  float64x2_t v392;
  const char *v393;
  uint64_t v394;
  int v395;
  int *v396;
  float64x2_t v397;
  int v398;
  float64x2_t v399;
  float64x2_t v400;
  unsigned int v401;
  float64x2_t v402;
  unint64_t v403;
  int64x2_t v404;
  int *v405;
  int64x2_t v406;
  double v407;
  float64x2_t v408;
  float64x2_t v409;
  uint64_t v410;
  const char *v411;
  float64x2_t __dst;
  double v413;
  void *v414;
  double *v415;
  double *v416;
  float64x2_t v417[8];
  _OWORD v418[2];
  uint64_t v419;
  uint64_t v420;
  __int128 v421;
  uint64_t v422;
  double v423;
  double v424;
  float64x2_t v425;
  float64x2_t *v426;
  float64x2_t *v427;
  std::__shared_weak_count *v428;
  int64x2_t v429;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int64x2_t v431;
  float64_t v432;
  const char *v433;
  uint64_t v434;
  std::__shared_weak_count *v435;
  uint64_t *v436;
  __int128 v437;
  float64x2_t v438;
  _BYTE object[40];
  _BYTE __p[32];
  double v441;
  __int16 v442;
  _BYTE v443[18];
  __int16 v444;
  double v445;
  char v446;
  double v447;
  int v448;
  uint64_t v449;
  float64x2_t v450;
  _BYTE v451[48];
  int8x16_t v452;
  float64_t v453;
  uint64_t v454;

  v454 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)(a1 + 272);
  v7 = sub_20EB8DE00((_QWORD *)(a1 + 272), a2);
  if (!v7)
    goto LABEL_568;
  v8 = v7;
  v9 = sub_20EB8DE00(v6, a3);
  if (!v9)
    goto LABEL_568;
  v10 = v9;
  sub_20F122E68((uint64_t)object, a1, a2);
  v11 = *(double *)object;
  v12 = *(double *)&object[8];
  v13 = *(double *)&object[16];
  v14 = *(double *)&object[24];
  sub_20F122E68((uint64_t)object, a1, a3);
  v418[0] = *(unint64_t *)object;
  v418[1] = *(unint64_t *)&object[16];
  v419 = *(_QWORD *)&object[8];
  v420 = *(_QWORD *)&object[24];
  v422 = 0x3FF0000000000000;
  v421 = 0uLL;
  v15 = sub_20EB8DE00((_QWORD *)(a1 + 312), a2);
  if (!v15)
    goto LABEL_568;
  v400 = *(float64x2_t *)(v15 + 9);
  v402 = *(float64x2_t *)(v15 + 15);
  v16 = *(int64x2_t *)(v15 + 11);
  v404 = *(int64x2_t *)(v15 + 13);
  v406 = v16;
  v16.i64[0] = v15[17];
  v399 = (float64x2_t)v16;
  v408 = *((float64x2_t *)v8 + 6);
  __asm { FMOV            V0.2D, #1.0 }
  *(_QWORD *)&_Q0.f64[0] = v8[14];
  v397 = _Q0;
  v21 = sub_20EB8DE00((_QWORD *)(a1 + 312), a3);
  if (!v21)
LABEL_568:
    sub_20E89FD20("unordered_map::at: key not found");
  v22 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v406, 1), v404);
  v23 = *(float64x2_t *)(v21 + 15);
  v24 = *(float64x2_t *)(v21 + 9);
  v25 = *(float64x2_t *)(v21 + 13);
  _Q7 = *(float64x2_t *)(v21 + 11);
  _Q16 = (int64x2_t)vextq_s8((int8x16_t)_Q7, (int8x16_t)v25, 8uLL);
  _D17 = *((double *)v10 + 14);
  _Q18 = *((float64x2_t *)v10 + 6);
  v30 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v24, _Q16), vnegq_f64(_Q18).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v24, _Q16), _Q18, 1);
  _D19 = v21[16];
  __asm { FMLS            D16, D19, V18.D[1] }
  v32 = vmlaq_laneq_f64(vmulq_n_f64(v400, v24.f64[0]), v22, _Q7, 1);
  v33 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v406.u64[0], v24.f64[0]), (float64x2_t)v404.u64[1], _Q7, 1);
  v34 = vmulq_n_f64(v400, _Q7.f64[0]);
  v35 = vmulq_n_f64((float64x2_t)v406.u64[0], _Q7.f64[0]);
  *(_QWORD *)&_Q7.f64[1] = v21[14];
  v36 = vmlsq_lane_f64(v30, _Q7, _D17, 0);
  *(_QWORD *)&_Q7.f64[0] = v21[17];
  __asm { FMLS            D16, D7, V17.D[0] }
  v417[0] = vmlaq_f64(vmlaq_n_f64(v32, v402, v23.f64[0]), (float64x2_t)0, v408);
  v417[1] = vmlaq_f64(vmlaq_n_f64(v33, v399, v23.f64[0]), (float64x2_t)0, v397);
  v417[2] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v400, v24, 1), v22, v25.f64[0]), v402, v23, 1), (float64x2_t)0, v408);
  v417[3] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v406.u64[0], v24, 1), (float64x2_t)v404.u64[1], v25.f64[0]), v399, v23, 1), (float64x2_t)0, v397);
  v417[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v34, v22, v25, 1), v402, _Q7.f64[0]), (float64x2_t)0, v408);
  v417[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v35, (float64x2_t)v404.u64[1], v25, 1), v399, _Q7.f64[0]), (float64x2_t)0, v397);
  v417[6] = vaddq_f64(v408, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v400, v36.f64[0]), v22, v36, 1), v402, *(double *)_Q16.i64));
  v417[7] = vaddq_f64(v397, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v406.u64[0], v36.f64[0]), (float64x2_t)v404.u64[1], v36, 1), v399, *(double *)_Q16.i64));
  v37 = *(double *)(a1 + 88);
  if (v37 <= 0.0 || v37 >= 90.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/TriangulationBasedCalibrationChangeDetector.cpp", 385, (uint64_t)"config_.triangulation_error_detector_config.half_fov_deg > 0 && config_.triangulation_error_detector_config.half_fov_deg < 90", 125, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v37 = *(double *)(a1 + 88);
  }
  v396 = a2;
  v40 = tan(v37 * 0.0174532925);
  v41 = v8[214];
  v415 = 0;
  v416 = 0;
  v414 = 0;
  if (v41)
  {
    if (v41 >> 61)
      sub_20E867F44();
    v414 = operator new(8 * v41);
    v415 = (double *)v414;
    v416 = (double *)((char *)v414 + 8 * v41);
    v42 = (int8x16_t)v406;
    v43 = (int32x4_t)v408;
    _Q5 = (float64x2_t)v404;
    v45 = v8[213];
    v405 = a3;
    if (!v45)
      goto LABEL_315;
  }
  else
  {
    v42 = (int8x16_t)v406;
    v43 = (int32x4_t)v408;
    _Q5 = (float64x2_t)v404;
    v45 = v8[213];
    v405 = a3;
    if (!v45)
      goto LABEL_315;
  }
  v46 = (int8x8_t)v10[212];
  if (!*(_QWORD *)&v46)
  {
    do
      v45 = *(_QWORD *)v45;
    while (v45);
    goto LABEL_315;
  }
  _Q6 = (float64x2_t)vextq_s8(v42, (int8x16_t)_Q5, 8uLL);
  v48 = (uint64_t)(v8 + 15);
  v49 = v11 * v12;
  v50 = 1.0 / v11;
  v51 = 0.0 / v49;
  *(double *)_Q3.i64 = v13 * v12;
  v52 = v13 * v12 - v14 * 0.0;
  v53 = 1.0 / v12;
  v54 = v52 / v49;
  v391 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  v392 = _Q6;
  v55 = (float64x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL);
  v43.i64[1] = *(_QWORD *)&v55.f64[0];
  v409 = (float64x2_t)v43;
  v56 = v14 / v12;
LABEL_17:
  v57 = *(unsigned int *)(v45 + 16);
  v58 = (uint8x8_t)vcnt_s8(v46);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = *(unsigned int *)(v45 + 16);
    if (*(_QWORD *)&v46 <= v57)
      v59 = v57 % *(_QWORD *)&v46;
  }
  else
  {
    v59 = (v46.i32[0] - 1) & v57;
  }
  v60 = *(uint64_t ***)(v10[211] + 8 * v59);
  if (!v60)
    goto LABEL_283;
  v61 = *v60;
  if (!v61)
    goto LABEL_283;
  if (v58.u32[0] < 2uLL)
  {
    v62 = *(_QWORD *)&v46 - 1;
    while (1)
    {
      v64 = v61[1];
      if (v64 == v57)
      {
        if (*((_DWORD *)v61 + 4) == (_DWORD)v57)
          goto LABEL_37;
      }
      else if ((v64 & v62) != v59)
      {
        goto LABEL_283;
      }
      v61 = (uint64_t *)*v61;
      if (!v61)
        goto LABEL_283;
    }
  }
  while (1)
  {
    v63 = v61[1];
    if (v63 == v57)
      break;
    if (v63 >= *(_QWORD *)&v46)
      v63 %= *(_QWORD *)&v46;
    if (v63 != v59)
      goto LABEL_283;
LABEL_26:
    v61 = (uint64_t *)*v61;
    if (!v61)
      goto LABEL_283;
  }
  if (*((_DWORD *)v61 + 4) != (_DWORD)v57)
    goto LABEL_26;
LABEL_37:
  if (*((_BYTE *)v8 + 1560))
    v65 = v48;
  else
    v65 = 0;
  v66 = *(_DWORD *)(v65 + 992);
  if (v66 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_572;
    }
    v66 = *(_DWORD *)(v65 + 992);
    if (v66 > 7)
      goto LABEL_46;
LABEL_42:
    if (!v66)
      goto LABEL_571;
LABEL_47:
    v67 = *(double *)(v45 + 32);
    *(double *)_Q2.i64 = v51 * v67;
    v68 = v50 * *(double *)(v45 + 24) - v51 * v67 - v54;
    v423 = v68;
    v55.f64[0] = v53 * v67 - v56;
    v424 = v55.f64[0];
    goto LABEL_48;
  }
  if (v66 <= 7)
    goto LABEL_42;
LABEL_46:
  if (v66 <= 0xD)
    goto LABEL_47;
  v78 = *(double *)(v45 + 32);
  *(double *)_Q2.i64 = v51 * v78;
  v55.f64[0] = v50 * *(double *)(v45 + 24) - v51 * v78 - v54;
  v68 = v53 * v78 - v56;
  v423 = v55.f64[0];
  v424 = v68;
  if (v66 == 14)
  {
LABEL_48:
    *(_QWORD *)&v425.f64[0] = &__dst;
    *(_QWORD *)&v425.f64[1] = &v423;
    v426 = &v450;
    v427 = 0;
    v428 = 0;
    if (v66 > 7)
      goto LABEL_90;
LABEL_49:
    if (v66 > 3)
    {
      v73 = v425;
      f64 = (_QWORD *)v426->f64;
      v75 = v427;
      v76 = (uint64_t)v428;
      if (v66 > 5)
      {
        if (v66 == 6)
          v77 = sub_20EB41C58((double *)v65, *(uint64_t *)&v425.f64[0], *(double **)&v425.f64[1], v426, (uint64_t)v427, (uint64_t)v428);
        else
          v77 = sub_20EB306CC(v65, *(uint64_t *)&v425.f64[0], *(float64x2_t **)&v425.f64[1], v426, (unint64_t)v427, (uint64_t)v428, v55.f64[0], v68, _Q2, (int8x16_t)_Q3, *(double *)v43.i64, _Q5.f64[0], _Q6);
      }
      else if (v66 == 5)
      {
        if (v426)
        {
          v426->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v76)
        {
          *(_QWORD *)(v76 + 64) = 0;
          *(_OWORD *)(v76 + 32) = 0u;
          *(_OWORD *)(v76 + 48) = 0u;
          *(_OWORD *)v76 = 0u;
          *(_OWORD *)(v76 + 16) = 0u;
        }
        if (v75)
          v77 = sub_20EB28F10(*(uint64_t *)&v73.f64[0], (uint64_t)v75, *(double **)&v73.f64[1], v65 + 168, 5);
        else
          v77 = sub_20EB2886C(*(uint64_t *)&v73.f64[0], *(double **)&v73.f64[1], v65 + 168, 5);
      }
      else
      {
        if (v426)
        {
          v426->f64[0] = 0.0;
          f64[1] = 0;
          f64[2] = 0;
        }
        if (v76)
        {
          *(_QWORD *)(v76 + 64) = 0;
          v55 = 0uLL;
          *(_OWORD *)(v76 + 32) = 0u;
          *(_OWORD *)(v76 + 48) = 0u;
          *(_OWORD *)v76 = 0u;
          *(_OWORD *)(v76 + 16) = 0u;
        }
        if (v75)
        {
          if (!*(_BYTE *)(v65 + 468))
          {
            *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v65 + 204, (double *)(v65 + 168), 0x32uLL, (int8x16_t)v55, v68, _Q2, (int8x16_t)_Q3).u64[0];
            *(_BYTE *)(v65 + 468) = 1;
          }
          v77 = sub_20EA8D684(*(uint64_t *)&v73.f64[0], *(uint64_t *)&v73.f64[1], (int64x2_t *)(v65 + 168), (float *)(v65 + 204), v75, 5, v55.f64[0], v68, *(double *)_Q2.i64, *(double *)_Q3.i64, *(double *)v43.i64, _Q5.f64[0], _Q6);
        }
        else
        {
          if (!*(_BYTE *)(v65 + 468))
          {
            *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v65 + 204, (double *)(v65 + 168), 0x32uLL, (int8x16_t)v55, v68, _Q2, (int8x16_t)_Q3).u64[0];
            *(_BYTE *)(v65 + 468) = 1;
          }
          v77 = sub_20EA8D684(*(uint64_t *)&v73.f64[0], *(uint64_t *)&v73.f64[1], (int64x2_t *)(v65 + 168), (float *)(v65 + 204), 0, 5, v55.f64[0], v68, *(double *)_Q2.i64, *(double *)_Q3.i64, *(double *)v43.i64, _Q5.f64[0], _Q6);
        }
      }
      goto LABEL_139;
    }
    if (v66 > 1)
    {
      if (v66 == 2)
      {
        v77 = sub_20EA8D22C((uint64_t)&v425, v65);
      }
      else
      {
        v84 = v425;
        v85 = (_QWORD *)v426->f64;
        v86 = v427;
        v87 = (uint64_t)v428;
        if (v426)
        {
          v426->f64[0] = 0.0;
          v85[1] = 0;
          v85[2] = 0;
        }
        if (v87)
        {
          *(_QWORD *)(v87 + 64) = 0;
          v55.f64[0] = 0.0;
          *(_OWORD *)(v87 + 32) = 0u;
          *(_OWORD *)(v87 + 48) = 0u;
          *(_OWORD *)v87 = 0u;
          *(_OWORD *)(v87 + 16) = 0u;
        }
        if (v86)
          v77 = sub_20EB27398(*(double **)&v84.f64[0], (uint64_t)v86, *(double **)&v84.f64[1], (int64x2_t *)(v65 + 168), 20, v55.f64[0], v68, *(double *)_Q2.i64, *(double *)_Q3.i64, (int64x2_t)v43);
        else
          v77 = sub_20EB23DF0(*(uint64_t *)&v84.f64[0], *(double **)&v84.f64[1], (int64x2_t *)(v65 + 168), 20, v55.f64[0], v68, *(double *)_Q2.i64, *(double *)_Q3.i64, (int64x2_t)v43, _Q5);
      }
      goto LABEL_139;
    }
    if (v66)
    {
      v69 = v425.f64[0];
      v70 = (_QWORD *)v426->f64;
      v71 = v427;
      v72 = (uint64_t)v428;
      v55 = **(float64x2_t **)&v425.f64[1];
      **(_OWORD **)&v425.f64[0] = **(_OWORD **)&v425.f64[1];
      *(_QWORD *)(*(_QWORD *)&v69 + 16) = 0x3FF0000000000000;
      if (v70)
      {
        *v70 = 0;
        v70[1] = 0;
        v70[2] = 0;
      }
      if (v71)
      {
        *v71 = (float64x2_t)xmmword_210312EC0;
        v71[1] = (float64x2_t)unk_210312ED0;
        v55.f64[1] = 0.0;
        v71[2] = (float64x2_t)xmmword_210312EE0;
      }
      if (v72)
      {
        *(_QWORD *)(v72 + 64) = 0;
        v55.f64[1] = 0.0;
        *(_OWORD *)(v72 + 32) = 0u;
        *(_OWORD *)(v72 + 48) = 0u;
        *(_OWORD *)v72 = 0u;
        *(_OWORD *)(v72 + 16) = 0u;
      }
      goto LABEL_140;
    }
LABEL_571:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    goto LABEL_572;
  }
  *(_QWORD *)&v425.f64[0] = &__dst;
  *(_QWORD *)&v425.f64[1] = &v423;
  v426 = &v450;
  v427 = 0;
  v428 = 0;
  if (v66 != -1)
  {
    v79 = *(float64x2_t **)&v425.f64[1];
    v80 = *(_QWORD *)&v425.f64[0];
    v81 = v426;
    v82 = v427;
    v83 = (uint64_t)v428;
    goto LABEL_117;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_572:
    abort();
  }
  v66 = *(_DWORD *)(v65 + 992);
  if (v66 <= 7)
    goto LABEL_49;
LABEL_90:
  v80 = *(_QWORD *)&v425.f64[0];
  if (v66 <= 0xB)
  {
    v88 = *(double **)&v425.f64[1];
    v89 = (_QWORD *)v426->f64;
    v82 = v427;
    v90 = (uint64_t)v428;
    if (v66 <= 9)
    {
      if (v66 == 9)
      {
        v77 = sub_20EB35004(v65, *(uint64_t *)&v425.f64[0], *(float64x2_t **)&v425.f64[1], v426, (unint64_t)v427, (uint64_t)v428, v55.f64[0], v68, *(double *)_Q2.i64, _Q3, v43);
      }
      else
      {
        if (v426)
        {
          v426->f64[0] = 0.0;
          v89[1] = 0;
          v89[2] = 0;
        }
        if (v90)
        {
          *(_QWORD *)(v90 + 64) = 0;
          v55.f64[0] = 0.0;
          *(_OWORD *)(v90 + 32) = 0u;
          *(_OWORD *)(v90 + 48) = 0u;
          *(_OWORD *)v90 = 0u;
          *(_OWORD *)(v90 + 16) = 0u;
        }
        if (v82)
        {
          v77 = sub_20EB277C4(v80, (uint64_t)v82, v88, v65 + 168, 20, v55.f64[0], v68, *(double *)_Q2.i64, _Q3, v43);
        }
        else
        {
          v105 = sqrt(*v88 * *v88 + v88[1] * v88[1]);
          v77 = sub_20EB24018(v80, v88, (double *)(v65 + 168), 20, v105, v105, *(double *)_Q2.i64, _Q3, v43);
        }
      }
      goto LABEL_139;
    }
    if (v66 == 10)
    {
      if (v426)
      {
        v426->f64[0] = 0.0;
        v89[1] = 0;
        v89[2] = 0;
      }
      if (v90)
      {
        *(_QWORD *)(v90 + 64) = 0;
        *(_OWORD *)(v90 + 32) = 0u;
        *(_OWORD *)(v90 + 48) = 0u;
        *(_OWORD *)v90 = 0u;
        *(_OWORD *)(v90 + 16) = 0u;
      }
      v91 = (double *)(v65 + 280);
      v92 = *(double *)v65 + *(double *)(v65 + 32);
      v93 = v92 * 0.5;
      if (v82)
      {
        if (!sub_20EB24F38(v80, (uint64_t)v88, v65 + 168, v91, 0x14u, v92 * 0.5))
          goto LABEL_283;
        if (!sub_20EB2450C(&v438, (uint64_t)v451, (float64x2_t *)&v436, v80, (double *)(v65 + 168), v93))
          goto LABEL_283;
        v55.f64[0] = *(float64_t *)(v80 + 16);
        *(_QWORD *)&v94 = *(_QWORD *)&v451[16];
        v43 = *(int32x4_t *)&v451[32];
        _Q3 = *(int32x4_t *)v451;
        v452 = *(int8x16_t *)v80;
        _Q2.i64[1] = v452.i64[1];
        v453 = v55.f64[0];
        *((_QWORD *)&v437 + 1) = 0;
        v95.f64[0] = v55.f64[0];
        *(_QWORD *)&v95.f64[1] = v452.i64[0];
        _Q5 = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v451[32], v95), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v451[32], *(int64x2_t *)&v451[16]), (float64x2_t)vextq_s8(v452, (int8x16_t)v55, 8uLL));
        _Q6 = vmulq_f64(*(float64x2_t *)v451, _Q5);
        _Q5.f64[0] = _Q5.f64[1];
        __asm { FMLA            D6, D5, V3.D[1] }
        _Q5.f64[0] = fabs(vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)&v451[16], (float64x2_t)v452), 1), *(float64x2_t *)&v451[32], (float64x2_t)v452).f64[0], *(double *)&v451[16]));
        _Q6.f64[0] = 0.00000001;
        if (_Q5.f64[0] < 0.00000001)
          goto LABEL_283;
        goto LABEL_116;
      }
      v77 = sub_20EB24F38(v80, (uint64_t)v88, v65 + 168, v91, 0x14u, v92 * 0.5);
    }
    else
    {
      v77 = sub_20EB38E20(v65, *(uint64_t *)&v425.f64[0], *(float64x2_t **)&v425.f64[1], v426, v427, (uint64_t)v428);
    }
LABEL_139:
    if ((v77 & 1) == 0)
      goto LABEL_283;
LABEL_140:
    if (v413 <= 0.0)
      goto LABEL_283;
    _Q1 = __dst;
    _Q2 = (int8x16_t)vmulq_f64(_Q1, _Q1);
    _Q3.i64[0] = *(_QWORD *)&__dst.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(*(double *)_Q2.i64) > v40 * v413)
      goto LABEL_283;
    if (*((_BYTE *)v10 + 1560))
      v107 = (uint64_t)(v10 + 15);
    else
      v107 = 0;
    v108 = (int8x8_t)v10[212];
    if (!*(_QWORD *)&v108)
      goto LABEL_567;
    v109 = *(unsigned int *)(v45 + 16);
    v110 = (uint8x8_t)vcnt_s8(v108);
    v110.i16[0] = vaddlv_u8(v110);
    if (v110.u32[0] > 1uLL)
    {
      v111 = *(unsigned int *)(v45 + 16);
      if (*(_QWORD *)&v108 <= v109)
        v111 = v109 % *(_QWORD *)&v108;
    }
    else
    {
      v111 = (v108.i32[0] - 1) & v109;
    }
    v112 = *(uint64_t ***)(v10[211] + 8 * v111);
    if (!v112 || (v113 = *v112) == 0)
LABEL_567:
      sub_20E89FD20("unordered_map::at: key not found");
    if (v110.u32[0] < 2uLL)
    {
      v114 = *(_QWORD *)&v108 - 1;
      while (1)
      {
        v116 = v113[1];
        if (v116 == v109)
        {
          if (*((_DWORD *)v113 + 4) == (_DWORD)v109)
            goto LABEL_165;
        }
        else if ((v116 & v114) != v111)
        {
          goto LABEL_567;
        }
        v113 = (uint64_t *)*v113;
        if (!v113)
          goto LABEL_567;
      }
    }
    while (1)
    {
      v115 = v113[1];
      if (v115 == v109)
      {
        if (*((_DWORD *)v113 + 4) == (_DWORD)v109)
        {
LABEL_165:
          *(_QWORD *)object = &v425;
          *(_QWORD *)&object[8] = v113 + 3;
          *(_QWORD *)&object[16] = v418;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          v117 = *(_DWORD *)(v107 + 992);
          if (v117 != -1)
          {
            if (v117 <= 7)
              goto LABEL_167;
            goto LABEL_171;
          }
          if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            v117 = *(_DWORD *)(v107 + 992);
            if (v117 > 7)
              goto LABEL_171;
LABEL_167:
            if (!v117)
              goto LABEL_591;
LABEL_171:
            v55.f64[0] = sub_20EB14274((uint64_t)object);
            *(_QWORD *)object = v451;
            *(_QWORD *)&object[8] = &v425;
            *(_QWORD *)&object[16] = &v429;
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            v120 = *(_DWORD *)(v107 + 992);
            if (v120 != -1)
            {
              if (v120 <= 7)
                goto LABEL_173;
LABEL_184:
              v125 = *(_QWORD **)object;
              if (v120 <= 0xB)
              {
                v126 = *(double **)&object[8];
                v127 = *(_QWORD *)&object[16];
                v128 = *(_QWORD *)&object[24];
                v129 = *(_QWORD *)&object[32];
                if (v120 > 9)
                {
                  if (v120 == 10)
                  {
                    if (*(_QWORD *)&object[16])
                    {
                      **(_QWORD **)&object[16] = 0;
                      *(_QWORD *)(v127 + 8) = 0;
                      *(_QWORD *)(v127 + 16) = 0;
                    }
                    if (v129)
                    {
                      *(_QWORD *)(v129 + 64) = 0;
                      *(_OWORD *)(v129 + 32) = 0u;
                      *(_OWORD *)(v129 + 48) = 0u;
                      *(_OWORD *)v129 = 0u;
                      *(_OWORD *)(v129 + 16) = 0u;
                    }
                    v136 = (*(double *)v107 + *(double *)(v107 + 32)) * 0.5;
                    if (v128)
                      v130 = sub_20EB25044((uint64_t)v125, v128, 0, (uint64_t)v126, (double *)(v107 + 168), (double *)(v107 + 280), 0x14u, v136);
                    else
                      v130 = sub_20EB24F38((uint64_t)v125, (uint64_t)v126, v107 + 168, (double *)(v107 + 280), 0x14u, v136);
                  }
                  else
                  {
                    v130 = sub_20EB38E20(v107, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], *(float64x2_t **)&object[24], *(uint64_t *)&object[32]);
                  }
                }
                else if (v120 == 9)
                {
                  v130 = sub_20EB35004(v107, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], *(unint64_t *)&object[24], *(uint64_t *)&object[32], v55.f64[0], v118, *(double *)_Q2.i64, _Q3, v43);
                }
                else
                {
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v127 + 8) = 0;
                    *(_QWORD *)(v127 + 16) = 0;
                  }
                  if (v129)
                  {
                    *(_QWORD *)(v129 + 64) = 0;
                    v55.f64[0] = 0.0;
                    *(_OWORD *)(v129 + 32) = 0u;
                    *(_OWORD *)(v129 + 48) = 0u;
                    *(_OWORD *)v129 = 0u;
                    *(_OWORD *)(v129 + 16) = 0u;
                  }
                  if (v128)
                  {
                    v130 = sub_20EB277C4((uint64_t)v125, v128, v126, v107 + 168, 20, v55.f64[0], v118, *(double *)_Q2.i64, _Q3, v43);
                  }
                  else
                  {
                    v149 = sqrt(*v126 * *v126 + v126[1] * v126[1]);
                    v130 = sub_20EB24018((uint64_t)v125, v126, (double *)(v107 + 168), 20, v149, v149, *(double *)_Q2.i64, _Q3, v43);
                  }
                }
                goto LABEL_254;
              }
              if (v120 > 0xD)
              {
                v137 = *(_QWORD *)&object[8];
                v138 = *(_QWORD *)&object[16];
                v139 = *(_QWORD *)&object[24];
                v140 = *(_QWORD *)&object[32];
                if (v120 == 14)
                {
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v138 + 8) = 0;
                    *(_QWORD *)(v138 + 16) = 0;
                  }
                  if (v140)
                  {
                    *(_QWORD *)(v140 + 64) = 0;
                    *(_OWORD *)(v140 + 32) = 0u;
                    *(_OWORD *)(v140 + 48) = 0u;
                    *(_OWORD *)v140 = 0u;
                    *(_OWORD *)(v140 + 16) = 0u;
                  }
                  v141 = (*(double *)v107 + *(double *)(v107 + 32)) * 0.5;
                  if (v139)
                    v130 = sub_20EB251F0((uint64_t)v125, v139, 0, v137, (double *)(v107 + 168), (double *)(v107 + 392), 0x14u, v141);
                  else
                    v130 = sub_20EB253A0((uint64_t)v125, v137, (double *)(v107 + 168), (double *)(v107 + 392), 0x14u, v141);
                }
                else
                {
                  v130 = sub_20EB3CED8(v107, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], *(float64x2_t **)&object[24], *(uint64_t *)&object[32]);
                }
                goto LABEL_254;
              }
              if (v120 == 13)
              {
                v130 = sub_20EB43734((double *)v107, *(uint64_t *)object, *(uint64_t *)&object[8], *(_QWORD **)&object[16], *(uint64_t *)&object[24], *(uint64_t *)&object[32]);
LABEL_254:
                if ((v130 & 1) == 0)
                  goto LABEL_283;
LABEL_255:
                if (*(double *)&v451[16] > 0.0)
                {
                  _Q1 = *(float64x2_t *)v451;
                  _Q2 = (int8x16_t)vmulq_f64(_Q1, _Q1);
                  _Q3.i64[0] = *(_QWORD *)&v451[8];
                  __asm { FMLA            D2, D3, V1.D[1] }
                  if (sqrt(*(double *)_Q2.i64) <= v40 * *(double *)&v451[16])
                  {
                    v151 = *(_QWORD *)(a1 + 208) + 24 * *(unsigned int *)(v45 + 16);
                    v55.f64[0] = *(float64_t *)(v151 + 16);
                    _Q1 = *(_OWORD *)v151;
                    _D4 = v391;
                    v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v400, *(double *)v151), v392, *(float64x2_t *)v151, 1), v402, v55.f64[0]);
                    __asm { FMLA            D3, D4, V1.D[1] }
                    v55.f64[0] = _D3 + v399.f64[0] * v55.f64[0];
                    v425 = vaddq_f64(v154, v409);
                    v426 = (float64x2_t *)*(_OWORD *)&vaddq_f64(v55, v397);
                    sub_20EB238B0(&__dst, (float64x2_t *)v451, (uint64_t)&v425, v417, &v450, (uint64_t)&v429, (uint64_t)object, _Q5, v119);
                    if (object[16])
                    {
                      if (*(_BYTE *)(a1 + 72))
                      {
                        _Q1 = __dst;
                        _Q2 = (int8x16_t)vmulq_f64(_Q1, _Q1);
                        _Q3.i64[0] = *(_QWORD *)&__dst.f64[1];
                        __asm { FMLA            D2, D3, V1.D[1] }
                        *(double *)&object[8] = *(double *)&object[8] * (sqrt(*(double *)_Q2.i64 + v413 * v413) / v413);
                      }
                      v157 = v415;
                      if (v415 >= v416)
                      {
                        v390 = v48;
                        v159 = (double *)v414;
                        v160 = (char *)v415 - (_BYTE *)v414;
                        v161 = ((char *)v415 - (_BYTE *)v414) >> 3;
                        v162 = v161 + 1;
                        if ((unint64_t)(v161 + 1) >> 61)
                          sub_20E867F44();
                        v163 = (char *)v416 - (_BYTE *)v414;
                        if (((char *)v416 - (_BYTE *)v414) >> 2 > v162)
                          v162 = v163 >> 2;
                        if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
                          v164 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v164 = v162;
                        if (v164)
                        {
                          if (v164 >> 61)
                            sub_20E877A38();
                          v165 = operator new(8 * v164);
                        }
                        else
                        {
                          v165 = 0;
                        }
                        v166 = (double *)&v165[8 * v161];
                        *v166 = *(double *)&object[8];
                        v158 = v166 + 1;
                        if (v157 != v159)
                        {
                          v167 = (char *)v157 - (char *)v159 - 8;
                          if (v167 < 0x58)
                            goto LABEL_597;
                          if ((unint64_t)((char *)v157 - v165 - v160) < 0x20)
                            goto LABEL_597;
                          v168 = (v167 >> 3) + 1;
                          v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
                          v170 = &v157[v169 / 0xFFFFFFFFFFFFFFF8];
                          v166 = (double *)((char *)v166 - v169);
                          v171 = (float64x2_t *)&v165[8 * v161 - 16];
                          v172 = (float64x2_t *)(v157 - 2);
                          v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v55 = *v172;
                            v171[-1] = v172[-1];
                            *v171 = v55;
                            v171 -= 2;
                            v172 -= 2;
                            v173 -= 4;
                          }
                          while (v173);
                          v157 = v170;
                          if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_597:
                            do
                            {
                              v174 = *((_QWORD *)v157-- - 1);
                              *((_QWORD *)v166-- - 1) = v174;
                            }
                            while (v157 != v159);
                          }
                        }
                        v414 = v166;
                        v415 = v158;
                        v416 = (double *)&v165[8 * v164];
                        if (v159)
                          operator delete(v159);
                        v48 = v390;
                      }
                      else
                      {
                        *v415 = *(double *)&object[8];
                        v158 = v157 + 1;
                      }
                      v415 = v158;
                    }
                  }
                }
                goto LABEL_283;
              }
              v142 = *(_QWORD *)&object[16];
              v103 = *(float64x2_t **)&object[24];
              v143 = *(_QWORD *)&object[32];
              if (*(_QWORD *)&object[16])
              {
                **(_QWORD **)&object[16] = 0;
                *(_QWORD *)(v142 + 8) = 0;
                *(_QWORD *)(v142 + 16) = 0;
              }
              if (v143)
              {
                *(_QWORD *)(v143 + 64) = 0;
                v55.f64[1] = 0.0;
                *(_OWORD *)(v143 + 32) = 0u;
                *(_OWORD *)(v143 + 48) = 0u;
                *(_OWORD *)v143 = 0u;
                *(_OWORD *)(v143 + 16) = 0u;
              }
              *v125 = 0;
              v125[1] = 0;
              v125[2] = 0;
              if (!v103)
                goto LABEL_283;
LABEL_129:
              v55.f64[1] = 0.0;
              v103[1] = 0u;
              v103[2] = 0u;
              *v103 = 0u;
              goto LABEL_283;
            }
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              v120 = *(_DWORD *)(v107 + 992);
              if (v120 > 7)
                goto LABEL_184;
LABEL_173:
              if (v120 > 3)
              {
                v131 = *(_QWORD *)object;
                v132 = *(double **)&object[8];
                v133 = *(_QWORD *)&object[16];
                v134 = *(float64x2_t **)&object[24];
                v135 = *(_QWORD *)&object[32];
                if (v120 > 5)
                {
                  if (v120 == 6)
                    v130 = sub_20EB41C58((double *)v107, *(uint64_t *)object, *(double **)&object[8], *(_QWORD **)&object[16], *(uint64_t *)&object[24], *(uint64_t *)&object[32]);
                  else
                    v130 = sub_20EB306CC(v107, *(uint64_t *)object, *(float64x2_t **)&object[8], *(float64x2_t **)&object[16], *(unint64_t *)&object[24], *(uint64_t *)&object[32], v55.f64[0], v118, _Q2, (int8x16_t)_Q3, *(double *)v43.i64, _Q5.f64[0], _Q6);
                }
                else if (v120 == 5)
                {
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v133 + 8) = 0;
                    *(_QWORD *)(v133 + 16) = 0;
                  }
                  if (v135)
                  {
                    *(_QWORD *)(v135 + 64) = 0;
                    *(_OWORD *)(v135 + 32) = 0u;
                    *(_OWORD *)(v135 + 48) = 0u;
                    *(_OWORD *)v135 = 0u;
                    *(_OWORD *)(v135 + 16) = 0u;
                  }
                  if (v134)
                    v130 = sub_20EB28F10(v131, (uint64_t)v134, v132, v107 + 168, 5);
                  else
                    v130 = sub_20EB2886C(v131, v132, v107 + 168, 5);
                }
                else
                {
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v133 + 8) = 0;
                    *(_QWORD *)(v133 + 16) = 0;
                  }
                  if (v135)
                  {
                    *(_QWORD *)(v135 + 64) = 0;
                    v55 = 0uLL;
                    *(_OWORD *)(v135 + 32) = 0u;
                    *(_OWORD *)(v135 + 48) = 0u;
                    *(_OWORD *)v135 = 0u;
                    *(_OWORD *)(v135 + 16) = 0u;
                  }
                  if (v134)
                  {
                    if (!*(_BYTE *)(v107 + 468))
                    {
                      *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v107 + 204, (double *)(v107 + 168), 0x32uLL, (int8x16_t)v55, v118, _Q2, (int8x16_t)_Q3).u64[0];
                      *(_BYTE *)(v107 + 468) = 1;
                    }
                    v130 = sub_20EA8D684(v131, (uint64_t)v132, (int64x2_t *)(v107 + 168), (float *)(v107 + 204), v134, 5, v55.f64[0], v118, *(double *)_Q2.i64, *(double *)_Q3.i64, *(double *)v43.i64, _Q5.f64[0], _Q6);
                  }
                  else
                  {
                    if (!*(_BYTE *)(v107 + 468))
                    {
                      *(_QWORD *)&v55.f64[0] = sub_20EB27C0C(v107 + 204, (double *)(v107 + 168), 0x32uLL, (int8x16_t)v55, v118, _Q2, (int8x16_t)_Q3).u64[0];
                      *(_BYTE *)(v107 + 468) = 1;
                    }
                    v130 = sub_20EA8D684(v131, (uint64_t)v132, (int64x2_t *)(v107 + 168), (float *)(v107 + 204), 0, 5, v55.f64[0], v118, *(double *)_Q2.i64, *(double *)_Q3.i64, *(double *)v43.i64, _Q5.f64[0], _Q6);
                  }
                }
                goto LABEL_254;
              }
              if (v120 > 1)
              {
                if (v120 == 2)
                {
                  v130 = sub_20EA8D22C((uint64_t)object, v107);
                }
                else
                {
                  v144 = *(double **)object;
                  v145 = *(double **)&object[8];
                  v146 = *(_QWORD *)&object[16];
                  v147 = *(_QWORD *)&object[24];
                  v148 = *(_QWORD *)&object[32];
                  if (*(_QWORD *)&object[16])
                  {
                    **(_QWORD **)&object[16] = 0;
                    *(_QWORD *)(v146 + 8) = 0;
                    *(_QWORD *)(v146 + 16) = 0;
                  }
                  if (v148)
                  {
                    *(_QWORD *)(v148 + 64) = 0;
                    v55.f64[0] = 0.0;
                    *(_OWORD *)(v148 + 32) = 0u;
                    *(_OWORD *)(v148 + 48) = 0u;
                    *(_OWORD *)v148 = 0u;
                    *(_OWORD *)(v148 + 16) = 0u;
                  }
                  if (v147)
                    v130 = sub_20EB27398(v144, v147, v145, (int64x2_t *)(v107 + 168), 20, v55.f64[0], v118, *(double *)_Q2.i64, *(double *)_Q3.i64, (int64x2_t)v43);
                  else
                    v130 = sub_20EB23DF0((uint64_t)v144, v145, (int64x2_t *)(v107 + 168), 20, v55.f64[0], v118, *(double *)_Q2.i64, *(double *)_Q3.i64, (int64x2_t)v43, _Q5);
                }
                goto LABEL_254;
              }
              if (v120)
              {
                v121 = *(_QWORD *)object;
                v122 = *(_QWORD **)&object[16];
                v123 = *(_OWORD **)&object[24];
                v124 = *(_QWORD *)&object[32];
                v55 = **(float64x2_t **)&object[8];
                **(_OWORD **)object = **(_OWORD **)&object[8];
                *(_QWORD *)(v121 + 16) = 0x3FF0000000000000;
                if (v122)
                {
                  *v122 = 0;
                  v122[1] = 0;
                  v122[2] = 0;
                }
                if (v123)
                {
                  *v123 = xmmword_210312EC0;
                  v123[1] = unk_210312ED0;
                  v55.f64[1] = 0.0;
                  v123[2] = xmmword_210312EE0;
                }
                if (v124)
                {
                  *(_QWORD *)(v124 + 64) = 0;
                  v55.f64[1] = 0.0;
                  *(_OWORD *)(v124 + 32) = 0u;
                  *(_OWORD *)(v124 + 48) = 0u;
                  *(_OWORD *)v124 = 0u;
                  *(_OWORD *)(v124 + 16) = 0u;
                }
                goto LABEL_255;
              }
LABEL_591:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            }
          }
          abort();
        }
      }
      else
      {
        if (v115 >= *(_QWORD *)&v108)
          v115 %= *(_QWORD *)&v108;
        if (v115 != v111)
          goto LABEL_567;
      }
      v113 = (uint64_t *)*v113;
      if (!v113)
        goto LABEL_567;
    }
  }
  if (v66 > 0xD)
  {
    v79 = *(float64x2_t **)&v425.f64[1];
    v81 = v426;
    v82 = v427;
    v83 = (uint64_t)v428;
    if (v66 != 14)
    {
LABEL_117:
      v77 = sub_20EB3CED8(v65, v80, v79, v81, v82, v83);
      goto LABEL_139;
    }
    if (v426)
    {
      v426->f64[0] = 0.0;
      v81->f64[1] = 0.0;
      v81[1].f64[0] = 0.0;
    }
    if (v83)
    {
      *(_QWORD *)(v83 + 64) = 0;
      *(_OWORD *)(v83 + 32) = 0u;
      *(_OWORD *)(v83 + 48) = 0u;
      *(_OWORD *)v83 = 0u;
      *(_OWORD *)(v83 + 16) = 0u;
    }
    v96 = (double *)(v65 + 392);
    v97 = *(double *)v65 + *(double *)(v65 + 32);
    v98 = v97 * 0.5;
    if (!v82)
    {
      v77 = sub_20EB253A0(v80, (uint64_t)v79, (double *)(v65 + 168), v96, 0x14u, v97 * 0.5);
      goto LABEL_139;
    }
    if (!sub_20EB253A0(v80, (uint64_t)v79, (double *)(v65 + 168), v96, 0x14u, v97 * 0.5))
      goto LABEL_283;
    if (!sub_20EB2498C(&v438, (uint64_t)v451, (float64x2_t *)&v436, v80, (double *)(v65 + 168), v98))
      goto LABEL_283;
    v55.f64[0] = *(float64_t *)(v80 + 16);
    *(_QWORD *)&v94 = *(_QWORD *)&v451[16];
    v43 = *(int32x4_t *)&v451[32];
    _Q3 = *(int32x4_t *)v451;
    v452 = *(int8x16_t *)v80;
    _Q2.i64[1] = v452.i64[1];
    v453 = v55.f64[0];
    *((_QWORD *)&v437 + 1) = 0;
    v99.f64[0] = v55.f64[0];
    *(_QWORD *)&v99.f64[1] = v452.i64[0];
    _Q5 = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v451[32], v99), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v451[32], *(int64x2_t *)&v451[16]), (float64x2_t)vextq_s8(v452, (int8x16_t)v55, 8uLL));
    _Q6 = vmulq_f64(*(float64x2_t *)v451, _Q5);
    _Q5.f64[0] = _Q5.f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    _Q5.f64[0] = fabs(vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64(*(float64x2_t *)&v451[16], (float64x2_t)v452), 1), *(float64x2_t *)&v451[32], (float64x2_t)v452).f64[0], *(double *)&v451[16]));
    _Q6.f64[0] = 0.00000001;
    if (_Q5.f64[0] < 0.00000001)
      goto LABEL_283;
LABEL_116:
    *(_QWORD *)&v100 = vextq_s8(*(int8x16_t *)v451, *(int8x16_t *)v451, 8uLL).u64[0];
    _Q3.i64[1] = vextq_s8(*(int8x16_t *)&v451[16], *(int8x16_t *)&v451[16], 8uLL).u64[0];
    *((_QWORD *)&v100 + 1) = *(_QWORD *)&v451[32];
    *((_QWORD *)&v94 + 1) = vextq_s8(*(int8x16_t *)&v451[32], *(int8x16_t *)&v451[32], 8uLL).u64[0];
    *(int32x4_t *)object = _Q3;
    *(_QWORD *)&object[16] = v452.i64[0];
    *(_QWORD *)__p = vextq_s8(v452, v452, 8uLL).u64[0];
    *(_OWORD *)&object[24] = v100;
    *(float64_t *)&__p[24] = v55.f64[0];
    *(_OWORD *)&__p[8] = v94;
    sub_20E8BE424((uint64_t)&v429);
    *(_QWORD *)&v55.f64[0] = rep;
    _Q2.i64[1] = v431.i64[1];
    _Q3 = (int32x4_t)vzip1q_s64(v429, v431);
    v101 = vzip2q_s64(v429, v431);
    v55.f64[1] = v432;
    *v82 = (float64x2_t)_Q3;
    v82[1] = (float64x2_t)v101;
    v82[2] = v55;
    goto LABEL_140;
  }
  if (v66 == 13)
  {
    v77 = sub_20EB43734((double *)v65, *(uint64_t *)&v425.f64[0], *(uint64_t *)&v425.f64[1], v426, (uint64_t)v427, (uint64_t)v428);
    goto LABEL_139;
  }
  v102 = (_QWORD *)v426->f64;
  v103 = v427;
  v104 = (uint64_t)v428;
  if (v426)
  {
    v426->f64[0] = 0.0;
    v102[1] = 0;
    v102[2] = 0;
  }
  if (v104)
  {
    *(_QWORD *)(v104 + 64) = 0;
    v55.f64[1] = 0.0;
    *(_OWORD *)(v104 + 32) = 0u;
    *(_OWORD *)(v104 + 48) = 0u;
    *(_OWORD *)v104 = 0u;
    *(_OWORD *)(v104 + 16) = 0u;
  }
  *(_QWORD *)v80 = 0;
  *(_QWORD *)(v80 + 8) = 0;
  *(_QWORD *)(v80 + 16) = 0;
  if (v103)
    goto LABEL_129;
LABEL_283:
  while (1)
  {
    v45 = *(_QWORD *)v45;
    if (!v45)
      break;
    v46 = (int8x8_t)v10[212];
    if (v46)
      goto LABEL_17;
  }
  v175 = (char *)v415 - (_BYTE *)v414;
  v176 = (unint64_t)((char *)v415 - (_BYTE *)v414) >> 3;
  if (v176 < 2)
  {
LABEL_315:
    sub_20F120B68(&v438);
    if (**(int **)(*(_QWORD *)&v438.f64[0] + 56) > 5
      || ((v231 = *(unsigned __int8 *)(*(_QWORD *)&v438.f64[0] + 72),
           v232 = sub_20E8C31DC(*(uint64_t *)&v438.f64[0], "OSLogSurrogateAppender", 1, 0),
           v233 = v232,
           !v231)
        ? (_ZF = v232 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_563:
      v239 = 0.0;
      goto LABEL_564;
    }
    sub_20E863438((uint64_t)object);
    sub_20E86A980(&object[16], (uint64_t)"Failed to triangulate the points for calibration change detection: ", 67);
    std::ostream::operator<<();
    if ((v448 & 0x10) != 0)
    {
      v251 = v447;
      if (*(_QWORD *)&v447 < *(_QWORD *)&v441)
      {
        v447 = v441;
        v251 = v441;
      }
      v252 = *(const void **)&__p[24];
      v235 = *(_QWORD *)&v251 - *(_QWORD *)&__p[24];
      if (*(_QWORD *)&v251 - *(_QWORD *)&__p[24] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_484;
    }
    else
    {
      if ((v448 & 8) == 0)
      {
        v235 = 0;
        HIBYTE(v413) = 0;
        p_dst = &__dst;
        goto LABEL_439;
      }
      v252 = *(const void **)__p;
      v235 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
      if (*(_QWORD *)&__p[16] - *(_QWORD *)__p > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_484:
        sub_20E860B7C();
    }
    if (v235 >= 0x17)
    {
      v307 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v235 | 7) != 0x17)
        v307 = v235 | 7;
      v308 = v307 + 1;
      p_dst = (float64x2_t *)operator new(v307 + 1);
      *(_QWORD *)&__dst.f64[1] = v235;
      *(_QWORD *)&v413 = v308 | 0x8000000000000000;
      *(_QWORD *)&__dst.f64[0] = p_dst;
    }
    else
    {
      HIBYTE(v413) = v235;
      p_dst = &__dst;
      if (!v235)
      {
LABEL_439:
        *((_BYTE *)p_dst->f64 + v235) = 0;
        v429.i64[0] = (uint64_t)&v438;
        v429.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        v431.i32[0] = 5;
        v431.i64[1] = (uint64_t)"unknown file";
        LODWORD(v432) = 424;
        v435 = 0;
        v433 = "unknown function";
        v434 = 0;
        if (v413 >= 0.0)
          v309 = COERCE_DOUBLE(&__dst);
        else
          v309 = __dst.f64[0];
        v310 = *(_QWORD *)v429.i64[0];
        v311 = *(_QWORD *)v429.i64[0] + 16;
        if (*(char *)(*(_QWORD *)v429.i64[0] + 39) < 0)
        {
          v313 = *(const char **)(v310 + 16);
          v312 = *(_QWORD *)(v310 + 24);
          v315 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v315 & 1) != 0)
            goto LABEL_446;
        }
        else
        {
          v312 = *(unsigned __int8 *)(*(_QWORD *)v429.i64[0] + 39);
          v313 = (const char *)(*(_QWORD *)v429.i64[0] + 16);
          v314 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v314 & 1) != 0)
            goto LABEL_446;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v451);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v451);
          if (v451[24] && (v451[23] & 0x80000000) != 0)
            operator delete(*(void **)v451);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_446:
        if (byte_254A4A4F8[23] >= 0)
          v316 = byte_254A4A4F8;
        else
          v316 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v317 = byte_254A4A4F8[23];
        else
          v317 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v451 = os_log_create(v316, v313);
        v318 = &v451[8];
        if (v317 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v317 >= 0x17)
        {
          v411 = v313;
          v319 = v233;
          v320 = v310;
          v321 = v309;
          v322 = v231;
          v323 = v311;
          v324 = (v317 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v317 | 7) != 0x17)
            v324 = v317 | 7;
          v325 = v324 + 1;
          v318 = operator new(v324 + 1);
          *(_QWORD *)&v451[16] = v317;
          *(_QWORD *)&v451[24] = v325 | 0x8000000000000000;
          *(_QWORD *)&v451[8] = v318;
          v311 = v323;
          v231 = v322;
          v309 = v321;
          v310 = v320;
          v233 = v319;
          v313 = v411;
        }
        else
        {
          v451[31] = v317;
          if (!v317)
          {
LABEL_460:
            v318[v317] = 0;
            v451[32] = 1;
            v326 = &v451[40];
            if (v312 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v312 >= 0x17)
            {
              v327 = (v312 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v312 | 7) != 0x17)
                v327 = v312 | 7;
              v328 = v327 + 1;
              v326 = operator new(v327 + 1);
              v452.i64[0] = v312;
              v452.i64[1] = v328 | 0x8000000000000000;
              *(_QWORD *)&v451[40] = v326;
            }
            else
            {
              v452.i8[15] = v312;
              if (!v312)
              {
LABEL_468:
                v326[v312] = 0;
                LOBYTE(v453) = 1;
                v329 = *(NSObject **)v451;
                if (v452.i8[15] < 0)
                  operator delete(*(void **)&v451[40]);
                if (v451[32] && (v451[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v451[8]);
                if (*(_QWORD *)v451)
                  os_release(*(void **)v451);
                if (!v233 || !*(_QWORD *)(v233 + 24))
                {
                  os_log_type_enabled(v329, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v451 = 136315138;
                  *(float64_t *)&v451[4] = v309;
                  v336 = (void *)_os_log_send_and_compose_impl();
                  if (v336)
                    free(v336);
                  goto LABEL_549;
                }
                v330 = _os_log_pack_size();
                v331 = operator new(v330, (std::align_val_t)8uLL);
                v332 = (float64x2_t *)operator new();
                *(_QWORD *)&v332->f64[0] = &off_24C9ABB80;
                v332->f64[1] = 0.0;
                v332[1].f64[0] = 0.0;
                *(_QWORD *)&v332[1].f64[1] = v331;
                *(_QWORD *)&v425.f64[0] = v331;
                *(_QWORD *)&v425.f64[1] = v331;
                v428 = 0;
                v426 = v332;
                v427 = 0;
                v333 = strlen(*(const char **)&v309);
                if (v333 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v334 = v333;
                if (v333 >= 0x17)
                {
                  v337 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v333 | 7) != 0x17)
                    v337 = v333 | 7;
                  v338 = v337 + 1;
                  v335 = (uint64_t *)operator new(v337 + 1);
                  *((_QWORD *)&v437 + 1) = v338 | 0x8000000000000000;
                  v436 = v335;
                  *(_QWORD *)&v437 = v334;
                }
                else
                {
                  HIBYTE(v437) = v333;
                  v335 = (uint64_t *)&v436;
                  if (!v333)
                  {
LABEL_489:
                    *((_BYTE *)v335 + v334) = 0;
                    v339 = (uint64_t)v436;
                    *(_QWORD *)&v450.f64[0] = v437;
                    *(float64_t *)((char *)v450.f64 + 7) = *(float64_t *)((char *)&v437 + 7);
                    v340 = HIBYTE(v437);
                    v341 = (std::__shared_weak_count *)operator new(0x38uLL);
                    v341->__shared_owners_ = 0;
                    v341->__shared_weak_owners_ = 0;
                    v341[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9ABC20;
                    v341->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
                    v342 = v450.f64[0];
                    v341[1].__shared_owners_ = v339;
                    *(float64_t *)&v341[1].__shared_weak_owners_ = v342;
                    *(uint64_t *)((char *)&v341[1].__shared_weak_owners_ + 7) = *(_QWORD *)((char *)v450.f64 + 7);
                    HIBYTE(v341[2].__vftable) = v340;
                    v450.f64[0] = 0.0;
                    *(float64_t *)((char *)v450.f64 + 7) = 0.0;
                    v343 = v428;
                    v427 = (float64x2_t *)&v341[1];
                    v428 = v341;
                    if (v343)
                    {
                      p_shared_owners = (unint64_t *)&v343->__shared_owners_;
                      do
                        v345 = __ldaxr(p_shared_owners);
                      while (__stlxr(v345 - 1, p_shared_owners));
                      if (!v345)
                      {
                        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                        std::__shared_weak_count::__release_weak(v343);
                      }
                    }
                    *(float64x2_t *)v451 = v425;
                    v346 = v427;
                    *(_QWORD *)&v451[16] = v426;
                    if (v426)
                    {
                      v347 = (unint64_t *)&v426->f64[1];
                      do
                        v348 = __ldxr(v347);
                      while (__stxr(v348 + 1, v347));
                    }
                    v349 = v428;
                    *(_QWORD *)&v451[24] = v346;
                    *(_QWORD *)&v451[32] = v428;
                    if (v428)
                    {
                      v350 = (unint64_t *)&v428->__shared_owners_;
                      do
                        v351 = __ldxr(v350);
                      while (__stxr(v351 + 1, v350));
                      *(_QWORD *)&v451[40] = v346;
                      do
                        v352 = __ldaxr(v350);
                      while (__stlxr(v352 - 1, v350));
                      if (!v352)
                      {
                        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                        std::__shared_weak_count::__release_weak(v349);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v451[40] = v346;
                    }
                    v353 = (std::__shared_weak_count *)v426;
                    if (v426)
                    {
                      v354 = (unint64_t *)&v426->f64[1];
                      do
                        v355 = __ldaxr(v354);
                      while (__stlxr(v355 - 1, v354));
                      if (!v355)
                      {
                        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                        std::__shared_weak_count::__release_weak(v353);
                      }
                    }
                    v356 = *(_QWORD *)v451;
                    if (*(char *)(*(_QWORD *)&v451[40] + 31) >= 0)
                      v357 = *(_QWORD *)&v451[40] + 8;
                    else
                      v357 = *(_QWORD *)(*(_QWORD *)&v451[40] + 8);
                    v358 = _os_log_pack_fill();
                    *(_DWORD *)v358 = 136315138;
                    *(_QWORD *)(v358 + 4) = v357;
                    v359 = operator new();
                    v360 = *(unsigned __int8 *)(v310 + 39);
                    v361 = *(_QWORD *)(v310 + 16);
                    v362 = *(_QWORD *)(v310 + 24);
                    v363 = *(_OWORD *)&v451[24];
                    *(_OWORD *)(v359 + 8) = *(_OWORD *)&v451[8];
                    if ((v360 & 0x80u) != 0)
                      v360 = v362;
                    else
                      v361 = v311;
                    *(_QWORD *)v359 = v356;
                    *(_QWORD *)&v451[8] = 0;
                    *(_QWORD *)&v451[16] = 0;
                    *(_OWORD *)(v359 + 24) = v363;
                    *(_QWORD *)&v451[24] = 0;
                    *(_QWORD *)&v451[32] = 0;
                    *(_QWORD *)(v359 + 40) = v361;
                    *(_QWORD *)(v359 + 48) = v360;
                    *(_BYTE *)(v359 + 56) = 16;
                    v436 = 0;
                    *(_QWORD *)&v425.f64[0] = v359;
                    (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v233 + 24) + 40))(*(_QWORD *)(v233 + 24), &v425);
                    v364 = v425.f64[0];
                    v425.f64[0] = 0.0;
                    if (v364 != 0.0)
                    {
                      v365 = *(std::__shared_weak_count **)(*(_QWORD *)&v364 + 32);
                      if (v365)
                      {
                        v366 = (unint64_t *)&v365->__shared_owners_;
                        do
                          v367 = __ldaxr(v366);
                        while (__stlxr(v367 - 1, v366));
                        if (!v367)
                        {
                          ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                          std::__shared_weak_count::__release_weak(v365);
                        }
                      }
                      v368 = *(std::__shared_weak_count **)(*(_QWORD *)&v364 + 16);
                      if (v368)
                      {
                        v369 = (unint64_t *)&v368->__shared_owners_;
                        do
                          v370 = __ldaxr(v369);
                        while (__stlxr(v370 - 1, v369));
                        if (!v370)
                        {
                          ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                          std::__shared_weak_count::__release_weak(v368);
                        }
                      }
                      MEMORY[0x212BC6398](*(_QWORD *)&v364, 0x10F0C40B62ED6C6);
                      v371 = (uint64_t)v436;
                      v436 = 0;
                      if (v371)
                      {
                        v372 = *(std::__shared_weak_count **)(v371 + 32);
                        if (v372)
                        {
                          v373 = (unint64_t *)&v372->__shared_owners_;
                          do
                            v374 = __ldaxr(v373);
                          while (__stlxr(v374 - 1, v373));
                          if (!v374)
                          {
                            ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                            std::__shared_weak_count::__release_weak(v372);
                          }
                        }
                        v375 = *(std::__shared_weak_count **)(v371 + 16);
                        if (v375)
                        {
                          v376 = (unint64_t *)&v375->__shared_owners_;
                          do
                            v377 = __ldaxr(v376);
                          while (__stlxr(v377 - 1, v376));
                          if (!v377)
                          {
                            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                            std::__shared_weak_count::__release_weak(v375);
                          }
                        }
                        MEMORY[0x212BC6398](v371, 0x10F0C40B62ED6C6);
                      }
                    }
                    v378 = *(std::__shared_weak_count **)&v451[32];
                    if (*(_QWORD *)&v451[32])
                    {
                      v379 = (unint64_t *)(*(_QWORD *)&v451[32] + 8);
                      do
                        v380 = __ldaxr(v379);
                      while (__stlxr(v380 - 1, v379));
                      if (!v380)
                      {
                        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                        std::__shared_weak_count::__release_weak(v378);
                      }
                    }
                    v381 = *(std::__shared_weak_count **)&v451[16];
                    if (*(_QWORD *)&v451[16])
                    {
                      v382 = (unint64_t *)(*(_QWORD *)&v451[16] + 8);
                      do
                        v383 = __ldaxr(v382);
                      while (__stlxr(v383 - 1, v382));
                      if (!v383)
                      {
                        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                        std::__shared_weak_count::__release_weak(v381);
                      }
                    }
LABEL_549:
                    if (v231)
                    {
                      v384 = COERCE_DOUBLE(&__dst);
                      if (v413 < 0.0)
                        v384 = __dst.f64[0];
                      sub_20E8C003C((uint64_t)&v429, "%s", *(const char **)&v384);
                      sub_20E863570((uint64_t)&v429);
                    }
                    sub_20E863570((uint64_t)&v429);
                    v385 = v435;
                    if (v435)
                    {
                      v386 = (unint64_t *)&v435->__shared_owners_;
                      do
                        v387 = __ldaxr(v386);
                      while (__stlxr(v387 - 1, v386));
                      if (!v387)
                      {
                        ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                        std::__shared_weak_count::__release_weak(v385);
                      }
                    }
                    if (SHIBYTE(v413) < 0)
                      operator delete(*(void **)&__dst.f64[0]);
                    *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                    v388 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&object[16] = v388;
                    *(_QWORD *)&object[24] = MEMORY[0x24BEDB848] + 16;
                    if (v446 < 0)
                      operator delete(*(void **)&v443[6]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v449);
                    goto LABEL_563;
                  }
                }
                memcpy(v335, *(const void **)&v309, v334);
                goto LABEL_489;
              }
            }
            memmove(v326, v313, v312);
            goto LABEL_468;
          }
        }
        memmove(v318, v316, v317);
        goto LABEL_460;
      }
    }
    memmove(p_dst, v252, v235);
    goto LABEL_439;
  }
  v177 = 0.0;
  v178 = 0.0;
  if (v414 != v415)
  {
    v179 = (double *)v414;
    do
    {
      v180 = *v179++;
      v178 = fabs(v178) + fabs(v180);
    }
    while (v179 != v415);
  }
  v181 = (95 * v176) / 0x64uLL;
  v182 = (double *)((char *)v414 + 8 * v181);
  sub_20F128C24((double *)v414, v182, v415);
  v183 = *v182;
  v184 = (v175 >> 4) & 0x7FFFFFFF;
  v185 = (double *)((char *)v414 + 8 * v184);
  sub_20F128C24((double *)v414, v185, v182);
  v186 = (float64x2_t *)v414;
  if (v414 != v182)
  {
    v177 = 0.0;
    v187 = (double *)v414;
    do
    {
      v188 = *v187++;
      v177 = fabs(v177) + fabs(v188);
    }
    while (v187 != v182);
  }
  v189 = v415;
  v190 = (double *)((char *)v414 + 8);
  v191 = *(double *)v414;
  v410 = *(uint64_t *)v414;
  if (v414 == v415 || v190 == v415)
  {
    v407 = fabs(v191);
    v203 = *v185;
    v204 = (double *)((char *)v414 + 8 * v184);
    if (v204 == v415)
      goto LABEL_302;
LABEL_324:
    sub_20EDE2884((double *)v414, v204, v415);
    v186 = (float64x2_t *)v414;
    v189 = v415;
    if (v414 != v415)
      goto LABEL_303;
    goto LABEL_325;
  }
  v192 = (double *)((char *)v414 + 8);
  v193 = (double *)v414;
  v194 = (double *)((char *)v414 + 8);
  do
  {
    v195 = *v194++;
    v196 = v195;
    if (fabs(v191) < fabs(v195))
    {
      v191 = v196;
      v193 = v192;
    }
    v192 = v194;
  }
  while (v194 != v415);
  v197 = *v193;
  v198 = (uint64_t *)v414;
  v199 = (double *)((char *)v414 + 8);
  v200 = *(double *)v414;
  do
  {
    v201 = *v199++;
    v202 = v201;
    if (v200 < v201)
    {
      v200 = v202;
      v198 = (uint64_t *)v190;
    }
    v190 = v199;
  }
  while (v199 != v415);
  v407 = fabs(v197);
  v410 = *v198;
  v203 = *v185;
  v204 = (double *)((char *)v414 + 8 * v184);
  if (v204 != v415)
    goto LABEL_324;
LABEL_302:
  if (v414 == v415)
  {
LABEL_325:
    v230 = sqrt(0.0 / (double)(v176 - 1));
    v229 = v230;
    goto LABEL_326;
  }
LABEL_303:
  v205 = (char *)v189 - (char *)v186 - 8;
  v206 = v205 >> 3;
  v207 = 0.0;
  v208 = (double *)v186;
  if (v205 < 0x18)
    goto LABEL_598;
  v209 = (v206 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v208 = &v186->f64[v209];
  v210 = v186 + 1;
  v211 = v209;
  do
  {
    v212 = vmulq_f64(v210[-1], v210[-1]);
    v213 = vmulq_f64(*v210, *v210);
    v207 = v207 + v212.f64[0] + v212.f64[1] + v213.f64[0] + v213.f64[1];
    v210 += 2;
    v211 -= 4;
  }
  while (v211);
  if (v206 + 1 != v209)
  {
LABEL_598:
    do
    {
      v214 = *v208++;
      v207 = v207 + v214 * v214;
    }
    while (v208 != v189);
  }
  v215 = (double)(v176 - 1);
  v216 = v207 / v215;
  v217 = 0.0;
  v218 = (double *)v186;
  v219 = *(double *)&v410;
  if (v205 < 0x18)
    goto LABEL_599;
  v220 = v206 + 1;
  v218 = &v186->f64[v220 & 0x3FFFFFFFFFFFFFFCLL];
  v221 = (float64x2_t)vdupq_lane_s64(v410, 0);
  v222 = v186 + 1;
  v223 = v220 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v224 = vsubq_f64(v222[-1], v221);
    v225 = vsubq_f64(*v222, v221);
    v226 = vmulq_f64(v224, v224);
    v227 = vmulq_f64(v225, v225);
    v217 = v217 + v226.f64[0] + v226.f64[1] + v227.f64[0] + v227.f64[1];
    v222 += 2;
    v223 -= 4;
  }
  while (v223);
  v219 = *(double *)&v410;
  if (v220 != (v220 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_599:
    do
    {
      v228 = *v218++;
      v217 = v217 + (v228 - v219) * (v228 - v219);
    }
    while (v218 != v189);
  }
  v229 = sqrt(v216);
  v230 = sqrt(v217 / v215);
LABEL_326:
  v237 = v186->f64[v184];
  sub_20F120B68(&v436);
  v238 = v178 / (double)v176;
  v239 = fabs(v203);
  v240 = v177 / (double)v181;
  if (*(int *)v436[7] > 2)
    goto LABEL_432;
  v241 = *((unsigned __int8 *)v436 + 72);
  v242 = sub_20E8C31DC((uint64_t)v436, "OSLogSurrogateAppender", 1, 0);
  v243 = v242;
  if (!v241 && !v242)
    goto LABEL_432;
  *(_QWORD *)v451 = &v436;
  *(std::chrono::steady_clock::time_point *)&v451[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v451[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v451[24] = 2;
  *(_QWORD *)&v451[32] = "unknown file";
  *(_DWORD *)&v451[40] = 460;
  v452.i64[1] = 0;
  v453 = 0.0;
  v452.i64[0] = (uint64_t)"unknown function";
  v244 = v396;
  v245 = v396[1];
  if (v245 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v244 = v396;
    v245 = v396[1];
  }
  v395 = v241;
  v246 = *v244;
  v247 = v405[1];
  if (v247 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v247 = v405[1];
  }
  v401 = v245;
  v248 = **(_QWORD **)v451;
  v249 = (const char *)(**(_QWORD **)v451 + 16);
  v393 = v249;
  if (*(char *)(**(_QWORD **)v451 + 39) < 0)
  {
    v249 = *(const char **)(v248 + 16);
    v250 = *(_QWORD *)(v248 + 24);
  }
  else
  {
    v250 = *(unsigned __int8 *)(**(_QWORD **)v451 + 39);
  }
  v394 = **(_QWORD **)v451;
  v403 = v243;
  v398 = *v405;
  v253 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v253 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v254 = byte_254A4A4F8;
  else
    v254 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v255 = byte_254A4A4F8[23];
  else
    v255 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v254, v249);
  v256 = &object[8];
  if (v255 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v255 >= 0x17)
  {
    v257 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v255 | 7) != 0x17)
      v257 = v255 | 7;
    v258 = v257 + 1;
    v256 = operator new(v257 + 1);
    *(_QWORD *)&object[24] = v258 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v256;
    *(_QWORD *)&object[16] = v255;
    goto LABEL_358;
  }
  object[31] = v255;
  if (v255)
LABEL_358:
    memmove(v256, v254, v255);
  v256[v255] = 0;
  object[32] = 1;
  v259 = __p;
  if (v250 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v250 >= 0x17)
  {
    v260 = (v250 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v250 | 7) != 0x17)
      v260 = v250 | 7;
    v261 = v260 + 1;
    v259 = operator new(v260 + 1);
    *(_QWORD *)&__p[16] = v261 | 0x8000000000000000;
    *(_QWORD *)__p = v259;
    *(_QWORD *)&__p[8] = v250;
    goto LABEL_366;
  }
  __p[23] = v250;
  if (v250)
LABEL_366:
    memmove(v259, v249, v250);
  v259[v250] = 0;
  __p[24] = 1;
  v262 = *(NSObject **)object;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v263 = fabs(v183);
  if (v403 && *(_QWORD *)(v403 + 24))
  {
    v264 = _os_log_pack_size();
    v265 = (std::__shared_weak_count_vtbl *)operator new(v264, (std::align_val_t)8uLL);
    v266 = (std::__shared_weak_count *)operator new();
    v267 = v266;
    v266->__shared_owners_ = 0;
    v268 = (unint64_t *)&v266->__shared_owners_;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v265;
    *(_QWORD *)object = v265;
    *(_QWORD *)&object[8] = v265;
    *(_QWORD *)&object[16] = v266;
    do
      v269 = __ldxr(v268);
    while (__stxr(v269 + 1, v268));
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)__p = 0;
    do
      v270 = __ldaxr(v268);
    while (__stlxr(v270 - 1, v268));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v267);
    }
    v271 = *(_QWORD *)object;
    v272 = _os_log_pack_fill();
    *(_DWORD *)v272 = 67111936;
    *(_DWORD *)(v272 + 4) = v401 + 10 * v246;
    *(_WORD *)(v272 + 8) = 1024;
    *(_DWORD *)(v272 + 10) = v247 + 10 * v398;
    *(_WORD *)(v272 + 14) = 1024;
    *(_DWORD *)(v272 + 16) = v176;
    *(_WORD *)(v272 + 20) = 2048;
    *(double *)(v272 + 22) = *(double *)&v410;
    *(_WORD *)(v272 + 30) = 2048;
    *(double *)(v272 + 32) = v237;
    *(_WORD *)(v272 + 40) = 2048;
    *(double *)(v272 + 42) = v238;
    *(_WORD *)(v272 + 50) = 2048;
    *(double *)(v272 + 52) = v239;
    *(_WORD *)(v272 + 60) = 2048;
    *(double *)(v272 + 62) = v240;
    *(_WORD *)(v272 + 70) = 2048;
    *(double *)(v272 + 72) = v263;
    *(_WORD *)(v272 + 80) = 2048;
    *(double *)(v272 + 82) = v407;
    *(_WORD *)(v272 + 90) = 2048;
    *(double *)(v272 + 92) = v229;
    *(_WORD *)(v272 + 100) = 2048;
    *(double *)(v272 + 102) = v230;
    v273 = operator new();
    v274 = *(unsigned __int8 *)(v394 + 39);
    v275 = v393;
    if ((v274 & 0x80u) != 0)
    {
      v275 = *(const char **)(v394 + 16);
      v274 = *(_QWORD *)(v394 + 24);
    }
    *(_QWORD *)v273 = v271;
    *(_OWORD *)(v273 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v273 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v273 + 40) = v275;
    *(_QWORD *)(v273 + 48) = v274;
    *(_BYTE *)(v273 + 56) = 2;
    v425.f64[0] = 0.0;
    v429.i64[0] = v273;
    (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v403 + 24) + 40))(*(_QWORD *)(v403 + 24), &v429);
    v276 = v396;
    v277 = v429.i64[0];
    v429.i64[0] = 0;
    if (v277)
    {
      v278 = *(std::__shared_weak_count **)(v277 + 32);
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      v281 = *(std::__shared_weak_count **)(v277 + 16);
      if (v281)
      {
        v282 = (unint64_t *)&v281->__shared_owners_;
        do
          v283 = __ldaxr(v282);
        while (__stlxr(v283 - 1, v282));
        if (!v283)
        {
          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
          std::__shared_weak_count::__release_weak(v281);
        }
      }
      MEMORY[0x212BC6398](v277, 0x10F0C40B62ED6C6);
      v284 = v425.f64[0];
      v425.f64[0] = 0.0;
      if (v284 != 0.0)
      {
        v285 = *(std::__shared_weak_count **)(*(_QWORD *)&v284 + 32);
        if (v285)
        {
          v286 = (unint64_t *)&v285->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        v288 = *(std::__shared_weak_count **)(*(_QWORD *)&v284 + 16);
        if (v288)
        {
          v289 = (unint64_t *)&v288->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        MEMORY[0x212BC6398](*(_QWORD *)&v284, 0x10F0C40B62ED6C6);
      }
    }
    v291 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v292 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v293 = __ldaxr(v292);
      while (__stlxr(v293 - 1, v292));
      if (!v293)
      {
        ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
        std::__shared_weak_count::__release_weak(v291);
      }
    }
    v294 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v295 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v296 = __ldaxr(v295);
      while (__stlxr(v296 - 1, v295));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
        std::__shared_weak_count::__release_weak(v294);
      }
    }
  }
  else
  {
    os_log_type_enabled(v262, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 67111936;
    *(_DWORD *)&object[4] = v401 + 10 * v246;
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = v247 + 10 * v398;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v176;
    *(_WORD *)&object[20] = 2048;
    *(_QWORD *)&object[22] = v410;
    *(_WORD *)&object[30] = 2048;
    *(double *)&object[32] = v237;
    *(_WORD *)__p = 2048;
    *(double *)&__p[2] = v238;
    *(_WORD *)&__p[10] = 2048;
    *(double *)&__p[12] = v239;
    *(_WORD *)&__p[20] = 2048;
    *(double *)&__p[22] = v240;
    *(_WORD *)&__p[30] = 2048;
    v441 = v263;
    v442 = 2048;
    *(double *)v443 = v407;
    *(_WORD *)&v443[8] = 2048;
    *(double *)&v443[10] = v229;
    v444 = 2048;
    v445 = v230;
    v297 = (void *)_os_log_send_and_compose_impl();
    v276 = v396;
    if (v297)
      free(v297);
  }
  if (v395)
  {
    v298 = v276;
    v299 = v276[1];
    if (v299 < 0xA)
      goto LABEL_423;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_587;
    }
    v299 = v298[1];
LABEL_423:
    v300 = *v298;
    v301 = v405;
    v302 = v405[1];
    if (v302 >= 0xA)
    {
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v301 = v405;
        v302 = v405[1];
        goto LABEL_426;
      }
LABEL_587:
      abort();
    }
LABEL_426:
    sub_20E8C003C((uint64_t)v451, "CCD: [%02u][%02u] depth change: #samples=%u, mean=%f, median=%f, mad=%f, median_abs=%f, truncated_mad=%f, p95_abs=%f, max_abs=%f, rms=%f, stddev=%f", v299 + 10 * v300, v302 + 10 * *v301, v176, *(double *)&v410, v237, v238, v239, v240, v263, v407, v229, v230);
    sub_20E863570((uint64_t)v451);
  }
  sub_20E863570((uint64_t)v451);
  v303 = *(std::__shared_weak_count **)&v453;
  if (v453 != 0.0)
  {
    v304 = (unint64_t *)(*(_QWORD *)&v453 + 8);
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
LABEL_432:
  v306 = *(_DWORD *)(a1 + 56);
  if (v306 != 1)
  {
    v239 = v238;
    if (v306 == 2)
      v239 = v240;
  }
LABEL_564:
  if (v414)
  {
    v415 = (double *)v414;
    operator delete(v414);
  }
  return v239;
}

void sub_20F1275C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51)
{
  uint64_t v51;

  if (*(_BYTE *)(v51 - 216) && *(char *)(v51 - 217) < 0)
    operator delete(*(void **)(v51 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x260]);
  if (a50 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x2D0]);
  if (!a51)
    _Unwind_Resume(a1);
  operator delete(a51);
  _Unwind_Resume(a1);
}

uint64_t sub_20F12781C(_QWORD *a1, int *a2)
{
  double *v4;
  double *v5;
  uint64_t *v6;
  uint64_t *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  float64x2_t v16;
  uint64_t *v17;
  unsigned int v18;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v21;
  float64x2_t v22;
  __int128 v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  void **v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  const char *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  const char *v49;
  size_t v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  size_t v66;
  size_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  const char *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  double v123;
  double v124;
  double v125;
  double v126;
  const char *v127;
  _QWORD v128[3];
  int v129;
  const char *v130;
  int v131;
  const char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *__dst[2];
  int64_t v136;
  _QWORD v137[2];
  _QWORD v138[3];
  const void *v139;
  uint64_t v140;
  const void *v141;
  unint64_t v142;
  void *__p;
  char v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  char *v151;
  std::__shared_weak_count *v152;
  _QWORD *v153;
  __int128 v154;
  _BYTE v155[24];
  __int128 v156;
  void *v157[2];
  unint64_t v158;
  char v159;
  _QWORD v160[5];

  v160[2] = *MEMORY[0x24BDAC8D0];
  v4 = (double *)sub_20EB8DE00(a1 + 39, a2);
  if (!v4)
    goto LABEL_166;
  v5 = v4;
  v123 = v4[5];
  v126 = v4[6];
  v124 = v4[7];
  v125 = v4[8];
  v6 = sub_20EB8DE00(a1 + 34, a2);
  if (!v6)
    goto LABEL_166;
  if (*((_BYTE *)v6 + 1648) && *((_BYTE *)v5 + 32))
  {
    v7 = sub_20EB8DE00(a1 + 34, a2);
    if (!v7)
      goto LABEL_166;
    v8 = *((double *)v7 + 203);
    v9 = *((double *)v7 + 205);
    v10 = v5[5];
    v11 = v5[6];
    v12 = v5[3];
    v13 = sub_20EB8DE00(a1 + 34, a2);
    if (!v13)
      goto LABEL_166;
    v14 = v13;
    if (*((_BYTE *)v13 + 1680)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 281, (uint64_t)"!model || !aps_model_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_167;
    }
    *((double *)v14 + 203) = v8;
    *((double *)v14 + 204) = (v10 / v9 + v11) * 0.5 - v8 * v12;
    *((double *)v14 + 205) = v9;
    *((_BYTE *)v14 + 1648) = 1;
  }
  v15 = sub_20EB8DE00(a1 + 34, a2);
  if (!v15)
    goto LABEL_166;
  if (*((_BYTE *)v15 + 1560))
    v17 = v15 + 15;
  else
    v17 = 0;
  v18 = *((_DWORD *)v17 + 248);
  if (v18 == -1)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v18 = *((_DWORD *)v17 + 248);
      v16.f64[0] = 1.0;
      if (v18 > 7)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_167:
    abort();
  }
  v16.f64[0] = 1.0;
  if (v18 > 7)
    goto LABEL_20;
LABEL_19:
  if (!v18)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_20:
  v19.f64[0] = v126;
  v19.f64[1] = v125;
  v20 = (int8x16_t)vabdq_f64((float64x2_t)*(unint64_t *)&v123, *(float64x2_t *)v17);
  v21 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v22 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v21, (float64x2_t)vextq_s8(v20, v20, 8uLL)), (int32x4_t)vcgeq_f64(v21, vabdq_f64((float64x2_t)*(unint64_t *)&v124, *((float64x2_t *)v17 + 1)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v21, vabdq_f64(v19, *((float64x2_t *)v17 + 2))), (int32x4_t)vcgeq_f64(v21, vabdq_f64((float64x2_t)0, *((float64x2_t *)v17 + 3))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v22)) & 1) != 0
    || (*(_QWORD *)&v22.f64[0] = v17[8], vabdq_f64(v16, v22).f64[0] > 1.0e-10))
  {
    *(_OWORD *)v17 = *(unint64_t *)&v123;
    *((_OWORD *)v17 + 1) = *(unint64_t *)&v124;
    *(double *)&v23 = v126;
    *((double *)&v23 + 1) = v125;
    *((_OWORD *)v17 + 2) = v23;
    *((_OWORD *)v17 + 3) = 0u;
    v17[8] = *(_QWORD *)&v16.f64[0];
    *((double *)v17 + 9) = 1.0 / v123;
    *((double *)v17 + 10) = -0.0 / (v123 * v126);
    *((double *)v17 + 11) = -(v124 * v126 + v125 * -0.0) / (v123 * v126);
    v17[12] = 0;
    *((double *)v17 + 13) = 1.0 / v126;
    *((double *)v17 + 14) = -v125 / v126;
    v17[15] = 0;
    v17[16] = 0;
    *(_OWORD *)(v17 + 17) = xmmword_2102E3C70;
    v17[19] = 0x7FF8000000000000;
    *((_BYTE *)v17 + 160) = 0;
  }
  v24 = sub_20EB8DE00(a1 + 34, a2);
  if (!v24)
    goto LABEL_166;
  *(_OWORD *)(v24 + 3) = *(_OWORD *)(v5 + 9);
  v25 = *(_OWORD *)(v5 + 11);
  v26 = *(_OWORD *)(v5 + 13);
  v27 = *(_OWORD *)(v5 + 15);
  v24[11] = *((_QWORD *)v5 + 17);
  *(_OWORD *)(v24 + 9) = v27;
  *(_OWORD *)(v24 + 7) = v26;
  *(_OWORD *)(v24 + 5) = v25;
  sub_20F120C5C(a1, a2);
  v28 = sub_20EB8DE00(a1 + 44, a2);
  if (!v28)
LABEL_166:
    sub_20E89FD20("unordered_map::at: key not found");
  v28[19] = 0;
  v28[20] = 0;
  *((_DWORD *)v28 + 44) = 0;
  v28[21] = 0;
  sub_20F120B68(&v148);
  if (**(int **)(v148 + 56) > 2)
    return 1;
  v29 = *(unsigned __int8 *)(v148 + 72);
  v30 = sub_20E8C31DC(v148, "OSLogSurrogateAppender", 1, 0);
  v31 = v30;
  if (!v29 && !v30)
    return 1;
  sub_20E863438((uint64_t)v137);
  v32 = sub_20E86A980(v138, (uint64_t)"CCD: ", 5);
  sub_20E86A980(v32, (uint64_t)"[", 1);
  v33 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v33, (uint64_t)":", 1);
  v34 = (_QWORD *)std::ostream::operator<<();
  v35 = sub_20E86A980(v34, (uint64_t)"]", 1);
  sub_20E86A980(v35, (uint64_t)" resetting reference calibration at ", 36);
  std::ostream::operator<<();
  if ((v146 & 0x10) != 0)
  {
    v38 = v145;
    if (v145 < v142)
    {
      v145 = v142;
      v38 = v142;
    }
    v39 = v141;
    v36 = v38 - (_QWORD)v141;
    if (v38 - (unint64_t)v141 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_86;
  }
  else
  {
    if ((v146 & 8) == 0)
    {
      v36 = 0;
      HIBYTE(v136) = 0;
      v37 = __dst;
      goto LABEL_41;
    }
    v39 = v139;
    v36 = v140 - (_QWORD)v139;
    if ((unint64_t)(v140 - (_QWORD)v139) > 0x7FFFFFFFFFFFFFF7)
LABEL_86:
      sub_20E860B7C();
  }
  if (v36 >= 0x17)
  {
    v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v40 = v36 | 7;
    v41 = v40 + 1;
    v37 = (void **)operator new(v40 + 1);
    __dst[1] = (void *)v36;
    v136 = v41 | 0x8000000000000000;
    __dst[0] = v37;
    goto LABEL_40;
  }
  HIBYTE(v136) = v36;
  v37 = __dst;
  if (v36)
LABEL_40:
    memmove(v37, v39, v36);
LABEL_41:
  *((_BYTE *)v37 + v36) = 0;
  v128[0] = &v148;
  v128[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v128[2] = std::chrono::system_clock::now().__d_.__rep_;
  v129 = 2;
  v130 = "unknown file";
  v131 = 256;
  v133 = 0;
  v134 = 0;
  v132 = "unknown function";
  if (v136 >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  v43 = *(_QWORD *)v128[0];
  v44 = *(_QWORD *)v128[0] + 16;
  if (*(char *)(*(_QWORD *)v128[0] + 39) < 0)
  {
    v46 = *(const char **)(v43 + 16);
    v45 = *(_QWORD *)(v43 + 24);
    v48 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v48 & 1) != 0)
      goto LABEL_48;
  }
  else
  {
    v45 = *(unsigned __int8 *)(*(_QWORD *)v128[0] + 39);
    v46 = (const char *)(*(_QWORD *)v128[0] + 16);
    v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v47 & 1) != 0)
      goto LABEL_48;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v155);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v155);
    if ((_BYTE)v156 && (v155[23] & 0x80000000) != 0)
      operator delete(*(void **)v155);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_48:
  if (byte_254A4A4F8[23] >= 0)
    v49 = byte_254A4A4F8;
  else
    v49 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v50 = byte_254A4A4F8[23];
  else
    v50 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v155 = os_log_create(v49, v46);
  v51 = &v155[8];
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v50 >= 0x17)
  {
    v127 = v46;
    v52 = v43;
    v53 = v31;
    v54 = v42;
    v55 = v44;
    v56 = v29;
    v57 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v57 = v50 | 7;
    v58 = v57 + 1;
    v51 = operator new(v57 + 1);
    *(_QWORD *)&v155[16] = v50;
    *(_QWORD *)&v156 = v58 | 0x8000000000000000;
    *(_QWORD *)&v155[8] = v51;
    v29 = v56;
    v44 = v55;
    v42 = v54;
    v31 = v53;
    v43 = v52;
    v46 = v127;
    goto LABEL_61;
  }
  BYTE7(v156) = v50;
  if (v50)
LABEL_61:
    memmove(v51, v49, v50);
  v51[v50] = 0;
  BYTE8(v156) = 1;
  v59 = v157;
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v45 >= 0x17)
  {
    v61 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v61 = v45 | 7;
    v62 = v61 + 1;
    v59 = (void **)operator new(v61 + 1);
    v157[1] = (void *)v45;
    v158 = v62 | 0x8000000000000000;
    v157[0] = v59;
  }
  else
  {
    HIBYTE(v158) = v45;
    if (!v45)
    {
      LOBYTE(v157[0]) = 0;
      v159 = 1;
      v60 = *(NSObject **)v155;
      if ((SHIBYTE(v158) & 0x80000000) == 0)
        goto LABEL_66;
      goto LABEL_72;
    }
  }
  memmove(v59, v46, v45);
  *((_BYTE *)v59 + v45) = 0;
  v159 = 1;
  v60 = *(NSObject **)v155;
  if ((SHIBYTE(v158) & 0x80000000) == 0)
  {
LABEL_66:
    if (!BYTE8(v156))
      goto LABEL_75;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v157[0]);
  if (!BYTE8(v156))
    goto LABEL_75;
LABEL_73:
  if (SBYTE7(v156) < 0)
    operator delete(*(void **)&v155[8]);
LABEL_75:
  if (*(_QWORD *)v155)
    os_release(*(void **)v155);
  if (!v31 || !*(_QWORD *)(v31 + 24))
  {
    os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v155 = 136315138;
    *(_QWORD *)&v155[4] = v42;
    v69 = (void *)_os_log_send_and_compose_impl();
    if (v69)
      free(v69);
    goto LABEL_151;
  }
  v63 = _os_log_pack_size();
  v64 = (std::__shared_weak_count_vtbl *)operator new(v63, (std::align_val_t)8uLL);
  v65 = (std::__shared_weak_count *)operator new();
  v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v65->__shared_owners_ = 0;
  v65->__shared_weak_owners_ = 0;
  v65[1].__vftable = v64;
  *(_QWORD *)&v149 = v64;
  *((_QWORD *)&v149 + 1) = v64;
  v151 = 0;
  v152 = 0;
  v150 = v65;
  v66 = strlen(v42);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v67 = v66;
  if (v66 >= 0x17)
  {
    v70 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v70 = v66 | 7;
    v71 = v70 + 1;
    v68 = operator new(v70 + 1);
    *((_QWORD *)&v154 + 1) = v71 | 0x8000000000000000;
    v153 = v68;
    *(_QWORD *)&v154 = v67;
    goto LABEL_90;
  }
  HIBYTE(v154) = v66;
  v68 = &v153;
  if (v66)
LABEL_90:
    memcpy(v68, v42, v67);
  *((_BYTE *)v68 + v67) = 0;
  v72 = v153;
  v160[0] = v154;
  *(_QWORD *)((char *)v160 + 7) = *(_QWORD *)((char *)&v154 + 7);
  v73 = HIBYTE(v154);
  v74 = operator new(0x38uLL);
  v74[1] = 0;
  v74[2] = 0;
  v74[3] = off_24C9ABC20;
  *v74 = &off_24C9ABBD0;
  v75 = v160[0];
  v74[4] = v72;
  v74[5] = v75;
  *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v160 + 7);
  *((_BYTE *)v74 + 55) = v73;
  v160[0] = 0;
  *(_QWORD *)((char *)v160 + 7) = 0;
  v76 = v152;
  v151 = (char *)(v74 + 3);
  v152 = (std::__shared_weak_count *)v74;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *(_OWORD *)v155 = v149;
  v79 = v151;
  *(_QWORD *)&v155[16] = v150;
  if (v150)
  {
    v80 = (unint64_t *)&v150->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = v152;
  *(_QWORD *)&v156 = v79;
  *((_QWORD *)&v156 + 1) = v152;
  if (v152)
  {
    v83 = (unint64_t *)&v152->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    v157[0] = v79;
    do
      v85 = __ldaxr(v83);
    while (__stlxr(v85 - 1, v83));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  else
  {
    v157[0] = v79;
  }
  v86 = v150;
  if (v150)
  {
    v87 = (unint64_t *)&v150->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *(_QWORD *)v155;
  if (*((char *)v157[0] + 31) >= 0)
    v90 = (char *)v157[0] + 8;
  else
    v90 = (char *)*((_QWORD *)v157[0] + 1);
  v91 = _os_log_pack_fill();
  *(_DWORD *)v91 = 136315138;
  *(_QWORD *)(v91 + 4) = v90;
  v92 = operator new();
  v93 = *(unsigned __int8 *)(v43 + 39);
  v94 = *(_QWORD *)(v43 + 16);
  v95 = *(_QWORD *)(v43 + 24);
  v96 = v156;
  *(_OWORD *)(v92 + 8) = *(_OWORD *)&v155[8];
  if ((v93 & 0x80u) != 0)
    v93 = v95;
  else
    v94 = v44;
  *(_QWORD *)v92 = v89;
  *(_QWORD *)&v155[8] = 0;
  *(_QWORD *)&v155[16] = 0;
  *(_OWORD *)(v92 + 24) = v96;
  v156 = 0uLL;
  *(_QWORD *)(v92 + 40) = v94;
  *(_QWORD *)(v92 + 48) = v93;
  *(_BYTE *)(v92 + 56) = 2;
  v153 = 0;
  *(_QWORD *)&v149 = v92;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v149);
  v97 = v149;
  *(_QWORD *)&v149 = 0;
  if (v97)
  {
    v98 = *(std::__shared_weak_count **)(v97 + 32);
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = *(std::__shared_weak_count **)(v97 + 16);
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
    v104 = v153;
    v153 = 0;
    if (v104)
    {
      v105 = (std::__shared_weak_count *)v104[4];
      if (v105)
      {
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = (std::__shared_weak_count *)v104[2];
      if (v108)
      {
        v109 = (unint64_t *)&v108->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = *(std::__shared_weak_count **)&v155[16];
  if (*(_QWORD *)&v155[16])
  {
    v115 = (unint64_t *)(*(_QWORD *)&v155[16] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
LABEL_151:
  if (v29)
  {
    v117 = (const char *)__dst;
    if (v136 < 0)
      v117 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v128, "%s", v117);
    sub_20E863570((uint64_t)v128);
  }
  sub_20E863570((uint64_t)v128);
  v118 = v134;
  if (v134)
  {
    v119 = (unint64_t *)&v134->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (SHIBYTE(v136) < 0)
    operator delete(__dst[0]);
  v137[0] = *MEMORY[0x24BEDB7F0];
  v121 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v137 + *(_QWORD *)(v137[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v138[0] = v121;
  v138[1] = MEMORY[0x24BEDB848] + 16;
  if (v144 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v147);
  return 1;
}

void sub_20F128648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (*(_BYTE *)(v34 - 216) && *(char *)(v34 - 217) < 0)
    operator delete(*(void **)(v34 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  if (a33 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a34);
  _Unwind_Resume(a1);
}

float64x2_t sub_20F12879C@<Q0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v17;
  double v19;
  double v21;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  float64x2_t v35;
  float64x2_t result;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64_t v41;
  float64x2_t v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v6 = (_QWORD *)(a1 + 312);
  v7 = sub_20EB8DE00((_QWORD *)(a1 + 312), a2);
  if (!v7)
    goto LABEL_13;
  v8 = v7;
  v9 = (_QWORD *)(a1 + 272);
  v10 = sub_20EB8DE00(v9, a2);
  if (!v10)
    goto LABEL_13;
  *(_QWORD *)&v11.f64[0] = v8[11];
  v13 = *(float64x2_t *)(v8 + 9);
  _D2 = *((double *)v8 + 14);
  v15 = *((float64x2_t *)v8 + 6);
  _D4 = *((double *)v8 + 17);
  v17 = *(float64x2_t *)(v8 + 15);
  *(_QWORD *)&v12.f64[0] = v10[5];
  _Q7 = *(float64x2_t *)(v10 + 3);
  v19 = *((double *)v10 + 8);
  _Q17 = *((float64x2_t *)v10 + 3);
  v21 = *((double *)v10 + 11);
  _Q19 = *(float64x2_t *)(v10 + 9);
  v23 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, _Q7.f64[0]), v15, _Q17.f64[0]), v17, _Q19.f64[0]);
  v24 = vmlad_n_f64(vmlad_n_f64(v11.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
  v25 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v13, _Q7, 1), v15, _Q17, 1), v17, _Q19, 1);
  __asm
  {
    FMLA            D7, D2, V17.D[1]
    FMLA            D7, D4, V19.D[1]
  }
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v41 = _Q7.f64[0];
  v42 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v12.f64[0]), v15, v19), v17, v21);
  v43 = vmulq_f64(v11, v12).f64[0] + _D2 * v19 + _D4 * v21;
  v45 = 0;
  v44 = 0uLL;
  sub_20E9733B8(&v38, (double *)&v44);
  v46 = v44;
  v47 = v45;
  v30 = sub_20EB8DE00(v6, a2);
  if (!v30 || (v31 = v30, (v32 = sub_20EB8DE00(v9, a2)) == 0))
LABEL_13:
    sub_20E89FD20("unordered_map::at: key not found");
  if (*((_BYTE *)v32 + 1560))
    v33 = v32 + 15;
  else
    v33 = 0;
  v34 = *((_DWORD *)v33 + 248);
  if (v34 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_15;
    }
    v34 = *((_DWORD *)v33 + 248);
  }
  if (!v34)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_15:
    abort();
  }
  v35 = *((float64x2_t *)v33 + 1);
  *(_QWORD *)&v35.f64[1] = v33[5];
  result = vsubq_f64(*(float64x2_t *)(v31 + 5), (float64x2_t)vzip1q_s64(*(int64x2_t *)v33, *((int64x2_t *)v33 + 2)));
  v37 = vsubq_f64(*(float64x2_t *)(v31 + 7), v35);
  *(_OWORD *)a3 = v46;
  *(_QWORD *)(a3 + 16) = v47;
  *(float64x2_t *)(a3 + 40) = v37;
  *(float64x2_t *)(a3 + 24) = result;
  return result;
}

__n128 sub_20F1289A8@<Q0>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  float64_t v29;
  float64x2_t v30;
  double v35;
  double v37;
  double v40;
  __n128 result;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  double v66;

  v8 = (_QWORD *)(a1 + 312);
  v9 = sub_20EB8DE00((_QWORD *)(a1 + 312), a3);
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  v11 = sub_20EB8DE00(v8, a2);
  if (!v11)
    goto LABEL_6;
  *(_QWORD *)&v12.f64[0] = v10[11];
  v59 = v12;
  v57 = *(float64x2_t *)(v10 + 9);
  *(_QWORD *)&v13.f64[1] = v10[10];
  v60 = *((double *)v10 + 14);
  v58 = *((double *)v10 + 17);
  *(_QWORD *)&v13.f64[0] = v11[11];
  v55 = *((float64x2_t *)v10 + 6);
  v56 = v13;
  *(_QWORD *)&v13.f64[0] = v11[14];
  v53 = *(float64x2_t *)(v10 + 15);
  v54 = v13;
  v50 = *((int8x16_t *)v11 + 6);
  v51 = *(int8x16_t *)(v11 + 9);
  v52 = *((double *)v11 + 17);
  v14 = (_QWORD *)(a1 + 272);
  v49 = *(int8x16_t *)(v11 + 15);
  v15 = sub_20EB8DE00(v14, a3);
  if (!v15 || (v16 = v15, (v17 = sub_20EB8DE00(v14, a2)) == 0))
LABEL_6:
    sub_20E89FD20("unordered_map::at: key not found");
  _Q18 = v57;
  v19 = v55;
  v20 = v53;
  v21 = *(double *)vextq_s8(v51, v51, 8uLL).i64;
  v22 = *(double *)vextq_s8(v50, v50, 8uLL).i64;
  v23 = *(double *)vextq_s8(v49, v49, 8uLL).i64;
  *(_QWORD *)&_Q18.f64[1] = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
  *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v24 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, *(double *)v51.i64), v19, *(double *)v50.i64), v20, *(double *)v49.i64);
  v25 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v21), v19, v22), v20, v23);
  _D4 = v59.f64[0] * v21 + v60 * v22 + v58 * v23;
  v27.f64[1] = v54.f64[1];
  v28 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v56.f64[0]), v19, v54.f64[0]), v20, v52);
  v29 = vmulq_f64(v59, v56).f64[0] + v60 * v54.f64[0] + v58 * v52;
  *(_QWORD *)&v27.f64[0] = v16[5];
  v30 = *(float64x2_t *)(v16 + 3);
  _D16 = *((double *)v16 + 8);
  _Q17 = *((float64x2_t *)v16 + 3);
  *(_QWORD *)&_Q18.f64[0] = v16[11];
  _Q19 = *(float64x2_t *)(v16 + 9);
  *(_QWORD *)&v20.f64[0] = v17[5];
  _Q21 = *(float64x2_t *)(v17 + 3);
  v35 = *((double *)v17 + 8);
  _Q23 = *((float64x2_t *)v17 + 3);
  v37 = *((double *)v17 + 11);
  _Q25 = *(float64x2_t *)(v17 + 9);
  _Q26 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, _Q21.f64[0]), _Q17, _Q23.f64[0]), _Q19, _Q25.f64[0]);
  v40 = vmlad_n_f64(vmlad_n_f64(v27.f64[0] * _Q21.f64[0], _D16, _Q23.f64[0]), _Q18.f64[0], _Q25.f64[0]);
  _Q28 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v30, _Q21, 1), _Q17, _Q23, 1), _Q19, _Q25, 1);
  __asm
  {
    FMLA            D21, D16, V23.D[1]
    FMLA            D21, D18, V25.D[1]
  }
  _Q7 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v20.f64[0]), _Q17, v35), _Q19, v37);
  v27.f64[0] = vmulq_f64(v27, v20).f64[0] + _D16 * v35 + _Q18.f64[0] * v37;
  __asm
  {
    FMLA            D17, D4, V26.D[1]
    FMLA            D19, D4, V28.D[1]
    FMLA            D1, D4, V7.D[1]
  }
  v62 = _Q17.f64[0] + v29 * v40;
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q26.f64[0]), v25, _Q26, 1), v28, v40);
  v64 = _Q19.f64[0] + v29 * _Q21.f64[0];
  v63 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q28.f64[0]), v25, _Q28, 1), v28, _Q21.f64[0]);
  v66 = _D1 + v29 * v27.f64[0];
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q7.f64[0]), v25, _Q7, 1), v28, v27.f64[0]);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_20E9733B8(&v61, (double *)a4);
  return result;
}

double *sub_20F128C24(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  double *v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;

  if (a2 != a3)
  {
    while (1)
    {
      v3 = a3 - result;
      if (v3 < 2)
        return result;
      if (v3 == 3)
      {
        v40 = *result;
        v41 = result[1];
        v42 = fabs(v41);
        v43 = fabs(*result);
        v44 = *(a3 - 1);
        v45 = fabs(v44);
        if (v42 >= v43)
        {
          if (v45 < v42)
          {
            result[1] = v44;
            *(a3 - 1) = v41;
            v57 = *result;
            v56 = result[1];
            if (fabs(v56) < fabs(*result))
            {
              *result = v56;
              result[1] = v57;
            }
          }
        }
        else if (v45 >= v42)
        {
          *result = v41;
          result[1] = v40;
          v58 = *(a3 - 1);
          if (fabs(v58) < v43)
          {
            result[1] = v58;
            *(a3 - 1) = v40;
          }
        }
        else
        {
          *result = v44;
          *(a3 - 1) = v40;
        }
        return result;
      }
      if (v3 == 2)
      {
        v46 = *(a3 - 1);
        v47 = *result;
        if (fabs(v46) < fabs(*result))
        {
          *result = v46;
          *(a3 - 1) = v47;
        }
        return result;
      }
      if ((char *)a3 - (char *)result <= 63)
      {
        while (result != a3 - 1)
        {
          v48 = result++;
          if (v48 != a3 && result != a3)
          {
            v49 = *v48;
            v50 = *v48;
            v51 = result;
            v52 = v48;
            v53 = result;
            do
            {
              v54 = *v53++;
              v55 = v54;
              if (fabs(v54) < fabs(v50))
              {
                v50 = v55;
                v52 = v51;
              }
              v51 = v53;
            }
            while (v53 != a3);
            if (v52 != v48)
            {
              *v48 = *v52;
              *v52 = v49;
            }
          }
        }
        return result;
      }
      v4 = &result[v3 >> 1];
      v5 = a3 - 1;
      v6 = *(a3 - 1);
      v7 = *v4;
      v8 = *result;
      v9 = fabs(*v4);
      v10 = fabs(*result);
      v11 = fabs(v6);
      if (v9 < v10)
        break;
      if (v11 < v9)
      {
        *v4 = v6;
        *v5 = v7;
        v12 = *result;
        if (fabs(*v4) < fabs(*result))
        {
          *result = *v4;
          *v4 = v12;
          goto LABEL_14;
        }
        goto LABEL_16;
      }
      v13 = 0;
      v14 = *result;
      v15 = fabs(*result);
      v16 = fabs(*v4);
      if (v15 >= v16)
      {
LABEL_28:
        v17 = a3 - 1;
        while (--v17 != result)
        {
          if (fabs(*v17) < v16)
          {
            *result = *v17;
            *v17 = v14;
            ++v13;
            v18 = result + 1;
            if (result + 1 < v17)
              goto LABEL_18;
            goto LABEL_32;
          }
        }
        v29 = result + 1;
        if (v15 >= fabs(*v5))
        {
          if (v29 == v5)
            return result;
          while (1)
          {
            v30 = *v29;
            if (v15 < fabs(*v29))
              break;
            if (++v29 == v5)
              return result;
          }
          *v29++ = *v5;
          *v5 = v30;
        }
        if (v29 == v5)
          return result;
        while (1)
        {
          v34 = fabs(*result);
          do
          {
            v35 = *v29++;
            v36 = v35;
          }
          while (v34 >= fabs(v35));
          v37 = v29 - 1;
          do
          {
            v38 = *--v5;
            v39 = v38;
          }
          while (v34 < fabs(v38));
          if (v37 >= v5)
            break;
          *v37 = v39;
          *v5 = v36;
        }
        result = v29 - 1;
        if (v37 > a2)
          return result;
        goto LABEL_64;
      }
LABEL_17:
      v17 = a3 - 1;
      v18 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_32:
        v23 = v18;
      }
      else
      {
LABEL_18:
        v19 = v18;
        while (1)
        {
          v20 = fabs(*v4);
          do
          {
            v21 = *v19++;
            v22 = v21;
          }
          while (fabs(v21) < v20);
          v23 = v19 - 1;
          do
          {
            v24 = *--v17;
            v25 = v24;
          }
          while (fabs(v24) >= v20);
          if (v23 >= v17)
            break;
          *v23 = v25;
          *v17 = v22;
          ++v13;
          if (v23 == v4)
            v4 = v17;
        }
      }
      if (v23 != v4)
      {
        v26 = *(_QWORD *)v23;
        if (fabs(*v4) < fabs(*v23))
        {
          *v23 = *v4;
          *(_QWORD *)v4 = v26;
          ++v13;
        }
      }
      if (v23 == a2)
        return result;
      if (!v13)
      {
        if (v23 <= a2)
        {
          v31 = v23 + 1;
          while (v31 != a3)
          {
            v32 = fabs(*v31);
            v33 = fabs(*(v31++ - 1));
            if (v32 < v33)
              goto LABEL_38;
          }
        }
        else
        {
          while (v18 != v23)
          {
            v27 = fabs(*v18);
            v28 = fabs(*(v18++ - 1));
            if (v27 < v28)
              goto LABEL_38;
          }
        }
        return result;
      }
LABEL_38:
      if (v23 <= a2)
        result = v23 + 1;
      else
        a3 = v23;
LABEL_64:
      if (a3 == a2)
        return result;
    }
    if (v11 >= v9)
    {
      *result = v7;
      *v4 = v8;
      if (fabs(*v5) < v10)
      {
        *v4 = *v5;
        *v5 = v8;
LABEL_14:
        v13 = 2;
        v14 = *result;
        v15 = fabs(*result);
        v16 = fabs(*v4);
        if (v15 >= v16)
          goto LABEL_28;
        goto LABEL_17;
      }
    }
    else
    {
      *result = v6;
      *v5 = v8;
    }
LABEL_16:
    v13 = 1;
    v14 = *result;
    v15 = fabs(*result);
    v16 = fabs(*v4);
    if (v15 >= v16)
      goto LABEL_28;
    goto LABEL_17;
  }
  return result;
}

void sub_20F129044(uint64_t a1)
{
  sub_20F129068(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F129068(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v13;
  void *v14;

  *(_QWORD *)a1 = &off_24C9F8CF8;
  v2 = *(_QWORD **)(a1 + 368);
  if (v2)
  {
    do
    {
      v13 = (_QWORD *)*v2;
      v14 = (void *)v2[16];
      if (v14)
      {
        v2[17] = v14;
        operator delete(v14);
      }
      operator delete(v2);
      v2 = v13;
    }
    while (v13);
  }
  v3 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 328);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v6)
    operator delete(v6);
  sub_20F129600(a1 + 272, *(_QWORD **)(a1 + 288));
  v7 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 248);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(void **)(a1 + 208);
  if (v11)
  {
    *(_QWORD *)(a1 + 216) = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_20F129158(uint64_t a1, uint64_t a2)
{
  int8x8_t v2;
  size_t prime;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  int *v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v2 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v2;
    if (prime > *(_QWORD *)&v2)
      goto LABEL_17;
  }
  else
  {
    v2 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v2 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v2), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v2)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    do
    {
      v12 = (int *)(v10 + 2);
      if (*((_DWORD *)v10 + 4) >= 0x10000u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_91:
        abort();
      }
      v13 = *((_DWORD *)v10 + 5);
      if (v13 >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_91;
        }
        v13 = *((_DWORD *)v10 + 5);
      }
      v14 = *v12;
      v15 = (unsigned __int16)v13 | ((unsigned __int16)*v12 << 16);
      v16 = *(_QWORD *)(a1 + 8);
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v2 = (int8x8_t)((unsigned __int16)v13 | ((unsigned __int16)v14 << 16));
          if (v16 <= v15)
            v2 = (int8x8_t)(v15 % v16);
        }
        else
        {
          v2 = (int8x8_t)(((_DWORD)v16 - 1) & v15);
        }
        v18 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v2);
        if (v18)
        {
          v19 = *v18;
          if (v19)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                v23 = v19[1];
                if (v23 == v15)
                {
                  if (*((_DWORD *)v19 + 4) == v14 && *((_DWORD *)v19 + 5) == v13)
                    goto LABEL_89;
                }
                else if ((v23 & (v16 - 1)) != *(_QWORD *)&v2)
                {
                  goto LABEL_51;
                }
                v19 = (uint64_t *)*v19;
                if (!v19)
                  goto LABEL_51;
              }
            }
            do
            {
              v21 = v19[1];
              if (v21 == v15)
              {
                if (*((_DWORD *)v19 + 4) == v14 && *((_DWORD *)v19 + 5) == v13)
                  goto LABEL_89;
              }
              else
              {
                if (v21 >= v16)
                  v21 %= v16;
                if (v21 != *(_QWORD *)&v2)
                  break;
              }
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_51:
      v24 = operator new(0x20uLL);
      *v24 = 0;
      v24[1] = v15;
      *((_OWORD *)v24 + 1) = *(_OWORD *)v12;
      v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v26 = *(float *)(a1 + 32);
      if (v16 && (float)(v26 * (float)v16) >= v25)
      {
        v15 = (unint64_t)v2;
      }
      else
      {
        v27 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3)
          v27 = 1;
        v28 = v27 | (2 * v16);
        v29 = vcvtps_u32_f32(v25 / v26);
        if (v28 <= v29)
          v30 = v29;
        else
          v30 = v28;
        if (v30 == 1)
        {
          v30 = 2;
        }
        else if ((v30 & (v30 - 1)) != 0)
        {
          v30 = std::__next_prime(v30);
          v16 = *(_QWORD *)(a1 + 8);
        }
        if (v30 > v16)
          goto LABEL_64;
        if (v30 < v16)
        {
          v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v16 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
          {
            v31 = std::__next_prime(v31);
          }
          else
          {
            v33 = 1 << -(char)__clz(v31 - 1);
            if (v31 >= 2)
              v31 = v33;
          }
          if (v30 <= v31)
            v30 = v31;
          if (v30 < v16)
LABEL_64:
            sub_20E8D2B3C(a1, v30);
        }
        v16 = *(_QWORD *)(a1 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v16 <= v15)
            v15 %= v16;
        }
        else
        {
          v15 = ((_DWORD)v16 - 1) & v15;
        }
      }
      v34 = *(_QWORD *)a1;
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
      if (v35)
      {
        *v24 = *v35;
      }
      else
      {
        *v24 = *v11;
        *v11 = v24;
        *(_QWORD *)(v34 + 8 * v15) = v11;
        if (!*v24)
          goto LABEL_88;
        v36 = *(_QWORD *)(*v24 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v36 >= v16)
            v36 %= v16;
        }
        else
        {
          v36 &= v16 - 1;
        }
        v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
      }
      *v35 = v24;
LABEL_88:
      ++*(_QWORD *)(a1 + 24);
LABEL_89:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_20F1295A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F1295BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F1295D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F1295EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F129600(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[218];
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v6 = (void *)v2[216];
      v2[216] = 0;
      if (v6)
        operator delete(v6);
      v7 = (_QWORD *)v2[213];
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v9 = (void *)v2[211];
      v2[211] = 0;
      if (v9)
        operator delete(v9);
      sub_20EB8188C((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20F12969C(char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (a1)
  {
    v3 = (_QWORD *)__p[218];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = (void *)__p[216];
    __p[216] = 0;
    if (v5)
      operator delete(v5);
    v6 = (_QWORD *)__p[213];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = (void *)__p[211];
    __p[211] = 0;
    if (v8)
      operator delete(v8);
    sub_20EB8188C((uint64_t)(__p + 3));
    operator delete(__p);
  }
  else if (__p)
  {
    operator delete(__p);
  }
}

void sub_20F12973C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F129ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F129AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F129B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F129B28(uint64_t *a1, _DWORD *a2)
{
  char *p_p;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char *v8;
  void *v9;
  int *v10;
  int v11;
  int v12;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *exception;
  std::string v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v26 = 0;
  v27 = 0;
  p_p = (char *)&__p;
  sub_20EA94AF4(a1, (uint64_t)&__p);
  v5 = HIBYTE(v27);
  v6 = HIBYTE(v27);
  v7 = v26;
  if (v27 >= 0)
    v8 = (char *)&__p + HIBYTE(v27);
  else
    v8 = (char *)__p + v26;
  if (v27 < 0)
    p_p = (char *)__p;
  if (p_p != v8)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v8);
    v5 = HIBYTE(v27);
    v7 = v26;
    v6 = HIBYTE(v27);
  }
  if (v6 < 0)
    v5 = v7;
  switch(v5)
  {
    case 16:
      v9 = __p;
      v19 = (uint64_t *)&__p;
      if (v6 < 0)
        v19 = (uint64_t *)__p;
      v21 = *v19;
      v20 = v19[1];
      if (v21 != 0x6E7572746E61656DLL || v20 != 0x7362616465746163)
        goto LABEL_41;
      *a2 = 2;
      if ((v6 & 0x80) == 0)
        return a1;
      break;
    case 9:
      v9 = __p;
      v14 = (unsigned __int8 *)&__p;
      if (v6 < 0)
        v14 = (unsigned __int8 *)__p;
      v15 = *(_QWORD *)v14;
      v16 = v14[8];
      if (v15 != 0x62616E616964656DLL || v16 != 115)
      {
LABEL_41:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &v24);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      *a2 = 1;
      if ((v6 & 0x80) == 0)
        return a1;
      break;
    case 7:
      v9 = __p;
      v10 = (int *)&__p;
      if (v6 < 0)
        v10 = (int *)__p;
      v11 = *v10;
      v12 = *(int *)((char *)v10 + 3);
      if (v11 != 1851876717 || v12 != 1935827310)
        goto LABEL_41;
      *a2 = 0;
      if (v6 < 0)
        break;
      return a1;
    default:
      goto LABEL_41;
  }
  operator delete(v9);
  return a1;
}

void sub_20F129D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t *sub_20F129D70@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE v29[24];
  int v30;
  void *__dst[2];
  unint64_t v32;
  _BYTE __p[24];
  void **v34;
  void **v35;
  _BYTE *v36;

  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DC7C0;
  strcpy(*(char **)__p, "TriangulationBasedCalibrationChangeDetectorConfig");
  sub_20E8B30B4(a2, (__int128 *)__p, 80, 40);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v28 = nullsub_1(a2);
  v4 = operator new();
  *(_QWORD *)(v4 + 109) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)v4 = &off_24C9F8D60;
  *(_QWORD *)(v4 + 8) = &unk_24C9F8DD8;
  *(_QWORD *)(v4 + 152) = &unk_24C9F8E00;
  *(_QWORD *)(v4 + 168) = 0;
  v5 = (void **)(v4 + 168);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 120) = (char *)off_24C9F8F78 + 1;
  *(_QWORD *)(v4 + 128) = a1;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C9F8F40;
  *(_DWORD *)(v6 + 8) = *a1;
  *(_QWORD *)(v4 + 160) = v6;
  v30 = 0;
  v7 = operator new();
  *(_QWORD *)(v7 + 272) = 0;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)v7 = 0u;
  sub_20E863438(v7);
  *(_QWORD *)__p = v7;
  sub_20E86A980((_QWORD *)(v7 + 16), (uint64_t)off_24C9F8FE0[*a1], *(_QWORD *)&asc_21039C578[8 * *a1]);
  v8 = *(_DWORD *)(v7 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v7 + 112);
    v12 = *(_QWORD *)(v7 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v7 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v7 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v32) = 0;
      v10 = __dst;
      goto LABEL_16;
    }
    v13 = *(const void **)(v7 + 40);
    v9 = *(_QWORD *)(v7 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v32 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_15;
  }
  HIBYTE(v32) = v9;
  v10 = __dst;
  if (v9)
LABEL_15:
    memmove(v10, v13, v9);
LABEL_16:
  *((_BYTE *)v10 + v9) = 0;
  v16 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    **(_QWORD **)__p = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 128);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  *(_QWORD *)__p = v29;
  *(_QWORD *)&__p[8] = __dst;
  *(_QWORD *)&__p[16] = v29;
  v34 = __dst;
  v35 = __dst;
  if (v30 == -1)
    sub_20E877AB8();
  v36 = __p;
  ((void (*)(_BYTE **, _BYTE *))off_24C9F8F98[v30])(&v36, v29);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst[0]);
  if (v30 == -1)
    sub_20E877AB8();
  __dst[0] = &v36;
  ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24C9F8FC8[v30])(__p, __dst, v29);
  if (v30 != -1)
    ((void (*)(void **, _BYTE *))off_24C9F8FB0[v30])(__dst, v29);
  if (*(char *)(v4 + 191) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 184) = *(_QWORD *)&__p[16];
  sub_20E8B2F9C(&v28, "TriangulationBasedCalibrationChangeDetectorConfig.metric", v4, "Metric for depth change.");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)a1 + 1);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.max_average_abs_depth_error", v20, "Deprecated. Use \"TriangulationBasedCalibrationChangeDetectorConfig.max_depth_change\" instead.");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EA9DB90((double *)a1 + 1);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.max_depth_change", v21, "Tolerance for depth change in the stereo forward direction, in meters.");
  *(_QWORD *)__p = nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)a1 + 16);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.depth_error_along_ray", v22, "Calculate depth error along ray instead z-axis.");
  *(_QWORD *)__p = nullsub_1(a2);
  v23 = sub_20EA9DCF0((unsigned int *)a1 + 5);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.angle_per_scene_point_deg", v23, "Resolution of 3D point sampling, in degrees.");
  *(_QWORD *)__p = nullsub_1(a2);
  v24 = sub_20EA9DB90((double *)a1 + 3);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.scene_point_distance", v24, "Distance of 3D point sampling, in meters.");
  *(_QWORD *)__p = nullsub_1(a2);
  v25 = sub_20EA9DB90((double *)a1 + 4);
  sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.half_fov_deg", v25, "Half FoV of cameras.");
  *(_QWORD *)__p = nullsub_1(a2);
  v26 = sub_20EAA14D8((_BYTE *)a1 + 40);
  return sub_20E8B2F9C((uint64_t *)__p, "TriangulationBasedCalibrationChangeDetectorConfig.enable_thermal_model", v26, "Enable thermal model of focal length.");
}

void sub_20F12A2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, int a14, int a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  sub_20E869298(v31);
  _Unwind_Resume(a1);
}

void sub_20F12A3AC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F12A8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F12A9C0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F12A9E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F12AA00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F12AA08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F12AA10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F12AA68(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio8odometry49TriangulationBasedCalibrationChangeDetectorConfig6MetricE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio8odometry49TriangulationBasedCalibrationChangeDetectorConfig6MetricE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_657;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F12AB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F12AB74(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F8D60;
  *(_QWORD *)(a1 + 8) = &unk_24C9F8DD8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F8E00;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F12B214(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F12B214(a1);
}

void sub_20F12ABDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F8D60;
  *(_QWORD *)(a1 + 8) = &unk_24C9F8DD8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F8E00;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F12B214(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F12AC58(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void **v25;
  char *v26;
  void **v27;
  char *v28;
  std::ios_base *v29;
  std::bad_cast_vtbl *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  int v37;
  std::bad_cast v38;
  void *v39;
  std::ios_base v40;
  uint64_t v41;
  int v42;
  _QWORD __sb[8];

  if (*a3 == a3[1])
  {
    v21 = *(_QWORD *)(a1 + 80);
    if (v21)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = *a2;
      *a2 = v22;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v19 = (char *)sub_20E8B850C(a3, 0);
  if (v19[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *(_OWORD *)v19;
    v36 = *((_QWORD *)v19 + 2);
    *(_OWORD *)__p = v20;
  }
  v37 = 0;
  v24 = (char *)HIBYTE(v36);
  v25 = (void **)__p[0];
  v26 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v27 = __p;
  if ((char)v24 >= 0)
  {
    v28 = v24;
  }
  else
  {
    v27 = v25;
    v28 = v26;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v27;
  __sb[3] = v27;
  __sb[4] = &v28[(_QWORD)v27];
  v39 = 0;
  v40.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v38.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v40, __sb);
  v41 = 0;
  v42 = -1;
  v29 = (std::ios_base *)((char *)&v38 + (unint64_t)v38.__vftable[-1].~bad_cast);
  v29->__exceptions_ = 1;
  std::ios_base::clear(v29, v29->__rdstate_);
  v30 = v38.__vftable;
  *(_DWORD *)((char *)&v38 + (unint64_t)v38.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v40.__vftable + (unint64_t)v30[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20F129B28((uint64_t *)&v38, &v37);
  if ((*((_BYTE *)&v40.__precision_ + (unint64_t)v38.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
LABEL_19:
    std::bad_cast::bad_cast(&v38);
    v38.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v39 = &unk_24C9AB9F0;
    v40.__vftable = (std::ios_base_vtbl *)&unk_24C9F8F20;
    sub_20EA9F254((uint64_t)&v38);
  }
  v31 = std::istream::get();
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (v31 != -1)
    goto LABEL_19;
  v32 = v37;
  v33 = operator new();
  *(_QWORD *)v33 = &off_24C9F8F40;
  *(_DWORD *)(v33 + 8) = v32;
  v34 = *a2;
  *a2 = v33;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
}

void sub_20F12AF34(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a14, &a9);
    sub_20EA9ED20(&a14);
  }
  JUMPOUT(0x20F12AF90);
}

void sub_20F12AF40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  std::exception::~exception(&a14);
  JUMPOUT(0x20F12AF50);
}

void sub_20F12AF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F12AF90);
}

void *sub_20F12AFAC()
{
  return &unk_24C9F8F20;
}

uint64_t sub_20F12AFB8(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F12AFC0()
{
  return &unk_24C9F8F20;
}

uint64_t sub_20F12AFCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F8D60;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F8DD8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F8E00;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F12B214(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F12B214(v2);
}

void sub_20F12B03C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F8D60;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F8DD8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F8E00;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F12B214(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F12B0C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F8D60;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F8DD8;
  *(_QWORD *)a1 = &unk_24C9F8E00;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F12B214(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F12B214(v2);
}

void sub_20F12B130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F8D60;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F8DD8;
  *(_QWORD *)a1 = &unk_24C9F8E00;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F12B214(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F12B1B4(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F12B1C0(uint64_t a1)
{
  sub_20F12B214(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F12B1E4(uint64_t a1)
{
  return sub_20F12B214(a1 - 8);
}

void sub_20F12B1EC(uint64_t a1)
{
  sub_20F12B214(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F12B214(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F8E98;
  *(_QWORD *)(a1 + 8) = &unk_24C9F8F08;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F12B2E4()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F12B2F8()
{
  return &unk_24C9F8F20;
}

uint64_t sub_20F12B304(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F8F40;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F12B34C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F8F88;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry49TriangulationBase"
                                      "dCalibrationChangeDetectorConfig6MetricEEPN5boost15program_options11typed_valueIT_"
                                      "cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry49TriangulationBasedCalibrationChangeDetectorConfig6MetricEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F12B3F8(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F12B408@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[3];
  char __p[19];
  char v21;

  v21 = 18;
  strcpy(__p, "VFusion parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (v21 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)(a1 + 3624));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.point_feature_sigma_scale_factor_during_init", v4, "Scale factor of feature sigma during intialization");
  sub_20F0C94C0(a1, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F1697F0(a1 + 480, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 3608));
  sub_20E8B2F9C((uint64_t *)__p, "allow_in_place_pnp_correction", v5, "Allow use of in-bundle map-measurements and p2p to correct estimator state");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 3616));
  sub_20E8B2F9C((uint64_t *)__p, "duration_before_relocalization_is_allowed", v6, "Minimum duration (after start) before relocalization is allowed");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 3632));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.relative_odometry_sigma_scaling", v7, "Scale the relative odometry covariance estimate");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 3609));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.collect_imu_preintegration_in_backend_mapping", v8, "Enable IMU preintegration information");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 3610));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.correct_relative_pose_measurement_after_BA", v9, "Flag to determine whether to correction the relative pose measurement after running BA.");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = operator new();
  *(_QWORD *)v10 = &off_24C9C34F8;
  *(_QWORD *)(v10 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  v18 = (uint64_t)off_24C9F8FF8 + 1;
  v19[0] = a1;
  sub_20EAA8294((uint64_t *)(v10 + 120), &v18);
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.radial_undistortion_scaling_mode", v10, "Radial undistortion scaling method. ");
  if (v18)
  {
    if ((v18 & 1) == 0)
    {
      v11 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v11)
        v11(v19, v19, 2);
    }
    v18 = 0;
  }
  *(_QWORD *)__p = nullsub_1(a2);
  v12 = sub_20F00CF9C((int *)(a1 + 3644));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.camera_lux_type", v12, "Camera lux type.");
  *(_QWORD *)__p = nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 3720));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.time_offset_to_start_imu_intrinsics_estimation_in_sec", v13, "Time offset after initialized and healthy to start IMU intrinsics estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 3728));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.min_angular_vel_sq_to_consider_gyro_valid_in_imu_calibration", v14, "Minimal square value of angular velocity to consider gyro measurements useful in IMU intrinsics estimation, in (rad/sec)^2.");
  *(_QWORD *)__p = nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 3736));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.max_angular_vel_sq_to_consider_gyro_valid_in_imu_calibration", v15, "Maximal square value of angular velocity to consider gyro measurements useful in IMU intrinsics estimation, in (rad/sec)^2.");
  *(_QWORD *)__p = nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 3744));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionConfig.min_time_with_valid_gyro_to_consider_imu_calibration_in_sec", v16, "Minimal time with valid gyro measurements to classify as sufficient motion to enable IMU intrinsics estimation, in seconds.");
  sub_20F09BF50(a1 + 3648, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FD2F41C(a1 + 1216, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F0D14A0(a1 + 2992, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F0CE30C(a1 + 3056, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F11E3C4(a1 + 3120, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20F12B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20F12B908(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F9008;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_13VFusionConfigEE3$_7" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_13VFusionConfigEE3$_7" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20F12B9B4(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)result + 3640) = *a2;
  return result;
}

_QWORD *sub_20F12B9C4@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  _QWORD *result;

  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  v4 = (_BYTE *)(a2 + 4864);
  v5 = (_BYTE *)(a2 + 4600);
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 192) = 2;
  *(_WORD *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 808) = 0;
  v6 = (void *)(a2 + 816);
  v7 = a2 + 840;
  *(_OWORD *)(a2 + 1632) = 0u;
  *(_DWORD *)(a2 + 1648) = 0;
  *(_DWORD *)(a2 + 1672) = 0;
  *(_OWORD *)(v7 + 816) = 0u;
  *(_DWORD *)(a2 + 1696) = 0;
  *(_OWORD *)(a2 + 1680) = 0u;
  *(_DWORD *)(a2 + 1720) = 0;
  *(_OWORD *)(v7 + 864) = 0u;
  *(_DWORD *)(a2 + 1744) = 0;
  *(_OWORD *)(a2 + 1728) = 0u;
  *(_BYTE *)(a2 + 640) = 0;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  bzero(v6, 0x32CuLL);
  *(_DWORD *)(a2 + 1775) = 0;
  *(_QWORD *)(a2 + 1768) = 0;
  *(_OWORD *)(a2 + 1752) = 0u;
  *(_WORD *)(a2 + 1779) = 1;
  *(_BYTE *)(a2 + 1781) = 0;
  *(_QWORD *)(a2 + 3584) = 0;
  *(_OWORD *)(a2 + 3592) = 0u;
  *(_DWORD *)(a2 + 3608) = 3;
  *(_DWORD *)(a2 + 4072) = 0;
  *(_OWORD *)(a2 + 3616) = 0u;
  *(_OWORD *)(a2 + 3632) = 0u;
  *(_OWORD *)(a2 + 3648) = 0u;
  *(_OWORD *)(a2 + 3664) = 0u;
  *(_OWORD *)(a2 + 3680) = 0u;
  *(_OWORD *)(a2 + 3696) = 0u;
  *(_OWORD *)(a2 + 3712) = 0u;
  *(_OWORD *)(a2 + 3728) = 0u;
  *(_OWORD *)(a2 + 3744) = 0u;
  *(_OWORD *)(a2 + 3760) = 0u;
  *(_OWORD *)(a2 + 3776) = 0u;
  *(_OWORD *)(a2 + 3792) = 0u;
  *(_OWORD *)(a2 + 3808) = 0u;
  *(_QWORD *)(a2 + 3824) = 0;
  *(_QWORD *)(a2 + 4096) = 0;
  *(_OWORD *)(a2 + 4080) = 0u;
  *(_DWORD *)(a2 + 4104) = 3;
  *(_DWORD *)(a2 + 4568) = 0;
  *(_OWORD *)(a2 + 4112) = 0u;
  *(_OWORD *)(a2 + 4128) = 0u;
  *(_OWORD *)(a2 + 4144) = 0u;
  *(_OWORD *)(a2 + 4160) = 0u;
  *(_OWORD *)(a2 + 4176) = 0u;
  *(_OWORD *)(a2 + 4192) = 0u;
  *(_OWORD *)(a2 + 4208) = 0u;
  *(_OWORD *)(a2 + 4224) = 0u;
  *(_OWORD *)(a2 + 4240) = 0u;
  *(_OWORD *)(a2 + 4256) = 0u;
  *(_OWORD *)(a2 + 4272) = 0u;
  *(_OWORD *)(a2 + 4288) = 0u;
  *(_OWORD *)(a2 + 4304) = 0u;
  *(_QWORD *)(a2 + 4320) = 0;
  *(_QWORD *)(a2 + 4592) = 0;
  *(_QWORD *)(a2 + 4584) = 0;
  *(_QWORD *)(a2 + 4576) = a2 + 4584;
  *v5 = 0;
  v5[96] = 0;
  *(_QWORD *)(a2 + 4712) = 0;
  *(_QWORD *)(a2 + 4720) = 0;
  *(_QWORD *)(a2 + 4704) = a2 + 4712;
  v5[128] = 0;
  v5[256] = 0;
  *v4 = 0;
  result = (_QWORD *)(a2 + 328);
  v4[144] = 0;
  if ((char **)(a2 + 328) != a1)
    return sub_20E86811C(result, *a1, a1[1], (a1[1] - *a1) >> 3);
  return result;
}

void sub_20F12BBBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F12BBD0(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = (_BYTE *)(a1 + 6968);
  if (*(_BYTE *)(a1 + 10488))
  {
    v3 = *(void **)(a1 + 10464);
    if (v3)
    {
      *(_QWORD *)(a1 + 10472) = v3;
      operator delete(v3);
    }
    v4 = *(_QWORD **)(a1 + 10440);
    if (v4)
    {
      v5 = *(_QWORD **)(a1 + 10448);
      v6 = *(void **)(a1 + 10440);
      if (v5 != v4)
      {
        do
        {
          v5 -= 13;
          sub_20E9905B4(v5);
        }
        while (v5 != v4);
        v6 = *(void **)(a1 + 10440);
      }
      *(_QWORD *)(a1 + 10448) = v4;
      operator delete(v6);
    }
  }
  if (v2[3320])
    sub_20F13D6B4(a1 + 7000);
  v7 = *(_QWORD *)(a1 + 6976);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 6984);
    v9 = *(void **)(a1 + 6976);
    if (v8 == v7)
    {
LABEL_21:
      *(_QWORD *)(a1 + 6984) = v7;
      operator delete(v9);
      goto LABEL_22;
    }
    while (1)
    {
      v12 = v8 - 32;
      v10 = *(_QWORD **)(v8 - 8);
      if ((_QWORD *)(v8 - 32) == v10)
      {
        v10 = (_QWORD *)(v8 - 32);
        v11 = 4;
      }
      else
      {
        if (!v10)
          goto LABEL_16;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
      v8 = v12;
      if (v12 == v7)
      {
        v9 = *(void **)(a1 + 6976);
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (*v2)
    sub_20EB8188C(a1 + 5304);
  v13 = *(_QWORD *)(a1 + 5280);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 5288);
    v15 = *(void **)(a1 + 5280);
    if (v14 != v13)
    {
      do
      {
        v16 = *(_QWORD *)(v14 - 24);
        if (v16)
        {
          v17 = *(_QWORD *)(v14 - 16);
          v18 = *(void **)(v14 - 24);
          if (v17 != v16)
          {
            do
              v17 = sub_20EB8188C(v17 - 1664);
            while (v17 != v16);
            v18 = *(void **)(v14 - 24);
          }
          *(_QWORD *)(v14 - 16) = v16;
          operator delete(v18);
        }
        v14 -= 32;
      }
      while (v14 != v13);
      v15 = *(void **)(a1 + 5280);
    }
    *(_QWORD *)(a1 + 5288) = v13;
    operator delete(v15);
  }
  v19 = *(_QWORD *)(a1 + 4880);
  if (v19)
  {
    v20 = *(_QWORD *)(a1 + 4888);
    v21 = *(void **)(a1 + 4880);
    if (v20 != v19)
    {
      do
      {
        v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = *(void **)(a1 + 4880);
    }
    *(_QWORD *)(a1 + 4888) = v19;
    operator delete(v21);
  }
  v25 = *(_QWORD *)(a1 + 4864);
  *(_QWORD *)(a1 + 4864) = 0;
  if (v25)
  {
    v26 = sub_20F82F448(v25);
    MEMORY[0x212BC6398](v26, 0x10F2C404B28B3FDLL);
  }
  v27 = *(_QWORD *)(a1 + 4856);
  *(_QWORD *)(a1 + 4856) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a1 + 4848);
  *(_QWORD *)(a1 + 4848) = 0;
  if (v28)
  {
    v29 = sub_20F16A418(v28);
    MEMORY[0x212BC6398](v29, 0x10B2C407924BFFFLL);
  }
  v30 = *(_QWORD *)(a1 + 4824);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 4832);
    v32 = *(void **)(a1 + 4824);
    if (v31 != v30)
    {
      do
      {
        v33 = *(_QWORD *)(v31 - 24);
        if (v33)
        {
          v34 = *(_QWORD *)(v31 - 16);
          v35 = *(void **)(v31 - 24);
          if (v34 != v33)
          {
            do
              v34 = sub_20EB8188C(v34 - 1664);
            while (v34 != v33);
            v35 = *(void **)(v31 - 24);
          }
          *(_QWORD *)(v31 - 16) = v33;
          operator delete(v35);
        }
        v31 -= 32;
      }
      while (v31 != v30);
      v32 = *(void **)(a1 + 4824);
    }
    *(_QWORD *)(a1 + 4832) = v30;
    operator delete(v32);
  }
  v36 = *(_QWORD *)(a1 + 4800);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 4808);
    v38 = *(void **)(a1 + 4800);
    if (v37 == v36)
    {
LABEL_73:
      *(_QWORD *)(a1 + 4808) = v36;
      operator delete(v38);
      goto LABEL_74;
    }
    while (1)
    {
      v41 = v37 - 32;
      v39 = *(_QWORD **)(v37 - 8);
      if ((_QWORD *)(v37 - 32) == v39)
      {
        v39 = (_QWORD *)(v37 - 32);
        v40 = 4;
      }
      else
      {
        if (!v39)
          goto LABEL_68;
        v40 = 5;
      }
      (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_68:
      v37 = v41;
      if (v41 == v36)
      {
        v38 = *(void **)(a1 + 4800);
        goto LABEL_73;
      }
    }
  }
LABEL_74:
  v42 = *(_QWORD *)(a1 + 4792);
  *(_QWORD *)(a1 + 4792) = 0;
  if (v42)
    MEMORY[0x212BC6398](v42, 0x1000C40AADEC2D0);
  sub_20F13CE48((_QWORD *)(a1 + 3768));
  sub_20E869D64(a1 + 1224);
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  sub_20E869EA0(a1 + 8);
  return a1;
}

uint64_t sub_20F12BF38(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(_QWORD **)(a1 + 8);
      v5 = *(_QWORD **)a1;
      if (v4 != v3)
      {
        do
        {
          v4 -= 13;
          sub_20E9905B4(v4);
        }
        while (v4 != v3);
        v5 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void **sub_20F12BFB0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t *sub_20F12C03C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F82F448(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C404B28B3FDLL);
  }
  return a1;
}

uint64_t *sub_20F12C080(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F16A418(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C407924BFFFLL);
  }
  return a1;
}

uint64_t sub_20F12C0C4(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int *v12;
  int *v13;
  std::logic_error *exception;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v16;
  int64x2_t v17;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _QWORD *v33;
  BOOL v34;
  int *v35;
  int *v36;
  uint64_t *v37;
  unsigned __int8 v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char v63;
  double v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  float64x2_t *v103;
  void **v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  double v123;
  double v124;
  double v125;
  int v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _BYTE *v130;
  __int128 v131;
  _OWORD *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *p_shared_owners;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  __int128 v146;
  __int128 v147;
  _BYTE *v149;
  int **v150;
  uint64_t v151;
  uint64_t v152;
  int64x2_t v153;
  double v154;
  float64x2_t v155;
  _BYTE v156[48];
  double v157;
  float64x2_t v158;
  uint64_t v159;
  _BYTE v160[72];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 __p;
  _BYTE v165[288];
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  _QWORD v219[84];
  __int128 v220;
  uint64_t v221;
  _BYTE v222[648];
  _BYTE v223[664];
  __int128 v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)a1 = 256;
  *(_BYTE *)(a1 + 2) = 0;
  sub_20E86B4E8(a1 + 8, a3);
  *(_BYTE *)(a1 + 3760) = a4;
  v151 = a3;
  sub_20F1163CC(a1 + 3768, (const void *)(a3 + 3120));
  *(_OWORD *)(a1 + 4840) = 0u;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4808) = 0u;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_QWORD *)(a1 + 4872) = a6;
  *(_QWORD *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 4888) = 0;
  *(_QWORD *)(a1 + 4880) = 0;
  *(_QWORD *)(a1 + 4904) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 4912) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 4920) = 0;
  *(_BYTE *)(a1 + 4928) = 0;
  *(_BYTE *)(a1 + 4944) = 0;
  *(_QWORD *)(a1 + 4952) = 0;
  v12 = (int *)*a2;
  v13 = (int *)a2[1];
  if ((int *)*a2 != v13)
  {
    while (*v12)
    {
      v12 += 272;
      if (v12 == v13)
        goto LABEL_4;
    }
  }
  if (v12 == v13)
  {
LABEL_4:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested camera id not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *(_QWORD *)(a1 + 4960) = *((_QWORD *)v12 + 49);
  *(_QWORD *)(a1 + 4968) = 0x3F70FF972474538FLL;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = a2[10];
  v17 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 4976) = v17;
  *(int64x2_t *)(a1 + 4992) = v17;
  *(int64x2_t *)(a1 + 5008) = v17;
  *(_OWORD *)(a1 + 5024) = xmmword_2102DB700;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 5040) = _Q1;
  *(_QWORD *)(a1 + 5056) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5072) = 0;
  *(_QWORD *)(a1 + 5080) = 0;
  *(_QWORD *)(a1 + 5064) = 0;
  *(_OWORD *)(a1 + 5088) = _Q1;
  *(_QWORD *)(a1 + 5104) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_QWORD *)(a1 + 5192) = 0;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_QWORD *)(a1 + 5136) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5168) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_QWORD *)(a1 + 5264) = 0;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_OWORD *)(a1 + 5200) = _Q1;
  *(_QWORD *)(a1 + 5240) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5272) = 0x3FF0000000000000;
  v23 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 4992) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 4976) = v23;
  v24 = *(_OWORD *)(a2 + 7);
  *(_QWORD *)(a1 + 5024) = a2[9];
  *(_OWORD *)(a1 + 5008) = v24;
  *(_QWORD *)(a1 + 5032) = v16;
  sub_20EB842DC(a1 + 4976, (float64x2_t *)(a2 + 69));
  v25 = *((_OWORD *)a2 + 39);
  *(_QWORD *)(a1 + 5104) = a2[80];
  *(_OWORD *)(a1 + 5088) = v25;
  v26 = *(_OWORD *)(a2 + 81);
  *(_QWORD *)(a1 + 5056) = a2[83];
  *(_OWORD *)(a1 + 5040) = v26;
  v27 = *((_OWORD *)a2 + 42);
  *(_QWORD *)(a1 + 5128) = a2[86];
  *(_OWORD *)(a1 + 5112) = v27;
  v28 = *(_OWORD *)(a2 + 87);
  *(_QWORD *)(a1 + 5080) = a2[89];
  *(_OWORD *)(a1 + 5064) = v28;
  v29 = sub_210219C18();
  *(double *)v160 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)v156, (uint64_t)v29, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)v160);
  sub_20EA89240(a2, *(unsigned __int8 *)(a3 + 3640), a1 + 5280, *(double *)(a3 + 560));
  v150 = (int **)a2;
  *(_BYTE *)(a1 + 5304) = 0;
  *(_BYTE *)(a1 + 6968) = 0;
  v30 = a1 + 10168;
  *(_BYTE *)(a1 + 10288) = 0;
  *(_BYTE *)(a1 + 10296) = 0;
  v149 = (_BYTE *)(a1 + 7000);
  *(_BYTE *)(a1 + 10432) = 0;
  *(_BYTE *)(a1 + 10440) = 0;
  *(_BYTE *)(a1 + 10488) = 0;
  *(_BYTE *)(a1 + 10496) = 0;
  *(_BYTE *)(a1 + 10592) = 0;
  *(_BYTE *)(a1 + 10600) = 0;
  *(_BYTE *)(a1 + 10696) = 0;
  *(_QWORD *)(a1 + 6976) = 0;
  *(_QWORD *)(a1 + 6992) = 0;
  *(_QWORD *)(a1 + 6984) = 0;
  *(_BYTE *)(a1 + 7000) = 0;
  *(_QWORD *)(a1 + 10704) = 0;
  *(_QWORD *)(a1 + 10720) = 0;
  v31 = *(_QWORD *)(a1 + 4976) & 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 10728) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 10744) = a5;
  v32 = v31 < 0x7FF0000000000000;
  *(_QWORD *)(a1 + 10712) = 0;
  if (v31 <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v32 = (*(_QWORD *)(a1 + 4984) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 4984) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v32 = (*(_QWORD *)(a1 + 4992) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 4992) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v32 = (*(_QWORD *)(a1 + 5000) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    }
  }
  v33 = (_QWORD *)(a1 + 5008);
  if (!v32)
    goto LABEL_15;
  v34 = (*v33 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v34 = (*(_QWORD *)(a1 + 5016) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 5016) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v34 = (*(_QWORD *)(a1 + 5024) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v34)
  {
LABEL_15:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 122, (uint64_t)"default_inertial_model_.validate()", 34, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_132;
    }
  }
  v36 = (int *)*a2;
  v35 = (int *)a2[1];
  if (v35 != *v150)
  {
    v152 = a1 + 5304;
    while (1)
    {
LABEL_22:
      v37 = sub_210219C18();
      v38 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_41;
      v40 = *v36;
      v41 = *((_QWORD *)v36 + 50);
      v42 = *((_QWORD *)v36 + 116);
      *(_DWORD *)v160 = 67109632;
      *(_DWORD *)&v160[4] = v40;
      *(_WORD *)&v160[8] = 2048;
      *(_QWORD *)&v160[10] = v41;
      *(_WORD *)&v160[18] = 2048;
      *(_QWORD *)&v160[20] = v42;
      v43 = (char *)_os_log_send_and_compose_impl();
      v44 = strlen(v43);
      *(_QWORD *)v156 = 0;
      pthread_threadid_np(0, (__uint64_t *)v156);
      v45 = *(_QWORD *)v156;
      timespec_get((timespec *)v156, 1);
      sub_210219E20(v160, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v37 + 1), (__int128 *)(v37 + 5), "Camera readout time info: ID: [%02u]. Primary: %f, Secondary: %f", 0x40uLL, v43, v44, v45, v156);
      std::mutex::lock(&stru_254A5A410);
      v46 = qword_254A5A458;
      for (i = unk_254A5A460; v46 != i; v46 += 40)
      {
        v48 = *(_QWORD *)(v46 + 32);
        if (!v48)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v48 + 48))(v48, v160);
      }
      std::mutex::unlock(&stru_254A5A410);
      if ((v165[7] & 0x80000000) != 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v163) < 0)
        {
LABEL_32:
          operator delete(*((void **)&v162 + 1));
          if (!(_BYTE)v162)
            goto LABEL_35;
          goto LABEL_33;
        }
      }
      else if (SHIBYTE(v163) < 0)
      {
        goto LABEL_32;
      }
      if (!(_BYTE)v162)
        goto LABEL_35;
LABEL_33:
      if (SHIBYTE(v161) < 0)
        operator delete(*(void **)&v160[64]);
LABEL_35:
      if (v160[56] && (v160[55] & 0x80000000) != 0)
        operator delete(*(void **)&v160[32]);
      if ((v160[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v160[8]);
        if (!v43)
          goto LABEL_41;
LABEL_40:
        free(v43);
        goto LABEL_41;
      }
      if (v43)
        goto LABEL_40;
LABEL_41:
      if (os_signpost_enabled((os_log_t)*v37))
      {
        v49 = *v36;
        v50 = *((_QWORD *)v36 + 50);
        v51 = *((_QWORD *)v36 + 116);
        *(_DWORD *)v160 = 67109632;
        *(_DWORD *)&v160[4] = v49;
        *(_WORD *)&v160[8] = 2048;
        *(_QWORD *)&v160[10] = v50;
        *(_WORD *)&v160[18] = 2048;
        *(_QWORD *)&v160[20] = v51;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v36 += 272;
      v30 = a1 + 10168;
      if (v36 == v35)
        goto LABEL_47;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 123, (uint64_t)"hardware_params.num_cameras() > 0", 33, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_132:
    abort();
  }
  v36 = *v150;
  v35 = v150[1];
  v152 = a1 + 5304;
  if (*v150 != v35)
    goto LABEL_22;
LABEL_47:
  v52 = *(_QWORD *)(a1 + 5280);
  v53 = *(_BYTE *)(a1 + 1120);
  v54 = *(_OWORD *)(a1 + 1138);
  *(_OWORD *)v156 = *(_OWORD *)(a1 + 1122);
  *(_OWORD *)&v156[16] = v54;
  *(_QWORD *)&v156[30] = *(_QWORD *)(a1 + 1152);
  *(_OWORD *)v160 = *(_OWORD *)(a1 + 1176);
  v55 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v160[16] = *(_OWORD *)(a1 + 1192);
  *(_OWORD *)&v160[32] = v55;
  v56 = *(_QWORD *)(v52 + 8);
  if (*(_BYTE *)(v56 + 1536))
    v57 = v56 + 96;
  else
    v57 = 0;
  v58 = *(_DWORD *)(v57 + 992);
  if (v58 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_68;
    }
    v58 = *(_DWORD *)(v57 + 992);
  }
  if (!v58)
    goto LABEL_67;
  if (*(double *)v57 == 0.0)
    v59 = 1.0;
  else
    v59 = 1.0 / *(double *)v57;
  v60 = *(_QWORD *)(v52 + 8);
  if (*(_BYTE *)(v60 + 1536))
    v61 = v60 + 96;
  else
    v61 = 0;
  v62 = *(_DWORD *)(v61 + 992);
  if (v62 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_68;
    }
    v62 = *(_DWORD *)(v61 + 992);
    if (v62 > 3)
      goto LABEL_71;
  }
  else if (v62 > 3)
  {
    goto LABEL_71;
  }
  if (v62 > 1)
  {
    if (v62 == 2)
    {
      v63 = 0;
      goto LABEL_72;
    }
  }
  else if (!v62)
  {
LABEL_67:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21028E871, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_68:
    abort();
  }
LABEL_71:
  v63 = 1;
LABEL_72:
  _D3 = *(_QWORD *)(a1 + 5016);
  __asm { FMLA            D2, D3, V1.D[1] }
  v66 = sqrt(_D2 + *(double *)(a1 + 5024) * *(double *)(a1 + 5024));
  *(_BYTE *)(a1 + 1120) = v53;
  *(_BYTE *)(a1 + 1121) = v63;
  v67 = *(_OWORD *)&v156[16];
  *(_OWORD *)(a1 + 1122) = *(_OWORD *)v156;
  *(_OWORD *)(a1 + 1138) = v67;
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)&v156[30];
  *(double *)(a1 + 1160) = v66;
  *(double *)(a1 + 1168) = v59;
  v68 = *(_OWORD *)&v160[16];
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)v160;
  *(_OWORD *)(a1 + 1192) = v68;
  *(_OWORD *)(a1 + 1201) = *(_OWORD *)&v160[25];
  v69 = v151;
  sub_20F8190D8((uint64_t)v160, *(_DWORD *)(v151 + 2168));
  v70 = v152;
  if (*(_BYTE *)(v30 + 120))
  {
    sub_20F13CED8((uint64_t)v149, (uint64_t)v160);
    v71 = *(void **)v30;
    if (*(_QWORD *)v30)
    {
      v72 = *(void **)(a1 + 10176);
      v73 = *(void **)v30;
      if (v72 != v71)
      {
        v74 = (uint64_t)v72 - 2736;
        do
        {
          if (*(_BYTE *)(v74 + 72))
          {
            v76 = *(void **)v74;
            if (*(_QWORD *)v74)
            {
              *(_QWORD *)(v74 + 8) = v76;
              operator delete(v76);
            }
          }
          v75 = (void *)(v74 - 424);
          v74 -= 3160;
        }
        while (v75 != v71);
        v73 = *(void **)v30;
      }
      *(_QWORD *)(a1 + 10176) = v71;
      operator delete(v73);
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
    }
    *(_OWORD *)v30 = v224;
    v104 = (void **)(v30 + 48);
    *(_QWORD *)(a1 + 10184) = v225;
    v225 = 0;
    v105 = 0uLL;
    v224 = 0u;
    v106 = v226;
    v226 = 0u;
    *(_OWORD *)(a1 + 10192) = v106;
    v107 = v227;
    v227 = 0;
    *(_QWORD *)(a1 + 10208) = v107;
    v108 = *(_QWORD *)(a1 + 10216);
    if (v108)
    {
      v109 = *(_QWORD *)(a1 + 10224);
      v110 = *(void **)(a1 + 10216);
      if (v109 != v108)
      {
        v111 = v109 - 2736;
        do
        {
          if (*(_BYTE *)(v111 + 72))
          {
            v113 = *(void **)v111;
            if (*(_QWORD *)v111)
            {
              *(_QWORD *)(v111 + 8) = v113;
              operator delete(v113);
            }
          }
          v112 = v111 - 424;
          v111 -= 3160;
        }
        while (v112 != v108);
        v110 = *v104;
        v69 = v151;
      }
      *(_QWORD *)(a1 + 10224) = v108;
      operator delete(v110);
      *v104 = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_QWORD *)(v30 + 64) = 0;
      v105 = 0uLL;
    }
    *(_OWORD *)(v30 + 48) = v228;
    *(_QWORD *)(a1 + 10232) = v229;
    v229 = 0;
    v228 = v105;
    v114 = v230;
    v230 = v105;
    *(_OWORD *)(a1 + 10240) = v114;
    v115 = v231;
    v231 = 0;
    *(_QWORD *)(a1 + 10256) = v115;
    v116 = (void **)(v30 + 96);
    v117 = *(_QWORD *)(a1 + 10264);
    v70 = v152;
    v103 = (float64x2_t *)v150;
    if (v117)
    {
      v118 = *(_QWORD *)(a1 + 10272);
      v119 = *(void **)(a1 + 10264);
      if (v118 != v117)
      {
        v120 = v118 - 2736;
        do
        {
          if (*(_BYTE *)(v120 + 72))
          {
            v122 = *(void **)v120;
            if (*(_QWORD *)v120)
            {
              *(_QWORD *)(v120 + 8) = v122;
              operator delete(v122);
            }
          }
          v121 = v120 - 424;
          v120 -= 3160;
        }
        while (v121 != v117);
        v119 = *v116;
        v70 = v152;
      }
      *(_QWORD *)(a1 + 10272) = v117;
      operator delete(v119);
      *v116 = 0;
      *(_QWORD *)(v30 + 104) = 0;
      *(_QWORD *)(v30 + 112) = 0;
    }
    *(_OWORD *)v116 = v232;
    *(_QWORD *)(a1 + 10280) = v233;
    v233 = 0;
    v232 = 0u;
    sub_20F13D6B4((uint64_t)v160);
    if (*((_BYTE *)v150 + 1136))
      goto LABEL_109;
  }
  else
  {
    *v149 = 0;
    *(_BYTE *)(a1 + 10160) = 0;
    if (v223[656])
    {
      *(_QWORD *)(a1 + 7000) = *(_QWORD *)v160;
      *(_OWORD *)(a1 + 7072) = v161;
      *(_OWORD *)(a1 + 7088) = v162;
      *(_OWORD *)(a1 + 7104) = v163;
      *(_OWORD *)(a1 + 7120) = __p;
      *(_OWORD *)(a1 + 7008) = *(_OWORD *)&v160[8];
      *(_OWORD *)(a1 + 7024) = *(_OWORD *)&v160[24];
      *(_OWORD *)(a1 + 7040) = *(_OWORD *)&v160[40];
      *(_OWORD *)(a1 + 7056) = *(_OWORD *)&v160[56];
      memcpy((void *)(a1 + 7136), v165, 0x120uLL);
      *(_BYTE *)(a1 + 7424) = 0;
      *(_BYTE *)(a1 + 7496) = 0;
      if (v172)
      {
        v77 = v169;
        *(_QWORD *)(a1 + 7440) = v167;
        *(_OWORD *)(a1 + 7448) = v168;
        *(_OWORD *)(a1 + 7424) = v166;
        v167 = 0;
        v166 = 0uLL;
        *(_QWORD *)(a1 + 7464) = v77;
        *(_QWORD *)(a1 + 7488) = v171;
        *(_OWORD *)(a1 + 7472) = v170;
        *(_BYTE *)(a1 + 7496) = 1;
      }
      *(_BYTE *)(a1 + 7504) = 0;
      *(_BYTE *)(a1 + 10152) = 0;
      if (v223[648])
      {
        *(_QWORD *)(a1 + 7520) = v174;
        *(_OWORD *)(a1 + 7504) = v173;
        *(_QWORD *)(a1 + 7544) = v176;
        *(_OWORD *)(a1 + 7528) = v175;
        v78 = v178;
        *(_OWORD *)(a1 + 7552) = v177;
        *(_OWORD *)(a1 + 7568) = v78;
        *(_QWORD *)(a1 + 7648) = v183;
        v79 = v181;
        *(_OWORD *)(a1 + 7632) = v182;
        *(_OWORD *)(a1 + 7616) = v79;
        v80 = v179;
        *(_OWORD *)(a1 + 7600) = v180;
        *(_OWORD *)(a1 + 7584) = v80;
        v81 = v187;
        *(_OWORD *)(a1 + 7688) = v186;
        *(_OWORD *)(a1 + 7704) = v81;
        *(_QWORD *)(a1 + 7720) = v188;
        v82 = v185;
        *(_OWORD *)(a1 + 7656) = v184;
        *(_OWORD *)(a1 + 7672) = v82;
        v83 = v189;
        *(_OWORD *)(a1 + 7744) = v190;
        v84 = v192;
        *(_OWORD *)(a1 + 7760) = v191;
        *(_OWORD *)(a1 + 7776) = v84;
        *(_QWORD *)(a1 + 7792) = v193;
        *(_OWORD *)(a1 + 7728) = v83;
        *(_QWORD *)(a1 + 7864) = v198;
        v85 = v197;
        *(_OWORD *)(a1 + 7832) = v196;
        *(_OWORD *)(a1 + 7848) = v85;
        v86 = v195;
        *(_OWORD *)(a1 + 7800) = v194;
        *(_OWORD *)(a1 + 7816) = v86;
        v87 = v200;
        *(_OWORD *)(a1 + 7872) = v199;
        *(_QWORD *)(a1 + 7936) = v203;
        v88 = v201;
        *(_OWORD *)(a1 + 7920) = v202;
        *(_OWORD *)(a1 + 7904) = v88;
        *(_OWORD *)(a1 + 7888) = v87;
        v89 = v204;
        v90 = v205;
        v91 = v206;
        v92 = v207;
        *(_QWORD *)(a1 + 8008) = v208;
        *(_OWORD *)(a1 + 7976) = v91;
        *(_OWORD *)(a1 + 7992) = v92;
        *(_OWORD *)(a1 + 7944) = v89;
        *(_OWORD *)(a1 + 7960) = v90;
        v93 = v210;
        *(_OWORD *)(a1 + 8016) = v209;
        v94 = v211;
        v95 = v212;
        *(_QWORD *)(a1 + 8080) = v213;
        *(_OWORD *)(a1 + 8064) = v95;
        *(_OWORD *)(a1 + 8048) = v94;
        *(_OWORD *)(a1 + 8032) = v93;
        *(_OWORD *)(a1 + 8088) = v214;
        v96 = v215;
        v97 = v216;
        v98 = v217;
        *(_QWORD *)(a1 + 8152) = v218;
        *(_OWORD *)(a1 + 8136) = v98;
        *(_OWORD *)(a1 + 8120) = v97;
        *(_OWORD *)(a1 + 8104) = v96;
        memcpy((void *)(a1 + 8160), v219, 0x288uLL);
        *(_OWORD *)(a1 + 8808) = *(_OWORD *)&v219[81];
        v69 = v151;
        *(_QWORD *)(a1 + 8824) = v219[83];
        *(_OWORD *)(a1 + 8832) = v220;
        *(_QWORD *)(a1 + 8848) = v221;
        memcpy((void *)(a1 + 8856), v222, 0x288uLL);
        memcpy((void *)(a1 + 9504), v223, 0x288uLL);
        *(_BYTE *)(a1 + 10152) = 1;
      }
      *(_BYTE *)(a1 + 10160) = 1;
      v70 = v152;
    }
    *(_OWORD *)v30 = v224;
    *(_QWORD *)(a1 + 10184) = v225;
    v225 = 0;
    v224 = 0u;
    v99 = v226;
    v226 = 0u;
    *(_OWORD *)(a1 + 10192) = v99;
    v100 = v227;
    v227 = 0;
    *(_QWORD *)(a1 + 10208) = v100;
    *(_OWORD *)(v30 + 48) = v228;
    *(_QWORD *)(a1 + 10232) = v229;
    v228 = 0u;
    v229 = 0;
    v101 = v230;
    v230 = 0u;
    *(_OWORD *)(a1 + 10240) = v101;
    v102 = v231;
    v231 = 0;
    *(_QWORD *)(a1 + 10256) = v102;
    *(_OWORD *)(v30 + 96) = v232;
    *(_QWORD *)(a1 + 10280) = v233;
    v232 = 0u;
    v233 = 0;
    *(_BYTE *)(v30 + 120) = 1;
    v103 = (float64x2_t *)v150;
    sub_20F13D6B4((uint64_t)v160);
    if (*((_BYTE *)v150 + 1136))
    {
LABEL_109:
      sub_20E96E2C8((uint64_t)&v103[45].f64[1], &v159);
      *(float64_t *)v156 = v103[63].f64[1];
      *(float64_t *)&v156[24] = v103[65].f64[1];
      v157 = v103[67].f64[1];
      v123 = v103[65].f64[0];
      v124 = v103[67].f64[0];
      v125 = v103[69].f64[0];
      v154 = -(*(double *)v156 * v123 + *(double *)&v156[24] * v124 + v157 * v125);
      *(float64x2_t *)&v156[8] = v103[64];
      *(float64x2_t *)&v156[32] = v103[66];
      v158 = v103[68];
      v155 = vnegq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v156[8], v123), vmulq_n_f64(*(float64x2_t *)&v156[32], v124)), vmulq_n_f64(v158, v125)));
      v153 = 0uLL;
      sub_20EB819DC((uint64_t)v160, (uint64_t)v156, &v154, v159, 0, &v153, 0.0, 0.0);
      v126 = *(unsigned __int8 *)(v70 + 1664);
      v127 = *(_OWORD *)&v160[16];
      v128 = *(_OWORD *)&v160[48];
      *(_OWORD *)(v70 + 32) = *(_OWORD *)&v160[32];
      *(_OWORD *)(v70 + 48) = v128;
      v129 = v162;
      *(_QWORD *)(v70 + 64) = *(_QWORD *)&v160[64];
      *(_OWORD *)v70 = *(_OWORD *)v160;
      *(_OWORD *)(v70 + 16) = v127;
      v130 = (_BYTE *)(a1 + 5400);
      v131 = v161;
      *(_QWORD *)(a1 + 5392) = v129;
      v132 = (_OWORD *)(a1 + 6848);
      *(_OWORD *)(a1 + 5376) = v131;
      if (v126)
      {
        sub_20EB84848((uint64_t)v130, (uint64_t)&v162 + 8);
        *v132 = *(_OWORD *)&v219[48];
        *(_QWORD *)(a1 + 6864) = v219[50];
        v133 = *(_OWORD *)&v219[51];
        v219[51] = 0;
        v219[52] = 0;
        v134 = *(std::__shared_weak_count **)(a1 + 6880);
        *(_OWORD *)(v152 + 1568) = v133;
        if (v134)
        {
          p_shared_owners = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldaxr(p_shared_owners);
          while (__stlxr(v136 - 1, p_shared_owners));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        *(_OWORD *)(a1 + 6904) = *(_OWORD *)&v219[55];
        *(_OWORD *)(a1 + 6920) = *(_OWORD *)&v219[57];
        *(_OWORD *)(a1 + 6936) = *(_OWORD *)&v219[59];
        *(_OWORD *)(a1 + 6888) = *(_OWORD *)&v219[53];
        *(_OWORD *)(a1 + 6945) = *(_OWORD *)((char *)&v219[60] + 1);
        sub_20EB8188C((uint64_t)v160);
        v137 = (std::__shared_weak_count *)v153.i64[1];
        if (!v153.i64[1])
          goto LABEL_122;
      }
      else
      {
        sub_20E972C70(v130, (uint64_t)&v162 + 8);
        *v132 = *(_OWORD *)&v219[48];
        *(_QWORD *)(a1 + 6864) = v219[50];
        *(_OWORD *)(v152 + 1568) = *(_OWORD *)&v219[51];
        v219[51] = 0;
        v219[52] = 0;
        *(_OWORD *)(a1 + 6904) = *(_OWORD *)&v219[55];
        *(_OWORD *)(a1 + 6920) = *(_OWORD *)&v219[57];
        *(_OWORD *)(a1 + 6936) = *(_OWORD *)&v219[59];
        *(_OWORD *)(a1 + 6888) = *(_OWORD *)&v219[53];
        *(_OWORD *)(a1 + 6945) = *(_OWORD *)((char *)&v219[60] + 1);
        *(_BYTE *)(v152 + 1664) = 1;
        sub_20EB8188C((uint64_t)v160);
        v137 = (std::__shared_weak_count *)v153.i64[1];
        if (!v153.i64[1])
        {
LABEL_122:
          if (LOBYTE(v103[70].f64[0]))
            *(float64_t *)(a1 + 4968) = v103[69].f64[1];
          v140 = v159;
          v159 = 0;
          if (v140)
            sub_20E8E931C((uint64_t)&v159, v140);
          goto LABEL_126;
        }
      }
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
      goto LABEL_122;
    }
  }
LABEL_126:
  v141 = *(unsigned __int8 *)(a1 + 10592);
  v142 = *(_OWORD *)(v69 + 3072);
  v143 = *(_OWORD *)(v69 + 3104);
  v144 = *(_OWORD *)(v69 + 3056);
  *(_OWORD *)(a1 + 10528) = *(_OWORD *)(v69 + 3088);
  *(_OWORD *)(a1 + 10544) = v143;
  *(_OWORD *)(a1 + 10496) = v144;
  *(_OWORD *)(a1 + 10512) = v142;
  *(_WORD *)(a1 + 10560) = 0;
  *(_QWORD *)(a1 + 10568) = 0;
  *(_BYTE *)(a1 + 10576) = 0;
  *(_BYTE *)(a1 + 10584) = 0;
  if (!v141)
    *(_BYTE *)(a1 + 10592) = 1;
  v145 = *(unsigned __int8 *)(a1 + 10696);
  v146 = *(_OWORD *)(v69 + 3552);
  v147 = *(_OWORD *)(v69 + 3568);
  *(_QWORD *)(a1 + 10600) = *(_QWORD *)(v69 + 3544);
  *(_OWORD *)(a1 + 10608) = v146;
  *(_OWORD *)(a1 + 10624) = v147;
  *(_QWORD *)(a1 + 10640) = 0x500000014;
  *(_QWORD *)(a1 + 10648) = 0x4014000000000000;
  *(_QWORD *)(a1 + 10656) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 10664) = 0;
  *(_QWORD *)(a1 + 10672) = 0;
  *(_BYTE *)(a1 + 10680) = 0;
  *(_BYTE *)(a1 + 10688) = 0;
  if (!v145)
    *(_BYTE *)(a1 + 10696) = 1;
  sub_20F04F4F0((void **)(a1 + 4824), *(uint64_t **)(a1 + 5280), *(uint64_t **)(a1 + 5288), (uint64_t)(*(_QWORD *)(a1 + 5288) - *(_QWORD *)(a1 + 5280)) >> 5);
  sub_20F12D510(a1, 1, 0);
  return a1;
}

void sub_20F12D304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t *a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_20EB8188C((uint64_t)&a45);
  sub_20E86665C((uint64_t)&a30);
  v47 = a44;
  a44 = 0;
  if (v47)
    sub_20E8E931C((uint64_t)&a44, v47);
  sub_20F12BF38(a21);
  if (*(_BYTE *)(a26 + 120))
  {
    sub_20F13D6B4(a20);
    sub_20F12BFB0(a13);
    if (!*(_BYTE *)(a25 + 1664))
    {
LABEL_6:
      sub_20EA896D4(a14);
      sub_20E8C3144((void **)(v45 + 4880));
      sub_20F12C03C((uint64_t *)(v45 + 4864));
      v48 = *(_QWORD *)(v45 + 4856);
      *(_QWORD *)(v45 + 4856) = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      sub_20F12C080((uint64_t *)(v45 + 4848));
      sub_20EA896D4(a22);
      sub_20F12BFB0((void **)(v45 + 4800));
      v49 = *a16;
      *a16 = 0;
      if (v49)
        MEMORY[0x212BC6398](v49, 0x1000C40AADEC2D0);
      sub_20F13CE48(a17);
      sub_20EE81A64(a15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_20F12BFB0(a13);
    if (!*(_BYTE *)(a25 + 1664))
      goto LABEL_6;
  }
  sub_20EB8188C(a25);
  goto LABEL_6;
}

void sub_20F12D510(uint64_t a1, char a2, int a3)
{
  char v3;
  uint64_t v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  uint64_t *v97;
  _QWORD *v98;
  _BYTE *v99;
  _BYTE __src[488];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 __p;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unsigned __int8 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[23];
  void *v146;
  uint64_t v147;
  char *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[23];
  uint64_t v159;

  v3 = a3;
  v159 = *MEMORY[0x24BDAC8D0];
  if (a3
    && *(_BYTE *)(a1 + 1043)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 376, (uint64_t)"!immediate_vision_only_pose_initialization || !IsUsingIMU()", 59, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_WORD *)a1 = 256;
  *(_BYTE *)(a1 + 2) = 0;
  v6 = *(_QWORD *)(a1 + 4880);
  for (i = *(_QWORD *)(a1 + 4888); i != v6; i -= 16)
  {
    v8 = *(std::__shared_weak_count **)(i - 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  *(_QWORD *)(a1 + 4888) = v6;
  *(_BYTE *)(a1 + 4920) = 0;
  if (*(_BYTE *)(a1 + 4944))
    *(_BYTE *)(a1 + 4944) = 0;
  if (*(_BYTE *)(a1 + 10488))
  {
    v11 = *(void **)(a1 + 10464);
    if (v11)
    {
      *(_QWORD *)(a1 + 10472) = v11;
      operator delete(v11);
    }
    v12 = *(_QWORD **)(a1 + 10440);
    if (v12)
    {
      v13 = *(_QWORD **)(a1 + 10448);
      v14 = *(void **)(a1 + 10440);
      if (v13 != v12)
      {
        do
        {
          v13 -= 13;
          sub_20E9905B4(v13);
        }
        while (v13 != v12);
        v14 = *(void **)(a1 + 10440);
      }
      *(_QWORD *)(a1 + 10448) = v12;
      operator delete(v14);
    }
    *(_BYTE *)(a1 + 10488) = 0;
  }
  sub_20F04F4F0((void **)(a1 + 4824), *(uint64_t **)(a1 + 5280), *(uint64_t **)(a1 + 5288), (uint64_t)(*(_QWORD *)(a1 + 5288) - *(_QWORD *)(a1 + 5280)) >> 5);
  v98 = (_QWORD *)(a1 + 4584);
  v99 = (_BYTE *)(a1 + 10288);
  v96 = v3;
  v97 = (uint64_t *)(a1 + 4824);
  if (!*(_BYTE *)(a1 + 3600)
    || (a2 & 1) != 0
    || (v15 = *(_QWORD *)(a1 + 4864)) == 0
    || (v16 = *(_QWORD *)(v15 + 2288), v16 == *(_QWORD *)(v15 + 2280)))
  {
    v94 = 0;
    v95 = 1;
  }
  else
  {
    v17 = *(_OWORD *)(v16 - 23);
    v157 = *(_OWORD *)(v16 - 39);
    *(_OWORD *)v158 = v17;
    *(_QWORD *)&v158[15] = *(_QWORD *)(v16 - 8);
    v94 = *(_BYTE *)(v16 - 168);
    v95 = 0;
    v18 = *(_OWORD *)(v16 - 55);
    v19 = *(_OWORD *)(v16 - 119);
    v20 = *(_OWORD *)(v16 - 87);
    v153 = *(_OWORD *)(v16 - 103);
    v154 = v20;
    v155 = *(_OWORD *)(v16 - 71);
    v156 = v18;
    v21 = *(_OWORD *)(v16 - 151);
    v149 = *(_OWORD *)(v16 - 167);
    v150 = v21;
    v151 = *(_OWORD *)(v16 - 135);
    v152 = v19;
  }
  v147 = 0;
  v146 = 0;
  v148 = 0;
  v22 = *(_QWORD *)(a1 + 4824);
  v23 = *(_QWORD *)(a1 + 4832);
  if (v22 != v23)
  {
    v24 = 0;
    while (1)
    {
      if (v24 < v148)
      {
        *(_QWORD *)v24 = v22;
        v25 = (uint64_t)(v24 + 8);
        goto LABEL_32;
      }
      v26 = (char *)v146;
      v27 = v24 - (_BYTE *)v146;
      v28 = (v24 - (_BYTE *)v146) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        sub_20E867F44();
      v30 = v148 - (_BYTE *)v146;
      if ((v148 - (_BYTE *)v146) >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          sub_20E877A38();
        v32 = operator new(8 * v31);
        v33 = &v32[8 * v28];
        *v33 = v22;
        v25 = (uint64_t)(v33 + 1);
        v34 = v24 - v26;
        if (v24 == v26)
        {
LABEL_43:
          v146 = v33;
          v148 = &v32[8 * v31];
          if (!v24)
            goto LABEL_32;
LABEL_50:
          operator delete(v24);
          goto LABEL_32;
        }
      }
      else
      {
        v32 = 0;
        v33 = (_QWORD *)(8 * v28);
        *(_QWORD *)(8 * v28) = v22;
        v25 = 8 * v28 + 8;
        v34 = v24 - v26;
        if (v24 == v26)
          goto LABEL_43;
      }
      v35 = v34 - 8;
      if (v35 < 0x168)
      {
        v36 = v24;
        goto LABEL_48;
      }
      v38 = (v24 - 8 - v26) & 0xFFFFFFFFFFFFFFF8;
      if (&v32[v27 - 8 - v38] > &v32[v27 - 8])
        break;
      if (&v24[-v38 - 8] > v24 - 8)
      {
        v36 = v24;
        goto LABEL_48;
      }
      if ((unint64_t)(v24 - v32 - v27) < 0x20)
      {
        v36 = v24;
        goto LABEL_48;
      }
      v39 = (v35 >> 3) + 1;
      v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = &v24[-v40];
      v33 = (_QWORD *)((char *)v33 - v40);
      v41 = &v32[8 * v28 - 16];
      v42 = v24 - 16;
      v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_48;
LABEL_49:
      v24 = (char *)v146;
      v146 = v33;
      v148 = &v32[8 * v31];
      if (v24)
        goto LABEL_50;
LABEL_32:
      v147 = v25;
      v22 += 32;
      v24 = (char *)v25;
      if (v22 == v23)
        goto LABEL_61;
    }
    v36 = v24;
    do
    {
LABEL_48:
      v37 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *--v33 = v37;
    }
    while (v36 != v26);
    goto LABEL_49;
  }
LABEL_61:
  if (!*(_BYTE *)(a1 + 1043) && !*(_BYTE *)(a1 + 1084))
    *(_BYTE *)(a1 + 624) = 1;
  v45 = operator new();
  sub_20F169904(v45, a1 + 488, &v146);
  v46 = *(_QWORD *)(a1 + 4848);
  *(_QWORD *)(a1 + 4848) = v45;
  if (v46)
  {
    v47 = sub_20F16A418(v46);
    MEMORY[0x212BC6398](v47, 0x10B2C407924BFFFLL);
  }
  v48 = operator new();
  sub_20F09E8F8(v48, a1 + 8, v96, v97);
  v49 = *(_QWORD *)(a1 + 4856);
  *(_QWORD *)(a1 + 4856) = v48;
  if (v49)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v48 = *(_QWORD *)(a1 + 4856);
  }
  if ((v95 & 1) != 0)
  {
    if (*(_BYTE *)(v48 + 2632))
      *(_BYTE *)(v48 + 2632) = 0;
  }
  else
  {
    v50 = *(unsigned __int8 *)(v48 + 2632);
    *(_BYTE *)(v48 + 2464) = v94;
    *(_QWORD *)(v48 + 2624) = *(_QWORD *)&v158[15];
    v51 = *(_OWORD *)v158;
    *(_OWORD *)(v48 + 2593) = v157;
    *(_OWORD *)(v48 + 2609) = v51;
    v52 = v154;
    *(_OWORD *)(v48 + 2529) = v153;
    *(_OWORD *)(v48 + 2545) = v52;
    v53 = v156;
    *(_OWORD *)(v48 + 2561) = v155;
    *(_OWORD *)(v48 + 2577) = v53;
    v54 = v150;
    *(_OWORD *)(v48 + 2465) = v149;
    *(_OWORD *)(v48 + 2481) = v54;
    v55 = v152;
    *(_OWORD *)(v48 + 2497) = v151;
    *(_OWORD *)(v48 + 2513) = v55;
    if (!v50)
      *(_BYTE *)(v48 + 2632) = 1;
  }
  *(_DWORD *)(a1 + 2664) = *(_QWORD *)(a1 + 520);
  v56 = *(_QWORD *)(a1 + 4872);
  v57 = operator new();
  sub_20F82B8B4(v57, a1 + 1224, *(_BYTE *)(a1 + 3760), v97, a1 + 4976, a1 + 5304, *(_QWORD *)(a1 + 10744), v56);
  v58 = *(_QWORD *)(a1 + 4864);
  *(_QWORD *)(a1 + 4864) = v57;
  if (v58)
  {
    v59 = sub_20F82F448(v58);
    MEMORY[0x212BC6398](v59, 0x10F2C404B28B3FDLL);
    v57 = *(_QWORD *)(a1 + 4864);
  }
  sub_20FD33090((void **)(v57 + 8056), (2 * *(_DWORD *)(a1 + 520)));
  *(_OWORD *)(*(_QWORD *)(a1 + 4864) + 8128) = *(_OWORD *)(a1 + 4960);
  sub_20F1163CC((uint64_t)__src, (const void *)(a1 + 3128));
  memcpy((void *)(a1 + 3768), __src, 0x1E1uLL);
  v60 = *(void **)(a1 + 4256);
  if (v60)
  {
    *(_QWORD *)(a1 + 4264) = v60;
    operator delete(v60);
    *(_QWORD *)(a1 + 4256) = 0;
    *(_QWORD *)(a1 + 4264) = 0;
    *(_QWORD *)(a1 + 4272) = 0;
  }
  *(_OWORD *)(a1 + 4256) = v101;
  *(_QWORD *)(a1 + 4272) = v102;
  v102 = 0;
  v101 = 0uLL;
  v61 = v103;
  v103 = 0uLL;
  *(_OWORD *)(a1 + 4280) = v61;
  v62 = v104;
  v104 = 0;
  *(_QWORD *)(a1 + 4296) = v62;
  v63 = *(void **)(a1 + 4304);
  if (v63)
  {
    *(_QWORD *)(a1 + 4312) = v63;
    operator delete(v63);
    *(_QWORD *)(a1 + 4304) = 0;
    *(_QWORD *)(a1 + 4312) = 0;
    *(_QWORD *)(a1 + 4320) = 0;
  }
  *(_OWORD *)(a1 + 4304) = v105;
  *(_QWORD *)(a1 + 4320) = v106;
  v106 = 0;
  v105 = 0uLL;
  v64 = v107;
  v107 = 0uLL;
  *(_OWORD *)(a1 + 4328) = v64;
  v65 = v108;
  v108 = 0;
  *(_QWORD *)(a1 + 4344) = v65;
  *(_QWORD *)(a1 + 4352) = v109;
  *(_OWORD *)(a1 + 4360) = v110;
  *(_QWORD *)(a1 + 4376) = v111;
  v66 = v112;
  *(_QWORD *)(a1 + 4400) = v113;
  *(_OWORD *)(a1 + 4384) = v66;
  *(_QWORD *)(a1 + 4408) = v114;
  v67 = *(void **)(a1 + 4416);
  if (v67)
  {
    *(_QWORD *)(a1 + 4424) = v67;
    operator delete(v67);
    *(_QWORD *)(a1 + 4416) = 0;
    *(_QWORD *)(a1 + 4424) = 0;
    *(_QWORD *)(a1 + 4432) = 0;
  }
  *(_OWORD *)(a1 + 4416) = v115;
  *(_QWORD *)(a1 + 4432) = v116;
  v116 = 0;
  v115 = 0uLL;
  v68 = v117;
  v117 = 0uLL;
  *(_OWORD *)(a1 + 4440) = v68;
  v69 = v118;
  v118 = 0;
  *(_QWORD *)(a1 + 4456) = v69;
  *(_QWORD *)(a1 + 4464) = v119;
  v70 = (_QWORD *)(a1 + 4472);
  v71 = *(void **)(a1 + 4472);
  if (v71)
  {
    *(_QWORD *)(a1 + 4480) = v71;
    operator delete(v71);
    *v70 = 0;
    *(_QWORD *)(a1 + 4480) = 0;
    *(_QWORD *)(a1 + 4488) = 0;
  }
  *(_OWORD *)v70 = v120;
  *(_QWORD *)(a1 + 4488) = v121;
  v121 = 0;
  v120 = 0uLL;
  v72 = v122;
  v122 = 0uLL;
  *(_OWORD *)(a1 + 4496) = v72;
  v73 = v123;
  v123 = 0;
  *(_QWORD *)(a1 + 4512) = v73;
  *(_QWORD *)(a1 + 4520) = v124;
  v74 = *(void **)(a1 + 4528);
  if (v74)
  {
    *(_QWORD *)(a1 + 4536) = v74;
    operator delete(v74);
    *(_QWORD *)(a1 + 4528) = 0;
    *(_QWORD *)(a1 + 4536) = 0;
    *(_QWORD *)(a1 + 4544) = 0;
  }
  *(_OWORD *)(a1 + 4528) = v125;
  *(_QWORD *)(a1 + 4544) = v126;
  v126 = 0;
  v125 = 0uLL;
  v75 = v127;
  v127 = 0uLL;
  *(_OWORD *)(a1 + 4552) = v75;
  v76 = v128;
  v128 = 0;
  *(_QWORD *)(a1 + 4568) = v76;
  *(_QWORD *)(a1 + 4576) = v129;
  v77 = *(void **)(a1 + 4584);
  if (v77)
  {
    *(_QWORD *)(a1 + 4592) = v77;
    operator delete(v77);
    *v98 = 0;
    *(_QWORD *)(a1 + 4592) = 0;
    *(_QWORD *)(a1 + 4600) = 0;
  }
  *(_OWORD *)v98 = __p;
  *(_QWORD *)(a1 + 4600) = v131;
  v131 = 0;
  __p = 0uLL;
  v78 = v132;
  v132 = 0uLL;
  *(_OWORD *)(a1 + 4608) = v78;
  v79 = v133;
  v133 = 0;
  *(_QWORD *)(a1 + 4624) = v79;
  *(_QWORD *)(a1 + 4632) = v134;
  v80 = *(void **)(a1 + 4640);
  if (v80)
  {
    *(_QWORD *)(a1 + 4648) = v80;
    operator delete(v80);
    *(_QWORD *)(a1 + 4640) = 0;
    *(_QWORD *)(a1 + 4648) = 0;
    *(_QWORD *)(a1 + 4656) = 0;
  }
  *(_OWORD *)(a1 + 4640) = v135;
  *(_QWORD *)(a1 + 4656) = v136;
  v136 = 0;
  v135 = 0uLL;
  v81 = v137;
  v137 = 0uLL;
  *(_OWORD *)(a1 + 4664) = v81;
  v82 = v138;
  v138 = 0;
  *(_QWORD *)(a1 + 4680) = v82;
  v83 = (_OWORD *)(a1 + 4688);
  if (*(unsigned __int8 *)(a1 + 4712) == v141)
  {
    if (*(_BYTE *)(a1 + 4712))
    {
      *v83 = v139;
      *(_QWORD *)(a1 + 4704) = v140;
    }
  }
  else if (*(_BYTE *)(a1 + 4712))
  {
    *(_BYTE *)(a1 + 4712) = 0;
  }
  else
  {
    *v83 = v139;
    *(_QWORD *)(a1 + 4704) = v140;
    *(_BYTE *)(a1 + 4712) = 1;
  }
  v84 = v142;
  *(_OWORD *)(a1 + 4736) = v143;
  v85 = *(_OWORD *)v145;
  *(_OWORD *)(a1 + 4752) = v144;
  *(_OWORD *)(a1 + 4768) = v85;
  *(_QWORD *)(a1 + 4783) = *(_QWORD *)&v145[15];
  *(_OWORD *)(a1 + 4720) = v84;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    operator delete((void *)v125);
  }
  if ((_QWORD)v120)
  {
    *((_QWORD *)&v120 + 1) = v120;
    operator delete((void *)v120);
  }
  if ((_QWORD)v115)
  {
    *((_QWORD *)&v115 + 1) = v115;
    operator delete((void *)v115);
  }
  if ((_QWORD)v105)
  {
    *((_QWORD *)&v105 + 1) = v105;
    operator delete((void *)v105);
  }
  if ((_QWORD)v101)
  {
    *((_QWORD *)&v101 + 1) = v101;
    operator delete((void *)v101);
  }
  v86 = *(_QWORD *)(a1 + 4952);
  v87 = *(_QWORD *)(a1 + 4864);
  if (v87)
    *(_QWORD *)(v87 + 12448) = v86;
  v88 = *(_QWORD *)(a1 + 4848);
  if (v88)
    *(_QWORD *)(v88 + 2552) = v86;
  *(_DWORD *)(a1 + 4904) = -1;
  *(_QWORD *)(a1 + 4912) = 0x7FEFFFFFFFFFFFFFLL;
  v89 = *(unsigned __int8 *)(a1 + 10592);
  *(_OWORD *)(a1 + 10496) = *(_OWORD *)(a1 + 3064);
  *(_OWORD *)(a1 + 10512) = *(_OWORD *)(a1 + 3080);
  *(_OWORD *)(a1 + 10528) = *(_OWORD *)(a1 + 3096);
  *(_OWORD *)(a1 + 10544) = *(_OWORD *)(a1 + 3112);
  *(_WORD *)(a1 + 10560) = 0;
  *(_QWORD *)(a1 + 10568) = 0;
  *(_BYTE *)(a1 + 10576) = 0;
  *(_BYTE *)(a1 + 10584) = 0;
  if (!v89)
  {
    *(_BYTE *)(a1 + 10592) = 1;
    if (!*v99)
      goto LABEL_116;
    goto LABEL_115;
  }
  if (*v99)
LABEL_115:
    sub_20F8196A0();
LABEL_116:
  v90 = operator new();
  *(_QWORD *)(v90 + 64) = *(_QWORD *)(a1 + 3720);
  v91 = *(_OWORD *)(a1 + 3672);
  v92 = *(_OWORD *)(a1 + 3704);
  *(_OWORD *)(v90 + 32) = *(_OWORD *)(a1 + 3688);
  *(_OWORD *)(v90 + 48) = v92;
  *(_OWORD *)v90 = *(_OWORD *)(a1 + 3656);
  *(_OWORD *)(v90 + 16) = v91;
  *(_DWORD *)(v90 + 72) = -1;
  *(_BYTE *)(v90 + 80) = 0;
  *(_BYTE *)(v90 + 208) = 0;
  v93 = *(_QWORD *)(a1 + 4792);
  *(_QWORD *)(a1 + 4792) = v90;
  if (v93)
    MEMORY[0x212BC6398](v93, 0x1000C40AADEC2D0);
  if (*(_BYTE *)(a1 + 10432))
    *(_BYTE *)(a1 + 10432) = 0;
  *(_QWORD *)(a1 + 10720) = 0;
  *(_OWORD *)(a1 + 10704) = 0u;
  *(_QWORD *)(a1 + 10728) = 0xFFEFFFFFFFFFFFFFLL;
  if (v146)
  {
    v147 = (uint64_t)v146;
    operator delete(v146);
  }
}

void sub_20F12DFF8(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_20F12E090(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, int8x16_t a8)
{
  _QWORD v15[2];
  int v16;

  if (a5 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a6 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a5 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a6 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15[0] = 0;
  v15[1] = a4;
  v16 = (unsigned __int16)a6 | ((unsigned __int16)a5 << 16);
  sub_20F883A44(*(_QWORD *)(a1 + 4864), a2, a3, (uint64_t)v15, a7, a8);
}

uint64_t sub_20F12E200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  char **v14;
  char **v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v26;
  char **v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  const char *v41;
  size_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  int v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  char **v79;
  char **v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char **v91;
  char **v92;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  char **v115;
  char **v116;
  uint64_t v117;
  char **v118;
  char *v119;
  char *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  size_t v128;
  const char *v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  size_t v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  int v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  char **v169;
  char **v170;
  uint64_t v171;
  char **v172;
  char *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  double v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  float64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  double v245;
  float64x2_t v246;
  unint64_t v247;
  uint64_t v248;
  float64x2_t v249;
  float64x2_t v250;
  int8x16_t v251;
  float64x2_t v252;
  float64x2_t v258;
  int v259;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v264;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  _QWORD *v272;
  double *v273;
  unint64_t v274;
  uint64_t v275;
  void *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  float64x2_t v281;
  int64x2_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  int64x2_t v286;
  float64x2_t v287;
  uint64_t v288;
  uint64_t v289;
  float64x2_t v290;
  float64x2_t v291;
  const char *__src;
  const char *__srca;
  double __srcc;
  void *__srcb[2];
  int v296;
  int v297;
  float64x2_t v298;
  float64x2_t v299;
  uint64_t v300;
  uint64_t v301;
  float64x2_t v302;
  unint64_t v303;
  unint64_t v304;
  double v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t *v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  float64x2_t v319[18];
  void *v320;
  void *v321;
  _BYTE *v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  unsigned __int8 v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  _BYTE v374[648];
  __int128 v375;
  uint64_t v376;
  __int128 v377;
  uint64_t v378;
  _BYTE v379[648];
  _BYTE v380[648];
  char v381;
  __int16 v382;
  uint64_t v383;
  _BYTE object[424];
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  _BYTE v391[32];
  _BYTE v392[32];
  __int128 v393;
  __int128 v394;
  _BYTE v395[40];
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  _BYTE v431[696];
  _BYTE v432[648];
  _BYTE v433[648];
  char v434;
  char v435;
  uint64_t v436;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v436 = *MEMORY[0x24BDAC8D0];
  v3 = v1 + 10288;
  v382 = *(_WORD *)(v1 + 10560);
  v4 = *(_QWORD *)(v1 + 4768);
  v5 = *(_QWORD *)(v1 + 4864);
  *(_QWORD *)(v5 + 8144) = v4;
  v6 = *(_QWORD *)(v2 + 4856);
  if (*(_BYTE *)(v6 + 3360) && (*(_DWORD *)(v5 + 2276) & 0xFFFFFFFE) != 2)
  {
    sub_20F82FE44(v5, (uint64_t *)(v6 + 2640), *(_QWORD *)(v6 + 3312), *(uint64_t **)(v6 + 3336), (char **)(v6 + 2840), (char **)(v6 + 2864));
    v7 = *(_QWORD **)(v6 + 2864);
    if (v7 == *(_QWORD **)(v6 + 2872))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 869, (uint64_t)"!initial_condition.state_timestamps().empty()", 45, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = *(_QWORD **)(v6 + 2864);
    }
    *(_QWORD *)(v2 + 4912) = *v7;
  }
  v8 = *(_QWORD *)(v2 + 4848);
  if (!*(_BYTE *)(v8 + 2616))
    return 1;
  v9 = *(_QWORD **)(v8 + 1240);
  if (*(_DWORD *)(v9[38] - 4) <= *(_DWORD *)(v2 + 4904))
    return 1;
  sub_20F1328FC(&v383);
  v10 = object;
  if (**(int **)(v383 + 56) <= 3)
  {
    v11 = *(unsigned __int8 *)(v383 + 72);
    v12 = sub_20E8C31DC(v383, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (v11 || v12)
    {
      v310 = &v383;
      *(std::chrono::steady_clock::time_point *)&v311 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v311 + 1) = std::chrono::system_clock::now();
      LODWORD(v312) = 3;
      *((_QWORD *)&v312 + 1) = "unknown file";
      LODWORD(v313) = 821;
      v314 = 0uLL;
      *((_QWORD *)&v313 + 1) = "unknown function";
      v14 = (char **)v9[6];
      v15 = (char **)v9[7];
      if (v14 != v15)
      {
        v16 = 0;
        v17 = (char **)v9[6];
        while (1)
        {
          v19 = *v17;
          v18 = v17[1];
          if (*v17 != v18)
          {
            v20 = v18 - v19 - 520;
            if (v20 >= 0x208)
            {
              v22 = 0;
              v23 = v20 / 0x208 + 1;
              v21 = &v19[520 * (v23 & 0xFFFFFFFFFFFFFELL)];
              v24 = v23 & 0xFFFFFFFFFFFFFELL;
              do
              {
                v16 += *(_QWORD *)v19;
                v22 += *((_QWORD *)v19 + 65);
                v19 += 1040;
                v24 -= 2;
              }
              while (v24);
              v16 += v22;
              if (v23 == (v23 & 0xFFFFFFFFFFFFFELL))
                goto LABEL_14;
            }
            else
            {
              v21 = *v17;
            }
            do
            {
              v16 += *(_QWORD *)v21;
              v21 += 520;
            }
            while (v21 != v18);
          }
LABEL_14:
          v17 += 3;
          if (v17 == v15)
            goto LABEL_25;
        }
      }
      v16 = 0;
LABEL_25:
      v26 = (char **)v9[9];
      v27 = (char **)v9[10];
      if (v26 != v27)
      {
        v28 = 0;
        while (1)
        {
          v30 = *v26;
          v29 = v26[1];
          if (*v26 != v29)
          {
            v31 = v29 - v30 - 520;
            if (v31 >= 0x208)
            {
              v33 = 0;
              v34 = v31 / 0x208 + 1;
              v32 = &v30[520 * (v34 & 0xFFFFFFFFFFFFFELL)];
              v35 = v34 & 0xFFFFFFFFFFFFFELL;
              do
              {
                v28 += *(_QWORD *)v30;
                v33 += *((_QWORD *)v30 + 65);
                v30 += 1040;
                v35 -= 2;
              }
              while (v35);
              v28 += v33;
              if (v34 == (v34 & 0xFFFFFFFFFFFFFELL))
                goto LABEL_27;
            }
            else
            {
              v32 = *v26;
            }
            do
            {
              v28 += *(_QWORD *)v32;
              v32 += 520;
            }
            while (v32 != v29);
          }
LABEL_27:
          v26 += 3;
          if (v26 == v27)
            goto LABEL_37;
        }
      }
      v28 = 0;
LABEL_37:
      v296 = v11;
      v36 = *v14;
      v37 = *v310;
      v288 = *v310;
      if (*(char *)(*v310 + 39) < 0)
      {
        v39 = *(const char **)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
      }
      else
      {
        v38 = *(unsigned __int8 *)(*v310 + 39);
        v39 = (const char *)(*v310 + 16);
      }
      v284 = *v310 + 16;
      v303 = v13;
      v300 = *((_QWORD *)v36 + 1);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v41 = byte_254A4A4F8;
      else
        v41 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v42 = byte_254A4A4F8[23];
      else
        v42 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v39;
      *(_QWORD *)object = os_log_create(v41, v39);
      v43 = &object[8];
      if (v42 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v42 >= 0x17)
      {
        v44 = v3;
        v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v45 = v42 | 7;
        v46 = v45 + 1;
        v43 = operator new(v45 + 1);
        *(_QWORD *)&object[24] = v46 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v43;
        *(_QWORD *)&object[16] = v42;
        v3 = v44;
      }
      else
      {
        object[31] = v42;
        if (!v42)
        {
LABEL_55:
          v43[v42] = 0;
          object[32] = 1;
          v47 = &object[40];
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v10 = object;
          if (v38 >= 0x17)
          {
            v49 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v49 = v38 | 7;
            v50 = v49 + 1;
            v47 = operator new(v49 + 1);
            *(_QWORD *)&object[56] = v50 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v47;
            *(_QWORD *)&object[48] = v38;
            v48 = v303;
          }
          else
          {
            object[63] = v38;
            v48 = v303;
            if (!v38)
              goto LABEL_63;
          }
          memmove(v47, __src, v38);
LABEL_63:
          v47[v38] = 0;
          object[64] = 1;
          v51 = *(NSObject **)object;
          if ((object[63] & 0x80000000) != 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v48 && *(_QWORD *)(v48 + 24))
          {
            v52 = _os_log_pack_size();
            v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
            v54 = (std::__shared_weak_count *)operator new();
            v55 = v54;
            v54->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v54->__shared_owners_;
            v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v54->__shared_weak_owners_ = 0;
            v54[1].__vftable = v53;
            *(_QWORD *)object = v53;
            *(_QWORD *)&object[8] = v53;
            *(_QWORD *)&object[16] = v54;
            do
              v57 = __ldxr(p_shared_owners);
            while (__stxr(v57 + 1, p_shared_owners));
            memset(&object[24], 0, 24);
            do
              v58 = __ldaxr(p_shared_owners);
            while (__stlxr(v58 - 1, p_shared_owners));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v55);
            }
            v59 = *(_QWORD *)object;
            v60 = _os_log_pack_fill();
            *(_DWORD *)v60 = 134218496;
            *(_QWORD *)(v60 + 4) = v300;
            *(_WORD *)(v60 + 12) = 2048;
            *(_QWORD *)(v60 + 14) = v16;
            *(_WORD *)(v60 + 22) = 2048;
            *(_QWORD *)(v60 + 24) = v28;
            v61 = operator new();
            v62 = *(unsigned __int8 *)(v288 + 39);
            v63 = v284;
            if ((v62 & 0x80u) != 0)
            {
              v63 = *(_QWORD *)(v288 + 16);
              v62 = *(_QWORD *)(v288 + 24);
            }
            *(_QWORD *)v61 = v59;
            *(_OWORD *)(v61 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v61 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v61 + 40) = v63;
            *(_QWORD *)(v61 + 48) = v62;
            *(_BYTE *)(v61 + 56) = 1;
            *(_QWORD *)&v306 = 0;
            *(_QWORD *)&v308 = v61;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v303 + 24) + 40))(*(_QWORD *)(v303 + 24), &v308);
            v64 = v308;
            *(_QWORD *)&v308 = 0;
            if (v64)
            {
              v65 = *(std::__shared_weak_count **)(v64 + 32);
              if (v65)
              {
                v66 = (unint64_t *)&v65->__shared_owners_;
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                  std::__shared_weak_count::__release_weak(v65);
                }
              }
              v68 = *(std::__shared_weak_count **)(v64 + 16);
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
              *(_QWORD *)&v306 = 0;
            }
            v71 = *(std::__shared_weak_count **)&object[32];
            v72 = v296;
            if (*(_QWORD *)&object[32])
            {
              v73 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v75 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v76 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
          }
          else
          {
            os_log_type_enabled(v51, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134218496;
            *(_QWORD *)&object[4] = v300;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v16;
            *(_WORD *)&object[22] = 2048;
            *(_QWORD *)&object[24] = v28;
            v78 = (void *)_os_log_send_and_compose_impl();
            v72 = v296;
            if (v78)
              free(v78);
          }
          if (v72)
          {
            v79 = (char **)v9[6];
            v80 = (char **)v9[7];
            v81 = *v79;
            if (v79 != v80)
            {
              v82 = 0;
              while (1)
              {
                v84 = *v79;
                v83 = v79[1];
                if (*v79 != v83)
                {
                  v85 = v83 - v84 - 520;
                  if (v85 >= 0x208)
                  {
                    v87 = 0;
                    v88 = v85 / 0x208 + 1;
                    v86 = &v84[520 * (v88 & 0xFFFFFFFFFFFFFELL)];
                    v89 = v88 & 0xFFFFFFFFFFFFFELL;
                    do
                    {
                      v82 += *(_QWORD *)v84;
                      v87 += *((_QWORD *)v84 + 65);
                      v84 += 1040;
                      v89 -= 2;
                    }
                    while (v89);
                    v82 += v87;
                    if (v88 == (v88 & 0xFFFFFFFFFFFFFELL))
                      goto LABEL_107;
                  }
                  else
                  {
                    v86 = *v79;
                  }
                  do
                  {
                    v82 += *(_QWORD *)v86;
                    v86 += 520;
                  }
                  while (v86 != v83);
                }
LABEL_107:
                v79 += 3;
                if (v79 == v80)
                  goto LABEL_117;
              }
            }
            v82 = 0;
LABEL_117:
            v90 = *((_QWORD *)v81 + 1);
            v91 = (char **)v9[9];
            v92 = (char **)v9[10];
            if (v91 != v92)
            {
              v93 = 0;
              while (1)
              {
                v95 = *v91;
                v94 = v91[1];
                if (*v91 != v94)
                {
                  v96 = v94 - v95 - 520;
                  if (v96 >= 0x208)
                  {
                    v98 = 0;
                    v99 = v96 / 0x208 + 1;
                    v97 = &v95[520 * (v99 & 0xFFFFFFFFFFFFFELL)];
                    v100 = v99 & 0xFFFFFFFFFFFFFELL;
                    do
                    {
                      v93 += *(_QWORD *)v95;
                      v98 += *((_QWORD *)v95 + 65);
                      v95 += 1040;
                      v100 -= 2;
                    }
                    while (v100);
                    v93 += v98;
                    if (v99 == (v99 & 0xFFFFFFFFFFFFFELL))
                      goto LABEL_119;
                  }
                  else
                  {
                    v97 = *v91;
                  }
                  do
                  {
                    v93 += *(_QWORD *)v97;
                    v97 += 520;
                  }
                  while (v97 != v94);
                }
LABEL_119:
                v91 += 3;
                if (v91 == v92)
                  goto LABEL_129;
              }
            }
            v93 = 0;
LABEL_129:
            sub_20E8C003C((uint64_t)&v310, "Sending %zu frames, %zu point tracks and %zu line tracks from PoseTracker to BAFilter", v90, v82, v93);
            sub_20E863570((uint64_t)&v310);
          }
          sub_20E863570((uint64_t)&v310);
          v101 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
          if (*((_QWORD *)&v314 + 1))
          {
            v102 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          goto LABEL_135;
        }
      }
      memmove(v43, v41, v42);
      goto LABEL_55;
    }
  }
LABEL_135:
  sub_20F837E58(object, *(_QWORD *)(v2 + 4864), v9, *(unsigned __int8 *)(v2 + 1043), &v382, v2 + 4800);
  v104 = *(_QWORD *)(v2 + 4880);
  if (v104)
  {
    v105 = (void **)(v2 + 4880);
    v106 = *(_QWORD *)(v2 + 4888);
    v107 = *(void **)(v2 + 4880);
    if (v106 != v104)
    {
      do
      {
        v108 = *(std::__shared_weak_count **)(v106 - 8);
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v106 -= 16;
      }
      while (v106 != v104);
      v107 = *v105;
    }
    *(_QWORD *)(v2 + 4888) = v104;
    operator delete(v107);
    *v105 = 0;
    *(_QWORD *)(v2 + 4888) = 0;
    *(_QWORD *)(v2 + 4896) = 0;
  }
  *(_OWORD *)(v2 + 4880) = *(_OWORD *)object;
  *(_QWORD *)(v2 + 4896) = *(_QWORD *)&object[16];
  sub_20F1328FC(&v383);
  if (**(int **)(v383 + 56) > 3)
    goto LABEL_249;
  v111 = *(unsigned __int8 *)(v383 + 72);
  v112 = sub_20E8C31DC(v383, "OSLogSurrogateAppender", 1, 0);
  v113 = v112;
  if (!v111 && v112 == 0)
    goto LABEL_249;
  v310 = &v383;
  *(std::chrono::steady_clock::time_point *)&v311 = std::chrono::steady_clock::now();
  *((std::chrono::system_clock::time_point *)&v311 + 1) = std::chrono::system_clock::now();
  LODWORD(v312) = 3;
  *((_QWORD *)&v312 + 1) = "unknown file";
  LODWORD(v313) = 829;
  v314 = 0uLL;
  *((_QWORD *)&v313 + 1) = "unknown function";
  v115 = (char **)v9[6];
  v116 = (char **)v9[7];
  if (v115 != v116)
  {
    v117 = 0;
    v118 = (char **)v9[6];
    while (1)
    {
      v120 = *v118;
      v119 = v118[1];
      if (*v118 != v119)
      {
        v121 = v119 - v120 - 520;
        if (v121 >= 0x208)
        {
          v123 = 0;
          v124 = v121 / 0x208 + 1;
          v122 = &v120[520 * (v124 & 0xFFFFFFFFFFFFFELL)];
          v125 = v124 & 0xFFFFFFFFFFFFFELL;
          do
          {
            v117 += *(_QWORD *)v120;
            v123 += *((_QWORD *)v120 + 65);
            v120 += 1040;
            v125 -= 2;
          }
          while (v125);
          v117 += v123;
          if (v124 == (v124 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_153;
        }
        else
        {
          v122 = *v118;
        }
        do
        {
          v117 += *(_QWORD *)v122;
          v122 += 520;
        }
        while (v122 != v119);
      }
LABEL_153:
      v118 += 3;
      if (v118 == v116)
        goto LABEL_163;
    }
  }
  v117 = 0;
LABEL_163:
  v297 = v111;
  v126 = *v115;
  v127 = *v310;
  v289 = *v310;
  if (*(char *)(*v310 + 39) < 0)
  {
    v129 = *(const char **)(v127 + 16);
    v128 = *(_QWORD *)(v127 + 24);
  }
  else
  {
    v128 = *(unsigned __int8 *)(*v310 + 39);
    v129 = (const char *)(*v310 + 16);
  }
  v285 = *v310 + 16;
  v304 = v113;
  v301 = *((_QWORD *)v126 + 1);
  v130 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v131 = byte_254A4A4F8;
  else
    v131 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v132 = byte_254A4A4F8[23];
  else
    v132 = *(_QWORD *)&byte_254A4A4F8[8];
  __srca = v129;
  *(_QWORD *)object = os_log_create(v131, v129);
  v133 = &object[8];
  if (v132 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v132 >= 0x17)
  {
    v134 = v3;
    v135 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v132 | 7) != 0x17)
      v135 = v132 | 7;
    v136 = v135 + 1;
    v133 = operator new(v135 + 1);
    *(_QWORD *)&object[24] = v136 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v133;
    *(_QWORD *)&object[16] = v132;
    v3 = v134;
    goto LABEL_180;
  }
  object[31] = v132;
  if (v132)
LABEL_180:
    memmove(v133, v131, v132);
  v133[v132] = 0;
  object[32] = 1;
  v137 = &object[40];
  if (v128 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v10 = object;
  if (v128 >= 0x17)
  {
    v139 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17)
      v139 = v128 | 7;
    v140 = v139 + 1;
    v137 = operator new(v139 + 1);
    *(_QWORD *)&object[56] = v140 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v137;
    *(_QWORD *)&object[48] = v128;
    v138 = v304;
  }
  else
  {
    object[63] = v128;
    v138 = v304;
    if (!v128)
      goto LABEL_189;
  }
  memmove(v137, __srca, v128);
LABEL_189:
  v137[v128] = 0;
  object[64] = 1;
  v141 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v138 && *(_QWORD *)(v138 + 24))
  {
    v142 = _os_log_pack_size();
    v143 = (std::__shared_weak_count_vtbl *)operator new(v142, (std::align_val_t)8uLL);
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v144;
    v144->__shared_owners_ = 0;
    v146 = (unint64_t *)&v144->__shared_owners_;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v143;
    *(_QWORD *)object = v143;
    *(_QWORD *)&object[8] = v143;
    *(_QWORD *)&object[16] = v144;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
    memset(&object[24], 0, 24);
    do
      v148 = __ldaxr(v146);
    while (__stlxr(v148 - 1, v146));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v145);
    }
    v149 = *(_QWORD *)object;
    v150 = _os_log_pack_fill();
    *(_DWORD *)v150 = 134218240;
    *(_QWORD *)(v150 + 4) = v301;
    *(_WORD *)(v150 + 12) = 2048;
    *(_QWORD *)(v150 + 14) = v117;
    v151 = operator new();
    v152 = *(unsigned __int8 *)(v289 + 39);
    v153 = v285;
    if ((v152 & 0x80u) != 0)
    {
      v153 = *(_QWORD *)(v289 + 16);
      v152 = *(_QWORD *)(v289 + 24);
    }
    *(_QWORD *)v151 = v149;
    *(_OWORD *)(v151 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v151 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v151 + 40) = v153;
    *(_QWORD *)(v151 + 48) = v152;
    *(_BYTE *)(v151 + 56) = 1;
    *(_QWORD *)&v306 = 0;
    *(_QWORD *)&v308 = v151;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v304 + 24) + 40))(*(_QWORD *)(v304 + 24), &v308);
    v154 = v308;
    *(_QWORD *)&v308 = 0;
    if (v154)
    {
      v155 = *(std::__shared_weak_count **)(v154 + 32);
      if (v155)
      {
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      v158 = *(std::__shared_weak_count **)(v154 + 16);
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      MEMORY[0x212BC6398](v154, 0x10F0C40B62ED6C6);
      *(_QWORD *)&v306 = 0;
    }
    v161 = *(std::__shared_weak_count **)&object[32];
    v162 = v297;
    if (*(_QWORD *)&object[32])
    {
      v163 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v165 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v166 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
  }
  else
  {
    os_log_type_enabled(v141, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = v301;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v117;
    v168 = (void *)_os_log_send_and_compose_impl();
    v162 = v297;
    if (v168)
      free(v168);
  }
  if (v162)
  {
    v169 = (char **)v9[6];
    v170 = (char **)v9[7];
    if (v169 != v170)
    {
      v171 = 0;
      v172 = (char **)v9[6];
      while (1)
      {
        v174 = *v172;
        v173 = v172[1];
        if (*v172 != v173)
        {
          v175 = v173 - v174 - 520;
          if (v175 >= 0x208)
          {
            v177 = 0;
            v178 = v175 / 0x208 + 1;
            v176 = &v174[520 * (v178 & 0xFFFFFFFFFFFFFELL)];
            v179 = v178 & 0xFFFFFFFFFFFFFELL;
            do
            {
              v171 += *(_QWORD *)v174;
              v177 += *((_QWORD *)v174 + 65);
              v174 += 1040;
              v179 -= 2;
            }
            while (v179);
            v171 += v177;
            if (v178 == (v178 & 0xFFFFFFFFFFFFFELL))
              goto LABEL_233;
          }
          else
          {
            v176 = *v172;
          }
          do
          {
            v171 += *(_QWORD *)v176;
            v176 += 520;
          }
          while (v176 != v173);
        }
LABEL_233:
        v172 += 3;
        if (v172 == v170)
          goto LABEL_243;
      }
    }
    v171 = 0;
LABEL_243:
    sub_20E8C003C((uint64_t)&v310, "Sending %zu frames and %zu tracks from BAFilter to PoseTracker", *((_QWORD *)*v169 + 1), v171);
    sub_20E863570((uint64_t)&v310);
  }
  sub_20E863570((uint64_t)&v310);
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v314 + 1);
  if (*((_QWORD *)&v314 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
LABEL_249:
  v183 = v9[38];
  if (v9[37] == v183)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 832, (uint64_t)"!window.frame_ids().empty()", 27, (uint64_t)"We have an empty window!", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v183 = v9[38];
  }
  *(_DWORD *)(v2 + 4904) = *(_DWORD *)(v183 - 4);
  memset(object, 0, 192);
  *(_DWORD *)&object[192] = 2;
  memset(&object[200], 0, 160);
  *(_QWORD *)&object[360] = 0xBFF0000000000000;
  *(_QWORD *)&object[368] = 0xBFF0000000000000;
  *(_QWORD *)&object[376] = -1;
  *(_QWORD *)&v387 = 0;
  memset(&object[384], 0, 38);
  *(_QWORD *)((char *)&v386 + 5) = 0;
  *(_QWORD *)&v386 = 0;
  v385 = 0uLL;
  BYTE8(v387) = 1;
  v388 = 0u;
  v389 = 0u;
  *(_QWORD *)&v390 = 0;
  DWORD2(v390) = 1065353216;
  *(_DWORD *)v391 = 0;
  memset(&v391[8], 0, 20);
  *(_DWORD *)v392 = 0;
  memset(&v392[8], 0, 20);
  v393 = 0u;
  v394 = 0u;
  *(_DWORD *)v395 = 1065353216;
  LODWORD(v396) = 1065353216;
  v184 = *(_QWORD *)(v2 + 4864) + 2280;
  memset(&v395[8], 0, 32);
  sub_20F1329F0((uint64_t)object, v184);
  v185 = *(_QWORD *)(v2 + 4864);
  if (&object[200] != (_BYTE *)(v185 + 2480))
  {
    sub_20F0E80A4(&object[200], *(char **)(v185 + 2480), *(char **)(v185 + 2488), (uint64_t)(*(_QWORD *)(v185 + 2488) - *(_QWORD *)(v185 + 2480)) >> 2);
    v185 = *(_QWORD *)(v2 + 4864);
  }
  if (object != (_BYTE *)(v185 + 2280))
  {
    sub_20E86811C(&object[224], *(char **)(v185 + 2504), *(char **)(v185 + 2512), (uint64_t)(*(_QWORD *)(v185 + 2512) - *(_QWORD *)(v185 + 2504)) >> 3);
    v185 = *(_QWORD *)(v2 + 4864);
  }
  v186 = *(_DWORD *)(v2 + 4908);
  *(_DWORD *)(v2 + 4908) = v186 + 1;
  DWORD2(v396) = v186;
  v187 = *(_QWORD *)(v185 + 5264);
  v188 = *(_OWORD *)(v187 + 608);
  v385 = *(_OWORD *)(v187 + 592);
  v386 = v188;
  v387 = *(_OWORD *)(v187 + 624);
  v189 = *(_OWORD *)(v187 + 544);
  *(_OWORD *)&object[360] = *(_OWORD *)(v187 + 528);
  *(_OWORD *)&object[376] = v189;
  v190 = *(_OWORD *)(v187 + 576);
  *(_OWORD *)&object[392] = *(_OWORD *)(v187 + 560);
  *(_OWORD *)&object[408] = v190;
  v191 = *(_OWORD *)(v187 + 480);
  *(_OWORD *)&object[296] = *(_OWORD *)(v187 + 464);
  *(_OWORD *)&object[312] = v191;
  v192 = *(_OWORD *)(v187 + 512);
  *(_OWORD *)&object[328] = *(_OWORD *)(v187 + 496);
  *(_OWORD *)&object[344] = v192;
  v193 = *(_OWORD *)(v187 + 448);
  *(_OWORD *)&object[264] = *(_OWORD *)(v187 + 432);
  *(_OWORD *)&object[280] = v193;
  *(_QWORD *)&v388 = *(_QWORD *)(v187 + 640);
  *(_OWORD *)&object[248] = *(_OWORD *)(v187 + 416);
  if (&object[248] == (_BYTE *)(v187 + 416))
  {
    v195 = *(_OWORD *)(v187 + 704);
    *(_OWORD *)v391 = *(_OWORD *)(v187 + 688);
    *(_OWORD *)&v391[16] = v195;
    *(_OWORD *)v392 = *(_OWORD *)(v187 + 720);
    *(_OWORD *)&v392[12] = *(_OWORD *)(v187 + 732);
  }
  else
  {
    DWORD2(v390) = *(_DWORD *)(v187 + 680);
    sub_20EE62010((_QWORD *)&v388 + 1, *(uint64_t **)(v187 + 664), 0);
    v194 = *(_OWORD *)(v187 + 704);
    *(_OWORD *)v391 = *(_OWORD *)(v187 + 688);
    *(_OWORD *)&v391[16] = v194;
    *(_OWORD *)v392 = *(_OWORD *)(v187 + 720);
    *(_OWORD *)&v392[12] = *(_OWORD *)(v187 + 732);
    *(_DWORD *)v395 = *(_DWORD *)(v187 + 784);
    sub_20EC1D1DC(&v393, *(uint64_t **)(v187 + 768), 0);
    LODWORD(v396) = *(_DWORD *)(v187 + 824);
    sub_20EC1D1DC(&v395[8], *(uint64_t **)(v187 + 808), 0);
  }
  sub_20F0F6E38(*(_QWORD *)(v2 + 4848) + 760, (uint64_t *)object);
  sub_20F04F084(&object[248]);
  if (*(_QWORD *)&object[224])
  {
    *(_QWORD *)&object[232] = *(_QWORD *)&object[224];
    operator delete(*(void **)&object[224]);
  }
  if (*(_QWORD *)&object[200])
  {
    *(_QWORD *)&object[208] = *(_QWORD *)&object[200];
    operator delete(*(void **)&object[200]);
  }
  sub_20F028B60((uint64_t)object);
  v196 = *(_QWORD *)(v2 + 4864);
  v197 = *(_QWORD *)(v2 + 6976);
  v198 = *(_QWORD *)(v2 + 6984);
  if (v197 != v198)
  {
    v199 = v196 + 2280;
    v200 = v196 + 2480;
    v201 = v196 + 2504;
    v202 = v196 + 2528;
    do
    {
      v203 = *(_QWORD *)(v197 + 24);
      if (!v203)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v203 + 48))(v203, v199, v200, v201, v202);
      v197 += 32;
    }
    while (v197 != v198);
  }
  kdebug_trace();
  kdebug_trace();
  if (*(_BYTE *)(v3 + 304))
  {
    v204 = *(_QWORD *)(v2 + 4864);
    v205 = *(_QWORD *)(v204 + 5264);
    if (*(_BYTE *)(v205 + 872))
      sub_20F0CE200(v2 + 10496, v205 + 416, *(double *)(*(_QWORD *)(v204 + 2512) - 8));
  }
  if (*(_BYTE *)(v3 + 408))
  {
    v206 = *(_QWORD *)(v2 + 4864);
    v207 = *(_QWORD *)(v206 + 5264);
    if (*(_BYTE *)(v207 + 872))
      sub_20F0CE200(v2 + 10600, v207 + 416, *(double *)(*(_QWORD *)(v206 + 2512) - 8));
  }
  if (!*(_BYTE *)v3)
    return 0;
  v208 = *(_QWORD *)(v2 + 4864);
  if (*(_BYTE *)(v208 + 11664)
    || *(_DWORD *)(v208 + 1936) != (uint64_t)(*(_QWORD *)(v208 + 2864) - *(_QWORD *)(v208 + 2856)) >> 2)
  {
    return 0;
  }
  if (*(int *)(v2 + 4904) <= 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1768, (uint64_t)"HasProcessedFirstWindow()", 25, (uint64_t)"Filter is not yet initialized", 29, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v208 = *(_QWORD *)(v2 + 4864);
  }
  if (*(_QWORD *)(v208 + 2488) - *(_QWORD *)(v208 + 2480) <= 4uLL)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1769, (uint64_t)"filter_->state_ids().size() >= 2u", 33, (uint64_t)"State id size should be greater than 2", 38, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v208 = *(_QWORD *)(v2 + 4864);
  }
  object[0] = 0;
  v435 = 0;
  if (*(_BYTE *)(v208 + 11536))
  {
    *(_QWORD *)object = *(_QWORD *)(v208 + 8376);
    *(_OWORD *)&object[72] = *(_OWORD *)(v208 + 8448);
    *(_OWORD *)&object[88] = *(_OWORD *)(v208 + 8464);
    *(_OWORD *)&object[104] = *(_OWORD *)(v208 + 8480);
    *(_OWORD *)&object[120] = *(_OWORD *)(v208 + 8496);
    *(_OWORD *)&object[8] = *(_OWORD *)(v208 + 8384);
    *(_OWORD *)&object[24] = *(_OWORD *)(v208 + 8400);
    *(_OWORD *)&object[40] = *(_OWORD *)(v208 + 8416);
    *(_OWORD *)&object[56] = *(_OWORD *)(v208 + 8432);
    memcpy(&object[136], (const void *)(v208 + 8512), 0x120uLL);
    sub_20F13F604((uint64_t)&v385, (uint64_t *)(v208 + 8800));
    LOBYTE(v390) = 0;
    v434 = 0;
    if (*(_BYTE *)(v208 + 11528))
    {
      v390 = *(_OWORD *)(v208 + 8880);
      *(_QWORD *)v391 = *(_QWORD *)(v208 + 8896);
      *(_QWORD *)&v391[24] = *(_QWORD *)(v208 + 8920);
      *(_OWORD *)&v391[8] = *(_OWORD *)(v208 + 8904);
      v209 = *(_OWORD *)(v208 + 8944);
      *(_OWORD *)v392 = *(_OWORD *)(v208 + 8928);
      *(_OWORD *)&v392[16] = v209;
      v210 = *(_OWORD *)(v208 + 8976);
      v211 = *(_OWORD *)(v208 + 9008);
      *(_OWORD *)v395 = *(_OWORD *)(v208 + 8992);
      *(_OWORD *)&v395[16] = v211;
      v393 = *(_OWORD *)(v208 + 8960);
      v394 = v210;
      *(_QWORD *)&v395[32] = *(_QWORD *)(v208 + 9024);
      v400 = *(_QWORD *)(v208 + 9096);
      v212 = *(_OWORD *)(v208 + 9064);
      v399 = *(_OWORD *)(v208 + 9080);
      v398 = v212;
      v213 = *(_OWORD *)(v208 + 9048);
      v396 = *(_OWORD *)(v208 + 9032);
      v397 = v213;
      v214 = *(_OWORD *)(v208 + 9104);
      v215 = *(_OWORD *)(v208 + 9152);
      v403 = *(_OWORD *)(v208 + 9136);
      v404 = v215;
      v216 = *(_OWORD *)(v208 + 9120);
      v401 = v214;
      v402 = v216;
      v405 = *(_QWORD *)(v208 + 9168);
      v217 = *(_OWORD *)(v208 + 9176);
      v218 = *(_OWORD *)(v208 + 9192);
      v219 = *(_OWORD *)(v208 + 9208);
      v220 = *(_OWORD *)(v208 + 9224);
      v410 = *(_QWORD *)(v208 + 9240);
      v409 = v220;
      v408 = v219;
      v406 = v217;
      v407 = v218;
      v221 = *(_OWORD *)(v208 + 9248);
      v222 = *(_QWORD *)(v208 + 9312);
      v223 = *(_OWORD *)(v208 + 9264);
      v224 = *(_OWORD *)(v208 + 9296);
      v413 = *(_OWORD *)(v208 + 9280);
      v414 = v224;
      v411 = v221;
      v412 = v223;
      v415 = v222;
      v225 = *(_OWORD *)(v208 + 9320);
      v226 = *(_OWORD *)(v208 + 9336);
      v227 = *(_OWORD *)(v208 + 9352);
      v228 = *(_OWORD *)(v208 + 9368);
      v420 = *(_QWORD *)(v208 + 9384);
      v419 = v228;
      v418 = v227;
      v416 = v225;
      v417 = v226;
      v229 = *(_OWORD *)(v208 + 9392);
      v230 = *(_QWORD *)(v208 + 9456);
      v231 = *(_OWORD *)(v208 + 9408);
      v232 = *(_OWORD *)(v208 + 9440);
      v423 = *(_OWORD *)(v208 + 9424);
      v424 = v232;
      v421 = v229;
      v422 = v231;
      v425 = v230;
      v426 = *(_OWORD *)(v208 + 9464);
      v233 = *(_OWORD *)(v208 + 9480);
      v234 = *(_OWORD *)(v208 + 9496);
      v235 = *(_OWORD *)(v208 + 9512);
      v430 = *(_QWORD *)(v208 + 9528);
      v429 = v235;
      v428 = v234;
      v427 = v233;
      memcpy(v431, (const void *)(v208 + 9536), sizeof(v431));
      memcpy(v432, (const void *)(v208 + 10232), sizeof(v432));
      memcpy(v433, (const void *)(v208 + 10880), sizeof(v433));
      v434 = 1;
    }
    v435 = 1;
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1774, (uint64_t)"ret", 3, (uint64_t)"empty last state propagated covariance", 38, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v310 = *(uint64_t **)object;
  v315 = *(_OWORD *)&object[72];
  v316 = *(_OWORD *)&object[88];
  v317 = *(_OWORD *)&object[104];
  v318 = *(_OWORD *)&object[120];
  v311 = *(_OWORD *)&object[8];
  v312 = *(_OWORD *)&object[24];
  v313 = *(_OWORD *)&object[40];
  v314 = *(_OWORD *)&object[56];
  memcpy(v319, &object[136], sizeof(v319));
  sub_20F13F604((uint64_t)&v320, (uint64_t *)&v385);
  LOBYTE(v328) = 0;
  v381 = 0;
  if (v434)
  {
    v329 = *(_QWORD *)v391;
    v328 = v390;
    v330 = *(_OWORD *)&v391[8];
    v331 = *(_QWORD *)&v391[24];
    v332 = *(_OWORD *)v392;
    v333 = *(_OWORD *)&v392[16];
    v336 = *(_OWORD *)v395;
    v337 = *(_OWORD *)&v395[16];
    v334 = v393;
    v335 = v394;
    v338 = *(_QWORD *)&v395[32];
    v343 = v400;
    v341 = v398;
    v342 = v399;
    v339 = v396;
    v340 = v397;
    v346 = v403;
    v347 = v404;
    v344 = v401;
    v345 = v402;
    v348 = v405;
    v353 = v410;
    v351 = v408;
    v352 = v409;
    v349 = v406;
    v350 = v407;
    v356 = v413;
    v357 = v414;
    v354 = v411;
    v355 = v412;
    v358 = v415;
    v363 = v420;
    v361 = v418;
    v362 = v419;
    v359 = v416;
    v360 = v417;
    v366 = v423;
    v367 = v424;
    v364 = v421;
    v365 = v422;
    v368 = v425;
    v369 = v426;
    v373 = v430;
    v372 = v429;
    v371 = v428;
    v370 = v427;
    memcpy(v374, v431, sizeof(v374));
    v375 = *(_OWORD *)&v431[648];
    v376 = *(_QWORD *)&v431[664];
    v377 = *(_OWORD *)&v431[672];
    v378 = *(_QWORD *)&v431[688];
    memcpy(v379, v432, sizeof(v379));
    memcpy(v380, v433, sizeof(v380));
    v381 = 1;
  }
  if (v435 && BYTE8(v389) && (_QWORD)v385)
  {
    *((_QWORD *)&v385 + 1) = v385;
    operator delete((void *)v385);
  }
  v236 = *(double *)(v2 + 3640) * (double)*(unint64_t *)(v2 + 520);
  v237 = v236 * v236;
  v319[16] = vmulq_n_f64(v319[16], v237);
  v319[17] = vmulq_n_f64(v319[17], v237);
  v319[14] = vmulq_n_f64(v319[14], v237);
  v319[15] = vmulq_n_f64(v319[15], v237);
  v319[12] = vmulq_n_f64(v319[12], v237);
  v319[13] = vmulq_n_f64(v319[13], v237);
  v319[10] = vmulq_n_f64(v319[10], v237);
  v319[11] = vmulq_n_f64(v319[11], v237);
  v319[8] = vmulq_n_f64(v319[8], v237);
  v319[9] = vmulq_n_f64(v319[9], v237);
  v319[7] = vmulq_n_f64(v319[7], v237);
  v319[6] = vmulq_n_f64(v319[6], v237);
  v319[5] = vmulq_n_f64(v319[5], v237);
  v319[4] = vmulq_n_f64(v319[4], v237);
  v319[3] = vmulq_n_f64(v319[3], v237);
  v319[2] = vmulq_n_f64(v319[2], v237);
  v319[1] = vmulq_n_f64(v319[1], v237);
  v319[0] = vmulq_n_f64(v319[0], v237);
  v238 = v310;
  v239 = HIDWORD(v310);
  v240 = *(_QWORD *)(*(_QWORD *)(v2 + 4864) + 2280);
  v241.f64[0] = *(float64_t *)(v240 + 16);
  v242 = *(int64x2_t *)v240;
  v243 = *(int64x2_t *)(v240 + 24);
  _Q6 = *(float64x2_t *)(v240 + 48);
  v245 = *(double *)(v240 + 160);
  v246 = *(float64x2_t *)(v240 + 144);
  v241.f64[1] = *(float64_t *)(v240 + 40);
  v302 = v241;
  v305 = *(double *)(v240 + 64);
  if (*(_QWORD *)(v2 + 10208))
  {
    v247 = *(_QWORD *)(v2 + 10200);
    v248 = *(_QWORD *)(v2 + 10168);
    if (!v247)
      v247 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(v2 + 10176) - v248) >> 3);
    if (*(_DWORD *)(v248 + 3160 * v247 - 3160) == (_DWORD)v310)
    {
      __srcc = v245;
      v298 = _Q6;
      v286 = v242;
      v290 = v246;
      v282 = v243;
      sub_20F8196A0();
      v243 = v282;
      v242 = v286;
      v246 = v290;
      v245 = __srcc;
      _Q6 = v298;
    }
  }
  v249 = (float64x2_t)vzip1q_s64(v242, v243);
  v250 = (float64x2_t)vzip2q_s64(v242, v243);
  v251 = vextq_s8((int8x16_t)v250, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), 8uLL);
  *(float64x2_t *)__srcb = v249;
  v252 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v249, v246.f64[0]), v250, v246, 1), v302, v245);
  _Q2 = vmulq_f64(_Q6, v246);
  _D3 = v246.f64[1];
  __asm { FMLA            D2, D3, V6.D[1] }
  _Q2.f64[0] = _Q2.f64[0] + v305 * v245;
  v258 = vnegq_f64(v252);
  *(_QWORD *)&v252.f64[0] = *(_OWORD *)&vnegq_f64(_Q2);
  v281 = (float64x2_t)*(unint64_t *)&_Q6.f64[0];
  *(_QWORD *)&v250.f64[1] = v251.i64[0];
  v299 = v250;
  v283 = v251.u64[1];
  v287 = v258;
  v252.f64[1] = 1.0;
  v291 = v252;
  if (*(_BYTE *)(v3 + 144))
  {
    v259 = *(_DWORD *)(v2 + 10296);
    if (v259 != (_DWORD)v238 && *(_DWORD *)(v2 + 10300) == (_DWORD)v238)
    {
      _Q6.f64[0] = *(float64_t *)(v3 + 32);
      v261 = *(float64x2_t *)(v3 + 16);
      v251.i64[0] = *(_QWORD *)(v3 + 64);
      v262 = *(float64x2_t *)(v3 + 48);
      _D1 = *(double *)(v3 + 96);
      v264 = *(float64x2_t *)(v3 + 80);
      _D7 = *(double *)(v3 + 128);
      _Q16 = *(float64x2_t *)(v3 + 112);
      *(void **)&v267.f64[0] = __srcb[0];
      *(_QWORD *)&v267.f64[1] = vextq_s8(*(int8x16_t *)__srcb, *(int8x16_t *)__srcb, 8uLL).u64[0];
      v268 = vmulq_n_f64(v267, _Q6.f64[0]);
      v269 = vmulq_n_f64(v281, _Q6.f64[0]);
      *(_QWORD *)&_Q6.f64[1] = v251.i64[0];
      v270 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v261, (int64x2_t)v262), vnegq_f64(_Q16).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v261, (int64x2_t)v262), _Q16, 1), _Q6, _D7, 0);
      _D18 = *(_QWORD *)(v3 + 88);
      __asm
      {
        FMLS            D6, D18, V16.D[1]
        FMLS            D6, D1, V7.D[0]
      }
      *(float64x2_t *)object = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v267, v261.f64[0]), v299, v262.f64[0]), v302, v264.f64[0]), (float64x2_t)0, v287);
      *(float64x2_t *)&object[16] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v281, v261.f64[0]), (float64x2_t)v251.u64[1], v262.f64[0]), (float64x2_t)*(unint64_t *)&v305, v264.f64[0]), (float64x2_t)0, v291);
      *(float64x2_t *)&object[32] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v267, v261, 1), v299, v262, 1), v302, v264, 1), (float64x2_t)0, v287);
      *(float64x2_t *)&object[48] = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v281, v261, 1), (float64x2_t)v251.u64[1], v262, 1), (float64x2_t)*(unint64_t *)&v305, v264, 1), (float64x2_t)0, v291);
      *(float64x2_t *)&object[64] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v268, v299, *(double *)v251.i64), v302, _D1), (float64x2_t)0, v287);
      *(float64x2_t *)&object[80] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v269, (float64x2_t)v251.u64[1], *(double *)v251.i64), (float64x2_t)*(unint64_t *)&v305, _D1), (float64x2_t)0, v291);
      *(float64x2_t *)&object[112] = vaddq_f64(v291, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v281, v270.f64[0]), (float64x2_t)v251.u64[1], v270, 1), (float64x2_t)*(unint64_t *)&v305, _Q6.f64[0]));
      *(float64x2_t *)&object[96] = vaddq_f64(v287, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v267, v270.f64[0]), v299, v270, 1), v302, _Q6.f64[0]));
      sub_20F81E2A4(v2 + 7000, v259, v238, (float64x2_t *)object, *(unsigned __int8 *)(v2 + 3618));
    }
  }
  v272 = *(_QWORD **)(v2 + 4864);
  if (*(_BYTE *)(v2 + 3617))
  {
    v273 = (double *)v272[313];
    v274 = v272[314] - (_QWORD)v273;
    v275 = v3;
    if (v274 >= 0x10)
    {
      memset(object, 0, 24);
      sub_20FD33470(v272 + 1007, (uint64_t)object, *v273, v273[1]);
      v278 = *(_QWORD *)(*(_QWORD *)(v2 + 4864) + 2280);
      v279 = *(_QWORD *)(v278 + 88);
      *(_OWORD *)&object[24] = *(_OWORD *)(v278 + 72);
      *(_QWORD *)&object[40] = v279;
      v280 = *(_OWORD *)(v278 + 120);
      *(_QWORD *)&object[64] = *(_QWORD *)(v278 + 136);
      *(_OWORD *)&object[48] = v280;
      v276 = *(void **)object;
      v3 = *(_QWORD *)&object[8];
      v308 = *(_OWORD *)&object[24];
      v10 = *(_BYTE **)&object[16];
      v309 = *(_QWORD *)&object[40];
      v307 = *(_QWORD *)&object[64];
      v306 = v280;
      v277 = 1;
    }
    else
    {
      v276 = 0;
      v277 = 0;
    }
    if (v327 == v277)
    {
      if (v327)
      {
        if (v320)
        {
          v321 = v320;
          operator delete(v320);
        }
        v320 = v276;
        v321 = (void *)v3;
        v323 = v308;
        v322 = v10;
        v324 = v309;
        v325 = v306;
        v326 = v307;
        goto LABEL_319;
      }
    }
    else
    {
      if (!v327)
      {
        v320 = v276;
        v321 = (void *)v3;
        v323 = v308;
        v322 = v10;
        v324 = v309;
        v325 = v306;
        v326 = v307;
        v327 = 1;
LABEL_319:
        v3 = v275;
        goto LABEL_320;
      }
      if (v320)
      {
        v321 = v320;
        operator delete(v320);
      }
      v327 = 0;
    }
    if (v274 >= 0x10 && v276)
      operator delete(v276);
    goto LABEL_319;
  }
LABEL_320:
  sub_20F81BA20(v2 + 7000);
  if (*(_BYTE *)(v3 + 144))
  {
    if (*(_DWORD *)(v2 + 10296) != (_DWORD)v238)
    {
      *(_QWORD *)(v2 + 10296) = v238 | (v239 << 32);
      *(_OWORD *)(v3 + 16) = *(_OWORD *)__srcb;
      *(float64x2_t *)(v3 + 32) = v281;
      *(float64x2_t *)(v3 + 48) = v299;
      *(_OWORD *)(v3 + 64) = v283;
      *(float64x2_t *)(v3 + 80) = v302;
      *(_OWORD *)(v3 + 96) = *(unint64_t *)&v305;
      *(float64x2_t *)(v3 + 112) = v287;
      *(float64x2_t *)(v3 + 128) = v291;
    }
  }
  else
  {
    *(_QWORD *)(v2 + 10296) = v238 | (v239 << 32);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)__srcb;
    *(float64x2_t *)(v3 + 32) = v281;
    *(float64x2_t *)(v3 + 48) = v299;
    *(_OWORD *)(v3 + 64) = v283;
    *(float64x2_t *)(v3 + 80) = v302;
    *(_OWORD *)(v3 + 96) = *(unint64_t *)&v305;
    *(float64x2_t *)(v3 + 112) = v287;
    *(float64x2_t *)(v3 + 128) = v291;
    *(_BYTE *)(v3 + 144) = 1;
  }
  if (v327)
  {
    if (v320)
    {
      v321 = v320;
      operator delete(v320);
    }
  }
  return 0;
}

void sub_20F130530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (LOBYTE(STACK[0xD58]))
  {
    if (SLOBYTE(STACK[0xD57]) < 0)
      operator delete((void *)STACK[0xD40]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20F130578(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0x2C8]))
  {
    v2 = (void *)STACK[0x280];
    if (STACK[0x280])
    {
      STACK[0x288] = (unint64_t)v2;
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F130780(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  float64x2_t *v13;
  double v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  float64x2_t *v18;
  uint64_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t v51;
  int64x2_t v52;
  uint64_t v54;
  uint64_t *v55;
  unsigned __int8 v56;
  size_t v58;
  __darwin_time_t tv_sec;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  float64x2_t v108;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  int64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  int8x16_t v123;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  double v140;
  float64x2_t v141;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  float64x2_t v152;
  float64x2_t v154;
  float64x2_t v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  float64x2_t v159;
  unsigned __int8 v160;
  uint64_t *v161;
  unsigned __int8 v162;
  unint64_t v163;
  __int128 *v164;
  char *v165;
  size_t v166;
  __darwin_time_t v167;
  uint64_t v168;
  uint64_t j;
  uint64_t v170;
  int64x2_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  const void *v188;
  uint64_t v189;
  char *v190;
  size_t v191;
  const void *v192;
  uint64_t v193;
  char *v194;
  size_t v195;
  const void *v196;
  uint64_t v197;
  char *v198;
  size_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  __int128 v215;
  const void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int64_t v221;
  unint64_t v222;
  void *v223;
  int64_t v224;
  uint64_t v225;
  void *v226;
  int64_t v227;
  uint64_t v228;
  void *v229;
  int64_t v230;
  uint64_t v231;
  void *v232;
  size_t v233;
  size_t v234;
  _QWORD *v235;
  void *v236;
  _QWORD *v237;
  void *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t k;
  uint64_t v251;
  void *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t m;
  uint64_t v277;
  void *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void *v283;
  void *v284;
  _BYTE *v285;
  __int128 v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  char *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v303;
  uint64_t *v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  timespec v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _BYTE *v312;
  _BYTE *v313;
  _BYTE *v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE *v320;
  _BYTE *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  void *v325;
  _BYTE *v326;
  void *v327;
  _BYTE *v328;
  __int128 v329[26];
  int v330;
  void *v331;
  _BYTE *v332;
  void *v333;
  _BYTE *v334;
  void *v335[2];
  _BYTE v336[32];
  __int128 v337;
  _BYTE v338[32];
  void *v339[2];
  _BYTE v340[32];
  __int128 v341;
  uint64_t v342;
  __int128 v343;
  uint64_t v344;
  int v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  __int128 v370;
  __int128 v371;
  _OWORD v372[2];
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  size_t v387;
  char v388;
  uint64_t v389;

  v389 = *MEMORY[0x24BDAC8D0];
  v306 = 0u;
  v307 = 0u;
  v305 = 0u;
  if (*(_BYTE *)a1)
    _ZF = &v305 == (__int128 *)a2;
  else
    _ZF = 1;
  v304 = (uint64_t *)a2;
  if (_ZF
    || (sub_20F13D910((uint64_t *)&v305, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)), sub_20EE62A1C((char **)&v306 + 1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3)), v7 = *((_QWORD *)&v305 + 1), v6 = v305, v304 = (uint64_t *)&v305, (_QWORD)v305 == *((_QWORD *)&v305 + 1)))
  {
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 4864) + 8056);
    v9 = *(unsigned __int8 *)(a1 + 1041);
    if (!*(_BYTE *)(a1 + 1041))
      goto LABEL_22;
    goto LABEL_20;
  }
  do
  {
    v10 = *(_QWORD *)(v6 + 8);
    v11 = *(_QWORD *)(v6 + 16);
    while (v10 != v11)
    {
      v13 = *(float64x2_t **)(v10 + 184);
      v12 = *(double **)(v10 + 192);
      if (v13 != (float64x2_t *)v12)
      {
        v14 = *(double *)(a1 + 3632);
        v15 = (char *)v12 - (char *)v13 - 8;
        v16 = *(double **)(v10 + 184);
        if (v15 < 0x18)
          goto LABEL_272;
        v17 = (v15 >> 3) + 1;
        v16 = &v13->f64[v17 & 0x3FFFFFFFFFFFFFFCLL];
        v18 = v13 + 1;
        v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = vmulq_n_f64(*v18, v14);
          v18[-1] = vmulq_n_f64(v18[-1], v14);
          *v18 = v20;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_272:
          do
          {
            *v16 = v14 * *v16;
            ++v16;
          }
          while (v16 != v12);
        }
      }
      v10 += 440;
    }
    v6 += 104;
  }
  while (v6 != v7);
  v304 = (uint64_t *)&v305;
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 4864) + 8056);
  v9 = *(unsigned __int8 *)(a1 + 1041);
  if (*(_BYTE *)(a1 + 1041))
  {
LABEL_20:
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 4848) + 2536))
      sub_20FD33228(v8);
  }
LABEL_22:
  v301 = (_QWORD *)(a2 + 24);
  v21 = sub_20FD32E5C((uint64_t)v8, (uint64_t *)(a2 + 24), **(_DWORD **)(*v304 + 8));
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 4848) + 2536) | v9)
  {
    v29 = *(_QWORD *)(a1 + 4848);
    goto LABEL_35;
  }
  v30 = *(_QWORD **)(a1 + 4864);
  v29 = *(_QWORD *)(a1 + 4848);
  if (v30[1012] < 2uLL)
    goto LABEL_35;
  v31 = v30[1011];
  if (v31 >= 2)
  {
    v32 = v30[1007];
    v34 = v32 + 32 * v31 - 64;
    goto LABEL_29;
  }
  v32 = v30[1007];
  v33 = (v30[1008] - v32) >> 5;
  v34 = v32 + 32 * (v31 + v33) - 64;
  if (v31)
  {
LABEL_29:
    v35 = 0;
    v33 = v30[1011];
    goto LABEL_30;
  }
  v35 = 1;
LABEL_30:
  v36 = v32 + 32 * v33;
  *(_DWORD *)v34 = *(_DWORD *)(v36 - 32);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v36 - 24);
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(v36 - 8);
  *(_QWORD *)(v34 + 16) += *(_QWORD *)(v36 - 16);
  if (v35)
    v31 = (v30[1008] - v32) >> 5;
  v37 = v32 + 32 * v31;
  *(_DWORD *)(v37 - 32) = 0;
  *(_QWORD *)(v37 - 16) = 0;
  *(_QWORD *)(v37 - 8) = 0;
  *(_QWORD *)(v37 - 24) = 0xBFF0000000000000;
  v38 = v30[1011];
  if (!v38)
    v38 = (v30[1008] - v32) >> 5;
  v30[1011] = v38 - 1;
  --v30[1012];
  v29 = *(_QWORD *)(a1 + 4848);
LABEL_35:
  v39 = *(_QWORD *)(a1 + 4856);
  v300 = *(_QWORD *)(a1 + 10744);
  v303 = v29;
  v40 = *(unsigned __int8 *)(v29 + 2560);
  v41 = v304[3];
  v42 = v304[4];
  v43 = atomic_load((unsigned __int8 *)&qword_254A62220);
  if ((v43 & 1) == 0)
  {
    v21 = __cxa_guard_acquire(&qword_254A62220);
    if ((_DWORD)v21)
    {
      qword_254A62250 = 0;
      qword_254A62258 = 0;
      v297 = operator new(0x20uLL);
      v297[1] = 0;
      v297[2] = 0;
      *((_BYTE *)v297 + 24) = 0;
      *v297 = &off_24C9F9028;
      *((_BYTE *)v297 + 26) = 0;
      qword_254A62250 = (uint64_t)(v297 + 3);
      qword_254A62258 = (uint64_t)v297;
      __cxa_atexit((void (*)(void *))sub_20F13E614, &qword_254A62250, &dword_20E81F000);
      __cxa_guard_release(&qword_254A62220);
    }
  }
  v44 = v41 == v42;
  v54 = v303;
  if (sub_20F13E67C(v21, v22, v23, v24, v25, v26, v27, v28, v40, SHIDWORD(v40), v44))
  {
    v55 = sub_210219C18();
    v56 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_57;
    LODWORD(v335[0]) = 67109376;
    HIDWORD(v335[0]) = v40;
    LOWORD(v335[1]) = 1024;
    *(_DWORD *)((char *)&v335[1] + 2) = v44;
    v299 = (char *)_os_log_send_and_compose_impl();
    v58 = strlen(v299);
    v308.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v308);
    tv_sec = v308.tv_sec;
    timespec_get(&v308, 1);
    sub_210219E20(v335, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v55 + 1), (__int128 *)(v55 + 5), "INIT: IsPoseTrackerInitialized: %{BOOL}d, IsIMUEmpty: %{BOOL}d", 0x3EuLL, v299, v58, tv_sec, &v308);
    std::mutex::lock(&stru_254A5A410);
    v60 = qword_254A5A458;
    for (i = unk_254A5A460; v60 != i; v60 += 40)
    {
      v62 = *(_QWORD *)(v60 + 32);
      if (!v62)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v62 + 48))(v62, v335);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v340[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v340[8]);
      v54 = v303;
      if ((v340[7] & 0x80000000) == 0)
      {
LABEL_44:
        if (!v338[24])
        {
LABEL_50:
          if (BYTE8(v337) && SBYTE7(v337) < 0)
            operator delete(*(void **)&v336[16]);
          if ((v336[15] & 0x80000000) != 0)
            operator delete(v335[1]);
          if (v299)
            free(v299);
LABEL_57:
          if (os_signpost_enabled((os_log_t)*v55))
          {
            LODWORD(v335[0]) = 67109376;
            HIDWORD(v335[0]) = v40;
            LOWORD(v335[1]) = 1024;
            *(_DWORD *)((char *)&v335[1] + 2) = v44;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_59;
        }
LABEL_48:
        if ((v338[23] & 0x80000000) != 0)
          operator delete(*(void **)v338);
        goto LABEL_50;
      }
    }
    else
    {
      v54 = v303;
      if ((v340[7] & 0x80000000) == 0)
        goto LABEL_44;
    }
    operator delete(v339[0]);
    if (!v338[24])
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_59:
  if (*(_BYTE *)(v54 + 2560))
  {
LABEL_60:
    sub_20F16A5F8((_QWORD *)v54, v304 + 3, v304);
    goto LABEL_61;
  }
  v68 = v304[4];
  if (v304[3] == v68)
    goto LABEL_61;
  _Q1 = *(_OWORD *)(v68 - 24);
  _D3 = *(_QWORD *)(v68 - 16);
  __asm { FMLA            D2, D3, V1.D[1] }
  if (vabdd_f64(sqrt(_D2 + *(double *)(v68 - 8) * *(double *)(v68 - 8)), *(double *)(v39 + 264)) <= *(double *)(v39 + 248))
  {
    v51.f64[0] = *(float64_t *)(v68 - 32);
    *(_QWORD *)&v159.f64[0] = *(_OWORD *)&vabsq_f64(v51);
    v159.f64[1] = NAN;
    v75 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(*(float64x2_t *)(v68 - 48)), v159)) > *(double *)(v39 + 256);
  }
  else
  {
    v75 = 1;
  }
  v160 = atomic_load((unsigned __int8 *)&qword_254A62228);
  if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_254A62228))
  {
    qword_254A62260 = 0;
    qword_254A62268 = 0;
    v298 = operator new(0x20uLL);
    v298[1] = 0;
    v298[2] = 0;
    *v298 = &off_24C9F6898;
    *((_WORD *)v298 + 12) = 0;
    qword_254A62260 = (uint64_t)(v298 + 3);
    qword_254A62268 = (uint64_t)v298;
    __cxa_atexit((void (*)(void *))sub_20EFF38D8, &qword_254A62260, &dword_20E81F000);
    __cxa_guard_release(&qword_254A62228);
  }
  if (sub_20EFF3940((BOOL **)&qword_254A62260, 0, v45, v46, v47, v48, v49, v50, v75))
  {
    v161 = sub_210219C18();
    v162 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v163 = atomic_load(&qword_254A5A450);
    v164 = &xmmword_2102EF000;
    if (!v163)
      goto LABEL_137;
    LODWORD(v335[0]) = 67109120;
    HIDWORD(v335[0]) = v75;
    v165 = (char *)_os_log_send_and_compose_impl();
    v166 = strlen(v165);
    v308.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v308);
    v167 = v308.tv_sec;
    timespec_get(&v308, 1);
    sub_210219E20(v335, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v161 + 1), (__int128 *)(v161 + 5), "INIT: IsMotionTooLargeForInitialization: %{BOOL}d", 0x31uLL, v165, v166, v167, &v308);
    std::mutex::lock(&stru_254A5A410);
    v168 = qword_254A5A458;
    for (j = unk_254A5A460; v168 != j; v168 += 40)
    {
      v170 = *(_QWORD *)(v168 + 32);
      if (!v170)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v170 + 48))(v170, v335);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v340[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v340[8]);
      v164 = &xmmword_2102EF000;
      if ((v340[7] & 0x80000000) == 0)
      {
LABEL_122:
        if (!v338[24])
        {
LABEL_130:
          if (BYTE8(v337) && SBYTE7(v337) < 0)
            operator delete(*(void **)&v336[16]);
          if ((v336[15] & 0x80000000) != 0)
            operator delete(v335[1]);
          if (v165)
            free(v165);
LABEL_137:
          if (os_signpost_enabled((os_log_t)*v161))
          {
            LODWORD(v335[0]) = *((_QWORD *)v164 + 7);
            HIDWORD(v335[0]) = v75;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_139;
        }
LABEL_128:
        if ((v338[23] & 0x80000000) != 0)
          operator delete(*(void **)v338);
        goto LABEL_130;
      }
    }
    else
    {
      v164 = &xmmword_2102EF000;
      if ((v340[7] & 0x80000000) == 0)
        goto LABEL_122;
    }
    operator delete(v339[0]);
    if (!v338[24])
      goto LABEL_130;
    goto LABEL_128;
  }
LABEL_139:
  sub_20F0A4FB4(v39);
  if (*(_BYTE *)(v39 + 489))
  {
    sub_20F404F8C((uint64_t)&v308, (__int128 *)(v39 + 496), (double *)(v39 + 664), **(_DWORD **)(*v304 + 8), *(double *)(*(_QWORD *)(*v304 + 8) + 8) + *(double *)(*(_QWORD *)(*v304 + 8) + 16));
    v185 = v310;
    if (v311 - v310 >= 1)
    {
      v186 = *(_QWORD *)(**(_QWORD **)(v303 + 736) + 8);
      v187 = (v311 - v310) / 0x680uLL + 1;
      do
      {
        v185 = sub_20EB8200C(v185, v186) + 1664;
        --v187;
      }
      while (v187 > 1);
    }
    sub_20F0ED1B8(v303 + 760, (__int128 *)(v39 + 496), (uint64_t **)(v303 + 736), v303, (__int128 *)(v303 + 632), v300);
    *(_BYTE *)(v303 + 2560) = 1;
    v335[1] = 0;
    v335[0] = 0;
    *(_QWORD *)v336 = 0;
    v188 = (const void *)v308.tv_sec;
    v189 = v308.tv_nsec - v308.tv_sec;
    if (v308.tv_nsec != v308.tv_sec)
    {
      if (0xCF3CF3CF3CF3CF3DLL * (v189 >> 3) >= 0x186186186186187)
        sub_20E867F44();
      v190 = (char *)operator new(v308.tv_nsec - v308.tv_sec);
      v335[0] = v190;
      v335[1] = v190;
      *(_QWORD *)v336 = &v190[8 * (v189 >> 3)];
      v191 = 168 * ((v189 - 168) / 0xA8uLL) + 168;
      memcpy(v190, v188, v191);
      v335[1] = &v190[v191];
    }
    memset(&v336[8], 0, 24);
    sub_20EA89974((uint64_t)&v336[8], v310, v311, 0x4EC4EC4EC4EC4EC5 * ((v311 - v310) >> 7));
    v337 = 0uLL;
    *(_QWORD *)v338 = 0;
    v192 = v312;
    v193 = v313 - v312;
    if (v313 != v312)
    {
      if (v193 < 0)
        sub_20E95E0B0();
      v194 = (char *)operator new(v313 - v312);
      *(_QWORD *)&v337 = v194;
      *((_QWORD *)&v337 + 1) = v194;
      *(_QWORD *)v338 = &v194[32 * (v193 >> 5)];
      v195 = v193 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v194, v192, v195);
      *((_QWORD *)&v337 + 1) = &v194[v195];
    }
    memset(&v338[8], 0, 24);
    v196 = v314;
    v197 = v315 - v314;
    if (v315 != v314)
    {
      if (v197 < 0)
        sub_20E95E0B0();
      v198 = (char *)operator new(v315 - v314);
      *(_QWORD *)&v338[8] = v198;
      *(_QWORD *)&v338[16] = v198;
      *(_QWORD *)&v338[24] = &v198[32 * (v197 >> 5)];
      v199 = v197 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v198, v196, v199);
      *(_QWORD *)&v338[16] = &v198[v199];
    }
    v339[1] = 0;
    v339[0] = 0;
    *(_QWORD *)v340 = 0;
    v200 = v316;
    v201 = v317;
    v202 = v317 - v316;
    if (v317 != v316)
    {
      if (v202 < 0)
        sub_20E867F44();
      v203 = (char *)operator new(v317 - v316);
      v204 = 0;
      v339[0] = v203;
      v339[1] = v203;
      *(_QWORD *)v340 = &v203[32 * (v202 >> 5)];
      do
      {
        v205 = v200 + v204;
        v206 = &v203[v204];
        v207 = *(_OWORD *)(v200 + v204);
        *((_QWORD *)v206 + 2) = *(_QWORD *)(v200 + v204 + 16);
        *(_OWORD *)v206 = v207;
        *((_QWORD *)v206 + 3) = *(_QWORD *)(v200 + v204 + 24);
        v204 += 32;
      }
      while (v205 + 32 != v201);
      v339[1] = &v203[v204];
    }
    memset(&v340[8], 0, 24);
    v208 = v318;
    v209 = v319;
    v210 = v319 - v318;
    if (v319 != v318)
    {
      if (v210 < 0)
        sub_20E867F44();
      v211 = (char *)operator new(v319 - v318);
      v212 = 0;
      *(_QWORD *)&v340[8] = v211;
      *(_QWORD *)&v340[16] = v211;
      *(_QWORD *)&v340[24] = &v211[32 * (v210 >> 5)];
      do
      {
        v213 = v208 + v212;
        v214 = &v211[v212];
        v215 = *(_OWORD *)(v208 + v212);
        *((_QWORD *)v214 + 2) = *(_QWORD *)(v208 + v212 + 16);
        *(_OWORD *)v214 = v215;
        *((_QWORD *)v214 + 3) = *(_QWORD *)(v208 + v212 + 24);
        v212 += 32;
      }
      while (v213 + 32 != v209);
      *(_QWORD *)&v340[16] = &v211[v212];
    }
    v341 = 0uLL;
    v342 = 0;
    v216 = v320;
    v217 = v321 - v320;
    if (v321 != v320)
    {
      if (v217 < 0)
        sub_20E867F44();
      *(_QWORD *)&v341 = operator new(v321 - v320);
      *((_QWORD *)&v341 + 1) = v341;
      v218 = v341 + 32 * (v217 >> 5);
      v342 = v218;
      memcpy((void *)v341, v216, v217 - 4);
      *((_QWORD *)&v341 + 1) = v218;
    }
    v343 = 0uLL;
    v344 = 0;
    v219 = v322;
    v220 = v323;
    v221 = v323 - v322;
    if (v323 != v322)
    {
      v222 = 0xAAAAAAAAAAAAAAABLL * (v221 >> 3);
      if (v222 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      *(_QWORD *)&v343 = operator new(v221);
      *((_QWORD *)&v343 + 1) = v343;
      v344 = v343 + 24 * v222;
      *((_QWORD *)&v343 + 1) = sub_20F13E790((uint64_t)&v344, v219, v220, (_QWORD *)v343);
    }
    v345 = v324;
    v347 = 0;
    v346 = 0uLL;
    v223 = v325;
    v224 = v326 - (_BYTE *)v325;
    if (v326 != v325)
    {
      if (v224 < 0)
        sub_20EABADD4();
      *(_QWORD *)&v346 = operator new(v326 - (_BYTE *)v325);
      *((_QWORD *)&v346 + 1) = v346;
      v225 = v346 + 4 * (v224 >> 2);
      v347 = v225;
      memcpy((void *)v346, v223, v224);
      *((_QWORD *)&v346 + 1) = v225;
    }
    v348 = 0uLL;
    v349 = 0;
    v226 = v327;
    v227 = v328 - (_BYTE *)v327;
    if (v328 != v327)
    {
      if (v227 < 0)
        sub_20E867F44();
      *(_QWORD *)&v348 = operator new(v328 - (_BYTE *)v327);
      *((_QWORD *)&v348 + 1) = v348;
      v228 = v348 + 8 * (v227 >> 3);
      v349 = v228;
      memcpy((void *)v348, v226, v227);
      *((_QWORD *)&v348 + 1) = v228;
    }
    sub_20F04F210((uint64_t)&v350, v329);
    v383 = v330;
    v384 = 0uLL;
    v385 = 0;
    v229 = v331;
    v230 = v332 - (_BYTE *)v331;
    if (v332 != v331)
    {
      if (v230 < 0)
        sub_20E867F44();
      *(_QWORD *)&v384 = operator new(v332 - (_BYTE *)v331);
      *((_QWORD *)&v384 + 1) = v384;
      v231 = v384 + 8 * (v230 >> 3);
      v385 = v231;
      memcpy((void *)v384, v229, v230);
      *((_QWORD *)&v384 + 1) = v231;
    }
    v386 = 0u;
    v387 = 0;
    v232 = v333;
    v233 = v334 - (_BYTE *)v333;
    if (v334 != v333)
    {
      if ((v233 & 0x8000000000000000) != 0)
        sub_20E867F44();
      *(_QWORD *)&v386 = operator new(v334 - (_BYTE *)v333);
      *((_QWORD *)&v386 + 1) = v386;
      v234 = v386 + v233;
      v387 = v386 + v233;
      memcpy((void *)v386, v232, v233);
      *((_QWORD *)&v386 + 1) = v234;
    }
    v235 = (_QWORD *)(v39 + 3336);
    v388 = 1;
    if (*(_BYTE *)(v39 + 3360))
    {
      sub_20F13E8CC(v39 + 2640, (uint64_t)v335);
      v237 = (_QWORD *)(v39 + 2840);
      v236 = *(void **)(v39 + 2840);
      if (v236)
      {
        *(_QWORD *)(v39 + 2848) = v236;
        operator delete(v236);
        *v237 = 0;
        *(_QWORD *)(v39 + 2848) = 0;
        *(_QWORD *)(v39 + 2856) = 0;
      }
      *(_OWORD *)v237 = v346;
      *(_QWORD *)(v39 + 2856) = v347;
      v346 = 0uLL;
      v347 = 0;
      v238 = *(void **)(v39 + 2864);
      if (v238)
      {
        *(_QWORD *)(v39 + 2872) = v238;
        operator delete(v238);
        *(_QWORD *)(v39 + 2864) = 0;
        *(_QWORD *)(v39 + 2872) = 0;
        *(_QWORD *)(v39 + 2880) = 0;
      }
      *(_OWORD *)(v39 + 2864) = v348;
      *(_QWORD *)(v39 + 2880) = v349;
      v349 = 0;
      v348 = 0uLL;
      v239 = v363;
      *(_OWORD *)(v39 + 3080) = v362;
      *(_OWORD *)(v39 + 3096) = v239;
      *(_QWORD *)(v39 + 3112) = v364;
      v240 = v359;
      *(_OWORD *)(v39 + 3016) = v358;
      *(_OWORD *)(v39 + 3032) = v240;
      v241 = v361;
      *(_OWORD *)(v39 + 3048) = v360;
      *(_OWORD *)(v39 + 3064) = v241;
      v242 = v355;
      *(_OWORD *)(v39 + 2952) = v354;
      *(_OWORD *)(v39 + 2968) = v242;
      v243 = v357;
      *(_OWORD *)(v39 + 2984) = v356;
      *(_OWORD *)(v39 + 3000) = v243;
      v244 = v351;
      *(_OWORD *)(v39 + 2888) = v350;
      *(_OWORD *)(v39 + 2904) = v244;
      v245 = v353;
      *(_OWORD *)(v39 + 2920) = v352;
      *(_OWORD *)(v39 + 2936) = v245;
      sub_20EB0F138(v39 + 3120, &v365);
      v246 = v371;
      *(_OWORD *)(v39 + 3160) = v370;
      *(_OWORD *)(v39 + 3176) = v246;
      *(_OWORD *)(v39 + 3192) = v372[0];
      *(_OWORD *)(v39 + 3204) = *(_OWORD *)((char *)v372 + 12);
      if (*(_QWORD *)(v39 + 3248))
      {
        v247 = *(_QWORD **)(v39 + 3240);
        if (v247)
        {
          do
          {
            v248 = (_QWORD *)*v247;
            operator delete(v247);
            v247 = v248;
          }
          while (v248);
        }
        *(_QWORD *)(v39 + 3240) = 0;
        v249 = *(_QWORD *)(v39 + 3232);
        if (v249)
        {
          for (k = 0; k != v249; ++k)
            *(_QWORD *)(*(_QWORD *)(v39 + 3224) + 8 * k) = 0;
        }
        *(_QWORD *)(v39 + 3248) = 0;
      }
      v251 = v373;
      v373 = 0;
      v252 = *(void **)(v39 + 3224);
      *(_QWORD *)(v39 + 3224) = v251;
      if (v252)
        operator delete(v252);
      v253 = v374;
      *(_QWORD *)(v39 + 3232) = v374;
      v374 = 0;
      v254 = v376;
      *(_QWORD *)(v39 + 3248) = v376;
      *(_DWORD *)(v39 + 3256) = v377;
      v255 = v375;
      *(_QWORD *)(v39 + 3240) = v375;
      if (v254)
      {
        v256 = *(_QWORD *)(v255 + 8);
        if ((v253 & (v253 - 1)) != 0)
        {
          if (v256 >= v253)
            v256 %= v253;
        }
        else
        {
          v256 &= v253 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v39 + 3224) + 8 * v256) = v39 + 3240;
        v375 = 0;
        v376 = 0;
      }
      if (*(_QWORD *)(v39 + 3288))
      {
        v273 = *(_QWORD **)(v39 + 3280);
        if (v273)
        {
          do
          {
            v274 = (_QWORD *)*v273;
            operator delete(v273);
            v273 = v274;
          }
          while (v274);
        }
        *(_QWORD *)(v39 + 3280) = 0;
        v275 = *(_QWORD *)(v39 + 3272);
        if (v275)
        {
          for (m = 0; m != v275; ++m)
            *(_QWORD *)(*(_QWORD *)(v39 + 3264) + 8 * m) = 0;
        }
        *(_QWORD *)(v39 + 3288) = 0;
      }
      v277 = v378;
      v378 = 0;
      v278 = *(void **)(v39 + 3264);
      *(_QWORD *)(v39 + 3264) = v277;
      if (v278)
        operator delete(v278);
      v279 = v379;
      *(_QWORD *)(v39 + 3272) = v379;
      v379 = 0;
      v280 = v381;
      *(_QWORD *)(v39 + 3288) = v381;
      *(_DWORD *)(v39 + 3296) = v382;
      v281 = v380;
      *(_QWORD *)(v39 + 3280) = v380;
      if (v280)
      {
        v282 = *(_QWORD *)(v281 + 8);
        if ((v279 & (v279 - 1)) != 0)
        {
          if (v282 >= v279)
            v282 %= v279;
        }
        else
        {
          v282 &= v279 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v39 + 3264) + 8 * v282) = v39 + 3280;
        v380 = 0;
        v381 = 0;
      }
      *(_DWORD *)(v39 + 3304) = v383;
      v283 = *(void **)(v39 + 3312);
      if (v283)
      {
        *(_QWORD *)(v39 + 3320) = v283;
        operator delete(v283);
        *(_QWORD *)(v39 + 3312) = 0;
        *(_QWORD *)(v39 + 3320) = 0;
        *(_QWORD *)(v39 + 3328) = 0;
      }
      *(_OWORD *)(v39 + 3312) = v384;
      *(_QWORD *)(v39 + 3328) = v385;
      v384 = 0uLL;
      v385 = 0;
      v284 = *(void **)(v39 + 3336);
      if (v284)
      {
        *(_QWORD *)(v39 + 3344) = v284;
        operator delete(v284);
        *v235 = 0;
        *(_QWORD *)(v39 + 3344) = 0;
        *(_QWORD *)(v39 + 3352) = 0;
      }
      *(_OWORD *)v235 = v386;
      *(_QWORD *)(v39 + 3352) = v387;
      v386 = 0uLL;
      v387 = 0;
      v54 = v303;
      sub_20F0AE188((uint64_t)v335);
      v285 = v333;
      if (!v333)
        goto LABEL_224;
    }
    else
    {
      *(_OWORD *)(v39 + 2640) = *(_OWORD *)v335;
      *(_QWORD *)(v39 + 2656) = *(_QWORD *)v336;
      *(_QWORD *)v336 = 0;
      v335[1] = 0;
      v335[0] = 0;
      *(_OWORD *)(v39 + 2664) = *(_OWORD *)&v336[8];
      *(_QWORD *)(v39 + 2680) = *(_QWORD *)&v336[24];
      memset(&v336[8], 0, 24);
      *(_OWORD *)(v39 + 2688) = v337;
      *(_QWORD *)(v39 + 2704) = *(_QWORD *)v338;
      *(_QWORD *)v338 = 0;
      v337 = 0uLL;
      *(_OWORD *)(v39 + 2712) = *(_OWORD *)&v338[8];
      *(_QWORD *)(v39 + 2728) = *(_QWORD *)&v338[24];
      memset(&v338[8], 0, 24);
      *(_OWORD *)(v39 + 2736) = *(_OWORD *)v339;
      *(_QWORD *)(v39 + 2752) = *(_QWORD *)v340;
      v339[1] = 0;
      *(_QWORD *)v340 = 0;
      v339[0] = 0;
      *(_OWORD *)(v39 + 2760) = *(_OWORD *)&v340[8];
      *(_QWORD *)(v39 + 2776) = *(_QWORD *)&v340[24];
      memset(&v340[8], 0, 24);
      *(_OWORD *)(v39 + 2784) = v341;
      *(_QWORD *)(v39 + 2800) = v342;
      v341 = 0uLL;
      v342 = 0;
      *(_OWORD *)(v39 + 2808) = v343;
      *(_QWORD *)(v39 + 2824) = v344;
      v344 = 0;
      v343 = 0uLL;
      *(_DWORD *)(v39 + 2832) = v345;
      *(_OWORD *)(v39 + 2840) = v346;
      *(_QWORD *)(v39 + 2856) = v347;
      v346 = 0uLL;
      v347 = 0;
      *(_OWORD *)(v39 + 2864) = v348;
      v257 = v365;
      *(_QWORD *)(v39 + 2880) = v349;
      v348 = 0uLL;
      v349 = 0;
      v258 = v350;
      v259 = v352;
      v260 = v353;
      *(_OWORD *)(v39 + 2904) = v351;
      *(_OWORD *)(v39 + 2920) = v259;
      *(_OWORD *)(v39 + 2888) = v258;
      v261 = v354;
      v262 = v356;
      v263 = v357;
      *(_OWORD *)(v39 + 2968) = v355;
      *(_OWORD *)(v39 + 2984) = v262;
      *(_OWORD *)(v39 + 2936) = v260;
      *(_OWORD *)(v39 + 2952) = v261;
      v264 = v358;
      v265 = v360;
      v266 = v361;
      *(_OWORD *)(v39 + 3032) = v359;
      *(_OWORD *)(v39 + 3048) = v265;
      *(_OWORD *)(v39 + 3000) = v263;
      *(_OWORD *)(v39 + 3016) = v264;
      v267 = v362;
      v268 = v363;
      *(_QWORD *)(v39 + 3112) = v364;
      *(_OWORD *)(v39 + 3080) = v267;
      *(_OWORD *)(v39 + 3096) = v268;
      *(_OWORD *)(v39 + 3064) = v266;
      v269 = v366;
      v270 = v367;
      v366 = 0;
      v365 = 0;
      *(_QWORD *)(v39 + 3120) = v257;
      *(_QWORD *)(v39 + 3128) = v269;
      *(_QWORD *)(v39 + 3136) = v270;
      v271 = v368;
      *(_QWORD *)(v39 + 3144) = v368;
      *(_DWORD *)(v39 + 3152) = v369;
      v54 = v303;
      if (v271)
      {
        v272 = *(_QWORD *)(v270 + 8);
        if ((v269 & (v269 - 1)) != 0)
        {
          if (v272 >= v269)
            v272 %= v269;
        }
        else
        {
          v272 &= v269 - 1;
        }
        *(_QWORD *)(v257 + 8 * v272) = v39 + 3136;
        v367 = 0;
        v368 = 0;
      }
      v286 = v371;
      *(_OWORD *)(v39 + 3160) = v370;
      *(_OWORD *)(v39 + 3176) = v286;
      *(_OWORD *)(v39 + 3192) = v372[0];
      *(_OWORD *)(v39 + 3204) = *(_OWORD *)((char *)v372 + 12);
      v287 = v373;
      v288 = v374;
      v374 = 0;
      v373 = 0;
      *(_QWORD *)(v39 + 3224) = v287;
      *(_QWORD *)(v39 + 3232) = v288;
      v289 = v375;
      *(_QWORD *)(v39 + 3240) = v375;
      v290 = v376;
      *(_QWORD *)(v39 + 3248) = v376;
      *(_DWORD *)(v39 + 3256) = v377;
      if (v290)
      {
        v291 = *(_QWORD *)(v289 + 8);
        if ((v288 & (v288 - 1)) != 0)
        {
          if (v291 >= v288)
            v291 %= v288;
        }
        else
        {
          v291 &= v288 - 1;
        }
        *(_QWORD *)(v287 + 8 * v291) = v39 + 3240;
        v375 = 0;
        v376 = 0;
      }
      v292 = v378;
      v293 = v379;
      v379 = 0;
      v378 = 0;
      *(_QWORD *)(v39 + 3264) = v292;
      *(_QWORD *)(v39 + 3272) = v293;
      v294 = v380;
      *(_QWORD *)(v39 + 3280) = v380;
      v295 = v381;
      *(_QWORD *)(v39 + 3288) = v381;
      *(_DWORD *)(v39 + 3296) = v382;
      if (v295)
      {
        v296 = *(_QWORD *)(v294 + 8);
        if ((v293 & (v293 - 1)) != 0)
        {
          if (v296 >= v293)
            v296 %= v293;
        }
        else
        {
          v296 &= v293 - 1;
        }
        *(_QWORD *)(v292 + 8 * v296) = v39 + 3280;
        v380 = 0;
        v381 = 0;
      }
      *(_DWORD *)(v39 + 3304) = v383;
      *(_OWORD *)(v39 + 3312) = v384;
      *(_QWORD *)(v39 + 3328) = v385;
      v385 = 0;
      v384 = 0uLL;
      *(_OWORD *)v235 = v386;
      *(_QWORD *)(v39 + 3352) = v387;
      v386 = 0uLL;
      v387 = 0;
      *(_BYTE *)(v39 + 3360) = 1;
      sub_20F0AE188((uint64_t)v335);
      v285 = v333;
      if (!v333)
        goto LABEL_224;
    }
    v334 = v285;
    operator delete(v285);
LABEL_224:
    if (v331)
    {
      v332 = v331;
      operator delete(v331);
    }
    sub_20F04F084(v329);
    if (v327)
    {
      v328 = v327;
      operator delete(v327);
    }
    if (v325)
    {
      v326 = v325;
      operator delete(v325);
    }
    sub_20F028B60((uint64_t)&v308);
    goto LABEL_60;
  }
LABEL_61:
  v63 = (_QWORD *)(a1 + 10440);
  if (*(_BYTE *)(a1 + 10488))
  {
    v64 = (_QWORD *)*v63;
    if (*v63)
    {
      v65 = *(_QWORD **)(a1 + 10448);
      v66 = (_QWORD *)*v63;
      if (v65 != v64)
      {
        do
        {
          v65 -= 13;
          sub_20E9905B4(v65);
        }
        while (v65 != v64);
        v66 = (_QWORD *)*v63;
      }
      *(_QWORD *)(a1 + 10448) = v64;
      operator delete(v66);
      *v63 = 0;
      *(_QWORD *)(a1 + 10448) = 0;
      *(_QWORD *)(a1 + 10456) = 0;
    }
    *(_OWORD *)v63 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 10456) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v67 = *(void **)(a1 + 10464);
    if (v67)
    {
      *(_QWORD *)(a1 + 10472) = v67;
      operator delete(v67);
      *(_QWORD *)(a1 + 10464) = 0;
      *(_QWORD *)(a1 + 10472) = 0;
      *(_QWORD *)(a1 + 10480) = 0;
    }
    *(_OWORD *)(a1 + 10464) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 10480) = *(_QWORD *)(a2 + 40);
    *v301 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    if (*(int *)(a1 + 4904) <= 0)
      goto LABEL_103;
  }
  else
  {
    *v63 = 0;
    *(_QWORD *)(a1 + 10448) = 0;
    *(_QWORD *)(a1 + 10456) = 0;
    *(_OWORD *)v63 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 10456) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 10472) = 0;
    *(_QWORD *)(a1 + 10464) = 0;
    *(_QWORD *)(a1 + 10480) = 0;
    *(_OWORD *)(a1 + 10464) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 10480) = *(_QWORD *)(a2 + 40);
    *v301 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 10488) = 1;
    if (*(int *)(a1 + 4904) <= 0)
    {
LABEL_103:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 96) = 0;
      goto LABEL_104;
    }
  }
  v76 = *(_QWORD *)(a1 + 4848);
  v77 = *(_QWORD *)(v76 + 848);
  if (!v77)
  {
    v81 = *(_QWORD *)(v76 + 824);
    v78 = *(_QWORD *)(v76 + 816);
    v80 = 0x8F9C18F9C18F9C19 * ((v81 - v78) >> 3);
    v79 = v81 - 328;
    goto LABEL_79;
  }
  v78 = *(_QWORD *)(v76 + 816);
  v79 = v78 + 328 * v77 - 328;
  if (v77 == 1)
  {
    v80 = 0x8F9C18F9C18F9C19 * ((*(_QWORD *)(v76 + 824) - v78) >> 3);
LABEL_79:
    v77 += v80;
  }
  v82 = v78 + 328 * (v77 - 2);
  v83 = *(_QWORD **)(a1 + 4864);
  v84 = (_DWORD *)v83[310];
  v85 = (_DWORD *)v83[311];
  if (v84 == v85)
    goto LABEL_103;
  v86 = (_DWORD *)v83[310];
  while (*v86 != *(_DWORD *)v82)
  {
    if (++v86 == v85)
    {
      v86 = (_DWORD *)v83[311];
      break;
    }
  }
  if (v86 == v85)
    goto LABEL_103;
  v87 = v83[285] + 168 * (v86 - v84);
  if (!*(_BYTE *)(a1 + 624) && !*(_BYTE *)(a1 + 1084))
  {
    v308.tv_sec = 0;
    v308.tv_nsec = 0;
    v309 = 0;
    sub_20FD33470(v83 + 1007, (uint64_t)&v308, *(double *)(v82 + 8), *(double *)(v79 + 8));
    v171 = *(int64x2_t *)v87;
    v172 = *(_OWORD *)(v87 + 32);
    *(_OWORD *)v336 = *(_OWORD *)(v87 + 16);
    *(_OWORD *)&v336[16] = v172;
    *(int64x2_t *)v335 = v171;
    v173 = *(_OWORD *)(v87 + 48);
    v174 = *(_OWORD *)(v87 + 64);
    v175 = *(_OWORD *)(v87 + 96);
    *(_OWORD *)&v338[16] = *(_OWORD *)(v87 + 80);
    *(_OWORD *)v339 = v175;
    v337 = v173;
    *(_OWORD *)v338 = v174;
    v176 = *(_OWORD *)(v87 + 112);
    v177 = *(_OWORD *)(v87 + 128);
    v178 = *(_OWORD *)(v87 + 144);
    v342 = *(_QWORD *)(v87 + 160);
    v341 = v178;
    *(_OWORD *)&v340[16] = v177;
    *(_OWORD *)v340 = v176;
    sub_20F4BA010((uint64_t)v335, *(_QWORD *)(a1 + 4864) + 4752, &v308.tv_sec);
    v179 = *(_OWORD *)v335;
    v180 = *(_OWORD *)v336;
    v181 = *(_OWORD *)&v336[16];
    v182 = v337;
    v183 = v341;
    v184 = v342;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)v338;
    *(_OWORD *)(a3 + 32) = v181;
    *(_OWORD *)(a3 + 48) = v182;
    *(_OWORD *)a3 = v179;
    *(_OWORD *)(a3 + 16) = v180;
    *(_QWORD *)(a3 + 88) = v184;
    *(_OWORD *)(a3 + 72) = v183;
    *(_BYTE *)(a3 + 96) = 1;
    if (v308.tv_sec)
    {
      v308.tv_nsec = v308.tv_sec;
      operator delete((void *)v308.tv_sec);
    }
    goto LABEL_104;
  }
  v88 = *(_QWORD *)(v76 + 2600);
  if (v88)
  {
    if (!**(_DWORD **)(*(_QWORD *)(v76 + 2568) + 32 * v88 - 24))
      goto LABEL_92;
LABEL_95:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1866, (uint64_t)"camera_id == nav_->StateIDandIntrinsics().back_n(1).camera_set_intrinsic_vec.front().camera_id", 94, (uint64_t)"It's assumed the first camera ID is 0", 37, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v76 = *(_QWORD *)(a1 + 4848);
    if (!*(_BYTE *)(v76 + 760))
      goto LABEL_103;
    goto LABEL_97;
  }
  if (**(_DWORD **)(*(_QWORD *)(v76 + 2568)
                   + 32 * ((uint64_t)(*(_QWORD *)(v76 + 2576) - *(_QWORD *)(v76 + 2568)) >> 5)
                   - 24))
    goto LABEL_95;
LABEL_92:
  if (!*(_BYTE *)(v76 + 760))
    goto LABEL_103;
LABEL_97:
  v89 = *(_QWORD *)(v76 + 1016);
  if (!v89)
    goto LABEL_103;
  v90 = *(_QWORD *)(v76 + 1000);
  v91 = *(_QWORD *)(v76 + 984);
  v92 = *(_QWORD *)(v76 + 976);
  v93 = 0xCCCCCCCCCCCCCCCDLL * ((v91 - v92) >> 5);
  while (1)
  {
    v94 = v92 + 160 * (v90 % v93);
    if (!*(_DWORD *)(v94 + 16) && *(_DWORD *)(v94 + 12) == *(_DWORD *)v79)
      break;
    ++v90;
    if (!--v89)
      goto LABEL_103;
  }
  v95 = *(double *)(v94 + 48);
  v96 = *(double *)(v94 + 56);
  v98 = *(double *)(v94 + 64);
  v97 = *(double *)(v94 + 72);
  v100 = *(double *)(v94 + 80);
  v99 = *(double *)(v94 + 88);
  v102 = *(double *)(v94 + 96);
  v101 = *(double *)(v94 + 104);
  v103 = *(double *)(v94 + 112);
  v104 = *(double *)(v94 + 120);
  v106 = *(double *)(v94 + 128);
  v105 = *(double *)(v94 + 136);
  v107 = *(_QWORD *)(*(_QWORD *)(a1 + 4824) + 8);
  v52.i64[0] = *(_QWORD *)(v107 + 16);
  _Q2.i64[0] = *(_QWORD *)(v107 + 40);
  v108 = *(float64x2_t *)(v107 + 24);
  _D4 = *(double *)(v107 + 64);
  v110 = *(float64x2_t *)(v107 + 48);
  v111 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v107, (int64x2_t)v108);
  _Q5 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v107, (int64x2_t)v108);
  v113 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q5, 1);
  _Q30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q5.f64[0], 0);
  _D31 = *(double *)(v107 + 88);
  _Q8 = *(float64x2_t *)(v107 + 72);
  _Q3 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v111, vnegq_f64(_Q8).f64[0]), _Q5, _Q8, 1), (float64x2_t)vzip1q_s64(v52, (int64x2_t)_Q2), _D31, 0);
  _D23 = *(_QWORD *)(v107 + 56);
  __asm
  {
    FMLS            D5, D23, V8.D[1]
    FMLS            D5, D4, V31.D[0]
  }
  v119 = (int64x2_t)vextq_s8((int8x16_t)_Q30, (int8x16_t)v113, 8uLL);
  v120 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v107, v119);
  v121 = (float64x2_t)vzip2q_s64((int64x2_t)v111, v119);
  v113.f64[0] = *(float64_t *)(v107 + 48);
  *(_QWORD *)&v113.f64[1] = vdupq_laneq_s64((int64x2_t)v110, 1).u64[0];
  v122 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v120, vnegq_f64(_Q3).f64[0]), v121, _Q3, 1), v113, _Q5.f64[0], 0);
  __asm
  {
    FMLS            D30, D2, V3.D[1]
    FMLS            D30, D4, V5.D[0]
  }
  v123 = vextq_s8((int8x16_t)v121, _Q2, 8uLL);
  *(_QWORD *)&v121.f64[1] = v123.i64[0];
  _Q30.f64[1] = 1.0;
  _Q23 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v95), v121, v100), v113, v103), (float64x2_t)0, v122);
  v125 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52.u64[0], v95), (float64x2_t)v123.u64[1], v100), (float64x2_t)*(unint64_t *)&_D4, v103), (float64x2_t)0, _Q30);
  v126 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v96), v121, v99), v113, v104), (float64x2_t)0, v122);
  _Q25 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52.u64[0], v96), (float64x2_t)v123.u64[1], v99), (float64x2_t)*(unint64_t *)&_D4, v104), (float64x2_t)0, _Q30);
  v128 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v98), v121, v102), v113, v106), (float64x2_t)0, v122);
  v129 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52.u64[0], v98), (float64x2_t)v123.u64[1], v102), (float64x2_t)*(unint64_t *)&_D4, v106), (float64x2_t)0, _Q30);
  v130 = vaddq_f64(v122, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v120, v97), v121, v101), v113, v105));
  v131 = vaddq_f64(_Q30, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v52.u64[0], v97), (float64x2_t)v123.u64[1], v101), (float64x2_t)*(unint64_t *)&_D4, v105));
  v132 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q23, *(double *)v107), v126, v108.f64[0]), v128, v110.f64[0]), (float64x2_t)0, v130);
  v133 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v125, *(double *)v107), _Q25, v108.f64[0]), v129, v110.f64[0]), (float64x2_t)0, v131);
  v134 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q23, *(float64x2_t *)v107, 1), v126, v108, 1), v128, v110, 1), (float64x2_t)0, v130);
  v135 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v125, *(float64x2_t *)v107, 1), _Q25, v108, 1), v129, v110, 1), (float64x2_t)0, v131);
  v136 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q23, *(double *)v52.i64), v126, *(double *)_Q2.i64), v128, _D4), (float64x2_t)0, v130);
  v137 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v125, *(double *)v52.i64), _Q25, *(double *)_Q2.i64), v129, _D4), (float64x2_t)0, v131);
  v138 = vaddq_f64(v130, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q23, _Q3.f64[0]), v126, _Q3, 1), v128, _Q5.f64[0]));
  v139 = vaddq_f64(v131, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v125, _Q3.f64[0]), _Q25, _Q3, 1), v129, _Q5.f64[0]));
  _Q23.f64[0] = *(float64_t *)(v87 + 16);
  v140 = *(double *)(v87 + 40);
  v141 = *(float64x2_t *)(v87 + 24);
  v110.f64[0] = *(float64_t *)(v87 + 64);
  _Q22 = *(float64x2_t *)(v87 + 48);
  v125.f64[0] = *(float64_t *)(v87 + 160);
  v143 = vmulq_n_f64(v132, _Q23.f64[0]);
  v144 = vmulq_n_f64(v133, _Q23.f64[0]);
  _Q23.f64[1] = v140;
  v145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v87, (int64x2_t)v141), *(double *)(v87 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v87, (int64x2_t)v141), *(float64x2_t *)(v87 + 144), 1), _Q23, v125.f64[0]);
  _Q25.f64[0] = *(float64_t *)(v87 + 152);
  __asm { FMLA            D23, D25, V22.D[1] }
  _Q23.f64[0] = _Q23.f64[0] + v110.f64[0] * v125.f64[0];
  *(_QWORD *)&v125.f64[0] = *(_OWORD *)&vnegq_f64(v145);
  v146 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v132, *(double *)v87), v134, v141.f64[0]), v136, _Q22.f64[0]), (float64x2_t)0, v138);
  v147 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, *(double *)v87), v135, v141.f64[0]), v137, _Q22.f64[0]), (float64x2_t)0, v139);
  v148 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v132, *(float64x2_t *)v87, 1), v134, v141, 1), v136, _Q22, 1), (float64x2_t)0, v138);
  v149 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v133, *(float64x2_t *)v87, 1), v135, v141, 1), v137, _Q22, 1), (float64x2_t)0, v139);
  _Q26 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v143, v134, v140), v136, v110.f64[0]), (float64x2_t)0, v138);
  *(_QWORD *)&v144.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v144, v135, v140), v137, v110.f64[0]), (float64x2_t)0, v139);
  _Q0 = vaddq_f64(v138, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v132, v125.f64[0]), v134, v145, 1), v136, _Q23.f64[0], 0));
  *(_QWORD *)&v137.f64[0] = *(_OWORD *)&vaddq_f64(v139, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v133, v125.f64[0]), v135, v145, 1), v137, _Q23.f64[0], 0));
  v152 = (float64x2_t)vzip1q_s64(v146, v148);
  _Q3 = (float64x2_t)vzip2q_s64(v146, v148);
  v154 = (float64x2_t)vzip1q_s64(v147, v149);
  *(float64_t *)(a3 + 16) = _Q26.f64[0];
  *(float64x2_t *)a3 = v152;
  *(float64_t *)(a3 + 40) = _Q26.f64[1];
  *(float64x2_t *)(a3 + 24) = _Q3;
  *(float64_t *)(a3 + 64) = v144.f64[0];
  *(float64x2_t *)(a3 + 48) = v154;
  v155 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v152, _Q0.f64[0]), _Q3, _Q0, 1), v154, v137.f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D3, D0, V26.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v137.f64[0], v144.f64[0]);
  *(float64x2_t *)(a3 + 72) = vnegq_f64(v155);
  *(_QWORD *)(a3 + 88) = *(_OWORD *)&vnegq_f64(_Q3);
  *(_BYTE *)(a3 + 96) = 1;
LABEL_104:
  if (*((_QWORD *)&v306 + 1))
  {
    *(_QWORD *)&v307 = *((_QWORD *)&v306 + 1);
    operator delete(*((void **)&v306 + 1));
  }
  v156 = (_QWORD *)v305;
  if ((_QWORD)v305)
  {
    v157 = (_QWORD *)*((_QWORD *)&v305 + 1);
    v158 = (void *)v305;
    if (*((_QWORD *)&v305 + 1) != (_QWORD)v305)
    {
      do
      {
        v157 -= 13;
        sub_20E9905B4(v157);
      }
      while (v157 != v156);
      v158 = (void *)v305;
    }
    *((_QWORD *)&v305 + 1) = v156;
    operator delete(v158);
  }
}

void sub_20F13252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_guard_abort(&qword_254A62228);
  sub_20F02CA48(&a29);
  _Unwind_Resume(a1);
}

void sub_20F13254C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_guard_abort(&qword_254A62220);
  sub_20F02CA48(&a29);
  _Unwind_Resume(a1);
}

void sub_20F13256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
    sub_20F02CA48(&a29);
    _Unwind_Resume(a1);
  }
  sub_20F02CA48(&a29);
  _Unwind_Resume(a1);
}

void sub_20F1328FC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62238))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62230);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62238);
  }
  *a1 = qword_254A62230;
}

void sub_20F132998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62238);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1329F0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_20F13EB20((char *)a1, *(char **)a2, *(char **)(a2 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    sub_20F04F8E0((uint64_t *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 7));
    sub_20EE6221C((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
    sub_20EE6221C((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 5);
    sub_20F13EDD0((char **)(a1 + 96), *(__int128 **)(a2 + 96), *(__int128 **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
    sub_20F13EDD0((char **)(a1 + 120), *(__int128 **)(a2 + 120), *(__int128 **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 5);
    sub_20F103A10((_QWORD *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 5);
    sub_20F13EFC8(a1 + 168, *(char ***)(a2 + 168), *(_QWORD *)(a2 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3));
  }
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  return a1;
}

uint64_t sub_20F132AF8(_QWORD *a1)
{
  void *v2;
  void *v3;

  sub_20F04F084(a1 + 31);
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return sub_20F028B60((uint64_t)a1);
}

uint64_t sub_20F132B40(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v2 = (_BYTE *)(result + 4920);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(a2 + 88))
    _ZF = *(_BYTE *)(a2 + 89) == 0;
  else
    _ZF = 1;
  v5 = !_ZF;
  v6 = *(_QWORD *)(result + 4848);
  *(_BYTE *)(v6 + 1928) = v5;
  *(_BYTE *)result = v5 ^ 1;
  v7 = *(unsigned __int8 *)(a2 + 90);
  *(_BYTE *)(result + 1) = v7 ^ 1;
  if (v7 && *(_BYTE *)(result + 10664) && *(_BYTE *)(result + 2))
  {
    v11 = (_BYTE *)(*(_QWORD *)(result + 4864) + 7682);
    *v11 = 0;
    v11[2] = 1;
  }
  if (v5)
  {
    v8 = *(_QWORD *)(result + 4864);
    if (*(_BYTE *)(v8 + 1306))
    {
      if (*v2)
        v9 = *(_BYTE *)(*(_QWORD *)(v8 + 11808) + 28) == 0;
      else
        v9 = 0;
      *(_BYTE *)(v8 + 7682) = v9;
      if (*(_BYTE *)(a2 + 24))
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)(v8 + 7682) = *v2 != 0;
      if (*(_BYTE *)(a2 + 24))
      {
LABEL_14:
        v10 = **(double **)(v8 + 2504) >= *(double *)(a2 + 16) + *(double *)(result + 3728);
        goto LABEL_21;
      }
    }
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v8 = *(_QWORD *)(result + 4864);
    *(_BYTE *)(v8 + 7682) = 0;
  }
LABEL_21:
  v12 = (_BYTE *)(v8 + 7681);
  v13 = *(uint64_t **)(*(_QWORD *)(v8 + 7952) + 72);
  if ((unint64_t)v13[12] >= 2)
  {
    if ((v13[13] & 0xFFFFFFFELL) != 0)
    {
      v15 = v13[13];
      v16 = v13[3];
      v17 = *v13;
      v18 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 7952) + 72) + 8) - v17) >> 3);
      v19 = v15 - 1;
      v20 = 0.0;
      do
      {
        v21 = v17 + 56 * ((v16 + 1) % v18);
        _Q3 = *(_OWORD *)(v21 + 8);
        _D5 = *(_QWORD *)(v21 + 16);
        __asm { FMLA            D4, D5, V3.D[1] }
        v28 = _D4 + *(double *)(v21 + 24) * *(double *)(v21 + 24);
        if (v28 >= *(double *)(result + 3736) && v28 <= *(double *)(result + 3744))
          v20 = v20 + *(double *)v21 - *(double *)(v17 + 56 * (v16 % v18));
        ++v16;
        --v19;
      }
      while (v19);
    }
    else
    {
      v20 = 0.0;
    }
    v14 = v20 > *(double *)(result + 3752);
    if (!v10)
    {
LABEL_38:
      *(_BYTE *)(v8 + 7688) = 0;
      if ((v5 & 1) != 0)
        goto LABEL_39;
      goto LABEL_42;
    }
  }
  else
  {
    v14 = 0;
    if (!v10)
      goto LABEL_38;
  }
  if (*v2)
    v29 = v14;
  else
    v29 = 0;
  if (!v29 || *(_BYTE *)(v8 + 1306) && *(_BYTE *)(*(_QWORD *)(v8 + 11808) + 28))
    goto LABEL_38;
  *(_BYTE *)(v8 + 7688) = *(_BYTE *)(v8 + 12456) == 0;
  if ((v5 & 1) != 0)
  {
LABEL_39:
    *(_BYTE *)(v8 + 7686) = 1;
    v30 = *(_QWORD *)(v6 + 944);
    v31 = *(_QWORD *)(v6 + 952);
    if (v30 == v31)
      goto LABEL_52;
    goto LABEL_46;
  }
LABEL_42:
  if (v3)
  {
    *(_BYTE *)(v8 + 7686) = *(_BYTE *)(v8 + 7686) != 0;
    v30 = *(_QWORD *)(v6 + 944);
    v31 = *(_QWORD *)(v6 + 952);
    if (v30 == v31)
      goto LABEL_52;
  }
  else
  {
    *(_BYTE *)(v8 + 7686) = 0;
    v30 = *(_QWORD *)(v6 + 944);
    v31 = *(_QWORD *)(v6 + 952);
    if (v30 == v31)
      goto LABEL_52;
  }
LABEL_46:
  v32 = v31 - v30 - 616;
  if (v32 < 0x268)
  {
    v33 = v30;
    do
    {
LABEL_51:
      *(_BYTE *)(v33 + 504) = v3;
      v33 += 616;
    }
    while (v33 != v31);
    goto LABEL_52;
  }
  v34 = v32 / 0x268 + 1;
  v33 = v30 + 616 * (v34 & 0xFFFFFFFFFFFFFELL);
  v35 = v34 & 0xFFFFFFFFFFFFFELL;
  do
  {
    *(_BYTE *)(v30 + 504) = v3;
    *(_BYTE *)(v30 + 1120) = v3;
    v30 += 1232;
    v35 -= 2;
  }
  while (v35);
  if (v34 != (v34 & 0xFFFFFFFFFFFFFELL))
    goto LABEL_51;
LABEL_52:
  *v12 = v3;
  return result;
}

uint64_t sub_20F132E4C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  float64x2_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float64x2_t v29;

  v5 = *(_QWORD *)(a1 + 4824) + 32 * a2;
  *(_DWORD *)a4 = *(_DWORD *)v5;
  *(_QWORD *)(a4 + 8) = 0;
  v6 = (_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  result = sub_20EA89974(a4 + 8, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 7));
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = 0;
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 1;
    v12 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v29 = v12;
    do
    {
      v14 = *a3;
      v15 = *v6 + 1664 * v9;
      if (*(_BYTE *)(v15 + 1536))
        v16 = v15 + 96;
      else
        v16 = 0;
      v17 = *(_DWORD *)(v16 + 992);
      if (v17 == -1)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_19;
        v17 = *(_DWORD *)(v16 + 992);
        v18 = v14 + 72 * v9;
        if (v17 <= 7)
        {
LABEL_13:
          if (!v17)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_21028E871, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_19:
            abort();
          }
        }
      }
      else
      {
        v18 = v14 + 72 * v9;
        if (v17 <= 7)
          goto LABEL_13;
      }
      v12.f64[0] = *(float64_t *)(v18 + 64);
      v20 = *(float64x2_t *)(v18 + 32);
      v19 = *(float64x2_t *)(v18 + 48);
      v22 = *(int8x16_t *)v18;
      v21 = *(float64x2_t *)(v18 + 16);
      v23 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v24 = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v25 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      v26 = vextq_s8(v22, v22, 8uLL).u64[0];
      v27 = (int8x16_t)vabdq_f64(*(float64x2_t *)v18, *(float64x2_t *)v16);
      v28 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v29, (float64x2_t)vextq_s8(v27, v27, 8uLL)), (int32x4_t)vcgeq_f64(v29, vabdq_f64(v21, *(float64x2_t *)(v16 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v29, vabdq_f64(v20, *(float64x2_t *)(v16 + 32))), (int32x4_t)vcgeq_f64(v29, vabdq_f64(v19, *(float64x2_t *)(v16 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v28)) & 1) != 0
        || (v28.f64[0] = *(float64_t *)(v16 + 64), vabdq_f64(v12, v28).f64[0] > 1.0e-10))
      {
        v22.i64[1] = v26;
        *(_QWORD *)&v21.f64[1] = v25;
        *(int8x16_t *)v16 = v22;
        *(float64x2_t *)(v16 + 16) = v21;
        *(_QWORD *)&v20.f64[1] = v24;
        *(float64_t *)(v16 + 64) = v12.f64[0];
        *(_QWORD *)&v19.f64[1] = v23;
        *(float64x2_t *)(v16 + 32) = v20;
        *(float64x2_t *)(v16 + 48) = v19;
        v13 = *(double *)v18 * *(double *)(v18 + 32);
        *(double *)(v16 + 72) = 1.0 / *(double *)v18;
        *(double *)(v16 + 80) = -*(double *)(v18 + 8) / v13;
        *(double *)(v16 + 88) = -(*(double *)(v18 + 32) * *(double *)(v18 + 16)
                                - *(double *)(v18 + 8) * *(double *)(v18 + 40))
                              / v13;
        *(_QWORD *)(v16 + 96) = 0;
        *(double *)(v16 + 104) = 1.0 / *(double *)(v18 + 32);
        *(double *)(v16 + 112) = -*(double *)(v18 + 40) / *(double *)(v18 + 32);
        *(_QWORD *)(v16 + 120) = 0;
        *(_QWORD *)(v16 + 128) = 0;
        v12.f64[1] = NAN;
        *(_OWORD *)(v16 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v16 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v16 + 160) = 0;
      }
      v9 = v11++;
    }
    while (v10 > v9);
  }
  return result;
}

void sub_20F133134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20EA841C0(a10);
  _Unwind_Resume(a1);
}

void sub_20F133148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20EA841C0(a10);
  _Unwind_Resume(a1);
}

__n128 sub_20F13315C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  if (!*(_BYTE *)(a1 + 10288)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1028, (uint64_t)"pose_and_cov_accumulator()", 26, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0)|| !*(_QWORD *)(a1 + 10208)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1029, (uint64_t)"!pose_and_cov_accumulator()->accumulated_pos_and_cov_queue().empty()", 68, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = *(_QWORD *)(a1 + 4864);
  if (*(_BYTE *)(v4 + 11664)
    || *(_DWORD *)(v4 + 1936) != (uint64_t)(*(_QWORD *)(v4 + 2864) - *(_QWORD *)(v4 + 2856)) >> 2)
  {
    v6 = *(_QWORD *)(a1 + 10200);
    v7 = *(_QWORD *)(a1 + 10168);
    if (!v6)
      v6 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 10176) - v7) >> 3);
    v5 = v7 + 3160 * v6 - 3160;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 10168) + 3160 * *(_QWORD *)(a1 + 10192);
  }
  v8 = *(_OWORD *)(v5 + 8);
  v9 = *(_OWORD *)(v5 + 24);
  v10 = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  result = *(__n128 *)(v5 + 72);
  v12 = *(_OWORD *)(v5 + 88);
  v13 = *(_OWORD *)(v5 + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v5 + 104);
  *(_OWORD *)(a2 + 112) = v13;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v12;
  return result;
}

void sub_20F1332A8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v3 = a1 + 7000;
  if (!*(_BYTE *)(a1 + 10288))
    return;
  if (!*(_QWORD *)(a1 + 10208)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 43, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(*(_QWORD *)(a1 + 10168) + 3160 * *(_QWORD *)(a1 + 10192)) != a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1051, (uint64_t)"pose_and_cov_accumulator_->GetBaseStateID() == prev_base_state_id", 65, (uint64_t)"Incorrect previous base state ID", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_24:
    abort();
  }
  sub_20F81A2C4(v3);
  v7 = *(_QWORD *)(a1 + 4864);
  if (*(_BYTE *)(v7 + 11664))
  {
    v8 = 1;
    if (*(_QWORD *)(a1 + 10208))
      goto LABEL_11;
  }
  else
  {
    v8 = *(unsigned int *)(v7 + 1936) != (uint64_t)(*(_QWORD *)(v7 + 2864) - *(_QWORD *)(v7 + 2856)) >> 2;
    if (*(_QWORD *)(a1 + 10208))
      goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 37, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_24;
  }
LABEL_11:
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 10200);
    v10 = *(_QWORD *)(a1 + 10168);
    if (!v9)
      v9 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 10176) - v10) >> 3);
    if (*(_DWORD *)(v10 + 3160 * v9 - 3156) == **(_DWORD **)(*(_QWORD *)(a1 + 4864) + 2480))
      goto LABEL_19;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 10168) + 3160 * *(_QWORD *)(a1 + 10192) + 4) == **(_DWORD **)(*(_QWORD *)(a1 + 4864) + 2480))
  {
    goto LABEL_19;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1063, (uint64_t)"pose_and_cov_accumulator_ ->GetOldestStateAccumulatedPoseAndCov(window_will_slide_in_next_iteration().first) .state_id1 == static_cast<uint32_t>(get_current_state_ids().front())", 177, (uint64_t)"The state does not align to the current bundle.", 47, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_24;
  }
LABEL_19:
  if (!*(_QWORD *)(a1 + 10208)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 43, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(*(_QWORD *)(a1 + 10168) + 3160 * *(_QWORD *)(a1 + 10192)) != a3&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1065, (uint64_t)"pose_and_cov_accumulator_->GetBaseStateID() == new_base_state_id", 64, (uint64_t)"The state does not align to the current bundle.", 47, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_24;
  }
}

uint64_t sub_20F133584@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, char a3@<W2>, int a4@<W3>, _QWORD *a5@<X4>, float64x2_t *a6@<X5>, _QWORD *a7@<X6>, char **a8@<X7>, uint64_t a9@<X8>, void **a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;

  v31 = 0;
  v13 = *(_QWORD *)(result + 4824);
  v23 = *(_QWORD *)(result + 4832);
  if (v13 == v23)
  {
LABEL_19:
    v19 = 0;
    v20 = a9;
    *(_BYTE *)a9 = 0;
  }
  else
  {
    v17 = result;
    while (*(_QWORD *)(v13 + 16) == *(_QWORD *)(v13 + 8))
    {
LABEL_3:
      v13 += 32;
      if (v13 == v23)
        goto LABEL_19;
    }
    v28 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 < 0x10000u)
    {
      LODWORD(v18) = 0;
      while (1)
      {
        v29 = v28;
        v30 = v18;
        if (v18 >= 0x10000
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_30;
        }
        result = sub_20F1338F0(v17, a2, &v29, a3, a4, a5, &v31, a6, a7, a8, a10, a11, a12, a13);
        if ((result & 1) != 0)
          goto LABEL_20;
        v18 = (v18 + 1);
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 7) <= v18)
          goto LABEL_3;
      }
    }
    LODWORD(v18) = 0;
    while (1)
    {
      v29 = v28;
      v30 = v18;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v18 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_30;
      }
      result = sub_20F1338F0(v17, a2, &v29, a3, a4, a5, &v31, a6, a7, a8, a10, a11, a12, a13);
      if ((_DWORD)result)
        break;
      v18 = (v18 + 1);
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 7) <= v18)
        goto LABEL_3;
    }
LABEL_20:
    v21 = v31;
    if (v28 >= 0x10000
      && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| v18 >= 0x10000&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
          (_DWORD)result)
      || v28 >= 0x10000
      && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| v18 >= 0x10000&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0),
          (_DWORD)result))
    {
LABEL_30:
      abort();
    }
    v20 = a9;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = v21;
    *(_DWORD *)(a9 + 16) = (unsigned __int16)v18 | ((unsigned __int16)v28 << 16);
    v19 = 1;
  }
  *(_BYTE *)(v20 + 24) = v19;
  return result;
}

BOOL sub_20F1338F0(uint64_t a1, unsigned int a2, _DWORD *a3, char a4, int a5, _QWORD *a6, _DWORD *a7, float64x2_t *a8, _QWORD *a9, char **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  int v18;
  unint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  _QWORD v36[2];
  int v37;

  v17 = ((*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2488) - *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2480)) >> 2);
LABEL_3:
  while (1)
  {
    v18 = v17;
    if ((int)v17 < 1)
      return v18 > 0;
    --v17;
    v19 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2480) + 4 * v17);
    v20 = (int8x8_t)a6[1];
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8(v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2480) + 4 * v17);
        if (*(_QWORD *)&v20 <= v19)
          v22 = v19 % *(_QWORD *)&v20;
      }
      else
      {
        v22 = (v20.i32[0] - 1) & v19;
      }
      v23 = *(uint64_t ***)(*a6 + 8 * v22);
      if (v23)
      {
        v24 = *v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v20 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v19)
              {
                if (*((_DWORD *)v24 + 4) == (_DWORD)v19)
                  goto LABEL_3;
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_25;
              }
              v24 = (uint64_t *)*v24;
              if (!v24)
                goto LABEL_25;
            }
          }
          do
          {
            v26 = v24[1];
            if (v26 == v19)
            {
              if (*((_DWORD *)v24 + 4) == (_DWORD)v19)
                goto LABEL_3;
            }
            else
            {
              if (v26 >= *(_QWORD *)&v20)
                v26 %= *(_QWORD *)&v20;
              if (v26 != v22)
                break;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_25:
    if (*a3 >= 0x10000u
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
LABEL_33:
      abort();
    }
    v28 = a3[1];
    if (v28 >= 0x10000)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_33;
      }
      LOWORD(v28) = *((_WORD *)a3 + 2);
    }
    v29 = (unsigned __int16)v28 | ((unsigned __int16)*a3 << 16);
    v36[0] = 0;
    v36[1] = v19;
    v37 = v29;
    if (sub_20F133B6C(a1, (uint64_t)v36, a2, a4, a5, a8, 1u, a9, a10, 0, 0, a11, a12, a13, a14))
    {
      *a7 = v19;
      return v18 > 0;
    }
  }
}

uint64_t sub_20F133B6C(uint64_t a1, uint64_t a2, unsigned int a3, char a4, int a5, float64x2_t *a6, unsigned __int8 a7, _QWORD *a8, char **a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  _QWORD *v28;
  void **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  char *v83;
  void *v84;
  char *v85;
  void *v86;
  char *v87;
  _QWORD *v88;
  unint64_t v89;
  char **v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  char *v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  _QWORD *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  _QWORD *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  _QWORD *v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  char *v155;
  int64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _BYTE *v175;
  char *v176;
  int64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  char *v192;
  int64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  _DWORD *v207;
  int64_t v208;
  unint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _OWORD *v214;
  char *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD *v220;
  char *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  _OWORD *v234;
  char *v235;
  uint64_t v236;
  __int128 v237;
  int v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  unint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  _BYTE *v287;
  _DWORD *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  _OWORD *v293;
  char *v294;
  uint64_t v295;
  __int128 v296;
  int v297;
  char *v298;
  uint64_t v299;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unint64_t v306;
  uint64_t v307;
  double v308;
  float64x2_t v311;
  double v312;
  float64x2_t v313;
  double v314;
  uint64_t v316;
  double v317;
  double v319;
  float64x2_t v320;
  float64_t v322;
  float64_t v323;
  float64_t v324;
  float64x2_t v325;
  float64_t v330;
  float64x2_t v331;
  float64x2_t v332;
  double v334;
  unint64_t v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  int v339;
  float64x2_t *v340;
  int v344;
  char *v345;
  unsigned int v346;
  int v347;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352[2];
  unsigned int v353;

  v19 = *(_QWORD *)(a1 + 4864);
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 7952) + 8);
  if (*(_BYTE *)(v19 + 1945))
  {
    v21 = v19 + 7968;
    if (!*(_QWORD *)(v20 + 16))
      v20 = v21;
  }
  v22 = *(_DWORD *)(a2 + 16);
  v351 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  if (v23)
  {
    if (v23 >> 61)
      sub_20E867F44();
    v24 = 8 * v23;
    v25 = (char *)operator new(8 * v23);
    v26 = &v25[v24];
  }
  else
  {
    v26 = 0;
    v25 = 0;
  }
  v352[0] = 0;
  v352[1] = v351;
  v353 = v22;
  v27 = sub_20E9DF85C((_QWORD *)(v20 + 24), v352);
  if (!v27)
    goto LABEL_352;
  if (!*((_DWORD *)v27 + 16))
    goto LABEL_352;
  v28 = (_QWORD *)v27[7];
  if (!v28)
    goto LABEL_352;
  v349 = a3;
  v340 = a6;
  v339 = a7;
  v29 = a12;
  v30 = v25;
  do
  {
    v31 = v28[3];
    v28 = (_QWORD *)*v28;
    if (!*(_BYTE *)(v31 + 112))
      continue;
    if (v30 < v26)
    {
      *(_QWORD *)v30 = v31;
      v30 += 8;
      continue;
    }
    v32 = (v30 - v25) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20E867F44();
    if ((v26 - v25) >> 2 > v33)
      v33 = (v26 - v25) >> 2;
    if ((unint64_t)(v26 - v25) >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      if (v34 >> 61)
        sub_20E877A38();
      v35 = operator new(8 * v34);
      v36 = &v35[8 * v32];
      *(_QWORD *)v36 = v31;
      v37 = (uint64_t)(v36 + 8);
      v38 = v30 - v25;
      if (v30 != v25)
      {
LABEL_25:
        v39 = v38 - 8;
        if (v39 >= 0x168)
        {
          v42 = (v30 - 8 - v25) & 0xFFFFFFFFFFFFFFF8;
          if (&v35[v30 - v25 - 8 - v42] > &v35[v30 - v25 - 8])
          {
            v40 = v30;
          }
          else if (&v30[-v42 - 8] > v30 - 8)
          {
            v40 = v30;
          }
          else if ((unint64_t)(v25 - v35) >= 0x20)
          {
            v43 = (v39 >> 3) + 1;
            v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v30[-v44];
            v36 -= v44;
            v45 = &v35[8 * v32 - 16];
            v46 = v30 - 16;
            v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 4;
            }
            while (v47);
            if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_28:
              v30 = v25;
              v25 = v36;
              v26 = &v35[8 * v34];
              if (!v30)
                goto LABEL_33;
LABEL_32:
              operator delete(v30);
              goto LABEL_33;
            }
          }
          else
          {
            v40 = v30;
          }
        }
        else
        {
          v40 = v30;
        }
        do
        {
          v41 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v36 - 1) = v41;
          v36 -= 8;
        }
        while (v40 != v25);
        goto LABEL_28;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v32);
      *(_QWORD *)(8 * v32) = v31;
      v37 = 8 * v32 + 8;
      v38 = v30 - v25;
      if (v30 != v25)
        goto LABEL_25;
    }
    v25 = v36;
    v26 = &v35[8 * v34];
    if (v30)
      goto LABEL_32;
LABEL_33:
    v30 = (char *)v37;
    v29 = a12;
  }
  while (v28);
  if (v25 == v30)
    goto LABEL_352;
  v49 = v30 - v25;
  v50 = (v30 - v25) >> 3;
  if (v50 < v349)
    goto LABEL_352;
  v337 = *(_DWORD *)(a2 + 8);
  v51 = *(unsigned int *)(a2 + 16);
  a8[1] = *a8;
  a9[1] = *a9;
  v52 = (_BYTE *)*a8;
  if (v49 >> 2 <= (unint64_t)((uint64_t)(a8[2] - *a8) >> 3))
    goto LABEL_58;
  if ((unint64_t)v49 > 0x7FFFFFFFFFFFFFFCLL)
    goto LABEL_380;
  v53 = (_BYTE *)a8[1];
  v54 = (char *)operator new(2 * v49);
  v55 = v53 - v52;
  v56 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
  v57 = v56;
  if (v53 != v52)
  {
    if ((unint64_t)(v55 - 8) < 0x58)
    {
      v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_55;
    }
    v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v53 - &v54[v55 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_387;
    v58 = v55 >> 3;
    v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v61 = &v53[-v60];
    v57 = &v56[-v60];
    v62 = &v54[8 * v58 - 16];
    v63 = (__int128 *)(v53 - 16);
    v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v65 = *v63;
      *((_OWORD *)v62 - 1) = *(v63 - 1);
      *(_OWORD *)v62 = v65;
      v62 -= 32;
      v63 -= 2;
      v64 -= 4;
    }
    while (v64);
    v53 = v61;
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_387:
      do
      {
LABEL_55:
        v66 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *((_QWORD *)v57 - 1) = v66;
        v57 -= 8;
      }
      while (v53 != v52);
    }
  }
  *a8 = v57;
  a8[1] = v56;
  a8[2] = &v54[8 * (v49 >> 2)];
  if (v52)
    operator delete(v52);
LABEL_58:
  v67 = *a9;
  if (3 * v50 <= (a9[2] - *a9) >> 3)
    goto LABEL_70;
  if ((3 * v50) >> 61)
LABEL_380:
    sub_20E867F44();
  v68 = a9[1];
  v69 = (char *)operator new(24 * v50);
  v70 = v68 - v67;
  v71 = &v69[(v68 - v67) & 0xFFFFFFFFFFFFFFF8];
  v72 = v71;
  if (v68 != v67)
  {
    if ((unint64_t)(v70 - 8) < 0x58)
    {
      v72 = &v69[(v68 - v67) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_67;
    }
    v72 = &v69[(v68 - v67) & 0xFFFFFFFFFFFFFFF8];
    if (v68 - v69 - (v70 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_388;
    v73 = v70 >> 3;
    v74 = ((unint64_t)(v70 - 8) >> 3) + 1;
    v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
    v76 = &v68[-v75];
    v72 = &v71[-v75];
    v77 = &v69[8 * v73 - 16];
    v78 = (__int128 *)(v68 - 16);
    v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v80 = *v78;
      *((_OWORD *)v77 - 1) = *(v78 - 1);
      *(_OWORD *)v77 = v80;
      v77 -= 32;
      v78 -= 2;
      v79 -= 4;
    }
    while (v79);
    v68 = v76;
    if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_388:
      do
      {
LABEL_67:
        v81 = *((_QWORD *)v68 - 1);
        v68 -= 8;
        *((_QWORD *)v72 - 1) = v81;
        v72 -= 8;
      }
      while (v68 != v67);
    }
  }
  *a9 = v72;
  a9[1] = v71;
  a9[2] = &v69[24 * v50];
  if (v67)
    operator delete(v67);
LABEL_70:
  if ((_BYTE)a11)
  {
    v82 = *(void **)a10;
    *(_QWORD *)(a10 + 8) = *(_QWORD *)a10;
    if (v50 > (uint64_t)(*(_QWORD *)(a10 + 16) - (_QWORD)v82) >> 2)
    {
      if (v49 < 0)
        sub_20E867F44();
      v83 = (char *)operator new((unint64_t)v49 >> 1);
      *(_QWORD *)a10 = v83;
      *(_QWORD *)(a10 + 8) = v83;
      *(_QWORD *)(a10 + 16) = &v83[4 * v50];
      if (v82)
        operator delete(v82);
    }
  }
  if ((_BYTE)a13)
  {
    v84 = *v29;
    v29[1] = *v29;
    if (v50 > ((_BYTE *)v29[2] - (_BYTE *)v84) >> 3)
    {
      if (v49 < 0)
        sub_20E867F44();
      v85 = (char *)operator new(v30 - v25);
      *v29 = v85;
      v29[1] = v85;
      v29[2] = &v85[8 * v50];
      if (v84)
        operator delete(v84);
    }
  }
  if ((_BYTE)a15)
  {
    v86 = *(void **)a14;
    *(_QWORD *)(a14 + 8) = *(_QWORD *)a14;
    if (v50 > (uint64_t)(*(_QWORD *)(a14 + 16) - (_QWORD)v86) >> 2)
    {
      if (v49 < 0)
        sub_20E867F44();
      v87 = (char *)operator new((unint64_t)v49 >> 1);
      *(_QWORD *)a14 = v87;
      *(_QWORD *)(a14 + 8) = v87;
      *(_QWORD *)(a14 + 16) = &v87[4 * v50];
      if (v86)
        operator delete(v86);
    }
  }
  v336 = (unsigned __int16)v51;
  if (*(_BYTE *)(a1 + 1043))
  {
    v88 = *(_QWORD **)(a1 + 4848);
    v89 = v88[106];
    v90 = a9;
    if (v89)
    {
      v91 = v88[102];
    }
    else
    {
      v93 = v88[103];
      v91 = v88[102];
      v89 = 0x8F9C18F9C18F9C19 * ((v93 - v91) >> 3);
    }
    if (*(_BYTE *)(v91 + 328 * v89 - 40))
      v92 = (unsigned int *)(a1 + 3596);
    else
      v92 = (unsigned int *)(a1 + 3592);
  }
  else
  {
    v92 = (unsigned int *)(a1 + 3596);
    v90 = a9;
  }
  v94 = 0;
  v347 = 0;
  v335 = v51 >> 16;
  v338 = *v92;
  v95 = v351;
  v96 = v25;
  while (2)
  {
    v98 = *(_QWORD *)v96;
    if ((a4 & 1) != 0)
    {
      v99 = v98 + 40;
      v100 = *(unsigned __int8 *)(v98 + 112);
      if (!*(_BYTE *)(v98 + 112))
        v99 = 0;
      if (!*(_BYTE *)(v99 + 32))
        goto LABEL_97;
    }
    else
    {
      v100 = *(unsigned __int8 *)(v98 + 112);
    }
    if (v100)
      v101 = v98 + 40;
    else
      v101 = 0;
    v102 = *(_QWORD *)(v98 + 120);
    v103 = *(_QWORD *)(v98 + 128);
    if (v103 != v102)
    {
      v104 = (v103 - v102) >> 6;
      while (1)
      {
        v105 = v104 >> 1;
        v106 = v102 + (v104 >> 1 << 6);
        v107 = *(_DWORD *)(v106 + 16);
        if (v107 == v22)
          break;
        if (v107 < v22)
          goto LABEL_115;
LABEL_110:
        v104 = v105;
        if (!v105)
          goto LABEL_116;
      }
      if (*(_QWORD *)v106 || *(_DWORD *)(v106 + 8) >= v95)
        goto LABEL_110;
LABEL_115:
      v102 = v106 + 64;
      v105 = v104 + ~v105;
      goto LABEL_110;
    }
LABEL_116:
    if (v102 == v103 || *(_DWORD *)(v102 + 16) != v22 || *(_QWORD *)v102)
    {
      v350 = 0;
    }
    else
    {
      v210 = *(_DWORD *)(v102 + 8);
      v211 = v102 + 24;
      if (v210 != v95)
        v211 = 0;
      v350 = v211;
    }
    v108 = *(unsigned __int8 *)(v101 + 32);
    v109 = a8;
    v111 = (char *)a8[1];
    v110 = a8[2];
    v346 = v94;
    v345 = v96;
    v344 = v108;
    if ((unint64_t)v111 >= v110)
    {
      v114 = (_BYTE *)*a8;
      v115 = (uint64_t)&v111[-*a8];
      v116 = v115 >> 3;
      v117 = (v115 >> 3) + 1;
      if (v117 >> 61)
        goto LABEL_370;
      v118 = v110 - (_QWORD)v114;
      if (v118 >> 2 > v117)
        v117 = v118 >> 2;
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
        v119 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v119 = v117;
      if (v119)
      {
        if (v119 >> 61)
          goto LABEL_369;
        v120 = operator new(8 * v119);
      }
      else
      {
        v120 = 0;
      }
      v121 = &v120[8 * v116];
      *v121 = *(_QWORD *)(v350 + 16);
      v112 = (char *)(v121 + 1);
      if (v111 == v114)
      {
        v90 = a9;
      }
      else
      {
        v122 = v111 - v114 - 8;
        if (v122 >= 0x58)
        {
          v123 = v111 - v120 - v115;
          v90 = a9;
          if (v123 >= 0x20)
          {
            v124 = (v122 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v126 = &v111[-v125];
            v121 = (_QWORD *)((char *)v121 - v125);
            v127 = &v120[8 * v116 - 16];
            v128 = v111 - 16;
            v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v130 = *(_OWORD *)v128;
              *(v127 - 1) = *((_OWORD *)v128 - 1);
              *v127 = v130;
              v127 -= 2;
              v128 -= 32;
              v129 -= 4;
            }
            while (v129);
            v111 = v126;
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_142;
          }
        }
        else
        {
          v90 = a9;
        }
        do
        {
          v131 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          *--v121 = v131;
        }
        while (v111 != v114);
      }
LABEL_142:
      v110 = (unint64_t)&v120[8 * v119];
      *a8 = v121;
      a8[1] = v112;
      a8[2] = v110;
      if (v114)
      {
        operator delete(v114);
        v109 = a8;
        v110 = a8[2];
        a8[1] = v112;
        if ((unint64_t)v112 >= v110)
          goto LABEL_144;
      }
      else
      {
        v109 = a8;
        a8[1] = v112;
        if ((unint64_t)v112 >= v110)
          goto LABEL_144;
      }
LABEL_122:
      *(_QWORD *)v112 = *(_QWORD *)(v350 + 24);
      v113 = v112 + 8;
      goto LABEL_165;
    }
    *(_QWORD *)v111 = *(_QWORD *)(v350 + 16);
    v112 = v111 + 8;
    a8[1] = v111 + 8;
    if ((unint64_t)(v111 + 8) < v110)
      goto LABEL_122;
LABEL_144:
    v132 = (char *)*v109;
    v133 = (uint64_t)&v112[-*v109];
    v134 = v133 >> 3;
    v135 = (v133 >> 3) + 1;
    if (v135 >> 61)
      goto LABEL_370;
    v136 = v110 - (_QWORD)v132;
    if (v136 >> 2 > v135)
      v135 = v136 >> 2;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
      v137 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      if (v137 >> 61)
        goto LABEL_369;
      v138 = operator new(8 * v137);
    }
    else
    {
      v138 = 0;
    }
    v139 = &v138[8 * v134];
    *v139 = *(_QWORD *)(v350 + 24);
    v113 = v139 + 1;
    if (v112 == v132)
    {
      v90 = a9;
      v143 = a8;
      *a8 = v139;
      a8[1] = v113;
      a8[2] = &v138[8 * v137];
      if (v132)
        goto LABEL_160;
    }
    else
    {
      v140 = v112 - v132 - 8;
      if (v140 < 0x58 || (unint64_t)(v112 - &v138[v133]) < 0x20)
      {
        v141 = v112;
        v90 = a9;
        goto LABEL_158;
      }
      v212 = (v140 >> 3) + 1;
      v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v112[-v213];
      v139 = (_QWORD *)((char *)v139 - v213);
      v214 = &v138[8 * v134 - 16];
      v215 = v112 - 16;
      v216 = v212 & 0x3FFFFFFFFFFFFFFCLL;
      v90 = a9;
      do
      {
        v217 = *(_OWORD *)v215;
        *(v214 - 1) = *((_OWORD *)v215 - 1);
        *v214 = v217;
        v214 -= 2;
        v215 -= 32;
        v216 -= 4;
      }
      while (v216);
      if (v212 != (v212 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_158:
          v142 = *((_QWORD *)v141 - 1);
          v141 -= 8;
          *--v139 = v142;
        }
        while (v141 != v132);
      }
      v143 = a8;
      *a8 = v139;
      a8[1] = v113;
      a8[2] = &v138[8 * v137];
      if (v132)
      {
LABEL_160:
        operator delete(v132);
        v109 = a8;
        goto LABEL_165;
      }
    }
    v109 = v143;
LABEL_165:
    v109[1] = v113;
    if (*(_BYTE *)(v98 + 112))
      v144 = v98 + 40;
    else
      v144 = 0;
    v146 = v90[1];
    v145 = v90[2];
    if (v146 < v145)
    {
      *(_QWORD *)v146 = *(_QWORD *)(v144 + 8);
      v147 = v146 + 8;
      goto LABEL_190;
    }
    v148 = *v90;
    v149 = v146 - *v90;
    v150 = v149 >> 3;
    v151 = (v149 >> 3) + 1;
    if (v151 >> 61)
      goto LABEL_370;
    v152 = v145 - v148;
    if (v152 >> 2 > v151)
      v151 = v152 >> 2;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
      v153 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v153 = v151;
    if (!v153)
    {
      v154 = 0;
      v155 = (char *)(8 * v150);
      *(_QWORD *)(8 * v150) = *(_QWORD *)(v144 + 8);
      v147 = (char *)(8 * v150 + 8);
      v156 = v146 - v148;
      if (v146 != v148)
        goto LABEL_179;
      goto LABEL_182;
    }
    if (v153 >> 61)
      goto LABEL_369;
    v154 = operator new(8 * v153);
    v155 = &v154[8 * v150];
    *(_QWORD *)v155 = *(_QWORD *)(v144 + 8);
    v147 = v155 + 8;
    v156 = v146 - v148;
    if (v146 == v148)
    {
LABEL_182:
      v90 = a9;
      goto LABEL_188;
    }
LABEL_179:
    v157 = v156 - 8;
    if (v157 < 0x58)
    {
      v90 = a9;
      goto LABEL_187;
    }
    v158 = v146 - v154 - v149;
    v90 = a9;
    if (v158 < 0x20)
      goto LABEL_389;
    v159 = (v157 >> 3) + 1;
    v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
    v161 = &v146[-v160];
    v155 -= v160;
    v162 = &v154[8 * v150 - 16];
    v163 = v146 - 16;
    v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v165 = *(_OWORD *)v163;
      *(v162 - 1) = *((_OWORD *)v163 - 1);
      *v162 = v165;
      v162 -= 2;
      v163 -= 32;
      v164 -= 4;
    }
    while (v164);
    v146 = v161;
    if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_389:
      do
      {
LABEL_187:
        v166 = *((_QWORD *)v146 - 1);
        v146 -= 8;
        *((_QWORD *)v155 - 1) = v166;
        v155 -= 8;
      }
      while (v146 != v148);
    }
LABEL_188:
    v145 = &v154[8 * v153];
    *v90 = v155;
    v90[1] = v147;
    v90[2] = v145;
    if (v148)
    {
      operator delete(v148);
      v145 = v90[2];
    }
LABEL_190:
    v90[1] = v147;
    if (*(_BYTE *)(v98 + 112))
      v167 = v98 + 40;
    else
      v167 = 0;
    if (v147 < v145)
    {
      *(_QWORD *)v147 = *(_QWORD *)(v167 + 16);
      v168 = v147 + 8;
      goto LABEL_210;
    }
    v169 = *v90;
    v170 = v147 - *v90;
    v171 = v170 >> 3;
    v172 = (v170 >> 3) + 1;
    if (v172 >> 61)
      goto LABEL_370;
    v173 = v145 - v169;
    if (v173 >> 2 > v172)
      v172 = v173 >> 2;
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
      v174 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v174 = v172;
    if (!v174)
    {
      v175 = 0;
      v176 = (char *)(8 * v171);
      *(_QWORD *)(8 * v171) = *(_QWORD *)(v167 + 16);
      v168 = (char *)(8 * v171 + 8);
      v177 = v147 - v169;
      if (v147 != v169)
        goto LABEL_204;
LABEL_246:
      v90 = a9;
      v145 = &v175[8 * v174];
      *a9 = v176;
      a9[1] = v168;
      a9[2] = v145;
      if (v169)
        goto LABEL_209;
      goto LABEL_210;
    }
    if (v174 >> 61)
      goto LABEL_369;
    v175 = operator new(8 * v174);
    v176 = &v175[8 * v171];
    *(_QWORD *)v176 = *(_QWORD *)(v167 + 16);
    v168 = v176 + 8;
    v177 = v147 - v169;
    if (v147 == v169)
      goto LABEL_246;
LABEL_204:
    v178 = v177 - 8;
    if (v178 < 0x58 || (unint64_t)(v147 - v175 - v170) < 0x20)
    {
      v179 = v147;
      v90 = a9;
      goto LABEL_207;
    }
    v218 = (v178 >> 3) + 1;
    v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
    v179 = &v147[-v219];
    v176 -= v219;
    v220 = &v175[8 * v171 - 16];
    v221 = v147 - 16;
    v222 = v218 & 0x3FFFFFFFFFFFFFFCLL;
    v90 = a9;
    do
    {
      v223 = *(_OWORD *)v221;
      *(v220 - 1) = *((_OWORD *)v221 - 1);
      *v220 = v223;
      v220 -= 2;
      v221 -= 32;
      v222 -= 4;
    }
    while (v222);
    if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_207:
        v180 = *((_QWORD *)v179 - 1);
        v179 -= 8;
        *((_QWORD *)v176 - 1) = v180;
        v176 -= 8;
      }
      while (v179 != v169);
    }
    v145 = &v175[8 * v174];
    *v90 = v176;
    v90[1] = v168;
    v90[2] = v145;
    if (v169)
    {
LABEL_209:
      operator delete(v169);
      v145 = v90[2];
    }
LABEL_210:
    v90[1] = v168;
    if (*(_BYTE *)(v98 + 112))
      v181 = v98 + 40;
    else
      v181 = 0;
    if (v168 >= v145)
    {
      v185 = *v90;
      v186 = v168 - *v90;
      v187 = v186 >> 3;
      v188 = (v186 >> 3) + 1;
      if (v188 >> 61)
LABEL_370:
        sub_20E867F44();
      v189 = v145 - v185;
      if (v189 >> 2 > v188)
        v188 = v189 >> 2;
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
        v190 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v190 = v188;
      if (v190)
      {
        if (v190 >> 61)
          goto LABEL_369;
        v191 = operator new(8 * v190);
        v192 = &v191[8 * v187];
        *(_QWORD *)v192 = *(_QWORD *)(v181 + 24);
        v182 = (uint64_t)(v192 + 8);
        v193 = v168 - v185;
        if (v168 != v185)
        {
LABEL_224:
          v194 = v193 - 8;
          if (v194 >= 0x58 && (unint64_t)(v168 - v191 - v186) >= 0x20)
          {
            v224 = (v194 >> 3) + 1;
            v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
            v195 = &v168[-v225];
            v192 -= v225;
            v226 = &v191[8 * v187 - 16];
            v227 = v168 - 16;
            v228 = v224 & 0x3FFFFFFFFFFFFFFCLL;
            v90 = a9;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 4;
            }
            while (v228);
            v183 = a10;
            v184 = a14;
            if (v224 == (v224 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_228:
              *v90 = v192;
              v90[1] = (char *)v182;
              v90[2] = &v191[8 * v190];
              if (!v185)
                goto LABEL_230;
LABEL_229:
              operator delete(v185);
              goto LABEL_230;
            }
          }
          else
          {
            v195 = v168;
            v183 = a10;
            v90 = a9;
            v184 = a14;
          }
          do
          {
            v196 = *((_QWORD *)v195 - 1);
            v195 -= 8;
            *((_QWORD *)v192 - 1) = v196;
            v192 -= 8;
          }
          while (v195 != v185);
          goto LABEL_228;
        }
      }
      else
      {
        v191 = 0;
        v192 = (char *)(8 * v187);
        *(_QWORD *)(8 * v187) = *(_QWORD *)(v181 + 24);
        v182 = 8 * v187 + 8;
        v193 = v168 - v185;
        if (v168 != v185)
          goto LABEL_224;
      }
      v183 = a10;
      v90 = a9;
      v184 = a14;
      *a9 = v192;
      a9[1] = (char *)v182;
      a9[2] = &v191[8 * v190];
      if (!v185)
        goto LABEL_230;
      goto LABEL_229;
    }
    *(_QWORD *)v168 = *(_QWORD *)(v181 + 24);
    v182 = (uint64_t)(v168 + 8);
    v183 = a10;
    v184 = a14;
LABEL_230:
    v90[1] = (char *)v182;
    if (!(_BYTE)a11 || *(float *)v350 != 3.4028e38)
      goto LABEL_277;
    v198 = *(char **)(v183 + 8);
    v197 = *(_QWORD *)(v183 + 16);
    if ((unint64_t)v198 < v197)
    {
      *(_DWORD *)v198 = v347;
      v199 = (uint64_t)(v198 + 4);
      goto LABEL_276;
    }
    v200 = *(char **)v183;
    v201 = (uint64_t)&v198[-*(_QWORD *)v183];
    v202 = v201 >> 2;
    v203 = (v201 >> 2) + 1;
    if (v203 >> 62)
      sub_20E867F44();
    v204 = v197 - (_QWORD)v200;
    if (v204 >> 1 > v203)
      v203 = v204 >> 1;
    if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
      v205 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v205 = v203;
    if (!v205)
    {
      v206 = 0;
      v207 = (_DWORD *)(4 * v202);
      *(_DWORD *)(4 * v202) = v347;
      v199 = 4 * v202 + 4;
      v208 = v198 - v200;
      if (v198 != v200)
        goto LABEL_243;
      goto LABEL_267;
    }
    if (v205 >> 62)
      goto LABEL_369;
    v206 = operator new(4 * v205);
    v207 = &v206[4 * v202];
    *v207 = v347;
    v199 = (uint64_t)(v207 + 1);
    v208 = v198 - v200;
    if (v198 == v200)
    {
LABEL_267:
      v90 = a9;
      goto LABEL_273;
    }
LABEL_243:
    v209 = v208 - 4;
    if (v209 < 0x2C)
    {
      v90 = a9;
      goto LABEL_272;
    }
    v230 = v198 - v206 - v201;
    v90 = a9;
    if (v230 < 0x20)
      goto LABEL_390;
    v231 = (v209 >> 2) + 1;
    v232 = 4 * (v231 & 0x7FFFFFFFFFFFFFF8);
    v233 = &v198[-v232];
    v207 = (_DWORD *)((char *)v207 - v232);
    v234 = &v206[4 * v202 - 16];
    v235 = v198 - 16;
    v236 = v231 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v237 = *(_OWORD *)v235;
      *(v234 - 1) = *((_OWORD *)v235 - 1);
      *v234 = v237;
      v234 -= 2;
      v235 -= 32;
      v236 -= 8;
    }
    while (v236);
    v198 = v233;
    if (v231 != (v231 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_390:
      do
      {
LABEL_272:
        v238 = *((_DWORD *)v198 - 1);
        v198 -= 4;
        *--v207 = v238;
      }
      while (v198 != v200);
    }
LABEL_273:
    v183 = a10;
    *(_QWORD *)a10 = v207;
    *(_QWORD *)(a10 + 8) = v199;
    *(_QWORD *)(a10 + 16) = &v206[4 * v205];
    if (v200)
      operator delete(v200);
    v184 = a14;
LABEL_276:
    *(_QWORD *)(v183 + 8) = v199;
LABEL_277:
    v239 = a12;
    if ((_BYTE)a13)
    {
      v240 = v98 + 40;
      if (!*(_BYTE *)(v98 + 112))
        v240 = 0;
      if (*(_BYTE *)(v240 + 32))
      {
        v241 = v240 + 36;
        v243 = (char *)a12[1];
        v242 = (unint64_t)a12[2];
        if ((unint64_t)v243 < v242)
        {
          *(_QWORD *)v243 = v241;
          v244 = v243 + 8;
          goto LABEL_285;
        }
        v247 = (char *)*a12;
        v248 = (v243 - (_BYTE *)*a12) >> 3;
        v249 = v248 + 1;
        if ((unint64_t)(v248 + 1) >> 61)
          sub_20E867F44();
        v250 = v242 - (_QWORD)v247;
        if (v250 >> 2 > v249)
          v249 = v250 >> 2;
        if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v249;
        if (v251)
        {
          if (v251 >> 61)
            sub_20E877A38();
          v252 = (char *)operator new(8 * v251);
          v253 = &v252[8 * v248];
          *(_QWORD *)v253 = v241;
          v246 = (uint64_t)(v253 + 8);
          v254 = (char *)(v243 - v247);
          if (v243 == v247)
            goto LABEL_318;
        }
        else
        {
          v252 = 0;
          v253 = (char *)(8 * v248);
          *(_QWORD *)(8 * v248) = v241;
          v246 = 8 * v248 + 8;
          v254 = (char *)(v243 - v247);
          if (v243 == v247)
            goto LABEL_318;
        }
        v260 = (unint64_t)(v254 - 8);
        if (v260 < 0x58)
        {
          v90 = a9;
          goto LABEL_313;
        }
        v90 = a9;
        if ((unint64_t)(v247 - v252) < 0x20)
          goto LABEL_391;
        v261 = (v260 >> 3) + 1;
        v262 = 8 * (v261 & 0x3FFFFFFFFFFFFFFCLL);
        v263 = &v243[-v262];
        v253 -= v262;
        v264 = &v252[8 * v248 - 16];
        v265 = v243 - 16;
        v266 = v261 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v267 = *(_OWORD *)v265;
          *((_OWORD *)v264 - 1) = *((_OWORD *)v265 - 1);
          *(_OWORD *)v264 = v267;
          v264 -= 32;
          v265 -= 32;
          v266 -= 4;
        }
        while (v266);
        v243 = v263;
        if (v261 != (v261 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_391:
          do
          {
LABEL_313:
            v268 = *((_QWORD *)v243 - 1);
            v243 -= 8;
            *((_QWORD *)v253 - 1) = v268;
            v253 -= 8;
          }
          while (v243 != v247);
        }
LABEL_325:
        v239 = a12;
        v243 = (char *)*a12;
        *a12 = v253;
        a12[1] = (void *)v246;
        a12[2] = &v252[8 * v251];
        if (v243)
LABEL_326:
          operator delete(v243);
LABEL_327:
        v184 = a14;
      }
      else
      {
        v243 = (char *)a12[1];
        v245 = (unint64_t)a12[2];
        if ((unint64_t)v243 >= v245)
        {
          v255 = (char *)*a12;
          v256 = (v243 - (_BYTE *)*a12) >> 3;
          v257 = v256 + 1;
          if ((unint64_t)(v256 + 1) >> 61)
            sub_20E867F44();
          v258 = v245 - (_QWORD)v255;
          if (v258 >> 2 > v257)
            v257 = v258 >> 2;
          if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
            v251 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v251 = v257;
          if (v251)
          {
            if (v251 >> 61)
              sub_20E877A38();
            v252 = (char *)operator new(8 * v251);
            v253 = &v252[8 * v256];
            *(_QWORD *)v253 = 0;
            v246 = (uint64_t)(v253 + 8);
            v259 = (char *)(v243 - v255);
            if (v243 == v255)
            {
LABEL_318:
              v90 = a9;
              v239 = a12;
              *a12 = v253;
              a12[1] = (void *)v246;
              a12[2] = &v252[8 * v251];
              if (v243)
                goto LABEL_326;
              goto LABEL_327;
            }
          }
          else
          {
            v252 = 0;
            v253 = (char *)(8 * v256);
            *(_QWORD *)(8 * v256) = 0;
            v246 = 8 * v256 + 8;
            v259 = (char *)(v243 - v255);
            if (v243 == v255)
              goto LABEL_318;
          }
          v269 = (unint64_t)(v259 - 8);
          if (v269 >= 0x58)
          {
            v90 = a9;
            if ((unint64_t)(v255 - v252) >= 0x20)
            {
              v270 = (v269 >> 3) + 1;
              v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
              v272 = &v243[-v271];
              v253 -= v271;
              v273 = &v252[8 * v256 - 16];
              v274 = v243 - 16;
              v275 = v270 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v276 = *(_OWORD *)v274;
                *((_OWORD *)v273 - 1) = *((_OWORD *)v274 - 1);
                *(_OWORD *)v273 = v276;
                v273 -= 32;
                v274 -= 32;
                v275 -= 4;
              }
              while (v275);
              v243 = v272;
              if (v270 == (v270 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_325;
            }
          }
          else
          {
            v90 = a9;
          }
          do
          {
            v277 = *((_QWORD *)v243 - 1);
            v243 -= 8;
            *((_QWORD *)v253 - 1) = v277;
            v253 -= 8;
          }
          while (v243 != v255);
          goto LABEL_325;
        }
        *(_QWORD *)v243 = 0;
        v244 = v243 + 8;
LABEL_285:
        v246 = (uint64_t)v244;
      }
      v239[1] = (void *)v246;
    }
    if ((_BYTE)a15)
    {
      v278 = v184;
      v279 = *(char **)(v184 + 8);
      v280 = *(_QWORD *)(v278 + 16);
      if ((unint64_t)v279 < v280)
      {
        *(_DWORD *)v279 = *(_DWORD *)(v350 + 32);
        v97 = v279 + 4;
      }
      else
      {
        v281 = *(char **)v278;
        v282 = (uint64_t)&v279[-*(_QWORD *)v278];
        v283 = v282 >> 2;
        v284 = (v282 >> 2) + 1;
        if (v284 >> 62)
          sub_20E867F44();
        v285 = v280 - (_QWORD)v281;
        if (v285 >> 1 > v284)
          v284 = v285 >> 1;
        if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL)
          v286 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v286 = v284;
        if (v286)
        {
          if (v286 >> 62)
LABEL_369:
            sub_20E877A38();
          v287 = operator new(4 * v286);
          v90 = a9;
        }
        else
        {
          v287 = 0;
        }
        v288 = &v287[4 * v283];
        *v288 = *(_DWORD *)(v350 + 32);
        v97 = v288 + 1;
        if (v279 != v281)
        {
          v289 = v279 - v281 - 4;
          if (v289 < 0x2C)
            goto LABEL_392;
          if ((unint64_t)(v279 - v287 - v282) < 0x20)
            goto LABEL_392;
          v290 = (v289 >> 2) + 1;
          v291 = 4 * (v290 & 0x7FFFFFFFFFFFFFF8);
          v292 = &v279[-v291];
          v288 = (_DWORD *)((char *)v288 - v291);
          v293 = &v287[4 * v283 - 16];
          v294 = v279 - 16;
          v295 = v290 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v296 = *(_OWORD *)v294;
            *(v293 - 1) = *((_OWORD *)v294 - 1);
            *v293 = v296;
            v293 -= 2;
            v294 -= 32;
            v295 -= 8;
          }
          while (v295);
          v279 = v292;
          if (v290 != (v290 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_392:
            do
            {
              v297 = *((_DWORD *)v279 - 1);
              v279 -= 4;
              *--v288 = v297;
            }
            while (v279 != v281);
          }
        }
        v298 = &v287[4 * v286];
        v278 = a14;
        *(_QWORD *)a14 = v288;
        *(_QWORD *)(a14 + 8) = v97;
        *(_QWORD *)(a14 + 16) = v298;
        if (v281)
          operator delete(v281);
      }
      *(_QWORD *)(v278 + 8) = v97;
    }
    v94 = v346 + v344;
    ++v347;
    v95 = v351;
    v96 = v345;
LABEL_97:
    v96 += 8;
    if (v96 != v30)
      continue;
    break;
  }
  if (a5 && v94 < v338)
  {
LABEL_352:
    v299 = 0;
    if (v25)
      goto LABEL_353;
    return v299;
  }
  v301 = *(_QWORD **)(a1 + 4864);
  v302 = v301[310];
  v303 = v301[311] - v302;
  if (v303)
  {
    v304 = 0;
    v305 = 0;
    v306 = v303 >> 2;
    while (v337 != *(_DWORD *)(v302 + 4 * v304))
    {
      v304 = ++v305;
      if (v306 <= v305)
        goto LABEL_359;
    }
    if (v339)
    {
      if (v305 < 0)
      {
LABEL_361:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1245, (uint64_t)"state_index_in_bundle >= 0", 26, (uint64_t)"Cannot find the state id in the bundle", 38, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v301 = *(_QWORD **)(a1 + 4864);
      }
      v307 = v301[285] + 168 * v305;
      v308 = *(double *)(v307 + 160);
      _Q19 = *(float64x2_t *)(v307 + 144);
      _Q21.f64[0] = *(float64_t *)(v307 + 16);
      v311 = *(float64x2_t *)v307;
      v312 = *(double *)(v307 + 40);
      v313 = *(float64x2_t *)(v307 + 24);
      v314 = *(double *)(v307 + 64);
      _Q2 = *(float64x2_t *)(v307 + 48);
      v316 = *(_QWORD *)(*(_QWORD *)(a1 + 4824) + 32 * v335 + 8) + 1664 * v336;
      v317 = *(double *)(v316 + 88);
      _Q22.f64[0] = *(float64_t *)(v316 + 16);
      v319 = *(double *)(v316 + 40);
      v320 = *(float64x2_t *)(v316 + 24);
      _Q5 = *(float64x2_t *)(v316 + 48);
      v322 = _Q21.f64[0] * *(double *)v316;
      v323 = _Q21.f64[0] * v320.f64[0];
      v324 = _Q21.f64[0] * _Q5.f64[0];
      _Q21.f64[1] = v312;
      v325 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v311, (int64x2_t)v313), _Q19.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v311, (int64x2_t)v313), _Q19, 1), _Q21, v308);
      _Q19.f64[0] = _Q19.f64[1];
      __asm { FMLA            D21, D19, V2.D[1] }
      v330 = _Q21.f64[0] + v314 * v308;
      _Q19.f64[0] = v314 * _Q22.f64[0];
      _Q21.f64[0] = v330 * _Q22.f64[0];
      v331 = vmulq_n_f64(_Q2, _Q22.f64[0]);
      _Q22.f64[1] = v319;
      v332 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v316, (int64x2_t)v320), *(double *)(v316 + 72)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v316, (int64x2_t)v320), *(float64x2_t *)(v316 + 72), 1), _Q22, v317);
      _D20 = *(_QWORD *)(v316 + 80);
      __asm { FMLA            D22, D20, V5.D[1] }
      v334 = *(double *)(v316 + 64);
      _Q19.f64[0] = vmuld_lane_f64(v312, *(float64x2_t *)v316, 1) + v322 + _Q19.f64[0];
      _Q21.f64[0] = -v332.f64[0]
                  - vmuld_n_f64(v325.f64[0], *(double *)v316)
                  - _Q21.f64[0]
                  - vmuld_lane_f64(v325.f64[1], *(float64x2_t *)v316, 1);
      *v340 = vaddq_f64(vaddq_f64(vmulq_n_f64(v311, *(double *)v316), vmulq_laneq_f64(v313, *(float64x2_t *)v316, 1)), v331);
      v340[1].f64[0] = _Q19.f64[0];
      v340[1].f64[1] = _Q21.f64[0];
      v340[2] = vaddq_f64(vaddq_f64(vmulq_n_f64(v311, v320.f64[0]), vmulq_laneq_f64(v313, v320, 1)), vmulq_n_f64(_Q2, v319));
      v340[3].f64[0] = vmuld_lane_f64(v312, v320, 1) + v323 + v314 * v319;
      v340[3].f64[1] = -v332.f64[1]
                     - vmuld_n_f64(v325.f64[0], v320.f64[0])
                     - v330 * v319
                     - vmuld_lane_f64(v325.f64[1], v320, 1);
      v340[4] = vaddq_f64(vmulq_laneq_f64(v313, _Q5, 1), vaddq_f64(vmulq_n_f64(v311, _Q5.f64[0]), vmulq_n_f64(_Q2, v334)));
      v340[5].f64[0] = vmuld_lane_f64(v312, _Q5, 1) + v324 + v314 * v334;
      v340[5].f64[1] = -(_Q22.f64[0] + v334 * v317)
                     - v330 * v334
                     - vmuld_n_f64(v325.f64[0], _Q5.f64[0])
                     - vmuld_lane_f64(v325.f64[1], _Q5, 1);
    }
  }
  else
  {
LABEL_359:
    if (v339)
    {
      v305 = -1;
      goto LABEL_361;
    }
  }
  v299 = 1;
  if (v25)
LABEL_353:
    operator delete(v25);
  return v299;
}

void sub_20F135258(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F135294(uint64_t a1, __int128 *a2, char **a3, _QWORD *a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;

  v6 = *a3;
  a3[1] = *a3;
  a4[1] = *a4;
  v68 = *a2;
  v69 = *((_DWORD *)a2 + 4);
  *(_QWORD *)&v68 = 0;
  v7 = *(_QWORD *)(a1 + 4864);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 7952) + 8);
  if (*(_BYTE *)(v7 + 1945))
  {
    v9 = v7 + 7968;
    if (!*(_QWORD *)(v8 + 16))
      v8 = v9;
  }
  v10 = (_QWORD *)(v8 + 24);
  v11 = sub_20E9DF85C((_QWORD *)(v8 + 24), (uint64_t *)&v68);
  if (v11)
  {
    v12 = v11[8];
    v13 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 3) < v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_66:
        sub_20E969238();
      v14 = (char *)operator new(24 * v12);
      v15 = &v14[24 * ((v6 - v13) / 24)];
      v16 = v15;
      if (v6 != v13)
      {
        v17 = &v14[24 * ((v6 - v13) / 24)];
        do
        {
          v16 = v17 - 24;
          v18 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)(v17 - 24) = v18;
          v6 -= 24;
          v17 -= 24;
        }
        while (v6 != v13);
      }
      *a3 = v16;
      a3[1] = v15;
      a3[2] = &v14[24 * v12];
      if (v13)
        operator delete(v13);
    }
    v19 = (_BYTE *)*a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(a4[2] - *a4) >> 2) < v12)
    {
      if (v12 > 0x71C71C71C71C71CLL)
LABEL_67:
        sub_20E867F44();
      v20 = (_BYTE *)a4[1];
      v21 = (char *)operator new(36 * v12);
      v22 = &v21[36 * ((v20 - v19) / 36)];
      v23 = v22;
      if (v20 != v19)
      {
        v24 = &v21[36 * ((v20 - v19) / 36)];
        do
        {
          v23 = v24 - 36;
          v25 = *(_OWORD *)(v20 - 36);
          v26 = *(_OWORD *)(v20 - 20);
          *((_DWORD *)v24 - 1) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v24 - 20) = v26;
          *(_OWORD *)(v24 - 36) = v25;
          v20 -= 36;
          v24 -= 36;
        }
        while (v20 != v19);
      }
      *a4 = v23;
      a4[1] = v22;
      a4[2] = &v21[36 * v12];
      if (v19)
        operator delete(v19);
    }
  }
  v66 = v68;
  v67 = v69;
  v27 = sub_20E9DF85C(v10, (uint64_t *)&v66);
  if (v27)
  {
    if (*((_DWORD *)v27 + 16))
    {
      v28 = (_QWORD *)v27[7];
      while (v28)
      {
        v32 = v28;
        v33 = v28[3];
        v28 = (_QWORD *)*v28;
        if (*(_BYTE *)(v33 + 112) && *(_BYTE *)(v33 + 72))
        {
          v34 = (__int128 *)(v33 + 48);
          v36 = a3[1];
          v35 = (unint64_t)a3[2];
          if ((unint64_t)v36 >= v35)
          {
            v39 = *a3;
            v40 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a3) >> 3);
            v41 = v40 + 1;
            if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_66;
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v39) >> 3);
            if (2 * v42 > v41)
              v41 = 2 * v42;
            if (v42 >= 0x555555555555555)
              v43 = 0xAAAAAAAAAAAAAAALL;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_68;
              v44 = (char *)operator new(24 * v43);
            }
            else
            {
              v44 = 0;
            }
            v45 = *v34;
            v46 = &v44[24 * v40];
            *((_QWORD *)v46 + 2) = *((_QWORD *)v34 + 2);
            *(_OWORD *)v46 = v45;
            v47 = v46;
            if (v36 != v39)
            {
              do
              {
                v48 = *(_OWORD *)(v36 - 24);
                *((_QWORD *)v47 - 1) = *((_QWORD *)v36 - 1);
                *(_OWORD *)(v47 - 24) = v48;
                v47 -= 24;
                v36 -= 24;
              }
              while (v36 != v39);
              v36 = *a3;
            }
            v38 = v46 + 24;
            *a3 = v47;
            a3[1] = v46 + 24;
            a3[2] = &v44[24 * v43];
            if (v36)
              operator delete(v36);
          }
          else
          {
            v37 = *v34;
            *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
            *(_OWORD *)v36 = v37;
            v38 = v36 + 24;
          }
          a3[1] = v38;
          v49 = v32[3];
          if (*(_BYTE *)(v49 + 112))
            v50 = v49 + 40;
          else
            v50 = 0;
          v51 = (__int128 *)(v50 + 36);
          v53 = (char *)a4[1];
          v52 = a4[2];
          if ((unint64_t)v53 < v52)
          {
            v29 = *v51;
            v30 = v51[1];
            *((_DWORD *)v53 + 8) = *((_DWORD *)v51 + 8);
            *(_OWORD *)v53 = v29;
            *((_OWORD *)v53 + 1) = v30;
            v31 = v53 + 36;
          }
          else
          {
            v54 = (char *)*a4;
            v55 = 0x8E38E38E38E38E39 * ((uint64_t)&v53[-*a4] >> 2);
            v56 = v55 + 1;
            if (v55 + 1 > 0x71C71C71C71C71CLL)
              goto LABEL_67;
            v57 = 0x8E38E38E38E38E39 * ((uint64_t)(v52 - (_QWORD)v54) >> 2);
            if (2 * v57 > v56)
              v56 = 2 * v57;
            if (v57 >= 0x38E38E38E38E38ELL)
              v58 = 0x71C71C71C71C71CLL;
            else
              v58 = v56;
            if (v58)
            {
              if (v58 > 0x71C71C71C71C71CLL)
LABEL_68:
                sub_20E877A38();
              v59 = (char *)operator new(36 * v58);
            }
            else
            {
              v59 = 0;
            }
            v60 = &v59[36 * v55];
            v61 = *v51;
            v62 = v51[1];
            *((_DWORD *)v60 + 8) = *((_DWORD *)v51 + 8);
            *(_OWORD *)v60 = v61;
            *((_OWORD *)v60 + 1) = v62;
            v63 = v60;
            if (v53 != v54)
            {
              do
              {
                v64 = *(_OWORD *)(v53 - 36);
                v65 = *(_OWORD *)(v53 - 20);
                *((_DWORD *)v63 - 1) = *((_DWORD *)v53 - 1);
                *(_OWORD *)(v63 - 20) = v65;
                *(_OWORD *)(v63 - 36) = v64;
                v63 -= 36;
                v53 -= 36;
              }
              while (v53 != v54);
              v53 = (char *)*a4;
            }
            v31 = v60 + 36;
            *a4 = v63;
            a4[1] = v60 + 36;
            a4[2] = &v59[36 * v58];
            if (v53)
              operator delete(v53);
          }
          a4[1] = v31;
        }
      }
    }
  }
}

__n128 sub_20F13579C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p[2];
  unsigned __int8 v33;
  _DWORD v34[4];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[49];
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;

  v4 = *(_QWORD *)(a1 + 4864);
  v5 = *(_QWORD *)(v4 + 5064);
  v6 = *(_QWORD *)(v4 + 5056);
  if (v5 == v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1391, (uint64_t)"filter_->last_prior().num_states() > 0", 38, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 4864);
    v5 = *(_QWORD *)(v4 + 5064);
    v6 = *(_QWORD *)(v4 + 5056);
  }
  bzero(&v36, 0x708uLL);
  v7 = 0;
  v8 = (float64x2_t *)(*(_QWORD *)(v4 + 5152) + 64);
  v9 = 8
     * (0x2492492492492493 * ((unint64_t)(v5 - v6) >> 3)
      + ((uint64_t)(*(_QWORD *)(v4 + 5088) - *(_QWORD *)(v4 + 5080)) >> 4)
      + ((*(_QWORD *)(v4 + 5112) - *(_QWORD *)(v4 + 5104)) >> 3)
      + ((*(_QWORD *)(v4 + 5136) - *(_QWORD *)(v4 + 5128)) >> 3));
  do
  {
    v10 = (float64x2_t *)((char *)&v36 + v7);
    v11 = vaddq_f64(v8[-3], *(float64x2_t *)((char *)&v36 + v7 + 16));
    *v10 = vaddq_f64(v8[-4], *(float64x2_t *)((char *)&v36 + v7));
    v10[1] = v11;
    v12 = vaddq_f64(v8[-1], *(float64x2_t *)&v38[v7 + 16]);
    v10[2] = vaddq_f64(v8[-2], *(float64x2_t *)&v38[v7]);
    v10[3] = v12;
    v13 = vaddq_f64(v8[1], *(float64x2_t *)&v38[v7 + 48]);
    v10[4] = vaddq_f64(*v8, *(float64x2_t *)&v38[v7 + 32]);
    v10[5] = v13;
    v13.f64[0] = v8[3].f64[0] + *(double *)((char *)&v40 + v7);
    v10[6] = vaddq_f64(v8[2], *(float64x2_t *)((char *)&v39 + v7));
    v7 += 120;
    v8 = (float64x2_t *)((char *)v8 + v9);
    v10[7].f64[0] = v13.f64[0];
  }
  while (v7 != 1800);
  *(_OWORD *)a2 = v36;
  *(_QWORD *)(a2 + 16) = v37;
  *(_OWORD *)(a2 + 48) = v41;
  v14 = v40;
  *(_QWORD *)(a2 + 64) = v42;
  *(_OWORD *)(a2 + 96) = v45;
  *(_QWORD *)(a2 + 112) = v46;
  *(_QWORD *)(a2 + 40) = v14;
  *(_OWORD *)(a2 + 24) = v39;
  v15 = v43;
  *(_QWORD *)(a2 + 88) = v44;
  *(_OWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 136) = v48;
  *(_OWORD *)(a2 + 120) = v47;
  *(_QWORD *)(a2 + 160) = v50;
  *(_OWORD *)(a2 + 144) = v49;
  *(_QWORD *)(a2 + 208) = v54;
  *(_OWORD *)(a2 + 192) = v53;
  *(_QWORD *)(a2 + 256) = v58;
  *(_OWORD *)(a2 + 240) = v57;
  v16 = v51;
  *(_QWORD *)(a2 + 184) = v52;
  *(_OWORD *)(a2 + 168) = v16;
  v17 = v55;
  *(_QWORD *)(a2 + 232) = v56;
  *(_OWORD *)(a2 + 216) = v17;
  result = v59;
  *(_QWORD *)(a2 + 280) = v60;
  *(__n128 *)(a2 + 264) = result;
  if (*(_DWORD *)(v4 + 8180) != **(_DWORD **)(v4 + 2480))
  {
    sub_20E863438((uint64_t)v34);
    sub_20E86A980(&v35, (uint64_t)"filter_->last_prior_frame_id():  ", 33);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v19, (uint64_t)", get_current_state_ids().front(): ", 35);
    v20 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v20, (uint64_t)", bundle_prior_info().frame_id: ", 32);
    v21 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v21, (uint64_t)", buffered_bundle_prior_info().frame_id: ", 41);
    v22 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v22, (uint64_t)"\n", 1);
    sub_20E86A980(&v35, (uint64_t)"Is it going to slide: ", 22);
    v23 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v23, (uint64_t)" of frame: ", 11);
    v24 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v24, (uint64_t)"\n", 1);
    sub_20E86A980(&v35, (uint64_t)"state id: ", 10);
    v25 = *(_QWORD *)(a1 + 4864);
    v26 = *(_QWORD *)(v25 + 2480);
    for (i = *(_QWORD *)(v25 + 2488); v26 != i; v26 += 4)
    {
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = sub_20E86A980(v30, (uint64_t)", ", 2);
      sub_20E8C81A0(v31);
    }
    sub_20E923E88(v34, __p);
    if ((v33 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v29 = v33;
    else
      v29 = (uint64_t)__p[1];
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1418, (uint64_t)&unk_21028E871, 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    if ((char)v33 < 0)
      operator delete(__p[0]);
    abort();
  }
  return result;
}

void sub_20F135BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20F135C80(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  _OWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;

  v2 = *(_OWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  if (*(int *)(a1 + 4904) >= 1)
  {
    v5 = *(_QWORD *)(a1 + 4864);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 7952) + 8);
    if (*(_BYTE *)(v5 + 1945))
    {
      v7 = v5 + 7968;
      if (!*(_QWORD *)(v6 + 16))
        v6 = v7;
    }
    v8 = *(_QWORD *)(v6 + 16);
    if (v8 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v2) >> 4)
    {
      if (v8 >> 60)
LABEL_40:
        sub_20E867F44();
      v9 = 16 * v8;
      v10 = (char *)operator new(16 * v8);
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = &v10[v9];
      if (v2)
        operator delete(v2);
    }
    v11 = *(_QWORD *)(a1 + 4864);
    v12 = *(_QWORD **)(*(_QWORD *)(v11 + 7952) + 8);
    if (*(_BYTE *)(v11 + 1945))
    {
      v13 = (_QWORD *)(v11 + 7968);
      if (!v12[2])
        v12 = v13;
    }
    v16 = (_QWORD *)*v12;
    v14 = v12 + 1;
    v15 = v16;
    if (v16 != v14)
    {
      v17 = *(_OWORD **)(a2 + 8);
      do
      {
        v18 = v15 + 4;
        v19 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v17 >= v19)
        {
          v20 = *(_OWORD **)a2;
          v21 = ((uint64_t)v17 - *(_QWORD *)a2) >> 4;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            goto LABEL_40;
          v23 = v19 - (_QWORD)v20;
          if (v23 >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 60)
              sub_20E877A38();
            v25 = (char *)operator new(16 * v24);
            v26 = &v25[16 * v21];
            *(_OWORD *)v26 = *v18;
            if (v17 == v20)
            {
LABEL_37:
              v30 = v17;
              v17 = v26 + 16;
              *(_QWORD *)a2 = v26;
              *(_QWORD *)(a2 + 8) = v26 + 16;
              *(_QWORD *)(a2 + 16) = &v25[16 * v24];
              if (!v30)
                goto LABEL_30;
LABEL_29:
              operator delete(v30);
              goto LABEL_30;
            }
          }
          else
          {
            v25 = 0;
            v26 = (char *)(16 * v21);
            *(_OWORD *)(16 * v21) = *v18;
            if (v17 == v20)
              goto LABEL_37;
          }
          v27 = v26;
          do
          {
            v28 = *((_QWORD *)v17-- - 2);
            v29 = *((_DWORD *)v17 + 2);
            *((_QWORD *)v27 - 2) = v28;
            v27 -= 16;
            *((_DWORD *)v27 + 2) = v29;
          }
          while (v17 != v20);
          v30 = *(_OWORD **)a2;
          v17 = v26 + 16;
          *(_QWORD *)a2 = v27;
          *(_QWORD *)(a2 + 8) = v26 + 16;
          *(_QWORD *)(a2 + 16) = &v25[16 * v24];
          if (v30)
            goto LABEL_29;
        }
        else
        {
          *v17++ = *v18;
        }
LABEL_30:
        *(_QWORD *)(a2 + 8) = v17;
        v31 = (_QWORD *)v15[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_QWORD *)v15[2];
            v33 = *v32 == (_QWORD)v15;
            v15 = v32;
          }
          while (!v33);
        }
        v15 = v32;
      }
      while (v32 != v14);
    }
  }
}

void sub_20F135EB4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  double *v5;
  double *v6;
  unint64_t v9;
  double *v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double v14;
  uint64_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  int64x2_t v26;
  double v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v41;
  __int128 v42;
  uint64_t v43;
  int64x2_t v44;
  double v45;
  float64x2_t v47;
  float64x2_t v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  double v59;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  int v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int64x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83[7];
  uint64_t v84;
  uint64_t v85;
  float64x2_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float64x2_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  float64x2_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 4864);
  v5 = *(double **)(v4 + 2504);
  v6 = *(double **)(v4 + 2512);
  if (v5 == v6 || *v5 > a3 || *(v6 - 1) < a3)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 280) = 0;
    return;
  }
  v98 = xmmword_21039C6C0;
  v99 = unk_21039C6D0;
  v100 = xmmword_21039C6E0;
  v101 = unk_21039C6F0;
  v94 = (float64x2_t)xmmword_21039C680;
  v95 = *(_OWORD *)algn_21039C690;
  v9 = v6 - v5;
  v10 = v5;
  v96 = xmmword_21039C6A0;
  v97 = unk_21039C6B0;
  do
  {
    v11 = v9 >> 1;
    v12 = &v10[v9 >> 1];
    v14 = *v12;
    v13 = v12 + 1;
    v9 += ~(v9 >> 1);
    if (v14 < a3)
      v10 = v13;
    else
      v9 = v11;
  }
  while (v9);
  if (v6 == v10)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1561, (uint64_t)"next_state_timestamp_iter != state_timestamps.end()", 51, (uint64_t)"Fail to find the state whose timestamp greater than query", 57, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_31;
    }
    v5 = *(double **)(v4 + 2504);
    if (v5 == v10)
      v18 = 0;
    else
      v18 = -1;
    v16 = &v10[v18];
    v17 = *v16;
    if (*v16 > a3)
    {
LABEL_22:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1569, (uint64_t)"*prev_state_timestamp_iter <= query_timestamp && *next_state_timestamp_iter >= query_timestamp", 94, (uint64_t)"timestamp range failed", 22, (void (*)(void **))sub_21023DDB0))
      {
        v5 = *(double **)(v4 + 2504);
        v17 = *v16;
        v19 = *v10;
        goto LABEL_24;
      }
LABEL_31:
      abort();
    }
  }
  else
  {
    if (v5 == v10)
      v15 = 0;
    else
      v15 = -1;
    v16 = &v10[v15];
    v17 = *v16;
    if (*v16 > a3)
      goto LABEL_22;
  }
  v19 = *v10;
  if (*v10 < a3)
    goto LABEL_22;
LABEL_24:
  v20 = v16 - v5;
  v21 = v10 - v5;
  v22 = *(_QWORD *)(a1 + 4864);
  v23 = *(_QWORD *)(v22 + 2280);
  v24 = v23 + 168 * v20;
  v25.f64[0] = *(float64_t *)(v24 + 16);
  v26 = *(int64x2_t *)(v24 + 24);
  v27 = *(double *)(v24 + 64);
  _Q6 = *(int64x2_t *)(v24 + 48);
  v29 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v24, v26);
  v30 = (float64x2_t)vdupq_laneq_s64(_Q6, 1);
  v25.f64[1] = *(float64_t *)(v24 + 40);
  v31 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v24, v26);
  v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v30, 8uLL);
  v30.f64[0] = *(float64_t *)(v24 + 160);
  v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, *(double *)(v24 + 144)), v31, *(float64x2_t *)(v24 + 144), 1), v25, v30.f64[0]);
  _D17 = *(_QWORD *)(v24 + 152);
  __asm { FMLA            D19, D17, V6.D[1] }
  v30.f64[0] = _D19 + v27 * v30.f64[0];
  _Q17 = vnegq_f64(v33);
  v41 = vnegq_f64(v30);
  v33.f64[0] = *(float64_t *)(v24 + 48);
  *(_QWORD *)&v31.f64[1] = v32.i64[0];
  *((_QWORD *)&v42 + 1) = 0;
  v90 = v25;
  v91 = *(unint64_t *)&v27;
  v86 = v29;
  v87 = *(unint64_t *)&v33.f64[0];
  v88 = (__int128)v31;
  v89 = v32.u64[1];
  v92 = (__int128)_Q17;
  *(float64_t *)&v93 = v41.f64[0];
  *((_QWORD *)&v93 + 1) = 0x3FF0000000000000;
  v43 = v23 + 168 * v21;
  v25.f64[0] = *(float64_t *)(v43 + 16);
  v44 = *(int64x2_t *)(v43 + 24);
  v45 = *(double *)(v43 + 64);
  _Q6 = *(int64x2_t *)(v43 + 48);
  v47 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v43, v44);
  v48 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v43, v44);
  v25.f64[1] = *(float64_t *)(v43 + 40);
  v49 = vextq_s8((int8x16_t)v48, (int8x16_t)vdupq_laneq_s64(_Q6, 1), 8uLL);
  v41.f64[0] = *(float64_t *)(v43 + 160);
  v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)(v43 + 144)), v48, *(float64x2_t *)(v43 + 144), 1), v25, v41.f64[0]);
  _Q17.f64[0] = *(float64_t *)(v43 + 152);
  __asm { FMLA            D19, D17, V6.D[1] }
  v41.f64[0] = _D19 + v45 * v41.f64[0];
  v52 = vnegq_f64(v50);
  v50.f64[0] = *(float64_t *)(v43 + 48);
  *(_QWORD *)&v48.f64[1] = v49.i64[0];
  v83[4] = v25;
  v83[5] = (float64x2_t)*(unint64_t *)&v45;
  v83[0] = v47;
  v83[1] = (float64x2_t)*(unint64_t *)&v50.f64[0];
  v83[2] = v48;
  v83[3] = (float64x2_t)v49.u64[1];
  v83[6] = v52;
  v84 = *(_OWORD *)&vnegq_f64(v41);
  v85 = 0x3FF0000000000000;
  if (a3 - v17 >= v19 - a3)
    v53 = v10 - v5;
  else
    v53 = v16 - v5;
  v54 = *(_QWORD *)(v22 + 2480);
  v55 = *(_DWORD *)(v54 + 4 * v53);
  v56 = v23 + 168 * v53;
  v61.f64[0] = *(float64_t *)(v56 + 16);
  v57 = *(int64x2_t *)v56;
  v58 = *(int64x2_t *)(v56 + 24);
  v59 = *(double *)(v56 + 64);
  _Q6 = *(float64x2_t *)(v56 + 48);
  v61.f64[1] = *(float64_t *)(v56 + 40);
  v62 = *(double *)(v56 + 160);
  v63 = *(float64x2_t *)(v56 + 144);
  v64 = *(_DWORD *)(v54 + (((char *)v16 - (char *)v5) >> 1));
  if (v20 == v21)
  {
    v98 = (__int128)v90;
    v99 = v91;
    v100 = v92;
    v101 = v93;
    v94 = v86;
    v95 = v87;
    v96 = v88;
    v97 = v89;
  }
  else
  {
    v76 = *(int64x2_t *)(v56 + 24);
    v77 = *(int64x2_t *)v56;
    v78 = *(float64x2_t *)(v56 + 144);
    v79 = *(float64x2_t *)(v56 + 48);
    v80 = *(double *)(v56 + 160);
    v81 = *(double *)(v56 + 64);
    v82 = v61;
    sub_20F13632C(&v86, v83, &v94, v5[v20], v5[v21], a3, _Q6);
    *((_QWORD *)&v42 + 1) = 0;
    v59 = v81;
    v61 = v82;
    _Q6 = v79;
    v62 = v80;
    v57 = v77;
    v63 = v78;
    v58 = v76;
  }
  v65 = (float64x2_t)vzip1q_s64(v57, v58);
  v66 = (float64x2_t)vzip2q_s64(v57, v58);
  v67 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q6, 1), 8uLL);
  v68 = vmlaq_laneq_f64(vmulq_n_f64(v65, v63.f64[0]), v66, v63, 1);
  _D5 = v63.f64[1];
  __asm { FMLA            D4, D5, V6.D[1] }
  v71 = _Q6.f64[0];
  *(float64_t *)&v42 = v67.f64[1];
  v66.f64[1] = v67.f64[0];
  v67.f64[0] = _D4 + v59 * v62;
  *(_QWORD *)&v67.f64[0] = *(_OWORD *)&vnegq_f64(v67);
  v67.f64[1] = 1.0;
  v72 = v99;
  *(_OWORD *)(a2 + 64) = v98;
  *(_OWORD *)(a2 + 80) = v72;
  v73 = v101;
  *(_OWORD *)(a2 + 96) = v100;
  *(_OWORD *)(a2 + 112) = v73;
  v74 = v95;
  *(float64x2_t *)a2 = v94;
  *(_OWORD *)(a2 + 16) = v74;
  v75 = v97;
  *(_OWORD *)(a2 + 32) = v96;
  *(_OWORD *)(a2 + 48) = v75;
  *(float64x2_t *)(a2 + 128) = v65;
  *(_OWORD *)(a2 + 144) = *(unint64_t *)&v71;
  *(float64x2_t *)(a2 + 160) = v66;
  *(_OWORD *)(a2 + 176) = v42;
  *(float64x2_t *)(a2 + 192) = v61;
  *(_OWORD *)(a2 + 208) = *(unint64_t *)&v59;
  *(float64x2_t *)(a2 + 224) = vnegq_f64(vmlaq_n_f64(v68, v61, v62));
  *(float64x2_t *)(a2 + 240) = v67;
  *(double *)(a2 + 256) = a3;
  *(_DWORD *)(a2 + 264) = v53;
  *(_DWORD *)(a2 + 268) = v55;
  *(_DWORD *)(a2 + 272) = v20;
  *(_DWORD *)(a2 + 276) = v64;
  *(_BYTE *)(a2 + 280) = 1;
}

float64x2_t sub_20F13632C@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, float64x2_t a7@<Q6>)
{
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v15;
  double v16;
  double v18;
  double v20;
  float64x2_t v21;
  float64x2_t v29;
  double v30;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  __double2 v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v61;
  double v62;
  double cosval;
  double v64;
  __double2 v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64_t v69;
  float64_t v70;
  float64_t v71;
  float64_t v72;
  float64_t v73;
  double v74;
  float64_t v75;
  float64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t result;
  double v106;
  float64x2_t v107;
  uint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64_t v113;
  float64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  float64x2_t v124[3];
  double *v125[2];
  float64x2_t *v126[2];

  v9 = a6 - a4;
  v10 = a5 - a4;
  v116 = (float64x2_t)xmmword_21039C680;
  v117 = *(_OWORD *)algn_21039C690;
  v120 = xmmword_21039C6C0;
  v121 = unk_21039C6D0;
  v122 = (float64x2_t)xmmword_21039C6E0;
  v123 = unk_21039C6F0;
  v11.f64[1] = 1.0;
  v118 = xmmword_21039C6A0;
  v119 = unk_21039C6B0;
  v11.f64[0] = a2[1].f64[0];
  _D2 = a2[3].f64[0];
  v13 = a2[2];
  _D4 = a2[5].f64[0];
  v15 = a2[4];
  a7.f64[0] = a1[1].f64[0];
  v16 = a1[3].f64[0];
  _Q17 = a1[2];
  v18 = a1[5].f64[0];
  _Q19 = a1[4];
  v20 = vmlad_n_f64(vmlad_n_f64(v11.f64[0] * a1->f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
  v21 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *a1, 1), v13, _Q17, 1), v15, _Q19, 1);
  __asm
  {
    FMLA            D7, D2, V17.D[1]
    FMLA            D7, D4, V19.D[1]
  }
  _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a7.f64[0]), v13, v16), v15, v18);
  v29 = vmulq_f64(v11, a7);
  v116 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a1->f64[0]), v13, _Q17.f64[0]), v15, _Q19.f64[0]);
  *(double *)&v117 = v20;
  *(_QWORD *)&v119 = _D7;
  v118 = (__int128)v21;
  v120 = (__int128)_Q1;
  *(double *)&v121 = v29.f64[0] + _D2 * v16 + _D4 * v18;
  v30 = a1[7].f64[0];
  _Q3 = a1[6];
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, _Q3.f64[0]), v21, _Q3, 1), _Q1, v30);
  __asm { FMLA            D1, D7, V3.D[1] }
  v29.f64[0] = _Q1.f64[0] + *(double *)&v121 * v30;
  _Q1.f64[0] = a2[7].f64[0];
  v122 = vsubq_f64(a2[6], v32);
  *(_QWORD *)&v123 = *(_OWORD *)&vsubq_f64(_Q1, v29);
  memset(v124, 0, sizeof(v124));
  v126[0] = &v116;
  v126[1] = 0;
  v125[0] = (double *)v124;
  v125[1] = 0;
  sub_20E95B988(v126, v125);
  v34.f64[0] = v124[1].f64[0];
  _Q18 = v124[0];
  v36 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
  _Q1.f64[0] = v124[0].f64[1];
  __asm { FMLA            D0, D1, V18.D[1] }
  v39 = _D0 + v34.f64[0] * v34.f64[0];
  if (v39 < 0.0000002635)
  {
    _Q1.f64[0] = 0.5 - v39 * (v39 / -720.0 + 0.0416666667);
    v40 = 0.166666667 - v39 * (v39 / -5040.0 + 0.00833333333);
    v33.f64[0] = 1.0 - v39 * v40;
    v41 = v9 / v10;
    if (v39 >= 2.775e-15)
      goto LABEL_3;
LABEL_7:
    _Q1.f64[0] = v39 * 0.0000330687831 + v39 * 0.00138888889 + 0.0833333333;
    goto LABEL_8;
  }
  v43 = sqrt(v39);
  v112 = v124[0];
  v114 = v124[1].f64[0];
  v110 = v36;
  v44 = __sincos_stret(v43);
  v36 = v110;
  _Q18 = v112;
  v34.f64[0] = v114;
  v33.f64[0] = v44.__sinval / v43;
  _Q1.f64[0] = 1.0 / v39 * (1.0 - v44.__cosval);
  v40 = 1.0 / v39 * (1.0 - v44.__sinval / v43);
  v41 = v9 / v10;
  if (v39 < 2.775e-15)
    goto LABEL_7;
LABEL_3:
  v42 = (_Q1.f64[0] * 0.5 - v40) / v33.f64[0];
  _Q1.f64[0] = (_Q1.f64[0] + v33.f64[0] * -0.5) / (v39 * _Q1.f64[0]);
  if (v39 <= 9.0)
    _Q1.f64[0] = v42;
LABEL_8:
  *(_QWORD *)&v33.f64[0] = v123;
  v45.f64[0] = v36.f64[0];
  v45.f64[1] = v34.f64[0];
  v46 = (float64x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v33, 8uLL);
  v47 = vsubq_f64(vmulq_laneq_f64(_Q18, v122, 1), vmulq_f64(v36, v122));
  __asm { FMOV            V7.2D, #-0.5 }
  v49 = vaddq_f64(v33, vmulq_f64(v47, _Q7));
  v33.f64[1] = v122.f64[0];
  v34.f64[1] = _Q18.f64[0];
  v50 = vsubq_f64(vmulq_f64(v45, v33), vmulq_f64(v34, v46));
  _Q5 = (float64x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v47, 8uLL);
  v47.f64[1] = v50.f64[0];
  v52 = vmulq_n_f64(vsubq_f64(vmulq_f64(v45, v47), vmulq_f64(v34, _Q5)), _Q1.f64[0]);
  *(float64x2_t *)((char *)&v124[1] + 8) = vaddq_f64(vaddq_f64(v122, vmulq_f64(v50, _Q7)), v52);
  *(_QWORD *)&v124[2].f64[1] = *(_OWORD *)&vaddq_f64(v49, vmulq_f64(_Q1, vsubq_f64(vmulq_laneq_f64(_Q18, v50, 1), vmulq_f64(v36, v50))));
  v53.f64[1] = v124[0].f64[1];
  _Q30 = (int8x16_t)vmulq_n_f64(v124[0], v41);
  v55 = (float64x2_t)vextq_s8(_Q30, _Q30, 8uLL);
  v56 = vmulq_n_f64(v124[2], v41);
  v57 = vmulq_n_f64(v124[1], v41);
  v58 = (float64x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL);
  v59 = (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL);
  _D0 = _Q30.i64[1];
  __asm { FMLA            D5, D0, V30.D[1] }
  v61 = vmlad_n_f64(_Q5.f64[0], v57.f64[0], v57.f64[0]);
  if (v61 >= 0.0000002635)
  {
    v64 = sqrt(v61);
    v113 = v57.f64[0];
    v115 = v55;
    v109 = v56;
    v111 = v58;
    v107 = v59;
    v108 = _Q30.i64[0];
    v106 = v61;
    v65 = __sincos_stret(v64);
    cosval = v65.__cosval;
    v59 = v107;
    _Q30.i64[0] = v108;
    v56 = v109;
    v58 = v111;
    v57.f64[0] = v113;
    v55 = v115;
    v62 = v65.__sinval / v64;
    v52.f64[0] = 1.0 / v106 * (1.0 - v65.__cosval);
    v53.f64[0] = 1.0 / v106 * (1.0 - v65.__sinval / v64);
  }
  else
  {
    v52.f64[0] = 0.5 - v61 * (v61 / -720.0 + 0.0416666667);
    v53.f64[0] = 0.166666667 - v61 * (v61 / -5040.0 + 0.00833333333);
    v62 = 1.0 - v61 * v53.f64[0];
    cosval = 1.0 - v61 * v52.f64[0];
  }
  v66.f64[0] = v59.f64[0];
  v66.f64[1] = v56.f64[0];
  *(_QWORD *)&v67.f64[0] = _Q30.i64[0];
  v67.f64[1] = v55.f64[0];
  v68.f64[0] = *(double *)_Q30.i64 * (*(double *)_Q30.i64 * v52.f64[0]) + cosval;
  v69 = v55.f64[0] * (v55.f64[0] * v52.f64[0]) + cosval;
  v70 = v57.f64[0] * (v57.f64[0] * v52.f64[0]) + cosval;
  v71 = v55.f64[0] * (*(double *)_Q30.i64 * v52.f64[0]);
  v72 = v57.f64[0] * (*(double *)_Q30.i64 * v52.f64[0]);
  v73 = v57.f64[0] * (v55.f64[0] * v52.f64[0]);
  v74 = *(double *)_Q30.i64 * v62;
  v75 = v55.f64[0] * v62;
  v76 = v57.f64[0] * v62;
  v77.f64[0] = v71 - v57.f64[0] * v62;
  v78.f64[0] = v72 + v75;
  v68.f64[1] = v71 + v76;
  *(_QWORD *)&v80.f64[1] = unk_21039C6D8;
  v79.f64[1] = 0.0;
  v79.f64[0] = v72 - v75;
  v77.f64[1] = v69;
  *(_QWORD *)&v81.f64[1] = unk_21039C6B8;
  v81.f64[0] = v73 + v74;
  v78.f64[1] = v73 - v74;
  v80.f64[0] = v70;
  v82.f64[0] = v55.f64[0];
  v82.f64[1] = v57.f64[0];
  *(_QWORD *)&v57.f64[1] = _Q30.i64[0];
  v83.f64[0] = v56.f64[0];
  v83.f64[1] = v58.f64[0];
  v84.f64[0] = v58.f64[0];
  v84.f64[1] = v59.f64[0];
  v85 = vsubq_f64(vmulq_f64(v82, v84), vmulq_f64(v57, v83));
  v86 = vsubq_f64(vmulq_f64(v67, v56), vmulq_f64(v55, v59));
  v87 = vaddq_f64(v66, vmulq_n_f64(v85, v52.f64[0]));
  v88 = vaddq_f64(v58, vmulq_f64(v86, v52));
  v89 = (float64x2_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 8uLL);
  v86.f64[1] = v85.f64[0];
  v90 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v67, v85, 1), vmulq_f64(v55, v85)), v53);
  v91 = vaddq_f64(v87, vmulq_n_f64(vsubq_f64(vmulq_f64(v82, v86), vmulq_f64(v57, v89)), v53.f64[0]));
  *(_QWORD *)&v92.f64[1] = unk_21039C6F8;
  *(_QWORD *)&v92.f64[0] = *(_OWORD *)&vaddq_f64(v88, v90);
  v93 = a1[1];
  v95 = a1[2];
  v94 = a1[3];
  v97 = a1[4];
  v96 = a1[5];
  v99 = a1[6];
  v98 = a1[7];
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, a1->f64[0]), v77, *a1, 1), v78, v93.f64[0]), v91, v93, 1);
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, a1->f64[0]), v81, *a1, 1), v80, v93.f64[0]), v92, v93, 1);
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v95.f64[0]), v77, v95, 1), v78, v94.f64[0]), v91, v94, 1);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v95.f64[0]), v81, v95, 1), v80, v94.f64[0]), v92, v94, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v97.f64[0]), v77, v97, 1), v78, v96.f64[0]), v91, v96, 1);
  result = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v99.f64[0]), v77, v99, 1), v78, v98.f64[0]), v91, v98, 1);
  *a3 = v100;
  a3[1] = v101;
  a3[2] = v102;
  a3[3] = v103;
  a3[4] = v104;
  a3[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v97.f64[0]), v81, v97, 1), v80, v96.f64[0]), v92, v96, 1);
  a3[6] = result;
  a3[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79, v99.f64[0]), v81, v99, 1), v80, v98.f64[0]), v92, v98, 1);
  return result;
}

char *sub_20F136914(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  void **v30;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  size_t v56;
  size_t v57;
  uint64_t *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  const char *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  size_t v114;
  unsigned int v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  size_t v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  int v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  double v170;
  size_t v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v177;
  const char *v178;
  const char *v179;
  int v180;
  int v181;
  char *__s;
  char *__sa;
  _QWORD v184[3];
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *__dst[2];
  int64_t v192;
  uint64_t v193;
  void *v194;
  char *v195;
  char *v196;
  __int128 v197;
  std::__shared_weak_count *v198;
  char *v199;
  std::__shared_weak_count *v200;
  uint64_t *v201;
  __int128 v202;
  void *object;
  _BYTE v204[40];
  size_t v205;
  unint64_t v206;
  const void *v207;
  unint64_t v208;
  void *__p;
  char v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  _BYTE v214[24];
  __int128 v215;
  char *v216;
  const char *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  _QWORD v220[5];

  v1 = (char *)a1;
  v220[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 5264);
  if (!*(_BYTE *)(v2 + 872))
    return v1 + 3768;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v3 = *(_BYTE **)(v2 + 832);
  v4 = *(_BYTE **)(v2 + 840);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v4 - v3);
    v7 = &v6[16 * (v5 >> 4)];
    v194 = v6;
    v196 = v7;
    memcpy(v6, v3, v5 - 7);
    v195 = v7;
  }
  sub_20F1328FC(&v193);
  if (**(int **)(v193 + 56) <= 2)
  {
    v8 = *(unsigned __int8 *)(v193 + 72);
    v9 = sub_20E8C31DC(v193, "OSLogSurrogateAppender", 1, 0);
    v10 = v9;
    if (v8 || v9 != 0)
    {
      sub_20E863438((uint64_t)&object);
      v12 = sub_20E86A980(&v204[8], (uint64_t)"\nVIO Health ", 12);
      v13 = *v12;
      *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 10;
      *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v12 + *(_QWORD *)(v13 - 24) + 16) = 3;
      sub_20E86A980(v12, (uint64_t)" FrameID: ", 10);
      v14 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v14, (uint64_t)" Health: ", 9);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v15, (uint64_t)" Num tracks: ", 13);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v16, (uint64_t)" Inlier ratio: ", 15);
      v17 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v17, (uint64_t)" Percentage short: ", 19);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v18, (uint64_t)" Ratio small res: ", 18);
      v19 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v19, (uint64_t)" Step size: ", 12);
      v20 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v20, (uint64_t)" vel ", 5);
      v21 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v21, (uint64_t)" stationary ", 12);
      v22 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v22, (uint64_t)" latest stationary ", 19);
      v23 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v23, (uint64_t)" Num inliers in last ", 21);
      v24 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v24, (uint64_t)" Num inliers map in latest map tracking state ", 46);
      v25 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v25, (uint64_t)" Total num residual ", 20);
      v26 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v26, (uint64_t)" low_texture ", 13);
      v27 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v27, (uint64_t)" severe_low_texture ", 20);
      v28 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v28, (uint64_t)" avg Vergence angle ", 20);
      std::ostream::operator<<();
      v180 = v8;
      if ((v212 & 0x10) != 0)
      {
        v31 = v211;
        if (v211 < v208)
        {
          v211 = v208;
          v31 = v208;
        }
        v32 = v207;
        v29 = v31 - (_QWORD)v207;
        if (v31 - (unint64_t)v207 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_67;
      }
      else
      {
        if ((v212 & 8) == 0)
        {
          v29 = 0;
          HIBYTE(v192) = 0;
          v30 = __dst;
          goto LABEL_23;
        }
        v32 = *(const void **)&v204[32];
        v29 = v206 - *(_QWORD *)&v204[32];
        if (v206 - *(_QWORD *)&v204[32] > 0x7FFFFFFFFFFFFFF7)
LABEL_67:
          sub_20E860B7C();
      }
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        v30 = (void **)operator new(v33 + 1);
        __dst[1] = (void *)v29;
        v192 = v34 | 0x8000000000000000;
        __dst[0] = v30;
      }
      else
      {
        HIBYTE(v192) = v29;
        v30 = __dst;
        if (!v29)
        {
LABEL_23:
          *((_BYTE *)v30 + v29) = 0;
          v184[0] = &v193;
          v184[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v184[2] = std::chrono::system_clock::now().__d_.__rep_;
          v185 = 2;
          v186 = "unknown file";
          v187 = 1645;
          v189 = 0;
          v190 = 0;
          v188 = "unknown function";
          v35 = __dst;
          if (v192 < 0)
            v35 = (void **)__dst[0];
          __s = (char *)v35;
          v36 = *(_QWORD *)v184[0];
          v37 = (const char *)(*(_QWORD *)v184[0] + 16);
          v178 = v37;
          if (*(char *)(*(_QWORD *)v184[0] + 39) < 0)
          {
            v37 = *(const char **)(v36 + 16);
            v38 = *(_QWORD *)(v36 + 24);
            v39 = v10;
            v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v41 & 1) != 0)
              goto LABEL_29;
          }
          else
          {
            v38 = *(unsigned __int8 *)(*(_QWORD *)v184[0] + 39);
            v39 = v10;
            v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v40 & 1) != 0)
              goto LABEL_29;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v214);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v214);
            if ((_BYTE)v215 && (v214[23] & 0x80000000) != 0)
              operator delete(*(void **)v214);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_29:
          if (byte_254A4A4F8[23] >= 0)
            v42 = byte_254A4A4F8;
          else
            v42 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v43 = byte_254A4A4F8[23];
          else
            v43 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v214 = os_log_create(v42, v37);
          v44 = &v214[8];
          if (v43 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v43 >= 0x17)
          {
            v45 = v1;
            v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v43 | 7) != 0x17)
              v46 = v43 | 7;
            v47 = v46 + 1;
            v44 = operator new(v46 + 1);
            *(_QWORD *)&v214[16] = v43;
            *(_QWORD *)&v215 = v47 | 0x8000000000000000;
            *(_QWORD *)&v214[8] = v44;
            v1 = v45;
          }
          else
          {
            BYTE7(v215) = v43;
            if (!v43)
            {
LABEL_43:
              v44[v43] = 0;
              BYTE8(v215) = 1;
              v48 = (char *)&v216;
              if (v38 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v38 >= 0x17)
              {
                v50 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v38 | 7) != 0x17)
                  v50 = v38 | 7;
                v51 = v50 + 1;
                v48 = (char *)operator new(v50 + 1);
                v217 = (const char *)v38;
                v218 = v51 | 0x8000000000000000;
                v216 = v48;
                v49 = v39;
              }
              else
              {
                HIBYTE(v218) = v38;
                v49 = v39;
                if (!v38)
                {
LABEL_51:
                  v48[v38] = 0;
                  LOBYTE(v219) = 1;
                  v52 = *(NSObject **)v214;
                  if (SHIBYTE(v218) < 0)
                    operator delete(v216);
                  if (BYTE8(v215) && SBYTE7(v215) < 0)
                    operator delete(*(void **)&v214[8]);
                  if (*(_QWORD *)v214)
                    os_release(*(void **)v214);
                  if (!v49 || !*(_QWORD *)(v49 + 24))
                  {
                    os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v214 = 136315138;
                    *(_QWORD *)&v214[4] = __s;
                    v59 = (void *)_os_log_send_and_compose_impl();
                    if (v59)
                      free(v59);
                    goto LABEL_131;
                  }
                  v53 = _os_log_pack_size();
                  v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                  v55 = (std::__shared_weak_count *)operator new();
                  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v55->__shared_owners_ = 0;
                  v55->__shared_weak_owners_ = 0;
                  v55[1].__vftable = v54;
                  *(_QWORD *)&v197 = v54;
                  *((_QWORD *)&v197 + 1) = v54;
                  v199 = 0;
                  v200 = 0;
                  v198 = v55;
                  v56 = strlen(__s);
                  if (v56 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v57 = v56;
                  if (v56 >= 0x17)
                  {
                    v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v56 | 7) != 0x17)
                      v60 = v56 | 7;
                    v61 = v60 + 1;
                    v58 = (uint64_t *)operator new(v60 + 1);
                    *(_QWORD *)&v202 = v57;
                    *((_QWORD *)&v202 + 1) = v61 | 0x8000000000000000;
                    v201 = v58;
                    v49 = v39;
                  }
                  else
                  {
                    HIBYTE(v202) = v56;
                    v58 = (uint64_t *)&v201;
                    if (!v56)
                    {
LABEL_72:
                      *((_BYTE *)v58 + v57) = 0;
                      v62 = (uint64_t)v201;
                      v220[0] = v202;
                      *(_QWORD *)((char *)v220 + 7) = *(_QWORD *)((char *)&v202 + 7);
                      v63 = HIBYTE(v202);
                      v64 = operator new(0x38uLL);
                      v64[1] = 0;
                      v64[2] = 0;
                      v64[3] = off_24C9ABC20;
                      *v64 = &off_24C9ABBD0;
                      v65 = v220[0];
                      v64[4] = v62;
                      v64[5] = v65;
                      *(_QWORD *)((char *)v64 + 47) = *(_QWORD *)((char *)v220 + 7);
                      *((_BYTE *)v64 + 55) = v63;
                      v220[0] = 0;
                      *(_QWORD *)((char *)v220 + 7) = 0;
                      v66 = v200;
                      v199 = (char *)(v64 + 3);
                      v200 = (std::__shared_weak_count *)v64;
                      if (v66)
                      {
                        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
                        do
                          v68 = __ldaxr(p_shared_owners);
                        while (__stlxr(v68 - 1, p_shared_owners));
                        if (!v68)
                        {
                          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                          std::__shared_weak_count::__release_weak(v66);
                        }
                      }
                      *(_OWORD *)v214 = v197;
                      v69 = v199;
                      *(_QWORD *)&v214[16] = v198;
                      if (v198)
                      {
                        v70 = (unint64_t *)&v198->__shared_owners_;
                        do
                          v71 = __ldxr(v70);
                        while (__stxr(v71 + 1, v70));
                      }
                      v72 = v200;
                      *(_QWORD *)&v215 = v69;
                      *((_QWORD *)&v215 + 1) = v200;
                      if (v200)
                      {
                        v73 = (unint64_t *)&v200->__shared_owners_;
                        do
                          v74 = __ldxr(v73);
                        while (__stxr(v74 + 1, v73));
                        v216 = v69;
                        do
                          v75 = __ldaxr(v73);
                        while (__stlxr(v75 - 1, v73));
                        if (!v75)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                      }
                      else
                      {
                        v216 = v69;
                      }
                      v76 = v198;
                      if (v198)
                      {
                        v77 = (unint64_t *)&v198->__shared_owners_;
                        do
                          v78 = __ldaxr(v77);
                        while (__stlxr(v78 - 1, v77));
                        if (!v78)
                        {
                          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                          std::__shared_weak_count::__release_weak(v76);
                        }
                      }
                      v79 = *(_QWORD *)v214;
                      if (v216[31] >= 0)
                        v80 = v216 + 8;
                      else
                        v80 = (char *)*((_QWORD *)v216 + 1);
                      v81 = _os_log_pack_fill();
                      *(_DWORD *)v81 = 136315138;
                      *(_QWORD *)(v81 + 4) = v80;
                      v82 = operator new();
                      v83 = *(unsigned __int8 *)(v36 + 39);
                      v84 = v178;
                      if ((v83 & 0x80u) != 0)
                      {
                        v84 = *(const char **)(v36 + 16);
                        v83 = *(_QWORD *)(v36 + 24);
                      }
                      *(_QWORD *)v82 = v79;
                      *(_OWORD *)(v82 + 8) = *(_OWORD *)&v214[8];
                      *(_QWORD *)&v214[8] = 0;
                      *(_QWORD *)&v214[16] = 0;
                      *(_OWORD *)(v82 + 24) = v215;
                      v215 = 0uLL;
                      *(_QWORD *)(v82 + 40) = v84;
                      *(_QWORD *)(v82 + 48) = v83;
                      *(_BYTE *)(v82 + 56) = 2;
                      v201 = 0;
                      *(_QWORD *)&v197 = v82;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v49 + 24) + 40))(*(_QWORD *)(v49 + 24), &v197);
                      v85 = v197;
                      *(_QWORD *)&v197 = 0;
                      if (v85)
                      {
                        v86 = *(std::__shared_weak_count **)(v85 + 32);
                        if (v86)
                        {
                          v87 = (unint64_t *)&v86->__shared_owners_;
                          do
                            v88 = __ldaxr(v87);
                          while (__stlxr(v88 - 1, v87));
                          if (!v88)
                          {
                            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                            std::__shared_weak_count::__release_weak(v86);
                          }
                        }
                        v89 = *(std::__shared_weak_count **)(v85 + 16);
                        if (v89)
                        {
                          v90 = (unint64_t *)&v89->__shared_owners_;
                          do
                            v91 = __ldaxr(v90);
                          while (__stlxr(v91 - 1, v90));
                          if (!v91)
                          {
                            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                            std::__shared_weak_count::__release_weak(v89);
                          }
                        }
                        MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
                        v92 = (uint64_t)v201;
                        v201 = 0;
                        if (v92)
                        {
                          v93 = *(std::__shared_weak_count **)(v92 + 32);
                          if (v93)
                          {
                            v94 = (unint64_t *)&v93->__shared_owners_;
                            do
                              v95 = __ldaxr(v94);
                            while (__stlxr(v95 - 1, v94));
                            if (!v95)
                            {
                              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                              std::__shared_weak_count::__release_weak(v93);
                            }
                          }
                          v96 = *(std::__shared_weak_count **)(v92 + 16);
                          if (v96)
                          {
                            v97 = (unint64_t *)&v96->__shared_owners_;
                            do
                              v98 = __ldaxr(v97);
                            while (__stlxr(v98 - 1, v97));
                            if (!v98)
                            {
                              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                              std::__shared_weak_count::__release_weak(v96);
                            }
                          }
                          MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
                        }
                      }
                      v99 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
                      if (*((_QWORD *)&v215 + 1))
                      {
                        v100 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
                        do
                          v101 = __ldaxr(v100);
                        while (__stlxr(v101 - 1, v100));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                      v102 = *(std::__shared_weak_count **)&v214[16];
                      if (*(_QWORD *)&v214[16])
                      {
                        v103 = (unint64_t *)(*(_QWORD *)&v214[16] + 8);
                        do
                          v104 = __ldaxr(v103);
                        while (__stlxr(v104 - 1, v103));
                        if (!v104)
                        {
                          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                          std::__shared_weak_count::__release_weak(v102);
                        }
                      }
LABEL_131:
                      if (v180)
                      {
                        v105 = (const char *)__dst;
                        if (v192 < 0)
                          v105 = (const char *)__dst[0];
                        sub_20E8C003C((uint64_t)v184, "%s", v105);
                        sub_20E863570((uint64_t)v184);
                      }
                      sub_20E863570((uint64_t)v184);
                      v106 = v190;
                      if (v190)
                      {
                        v107 = (unint64_t *)&v190->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      if (SHIBYTE(v192) < 0)
                        operator delete(__dst[0]);
                      object = (void *)*MEMORY[0x24BEDB7F0];
                      v109 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&v204[*((_QWORD *)object - 3) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&v204[8] = v109;
                      *(_QWORD *)&v204[16] = MEMORY[0x24BEDB848] + 16;
                      if (v210 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v213);
                      goto LABEL_145;
                    }
                  }
                  memcpy(v58, __s, v57);
                  goto LABEL_72;
                }
              }
              memmove(v48, v37, v38);
              goto LABEL_51;
            }
          }
          memmove(v44, v42, v43);
          goto LABEL_43;
        }
      }
      memmove(v30, v32, v29);
      goto LABEL_23;
    }
  }
LABEL_145:
  sub_20F1328FC(&v201);
  if (*(int *)v201[7] <= 2)
  {
    v110 = *((unsigned __int8 *)v201 + 72);
    v111 = sub_20E8C31DC((uint64_t)v201, "OSLogSurrogateAppender", 1, 0);
    v112 = v111;
    if (v110 || v111)
    {
      v181 = v110;
      *(_QWORD *)v214 = &v201;
      *(std::chrono::steady_clock::time_point *)&v214[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v214[16] = std::chrono::system_clock::now();
      LODWORD(v215) = 2;
      *((_QWORD *)&v215 + 1) = "unknown file";
      LODWORD(v216) = 1656;
      v218 = 0;
      v219 = 0;
      v217 = "unknown function";
      v113 = (const char *)(**(_QWORD **)v214 + 16);
      v177 = **(_QWORD **)v214;
      v179 = v113;
      if (*(char *)(**(_QWORD **)v214 + 39) < 0)
      {
        v113 = *(const char **)(v177 + 16);
        v114 = *(_QWORD *)(v177 + 24);
        __sa = v1;
        v115 = *(_DWORD *)(v2 + 744);
        v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v117 & 1) != 0)
          goto LABEL_152;
      }
      else
      {
        v114 = *(unsigned __int8 *)(**(_QWORD **)v214 + 39);
        __sa = v1;
        v115 = *(_DWORD *)(v2 + 744);
        v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v116 & 1) != 0)
          goto LABEL_152;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if (v204[16] && (v204[15] & 0x80000000) != 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_152:
      if (byte_254A4A4F8[23] >= 0)
        v118 = byte_254A4A4F8;
      else
        v118 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v119 = byte_254A4A4F8[23];
      else
        v119 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v118, v113);
      v120 = v204;
      if (v119 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v119 >= 0x17)
      {
        v121 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17)
          v121 = v119 | 7;
        v122 = v121 + 1;
        v120 = operator new(v121 + 1);
        *(_QWORD *)&v204[8] = v119;
        *(_QWORD *)&v204[16] = v122 | 0x8000000000000000;
        *(_QWORD *)v204 = v120;
      }
      else
      {
        v204[23] = v119;
        if (!v119)
        {
LABEL_166:
          v120[v119] = 0;
          v204[24] = 1;
          v123 = &v204[32];
          if (v114 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v1 = __sa;
          if (v114 >= 0x17)
          {
            v124 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v114 | 7) != 0x17)
              v124 = v114 | 7;
            v125 = v124 + 1;
            v123 = operator new(v124 + 1);
            v205 = v114;
            v206 = v125 | 0x8000000000000000;
            *(_QWORD *)&v204[32] = v123;
          }
          else
          {
            HIBYTE(v206) = v114;
            if (!v114)
              goto LABEL_174;
          }
          memmove(v123, v113, v114);
LABEL_174:
          v123[v114] = 0;
          LOBYTE(v207) = 1;
          v126 = object;
          if (SHIBYTE(v206) < 0)
            operator delete(*(void **)&v204[32]);
          if (v204[24] && (v204[23] & 0x80000000) != 0)
            operator delete(*(void **)v204);
          if (object)
            os_release(object);
          v127 = (v115 >> 1) & 1;
          v128 = v115 & 1;
          v129 = (v115 >> 2) & 1;
          v130 = (v115 >> 3) & 1;
          if (v112 && *(_QWORD *)(v112 + 24))
          {
            v131 = _os_log_pack_size();
            v132 = (std::__shared_weak_count_vtbl *)operator new(v131, (std::align_val_t)8uLL);
            v133 = (std::__shared_weak_count *)operator new();
            v134 = v133;
            v133->__shared_owners_ = 0;
            v135 = (unint64_t *)&v133->__shared_owners_;
            v133->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v133->__shared_weak_owners_ = 0;
            v133[1].__vftable = v132;
            object = v132;
            *(_QWORD *)v204 = v132;
            *(_QWORD *)&v204[8] = v133;
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
            memset(&v204[16], 0, 24);
            do
              v137 = __ldaxr(v135);
            while (__stlxr(v137 - 1, v135));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v134);
            }
            v138 = object;
            v139 = _os_log_pack_fill();
            v140 = *(float *)(v2 + 720);
            v141 = *(_QWORD *)(v2 + 728);
            v142 = *(_QWORD *)(v2 + 736);
            *(_DWORD *)v139 = 67110656;
            *(_DWORD *)(v139 + 4) = v128;
            *(_WORD *)(v139 + 8) = 1024;
            *(_DWORD *)(v139 + 10) = v127;
            *(_WORD *)(v139 + 14) = 1024;
            *(_DWORD *)(v139 + 16) = v129;
            *(_WORD *)(v139 + 20) = 1024;
            *(_DWORD *)(v139 + 22) = v130;
            *(_WORD *)(v139 + 26) = 2048;
            *(double *)(v139 + 28) = v140;
            *(_WORD *)(v139 + 36) = 2048;
            *(_QWORD *)(v139 + 38) = v141;
            *(_WORD *)(v139 + 46) = 2048;
            *(_QWORD *)(v139 + 48) = v142;
            v143 = operator new();
            v144 = *(unsigned __int8 *)(v177 + 39);
            v145 = *(const char **)(v177 + 16);
            v146 = *(_QWORD *)(v177 + 24);
            v147 = *(_OWORD *)&v204[16];
            *(_OWORD *)(v143 + 8) = *(_OWORD *)v204;
            if ((v144 & 0x80u) != 0)
              v144 = v146;
            else
              v145 = v179;
            *(_QWORD *)v143 = v138;
            *(_QWORD *)v204 = 0;
            *(_QWORD *)&v204[8] = 0;
            *(_OWORD *)(v143 + 24) = v147;
            *(_QWORD *)&v204[16] = 0;
            *(_QWORD *)&v204[24] = 0;
            *(_QWORD *)(v143 + 40) = v145;
            *(_QWORD *)(v143 + 48) = v144;
            *(_BYTE *)(v143 + 56) = 2;
            *(_QWORD *)&v197 = 0;
            v184[0] = v143;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v112 + 24) + 40))(*(_QWORD *)(v112 + 24), v184);
            v148 = v184[0];
            v184[0] = 0;
            if (v148)
            {
              v149 = *(std::__shared_weak_count **)(v148 + 32);
              if (v149)
              {
                v150 = (unint64_t *)&v149->__shared_owners_;
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v152 = *(std::__shared_weak_count **)(v148 + 16);
              if (v152)
              {
                v153 = (unint64_t *)&v152->__shared_owners_;
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              MEMORY[0x212BC6398](v148, 0x10F0C40B62ED6C6);
              v155 = v197;
              *(_QWORD *)&v197 = 0;
              if (v155)
              {
                v156 = *(std::__shared_weak_count **)(v155 + 32);
                if (v156)
                {
                  v157 = (unint64_t *)&v156->__shared_owners_;
                  do
                    v158 = __ldaxr(v157);
                  while (__stlxr(v158 - 1, v157));
                  if (!v158)
                  {
                    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                }
                v159 = *(std::__shared_weak_count **)(v155 + 16);
                if (v159)
                {
                  v160 = (unint64_t *)&v159->__shared_owners_;
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                    std::__shared_weak_count::__release_weak(v159);
                  }
                }
                MEMORY[0x212BC6398](v155, 0x10F0C40B62ED6C6);
              }
            }
            v162 = *(std::__shared_weak_count **)&v204[24];
            v163 = v181;
            if (*(_QWORD *)&v204[24])
            {
              v164 = (unint64_t *)(*(_QWORD *)&v204[24] + 8);
              do
                v165 = __ldaxr(v164);
              while (__stlxr(v165 - 1, v164));
              if (!v165)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
            v166 = *(std::__shared_weak_count **)&v204[8];
            if (*(_QWORD *)&v204[8])
            {
              v167 = (unint64_t *)(*(_QWORD *)&v204[8] + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
          }
          else
          {
            os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG);
            v169 = *(_QWORD *)(v2 + 728);
            v170 = *(float *)(v2 + 720);
            v171 = *(_QWORD *)(v2 + 736);
            LODWORD(object) = 67110656;
            HIDWORD(object) = v128;
            *(_WORD *)v204 = 1024;
            *(_DWORD *)&v204[2] = v127;
            *(_WORD *)&v204[6] = 1024;
            *(_DWORD *)&v204[8] = v129;
            *(_WORD *)&v204[12] = 1024;
            *(_DWORD *)&v204[14] = v130;
            *(_WORD *)&v204[18] = 2048;
            *(double *)&v204[20] = v170;
            *(_WORD *)&v204[28] = 2048;
            *(_QWORD *)&v204[30] = v169;
            *(_WORD *)&v204[38] = 2048;
            v205 = v171;
            v172 = (void *)_os_log_send_and_compose_impl();
            v163 = v181;
            if (v172)
              free(v172);
          }
          if (v163)
          {
            sub_20E8C003C((uint64_t)v214, "Accel: %d. Gyro: %d. Vision: %d (%d). Inlier fraction %f (%zu/%zu)\n\n", *(_DWORD *)(v2 + 744) & 1, (*(_DWORD *)(v2 + 744) >> 1) & 1, (*(_DWORD *)(v2 + 744) >> 2) & 1, (*(_DWORD *)(v2 + 744) >> 3) & 1, *(float *)(v2 + 720), *(_QWORD *)(v2 + 728), *(_QWORD *)(v2 + 736));
            sub_20E863570((uint64_t)v214);
          }
          sub_20E863570((uint64_t)v214);
          v173 = v219;
          if (v219)
          {
            v174 = (unint64_t *)&v219->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          goto LABEL_234;
        }
      }
      memmove(v120, v118, v119);
      goto LABEL_166;
    }
  }
LABEL_234:
  if (v194)
    operator delete(v194);
  return v1 + 3768;
}

void sub_20F137D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *object,void *a49,int a50,__int16 a51,char a52,char a53,char a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (*(_BYTE *)(v58 - 184) && *(char *)(v58 - 185) < 0)
    operator delete(*(void **)(v58 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  if (a35 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void sub_20F137F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int8x16_t *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  char *v28;
  void **v29;
  char *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  int8x16_t *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int8x16_t v95;
  void *v96;
  uint64_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  unint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  __int128 v163;
  __int128 v164;
  int8x16_t v165;
  int8x16_t v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t i;
  unsigned __int8 v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t j;
  unsigned __int8 v174;
  unsigned __int8 v175;
  uint64_t v176;
  uint64_t k;
  unsigned __int8 v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t m;
  unsigned __int8 v182;
  unsigned int v183;
  uint64_t v184;
  char **v185;
  char *v186;
  char **v187;
  unsigned int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  BOOL v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  _BYTE *v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  void *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  int8x16_t v209;
  std::__shared_weak_count *v210;
  unint64_t *p_shared_owners;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  int v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t *v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  double v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  void *v249;
  _QWORD *v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  void *v254;
  void *v255;
  _QWORD *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  unint64_t v265;
  int8x16_t v266;
  unint64_t v267;
  int8x16_t v268;
  unint64_t v269;
  int8x16_t v270;
  unint64_t v271;
  int8x16_t v272;
  unint64_t v273;
  unint64_t v274;
  int8x16_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  int8x16_t v279;
  unint64_t v280;
  unint64_t v281;
  int8x16_t v282;
  unint64_t v283;
  int8x16_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  int8x16_t v288;
  unint64_t v289;
  unint64_t v290;
  int8x16_t v291;
  unint64_t v292;
  unint64_t v293;
  int8x16_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  int8x16_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  uint64_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  uint64_t v428;
  _BYTE *v429;
  int8x16_t v430;
  __int128 v431;
  int8x16_t v432;
  __int128 v433;
  int8x16_t v434;
  __int128 v435;
  int8x16_t v436;
  __int128 v437;
  int8x16_t v438;
  __int128 v439;
  int8x16_t v440;
  __int128 v441;
  int8x16_t v442;
  __int128 v443;
  int8x16_t v444;
  __int128 v445;
  int8x16_t v446;
  __int128 v447;
  int8x16_t v448;
  __int128 v449;
  int8x16_t v450;
  __int128 v451;
  int8x16_t v452;
  __int128 v453;
  int8x16_t v454;
  __int128 v455;
  int8x16_t v456;
  __int128 v457;
  int8x16_t v458;
  __int128 v459;
  int8x16_t v460;
  __int128 v461;
  int8x16_t v462;
  __int128 v463;
  int8x16_t v464;
  __int128 v465;
  int8x16_t v466;
  __int128 v467;
  int8x16_t v468;
  __int128 v469;
  int8x16_t v470;
  __int128 v471;
  int8x16_t v472;
  __int128 v473;
  int8x16_t v474;
  __int128 v475;
  int8x16_t v476;
  __int128 v477;
  int8x16_t v478;
  __int128 v479;
  int8x16_t v480;
  __int128 v481;
  int8x16_t v482;
  __int128 v483;
  int8x16_t v484;
  __int128 v485;
  int8x16_t v486;
  __int128 v487;
  int8x16_t v488;
  __int128 v489;
  int8x16_t v490;
  __int128 v491;
  int8x16_t v492;
  int8x16_t v493;
  __int128 v494;
  int8x16_t v495;
  __int128 v496;
  int8x16_t v497;
  __int128 v498;
  int8x16_t v499;
  __int128 v500;
  int8x16_t v501;
  __int128 v502;
  int8x16_t v503;
  __int128 v504;
  int8x16_t v505;
  __int128 v506;
  int8x16_t v507;
  __int128 v508;
  int8x16_t v509;
  __int128 v510;
  int8x16_t v511;
  __int128 v512;
  int8x16_t v513;
  __int128 v514;
  int8x16_t v515;
  __int128 v516;
  int8x16_t v517;
  __int128 v518;
  int8x16_t v519;
  __int128 v520;
  int8x16_t v521;
  __int128 v522;
  uint64_t v523;
  int8x16_t v524;
  __int128 v525;
  int64x2_t v526;
  int8x16_t v527;
  __int128 v528;
  int8x16_t v529;
  __int128 v530;
  int8x16_t v531;
  __int128 v532;
  int8x16_t v533;
  __int128 v534;
  int8x16_t v535;
  __int128 v536;
  int8x16_t v537;
  __int128 v538;
  char **v539;
  uint64_t v540;
  int8x16_t v541;
  __int128 v542;
  uint64_t v543;
  uint64_t v544;
  int8x16_t v545;
  __int128 v546;
  unsigned int v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  void *__p[6];
  void *v552[2];
  void *v553[4];
  void *v554[6];
  int8x16_t v555;
  int8x16_t v556;
  int8x16_t v557;
  int8x16_t v558;
  int8x16_t v559;
  _OWORD v560[2];
  int8x16_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int8x16_t v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int8x16_t v585;
  int8x16_t v586;
  int8x16_t v587;
  int8x16_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  _BYTE v597[32];
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  int8x16_t v613;
  int8x16_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  int8x16_t v618;
  int8x16_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  _BYTE v640[32];
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  _BYTE v645[32];
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  int8x16_t v653;
  uint64_t v654;
  uint64_t v655;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v655 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 192) = 2;
  *(_WORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 808) = 0;
  *(_OWORD *)(v3 + 1632) = 0u;
  *(_DWORD *)(v3 + 1648) = 0;
  *(_OWORD *)(v3 + 208) = 0u;
  v5 = v3 + 208;
  v6 = (_BYTE *)(v3 + 4864);
  v7 = (_BYTE *)(v3 + 4600);
  v8 = (int8x16_t *)(v3 + 816);
  v3 += 840;
  *(_DWORD *)(v5 + 1464) = 0;
  *(_OWORD *)(v3 + 816) = 0u;
  *(_DWORD *)(v5 + 1488) = 0;
  *(_OWORD *)(v5 + 1472) = 0u;
  *(_DWORD *)(v5 + 1512) = 0;
  *(_OWORD *)(v3 + 864) = 0u;
  *(_DWORD *)(v5 + 1536) = 0;
  *(_OWORD *)(v5 + 1520) = 0u;
  v9 = (_QWORD *)(v5 + 1544);
  *(_BYTE *)(v5 + 432) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  bzero(v8, 0x32CuLL);
  *(_DWORD *)(v5 + 1567) = 0;
  *(_QWORD *)(v5 + 1560) = 0;
  *(_OWORD *)(v5 + 1544) = 0u;
  *(_WORD *)(v5 + 1571) = 1;
  *(_BYTE *)(v5 + 1573) = 0;
  *(_QWORD *)(v5 + 3376) = 0;
  *(_OWORD *)(v5 + 3384) = 0u;
  *(_DWORD *)(v5 + 3400) = 3;
  *(_DWORD *)(v5 + 3864) = 0;
  *(_OWORD *)(v5 + 3408) = 0u;
  *(_OWORD *)(v5 + 3424) = 0u;
  *(_OWORD *)(v5 + 3440) = 0u;
  *(_OWORD *)(v5 + 3456) = 0u;
  *(_OWORD *)(v5 + 3472) = 0u;
  *(_OWORD *)(v5 + 3488) = 0u;
  *(_OWORD *)(v5 + 3504) = 0u;
  *(_OWORD *)(v5 + 3520) = 0u;
  *(_OWORD *)(v5 + 3536) = 0u;
  *(_OWORD *)(v5 + 3552) = 0u;
  *(_OWORD *)(v5 + 3568) = 0u;
  *(_OWORD *)(v5 + 3584) = 0u;
  *(_OWORD *)(v5 + 3600) = 0u;
  *(_QWORD *)(v5 + 3616) = 0;
  *(_QWORD *)(v5 + 3888) = 0;
  *(_OWORD *)(v5 + 3872) = 0u;
  *(_DWORD *)(v5 + 3896) = 3;
  *(_DWORD *)(v5 + 4360) = 0;
  *(_OWORD *)(v5 + 3904) = 0u;
  *(_OWORD *)(v5 + 3920) = 0u;
  *(_OWORD *)(v5 + 3936) = 0u;
  *(_OWORD *)(v5 + 3952) = 0u;
  *(_OWORD *)(v5 + 3968) = 0u;
  *(_OWORD *)(v5 + 3984) = 0u;
  *(_OWORD *)(v5 + 4000) = 0u;
  *(_OWORD *)(v5 + 4016) = 0u;
  *(_OWORD *)(v5 + 4032) = 0u;
  *(_OWORD *)(v5 + 4048) = 0u;
  *(_OWORD *)(v5 + 4064) = 0u;
  *(_OWORD *)(v5 + 4080) = 0u;
  *(_OWORD *)(v5 + 4096) = 0u;
  *(_QWORD *)(v5 + 4112) = 0;
  *(_QWORD *)(v5 + 4384) = 0;
  *(_QWORD *)(v5 + 4376) = 0;
  v539 = (char **)(v5 + 4376);
  *(_QWORD *)(v5 + 4368) = v5 + 4376;
  *v7 = 0;
  v7[96] = 0;
  *(_QWORD *)(v5 + 4504) = 0;
  *(_QWORD *)(v5 + 4512) = 0;
  v523 = v5;
  *(_QWORD *)(v5 + 4496) = v5 + 4504;
  v7[128] = 0;
  v7[256] = 0;
  *v6 = 0;
  v6[144] = 0;
  sub_20F88A450(*(_QWORD *)(v2 + 4864), (uint64_t)__p);
  v428 = v5 + 4504;
  v544 = v2;
  sub_20F13E8CC(v4, (uint64_t)__p);
  *(_WORD *)(v4 + 200) = v558.i16[4];
  v10 = *(void **)(v4 + 208);
  if (v10)
  {
    *(_QWORD *)(v4 + 216) = v10;
    operator delete(v10);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  v11 = *((_QWORD *)&v560[1] + 1);
  *(_QWORD *)(v4 + 224) = *(_QWORD *)&v560[0];
  *(int8x16_t *)(v4 + 208) = v559;
  memset(v560, 0, 24);
  v559 = 0uLL;
  *(_OWORD *)(v4 + 232) = *(_OWORD *)((char *)v560 + 8);
  *((_QWORD *)&v560[1] + 1) = 0;
  *(_QWORD *)(v4 + 248) = v11;
  v12 = *(void **)(v4 + 256);
  if (v12)
  {
    *(_QWORD *)(v4 + 264) = v12;
    operator delete(v12);
    *(_QWORD *)(v4 + 256) = 0;
    *(_QWORD *)(v4 + 264) = 0;
    *(_QWORD *)(v4 + 272) = 0;
  }
  *(int8x16_t *)(v4 + 256) = v561;
  *(_QWORD *)(v4 + 272) = v562.i64[0];
  v562.i64[0] = 0;
  v561 = 0uLL;
  v13 = *(void **)(v4 + 280);
  if (v13)
  {
    *(_QWORD *)(v4 + 288) = v13;
    operator delete(v13);
    *(_QWORD *)(v4 + 280) = 0;
    *(_QWORD *)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  *(_QWORD *)(v4 + 280) = v562.i64[1];
  *(int8x16_t *)(v4 + 288) = v563;
  v563 = 0uLL;
  v562.i64[1] = 0;
  v14 = *(void **)(v4 + 304);
  if (v14)
  {
    *(_QWORD *)(v4 + 312) = v14;
    operator delete(v14);
    *(_QWORD *)(v4 + 304) = 0;
    *(_QWORD *)(v4 + 312) = 0;
    *(_QWORD *)(v4 + 320) = 0;
  }
  *(int8x16_t *)(v4 + 304) = v564;
  *(_QWORD *)(v4 + 320) = v565.i64[0];
  v565.i64[0] = 0;
  v564 = 0uLL;
  v15 = *(void **)(v4 + 328);
  if (v15)
  {
    *(_QWORD *)(v4 + 336) = v15;
    operator delete(v15);
    *(_QWORD *)(v4 + 328) = 0;
    *(_QWORD *)(v4 + 336) = 0;
    *(_QWORD *)(v4 + 344) = 0;
  }
  *(_QWORD *)(v4 + 328) = v565.i64[1];
  *(int8x16_t *)(v4 + 336) = v566;
  v566 = 0uLL;
  v565.i64[1] = 0;
  v16 = *(void **)(v4 + 352);
  if (v16)
  {
    *(_QWORD *)(v4 + 360) = v16;
    operator delete(v16);
    *(_QWORD *)(v4 + 352) = 0;
    *(_QWORD *)(v4 + 360) = 0;
    *(_QWORD *)(v4 + 368) = 0;
  }
  *(int8x16_t *)(v4 + 352) = v567;
  *(_QWORD *)(v4 + 368) = v568.i64[0];
  v568.i64[0] = 0;
  v567 = 0uLL;
  v17 = *(void **)(v4 + 376);
  if (v17)
  {
    operator delete(v17);
    *(_QWORD *)(v4 + 376) = 0;
    *(_QWORD *)(v4 + 384) = 0;
    *(_QWORD *)(v4 + 392) = 0;
  }
  *(_QWORD *)(v4 + 376) = v568.i64[1];
  *(int8x16_t *)(v4 + 384) = v569;
  v569 = 0uLL;
  v568.i64[1] = 0;
  v18 = *(void **)(v4 + 400);
  if (v18)
  {
    *(_QWORD *)(v4 + 408) = v18;
    operator delete(v18);
    *(_QWORD *)(v4 + 400) = 0;
    *(_QWORD *)(v4 + 408) = 0;
    *(_QWORD *)(v4 + 416) = 0;
  }
  *(int8x16_t *)(v4 + 400) = v570;
  *(_QWORD *)(v4 + 416) = v571.i64[0];
  v571.i64[0] = 0;
  v570 = 0uLL;
  v19 = *(void **)(v4 + 424);
  if (v19)
  {
    *(_QWORD *)(v4 + 432) = v19;
    operator delete(v19);
    *(_QWORD *)(v4 + 424) = 0;
    *(_QWORD *)(v4 + 432) = 0;
    *(_QWORD *)(v4 + 440) = 0;
  }
  *(_QWORD *)(v4 + 424) = v571.i64[1];
  *(int8x16_t *)(v4 + 432) = v572;
  v572 = 0uLL;
  v571.i64[1] = 0;
  v20 = *(_QWORD *)(v4 + 448);
  v540 = v4;
  if (v20)
  {
    v21 = v4 + 448;
    v22 = *(_QWORD *)(v4 + 456);
    v23 = *(void **)(v4 + 448);
    if (v22 != v20)
    {
      v24 = *(_QWORD *)(v4 + 456);
      do
      {
        v26 = *(void **)(v24 - 24);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *(_QWORD *)(v22 - 16) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v20);
      v23 = *(void **)v21;
      v4 = v540;
    }
    *(_QWORD *)(v4 + 456) = v20;
    operator delete(v23);
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
  }
  v429 = v6;
  *(int8x16_t *)(v4 + 448) = v573;
  *(_QWORD *)(v4 + 464) = v574.i64[0];
  v574.i64[0] = 0;
  v573 = 0uLL;
  v27 = (_QWORD *)v4;
  v28 = *(char **)(v4 + 472);
  if (v28)
  {
    v29 = (void **)(v27 + 59);
    v30 = (char *)v27[60];
    v31 = v28;
    if (v30 != v28)
    {
      do
      {
        v32 = (void *)*((_QWORD *)v30 - 3);
        if (v32)
        {
          *((_QWORD *)v30 - 2) = v32;
          operator delete(v32);
        }
        v33 = (void *)*((_QWORD *)v30 - 7);
        if (v33)
        {
          *((_QWORD *)v30 - 6) = v33;
          operator delete(v33);
        }
        v30 -= 216;
      }
      while (v30 != v28);
      v31 = *v29;
    }
    v27 = (_QWORD *)v540;
    *(_QWORD *)(v540 + 480) = v28;
    operator delete(v31);
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
  }
  v27[59] = v574.i64[1];
  *((int8x16_t *)v27 + 30) = v575;
  v575 = 0uLL;
  v574.i64[1] = 0;
  v34 = v27[62];
  v35 = v27;
  v36 = v544;
  if (v34)
  {
    v37 = (void **)(v27 + 62);
    v38 = v27[63];
    v39 = (void *)v27[62];
    if (v38 != v34)
    {
      do
      {
        v40 = *(void **)(v38 - 24);
        if (v40)
        {
          *(_QWORD *)(v38 - 16) = v40;
          operator delete(v40);
        }
        v41 = *(void **)(v38 - 56);
        if (v41)
        {
          *(_QWORD *)(v38 - 48) = v41;
          operator delete(v41);
        }
        v38 -= 216;
      }
      while (v38 != v34);
      v39 = *v37;
    }
    v35 = (_QWORD *)v540;
    *(_QWORD *)(v540 + 504) = v34;
    operator delete(v39);
    *v37 = 0;
    v27[63] = 0;
    v27[64] = 0;
  }
  *((int8x16_t *)v35 + 31) = v576;
  v35[64] = v577.i64[0];
  v577.i64[0] = 0;
  v576 = 0u;
  sub_20F13F504((void ***)v35 + 65);
  v35[65] = v577.i64[1];
  *((int8x16_t *)v35 + 33) = v578;
  v578 = 0u;
  v577.i64[1] = 0;
  sub_20F13F504((void ***)v35 + 68);
  *((int8x16_t *)v35 + 34) = v579;
  v35[70] = v580.i64[0];
  v580.i64[0] = 0;
  v579 = 0u;
  sub_20F13F504((void ***)v35 + 71);
  v35[71] = v580.i64[1];
  *((int8x16_t *)v35 + 36) = v581;
  v581 = 0uLL;
  v580.i64[1] = 0;
  v42 = (void *)v35[74];
  if (v42)
  {
    v35[75] = v42;
    operator delete(v42);
    v35[74] = 0;
    v35[75] = 0;
    v35[76] = 0;
  }
  *((int8x16_t *)v35 + 37) = v582;
  v35[76] = v583.i64[0];
  v583.i64[0] = 0;
  v582 = 0uLL;
  v43 = (void *)v35[77];
  if (v43)
  {
    v35[78] = v43;
    operator delete(v43);
    v35[77] = 0;
    v35[78] = 0;
    v35[79] = 0;
  }
  v35[77] = v583.i64[1];
  *((int8x16_t *)v35 + 39) = v584;
  v584 = 0uLL;
  v583.i64[1] = 0;
  v44 = (int8x16_t *)(v35 + 80);
  if (*((unsigned __int8 *)v35 + 808) == v595.u8[8])
  {
    if (*((_BYTE *)v35 + 808))
    {
      v45 = v594;
      *((int8x16_t *)v35 + 48) = v593;
      *((int8x16_t *)v35 + 49) = v45;
      v35[100] = v595.i64[0];
      v46 = v590;
      *((int8x16_t *)v35 + 44) = v589;
      *((int8x16_t *)v35 + 45) = v46;
      v47 = v592;
      *((int8x16_t *)v35 + 46) = v591;
      *((int8x16_t *)v35 + 47) = v47;
      v48 = v586;
      *v44 = v585;
      *((int8x16_t *)v35 + 41) = v48;
      v49 = v588;
      *((int8x16_t *)v35 + 42) = v587;
      *((int8x16_t *)v35 + 43) = v49;
    }
  }
  else if (*((_BYTE *)v35 + 808))
  {
    *((_BYTE *)v35 + 808) = 0;
  }
  else
  {
    v50 = v594;
    *((int8x16_t *)v35 + 48) = v593;
    *((int8x16_t *)v35 + 49) = v50;
    v35[100] = v595.i64[0];
    v51 = v590;
    *((int8x16_t *)v35 + 44) = v589;
    *((int8x16_t *)v35 + 45) = v51;
    v52 = v592;
    *((int8x16_t *)v35 + 46) = v591;
    *((int8x16_t *)v35 + 47) = v52;
    v53 = v586;
    *v44 = v585;
    *((int8x16_t *)v35 + 41) = v53;
    v54 = v588;
    *((int8x16_t *)v35 + 42) = v587;
    *((int8x16_t *)v35 + 43) = v54;
    *((_BYTE *)v35 + 808) = 1;
  }
  *v8 = v596;
  v8[1].i64[0] = *(_QWORD *)v597;
  *(_OWORD *)(v35 + 105) = *(_OWORD *)&v597[8];
  v55 = (void *)v35[107];
  if (v55)
  {
    v35[108] = v55;
    operator delete(v55);
    v35[107] = 0;
    v35[108] = 0;
    v35[109] = 0;
  }
  v35[107] = *(_QWORD *)&v597[24];
  *((int8x16_t *)v35 + 54) = v598;
  v598 = 0uLL;
  *(_QWORD *)&v597[24] = 0;
  v56 = (void *)v35[110];
  if (v56)
  {
    v35[111] = v56;
    operator delete(v56);
    v35[110] = 0;
    v35[111] = 0;
    v35[112] = 0;
  }
  *((int8x16_t *)v35 + 55) = v599;
  v35[112] = v600.i64[0];
  v600.i64[0] = 0;
  v599 = 0uLL;
  v57 = (void *)v35[113];
  if (v57)
  {
    v35[114] = v57;
    operator delete(v57);
    v35[113] = 0;
    v35[114] = 0;
    v35[115] = 0;
  }
  v35[113] = v600.i64[1];
  *((int8x16_t *)v35 + 57) = v601;
  v601 = 0uLL;
  v600.i64[1] = 0;
  v58 = (void *)v35[116];
  if (v58)
  {
    v35[117] = v58;
    operator delete(v58);
    v35[116] = 0;
    v35[117] = 0;
    v35[118] = 0;
  }
  *((int8x16_t *)v35 + 58) = v602;
  v35[118] = v603.i64[0];
  v603.i64[0] = 0;
  v602 = 0uLL;
  v59 = (void *)v35[119];
  if (v59)
  {
    v35[120] = v59;
    operator delete(v59);
    v35[119] = 0;
    v35[120] = 0;
    v35[121] = 0;
  }
  v35[119] = v603.i64[1];
  *((int8x16_t *)v35 + 60) = v604;
  v604 = 0uLL;
  v603.i64[1] = 0;
  v60 = (void *)v35[122];
  if (v60)
  {
    v35[123] = v60;
    operator delete(v60);
    v35[122] = 0;
    v35[123] = 0;
    v35[124] = 0;
  }
  *((int8x16_t *)v35 + 61) = v605;
  v35[124] = v606.i64[0];
  v606.i64[0] = 0;
  v605 = 0uLL;
  v61 = (void *)v35[125];
  if (v61)
  {
    v35[126] = v61;
    operator delete(v61);
    v35[125] = 0;
    v35[126] = 0;
    v35[127] = 0;
  }
  v35[125] = v606.i64[1];
  *((int8x16_t *)v35 + 63) = v607;
  v607 = 0uLL;
  v606.i64[1] = 0;
  v62 = (void *)v35[128];
  if (v62)
  {
    v35[129] = v62;
    operator delete(v62);
    v35[128] = 0;
    v35[129] = 0;
    v35[130] = 0;
  }
  *((int8x16_t *)v35 + 64) = v608;
  v35[130] = v609.i64[0];
  v609.i64[0] = 0;
  v608 = 0uLL;
  v63 = (void *)v35[131];
  if (v63)
  {
    v35[132] = v63;
    operator delete(v63);
    v35[131] = 0;
    v35[132] = 0;
    v35[133] = 0;
  }
  v35[131] = v609.i64[1];
  *((int8x16_t *)v35 + 66) = v610;
  v610 = 0uLL;
  v609.i64[1] = 0;
  *((int8x16_t *)v35 + 67) = v611;
  v35[136] = v612.i64[0];
  v64 = (void *)v35[137];
  if (v64)
  {
    v35[138] = v64;
    operator delete(v64);
    v35[137] = 0;
    v35[138] = 0;
    v35[139] = 0;
  }
  v35[137] = v612.i64[1];
  *((int8x16_t *)v35 + 69) = v613;
  v613 = 0uLL;
  v612.i64[1] = 0;
  v65 = (void *)v35[140];
  if (v65)
  {
    v35[141] = v65;
    operator delete(v65);
    v35[140] = 0;
    v35[141] = 0;
    v35[142] = 0;
  }
  *((int8x16_t *)v35 + 70) = v614;
  v35[142] = v615.i64[0];
  v615.i64[0] = 0;
  v614 = 0uLL;
  v66 = (void *)v35[143];
  if (v66)
  {
    v35[144] = v66;
    operator delete(v66);
    v35[143] = 0;
    v35[144] = 0;
    v35[145] = 0;
  }
  v35[143] = v615.i64[1];
  *((int8x16_t *)v35 + 72) = v616;
  v616 = 0uLL;
  v615.i64[1] = 0;
  v67 = (void *)v35[146];
  if (v67)
  {
    v35[147] = v67;
    operator delete(v67);
    v35[146] = 0;
    v35[147] = 0;
    v35[148] = 0;
  }
  *((int8x16_t *)v35 + 73) = v617;
  v35[148] = v618.i64[0];
  v618.i64[0] = 0;
  v617 = 0uLL;
  v68 = (void *)v35[149];
  if (v68)
  {
    v35[150] = v68;
    operator delete(v68);
    v35[149] = 0;
    v35[150] = 0;
    v35[151] = 0;
  }
  v35[149] = v618.i64[1];
  *((int8x16_t *)v35 + 75) = v619;
  v619 = 0uLL;
  v618.i64[1] = 0;
  v69 = (void *)v35[152];
  if (v69)
  {
    v35[153] = v69;
    operator delete(v69);
    v35[152] = 0;
    v35[153] = 0;
    v35[154] = 0;
  }
  *((int8x16_t *)v35 + 76) = v620;
  v35[154] = v621.i64[0];
  v621.i64[0] = 0;
  v620 = 0uLL;
  v70 = (void *)v35[155];
  if (v70)
  {
    v35[156] = v70;
    operator delete(v70);
    v35[155] = 0;
    v35[156] = 0;
    v35[157] = 0;
  }
  v35[155] = v621.i64[1];
  *((int8x16_t *)v35 + 78) = v622;
  v622 = 0uLL;
  v621.i64[1] = 0;
  v71 = (void *)v35[158];
  if (v71)
  {
    v35[159] = v71;
    operator delete(v71);
    v35[158] = 0;
    v35[159] = 0;
    v35[160] = 0;
  }
  *((int8x16_t *)v35 + 79) = v623;
  v35[160] = v624.i64[0];
  v624.i64[0] = 0;
  v623 = 0uLL;
  v35[161] = v624.i64[1];
  v72 = (void *)v35[162];
  if (v72)
  {
    v35[163] = v72;
    operator delete(v72);
    v35[162] = 0;
    v35[163] = 0;
    v35[164] = 0;
  }
  *((int8x16_t *)v35 + 81) = v625;
  v35[164] = v626.i64[0];
  v626.i64[0] = 0;
  v625 = 0uLL;
  v73 = (void *)v35[165];
  if (v73)
  {
    v35[166] = v73;
    operator delete(v73);
    v35[165] = 0;
    v35[166] = 0;
    v35[167] = 0;
  }
  v35[165] = v626.i64[1];
  *((int8x16_t *)v35 + 83) = v627;
  v627 = 0uLL;
  v626.i64[1] = 0;
  v74 = (void *)v35[168];
  if (v74)
  {
    v35[169] = v74;
    operator delete(v74);
    v35[168] = 0;
    v35[169] = 0;
    v35[170] = 0;
  }
  *((int8x16_t *)v35 + 84) = v628;
  v35[170] = v629.i64[0];
  v629.i64[0] = 0;
  v628 = 0uLL;
  v75 = (void *)v35[171];
  if (v75)
  {
    v35[172] = v75;
    operator delete(v75);
    v35[171] = 0;
    v35[172] = 0;
    v35[173] = 0;
  }
  v35[171] = v629.i64[1];
  *((int8x16_t *)v35 + 86) = v630;
  v630 = 0uLL;
  v629.i64[1] = 0;
  v76 = (void *)v35[174];
  if (v76)
  {
    v35[175] = v76;
    operator delete(v76);
    v35[174] = 0;
    v35[175] = 0;
    v35[176] = 0;
  }
  *((int8x16_t *)v35 + 87) = v631;
  v35[176] = v632.i64[0];
  v632.i64[0] = 0;
  v631 = 0uLL;
  v77 = (void *)v35[177];
  if (v77)
  {
    v35[178] = v77;
    operator delete(v77);
    v35[177] = 0;
    v35[178] = 0;
    v35[179] = 0;
  }
  v35[177] = v632.i64[1];
  *((int8x16_t *)v35 + 89) = v633;
  v633 = 0uLL;
  v632.i64[1] = 0;
  v78 = (void *)v35[180];
  if (v78)
  {
    v35[181] = v78;
    operator delete(v78);
    v35[180] = 0;
    v35[181] = 0;
    v35[182] = 0;
  }
  *((int8x16_t *)v35 + 90) = v634;
  v35[182] = v635.i64[0];
  v635.i64[0] = 0;
  v634 = 0uLL;
  v79 = (void *)v35[183];
  if (v79)
  {
    v35[184] = v79;
    operator delete(v79);
    v35[183] = 0;
    v35[184] = 0;
    v35[185] = 0;
  }
  v35[183] = v635.i64[1];
  *((int8x16_t *)v35 + 92) = v636;
  v636 = 0uLL;
  v635.i64[1] = 0;
  v80 = (void *)v35[186];
  if (v80)
  {
    v35[187] = v80;
    operator delete(v80);
    v35[186] = 0;
    v35[187] = 0;
    v35[188] = 0;
  }
  *((int8x16_t *)v35 + 93) = v637;
  v35[188] = v638.i64[0];
  v638.i64[0] = 0;
  v637 = 0uLL;
  v81 = (void *)v35[189];
  if (v81)
  {
    v35[190] = v81;
    operator delete(v81);
    v35[189] = 0;
    v35[190] = 0;
    v35[191] = 0;
  }
  v35[189] = v638.i64[1];
  *((int8x16_t *)v35 + 95) = v639;
  v639 = 0uLL;
  v638.i64[1] = 0;
  v82 = (void *)v35[192];
  if (v82)
  {
    v35[193] = v82;
    operator delete(v82);
    v35[192] = 0;
    v35[193] = 0;
    v35[194] = 0;
  }
  *((_OWORD *)v35 + 96) = *(_OWORD *)v640;
  v35[194] = *(_QWORD *)&v640[16];
  memset(v640, 0, 24);
  v83 = (void *)v35[195];
  if (v83)
  {
    v35[196] = v83;
    operator delete(v83);
    v35[195] = 0;
    v35[196] = 0;
    v35[197] = 0;
  }
  v35[195] = *(_QWORD *)&v640[24];
  *((int8x16_t *)v35 + 98) = v641;
  v641 = 0uLL;
  *(_QWORD *)&v640[24] = 0;
  v84 = (void *)v35[198];
  if (v84)
  {
    v35[199] = v84;
    operator delete(v84);
    v35[198] = 0;
    v35[199] = 0;
    v35[200] = 0;
  }
  *((int8x16_t *)v35 + 99) = v642;
  v85 = v35[201];
  *((int8x16_t *)v35 + 100) = v643;
  v643.i64[0] = 0;
  v642 = 0u;
  v643.i64[1] = v85;
  v86 = v35[202];
  v35[202] = v644.i64[0];
  v644.i64[0] = v86;
  *((_DWORD *)v35 + 406) = v644.i32[2];
  v644.i32[2] = 0;
  v87 = v35[204];
  v35[204] = *(_QWORD *)v645;
  *(_QWORD *)v645 = v87;
  v88 = v35[205];
  v35[205] = *(_QWORD *)&v645[8];
  *(_QWORD *)&v645[8] = v88;
  *((_DWORD *)v35 + 412) = *(_DWORD *)&v645[16];
  *(_DWORD *)&v645[16] = 0;
  v89 = v35[207];
  v35[207] = *(_QWORD *)&v645[24];
  *(_QWORD *)&v645[24] = v89;
  v90 = v35[208];
  v35[208] = v646.i64[0];
  v646.i64[0] = v90;
  *((_DWORD *)v35 + 418) = v646.i32[2];
  v646.i32[2] = 0;
  v91 = v35[210];
  v35[210] = v647.i64[0];
  v647.i64[0] = v91;
  v92 = v35[211];
  v35[211] = v647.i64[1];
  v647.i64[1] = v92;
  *((_DWORD *)v35 + 424) = v648.i32[0];
  v648.i32[0] = 0;
  v93 = v35[213];
  v35[213] = v648.i64[1];
  v648.i64[1] = v93;
  v94 = v35[214];
  v35[214] = v649.i64[0];
  v649.i64[0] = v94;
  *((_DWORD *)v35 + 430) = v649.i32[2];
  v649.i32[2] = 0;
  v95 = v650;
  *(_DWORD *)(v523 + 1536) = v651.i32[0];
  *(int8x16_t *)(v523 + 1520) = v95;
  v96 = (void *)v35[219];
  if (v96)
  {
    v35[220] = v96;
    operator delete(v96);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  v35[219] = v651.i64[1];
  *((int8x16_t *)v35 + 110) = v652;
  v652 = 0uLL;
  v651.i64[1] = 0;
  sub_20F028598((uint64_t)__p);
  *((_BYTE *)v35 + 1776) = *(_DWORD *)(v544 + 4904) > 0;
  v97 = *(_QWORD *)(v544 + 4864);
  if (*(_QWORD *)(v97 + 2480) != *(_QWORD *)(v97 + 2488))
  {
    v575 = 0u;
    v576 = 0u;
    v573 = 0u;
    v574 = 0u;
    v571 = 0u;
    v572 = 0u;
    v569 = 0u;
    v570 = 0u;
    v567 = 0u;
    v568 = 0u;
    v565 = 0u;
    v566 = 0u;
    v563 = 0u;
    v564 = 0u;
    v561 = 0u;
    v562 = 0u;
    memset(v560, 0, sizeof(v560));
    v558 = 0u;
    v559 = 0u;
    v556 = 0u;
    v557 = 0u;
    v555 = 0u;
    memset(v554, 0, sizeof(v554));
    memset(v553, 0, sizeof(v553));
    *(_OWORD *)v552 = 0u;
    memset(__p, 0, sizeof(__p));
    bzero(__p, 0x708uLL);
    if (*(_BYTE *)(*(_QWORD *)(v544 + 4848) + 2616))
    {
      sub_20F88729C(v97);
      v545 = v631;
      v533 = v626;
      v527 = v625;
      v529 = v624;
      v531 = v623;
      v541 = v621;
      v427 = v620;
      v537 = v619;
      v426 = v618;
      v535 = v617;
      v425 = v653;
      v387 = vextq_s8(v425, v425, 8uLL).u64[0];
      v524 = v652;
      v386 = vextq_s8(v524, v524, 8uLL).u64[0];
      v521 = v651;
      v385 = vextq_s8(v521, v521, 8uLL).u64[0];
      v519 = v650;
      v384 = vextq_s8(v519, v519, 8uLL).u64[0];
      v515 = v649;
      v383 = vextq_s8(v515, v515, 8uLL).u64[0];
      v517 = v648;
      v382 = vextq_s8(v517, v517, 8uLL).u64[0];
      v493 = v647;
      v381 = vextq_s8(v493, v493, 8uLL).u64[0];
      v513 = v646;
      v380 = vextq_s8(v513, v513, 8uLL).u64[0];
      v511 = *(int8x16_t *)&v645[16];
      v379 = vextq_s8(v511, v511, 8uLL).u64[0];
      v507 = *(int8x16_t *)v645;
      v378 = vextq_s8(v507, v507, 8uLL).u64[0];
      v509 = v644;
      v377 = vextq_s8(v509, v509, 8uLL).u64[0];
      v505 = v643;
      v376 = vextq_s8(v505, v505, 8uLL).u64[0];
      v503 = v642;
      v375 = vextq_s8(v503, v503, 8uLL).u64[0];
      v501 = v641;
      v374 = vextq_s8(v501, v501, 8uLL).u64[0];
      v424 = *(int8x16_t *)&v640[16];
      v373 = vextq_s8(v424, v424, 8uLL).u64[0];
      v470 = *(int8x16_t *)v640;
      v372 = vextq_s8(v470, v470, 8uLL).u64[0];
      v499 = v639;
      v371 = vextq_s8(v499, v499, 8uLL).u64[0];
      v423 = v638;
      v370 = vextq_s8(v423, v423, 8uLL).u64[0];
      v497 = v637;
      v369 = vextq_s8(v497, v497, 8uLL).u64[0];
      v492 = v636;
      v368 = vextq_s8(v492, v492, 8uLL).u64[0];
      v495 = v635;
      v367 = vextq_s8(v495, v495, 8uLL).u64[0];
      v488 = v634;
      v366 = vextq_s8(v488, v488, 8uLL).u64[0];
      v490 = v633;
      v365 = vextq_s8(v490, v490, 8uLL).u64[0];
      v486 = v632;
      v364 = vextq_s8(v486, v486, 8uLL).u64[0];
      v363 = vextq_s8(v545, v545, 8uLL).u64[0];
      v484 = v630;
      v362 = vextq_s8(v484, v484, 8uLL).u64[0];
      v482 = v629;
      v361 = vextq_s8(v482, v482, 8uLL).u64[0];
      v478 = v628;
      v360 = vextq_s8(v478, v478, 8uLL).u64[0];
      v480 = v627;
      v359 = vextq_s8(v480, v480, 8uLL).u64[0];
      v358 = vextq_s8(v533, v533, 8uLL).u64[0];
      v357 = vextq_s8(v527, v527, 8uLL).u64[0];
      v356 = vextq_s8(v529, v529, 8uLL).u64[0];
      v355 = vextq_s8(v531, v531, 8uLL).u64[0];
      v422 = v622;
      v354 = vextq_s8(v422, v422, 8uLL).u64[0];
      v353 = vextq_s8(v541, v541, 8uLL).u64[0];
      v352 = vextq_s8(v427, v427, 8uLL).u64[0];
      v351 = vextq_s8(v537, v537, 8uLL).u64[0];
      v350 = vextq_s8(v426, v426, 8uLL).u64[0];
      v349 = vextq_s8(v535, v535, 8uLL).u64[0];
      v476 = v616;
      v348 = vextq_s8(v476, v476, 8uLL).u64[0];
      v440 = v615;
      v347 = vextq_s8(v440, v440, 8uLL).u64[0];
      v442 = v614;
      v346 = vextq_s8(v442, v442, 8uLL).u64[0];
      v474 = v613;
      v345 = vextq_s8(v474, v474, 8uLL).u64[0];
      v438 = v612;
      v344 = vextq_s8(v438, v438, 8uLL).u64[0];
      v420 = v611;
      v343 = vextq_s8(v420, v420, 8uLL).u64[0];
      v468 = v610;
      v342 = vextq_s8(v468, v468, 8uLL).u64[0];
      v472 = v609;
      v419 = v608;
      v340 = vextq_s8(v419, v419, 8uLL).u64[0];
      v341 = vextq_s8(v472, v472, 8uLL).u64[0];
      v466 = v607;
      v464 = v606;
      v338 = vextq_s8(v464, v464, 8uLL).u64[0];
      v339 = vextq_s8(v466, v466, 8uLL).u64[0];
      v418 = v605;
      v98 = v585;
      v416 = v604;
      v336 = vextq_s8(v416, v416, 8uLL).u64[0];
      v337 = vextq_s8(v418, v418, 8uLL).u64[0];
      v417 = v603;
      v415 = v602;
      v334 = vextq_s8(v415, v415, 8uLL).u64[0];
      v335 = vextq_s8(v417, v417, 8uLL).u64[0];
      v436 = v601;
      v444 = v600;
      v332 = vextq_s8(v444, v444, 8uLL).u64[0];
      v333 = vextq_s8(v436, v436, 8uLL).u64[0];
      v414 = v599;
      v99 = v598;
      v100 = v580;
      v330 = vextq_s8(v99, v99, 8uLL).u64[0];
      v331 = vextq_s8(v414, v414, 8uLL).u64[0];
      v412 = *(int8x16_t *)&v597[16];
      v452 = *(int8x16_t *)v597;
      v328 = vextq_s8(v452, v452, 8uLL).u64[0];
      v329 = vextq_s8(v412, v412, 8uLL).u64[0];
      v462 = v596;
      v101 = v595;
      v326 = vextq_s8(v101, v101, 8uLL).u64[0];
      v327 = vextq_s8(v462, v462, 8uLL).u64[0];
      v458 = v594;
      v456 = v593;
      v324 = vextq_s8(v456, v456, 8uLL).u64[0];
      v325 = vextq_s8(v458, v458, 8uLL).u64[0];
      v460 = v592;
      v102 = v591;
      v322 = vextq_s8(v102, v102, 8uLL).u64[0];
      v323 = vextq_s8(v460, v460, 8uLL).u64[0];
      v410 = v590;
      v103 = v589;
      v320 = vextq_s8(v103, v103, 8uLL).u64[0];
      v321 = vextq_s8(v410, v410, 8uLL).u64[0];
      v408 = v588;
      v104 = v587;
      v318 = vextq_s8(v104, v104, 8uLL).u64[0];
      v319 = vextq_s8(v408, v408, 8uLL).u64[0];
      v430 = v586;
      v316 = vextq_s8(v98, v98, 8uLL).u64[0];
      v317 = vextq_s8(v430, v430, 8uLL).u64[0];
      v432 = v584;
      v448 = v583;
      v314 = vextq_s8(v448, v448, 8uLL).u64[0];
      v315 = vextq_s8(v432, v432, 8uLL).u64[0];
      v406 = v582;
      v106 = v568;
      v105 = v569;
      v454 = v581;
      v289 = vextq_s8(v454, v454, 8uLL).u64[0];
      v312 = vextq_s8(v100, v100, 8uLL).u64[0];
      v313 = vextq_s8(v406, v406, 8uLL).u64[0];
      v404 = v579;
      v107 = v578;
      v108 = v566;
      v310 = vextq_s8(v107, v107, 8uLL).u64[0];
      v311 = vextq_s8(v404, v404, 8uLL).u64[0];
      v450 = v577;
      v402 = v576;
      v308 = vextq_s8(v402, v402, 8uLL).u64[0];
      v309 = vextq_s8(v450, v450, 8uLL).u64[0];
      v109 = v575;
      v400 = v574;
      v306 = vextq_s8(v400, v400, 8uLL).u64[0];
      v307 = vextq_s8(v109, v109, 8uLL).u64[0];
      v110 = v573;
      v111 = v563;
      v398 = v572;
      v304 = vextq_s8(v398, v398, 8uLL).u64[0];
      v305 = vextq_s8(v110, v110, 8uLL).u64[0];
      v112 = v571;
      v446 = v570;
      v302 = vextq_s8(v446, v446, 8uLL).u64[0];
      v303 = vextq_s8(v112, v112, 8uLL).u64[0];
      v113 = (int8x16_t)v560[1];
      v114 = v561;
      v300 = vextq_s8(v106, v106, 8uLL).u64[0];
      v301 = vextq_s8(v105, v105, 8uLL).u64[0];
      v434 = v567;
      v115 = v559;
      v297 = vextq_s8(v108, v108, 8uLL).u64[0];
      v299 = vextq_s8(v434, v434, 8uLL).u64[0];
      v396 = v565;
      v394 = v564;
      v295 = vextq_s8(v394, v394, 8uLL).u64[0];
      v296 = vextq_s8(v396, v396, 8uLL).u64[0];
      v116 = v557;
      v392 = v562;
      v292 = vextq_s8(v392, v392, 8uLL).u64[0];
      v293 = vextq_s8(v111, v111, 8uLL).u64[0];
      v290 = vextq_s8(v114, v114, 8uLL).u64[0];
      v117 = v556;
      v388 = (int8x16_t)v560[0];
      v286 = vextq_s8(v113, v113, 8uLL).u64[0];
      v287 = vextq_s8(v388, v388, 8uLL).u64[0];
      v118 = vextq_s8(v115, v115, 8uLL).u64[0];
      v119 = *(int8x16_t *)&v554[4];
      v120 = v558;
      v283 = vextq_s8(v116, v116, 8uLL).u64[0];
      v285 = vextq_s8(v120, v120, 8uLL).u64[0];
      v390 = v555;
      v280 = vextq_s8(v390, v390, 8uLL).u64[0];
      v281 = vextq_s8(v117, v117, 8uLL).u64[0];
      v121 = *(int8x16_t *)&v553[2];
      v122 = *(int8x16_t *)&v554[2];
      v277 = vextq_s8(v122, v122, 8uLL).u64[0];
      v278 = vextq_s8(v119, v119, 8uLL).u64[0];
      v123 = *(int8x16_t *)v554;
      v274 = vextq_s8(v121, v121, 8uLL).u64[0];
      v276 = vextq_s8(v123, v123, 8uLL).u64[0];
      v124 = *(int8x16_t *)v552;
      v125 = *(int8x16_t *)&__p[4];
      v126 = *(int8x16_t *)v553;
      v271 = vextq_s8(v124, v124, 8uLL).u64[0];
      v273 = vextq_s8(v126, v126, 8uLL).u64[0];
      v269 = vextq_s8(v125, v125, 8uLL).u64[0];
      v127 = *(int8x16_t *)&__p[2];
      v128 = *(int8x16_t *)__p;
      v267 = vextq_s8(v127, v127, 8uLL).u64[0];
      v265 = vextq_s8(v128, v128, 8uLL).u64[0];
      v129 = v654;
    }
    else
    {
      v128.i64[0] = 0;
      v265 = 0;
      v127.i64[0] = 0;
      v267 = 0;
      v125.i64[0] = 0;
      v269 = 0;
      v124.i64[0] = 0;
      v271 = 0;
      v126.i64[0] = 0;
      v273 = 0;
      v121.i64[0] = 0;
      v274 = 0;
      v123.i64[0] = 0;
      v276 = 0;
      v122.i64[0] = 0;
      v277 = 0;
      v119.i64[0] = 0;
      v278 = 0;
      v390.i64[0] = 0;
      v280 = 0;
      v281 = 0;
      v283 = 0;
      v120.i64[0] = 0;
      v285 = 0;
      v115.i64[0] = 0;
      v118 = 0;
      v388.i64[0] = 0;
      v287 = 0;
      v113.i64[0] = 0;
      v286 = 0;
      v114.i64[0] = 0;
      v290 = 0;
      v392.i64[0] = 0;
      v292 = 0;
      v111.i64[0] = 0;
      v293 = 0;
      v394.i64[0] = 0;
      v295 = 0;
      v396.i64[0] = 0;
      v296 = 0;
      v108.i64[0] = 0;
      v297 = 0;
      v434.i64[0] = 0;
      v299 = 0;
      v106.i64[0] = 0;
      v300 = 0;
      v105.i64[0] = 0;
      v301 = 0;
      v446.i64[0] = 0;
      v302 = 0;
      v112.i64[0] = 0;
      v303 = 0;
      v398.i64[0] = 0;
      v304 = 0;
      v110.i64[0] = 0;
      v305 = 0;
      v400.i64[0] = 0;
      v306 = 0;
      v109.i64[0] = 0;
      v307 = 0;
      v402.i64[0] = 0;
      v308 = 0;
      v450.i64[0] = 0;
      v309 = 0;
      v107.i64[0] = 0;
      v310 = 0;
      v404.i64[0] = 0;
      v311 = 0;
      v312 = 0;
      v454.i64[0] = 0;
      v289 = 0;
      v406.i64[0] = 0;
      v313 = 0;
      v448.i64[0] = 0;
      v314 = 0;
      v432.i64[0] = 0;
      v315 = 0;
      v98.i64[0] = 0;
      v316 = 0;
      v430.i64[0] = 0;
      v317 = 0;
      v104.i64[0] = 0;
      v318 = 0;
      v408.i64[0] = 0;
      v319 = 0;
      v103.i64[0] = 0;
      v320 = 0;
      v410.i64[0] = 0;
      v321 = 0;
      v102.i64[0] = 0;
      v322 = 0;
      v460.i64[0] = 0;
      v323 = 0;
      v456.i64[0] = 0;
      v324 = 0;
      v458.i64[0] = 0;
      v325 = 0;
      v101.i64[0] = 0;
      v326 = 0;
      v462.i64[0] = 0;
      v327 = 0;
      v452.i64[0] = 0;
      v328 = 0;
      v412.i64[0] = 0;
      v329 = 0;
      v99.i64[0] = 0;
      v330 = 0;
      v414.i64[0] = 0;
      v331 = 0;
      v444.i64[0] = 0;
      v332 = 0;
      v436.i64[0] = 0;
      v333 = 0;
      v415.i64[0] = 0;
      v334 = 0;
      v417.i64[0] = 0;
      v335 = 0;
      v416.i64[0] = 0;
      v336 = 0;
      v418.i64[0] = 0;
      v337 = 0;
      v464.i64[0] = 0;
      v338 = 0;
      v466.i64[0] = 0;
      v339 = 0;
      v419.i64[0] = 0;
      v340 = 0;
      v472.i64[0] = 0;
      v341 = 0;
      v468.i64[0] = 0;
      v342 = 0;
      v420.i64[0] = 0;
      v343 = 0;
      v438.i64[0] = 0;
      v344 = 0;
      v474.i64[0] = 0;
      v345 = 0;
      v442.i64[0] = 0;
      v346 = 0;
      v440.i64[0] = 0;
      v347 = 0;
      v476.i64[0] = 0;
      v348 = 0;
      v535.i64[0] = 0;
      v349 = 0;
      v426.i64[0] = 0;
      v350 = 0;
      v537.i64[0] = 0;
      v351 = 0;
      v427.i64[0] = 0;
      v352 = 0;
      v541.i64[0] = 0;
      v353 = 0;
      v422.i64[0] = 0;
      v354 = 0;
      v531.i64[0] = 0;
      v355 = 0;
      v529.i64[0] = 0;
      v356 = 0;
      v527.i64[0] = 0;
      v357 = 0;
      v358 = 0;
      v480.i64[0] = 0;
      v359 = 0;
      v478.i64[0] = 0;
      v360 = 0;
      v482.i64[0] = 0;
      v361 = 0;
      v484.i64[0] = 0;
      v362 = 0;
      v545.i64[0] = 0;
      v363 = 0;
      v486.i64[0] = 0;
      v364 = 0;
      v490.i64[0] = 0;
      v365 = 0;
      v488.i64[0] = 0;
      v366 = 0;
      v495.i64[0] = 0;
      v367 = 0;
      v492.i64[0] = 0;
      v368 = 0;
      v497.i64[0] = 0;
      v369 = 0;
      v423.i64[0] = 0;
      v370 = 0;
      v499.i64[0] = 0;
      v371 = 0;
      v372 = 0;
      v424.i64[0] = 0;
      v373 = 0;
      v374 = 0;
      v503.i64[0] = 0;
      v375 = 0;
      v505.i64[0] = 0;
      v376 = 0;
      v509.i64[0] = 0;
      v377 = 0;
      v507.i64[0] = 0;
      v378 = 0;
      v511.i64[0] = 0;
      v379 = 0;
      v513.i64[0] = 0;
      v380 = 0;
      v381 = 0;
      v517.i64[0] = 0;
      v382 = 0;
      v383 = 0;
      v519.i64[0] = 0;
      v384 = 0;
      v521.i64[0] = 0;
      v385 = 0;
      v524.i64[0] = 0;
      v386 = 0;
      v425.i64[0] = 0;
      v116.i64[0] = 0;
      v493.i64[0] = 0;
      v515.i64[0] = 0;
      v117.i64[0] = 0;
      v470.i64[0] = 0;
      v501.i64[0] = 0;
      v100.i64[0] = 0;
      v533.i64[0] = 0;
      v387 = 0;
      v129 = 0;
    }
    v421 = v129;
    v128.i64[1] = v265;
    v127.i64[1] = v267;
    v266 = v128;
    v268 = v127;
    v125.i64[1] = v269;
    v124.i64[1] = v271;
    v270 = v125;
    v272 = v124;
    *(_QWORD *)&v130 = v126.i64[0];
    *((_QWORD *)&v130 + 1) = v273;
    v121.i64[1] = v274;
    v275 = v121;
    v123.i64[1] = v276;
    v122.i64[1] = v277;
    v119.i64[1] = v278;
    v279 = v119;
    *(_QWORD *)&v131 = v390.i64[0];
    *((_QWORD *)&v131 + 1) = v280;
    v117.i64[1] = v281;
    v116.i64[1] = v283;
    v282 = v117;
    v284 = v116;
    v120.i64[1] = v285;
    v115.i64[1] = v118;
    *(_QWORD *)&v132 = v388.i64[0];
    *((_QWORD *)&v132 + 1) = v287;
    v113.i64[1] = v286;
    v288 = v113;
    v114.i64[1] = v290;
    v291 = v114;
    *(_QWORD *)&v133 = v392.i64[0];
    *((_QWORD *)&v133 + 1) = v292;
    v111.i64[1] = v293;
    v294 = v111;
    *(_QWORD *)&v134 = v394.i64[0];
    *((_QWORD *)&v134 + 1) = v295;
    *(_QWORD *)&v135 = v396.i64[0];
    *((_QWORD *)&v135 + 1) = v296;
    v108.i64[1] = v297;
    v298 = v108;
    *(_QWORD *)&v136 = v434.i64[0];
    *((_QWORD *)&v136 + 1) = v299;
    v435 = v136;
    v106.i64[1] = v300;
    v389 = v106;
    v105.i64[1] = v301;
    v391 = v105;
    *(_QWORD *)&v136 = v446.i64[0];
    *((_QWORD *)&v136 + 1) = v302;
    v447 = v136;
    v112.i64[1] = v303;
    v393 = v112;
    *(_QWORD *)&v137 = v398.i64[0];
    *((_QWORD *)&v137 + 1) = v304;
    v110.i64[1] = v305;
    v397 = v110;
    *(_QWORD *)&v138 = v400.i64[0];
    *((_QWORD *)&v138 + 1) = v306;
    v109.i64[1] = v307;
    v399 = v109;
    *(_QWORD *)&v139 = v402.i64[0];
    *((_QWORD *)&v139 + 1) = v308;
    *(_QWORD *)&v136 = v450.i64[0];
    *((_QWORD *)&v136 + 1) = v309;
    v451 = v136;
    v107.i64[1] = v310;
    v401 = v107;
    *(_QWORD *)&v140 = v404.i64[0];
    *((_QWORD *)&v140 + 1) = v311;
    v100.i64[1] = v312;
    v395 = v100;
    *(_QWORD *)&v141 = v454.i64[0];
    *((_QWORD *)&v141 + 1) = v289;
    v455 = v141;
    *(_QWORD *)&v136 = v406.i64[0];
    *((_QWORD *)&v136 + 1) = v313;
    *(_QWORD *)&v142 = v448.i64[0];
    *((_QWORD *)&v142 + 1) = v314;
    v449 = v142;
    *(_QWORD *)&v143 = v432.i64[0];
    *((_QWORD *)&v143 + 1) = v315;
    v433 = v143;
    v98.i64[1] = v316;
    v403 = v98;
    *(_QWORD *)&v144 = v430.i64[0];
    *((_QWORD *)&v144 + 1) = v317;
    v431 = v144;
    v104.i64[1] = v318;
    v405 = v104;
    *(_QWORD *)&v145 = v408.i64[0];
    *((_QWORD *)&v145 + 1) = v319;
    v103.i64[1] = v320;
    v407 = v103;
    *(_QWORD *)&v146 = v410.i64[0];
    *((_QWORD *)&v146 + 1) = v321;
    v102.i64[1] = v322;
    v409 = v102;
    *(_QWORD *)&v147 = v460.i64[0];
    *((_QWORD *)&v147 + 1) = v323;
    v461 = v147;
    *(_QWORD *)&v148 = v456.i64[0];
    *((_QWORD *)&v148 + 1) = v324;
    v457 = v148;
    *(_QWORD *)&v148 = v458.i64[0];
    *((_QWORD *)&v148 + 1) = v325;
    v459 = v148;
    v101.i64[1] = v326;
    v411 = v101;
    *(_QWORD *)&v148 = v462.i64[0];
    *((_QWORD *)&v148 + 1) = v327;
    v463 = v148;
    *(_QWORD *)&v149 = v452.i64[0];
    *((_QWORD *)&v149 + 1) = v328;
    v453 = v149;
    *(_QWORD *)&v150 = v412.i64[0];
    *((_QWORD *)&v150 + 1) = v329;
    v99.i64[1] = v330;
    v413 = v99;
    *(_QWORD *)&v151 = v414.i64[0];
    *((_QWORD *)&v151 + 1) = v331;
    *(_QWORD *)&v142 = v444.i64[0];
    *((_QWORD *)&v142 + 1) = v332;
    v445 = v142;
    *(_QWORD *)&v152 = v436.i64[0];
    *((_QWORD *)&v152 + 1) = v333;
    v437 = v152;
    *(_QWORD *)&v152 = v415.i64[0];
    *((_QWORD *)&v152 + 1) = v334;
    *(_QWORD *)&v143 = v417.i64[0];
    *((_QWORD *)&v143 + 1) = v335;
    *(_QWORD *)&v153 = v416.i64[0];
    *((_QWORD *)&v153 + 1) = v336;
    *(_QWORD *)&v154 = v418.i64[0];
    *((_QWORD *)&v154 + 1) = v337;
    *(_QWORD *)&v147 = v464.i64[0];
    *((_QWORD *)&v147 + 1) = v338;
    v465 = v147;
    *(_QWORD *)&v147 = v466.i64[0];
    *((_QWORD *)&v147 + 1) = v339;
    v467 = v147;
    *(_QWORD *)&v155 = v419.i64[0];
    *((_QWORD *)&v155 + 1) = v340;
    *(_QWORD *)&v147 = v472.i64[0];
    *((_QWORD *)&v147 + 1) = v341;
    v473 = v147;
    *(_QWORD *)&v147 = v468.i64[0];
    *((_QWORD *)&v147 + 1) = v342;
    v469 = v147;
    *(_QWORD *)&v148 = v420.i64[0];
    *((_QWORD *)&v148 + 1) = v343;
    *(_QWORD *)&v147 = v438.i64[0];
    *((_QWORD *)&v147 + 1) = v344;
    v439 = v147;
    *(_QWORD *)&v147 = v474.i64[0];
    *((_QWORD *)&v147 + 1) = v345;
    v475 = v147;
    *(_QWORD *)&v147 = v442.i64[0];
    *((_QWORD *)&v147 + 1) = v346;
    v443 = v147;
    *(_QWORD *)&v147 = v440.i64[0];
    *((_QWORD *)&v147 + 1) = v347;
    v441 = v147;
    *(_QWORD *)&v147 = v476.i64[0];
    *((_QWORD *)&v147 + 1) = v348;
    v477 = v147;
    *(_QWORD *)&v149 = v535.i64[0];
    *((_QWORD *)&v149 + 1) = v349;
    v536 = v149;
    *(_QWORD *)&v141 = v426.i64[0];
    *((_QWORD *)&v141 + 1) = v350;
    *(_QWORD *)&v149 = v537.i64[0];
    *((_QWORD *)&v149 + 1) = v351;
    v538 = v149;
    *(_QWORD *)&v144 = v427.i64[0];
    *((_QWORD *)&v144 + 1) = v352;
    *(_QWORD *)&v149 = v541.i64[0];
    *((_QWORD *)&v149 + 1) = v353;
    v542 = v149;
    *(_QWORD *)&v156 = v422.i64[0];
    *((_QWORD *)&v156 + 1) = v354;
    *(_QWORD *)&v149 = v531.i64[0];
    *((_QWORD *)&v149 + 1) = v355;
    v532 = v149;
    *(_QWORD *)&v142 = v529.i64[0];
    *((_QWORD *)&v142 + 1) = v356;
    v530 = v142;
    *(_QWORD *)&v157 = v527.i64[0];
    *((_QWORD *)&v157 + 1) = v357;
    v528 = v157;
    *(_QWORD *)&v149 = v533.i64[0];
    *((_QWORD *)&v149 + 1) = v358;
    v534 = v149;
    *(_QWORD *)&v149 = v480.i64[0];
    *((_QWORD *)&v149 + 1) = v359;
    v481 = v149;
    *(_QWORD *)&v149 = v478.i64[0];
    *((_QWORD *)&v149 + 1) = v360;
    v479 = v149;
    *(_QWORD *)&v149 = v482.i64[0];
    *((_QWORD *)&v149 + 1) = v361;
    v483 = v149;
    *(_QWORD *)&v149 = v484.i64[0];
    *((_QWORD *)&v149 + 1) = v362;
    v485 = v149;
    *(_QWORD *)&v149 = v545.i64[0];
    *((_QWORD *)&v149 + 1) = v363;
    v546 = v149;
    *(_QWORD *)&v149 = v486.i64[0];
    *((_QWORD *)&v149 + 1) = v364;
    v487 = v149;
    *(_QWORD *)&v149 = v490.i64[0];
    *((_QWORD *)&v149 + 1) = v365;
    v491 = v149;
    *(_QWORD *)&v142 = v488.i64[0];
    *((_QWORD *)&v142 + 1) = v366;
    v489 = v142;
    *(_QWORD *)&v157 = v495.i64[0];
    *((_QWORD *)&v157 + 1) = v367;
    v496 = v157;
    *(_QWORD *)&v147 = v492.i64[0];
    *((_QWORD *)&v147 + 1) = v368;
    *(_QWORD *)&v149 = v497.i64[0];
    *((_QWORD *)&v149 + 1) = v369;
    v498 = v149;
    *(_QWORD *)&v142 = v423.i64[0];
    *((_QWORD *)&v142 + 1) = v370;
    *(_QWORD *)&v149 = v499.i64[0];
    *((_QWORD *)&v149 + 1) = v371;
    v500 = v149;
    *(_QWORD *)&v149 = v470.i64[0];
    *((_QWORD *)&v149 + 1) = v372;
    v471 = v149;
    *(_QWORD *)&v157 = v424.i64[0];
    *((_QWORD *)&v157 + 1) = v373;
    *(_QWORD *)&v149 = v501.i64[0];
    *((_QWORD *)&v149 + 1) = v374;
    v502 = v149;
    *(_QWORD *)&v149 = v503.i64[0];
    *((_QWORD *)&v149 + 1) = v375;
    v504 = v149;
    *(_QWORD *)&v149 = v505.i64[0];
    *((_QWORD *)&v149 + 1) = v376;
    v506 = v149;
    *(_QWORD *)&v149 = v509.i64[0];
    *((_QWORD *)&v149 + 1) = v377;
    v510 = v149;
    *(_QWORD *)&v149 = v507.i64[0];
    *((_QWORD *)&v149 + 1) = v378;
    v508 = v149;
    *(_QWORD *)&v149 = v511.i64[0];
    *((_QWORD *)&v149 + 1) = v379;
    v512 = v149;
    *(_QWORD *)&v149 = v513.i64[0];
    *((_QWORD *)&v149 + 1) = v380;
    v514 = v149;
    *(_QWORD *)&v149 = v493.i64[0];
    *((_QWORD *)&v149 + 1) = v381;
    v494 = v149;
    *(_QWORD *)&v149 = v517.i64[0];
    *((_QWORD *)&v149 + 1) = v382;
    v518 = v149;
    *(_QWORD *)&v149 = v515.i64[0];
    *((_QWORD *)&v149 + 1) = v383;
    v516 = v149;
    *(_QWORD *)&v149 = v519.i64[0];
    *((_QWORD *)&v149 + 1) = v384;
    v520 = v149;
    *(_QWORD *)&v149 = v521.i64[0];
    *((_QWORD *)&v149 + 1) = v385;
    v522 = v149;
    *(_QWORD *)&v149 = v524.i64[0];
    *((_QWORD *)&v149 + 1) = v386;
    v525 = v149;
    *(_QWORD *)&v149 = v425.i64[0];
    *((_QWORD *)&v149 + 1) = v387;
    *(int8x16_t *)(v523 + 1576) = v266;
    *(int8x16_t *)(v523 + 1592) = v268;
    *(int8x16_t *)(v523 + 1608) = v270;
    *(int8x16_t *)(v523 + 1624) = v272;
    *(_OWORD *)(v523 + 1640) = v130;
    *(int8x16_t *)(v523 + 1656) = v275;
    *(int8x16_t *)(v523 + 1672) = v123;
    *(int8x16_t *)(v523 + 1688) = v122;
    *(int8x16_t *)(v523 + 1704) = v279;
    *(_OWORD *)(v523 + 1720) = v131;
    *(int8x16_t *)(v523 + 1736) = v282;
    *(int8x16_t *)(v523 + 1752) = v284;
    *(int8x16_t *)(v523 + 1768) = v120;
    *(int8x16_t *)(v523 + 1784) = v115;
    *(_OWORD *)(v523 + 1800) = v132;
    *(int8x16_t *)(v523 + 1816) = v288;
    *(int8x16_t *)(v523 + 1832) = v291;
    *(_OWORD *)(v523 + 1848) = v133;
    *(int8x16_t *)(v523 + 1864) = v294;
    *(_OWORD *)(v523 + 1880) = v134;
    *(_OWORD *)(v523 + 1896) = v135;
    *(int8x16_t *)(v523 + 1912) = v298;
    *(_OWORD *)(v523 + 1928) = v435;
    *(int8x16_t *)(v523 + 1944) = v389;
    *(int8x16_t *)(v523 + 1960) = v391;
    *(_OWORD *)(v523 + 1976) = v447;
    *(int8x16_t *)(v523 + 1992) = v393;
    *(_OWORD *)(v523 + 2008) = v137;
    *(int8x16_t *)(v523 + 2024) = v397;
    *(_OWORD *)(v523 + 2040) = v138;
    *(int8x16_t *)(v523 + 2056) = v399;
    *(_OWORD *)(v523 + 2072) = v139;
    *(_OWORD *)(v523 + 2088) = v451;
    *(int8x16_t *)(v523 + 2104) = v401;
    *(_OWORD *)(v523 + 2120) = v140;
    *(int8x16_t *)(v523 + 2136) = v395;
    *(_OWORD *)(v523 + 2152) = v455;
    *(_OWORD *)(v523 + 2168) = v136;
    *(_OWORD *)(v523 + 2184) = v449;
    *(_OWORD *)(v523 + 2200) = v433;
    *(int8x16_t *)(v523 + 2216) = v403;
    *(_OWORD *)(v523 + 2232) = v431;
    *(int8x16_t *)(v523 + 2248) = v405;
    *(_OWORD *)(v523 + 2264) = v145;
    *(int8x16_t *)(v523 + 2280) = v407;
    *(_OWORD *)(v523 + 2296) = v146;
    *(int8x16_t *)(v523 + 2312) = v409;
    *(_OWORD *)(v523 + 2328) = v461;
    *(_OWORD *)(v523 + 2344) = v457;
    *(_OWORD *)(v523 + 2360) = v459;
    *(int8x16_t *)(v523 + 2376) = v411;
    *(_OWORD *)(v523 + 2392) = v463;
    *(_OWORD *)(v523 + 2408) = v453;
    *(_OWORD *)(v523 + 2424) = v150;
    *(int8x16_t *)(v523 + 2440) = v413;
    *(_OWORD *)(v523 + 2456) = v151;
    *(_OWORD *)(v523 + 2472) = v445;
    *(_OWORD *)(v523 + 2488) = v437;
    *(_OWORD *)(v523 + 2504) = v152;
    *(_OWORD *)(v523 + 2520) = v143;
    *(_OWORD *)(v523 + 2536) = v153;
    *(_OWORD *)(v523 + 2552) = v154;
    *(_OWORD *)(v523 + 2568) = v465;
    *(_OWORD *)(v523 + 2584) = v467;
    *(_OWORD *)(v523 + 2600) = v155;
    *(_OWORD *)(v523 + 2616) = v473;
    *(_OWORD *)(v523 + 2632) = v469;
    *(_OWORD *)(v523 + 2648) = v148;
    *(_OWORD *)(v523 + 2664) = v439;
    *(_OWORD *)(v523 + 2680) = v475;
    *(_OWORD *)(v523 + 2696) = v443;
    *(_OWORD *)(v523 + 2712) = v441;
    *(_OWORD *)(v523 + 2728) = v477;
    *(_OWORD *)(v523 + 2744) = v536;
    *(_OWORD *)(v523 + 2760) = v141;
    *(_OWORD *)(v523 + 2776) = v538;
    *(_OWORD *)(v523 + 2792) = v144;
    *(_OWORD *)(v523 + 2808) = v542;
    *(_OWORD *)(v523 + 2824) = v156;
    *(_OWORD *)(v523 + 2840) = v532;
    *(_OWORD *)(v523 + 2856) = v530;
    *(_OWORD *)(v523 + 2872) = v528;
    *(_OWORD *)(v523 + 2888) = v534;
    *(_OWORD *)(v523 + 2904) = v481;
    *(_OWORD *)(v523 + 2920) = v479;
    *(_OWORD *)(v523 + 2936) = v483;
    *(_OWORD *)(v523 + 2952) = v485;
    *(_OWORD *)(v523 + 2968) = v546;
    *(_OWORD *)(v523 + 2984) = v487;
    *(_OWORD *)(v523 + 3000) = v491;
    *(_OWORD *)(v523 + 3016) = v489;
    *(_OWORD *)(v523 + 3032) = v496;
    *(_OWORD *)(v523 + 3048) = v147;
    *(_OWORD *)(v523 + 3064) = v498;
    *(_OWORD *)(v523 + 3080) = v142;
    *(_OWORD *)(v523 + 3096) = v500;
    *(_OWORD *)(v523 + 3112) = v471;
    *(_OWORD *)(v523 + 3128) = v157;
    *(_OWORD *)(v523 + 3144) = v502;
    *(_OWORD *)(v523 + 3160) = v504;
    *(_OWORD *)(v523 + 3176) = v506;
    *(_OWORD *)(v523 + 3192) = v510;
    *(_OWORD *)(v523 + 3208) = v508;
    *(_OWORD *)(v523 + 3224) = v512;
    *(_OWORD *)(v523 + 3240) = v514;
    *(_OWORD *)(v523 + 3256) = v494;
    *(_OWORD *)(v523 + 3272) = v518;
    *(_OWORD *)(v523 + 3288) = v516;
    *(_OWORD *)(v523 + 3304) = v520;
    *(_OWORD *)(v523 + 3320) = v522;
    *(_OWORD *)(v523 + 3336) = v525;
    *(_QWORD *)(v523 + 3368) = v421;
    *(_OWORD *)(v523 + 3352) = v149;
  }
  v158 = *(_QWORD *)(v544 + 4832);
  v159 = *(_QWORD *)(v544 + 4824);
  if (v158 != v159)
  {
    v160 = 0;
    v547 = 0;
    v526 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      if (*(_QWORD *)(v159 + 32 * v160 + 16) != *(_QWORD *)(v159 + 32 * v160 + 8))
      {
        v543 = v160;
        v161 = 0;
        v162 = 0;
        do
        {
          if (v547 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v167 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v168 = qword_254A6DE40;
              for (i = qword_254A6DE48; v168 != i; v168 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v168)(*(_QWORD *)(v168 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v170 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_320:
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v162 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v171 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v172 = qword_254A6DE40;
              for (j = qword_254A6DE48; v172 != j; v172 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v172)(*(_QWORD *)(v172 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v174 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_320;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          if (v547 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v175 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v176 = qword_254A6DE40;
              for (k = qword_254A6DE48; v176 != k; v176 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v176)(*(_QWORD *)(v176 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v178 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_320;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v162 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v179 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v180 = qword_254A6DE40;
              for (m = qword_254A6DE48; v180 != m; v180 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v180)(*(_QWORD *)(v180 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v182 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_320;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v183 = (unsigned __int16)v162 | (v547 << 16);
          v184 = *(_QWORD *)(*(_QWORD *)(v544 + 4824) + 32 * v543 + 8);
          v185 = v539;
          while (1)
          {
            v186 = *v185;
            v187 = v185;
            if (!*v185)
              break;
            while (1)
            {
              v185 = (char **)v186;
              v188 = *((_DWORD *)v186 + 8);
              if (v183 < v188)
                break;
              if (v188 >= v183)
              {
                v189 = (char *)v185;
                goto LABEL_199;
              }
              v186 = v185[1];
              if (!v186)
              {
                v187 = v185 + 1;
                goto LABEL_173;
              }
            }
          }
LABEL_173:
          v189 = (char *)operator new(0x6A8uLL);
          *((_DWORD *)v189 + 8) = v183;
          v189[136] = 0;
          v189[1576] = 0;
          *((_QWORD *)v189 + 199) = 0x3FF0000000000000;
          v189[1632] = 0;
          v189[1640] = 0;
          v189[1664] = 0;
          v189[1672] = 0;
          v189[1696] = 0;
          *((_QWORD *)v189 + 200) = 0;
          *((_QWORD *)v189 + 202) = 0;
          *((_QWORD *)v189 + 201) = 0;
          v189[1624] = 0;
          *(int64x2_t *)(v189 + 40) = v526;
          *(int64x2_t *)(v189 + 56) = v526;
          *(int64x2_t *)(v189 + 72) = v526;
          *(int64x2_t *)(v189 + 88) = v526;
          *(int64x2_t *)(v189 + 104) = v526;
          *(int64x2_t *)(v189 + 120) = v526;
          *((_DWORD *)v189 + 396) = 1;
          *(_QWORD *)v189 = 0;
          *((_QWORD *)v189 + 1) = 0;
          *((_QWORD *)v189 + 2) = v185;
          *v187 = v189;
          v190 = v189;
          v191 = **(_QWORD **)(v540 + 4576);
          if (v191)
          {
            *(_QWORD *)(v540 + 4576) = v191;
            v190 = *v187;
          }
          v192 = *v539;
          v193 = v190 == *v539;
          v190[24] = v193;
          if (!v193)
          {
            do
            {
              v194 = *((_QWORD *)v190 + 2);
              if (*(_BYTE *)(v194 + 24))
                break;
              v195 = *(char **)(v194 + 16);
              v196 = *(_QWORD *)v195;
              if (*(_QWORD *)v195 == v194)
              {
                v199 = *((_QWORD *)v195 + 1);
                if (!v199 || (v200 = *(unsigned __int8 *)(v199 + 24), v197 = (_BYTE *)(v199 + 24), v200))
                {
                  if (*(char **)v194 == v190)
                  {
                    *(_BYTE *)(v194 + 24) = 1;
                    v195[24] = 0;
                    v203 = *(_QWORD *)(v194 + 8);
                    *(_QWORD *)v195 = v203;
                    if (v203)
                      goto LABEL_190;
                  }
                  else
                  {
                    v201 = *(uint64_t **)(v194 + 8);
                    v202 = *v201;
                    *(_QWORD *)(v194 + 8) = *v201;
                    if (v202)
                    {
                      *(_QWORD *)(v202 + 16) = v194;
                      v195 = *(char **)(v194 + 16);
                    }
                    v201[2] = (uint64_t)v195;
                    *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8 * (**(_QWORD **)(v194 + 16) != v194)) = v201;
                    *v201 = v194;
                    *(_QWORD *)(v194 + 16) = v201;
                    v195 = (char *)v201[2];
                    v194 = *(_QWORD *)v195;
                    *((_BYTE *)v201 + 24) = 1;
                    v195[24] = 0;
                    v203 = *(_QWORD *)(v194 + 8);
                    *(_QWORD *)v195 = v203;
                    if (v203)
LABEL_190:
                      *(_QWORD *)(v203 + 16) = v195;
                  }
                  *(_QWORD *)(v194 + 16) = *((_QWORD *)v195 + 2);
                  *(_QWORD *)(*((_QWORD *)v195 + 2) + 8 * (**((_QWORD **)v195 + 2) != (_QWORD)v195)) = v194;
                  *(_QWORD *)(v194 + 8) = v195;
LABEL_197:
                  *((_QWORD *)v195 + 2) = v194;
                  break;
                }
              }
              else if (!v196 || (v198 = *(unsigned __int8 *)(v196 + 24), v197 = (_BYTE *)(v196 + 24), v198))
              {
                if (*(char **)v194 == v190)
                {
                  v213 = *((_QWORD *)v190 + 1);
                  *(_QWORD *)v194 = v213;
                  if (v213)
                  {
                    *(_QWORD *)(v213 + 16) = v194;
                    v195 = *(char **)(v194 + 16);
                  }
                  *((_QWORD *)v190 + 2) = v195;
                  *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8 * (**(_QWORD **)(v194 + 16) != v194)) = v190;
                  *((_QWORD *)v190 + 1) = v194;
                  *(_QWORD *)(v194 + 16) = v190;
                  v195 = (char *)*((_QWORD *)v190 + 2);
                  v190[24] = 1;
                  v195[24] = 0;
                  v194 = *((_QWORD *)v195 + 1);
                  v204 = *(char **)v194;
                  *((_QWORD *)v195 + 1) = *(_QWORD *)v194;
                  if (v204)
LABEL_195:
                    *((_QWORD *)v204 + 2) = v195;
                }
                else
                {
                  *(_BYTE *)(v194 + 24) = 1;
                  v195[24] = 0;
                  v194 = *((_QWORD *)v195 + 1);
                  v204 = *(char **)v194;
                  *((_QWORD *)v195 + 1) = *(_QWORD *)v194;
                  if (v204)
                    goto LABEL_195;
                }
                *(_QWORD *)(v194 + 16) = *((_QWORD *)v195 + 2);
                *(_QWORD *)(*((_QWORD *)v195 + 2) + 8 * (**((_QWORD **)v195 + 2) != (_QWORD)v195)) = v194;
                *(_QWORD *)v194 = v195;
                goto LABEL_197;
              }
              *(_BYTE *)(v194 + 24) = 1;
              v190 = v195;
              v195[24] = v195 == v192;
              *v197 = 1;
            }
            while (v195 != v192);
          }
          ++*(_QWORD *)(v540 + 4592);
LABEL_199:
          sub_20EB81E74((uint64_t)__p, v184 + 1664 * v161);
          v205 = v553[0];
          v206 = *(_OWORD *)v552;
          v207 = *(_OWORD *)&__p[4];
          v208 = *(_OWORD *)__p;
          *(_OWORD *)(v189 + 56) = *(_OWORD *)&__p[2];
          *(_OWORD *)(v189 + 72) = v207;
          *(_OWORD *)(v189 + 88) = v206;
          *((_QWORD *)v189 + 13) = v205;
          *(_OWORD *)(v189 + 40) = v208;
          *((_OWORD *)v189 + 7) = *(_OWORD *)&v553[1];
          *((void **)v189 + 16) = v553[3];
          sub_20EB84848((uint64_t)(v189 + 136), (uint64_t)v554);
          *((_OWORD *)v189 + 99) = *(_OWORD *)&v640[8];
          *((_QWORD *)v189 + 200) = *(_QWORD *)&v640[24];
          v209 = v641;
          v641 = 0uLL;
          v210 = (std::__shared_weak_count *)*((_QWORD *)v189 + 202);
          *(int8x16_t *)(v189 + 1608) = v209;
          v35 = (_QWORD *)v540;
          if (v210)
          {
            p_shared_owners = (unint64_t *)&v210->__shared_owners_;
            do
              v212 = __ldaxr(p_shared_owners);
            while (__stlxr(v212 - 1, p_shared_owners));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
          v163 = *(_OWORD *)&v645[9];
          v165 = v644;
          v164 = *(_OWORD *)v645;
          v166 = v642;
          *(int8x16_t *)(v189 + 1640) = v643;
          *(int8x16_t *)(v189 + 1656) = v165;
          *(_OWORD *)(v189 + 1672) = v164;
          *(int8x16_t *)(v189 + 1624) = v166;
          *(_OWORD *)(v189 + 1681) = v163;
          sub_20EB8188C((uint64_t)__p);
          v159 = *(_QWORD *)(v544 + 4824);
          v161 = ++v162;
        }
        while (0x4EC4EC4EC4EC4EC5
              * ((uint64_t)(*(_QWORD *)(v159 + 32 * v543 + 16) - *(_QWORD *)(v159 + 32 * v543 + 8)) >> 7) > (unint64_t)v162);
        v36 = v544;
        v158 = *(_QWORD *)(v544 + 4832);
      }
      v160 = ++v547;
    }
    while (v547 < (unint64_t)((v158 - v159) >> 5));
  }
  v214 = *(_QWORD *)(v36 + 4864);
  if (*(_BYTE *)(v214 + 4744))
  {
    v553[0] = *(void **)(v214 + 3144);
    v215 = *(_OWORD *)(v214 + 3128);
    *(_OWORD *)&__p[4] = *(_OWORD *)(v214 + 3112);
    *(_OWORD *)v552 = v215;
    v216 = *(_OWORD *)(v214 + 3080);
    *(_OWORD *)&__p[2] = *(_OWORD *)(v214 + 3096);
    *(_OWORD *)__p = v216;
    *(_OWORD *)&v553[1] = *(_OWORD *)(v214 + 3152);
    v553[3] = *(void **)(v214 + 3168);
    v217 = v7[96];
    memmove(v7, (const void *)(v214 + 3080), 0x48uLL);
    *((_OWORD *)v35 + 292) = *(_OWORD *)&v553[1];
    v35[586] = v553[3];
    if (!v217)
      v7[96] = 1;
  }
  v550 = 0;
  v549 = 0;
  v548 = &v549;
  v218 = *(uint64_t **)(v214 + 5200);
  v219 = *(uint64_t **)(v214 + 5208);
  v220 = *(uint64_t **)(v214 + 5216);
  v221 = *(uint64_t **)(v214 + 5224);
  v222 = *(uint64_t **)(v214 + 5232);
  v223 = *(uint64_t **)(v214 + 5240);
  v224 = *(uint64_t **)(v214 + 5248);
  v225 = *(uint64_t **)(v214 + 5256);
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "vision");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v218;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "plane");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v224;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "inertial");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v220;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 3;
  strcpy((char *)__p, "map");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v219;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "stationary");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v221;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "projected velocity");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v222;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "prior");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v223;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "total");
  sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p)[7] = v225;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v226 = *(_QWORD **)(v36 + 4848);
    if (v226[107])
      goto LABEL_245;
LABEL_248:
    v229 = 0.0;
    goto LABEL_253;
  }
  v226 = *(_QWORD **)(v36 + 4848);
  if (!v226[107])
    goto LABEL_248;
LABEL_245:
  v227 = v226[106];
  if (v227)
  {
    v228 = v226[102];
  }
  else
  {
    v230 = v226[103];
    v228 = v226[102];
    v227 = 0x8F9C18F9C18F9C19 * ((v230 - v228) >> 3);
  }
  if (*(_BYTE *)(v228 + 328 * v227 - 40))
    v229 = 1.0;
  else
    v229 = 0.0;
LABEL_253:
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "discrepancy");
  v231 = (uint64_t *)(v523 + 4496);
  *((double *)sub_20F13F754(&v548, (const void **)__p, (uint64_t)__p) + 7) = v229;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_20E866BE0((uint64_t)v231, (char *)v35[589]);
  v232 = v549;
  v35[588] = v548;
  v35[589] = v232;
  v233 = v550;
  v35[590] = v550;
  if (v233)
  {
    *(_QWORD *)(v232 + 16) = v428;
    v548 = &v549;
    v549 = 0;
    v550 = 0;
    v232 = 0;
  }
  else
  {
    *v231 = v428;
  }
  sub_20E866BE0((uint64_t)&v548, (char *)v232);
  v234 = *(_QWORD *)(v36 + 4848);
  *((_BYTE *)v35 + 1777) = *(_BYTE *)(v234 + 1928);
  *((_BYTE *)v35 + 1778) = *(_BYTE *)v36;
  *(_WORD *)((char *)v35 + 1779) = *(_WORD *)(v36 + 1);
  v235 = *(_QWORD *)(v234 + 856);
  if (!v235 || (LOBYTE(v235) = *(_BYTE *)(v36 + 1043), !(_BYTE)v235))
  {
LABEL_266:
    *((_BYTE *)v35 + 1781) = v235;
    v237 = *(_QWORD *)(v36 + 4792);
    v238 = *(_BYTE *)(v237 + 208);
    if (v238)
      goto LABEL_267;
    goto LABEL_271;
  }
  v236 = *(_QWORD *)(v234 + 848);
  if (v236)
  {
    if (*(_BYTE *)(*(_QWORD *)(v234 + 816) + 328 * v236 - 40))
      goto LABEL_270;
  }
  else if (*(_BYTE *)(*(_QWORD *)(v234 + 816)
                     + 8 * ((uint64_t)(*(_QWORD *)(v234 + 824) - *(_QWORD *)(v234 + 816)) >> 3)
                     - 40))
  {
    goto LABEL_270;
  }
  v235 = *(_QWORD *)(v234 + 944);
  if (v235 != *(_QWORD *)(v234 + 952))
  {
    LOBYTE(v235) = *(_BYTE *)(v235 + 504) != 0;
    goto LABEL_266;
  }
LABEL_270:
  *((_BYTE *)v35 + 1781) = 0;
  v237 = *(_QWORD *)(v36 + 4792);
  v238 = *(_BYTE *)(v237 + 208);
  if (v238)
  {
LABEL_267:
    v238 = *(_BYTE *)(v237 + 80);
    v239 = *(_OWORD *)(v237 + 161);
    *(_OWORD *)v553 = *(_OWORD *)(v237 + 145);
    *(_OWORD *)&v553[2] = v239;
    *(_OWORD *)v554 = *(_OWORD *)(v237 + 177);
    *(_OWORD *)((char *)&v554[1] + 7) = *(_OWORD *)(v237 + 192);
    v240 = *(_OWORD *)(v237 + 97);
    *(_OWORD *)__p = *(_OWORD *)(v237 + 81);
    *(_OWORD *)&__p[2] = v240;
    v241 = *(_OWORD *)(v237 + 129);
    *(_OWORD *)&__p[4] = *(_OWORD *)(v237 + 113);
    *(_OWORD *)v552 = v241;
    v242 = v7[256];
    if (v242 == 1)
      goto LABEL_268;
LABEL_272:
    if (v242)
    {
      v7[256] = 0;
    }
    else
    {
      v7[128] = v238;
      v246 = *(_OWORD *)&v553[2];
      *(_OWORD *)((char *)v35 + 4793) = *(_OWORD *)v553;
      *(_OWORD *)((char *)v35 + 4809) = v246;
      *(_OWORD *)((char *)v35 + 4825) = *(_OWORD *)v554;
      *(_OWORD *)(v35 + 605) = *(_OWORD *)((char *)&v554[1] + 7);
      v247 = *(_OWORD *)&__p[2];
      *(_OWORD *)((char *)v35 + 4729) = *(_OWORD *)__p;
      *(_OWORD *)((char *)v35 + 4745) = v247;
      v248 = *(_OWORD *)v552;
      *(_OWORD *)((char *)v35 + 4761) = *(_OWORD *)&__p[4];
      *(_OWORD *)((char *)v35 + 4777) = v248;
      v7[256] = 1;
    }
    goto LABEL_275;
  }
LABEL_271:
  v242 = v7[256];
  if (v7[256])
    goto LABEL_272;
LABEL_268:
  if (v242)
  {
    v7[128] = v238;
    v243 = *(_OWORD *)&v553[2];
    *(_OWORD *)((char *)v35 + 4793) = *(_OWORD *)v553;
    *(_OWORD *)((char *)v35 + 4809) = v243;
    *(_OWORD *)((char *)v35 + 4825) = *(_OWORD *)v554;
    *(_OWORD *)(v35 + 605) = *(_OWORD *)((char *)&v554[1] + 7);
    v244 = *(_OWORD *)&__p[2];
    *(_OWORD *)((char *)v35 + 4729) = *(_OWORD *)__p;
    *(_OWORD *)((char *)v35 + 4745) = v244;
    v245 = *(_OWORD *)v552;
    *(_OWORD *)((char *)v35 + 4761) = *(_OWORD *)&__p[4];
    *(_OWORD *)((char *)v35 + 4777) = v245;
  }
LABEL_275:
  sub_20F103120(v234 + 760, *(_QWORD *)(v36 + 4824), (uint64_t)__p);
  if (v429[144] == v555.u8[0])
  {
    if (!v429[144])
      return;
    v249 = *(void **)v429;
    if (*(_QWORD *)v429)
    {
      v35[609] = v249;
      operator delete(v249);
      *(_QWORD *)v429 = 0;
      *((_QWORD *)v429 + 1) = 0;
      *((_QWORD *)v429 + 2) = 0;
    }
    *((_OWORD *)v35 + 304) = *(_OWORD *)__p;
    v35[610] = __p[2];
    memset(__p, 0, 24);
    v250 = v429 + 24;
    v251 = (void *)v35[611];
    if (v251)
    {
      v35[612] = v251;
      operator delete(v251);
      *v250 = 0;
      *((_QWORD *)v429 + 4) = 0;
      *((_QWORD *)v429 + 5) = 0;
    }
    *(_OWORD *)v250 = *(_OWORD *)&__p[3];
    v35[613] = __p[5];
    memset(&__p[3], 0, 24);
    v252 = (void *)v35[614];
    if (v252)
    {
      v35[615] = v252;
      operator delete(v252);
      v35[614] = 0;
      v35[615] = 0;
      v35[616] = 0;
    }
    *((_OWORD *)v35 + 307) = *(_OWORD *)v552;
    v35[616] = v553[0];
    v552[1] = 0;
    v553[0] = 0;
    v552[0] = 0;
    v253 = v429 + 72;
    v254 = (void *)v35[617];
    if (v254)
    {
      v35[618] = v254;
      operator delete(v254);
      *v253 = 0;
      *((_QWORD *)v429 + 10) = 0;
      *((_QWORD *)v429 + 11) = 0;
    }
    *(_OWORD *)v253 = *(_OWORD *)&v553[1];
    v35[619] = v553[3];
    memset(&v553[1], 0, 24);
    v255 = (void *)v35[620];
    if (v255)
    {
      v35[621] = v255;
      operator delete(v255);
      v35[620] = 0;
      v35[621] = 0;
      v35[622] = 0;
    }
    *((_OWORD *)v35 + 310) = *(_OWORD *)v554;
    v35[622] = v554[2];
    memset(v554, 0, 24);
    v256 = v429 + 120;
    v257 = (void *)v35[623];
    if (v257)
    {
      v35[624] = v257;
      operator delete(v257);
      *v256 = 0;
      *((_QWORD *)v429 + 16) = 0;
      *((_QWORD *)v429 + 17) = 0;
    }
    *(_OWORD *)v256 = *(_OWORD *)&v554[3];
    v35[625] = v554[5];
    memset(&v554[3], 0, 24);
    if (!v555.i8[0])
      return;
    goto LABEL_307;
  }
  if (!v429[144])
  {
    v35[610] = __p[2];
    v35[613] = __p[5];
    v35[616] = v553[0];
    v35[619] = v553[3];
    v264 = v554[5];
    v35[622] = v554[2];
    *((_OWORD *)v35 + 304) = *(_OWORD *)__p;
    __p[1] = 0;
    __p[0] = 0;
    *(_OWORD *)(v429 + 24) = *(_OWORD *)&__p[3];
    memset(&__p[2], 0, 32);
    *((_OWORD *)v35 + 307) = *(_OWORD *)v552;
    v552[0] = 0;
    v552[1] = 0;
    *(_OWORD *)(v429 + 72) = *(_OWORD *)&v553[1];
    memset(v553, 0, sizeof(v553));
    *((_OWORD *)v35 + 310) = *(_OWORD *)v554;
    v554[1] = 0;
    v554[0] = 0;
    *(_OWORD *)(v429 + 120) = *(_OWORD *)&v554[3];
    v35[625] = v264;
    memset(&v554[2], 0, 32);
    v429[144] = 1;
    if (!v555.i8[0])
      return;
    goto LABEL_307;
  }
  v258 = (void *)v35[623];
  if (v258)
  {
    v35[624] = v258;
    operator delete(v258);
  }
  v259 = (void *)v35[620];
  if (v259)
  {
    v35[621] = v259;
    operator delete(v259);
  }
  v260 = (void *)v35[617];
  if (v260)
  {
    v35[618] = v260;
    operator delete(v260);
  }
  v261 = (void *)v35[614];
  if (v261)
  {
    v35[615] = v261;
    operator delete(v261);
  }
  v262 = (void *)v35[611];
  if (v262)
  {
    v35[612] = v262;
    operator delete(v262);
  }
  v263 = *(void **)v429;
  if (*(_QWORD *)v429)
  {
    v35[609] = v263;
    operator delete(v263);
  }
  v429[144] = 0;
  if (v555.i8[0])
  {
LABEL_307:
    if (v554[3])
    {
      v554[4] = v554[3];
      operator delete(v554[3]);
    }
    if (v554[0])
    {
      v554[1] = v554[0];
      operator delete(v554[0]);
    }
    if (v553[1])
    {
      v553[2] = v553[1];
      operator delete(v553[1]);
    }
    if (v552[0])
    {
      v552[1] = v552[0];
      operator delete(v552[0]);
    }
    if (__p[3])
    {
      __p[4] = __p[3];
      operator delete(__p[3]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

