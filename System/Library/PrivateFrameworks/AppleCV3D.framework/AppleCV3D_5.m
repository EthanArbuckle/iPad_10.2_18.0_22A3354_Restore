void sub_20EA26FA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA26FE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE9Su"
                     "bscribeENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEv"
                                "S6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA27050()
{
  return &unk_24C9BB2E0;
}

_QWORD *sub_20EA2705C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB300;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA27094(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB300;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA270DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB300;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA2712C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BB300;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA2715C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2716C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA27198(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2722C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA27268(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15A"
                     "ddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEv"
                                "S6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA272D4()
{
  return &unk_24C9BB360;
}

_QWORD *sub_20EA272E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB380;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA27318(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB380;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA27360(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB380;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA273B8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB380;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA273F0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA27400(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2742C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA275A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA27618(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE16"
                     "OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA27684()
{
  return &unk_24C9BB3E0;
}

_QWORD *sub_20EA27690(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB400;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA276C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB400;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA27710(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB400;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA27768(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB400;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA277A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA277B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA277DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA27894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA278E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15"
                     "ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2794C()
{
  return &unk_24C9BB460;
}

void sub_20EA2795C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA27980(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA27998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection16HitTestDe"
                     "bugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection"
                                "16HitTestDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection16HitTestDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection16HitTestDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA27A08(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA27A34(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA27A70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB4D0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA27AD8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA27B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA27B7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA27C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA27C20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA27CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA27CF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA27DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA27DD0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA27E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA27E8C(uint64_t a1)
{
  sub_20EA29684(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA27EB0(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count **v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::mutex **v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = (uint64_t *)a1[18];
  if (v2)
  {
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB738;
    v6 = v3 + 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (_QWORD *)operator new();
    *v8 = v2 + 7;
    std::mutex::lock((std::mutex *)(v2 + 7));
    *(_QWORD *)&v49 = v8;
    *((_QWORD *)&v49 + 1) = v2;
    if (!*((_BYTE *)v2 + 48))
      sub_20E866B34();
    v9 = v2[4];
    v10 = *v2;
    v11 = (std::__shared_weak_count **)(*v2 + 16 * v9);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *v11 = v6;
    v13 = v10 + 16 * v9;
    v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v3;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (v2[1] - *v2) >> 4;
    v18 = v2[5];
    v19 = v2[4] + 1;
    if (v19 >= v17)
      v20 = (v2[1] - *v2) >> 4;
    else
      v20 = 0;
    v2[4] = v19 - v20;
    if (v18 == v17)
    {
      v21 = v2[3] + 1;
      if (v21 < v17)
        v17 = 0;
      v2[3] = v21 - v17;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
      {
LABEL_33:
        v32 = (uint64_t **)a1[9];
        v49 = 0uLL;
        v33 = (std::__shared_weak_count *)a1[5];
        if (v33)
        {
          v34 = std::__shared_weak_count::lock(v33);
          if (v34)
          {
            v35 = v34;
            v36 = a1[4];
            v37 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            *(_QWORD *)&v49 = v36;
            *((_QWORD *)&v49 + 1) = v34;
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          else
          {
            v49 = 0uLL;
          }
        }
        v41 = (char *)operator new(0x30uLL);
        *(_QWORD *)v41 = &off_24C9BB788;
        *(_OWORD *)(v41 + 8) = v49;
        v49 = 0uLL;
        *((_QWORD *)v41 + 3) = v6;
        *((_QWORD *)v41 + 4) = v3;
        v50 = 0;
        v51 = 0;
        v53 = v41;
        sub_210216F3C(*v32, (uint64_t)v52);
        v42 = v53;
        if (v53 == v52)
        {
          v43 = 4;
          v42 = v52;
        }
        else
        {
          if (!v53)
            goto LABEL_47;
          v43 = 5;
        }
        (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_47:
        if (v3)
        {
          v44 = (unint64_t *)&v3->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        return;
      }
    }
    else
    {
      v2[5] = v18 + 1;
      v22 = (std::mutex **)v49;
      if (!(_QWORD)v49)
        goto LABEL_33;
    }
    std::mutex::unlock(*v22);
    MEMORY[0x212BC6398](v22, 0x20C4093837F09);
    goto LABEL_33;
  }
  v23 = (uint64_t **)a1[9];
  v24 = (std::__shared_weak_count *)a1[5];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v26 = v25;
    if (v25)
    {
      v27 = a1[4];
      v28 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v46 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v46 = &off_24C9BB808;
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = v26;
  v51 = v46;
  sub_210216F3C(*v23, (uint64_t)&v49);
  v47 = v51;
  if (v51 == &v49)
  {
    v48 = 4;
    v47 = &v49;
  }
  else
  {
    if (!v51)
      return;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
}

void sub_20EA282B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA283A4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA283B4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA283C0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA283D0(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  __int128 v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::runtime_error v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  _QWORD v76[3];
  std::string v77;
  std::string *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v73 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v73 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v74 = v59;
    v75 = v62;
    sub_20E8778D4((uint64_t)&v73, (uint64_t)v76, 0, 0, &v77);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v77;
    else
      v63 = (std::string *)v77.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v70, (const char *)v63);
    v70.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v70);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v65, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v5[1].__vftable = *a3;
    v69 = v5;
    v67 = &v5[1].__vftable;
    v68 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    *a3 = 0;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB738;
    v11 = v8 + 1;
    v71 = v8 + 1;
    v72 = v8;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_20E866B34();
    v15 = v13[4];
    v16 = *v13;
    v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v11;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v8;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v73 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v73 = v42;
            *((_QWORD *)&v73 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v73 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24C9BB888;
        *(_OWORD *)(v47 + 8) = v73;
        v73 = 0uLL;
        *((_QWORD *)v47 + 3) = v11;
        *((_QWORD *)v47 + 4) = v8;
        v74 = 0;
        v75 = 0;
        *((_QWORD *)v47 + 5) = v67;
        *((_QWORD *)v47 + 6) = v68;
        v76[0] = 0;
        v76[1] = 0;
        v78 = (std::string *)v47;
        sub_210216F3C(*v38, (uint64_t)&v77);
        v48 = v78;
        if (v78 == &v77)
        {
          v49 = 4;
          v48 = &v77;
        }
        else
        {
          if (!v78)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_51:
        if (v72)
        {
          v50 = &v72->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v69)
        {
          v52 = (unint64_t *)&v69->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v73;
      if (!(_QWORD)v73)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v66 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v66 = v33;
      *((_QWORD *)&v66 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v66 = 0uLL;
    }
  }
  v54 = operator new(0x20uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &unk_24C9B85F0;
  v54[3] = *a3;
  *a3 = 0;
  v55 = (char *)operator new(0x30uLL);
  *(_QWORD *)v55 = &off_24C9BB908;
  *(_OWORD *)(v55 + 8) = v66;
  *((_QWORD *)v55 + 4) = v54 + 3;
  *((_QWORD *)v55 + 5) = v54;
  v75 = (__int128 *)v55;
  sub_210216F3C(*v29, (uint64_t)&v73);
  v57 = v75;
  if (v75 == &v73)
  {
    v58 = 4;
    v57 = &v73;
  }
  else
  {
    if (!v75)
      return;
    v58 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v57 + 8 * v58))(v57, v56);
}

void sub_20EA289DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20EA288F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA28AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA28B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA28BA0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA28C14(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BB988;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA28D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA28D88(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BBA08;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA28E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA28EFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BBA88;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA29114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA291DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BBB08;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA293F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA294BC(uint64_t a1)
{
  return sub_20EA29684(a1 - 16);
}

void sub_20EA294C4(uint64_t a1)
{
  sub_20EA29684(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA294EC(uint64_t a1)
{
  return sub_20EA28C14((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA294F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA28EFC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA294FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA291DC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA29504(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA2950C(uint64_t a1)
{
  return sub_20EA29684(a1 - 24);
}

void sub_20EA29514(uint64_t a1)
{
  sub_20EA29684(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2953C(uint64_t a1)
{
  return sub_20EA28D88((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA29544(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA2954C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA295B4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA2961C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = ***(_QWORD ***)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20EA29684(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BB548;
  *(_QWORD *)(a1 + 16) = &unk_24C9BB5C0;
  *(_QWORD *)(a1 + 24) = &unk_24C9BB600;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA29870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA29880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA298B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB788;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA298FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB788;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA29950(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB788;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA299C0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB788;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA29A10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA29A4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA29A84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA29DA8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA29C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA29D30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA29D9C()
{
  return &unk_24C9BB7E8;
}

void sub_20EA29DA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA29E40()
{
  __break(1u);
}

void sub_20EA29EEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA29F0CLL);
}

_QWORD *sub_20EA29F18(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB808;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA29F50(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB808;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA29F98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB808;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA29FE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BB808;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA2A018(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2A028(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2A054(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA29DA8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2A148(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2A1B4()
{
  return &unk_24C9BB868;
}

_QWORD *sub_20EA2A1C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BB888;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA2A248(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BB888;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA2A2E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB888;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA2A370(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB888;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA2A3E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA2A460(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA2A4DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA29DA8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA2A790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA2A8E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEE"
                                "EUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2A954()
{
  return &unk_24C9BB8E8;
}

_QWORD *sub_20EA2A960(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BB908;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA2A9DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BB908;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2AA68(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB908;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[5];
  result[4] = a1[4];
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA2AAD8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB908;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA2AB28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA2AB98(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EA2AC08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA29DA8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA2AD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2ADC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2AE30()
{
  return &unk_24C9BB968;
}

_QWORD *sub_20EA2AE3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB988;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA2AE74(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB988;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2AEBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB988;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA2AF0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BB988;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA2AF3C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2AF4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2AF78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2B00C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2B048(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTag"
                     "EvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDe"
                                "nseCloudTagEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2B0B4()
{
  return &unk_24C9BB9E8;
}

_QWORD *sub_20EA2B0C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BBA08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA2B0F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BBA08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2B140(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BBA08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA2B190(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BBA08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA2B1C0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2B1D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2B1FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2B290(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2B2CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTag"
                     "EvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDe"
                                "nseCloudTagEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2B338()
{
  return &unk_24C9BBA68;
}

_QWORD *sub_20EA2B344(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BBA88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA2B37C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BBA88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2B3C4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BBA88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA2B41C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BBA88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA2B454(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2B464(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2B490(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2B548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2B594(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2B600()
{
  return &unk_24C9BBAE8;
}

_QWORD *sub_20EA2B60C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BBB08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA2B644(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BBB08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2B68C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BBB08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA2B6E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BBB08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA2B71C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2B72C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2B758(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2B85C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTa"
                     "gEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetD"
                                "enseCloudTagEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA2B8C8()
{
  return &unk_24C9BBB68;
}

void sub_20EA2B8D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA2B8FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA2B914(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting"
                     "18ResetDenseCloudTagEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_"
                                "ray_casting18ResetDenseCloudTagEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA2B984(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B24F0;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B2558;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9BBBD8;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20EA2BB34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA2BBA4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA2BBD0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA2BC0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BBBD8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA2BC74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA2BD18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2BDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA2BDBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA2BE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA2BE94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA2BF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA2BF6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA2C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA2C024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA2C034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA2C064(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 136);
    *(_QWORD *)(v1 + 136) = 0;
    if (v2)
    {
      v3 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v3;
        operator delete(v3);
      }
      MEMORY[0x212BC6398](v2, 0x20C40960023A9);
    }
    v4 = *(_QWORD **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    if (v4)
      sub_20EEF2E84(v1 + 128, v4);
    *(_QWORD *)(v1 + 24) = &off_24C9F15F0;
    sub_20EEF2F9C(v1, *(_QWORD **)(v1 + 8));
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA2C10C(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t *v12;
  __int128 v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  void **v51;
  void *v52;
  unint64_t *v53;
  __int128 v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  void **v92;
  void *v93;
  unint64_t *v94;
  __int128 v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  __int128 v103;
  int v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  void **v134;
  void *v135;
  unint64_t *v136;
  __int128 v137;
  int v138;
  unint64_t *v139;
  unint64_t v140;
  int v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  __int128 v145;
  int v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  void *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  void *v177;
  unint64_t *v178;
  __int128 v179;
  int v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  __int128 v187;
  int v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  std::__shared_weak_count *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 v206;
  void *v207;
  char *v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  void *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  __int128 v235;
  int v236;
  unint64_t *v237;
  unint64_t v238;
  int v239;
  unint64_t *v240;
  unint64_t v241;
  char *v242;
  __int128 v243;
  int v244;
  _QWORD *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  std::__shared_weak_count *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  __int128 v261;
  void *v262;
  char *v263;
  unint64_t *v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  void *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  __int128 v291;
  int v292;
  unint64_t *v293;
  unint64_t v294;
  int v295;
  unint64_t *v296;
  unint64_t v297;
  char *v298;
  __int128 v299;
  int v300;
  _QWORD *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  std::__shared_weak_count *v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  __int128 v316;
  char *v317;
  void *v318;
  unint64_t *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  void *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  __int128 v347;
  int v348;
  unint64_t *v349;
  unint64_t v350;
  int v351;
  unint64_t *v352;
  unint64_t v353;
  char *v354;
  __int128 v355;
  int v356;
  _QWORD *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  std::__shared_weak_count *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  __int128 v373;
  void *v374;
  char *v375;
  unint64_t *v376;
  unint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  void *v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  __int128 v404;
  int v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  __int128 v411;
  int v412;
  _QWORD *v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  std::__shared_weak_count *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  __int128 v430;
  __int128 v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t *v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  uint64_t v453;
  void *v454;
  unint64_t *v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  std::__shared_weak_count *v459;
  void *v460;
  void *v461;
  int v462;
  unint64_t *v463;
  unint64_t v464;
  int v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t v468;
  __int128 v469;
  int v470;
  _QWORD *v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  std::__shared_weak_count *v474;
  unint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  uint64_t v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  uint64_t v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  uint64_t v541;
  __int128 v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v601;
  _BYTE v602[7];
  void *v603[2];
  uint64_t v604;
  void *v605[3];
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  uint64_t v612;
  __int128 v613;
  __int128 v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  uint64_t v617;
  std::__shared_weak_count *v618;
  _DWORD v619[2];
  __int128 v620;
  uint64_t v621;
  void *v622[3];
  void *v623;
  __int128 v624;
  uint64_t v625;
  __int128 v626;
  __int128 v627;
  uint64_t (**v628)();
  __int128 v629;
  uint64_t v630;
  uint64_t (**v631)();
  __int128 v632;
  uint64_t (**v633)();
  __int128 v634;
  uint64_t v635;
  std::__shared_weak_count *v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  _DWORD v639[2];
  __int128 v640;
  uint64_t v641;
  void *v642[3];
  void *v643;
  __int128 v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  uint64_t (**v648)();
  __int128 v649;
  uint64_t v650;
  uint64_t (**v651)();
  __int128 v652;
  uint64_t (**v653)();
  __int128 v654;
  uint64_t v655;
  std::__shared_weak_count *v656;
  uint64_t v657;
  std::__shared_weak_count *v658;
  _DWORD v659[2];
  __int128 v660;
  uint64_t v661;
  void *v662[3];
  void *v663;
  __int128 v664;
  uint64_t v665;
  __int128 v666;
  __int128 v667;
  uint64_t (**v668)();
  __int128 v669;
  uint64_t v670;
  uint64_t (**v671)();
  __int128 v672;
  uint64_t (**v673)();
  __int128 v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  uint64_t v677;
  std::__shared_weak_count *v678;
  _DWORD v679[2];
  __int128 v680;
  uint64_t v681;
  void *v682[3];
  void *v683;
  __int128 v684;
  uint64_t v685;
  __int128 v686;
  __int128 v687;
  uint64_t (**v688)();
  __int128 v689;
  uint64_t v690;
  uint64_t (**v691)();
  __int128 v692;
  uint64_t (**v693)();
  __int128 v694;
  void *v695;
  std::__shared_weak_count *v696;
  uint64_t v697;
  std::__shared_weak_count *v698;
  _DWORD v699[2];
  __int128 v700;
  uint64_t v701;
  _BYTE v702[24];
  void *v703;
  __int128 v704;
  uint64_t v705;
  __int128 v706;
  __int128 v707;
  uint64_t (**v708)();
  __int128 v709;
  uint64_t v710;
  uint64_t (**v711)();
  __int128 v712;
  uint64_t (**v713)();
  __int128 v714;
  void *v715;
  std::__shared_weak_count *v716;
  uint64_t v717;
  std::__shared_weak_count *v718;
  _DWORD v719[2];
  __int128 v720;
  uint64_t v721;
  _BYTE v722[24];
  uint64_t v723;
  __int128 v724;
  uint64_t v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  uint64_t v729;
  __int128 v730;
  __int128 v731;
  void *v732;
  std::__shared_weak_count *v733;
  uint64_t v734;
  std::__shared_weak_count *v735;
  _DWORD v736[2];
  __int128 v737;
  uint64_t v738;
  _BYTE __p[24];
  uint64_t v740;
  __int128 v741;
  uint64_t v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  uint64_t v746;
  __int128 v747;
  __int128 v748;
  void *v749;
  std::__shared_weak_count *v750;
  uint64_t v751;
  std::__shared_weak_count *v752;
  _DWORD v753[2];
  __int128 __src;
  uint64_t v755;
  _BYTE v756[24];
  uint64_t v757;
  __int128 v758;
  uint64_t v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  uint64_t v763;
  __int128 v764;
  __int128 v765;
  void *v766;
  std::__shared_weak_count *v767;
  uint64_t v768;
  std::__shared_weak_count *v769;
  __int128 __dst;
  uint64_t v771;
  char v772[8];
  __int128 v773;
  uint64_t v774;
  __int128 v775;
  uint64_t v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  uint64_t v780;
  __int128 v781;
  __int128 v782;
  uint64_t v783;
  std::__shared_weak_count *v784;
  __int128 v785;
  _DWORD v786[2];
  _DWORD v787[2];
  _DWORD v788[2];
  __int128 v789;
  _BYTE v790[7];
  char v791;
  __int128 v792;
  _BYTE v793[7];
  char v794;
  __int128 v795;
  _DWORD v796[2];
  __int128 v797;
  _DWORD v798[6];

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = *(void **)a3;
    v6 = *(unint64_t **)(a3 + 8);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    __dst = *a2;
    v771 = *((_QWORD *)a2 + 2);
    v7 = *(void **)a3;
    v6 = *(unint64_t **)(a3 + 8);
    if (!v6)
      goto LABEL_7;
  }
  v8 = v6 + 1;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_7:
  v10 = *(_QWORD **)a4;
  v12 = *(unint64_t **)(*(_QWORD *)a4 + 8);
  v766 = **(void ***)a4;
  v11 = v766;
  v767 = (std::__shared_weak_count *)v12;
  *v10 = 0;
  v10[1] = 0;
  v13 = __dst;
  LODWORD(v792) = v771;
  *(_DWORD *)((char *)&v792 + 3) = *(_DWORD *)((char *)&v771 + 3);
  v14 = SHIBYTE(v771);
  __dst = 0uLL;
  v771 = 0;
  v682[0] = v7;
  v682[1] = v6;
  v769 = 0;
  v768 = 0;
  v662[0] = v11;
  v662[1] = v12;
  if (v12)
  {
    v15 = v12 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v14 < 0)
  {
    sub_20E860C04(v756, (void *)v13, *((unint64_t *)&v13 + 1));
  }
  else
  {
    *(_OWORD *)v756 = v13;
    *(_DWORD *)&v756[16] = v792;
    *(_DWORD *)&v756[19] = *(_DWORD *)((char *)&v792 + 3);
    v756[23] = v14;
  }
  *(_QWORD *)__p = 0x7974706D45;
  *(_QWORD *)&__p[8] = 0;
  __p[23] = 5;
  *(_DWORD *)((char *)v605 + 3) = *(_DWORD *)((char *)&v792 + 3);
  v17 = v792;
  BYTE3(v605[0]) = BYTE3(v792);
  LODWORD(v792) = 0;
  *(_DWORD *)((char *)&v792 + 3) = 0;
  LODWORD(v622[0]) = v17;
  *(_DWORD *)((char *)v622 + 3) = *(_DWORD *)((char *)v605 + 3);
  *(_DWORD *)((char *)v605 + 3) = 0;
  LODWORD(v605[0]) = 0;
  *(_QWORD *)v702 = v7;
  *(_QWORD *)&v702[8] = v6;
  if (v6)
  {
    v18 = v6 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = operator new();
  LODWORD(v642[0]) = v622[0];
  *(_DWORD *)((char *)v642 + 3) = *(_DWORD *)((char *)v622 + 3);
  LODWORD(v622[0]) = 0;
  *(_DWORD *)((char *)v622 + 3) = 0;
  v21 = *(_OWORD *)v702;
  *(_QWORD *)v702 = 0;
  *(_QWORD *)&v702[8] = 0;
  *(_BYTE *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)v20 = &off_24C9B8A58;
  *(_QWORD *)(v20 + 16) = &unk_24C9B8AD0;
  *(_QWORD *)(v20 + 24) = &unk_24C9B8B10;
  *(_OWORD *)(v20 + 48) = v13;
  v22 = (int)v642[0];
  *(_DWORD *)(v20 + 67) = *(_DWORD *)((char *)v642 + 3);
  *(_DWORD *)(v20 + 64) = v22;
  *(_BYTE *)(v20 + 71) = v14;
  LODWORD(v642[0]) = 0;
  *(_DWORD *)((char *)v642 + 3) = 0;
  *(_OWORD *)(v20 + 72) = v21;
  *(_QWORD *)&v722[8] = 0;
  *(_QWORD *)v722 = 0;
  v23 = (_QWORD *)operator new();
  *v23 = &off_24C9BBCA0;
  v23[1] = v11;
  v23[2] = v12;
  v662[1] = 0;
  v662[0] = 0;
  *(_QWORD *)(v20 + 144) = 0;
  *(_QWORD *)(v20 + 88) = v23;
  *(_QWORD *)(v20 + 96) = v20 + 96;
  *(_QWORD *)(v20 + 104) = v20 + 96;
  *(_QWORD *)(v20 + 112) = 0;
  *(_QWORD *)(v20 + 120) = v20 + 120;
  *(_QWORD *)(v20 + 128) = v20 + 120;
  *(_QWORD *)(v20 + 136) = 0;
  if (!*(_QWORD *)(v20 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v24 = (std::__shared_weak_count *)operator new();
  v24->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9098;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  v26 = *(std::__shared_weak_count **)(v20 + 40);
  if (v26)
  {
    if (v26->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    *(_QWORD *)(v20 + 32) = v20;
    *(_QWORD *)(v20 + 40) = v24;
    std::__shared_weak_count::__release_weak(v26);
  }
  else
  {
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v31 = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    *(_QWORD *)(v20 + 32) = v20;
    *(_QWORD *)(v20 + 40) = v24;
  }
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_31:
  if (*(_QWORD *)&v722[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&v722[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v722[8] + 16))(*(_QWORD *)&v722[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v722[8]);
    }
  }
  *(_QWORD *)v722 = v20;
  *(_QWORD *)&v722[8] = v24;
  if (*(_QWORD *)&v702[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&v702[8] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v702[8] + 16))(*(_QWORD *)&v702[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v702[8]);
    }
  }
  *(_OWORD *)v702 = *(_OWORD *)v682;
  v682[0] = 0;
  v682[1] = 0;
  sub_20EA119FC((uint64_t)v772, (__int128 *)v756, (__int128 *)__p, (uint64_t)v722, (uint64_t)v702);
  v38 = *(std::__shared_weak_count **)&v702[8];
  if (*(_QWORD *)&v702[8])
  {
    v39 = (unint64_t *)(*(_QWORD *)&v702[8] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(std::__shared_weak_count **)&v722[8];
  if (!*(_QWORD *)&v722[8])
    goto LABEL_50;
  v42 = (unint64_t *)(*(_QWORD *)&v722[8] + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_51:
      if ((v756[23] & 0x80000000) == 0)
        goto LABEL_52;
LABEL_56:
      operator delete(*(void **)v756);
      v44 = (std::__shared_weak_count *)v662[1];
      if (!v662[1])
        goto LABEL_61;
      goto LABEL_57;
    }
  }
  else
  {
LABEL_50:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_51;
  }
  operator delete(*(void **)__p);
  if ((v756[23] & 0x80000000) != 0)
    goto LABEL_56;
LABEL_52:
  v44 = (std::__shared_weak_count *)v662[1];
  if (!v662[1])
    goto LABEL_61;
LABEL_57:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_61:
  if (!v766
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__src, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __src = *a2;
    v755 = *((_QWORD *)a2 + 2);
  }
  v48 = *(void **)a3;
  v47 = *(unint64_t **)(a3 + 8);
  if (v47)
  {
    v49 = v47 + 1;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = *(void ***)(a4 + 8);
  v53 = (unint64_t *)v51[1];
  v749 = *v51;
  v52 = v749;
  v750 = (std::__shared_weak_count *)v53;
  *v51 = 0;
  v51[1] = 0;
  v54 = __src;
  LODWORD(v789) = v755;
  *(_DWORD *)((char *)&v789 + 3) = *(_DWORD *)((char *)&v755 + 3);
  v55 = SHIBYTE(v755);
  __src = 0uLL;
  v755 = 0;
  LODWORD(v797) = v753[0];
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)v753 + 3);
  v753[0] = 0;
  *(_DWORD *)((char *)v753 + 3) = 0;
  v662[0] = v48;
  v662[1] = v47;
  v752 = 0;
  v751 = 0;
  v642[0] = v52;
  v642[1] = v53;
  if (v53)
  {
    v56 = v53 + 1;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  if (v55 < 0)
  {
    sub_20E860C04(__p, (void *)v54, *((unint64_t *)&v54 + 1));
  }
  else
  {
    *(_OWORD *)__p = v54;
    *(_DWORD *)&__p[16] = v789;
    *(_DWORD *)&__p[19] = *(_DWORD *)((char *)&v789 + 3);
    __p[23] = v55;
  }
  *(_QWORD *)v722 = 0x7974706D45;
  *(_QWORD *)&v722[8] = 0;
  *(_DWORD *)&v722[16] = v797;
  *(_DWORD *)&v722[19] = *(_DWORD *)((char *)&v797 + 3);
  v722[23] = 5;
  *(_DWORD *)((char *)&v792 + 3) = *(_DWORD *)((char *)&v789 + 3);
  LODWORD(v792) = v789;
  LODWORD(v789) = 0;
  *(_DWORD *)((char *)&v789 + 3) = 0;
  LODWORD(v605[0]) = v792;
  *(_DWORD *)((char *)v605 + 3) = *(_DWORD *)((char *)&v792 + 3);
  *(_DWORD *)((char *)&v792 + 3) = 0;
  LODWORD(v792) = 0;
  v682[0] = v48;
  v682[1] = v47;
  if (v47)
  {
    v58 = v47 + 1;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = operator new();
  LODWORD(v622[0]) = v605[0];
  *(_DWORD *)((char *)v622 + 3) = *(_DWORD *)((char *)v605 + 3);
  LODWORD(v605[0]) = 0;
  *(_DWORD *)((char *)v605 + 3) = 0;
  v61 = *(_OWORD *)v682;
  v682[0] = 0;
  v682[1] = 0;
  *(_BYTE *)(v60 + 8) = 1;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_QWORD *)v60 = &off_24C9B9160;
  *(_QWORD *)(v60 + 16) = &unk_24C9B91D8;
  *(_QWORD *)(v60 + 24) = &unk_24C9B9218;
  *(_OWORD *)(v60 + 48) = v54;
  v62 = (int)v622[0];
  *(_DWORD *)(v60 + 67) = *(_DWORD *)((char *)v622 + 3);
  *(_DWORD *)(v60 + 64) = v62;
  *(_BYTE *)(v60 + 71) = v55;
  LODWORD(v622[0]) = 0;
  *(_DWORD *)((char *)v622 + 3) = 0;
  *(_OWORD *)(v60 + 72) = v61;
  *(_QWORD *)&v702[8] = 0;
  *(_QWORD *)v702 = 0;
  v63 = (_QWORD *)operator new();
  *v63 = &off_24C9BBCE0;
  v63[1] = v52;
  v63[2] = v53;
  v642[1] = 0;
  v642[0] = 0;
  *(_QWORD *)(v60 + 144) = 0;
  *(_QWORD *)(v60 + 88) = v63;
  *(_QWORD *)(v60 + 96) = v60 + 96;
  *(_QWORD *)(v60 + 104) = v60 + 96;
  *(_QWORD *)(v60 + 112) = 0;
  *(_QWORD *)(v60 + 120) = v60 + 120;
  *(_QWORD *)(v60 + 128) = v60 + 120;
  *(_QWORD *)(v60 + 136) = 0;
  if (!*(_QWORD *)(v60 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v64 = (std::__shared_weak_count *)operator new();
  v64->__shared_owners_ = 0;
  v65 = (unint64_t *)&v64->__shared_owners_;
  v64->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B97A0;
  v64->__shared_weak_owners_ = 0;
  v64[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
  v66 = *(std::__shared_weak_count **)(v60 + 40);
  if (v66)
  {
    if (v66->__shared_owners_ != -1)
      goto LABEL_94;
    do
      v67 = __ldxr(v65);
    while (__stxr(v67 + 1, v65));
    v68 = (unint64_t *)&v64->__shared_weak_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    *(_QWORD *)(v60 + 32) = v60;
    *(_QWORD *)(v60 + 40) = v64;
    std::__shared_weak_count::__release_weak(v66);
  }
  else
  {
    do
      v70 = __ldxr(v65);
    while (__stxr(v70 + 1, v65));
    v71 = (unint64_t *)&v64->__shared_weak_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    *(_QWORD *)(v60 + 32) = v60;
    *(_QWORD *)(v60 + 40) = v64;
  }
  do
    v73 = __ldaxr(v65);
  while (__stlxr(v73 - 1, v65));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
LABEL_94:
  v74 = *(std::__shared_weak_count **)&v702[8];
  if (*(_QWORD *)&v702[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&v702[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  *(_QWORD *)v702 = v60;
  *(_QWORD *)&v702[8] = v64;
  if (v682[1])
  {
    v77 = (unint64_t *)((char *)v682[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(void *))(*(_QWORD *)v682[1] + 16))(v682[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v682[1]);
    }
  }
  *(_OWORD *)v682 = *(_OWORD *)v662;
  v662[0] = 0;
  v662[1] = 0;
  sub_20EA15DA4((uint64_t)v756, (__int128 *)__p, (__int128 *)v722, (uint64_t)v702, (uint64_t)v682);
  v79 = (std::__shared_weak_count *)v682[1];
  if (v682[1])
  {
    v80 = (unint64_t *)((char *)v682[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v702[8];
  if (!*(_QWORD *)&v702[8])
    goto LABEL_113;
  v83 = (unint64_t *)(*(_QWORD *)&v702[8] + 8);
  do
    v84 = __ldaxr(v83);
  while (__stlxr(v84 - 1, v83));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if ((v722[23] & 0x80000000) == 0)
    {
LABEL_114:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_115;
LABEL_119:
      operator delete(*(void **)__p);
      v85 = (std::__shared_weak_count *)v642[1];
      if (!v642[1])
        goto LABEL_124;
      goto LABEL_120;
    }
  }
  else
  {
LABEL_113:
    if ((v722[23] & 0x80000000) == 0)
      goto LABEL_114;
  }
  operator delete(*(void **)v722);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_119;
LABEL_115:
  v85 = (std::__shared_weak_count *)v642[1];
  if (!v642[1])
    goto LABEL_124;
LABEL_120:
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
LABEL_124:
  if (!v749
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v737, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v737 = *a2;
    v738 = *((_QWORD *)a2 + 2);
  }
  v89 = *(void **)a3;
  v88 = *(unint64_t **)(a3 + 8);
  if (v88)
  {
    v90 = v88 + 1;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = *(void ***)(a4 + 16);
  v94 = (unint64_t *)v92[1];
  v732 = *v92;
  v93 = v732;
  v733 = (std::__shared_weak_count *)v94;
  *v92 = 0;
  v92[1] = 0;
  v95 = v737;
  LODWORD(v797) = v738;
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)&v738 + 3);
  v96 = SHIBYTE(v738);
  v737 = 0uLL;
  v738 = 0;
  LODWORD(v795) = v736[0];
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)v736 + 3);
  v736[0] = 0;
  *(_DWORD *)((char *)v736 + 3) = 0;
  v642[0] = v89;
  v642[1] = v88;
  v735 = 0;
  v734 = 0;
  v622[0] = v93;
  v622[1] = v94;
  if (v94)
  {
    v97 = v94 + 1;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  if (v96 < 0)
  {
    sub_20E860C04(v722, (void *)v95, *((unint64_t *)&v95 + 1));
  }
  else
  {
    *(_OWORD *)v722 = v95;
    *(_DWORD *)&v722[16] = v797;
    *(_DWORD *)&v722[19] = *(_DWORD *)((char *)&v797 + 3);
    v722[23] = v96;
  }
  *(_QWORD *)v702 = 0x7974706D45;
  *(_QWORD *)&v702[8] = 0;
  *(_DWORD *)&v702[16] = v795;
  *(_DWORD *)&v702[19] = *(_DWORD *)((char *)&v795 + 3);
  v702[23] = 5;
  *(_DWORD *)((char *)&v789 + 3) = *(_DWORD *)((char *)&v797 + 3);
  v99 = v797;
  BYTE3(v789) = BYTE3(v797);
  LODWORD(v797) = 0;
  *(_DWORD *)((char *)&v797 + 3) = 0;
  LODWORD(v792) = v99;
  *(_DWORD *)((char *)&v792 + 3) = *(_DWORD *)((char *)&v789 + 3);
  *(_DWORD *)((char *)&v789 + 3) = 0;
  LODWORD(v789) = 0;
  v662[0] = v89;
  v662[1] = v88;
  if (v88)
  {
    v100 = v88 + 1;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = (char *)operator new();
  LODWORD(v605[0]) = v792;
  *(_DWORD *)((char *)v605 + 3) = *(_DWORD *)((char *)&v792 + 3);
  LODWORD(v792) = 0;
  *(_DWORD *)((char *)&v792 + 3) = 0;
  v103 = *(_OWORD *)v662;
  v662[0] = 0;
  v662[1] = 0;
  v102[8] = 1;
  *((_QWORD *)v102 + 4) = 0;
  *((_QWORD *)v102 + 5) = 0;
  *(_QWORD *)v102 = &off_24C9B9868;
  *((_QWORD *)v102 + 2) = &unk_24C9B98E0;
  *((_QWORD *)v102 + 3) = &unk_24C9B9920;
  *((_OWORD *)v102 + 3) = v95;
  v104 = (int)v605[0];
  *(_DWORD *)(v102 + 67) = *(_DWORD *)((char *)v605 + 3);
  *((_DWORD *)v102 + 16) = v104;
  v102[71] = v96;
  LODWORD(v605[0]) = 0;
  *(_DWORD *)((char *)v605 + 3) = 0;
  *(_OWORD *)(v102 + 72) = v103;
  v682[1] = 0;
  v682[0] = 0;
  v105 = (_QWORD *)operator new();
  *v105 = &off_24C9BBD20;
  v105[1] = v93;
  v105[2] = v94;
  v622[0] = 0;
  v622[1] = 0;
  *((_QWORD *)v102 + 18) = 0;
  *((_QWORD *)v102 + 11) = v105;
  *((_QWORD *)v102 + 12) = v102 + 96;
  *((_QWORD *)v102 + 13) = v102 + 96;
  *((_QWORD *)v102 + 14) = 0;
  *((_QWORD *)v102 + 15) = v102 + 120;
  *((_QWORD *)v102 + 16) = v102 + 120;
  *((_QWORD *)v102 + 17) = 0;
  if (!*((_QWORD *)v102 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v106 = (std::__shared_weak_count *)operator new();
  v106->__shared_owners_ = 0;
  v107 = (unint64_t *)&v106->__shared_owners_;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9EA8;
  v106->__shared_weak_owners_ = 0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  v108 = (std::__shared_weak_count *)*((_QWORD *)v102 + 5);
  if (v108)
  {
    if (v108->__shared_owners_ != -1)
      goto LABEL_157;
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
    v110 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    *((_QWORD *)v102 + 4) = v102;
    *((_QWORD *)v102 + 5) = v106;
    std::__shared_weak_count::__release_weak(v108);
  }
  else
  {
    do
      v112 = __ldxr(v107);
    while (__stxr(v112 + 1, v107));
    v113 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    *((_QWORD *)v102 + 4) = v102;
    *((_QWORD *)v102 + 5) = v106;
  }
  do
    v115 = __ldaxr(v107);
  while (__stlxr(v115 - 1, v107));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
LABEL_157:
  v116 = (std::__shared_weak_count *)v682[1];
  if (v682[1])
  {
    v117 = (unint64_t *)((char *)v682[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v682[0] = v102;
  v682[1] = v106;
  if (v662[1])
  {
    v119 = (unint64_t *)((char *)v662[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      (*(void (**)(void *))(*(_QWORD *)v662[1] + 16))(v662[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v662[1]);
    }
  }
  *(_OWORD *)v662 = *(_OWORD *)v642;
  v642[0] = 0;
  v642[1] = 0;
  sub_20EA1A1D8((uint64_t)__p, (__int128 *)v722, (__int128 *)v702, (uint64_t)v682, (uint64_t)v662);
  v121 = (std::__shared_weak_count *)v662[1];
  if (v662[1])
  {
    v122 = (unint64_t *)((char *)v662[1] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)v682[1];
  if (!v682[1])
    goto LABEL_176;
  v125 = (unint64_t *)((char *)v682[1] + 8);
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
    if ((v702[23] & 0x80000000) == 0)
    {
LABEL_177:
      if ((v722[23] & 0x80000000) == 0)
        goto LABEL_178;
LABEL_182:
      operator delete(*(void **)v722);
      v127 = (std::__shared_weak_count *)v622[1];
      if (!v622[1])
        goto LABEL_187;
      goto LABEL_183;
    }
  }
  else
  {
LABEL_176:
    if ((v702[23] & 0x80000000) == 0)
      goto LABEL_177;
  }
  operator delete(*(void **)v702);
  if ((v722[23] & 0x80000000) != 0)
    goto LABEL_182;
LABEL_178:
  v127 = (std::__shared_weak_count *)v622[1];
  if (!v622[1])
    goto LABEL_187;
LABEL_183:
  v128 = (unint64_t *)&v127->__shared_owners_;
  do
    v129 = __ldaxr(v128);
  while (__stlxr(v129 - 1, v128));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
LABEL_187:
  if (!v732
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v720, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v720 = *a2;
    v721 = *((_QWORD *)a2 + 2);
  }
  v131 = *(void **)a3;
  v130 = *(unint64_t **)(a3 + 8);
  if (v130)
  {
    v132 = v130 + 1;
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v134 = *(void ***)(a4 + 24);
  v136 = (unint64_t *)v134[1];
  v715 = *v134;
  v135 = v715;
  v716 = (std::__shared_weak_count *)v136;
  *v134 = 0;
  v134[1] = 0;
  v137 = v720;
  LODWORD(v795) = v721;
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)&v721 + 3);
  v138 = SHIBYTE(v721);
  v720 = 0uLL;
  v721 = 0;
  LODWORD(v785) = v719[0];
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)v719 + 3);
  v719[0] = 0;
  *(_DWORD *)((char *)v719 + 3) = 0;
  v622[0] = v131;
  v622[1] = v130;
  v718 = 0;
  v717 = 0;
  v605[0] = v135;
  v605[1] = v136;
  if (v136)
  {
    v139 = v136 + 1;
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
  }
  if (v138 < 0)
  {
    sub_20E860C04(v702, (void *)v137, *((unint64_t *)&v137 + 1));
  }
  else
  {
    *(_OWORD *)v702 = v137;
    *(_DWORD *)&v702[16] = v795;
    *(_DWORD *)&v702[19] = *(_DWORD *)((char *)&v795 + 3);
    v702[23] = v138;
  }
  v682[0] = (void *)0x7974706D45;
  v682[1] = 0;
  LODWORD(v682[2]) = v785;
  *(_DWORD *)((char *)&v682[2] + 3) = *(_DWORD *)((char *)&v785 + 3);
  HIBYTE(v682[2]) = 5;
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)&v795 + 3);
  v141 = v795;
  BYTE3(v797) = BYTE3(v795);
  LODWORD(v795) = 0;
  *(_DWORD *)((char *)&v795 + 3) = 0;
  LODWORD(v789) = v141;
  *(_DWORD *)((char *)&v789 + 3) = *(_DWORD *)((char *)&v797 + 3);
  *(_DWORD *)((char *)&v797 + 3) = 0;
  LODWORD(v797) = 0;
  v642[0] = v131;
  v642[1] = v130;
  if (v130)
  {
    v142 = v130 + 1;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  v144 = (char *)operator new();
  LODWORD(v792) = v789;
  *(_DWORD *)((char *)&v792 + 3) = *(_DWORD *)((char *)&v789 + 3);
  LODWORD(v789) = 0;
  *(_DWORD *)((char *)&v789 + 3) = 0;
  v145 = *(_OWORD *)v642;
  v642[0] = 0;
  v642[1] = 0;
  v144[8] = 1;
  *((_QWORD *)v144 + 4) = 0;
  *((_QWORD *)v144 + 5) = 0;
  *(_QWORD *)v144 = &off_24C9B9F70;
  *((_QWORD *)v144 + 2) = &unk_24C9B9FE8;
  *((_QWORD *)v144 + 3) = &unk_24C9BA028;
  *((_OWORD *)v144 + 3) = v137;
  v146 = v792;
  *(_DWORD *)(v144 + 67) = *(_DWORD *)((char *)&v792 + 3);
  *((_DWORD *)v144 + 16) = v146;
  v144[71] = v138;
  LODWORD(v792) = 0;
  *(_DWORD *)((char *)&v792 + 3) = 0;
  *(_OWORD *)(v144 + 72) = v145;
  v662[1] = 0;
  v662[0] = 0;
  v147 = (_QWORD *)operator new();
  *v147 = &off_24C9BBD60;
  v147[1] = v135;
  v147[2] = v136;
  v605[0] = 0;
  v605[1] = 0;
  *((_QWORD *)v144 + 18) = 0;
  *((_QWORD *)v144 + 11) = v147;
  *((_QWORD *)v144 + 12) = v144 + 96;
  *((_QWORD *)v144 + 13) = v144 + 96;
  *((_QWORD *)v144 + 14) = 0;
  *((_QWORD *)v144 + 15) = v144 + 120;
  *((_QWORD *)v144 + 16) = v144 + 120;
  *((_QWORD *)v144 + 17) = 0;
  if (!*((_QWORD *)v144 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v148 = (std::__shared_weak_count *)operator new();
  v148->__shared_owners_ = 0;
  v149 = (unint64_t *)&v148->__shared_owners_;
  v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA5B0;
  v148->__shared_weak_owners_ = 0;
  v148[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  v150 = (std::__shared_weak_count *)*((_QWORD *)v144 + 5);
  if (v150)
  {
    if (v150->__shared_owners_ != -1)
      goto LABEL_220;
    do
      v151 = __ldxr(v149);
    while (__stxr(v151 + 1, v149));
    v152 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
    std::__shared_weak_count::__release_weak(v150);
  }
  else
  {
    do
      v154 = __ldxr(v149);
    while (__stxr(v154 + 1, v149));
    v155 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
  }
  do
    v157 = __ldaxr(v149);
  while (__stlxr(v157 - 1, v149));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
LABEL_220:
  v158 = (std::__shared_weak_count *)v662[1];
  if (v662[1])
  {
    v159 = (unint64_t *)((char *)v662[1] + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v662[0] = v144;
  v662[1] = v148;
  if (v642[1])
  {
    v161 = (unint64_t *)((char *)v642[1] + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      (*(void (**)(void *))(*(_QWORD *)v642[1] + 16))(v642[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v642[1]);
    }
  }
  *(_OWORD *)v642 = *(_OWORD *)v622;
  v622[0] = 0;
  v622[1] = 0;
  sub_20EA1E60C((uint64_t)v722, (__int128 *)v702, (__int128 *)v682, (uint64_t)v662, (uint64_t)v642);
  v163 = (std::__shared_weak_count *)v642[1];
  if (v642[1])
  {
    v164 = (unint64_t *)((char *)v642[1] + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = (std::__shared_weak_count *)v662[1];
  if (!v662[1])
    goto LABEL_239;
  v167 = (unint64_t *)((char *)v662[1] + 8);
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 - 1, v167));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    if ((SHIBYTE(v682[2]) & 0x80000000) == 0)
    {
LABEL_240:
      if ((v702[23] & 0x80000000) == 0)
        goto LABEL_241;
LABEL_245:
      operator delete(*(void **)v702);
      v169 = (std::__shared_weak_count *)v605[1];
      if (!v605[1])
        goto LABEL_250;
      goto LABEL_246;
    }
  }
  else
  {
LABEL_239:
    if ((SHIBYTE(v682[2]) & 0x80000000) == 0)
      goto LABEL_240;
  }
  operator delete(v682[0]);
  if ((v702[23] & 0x80000000) != 0)
    goto LABEL_245;
LABEL_241:
  v169 = (std::__shared_weak_count *)v605[1];
  if (!v605[1])
    goto LABEL_250;
LABEL_246:
  v170 = (unint64_t *)&v169->__shared_owners_;
  do
    v171 = __ldaxr(v170);
  while (__stlxr(v171 - 1, v170));
  if (!v171)
  {
    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
    std::__shared_weak_count::__release_weak(v169);
  }
LABEL_250:
  if (!v715
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v700, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v700 = *a2;
    v701 = *((_QWORD *)a2 + 2);
  }
  v173 = *(void **)a3;
  v172 = *(unint64_t **)(a3 + 8);
  if (v172)
  {
    v174 = v172 + 1;
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 1, v174));
  }
  v176 = *(void ***)(a4 + 32);
  v178 = (unint64_t *)v176[1];
  v695 = *v176;
  v177 = v695;
  v696 = (std::__shared_weak_count *)v178;
  *v176 = 0;
  v176[1] = 0;
  v179 = v700;
  LODWORD(v785) = v701;
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)&v701 + 3);
  v180 = SHIBYTE(v701);
  v700 = 0uLL;
  v701 = 0;
  LODWORD(v783) = v699[0];
  *(_DWORD *)((char *)&v783 + 3) = *(_DWORD *)((char *)v699 + 3);
  v699[0] = 0;
  *(_DWORD *)((char *)v699 + 3) = 0;
  v622[0] = v173;
  v622[1] = v172;
  v698 = 0;
  v697 = 0;
  v605[0] = v177;
  v605[1] = v178;
  if (v178)
  {
    v181 = v178 + 1;
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  if (v180 < 0)
  {
    sub_20E860C04(v682, (void *)v179, *((unint64_t *)&v179 + 1));
  }
  else
  {
    *(_OWORD *)v682 = v179;
    LODWORD(v682[2]) = v785;
    *(_DWORD *)((char *)&v682[2] + 3) = *(_DWORD *)((char *)&v785 + 3);
    HIBYTE(v682[2]) = v180;
  }
  LODWORD(v797) = v783;
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)&v783 + 3);
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)&v785 + 3);
  v183 = v785;
  BYTE3(v795) = BYTE3(v785);
  LODWORD(v785) = 0;
  *(_DWORD *)((char *)&v785 + 3) = 0;
  LODWORD(v789) = v183;
  *(_DWORD *)((char *)&v789 + 3) = *(_DWORD *)((char *)&v795 + 3);
  *(_DWORD *)((char *)&v795 + 3) = 0;
  LODWORD(v795) = 0;
  v642[0] = v173;
  v642[1] = v172;
  if (v172)
  {
    v184 = v172 + 1;
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  v186 = (char *)operator new();
  LODWORD(v792) = v789;
  *(_DWORD *)((char *)&v792 + 3) = *(_DWORD *)((char *)&v789 + 3);
  LODWORD(v789) = 0;
  *(_DWORD *)((char *)&v789 + 3) = 0;
  v187 = *(_OWORD *)v642;
  v642[0] = 0;
  v642[1] = 0;
  v186[8] = 1;
  *((_QWORD *)v186 + 4) = 0;
  *((_QWORD *)v186 + 5) = 0;
  *(_QWORD *)v186 = &off_24C9BBDA0;
  *((_QWORD *)v186 + 2) = &unk_24C9BBE18;
  *((_QWORD *)v186 + 3) = &unk_24C9BBE58;
  *((_OWORD *)v186 + 3) = v179;
  v188 = v792;
  *(_DWORD *)(v186 + 67) = *(_DWORD *)((char *)&v792 + 3);
  *((_DWORD *)v186 + 16) = v188;
  v186[71] = v180;
  LODWORD(v792) = 0;
  *(_DWORD *)((char *)&v792 + 3) = 0;
  *(_OWORD *)(v186 + 72) = v187;
  v662[1] = 0;
  v662[0] = 0;
  v189 = (_QWORD *)operator new();
  *v189 = &off_24C9BBF40;
  v189[1] = v177;
  v189[2] = v178;
  v605[0] = 0;
  v605[1] = 0;
  *((_QWORD *)v186 + 18) = 0;
  *((_QWORD *)v186 + 11) = v189;
  *((_QWORD *)v186 + 12) = v186 + 96;
  *((_QWORD *)v186 + 13) = v186 + 96;
  *((_QWORD *)v186 + 14) = 0;
  *((_QWORD *)v186 + 15) = v186 + 120;
  *((_QWORD *)v186 + 16) = v186 + 120;
  *((_QWORD *)v186 + 17) = 0;
  if (!*((_QWORD *)v186 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v190 = (std::__shared_weak_count *)operator new();
  v190->__shared_owners_ = 0;
  v191 = (unint64_t *)&v190->__shared_owners_;
  v190->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BC3E0;
  v190->__shared_weak_owners_ = 0;
  v190[1].__vftable = (std::__shared_weak_count_vtbl *)v186;
  v192 = (std::__shared_weak_count *)*((_QWORD *)v186 + 5);
  if (v192)
  {
    if (v192->__shared_owners_ != -1)
      goto LABEL_283;
    do
      v193 = __ldxr(v191);
    while (__stxr(v193 + 1, v191));
    v194 = (unint64_t *)&v190->__shared_weak_owners_;
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
    *((_QWORD *)v186 + 4) = v186;
    *((_QWORD *)v186 + 5) = v190;
    std::__shared_weak_count::__release_weak(v192);
  }
  else
  {
    do
      v196 = __ldxr(v191);
    while (__stxr(v196 + 1, v191));
    v197 = (unint64_t *)&v190->__shared_weak_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
    *((_QWORD *)v186 + 4) = v186;
    *((_QWORD *)v186 + 5) = v190;
  }
  do
    v199 = __ldaxr(v191);
  while (__stlxr(v199 - 1, v191));
  if (!v199)
  {
    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
    std::__shared_weak_count::__release_weak(v190);
  }
LABEL_283:
  v200 = (std::__shared_weak_count *)v662[1];
  if (v662[1])
  {
    v201 = (unint64_t *)((char *)v662[1] + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v662[0] = v186;
  v662[1] = v190;
  v203 = (std::__shared_weak_count *)v642[1];
  if (v642[1])
  {
    v204 = (unint64_t *)((char *)v642[1] + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = *(_OWORD *)v622;
  v622[0] = 0;
  v622[1] = 0;
  *(_OWORD *)&v702[8] = *(_OWORD *)v682;
  *(_QWORD *)v702 = &off_24C9B2768;
  v703 = v682[2];
  memset(v682, 0, sizeof(v682));
  v704 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v705 + 3) = *(_DWORD *)((char *)&v797 + 3);
  LODWORD(v705) = v797;
  HIBYTE(v705) = 5;
  LODWORD(v797) = 0;
  *(_DWORD *)((char *)&v797 + 3) = 0;
  v706 = v206;
  v642[1] = 0;
  v642[0] = 0;
  v207 = v662[0];
  v208 = (char *)v662[1];
  v707 = *(_OWORD *)v662;
  v662[0] = 0;
  v662[1] = 0;
  if (*((_QWORD *)&v707 + 1))
  {
    v209 = (unint64_t *)(v208 + 16);
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 1, v209));
  }
  v708 = &off_24C9B2798;
  v211 = (_QWORD *)operator new();
  *v211 = &off_24C9BC430;
  v211[1] = v207;
  v211[2] = v208;
  *(_QWORD *)&v709 = v211;
  v213 = *((_QWORD *)&v707 + 1);
  v212 = v707;
  if (!*((_QWORD *)&v707 + 1))
  {
    *((_QWORD *)&v709 + 1) = v707;
    v710 = 0;
    if ((_QWORD)v707)
      v217 = v707 + 16;
    else
      v217 = 0;
    goto LABEL_313;
  }
  v214 = (unint64_t *)(*((_QWORD *)&v707 + 1) + 16);
  do
    v215 = __ldxr(v214);
  while (__stxr(v215 + 1, v214));
  v216 = *((_QWORD *)&v707 + 1);
  *((_QWORD *)&v709 + 1) = v212;
  v710 = v213;
  if ((_QWORD)v707)
    v217 = v707 + 16;
  else
    v217 = 0;
  if (!*((_QWORD *)&v707 + 1))
  {
    v212 = v707;
LABEL_313:
    v220 = 0;
    v711 = &off_24C9B2520;
    v712 = v217;
    goto LABEL_314;
  }
  v218 = (unint64_t *)(*((_QWORD *)&v707 + 1) + 16);
  do
    v219 = __ldxr(v218);
  while (__stxr(v219 + 1, v218));
  v220 = *((_QWORD *)&v707 + 1);
  v212 = v707;
  v711 = &off_24C9B2520;
  *(_QWORD *)&v712 = v217;
  *((_QWORD *)&v712 + 1) = v216;
  if (*((_QWORD *)&v707 + 1))
  {
    v221 = (unint64_t *)(*((_QWORD *)&v707 + 1) + 16);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
LABEL_314:
  if (v212)
    v223 = v212 + 24;
  else
    v223 = 0;
  v713 = &off_24C9B2310;
  *(_QWORD *)&v714 = v223;
  *((_QWORD *)&v714 + 1) = v220;
  if (SHIBYTE(v682[2]) < 0)
    operator delete(v682[0]);
  if (v605[1])
  {
    v224 = (unint64_t *)((char *)v605[1] + 8);
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      (*(void (**)(void *))(*(_QWORD *)v605[1] + 16))(v605[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v605[1]);
    }
  }
  if (!v622[1])
    goto LABEL_328;
  v226 = (unint64_t *)((char *)v622[1] + 8);
  do
    v227 = __ldaxr(v226);
  while (__stlxr(v227 - 1, v226));
  if (!v227)
  {
    (*(void (**)(void *))(*(_QWORD *)v622[1] + 16))(v622[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v622[1]);
    if (v695)
      goto LABEL_332;
  }
  else
  {
LABEL_328:
    if (v695)
      goto LABEL_332;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_332:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v680, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v680 = *a2;
    v681 = *((_QWORD *)a2 + 2);
  }
  v229 = *(void **)a3;
  v228 = *(unint64_t **)(a3 + 8);
  if (v228)
  {
    v230 = v228 + 1;
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
  v232 = *(uint64_t **)(a4 + 40);
  v234 = (std::__shared_weak_count *)v232[1];
  v675 = *v232;
  v233 = v675;
  v676 = v234;
  *v232 = 0;
  v232[1] = 0;
  v235 = v680;
  LODWORD(v783) = v681;
  *(_DWORD *)((char *)&v783 + 3) = *(_DWORD *)((char *)&v681 + 3);
  v236 = SHIBYTE(v681);
  v680 = 0uLL;
  v681 = 0;
  v798[0] = v679[0];
  *(_DWORD *)((char *)v798 + 3) = *(_DWORD *)((char *)v679 + 3);
  v679[0] = 0;
  *(_DWORD *)((char *)v679 + 3) = 0;
  v605[0] = v229;
  v605[1] = v228;
  v678 = 0;
  v677 = 0;
  *(_QWORD *)&v792 = v233;
  *((_QWORD *)&v792 + 1) = v234;
  if (v234)
  {
    v237 = (unint64_t *)&v234->__shared_owners_;
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  if (v236 < 0)
  {
    sub_20E860C04(v662, (void *)v235, *((unint64_t *)&v235 + 1));
  }
  else
  {
    *(_OWORD *)v662 = v235;
    LODWORD(v662[2]) = v783;
    *(_DWORD *)((char *)&v662[2] + 3) = *(_DWORD *)((char *)&v783 + 3);
    HIBYTE(v662[2]) = v236;
  }
  LODWORD(v795) = v798[0];
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)v798 + 3);
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)&v783 + 3);
  v239 = v783;
  BYTE3(v785) = BYTE3(v783);
  LODWORD(v783) = 0;
  *(_DWORD *)((char *)&v783 + 3) = 0;
  LODWORD(v797) = v239;
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)&v785 + 3);
  *(_DWORD *)((char *)&v785 + 3) = 0;
  LODWORD(v785) = 0;
  v622[0] = v229;
  v622[1] = v228;
  if (v228)
  {
    v240 = v228 + 1;
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
  }
  v242 = (char *)operator new();
  LODWORD(v789) = v797;
  *(_DWORD *)((char *)&v789 + 3) = *(_DWORD *)((char *)&v797 + 3);
  LODWORD(v797) = 0;
  *(_DWORD *)((char *)&v797 + 3) = 0;
  v243 = *(_OWORD *)v622;
  v622[0] = 0;
  v622[1] = 0;
  v242[8] = 1;
  *((_QWORD *)v242 + 4) = 0;
  *((_QWORD *)v242 + 5) = 0;
  *(_QWORD *)v242 = &off_24C9BC4A8;
  *((_QWORD *)v242 + 2) = &unk_24C9BC520;
  *((_QWORD *)v242 + 3) = &unk_24C9BC560;
  *((_OWORD *)v242 + 3) = v235;
  v244 = v789;
  *(_DWORD *)(v242 + 67) = *(_DWORD *)((char *)&v789 + 3);
  *((_DWORD *)v242 + 16) = v244;
  v242[71] = v236;
  LODWORD(v789) = 0;
  *(_DWORD *)((char *)&v789 + 3) = 0;
  *(_OWORD *)(v242 + 72) = v243;
  v642[1] = 0;
  v642[0] = 0;
  v245 = (_QWORD *)operator new();
  *v245 = &off_24C9BC648;
  v245[1] = v233;
  v245[2] = v234;
  v792 = 0uLL;
  *((_QWORD *)v242 + 18) = 0;
  *((_QWORD *)v242 + 11) = v245;
  *((_QWORD *)v242 + 12) = v242 + 96;
  *((_QWORD *)v242 + 13) = v242 + 96;
  *((_QWORD *)v242 + 14) = 0;
  *((_QWORD *)v242 + 15) = v242 + 120;
  *((_QWORD *)v242 + 16) = v242 + 120;
  *((_QWORD *)v242 + 17) = 0;
  if (!*((_QWORD *)v242 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v246 = (std::__shared_weak_count *)operator new();
  v246->__shared_owners_ = 0;
  v247 = (unint64_t *)&v246->__shared_owners_;
  v246->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCAE8;
  v246->__shared_weak_owners_ = 0;
  v246[1].__vftable = (std::__shared_weak_count_vtbl *)v242;
  v248 = (std::__shared_weak_count *)*((_QWORD *)v242 + 5);
  if (v248)
  {
    if (v248->__shared_owners_ != -1)
      goto LABEL_362;
    do
      v249 = __ldxr(v247);
    while (__stxr(v249 + 1, v247));
    v250 = (unint64_t *)&v246->__shared_weak_owners_;
    do
      v251 = __ldxr(v250);
    while (__stxr(v251 + 1, v250));
    *((_QWORD *)v242 + 4) = v242;
    *((_QWORD *)v242 + 5) = v246;
    std::__shared_weak_count::__release_weak(v248);
  }
  else
  {
    do
      v252 = __ldxr(v247);
    while (__stxr(v252 + 1, v247));
    v253 = (unint64_t *)&v246->__shared_weak_owners_;
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
    *((_QWORD *)v242 + 4) = v242;
    *((_QWORD *)v242 + 5) = v246;
  }
  do
    v255 = __ldaxr(v247);
  while (__stlxr(v255 - 1, v247));
  if (!v255)
  {
    ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
    std::__shared_weak_count::__release_weak(v246);
  }
LABEL_362:
  v256 = (std::__shared_weak_count *)v642[1];
  if (v642[1])
  {
    v257 = (unint64_t *)((char *)v642[1] + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v642[0] = v242;
  v642[1] = v246;
  if (v622[1])
  {
    v259 = (unint64_t *)((char *)v622[1] + 8);
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      (*(void (**)(void *))(*(_QWORD *)v622[1] + 16))(v622[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v622[1]);
    }
  }
  v261 = *(_OWORD *)v605;
  v605[0] = 0;
  v605[1] = 0;
  *(_OWORD *)&v682[1] = *(_OWORD *)v662;
  v682[0] = &off_24C9B2700;
  v683 = v662[2];
  memset(v662, 0, sizeof(v662));
  v684 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v685 + 3) = *(_DWORD *)((char *)&v795 + 3);
  LODWORD(v685) = v795;
  HIBYTE(v685) = 5;
  LODWORD(v795) = 0;
  *(_DWORD *)((char *)&v795 + 3) = 0;
  v686 = v261;
  v622[0] = 0;
  v622[1] = 0;
  v262 = v642[0];
  v263 = (char *)v642[1];
  v687 = *(_OWORD *)v642;
  v642[0] = 0;
  v642[1] = 0;
  if (*((_QWORD *)&v687 + 1))
  {
    v264 = (unint64_t *)(v263 + 16);
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
  }
  v688 = &off_24C9B2730;
  v266 = (_QWORD *)operator new();
  *v266 = &off_24C9BCB38;
  v266[1] = v262;
  v266[2] = v263;
  *(_QWORD *)&v689 = v266;
  v268 = *((_QWORD *)&v687 + 1);
  v267 = v687;
  if (!*((_QWORD *)&v687 + 1))
  {
    *((_QWORD *)&v689 + 1) = v687;
    v690 = 0;
    if ((_QWORD)v687)
      v272 = v687 + 16;
    else
      v272 = 0;
    goto LABEL_392;
  }
  v269 = (unint64_t *)(*((_QWORD *)&v687 + 1) + 16);
  do
    v270 = __ldxr(v269);
  while (__stxr(v270 + 1, v269));
  v271 = *((_QWORD *)&v687 + 1);
  *((_QWORD *)&v689 + 1) = v267;
  v690 = v268;
  if ((_QWORD)v687)
    v272 = v687 + 16;
  else
    v272 = 0;
  if (!*((_QWORD *)&v687 + 1))
  {
    v267 = v687;
LABEL_392:
    v275 = 0;
    v691 = &off_24C9B2520;
    v692 = v272;
    goto LABEL_393;
  }
  v273 = (unint64_t *)(*((_QWORD *)&v687 + 1) + 16);
  do
    v274 = __ldxr(v273);
  while (__stxr(v274 + 1, v273));
  v275 = *((_QWORD *)&v687 + 1);
  v267 = v687;
  v691 = &off_24C9B2520;
  *(_QWORD *)&v692 = v272;
  *((_QWORD *)&v692 + 1) = v271;
  if (*((_QWORD *)&v687 + 1))
  {
    v276 = (unint64_t *)(*((_QWORD *)&v687 + 1) + 16);
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
  }
LABEL_393:
  if (v267)
    v278 = v267 + 24;
  else
    v278 = 0;
  v693 = &off_24C9B2310;
  *(_QWORD *)&v694 = v278;
  *((_QWORD *)&v694 + 1) = v275;
  if (SHIBYTE(v662[2]) < 0)
    operator delete(v662[0]);
  v279 = (std::__shared_weak_count *)*((_QWORD *)&v792 + 1);
  if (*((_QWORD *)&v792 + 1))
  {
    v280 = (unint64_t *)(*((_QWORD *)&v792 + 1) + 8);
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if (!v605[1])
    goto LABEL_407;
  v282 = (unint64_t *)((char *)v605[1] + 8);
  do
    v283 = __ldaxr(v282);
  while (__stlxr(v283 - 1, v282));
  if (!v283)
  {
    (*(void (**)(void *))(*(_QWORD *)v605[1] + 16))(v605[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v605[1]);
    if (v675)
      goto LABEL_411;
  }
  else
  {
LABEL_407:
    if (v675)
      goto LABEL_411;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_411:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v660, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v660 = *a2;
    v661 = *((_QWORD *)a2 + 2);
  }
  v285 = *(void **)a3;
  v284 = *(unint64_t **)(a3 + 8);
  if (v284)
  {
    v286 = v284 + 1;
    do
      v287 = __ldxr(v286);
    while (__stxr(v287 + 1, v286));
  }
  v288 = *(uint64_t **)(a4 + 48);
  v290 = (std::__shared_weak_count *)v288[1];
  v655 = *v288;
  v289 = v655;
  v656 = v290;
  *v288 = 0;
  v288[1] = 0;
  v291 = v660;
  v798[0] = v661;
  *(_DWORD *)((char *)v798 + 3) = *(_DWORD *)((char *)&v661 + 3);
  v292 = SHIBYTE(v661);
  v660 = 0uLL;
  v661 = 0;
  v796[0] = v659[0];
  *(_DWORD *)((char *)v796 + 3) = *(_DWORD *)((char *)v659 + 3);
  v659[0] = 0;
  *(_DWORD *)((char *)v659 + 3) = 0;
  *(_QWORD *)&v792 = v285;
  *((_QWORD *)&v792 + 1) = v284;
  v658 = 0;
  v657 = 0;
  *(_QWORD *)&v789 = v289;
  *((_QWORD *)&v789 + 1) = v290;
  if (v290)
  {
    v293 = (unint64_t *)&v290->__shared_owners_;
    do
      v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
  }
  if (v292 < 0)
  {
    sub_20E860C04(v642, (void *)v291, *((unint64_t *)&v291 + 1));
  }
  else
  {
    *(_OWORD *)v642 = v291;
    LODWORD(v642[2]) = v798[0];
    *(_DWORD *)((char *)&v642[2] + 3) = *(_DWORD *)((char *)v798 + 3);
    HIBYTE(v642[2]) = v292;
  }
  LODWORD(v785) = v796[0];
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)v796 + 3);
  *(_DWORD *)((char *)&v783 + 3) = *(_DWORD *)((char *)v798 + 3);
  BYTE3(v783) = HIBYTE(v798[0]);
  v295 = v798[0];
  v798[0] = 0;
  *(_DWORD *)((char *)v798 + 3) = 0;
  LODWORD(v795) = v295;
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)&v783 + 3);
  *(_DWORD *)((char *)&v783 + 3) = 0;
  LODWORD(v783) = 0;
  v605[0] = v285;
  v605[1] = v284;
  if (v284)
  {
    v296 = v284 + 1;
    do
      v297 = __ldxr(v296);
    while (__stxr(v297 + 1, v296));
  }
  v298 = (char *)operator new();
  LODWORD(v797) = v795;
  *(_DWORD *)((char *)&v797 + 3) = *(_DWORD *)((char *)&v795 + 3);
  LODWORD(v795) = 0;
  *(_DWORD *)((char *)&v795 + 3) = 0;
  v299 = *(_OWORD *)v605;
  v605[0] = 0;
  v605[1] = 0;
  v298[8] = 1;
  *((_QWORD *)v298 + 4) = 0;
  *((_QWORD *)v298 + 5) = 0;
  *(_QWORD *)v298 = &off_24C9BCBB0;
  *((_QWORD *)v298 + 2) = &unk_24C9BCC28;
  *((_QWORD *)v298 + 3) = &unk_24C9BCC68;
  *((_OWORD *)v298 + 3) = v291;
  v300 = v797;
  *(_DWORD *)(v298 + 67) = *(_DWORD *)((char *)&v797 + 3);
  *((_DWORD *)v298 + 16) = v300;
  v298[71] = v292;
  LODWORD(v797) = 0;
  *(_DWORD *)((char *)&v797 + 3) = 0;
  *(_OWORD *)(v298 + 72) = v299;
  v622[0] = 0;
  v622[1] = 0;
  v301 = (_QWORD *)operator new();
  *v301 = &off_24C9BCD60;
  v301[1] = v289;
  v301[2] = v290;
  v789 = 0uLL;
  *((_QWORD *)v298 + 18) = 0;
  *((_QWORD *)v298 + 11) = v301;
  *((_QWORD *)v298 + 12) = v298 + 96;
  *((_QWORD *)v298 + 13) = v298 + 96;
  *((_QWORD *)v298 + 14) = 0;
  *((_QWORD *)v298 + 15) = v298 + 120;
  *((_QWORD *)v298 + 16) = v298 + 120;
  *((_QWORD *)v298 + 17) = 0;
  if (!*((_QWORD *)v298 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v302 = (std::__shared_weak_count *)operator new();
  v302->__shared_owners_ = 0;
  v303 = (unint64_t *)&v302->__shared_owners_;
  v302->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD250;
  v302->__shared_weak_owners_ = 0;
  v302[1].__vftable = (std::__shared_weak_count_vtbl *)v298;
  v304 = (std::__shared_weak_count *)*((_QWORD *)v298 + 5);
  if (v304)
  {
    if (v304->__shared_owners_ != -1)
      goto LABEL_441;
    do
      v305 = __ldxr(v303);
    while (__stxr(v305 + 1, v303));
    v306 = (unint64_t *)&v302->__shared_weak_owners_;
    do
      v307 = __ldxr(v306);
    while (__stxr(v307 + 1, v306));
    *((_QWORD *)v298 + 4) = v298;
    *((_QWORD *)v298 + 5) = v302;
    std::__shared_weak_count::__release_weak(v304);
  }
  else
  {
    do
      v308 = __ldxr(v303);
    while (__stxr(v308 + 1, v303));
    v309 = (unint64_t *)&v302->__shared_weak_owners_;
    do
      v310 = __ldxr(v309);
    while (__stxr(v310 + 1, v309));
    *((_QWORD *)v298 + 4) = v298;
    *((_QWORD *)v298 + 5) = v302;
  }
  do
    v311 = __ldaxr(v303);
  while (__stlxr(v311 - 1, v303));
  if (!v311)
  {
    ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
    std::__shared_weak_count::__release_weak(v302);
  }
LABEL_441:
  if (v622[1])
  {
    v312 = (unint64_t *)((char *)v622[1] + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      (*(void (**)(void *))(*(_QWORD *)v622[1] + 16))(v622[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v622[1]);
    }
  }
  v622[0] = v298;
  v622[1] = v302;
  if (v605[1])
  {
    v314 = (unint64_t *)((char *)v605[1] + 8);
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      (*(void (**)(void *))(*(_QWORD *)v605[1] + 16))(v605[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v605[1]);
    }
  }
  v316 = v792;
  v792 = 0uLL;
  *(_OWORD *)&v662[1] = *(_OWORD *)v642;
  v662[0] = &off_24C9B26D0;
  v663 = v642[2];
  memset(v642, 0, sizeof(v642));
  v664 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v665 + 3) = *(_DWORD *)((char *)&v785 + 3);
  LODWORD(v665) = v785;
  HIBYTE(v665) = 5;
  LODWORD(v785) = 0;
  *(_DWORD *)((char *)&v785 + 3) = 0;
  v666 = v316;
  v605[0] = 0;
  v605[1] = 0;
  v318 = v622[0];
  v317 = (char *)v622[1];
  v667 = *(_OWORD *)v622;
  v622[0] = 0;
  v622[1] = 0;
  if (*((_QWORD *)&v667 + 1))
  {
    v319 = (unint64_t *)(v317 + 16);
    do
      v320 = __ldxr(v319);
    while (__stxr(v320 + 1, v319));
  }
  v668 = &off_24C9B2450;
  v321 = (_QWORD *)operator new();
  *v321 = &off_24C9BD2A0;
  v321[1] = v318;
  v321[2] = v317;
  *(_QWORD *)&v669 = v321;
  v323 = *((_QWORD *)&v667 + 1);
  v322 = v667;
  if (!*((_QWORD *)&v667 + 1))
  {
    *((_QWORD *)&v669 + 1) = v667;
    v670 = 0;
    if ((_QWORD)v667)
      v327 = v667 + 16;
    else
      v327 = 0;
    goto LABEL_471;
  }
  v324 = (unint64_t *)(*((_QWORD *)&v667 + 1) + 16);
  do
    v325 = __ldxr(v324);
  while (__stxr(v325 + 1, v324));
  v326 = *((_QWORD *)&v667 + 1);
  *((_QWORD *)&v669 + 1) = v322;
  v670 = v323;
  if ((_QWORD)v667)
    v327 = v667 + 16;
  else
    v327 = 0;
  if (!*((_QWORD *)&v667 + 1))
  {
    v322 = v667;
LABEL_471:
    v330 = 0;
    v671 = &off_24C9B2348;
    v672 = v327;
    goto LABEL_472;
  }
  v328 = (unint64_t *)(*((_QWORD *)&v667 + 1) + 16);
  do
    v329 = __ldxr(v328);
  while (__stxr(v329 + 1, v328));
  v330 = *((_QWORD *)&v667 + 1);
  v322 = v667;
  v671 = &off_24C9B2348;
  *(_QWORD *)&v672 = v327;
  *((_QWORD *)&v672 + 1) = v326;
  if (*((_QWORD *)&v667 + 1))
  {
    v331 = (unint64_t *)(*((_QWORD *)&v667 + 1) + 16);
    do
      v332 = __ldxr(v331);
    while (__stxr(v332 + 1, v331));
  }
LABEL_472:
  if (v322)
    v333 = v322 + 24;
  else
    v333 = 0;
  v673 = &off_24C9B2310;
  *(_QWORD *)&v674 = v333;
  *((_QWORD *)&v674 + 1) = v330;
  if (SHIBYTE(v642[2]) < 0)
    operator delete(v642[0]);
  v334 = (std::__shared_weak_count *)*((_QWORD *)&v789 + 1);
  if (*((_QWORD *)&v789 + 1))
  {
    v335 = (unint64_t *)(*((_QWORD *)&v789 + 1) + 8);
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = (std::__shared_weak_count *)*((_QWORD *)&v792 + 1);
  if (!*((_QWORD *)&v792 + 1))
    goto LABEL_486;
  v338 = (unint64_t *)(*((_QWORD *)&v792 + 1) + 8);
  do
    v339 = __ldaxr(v338);
  while (__stlxr(v339 - 1, v338));
  if (!v339)
  {
    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
    std::__shared_weak_count::__release_weak(v337);
    if (v655)
      goto LABEL_490;
  }
  else
  {
LABEL_486:
    if (v655)
      goto LABEL_490;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_490:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v640, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v640 = *a2;
    v641 = *((_QWORD *)a2 + 2);
  }
  v341 = *(void **)a3;
  v340 = *(_QWORD *)(a3 + 8);
  if (v340)
  {
    v342 = (unint64_t *)(v340 + 8);
    do
      v343 = __ldxr(v342);
    while (__stxr(v343 + 1, v342));
  }
  v344 = *(uint64_t **)(a4 + 56);
  v346 = (std::__shared_weak_count *)v344[1];
  v635 = *v344;
  v345 = v635;
  v636 = v346;
  *v344 = 0;
  v344[1] = 0;
  v347 = v640;
  v796[0] = v641;
  *(_DWORD *)((char *)v796 + 3) = *(_DWORD *)((char *)&v641 + 3);
  v348 = SHIBYTE(v641);
  v640 = 0uLL;
  v641 = 0;
  v788[0] = v639[0];
  *(_DWORD *)((char *)v788 + 3) = *(_DWORD *)((char *)v639 + 3);
  v639[0] = 0;
  *(_DWORD *)((char *)v639 + 3) = 0;
  *(_QWORD *)&v789 = v341;
  *((_QWORD *)&v789 + 1) = v340;
  v638 = 0;
  v637 = 0;
  *(_QWORD *)&v797 = v345;
  *((_QWORD *)&v797 + 1) = v346;
  if (v346)
  {
    v349 = (unint64_t *)&v346->__shared_owners_;
    do
      v350 = __ldxr(v349);
    while (__stxr(v350 + 1, v349));
  }
  if (v348 < 0)
  {
    sub_20E860C04(v622, (void *)v347, *((unint64_t *)&v347 + 1));
  }
  else
  {
    *(_OWORD *)v622 = v347;
    LODWORD(v622[2]) = v796[0];
    *(_DWORD *)((char *)&v622[2] + 3) = *(_DWORD *)((char *)v796 + 3);
    HIBYTE(v622[2]) = v348;
  }
  LODWORD(v783) = v788[0];
  *(_DWORD *)((char *)&v783 + 3) = *(_DWORD *)((char *)v788 + 3);
  *(_DWORD *)((char *)v798 + 3) = *(_DWORD *)((char *)v796 + 3);
  v351 = v796[0];
  HIBYTE(v798[0]) = HIBYTE(v796[0]);
  v796[0] = 0;
  *(_DWORD *)((char *)v796 + 3) = 0;
  LODWORD(v785) = v351;
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)v798 + 3);
  *(_DWORD *)((char *)v798 + 3) = 0;
  v798[0] = 0;
  *(_QWORD *)&v792 = v341;
  *((_QWORD *)&v792 + 1) = v340;
  if (v340)
  {
    v352 = (unint64_t *)(v340 + 8);
    do
      v353 = __ldxr(v352);
    while (__stxr(v353 + 1, v352));
  }
  v354 = (char *)operator new();
  LODWORD(v795) = v785;
  *(_DWORD *)((char *)&v795 + 3) = *(_DWORD *)((char *)&v785 + 3);
  LODWORD(v785) = 0;
  *(_DWORD *)((char *)&v785 + 3) = 0;
  v355 = v792;
  v792 = 0uLL;
  v354[8] = 1;
  *((_QWORD *)v354 + 4) = 0;
  *((_QWORD *)v354 + 5) = 0;
  *(_QWORD *)v354 = &off_24C9BD318;
  *((_QWORD *)v354 + 2) = &unk_24C9BD390;
  *((_QWORD *)v354 + 3) = &unk_24C9BD3D0;
  *((_OWORD *)v354 + 3) = v347;
  v356 = v795;
  *(_DWORD *)(v354 + 67) = *(_DWORD *)((char *)&v795 + 3);
  *((_DWORD *)v354 + 16) = v356;
  v354[71] = v348;
  LODWORD(v795) = 0;
  *(_DWORD *)((char *)&v795 + 3) = 0;
  *(_OWORD *)(v354 + 72) = v355;
  v605[0] = 0;
  v605[1] = 0;
  v357 = (_QWORD *)operator new();
  *v357 = &off_24C9BD4B8;
  v357[1] = v345;
  v357[2] = v346;
  v797 = 0uLL;
  *((_QWORD *)v354 + 18) = 0;
  *((_QWORD *)v354 + 11) = v357;
  *((_QWORD *)v354 + 12) = v354 + 96;
  *((_QWORD *)v354 + 13) = v354 + 96;
  *((_QWORD *)v354 + 14) = 0;
  *((_QWORD *)v354 + 15) = v354 + 120;
  *((_QWORD *)v354 + 16) = v354 + 120;
  *((_QWORD *)v354 + 17) = 0;
  if (!*((_QWORD *)v354 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v358 = (std::__shared_weak_count *)operator new();
  v358->__shared_owners_ = 0;
  v359 = (unint64_t *)&v358->__shared_owners_;
  v358->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD958;
  v358->__shared_weak_owners_ = 0;
  v358[1].__vftable = (std::__shared_weak_count_vtbl *)v354;
  v360 = (std::__shared_weak_count *)*((_QWORD *)v354 + 5);
  if (v360)
  {
    if (v360->__shared_owners_ != -1)
      goto LABEL_520;
    do
      v361 = __ldxr(v359);
    while (__stxr(v361 + 1, v359));
    v362 = (unint64_t *)&v358->__shared_weak_owners_;
    do
      v363 = __ldxr(v362);
    while (__stxr(v363 + 1, v362));
    *((_QWORD *)v354 + 4) = v354;
    *((_QWORD *)v354 + 5) = v358;
    std::__shared_weak_count::__release_weak(v360);
  }
  else
  {
    do
      v364 = __ldxr(v359);
    while (__stxr(v364 + 1, v359));
    v365 = (unint64_t *)&v358->__shared_weak_owners_;
    do
      v366 = __ldxr(v365);
    while (__stxr(v366 + 1, v365));
    *((_QWORD *)v354 + 4) = v354;
    *((_QWORD *)v354 + 5) = v358;
  }
  do
    v367 = __ldaxr(v359);
  while (__stlxr(v367 - 1, v359));
  if (!v367)
  {
    ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
    std::__shared_weak_count::__release_weak(v358);
  }
LABEL_520:
  if (v605[1])
  {
    v368 = (unint64_t *)((char *)v605[1] + 8);
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      (*(void (**)(void *))(*(_QWORD *)v605[1] + 16))(v605[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v605[1]);
    }
  }
  v605[0] = v354;
  v605[1] = v358;
  v370 = (std::__shared_weak_count *)*((_QWORD *)&v792 + 1);
  if (*((_QWORD *)&v792 + 1))
  {
    v371 = (unint64_t *)(*((_QWORD *)&v792 + 1) + 8);
    do
      v372 = __ldaxr(v371);
    while (__stlxr(v372 - 1, v371));
    if (!v372)
    {
      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
  v373 = v789;
  v789 = 0uLL;
  *(_OWORD *)&v642[1] = *(_OWORD *)v622;
  v642[0] = &off_24C9B2668;
  v643 = v622[2];
  memset(v622, 0, sizeof(v622));
  v644 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v645 + 3) = *(_DWORD *)((char *)&v783 + 3);
  LODWORD(v645) = v783;
  HIBYTE(v645) = 5;
  LODWORD(v783) = 0;
  *(_DWORD *)((char *)&v783 + 3) = 0;
  v646 = v373;
  v792 = 0uLL;
  v374 = v605[0];
  v375 = (char *)v605[1];
  v647 = *(_OWORD *)v605;
  v605[0] = 0;
  v605[1] = 0;
  if (*((_QWORD *)&v647 + 1))
  {
    v376 = (unint64_t *)(v375 + 16);
    do
      v377 = __ldxr(v376);
    while (__stxr(v377 + 1, v376));
  }
  v648 = &off_24C9B2698;
  v378 = (_QWORD *)operator new();
  *v378 = &off_24C9BD9A8;
  v378[1] = v374;
  v378[2] = v375;
  *(_QWORD *)&v649 = v378;
  v380 = *((_QWORD *)&v647 + 1);
  v379 = v647;
  if (!*((_QWORD *)&v647 + 1))
  {
    *((_QWORD *)&v649 + 1) = v647;
    v650 = 0;
    if ((_QWORD)v647)
      v384 = v647 + 16;
    else
      v384 = 0;
    goto LABEL_550;
  }
  v381 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 16);
  do
    v382 = __ldxr(v381);
  while (__stxr(v382 + 1, v381));
  v383 = *((_QWORD *)&v647 + 1);
  *((_QWORD *)&v649 + 1) = v379;
  v650 = v380;
  if ((_QWORD)v647)
    v384 = v647 + 16;
  else
    v384 = 0;
  if (!*((_QWORD *)&v647 + 1))
  {
    v379 = v647;
LABEL_550:
    v387 = 0;
    v651 = &off_24C9B2520;
    v652 = v384;
    goto LABEL_551;
  }
  v385 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 16);
  do
    v386 = __ldxr(v385);
  while (__stxr(v386 + 1, v385));
  v387 = *((_QWORD *)&v647 + 1);
  v379 = v647;
  v651 = &off_24C9B2520;
  *(_QWORD *)&v652 = v384;
  *((_QWORD *)&v652 + 1) = v383;
  if (*((_QWORD *)&v647 + 1))
  {
    v388 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 16);
    do
      v389 = __ldxr(v388);
    while (__stxr(v389 + 1, v388));
  }
LABEL_551:
  if (v379)
    v390 = v379 + 24;
  else
    v390 = 0;
  v653 = &off_24C9B2310;
  *(_QWORD *)&v654 = v390;
  *((_QWORD *)&v654 + 1) = v387;
  if (SHIBYTE(v622[2]) < 0)
    operator delete(v622[0]);
  v391 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (*((_QWORD *)&v797 + 1))
  {
    v392 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
  v394 = (std::__shared_weak_count *)*((_QWORD *)&v789 + 1);
  if (!*((_QWORD *)&v789 + 1))
    goto LABEL_565;
  v395 = (unint64_t *)(*((_QWORD *)&v789 + 1) + 8);
  do
    v396 = __ldaxr(v395);
  while (__stlxr(v396 - 1, v395));
  if (!v396)
  {
    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
    std::__shared_weak_count::__release_weak(v394);
    if (v635)
      goto LABEL_569;
  }
  else
  {
LABEL_565:
    if (v635)
      goto LABEL_569;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_569:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v620, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v620 = *a2;
    v621 = *((_QWORD *)a2 + 2);
  }
  v398 = *(void **)a3;
  v397 = *(_QWORD *)(a3 + 8);
  if (v397)
  {
    v399 = (unint64_t *)(v397 + 8);
    do
      v400 = __ldxr(v399);
    while (__stxr(v400 + 1, v399));
  }
  v401 = *(uint64_t **)(a4 + 64);
  v403 = (std::__shared_weak_count *)v401[1];
  v615 = *v401;
  v402 = v615;
  v616 = v403;
  *v401 = 0;
  v401[1] = 0;
  v404 = v620;
  v788[0] = v621;
  *(_DWORD *)((char *)v788 + 3) = *(_DWORD *)((char *)&v621 + 3);
  v405 = SHIBYTE(v621);
  v620 = 0uLL;
  v621 = 0;
  v787[0] = v619[0];
  *(_DWORD *)((char *)v787 + 3) = *(_DWORD *)((char *)v619 + 3);
  v619[0] = 0;
  *(_DWORD *)((char *)v619 + 3) = 0;
  *(_QWORD *)&v797 = v398;
  *((_QWORD *)&v797 + 1) = v397;
  v617 = 0;
  v618 = 0;
  *(_QWORD *)&v795 = v402;
  *((_QWORD *)&v795 + 1) = v403;
  if (v403)
  {
    v406 = (unint64_t *)&v403->__shared_owners_;
    do
      v407 = __ldxr(v406);
    while (__stxr(v407 + 1, v406));
  }
  if (v405 < 0)
  {
    sub_20E860C04(v605, (void *)v404, *((unint64_t *)&v404 + 1));
  }
  else
  {
    *(_OWORD *)v605 = v404;
    LODWORD(v605[2]) = v788[0];
    *(_DWORD *)((char *)&v605[2] + 3) = *(_DWORD *)((char *)v788 + 3);
    HIBYTE(v605[2]) = v405;
  }
  v798[0] = v787[0];
  *(_DWORD *)((char *)v798 + 3) = *(_DWORD *)((char *)v787 + 3);
  *(_DWORD *)((char *)v796 + 3) = *(_DWORD *)((char *)v788 + 3);
  v796[0] = v788[0];
  v788[0] = 0;
  *(_DWORD *)((char *)v788 + 3) = 0;
  LODWORD(v783) = v796[0];
  *(_DWORD *)((char *)&v783 + 3) = *(_DWORD *)((char *)v796 + 3);
  *(_DWORD *)((char *)v796 + 3) = 0;
  v796[0] = 0;
  *(_QWORD *)&v789 = v398;
  *((_QWORD *)&v789 + 1) = v397;
  if (v397)
  {
    v408 = (unint64_t *)(v397 + 8);
    do
      v409 = __ldxr(v408);
    while (__stxr(v409 + 1, v408));
  }
  v410 = operator new();
  LODWORD(v785) = v783;
  *(_DWORD *)((char *)&v785 + 3) = *(_DWORD *)((char *)&v783 + 3);
  LODWORD(v783) = 0;
  *(_DWORD *)((char *)&v783 + 3) = 0;
  v411 = v789;
  v789 = 0uLL;
  *(_BYTE *)(v410 + 8) = 1;
  *(_QWORD *)(v410 + 32) = 0;
  *(_QWORD *)(v410 + 40) = 0;
  *(_QWORD *)v410 = &off_24C9BDA20;
  *(_QWORD *)(v410 + 16) = &unk_24C9BDA98;
  *(_QWORD *)(v410 + 24) = &unk_24C9BDAD8;
  *(_OWORD *)(v410 + 48) = v404;
  v412 = v785;
  *(_DWORD *)(v410 + 67) = *(_DWORD *)((char *)&v785 + 3);
  *(_DWORD *)(v410 + 64) = v412;
  *(_BYTE *)(v410 + 71) = v405;
  LODWORD(v785) = 0;
  *(_DWORD *)((char *)&v785 + 3) = 0;
  *(_OWORD *)(v410 + 72) = v411;
  v792 = 0uLL;
  v413 = (_QWORD *)operator new();
  *v413 = &off_24C9BDBC0;
  v413[1] = v402;
  v413[2] = v403;
  v795 = 0uLL;
  *(_QWORD *)(v410 + 144) = 0;
  *(_QWORD *)(v410 + 88) = v413;
  *(_QWORD *)(v410 + 96) = v410 + 96;
  *(_QWORD *)(v410 + 104) = v410 + 96;
  *(_QWORD *)(v410 + 112) = 0;
  *(_QWORD *)(v410 + 120) = v410 + 120;
  *(_QWORD *)(v410 + 128) = v410 + 120;
  *(_QWORD *)(v410 + 136) = 0;
  if (!*(_QWORD *)(v410 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v414 = (std::__shared_weak_count *)operator new();
  v414->__shared_owners_ = 0;
  v415 = (unint64_t *)&v414->__shared_owners_;
  v414->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE060;
  v414->__shared_weak_owners_ = 0;
  v414[1].__vftable = (std::__shared_weak_count_vtbl *)v410;
  v416 = *(std::__shared_weak_count **)(v410 + 40);
  if (v416)
  {
    if (v416->__shared_owners_ != -1)
      goto LABEL_599;
    do
      v417 = __ldxr(v415);
    while (__stxr(v417 + 1, v415));
    v418 = (unint64_t *)&v414->__shared_weak_owners_;
    do
      v419 = __ldxr(v418);
    while (__stxr(v419 + 1, v418));
    *(_QWORD *)(v410 + 32) = v410;
    *(_QWORD *)(v410 + 40) = v414;
    std::__shared_weak_count::__release_weak(v416);
  }
  else
  {
    do
      v420 = __ldxr(v415);
    while (__stxr(v420 + 1, v415));
    v421 = (unint64_t *)&v414->__shared_weak_owners_;
    do
      v422 = __ldxr(v421);
    while (__stxr(v422 + 1, v421));
    *(_QWORD *)(v410 + 32) = v410;
    *(_QWORD *)(v410 + 40) = v414;
  }
  do
    v423 = __ldaxr(v415);
  while (__stlxr(v423 - 1, v415));
  if (!v423)
  {
    ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
    std::__shared_weak_count::__release_weak(v414);
  }
LABEL_599:
  v424 = (std::__shared_weak_count *)*((_QWORD *)&v792 + 1);
  if (*((_QWORD *)&v792 + 1))
  {
    v425 = (unint64_t *)(*((_QWORD *)&v792 + 1) + 8);
    do
      v426 = __ldaxr(v425);
    while (__stlxr(v426 - 1, v425));
    if (!v426)
    {
      ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
      std::__shared_weak_count::__release_weak(v424);
    }
  }
  *(_QWORD *)&v792 = v410;
  *((_QWORD *)&v792 + 1) = v414;
  v427 = (std::__shared_weak_count *)*((_QWORD *)&v789 + 1);
  if (*((_QWORD *)&v789 + 1))
  {
    v428 = (unint64_t *)(*((_QWORD *)&v789 + 1) + 8);
    do
      v429 = __ldaxr(v428);
    while (__stlxr(v429 - 1, v428));
    if (!v429)
    {
      ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
      std::__shared_weak_count::__release_weak(v427);
    }
  }
  v430 = v797;
  v797 = 0uLL;
  *(_OWORD *)&v622[1] = *(_OWORD *)v605;
  v622[0] = &off_24C9B2590;
  v623 = v605[2];
  memset(v605, 0, sizeof(v605));
  v624 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v625 + 3) = *(_DWORD *)((char *)v798 + 3);
  LODWORD(v625) = v798[0];
  HIBYTE(v625) = 5;
  v798[0] = 0;
  *(_DWORD *)((char *)v798 + 3) = 0;
  v626 = v430;
  v789 = 0uLL;
  v431 = v792;
  v627 = v792;
  v792 = 0uLL;
  if (*((_QWORD *)&v627 + 1))
  {
    v432 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 16);
    do
      v433 = __ldxr(v432);
    while (__stxr(v433 + 1, v432));
  }
  v628 = &off_24C9B2630;
  v434 = operator new();
  *(_QWORD *)v434 = &off_24C9BB4D0;
  *(_OWORD *)(v434 + 8) = v431;
  *(_QWORD *)&v629 = v434;
  v436 = *((_QWORD *)&v627 + 1);
  v435 = v627;
  if (!*((_QWORD *)&v627 + 1))
  {
    *((_QWORD *)&v629 + 1) = v627;
    v630 = 0;
    if ((_QWORD)v627)
      v440 = v627 + 16;
    else
      v440 = 0;
    goto LABEL_629;
  }
  v437 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 16);
  do
    v438 = __ldxr(v437);
  while (__stxr(v438 + 1, v437));
  v439 = *((_QWORD *)&v627 + 1);
  *((_QWORD *)&v629 + 1) = v435;
  v630 = v436;
  if ((_QWORD)v627)
    v440 = v627 + 16;
  else
    v440 = 0;
  if (!*((_QWORD *)&v627 + 1))
  {
    v435 = v627;
LABEL_629:
    v443 = 0;
    v631 = &off_24C9B25C0;
    v632 = v440;
    goto LABEL_630;
  }
  v441 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 16);
  do
    v442 = __ldxr(v441);
  while (__stxr(v442 + 1, v441));
  v443 = *((_QWORD *)&v627 + 1);
  v435 = v627;
  v631 = &off_24C9B25C0;
  *(_QWORD *)&v632 = v440;
  *((_QWORD *)&v632 + 1) = v439;
  if (*((_QWORD *)&v627 + 1))
  {
    v444 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 16);
    do
      v445 = __ldxr(v444);
    while (__stxr(v445 + 1, v444));
  }
LABEL_630:
  if (v435)
    v446 = v435 + 24;
  else
    v446 = 0;
  v633 = &off_24C9B2310;
  *(_QWORD *)&v634 = v446;
  *((_QWORD *)&v634 + 1) = v443;
  if (SHIBYTE(v605[2]) < 0)
    operator delete(v605[0]);
  v447 = (std::__shared_weak_count *)*((_QWORD *)&v795 + 1);
  if (*((_QWORD *)&v795 + 1))
  {
    v448 = (unint64_t *)(*((_QWORD *)&v795 + 1) + 8);
    do
      v449 = __ldaxr(v448);
    while (__stlxr(v449 - 1, v448));
    if (!v449)
    {
      ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
      std::__shared_weak_count::__release_weak(v447);
    }
  }
  v450 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (!*((_QWORD *)&v797 + 1))
    goto LABEL_644;
  v451 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
  do
    v452 = __ldaxr(v451);
  while (__stlxr(v452 - 1, v451));
  if (!v452)
  {
    ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
    std::__shared_weak_count::__release_weak(v450);
    if (v615)
      goto LABEL_648;
  }
  else
  {
LABEL_644:
    if (v615)
      goto LABEL_648;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_648:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v603, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v603 = *a2;
    v604 = *((_QWORD *)a2 + 2);
  }
  v454 = *(void **)a3;
  v453 = *(_QWORD *)(a3 + 8);
  if (v453)
  {
    v455 = (unint64_t *)(v453 + 8);
    do
      v456 = __ldxr(v455);
    while (__stxr(v456 + 1, v455));
  }
  v457 = *(uint64_t **)(a4 + 72);
  v459 = (std::__shared_weak_count *)v457[1];
  v601 = *v457;
  v458 = *v457;
  *v457 = 0;
  v457[1] = 0;
  v461 = v603[0];
  v460 = v603[1];
  v787[0] = v604;
  *(_DWORD *)((char *)v787 + 3) = *(_DWORD *)((char *)&v604 + 3);
  v462 = SHIBYTE(v604);
  v603[0] = 0;
  v603[1] = 0;
  v604 = 0;
  v786[0] = *(_DWORD *)v602;
  *(_DWORD *)((char *)v786 + 3) = *(_DWORD *)&v602[3];
  *(_QWORD *)&v785 = v454;
  *((_QWORD *)&v785 + 1) = v453;
  v783 = v458;
  v784 = v459;
  if (v459)
  {
    v463 = (unint64_t *)&v459->__shared_owners_;
    do
      v464 = __ldxr(v463);
    while (__stxr(v464 + 1, v463));
  }
  if (v462 < 0)
  {
    sub_20E860C04(&v792, v461, (unint64_t)v460);
  }
  else
  {
    *(_QWORD *)&v792 = v461;
    *((_QWORD *)&v792 + 1) = v460;
    *(_DWORD *)v793 = v787[0];
    *(_DWORD *)&v793[3] = *(_DWORD *)((char *)v787 + 3);
    v794 = v462;
  }
  v789 = 0x7974706D45uLL;
  *(_DWORD *)v790 = v786[0];
  *(_DWORD *)&v790[3] = *(_DWORD *)((char *)v786 + 3);
  v791 = 5;
  *(_DWORD *)((char *)v788 + 3) = *(_DWORD *)((char *)v787 + 3);
  v465 = v787[0];
  HIBYTE(v788[0]) = HIBYTE(v787[0]);
  v787[0] = 0;
  *(_DWORD *)((char *)v787 + 3) = 0;
  v796[0] = v465;
  *(_DWORD *)((char *)v796 + 3) = *(_DWORD *)((char *)v788 + 3);
  *(_DWORD *)((char *)v788 + 3) = 0;
  v788[0] = 0;
  *(_QWORD *)&v795 = v454;
  *((_QWORD *)&v795 + 1) = v453;
  if (v453)
  {
    v466 = (unint64_t *)(v453 + 8);
    do
      v467 = __ldxr(v466);
    while (__stxr(v467 + 1, v466));
  }
  v468 = operator new();
  v798[0] = v796[0];
  *(_DWORD *)((char *)v798 + 3) = *(_DWORD *)((char *)v796 + 3);
  v796[0] = 0;
  *(_DWORD *)((char *)v796 + 3) = 0;
  v469 = v795;
  v795 = 0uLL;
  *(_BYTE *)(v468 + 8) = 1;
  *(_QWORD *)(v468 + 32) = 0;
  *(_QWORD *)(v468 + 40) = 0;
  *(_QWORD *)v468 = &off_24C9BB548;
  *(_QWORD *)(v468 + 16) = &unk_24C9BB5C0;
  *(_QWORD *)(v468 + 24) = &unk_24C9BB600;
  *(_QWORD *)(v468 + 48) = v461;
  *(_QWORD *)(v468 + 56) = v460;
  v470 = v798[0];
  *(_DWORD *)(v468 + 67) = *(_DWORD *)((char *)v798 + 3);
  *(_DWORD *)(v468 + 64) = v470;
  *(_BYTE *)(v468 + 71) = v462;
  v798[0] = 0;
  *(_DWORD *)((char *)v798 + 3) = 0;
  *(_OWORD *)(v468 + 72) = v469;
  v797 = 0uLL;
  v471 = (_QWORD *)operator new();
  *v471 = &off_24C9BE0B0;
  v471[1] = v458;
  v471[2] = v459;
  v784 = 0;
  v783 = 0;
  *(_QWORD *)(v468 + 144) = 0;
  *(_QWORD *)(v468 + 88) = v471;
  *(_QWORD *)(v468 + 96) = v468 + 96;
  *(_QWORD *)(v468 + 104) = v468 + 96;
  *(_QWORD *)(v468 + 112) = 0;
  *(_QWORD *)(v468 + 120) = v468 + 120;
  *(_QWORD *)(v468 + 128) = v468 + 120;
  *(_QWORD *)(v468 + 136) = 0;
  if (!*(_QWORD *)(v468 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v472 = (std::__shared_weak_count *)operator new();
  v472->__shared_owners_ = 0;
  v473 = (unint64_t *)&v472->__shared_owners_;
  v472->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBB88;
  v472->__shared_weak_owners_ = 0;
  v472[1].__vftable = (std::__shared_weak_count_vtbl *)v468;
  v474 = *(std::__shared_weak_count **)(v468 + 40);
  if (v474)
  {
    if (v474->__shared_owners_ != -1)
      goto LABEL_678;
    do
      v475 = __ldxr(v473);
    while (__stxr(v475 + 1, v473));
    v476 = (unint64_t *)&v472->__shared_weak_owners_;
    do
      v477 = __ldxr(v476);
    while (__stxr(v477 + 1, v476));
    *(_QWORD *)(v468 + 32) = v468;
    *(_QWORD *)(v468 + 40) = v472;
    std::__shared_weak_count::__release_weak(v474);
  }
  else
  {
    do
      v478 = __ldxr(v473);
    while (__stxr(v478 + 1, v473));
    v479 = (unint64_t *)&v472->__shared_weak_owners_;
    do
      v480 = __ldxr(v479);
    while (__stxr(v480 + 1, v479));
    *(_QWORD *)(v468 + 32) = v468;
    *(_QWORD *)(v468 + 40) = v472;
  }
  do
    v481 = __ldaxr(v473);
  while (__stlxr(v481 - 1, v473));
  if (!v481)
  {
    ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
    std::__shared_weak_count::__release_weak(v472);
  }
LABEL_678:
  v482 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (*((_QWORD *)&v797 + 1))
  {
    v483 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
    do
      v484 = __ldaxr(v483);
    while (__stlxr(v484 - 1, v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
  *(_QWORD *)&v797 = v468;
  *((_QWORD *)&v797 + 1) = v472;
  v485 = (std::__shared_weak_count *)*((_QWORD *)&v795 + 1);
  if (*((_QWORD *)&v795 + 1))
  {
    v486 = (unint64_t *)(*((_QWORD *)&v795 + 1) + 8);
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
      std::__shared_weak_count::__release_weak(v485);
    }
  }
  v795 = v785;
  v785 = 0uLL;
  sub_20EA2B984((uint64_t)v605, &v792, &v789, (uint64_t)&v797, (uint64_t)&v795);
  v488 = (std::__shared_weak_count *)*((_QWORD *)&v795 + 1);
  if (*((_QWORD *)&v795 + 1))
  {
    v489 = (unint64_t *)(*((_QWORD *)&v795 + 1) + 8);
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v491 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (!*((_QWORD *)&v797 + 1))
    goto LABEL_697;
  v492 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
  do
    v493 = __ldaxr(v492);
  while (__stlxr(v493 - 1, v492));
  if (!v493)
  {
    ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
    std::__shared_weak_count::__release_weak(v491);
    if ((v791 & 0x80000000) == 0)
    {
LABEL_698:
      if ((v794 & 0x80000000) == 0)
        goto LABEL_699;
LABEL_703:
      operator delete((void *)v792);
      v494 = v784;
      if (!v784)
        goto LABEL_708;
      goto LABEL_704;
    }
  }
  else
  {
LABEL_697:
    if ((v791 & 0x80000000) == 0)
      goto LABEL_698;
  }
  operator delete((void *)v789);
  if (v794 < 0)
    goto LABEL_703;
LABEL_699:
  v494 = v784;
  if (!v784)
    goto LABEL_708;
LABEL_704:
  v495 = (unint64_t *)&v494->__shared_owners_;
  do
    v496 = __ldaxr(v495);
  while (__stlxr(v496 - 1, v495));
  if (!v496)
  {
    ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
    std::__shared_weak_count::__release_weak(v494);
  }
LABEL_708:
  v497 = (std::__shared_weak_count *)*((_QWORD *)&v785 + 1);
  if (!*((_QWORD *)&v785 + 1))
    goto LABEL_712;
  v498 = (unint64_t *)(*((_QWORD *)&v785 + 1) + 8);
  do
    v499 = __ldaxr(v498);
  while (__stlxr(v499 - 1, v498));
  if (!v499)
  {
    ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
    std::__shared_weak_count::__release_weak(v497);
    if (v601)
      goto LABEL_716;
  }
  else
  {
LABEL_712:
    if (v601)
      goto LABEL_716;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_716:
  v500 = operator new();
  *(_QWORD *)(v500 + 672) = &off_24C9B2768;
  *(_QWORD *)(v500 + 760) = &off_24C9B2798;
  *(_QWORD *)(v500 + 840) = &off_24C9B2700;
  *(_QWORD *)(v500 + 928) = &off_24C9B2730;
  *(_QWORD *)(v500 + 1008) = &off_24C9B26D0;
  *(_QWORD *)(v500 + 1096) = &off_24C9B2450;
  *(_QWORD *)(v500 + 1128) = &off_24C9B2348;
  *(_QWORD *)(v500 + 1176) = &off_24C9B2668;
  *(_QWORD *)(v500 + 1264) = &off_24C9B2698;
  *(_QWORD *)(v500 + 1344) = &off_24C9B2590;
  *(_QWORD *)v500 = &off_24C9B2908;
  *(_QWORD *)(v500 + 24) = v774;
  *(_QWORD *)(v500 + 48) = v776;
  *(_QWORD *)(v500 + 88) = &off_24C9B2938;
  *(_QWORD *)(v500 + 112) = v780;
  v501 = v773;
  v502 = v777;
  v503 = v778;
  v504 = v782;
  *(_QWORD *)(v500 + 168) = &off_24C9B28A0;
  *(_QWORD *)(v500 + 192) = v757;
  *(_QWORD *)(v500 + 216) = v759;
  v505 = v760;
  v506 = v761;
  *(_QWORD *)(v500 + 256) = &off_24C9B28D0;
  *(_QWORD *)(v500 + 280) = v763;
  v507 = v765;
  *(_QWORD *)(v500 + 336) = &off_24C9B2838;
  v508 = v742;
  *(_QWORD *)(v500 + 360) = v740;
  *(_OWORD *)(v500 + 344) = *(_OWORD *)&__p[8];
  *(_QWORD *)(v500 + 384) = v508;
  *(_QWORD *)(v500 + 424) = &off_24C9B2868;
  *(_QWORD *)(v500 + 448) = v746;
  *(_OWORD *)(v500 + 536) = v724;
  *(_OWORD *)(v500 + 680) = *(_OWORD *)&v702[8];
  *(_OWORD *)(v500 + 872) = v684;
  v509 = *(_OWORD *)&v756[8];
  v510 = v741;
  v511 = v743;
  v512 = v744;
  v513 = v745;
  v514 = v747;
  v515 = v748;
  *(_QWORD *)(v500 + 504) = &off_24C9B27D0;
  v516 = v725;
  *(_QWORD *)(v500 + 528) = v723;
  *(_OWORD *)(v500 + 8) = v501;
  *(_OWORD *)(v500 + 32) = v775;
  *(_OWORD *)(v500 + 56) = v502;
  *(_OWORD *)(v500 + 72) = v503;
  *(_OWORD *)(v500 + 96) = v779;
  *(_OWORD *)(v500 + 128) = v781;
  *(_OWORD *)(v500 + 152) = v504;
  *(_OWORD *)(v500 + 176) = v509;
  *(_OWORD *)(v500 + 200) = v758;
  *(_QWORD *)(v500 + 552) = v516;
  *(_QWORD *)(v500 + 592) = &off_24C9B2800;
  *(_QWORD *)(v500 + 616) = v729;
  *(_OWORD *)(v500 + 224) = v505;
  *(_OWORD *)(v500 + 240) = v506;
  *(_OWORD *)(v500 + 264) = v762;
  *(_OWORD *)(v500 + 296) = v764;
  *(_OWORD *)(v500 + 320) = v507;
  *(_OWORD *)(v500 + 368) = v510;
  *(_OWORD *)(v500 + 392) = v511;
  *(_OWORD *)(v500 + 408) = v512;
  *(_OWORD *)(v500 + 432) = v513;
  *(_OWORD *)(v500 + 464) = v514;
  *(_OWORD *)(v500 + 488) = v515;
  *(_OWORD *)(v500 + 512) = *(_OWORD *)&v722[8];
  v517 = v727;
  *(_OWORD *)(v500 + 560) = v726;
  *(_OWORD *)(v500 + 576) = v517;
  v518 = v728;
  v519 = v730;
  v520 = v731;
  *(_QWORD *)(v500 + 696) = v703;
  *(_QWORD *)&v702[8] = 0;
  *(_QWORD *)&v702[16] = 0;
  v703 = 0;
  *(_QWORD *)(v500 + 720) = v705;
  *(_OWORD *)(v500 + 600) = v518;
  v521 = v704;
  v704 = 0uLL;
  v705 = 0;
  *(_OWORD *)(v500 + 632) = v519;
  v522 = v706;
  v706 = 0uLL;
  *(_OWORD *)(v500 + 656) = v520;
  v523 = v707;
  v707 = 0uLL;
  *(_QWORD *)(v500 + 784) = v710;
  *(_OWORD *)(v500 + 704) = v521;
  v524 = v709;
  *((_QWORD *)&v709 + 1) = 0;
  v710 = 0;
  *(_OWORD *)(v500 + 728) = v522;
  *(_OWORD *)(v500 + 744) = v523;
  v525 = v712;
  v526 = v714;
  v714 = 0uLL;
  *(_QWORD *)(v500 + 864) = v683;
  *(_OWORD *)(v500 + 768) = v524;
  v527 = *(_OWORD *)&v682[1];
  v682[1] = 0;
  v682[2] = 0;
  v683 = 0;
  *(_QWORD *)(v500 + 888) = v685;
  v684 = 0uLL;
  v685 = 0;
  *(_OWORD *)(v500 + 800) = v525;
  v528 = v686;
  v686 = 0uLL;
  *(_OWORD *)(v500 + 824) = v526;
  v529 = v687;
  v687 = 0uLL;
  *(_QWORD *)(v500 + 952) = v690;
  *(_OWORD *)(v500 + 848) = v527;
  v530 = v689;
  *((_QWORD *)&v689 + 1) = 0;
  v690 = 0;
  v773 = 0uLL;
  v774 = 0;
  v775 = 0uLL;
  v776 = 0;
  v777 = 0uLL;
  v778 = 0uLL;
  v779 = 0uLL;
  *(_QWORD *)(v500 + 120) = &off_24C9B2520;
  v780 = 0;
  *(_QWORD *)&v781 = 0;
  *(_QWORD *)(v500 + 144) = &off_24C9B2310;
  *((_QWORD *)&v781 + 1) = 0;
  v782 = 0uLL;
  *(_OWORD *)&v756[8] = 0uLL;
  v757 = 0;
  v758 = 0uLL;
  v759 = 0;
  v760 = 0uLL;
  v761 = 0uLL;
  v762 = 0uLL;
  *(_QWORD *)(v500 + 288) = &off_24C9B2520;
  v763 = 0;
  *(_QWORD *)&v764 = 0;
  *(_QWORD *)(v500 + 312) = &off_24C9B2310;
  *((_QWORD *)&v764 + 1) = 0;
  v765 = 0uLL;
  *(_OWORD *)&__p[8] = 0uLL;
  v740 = 0;
  v741 = 0uLL;
  v742 = 0;
  v743 = 0uLL;
  v744 = 0uLL;
  v745 = 0uLL;
  *(_QWORD *)(v500 + 456) = &off_24C9B2520;
  v746 = 0;
  *(_QWORD *)&v747 = 0;
  *(_QWORD *)(v500 + 480) = &off_24C9B2310;
  *((_QWORD *)&v747 + 1) = 0;
  v748 = 0uLL;
  *(_OWORD *)&v722[8] = 0uLL;
  v723 = 0;
  v724 = 0uLL;
  v725 = 0;
  v726 = 0uLL;
  v727 = 0uLL;
  v728 = 0uLL;
  *(_QWORD *)(v500 + 624) = &off_24C9B2520;
  v729 = 0;
  *(_QWORD *)&v730 = 0;
  *(_QWORD *)(v500 + 648) = &off_24C9B2310;
  *((_QWORD *)&v730 + 1) = 0;
  v731 = 0uLL;
  *(_QWORD *)(v500 + 792) = &off_24C9B2520;
  *(_QWORD *)&v709 = 0;
  v712 = 0uLL;
  *(_QWORD *)(v500 + 816) = &off_24C9B2310;
  *(_OWORD *)(v500 + 896) = v528;
  *(_OWORD *)(v500 + 912) = v529;
  *(_OWORD *)(v500 + 936) = v530;
  *(_QWORD *)(v500 + 960) = &off_24C9B2520;
  *(_OWORD *)(v500 + 968) = v692;
  *(_QWORD *)&v689 = 0;
  v692 = 0uLL;
  *(_QWORD *)(v500 + 984) = &off_24C9B2310;
  *(_OWORD *)(v500 + 992) = v694;
  v694 = 0uLL;
  v531 = *(_OWORD *)&v662[1];
  *(_QWORD *)(v500 + 1032) = v663;
  *(_OWORD *)(v500 + 1016) = v531;
  v662[1] = 0;
  v662[2] = 0;
  v663 = 0;
  v532 = v664;
  *(_QWORD *)(v500 + 1056) = v665;
  *(_OWORD *)(v500 + 1040) = v532;
  v664 = 0uLL;
  v665 = 0;
  v533 = v666;
  v666 = 0uLL;
  v534 = v667;
  *(_OWORD *)(v500 + 1064) = v533;
  *(_OWORD *)(v500 + 1080) = v534;
  v667 = 0uLL;
  *(_OWORD *)(v500 + 1104) = v669;
  *(_QWORD *)(v500 + 1120) = v670;
  *((_QWORD *)&v669 + 1) = 0;
  v670 = 0;
  *(_OWORD *)(v500 + 1136) = v672;
  *(_QWORD *)&v669 = 0;
  v672 = 0uLL;
  *(_QWORD *)(v500 + 1152) = &off_24C9B2310;
  *(_OWORD *)(v500 + 1160) = v674;
  v674 = 0uLL;
  v535 = *(_OWORD *)&v642[1];
  *(_QWORD *)(v500 + 1200) = v643;
  *(_OWORD *)(v500 + 1184) = v535;
  v642[1] = 0;
  v642[2] = 0;
  v643 = 0;
  v536 = v644;
  *(_QWORD *)(v500 + 1224) = v645;
  *(_OWORD *)(v500 + 1208) = v536;
  v644 = 0uLL;
  v645 = 0;
  *(_OWORD *)(v500 + 1232) = v646;
  v646 = 0uLL;
  *(_OWORD *)(v500 + 1248) = v647;
  v647 = 0uLL;
  *(_OWORD *)(v500 + 1272) = v649;
  *(_QWORD *)(v500 + 1288) = v650;
  *((_QWORD *)&v649 + 1) = 0;
  v650 = 0;
  *(_QWORD *)(v500 + 1296) = &off_24C9B2520;
  *(_OWORD *)(v500 + 1304) = v652;
  *(_QWORD *)&v649 = 0;
  v652 = 0uLL;
  *(_QWORD *)(v500 + 1320) = &off_24C9B2310;
  *(_OWORD *)(v500 + 1328) = v654;
  v654 = 0uLL;
  v537 = *(_OWORD *)&v622[1];
  *(_QWORD *)(v500 + 1368) = v623;
  *(_OWORD *)(v500 + 1352) = v537;
  v622[1] = 0;
  v622[2] = 0;
  v623 = 0;
  v538 = v624;
  *(_QWORD *)(v500 + 1392) = v625;
  *(_OWORD *)(v500 + 1376) = v538;
  v624 = 0uLL;
  v625 = 0;
  *(_OWORD *)(v500 + 1400) = v626;
  v626 = 0uLL;
  *(_OWORD *)(v500 + 1416) = v627;
  v627 = 0uLL;
  *(_QWORD *)(v500 + 1432) = &off_24C9B2630;
  *(_OWORD *)(v500 + 1440) = v629;
  *(_QWORD *)(v500 + 1456) = v630;
  *((_QWORD *)&v629 + 1) = 0;
  v630 = 0;
  *(_QWORD *)(v500 + 1464) = &off_24C9B25C0;
  *(_OWORD *)(v500 + 1472) = v632;
  *(_QWORD *)&v629 = 0;
  v632 = 0uLL;
  *(_QWORD *)(v500 + 1488) = &off_24C9B2310;
  *(_OWORD *)(v500 + 1496) = v634;
  v634 = 0uLL;
  *(_QWORD *)(v500 + 1512) = &off_24C9B24F0;
  v539 = *(_OWORD *)&v605[1];
  *(_QWORD *)(v500 + 1536) = v606;
  *(_OWORD *)(v500 + 1520) = v539;
  v605[1] = 0;
  v605[2] = 0;
  v540 = v607;
  v541 = v612;
  *(_QWORD *)(v500 + 1560) = v608;
  *(_OWORD *)(v500 + 1544) = v540;
  v606 = 0;
  v607 = 0uLL;
  v608 = 0;
  *(_OWORD *)(v500 + 1568) = v609;
  v609 = 0uLL;
  *(_OWORD *)(v500 + 1584) = v610;
  v610 = 0uLL;
  *(_QWORD *)(v500 + 1600) = &off_24C9B2558;
  v542 = v611;
  v611 = 0uLL;
  *(_OWORD *)(v500 + 1608) = v542;
  *(_QWORD *)(v500 + 1624) = v541;
  *(_QWORD *)(v500 + 1632) = &off_24C9B2520;
  *(_OWORD *)(v500 + 1640) = v613;
  v612 = 0;
  v613 = 0uLL;
  *(_QWORD *)(v500 + 1656) = &off_24C9B2310;
  *(_OWORD *)(v500 + 1664) = v614;
  v614 = 0uLL;
  *a1 = v500;
  sub_20E9643EC((uint64_t)v605);
  if (v459)
  {
    v543 = (unint64_t *)&v459->__shared_owners_;
    do
      v544 = __ldaxr(v543);
    while (__stlxr(v544 - 1, v543));
    if (!v544)
    {
      ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
      std::__shared_weak_count::__release_weak(v459);
    }
  }
  if (SHIBYTE(v604) < 0)
    operator delete(v603[0]);
  sub_20E9647BC((uint64_t)v622);
  v545 = v616;
  if (v616)
  {
    v546 = (unint64_t *)&v616->__shared_owners_;
    do
      v547 = __ldaxr(v546);
    while (__stlxr(v547 - 1, v546));
    if (!v547)
    {
      ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
      std::__shared_weak_count::__release_weak(v545);
    }
  }
  v548 = v618;
  if (v618)
  {
    v549 = (unint64_t *)&v618->__shared_owners_;
    do
      v550 = __ldaxr(v549);
    while (__stlxr(v550 - 1, v549));
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
      std::__shared_weak_count::__release_weak(v548);
      if ((SHIBYTE(v621) & 0x80000000) == 0)
        goto LABEL_734;
      goto LABEL_733;
    }
  }
  if (SHIBYTE(v621) < 0)
LABEL_733:
    operator delete((void *)v620);
LABEL_734:
  sub_20E964C88((uint64_t)v642);
  v551 = v636;
  if (v636)
  {
    v552 = (unint64_t *)&v636->__shared_owners_;
    do
      v553 = __ldaxr(v552);
    while (__stlxr(v553 - 1, v552));
    if (!v553)
    {
      ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
      std::__shared_weak_count::__release_weak(v551);
    }
  }
  v554 = v638;
  if (v638)
  {
    v555 = (unint64_t *)&v638->__shared_owners_;
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
      std::__shared_weak_count::__release_weak(v554);
      if ((SHIBYTE(v641) & 0x80000000) == 0)
        goto LABEL_745;
      goto LABEL_744;
    }
  }
  if (SHIBYTE(v641) < 0)
LABEL_744:
    operator delete((void *)v640);
LABEL_745:
  sub_20E964F34((uint64_t)v662);
  v557 = v656;
  if (v656)
  {
    v558 = (unint64_t *)&v656->__shared_owners_;
    do
      v559 = __ldaxr(v558);
    while (__stlxr(v559 - 1, v558));
    if (!v559)
    {
      ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
      std::__shared_weak_count::__release_weak(v557);
    }
  }
  v560 = v658;
  if (v658)
  {
    v561 = (unint64_t *)&v658->__shared_owners_;
    do
      v562 = __ldaxr(v561);
    while (__stlxr(v562 - 1, v561));
    if (!v562)
    {
      ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
      std::__shared_weak_count::__release_weak(v560);
      if ((SHIBYTE(v661) & 0x80000000) == 0)
        goto LABEL_756;
      goto LABEL_755;
    }
  }
  if (SHIBYTE(v661) < 0)
LABEL_755:
    operator delete((void *)v660);
LABEL_756:
  sub_20E965140((uint64_t)v682);
  v563 = v676;
  if (v676)
  {
    v564 = (unint64_t *)&v676->__shared_owners_;
    do
      v565 = __ldaxr(v564);
    while (__stlxr(v565 - 1, v564));
    if (!v565)
    {
      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
      std::__shared_weak_count::__release_weak(v563);
    }
  }
  v566 = v678;
  if (v678)
  {
    v567 = (unint64_t *)&v678->__shared_owners_;
    do
      v568 = __ldaxr(v567);
    while (__stlxr(v568 - 1, v567));
    if (!v568)
    {
      ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
      std::__shared_weak_count::__release_weak(v566);
      if ((SHIBYTE(v681) & 0x80000000) == 0)
        goto LABEL_767;
      goto LABEL_766;
    }
  }
  if (SHIBYTE(v681) < 0)
LABEL_766:
    operator delete((void *)v680);
LABEL_767:
  sub_20E9653EC((uint64_t)v702);
  v569 = v696;
  if (v696)
  {
    v570 = (unint64_t *)&v696->__shared_owners_;
    do
      v571 = __ldaxr(v570);
    while (__stlxr(v571 - 1, v570));
    if (!v571)
    {
      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
      std::__shared_weak_count::__release_weak(v569);
    }
  }
  v572 = v698;
  if (v698)
  {
    v573 = (unint64_t *)&v698->__shared_owners_;
    do
      v574 = __ldaxr(v573);
    while (__stlxr(v574 - 1, v573));
    if (!v574)
    {
      ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
      std::__shared_weak_count::__release_weak(v572);
      if ((SHIBYTE(v701) & 0x80000000) == 0)
        goto LABEL_778;
      goto LABEL_777;
    }
  }
  if (SHIBYTE(v701) < 0)
LABEL_777:
    operator delete((void *)v700);
LABEL_778:
  sub_20E965698((uint64_t)v722);
  v575 = v716;
  if (v716)
  {
    v576 = (unint64_t *)&v716->__shared_owners_;
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
  v578 = v718;
  if (v718)
  {
    v579 = (unint64_t *)&v718->__shared_owners_;
    do
      v580 = __ldaxr(v579);
    while (__stlxr(v580 - 1, v579));
    if (!v580)
    {
      ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
      std::__shared_weak_count::__release_weak(v578);
      if ((SHIBYTE(v721) & 0x80000000) == 0)
        goto LABEL_789;
      goto LABEL_788;
    }
  }
  if (SHIBYTE(v721) < 0)
LABEL_788:
    operator delete((void *)v720);
LABEL_789:
  sub_20E965944((uint64_t)__p);
  v581 = v733;
  if (v733)
  {
    v582 = (unint64_t *)&v733->__shared_owners_;
    do
      v583 = __ldaxr(v582);
    while (__stlxr(v583 - 1, v582));
    if (!v583)
    {
      ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
      std::__shared_weak_count::__release_weak(v581);
    }
  }
  v584 = v735;
  if (v735)
  {
    v585 = (unint64_t *)&v735->__shared_owners_;
    do
      v586 = __ldaxr(v585);
    while (__stlxr(v586 - 1, v585));
    if (!v586)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
      if ((SHIBYTE(v738) & 0x80000000) == 0)
        goto LABEL_800;
      goto LABEL_799;
    }
  }
  if (SHIBYTE(v738) < 0)
LABEL_799:
    operator delete((void *)v737);
LABEL_800:
  sub_20E965BF0((uint64_t)v756);
  v587 = v750;
  if (v750)
  {
    v588 = (unint64_t *)&v750->__shared_owners_;
    do
      v589 = __ldaxr(v588);
    while (__stlxr(v589 - 1, v588));
    if (!v589)
    {
      ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
      std::__shared_weak_count::__release_weak(v587);
    }
  }
  v590 = v752;
  if (v752)
  {
    v591 = (unint64_t *)&v752->__shared_owners_;
    do
      v592 = __ldaxr(v591);
    while (__stlxr(v592 - 1, v591));
    if (!v592)
    {
      ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
      std::__shared_weak_count::__release_weak(v590);
      if ((SHIBYTE(v755) & 0x80000000) == 0)
        goto LABEL_811;
      goto LABEL_810;
    }
  }
  if (SHIBYTE(v755) < 0)
LABEL_810:
    operator delete((void *)__src);
LABEL_811:
  sub_20E965E9C((uint64_t)v772);
  v593 = v767;
  if (v767)
  {
    v594 = (unint64_t *)&v767->__shared_owners_;
    do
      v595 = __ldaxr(v594);
    while (__stlxr(v595 - 1, v594));
    if (!v595)
    {
      ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
      std::__shared_weak_count::__release_weak(v593);
    }
  }
  v596 = v769;
  if (!v769)
    goto LABEL_820;
  v597 = (unint64_t *)&v769->__shared_owners_;
  do
    v598 = __ldaxr(v597);
  while (__stlxr(v598 - 1, v597));
  if (v598)
  {
LABEL_820:
    if ((SHIBYTE(v771) & 0x80000000) == 0)
      return;
    goto LABEL_821;
  }
  ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
  std::__shared_weak_count::__release_weak(v596);
  if (SHIBYTE(v771) < 0)
LABEL_821:
    operator delete((void *)__dst);
}

void sub_20EA30A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  void *v67;
  int v68;

  sub_20E86665C((uint64_t)&STACK[0x9B0]);
  sub_20E86665C((uint64_t)&STACK[0x9C0]);
  if (v68 < 0)
    operator delete(v67);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a24);
  if (a32 < 0)
    operator delete(__p);
  sub_20E9647BC((uint64_t)&a67);
  sub_20E86665C((uint64_t)&a55);
  sub_20E86665C((uint64_t)&a57);
  if (a65 < 0)
    operator delete(a60);
  sub_20E964C88((uint64_t)&STACK[0x290]);
  sub_20E86665C((uint64_t)&STACK[0x248]);
  sub_20E86665C((uint64_t)&STACK[0x258]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_20E964F34((uint64_t)&STACK[0x380]);
  sub_20E86665C((uint64_t)&STACK[0x338]);
  sub_20E86665C((uint64_t)&STACK[0x348]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  sub_20E965140((uint64_t)&STACK[0x470]);
  sub_20E86665C((uint64_t)&STACK[0x428]);
  sub_20E86665C((uint64_t)&STACK[0x438]);
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  sub_20E9653EC((uint64_t)&STACK[0x560]);
  sub_20E86665C((uint64_t)&STACK[0x518]);
  sub_20E86665C((uint64_t)&STACK[0x528]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  sub_20E965698((uint64_t)&STACK[0x650]);
  sub_20E86665C((uint64_t)&STACK[0x608]);
  sub_20E86665C((uint64_t)&STACK[0x618]);
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete((void *)STACK[0x630]);
  sub_20E965944((uint64_t)&STACK[0x740]);
  sub_20E86665C((uint64_t)&STACK[0x6F8]);
  sub_20E86665C((uint64_t)&STACK[0x708]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  sub_20E965BF0((uint64_t)&STACK[0x828]);
  sub_20E86665C((uint64_t)&STACK[0x7E8]);
  sub_20E86665C((uint64_t)&STACK[0x7F8]);
  if (SLOBYTE(STACK[0x827]) < 0)
    operator delete((void *)STACK[0x810]);
  sub_20E965E9C((uint64_t)&STACK[0x908]);
  sub_20E86665C((uint64_t)&STACK[0x8D0]);
  sub_20E86665C((uint64_t)&STACK[0x8E0]);
  if ((SLOBYTE(STACK[0x907]) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete((void *)STACK[0x8F0]);
  _Unwind_Resume(a1);
}

void sub_20EA30FA8()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 224);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EA30E04);
}

void sub_20EA30FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;

  if (v33)
  {
    std::__shared_weak_count::__release_weak(v33);
    sub_20E86665C(v32);
    sub_20E86665C(v31);
    if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C(v34 - 192);
        sub_20E86665C((uint64_t)&a31);
        JUMPOUT(0x20EA310B0);
      }
LABEL_4:
      operator delete((void *)STACK[0x298]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v32);
    sub_20E86665C(v31);
    if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2B0]);
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EA31040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  sub_20E86665C((uint64_t)&a31);
  JUMPOUT(0x20EA310A8);
}

void sub_20EA310E8()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 192);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EA310B0);
}

void sub_20EA31104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;

  if (v61)
  {
    std::__shared_weak_count::__release_weak(v61);
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x3B7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a31);
        sub_20E86665C((uint64_t)&a61);
        JUMPOUT(0x20EA311F4);
      }
LABEL_4:
      operator delete((void *)STACK[0x388]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x3B7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3A0]);
  if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EA31184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  sub_20E86665C((uint64_t)&a61);
  JUMPOUT(0x20EA311ECLL);
}

void sub_20EA3122C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  int v31;
  void *v32;

  sub_20E86665C((uint64_t)&a31);
  if (v31 < 0)
    operator delete(v32);
  JUMPOUT(0x20EA311F4);
}

void sub_20EA31248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;

  if (v61)
  {
    std::__shared_weak_count::__release_weak(v61);
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x48F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a61);
        sub_20E86665C((uint64_t)&STACK[0x290]);
        JUMPOUT(0x20EA31338);
      }
LABEL_4:
      operator delete((void *)STACK[0x478]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v63);
    sub_20E86665C(v62);
    if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x490]);
  if ((SLOBYTE(STACK[0x48F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EA312C8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  JUMPOUT(0x20EA31330);
}

void sub_20EA31370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  int v61;
  void *v62;

  sub_20E86665C((uint64_t)&a61);
  if (v61 < 0)
    operator delete(v62);
  JUMPOUT(0x20EA31338);
}

void sub_20EA3138C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x57F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x290]);
        sub_20E86665C((uint64_t)&STACK[0x380]);
        JUMPOUT(0x20EA3147CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x568]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x597]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x580]);
  if ((SLOBYTE(STACK[0x57F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EA3140C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  JUMPOUT(0x20EA31474);
}

void sub_20EA314B4()
{
  int v0;
  void *v1;

  sub_20E86665C((uint64_t)&STACK[0x290]);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EA3147CLL);
}

void sub_20EA314D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_20E86665C((uint64_t)&STACK[0x290]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  sub_20E86665C((uint64_t)&a31);
  sub_20E86665C((uint64_t)&a61);
  JUMPOUT(0x20EA30F00);
}

void sub_20EA314F4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  JUMPOUT(0x20EA3155CLL);
}

void sub_20EA31568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;

  sub_20E86665C((uint64_t)&STACK[0x290]);
  if (v61 < 0)
    JUMPOUT(0x20EA3157CLL);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  sub_20E86665C((uint64_t)&a31);
  sub_20E86665C((uint64_t)&a61);
  JUMPOUT(0x20EA30F00);
}

void sub_20EA315B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_20E86665C((uint64_t)&STACK[0x380]);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  if (SLOBYTE(STACK[0x667]) < 0)
    operator delete((void *)STACK[0x650]);
  sub_20E86665C((uint64_t)&a61);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  JUMPOUT(0x20EA30F28);
}

void sub_20EA315DC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EA31644);
}

void sub_20EA31650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;

  sub_20E86665C((uint64_t)&STACK[0x380]);
  if (v61 < 0)
    JUMPOUT(0x20EA31664);
  if (SLOBYTE(STACK[0x667]) < 0)
    operator delete((void *)STACK[0x650]);
  sub_20E86665C((uint64_t)&a61);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  JUMPOUT(0x20EA30F28);
}

void sub_20EA316A0()
{
  sub_20E86665C((uint64_t)&STACK[0x470]);
  sub_20E86665C((uint64_t)&STACK[0x560]);
  if (SLOBYTE(STACK[0x667]) < 0)
    operator delete((void *)STACK[0x650]);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  JUMPOUT(0x20EA30F50);
}

void sub_20EA316C4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x560]);
  JUMPOUT(0x20EA3172CLL);
}

void sub_20EA31738()
{
  int v0;

  sub_20E86665C((uint64_t)&STACK[0x470]);
  if (v0 < 0)
    JUMPOUT(0x20EA3174CLL);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  JUMPOUT(0x20EA30F50);
}

void sub_20EA31788()
{
  sub_20E86665C((uint64_t)&STACK[0x560]);
  sub_20E86665C((uint64_t)&STACK[0x650]);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EA30F78);
}

void sub_20EA317AC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x650]);
  JUMPOUT(0x20EA31814);
}

void sub_20EA31820()
{
  int v0;

  sub_20E86665C((uint64_t)&STACK[0x560]);
  if (v0 < 0)
    JUMPOUT(0x20EA31834);
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete((void *)STACK[0x828]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EA30F78);
}

uint64_t sub_20EA31870(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA318D8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA31940(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  sub_20E9F8FB4(v2, v6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA319A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA319BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA31A24(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA31A8C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6[2];

  v2 = *(uint64_t **)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  sub_20E9F90C8(v2, v6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA31AF0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA31B08(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA31B70(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA31BD8(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *a2;
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = std::__shared_weak_count::lock(v2);
    if (!v7)
      goto LABEL_16;
    v8 = v7;
    if (v4)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v3 + 128);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(v9 + 40);
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v7;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      std::__shared_weak_count::__release_weak(v2);
    }
    else
    {
LABEL_16:
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20EA31CE0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA31D48(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA31DB0(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *a2;
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = std::__shared_weak_count::lock(v2);
    if (!v7)
      goto LABEL_16;
    v8 = v7;
    if (v4)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v3 + 128);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(v9 + 56);
      *(_QWORD *)(v9 + 48) = v4;
      *(_QWORD *)(v9 + 56) = v7;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      std::__shared_weak_count::__release_weak(v2);
    }
    else
    {
LABEL_16:
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20EA31EBC(uint64_t a1)
{
  sub_20EA33A94(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA31EE0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 *v67;
  uint64_t v68;
  std::__shared_weak_count *v69[2];
  __int128 v70;
  uint64_t v71;
  __int128 *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x88uLL);
    sub_20EA33CBC((uint64_t)v4, (uint64_t *)a2);
    v5 = v4 + 1;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (uint64_t *)a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 7;
    std::mutex::lock((std::mutex *)(v8 + 7));
    *(_QWORD *)&v70 = v9;
    *((_QWORD *)&v70 + 1) = v8;
    if (!*((_BYTE *)v8 + 48))
      sub_20E866B34();
    v10 = v8[4];
    v11 = *v8;
    v12 = (std::__shared_weak_count **)(*v8 + 16 * v10);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v12 = v5;
    v15 = v11 + 16 * v10;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v8[1] - *v8) >> 4;
    v20 = v8[5];
    v21 = v8[4] + 1;
    if (v21 >= v19)
      v22 = (v8[1] - *v8) >> 4;
    else
      v22 = 0;
    v8[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v8[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v8[3] = v23 - v19;
      v24 = (std::mutex **)v70;
      if (!(_QWORD)v70)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v70 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v70 = v38;
            *((_QWORD *)&v70 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v70 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9BBFE0;
        *(_OWORD *)(v43 + 8) = v70;
        v70 = 0uLL;
        *((_QWORD *)v43 + 3) = v5;
        *((_QWORD *)v43 + 4) = v4;
        v71 = 0;
        v72 = 0;
        v74 = v43;
        sub_210216F3C(*v34, (uint64_t)v73);
        v44 = v74;
        if (v74 == v73)
        {
          v45 = 4;
          v44 = v73;
        }
        else
        {
          if (!v74)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v4)
        {
          v46 = (unint64_t *)&v4->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        return;
      }
    }
    else
    {
      v8[5] = v20 + 1;
      v24 = (std::mutex **)v70;
      if (!(_QWORD)v70)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v69 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v69[0] = v29;
      v69[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v69 = 0uLL;
    }
  }
  v48 = *(_QWORD *)(a2 + 72);
  v49 = *(_QWORD *)(a2 + 80);
  v50 = v49 - v48;
  if (v49 == v48)
  {
    v55 = 0;
    v64 = 0;
    v53 = 0;
  }
  else
  {
    v51 = 0x8E38E38E38E38E39 * (v50 >> 4);
    if (v51 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v52 = (char *)operator new(v50);
    v53 = v52;
    v54 = 0;
    v55 = &v52[144 * v51];
    do
    {
      v56 = v48 + v54;
      v57 = &v52[v54];
      v58 = *(_OWORD *)(v48 + v54);
      v59 = *(_OWORD *)(v48 + v54 + 16);
      v60 = *(_OWORD *)(v48 + v54 + 48);
      *((_OWORD *)v57 + 2) = *(_OWORD *)(v48 + v54 + 32);
      *((_OWORD *)v57 + 3) = v60;
      *(_OWORD *)v57 = v58;
      *((_OWORD *)v57 + 1) = v59;
      v62 = *(_OWORD *)(v48 + v54 + 96);
      v61 = *(_OWORD *)(v48 + v54 + 112);
      v63 = *(_OWORD *)(v48 + v54 + 80);
      *(_OWORD *)(v57 + 121) = *(_OWORD *)(v48 + v54 + 121);
      *((_OWORD *)v57 + 6) = v62;
      *((_OWORD *)v57 + 7) = v61;
      *((_OWORD *)v57 + 5) = v63;
      *((_OWORD *)v57 + 4) = *(_OWORD *)(v48 + v54 + 64);
      v54 += 144;
    }
    while (v56 + 144 != v49);
    v64 = &v52[v54];
  }
  v72 = 0;
  v65 = (char *)operator new(0x88uLL);
  *(_QWORD *)v65 = &off_24C9BC060;
  *(_OWORD *)(v65 + 8) = *(_OWORD *)v69;
  *((_QWORD *)v65 + 3) = *(_QWORD *)a2;
  *((_DWORD *)v65 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v65 + 36) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v65 + 11) = *(_DWORD *)(a2 + 20);
  *((_DWORD *)v65 + 16) = *(_DWORD *)(a2 + 40);
  *((_OWORD *)v65 + 3) = *(_OWORD *)(a2 + 24);
  v66 = *(_OWORD *)(a2 + 44);
  *((_OWORD *)v65 + 5) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v65 + 68) = v66;
  *((_QWORD *)v65 + 12) = v53;
  *((_QWORD *)v65 + 13) = v64;
  *((_QWORD *)v65 + 14) = v55;
  *(_OWORD *)(v65 + 120) = *(_OWORD *)(a2 + 96);
  v72 = (__int128 *)v65;
  sub_210216F3C(*v25, (uint64_t)&v70);
  v67 = v72;
  if (v72 == &v70)
  {
    v68 = 4;
    v67 = &v70;
  }
  else
  {
    if (!v72)
      return;
    v68 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
}

void sub_20EA32490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_20EA33C80(&a11);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_20EA33C80(&a11);
  _Unwind_Resume(a1);
}

void sub_20EA324E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA325EC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA325FC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA32608(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA32618(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  __int128 v75;
  __int128 *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  __int128 *v81;
  std::string *v82;
  std::runtime_error *exception;
  std::runtime_error *v84;
  _QWORD *v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  std::runtime_error v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91[2];
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  int v97;
  _BYTE v98[28];
  void *__p;
  char *v100;
  char *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  _QWORD *v106;
  __int128 *v107;
  _QWORD v108[3];
  std::string v109;
  std::string *v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v105 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v105 + 1) = 45;
    v80 = (_QWORD *)a1[6];
    v79 = a1 + 6;
    v78 = v80;
    v81 = (__int128 *)*((unsigned __int8 *)v79 + 23);
    if ((char)v81 < 0)
      v81 = (__int128 *)v79[1];
    else
      v78 = v79;
    v106 = v78;
    v107 = v81;
    sub_20E8778D4((uint64_t)&v105, (uint64_t)v108, 0, 0, &v109);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v109;
    else
      v82 = (std::string *)v109.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v88, (const char *)v82);
    v88.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v84 = std::runtime_error::runtime_error(exception, &v88);
    v84->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v84, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v30 = (uint64_t **)a1[9];
    v91[0] = 0;
    v91[1] = 0;
    v31 = (std::__shared_weak_count *)a1[5];
    if (v31)
    {
      v32 = std::__shared_weak_count::lock(v31);
      if (v32)
      {
        v33 = v32;
        v34 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
        do
          v36 = __ldxr(p_shared_weak_owners);
        while (__stxr(v36 + 1, p_shared_weak_owners));
        v91[0] = v34;
        v91[1] = v32;
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        v91[0] = 0;
        v91[1] = 0;
      }
    }
    v92 = *(_QWORD *)a2;
    v93 = *(_DWORD *)(a2 + 8);
    v94 = *(_QWORD *)(a2 + 12);
    v95 = *(_DWORD *)(a2 + 20);
    v96 = *(_OWORD *)(a2 + 24);
    v97 = *(_DWORD *)(a2 + 40);
    *(_OWORD *)&v98[12] = *(_OWORD *)(a2 + 56);
    *(_OWORD *)v98 = *(_OWORD *)(a2 + 44);
    v100 = 0;
    v101 = 0;
    __p = 0;
    v56 = *(_QWORD *)(a2 + 72);
    v57 = *(_QWORD *)(a2 + 80);
    v58 = v57 - v56;
    if (v57 == v56)
    {
      v63 = 0;
      v72 = 0;
      v61 = 0;
    }
    else
    {
      v59 = 0x8E38E38E38E38E39 * (v58 >> 4);
      if (v59 >= 0x1C71C71C71C71C8)
        sub_20E969238();
      v60 = (char *)operator new(v58);
      v61 = v60;
      v62 = 0;
      v63 = &v60[144 * v59];
      __p = v60;
      v101 = v63;
      do
      {
        v64 = v56 + v62;
        v65 = &v60[v62];
        v66 = *(_OWORD *)(v56 + v62);
        v67 = *(_OWORD *)(v56 + v62 + 16);
        v68 = *(_OWORD *)(v56 + v62 + 48);
        *((_OWORD *)v65 + 2) = *(_OWORD *)(v56 + v62 + 32);
        *((_OWORD *)v65 + 3) = v68;
        *(_OWORD *)v65 = v66;
        *((_OWORD *)v65 + 1) = v67;
        v70 = *(_OWORD *)(v56 + v62 + 96);
        v69 = *(_OWORD *)(v56 + v62 + 112);
        v71 = *(_OWORD *)(v56 + v62 + 80);
        *(_OWORD *)(v65 + 121) = *(_OWORD *)(v56 + v62 + 121);
        *((_OWORD *)v65 + 6) = v70;
        *((_OWORD *)v65 + 7) = v69;
        *((_OWORD *)v65 + 5) = v71;
        *((_OWORD *)v65 + 4) = *(_OWORD *)(v56 + v62 + 64);
        v62 += 144;
      }
      while (v64 + 144 != v57);
      v72 = &v60[v62];
      v100 = &v60[v62];
    }
    v102 = *(_OWORD *)(a2 + 96);
    v73 = operator new(0x20uLL);
    v73[1] = 0;
    v73[2] = 0;
    *v73 = &unk_24C9B85F0;
    v73[3] = *a3;
    *a3 = 0;
    v74 = (char *)operator new(0x98uLL);
    *(_QWORD *)v74 = &off_24C9BC160;
    *(_OWORD *)(v74 + 8) = *(_OWORD *)v91;
    v91[0] = 0;
    v91[1] = 0;
    *((_QWORD *)v74 + 3) = v92;
    *((_DWORD *)v74 + 8) = v93;
    *(_QWORD *)(v74 + 36) = v94;
    *((_DWORD *)v74 + 11) = v95;
    *((_DWORD *)v74 + 16) = v97;
    *((_OWORD *)v74 + 3) = v96;
    v75 = *(_OWORD *)v98;
    *((_OWORD *)v74 + 5) = *(_OWORD *)&v98[12];
    *(_OWORD *)(v74 + 68) = v75;
    *((_QWORD *)v74 + 12) = v61;
    *((_QWORD *)v74 + 13) = v72;
    *((_QWORD *)v74 + 14) = v63;
    v100 = 0;
    v101 = 0;
    __p = 0;
    *(_OWORD *)(v74 + 120) = v102;
    *((_QWORD *)v74 + 17) = v73 + 3;
    *((_QWORD *)v74 + 18) = v73;
    v103 = 0;
    v104 = 0;
    v107 = (__int128 *)v74;
    sub_210216F3C(*v30, (uint64_t)&v105);
    v76 = v107;
    if (v107 == &v105)
    {
      v77 = 4;
      v76 = &v105;
    }
    else
    {
      if (!v107)
        goto LABEL_73;
      v77 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
LABEL_73:
    if (__p)
    {
      v100 = (char *)__p;
      operator delete(__p);
    }
    v55 = v91[1];
    if (v91[1])
      goto LABEL_76;
    return;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v6[1].__vftable = *a3;
  v87 = v6;
  v85 = &v6[1].__vftable;
  v86 = &v6->__vftable;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (std::__shared_weak_count *)operator new(0x88uLL);
  sub_20EA33CBC((uint64_t)v9, (uint64_t *)a2);
  v10 = v9 + 1;
  v89 = v9 + 1;
  v90 = v9;
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v13 = (uint64_t *)a1[18];
  v14 = (_QWORD *)operator new();
  *v14 = v13 + 7;
  std::mutex::lock((std::mutex *)(v13 + 7));
  *(_QWORD *)&v105 = v14;
  *((_QWORD *)&v105 + 1) = v13;
  if (!*((_BYTE *)v13 + 48))
    sub_20E866B34();
  v15 = v13[4];
  v16 = *v13;
  v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  *v17 = v10;
  v20 = v16 + 16 * v15;
  v21 = *(std::__shared_weak_count **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v9;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (v13[1] - *v13) >> 4;
  v25 = v13[5];
  v26 = v13[4] + 1;
  if (v26 >= v24)
    v27 = (v13[1] - *v13) >> 4;
  else
    v27 = 0;
  v13[4] = v26 - v27;
  if (v25 != v24)
  {
    v13[5] = v25 + 1;
    v29 = (std::mutex **)v105;
    if (!(_QWORD)v105)
      goto LABEL_37;
    goto LABEL_36;
  }
  v28 = v13[3] + 1;
  if (v28 < v24)
    v24 = 0;
  v13[3] = v28 - v24;
  v29 = (std::mutex **)v105;
  if ((_QWORD)v105)
  {
LABEL_36:
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
  }
LABEL_37:
  v39 = (uint64_t **)a1[9];
  v105 = 0uLL;
  v40 = (std::__shared_weak_count *)a1[5];
  if (v40)
  {
    v41 = std::__shared_weak_count::lock(v40);
    if (v41)
    {
      v42 = v41;
      v43 = a1[4];
      v44 = (unint64_t *)&v41->__shared_weak_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      *(_QWORD *)&v105 = v43;
      *((_QWORD *)&v105 + 1) = v41;
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    else
    {
      v105 = 0uLL;
    }
  }
  v48 = (char *)operator new(0x38uLL);
  *(_QWORD *)v48 = &off_24C9BC0E0;
  *(_OWORD *)(v48 + 8) = v105;
  v105 = 0uLL;
  *((_QWORD *)v48 + 3) = v10;
  *((_QWORD *)v48 + 4) = v9;
  v106 = 0;
  v107 = 0;
  *((_QWORD *)v48 + 5) = v85;
  *((_QWORD *)v48 + 6) = v86;
  v108[0] = 0;
  v108[1] = 0;
  v110 = (std::string *)v48;
  sub_210216F3C(*v39, (uint64_t)&v109);
  v49 = v110;
  if (v110 == &v109)
  {
    v50 = 4;
    v49 = &v109;
    goto LABEL_50;
  }
  if (v110)
  {
    v50 = 5;
LABEL_50:
    (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
  }
  if (v90)
  {
    v51 = &v90->__shared_owners_;
    do
      v52 = __ldaxr((unint64_t *)v51);
    while (__stlxr(v52 - 1, (unint64_t *)v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v87)
  {
    v53 = (unint64_t *)&v87->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      v55 = v87;
LABEL_76:
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_20EA32E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::promise<void> *v30;
  uint64_t v31;
  std::exception_ptr v32;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v32.__ptr_ = &a15;
    std::promise<void>::set_exception(v30, v32);
    std::exception_ptr::~exception_ptr(&a15);
    std::runtime_error::~runtime_error(&a14);
    if (*(char *)(v31 - 113) < 0)
      operator delete(*(void **)(v31 - 136));
    JUMPOUT(0x20EA32D04);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA32F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = *(_QWORD **)(v3 - 112);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 136);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v3 - 192));
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA32FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  void *v12;

  operator delete(v12);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EA32FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA3300C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA33080(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BC1E0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA33190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA331F4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BC260;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA33304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA33368@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BC2E0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA33580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA33648@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BC360;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA33860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA33928(uint64_t a1)
{
  return sub_20EA33A94(a1 - 16);
}

void sub_20EA33930(uint64_t a1)
{
  sub_20EA33A94(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA33958(uint64_t a1)
{
  return sub_20EA33080((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA33960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA33368((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA33968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA33648((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA33970(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA33978(uint64_t a1)
{
  return sub_20EA33A94(a1 - 24);
}

void sub_20EA33980(uint64_t a1)
{
  sub_20EA33A94(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA339A8(uint64_t a1)
{
  return sub_20EA331F4((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA339B0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA339B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA33A20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA33A88(uint64_t a1, uint64_t *a2)
{
  sub_20EEF1218(**(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_20EA33A94(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BBDA0;
  *(_QWORD *)(a1 + 16) = &unk_24C9BBE18;
  *(_QWORD *)(a1 + 24) = &unk_24C9BBE58;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EA33C80(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_20EA33CBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C9BBF90;
  v4 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 36) = v5;
  v6 = *(_OWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)((char *)a2 + 44);
  v8 = *(_OWORD *)(a2 + 7);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 68) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v9 = a2[9];
  v10 = a2[10];
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0x8E38E38E38E38E39 * (v11 >> 4);
    if (v12 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v13 = (char *)operator new(v11);
    v14 = 0;
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = &v13[144 * v12];
    do
    {
      v15 = v9 + v14;
      v16 = &v13[v14];
      v17 = *(_OWORD *)(v9 + v14);
      v18 = *(_OWORD *)(v9 + v14 + 16);
      v19 = *(_OWORD *)(v9 + v14 + 48);
      *((_OWORD *)v16 + 2) = *(_OWORD *)(v9 + v14 + 32);
      *((_OWORD *)v16 + 3) = v19;
      *(_OWORD *)v16 = v17;
      *((_OWORD *)v16 + 1) = v18;
      v21 = *(_OWORD *)(v9 + v14 + 96);
      v20 = *(_OWORD *)(v9 + v14 + 112);
      v22 = *(_OWORD *)(v9 + v14 + 80);
      *(_OWORD *)(v16 + 121) = *(_OWORD *)(v9 + v14 + 121);
      *((_OWORD *)v16 + 6) = v21;
      *((_OWORD *)v16 + 7) = v20;
      *((_OWORD *)v16 + 5) = v22;
      *((_OWORD *)v16 + 4) = *(_OWORD *)(v9 + v14 + 64);
      v14 += 144;
    }
    while (v15 + 144 != v10);
    *(_QWORD *)(a1 + 104) = &v13[v14];
  }
  *(_OWORD *)(a1 + 120) = *((_OWORD *)a2 + 6);
  return a1;
}

void sub_20EA33E04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20EA33E28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA33E38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA33E68(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_20EA33E84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BBFE0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA33EC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BBFE0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA33F1C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BBFE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA33F8C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BBFE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA33FDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA34018(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA34050(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA34374((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA34218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA342FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA34368()
{
  return &unk_24C9BC040;
}

void sub_20EA34374(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA3440C()
{
  __break(1u);
}

void sub_20EA344B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA344D8);
}

_QWORD *sub_20EA344E4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BC060;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA3452C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BC060;
  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA34584(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x88uLL);
  *v2 = &off_24C9BC060;
  sub_20EA347DC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20EA345C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA345D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9BC060;
  return sub_20EA347DC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20EA345F4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA34634(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)__p[12];
  if (v2)
  {
    __p[13] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA34670(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA34374((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA34718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA34764(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA347D0()
{
  return &unk_24C9BC0C0;
}

uint64_t sub_20EA347DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v8;
  v9 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  v10 = *(_OWORD *)(a2 + 60);
  v11 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 60) = v10;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0x8E38E38E38E38E39 * (v14 >> 4);
    if (v15 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v16 = (char *)operator new(v14);
    v17 = 0;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = &v16[144 * v15];
    do
    {
      v18 = v12 + v17;
      v19 = &v16[v17];
      v20 = *(_OWORD *)(v12 + v17);
      v21 = *(_OWORD *)(v12 + v17 + 16);
      v22 = *(_OWORD *)(v12 + v17 + 48);
      *((_OWORD *)v19 + 2) = *(_OWORD *)(v12 + v17 + 32);
      *((_OWORD *)v19 + 3) = v22;
      *(_OWORD *)v19 = v20;
      *((_OWORD *)v19 + 1) = v21;
      v24 = *(_OWORD *)(v12 + v17 + 96);
      v23 = *(_OWORD *)(v12 + v17 + 112);
      v25 = *(_OWORD *)(v12 + v17 + 80);
      *(_OWORD *)(v19 + 121) = *(_OWORD *)(v12 + v17 + 121);
      *((_OWORD *)v19 + 6) = v24;
      *((_OWORD *)v19 + 7) = v23;
      *((_OWORD *)v19 + 5) = v25;
      *((_OWORD *)v19 + 4) = *(_OWORD *)(v12 + v17 + 64);
      v17 += 144;
    }
    while (v18 + 144 != v13);
    *(_QWORD *)(a1 + 96) = &v16[v17];
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

void sub_20EA34934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA3496C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[11];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[11];
  if (v5)
  {
LABEL_6:
    a1[12] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_20EA349EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC0E0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA34A74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC0E0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA34B0C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC0E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA34B9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC0E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA34C0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA34C8C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA34D08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA34374(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA34FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA35114(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0"
                                "_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA35180()
{
  return &unk_24C9BC140;
}

_QWORD *sub_20EA3518C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC160;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[12];
  if (v5)
  {
LABEL_6:
    a1[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA35218(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC160;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[12];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
  }
  a1[13] = v5;
  operator delete(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA352B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_24C9BC160;
  sub_20EA3565C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20EA352F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA35308(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9BC160;
  return sub_20EA3565C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20EA35324(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[12];
  if (v5)
  {
LABEL_6:
    a1[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA353A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)__p[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)__p[12];
  if (v5)
  {
LABEL_6:
    __p[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA35428(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[17];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA34374((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA3553C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA355E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA35650()
{
  return &unk_24C9BC1C0;
}

uint64_t sub_20EA3565C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v8;
  v9 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  v10 = *(_OWORD *)(a2 + 60);
  v11 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 60) = v10;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = 0x8E38E38E38E38E39 * (v14 >> 4);
    if (v15 >= 0x1C71C71C71C71C8)
      sub_20E969238();
    v16 = (char *)operator new(v14);
    v17 = 0;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = &v16[144 * v15];
    do
    {
      v18 = v12 + v17;
      v19 = &v16[v17];
      v20 = *(_OWORD *)(v12 + v17);
      v21 = *(_OWORD *)(v12 + v17 + 16);
      v22 = *(_OWORD *)(v12 + v17 + 48);
      *((_OWORD *)v19 + 2) = *(_OWORD *)(v12 + v17 + 32);
      *((_OWORD *)v19 + 3) = v22;
      *(_OWORD *)v19 = v20;
      *((_OWORD *)v19 + 1) = v21;
      v24 = *(_OWORD *)(v12 + v17 + 96);
      v23 = *(_OWORD *)(v12 + v17 + 112);
      v25 = *(_OWORD *)(v12 + v17 + 80);
      *(_OWORD *)(v19 + 121) = *(_OWORD *)(v12 + v17 + 121);
      *((_OWORD *)v19 + 6) = v24;
      *((_OWORD *)v19 + 7) = v23;
      *((_OWORD *)v19 + 5) = v25;
      *((_OWORD *)v19 + 4) = *(_OWORD *)(v12 + v17 + 64);
      v17 += 144;
    }
    while (v18 + 144 != v13);
    *(_QWORD *)(a1 + 96) = &v16[v17];
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  return a1;
}

void sub_20EA357D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA3580C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC1E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA35844(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC1E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3588C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BC1E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA358DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BC1E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA3590C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3591C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA35948(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA359DC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA35A18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0"
                     "EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithRe"
                                "sultEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA35A84()
{
  return &unk_24C9BC240;
}

_QWORD *sub_20EA35A90(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC260;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA35AC8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC260;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA35B10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BC260;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA35B60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BC260;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA35B90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA35BA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA35BCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA35C60(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA35C9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0"
                     "EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithRe"
                                "sultEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA35D08()
{
  return &unk_24C9BC2C0;
}

_QWORD *sub_20EA35D14(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC2E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA35D4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC2E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA35D94(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC2E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA35DEC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC2E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA35E24(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA35E34(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA35E60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA35F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA35F64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA35FD0()
{
  return &unk_24C9BC340;
}

_QWORD *sub_20EA35FDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC360;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA36014(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC360;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3605C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC360;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA360B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC360;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA360EC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA360FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA36128(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA361E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3622C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb"
                     "0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithR"
                                "esultEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA36298()
{
  return &unk_24C9BC3C0;
}

void sub_20EA362A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA362CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA362E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection23HitTestInt"
                     "entWithResultEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection2"
                                "3HitTestIntentWithResultEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection23HitTestIntentWithResultEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA36354(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA36380(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA363BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BC430;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA36424(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA364B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA364C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA36558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3656C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA36630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA36644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA36708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3671C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA367C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA367D8(uint64_t a1)
{
  sub_20EA37FA8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA367FC(_QWORD *a1, std::__shared_count *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BC698;
    v8 = v5 + 1;
    v5[1].std::__shared_count = *a2;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v51 = v10;
    *((_QWORD *)&v51 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v51 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v51 = v38;
            *((_QWORD *)&v51 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v51 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9BC6E8;
        *(_OWORD *)(v43 + 8) = v51;
        v51 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v52 = 0;
        v53 = 0;
        v55 = v43;
        sub_210216F3C(*v34, (uint64_t)v54);
        v44 = v55;
        if (v55 == v54)
        {
          v45 = 4;
          v44 = v54;
        }
        else
        {
          if (!v55)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = (char *)operator new(0x28uLL);
  *(_QWORD *)v48 = &off_24C9BC768;
  *((_QWORD *)v48 + 1) = v29;
  *((_QWORD *)v48 + 2) = v28;
  *(std::__shared_count *)(v48 + 24) = *a2;
  v53 = (__int128 *)v48;
  sub_210216F3C(*v25, (uint64_t)&v51);
  v49 = v53;
  if (v53 == &v51)
  {
    v50 = 4;
    v49 = &v51;
  }
  else
  {
    if (!v53)
      return;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
}

void sub_20EA36C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA36D04(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA36D14(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA36D20(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA36D30(_QWORD *a1, _OWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 *v62;
  std::string *v63;
  std::runtime_error *exception;
  std::runtime_error *v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  std::runtime_error v69;
  char *v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  __int128 *v78;
  _QWORD v79[3];
  std::string v80;
  std::string *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v76 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v76 + 1) = 45;
    v61 = (_QWORD *)a1[6];
    v60 = a1 + 6;
    v59 = v61;
    v62 = (__int128 *)*((unsigned __int8 *)v60 + 23);
    if ((char)v62 < 0)
      v62 = (__int128 *)v60[1];
    else
      v59 = v60;
    v77 = v59;
    v78 = v62;
    sub_20E8778D4((uint64_t)&v76, (uint64_t)v79, 0, 0, &v80);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v80;
    else
      v63 = (std::string *)v80.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v69, (const char *)v63);
    v69.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v65 = std::runtime_error::runtime_error(exception, &v69);
    v65->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v65, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v68 = v6;
    v66 = &v6[1].__vftable;
    v67 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x28uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9BC698;
    v12 = v9 + 24;
    *(_OWORD *)(v9 + 24) = *a2;
    v70 = v9 + 24;
    v71 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v76 = v15;
    *((_QWORD *)&v76 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v76;
      if (!(_QWORD)v76)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v76 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v76 = v43;
            *((_QWORD *)&v76 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v76 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9BC7E8;
        *(_OWORD *)(v48 + 8) = v76;
        v76 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v77 = 0;
        v78 = 0;
        *((_QWORD *)v48 + 5) = v66;
        *((_QWORD *)v48 + 6) = v67;
        v79[0] = 0;
        v79[1] = 0;
        v81 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v80);
        v49 = v81;
        if (v81 == &v80)
        {
          v50 = 4;
          v49 = &v80;
        }
        else
        {
          if (!v81)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v71)
        {
          v51 = &v71->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (v68)
        {
          v53 = (unint64_t *)&v68->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v76;
      if (!(_QWORD)v76)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v72 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v72 = v34;
      *((_QWORD *)&v72 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v72 = 0uLL;
    }
  }
  v73 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x38uLL);
  *(_QWORD *)v56 = &off_24C9BC868;
  *(_OWORD *)(v56 + 8) = v72;
  v72 = 0uLL;
  *(_OWORD *)(v56 + 24) = v73;
  *((_QWORD *)v56 + 5) = v55 + 3;
  *((_QWORD *)v56 + 6) = v55;
  v74 = 0;
  v75 = 0;
  v78 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v76);
  v57 = v78;
  if (v78 == &v76)
  {
    v58 = 4;
    v57 = &v76;
  }
  else
  {
    if (!v78)
      return;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
}

void sub_20EA3735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a15;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a15);
    std::runtime_error::~runtime_error(&a14);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20EA37270);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA37464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v23 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v5 = *(_QWORD **)(v3 - 80);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA37504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA37520(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA37594(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BC8E8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA376A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA37708(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BC968;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA37818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA3787C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BC9E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA37A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA37B5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BCA68;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA37D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA37E3C(uint64_t a1)
{
  return sub_20EA37FA8(a1 - 16);
}

void sub_20EA37E44(uint64_t a1)
{
  sub_20EA37FA8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA37E6C(uint64_t a1)
{
  return sub_20EA37594((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA37E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA3787C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA37E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA37B5C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA37E84(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA37E8C(uint64_t a1)
{
  return sub_20EA37FA8(a1 - 24);
}

void sub_20EA37E94(uint64_t a1)
{
  sub_20EA37FA8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA37EBC(uint64_t a1)
{
  return sub_20EA37708((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA37EC4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA37ECC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA37F34(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA37F9C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_20EEF32D0(**(unsigned __int8 ****)(a1 + 8), a2);
}

uint64_t sub_20EA37FA8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BC4A8;
  *(_QWORD *)(a1 + 16) = &unk_24C9BC520;
  *(_QWORD *)(a1 + 24) = &unk_24C9BC560;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA38194(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BC698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA381A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BC698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA381DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BC6E8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA38220(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BC6E8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA38274(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC6E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA382E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC6E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA38334(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA38370(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA383A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA386CC((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA38570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA38654(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchI"
                     "ZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageA"
                                "ndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA386C0()
{
  return &unk_24C9BC748;
}

void sub_20EA386CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA38764()
{
  __break(1u);
}

void sub_20EA38810(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA38830);
}

_QWORD *sub_20EA3883C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC768;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA38874(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC768;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EA388BC(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9BC768;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20EA38914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9BC768;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20EA3894C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3895C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA38988(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA386CC((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA38A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA38A7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA38AE8()
{
  return &unk_24C9BC7C8;
}

uint64_t sub_20EA38AF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_20EA38B64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC7E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA38BEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BC7E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA38C84(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC7E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA38D14(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC7E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA38D84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA38E04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA38E80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA386CC(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA39134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3928C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchI"
                     "ZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageA"
                                "ndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA392F8()
{
  return &unk_24C9BC848;
}

_QWORD *sub_20EA39304(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BC868;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA39380(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BC868;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20EA3940C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9BC868;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20EA39484(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BC868;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA394DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA3954C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EA395BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA386CC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA396D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA39778(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE7ProcessERKS6_NSt"
                                "3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA397E4()
{
  return &unk_24C9BC8C8;
}

_QWORD *sub_20EA397F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC8E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA39828(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC8E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA39870(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BC8E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA398C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BC8E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA398F0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA39900(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA3992C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA399C0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA399FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE9SubscribeENS1_12C"
                                "hannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA39A68()
{
  return &unk_24C9BC948;
}

_QWORD *sub_20EA39A74(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC968;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA39AAC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC968;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA39AF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BC968;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA39B44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BC968;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA39B74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA39B84(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA39BB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA39C44(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA39C80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15AddErrorHandlerENS1_12Chann"
                     "elInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15AddErrorHandlerE"
                                "NS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA39CEC()
{
  return &unk_24C9BC9C8;
}

_QWORD *sub_20EA39CF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BC9E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA39D30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BC9E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA39D78(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BC9E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA39DD0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BC9E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA39E08(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA39E18(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA39E44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA39EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA39F48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA39FB4()
{
  return &unk_24C9BCA48;
}

_QWORD *sub_20EA39FC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BCA68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA39FF8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BCA68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3A040(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BCA68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA3A098(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BCA68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA3A0D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3A0E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA3A10C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3A1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3A210(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn6random4UUIDEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3A27C()
{
  return &unk_24C9BCAC8;
}

void sub_20EA3A28C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA3A2B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA3A2C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn6random4UUIDEvvvLb0EEEE27__sha"
                     "red_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn6random4UUIDEvvvLb0"
                                "EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn6random4UUIDEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn6random4UUIDEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA3A338(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA3A364(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3A3A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BCB38;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA3A408(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3A4AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3A53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3A550(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA3A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3A628(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA3A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3A700(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA3A7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3A7BC(uint64_t a1)
{
  sub_20EA3C1E0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA3A7E0(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCDB0;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9BCE00;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9BCE80;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA3AC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA3ACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA3AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA3AD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3AD5C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA3AD6C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA3AD78(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA3AD88(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCF00;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCDB0;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9BCF50;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9BCF00;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9BCFD0;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA3B3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EA3B2F4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA3B454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA3B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EA031A8(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EA031A8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA3B52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA3B5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA3B5E8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA3B65C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9BD050;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2380;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA3B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA3B800(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BD0D0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA3B910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA3B974@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BD150;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA3BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA3BC54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BD1D0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA3BE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3BF34(uint64_t a1)
{
  return sub_20EA3C1E0(a1 - 16);
}

void sub_20EA3BF3C(uint64_t a1)
{
  sub_20EA3C1E0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3BF64(uint64_t a1, uint64_t a2)
{
  return sub_20EA3B65C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA3BF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA3B974((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA3BF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA3BC54((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA3BF7C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA3BF84(uint64_t a1)
{
  return sub_20EA3C1E0(a1 - 24);
}

void sub_20EA3BF8C(uint64_t a1)
{
  sub_20EA3C1E0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3BFB4(uint64_t a1)
{
  return sub_20EA3B800((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA3BFBC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA3BFC4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA3C02C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA3C094(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  float32x2_t v10;
  float32x4_t v11;
  double v12;
  float32x4_t v13;
  std::__shared_weak_count *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  float32x4_t v20[4];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = *a2;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = std::__shared_weak_count::lock(v4);
    v22 = v9;
    if (v9)
    {
      v14 = v9;
      v21 = v6;
      if (v6)
      {
        v15 = *(float32x4_t *)(v6 + 24);
        v16 = *(float32x4_t *)(v6 + 40);
        v17 = *(float32x4_t *)(v6 + 56);
        v20[0] = *(float32x4_t *)(v6 + 8);
        v20[1] = v15;
        v20[2] = v16;
        v20[3] = v17;
        sub_20EEF13C8(*v5, v20, (uint64_t **)a3, *(double *)v15.i64, *(double *)v16.i64, *(float32x2_t *)v17.f32, *(float32x2_t *)v20[0].f32, v10, v11, v12, v13);
      }
      else
      {
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)a3 = a3 + 8;
      }
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)a3 = a3 + 8;
    }
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
  }
}

void sub_20EA3C1C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 64);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3C1E0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BCBB0;
  *(_QWORD *)(a1 + 16) = &unk_24C9BCC28;
  *(_QWORD *)(a1 + 24) = &unk_24C9BCC68;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA3C3E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCDB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA3C3F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCDB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA3C420(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA3C434(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BCE00;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA3C478(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BCE00;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3C4CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BCE00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA3C53C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BCE00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA3C58C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA3C5C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA3C600(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA3C924((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EA3D090(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA3C7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EA3D090(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3C8AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKS"
                     "S_4SendERKSD_EUlT_T0_E_EEvSV_SW_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E25EnqueueMessageAndDispatchIZNKSS_4SendERKSD_EUlT_T0_E_EEvSV_SW_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKSS_4SendERKSD_EUlT_T0_E_EEvSV_SW_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKSS_4SendERKSD_EUlT_T0_E_EEvSV_SW_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3C918()
{
  return &unk_24C9BCE60;
}

void sub_20EA3C924(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD **v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::mutex *v57;
  uint64_t **v58;
  _QWORD **v59;
  _QWORD *v60[2];
  std::exception_ptr v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v59, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD ***))(j[2] + 16))(j + 2, &v59);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    v57 = (std::mutex *)(v14 + 24);
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v61.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v61), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 152) = 0;
    v16 = (uint64_t *)(v14 + 152);
    *(_QWORD *)(v14 + 144) = v14 + 152;
    v17 = (uint64_t **)(v14 + 144);
    *(_QWORD *)(v14 + 160) = 0;
    v18 = v59;
    v19 = v60;
    if (v59 != v60)
    {
      v58 = (uint64_t **)(v14 + 144);
      do
      {
        v20 = sub_20E96C0BC(v17, v16, &v65, &v64, (unsigned __int8 *)v18 + 32);
        if (*(_QWORD *)v20)
        {
          v21 = (_QWORD *)v18[1];
          if (!v21)
            goto LABEL_55;
          goto LABEL_49;
        }
        v22 = operator new(0x58uLL);
        v61.__ptr_ = v22;
        v62 = v16;
        v63 = 0;
        v23 = *((_OWORD *)v18 + 2);
        v22[6] = 0;
        *((_OWORD *)v22 + 2) = v23;
        v22[7] = 0;
        v22[8] = 0;
        v24 = v18[6];
        v25 = v18[7];
        v26 = v25 - v24;
        if (v25 != v24)
        {
          v27 = v14;
          v28 = v19;
          v29 = 0x8E38E38E38E38E39 * (v26 >> 4);
          if (v29 >= 0x1C71C71C71C71C8)
            sub_20E969238();
          v30 = (char *)operator new(v26);
          v31 = 0;
          v22[6] = v30;
          v22[7] = v30;
          v22[8] = &v30[144 * v29];
          do
          {
            v32 = v24 + v31;
            v33 = &v30[v31];
            v34 = *(_OWORD *)(v24 + v31);
            v35 = *(_OWORD *)(v24 + v31 + 16);
            v36 = *(_OWORD *)(v24 + v31 + 48);
            *((_OWORD *)v33 + 2) = *(_OWORD *)(v24 + v31 + 32);
            *((_OWORD *)v33 + 3) = v36;
            *(_OWORD *)v33 = v34;
            *((_OWORD *)v33 + 1) = v35;
            v38 = *(_OWORD *)(v24 + v31 + 96);
            v37 = *(_OWORD *)(v24 + v31 + 112);
            v39 = *(_OWORD *)(v24 + v31 + 80);
            *(_OWORD *)(v33 + 121) = *(_OWORD *)(v24 + v31 + 121);
            *((_OWORD *)v33 + 6) = v38;
            *((_OWORD *)v33 + 7) = v37;
            *((_OWORD *)v33 + 5) = v39;
            *((_OWORD *)v33 + 4) = *(_OWORD *)(v24 + v31 + 64);
            v31 += 144;
          }
          while (v32 + 144 != v25);
          v22[7] = &v30[v31];
          v19 = v28;
          v14 = v27;
          v17 = v58;
        }
        *(_OWORD *)(v22 + 9) = *(_OWORD *)(v18 + 9);
        v63 = 1;
        v40 = v65;
        *v22 = 0;
        v22[1] = 0;
        v22[2] = v40;
        *(_QWORD *)v20 = v22;
        v41 = (uint64_t *)**v17;
        if (v41)
        {
          *v17 = v41;
          v22 = *(_QWORD **)v20;
        }
        v42 = *v16;
        v8 = v22 == (_QWORD *)*v16;
        *((_BYTE *)v22 + 24) = v8;
        if (v8)
        {
LABEL_48:
          ++*(_QWORD *)(v14 + 160);
          v21 = (_QWORD *)v18[1];
          if (!v21)
            goto LABEL_55;
          goto LABEL_49;
        }
        while (1)
        {
          v43 = v22[2];
          if (*(_BYTE *)(v43 + 24))
            goto LABEL_48;
          v44 = *(uint64_t **)(v43 + 16);
          v45 = *v44;
          if (*v44 != v43)
            break;
          v48 = v44[1];
          if (!v48 || (v49 = *(unsigned __int8 *)(v48 + 24), v46 = (_BYTE *)(v48 + 24), v49))
          {
            if (*(_QWORD **)v43 == v22)
            {
              *(_BYTE *)(v43 + 24) = 1;
              *((_BYTE *)v44 + 24) = 0;
              v52 = *(_QWORD *)(v43 + 8);
              *v44 = v52;
              if (v52)
                goto LABEL_46;
            }
            else
            {
              v50 = *(uint64_t **)(v43 + 8);
              v51 = *v50;
              *(_QWORD *)(v43 + 8) = *v50;
              if (v51)
              {
                *(_QWORD *)(v51 + 16) = v43;
                v44 = *(uint64_t **)(v43 + 16);
              }
              v50[2] = (uint64_t)v44;
              *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v50;
              *v50 = v43;
              *(_QWORD *)(v43 + 16) = v50;
              v44 = (uint64_t *)v50[2];
              v43 = *v44;
              *((_BYTE *)v50 + 24) = 1;
              *((_BYTE *)v44 + 24) = 0;
              v52 = *(_QWORD *)(v43 + 8);
              *v44 = v52;
              if (v52)
LABEL_46:
                *(_QWORD *)(v52 + 16) = v44;
            }
            *(_QWORD *)(v43 + 16) = v44[2];
            *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v43;
            *(_QWORD *)(v43 + 8) = v44;
            v44[2] = v43;
            goto LABEL_48;
          }
LABEL_34:
          *(_BYTE *)(v43 + 24) = 1;
          v22 = v44;
          *((_BYTE *)v44 + 24) = v44 == (uint64_t *)v42;
          *v46 = 1;
          if (v44 == (uint64_t *)v42)
            goto LABEL_48;
        }
        if (v45)
        {
          v47 = *(unsigned __int8 *)(v45 + 24);
          v46 = (_BYTE *)(v45 + 24);
          if (!v47)
            goto LABEL_34;
        }
        if (*(_QWORD **)v43 == v22)
        {
          v56 = v22[1];
          *(_QWORD *)v43 = v56;
          if (v56)
          {
            *(_QWORD *)(v56 + 16) = v43;
            v44 = *(uint64_t **)(v43 + 16);
          }
          v22[2] = v44;
          *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v22;
          v22[1] = v43;
          *(_QWORD *)(v43 + 16) = v22;
          v44 = (uint64_t *)v22[2];
          *((_BYTE *)v22 + 24) = 1;
          *((_BYTE *)v44 + 24) = 0;
          v54 = (uint64_t *)v44[1];
          v55 = *v54;
          v44[1] = *v54;
          if (v55)
LABEL_53:
            *(_QWORD *)(v55 + 16) = v44;
        }
        else
        {
          *(_BYTE *)(v43 + 24) = 1;
          *((_BYTE *)v44 + 24) = 0;
          v54 = (uint64_t *)v44[1];
          v55 = *v54;
          v44[1] = *v54;
          if (v55)
            goto LABEL_53;
        }
        v54[2] = v44[2];
        *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v54;
        *v54 = (uint64_t)v44;
        v44[2] = (uint64_t)v54;
        ++*(_QWORD *)(v14 + 160);
        v21 = (_QWORD *)v18[1];
        if (!v21)
        {
          do
          {
LABEL_55:
            v53 = (_QWORD *)v18[2];
            v8 = *v53 == (_QWORD)v18;
            v18 = v53;
          }
          while (!v8);
          goto LABEL_20;
        }
        do
        {
LABEL_49:
          v53 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
LABEL_20:
        v18 = v53;
      }
      while (v53 != v19);
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v57);
  }
  sub_20E96C574((uint64_t)&v59, v60[0]);
}

void sub_20EA3CF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, int a16, __int16 a17, char a18, unsigned __int8 a19, char a20,_QWORD *a21,uint64_t a22,char a23)
{
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  std::mutex::unlock(a10);
  sub_20E96C574((uint64_t)&a20, a21);
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a13 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a12 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a13, "\n", "message: ", (const char *)&a12, "\n");
    if ((a19 & 0x80u) == 0)
      v27 = (uint64_t *)&a14;
    else
      v27 = a14;
    if ((a19 & 0x80u) == 0)
      v28 = a19;
    else
      v28 = a15;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA3D064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA3D084);
}

uint64_t *sub_20EA3D090(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA3D17C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA3D0D8);
}

_QWORD *sub_20EA3D1B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BCE80;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA3D1FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BCE80;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3D250(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BCE80;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA3D2C0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BCE80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA3D310(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA3D34C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA3D384(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA3C924((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EA3D090(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3D42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EA3D090(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3D478(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE4SendERKSD_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E4SendERKSD_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE4SendERKSD_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE4SendERKSD_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3D4E4()
{
  return &unk_24C9BCEE0;
}

void sub_20EA3D4F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA3D500(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCF00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EA3D530(uint64_t a1)
{
  return sub_20EA3D090((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EA3D53C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BCF50;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA3D5C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BCF50;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA3D65C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BCF50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA3D6EC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BCF50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA3D75C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA3D7DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA3D858(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA3C924(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EA3D090((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA3DB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA3DB60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA3D96CLL);
    JUMPOUT(0x20EA3D93CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EA3DBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA3DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EA3D090(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3DCD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKS"
                     "S_7ProcessERKSD_NS4_7promiseISR_EEEUlT_T0_E_EEvSV_SY_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E25EnqueueMessageAndDispatchIZNKSS_7ProcessERKSD_NS4_7promiseISR_EEEUlT_T0_E_EEvSV_SY_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKSS_7ProcessERKSD_NS4_7promiseISR_EEEUlT_T0_E_EEvSV_SY_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE25EnqueueMessageAndDispatchIZNKSS_7ProcessERKSD_NS4_7promiseISR_EEEUlT_T0_E_EEvSV_SY_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3DD40()
{
  return &unk_24C9BCFB0;
}

_QWORD *sub_20EA3DD4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BCFD0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA3DDD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BCFD0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA3DE6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BCFD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA3DEFC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BCFD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA3DF6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA3DFEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA3E068(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA3C924((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EA3D090((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA3E178(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA3E1F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA3E224);
  JUMPOUT(0x20EA3E254);
}

uint64_t sub_20EA3E25C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE7ProcessERKSD_NS4_7promiseISR_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E7ProcessERKSD_NS4_7promiseISR_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE7ProcessERKSD_NS4_7promiseISR_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE7ProcessERKSD_NS4_7promiseISR_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3E2C8()
{
  return &unk_24C9BD030;
}

_QWORD *sub_20EA3E2D4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BD050;
  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA3E32C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BD050;
  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3E394(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BD050;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2380;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA3E40C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3E42C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BD050;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2380;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA3E494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA3E4AC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA3E4FC(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2380;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA3E548(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2380;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3E5FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3E638(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6"
                     "MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCo"
                     "llectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE9SubscribeENS1_12ChannelInputISR_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSto"
                                "rageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedete"
                                "ction23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE"
                                "9SubscribeENS1_12ChannelInputISR_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE9SubscribeENS1_12ChannelInputISR_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE9SubscribeENS1_12ChannelInputISR_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3E6A4()
{
  return &unk_24C9BD0B0;
}

_QWORD *sub_20EA3E6B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD0D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA3E6E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD0D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3E730(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BD0D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA3E780(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BD0D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA3E7B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3E7C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA3E7EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3E880(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3E8BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6"
                     "MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCo"
                     "llectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSto"
                                "rageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedete"
                                "ction23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE"
                                "15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3E928()
{
  return &unk_24C9BD130;
}

_QWORD *sub_20EA3E934(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD150;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA3E96C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD150;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3E9B4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD150;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA3EA0C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD150;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA3EA44(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3EA54(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA3EA80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA3EBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3EC6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3ECD8()
{
  return &unk_24C9BD1B0;
}

_QWORD *sub_20EA3ECE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD1D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA3ED1C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD1D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3ED64(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD1D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA3EDBC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD1D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA3EDF4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA3EE04(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA3EE30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3EEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3EF34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_"
                     "6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultC"
                     "ollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupSt"
                                "orageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedet"
                                "ection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0E"
                                "E15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrINS4_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS4_3mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessISH_EENS4_9allocatorINS6_IKSH_SK_EEEEEEvSR_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA3EFA0()
{
  return &unk_24C9BD230;
}

void sub_20EA3EFB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA3EFD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA3EFEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrINS_4pairIdN3cva15SE3Group"
                     "StorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_3mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection23"
                     "HitTestResultCollectionENS_4lessISI_EENS_9allocatorINS7_IKSI_SL_EEEEEEvSS_Lb0EEEE27__shared_ptr_def"
                     "ault_deleteIST_ST_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrINS_4pairIdN3cv"
                                "a15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_3mapINS1_3esn6random4UUIDENS1_3a"
                                "cv16surfacedetection23HitTestResultCollectionENS_4lessISI_EENS_9allocatorINS7_IKSI_SL_EE"
                                "EEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrINS_4pairIdN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_3mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection23HitTestResultCollectionENS_4lessISI_EENS_9allocatorINS7_IKSI_SL_EEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrINS_4pairIdN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_3mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection23HitTestResultCollectionENS_4lessISI_EENS_9allocatorINS7_IKSI_SL_EEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA3F05C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA3F088(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA3F0C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BD2A0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA3F12C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3F1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3F1D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA3F260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3F274(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA3F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA3F34C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA3F410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3F424(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA3F4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3F4E0(uint64_t a1)
{
  sub_20EA40F28(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA3F504(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  __int128 *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  std::__shared_weak_count *v59[2];
  void *v60;
  unint64_t v61;
  void *__p;
  uint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x40uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD508;
    v6 = v4 + 1;
    sub_20E935228((uint64_t)&v4[1], a2);
    v65 = v4 + 1;
    v66 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v67 = v10;
    *((_QWORD *)&v67 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_20E866B34();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v67;
      if (!(_QWORD)v67)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v67 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v67 = v38;
            *((_QWORD *)&v67 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v67 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9BD558;
        *(_OWORD *)(v43 + 8) = v67;
        v67 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v68 = 0;
        v69 = 0;
        v71 = v43;
        sub_210216F3C(*v34, (uint64_t)v70);
        v44 = v71;
        if (v71 == v70)
        {
          v45 = 4;
          v44 = v70;
        }
        else
        {
          if (!v71)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v66)
        {
          v46 = &v66->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v67;
      if (!(_QWORD)v67)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v59 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v59[0] = v29;
      v59[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v59 = 0uLL;
    }
  }
  sub_20E935228((uint64_t)&v60, a2);
  v69 = 0;
  v48 = (char *)operator new(0x40uLL);
  *(_QWORD *)v48 = &off_24C9BD5D8;
  *(_OWORD *)(v48 + 8) = *(_OWORD *)v59;
  v49 = v60;
  v50 = v61;
  v60 = 0;
  v61 = 0;
  *((_QWORD *)v48 + 3) = v49;
  *((_QWORD *)v48 + 4) = v50;
  v52 = __p;
  v51 = v63;
  *((_QWORD *)v48 + 5) = __p;
  *((_QWORD *)v48 + 6) = v51;
  *((_DWORD *)v48 + 14) = v64;
  if (v51)
  {
    v53 = v52[1];
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v53 >= v50)
        v53 %= v50;
    }
    else
    {
      v53 &= v50 - 1;
    }
    v49[v53] = v48 + 40;
    __p = 0;
    v63 = 0;
  }
  v69 = (__int128 *)v48;
  sub_210216F3C(*v25, (uint64_t)&v67);
  v54 = v69;
  if (v69 == &v67)
  {
    v55 = 4;
    v54 = &v67;
    goto LABEL_63;
  }
  if (v69)
  {
    v55 = 5;
LABEL_63:
    (*(void (**)(__int128 *))(*(_QWORD *)v54 + 8 * v55))(v54);
  }
  v56 = __p;
  if (__p)
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = v60;
  v60 = 0;
  if (v58)
    operator delete(v58);
}

void sub_20EA3F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
    {
      sub_20EA41114(&a9);
      _Unwind_Resume(a1);
    }
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  sub_20EA41114(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA3FA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA3FB0C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA3FB1C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA3FB28(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA3FB38(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  __int128 *v78;
  std::string *v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  std::__shared_weak_count *v82[2];
  void *v83;
  unint64_t v84;
  void *__p;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::runtime_error v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  _QWORD *v98;
  __int128 *v99;
  _QWORD v100[3];
  std::string v101;
  std::string *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v97 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v97 + 1) = 45;
    v77 = (_QWORD *)a1[6];
    v76 = a1 + 6;
    v75 = v77;
    v78 = (__int128 *)*((unsigned __int8 *)v76 + 23);
    if ((char)v78 < 0)
      v78 = (__int128 *)v76[1];
    else
      v75 = v76;
    v98 = v75;
    v99 = v78;
    sub_20E8778D4((uint64_t)&v97, (uint64_t)v100, 0, 0, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v101;
    else
      v79 = (std::string *)v101.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v94, (const char *)v79);
    v94.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v81 = std::runtime_error::runtime_error(exception, &v94);
    v81->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v81, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v92 = v6 + 1;
    v93 = v6;
    v90 = v6 + 1;
    v91 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD508;
    v11 = v9 + 1;
    sub_20E935228((uint64_t)&v9[1], a2);
    v95 = v9 + 1;
    v96 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v97 = v15;
    *((_QWORD *)&v97 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v97;
      if (!(_QWORD)v97)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v97 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v97 = v43;
            *((_QWORD *)&v97 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v97 = 0uLL;
          }
        }
        v48 = v90;
        v49 = v91;
        v90 = 0;
        v91 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9BD658;
        *(_OWORD *)(v50 + 8) = v97;
        v97 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v98 = 0;
        v99 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v100[0] = 0;
        v100[1] = 0;
        v102 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v101);
        v51 = v102;
        if (v102 == &v101)
        {
          v52 = 4;
          v51 = &v101;
        }
        else
        {
          if (!v102)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v96)
        {
          v53 = &v96->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        if (v91)
        {
          v55 = &v91->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v93)
        {
          v57 = &v93->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v97;
      if (!(_QWORD)v97)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v82[0] = v34;
      v82[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  sub_20E935228((uint64_t)&v83, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v59[1].__vftable = *a3;
  v60 = &v59[1].__vftable;
  *a3 = 0;
  v88 = &v59[1].__vftable;
  v89 = v59;
  v99 = 0;
  v61 = (char *)operator new(0x50uLL);
  *(_QWORD *)v61 = &off_24C9BD6D8;
  *(_OWORD *)(v61 + 8) = *(_OWORD *)v82;
  v62 = v83;
  v63 = v84;
  v83 = 0;
  v84 = 0;
  *((_QWORD *)v61 + 3) = v62;
  *((_QWORD *)v61 + 4) = v63;
  v65 = __p;
  v64 = v86;
  *((_QWORD *)v61 + 5) = __p;
  *((_QWORD *)v61 + 6) = v64;
  *((_DWORD *)v61 + 14) = v87;
  if (v64)
  {
    v66 = v65[1];
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v66 >= v63)
        v66 %= v63;
    }
    else
    {
      v66 &= v63 - 1;
    }
    v62[v66] = v61 + 40;
    __p = 0;
    v86 = 0;
    v60 = v88;
    v59 = v89;
  }
  *((_QWORD *)v61 + 8) = v60;
  *((_QWORD *)v61 + 9) = v59;
  v88 = 0;
  v89 = 0;
  v99 = (__int128 *)v61;
  sub_210216F3C(*v30, (uint64_t)&v97);
  v67 = v99;
  if (v99 == &v97)
  {
    v68 = 4;
    v67 = &v97;
  }
  else
  {
    if (!v99)
      goto LABEL_78;
    v68 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v67 + 8 * v68))(v67);
LABEL_78:
  v69 = v89;
  if (v89)
  {
    v70 = (unint64_t *)&v89->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = __p;
  if (__p)
  {
    do
    {
      v73 = (_QWORD *)*v72;
      operator delete(v72);
      v72 = v73;
    }
    while (v73);
  }
  v74 = v83;
  v83 = 0;
  if (v74)
    operator delete(v74);
}

void sub_20EA40234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::promise<void> *v29;
  uint64_t v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v31.__ptr_ = &a23;
    std::promise<void>::set_exception(v29, v31);
    std::exception_ptr::~exception_ptr(&a23);
    std::runtime_error::~runtime_error(&a22);
    if (*(char *)(v30 - 81) < 0)
      operator delete(*(void **)(v30 - 104));
    JUMPOUT(0x20EA40148);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA4034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_20EA031A8(&a27);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20EA403EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20EA40414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA40430(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA404A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BD758;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA405B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA40618(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BD7D8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA40728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA4078C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BD858;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA409A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA40A6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BD8D8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA40C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA40D4C(uint64_t a1)
{
  return sub_20EA40F28(a1 - 16);
}

void sub_20EA40D54(uint64_t a1)
{
  sub_20EA40F28(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA40D7C(uint64_t a1)
{
  return sub_20EA404A4((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA40D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA4078C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA40D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA40A6C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA40D94(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA40D9C(uint64_t a1)
{
  return sub_20EA40F28(a1 - 24);
}

void sub_20EA40DA4(uint64_t a1)
{
  sub_20EA40F28(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA40DCC(uint64_t a1)
{
  return sub_20EA40618((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA40DD4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA40DDC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA40E44(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA40EAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  _OWORD v7[4];

  v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    do
    {
      v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v2 + 2)), *((float64x2_t *)v2 + 3));
      v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v2 + 4)), *((float64x2_t *)v2 + 5));
      v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v2 + 8)), *((float64x2_t *)v2 + 9));
      v7[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*((float64x2_t *)v2 + 6)), *((float64x2_t *)v2 + 7));
      v7[3] = v6;
      v7[0] = v4;
      v7[1] = v5;
      sub_20EEF2B7C(*v3, (unsigned __int8 *)v2 + 16, (uint64_t)v7);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

uint64_t sub_20EA40F28(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BD318;
  *(_QWORD *)(a1 + 16) = &unk_24C9BD390;
  *(_QWORD *)(a1 + 24) = &unk_24C9BD3D0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EA41114(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA41168(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA41178(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BD508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA411A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

_QWORD *sub_20EA411F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BD558;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA4123C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BD558;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA41290(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD558;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA41300(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD558;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA41350(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA4138C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA413C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA416E8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA4158C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA41670(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_"
                                "EUlT_T0_E_EEvSR_SS_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA416DC()
{
  return &unk_24C9BD5B8;
}

void sub_20EA416E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA41780()
{
  __break(1u);
}

void sub_20EA4182C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA4184CLL);
}

_QWORD *sub_20EA41858(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BD5D8;
  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA418B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BD5D8;
  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA41928(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BD5D8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20E935228((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_20EA4198C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA419AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BD5D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_20E935228((uint64_t)(a2 + 3), a1 + 24);
}

void sub_20EA41A04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA41A1C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA41A74(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)__p[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[3];
  __p[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_20EA41AC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA416E8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA41B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA41BBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA41C28()
{
  return &unk_24C9BD638;
}

_QWORD *sub_20EA41C34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[2];
  a1[2] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *sub_20EA41CCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BD658;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA41D54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BD658;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA41DEC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD658;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA41E7C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD658;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA41EEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA41F6C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA41FE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA416E8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA4229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA423F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERK"
                                "SN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA42460()
{
  return &unk_24C9BD6B8;
}

_QWORD *sub_20EA4246C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9BD6D8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EA42510(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9BD6D8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA425C4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x50uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24C9BD6D8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20E935228((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v8 = a1[9];
  v3[8] = a1[8];
  v3[9] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20EA42648(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA42668(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24C9BD6D8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_20E935228((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  v9 = a1[9];
  a2[8] = a1[8];
  a2[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA426E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA426F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EA42794(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)__p[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)__p[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)__p[3];
  __p[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EA4282C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[8];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA416E8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA42940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA429E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA42A54()
{
  return &unk_24C9BD738;
}

_QWORD *sub_20EA42A60(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD758;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA42A98(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD758;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA42AE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BD758;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA42B30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BD758;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA42B60(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA42B70(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA42B9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA42C30(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA42C6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Grou"
                     "pStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIK"
                     "S8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3c"
                                "va15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_"
                                "9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA42CD8()
{
  return &unk_24C9BD7B8;
}

_QWORD *sub_20EA42CE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD7D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA42D1C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD7D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA42D64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BD7D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA42DB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BD7D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA42DE4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA42DF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA42E20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA42EB4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA42EF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Grou"
                     "pStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIK"
                     "S8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3c"
                                "va15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_"
                                "9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA42F5C()
{
  return &unk_24C9BD838;
}

_QWORD *sub_20EA42F68(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD858;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA42FA0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD858;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA42FE8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD858;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA43040(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD858;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA43078(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA43088(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA430B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA431B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA43224()
{
  return &unk_24C9BD8B8;
}

_QWORD *sub_20EA43230(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BD8D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA43268(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BD8D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA432B0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BD8D8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA43308(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BD8D8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA43340(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA43350(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA4337C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA43434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA43480(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA434EC()
{
  return &unk_24C9BD938;
}

void sub_20EA434FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA43520(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA43538(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUI"
                     "DEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocato"
                     "rINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn"
                                "6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equa"
                                "l_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA435A8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA435D4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA43610@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BD9A8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA43678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA43708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4371C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA437AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA437C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA43884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA43898(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA43970(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA43A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA43A2C(uint64_t a1)
{
  sub_20EA45344(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA43A50(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9BDC10;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9BDC90;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EA43E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA43F5C(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BDD10;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9BDD60;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24C9BDD10;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9BDDE0;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20EA4457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20EA44490);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA445F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA44644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA44698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA446BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA4475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA44778(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA447EC(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9BDE60;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B25F8;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA4491C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA44990(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BDEE0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA44AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA44B04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BDF60;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA44D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA44DE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BDFE0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA44FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA450C4(uint64_t a1)
{
  return sub_20EA45344(a1 - 16);
}

void sub_20EA450CC(uint64_t a1)
{
  sub_20EA45344(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA450F4(uint64_t a1, uint64_t a2)
{
  return sub_20EA447EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA450FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA44B04((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA45104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA44DE4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA4510C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA45114(uint64_t a1)
{
  return sub_20EA45344(a1 - 24);
}

void sub_20EA4511C(uint64_t a1)
{
  sub_20EA45344(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA45144(uint64_t a1)
{
  return sub_20EA44990((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA4514C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA45154(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA451BC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

int64_t sub_20EA45224@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v3 = *(uint64_t **)(**(_QWORD **)(result + 8) + 136);
  if (v3)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v4 = *v3;
    v5 = v3[1];
    result = v5 - *v3;
    if (v5 != *v3)
    {
      v6 = 0x2E8BA2E8BA2E8BA3 * (result >> 2);
      if (v6 >= 0x5D1745D1745D175)
        sub_20EA45E94();
      result = (int64_t)operator new(result);
      v7 = 0;
      *a2 = result;
      a2[1] = result;
      a2[2] = result + 44 * v6;
      do
      {
        v8 = v4 + v7;
        v9 = result + v7;
        v10 = *(_QWORD *)(v4 + v7);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(v4 + v7 + 8);
        *(_QWORD *)v9 = v10;
        v11 = *(_QWORD *)(v4 + v7 + 12);
        *(_DWORD *)(v9 + 20) = *(_DWORD *)(v4 + v7 + 20);
        *(_QWORD *)(v9 + 12) = v11;
        v12 = *(_OWORD *)(v4 + v7 + 24);
        *(_DWORD *)(v9 + 40) = *(_DWORD *)(v4 + v7 + 40);
        *(_OWORD *)(v9 + 24) = v12;
        v7 += 44;
      }
      while (v8 + 44 != v5);
      a2[1] = result + v7;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_20EA45328(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA45344(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BDA20;
  *(_QWORD *)(a1 + 16) = &unk_24C9BDA98;
  *(_QWORD *)(a1 + 24) = &unk_24C9BDAD8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EA45544(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BDC10;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA45588(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BDC10;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA455DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BDC10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA4564C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BDC10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA4569C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA456D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA45710(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA45A34((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20E96D364(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA458D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20E96D364(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA459BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA45A28()
{
  return &unk_24C9BDC70;
}

void sub_20EA45A34(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::exception_ptr v27;
  void *__p;
  char *v29;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v27.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v27), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v29;
    v18 = v29 - (_BYTE *)__p;
    if (v29 != __p)
    {
      v19 = 0x2E8BA2E8BA2E8BA3 * (v18 >> 2);
      if (v19 >= 0x5D1745D1745D175)
        sub_20EA45E94();
      v20 = (char *)operator new(v18);
      v21 = 0;
      *(_QWORD *)(v14 + 144) = v20;
      *(_QWORD *)(v14 + 152) = v20;
      *(_QWORD *)(v14 + 160) = &v20[44 * v19];
      do
      {
        v22 = &v16[v21];
        v23 = &v20[v21];
        v24 = *(_QWORD *)&v16[v21];
        *((_DWORD *)v23 + 2) = *(_DWORD *)&v16[v21 + 8];
        *(_QWORD *)v23 = v24;
        v25 = *(_QWORD *)&v16[v21 + 12];
        *((_DWORD *)v23 + 5) = *(_DWORD *)&v16[v21 + 20];
        *(_QWORD *)(v23 + 12) = v25;
        v26 = *(_OWORD *)&v16[v21 + 24];
        *((_DWORD *)v23 + 10) = *(_DWORD *)&v16[v21 + 40];
        *(_OWORD *)(v23 + 24) = v26;
        v21 += 44;
      }
      while (v22 + 44 != v17);
      *(_QWORD *)(v14 + 152) = &v20[v21];
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20EA45D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *__p, uint64_t a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v22 = v19;
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v24);
  }
  std::mutex::unlock(v18);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a10 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v27 = (uint64_t *)&a11;
    else
      v27 = a11;
    if ((a16 & 0x80u) == 0)
      v28 = a16;
    else
      v28 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA45E68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA45E88);
}

void sub_20EA45E94()
{
  sub_20E860B90("vector");
}

_QWORD *sub_20EA45EA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BDC90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA45EE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BDC90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA45F28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BDC90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20EA45F80(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BDC90;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20EA45FB8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA45FC8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA45FF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA45A34((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20E96D364(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20E96D364(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA460E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE4SendERKbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE4SendERKbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE4SendERKbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE4SendERKbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA46154()
{
  return &unk_24C9BDCF0;
}

void sub_20EA46160(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BDD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA46170(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BDD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EA461A0(uint64_t a1)
{
  return sub_20E96D364((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EA461AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BDD60;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA46234(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BDD60;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA462CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BDD60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA4635C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BDD60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA463CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA4644C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA464C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA45A34(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20E96D364((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA467A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA467D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA465DCLL);
    JUMPOUT(0x20EA465ACLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EA4682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA46858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20E96D364(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA46944(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0"
                                "_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA469B0()
{
  return &unk_24C9BDDC0;
}

_QWORD *sub_20EA469BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BDDE0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA46A38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BDDE0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA46AC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BDDE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20EA46B3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BDDE0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA46B94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA46C04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EA46C74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA45A34((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20E96D364((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA46D84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA46DFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA46E30);
  JUMPOUT(0x20EA46E60);
}

uint64_t sub_20EA46E68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA46ED4()
{
  return &unk_24C9BDE40;
}

_QWORD *sub_20EA46EE0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BDE60;
  v2 = a1[4];
  a1[3] = &off_24C9B25F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA46F38(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BDE60;
  v2 = a1[4];
  a1[3] = &off_24C9B25F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA46FA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BDE60;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B25F8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA47018(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA47038(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BDE60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B25F8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA470A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA470B8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B25F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA47108(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B25F8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA47154(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B25F8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA47208(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA47244(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0"
                     "EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugI"
                                "nfoEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA472B0()
{
  return &unk_24C9BDEC0;
}

_QWORD *sub_20EA472BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BDEE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA472F4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BDEE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4733C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BDEE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA4738C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BDEE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA473BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA473CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA473F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4748C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA474C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0"
                     "EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugI"
                                "nfoEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA47534()
{
  return &unk_24C9BDF40;
}

_QWORD *sub_20EA47540(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BDF60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA47578(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BDF60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA475C0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BDF60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA47618(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BDF60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA47650(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA47660(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA4768C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA47808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA47878(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA478E4()
{
  return &unk_24C9BDFC0;
}

_QWORD *sub_20EA478F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BDFE0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA47928(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BDFE0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA47970(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BDFE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA479C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BDFE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA47A00(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA47A10(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA47A3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA47AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA47B40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb"
                     "0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebug"
                                "InfoEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection21HitTestStateDebugInfoEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA47BAC()
{
  return &unk_24C9BE040;
}

void sub_20EA47BBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA47BE0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA47BF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection21HitTestSt"
                     "ateDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection"
                                "21HitTestStateDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection21HitTestStateDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3acv16surfacedetection21HitTestStateDebugInfoEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA47C68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA47CD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA47D38(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 128);
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20EA47DA4(uint64_t a1)
{
  sub_20EA4973C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA47DC8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  std::__shared_weak_count *v54[2];
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  uint64_t v61;
  __int128 *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v54 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v54[0] = v29;
        v54[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v54 = 0uLL;
      }
    }
    v56 = 0;
    v57 = 0;
    v55 = &v56;
    sub_20E96BFB4(&v55, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
    v62 = 0;
    v48 = (char *)operator new(0x30uLL);
    *(_QWORD *)v48 = &off_24C9BE3B0;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v54;
    v49 = v56;
    *((_QWORD *)v48 + 3) = v55;
    *((_QWORD *)v48 + 4) = v49;
    v50 = v48 + 32;
    v51 = v57;
    *((_QWORD *)v48 + 5) = v57;
    if (v51)
    {
      v49[2] = v50;
      v55 = &v56;
      v56 = 0;
      v57 = 0;
    }
    else
    {
      *((_QWORD *)v48 + 3) = v50;
    }
    v62 = (__int128 *)v48;
    sub_210216F3C(*v25, (uint64_t)&v60);
    v52 = v62;
    if (v62 == &v60)
    {
      v53 = 4;
      v52 = &v60;
    }
    else
    {
      if (!v62)
      {
LABEL_61:
        sub_20E96C574((uint64_t)&v55, v56);
        return;
      }
      v53 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v52 + 8 * v53))(v52);
    goto LABEL_61;
  }
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE2E0;
  v4[1].__shared_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1].__shared_owners_;
  v6 = v4 + 1;
  v4[1].__shared_weak_owners_ = 0;
  sub_20E96BFB4(&v4[1].__vftable, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  v58 = v4 + 1;
  v59 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v60 = v10;
  *((_QWORD *)&v60 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_20E866B34();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v60;
    if (!(_QWORD)v60)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v60;
  if ((_QWORD)v60)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v60 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v60 = v38;
      *((_QWORD *)&v60 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v60 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24C9BE330;
  *(_OWORD *)(v43 + 8) = v60;
  v60 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v61 = 0;
  v62 = 0;
  v64 = v43;
  sub_210216F3C(*v34, (uint64_t)v63);
  v44 = v64;
  if (v64 == v63)
  {
    v45 = 4;
    v44 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v59)
  {
    v46 = &v59->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_20EA48260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_20EA4993C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_20EA4993C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA482B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_20E96C574(v17, a12);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA483C4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA483D4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA483E0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA483F0(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 *v72;
  std::string *v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  std::__shared_weak_count *v76[2];
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::runtime_error v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  _QWORD *v90;
  __int128 *v91;
  _QWORD v92[3];
  std::string v93;
  std::string *v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v89 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v89 + 1) = 45;
    v71 = (_QWORD *)a1[6];
    v70 = a1 + 6;
    v69 = v71;
    v72 = (__int128 *)*((unsigned __int8 *)v70 + 23);
    if ((char)v72 < 0)
      v72 = (__int128 *)v70[1];
    else
      v69 = v70;
    v90 = v69;
    v91 = v72;
    sub_20E8778D4((uint64_t)&v89, (uint64_t)v92, 0, 0, &v93);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v93;
    else
      v73 = (std::string *)v93.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v86, (const char *)v73);
    v86.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v75 = std::runtime_error::runtime_error(exception, &v86);
    v75->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v75, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCF00;
    v6[1].__vftable = *a3;
    v84 = v6 + 1;
    v85 = v6;
    v82 = v6 + 1;
    v83 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE2E0;
    v9[1].__shared_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&v9[1].__shared_owners_;
    v11 = v9 + 1;
    v9[1].__shared_weak_owners_ = 0;
    sub_20E96BFB4(&v9[1].__vftable, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
    v87 = v9 + 1;
    v88 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v89 = v15;
    *((_QWORD *)&v89 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v89;
      if (!(_QWORD)v89)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v89 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v89 = v43;
            *((_QWORD *)&v89 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v89 = 0uLL;
          }
        }
        v48 = v82;
        v49 = v83;
        v82 = 0;
        v83 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9BE430;
        *(_OWORD *)(v50 + 8) = v89;
        v89 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v90 = 0;
        v91 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v92[0] = 0;
        v92[1] = 0;
        v94 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v93);
        v51 = v94;
        if (v94 == &v93)
        {
          v52 = 4;
          v51 = &v93;
        }
        else
        {
          if (!v94)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v88)
        {
          v53 = &v88->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v83)
        {
          v55 = &v83->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v85)
        {
          v57 = &v85->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v89;
      if (!(_QWORD)v89)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v76 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v76[0] = v34;
      v76[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v76 = 0uLL;
    }
  }
  v78 = 0;
  v79 = 0;
  v77 = &v78;
  sub_20E96BFB4(&v77, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BCF00;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v80 = &v59[1].__vftable;
  v81 = v59;
  v91 = 0;
  v60 = (char *)operator new(0x40uLL);
  *(_QWORD *)v60 = &off_24C9BE4B0;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v76;
  v61 = v78;
  *((_QWORD *)v60 + 3) = v77;
  *((_QWORD *)v60 + 4) = v61;
  v62 = v60 + 32;
  v63 = v79;
  *((_QWORD *)v60 + 5) = v79;
  if (v63)
  {
    v61[2] = v62;
    v77 = &v78;
    v78 = 0;
    v79 = 0;
  }
  else
  {
    *((_QWORD *)v60 + 3) = v62;
  }
  *((_QWORD *)v60 + 6) = v59 + 1;
  *((_QWORD *)v60 + 7) = v59;
  v80 = 0;
  v81 = 0;
  v91 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v89);
  v64 = v91;
  if (v91 == &v89)
  {
    v65 = 4;
    v64 = &v89;
  }
  else
  {
    if (!v91)
      goto LABEL_75;
    v65 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v64 + 8 * v65))(v64);
LABEL_75:
  v66 = v81;
  if (v81)
  {
    v67 = (unint64_t *)&v81->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  sub_20E96C574((uint64_t)&v77, v78);
}

void sub_20EA48AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EA489CCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA48B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA48B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EA4A9DC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EA4A9DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA48BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;

  sub_20E96C574(v12, a12);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA48C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA48CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E96C574(v9, *(_QWORD **)(v8 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v8);
  operator delete(v11);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA48CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA48CF8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA48D6C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9BE530;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2380;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA48E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA48F10(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BE5B0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA49020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA49084@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BE630;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA4929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA49364@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BE6B0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA4957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA49644(uint64_t a1)
{
  return sub_20EA4973C(a1 - 16);
}

void sub_20EA4964C(uint64_t a1)
{
  sub_20EA4973C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA49674(uint64_t a1, uint64_t a2)
{
  return sub_20EA48D6C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA4967C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA49084((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA49684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA49364((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA4968C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA49694(uint64_t a1)
{
  return sub_20EA4973C(a1 - 24);
}

void sub_20EA4969C(uint64_t a1)
{
  sub_20EA4973C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA496C4(uint64_t a1)
{
  return sub_20EA48F10((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA496CC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EA496D8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA496EC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return sub_20E96BFB4(a2, *(unsigned __int8 **)a1, (unsigned __int8 *)(a1 + 8));
}

void sub_20EA49724(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E96C574(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4973C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BE0F0;
  *(_QWORD *)(a1 + 16) = &unk_24C9BE168;
  *(_QWORD *)(a1 + 24) = &unk_24C9BE1A8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EA4993C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_20E96C574(a1 + 16, *(_QWORD **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA49974(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA49984(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA499B4(uint64_t a1)
{
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
}

_QWORD *sub_20EA499C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BE330;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA49A0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BE330;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA49A60(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BE330;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA49AD0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BE330;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA49B20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA49B5C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA49B94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA49EB8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EA3D090(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA49D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EA3D090(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA49E40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25Enque"
                     "ueMessageAndDispatchIZNKSK_4SendERKSJ_EUlT_T0_E_EEvSN_SO_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_4SendERKSJ_EUlT_T0_E_EEvSN_SO_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_4SendERKSJ_EUlT_T0_E_EEvSN_SO_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_4SendERKSJ_EUlT_T0_E_EEvSN_SO_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA49EAC()
{
  return &unk_24C9BE390;
}

void sub_20EA49EB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD **v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::mutex *v57;
  uint64_t **v58;
  _QWORD **v59;
  _QWORD *v60[2];
  std::exception_ptr v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_QWORD ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v59, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _QWORD ***))(j[2] + 16))(j + 2, &v59);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    v57 = (std::mutex *)(v14 + 24);
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v61.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v61), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 152) = 0;
    v16 = (uint64_t *)(v14 + 152);
    *(_QWORD *)(v14 + 144) = v14 + 152;
    v17 = (uint64_t **)(v14 + 144);
    *(_QWORD *)(v14 + 160) = 0;
    v18 = v59;
    v19 = v60;
    if (v59 != v60)
    {
      v58 = (uint64_t **)(v14 + 144);
      do
      {
        v20 = sub_20E96C0BC(v17, v16, &v65, &v64, (unsigned __int8 *)v18 + 32);
        if (*(_QWORD *)v20)
        {
          v21 = (_QWORD *)v18[1];
          if (!v21)
            goto LABEL_55;
          goto LABEL_49;
        }
        v22 = operator new(0x58uLL);
        v61.__ptr_ = v22;
        v62 = v16;
        v63 = 0;
        v23 = *((_OWORD *)v18 + 2);
        v22[6] = 0;
        *((_OWORD *)v22 + 2) = v23;
        v22[7] = 0;
        v22[8] = 0;
        v24 = v18[6];
        v25 = v18[7];
        v26 = v25 - v24;
        if (v25 != v24)
        {
          v27 = v14;
          v28 = v19;
          v29 = 0x8E38E38E38E38E39 * (v26 >> 4);
          if (v29 >= 0x1C71C71C71C71C8)
            sub_20E969238();
          v30 = (char *)operator new(v26);
          v31 = 0;
          v22[6] = v30;
          v22[7] = v30;
          v22[8] = &v30[144 * v29];
          do
          {
            v32 = v24 + v31;
            v33 = &v30[v31];
            v34 = *(_OWORD *)(v24 + v31);
            v35 = *(_OWORD *)(v24 + v31 + 16);
            v36 = *(_OWORD *)(v24 + v31 + 48);
            *((_OWORD *)v33 + 2) = *(_OWORD *)(v24 + v31 + 32);
            *((_OWORD *)v33 + 3) = v36;
            *(_OWORD *)v33 = v34;
            *((_OWORD *)v33 + 1) = v35;
            v38 = *(_OWORD *)(v24 + v31 + 96);
            v37 = *(_OWORD *)(v24 + v31 + 112);
            v39 = *(_OWORD *)(v24 + v31 + 80);
            *(_OWORD *)(v33 + 121) = *(_OWORD *)(v24 + v31 + 121);
            *((_OWORD *)v33 + 6) = v38;
            *((_OWORD *)v33 + 7) = v37;
            *((_OWORD *)v33 + 5) = v39;
            *((_OWORD *)v33 + 4) = *(_OWORD *)(v24 + v31 + 64);
            v31 += 144;
          }
          while (v32 + 144 != v25);
          v22[7] = &v30[v31];
          v19 = v28;
          v14 = v27;
          v17 = v58;
        }
        *(_OWORD *)(v22 + 9) = *(_OWORD *)(v18 + 9);
        v63 = 1;
        v40 = v65;
        *v22 = 0;
        v22[1] = 0;
        v22[2] = v40;
        *(_QWORD *)v20 = v22;
        v41 = (uint64_t *)**v17;
        if (v41)
        {
          *v17 = v41;
          v22 = *(_QWORD **)v20;
        }
        v42 = *v16;
        v8 = v22 == (_QWORD *)*v16;
        *((_BYTE *)v22 + 24) = v8;
        if (v8)
        {
LABEL_48:
          ++*(_QWORD *)(v14 + 160);
          v21 = (_QWORD *)v18[1];
          if (!v21)
            goto LABEL_55;
          goto LABEL_49;
        }
        while (1)
        {
          v43 = v22[2];
          if (*(_BYTE *)(v43 + 24))
            goto LABEL_48;
          v44 = *(uint64_t **)(v43 + 16);
          v45 = *v44;
          if (*v44 != v43)
            break;
          v48 = v44[1];
          if (!v48 || (v49 = *(unsigned __int8 *)(v48 + 24), v46 = (_BYTE *)(v48 + 24), v49))
          {
            if (*(_QWORD **)v43 == v22)
            {
              *(_BYTE *)(v43 + 24) = 1;
              *((_BYTE *)v44 + 24) = 0;
              v52 = *(_QWORD *)(v43 + 8);
              *v44 = v52;
              if (v52)
                goto LABEL_46;
            }
            else
            {
              v50 = *(uint64_t **)(v43 + 8);
              v51 = *v50;
              *(_QWORD *)(v43 + 8) = *v50;
              if (v51)
              {
                *(_QWORD *)(v51 + 16) = v43;
                v44 = *(uint64_t **)(v43 + 16);
              }
              v50[2] = (uint64_t)v44;
              *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v50;
              *v50 = v43;
              *(_QWORD *)(v43 + 16) = v50;
              v44 = (uint64_t *)v50[2];
              v43 = *v44;
              *((_BYTE *)v50 + 24) = 1;
              *((_BYTE *)v44 + 24) = 0;
              v52 = *(_QWORD *)(v43 + 8);
              *v44 = v52;
              if (v52)
LABEL_46:
                *(_QWORD *)(v52 + 16) = v44;
            }
            *(_QWORD *)(v43 + 16) = v44[2];
            *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v43;
            *(_QWORD *)(v43 + 8) = v44;
            v44[2] = v43;
            goto LABEL_48;
          }
LABEL_34:
          *(_BYTE *)(v43 + 24) = 1;
          v22 = v44;
          *((_BYTE *)v44 + 24) = v44 == (uint64_t *)v42;
          *v46 = 1;
          if (v44 == (uint64_t *)v42)
            goto LABEL_48;
        }
        if (v45)
        {
          v47 = *(unsigned __int8 *)(v45 + 24);
          v46 = (_BYTE *)(v45 + 24);
          if (!v47)
            goto LABEL_34;
        }
        if (*(_QWORD **)v43 == v22)
        {
          v56 = v22[1];
          *(_QWORD *)v43 = v56;
          if (v56)
          {
            *(_QWORD *)(v56 + 16) = v43;
            v44 = *(uint64_t **)(v43 + 16);
          }
          v22[2] = v44;
          *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * (**(_QWORD **)(v43 + 16) != v43)) = v22;
          v22[1] = v43;
          *(_QWORD *)(v43 + 16) = v22;
          v44 = (uint64_t *)v22[2];
          *((_BYTE *)v22 + 24) = 1;
          *((_BYTE *)v44 + 24) = 0;
          v54 = (uint64_t *)v44[1];
          v55 = *v54;
          v44[1] = *v54;
          if (v55)
LABEL_53:
            *(_QWORD *)(v55 + 16) = v44;
        }
        else
        {
          *(_BYTE *)(v43 + 24) = 1;
          *((_BYTE *)v44 + 24) = 0;
          v54 = (uint64_t *)v44[1];
          v55 = *v54;
          v44[1] = *v54;
          if (v55)
            goto LABEL_53;
        }
        v54[2] = v44[2];
        *(_QWORD *)(v44[2] + 8 * (*(_QWORD *)v44[2] != (_QWORD)v44)) = v54;
        *v54 = (uint64_t)v44;
        v44[2] = (uint64_t)v54;
        ++*(_QWORD *)(v14 + 160);
        v21 = (_QWORD *)v18[1];
        if (!v21)
        {
          do
          {
LABEL_55:
            v53 = (_QWORD *)v18[2];
            v8 = *v53 == (_QWORD)v18;
            v18 = v53;
          }
          while (!v8);
          goto LABEL_20;
        }
        do
        {
LABEL_49:
          v53 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
LABEL_20:
        v18 = v53;
      }
      while (v53 != v19);
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v57);
  }
  sub_20E96C574((uint64_t)&v59, v60[0]);
}

void sub_20EA4A4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, int a16, __int16 a17, char a18, unsigned __int8 a19, char a20,_QWORD *a21,uint64_t a22,char a23)
{
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  std::mutex::unlock(a10);
  sub_20E96C574((uint64_t)&a20, a21);
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a13 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a12 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a13, "\n", "message: ", (const char *)&a12, "\n");
    if ((a19 & 0x80u) == 0)
      v27 = (uint64_t *)&a14;
    else
      v27 = a14;
    if ((a19 & 0x80u) == 0)
      v28 = a19;
    else
      v28 = a15;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA4A5F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA4A618);
}

uint64_t sub_20EA4A624(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9BE3B0;
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4A664(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9BE3B0;
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4A6B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BE3B0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[4] = 0;
  v2[3] = v2 + 4;
  v2[5] = 0;
  sub_20E96BFB4(v2 + 3, *(unsigned __int8 **)(a1 + 24), (unsigned __int8 *)(a1 + 32));
  return v3;
}

void sub_20EA4A738(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_20E96C574(v2, *(_QWORD **)(v1 + 32));
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA4A764(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BE3B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[4] = 0;
  a2[3] = a2 + 4;
  a2[5] = 0;
  return sub_20E96BFB4(a2 + 3, *(unsigned __int8 **)(a1 + 24), (unsigned __int8 *)(a1 + 32));
}

void sub_20EA4A7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_20E96C574(v2, *(_QWORD **)(v1 + 32));
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void sub_20EA4A7FC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20EA4A838(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete((void *)a1);
}

void sub_20EA4A870(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA49EB8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EA3D090(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4A918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EA3D090(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA4A964(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE4SendERKSJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE4SendERKSJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE4SendERKSJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE4SendERKSJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4A9D0()
{
  return &unk_24C9BE410;
}

uint64_t sub_20EA4A9DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_20E96C574(a1 + 16, *(_QWORD **)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_20E96C574(a1 + 16, *(_QWORD **)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_20EA4AA64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BE430;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA4AAEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BE430;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA4AB84(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BE430;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA4AC14(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BE430;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA4AC84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA4AD04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA4AD80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA49EB8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EA3D090((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA4B05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA4B088(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA4AE94);
    JUMPOUT(0x20EA4AE64);
  }
  sub_20E96CE78(3u);
}

void sub_20EA4B0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA4B110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EA3D090(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4B1FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25Enque"
                     "ueMessageAndDispatchIZNKSK_7ProcessERKSJ_NS4_7promiseISJ_EEEUlT_T0_E_EEvSN_SQ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_7ProcessERKSJ_NS4_7promiseISJ_EEEUlT_T0"
                                "_E_EEvSN_SQ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_7ProcessERKSJ_NS4_7promiseISJ_EEEUlT_T0_E_EEvSN_SQ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE25EnqueueMessageAndDispatchIZNKSK_7ProcessERKSJ_NS4_7promiseISJ_EEEUlT_T0_E_EEvSN_SQ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4B268()
{
  return &unk_24C9BE490;
}

uint64_t sub_20EA4B274(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9BE4B0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA4B308(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9BE4B0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4B3AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BE4B0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[4] = 0;
  v2[3] = v2 + 4;
  v2[5] = 0;
  sub_20E96BFB4(v2 + 3, *(unsigned __int8 **)(a1 + 24), (unsigned __int8 *)(a1 + 32));
  v8 = *(_QWORD *)(a1 + 56);
  v3[6] = *(_QWORD *)(a1 + 48);
  v3[7] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20EA4B450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_20E96C574(v2, *(_QWORD **)(v1 + 32));
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA4B47C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BE4B0;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a2[4] = 0;
  a2[3] = a2 + 4;
  a2[5] = 0;
  result = sub_20E96BFB4(a2 + 3, *(unsigned __int8 **)(a1 + 24), (unsigned __int8 *)(a1 + 32));
  v9 = *(_QWORD *)(a1 + 56);
  a2[6] = *(_QWORD *)(a1 + 48);
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA4B514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_20E96C574(v2, *(_QWORD **)(v1 + 32));
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void sub_20EA4B538(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA4B5C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_20E96C574(a1 + 24, *(_QWORD **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete((void *)a1);
}

void sub_20EA4B648(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA49EB8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EA3D090((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA4B758(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA4B7D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA4B804);
  JUMPOUT(0x20EA4B834);
}

uint64_t sub_20EA4B83C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE7Proces"
                     "sERKSJ_NS4_7promiseISJ_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE7ProcessERKSJ_NS4_7promiseISJ_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE7ProcessERKSJ_NS4_7promiseISJ_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE7ProcessERKSJ_NS4_7promiseISJ_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4B8A8()
{
  return &unk_24C9BE510;
}

_QWORD *sub_20EA4B8B4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BE530;
  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA4B90C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BE530;
  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4B974(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BE530;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2380;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA4B9EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4BA0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BE530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2380;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA4BA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA4BA8C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2380;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA4BADC(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2380;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA4BB28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2380;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4BBDC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA4BC18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection"
                     "23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE9Subscri"
                     "beENS1_12ChannelInputISJ_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfa"
                                "cedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEE"
                                "EESJ_vSJ_Lb0EE9SubscribeENS1_12ChannelInputISJ_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE9SubscribeENS1_12ChannelInputISJ_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE9SubscribeENS1_12ChannelInputISJ_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4BC84()
{
  return &unk_24C9BE590;
}

_QWORD *sub_20EA4BC90(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BE5B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4BCC8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BE5B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4BD10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BE5B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA4BD60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BE5B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA4BD90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA4BDA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA4BDCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4BE60(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA4BE9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection"
                     "23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15AddErr"
                     "orHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfa"
                                "cedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEE"
                                "EESJ_vSJ_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4BF08()
{
  return &unk_24C9BE610;
}

_QWORD *sub_20EA4BF14(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BE630;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4BF4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BE630;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4BF94(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BE630;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA4BFEC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BE630;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA4C024(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA4C034(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA4C060(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA4C1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA4C24C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE16Outpu"
                     "tHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4C2B8()
{
  return &unk_24C9BE690;
}

_QWORD *sub_20EA4C2C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BE6B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4C2FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BE6B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4C344(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BE6B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA4C39C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BE6B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA4C3D4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA4C3E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA4C410(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA4C514(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetectio"
                     "n23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15Error"
                     "HandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surf"
                                "acedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEE"
                                "EEESJ_vSJ_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__13mapINS_3esn6random4UUIDENS_3acv16surfacedetection23HitTestResultCollectionENS4_4lessIS8_EENS4_9allocatorINS4_4pairIKS8_SB_EEEEEESJ_vSJ_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA4C580()
{
  return &unk_24C9BE710;
}

void sub_20EA4C590(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA4C5B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA4C5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_3mapINS1_3esn6random4UUIDENS1_3acv1"
                     "6surfacedetection23HitTestResultCollectionENS_4lessIS9_EENS_9allocatorINS_4pairIKS9_SC_EEEEEESK_vSK"
                     "_Lb0EEEE27__shared_ptr_default_deleteISL_SL_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_3mapINS1_3esn6random4UUI"
                                "DENS1_3acv16surfacedetection23HitTestResultCollectionENS_4lessIS9_EENS_9allocatorINS_4pa"
                                "irIKS9_SC_EEEEEESK_vSK_Lb0EEEE27__shared_ptr_default_deleteISL_SL_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_3mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection23HitTestResultCollectionENS_4lessIS9_EENS_9allocatorINS_4pairIKS9_SC_EEEEEESK_vSK_Lb0EEEE27__shared_ptr_default_deleteISL_SL_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_3mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection23HitTestResultCollectionENS_4lessIS9_EENS_9allocatorINS_4pairIKS9_SC_EEEEEESK_vSK_Lb0EEEE27__shared_ptr_default_deleteISL_SL_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA4C63C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4C668(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4C6A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BE780;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA4C70C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4C79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4C7B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4C854(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4C92C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4C9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4CA04(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA4CAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4CABC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA4CACC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4CAFC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EA4CB5C(uint64_t a1)
{
  sub_20EA4D468(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4CB80(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA4D5C4(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA4D960(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA4CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA4D960(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4CC64(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4CC74(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4CC80(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA4CC90(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA4D5C4(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA4D960(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA4CE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA4CD54);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA4CE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA4CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA4D960(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA4CF20(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA4CFA4(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2938;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4D054(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4D068(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA4D0F8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4D10C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA4DA88(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4D150(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4D164(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA4D198(uint64_t a1)
{
  return sub_20EA4D468(a1 - 16);
}

void sub_20EA4D1A0(uint64_t a1)
{
  sub_20EA4D468(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4D1C8(uint64_t a1, uint64_t a2)
{
  sub_20EA4CFA4(a1 - 16, a2);
}

void sub_20EA4D1D0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA4DA88(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4D214(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4D228(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA4D25C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA4D264(uint64_t a1)
{
  return sub_20EA4D468(a1 - 24);
}

void sub_20EA4D26C(uint64_t a1)
{
  sub_20EA4D468(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4D294(uint64_t a1)
{
  sub_20EA4D068(a1 - 24);
}

uint64_t sub_20EA4D29C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA4D2A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA4D30C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA4D374(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)v4[1];
  v11 = v6;
  *v4 = v5;
  v4[1] = (uint64_t)v6;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v5 = *v4;
    v11 = (std::__shared_weak_count *)v4[1];
  }
  *a3 = v5;
  a3[1] = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_20EA4D468(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BE838;
  *(_QWORD *)(a1 + 16) = &unk_24C9BE8B0;
  *(_QWORD *)(a1 + 24) = &unk_24C9BE8F0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA4D5C4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_20EA4D854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA4D934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA4D954);
}

uint64_t *sub_20EA4D960(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA4DA4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA4D9A8);
}

char *sub_20EA4DA88(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA4DB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA4DB88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA4DBAC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA4DBC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS_6vectorINS1_3acv1"
                     "6surfacedetection24ContinuousTrackingResultENS_9allocatorIS9_EEEEEENS_8weak_ptrISD_EEvSG_Lb0EEEE27_"
                     "_shared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS_6vecto"
                                "rINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorIS9_EEEEEENS_8weak_p"
                                "trISD_EEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorIS9_EEEEEENS_8weak_ptrISD_EEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorIS9_EEEEEENS_8weak_ptrISD_EEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA4DC34(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4DC60(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4DC9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BEA88;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA4DD04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4DD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4DDA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4DE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4DE4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4DF24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4DFFC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA4E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4E0B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA4E0C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA4E0F4(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA4E158(uint64_t a1)
{
  sub_20EA4F06C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4E17C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA4F1C8(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA4F564(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA4E238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA4F564(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4E260(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4E270(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4E27C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA4E28C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA4F1C8(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA4F564(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA4E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA4E350);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA4E498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA4E4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA4F564(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA4E51C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA4E5A0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2868;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4E650(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4E664(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA4E6F4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4E708(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA4F68C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4E74C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4E760(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA4E794(uint64_t a1)
{
  return sub_20EA4F06C(a1 - 16);
}

void sub_20EA4E79C(uint64_t a1)
{
  sub_20EA4F06C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4E7C4(uint64_t a1, uint64_t a2)
{
  sub_20EA4E5A0(a1 - 16, a2);
}

void sub_20EA4E7CC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA4F68C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA4E810(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4E824(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA4E858(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA4E860(uint64_t a1)
{
  return sub_20EA4F06C(a1 - 24);
}

void sub_20EA4E868(uint64_t a1)
{
  sub_20EA4F06C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4E890(uint64_t a1)
{
  sub_20EA4E664(a1 - 24);
}

uint64_t sub_20EA4E898(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA4E8A0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA4E908(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA4E970(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  void *v21;
  _OWORD v22[8];

  v5 = *(uint64_t ***)(a1 + 8);
  sub_20EA4EBA8((uint64_t)__p, a2);
  v6 = *(_OWORD *)(a2 + 56);
  v22[0] = *(_OWORD *)(a2 + 40);
  v22[1] = v6;
  v7 = *(_OWORD *)(a2 + 88);
  v22[2] = *(_OWORD *)(a2 + 72);
  v22[3] = v7;
  v22[7] = *(_OWORD *)(a2 + 152);
  v22[6] = *(_OWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 120);
  v22[4] = *(_OWORD *)(a2 + 104);
  v22[5] = v8;
  v9 = *v5;
  if (!*v5)
  {
    v9 = (uint64_t *)operator new();
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_DWORD *)(v10 + 32) = 1065353216;
    *(_QWORD *)(v10 + 48) = 0;
    *v9 = v10;
    v9[1] = (uint64_t)sub_20EEF04A8;
    v11 = *v5;
    *v5 = v9;
    if (v11)
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
        ((void (*)(void))v11[1])();
      MEMORY[0x212BC6398](v11, 0xA0C40AFF93C70);
      v9 = *v5;
    }
  }
  v13 = sub_20EEEC1CC(*v9, (uint64_t)__p, (uint64_t)v22);
  sub_20EEEC8C8(*v9, v13, a3);
  v14 = v21;
  if (v21)
  {
    do
    {
      v16 = v14;
      v14 = (_QWORD *)*v14;
      v17 = (std::__shared_weak_count *)v16[8];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    while (v14);
  }
  v15 = __p[0];
  __p[0] = 0;
  if (v15)
    operator delete(v15);
}

void sub_20EA4EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  MEMORY[0x212BC6398](v12, 0xA0C40AFF93C70);
  v14 = a12;
  while (v14)
  {
    v15 = v14;
    v14 = (_QWORD *)*v14;
    v16 = (std::__shared_weak_count *)v15[8];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4EBA8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20EA4ECE8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20EA4ECC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E961D20(v1);
  _Unwind_Resume(a1);
}

void sub_20EA4ECD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E961D20(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA4ECE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v7 = sub_2102322B4((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v17 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x48uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)((char *)v12 + 44) = *(_QWORD *)(a3 + 28);
  *((_DWORD *)v12 + 13) = *(_DWORD *)(a3 + 36);
  v18 = *(_QWORD *)(a3 + 48);
  v12[7] = *(_QWORD *)(a3 + 40);
  v12[8] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v24)
    {
LABEL_37:
      *v12 = *v24;
LABEL_72:
      *v24 = v12;
      goto LABEL_73;
    }
  }
  else
  {
    v25 = 1;
    if (v9 >= 3)
      v25 = (v9 & (v9 - 1)) != 0;
    v26 = v25 | (2 * v9);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_48;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_48:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v33 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v24)
          goto LABEL_37;
      }
      else
      {
        v3 = v8;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v24)
          goto LABEL_37;
      }
    }
    else
    {
      v3 = v33 & v8;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v33 & v8));
      if (v24)
        goto LABEL_37;
    }
  }
  *v12 = *v17;
  *v17 = v12;
  *(_QWORD *)(v23 + 8 * v3) = v17;
  if (*v12)
  {
    v34 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20EA4F058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E96CD10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4F06C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BEB50;
  *(_QWORD *)(a1 + 16) = &unk_24C9BEBC8;
  *(_QWORD *)(a1 + 24) = &unk_24C9BEC08;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA4F1C8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_20EA4F458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA4F538(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA4F558);
}

uint64_t *sub_20EA4F564(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA4F650(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA4F5ACLL);
}

char *sub_20EA4F68C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA4F768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA4F78C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA4F7B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA4F7C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent"
                     "_ray_casting24MeshUpdateWithCameraPoseENS_8weak_ptrIKNS_13unordered_mapINS1_3esn6random4UUIDENS1_3a"
                     "cv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorINS_4pa"
                     "irIKSD_SG_EEEEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d2"
                                "2concurrent_ray_casting24MeshUpdateWithCameraPoseENS_8weak_ptrIKNS_13unordered_mapINS1_3"
                                "esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISD_EENS_8e"
                                "qual_toISD_EENS_9allocatorINS_4pairIKSD_SG_EEEEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting24MeshUpdateWithCameraPoseENS_8weak_ptrIKNS_13unordered_mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorINS_4pairIKSD_SG_EEEEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting24MeshUpdateWithCameraPoseENS_8weak_ptrIKNS_13unordered_mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorINS_4pairIKSD_SG_EEEEEEEEvSS_Lb0EEEE27__shared_ptr_default_deleteIST_ST_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA4F838(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA4F864(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA4F8A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BEDA0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA4F908(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4F9AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA4FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4FA50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4FB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4FB28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA4FBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4FC00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA4FCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA4FCB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA4FCC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4FCF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EA4FD58(uint64_t a1)
{
  sub_20EA510D0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA4FD7C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA5122C(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA515C8(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA4FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA515C8(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA4FE60(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4FE70(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA4FE7C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA4FE8C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA5122C(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA515C8(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA50024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA4FF50);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA50098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA500F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA515C8(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA5011C(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA501A0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2800;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA50250(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA50264(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA502F4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA50308(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA516F0(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA5034C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA50360(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA50394(uint64_t a1)
{
  return sub_20EA510D0(a1 - 16);
}

void sub_20EA5039C(uint64_t a1)
{
  sub_20EA510D0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA503C4(uint64_t a1, uint64_t a2)
{
  sub_20EA501A0(a1 - 16, a2);
}

void sub_20EA503CC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA516F0(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA50410(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA50424(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA50458(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA50460(uint64_t a1)
{
  return sub_20EA510D0(a1 - 24);
}

void sub_20EA50468(uint64_t a1)
{
  sub_20EA510D0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA50490(uint64_t a1)
{
  sub_20EA50264(a1 - 24);
}

uint64_t sub_20EA50498(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA504A0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA50508(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA50570(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  _BOOL8 v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  _BOOL8 v31;
  unint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  float64x2_t *v39;
  float64x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  _BYTE v77[28];
  void *v78[2];
  uint64_t v79;
  __int128 v80;
  _BYTE v81[28];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t (**v85)();
  uint64_t (**v86)();
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t (**v99)();
  _QWORD *v100;
  std::__shared_weak_count *v101;
  uint64_t (**v102)();
  uint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  float32x4_t v112[2];

  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  v103 = v6;
  v104 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v102 = &off_24CA1A9C0;
  if (v6)
  {
    v11 = *v6;
    v10 = (std::__shared_weak_count *)v6[1];
    if (!v10)
      goto LABEL_10;
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (v14)
    {
LABEL_10:
      if (!v11)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
LABEL_11:
      sub_2101613B8((uint64_t)v103);
  }
LABEL_12:
  v15 = *(_QWORD **)(a2 + 32);
  v16 = *(std::__shared_weak_count **)(a2 + 40);
  v100 = v15;
  v101 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v15 = v100;
  }
  v99 = &off_24CA1A9C0;
  if (v15)
  {
    v19 = *v15;
    v20 = (std::__shared_weak_count *)v15[1];
    if (!v20)
      goto LABEL_22;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (v23)
    {
LABEL_22:
      if (!v19)
        goto LABEL_24;
      goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v19)
LABEL_23:
      sub_2101613B8((uint64_t)v100);
  }
LABEL_24:
  sub_21015C40C((uint64_t)&v102, (uint64_t *)&v75);
  if (HIDWORD(v76))
    v24 = (_DWORD)v76 == 0;
  else
    v24 = 1;
  v25 = v76;
  if (v24)
    v25 = 0;
  v26 = (_DWORD)v25 != 0;
  v27 = v25 << 32;
  if (!HIDWORD(v25))
    v27 = 0;
  *(_QWORD *)v77 = v25;
  *(_QWORD *)&v77[8] = v27 | v26;
  v77[16] = 0;
  v77[24] = 0;
  v105 = v27 | v26;
  if (((v27 >> 30) & ((v27 >> 30) - 1)) != 0)
    v28 = 4;
  else
    v28 = v27 >> 30;
  sub_20EA50CE4((unint64_t *)v78, &v75, (uint64_t *)&v105, 1, v28);
  sub_21015C40C((uint64_t)&v99, (uint64_t *)&v73);
  if (HIDWORD(v74))
    v29 = (_DWORD)v74 == 0;
  else
    v29 = 1;
  v30 = v74;
  if (v29)
    v30 = 0;
  v31 = (_DWORD)v30 != 0;
  v32 = v30 << 32;
  if (!HIDWORD(v30))
    v32 = 0;
  *(_QWORD *)v81 = v30;
  *(_QWORD *)&v81[8] = v32 | v31;
  v81[16] = 0;
  v81[24] = 0;
  v105 = v32 | v31;
  if (((v32 >> 30) & ((v32 >> 30) - 1)) != 0)
    v33 = 4;
  else
    v33 = v32 >> 30;
  sub_20EA50CE4((unint64_t *)&v82, &v73, (uint64_t *)&v105, 1, v33);
  v34.f64[0] = *(float64_t *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 48);
  v34.f64[1] = *(float64_t *)(a2 + 88);
  v112[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), *(float64x2_t *)(a2 + 104));
  sub_20EF4A7C0((uint64_t)&v105, (uint64_t)v112);
  v85 = &off_24C9F15F0;
  v86 = &off_24C9F1578;
  v87 = v106;
  v88 = v107;
  v89 = v108;
  v36 = v109;
  v90 = v109;
  v37 = v110;
  v91 = v110;
  v38 = v111;
  v92 = v111;
  v93 = v35;
  *(float *)&v94 = (float)v35;
  *((float *)&v94 + 1) = (float)HIDWORD(v35);
  v40 = *(float64x2_t *)(a2 + 184);
  v39 = (float64x2_t *)(a2 + 184);
  v41 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v39[1]);
  v42 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39[2]), v39[3]);
  v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39[6]), v39[7]);
  v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39[4]), v39[5]);
  v98 = v43;
  v96 = v42;
  v95 = v41;
  v44 = (char *)operator new(0x150uLL);
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = 0;
  *(_QWORD *)v44 = &off_24C9BF068;
  *(_OWORD *)(v44 + 24) = *(_OWORD *)v77;
  *(_OWORD *)(v44 + 36) = *(_OWORD *)&v77[12];
  *(_OWORD *)(v44 + 56) = *(_OWORD *)v78;
  *((_QWORD *)v44 + 9) = v79;
  v78[0] = 0;
  v78[1] = 0;
  v45 = *(_OWORD *)v81;
  *((_OWORD *)v44 + 5) = v80;
  *((_OWORD *)v44 + 6) = v45;
  *(_OWORD *)(v44 + 108) = *(_OWORD *)&v81[12];
  *((_OWORD *)v44 + 8) = v82;
  *((_QWORD *)v44 + 18) = v83;
  v82 = 0uLL;
  *(_OWORD *)(v44 + 152) = v84;
  *((_QWORD *)v44 + 21) = &off_24C9F15F0;
  *((_QWORD *)v44 + 22) = &off_24C9F1578;
  *(_OWORD *)(v44 + 184) = v87;
  *(_OWORD *)(v44 + 200) = v88;
  *(_OWORD *)(v44 + 216) = v89;
  *((_QWORD *)v44 + 29) = v36;
  *((_DWORD *)v44 + 60) = v37;
  *(_QWORD *)(v44 + 244) = v38;
  v46 = v94;
  *((_QWORD *)v44 + 32) = v35;
  *((_QWORD *)v44 + 33) = v46;
  v47 = v95;
  v48 = v96;
  v49 = v98;
  *((float32x4_t *)v44 + 19) = v97;
  *((float32x4_t *)v44 + 20) = v49;
  *((float32x4_t *)v44 + 17) = v47;
  *((float32x4_t *)v44 + 18) = v48;
  v50 = (std::__shared_weak_count *)v5[1];
  *v5 = v44 + 24;
  v5[1] = v44;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v85 = &off_24C9F15F0;
  if (*((_QWORD *)&v82 + 1))
    free(*((void **)&v82 + 1));
  *((_QWORD *)&v82 + 1) = 0;
  if (v78[1])
    free(v78[1]);
  v53 = v5[1];
  *a3 = *v5;
  a3[1] = v53;
  if (v53)
  {
    v54 = (unint64_t *)(v53 + 16);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (v100)
  {
    v57 = *v100;
    v56 = (std::__shared_weak_count *)v100[1];
    if (v56)
    {
      v58 = (unint64_t *)&v56->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      do
        v60 = __ldaxr(v58);
      while (__stlxr(v60 - 1, v58));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        if (!v57)
          goto LABEL_64;
        goto LABEL_63;
      }
    }
    if (v57)
LABEL_63:
      sub_210161594((uint64_t)v100);
  }
LABEL_64:
  v99 = &off_24CA1A9A0;
  v61 = v101;
  if (!v101)
    goto LABEL_68;
  v62 = (unint64_t *)&v101->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = v103;
    if (!v103)
      goto LABEL_76;
  }
  else
  {
LABEL_68:
    v64 = v103;
    if (!v103)
      goto LABEL_76;
  }
  v66 = *v64;
  v65 = (std::__shared_weak_count *)v64[1];
  if (!v65)
    goto LABEL_74;
  v67 = (unint64_t *)&v65->__shared_owners_;
  do
    v68 = __ldxr(v67);
  while (__stxr(v68 + 1, v67));
  do
    v69 = __ldaxr(v67);
  while (__stlxr(v69 - 1, v67));
  if (v69)
  {
LABEL_74:
    if (!v66)
      goto LABEL_76;
    goto LABEL_75;
  }
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if (v66)
LABEL_75:
    sub_210161594((uint64_t)v103);
LABEL_76:
  v102 = &off_24CA1A9A0;
  v70 = v104;
  if (v104)
  {
    v71 = (unint64_t *)&v104->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_20EA50B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  *(_QWORD *)(v36 - 256) = &off_24CA1A9A0;
  v38 = *(std::__shared_weak_count **)(v36 - 240);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      sub_21015CB94((_QWORD *)(v36 - 232));
      _Unwind_Resume(a1);
    }
  }
  sub_21015CB94((_QWORD *)(v36 - 232));
  _Unwind_Resume(a1);
}

void sub_20EA50C58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA50C68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA50C98(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[21] = &off_24C9F15F0;
  v2 = (void *)a1[17];
  if (v2)
    free(v2);
  a1[17] = 0;
  v3 = (void *)a1[8];
  if (v3)
    free(v3);
  a1[8] = 0;
}

unint64_t *sub_20EA50CE4(unint64_t *a1, char **a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  int v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  size_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *memptr;

  if (a4)
  {
    v7 = *a3;
    v8 = *((_DWORD *)a2 + 3);
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)a2 + 2);
    v8 = *((_DWORD *)a2 + 3);
    v10 = (_DWORD)v9 != 0;
    if (v8)
      v9 = v9;
    else
      v9 = 0;
    v7 = v10 | (v9 << 32);
  }
  v11 = v8 * HIDWORD(v7);
  v12 = 4 * v11;
  v13 = (a5 - 1) | ((unint64_t)(a5 - 1) >> 1) | (((a5 - 1) | ((unint64_t)(a5 - 1) >> 1)) >> 2);
  v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
  v15 = v14 | (v14 >> 16) | ((v14 | (v14 >> 16)) >> 32);
  if (v15 + 1 > 8)
    v16 = v15 + 1;
  else
    v16 = 8;
  *a1 = v12;
  a1[1] = 0;
  a1[2] = v16;
  if (!v11)
  {
    v18 = 0;
    v19 = 4 * v7;
    v20 = (unint64_t)a2[1];
    a1[3] = v20;
    a1[4] = (4 * v7) & 0xFFFFFFFCFFFFFFFCLL;
    if (!*((_DWORD *)a2 + 2))
      return a1;
LABEL_15:
    if (!*((_DWORD *)a2 + 3))
      return a1;
    v22 = (_DWORD)v20 == 0;
    v21 = HIDWORD(v20);
    v22 = v22 || v21 == 0;
    if (v22)
      LODWORD(v21) = 0;
    if ((_DWORD)v21 * (v19 >> 34) == -1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_50;
    }
    v23 = v7 & 0x3FFFFFFF3FFFFFFFLL;
    v24 = *((unsigned int *)a2 + 4);
    v25 = v7 & 0x3FFFFFFF;
    if (v25 == 1 && (_DWORD)v24 == 1)
    {
      v26 = *((unsigned int *)a2 + 5);
      v27 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v26 == HIDWORD(v23) && (_DWORD)v26 == (_DWORD)v27)
      {
        v28 = (*((_DWORD *)a2 + 3) * v26);
        v29 = *a2;
        if (!(_DWORD)v28 || v29)
        {
          if (!(_DWORD)v28)
            return a1;
        }
        else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_50;
        }
        memmove(v18, v29, 4 * v28);
        return a1;
      }
      if (!(_DWORD)v27)
        return a1;
      v45 = *((_DWORD *)a2 + 3);
      if (!v45)
        return a1;
      v46 = *a2;
      v47 = 4 * v27;
      v48 = v45 - 1;
      if (v45 == 1)
      {
LABEL_53:
        if (v46
          || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          memmove(v18, v46, v47);
          return a1;
        }
      }
      else
      {
        v49 = 4 * v26;
        v50 = 4 * HIDWORD(v23);
        while (v46
             || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          memmove(v18, v46, v47);
          v46 += v49;
          v18 = (_DWORD *)((char *)v18 + v50);
          if (!--v48)
            goto LABEL_53;
        }
      }
LABEL_50:
      abort();
    }
    v30 = *((_DWORD *)a2 + 2);
    if (!v30)
      return a1;
    v31 = *((_DWORD *)a2 + 3);
    if (!v31)
      return a1;
    v32 = v30 - 1;
    v33 = *a2;
    v34 = v31 - 1;
    if (v34)
    {
      v35 = HIDWORD(v23);
      v36 = *((unsigned int *)a2 + 5);
      if (!v32)
      {
        do
        {
          *v18 = *v33;
          v33 += v36;
          v18 += v35;
          --v34;
        }
        while (v34);
LABEL_57:
        *v18 = *v33;
        return a1;
      }
      v37 = 0;
      v38 = 4 * v36;
      v39 = 4 * v35;
      do
      {
        v40 = v18;
        v41 = v33;
        v42 = v32;
        do
        {
          *v40 = *v41;
          v41 += v24;
          v40 += v25;
          --v42;
        }
        while (v42);
        *v40 = *v41;
        v33 = (_DWORD *)((char *)v33 + v38);
        v18 = (_DWORD *)((char *)v18 + v39);
        ++v37;
      }
      while (v37 != v34);
    }
    if (v32)
    {
      v43 = 4 * v24;
      v44 = 4 * v25;
      do
      {
        *v18 = *v33;
        v33 = (_DWORD *)((char *)v33 + v43);
        v18 = (_DWORD *)((char *)v18 + v44);
        --v32;
      }
      while (v32);
    }
    goto LABEL_57;
  }
  memptr = 0;
  v17 = malloc_type_posix_memalign(&memptr, v16, 4 * v11, 0x1F88E90uLL);
  if (v17)
    sub_210207B94(v17, a1[2], v12);
  v18 = memptr;
  a1[1] = (unint64_t)memptr;
  v19 = 4 * v7;
  v20 = (unint64_t)a2[1];
  a1[3] = v20;
  a1[4] = (4 * v7) & 0xFFFFFFFCFFFFFFFCLL;
  if (*((_DWORD *)a2 + 2))
    goto LABEL_15;
  return a1;
}

void sub_20EA510B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA510D0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BEE68;
  *(_QWORD *)(a1 + 16) = &unk_24C9BEEE0;
  *(_QWORD *)(a1 + 24) = &unk_24C9BEF20;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA5122C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_20EA514BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA5159C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA515BCLL);
}

uint64_t *sub_20EA515C8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA516B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA51610);
}

char *sub_20EA516F0(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA517CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA517F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA51814(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA5182C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent"
                     "_ray_casting21InputDenseDepthBundleENS_8weak_ptrIKNS1_3acv16surfacedetection15DensePointCloudEEEvSE"
                     "_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d2"
                                "2concurrent_ray_casting21InputDenseDepthBundleENS_8weak_ptrIKNS1_3acv16surfacedetection1"
                                "5DensePointCloudEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting21InputDenseDepthBundleENS_8weak_ptrIKNS1_3acv16surfacedetection15DensePointCloudEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting21InputDenseDepthBundleENS_8weak_ptrIKNS1_3acv16surfacedetection15DensePointCloudEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA5189C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA518C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA51904@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BF108;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA5196C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA519FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA51A10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA51AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA51AB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA51B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA51B8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA51C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA51C64(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA51D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA51D20(uint64_t a1)
{
  sub_20EA52510(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA51D44(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA5266C(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA529C4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA51E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA529C4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EA51E28(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA5266C(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA529C4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA51FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA51EECLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA52034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA52094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA529C4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA520B8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA5213C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2558;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA521EC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA52200(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA52290(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA522A4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA52AEC(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA522E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA522FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA52330(uint64_t a1)
{
  return sub_20EA52510(a1 - 16);
}

void sub_20EA52338(uint64_t a1)
{
  sub_20EA52510(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA52360(uint64_t a1, uint64_t a2)
{
  sub_20EA5213C(a1 - 16, a2);
}

void sub_20EA52368(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA52AEC(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA523AC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA523C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA523F4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA523FC(uint64_t a1)
{
  return sub_20EA52510(a1 - 24);
}

void sub_20EA52404(uint64_t a1)
{
  sub_20EA52510(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5242C(uint64_t a1)
{
  sub_20EA52200(a1 - 24);
}

uint64_t sub_20EA52434(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA5243C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA524A4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA52510(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BF180;
  *(_QWORD *)(a1 + 16) = &unk_24C9BF1F8;
  *(_QWORD *)(a1 + 24) = &unk_24C9BF238;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA5266C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EA528D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA52998(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA529B8);
}

uint64_t *sub_20EA529C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA52AB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA52A0CLL);
}

char *sub_20EA52AEC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA52BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA52BEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA52C10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA52C28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent"
                     "_ray_casting18ResetDenseCloudTagES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d2"
                                "2concurrent_ray_casting18ResetDenseCloudTagES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_9applecv3d22concurrent_ray_casting18ResetDenseCloudTagES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA52C98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA52CA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA52CD8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EA52D38(uint64_t a1)
{
  sub_20EA53644(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA52D5C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA537A0(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA53B3C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA52E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA53B3C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA52E40(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA52E50(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA52E5C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA52E6C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA537A0(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA53B3C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA53004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA52F30);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA53078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA530D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA53B3C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA530FC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA53180(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2450;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA53230(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA53244(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA532D4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA532E8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA53C64(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA5332C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA53340(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA53374(uint64_t a1)
{
  return sub_20EA53644(a1 - 16);
}

void sub_20EA5337C(uint64_t a1)
{
  sub_20EA53644(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA533A4(uint64_t a1, uint64_t a2)
{
  sub_20EA53180(a1 - 16, a2);
}

void sub_20EA533AC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA53C64(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA533F0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA53404(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA53438(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA53440(uint64_t a1)
{
  return sub_20EA53644(a1 - 24);
}

void sub_20EA53448(uint64_t a1)
{
  sub_20EA53644(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA53470(uint64_t a1)
{
  sub_20EA53244(a1 - 24);
}

uint64_t sub_20EA53478(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA53480(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA534E8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA53550(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)v4[1];
  v11 = v6;
  *v4 = v5;
  v4[1] = (uint64_t)v6;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v5 = *v4;
    v11 = (std::__shared_weak_count *)v4[1];
  }
  *a3 = v5;
  a3[1] = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_20EA53644(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BF410;
  *(_QWORD *)(a1 + 16) = &unk_24C9BF488;
  *(_QWORD *)(a1 + 24) = &unk_24C9BF4C8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA537A0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_20EA53A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA53B10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA53B30);
}

uint64_t *sub_20EA53B3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA53C28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA53B84);
}

char *sub_20EA53C64(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA53D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA53D64(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA53D88(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA53DA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_4pairIdN3cva15SE3G"
                     "roupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_8weak_ptrISC_EEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_4pairId"
                                "N3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_8weak_ptrISC_EEvSF_Lb0EEEE27"
                                "__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_8weak_ptrISC_EEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS_4pairIdN3cva15SE3GroupStorageIfNS7_6MatrixIfLj4ELj4ELb1EEEEEEEEENS_8weak_ptrISC_EEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA53E10(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA53E3C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA53E78@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BF660;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA53EE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA53F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA53F84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA54014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA54028(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA540EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA54100(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA541C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA541D8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA5427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA54290(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA542A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA542D0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EA54330(uint64_t a1)
{
  sub_20EA54C3C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA54354(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EA54D98(a1 + 11, a2, &v5);
    if (v6)
      sub_20EA55134(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EA54410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EA55134(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA54438(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA54448(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA54454(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA54464(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EA54D98(a1 + 11, a2, &v14);
  if (v15)
    sub_20EA55134(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EA545FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EA54528);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA54670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA546D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EA55134(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EA546F4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EA54778(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B2C88;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EA54828(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA5483C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EA548CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA548E0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EA5525C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA54924(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA54938(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA5496C(uint64_t a1)
{
  return sub_20EA54C3C(a1 - 16);
}

void sub_20EA54974(uint64_t a1)
{
  sub_20EA54C3C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5499C(uint64_t a1, uint64_t a2)
{
  sub_20EA54778(a1 - 16, a2);
}

void sub_20EA549A4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EA5525C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EA549E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA549FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EA54A30(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA54A38(uint64_t a1)
{
  return sub_20EA54C3C(a1 - 24);
}

void sub_20EA54A40(uint64_t a1)
{
  sub_20EA54C3C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EA54A68(uint64_t a1)
{
  sub_20EA5483C(a1 - 24);
}

uint64_t sub_20EA54A70(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA54A78(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA54AE0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA54B48(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (std::__shared_weak_count *)v4[1];
  v11 = v6;
  *v4 = v5;
  v4[1] = (uint64_t)v6;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v5 = *v4;
    v11 = (std::__shared_weak_count *)v4[1];
  }
  *a3 = v5;
  a3[1] = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_20EA54C3C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9BF728;
  *(_QWORD *)(a1 + 16) = &unk_24C9BF7A0;
  *(_QWORD *)(a1 + 24) = &unk_24C9BF7E0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EA54D98(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_20EA55028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA55108(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA55128);
}

uint64_t *sub_20EA55134(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA55220(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA5517CLL);
}

char *sub_20EA5525C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EA55338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA5535C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA55380(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA55398(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio8metadata21V"
                     "IO3DStructureAndPoseEEENS_8weak_ptrIS9_EEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio8"
                                "metadata21VIO3DStructureAndPoseEEENS_8weak_ptrIS9_EEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio8metadata21VIO3DStructureAndPoseEEENS_8weak_ptrIS9_EEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio8metadata21VIO3DStructureAndPoseEEENS_8weak_ptrIS9_EEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA55408(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA55434(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA55470@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BF978;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA554D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA55568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5557C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA5560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA55620(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA556E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA556F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA557BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA557D0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA55874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA55888(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20EA558D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA55938@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9BF9F0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20EA559D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20EA559FC()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20EA55A38()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20EA55A74()
{
  return 1;
}

uint64_t sub_20EA55A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20EA55AFC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA55B10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9BFA68;
  return result;
}

void sub_20EA55B34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9BFA68;
}

uint64_t sub_20EA55B50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d22concurrent_ray_casting5BuildERKNS_3acv6camera13PinholeCameraERNS_3kit11concurren"
                     "cy21NodeTaskSchedulerPoolERKNS2_16surfacedetection13HitTestParamsEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d22concurrent_ray_casting5BuildERKNS_3acv6camera13PinholeCameraERNS_3kit"
                                "11concurrency21NodeTaskSchedulerPoolERKNS2_16surfacedetection13HitTestParamsEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d22concurrent_ray_casting5BuildERKNS_3acv6camera13PinholeCameraERNS_3kit11concurrency21NodeTaskSchedulerPoolERKNS2_16surfacedetection13HitTestParamsEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d22concurrent_ray_casting5BuildERKNS_3acv6camera13PinholeCameraERNS_3kit11concurrency21NodeTaskSchedulerPoolERKNS2_16surfacedetection13HitTestParamsEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA55BBC()
{
  return &unk_24C9BFAD8;
}

uint64_t *sub_20EA55BC8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = 0;
  v6 = operator new();
  sub_20EEF0C34(v6, a2, a3);
  v7 = (_QWORD *)*a1;
  *a1 = v6;
  if (v7)
  {
    v8 = sub_20EEF0DC0(v7);
    MEMORY[0x212BC6398](v8, 0x1020C40C2EE21EDLL);
  }
  return a1;
}

void sub_20EA55C48(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  MEMORY[0x212BC6398](v2, 0x1020C40C2EE21EDLL);
  v4 = *v1;
  *v1 = 0;
  if (v4)
  {
    v5 = sub_20EEF0DC0(v4);
    MEMORY[0x212BC6398](v5, 0x1020C40C2EE21EDLL);
  }
  _Unwind_Resume(a1);
}

void sub_20EA55C98(_QWORD ***a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *a2;
      if (*a2)
      {
        v8 = *a1;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *v8;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = (std::__shared_weak_count *)v11[1];
        *v11 = v7;
        v11[1] = v5;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (unint64_t *)&v6->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA55DAC(uint64_t **a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *a2;
      if (*a2)
      {
        v8 = *a1;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *v8;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *(std::__shared_weak_count **)(v11 + 24);
        *(_QWORD *)(v11 + 16) = v7;
        *(_QWORD *)(v11 + 24) = v5;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (unint64_t *)&v6->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

_QWORD *sub_20EA55EC0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *a1 = &off_24C9BFAF8;
  v2 = (_QWORD *)a1[10];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[8];
  a1[8] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[5];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EA55F88(_QWORD *a1)
{
  sub_20EA55EC0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA55FAC(uint64_t a1@<X0>, float32x2_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  float32x2_t *v7;
  float32x2_t *v8;
  float32x2_t v9;
  double v10;
  float64x2_t v11;
  __int128 v12;
  float64x2_t v13;
  int32x4_t v14;
  double v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  __int128 v19;
  float32x2_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  float32x2_t v26;
  _DWORD *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x2_t v37;
  float32x2_t v38;
  float v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  __int128 v51;
  float32x4_t v52;
  float32x2_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *i;
  uint64_t v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  float32x2_t v70;
  uint64_t v71;
  double v72;
  double v73;
  float32x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float64x2_t *v82;
  float32x2_t v83;
  int32x4_t v84;
  float v85;
  int32x4_t v86;
  float v87;
  int32x2_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  unsigned __int32 v103;
  float32x2_t v104;
  float32x2_t v105;
  unsigned __int32 v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  __int128 v110;
  float v111;
  float v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  unsigned __int32 v118;
  unsigned __int32 v119;
  float32x4_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  unsigned int v190;
  double *v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  __int128 v202;
  char *j;
  uint64_t v204;
  int v205;
  __int128 v206;
  __int128 v207;
  char *v208;
  char *v209;
  double v210;
  _QWORD *v211;
  double v212;
  unint64_t v213;
  unint64_t v214;
  uint8x8_t v215;
  void **v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  uint64_t v222;
  _QWORD *v223;
  _BOOL8 v224;
  unint64_t v225;
  unint64_t v226;
  size_t prime;
  void *v228;
  void *v229;
  uint64_t v230;
  _QWORD *v231;
  size_t v232;
  size_t v233;
  size_t v234;
  _QWORD *m;
  size_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint8x8_t v240;
  uint64_t v241;
  _QWORD *v242;
  void *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  size_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  double *v252;
  double *v253;
  unint64_t v254;
  char *k;
  char *v256;
  uint64_t *v257;
  char *v258;
  double *v259;
  int8x8_t v260;
  unint64_t v261;
  uint8x8_t v262;
  uint64_t v263;
  double *v264;
  double *v265;
  unint64_t v266;
  double v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  uint64_t *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  int v283;
  __int128 v284;
  __int128 v285;
  void *v286;
  char *v287;
  char *v288;
  double v289;
  _QWORD *v290;
  double v291;
  unint64_t v297;
  unint64_t v298;
  uint8x8_t v299;
  void **v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  float v304;
  float v305;
  uint64_t v306;
  _QWORD *v307;
  _BOOL8 v308;
  unint64_t v309;
  unint64_t v310;
  size_t v311;
  void *v312;
  void *v313;
  uint64_t v314;
  _QWORD *v315;
  size_t v316;
  size_t v317;
  size_t v318;
  _QWORD *n;
  size_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint8x8_t v324;
  uint64_t v325;
  _QWORD *v326;
  void *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  size_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  double *v339;
  double *v340;
  unint64_t v341;
  char *v342;
  char *v343;
  uint64_t *v344;
  char *v345;
  double *v346;
  int8x8_t v347;
  unint64_t v348;
  uint8x8_t v349;
  uint64_t v350;
  double *v351;
  double *v352;
  unint64_t v353;
  double v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  char *v363;
  uint64_t *v364;
  unint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  char *v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  char *v383;
  char *v384;
  __int128 v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *p_shared_owners;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  _DWORD *exception;
  __int128 v397;
  __int128 v398;
  int32x4_t v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x2_t v405;
  void *__p[2];
  char *v407;
  char v408;
  void *v409[2];
  char *v410;
  char v411;
  __int128 v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  char v416;
  __int128 v417;
  char *v418;
  char v419;
  __int128 v420;
  uint64_t v421;
  char v422;
  float32x2_t *v423;
  std::__shared_weak_count *v424;
  char *v425;
  char *v426;
  char *v427;
  __int128 v428;
  __int128 v429;
  unsigned int v430;
  uint64_t v431;

  v431 = *MEMORY[0x24BDAC8D0];
  v423 = 0;
  v424 = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  if (!v5 || (v424 = std::__shared_weak_count::lock(v5)) == 0 || (v423 = *a2, (v7 = v423) == 0))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 0;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  v8 = v423 + 32;
  v9 = *v423;
  v10 = *(double *)(a1 + 104);
  LOBYTE(__p[0]) = 0;
  v408 = 0;
  LOBYTE(v409[0]) = 0;
  v411 = 0;
  LOBYTE(v412) = 0;
  v416 = 0;
  LOBYTE(v417) = 0;
  v419 = 0;
  LOBYTE(v420) = 0;
  v422 = 0;
  v15 = cos(v10 * 0.0174532925);
  if (!v423[10].i8[0] || (v21 = *(_QWORD *)&v423[5] - *(_QWORD *)&v423[4]) == 0)
  {
LABEL_31:
    if (!v7[20].i8[0])
      goto LABEL_92;
    goto LABEL_32;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v3 = v21 >> 5;
  v26 = (float32x2_t)vdup_n_s32(0x358637BDu);
  do
  {
    v28 = *(double *)(*(_QWORD *)&v7[7] + 8 * v25);
    if (v28 <= v15)
    {
      v29 = *(_QWORD *)(*(_QWORD *)&v7[1] + 8 * v25);
      v30 = *(_QWORD *)&v7[4] + 32 * v25;
      v11.f64[0] = *(float64_t *)(v30 + 16);
      v31 = *(float64x2_t *)v30;
      v32 = vcvt_f32_f64(*(float64x2_t *)v30);
      LODWORD(v12) = v7[29].i32[0];
      LODWORD(v31.f64[0]) = v7[31].i32[0];
      v33 = vcvt_f32_f64(v11);
      v34 = v28;
      *(float32x2_t *)v16.i8 = v7[28];
      v35 = v16;
      v35.i32[2] = v12;
      *(float32x2_t *)v14.i8 = v7[30];
      v36 = v14;
      v36.i32[2] = LODWORD(v31.f64[0]);
      LODWORD(v28) = v7[33].i32[0];
      v37 = (int32x2_t)vtrn2q_s32(v35, v36).u64[0];
      v17 = (int8x16_t)v35;
      v17.i32[3] = LODWORD(v31.f64[0]);
      v38 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(v37, 0), (int8x16_t)vdupq_lane_s32(v37, 1), 0xCuLL).u64[0];
      v39 = (float)((float)(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v12, v32), *(float32x2_t *)&v31.f64[0], v32, 1), v33, *(float32x2_t *)&v28).f32[0]+ v7[35].f32[0])/ (float)(sqrtf(1.0 - (float)(v34 * v34)) / v34))* 0.0027273;
      v33.f32[0] = v39 * v39;
      v40 = (float32x2_t)vzip1_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v14.i8);
      v41 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
      v42 = vmla_f32(vmla_f32(vmul_f32(v40, v26), 0, v38), 0, v41);
      v17.i32[0] = 897988541;
      v43 = vmla_f32(vmla_lane_f32(vmul_f32(*v8, *(float32x2_t *)v17.i8), 0, *v8, 1), 0, *(float32x2_t *)&v28);
      v44 = vmul_f32(v40, 0);
      v45 = vmul_f32(*v8, 0);
      v46 = vmla_lane_f32(v45, *(float32x2_t *)v17.i8, *v8, 1);
      *(float32x2_t *)v17.i8 = vmla_f32(vmla_f32(v44, v26, v38), 0, v41);
      v47 = vmla_f32(v46, 0, *(float32x2_t *)&v28);
      v48 = vmla_n_f32(vmla_f32(v44, 0, v38), v41, v33.f32[0]);
      v49 = vmla_f32(vmla_lane_f32(v45, 0, *v8, 1), v33, *(float32x2_t *)&v28);
      *(float32x2_t *)&v51 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v42, *(float *)v16.i32), *(float32x2_t *)v17.i8, *(float32x2_t *)v16.i8, 1), v48, *(float *)&v12);
      v50 = vmla_f32(vmla_lane_f32(vmul_f32(v43, *(float32x2_t *)v16.i8), v47, *(float32x2_t *)v16.i8, 1), *(float32x2_t *)&v12, v49);
      *((float32x2_t *)&v51 + 1) = v50;
      v52 = vcvt_hight_f32_f64((int32x2_t)v32, v11);
      *(float32x2_t *)&v12 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v42, *(float *)v14.i32), *(float32x2_t *)v17.i8, *(float32x2_t *)v14.i8, 1), v48, *(float *)v31.f64);
      *((float32x2_t *)&v12 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(v43, *(float32x2_t *)v14.i8), v47, *(float32x2_t *)v14.i8, 1), *(float32x2_t *)&v31.f64[0], v49);
      *(float32x2_t *)&v54 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v42, COERCE_FLOAT(*v8)), *(float32x2_t *)v17.i8, *v8, 1), v48, *(float *)&v28);
      v53 = vmla_f32(vmla_lane_f32(vmul_f32(v43, *v8), v47, *v8, 1), *(float32x2_t *)&v28, v49);
      *((float32x2_t *)&v54 + 1) = v53;
      if (v24 < v22)
      {
        *((_DWORD *)v24 + 2) = v52.i32[2];
        *(_QWORD *)v24 = v52.i64[0];
        *((_DWORD *)v24 + 5) = v50.i32[0];
        *(_QWORD *)(v24 + 12) = v51;
        *((_DWORD *)v24 + 8) = DWORD2(v12);
        *((_QWORD *)v24 + 3) = v12;
        v27 = v24 + 44;
        *(_QWORD *)(v24 + 36) = v54;
        *((float32x2_t *)v24 + 6) = v9;
        *((_QWORD *)v24 + 7) = v29;
        v24 += 64;
        *v27 = v53.i32[0];
      }
      else
      {
        v55 = (v24 - v23) >> 6;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 58)
          sub_20E867F44();
        v398 = v54;
        v400 = v12;
        v402 = v51;
        v404 = v52;
        if ((v22 - v23) >> 5 > v56)
          v56 = (v22 - v23) >> 5;
        if ((unint64_t)(v22 - v23) >= 0x7FFFFFFFFFFFFFC0)
          v57 = 0x3FFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57 >> 58)
          sub_20E877A38();
        v58 = (char *)operator new(v57 << 6);
        v59 = &v58[64 * v55];
        *(_QWORD *)v59 = v404.i64[0];
        *((_DWORD *)v59 + 2) = v404.i32[2];
        *((_DWORD *)v59 + 5) = DWORD2(v402);
        *(_QWORD *)(v59 + 12) = v402;
        *((_QWORD *)v59 + 3) = v400;
        *((_DWORD *)v59 + 8) = DWORD2(v400);
        v11.f64[1] = *((float64_t *)&v398 + 1);
        *(_QWORD *)(v59 + 36) = v398;
        *((_DWORD *)v59 + 11) = DWORD2(v398);
        *((float32x2_t *)v59 + 6) = v9;
        *((_QWORD *)v59 + 7) = v29;
        for (i = v59; v24 != v23; *((float64x2_t *)i + 3) = v11)
        {
          v61 = *((_QWORD *)v24 - 8);
          v24 -= 64;
          v62 = *((_DWORD *)v24 + 2);
          *((_QWORD *)i - 8) = v61;
          i -= 64;
          *((_DWORD *)i + 2) = v62;
          v63 = *(_OWORD *)(v24 + 12);
          v64 = *(_OWORD *)(v24 + 28);
          *((_DWORD *)i + 11) = *((_DWORD *)v24 + 11);
          *(_OWORD *)(i + 28) = v64;
          *(_OWORD *)(i + 12) = v63;
          v11 = *((float64x2_t *)v24 + 3);
        }
        v22 = &v58[64 * v57];
        v24 = v59 + 64;
        if (v23)
          operator delete(v23);
        v23 = i;
      }
    }
    ++v25;
  }
  while (v25 != v3);
  if (v23 == v24)
  {
    if (v23)
      operator delete(v23);
    goto LABEL_31;
  }
  if (!v408)
  {
    __p[0] = v23;
    __p[1] = v24;
    v407 = v22;
    v408 = 1;
    if (!v7[20].i8[0])
      goto LABEL_92;
    goto LABEL_32;
  }
  if (__p[0])
    operator delete(__p[0]);
  __p[0] = v23;
  __p[1] = v24;
  v407 = v22;
  if (v7[20].i8[0])
  {
LABEL_32:
    v428 = 0uLL;
    *(_QWORD *)&v429 = 0;
    v65 = *(_QWORD *)&v7[12] - *(_QWORD *)&v7[11];
    if (v65)
    {
      v66 = 0;
      v67 = 0;
      v68 = v65 >> 3;
      v405 = (float32x2_t)vdup_n_s32(0x358637BDu);
      do
      {
        v70 = v7[17];
        v71 = (2 * v67) | 1;
        v72 = *(double *)(*(_QWORD *)&v70 + 16 * v67);
        v73 = *(double *)(*(_QWORD *)&v70 + 8 * v71);
        if (v72 <= v15 && v73 <= v15)
        {
          v75 = v7[14];
          v76 = (float64x2_t *)(*(_QWORD *)&v75 + (v67 << 6));
          v13.f64[0] = v76[1].f64[0];
          v77 = *v76;
          v78 = vcvt_f32_f64(*v76);
          LODWORD(v12) = v7[29].i32[0];
          LODWORD(v77.f64[0]) = v7[31].i32[0];
          v79 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v12, v78), *(float32x2_t *)&v77.f64[0], v78, 1);
          v80 = vcvt_hight_f32_f64((int32x2_t)v78, v13);
          v81 = vcvt_f32_f64(v13);
          v82 = (float64x2_t *)(*(_QWORD *)&v75 + 32 * v71);
          v13.f64[0] = v82[1].f64[0];
          v83 = vcvt_f32_f64(*v82);
          *(float32x2_t *)v18.i8 = v7[28];
          v84 = v18;
          v84.i32[2] = v12;
          v85 = v72;
          *(float32x2_t *)v17.i8 = v7[30];
          v86 = (int32x4_t)v17;
          v86.i32[2] = LODWORD(v77.f64[0]);
          LODWORD(v72) = v7[33].i32[0];
          v87 = v7[35].f32[0];
          v88 = (int32x2_t)vtrn2q_s32(v84, v86).u64[0];
          v89 = (int8x16_t)v84;
          v89.i32[3] = LODWORD(v77.f64[0]);
          v90 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(v88, 0), (int8x16_t)vdupq_lane_s32(v88, 1), 0xCuLL).u64[0];
          v81.f32[0] = (float)(vmla_f32(v79, v81, *(float32x2_t *)&v72).f32[0] + v87)
                     / (float)(sqrtf(1.0 - (float)(v85 * v85)) / v85);
          *(float *)&v19 = (float)(v81.f32[0] * 0.0027273) * (float)(v81.f32[0] * 0.0027273);
          v91 = (float32x2_t)vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v17.i8);
          v92 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
          v93 = vmla_f32(vmla_f32(vmul_f32(v91, v405), 0, v90), 0, v92);
          v20.i32[0] = 897988541;
          *(float32x2_t *)v89.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*v8, v20), 0, *v8, 1), 0, *(float32x2_t *)&v72);
          v94 = vmul_f32(v91, 0);
          v95 = vmla_f32(vmla_f32(v94, v405, v90), 0, v92);
          v96 = vmul_f32(*v8, 0);
          v97 = vmla_f32(vmla_lane_f32(v96, v20, *v8, 1), 0, *(float32x2_t *)&v72);
          v98 = vmla_f32(v94, 0, v90);
          v99 = vmla_n_f32(v98, v92, *(float *)&v19);
          v100 = vmla_lane_f32(v96, 0, *v8, 1);
          v20 = vmla_f32(v100, *(float32x2_t *)&v19, *(float32x2_t *)&v72);
          v101 = vmla_lane_f32(vmul_n_f32(v93, *(float *)v18.i32), v95, *(float32x2_t *)v18.i8, 1);
          v102 = vmla_n_f32(v101, v99, *(float *)&v12);
          *(float32x2_t *)v84.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v18.i8), v97, *(float32x2_t *)v18.i8, 1);
          v103 = vmla_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)&v12, v20).u32[0];
          v104 = vmla_lane_f32(vmul_n_f32(v93, *(float *)v17.i32), v95, *(float32x2_t *)v17.i8, 1);
          v105 = vmla_n_f32(v104, v99, *(float *)v77.f64);
          *(float32x2_t *)v86.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v17.i8), v97, *(float32x2_t *)v17.i8, 1);
          v106 = vmla_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)&v77.f64[0], v20).u32[0];
          v107 = vmla_lane_f32(vmul_n_f32(v93, COERCE_FLOAT(*v8)), v95, *v8, 1);
          *(float32x2_t *)&v110 = vmla_n_f32(v107, v99, *(float *)&v72);
          v108 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *v8), v97, *v8, 1);
          v109 = vmla_f32(v108, *(float32x2_t *)&v72, v20);
          *((float32x2_t *)&v110 + 1) = v109;
          *(float *)&v73 = v73;
          v111 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v12, v83), *(float32x2_t *)&v77.f64[0], v83, 1), vcvt_f32_f64(v13), *(float32x2_t *)&v72).f32[0]+ v87;
          v112 = sqrtf(1.0 - (float)(*(float *)&v73 * *(float *)&v73));
          *(float *)&v73 = (float)((float)(v111 / (float)(v112 / *(float *)&v73)) * 0.0027273)
                         * (float)((float)(v111 / (float)(v112 / *(float *)&v73)) * 0.0027273);
          v113 = vmla_n_f32(v98, v92, *(float *)&v73);
          v114 = vmla_f32(v100, *(float32x2_t *)&v73, *(float32x2_t *)&v72);
          *(float32x2_t *)&v19 = vmla_n_f32(v101, v113, *(float *)&v12);
          v115 = vmla_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)&v12, v114);
          *((float32x2_t *)&v19 + 1) = v115;
          *(float32x2_t *)v18.i8 = vmla_n_f32(v104, v113, *(float *)v77.f64);
          v116 = vmla_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)&v77.f64[0], v114);
          v18.u64[1] = (unint64_t)v116;
          v117 = vmla_n_f32(v107, v113, *(float *)&v72);
          v118 = vmla_f32(v108, *(float32x2_t *)&v72, v114).u32[0];
          v119 = v118;
          v120 = vcvt_hight_f32_f64((int32x2_t)v83, v13);
          v121 = *(_QWORD *)(*(_QWORD *)&v7[11] + 8 * v67);
          if ((unint64_t)v66 < (unint64_t)v429)
          {
            *((_DWORD *)v66 + 2) = v80.i32[2];
            *(_QWORD *)v66 = v80.i64[0];
            *((_DWORD *)v66 + 5) = v120.i32[2];
            *(_QWORD *)(v66 + 12) = v120.i64[0];
            *((_DWORD *)v66 + 8) = v103;
            *((float32x2_t *)v66 + 3) = v102;
            *((_DWORD *)v66 + 11) = v106;
            *(float32x2_t *)(v66 + 36) = v105;
            *((_DWORD *)v66 + 14) = v109.i32[0];
            *((_QWORD *)v66 + 6) = v110;
            *((_DWORD *)v66 + 17) = v115.i32[0];
            *(_QWORD *)(v66 + 60) = v19;
            *((_DWORD *)v66 + 20) = v116.i32[0];
            *((_QWORD *)v66 + 9) = v18.i64[0];
            *((_DWORD *)v66 + 23) = v118;
            *(float32x2_t *)(v66 + 84) = v117;
            *((float32x2_t *)v66 + 12) = v9;
            v69 = v66 + 112;
            *((_QWORD *)v66 + 13) = v121;
          }
          else
          {
            v122 = (char *)v428;
            v123 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v66[-v428] >> 4);
            v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) > 0x249249249249249)
              sub_20E867F44();
            v397 = v110;
            v399 = v18;
            v401 = v19;
            v403 = v80;
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v429 - v428) >> 4) > v124)
              v124 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v429 - v428) >> 4);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v429 - v428) >> 4)) >= 0x124924924924924)
              v125 = 0x249249249249249;
            else
              v125 = v124;
            if (v125 > 0x249249249249249)
              sub_20E877A38();
            v126 = (char *)operator new(112 * v125);
            v127 = &v126[16 * ((uint64_t)&v66[-v428] >> 4)];
            *(_QWORD *)v127 = v403.i64[0];
            *((_DWORD *)v127 + 2) = v403.i32[2];
            *(_QWORD *)(v127 + 12) = v120.i64[0];
            *((_DWORD *)v127 + 5) = v120.i32[2];
            *((_DWORD *)v127 + 8) = v103;
            *((float32x2_t *)v127 + 3) = v102;
            *(float32x2_t *)(v127 + 36) = v105;
            *((_DWORD *)v127 + 11) = v106;
            *((_QWORD *)v127 + 6) = v397;
            *((_DWORD *)v127 + 14) = DWORD2(v397);
            *((_DWORD *)v127 + 17) = DWORD2(v401);
            *(_QWORD *)(v127 + 60) = v401;
            *((_QWORD *)v127 + 9) = v399.i64[0];
            *((_DWORD *)v127 + 20) = v399.i32[2];
            *(float32x2_t *)(v127 + 84) = v117;
            *((_DWORD *)v127 + 23) = v119;
            *((float32x2_t *)v127 + 12) = v9;
            *((_QWORD *)v127 + 13) = v121;
            v128 = &v126[112 * v123];
            if (v66 != v122)
            {
              do
              {
                v129 = *((_QWORD *)v66 - 14);
                v66 -= 112;
                v130 = *((_DWORD *)v66 + 2);
                *((_QWORD *)v128 - 14) = v129;
                v128 -= 112;
                *((_DWORD *)v128 + 2) = v130;
                v131 = *(_QWORD *)(v66 + 12);
                *((_DWORD *)v128 + 5) = *((_DWORD *)v66 + 5);
                *(_QWORD *)(v128 + 12) = v131;
                v132 = *(_OWORD *)(v66 + 24);
                v133 = *(_OWORD *)(v66 + 40);
                *((_DWORD *)v128 + 14) = *((_DWORD *)v66 + 14);
                *(_OWORD *)(v128 + 40) = v133;
                *(_OWORD *)(v128 + 24) = v132;
                v134 = *(_OWORD *)(v66 + 60);
                v135 = *(_OWORD *)(v66 + 76);
                *((_DWORD *)v128 + 23) = *((_DWORD *)v66 + 23);
                *(_OWORD *)(v128 + 76) = v135;
                *(_OWORD *)(v128 + 60) = v134;
                *((_OWORD *)v128 + 6) = *((_OWORD *)v66 + 6);
              }
              while (v66 != v122);
              v66 = v122;
            }
            v69 = v127 + 112;
            *(_QWORD *)&v428 = v128;
            *((_QWORD *)&v428 + 1) = v127 + 112;
            *(_QWORD *)&v429 = &v126[112 * v125];
            if (v66)
              operator delete(v66);
          }
          *((_QWORD *)&v428 + 1) = v69;
          v66 = v69;
        }
        ++v67;
      }
      while (v67 != v68);
      v3 = v428;
      if ((char *)v428 == v66)
      {
        v3 = (uint64_t)v66;
      }
      else if (v411)
      {
        v136 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v66[-v428] >> 4);
        v137 = (uint64_t)v410;
        v138 = (char *)v409[0];
        if (0x6DB6DB6DB6DB6DB7 * ((v410 - (char *)v409[0]) >> 4) >= v136)
        {
          v161 = (char *)v409[1];
          if (0x6DB6DB6DB6DB6DB7 * (((char *)v409[1] - (char *)v409[0]) >> 4) >= v136)
          {
            v142 = 0;
            do
            {
              v178 = &v138[v142];
              v179 = v3 + v142;
              v180 = *(_QWORD *)(v3 + v142);
              *((_DWORD *)v178 + 2) = *(_DWORD *)(v3 + v142 + 8);
              *(_QWORD *)v178 = v180;
              v181 = *(_QWORD *)(v3 + v142 + 12);
              *((_DWORD *)v178 + 5) = *(_DWORD *)(v3 + v142 + 20);
              *(_QWORD *)(v178 + 12) = v181;
              v182 = *(_OWORD *)(v3 + v142 + 24);
              v183 = *(_OWORD *)(v3 + v142 + 40);
              *((_DWORD *)v178 + 14) = *(_DWORD *)(v3 + v142 + 56);
              *(_OWORD *)(v178 + 40) = v183;
              *(_OWORD *)(v178 + 24) = v182;
              v184 = *(_OWORD *)(v3 + v142 + 60);
              v185 = *(_OWORD *)(v3 + v142 + 76);
              *((_DWORD *)v178 + 23) = *(_DWORD *)(v3 + v142 + 92);
              *(_OWORD *)(v178 + 76) = v185;
              *(_OWORD *)(v178 + 60) = v184;
              *((_OWORD *)v178 + 6) = *(_OWORD *)(v3 + v142 + 96);
              v142 += 112;
            }
            while ((char *)(v179 + 112) != v66);
          }
          else
          {
            v162 = (char *)(v428 + 16 * (((char *)v409[1] - (char *)v409[0]) >> 4));
            if (v409[1] != v409[0])
            {
              v163 = (char *)v428;
              do
              {
                v164 = *(_QWORD *)v163;
                *((_DWORD *)v138 + 2) = *((_DWORD *)v163 + 2);
                *(_QWORD *)v138 = v164;
                v165 = *(_QWORD *)(v163 + 12);
                *((_DWORD *)v138 + 5) = *((_DWORD *)v163 + 5);
                *(_QWORD *)(v138 + 12) = v165;
                v166 = *(_OWORD *)(v163 + 24);
                v167 = *(_OWORD *)(v163 + 40);
                *((_DWORD *)v138 + 14) = *((_DWORD *)v163 + 14);
                *(_OWORD *)(v138 + 40) = v167;
                *(_OWORD *)(v138 + 24) = v166;
                v168 = *(_OWORD *)(v163 + 60);
                v169 = *(_OWORD *)(v163 + 76);
                *((_DWORD *)v138 + 23) = *((_DWORD *)v163 + 23);
                *(_OWORD *)(v138 + 76) = v169;
                *(_OWORD *)(v138 + 60) = v168;
                *((_OWORD *)v138 + 6) = *((_OWORD *)v163 + 6);
                v163 += 112;
                v138 += 112;
              }
              while (v163 != v162);
              v138 = v161;
            }
            v170 = v138;
            if (v162 != v66)
            {
              v170 = v138;
              v171 = v138;
              do
              {
                v172 = *(_QWORD *)v162;
                *((_DWORD *)v171 + 2) = *((_DWORD *)v162 + 2);
                *(_QWORD *)v171 = v172;
                v173 = *(_QWORD *)(v162 + 12);
                *((_DWORD *)v171 + 5) = *((_DWORD *)v162 + 5);
                *(_QWORD *)(v171 + 12) = v173;
                v174 = *(_OWORD *)(v162 + 24);
                v175 = *(_OWORD *)(v162 + 40);
                *((_DWORD *)v171 + 14) = *((_DWORD *)v162 + 14);
                *(_OWORD *)(v171 + 40) = v175;
                *(_OWORD *)(v171 + 24) = v174;
                v176 = *(_OWORD *)(v162 + 60);
                v177 = *(_OWORD *)(v162 + 76);
                *((_DWORD *)v171 + 23) = *((_DWORD *)v162 + 23);
                *(_OWORD *)(v171 + 76) = v177;
                *(_OWORD *)(v171 + 60) = v176;
                *((_OWORD *)v171 + 6) = *((_OWORD *)v162 + 6);
                v170 += 112;
                v162 += 112;
                v171 += 112;
              }
              while (v162 != v66);
            }
            v142 = v170 - v138;
          }
        }
        else
        {
          if (v409[0])
          {
            operator delete(v409[0]);
            v137 = 0;
            v409[0] = 0;
            v409[1] = 0;
            v410 = 0;
          }
          if (v136 > 0x249249249249249)
            goto LABEL_476;
          v139 = 0x6DB6DB6DB6DB6DB7 * (v137 >> 4);
          v140 = 2 * v139;
          if (2 * v139 <= v136)
            v140 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v66[-v428] >> 4);
          v141 = v139 >= 0x124924924924924 ? 0x249249249249249 : v140;
          if (v141 > 0x249249249249249)
LABEL_476:
            sub_20E867F44();
          v138 = (char *)operator new(112 * v141);
          v142 = 0;
          v409[0] = v138;
          v409[1] = v138;
          v410 = &v138[112 * v141];
          do
          {
            v143 = v3 + v142;
            v144 = &v138[v142];
            v145 = *(_QWORD *)(v3 + v142);
            *((_DWORD *)v144 + 2) = *(_DWORD *)(v3 + v142 + 8);
            *(_QWORD *)v144 = v145;
            v146 = *(_QWORD *)(v3 + v142 + 12);
            *((_DWORD *)v144 + 5) = *(_DWORD *)(v3 + v142 + 20);
            *(_QWORD *)(v144 + 12) = v146;
            v147 = *(_OWORD *)(v3 + v142 + 24);
            v148 = *(_OWORD *)(v3 + v142 + 40);
            *((_DWORD *)v144 + 14) = *(_DWORD *)(v3 + v142 + 56);
            *(_OWORD *)(v144 + 40) = v148;
            *(_OWORD *)(v144 + 24) = v147;
            v149 = *(_OWORD *)(v3 + v142 + 60);
            v150 = *(_OWORD *)(v3 + v142 + 76);
            *((_DWORD *)v144 + 23) = *(_DWORD *)(v3 + v142 + 92);
            *(_OWORD *)(v144 + 76) = v150;
            *(_OWORD *)(v144 + 60) = v149;
            *((_OWORD *)v144 + 6) = *(_OWORD *)(v3 + v142 + 96);
            v142 += 112;
          }
          while ((char *)(v143 + 112) != v66);
        }
        v409[1] = &v138[v142];
      }
      else
      {
        v409[0] = 0;
        v409[1] = 0;
        v410 = 0;
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v66[-v428] >> 4)) > 0x249249249249249)
          sub_20E867F44();
        v151 = (char *)operator new((size_t)&v66[-v428]);
        v152 = 0;
        v409[0] = v151;
        v410 = &v151[16 * ((uint64_t)&v66[-v428] >> 4)];
        do
        {
          v153 = v3 + v152;
          v154 = &v151[v152];
          v155 = *(_QWORD *)(v3 + v152);
          *((_DWORD *)v154 + 2) = *(_DWORD *)(v3 + v152 + 8);
          *(_QWORD *)v154 = v155;
          v156 = *(_QWORD *)(v3 + v152 + 12);
          *((_DWORD *)v154 + 5) = *(_DWORD *)(v3 + v152 + 20);
          *(_QWORD *)(v154 + 12) = v156;
          v157 = *(_OWORD *)(v3 + v152 + 24);
          v158 = *(_OWORD *)(v3 + v152 + 40);
          *((_DWORD *)v154 + 14) = *(_DWORD *)(v3 + v152 + 56);
          *(_OWORD *)(v154 + 40) = v158;
          *(_OWORD *)(v154 + 24) = v157;
          v159 = *(_OWORD *)(v3 + v152 + 60);
          v160 = *(_OWORD *)(v3 + v152 + 76);
          *((_DWORD *)v154 + 23) = *(_DWORD *)(v3 + v152 + 92);
          *(_OWORD *)(v154 + 76) = v160;
          *(_OWORD *)(v154 + 60) = v159;
          *((_OWORD *)v154 + 6) = *(_OWORD *)(v3 + v152 + 96);
          v152 += 112;
        }
        while ((char *)(v153 + 112) != v66);
        v409[1] = &v151[v152];
        v411 = 1;
      }
      if (v3)
        operator delete((void *)v3);
    }
  }
LABEL_92:
  if (v7[27].i8[0])
  {
    v425 = 0;
    v426 = 0;
    v427 = 0;
    v186 = 0;
    v187 = *(_QWORD *)&v7[22] - *(_QWORD *)&v7[21];
    if (v187)
    {
      v188 = 0;
      v3 = 0xAAAAAAAAAAAAAAABLL * (v187 >> 3);
      do
      {
        while (1)
        {
          v191 = (double *)(*(_QWORD *)&v7[21] + 24 * v188);
          v192 = *v191;
          v193 = v191[1];
          v194 = v191[2];
          v195 = *(_QWORD *)&v7[24] + 36 * v188;
          v428 = *(_OWORD *)v195;
          v429 = *(_OWORD *)(v195 + 16);
          v430 = *(_DWORD *)(v195 + 32);
          if (v186 >= v427)
            break;
          *(float *)v186 = v192;
          *((float *)v186 + 1) = v193;
          *((float *)v186 + 2) = v194;
          v189 = v428;
          v190 = v430;
          *(_OWORD *)(v186 + 28) = v429;
          *(_OWORD *)(v186 + 12) = v189;
          *(_QWORD *)(v186 + 44) = v190;
          v186 += 52;
          v426 = v186;
          if (++v188 == v3)
            goto LABEL_109;
        }
        v196 = v425;
        v197 = 0x4EC4EC4EC4EC4EC5 * ((v186 - v425) >> 2);
        v198 = v197 + 1;
        if ((unint64_t)(v197 + 1) > 0x4EC4EC4EC4EC4ECLL)
          sub_20E867F44();
        if (0x9D89D89D89D89D8ALL * ((v427 - v425) >> 2) > v198)
          v198 = 0x9D89D89D89D89D8ALL * ((v427 - v425) >> 2);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v427 - v425) >> 2)) >= 0x276276276276276)
          v199 = 0x4EC4EC4EC4EC4ECLL;
        else
          v199 = v198;
        if (v199 > 0x4EC4EC4EC4EC4ECLL)
          sub_20E877A38();
        v200 = (char *)operator new(52 * v199);
        v201 = &v200[4 * ((v186 - v425) >> 2)];
        *(float *)v201 = v192;
        *((float *)v201 + 1) = v193;
        *((float *)v201 + 2) = v194;
        v202 = v429;
        *(_OWORD *)(v201 + 12) = v428;
        *(_OWORD *)(v201 + 28) = v202;
        *((_DWORD *)v201 + 11) = v430;
        *((_DWORD *)v201 + 12) = 0;
        for (j = &v200[52 * v197]; v186 != v196; *((_DWORD *)j + 12) = *((_DWORD *)v186 + 12))
        {
          v204 = *(_QWORD *)(v186 - 52);
          v186 -= 52;
          v205 = *((_DWORD *)v186 + 2);
          *(_QWORD *)(j - 52) = v204;
          j -= 52;
          *((_DWORD *)j + 2) = v205;
          v206 = *(_OWORD *)(v186 + 12);
          v207 = *(_OWORD *)(v186 + 28);
          *((_DWORD *)j + 11) = *((_DWORD *)v186 + 11);
          *(_OWORD *)(j + 28) = v207;
          *(_OWORD *)(j + 12) = v206;
        }
        v186 = v201 + 52;
        v425 = j;
        v427 = &v200[52 * v199];
        if (v196)
          operator delete(v196);
        v426 = v186;
        ++v188;
      }
      while (v188 != v3);
    }
LABEL_109:
    if (!v419)
    {
      *(_QWORD *)&v417 = v425;
      *((_QWORD *)&v417 + 1) = v186;
      v418 = v427;
      v419 = 1;
      if (!v408)
        goto LABEL_269;
      goto LABEL_114;
    }
    if ((_QWORD)v417)
      operator delete((void *)v417);
    *(_QWORD *)&v417 = v425;
    *((_QWORD *)&v417 + 1) = v186;
    v418 = v427;
  }
  if (v408)
  {
LABEL_114:
    v208 = (char *)__p[0];
    v209 = (char *)__p[1];
    v210 = *(double *)(a1 + 112);
    if (__p[0] != __p[1])
    {
      v211 = (_QWORD *)(a1 + 40);
      v212 = 0.0;
      while (1)
      {
        v213 = *((_QWORD *)v208 + 7);
        v214 = *(_QWORD *)(a1 + 32);
        if (v214)
        {
          v215 = (uint8x8_t)vcnt_s8((int8x8_t)v214);
          v215.i16[0] = vaddlv_u8(v215);
          if (v215.u32[0] > 1uLL)
          {
            v3 = *((_QWORD *)v208 + 7);
            if (v214 <= v213)
              v3 = v213 % v214;
          }
          else
          {
            v3 = (v214 - 1) & v213;
          }
          v216 = *(void ***)(*(_QWORD *)(a1 + 24) + 8 * v3);
          if (v216)
          {
            v217 = (char *)*v216;
            if (*v216)
            {
              if (v215.u32[0] < 2uLL)
              {
                while (1)
                {
                  v219 = *((_QWORD *)v217 + 1);
                  if (v219 == v213)
                  {
                    if (*((_QWORD *)v217 + 2) == v213)
                      goto LABEL_209;
                  }
                  else if ((v219 & (v214 - 1)) != v3)
                  {
                    goto LABEL_136;
                  }
                  v217 = *(char **)v217;
                  if (!v217)
                    goto LABEL_136;
                }
              }
              do
              {
                v218 = *((_QWORD *)v217 + 1);
                if (v218 == v213)
                {
                  if (*((_QWORD *)v217 + 2) == v213)
                    goto LABEL_209;
                }
                else
                {
                  if (v218 >= v214)
                    v218 %= v214;
                  if (v218 != v3)
                    break;
                }
                v217 = *(char **)v217;
              }
              while (v217);
            }
          }
        }
LABEL_136:
        v217 = (char *)operator new(0x58uLL);
        *(_QWORD *)v217 = 0;
        *((_QWORD *)v217 + 1) = v213;
        *((_QWORD *)v217 + 2) = *((_QWORD *)v208 + 7);
        *(_OWORD *)(v217 + 72) = 0u;
        *(_OWORD *)(v217 + 56) = 0u;
        *(_OWORD *)(v217 + 40) = 0u;
        *(_OWORD *)(v217 + 24) = 0u;
        v220 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
        v221 = *(float *)(a1 + 56);
        if (!v214 || (float)(v221 * (float)v214) < v220)
          break;
        v222 = *(_QWORD *)(a1 + 24);
        v223 = *(_QWORD **)(v222 + 8 * v3);
        if (v223)
          goto LABEL_139;
LABEL_188:
        *(_QWORD *)v217 = *v211;
        *v211 = v217;
        *(_QWORD *)(v222 + 8 * v3) = v211;
        if (!*(_QWORD *)v217)
          goto LABEL_208;
        v245 = *(_QWORD *)(*(_QWORD *)v217 + 8);
        if ((v214 & (v214 - 1)) != 0)
        {
          if (v245 >= v214)
            v245 %= v214;
        }
        else
        {
          v245 &= v214 - 1;
        }
        v223 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v245);
LABEL_207:
        *v223 = v217;
LABEL_208:
        ++*(_QWORD *)(a1 + 48);
LABEL_209:
        v249 = *(_QWORD *)v208;
        *((_DWORD *)v217 + 8) = *((_DWORD *)v208 + 2);
        *((_QWORD *)v217 + 3) = v249;
        v250 = *(_OWORD *)(v208 + 12);
        v251 = *(_OWORD *)(v208 + 28);
        *((_DWORD *)v217 + 17) = *((_DWORD *)v208 + 11);
        *(_OWORD *)(v217 + 52) = v251;
        *(_OWORD *)(v217 + 36) = v250;
        *(_OWORD *)(v217 + 72) = *((_OWORD *)v208 + 3);
        if (v212 < *((double *)v208 + 6))
          v212 = *((double *)v208 + 6);
        v208 += 64;
        if (v208 == v209)
        {
          v253 = (double *)(a1 + 40);
          v252 = *(double **)(a1 + 40);
          if (v252)
            goto LABEL_221;
LABEL_215:
          v254 = *(_QWORD *)(a1 + 48);
          if (v254)
          {
            if (v254 >> 58)
              sub_20E867F44();
            k = (char *)operator new(v254 << 6);
            v256 = &k[64 * v254];
            v257 = *(uint64_t **)v253;
            if (*(_QWORD *)v253)
              goto LABEL_218;
          }
          else
          {
            k = 0;
            v256 = 0;
            v257 = *(uint64_t **)v253;
            if (*(_QWORD *)v253)
            {
LABEL_218:
              v3 = (uint64_t)k;
              v258 = k;
              do
              {
                while (1)
                {
                  v273 = v257 + 3;
                  if (v258 >= v256)
                    break;
                  v270 = *v273;
                  *((_DWORD *)v258 + 2) = *((_DWORD *)v257 + 8);
                  *(_QWORD *)v258 = v270;
                  v271 = *(_OWORD *)((char *)v257 + 36);
                  v272 = *(_OWORD *)((char *)v257 + 52);
                  *((_DWORD *)v258 + 11) = *((_DWORD *)v257 + 17);
                  *(_OWORD *)(v258 + 28) = v272;
                  *(_OWORD *)(v258 + 12) = v271;
                  *((_OWORD *)v258 + 3) = *(_OWORD *)(v257 + 9);
                  v258 += 64;
                  v257 = (uint64_t *)*v257;
                  if (!v257)
                    goto LABEL_266;
                }
                v274 = (uint64_t)&v258[-v3] >> 6;
                v275 = v274 + 1;
                if ((unint64_t)(v274 + 1) >> 58)
                  sub_20E867F44();
                if ((uint64_t)&v256[-v3] >> 5 > v275)
                  v275 = (uint64_t)&v256[-v3] >> 5;
                if ((unint64_t)&v256[-v3] >= 0x7FFFFFFFFFFFFFC0)
                  v276 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v276 = v275;
                if (v276)
                {
                  if (v276 >> 58)
                    sub_20E877A38();
                  v277 = (char *)operator new(v276 << 6);
                }
                else
                {
                  v277 = 0;
                }
                v278 = &v277[64 * v274];
                v279 = *v273;
                *((_DWORD *)v278 + 2) = *((_DWORD *)v257 + 8);
                *(_QWORD *)v278 = v279;
                v280 = *(_OWORD *)((char *)v257 + 36);
                v281 = *(_OWORD *)((char *)v257 + 52);
                *((_DWORD *)v278 + 11) = *((_DWORD *)v257 + 17);
                *(_OWORD *)(v278 + 28) = v281;
                *(_OWORD *)(v278 + 12) = v280;
                *((_OWORD *)v278 + 3) = *(_OWORD *)(v257 + 9);
                for (k = v278; v258 != (char *)v3; *((_OWORD *)k + 3) = *((_OWORD *)v258 + 3))
                {
                  v282 = *((_QWORD *)v258 - 8);
                  v258 -= 64;
                  v283 = *((_DWORD *)v258 + 2);
                  *((_QWORD *)k - 8) = v282;
                  k -= 64;
                  *((_DWORD *)k + 2) = v283;
                  v284 = *(_OWORD *)(v258 + 12);
                  v285 = *(_OWORD *)(v258 + 28);
                  *((_DWORD *)k + 11) = *((_DWORD *)v258 + 11);
                  *(_OWORD *)(k + 28) = v285;
                  *(_OWORD *)(k + 12) = v284;
                }
                v256 = &v277[64 * v276];
                v258 = v278 + 64;
                if (v3)
                  operator delete((void *)v3);
                v3 = (uint64_t)k;
                v257 = (uint64_t *)*v257;
              }
              while (v257);
LABEL_266:
              v286 = __p[0];
              if (!__p[0])
                goto LABEL_268;
LABEL_267:
              operator delete(v286);
LABEL_268:
              __p[0] = k;
              __p[1] = v258;
              v407 = v256;
              goto LABEL_269;
            }
          }
          v258 = k;
          v286 = __p[0];
          if (!__p[0])
            goto LABEL_268;
          goto LABEL_267;
        }
      }
      v224 = (v214 & (v214 - 1)) != 0;
      if (v214 < 3)
        v224 = 1;
      v225 = v224 | (2 * v214);
      v226 = vcvtps_u32_f32(v220 / v221);
      if (v225 <= v226)
        prime = v226;
      else
        prime = v225;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v214 = *(_QWORD *)(a1 + 32);
      }
      if (prime <= v214)
      {
        if (prime >= v214)
          goto LABEL_186;
        v239 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
        if (v214 < 3 || (v240 = (uint8x8_t)vcnt_s8((int8x8_t)v214), v240.i16[0] = vaddlv_u8(v240), v240.u32[0] > 1uLL))
        {
          v239 = std::__next_prime(v239);
        }
        else
        {
          v241 = 1 << -(char)__clz(v239 - 1);
          if (v239 >= 2)
            v239 = v241;
        }
        if (prime <= v239)
          prime = v239;
        if (prime >= v214)
        {
          v214 = *(_QWORD *)(a1 + 32);
          v244 = v214 - 1;
          if ((v214 & (v214 - 1)) != 0)
            goto LABEL_199;
          goto LABEL_187;
        }
        if (!prime)
        {
          v243 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
          if (v243)
            operator delete(v243);
          v214 = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v244 = -1;
          goto LABEL_187;
        }
      }
      if (prime >> 61)
        sub_20E877A38();
      v228 = operator new(8 * prime);
      v229 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v228;
      if (v229)
        operator delete(v229);
      v230 = 0;
      *(_QWORD *)(a1 + 32) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v230++) = 0;
      while (prime != v230);
      v231 = (_QWORD *)*v211;
      if (!*v211)
      {
LABEL_198:
        v214 = prime;
        v244 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
LABEL_199:
          if (v214 <= v213)
          {
            v3 = v213 % v214;
            v222 = *(_QWORD *)(a1 + 24);
            v223 = *(_QWORD **)(v222 + 8 * (v213 % v214));
            if (!v223)
              goto LABEL_188;
          }
          else
          {
            v3 = v213;
            v222 = *(_QWORD *)(a1 + 24);
            v223 = *(_QWORD **)(v222 + 8 * v213);
            if (!v223)
              goto LABEL_188;
          }
          goto LABEL_139;
        }
LABEL_187:
        v3 = v244 & v213;
        v222 = *(_QWORD *)(a1 + 24);
        v223 = *(_QWORD **)(v222 + 8 * (v244 & v213));
        if (!v223)
          goto LABEL_188;
LABEL_139:
        *(_QWORD *)v217 = *v223;
        goto LABEL_207;
      }
      v232 = v231[1];
      v233 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v234 = v232 & v233;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v234) = v211;
        for (m = (_QWORD *)*v231; *v231; m = (_QWORD *)*v231)
        {
          v236 = m[1] & v233;
          if (v236 == v234)
          {
            v231 = m;
          }
          else
          {
            v237 = *(_QWORD *)(a1 + 24);
            if (*(_QWORD *)(v237 + 8 * v236))
            {
              *v231 = *m;
              v238 = 8 * v236;
              *m = **(_QWORD **)(*(_QWORD *)(a1 + 24) + v238);
              **(_QWORD **)(*(_QWORD *)(a1 + 24) + v238) = m;
            }
            else
            {
              *(_QWORD *)(v237 + 8 * v236) = v231;
              v231 = m;
              v234 = v236;
            }
          }
        }
        goto LABEL_198;
      }
      if (v232 < prime)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v232) = v211;
        v242 = (_QWORD *)*v231;
        if (*v231)
          goto LABEL_193;
        goto LABEL_185;
      }
      v232 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v232) = v211;
      v242 = (_QWORD *)*v231;
      if (!*v231)
      {
LABEL_185:
        v214 = prime;
LABEL_186:
        v244 = v214 - 1;
        if ((v214 & (v214 - 1)) != 0)
          goto LABEL_199;
        goto LABEL_187;
      }
      while (1)
      {
LABEL_193:
        v247 = v242[1];
        if (v247 >= prime)
          v247 %= prime;
        if (v247 == v232)
          goto LABEL_192;
        v248 = *(_QWORD *)(a1 + 24);
        if (*(_QWORD *)(v248 + 8 * v247))
        {
          *v231 = *v242;
          v246 = 8 * v247;
          *v242 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + v246);
          **(_QWORD **)(*(_QWORD *)(a1 + 24) + v246) = v242;
          v242 = v231;
LABEL_192:
          v231 = v242;
          v242 = (_QWORD *)*v242;
          if (!v242)
            goto LABEL_198;
        }
        else
        {
          *(_QWORD *)(v248 + 8 * v247) = v231;
          v231 = v242;
          v242 = (_QWORD *)*v242;
          v232 = v247;
          if (!v242)
            goto LABEL_198;
        }
      }
    }
    v212 = 0.0;
    v253 = (double *)(a1 + 40);
    v252 = *(double **)(a1 + 40);
    if (!v252)
      goto LABEL_215;
    while (1)
    {
LABEL_221:
      v259 = *(double **)v252;
      if (v212 - v252[9] <= v210)
        goto LABEL_220;
      v260 = *(int8x8_t *)(a1 + 32);
      v261 = *((_QWORD *)v252 + 1);
      v262 = (uint8x8_t)vcnt_s8(v260);
      v262.i16[0] = vaddlv_u8(v262);
      if (v262.u32[0] > 1uLL)
      {
        if (v261 >= *(_QWORD *)&v260)
          v261 %= *(_QWORD *)&v260;
      }
      else
      {
        v261 &= *(_QWORD *)&v260 - 1;
      }
      v263 = *(_QWORD *)(a1 + 24);
      v264 = *(double **)(v263 + 8 * v261);
      do
      {
        v265 = v264;
        v264 = *(double **)v264;
      }
      while (v264 != v252);
      if (v265 == v253)
        goto LABEL_480;
      v266 = *((_QWORD *)v265 + 1);
      if (v262.u32[0] > 1uLL)
      {
        if (v266 >= *(_QWORD *)&v260)
          v266 %= *(_QWORD *)&v260;
      }
      else
      {
        v266 &= *(_QWORD *)&v260 - 1;
      }
      v267 = *v252;
      if (v266 != v261)
      {
LABEL_480:
        if (v259)
        {
          v268 = *((_QWORD *)v259 + 1);
          if (v262.u32[0] > 1uLL)
          {
            v269 = *((_QWORD *)v259 + 1);
            if (v268 >= *(_QWORD *)&v260)
              v269 = v268 % *(_QWORD *)&v260;
          }
          else
          {
            v269 = v268 & (*(_QWORD *)&v260 - 1);
          }
          v267 = *v252;
          if (v269 == v261)
            goto LABEL_243;
        }
        *(_QWORD *)(v263 + 8 * v261) = 0;
        v267 = *v252;
      }
      if (v267 != 0.0)
      {
        v268 = *(_QWORD *)(*(_QWORD *)&v267 + 8);
LABEL_243:
        if (v262.u32[0] > 1uLL)
        {
          if (v268 >= *(_QWORD *)&v260)
            v268 %= *(_QWORD *)&v260;
        }
        else
        {
          v268 &= *(_QWORD *)&v260 - 1;
        }
        if (v268 != v261)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v268) = v265;
          v267 = *v252;
        }
      }
      *v265 = v267;
      *v252 = 0.0;
      --*(_QWORD *)(a1 + 48);
      operator delete(v252);
LABEL_220:
      v252 = v259;
      if (!v259)
        goto LABEL_215;
    }
  }
LABEL_269:
  if (!v411)
    goto LABEL_435;
  v287 = (char *)v409[0];
  v288 = (char *)v409[1];
  v289 = *(double *)(a1 + 112);
  if (v409[0] == v409[1])
  {
    v291 = 0.0;
    goto LABEL_375;
  }
  v290 = (_QWORD *)(a1 + 80);
  v291 = 0.0;
  __asm { FMOV            V10.2S, #1.0 }
  do
  {
    v297 = *((_QWORD *)v287 + 13);
    v298 = *(_QWORD *)(a1 + 72);
    if (v298)
    {
      v299 = (uint8x8_t)vcnt_s8((int8x8_t)v298);
      v299.i16[0] = vaddlv_u8(v299);
      if (v299.u32[0] > 1uLL)
      {
        v3 = *((_QWORD *)v287 + 13);
        if (v298 <= v297)
          v3 = v297 % v298;
      }
      else
      {
        v3 = (v298 - 1) & v297;
      }
      v300 = *(void ***)(*(_QWORD *)(a1 + 64) + 8 * v3);
      if (v300)
      {
        v301 = (char *)*v300;
        if (*v300)
        {
          if (v299.u32[0] < 2uLL)
          {
            while (1)
            {
              v303 = *((_QWORD *)v301 + 1);
              if (v303 == v297)
              {
                if (*((_QWORD *)v301 + 2) == v297)
                  goto LABEL_365;
              }
              else if ((v303 & (v298 - 1)) != v3)
              {
                goto LABEL_292;
              }
              v301 = *(char **)v301;
              if (!v301)
                goto LABEL_292;
            }
          }
          do
          {
            v302 = *((_QWORD *)v301 + 1);
            if (v302 == v297)
            {
              if (*((_QWORD *)v301 + 2) == v297)
                goto LABEL_365;
            }
            else
            {
              if (v302 >= v298)
                v302 %= v298;
              if (v302 != v3)
                break;
            }
            v301 = *(char **)v301;
          }
          while (v301);
        }
      }
    }
LABEL_292:
    v301 = (char *)operator new(0x88uLL);
    *(_QWORD *)v301 = 0;
    *((_QWORD *)v301 + 1) = v297;
    *((_QWORD *)v301 + 2) = *((_QWORD *)v287 + 13);
    *(_OWORD *)(v301 + 24) = 0u;
    *(_OWORD *)(v301 + 40) = 0u;
    *(_OWORD *)(v301 + 120) = 0u;
    *(_OWORD *)(v301 + 104) = 0u;
    *(_OWORD *)(v301 + 88) = 0u;
    *(_OWORD *)(v301 + 72) = 0u;
    *(_OWORD *)(v301 + 56) = 0u;
    *(_QWORD *)(v301 + 36) = _D10;
    *((_DWORD *)v301 + 11) = 1065353216;
    v304 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    v305 = *(float *)(a1 + 96);
    if (!v298 || (float)(v305 * (float)v298) < v304)
    {
      v308 = (v298 & (v298 - 1)) != 0;
      if (v298 < 3)
        v308 = 1;
      v309 = v308 | (2 * v298);
      v310 = vcvtps_u32_f32(v304 / v305);
      if (v309 <= v310)
        v311 = v310;
      else
        v311 = v309;
      if (v311 == 1)
      {
        v311 = 2;
      }
      else if ((v311 & (v311 - 1)) != 0)
      {
        v311 = std::__next_prime(v311);
        v298 = *(_QWORD *)(a1 + 72);
      }
      if (v311 <= v298)
      {
        if (v311 >= v298)
          goto LABEL_342;
        v323 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
        if (v298 < 3 || (v324 = (uint8x8_t)vcnt_s8((int8x8_t)v298), v324.i16[0] = vaddlv_u8(v324), v324.u32[0] > 1uLL))
        {
          v323 = std::__next_prime(v323);
        }
        else
        {
          v325 = 1 << -(char)__clz(v323 - 1);
          if (v323 >= 2)
            v323 = v325;
        }
        if (v311 <= v323)
          v311 = v323;
        if (v311 >= v298)
        {
          v298 = *(_QWORD *)(a1 + 72);
          v328 = v298 - 1;
          if ((v298 & (v298 - 1)) == 0)
            goto LABEL_343;
LABEL_355:
          if (v298 <= v297)
          {
            v3 = v297 % v298;
            v306 = *(_QWORD *)(a1 + 64);
            v307 = *(_QWORD **)(v306 + 8 * (v297 % v298));
            if (!v307)
              goto LABEL_344;
          }
          else
          {
            v3 = v297;
            v306 = *(_QWORD *)(a1 + 64);
            v307 = *(_QWORD **)(v306 + 8 * v297);
            if (!v307)
              goto LABEL_344;
          }
LABEL_295:
          *(_QWORD *)v301 = *v307;
LABEL_363:
          *v307 = v301;
          goto LABEL_364;
        }
        if (!v311)
        {
          v327 = *(void **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = 0;
          if (v327)
            operator delete(v327);
          v298 = 0;
          *(_QWORD *)(a1 + 72) = 0;
          v328 = -1;
          goto LABEL_343;
        }
      }
      if (v311 >> 61)
        sub_20E877A38();
      v312 = operator new(8 * v311);
      v313 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v312;
      if (v313)
        operator delete(v313);
      v314 = 0;
      *(_QWORD *)(a1 + 72) = v311;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v314++) = 0;
      while (v311 != v314);
      v315 = (_QWORD *)*v290;
      if (!*v290)
      {
LABEL_354:
        v298 = v311;
        v328 = v311 - 1;
        if ((v311 & (v311 - 1)) != 0)
          goto LABEL_355;
LABEL_343:
        v3 = v328 & v297;
        v306 = *(_QWORD *)(a1 + 64);
        v307 = *(_QWORD **)(v306 + 8 * (v328 & v297));
        if (!v307)
          goto LABEL_344;
        goto LABEL_295;
      }
      v316 = v315[1];
      v317 = v311 - 1;
      if ((v311 & (v311 - 1)) == 0)
      {
        v318 = v316 & v317;
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v318) = v290;
        for (n = (_QWORD *)*v315; *v315; n = (_QWORD *)*v315)
        {
          v320 = n[1] & v317;
          if (v320 == v318)
          {
            v315 = n;
          }
          else
          {
            v321 = *(_QWORD *)(a1 + 64);
            if (*(_QWORD *)(v321 + 8 * v320))
            {
              *v315 = *n;
              v322 = 8 * v320;
              *n = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v322);
              **(_QWORD **)(*(_QWORD *)(a1 + 64) + v322) = n;
            }
            else
            {
              *(_QWORD *)(v321 + 8 * v320) = v315;
              v315 = n;
              v318 = v320;
            }
          }
        }
        goto LABEL_354;
      }
      if (v316 < v311)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v316) = v290;
        v326 = (_QWORD *)*v315;
        if (*v315)
          goto LABEL_349;
        goto LABEL_341;
      }
      v316 %= v311;
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v316) = v290;
      v326 = (_QWORD *)*v315;
      if (!*v315)
      {
LABEL_341:
        v298 = v311;
LABEL_342:
        v328 = v298 - 1;
        if ((v298 & (v298 - 1)) != 0)
          goto LABEL_355;
        goto LABEL_343;
      }
      while (1)
      {
LABEL_349:
        v331 = v326[1];
        if (v331 >= v311)
          v331 %= v311;
        if (v331 == v316)
          goto LABEL_348;
        v332 = *(_QWORD *)(a1 + 64);
        if (*(_QWORD *)(v332 + 8 * v331))
        {
          *v315 = *v326;
          v330 = 8 * v331;
          *v326 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v330);
          **(_QWORD **)(*(_QWORD *)(a1 + 64) + v330) = v326;
          v326 = v315;
LABEL_348:
          v315 = v326;
          v326 = (_QWORD *)*v326;
          if (!v326)
            goto LABEL_354;
        }
        else
        {
          *(_QWORD *)(v332 + 8 * v331) = v315;
          v315 = v326;
          v326 = (_QWORD *)*v326;
          v316 = v331;
          if (!v326)
            goto LABEL_354;
        }
      }
    }
    v306 = *(_QWORD *)(a1 + 64);
    v307 = *(_QWORD **)(v306 + 8 * v3);
    if (v307)
      goto LABEL_295;
LABEL_344:
    *(_QWORD *)v301 = *v290;
    *v290 = v301;
    *(_QWORD *)(v306 + 8 * v3) = v290;
    if (*(_QWORD *)v301)
    {
      v329 = *(_QWORD *)(*(_QWORD *)v301 + 8);
      if ((v298 & (v298 - 1)) != 0)
      {
        if (v329 >= v298)
          v329 %= v298;
      }
      else
      {
        v329 &= v298 - 1;
      }
      v307 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v329);
      goto LABEL_363;
    }
LABEL_364:
    ++*(_QWORD *)(a1 + 88);
LABEL_365:
    v333 = *(_QWORD *)v287;
    *((_DWORD *)v301 + 8) = *((_DWORD *)v287 + 2);
    *((_QWORD *)v301 + 3) = v333;
    v334 = *(_QWORD *)(v287 + 12);
    *((_DWORD *)v301 + 11) = *((_DWORD *)v287 + 5);
    *(_QWORD *)(v301 + 36) = v334;
    v335 = *(_OWORD *)(v287 + 24);
    v336 = *(_OWORD *)(v287 + 40);
    *((_DWORD *)v301 + 20) = *((_DWORD *)v287 + 14);
    *((_OWORD *)v301 + 3) = v335;
    *((_OWORD *)v301 + 4) = v336;
    v337 = *(_OWORD *)(v287 + 60);
    v338 = *(_OWORD *)(v287 + 76);
    *((_DWORD *)v301 + 29) = *((_DWORD *)v287 + 23);
    *(_OWORD *)(v301 + 100) = v338;
    *(_OWORD *)(v301 + 84) = v337;
    *(_OWORD *)(v301 + 120) = *((_OWORD *)v287 + 6);
    if (v291 < *((double *)v287 + 12))
      v291 = *((double *)v287 + 12);
    v287 += 112;
  }
  while (v287 != v288);
LABEL_375:
  v340 = (double *)(a1 + 80);
  v339 = *(double **)(a1 + 80);
  if (v339)
  {
    do
    {
      v346 = *(double **)v339;
      if (v291 - v339[15] <= v289)
        goto LABEL_381;
      v347 = *(int8x8_t *)(a1 + 72);
      v348 = *((_QWORD *)v339 + 1);
      v349 = (uint8x8_t)vcnt_s8(v347);
      v349.i16[0] = vaddlv_u8(v349);
      if (v349.u32[0] > 1uLL)
      {
        if (v348 >= *(_QWORD *)&v347)
          v348 %= *(_QWORD *)&v347;
      }
      else
      {
        v348 &= *(_QWORD *)&v347 - 1;
      }
      v350 = *(_QWORD *)(a1 + 64);
      v351 = *(double **)(v350 + 8 * v348);
      do
      {
        v352 = v351;
        v351 = *(double **)v351;
      }
      while (v351 != v339);
      if (v352 == v340)
        goto LABEL_481;
      v353 = *((_QWORD *)v352 + 1);
      if (v349.u32[0] > 1uLL)
      {
        if (v353 >= *(_QWORD *)&v347)
          v353 %= *(_QWORD *)&v347;
      }
      else
      {
        v353 &= *(_QWORD *)&v347 - 1;
      }
      v354 = *v339;
      if (v353 != v348)
      {
LABEL_481:
        if (v346)
        {
          v355 = *((_QWORD *)v346 + 1);
          if (v349.u32[0] > 1uLL)
          {
            v356 = *((_QWORD *)v346 + 1);
            if (v355 >= *(_QWORD *)&v347)
              v356 = v355 % *(_QWORD *)&v347;
          }
          else
          {
            v356 = v355 & (*(_QWORD *)&v347 - 1);
          }
          v354 = *v339;
          if (v356 == v348)
            goto LABEL_404;
        }
        *(_QWORD *)(v350 + 8 * v348) = 0;
        v354 = *v339;
      }
      if (v354 != 0.0)
      {
        v355 = *(_QWORD *)(*(_QWORD *)&v354 + 8);
LABEL_404:
        if (v349.u32[0] > 1uLL)
        {
          if (v355 >= *(_QWORD *)&v347)
            v355 %= *(_QWORD *)&v347;
        }
        else
        {
          v355 &= *(_QWORD *)&v347 - 1;
        }
        if (v355 != v348)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v355) = v352;
          v354 = *v339;
        }
      }
      *v352 = v354;
      *v339 = 0.0;
      --*(_QWORD *)(a1 + 88);
      operator delete(v339);
LABEL_381:
      v339 = v346;
    }
    while (v346);
  }
  v341 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v429 = 0;
  v428 = 0uLL;
  if (v341)
  {
    if (v341 > 0x249249249249249)
      sub_20E867F44();
    v342 = (char *)operator new(112 * v341);
    v343 = &v342[112 * v341];
    v344 = *(uint64_t **)v340;
    if (v344)
      goto LABEL_379;
  }
  else
  {
    v343 = 0;
    v342 = 0;
    v344 = *(uint64_t **)v340;
    if (v344)
    {
LABEL_379:
      v345 = v342;
      while (1)
      {
        v364 = v344 + 3;
        if (v342 < v343)
        {
          v357 = *v364;
          *((_DWORD *)v342 + 2) = *((_DWORD *)v344 + 8);
          *(_QWORD *)v342 = v357;
          v358 = *(uint64_t *)((char *)v344 + 36);
          *((_DWORD *)v342 + 5) = *((_DWORD *)v344 + 11);
          *(_QWORD *)(v342 + 12) = v358;
          v359 = *((_OWORD *)v344 + 3);
          v360 = *((_OWORD *)v344 + 4);
          *((_DWORD *)v342 + 14) = *((_DWORD *)v344 + 20);
          *(_OWORD *)(v342 + 40) = v360;
          *(_OWORD *)(v342 + 24) = v359;
          v361 = *(_OWORD *)((char *)v344 + 84);
          v362 = *(_OWORD *)((char *)v344 + 100);
          *((_DWORD *)v342 + 23) = *((_DWORD *)v344 + 29);
          *(_OWORD *)(v342 + 76) = v362;
          *(_OWORD *)(v342 + 60) = v361;
          *((_OWORD *)v342 + 6) = *(_OWORD *)(v344 + 15);
          v363 = v342 + 112;
        }
        else
        {
          v365 = 0x6DB6DB6DB6DB6DB7 * ((v342 - v345) >> 4) + 1;
          if (v365 > 0x249249249249249)
          {
            *((_QWORD *)&v428 + 1) = v342;
            *(_QWORD *)&v429 = v343;
            *(_QWORD *)&v428 = v345;
            sub_20E867F44();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v343 - v345) >> 4) > v365)
            v365 = 0xDB6DB6DB6DB6DB6ELL * ((v343 - v345) >> 4);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v343 - v345) >> 4)) >= 0x124924924924924)
            v366 = 0x249249249249249;
          else
            v366 = v365;
          if (v366)
          {
            if (v366 > 0x249249249249249)
            {
              *(_QWORD *)&v429 = v343;
              *(_QWORD *)&v428 = v345;
              sub_20E877A38();
            }
            v367 = (char *)operator new(112 * v366);
          }
          else
          {
            v367 = 0;
          }
          v368 = &v367[16 * ((v342 - v345) >> 4)];
          v369 = *v364;
          *((_DWORD *)v368 + 2) = *((_DWORD *)v344 + 8);
          *(_QWORD *)v368 = v369;
          v370 = *(uint64_t *)((char *)v344 + 36);
          *((_DWORD *)v368 + 5) = *((_DWORD *)v344 + 11);
          *(_QWORD *)(v368 + 12) = v370;
          v371 = *((_OWORD *)v344 + 3);
          v372 = *((_OWORD *)v344 + 4);
          *((_DWORD *)v368 + 14) = *((_DWORD *)v344 + 20);
          *(_OWORD *)(v368 + 40) = v372;
          *(_OWORD *)(v368 + 24) = v371;
          v373 = *(_OWORD *)((char *)v344 + 84);
          v374 = *(_OWORD *)((char *)v344 + 100);
          *((_DWORD *)v368 + 23) = *((_DWORD *)v344 + 29);
          *(_OWORD *)(v368 + 76) = v374;
          *(_OWORD *)(v368 + 60) = v373;
          *((_OWORD *)v368 + 6) = *(_OWORD *)(v344 + 15);
          if (v342 != v345)
          {
            v375 = &v367[16 * ((v342 - v345) >> 4)];
            do
            {
              v376 = *((_QWORD *)v342 - 14);
              v342 -= 112;
              v377 = *((_DWORD *)v342 + 2);
              *((_QWORD *)v375 - 14) = v376;
              v375 -= 112;
              *((_DWORD *)v375 + 2) = v377;
              v378 = *(_QWORD *)(v342 + 12);
              *((_DWORD *)v375 + 5) = *((_DWORD *)v342 + 5);
              *(_QWORD *)(v375 + 12) = v378;
              v379 = *(_OWORD *)(v342 + 24);
              v380 = *(_OWORD *)(v342 + 40);
              *((_DWORD *)v375 + 14) = *((_DWORD *)v342 + 14);
              *(_OWORD *)(v375 + 40) = v380;
              *(_OWORD *)(v375 + 24) = v379;
              v381 = *(_OWORD *)(v342 + 60);
              v382 = *(_OWORD *)(v342 + 76);
              *((_DWORD *)v375 + 23) = *((_DWORD *)v342 + 23);
              *(_OWORD *)(v375 + 76) = v382;
              *(_OWORD *)(v375 + 60) = v381;
              *((_OWORD *)v375 + 6) = *((_OWORD *)v342 + 6);
            }
            while (v342 != v345);
            v342 = v345;
            v345 = v375;
            v343 = &v367[112 * v366];
            v363 = v368 + 112;
            if (!v342)
              goto LABEL_411;
LABEL_429:
            operator delete(v342);
            goto LABEL_411;
          }
          v345 = &v367[16 * ((v342 - v345) >> 4)];
          v343 = &v367[112 * v366];
          v363 = v368 + 112;
          if (v342)
            goto LABEL_429;
        }
LABEL_411:
        v344 = (uint64_t *)*v344;
        v342 = v363;
        if (!v344)
          goto LABEL_432;
      }
    }
  }
  v363 = v342;
  v345 = v342;
LABEL_432:
  if (v409[0])
    operator delete(v409[0]);
  v409[0] = v345;
  v409[1] = v363;
  v410 = v343;
LABEL_435:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, __p);
  v383 = (char *)operator new(0xD0uLL);
  *((_QWORD *)v383 + 1) = 0;
  *((_QWORD *)v383 + 2) = 0;
  *(_QWORD *)v383 = &off_24C9BFBC0;
  v383[24] = 0;
  v384 = v383 + 24;
  v383[48] = 0;
  if (v408)
  {
    *(_OWORD *)(v383 + 24) = *(_OWORD *)__p;
    *((_QWORD *)v383 + 5) = v407;
    __p[1] = 0;
    v407 = 0;
    __p[0] = 0;
    v383[48] = 1;
  }
  v383[56] = 0;
  v383[80] = 0;
  if (v411)
  {
    *(_OWORD *)(v383 + 56) = *(_OWORD *)v409;
    *((_QWORD *)v383 + 9) = v410;
    v409[1] = 0;
    v410 = 0;
    v409[0] = 0;
    v383[80] = 1;
  }
  v383[88] = 0;
  v383[136] = 0;
  if (v416)
  {
    *(_OWORD *)(v383 + 88) = v412;
    *((_QWORD *)v383 + 13) = v413;
    v413 = 0;
    v412 = 0uLL;
    v385 = v414;
    v414 = 0uLL;
    *((_OWORD *)v383 + 7) = v385;
    v386 = v415;
    v415 = 0;
    *((_QWORD *)v383 + 16) = v386;
    v383[136] = 1;
  }
  v383[144] = 0;
  v383[168] = 0;
  if (v419)
  {
    *((_OWORD *)v383 + 9) = v417;
    *((_QWORD *)v383 + 20) = v418;
    v418 = 0;
    v417 = 0uLL;
    v383[168] = 1;
  }
  v383[176] = 0;
  v383[200] = 0;
  if (v422)
  {
    *((_OWORD *)v383 + 11) = v420;
    *((_QWORD *)v383 + 24) = v421;
    v421 = 0;
    v420 = 0uLL;
    v383[200] = 1;
  }
  v387 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v384;
  *(_QWORD *)(a1 + 16) = v383;
  if (!v387)
  {
    *a3 = v384;
    a3[1] = v383;
LABEL_453:
    v390 = (unint64_t *)(v383 + 16);
    do
      v391 = __ldxr(v390);
    while (__stxr(v391 + 1, v390));
    goto LABEL_455;
  }
  p_shared_owners = (unint64_t *)&v387->__shared_owners_;
  do
    v389 = __ldaxr(p_shared_owners);
  while (__stlxr(v389 - 1, p_shared_owners));
  if (!v389)
  {
    ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
    std::__shared_weak_count::__release_weak(v387);
  }
  v383 = *(char **)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 8);
  a3[1] = v383;
  if (v383)
    goto LABEL_453;
LABEL_455:
  sub_20E8DE3B4((uint64_t)__p);
  v392 = v424;
  if (v424)
  {
    v393 = (unint64_t *)&v424->__shared_owners_;
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
      std::__shared_weak_count::__release_weak(v392);
    }
  }
}

void sub_20EA58294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v34;
  uint64_t v35;

  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v34)
  {
    *(_QWORD *)(v35 - 200) = v34;
    operator delete(v34);
    sub_20E8DE3B4((uint64_t)&a29);
    sub_20E86665C(v35 - 248);
    _Unwind_Resume(a1);
  }
  sub_20E8DE3B4((uint64_t)&a29);
  sub_20E86665C(v35 - 248);
  _Unwind_Resume(a1);
}

double sub_20EA583D4(uint64_t a1, uint64_t a2)
{
  return sub_20EEEBC0C(a2);
}

_QWORD *sub_20EA583DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_24C9BFB20;
  v2 = a1[15];
  if (v2)
  {
    v3 = a1[16];
    v4 = (void *)a1[15];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[15];
    }
    a1[16] = v2;
    operator delete(v4);
  }
  return sub_20EA55EC0(a1);
}

void sub_20EA58480(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_24C9BFB20;
  v2 = a1[15];
  if (v2)
  {
    v3 = a1[16];
    v4 = (void *)a1[15];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[15];
    }
    a1[16] = v2;
    operator delete(v4);
  }
  sub_20EA55EC0(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20EA58538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;

  v4 = a2 + 64;
  if (*(_BYTE *)(a2 + 112))
  {
    if (v4 != a1 + 120)
    {
      v6 = *(char **)(a1 + 120);
      v5 = *(char **)(a1 + 128);
      v7 = (v5 - v6) >> 4;
      v8 = *(_QWORD *)(a2 + 80);
      v9 = *(char **)(a2 + 64);
      if (v7 <= (v8 - (uint64_t)v9) >> 4)
      {
        v23 = *(char **)(a2 + 72);
        v24 = (v23 - v9) >> 4;
        if (v24 >= v7)
        {
          if (v6 != v5)
          {
            do
            {
              v34 = *(_QWORD *)v6;
              v33 = *((_QWORD *)v6 + 1);
              if (v33)
              {
                v35 = (unint64_t *)(v33 + 8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              v37 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
              *(_QWORD *)v9 = v34;
              *((_QWORD *)v9 + 1) = v33;
              if (v37)
              {
                p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                do
                  v39 = __ldaxr(p_shared_owners);
                while (__stlxr(v39 - 1, p_shared_owners));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              v6 += 16;
              v9 += 16;
            }
            while (v6 != v5);
            v23 = *(char **)(a2 + 72);
          }
          while (v23 != v9)
          {
            v52 = (std::__shared_weak_count *)*((_QWORD *)v23 - 1);
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v23 -= 16;
          }
          *(_QWORD *)(a2 + 72) = v9;
        }
        else
        {
          v25 = &v6[16 * v24];
          if (v23 != v9)
          {
            do
            {
              v27 = *(_QWORD *)v6;
              v26 = *((_QWORD *)v6 + 1);
              if (v26)
              {
                v28 = (unint64_t *)(v26 + 8);
                do
                  v29 = __ldxr(v28);
                while (__stxr(v29 + 1, v28));
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
              *(_QWORD *)v9 = v27;
              *((_QWORD *)v9 + 1) = v26;
              if (v30)
              {
                v31 = (unint64_t *)&v30->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                  std::__shared_weak_count::__release_weak(v30);
                }
              }
              v6 += 16;
              v9 += 16;
            }
            while (v6 != v25);
            v9 = *(char **)(a2 + 72);
          }
          v48 = v9;
          if (v25 != v5)
          {
            v48 = v9;
            do
            {
              v49 = *((_QWORD *)v25 + 1);
              *(_QWORD *)v48 = *(_QWORD *)v25;
              *((_QWORD *)v48 + 1) = v49;
              if (v49)
              {
                v50 = (unint64_t *)(v49 + 8);
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
              }
              v25 += 16;
              v48 += 16;
            }
            while (v25 != v5);
          }
          *(_QWORD *)(a2 + 72) = v48;
        }
      }
      else
      {
        if (v9)
        {
          v10 = *(char **)(a2 + 72);
          v11 = *(void **)(a2 + 64);
          if (v10 != v9)
          {
            do
            {
              v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
              if (v12)
              {
                v13 = (unint64_t *)&v12->__shared_owners_;
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 - 1, v13));
                if (!v14)
                {
                  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                  std::__shared_weak_count::__release_weak(v12);
                }
              }
              v10 -= 16;
            }
            while (v10 != v9);
            v11 = *(void **)v4;
          }
          *(_QWORD *)(a2 + 72) = v9;
          operator delete(v11);
          v8 = 0;
          *(_QWORD *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
        }
        if (v5 - v6 < 0)
          goto LABEL_82;
        v40 = v8 >> 3;
        if (v8 >> 3 <= v7)
          v40 = (v5 - v6) >> 4;
        v41 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
        v42 = 0xFFFFFFFFFFFFFFFLL;
        if (!v41)
          v42 = v40;
        if (v42 >> 60)
LABEL_82:
          sub_20E867F44();
        v43 = 2 * v42;
        v44 = operator new(16 * v42);
        *(_QWORD *)(a2 + 64) = v44;
        *(_QWORD *)(a2 + 72) = v44;
        *(_QWORD *)(a2 + 80) = &v44[v43];
        while (v6 != v5)
        {
          v45 = *((_QWORD *)v6 + 1);
          *v44 = *(_QWORD *)v6;
          v44[1] = v45;
          if (v45)
          {
            v46 = (unint64_t *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v6 += 16;
          v44 += 2;
        }
        *(_QWORD *)(a2 + 72) = v44;
      }
    }
    v55 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 88) = v55;
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v15 = *(char **)(a1 + 120);
    v16 = *(char **)(a1 + 128);
    v17 = v16 - v15;
    if (v16 != v15)
    {
      if (v17 < 0)
        sub_20E867F44();
      v18 = operator new(v16 - v15);
      *(_QWORD *)(a2 + 64) = v18;
      *(_QWORD *)(a2 + 72) = v18;
      *(_QWORD *)(a2 + 80) = &v18[2 * (v17 >> 4)];
      do
      {
        v19 = *((_QWORD *)v15 + 1);
        *v18 = *(_QWORD *)v15;
        v18[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v15 += 16;
        v18 += 2;
      }
      while (v15 != v16);
      *(_QWORD *)(a2 + 72) = v18;
    }
    v22 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 88) = v22;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return sub_20EEEBC0C(a2);
}

void sub_20EA58908(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (char *)*v2;
  if (*v2)
  {
    v5 = *(char **)(v1 + 72);
    v6 = *v2;
    if (v5 != v4)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA58984(_QWORD *a1, uint64_t a2)
{
  double v3;
  float *v4;
  float *v5;
  unint64_t v6;
  char *v7;
  float32x2_t v8;
  float64x2_t v10;
  float64x2_t v11;
  float32x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v18;
  float64x2_t v25;
  float32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  char *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  char *v41;
  char *v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  double v49;
  double v50;
  float64x2_t v51;
  float32x2_t v52;
  float v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int64x2_t v86;
  float32x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  int64x2_t v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  double v100;
  float *v101;
  float *v102;

  v3 = *(double *)a2;
  v96 = *(double *)(a2 + 48);
  v92 = *(double *)(a2 + 80);
  v94 = *(int64x2_t *)(a2 + 32);
  v86 = *(int64x2_t *)(a2 + 64);
  v100 = *(double *)(a2 + 112);
  v99 = *(float64x2_t *)(a2 + 96);
  v90 = *(double *)(a2 + 144);
  v88 = *(float64x2_t *)(a2 + 128);
  sub_20EA70428((uint64_t *)(a2 + 8), 0, 0, (void **)&v101, 0.8, 1.79769313e308);
  v4 = v101;
  v5 = v102;
  v72 = a1;
  if (v102 == v101)
  {
    v31 = 0;
    v42 = 0;
    v7 = 0;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v102 - v101);
    if (v6 >> 58)
      sub_20E867F44();
    v7 = (char *)operator new(0xAAAAAAAAAAAAAAC0 * (v102 - v101));
    *(_QWORD *)&v98 = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
    v8.i32[1] = HIDWORD(v92);
    _V7.D[1] = v88.f64[1];
    v10 = (float64x2_t)vzip1q_s64(v94, v86);
    v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
    _D2 = *(float32x2_t *)&v99.f64[1];
    v13.i32[1] = HIDWORD(v96);
    v14.f64[0] = v96;
    v14.f64[1] = v92;
    v15 = (float64x2_t)vzip2q_s64(v94, v86);
    v16 = vnegq_f64(v88);
    v95 = v14;
    _D19 = v90;
    v18 = (int8x16_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v10, v16.f64[0]), v15, v88, 1), v14, v90, 0);
    _Q5 = vmulq_f64(v99, v16);
    __asm { FMLS            D5, D2, V7.D[1] }
    _D7 = v100;
    __asm { FMLS            D5, D7, V19.D[0] }
    v25 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v15.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v15, 1), 8uLL);
    v89 = v25;
    v91 = _Q5;
    *(float *)v14.f64 = v3;
    *(float32x2_t *)&_Q5.f64[0] = vcvt_f32_f64(v10);
    *(float *)v25.f64 = v99.f64[0];
    v26 = vcvt_f32_f64(v15);
    _D2.f32[0] = v99.f64[1];
    *(float *)v27.i32 = v96;
    *(float *)v28.i32 = v92;
    v29 = (float32x2_t)__PAIR64__(v28.u32[0], v27.u32[0]);
    v30.f32[0] = v100;
    v31 = &v7[64 * v6];
    v76 = *(float *)v14.f64;
    *(int32x2_t *)&v14.f64[0] = vdup_n_s32(0x38D1B717u);
    v32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&_Q5.f64[0], *(float32x2_t *)&v14.f64[0]), 0, v26), 0, (float32x2_t)__PAIR64__(v28.u32[0], v27.u32[0]));
    v13.i32[0] = 953267991;
    v8.f32[0] = *(float *)v25.f64 * 0.0001;
    v33 = vmla_f32(vmla_f32(v8, 0, _D2), 0, v30);
    v34 = vmul_f32(*(float32x2_t *)&_Q5.f64[0], 0);
    v84 = (float32x2_t)__PAIR64__(v28.u32[0], v27.u32[0]);
    v35 = vmla_f32(vmla_f32(v34, *(float32x2_t *)&v14.f64[0], v26), 0, (float32x2_t)__PAIR64__(v28.u32[0], v27.u32[0]));
    v29.f32[0] = *(float *)v25.f64 * 0.0;
    *(float32x2_t *)&v14.f64[0] = vmla_f32(vmla_f32(v29, v13, _D2), 0, v30);
    v81 = vmla_f32(v29, 0, _D2);
    v82 = vmla_f32(v34, 0, v26);
    v80 = vmla_n_f32(vmul_n_f32(v32, *(float *)_Q5.f64), v35, v26.f32[0]);
    v85 = (float32x2_t)v28;
    v87 = (float32x2_t)v27;
    v78 = vmla_f32(vmul_f32(v33, *(float32x2_t *)&_Q5.f64[0]), v26, *(float32x2_t *)&v14.f64[0]);
    v79 = (float32x2_t)vdup_lane_s32(v27, 0);
    v36 = vmla_lane_f32(vmul_lane_f32(v32, *(float32x2_t *)&_Q5.f64[0], 1), v35, v26, 1);
    v77 = (float32x2_t)vdup_lane_s32(v28, 0);
    v37 = vmla_lane_f32(vmul_lane_f32(v33, *(float32x2_t *)&_Q5.f64[0], 1), *(float32x2_t *)&v14.f64[0], v26, 1);
    v38 = vmla_n_f32(vmul_n_f32(v32, *(float *)v25.f64), v35, _D2.f32[0]);
    v83 = v30;
    v39 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 0);
    v40 = vmla_f32(vmul_f32(v33, *(float32x2_t *)&v25.f64[0]), _D2, *(float32x2_t *)&v14.f64[0]);
    v10.f64[1] = v11.f64[0];
    v97 = v10;
    v18.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
    v93 = (float64x2_t)v18;
    v41 = v7;
    do
    {
      while (1)
      {
        v43 = v4[2];
        *(float *)v11.f64 = v43;
        if (v43 <= 0.0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/SensorData/src/JasperNoiseModel.cpp", 32, (uint64_t)"z > 0", 5, (uint64_t)&unk_21024F075, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          *(float *)v11.f64 = v4[2];
        }
        *(float *)v25.f64 = (float)(5.0 - v43) >= 0.0 ? (float)(1.0 - (float)((float)(5.0 - v43) / 5.0)) * 0.01 : 0.01;
        v44 = vmla_n_f32(v82, v84, *(float *)v25.f64);
        v45 = vmla_f32(v81, *(float32x2_t *)&v25.f64[0], v83);
        *(float32x2_t *)&v46 = vmla_f32(v80, v79, v44);
        *((float32x2_t *)&v46 + 1) = vmla_f32(v78, v87, v45);
        *(float32x2_t *)&v47 = vmla_f32(v36, v77, v44);
        *((float32x2_t *)&v47 + 1) = vmla_f32(v37, v85, v45);
        *(float32x2_t *)&v48 = vmla_f32(v38, v39, v44);
        *((float32x2_t *)&v48 + 1) = vmla_f32(v40, v83, v45);
        v49 = *v4;
        v50 = v4[1];
        v11.f64[0] = *(float *)v11.f64;
        v51 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, v49), v89, v50), v95, v11.f64[0]);
        v11.f64[0] = v99.f64[0] * v49 + v98 * v50 + v100 * v11.f64[0];
        v11 = vaddq_f64(v91, v11);
        v25 = vaddq_f64(v93, v51);
        v52 = vcvt_f32_f64(v25);
        v53 = v11.f64[0];
        if (v41 >= v31)
          break;
        *(float32x2_t *)v41 = v52;
        *((float *)v41 + 2) = v53;
        *((_DWORD *)v41 + 5) = DWORD2(v46);
        *(_QWORD *)(v41 + 12) = v46;
        *((_DWORD *)v41 + 8) = DWORD2(v47);
        *((_QWORD *)v41 + 3) = v47;
        *((_DWORD *)v41 + 11) = DWORD2(v48);
        *(_QWORD *)(v41 + 36) = v48;
        *((double *)v41 + 6) = v76;
        v42 = v41 + 64;
        *((_QWORD *)v41 + 7) = 0;
        v4 += 3;
        v41 += 64;
        if (v4 == v5)
          goto LABEL_26;
      }
      v54 = (v41 - v7) >> 6;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 58)
        sub_20E867F44();
      v73 = v48;
      v74 = v47;
      v75 = v46;
      if ((v31 - v7) >> 5 > v55)
        v55 = (v31 - v7) >> 5;
      if ((unint64_t)(v31 - v7) >= 0x7FFFFFFFFFFFFFC0)
        v56 = 0x3FFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56 >> 58)
        sub_20E877A38();
      v57 = (char *)operator new(v56 << 6);
      v58 = &v57[64 * v54];
      *((_DWORD *)v58 + 5) = DWORD2(v75);
      *(float32x2_t *)v58 = v52;
      *((float *)v58 + 2) = v53;
      *(_QWORD *)(v58 + 12) = v75;
      v31 = &v57[64 * v56];
      *((_QWORD *)v58 + 3) = v74;
      *((_DWORD *)v58 + 8) = DWORD2(v74);
      *(_QWORD *)(v58 + 36) = v73;
      *((_DWORD *)v58 + 11) = DWORD2(v73);
      *((double *)v58 + 6) = v76;
      v42 = v58 + 64;
      *((_QWORD *)v58 + 7) = 0;
      if (v41 == v7)
        goto LABEL_22;
      do
      {
        v59 = *((_QWORD *)v41 - 8);
        v41 -= 64;
        v60 = *((_DWORD *)v41 + 2);
        *((_QWORD *)v58 - 8) = v59;
        v58 -= 64;
        *((_DWORD *)v58 + 2) = v60;
        v61 = *(_OWORD *)(v41 + 12);
        v25 = *(float64x2_t *)(v41 + 28);
        *((_DWORD *)v58 + 11) = *((_DWORD *)v41 + 11);
        *(float64x2_t *)(v58 + 28) = v25;
        *(_OWORD *)(v58 + 12) = v61;
        v11 = *((float64x2_t *)v41 + 3);
        *((float64x2_t *)v58 + 3) = v11;
      }
      while (v41 != v7);
      if (v7)
LABEL_22:
        operator delete(v7);
      v7 = v58;
      v4 += 3;
      v41 = v42;
    }
    while (v4 != v5);
  }
LABEL_26:
  v62 = operator new(0x30uLL);
  v62[1] = 0;
  v62[2] = 0;
  *v62 = &off_24C9BFB70;
  v62[3] = v7;
  v62[4] = v42;
  v62[5] = v31;
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  v63 = (_QWORD *)(v72[15] + 16 * v72[19]);
  v64 = (std::__shared_weak_count *)v63[1];
  *v63 = v62 + 3;
  v63[1] = v62;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (uint64_t)(v72[16] - v72[15]) >> 4;
  v68 = v72[20];
  v69 = v72[19] + 1;
  if (v69 >= v67)
    v70 = (uint64_t)(v72[16] - v72[15]) >> 4;
  else
    v70 = 0;
  v72[19] = v69 - v70;
  if (v68 == v67)
  {
    v71 = v72[18] + 1;
    if (v71 < v67)
      v67 = 0;
    v72[18] = v71 - v67;
  }
  else
  {
    v72[20] = v68 + 1;
  }
}

void sub_20EA58F6C(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if (v1)
  {
    operator delete(v1);
    v4 = *(void **)(v2 - 176);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)(v2 - 176);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v2 - 168) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_20EA58FBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA58FCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFB70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA58FFC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20EA59018(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA59028(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA59058(uint64_t a1)
{
  return sub_20E8DE3B4(a1 + 24);
}

uint64_t sub_20EA59064(uint64_t a1, const char *a2, char *__s)
{
  char *v6;
  const char *v7;
  const char *v8;

  *(_QWORD *)a1 = &off_24C9BFC10;
  if (__s)
  {
    v6 = strrchr(__s, 47);
    if (v6)
      v7 = v6 + 1;
    else
      v7 = __s;
  }
  else
  {
    v7 = "Location is not provided";
  }
  v8 = "User info is not provided";
  if (a2)
    v8 = a2;
  snprintf((char *)(a1 + 8), 0x576uLL, "[%s] %s", v7, v8);
  return a1;
}

void sub_20EA590F8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA5911C(uint64_t a1)
{
  return a1 + 8;
}

__int128 *CV3DDiagnosticsRunOptionsGetDefaultServerPath_0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6D918);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D918))
  {
    v2 = (char *)sub_20E8A93A8();
    if (v2[23] < 0)
    {
      sub_20E860C04(&xmmword_254A6D900, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *(_OWORD *)v2;
      unk_254A6D910 = *((_QWORD *)v2 + 2);
      xmmword_254A6D900 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6D900, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D918);
  }
  if (byte_254A6D917 >= 0)
    return &xmmword_254A6D900;
  else
    return (__int128 *)xmmword_254A6D900;
}

void sub_20EA591D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D918);
  _Unwind_Resume(a1);
}

void sub_20EA591E8(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a7 = 0;
  *(_BYTE *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 24) = 0;
  v12 = a7 + 24;
  *(_BYTE *)(a7 + 80) = 0;
  *(_BYTE *)(a7 + 88) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  *(_BYTE *)(a7 + 120) = 0;
  *(_BYTE *)(a7 + 144) = 0;
  *(_BYTE *)(a7 + 152) = 0;
  *(_BYTE *)(a7 + 176) = 0;
  if (a1)
  {
    *(_QWORD *)a7 = a1;
    *(_BYTE *)(a7 + 8) = 2;
    *(_BYTE *)(a7 + 16) = 1;
  }
  if (!a2)
    a2 = "sysdiagnose";
  sub_20EA59330(a7, a2);
  sub_20EA594F8(a7, a3);
  v13 = 5242880;
  if (a4)
    v13 = a4;
  if (!*(_BYTE *)(a7 + 80))
  {
    *(_QWORD *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)v12 = 0u;
    *(_BYTE *)(a7 + 80) = 1;
LABEL_14:
    *(_BYTE *)(a7 + 32) = 1;
    *(_QWORD *)v12 = v13;
    if (a5)
      goto LABEL_10;
LABEL_15:
    *(_QWORD *)(a7 + 40) = 5000000000;
    *(_BYTE *)(a7 + 48) = 1;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a7 + 32))
    goto LABEL_14;
  *(_QWORD *)v12 = v13;
  if (!a5)
    goto LABEL_15;
LABEL_10:
  if (!*(_BYTE *)(a7 + 72))
    *(_BYTE *)(a7 + 72) = 1;
  *(_QWORD *)(a7 + 56) = a5;
  *(_BYTE *)(a7 + 64) = 2;
LABEL_16:
  sub_20EA596C0(a7, a6);
}

void sub_20EA5931C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8DBAF4(v1);
  _Unwind_Resume(a1);
}

void sub_20EA59330(uint64_t a1, char *__s)
{
  char v2;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (!__s)
  {
    v8 = 0;
    v9 = *(unsigned __int8 *)(a1 + 144);
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_16;
LABEL_7:
    if (!v9)
    {
      v13 = v16[0];
      *(_QWORD *)(a1 + 120) = v8;
      *(_QWORD *)(a1 + 128) = v13;
      *(_QWORD *)(a1 + 135) = *(_QWORD *)((char *)v16 + 7);
      *(_BYTE *)(a1 + 143) = v2;
      *(_BYTE *)(a1 + 144) = 1;
      return;
    }
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    *(_BYTE *)(a1 + 144) = 0;
    goto LABEL_20;
  }
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v7 = operator new(v10 + 1);
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v11 | 0x8000000000000000;
    v14 = v7;
    goto LABEL_14;
  }
  HIBYTE(v15) = v5;
  v7 = &v14;
  if (v5)
LABEL_14:
    memcpy(v7, __s, v6);
  *((_BYTE *)v7 + v6) = 0;
  v8 = v14;
  v16[0] = v15;
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)((char *)&v15 + 7);
  v2 = HIBYTE(v15);
  v9 = *(unsigned __int8 *)(a1 + 144);
  if (v9 != 1)
    goto LABEL_7;
LABEL_16:
  if (v9)
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    v12 = v16[0];
    *(_QWORD *)(a1 + 120) = v8;
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 135) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a1 + 143) = v2;
    return;
  }
LABEL_20:
  if (__s && v2 < 0)
    operator delete(v8);
}

void sub_20EA594F8(uint64_t a1, char *__s)
{
  char v2;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (!__s)
  {
    v8 = 0;
    v9 = *(unsigned __int8 *)(a1 + 176);
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_16;
LABEL_7:
    if (!v9)
    {
      v13 = v16[0];
      *(_QWORD *)(a1 + 152) = v8;
      *(_QWORD *)(a1 + 160) = v13;
      *(_QWORD *)(a1 + 167) = *(_QWORD *)((char *)v16 + 7);
      *(_BYTE *)(a1 + 175) = v2;
      *(_BYTE *)(a1 + 176) = 1;
      return;
    }
    if (*(char *)(a1 + 175) < 0)
      operator delete(*(void **)(a1 + 152));
    *(_BYTE *)(a1 + 176) = 0;
    goto LABEL_20;
  }
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v7 = operator new(v10 + 1);
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v11 | 0x8000000000000000;
    v14 = v7;
    goto LABEL_14;
  }
  HIBYTE(v15) = v5;
  v7 = &v14;
  if (v5)
LABEL_14:
    memcpy(v7, __s, v6);
  *((_BYTE *)v7 + v6) = 0;
  v8 = v14;
  v16[0] = v15;
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)((char *)&v15 + 7);
  v2 = HIBYTE(v15);
  v9 = *(unsigned __int8 *)(a1 + 176);
  if (v9 != 1)
    goto LABEL_7;
LABEL_16:
  if (v9)
  {
    if (*(char *)(a1 + 175) < 0)
      operator delete(*(void **)(a1 + 152));
    v12 = v16[0];
    *(_QWORD *)(a1 + 152) = v8;
    *(_QWORD *)(a1 + 160) = v12;
    *(_QWORD *)(a1 + 167) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a1 + 175) = v2;
    return;
  }
LABEL_20:
  if (__s && v2 < 0)
    operator delete(v8);
}

void sub_20EA596C0(uint64_t a1, char *__s)
{
  char v2;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (!__s)
  {
    v8 = 0;
    v9 = *(unsigned __int8 *)(a1 + 112);
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_16;
LABEL_7:
    if (!v9)
    {
      v13 = v16[0];
      *(_QWORD *)(a1 + 88) = v8;
      *(_QWORD *)(a1 + 96) = v13;
      *(_QWORD *)(a1 + 103) = *(_QWORD *)((char *)v16 + 7);
      *(_BYTE *)(a1 + 111) = v2;
      *(_BYTE *)(a1 + 112) = 1;
      return;
    }
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
    goto LABEL_20;
  }
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v7 = operator new(v10 + 1);
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v11 | 0x8000000000000000;
    v14 = v7;
    goto LABEL_14;
  }
  HIBYTE(v15) = v5;
  v7 = &v14;
  if (v5)
LABEL_14:
    memcpy(v7, __s, v6);
  *((_BYTE *)v7 + v6) = 0;
  v8 = v14;
  v16[0] = v15;
  *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)((char *)&v15 + 7);
  v2 = HIBYTE(v15);
  v9 = *(unsigned __int8 *)(a1 + 112);
  if (v9 != 1)
    goto LABEL_7;
LABEL_16:
  if (v9)
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    v12 = v16[0];
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 103) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a1 + 111) = v2;
    return;
  }
LABEL_20:
  if (__s && v2 < 0)
    operator delete(v8);
}

uint64_t sub_20EA59888(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;

  v2 = result;
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 144) = 0;
    if (*(_BYTE *)(a2 + 144))
    {
      *(_BYTE *)(result + 72) = 0;
      if (*(_BYTE *)(a2 + 72))
      {
        v3 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
        *(_OWORD *)(result + 48) = v3;
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_BYTE *)(result + 72) = 1;
      }
      *(_BYTE *)(result + 80) = 0;
      *(_BYTE *)(result + 136) = 0;
      if (*(_BYTE *)(a2 + 136))
      {
        v4 = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
        *(_OWORD *)(result + 80) = v4;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
        v5 = *(_OWORD *)(a2 + 112);
        *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 128);
        *(_OWORD *)(result + 112) = v5;
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 112) = 0;
        *(_BYTE *)(result + 136) = 1;
      }
      *(_BYTE *)(result + 144) = 1;
    }
    *(_QWORD *)(result + 160) = 0;
    *(_BYTE *)(result + 152) = 1;
    *(_QWORD *)(result + 168) = 0;
    sub_20EA66578((CFErrorRef *)&v9, result + 32);
    v6 = *(std::__shared_weak_count **)(v2 + 168);
    *(_OWORD *)(v2 + 160) = v9;
    if (!v6)
      return v2;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 168) = 0;
  }
  return result;
}

void sub_20EA59A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E86665C(v2);
  sub_20E8DDADC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA59A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (!*(_BYTE *)(a3 + 16))
    return a1;
  sub_20FCF86E0(a2, a3, &v14);
  v4 = v14;
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = v15;
    v14 = 0;
    v15 = 0;
    v6 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v9 = v15;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v9;
    v14 = 0;
    v15 = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  v10 = v15;
  if (!v15)
    return a1;
  v11 = (unint64_t *)&v15->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_20EA59B6C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  if (*((_BYTE *)v1 + 32))
  {
    sub_20E86665C(v2);
    v4 = *v1;
    *v1 = 0;
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *v1;
    *v1 = 0;
    if (!v4)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA59BB4(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  int v9;
  uint64_t *result;
  _QWORD v11[2];
  char v12;
  uint64_t *v13;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = *a2;
  *a2 = 0;
  v13 = v8;
  LOBYTE(v11[0]) = 0;
  v12 = 0;
  v9 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a3 + 16))
  {
    a2 = *(uint64_t ***)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    v11[0] = &off_24C9BFE70;
    v11[1] = a2;
    v12 = 1;
  }
  sub_20FCF8240(v6, &v13, (uint64_t)v11);
  *a1 = v7;
  if (v9 && a2)
    ((void (*)(uint64_t **))(*a2)[1])(a2);
  result = v13;
  if (v13)
  {
    sub_20FCFD0A8((uint64_t)v13);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA59CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  va_list va;

  va_start(va, a4);
  if (v6)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  sub_20EA5A0BC((uint64_t *)va);
  MEMORY[0x212BC6398](v4, 0xE1C402A73D223);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA59CEC()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t (**v2)();
  _QWORD *v3;

  v2 = &off_24C9BFE70;
  v0 = (_QWORD *)operator new();
  *v0 = &off_24C9BFDA8;
  v0[1] = 128;
  v3 = v0;
  sub_20EA59D8C((uint64_t)&v2);
  result = (uint64_t)v3;
  if (v3)
    return (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  return result;
}

void sub_20EA59D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20EA59D8C(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  char v8;

  v1 = atomic_load((unsigned __int8 *)&qword_254A6D958);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D958))
  {
    v3 = sub_20FCF81A8();
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v6 = &off_24C9BFE70;
    v7 = v4;
    v8 = 1;
    sub_20EA59A5C((uint64_t)&unk_254A6D930, (uint64_t)v3, (uint64_t)&v6);
    if (v8)
    {
      v5 = v7;
      v7 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    __cxa_atexit((void (*)(void *))sub_20EA5AD2C, &unk_254A6D930, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D958);
  }
}

void sub_20EA59E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (a11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
      __cxa_guard_abort(&qword_254A6D958);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_254A6D958);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA59EAC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t *sub_20EA59EE4@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *result;
  uint64_t (**v10)();
  _QWORD *v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = (uint64_t *)operator new();
  v7 = *a2;
  *a2 = 0;
  v14 = 0;
  v15 = v7;
  sub_20FCFC940((uint64_t)v6, &v15, a1, 0, 0, &v14);
  v13 = v6;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  v10 = &off_24C9BFE70;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C9BFC50;
  v11 = v8;
  v12 = 1;
  sub_20EA59BB4((_QWORD *)a3, &v13, (uint64_t)&v10);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (v12 && v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = v13;
  if (v13)
  {
    sub_20FCFD0A8((uint64_t)v13);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA5A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
      sub_20EA5A0BC((uint64_t *)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20EA5A0BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EA5A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  MEMORY[0x212BC6398](v14, 0x10E2C403A98C974);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA5A0BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FCFD0A8(v2);
    MEMORY[0x212BC6398](v3, 0x10E2C403A98C974);
  }
  return a1;
}

uint64_t *sub_20EA5A100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *result;
  uint64_t (**v16)();
  _QWORD *v17;
  char v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  v12 = (uint64_t *)operator new();
  v13 = *a3;
  *a3 = 0;
  v20 = 0;
  v21 = v13;
  sub_20FCFC940((uint64_t)v12, &v21, a2, a4, a5, &v20);
  v19 = v12;
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  v16 = &off_24C9BFE70;
  v14 = (_QWORD *)operator new();
  *v14 = &off_24C9BFC90;
  v14[1] = a1;
  v14[2] = a2;
  v17 = v14;
  v18 = 1;
  sub_20EA59BB4((_QWORD *)a6, &v19, (uint64_t)&v16);
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 32) = 0;
  if (v18 && v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  result = v19;
  if (v19)
  {
    sub_20FCFD0A8((uint64_t)v19);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA5A270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
      sub_20EA5A0BC((uint64_t *)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20EA5A0BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EA5A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  MEMORY[0x212BC6398](v14, 0x10E2C403A98C974);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA5A300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *result;
  uint64_t v18;
  uint64_t (**v19)();
  _QWORD *v20;
  char v21;
  uint64_t *v22;
  _QWORD v23[2];
  _QWORD *v24;
  _QWORD *v25;

  v23[0] = a5;
  v23[1] = a6;
  v14 = (uint64_t *)operator new();
  v15 = *a4;
  *a4 = 0;
  v24 = 0;
  v25 = v15;
  sub_20FCFC940((uint64_t)v14, &v25, a3, a5, a6, &v24);
  v22 = v14;
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  v19 = &off_24C9BFE70;
  v16 = (_QWORD *)operator new();
  v16[2] = a3;
  v16[3] = v23;
  v16[4] = a1;
  *v16 = &off_24C9BFD20;
  v16[1] = a2;
  v20 = v16;
  v21 = 1;
  sub_20EA59BB4((_QWORD *)a7, &v22, (uint64_t)&v19);
  *(_QWORD *)(a7 + 8) = *(_QWORD *)a7;
  *(_BYTE *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 32) = 0;
  if (v21 && v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  result = v22;
  if (v22)
  {
    v18 = sub_20FCFD0A8((uint64_t)v22);
    return (uint64_t *)MEMORY[0x212BC6398](v18, 0x10E2C403A98C974);
  }
  return result;
}

void sub_20EA5A468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    if (a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
      sub_20EA5A0BC((uint64_t *)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20EA5A0BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EA5A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  MEMORY[0x212BC6398](v16, 0x10E2C403A98C974);
  _Unwind_Resume(a1);
}

void sub_20EA5A4F8(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  void **v7;
  void **v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  void **v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;

  v4 = (uint64_t)a2 + 24;
  v5 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 32);
  v46 = *a2;
  v47 = *((_QWORD *)a2 + 2);
  v48 = 1;
  v6 = atomic_load((unsigned __int8 *)&qword_254A6D9D0);
  if ((v6 & 1) == 0)
  {
    v15 = v5;
    v16 = __cxa_guard_acquire(&qword_254A6D9D0);
    v5 = v15;
    if (v16)
    {
      __cxa_atexit((void (*)(void *))nullsub_1020, &off_254A54FD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D9D0);
      v5 = v15;
    }
  }
  sub_20FCFDCB0(v5, (uint64_t)&v46, v4, (uint64_t)&off_254A54FD0, (uint64_t)&v17);
  sub_20EA59888((uint64_t)&v30, (uint64_t)&v17);
  if (v29 && v28)
  {
    if (!v27)
      goto LABEL_7;
    if (v26 < 0)
    {
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_7:
        if (!v22)
          goto LABEL_10;
        goto LABEL_8;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v23);
    if (!v22)
      goto LABEL_10;
LABEL_8:
    if (v21 < 0)
      operator delete(__p);
  }
LABEL_10:
  if (v19)
  {
    v7 = (void **)v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v32)
  {
    *(_OWORD *)a3 = v30;
    *(_QWORD *)(a3 + 16) = v31;
    v31 = 0;
    v30 = 0uLL;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  v10 = v44;
  if (v44)
  {
    *(_OWORD *)(a3 + 32) = v33;
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 144) = 0;
    if (v43)
    {
      *(_BYTE *)(a3 + 72) = 0;
      if (v36)
      {
        *(_OWORD *)(a3 + 48) = v34;
        *(_QWORD *)(a3 + 64) = v35;
        v35 = 0;
        v34 = 0uLL;
        *(_BYTE *)(a3 + 72) = 1;
      }
      *(_BYTE *)(a3 + 80) = 0;
      *(_BYTE *)(a3 + 136) = 0;
      if (v42)
      {
        v11 = v39;
        *(_QWORD *)(a3 + 96) = v38;
        *(_OWORD *)(a3 + 80) = v37;
        v37 = 0uLL;
        *(_QWORD *)(a3 + 104) = v11;
        *(_OWORD *)(a3 + 112) = v40;
        *(_QWORD *)(a3 + 128) = v41;
        v38 = 0;
        v40 = 0uLL;
        v41 = 0;
        *(_BYTE *)(a3 + 136) = 1;
      }
      *(_BYTE *)(a3 + 144) = 1;
    }
    *(_BYTE *)(a3 + 152) = 1;
    *(_OWORD *)(a3 + 160) = v45;
    v45 = 0uLL;
    *(_BYTE *)(a3 + 176) = 1;
    if (v10 && v43)
    {
      if (v42)
      {
        if (SHIBYTE(v41) < 0)
          operator delete((void *)v40);
        if (SHIBYTE(v38) < 0)
          operator delete((void *)v37);
      }
      if (v36 && SHIBYTE(v35) < 0)
        operator delete((void *)v34);
    }
  }
  else
  {
    *(_OWORD *)(a3 + 160) = v45;
    v45 = 0uLL;
    *(_BYTE *)(a3 + 176) = 1;
  }
  if (v32)
  {
    v12 = v30;
    if ((_QWORD)v30)
    {
      v13 = *((_QWORD *)&v30 + 1);
      v14 = (void *)v30;
      if (*((_QWORD *)&v30 + 1) != (_QWORD)v30)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0)
            operator delete(*(void **)(v13 - 24));
          v13 -= 24;
        }
        while (v13 != v12);
        v14 = (void *)v30;
      }
      *((_QWORD *)&v30 + 1) = v12;
      operator delete(v14);
    }
  }
}

void sub_20EA5A844(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE v20[16];
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  sub_20E8DDADC((uint64_t)v20);
  if (a2 != 1)
    _Unwind_Resume(a1);
  v7 = __cxa_begin_catch(a1);
  v8 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
  sub_20E8610C0(&v12, v8);
  if (SHIBYTE(v13) < 0)
  {
    sub_20E860C04(&v14, (void *)v12, *((unint64_t *)&v12 + 1));
  }
  else
  {
    v14 = v12;
    v15 = v13;
  }
  v16 = 1;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20EA5B348((uint64_t)v20, 3u, &v14);
  v3[10] = *v3;
  *(_BYTE *)(v4 - 240) = 0;
  *(_BYTE *)(v4 - 144) = 0;
  if (v32)
  {
    *(_BYTE *)(v4 - 216) = 0;
    if (v23)
    {
      *(_OWORD *)(v4 - 240) = v21;
      *(_QWORD *)(v4 - 224) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(v4 - 216) = 1;
    }
    *(_BYTE *)(v4 - 208) = 0;
    *(_BYTE *)(v4 - 152) = 0;
    if (v31)
    {
      v9 = v4 - 208;
      v10 = v27;
      *(_QWORD *)(v9 + 16) = v26;
      *(_OWORD *)v9 = v3[3];
      v24 = 0;
      v25 = 0;
      v3[15] = v3[5];
      v11 = v30;
      *(_QWORD *)(v4 - 184) = v10;
      *(_QWORD *)(v4 - 160) = v11;
      v26 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      *(_BYTE *)(v4 - 152) = 1;
    }
    *(_BYTE *)(v4 - 144) = 1;
  }
  sub_20EA5AA0C(v2, v4 - 256);
  sub_20E89EF58(v4 - 256);
  sub_20E89EF58((uint64_t)v20);
  sub_20E89F09C((uint64_t)&v14);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  __cxa_end_catch();
}

uint64_t sub_20EA5AA0C(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 176) = 0;
  return result;
}

void sub_20EA5AABC(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  void *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (void *)v4;
  v6 = (_QWORD *)(v3 + 8);
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v5;
    v11 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  v7 = __dst;
  if (v4)
LABEL_8:
    memcpy(v7, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v7) = 0;
  sub_20EA5C6C8((uint64_t)__dst, v6);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EA5ABA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA5ABC4(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A8478(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20EA5ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5ACD4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA5AD1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t *sub_20EA5AD2C(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)a1 + 32))
  {
    v2 = (std::__shared_weak_count *)a1[3];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_20EA5ADA8()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA5ADBC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 120) = 1;
}

void sub_20EA5ADCC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA5ADE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::mutex *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;

  sub_20FD2EA88(*a3);
  v14 = 0;
  v7 = *(std::string **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (std::__shared_weak_count *)operator new(0x58uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFCD0;
  sub_20EA5AFA8((uint64_t)&v9[1], v7, &v14, v8);
  v15 = &v9[1].__vftable;
  v16 = v9;
  v10 = *(std::mutex **)a2;
  std::mutex::lock(*(std::mutex **)a2);
  v19 = (uint64_t *)&v17;
  v17 = &v9[1].__vftable;
  v18 = &v15;
  sub_20FCF7C04((uint64_t *)(a2 + 8), (uint64_t *)&v17, (uint64_t)&unk_2102DB95C, &v19, &v18);
  std::mutex::unlock(v10);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_BYTE *)(a4 + 120) = 1;
}

void sub_20EA5AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::mutex *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  std::mutex::unlock(v11);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA5AF50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFCD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA5AF60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFCD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5AF90(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_20EA5AFA8(uint64_t a1, std::string *a2, char *a3, uint64_t a4)
{
  std::string::size_type v7;
  std::string::size_type size;
  char v9;
  _BYTE *v10;
  unsigned __int8 v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v7 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v7 = size;
  }
  sub_20E8A9678(&__p, a2, (std::string *)((char *)a2 + v7));
  v9 = *a3;
  *(_QWORD *)a1 = off_24CA05C88;
  v10 = (_BYTE *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *(_BYTE *)(a1 + 32) = v9;
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20EA5B0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA5B0E8()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA5B0FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  _QWORD *v14;
  std::mutex *v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  std::string __p;
  _QWORD *v21;
  std::string *p_p;
  uint64_t *v23;

  sub_20FD2EA88(*a3);
  v8 = *(_QWORD *)(a1 + 8);
  memset(&__p, 0, sizeof(__p));
  v9 = *(_BYTE *)(v8 + 23);
  if (v9 >= 0)
    v10 = (std::string *)v8;
  else
    v10 = *(std::string **)v8;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v8 + 23);
  else
    v11 = *(_QWORD *)(v8 + 8);
  sub_20E8A9678(&__p, v10, (std::string *)((char *)v10 + v11));
  sub_20FD2EBE8(*a3, (uint64_t)&__p, *(_QWORD *)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *(std::string **)(a1 + 32);
  v19 = 0;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = operator new(0x58uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_24C9BFCD0;
  sub_20EA5AFA8((uint64_t)(v14 + 3), v12, &v19, v13);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v14 + 3);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  v15 = *(std::mutex **)a2;
  std::mutex::lock(*(std::mutex **)a2);
  v23 = (uint64_t *)&v21;
  v21 = v14 + 3;
  p_p = &__p;
  sub_20FCF7C04((uint64_t *)(a2 + 8), (uint64_t *)&v21, (uint64_t)&unk_2102DB95C, &v23, (_QWORD **)&p_p);
  std::mutex::unlock(v15);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA5B270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  std::mutex *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::mutex::unlock(v17);
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (!*(_BYTE *)(v16 + 120) && *(_BYTE *)(v16 + 112))
  {
    if (*(_BYTE *)(v16 + 104))
    {
      if (*(char *)(v16 + 103) < 0)
        operator delete(*(void **)(v16 + 80));
      if (*(char *)(v16 + 71) < 0)
        operator delete(*(void **)(v16 + 48));
    }
    if (*(_BYTE *)(v16 + 40))
    {
      if (*(char *)(v16 + 39) < 0)
        operator delete(*(void **)(v16 + 16));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA5B348(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_254A6D9D8);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_254A6D9D8);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A55038, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6D9D8);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20E89EFE4(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_254A55038;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_20EA5B4F4(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  void *__p[2];
  unsigned __int8 v7;
  uint64_t v8;
  std::string v9;
  std::string v10;

  v8 = *a1;
  sub_20E9F681C(&v8);
  std::string::push_back(&v9, 32);
  v10 = v9;
  memset(&v9, 0, sizeof(v9));
  sub_210237BC0(1, 1000000000, __p);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v10, (const std::string::value_type *)v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v9.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_20EA5B5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v22 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v22 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v22 - 48));
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_20EA5B668()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA5B67C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  std::string *v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned __int8 v22;
  std::mutex *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  const void *v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  uint64_t v32;
  __int128 __p;
  __int16 v34;
  void *v35[2];
  char v36;
  std::string v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  std::string __dst;
  char *v51;
  std::string *v52;
  uint64_t *v53;

  v10 = atomic_load((unsigned __int8 *)&qword_254A5ACC8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ACC8))
  {
    qword_254A5ACC0 = (uint64_t)CV3DDiagnosticsRunOptionsGetDefaultServerPath_0();
    __cxa_guard_release(&qword_254A5ACC8);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254A5ACD0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ACD0))
  {
    v27 = (const void *)qword_254A5ACC0;
    v28 = strlen((const char *)qword_254A5ACC0);
    if (v28 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v29 = v28;
    if (v28 >= 0x17)
    {
      v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v31 = v28 | 7;
      v32 = v31 + 1;
      p_dst = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v29;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
      p_dst = &__dst;
      if (!v28)
        goto LABEL_43;
    }
    memmove(p_dst, v27, v29);
LABEL_43:
    p_dst->__r_.__value_.__s.__data_[v29] = 0;
    sub_210236E50(&__dst, "diagnostics_", 12, "diagnostics_export_", 0x13uLL, 0, 0, (uint64_t)&qword_254A5ACD8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5ACD8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ACD0);
  }
  v36 = 7;
  strcpy((char *)v35, "Default");
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&__p = 0x6D25203A5425;
  v34 = 262;
  sub_20EA5C440((uint64_t)&v37, (__int128 *)v35, v12, 0, 0, &__p);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24CA06AA8;
  if (*(_BYTE *)(a3 + 240))
  {
    sub_20FD2D580(a3);
    *(_BYTE *)(a3 + 240) = 0;
  }
  *(_QWORD *)a3 = off_24C9BFEC0;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0uLL;
  v13 = v39;
  *(_QWORD *)(a3 + 24) = v38;
  *(_QWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 40) = v40;
  *(_QWORD *)(a3 + 56) = v41;
  v38 = 0;
  v40 = 0uLL;
  v14 = v42;
  v41 = 0;
  *(_QWORD *)&v42 = 0;
  *(_OWORD *)(a3 + 64) = v14;
  v15 = v43;
  *((_QWORD *)&v42 + 1) = 0;
  v43 = 0;
  *(_QWORD *)(a3 + 80) = v15;
  v16 = atomic_load(&v44);
  *(_BYTE *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 88) = v16;
  *(_OWORD *)(a3 + 96) = v45;
  v17 = v46;
  v46 = 0;
  *(_QWORD *)(a3 + 112) = v17;
  *(_BYTE *)(a3 + 144) = 0;
  if (v49)
  {
    *(_OWORD *)(a3 + 120) = v47;
    *(_QWORD *)(a3 + 136) = v48;
    v48 = 0;
    v47 = 0uLL;
    *(_BYTE *)(a3 + 144) = 1;
  }
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 168) = 1;
  *(_BYTE *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 200) = 0;
  *(_BYTE *)(a3 + 208) = 0;
  *(_BYTE *)(a3 + 232) = 0;
  *(_QWORD *)a3 = &off_24CA06AA8;
  *(_BYTE *)(a3 + 240) = 1;
  sub_20FD2D580((uint64_t)&v37);
  if (HIBYTE(v34) && (char)v34 < 0)
    operator delete((void *)__p);
  if (v36 < 0)
    operator delete(v35[0]);
  v18 = (char *)operator new(0x58uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24C9BFCD0;
  memset(&v37, 0, sizeof(v37));
  if (byte_254A5ACEF >= 0)
    v19 = (std::string *)&qword_254A5ACD8;
  else
    v19 = (std::string *)qword_254A5ACD8;
  if (byte_254A5ACEF >= 0)
    v20 = byte_254A5ACEF;
  else
    v20 = unk_254A5ACE0;
  sub_20E8A9678(&v37, v19, (std::string *)((char *)v19 + v20));
  *((_QWORD *)v18 + 3) = off_24CA05C88;
  v21 = v18 + 32;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(v21, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *((_QWORD *)v18 + 6) = *((_QWORD *)&v37.__r_.__value_.__l + 2);
  }
  v18[56] = 0;
  v22 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  *((_QWORD *)v18 + 9) = 0;
  *((_QWORD *)v18 + 10) = 0;
  *((_QWORD *)v18 + 8) = &off_254A5A4B8;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 24);
  v37.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  v23 = *(std::mutex **)a2;
  std::mutex::lock(*(std::mutex **)a2);
  v53 = (uint64_t *)&v51;
  v51 = v18 + 24;
  v52 = &v37;
  sub_20FCF7C04((uint64_t *)(a2 + 8), (uint64_t *)&v51, (uint64_t)&unk_2102DB95C, &v53, (_QWORD **)&v52);
  std::mutex::unlock(v23);
  size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
  if (v37.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  sub_20FD2EA88(*a4);
  *(_BYTE *)(a5 + 120) = 1;
}

void sub_20EA5BB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  __cxa_guard_abort(&qword_254A5ACD0);
  _Unwind_Resume(a1);
}

void sub_20EA5BB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_20EA5BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 && a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA5BC14(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20EA5BC1C(uint64_t a1)
{
  std::mutex *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 104))
    return *(_QWORD *)(a1 + 80);
  v3 = *(std::mutex **)(a1 + 112);
  std::mutex::lock(v3);
  v4 = *(_QWORD *)(a1 + 80);
  std::mutex::unlock(v3);
  return v4;
}

void **sub_20EA5BC70(uint64_t a1)
{
  int v2;
  std::mutex *v4;
  void **v5;
  int v6;
  std::mutex *v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  void *v14;
  void *__p[2];
  uint64_t v17;

  v2 = *(unsigned __int8 *)(a1 + 104);
  if (*(_BYTE *)(a1 + 104))
  {
    while (atomic_load((unint64_t *)(a1 + 88)))
      sched_yield();
    v4 = 0;
    v5 = (void **)(a1 + 176);
    if (!*(_BYTE *)(a1 + 200))
      goto LABEL_8;
  }
  else
  {
    v4 = *(std::mutex **)(a1 + 112);
    std::mutex::lock(v4);
    v5 = (void **)(a1 + 176);
    if (!*(_BYTE *)(a1 + 200))
    {
LABEL_8:
      if (!v2)
        std::mutex::unlock(v4);
      *(_BYTE *)(a1 + 168) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
      v6 = *(unsigned __int8 *)(a1 + 104);
      if (*(_BYTE *)(a1 + 104))
      {
        while (atomic_load((unint64_t *)(a1 + 88)))
          sched_yield();
        v8 = 0;
      }
      else
      {
        v8 = *(std::mutex **)(a1 + 112);
        std::mutex::lock(v8);
      }
      if (*(_BYTE *)(a1 + 200))
      {
        v9 = (void **)*v5;
        if (*v5)
        {
          v10 = *(void ***)(a1 + 184);
          v11 = *v5;
          if (v10 != v9)
          {
            do
            {
              if (*((char *)v10 - 1) < 0)
                operator delete(*(v10 - 3));
              v10 -= 4;
            }
            while (v10 != v9);
            v11 = *v5;
          }
          *(_QWORD *)(a1 + 184) = v9;
          operator delete(v11);
        }
      }
      *(_OWORD *)(a1 + 176) = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 192) = v17;
      __p[1] = 0;
      v17 = 0;
      __p[0] = 0;
      *(_BYTE *)(a1 + 200) = 1;
      if (!v6)
      {
        std::mutex::unlock(v8);
        v12 = (void **)__p[0];
        if (__p[0])
        {
          v13 = (void **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              if (*((char *)v13 - 1) < 0)
                operator delete(*(v13 - 3));
              v13 -= 4;
            }
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
        }
      }
      return v5;
    }
  }
  if (*(_BYTE *)(a1 + 168))
    goto LABEL_8;
  if (!v2)
    std::mutex::unlock(v4);
  return v5;
}

void sub_20EA5BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20EA5C150(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20EA5BE3C(_BOOL8 result, unint64_t a2)
{
  unint64_t *v3;
  unint64_t v5;

  v3 = (unint64_t *)(result + 88);
  if (atomic_load((unint64_t *)(result + 88)))
  {
    v5 = atomic_load(v3);
    if (v5 != a2)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 348, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)&unk_21024E91A, 0, (void (*)(void **))sub_21023DDB0);
      if (result)
        abort();
    }
  }
  atomic_store(a2, v3);
  return result;
}

BOOL sub_20EA5BEAC(_BOOL8 result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v4;

  v2 = (unint64_t *)(result + 88);
  if (atomic_load((unint64_t *)(result + 88)))
  {
    v4 = atomic_load(v2);
    if (v4 != a2)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Storage.h", 358, (uint64_t)"!active_channel_ || (active_channel_ == channel)", 48, (uint64_t)&unk_21024E91A, 0, (void (*)(void **))sub_21023DDB0);
      if (result)
        abort();
    }
  }
  atomic_store(0, v2);
  return result;
}

BOOL sub_20EA5BF18(uint64_t a1)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)(a1 + 88));
  return v1 != 0;
}

void sub_20EA5BF2C(uint64_t a1, uint64_t *a2)
{
  int v4;
  std::mutex *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v4 = *(unsigned __int8 *)(a1 + 104);
  if (*(_BYTE *)(a1 + 104))
  {
    while (atomic_load((unint64_t *)(a1 + 88)))
      sched_yield();
    v6 = 0;
  }
  else
  {
    v6 = *(std::mutex **)(a1 + 112);
    std::mutex::lock(v6);
  }
  sub_20EA5C1C0(a1 + 120, a2, &v14);
  v7 = v14;
  if (v14)
  {
    v8 = (_QWORD *)operator new();
    v9 = v14;
    *v8 = &off_24C9BFF50;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
    v14 = 0;
    v10 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v7;
    *(_QWORD *)(a1 + 160) = v8;
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
    v10 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    if (!v10)
      goto LABEL_14;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_14:
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    sub_20FD0D068(v13, 0);
    MEMORY[0x212BC6398](v13, 0x20C4093837F09);
  }
  if (!v4)
    std::mutex::unlock(v6);
}

void sub_20EA5C084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  int v3;
  va_list va;

  va_start(va, a2);
  sub_20EA5C30C((uint64_t **)va);
  if (!v3)
    std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20EA5C0B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  std::mutex *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(unsigned __int8 *)(a1 + 104);
  if (!*(_BYTE *)(a1 + 104))
  {
    v6 = *(std::mutex **)(a1 + 112);
    std::mutex::lock(v6);
    v7 = *(_QWORD *)(a1 + 160);
    *a2 = *(_QWORD *)(a1 + 152);
    a2[1] = v7;
    if (!v7)
      goto LABEL_9;
LABEL_7:
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    goto LABEL_9;
  }
  while (atomic_load((unint64_t *)(a1 + 88)))
    sched_yield();
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 160);
  *a2 = *(_QWORD *)(a1 + 152);
  a2[1] = v7;
  if (v7)
    goto LABEL_7;
LABEL_9:
  if (!v4)
    std::mutex::unlock(v6);
}

void **sub_20EA5C150(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20EA5C1C0(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];
  void *__p[2];
  uint64_t v15;
  char v16;

  v6 = (_QWORD *)operator new();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v15 = *(_QWORD *)(a1 + 16);
  }
  v16 = 1;
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v13[0] = v7;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_20FD0C34C(v6, (char *)__p, v13);
  *a3 = v6;
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v16)
  {
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
}

void sub_20EA5C2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x212BC6398](v17, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t **sub_20EA5C30C(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20FD0D068(v2, 0);
    MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_20EA5C360(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA5C384(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
  {
    sub_20FD0D068(*(uint64_t **)(result + 24), 0);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EA5C3D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3dgn9FormatterEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn9FormatterEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3dgn9FormatterEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3dgn9FormatterEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA5C440(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  __int128 v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;

  *(_QWORD *)a1 = off_24C9BFEC0;
  v10 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v10;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a3)
  {
    if (a3 >> 61)
      sub_20E867F44();
    v12 = 8 * a3;
    v13 = (char *)operator new(8 * a3);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 56) = &v13[8 * a3];
    bzero(v13, 8 * a3);
    *(_QWORD *)(a1 + 48) = &v13[v12];
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = a5;
  if (!(_BYTE)a5)
  {
    v17 = operator new();
    *(_QWORD *)v17 = 850045863;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_QWORD *)(v17 + 56) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v14 = a1 + 120;
    *(_QWORD *)(a1 + 112) = v17;
    *(_BYTE *)(a1 + 144) = 0;
    if (!*((_BYTE *)a6 + 24))
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 120) = 0;
  v14 = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*((_BYTE *)a6 + 24))
  {
LABEL_6:
    v15 = *a6;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a6 + 2);
    *(_OWORD *)v14 = v15;
    *((_QWORD *)a6 + 1) = 0;
    *((_QWORD *)a6 + 2) = 0;
    *(_QWORD *)a6 = 0;
    *(_BYTE *)(a1 + 144) = 1;
  }
LABEL_7:
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  return a1;
}

void sub_20EA5C5C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_20EA5C654(v2);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA5C654(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EA5C6C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = a2[1];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/include/Kit/Diagnostics/Input.h", 75, (uint64_t)"diagnostics_clock_", 18, (uint64_t)&unk_21024E91A, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = a2[1];
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = operator new();
  *(_QWORD *)v6 = off_24C9BFDE8;
  *(_QWORD *)(v6 + 8) = v5;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v6;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 16))(a2, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20EA5C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20EA5C7E4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA5C7E4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    MEMORY[0x212BC6398](v2, 0x1093C401FB1DE5ELL);
  }
  return a1;
}

uint64_t sub_20EA5C838(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void sub_20EA5C878(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA5C8B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void *sub_20EA5C8C4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v24 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = a1 + 16;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  result = sub_20E86A980((_QWORD *)(v4 + 16), v9, v10);
  v12 = *(_DWORD *)(v4 + 120);
  if ((v12 & 0x10) != 0)
  {
    v14 = *(_QWORD *)(v4 + 112);
    v15 = *(_QWORD *)(v4 + 72);
    if (v14 < v15)
    {
      *(_QWORD *)(v4 + 112) = v15;
      v14 = v15;
    }
    v16 = *(const void **)(v4 + 64);
    v17 = v14 - (_QWORD)v16;
    if (v14 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      a2[23] = 0;
      *a2 = 0;
      v13 = v4;
      if (!v4)
        return result;
LABEL_17:
      v18 = MEMORY[0x24BEDB7F0];
      v19 = *MEMORY[0x24BEDB7F0];
      *(_QWORD *)v13 = *MEMORY[0x24BEDB7F0];
      v20 = *(_QWORD *)(v18 + 72);
      *(_QWORD *)(v13 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
      *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v13 + 16) = v20;
      if (*(char *)(v13 + 111) < 0)
        operator delete(*(void **)(v13 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v13 + 128);
      JUMPOUT(0x212BC6398);
    }
    v16 = *(const void **)(v4 + 40);
    v17 = *(_QWORD *)(v4 + 56) - (_QWORD)v16;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_20E860B7C();
  }
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
  }
  else
  {
    a2[23] = v17;
    if (!v17)
    {
      *a2 = 0;
      v13 = v24;
      if (v24)
        goto LABEL_17;
      return result;
    }
  }
  result = memmove(a2, v16, v17);
  a2[v17] = 0;
  v13 = v24;
  if (v24)
    goto LABEL_17;
  return result;
}

void sub_20EA5CAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EA5CAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20EA5CB0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50070);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50070))
    return &xmmword_254A50058;
  xmmword_254A50058 = *(_OWORD *)"std::string";
  qword_254A50068 = 0xB00000000000000;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50058, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50070);
  return &xmmword_254A50058;
}

void sub_20EA5CB94(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::string::size_type v16;
  std::string *p_dst;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string __dst;
  uint64_t v47;
  _QWORD *v48;

  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = operator new();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_OWORD *)(v8 + 240) = 0u;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_QWORD *)(v8 + 272) = 0;
    sub_20E863438(v8);
    v48 = (_QWORD *)v8;
    v11 = *(_QWORD *)(a1 + 16);
    v10 = a1 + 16;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    sub_20E86A980((_QWORD *)(v8 + 16), v13, v14);
    v15 = *(_DWORD *)(v8 + 120);
    if ((v15 & 0x10) != 0)
    {
      v28 = *(_QWORD *)(v8 + 112);
      v29 = *(_QWORD *)(v8 + 72);
      if (v28 < v29)
      {
        *(_QWORD *)(v8 + 112) = v29;
        v28 = v29;
      }
      v30 = *(const void **)(v8 + 64);
      v16 = v28 - (_QWORD)v30;
      if (v28 - (unint64_t)v30 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_42;
    }
    else
    {
      if ((v15 & 8) == 0)
      {
        v16 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_30;
      }
      v30 = *(const void **)(v8 + 40);
      v16 = *(_QWORD *)(v8 + 56) - (_QWORD)v30;
      if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_42:
        sub_20E860B7C();
    }
    if (v16 >= 0x17)
    {
      v31 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v31 = v16 | 7;
      v32 = v31 + 1;
      p_dst = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v16;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (!v16)
        goto LABEL_30;
    }
    memmove(p_dst, v30, v16);
LABEL_30:
    p_dst->__r_.__value_.__s.__data_[v16] = 0;
    v33 = v48;
    if (v48)
    {
      v34 = MEMORY[0x24BEDB7F0];
      v35 = *MEMORY[0x24BEDB7F0];
      *v48 = *MEMORY[0x24BEDB7F0];
      v36 = *(_QWORD *)(v34 + 72);
      *(_QWORD *)((char *)v33 + *(_QWORD *)(v35 - 24)) = *(_QWORD *)(v34 + 64);
      v33[3] = MEMORY[0x24BEDB848] + 16;
      v33[2] = v36;
      if (*((char *)v33 + 111) < 0)
        operator delete((void *)v33[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v33 + 16);
      MEMORY[0x212BC6398](v33, 0x10B2C40EED050F3);
    }
    sub_20FD0C480(a2, v7, (uint64_t)&__dst, a4);
    goto LABEL_52;
  }
  v47 = *(_QWORD *)(a1 + 8);
  v18 = operator new();
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_QWORD *)(v18 + 272) = 0;
  sub_20E863438(v18);
  v48 = (_QWORD *)v18;
  v21 = *(_QWORD *)(a1 + 16);
  v20 = a1 + 16;
  v19 = v21;
  v22 = *(char *)(v20 + 23);
  if (v22 >= 0)
    v23 = v20;
  else
    v23 = v19;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(v20 + 23);
  else
    v24 = *(_QWORD *)(v20 + 8);
  sub_20E86A980((_QWORD *)(v18 + 16), v23, v24);
  v25 = *(_DWORD *)(v18 + 120);
  if ((v25 & 0x10) != 0)
  {
    v37 = *(_QWORD *)(v18 + 112);
    v38 = *(_QWORD *)(v18 + 72);
    if (v37 < v38)
    {
      *(_QWORD *)(v18 + 112) = v38;
      v37 = v38;
    }
    v39 = *(const void **)(v18 + 64);
    v26 = v37 - (_QWORD)v39;
    if (v37 - (unint64_t)v39 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_56;
  }
  else
  {
    if ((v25 & 8) == 0)
    {
      v26 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      v27 = &__dst;
      goto LABEL_47;
    }
    v39 = *(const void **)(v18 + 40);
    v26 = *(_QWORD *)(v18 + 56) - (_QWORD)v39;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
LABEL_56:
      sub_20E860B7C();
  }
  if (v26 >= 0x17)
  {
    v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v40 = v26 | 7;
    v41 = v40 + 1;
    v27 = (std::string *)operator new(v40 + 1);
    __dst.__r_.__value_.__l.__size_ = v26;
    __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
    v27 = &__dst;
    if (!v26)
      goto LABEL_47;
  }
  memmove(v27, v39, v26);
LABEL_47:
  v27->__r_.__value_.__s.__data_[v26] = 0;
  v42 = v48;
  if (v48)
  {
    v43 = MEMORY[0x24BEDB7F0];
    v44 = *MEMORY[0x24BEDB7F0];
    *v48 = *MEMORY[0x24BEDB7F0];
    v45 = *(_QWORD *)(v43 + 72);
    *(_QWORD *)((char *)v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
    v42[3] = MEMORY[0x24BEDB848] + 16;
    v42[2] = v45;
    if (*((char *)v42 + 111) < 0)
      operator delete((void *)v42[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v42 + 16);
    MEMORY[0x212BC6398](v42, 0x10B2C40EED050F3);
  }
  sub_20EA5D03C(&v47, (std::string *)": ", &__dst);
LABEL_52:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20EA5CFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA5CFF0()
{
  JUMPOUT(0x20EA5CFF8);
}

void sub_20EA5D014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EA5D028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA5D03C(uint64_t *a1, std::string *a2, std::string *a3)
{
  uint64_t result;
  _BYTE v6[24];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _BYTE *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  std::to_string(&v8, *a1);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  v9 = &v10;
  ((void (*)(std::string ***, _BYTE *))sub_20E877EA0)(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = a2;
  v12 = v6;
  v13 = a2;
  v14 = a2;
  if (v7 == -1)
    sub_20E877AB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _BYTE *))off_24C9BFE30[v7])(&v8, v6);
  v10 = (std::string *)v6;
  v11 = a3;
  v12 = v6;
  v13 = a3;
  v14 = a3;
  if (v7 == -1)
    sub_20E877AB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _BYTE *))off_24C9BFE48[v7])(&v8, v6);
  if (v7 == -1)
    sub_20E877AB8();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24C9BFD80[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24C9BFD68[v7])(&v10, v6);
  return result;
}

void sub_20EA5D1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA5D1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA5D1D0);
}

_DWORD *sub_20EA5D204(_DWORD ***a1)
{
  return sub_20EA5D220(**a1, (char *)(*a1)[1]);
}

void sub_20EA5D210(uint64_t a1, uint64_t a2)
{
  sub_20EA5D310((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EA5D220(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9BFD68[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA5D310(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9BFD68[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA5D4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA5D508(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA5D600((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA5D5F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA5D600(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA5D7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA5D810(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA5DA18(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFA0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5D8EC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5D904(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5D918(uint64_t a1@<X8>)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 bundleURL;
  void *__p[2];
  char v8;
  char v9;

  sub_20E9E322C((uint64_t)__p);
  if (v9)
  {
    sub_20EA686D8(&bundleURL, (uint64_t)__p, 1u);
    v2 = (std::__shared_weak_count_vtbl *)CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFURLRef)bundleURL);
    sub_20EA5D810((std::__shared_weak_count_vtbl **)a1, v2, 0);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&bundleURL + 1);
    if (*((_QWORD *)&bundleURL + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&bundleURL + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v9)
    {
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_20EA5D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA5DA18(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9BFFA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA5DA78(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5DA90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5DAA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5DACC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA5DAEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA5DB5C(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5DC34(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5DC4C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5DC60(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5DD38(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5DD50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5DD64(unsigned __int8 *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5DE3C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5DE54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5DE68(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5DF40(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5DF58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5DF6C(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5E044(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E05C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5E070(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5E148(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E160(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5E174(void *valuePtr@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5E234(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E24C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5E260(void *valuePtr@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberDoubleType, valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EA5E320(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E338(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

const __CFNumber *sub_20EA5E34C(const __CFNumber *result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  uint64_t valuePtr;

  if (result)
  {
    v1 = result;
    TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(v1) == TypeID)
    {
      valuePtr = 0;
      CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20EA5E3C8(_BYTE *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl **v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD270];
  if (!*a1)
    v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD268];
  v4 = *v3;
  v5 = (std::__shared_weak_count *)operator new();
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0040;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_20EA5E48C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E4A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5E4B8(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0050;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_20EA5E598(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5E5B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFIndex sub_20EA5E5C4@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  CFIndex v5;
  CFIndex v6;
  std::string *v7;
  std::string v8;
  CFIndex usedBufLen;
  CFRange v10;
  CFRange v11;

  if (!result)
    goto LABEL_9;
  v3 = (const __CFString *)result;
  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(v3);
  if (result != TypeID)
    goto LABEL_9;
  result = CFStringGetLength(v3);
  if (result)
  {
    v5 = result;
    usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v8;
        else
          v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = 0;
        v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_20EA5E704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t sub_20EA5E720@<X0>(size_t result@<X0>, uint64_t a2@<X8>)
{
  const __CFData *v3;
  CFTypeID TypeID;
  void *v5;
  const UInt8 *BytePtr;
  __int128 v7;
  size_t __n;

  if (result
    && (v3 = (const __CFData *)result, TypeID = CFDataGetTypeID(), result = CFGetTypeID(v3), result == TypeID)
    && (result = CFDataGetLength(v3), (result & 0x8000000000000000) == 0))
  {
    __n = result;
    sub_20EA5E95C(&__n, &v7);
    v5 = *(void **)v7;
    BytePtr = CFDataGetBytePtr(v3);
    result = (size_t)memcpy(v5, BytePtr, __n);
    *(_OWORD *)a2 = v7;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20EA5E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5E7F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5E814(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA5E834(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA5E8A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5E8CC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA5E8EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA5E95C(size_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  char *v6;
  char *v7;

  v4 = operator new(0x30uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = &unk_24C9B0508;
  v4[1] = 0;
  v5 = *a1;
  v4[4] = 0;
  v4[5] = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v6 = (char *)operator new(v5);
    v4[3] = v6;
    v7 = &v6[v5];
    v4[5] = &v6[v5];
    bzero(v6, v5);
    v4[4] = v7;
  }
  *a2 = v4 + 3;
  a2[1] = v4;
}

void sub_20EA5E9F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA5EA1C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E9350E4(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1848;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5EAF8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5EB10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA5EB24(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA5EC2C(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0090;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5EC00(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5EC18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA5EC2C(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9C0090;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA5EC8C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5ECA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5ECBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA5ECE0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA5ED00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFDateEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDateEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFDateEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFDateEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_20EA5ED70(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E8E2770(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFBA0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5EE4C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5EE64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5EE78(const UInt8 *a1@<X0>, CFIndex a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *Default;
  CFDataRef v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFDataRef v12;
  std::__shared_weak_count *v13;

  Default = CFAllocatorGetDefault();
  v7 = CFDataCreate(Default, a1, a2);
  v12 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFBA0;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v13 = v8;
  sub_20EA5EF88((uint64_t)&v12, a3);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA5EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5EF5C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5EF74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5EF88(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *(const void **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20E8E2770(&v16, v3);
  v7 = v17;
  *a2 = v16;
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20EA5F074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5F088(const UInt8 *a1@<X0>, CFIndex a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *Default;
  CFDataRef v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFDataRef v12;
  std::__shared_weak_count *v13;

  Default = CFAllocatorGetDefault();
  v7 = CFDataCreateWithBytesNoCopy(Default, a1, a2, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFBA0;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v13 = v8;
  sub_20EA5EF88((uint64_t)&v12, a3);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA5F164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA5F178(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5F190(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA5F1A4(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA5F2AC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFB50;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5F280(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5F298(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA5F2AC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9AFB50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA5F30C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5F324(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5F338(void **a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t *a4@<X3>, const __CFAllocator *a5@<X4>, const CFDictionaryKeyCallBacks *a6@<X5>, const CFDictionaryValueCallBacks *a7@<X6>, void ***a8@<X8>)
{
  void **v14;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  std::__shared_weak_count_vtbl *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **values;
  void **v31;
  void **v32;
  uint64_t v33;
  void ***p_values;

  v14 = a1;
  if (a1 != a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/DictionaryRef.cpp", 99, (uint64_t)"keys.size() == values.size()", 28, (uint64_t)"Number of keys must match number of values", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  values = 0;
  v31 = 0;
  v32 = 0;
  if (v14)
  {
    if ((unint64_t)v14 >> 61)
      sub_20E867F44();
    values = (void **)operator new(8 * (_QWORD)v14);
    v31 = values;
    v32 = &values[(_QWORD)v14];
    p_values = &values;
    v16 = 16 * (_QWORD)v14;
    do
    {
      v33 = *a2;
      sub_20EA61104((void ***)&p_values, &v33);
      a2 += 2;
      v16 -= 16;
    }
    while (v16);
    v17 = values;
    v14 = v31;
    values = 0;
    v31 = 0;
    v32 = 0;
    if (a3)
      goto LABEL_8;
LABEL_13:
    v19 = 0;
    goto LABEL_14;
  }
  v17 = 0;
  values = 0;
  v31 = 0;
  v32 = 0;
  if (!a3)
    goto LABEL_13;
LABEL_8:
  if ((unint64_t)a3 >> 61)
    sub_20E867F44();
  values = (void **)operator new(8 * (_QWORD)a3);
  v31 = values;
  v32 = &values[(_QWORD)a3];
  p_values = &values;
  v18 = 16 * (_QWORD)a3;
  do
  {
    v33 = *a4;
    sub_20EA61104((void ***)&p_values, &v33);
    a4 += 2;
    v18 -= 16;
  }
  while (v18);
  v19 = values;
LABEL_14:
  v20 = (std::__shared_weak_count_vtbl *)CFDictionaryCreate(a5, (const void **)v17, (const void **)v19, v14 - v17, a6, a7);
  sub_20EA5F6A0((std::__shared_weak_count_vtbl **)&values, v20, 0);
  v21 = values;
  v22 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v23 = (unint64_t *)(v31 + 1);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *a8 = v21;
    a8[1] = (void **)&v22->__vftable;
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 - 1, v23));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    *a8 = values;
    a8[1] = 0;
  }
  v27 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v28 = (unint64_t *)(v31 + 1);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v19)
    operator delete(v19);
  if (v17)
    operator delete(v17);
}

void sub_20EA5F594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void ***sub_20EA5F5E8(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          v6 = (std::__shared_weak_count *)*(v3 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v5 = v3 - 5;
          if (*((char *)v3 - 17) < 0)
            break;
          v3 -= 5;
          if (v5 == v2)
            goto LABEL_12;
        }
        operator delete(*v5);
        v3 -= 5;
      }
      while (v5 != v2);
LABEL_12:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_20EA5F6A0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E9DA754(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA5F77C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA5F794(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA5F7A8(uint64_t a1, void **a2, unsigned __int8 a3, void **a4, unsigned __int8 a5)
{
  std::__shared_weak_count *v10;
  CFDictionaryRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **p_p;
  std::__shared_weak_count *v19;
  CFDictionaryRef v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t Count;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void **v29;
  unint64_t v30;
  const void **v31;
  unint64_t v32;
  CFTypeRef *v33;
  CFTypeRef *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  void *v41;
  char *v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  CFTypeRef *v48;
  CFTypeRef *v49;
  CFTypeRef *v50;
  unint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __n128 v56;
  void *v57;
  char *v58;
  char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __n128 v64;
  __n128 v65;
  void *__p;
  CFTypeRef *v67;
  uint64_t v68;
  void *v69;
  CFTypeRef *v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  __int128 v74;

  v11 = *(CFDictionaryRef *)a1;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v10)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11)
      return;
  }
  else
  {
LABEL_6:
    if (!v11)
      return;
  }
  v69 = 0;
  v70 = 0;
  v71 = 0;
  __p = 0;
  v67 = 0;
  v15 = a3;
  v68 = 0;
  if (a3)
    v16 = &v69;
  else
    v16 = 0;
  v17 = a5;
  if (a5)
    p_p = &__p;
  else
    p_p = 0;
  v20 = *(CFDictionaryRef *)a1;
  v19 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v19)
    goto LABEL_18;
  v21 = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v20)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v20)
    {
LABEL_19:
      Count = *(_QWORD *)a1;
      v24 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v24)
        goto LABEL_24;
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (!Count)
          goto LABEL_26;
      }
      else
      {
LABEL_24:
        if (!Count)
        {
LABEL_26:
          if (v15)
          {
            v29 = (const void **)*v16;
            v30 = ((_BYTE *)v16[1] - (_BYTE *)*v16) >> 3;
            if (Count <= v30)
            {
              if (Count < v30)
                v16[1] = &v29[Count];
            }
            else
            {
              sub_20EA6462C(v16, Count - v30);
              v29 = (const void **)*v16;
            }
          }
          else
          {
            v29 = 0;
          }
          if (v17)
          {
            v31 = (const void **)*p_p;
            v32 = ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3;
            if (Count <= v32)
            {
              if (Count < v32)
                p_p[1] = &v31[Count];
            }
            else
            {
              sub_20EA6462C(p_p, Count - v32);
              v31 = (const void **)*p_p;
            }
          }
          else
          {
            v31 = 0;
          }
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, v29, v31);
          goto LABEL_43;
        }
      }
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
      goto LABEL_26;
    }
  }
LABEL_43:
  if (v15)
  {
    v73 = 0;
    v72 = 0uLL;
    sub_20EA647CC((uint64_t)&v72, ((char *)v70 - (_BYTE *)v69) >> 3);
    v33 = (CFTypeRef *)v69;
    v34 = v70;
    if (v69 != v70)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20E8A9534(&v74, *v33);
            v35 = v72.n128_u64[1];
            if (v72.n128_u64[1] >= v73)
              break;
            *(_OWORD *)v72.n128_u64[1] = v74;
            v72.n128_u64[1] = v35 + 16;
            if (++v33 == v34)
              goto LABEL_55;
          }
          v36 = sub_20EA648C4((char **)&v72, (uint64_t)&v74);
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
          v72.n128_u64[1] = (unint64_t)v36;
          if (*((_QWORD *)&v74 + 1))
          {
            v38 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
              break;
          }
          if (++v33 == v34)
            goto LABEL_55;
        }
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        ++v33;
      }
      while (v33 != v34);
    }
LABEL_55:
    v40 = v72;
    v41 = (void *)v73;
    v42 = (char *)*a2;
    if (*a2)
    {
      v64 = v72;
      v43 = (char *)a2[1];
      v44 = *a2;
      if (v43 != v42)
      {
        do
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v45->__on_zero_shared)(v45, v40);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v43 -= 16;
        }
        while (v43 != v42);
        v44 = *a2;
      }
      a2[1] = v42;
      operator delete(v44);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v40 = v64;
    }
    *(__n128 *)a2 = v40;
    a2[2] = v41;
  }
  v48 = (CFTypeRef *)__p;
  if (v17)
  {
    v73 = 0;
    v72 = 0uLL;
    sub_20EA647CC((uint64_t)&v72, ((char *)v67 - (_BYTE *)__p) >> 3);
    v49 = (CFTypeRef *)__p;
    v50 = v67;
    if (__p != v67)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20E8A9534(&v74, *v49);
            v51 = v72.n128_u64[1];
            if (v72.n128_u64[1] >= v73)
              break;
            *(_OWORD *)v72.n128_u64[1] = v74;
            v72.n128_u64[1] = v51 + 16;
            if (++v49 == v50)
              goto LABEL_79;
          }
          v52 = sub_20EA648C4((char **)&v72, (uint64_t)&v74);
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
          v72.n128_u64[1] = (unint64_t)v52;
          if (*((_QWORD *)&v74 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
              break;
          }
          if (++v49 == v50)
            goto LABEL_79;
        }
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        ++v49;
      }
      while (v49 != v50);
    }
LABEL_79:
    v56 = v72;
    v57 = (void *)v73;
    v58 = (char *)*a4;
    if (*a4)
    {
      v65 = v72;
      v59 = (char *)a4[1];
      v60 = *a4;
      if (v59 != v58)
      {
        do
        {
          v61 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, v56);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v59 -= 16;
        }
        while (v59 != v58);
        v60 = *a4;
      }
      a4[1] = v58;
      operator delete(v60);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v56 = v65;
    }
    *(__n128 *)a4 = v56;
    a4[2] = v57;
    v48 = (CFTypeRef *)__p;
  }
  if (v48)
  {
    v67 = v48;
    operator delete(v48);
  }
  if (v69)
  {
    v70 = (CFTypeRef *)v69;
    operator delete(v69);
  }
}

void sub_20EA5FC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v23;

  sub_20E8C3144(&a17);
  if (__p)
  {
    operator delete(__p);
    v23 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v23 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA5FD38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20EA5FDE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  v2 = **(_QWORD **)(a1 + 24) + 24 * *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    v4 = *(_BYTE *)(v2 + 23);
    if (*(char *)(v3 + 23) < 0)
    {
      if (v4 >= 0)
        v6 = (void *)v2;
      else
        v6 = *(void **)v2;
      if (v4 >= 0)
        v7 = *(unsigned __int8 *)(v2 + 23);
      else
        v7 = *(_QWORD *)(v2 + 8);
      sub_20E867CBC((void **)v3, v6, v7);
    }
    else if ((*(_BYTE *)(v2 + 23) & 0x80) != 0)
    {
      sub_20E867BF8((_QWORD *)v3, *(void **)v2, *(_QWORD *)(v2 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
      *(_OWORD *)v3 = v5;
    }
  }
  v8 = *(_QWORD *)(a1 + 40);
  sub_20EA6144C(&v17, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16 * *(_QWORD *)(a1 + 8));
  v9 = v17;
  v17 = 0uLL;
  v10 = *(std::__shared_weak_count **)(v8 + 32);
  *(_OWORD *)(v8 + 24) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
        goto LABEL_18;
      return *(_QWORD *)(a1 + 40);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (!*((_QWORD *)&v17 + 1))
    return *(_QWORD *)(a1 + 40);
LABEL_18:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return *(_QWORD *)(a1 + 40);
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return *(_QWORD *)(a1 + 40);
}

void sub_20EA5FF38(uint64_t a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  CFAllocatorRef *v11;
  CFMutableDictionaryRef MutableCopy;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_16:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  if (!v7)
    goto LABEL_16;
LABEL_7:
  if (*(_BYTE *)(a2 + 8))
    v11 = (CFAllocatorRef *)a2;
  else
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  MutableCopy = CFDictionaryCreateMutableCopy(*v11, 0, *(CFDictionaryRef *)a1);
  v13 = (std::__shared_weak_count *)operator new();
  v14 = v13;
  v13->__shared_owners_ = 0;
  v15 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B1848;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)MutableCopy;
  *a3 = MutableCopy;
  a3[1] = (CFMutableDictionaryRef)v13;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_20EA60080(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA60098(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EA600AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char *v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t *v16;

  v15[0] = a2;
  v15[1] = a3;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_20EA5F7A8(a1, 0, 0, &__p, 1u);
  v3 = (char *)__p;
  v4 = v13;
  if (__p == v13)
  {
    v5 = 1;
    if (!__p)
      return v5;
    goto LABEL_10;
  }
  v5 = 1;
  while (1)
  {
    v16 = v15;
    if (!sub_20EA649F8(&v16, (uint64_t)v3, v15))
      break;
    v3 += 16;
    if (v3 == v4)
      goto LABEL_9;
  }
  v5 = 0;
LABEL_9:
  v3 = (char *)__p;
  if (__p)
  {
LABEL_10:
    v6 = v13;
    v7 = v3;
    if (v13 != v3)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v3);
      v7 = __p;
    }
    v13 = v3;
    operator delete(v7);
  }
  return v5;
}

void sub_20EA601D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8C3144(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA601E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8C3144(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA601F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  CFIndex *v18;
  CFIndex *v19;
  __n128 v20;
  __n128 *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  CFIndex *v29;
  CFIndex *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  void *v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  CFDictionaryRef v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  CFIndex Count;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  __n128 v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  _BYTE v143[24];
  __int128 v144;
  __int128 v145;
  void *v146;
  unint64_t *v147;
  void *__p;
  CFIndex *v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  __n128 v158;
  unint64_t v159;

  *(_QWORD *)v143 = a1;
  *(_OWORD *)&v143[8] = 0u;
  v144 = 0u;
  v145 = 0u;
  if (!a1)
    goto LABEL_164;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_35;
  }
  else
  {
LABEL_7:
    if (!v5)
    {
LABEL_35:
      *(_QWORD *)v143 = 0;
      goto LABEL_164;
    }
  }
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)a1))
    goto LABEL_35;
  v9 = (char *)operator new(0x48uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9C0130;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  *(_QWORD *)&v144 = v9 + 24;
  *((_QWORD *)&v144 + 1) = v9;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)operator new(0x40uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C9C00E0;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  *(_QWORD *)&v145 = v13 + 24;
  *((_QWORD *)&v145 + 1) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  sub_20EA5F7A8(a1, (void **)&v153, 1u, &v150, 1u);
  v17 = v153;
  if (v153 != v154)
  {
    sub_20EA61278(&__p, (uint64_t)&v153);
    v157 = 0;
    v156 = 0uLL;
    sub_20E9099B8((uint64_t)&v156, ((char *)v149 - (_BYTE *)__p) >> 4);
    v18 = (CFIndex *)__p;
    v19 = v149;
    if (__p != v149)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_20EA5E5C4(*v18, (std::string *)&v139);
            v158 = v139;
            v159 = v140;
            v21 = (__n128 *)*((_QWORD *)&v156 + 1);
            if (*((_QWORD *)&v156 + 1) >= v157)
              break;
            v20 = v158;
            *(_QWORD *)(*((_QWORD *)&v156 + 1) + 16) = v159;
            *v21 = v20;
            *((_QWORD *)&v156 + 1) = (char *)v21 + 24;
            v18 += 2;
            if (v18 == v19)
              goto LABEL_28;
          }
          *((_QWORD *)&v156 + 1) = sub_20E8780F0((void **)&v156, (uint64_t)&v158);
          if (SHIBYTE(v159) < 0)
            break;
          v18 += 2;
          if (v18 == v19)
            goto LABEL_28;
        }
        operator delete((void *)v158.n128_u64[0]);
        v18 += 2;
      }
      while (v18 != v19);
    }
LABEL_28:
    v22 = v156;
    v23 = v157;
    v24 = v144;
    v25 = *(_QWORD *)v144;
    if (*(_QWORD *)v144)
    {
      v137 = v156;
      v26 = *(_QWORD *)(v144 + 8);
      v27 = *(void **)v144;
      if (v26 != v25)
      {
        do
        {
          if (*(char *)(v26 - 1) < 0)
            operator delete(*(void **)(v26 - 24));
          v26 -= 24;
        }
        while (v26 != v25);
        v27 = *(void **)v24;
      }
      *(_QWORD *)(v24 + 8) = v25;
      operator delete(v27);
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      v22 = v137;
    }
    *(_OWORD *)v24 = v22;
    *(_QWORD *)(v24 + 16) = v23;
    v29 = (CFIndex *)__p;
    if (__p)
    {
      v30 = v149;
      v31 = __p;
      if (v149 != __p)
      {
        do
        {
          v32 = (std::__shared_weak_count *)*(v30 - 1);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v30 -= 2;
        }
        while (v30 != v29);
        v31 = __p;
      }
      v149 = v29;
      operator delete(v31);
    }
    sub_20EA61278(&v146, (uint64_t)&v150);
    *(_QWORD *)&v140 = 0;
    v139 = 0uLL;
    sub_20EA647CC((uint64_t)&v139, ((char *)v147 - (_BYTE *)v146) >> 4);
    v35 = (unint64_t *)v146;
    v36 = v147;
    if (v146 != v147)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v37 = *v35;
            v38 = v35[1];
            v158.n128_u64[0] = *v35;
            v158.n128_u64[1] = v38;
            if (v38)
            {
              v39 = (unint64_t *)(v38 + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v41 = v139.n128_u64[1];
            if (v139.n128_u64[1] >= (unint64_t)v140)
              break;
            *(_QWORD *)v139.n128_u64[1] = v37;
            *(_QWORD *)(v41 + 8) = v158.n128_u64[1];
            v139.n128_u64[1] = v41 + 16;
            v35 += 2;
            if (v35 == v36)
              goto LABEL_65;
          }
          v42 = sub_20EA648C4((char **)&v139, (uint64_t)&v158);
          v43 = (std::__shared_weak_count *)v158.n128_u64[1];
          v139.n128_u64[1] = (unint64_t)v42;
          if (v158.n128_u64[1])
          {
            v44 = (unint64_t *)(v158.n128_u64[1] + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
              break;
          }
          v35 += 2;
          if (v35 == v36)
            goto LABEL_65;
        }
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
        v35 += 2;
      }
      while (v35 != v36);
    }
LABEL_65:
    v46 = v139;
    v47 = v140;
    v48 = v144;
    v49 = v144 + 24;
    v50 = *(_QWORD *)(v144 + 24);
    if (v50)
    {
      v138 = v139;
      v51 = *(_QWORD *)(v144 + 32);
      v52 = *(void **)(v144 + 24);
      if (v51 != v50)
      {
        do
        {
          v53 = *(std::__shared_weak_count **)(v51 - 8);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v46);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v51 -= 16;
        }
        while (v51 != v50);
        v52 = *(void **)v49;
      }
      *(_QWORD *)(v48 + 32) = v50;
      operator delete(v52);
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      v46 = v138;
    }
    *(__n128 *)(v48 + 24) = v46;
    *(_QWORD *)(v48 + 40) = v47;
    v56 = (unint64_t *)v146;
    if (v146)
    {
      v57 = v147;
      v58 = v146;
      if (v147 != v146)
      {
        do
        {
          v59 = (std::__shared_weak_count *)*(v57 - 1);
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v57 -= 2;
        }
        while (v57 != v56);
        v58 = v146;
      }
      v147 = v56;
      operator delete(v58);
    }
    v17 = v153;
    *(_QWORD *)&v143[16] = (v154 - v153) >> 4;
    v28 = (char *)v150;
    if (!v150)
      goto LABEL_98;
    goto LABEL_88;
  }
  *(_QWORD *)v143 = 0;
  v28 = (char *)v150;
  if (v150)
  {
LABEL_88:
    v62 = v151;
    v63 = v28;
    if (v151 != v28)
    {
      do
      {
        v64 = (std::__shared_weak_count *)*((_QWORD *)v62 - 1);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v62 -= 16;
      }
      while (v62 != v28);
      v63 = v150;
    }
    v151 = v28;
    operator delete(v63);
    v17 = v153;
  }
LABEL_98:
  if (v17)
  {
    v67 = v154;
    v68 = v17;
    if (v154 != v17)
    {
      do
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 16;
      }
      while (v67 != v17);
      v68 = v153;
    }
    v154 = v17;
    operator delete(v68);
  }
  if (!*(_QWORD *)v143)
    goto LABEL_164;
  v72 = *(_QWORD *)v144;
  v73 = *(_QWORD *)(v144 + 8);
  v74 = *(_QWORD *)(v144 + 24);
  v75 = *(_QWORD *)(v144 + 32);
  v159 = 0;
  v158 = 0uLL;
  if (v72 == v73)
  {
    v77 = 0;
    v81 = 0;
  }
  else
  {
    if ((unint64_t)(0x5555555555555555 * ((v72 - v73) >> 3)) >= 0x666666666666667)
      sub_20E867F44();
    v158.n128_u64[0] = (unint64_t)operator new(0x5555555555555548 * ((v72 - v73) >> 3));
    v158.n128_u64[1] = v158.n128_u64[0];
    v159 = v158.n128_u64[0] + 0x5555555555555548 * ((v72 - v73) >> 3);
    *(_QWORD *)&v156 = v158.n128_u64[0];
    v153 = (char *)v158.n128_u64[0];
    v139.n128_u64[0] = (unint64_t)&v159;
    v139.n128_u64[1] = (unint64_t)&v153;
    *(_QWORD *)&v140 = &v156;
    BYTE8(v140) = 0;
    v76 = v72 + 24;
    v77 = v158.n128_u64[0];
    while (1)
    {
      if (*(char *)(v76 - 1) < 0)
      {
        sub_20E860C04((_BYTE *)v77, *(void **)(v76 - 24), *(_QWORD *)(v76 - 16));
      }
      else
      {
        v78 = *(_OWORD *)(v76 - 24);
        *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 - 8);
        *(_OWORD *)v77 = v78;
      }
      sub_20EA6144C((_QWORD *)(v77 + 24), v74);
      v74 += 16;
      v77 = v156 + 40;
      *(_QWORD *)&v156 = v156 + 40;
      v79 = v76 + 24;
      v80 = v76 == v73;
      v76 += 24;
      if (v80)
      {
        v76 = v79;
        if (v74 == v75)
          break;
      }
    }
    v81 = v158.n128_u64[0];
    v158.n128_u64[1] = v77;
  }
  v82 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - v81) >> 3));
  if (v77 == v81)
    v83 = 0;
  else
    v83 = v82;
  sub_20EA6155C(v81, (const void **)v77, v83, 1);
  v85 = (void **)v158.n128_u64[1];
  v84 = (void **)v158.n128_u64[0];
  if (v158.n128_u64[0] == v158.n128_u64[1])
    goto LABEL_151;
  v86 = 0;
  do
  {
    v87 = *(_QWORD *)v144 + 24 * v86;
    if ((void **)v87 != v84)
    {
      v88 = *((_BYTE *)v84 + 23);
      if (*(char *)(v87 + 23) < 0)
      {
        if (v88 >= 0)
          v90 = v84;
        else
          v90 = *v84;
        if (v88 >= 0)
          v91 = *((unsigned __int8 *)v84 + 23);
        else
          v91 = (size_t)v84[1];
        sub_20E867CBC((void **)v87, v90, v91);
      }
      else if ((*((_BYTE *)v84 + 23) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)v87, *v84, (size_t)v84[1]);
      }
      else
      {
        v89 = *(_OWORD *)v84;
        *(_QWORD *)(v87 + 16) = v84[2];
        *(_OWORD *)v87 = v89;
      }
    }
    v92 = *(_QWORD *)(v144 + 24);
    sub_20EA6144C(&v139, (uint64_t)(v84 + 3));
    v93 = v92 + 16 * v86;
    v94 = v139;
    v139 = 0uLL;
    v95 = *(std::__shared_weak_count **)(v93 + 8);
    *(__n128 *)v93 = v94;
    if (!v95)
      goto LABEL_143;
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    else
    {
LABEL_143:
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_126:
    v84 += 5;
    ++v86;
  }
  while (v84 != v85);
  v84 = (void **)v158.n128_u64[0];
LABEL_151:
  if (v84)
  {
    v101 = v158.n128_i64[1];
    v102 = v84;
    if ((void **)v158.n128_u64[1] != v84)
    {
      do
      {
        while (1)
        {
          v104 = *(std::__shared_weak_count **)(v101 - 8);
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v103 = (void **)(v101 - 40);
          if (*(char *)(v101 - 17) < 0)
            break;
          v101 -= 40;
          if (v103 == v84)
            goto LABEL_162;
        }
        operator delete(*v103);
        v101 -= 40;
      }
      while (v103 != v84);
LABEL_162:
      v102 = (void **)v158.n128_u64[0];
    }
    v158.n128_u64[1] = (unint64_t)v84;
    operator delete(v102);
  }
LABEL_164:
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v139 = 0u;
  v108 = *(CFDictionaryRef *)a1;
  v107 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v107)
    goto LABEL_169;
  v109 = (unint64_t *)&v107->__shared_owners_;
  do
    v110 = __ldxr(v109);
  while (__stxr(v110 + 1, v109));
  do
    v111 = __ldaxr(v109);
  while (__stlxr(v111 - 1, v109));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    if (!v108)
      goto LABEL_173;
LABEL_170:
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
    {
LABEL_174:
      v118 = (unint64_t *)(v117 + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
  }
  else
  {
LABEL_169:
    if (v108)
      goto LABEL_170;
LABEL_173:
    Count = 0;
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
      goto LABEL_174;
  }
  v120 = *((_QWORD *)&v141 + 1);
  v121 = v142;
  if (v142)
  {
    v122 = (unint64_t *)&v142->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = v114 + Count;
  *(_OWORD *)a2 = *(_OWORD *)v143;
  if (v124 >= v115 || v124 <= -1)
    v113 = 0;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v143[16];
  *(_OWORD *)(a2 + 24) = v144;
  v144 = 0uLL;
  *(_OWORD *)(a2 + 40) = v145;
  v145 = 0uLL;
  *(_QWORD *)(a2 + 56) = v113;
  *(_QWORD *)(a2 + 64) = v124;
  *(_QWORD *)(a2 + 72) = v115;
  *(_QWORD *)(a2 + 80) = v116;
  *(_QWORD *)(a2 + 88) = v117;
  *(_QWORD *)(a2 + 96) = v120;
  *(_QWORD *)(a2 + 104) = v121;
  if (v121)
  {
    v126 = (unint64_t *)&v121->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v128 = (std::__shared_weak_count *)v141;
  if ((_QWORD)v141)
  {
    v129 = (unint64_t *)(v141 + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_20EA60D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20EA5F5E8((void ***)(v31 - 112));
  sub_20EA5FD38((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_20EA61064(uint64_t a1, void *key)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      return CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key) != 0;
  }
  else
  {
LABEL_6:
    if (v5)
      return CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key) != 0;
  }
  return 0;
}

void ***sub_20EA61104(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

_QWORD *sub_20EA61278(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20EA61320(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA6139C(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ****)(a1 + 8);
    v2 = *(void ****)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        while (1)
        {
          v7 = (std::__shared_weak_count *)*(v4 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v6 = v4 - 5;
          if (*((char *)v4 - 17) < 0)
            break;
          v4 -= 5;
          if (v6 == v5)
            return a1;
        }
        operator delete(*v6);
        v4 -= 5;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

_QWORD *sub_20EA6144C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20EA61548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA6155C(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  const void *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  void *v35;
  unint64_t v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  const void **k;
  int v45;
  const void *v46;
  size_t v47;
  size_t v48;
  int v49;
  BOOL v50;
  int v51;
  const void *v52;
  size_t v53;
  size_t v54;
  int v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void **v68;
  void *v69;
  unint64_t v70;
  int v71;
  const void *v72;
  void *v73;
  size_t v74;
  int v75;
  int v76;
  const void *v77;
  void *v78;
  size_t v79;
  int v80;
  void **v81;
  __int128 v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  __int128 v96;
  void **v97;
  void *v98;
  size_t v99;
  const void **v100;
  const void *v101;
  const void **v102;
  size_t v103;
  size_t v104;
  int v105;
  int v106;
  const void *v107;
  size_t v108;
  size_t v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  const void *v114;
  size_t v115;
  size_t v116;
  int v117;
  BOOL v118;
  const void **j;
  const void **v120;
  const void **v121;
  size_t v122;
  int v123;
  BOOL v124;
  void **v125;
  __int128 v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void **v150;
  void *v151;
  unint64_t v152;
  int v153;
  const void *v154;
  void *v155;
  size_t v156;
  int v157;
  int v158;
  const void **v159;
  void *v160;
  size_t v161;
  int v162;
  const void **v163;
  int v164;
  const void **v165;
  size_t v166;
  int v167;
  const void *v168;
  size_t v169;
  size_t v170;
  int v171;
  const void **v172;
  const void *v173;
  uint64_t v174;
  const void **v175;
  int v176;
  const void *v177;
  size_t v178;
  int v179;
  const void *v180;
  size_t v181;
  size_t v182;
  int v183;
  BOOL v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void **v193;
  void *v194;
  int v195;
  const void *v196;
  size_t v197;
  size_t v198;
  int v199;
  BOOL v200;
  __int128 v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  int64_t v209;
  int64_t v210;
  int64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  const void *v216;
  size_t v217;
  int v218;
  const void *v219;
  size_t v220;
  size_t v221;
  int v222;
  int64_t v223;
  BOOL v224;
  const void **v225;
  int v226;
  const void *v227;
  size_t v228;
  int v229;
  const void *v230;
  size_t v231;
  size_t v232;
  int v233;
  BOOL v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  const void *v239;
  size_t v240;
  void **v241;
  void *v242;
  size_t v243;
  int v244;
  __int128 v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  const void *v253;
  size_t v254;
  int v255;
  const void *v256;
  size_t v257;
  size_t v258;
  int v259;
  BOOL v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  int64_t v269;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  const void *v278;
  size_t v279;
  int v280;
  const void *v281;
  size_t v282;
  size_t v283;
  int v284;
  __int128 v285;
  _QWORD *v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  BOOL v291;
  void **v292;
  int v293;
  __int128 v294;
  __int128 v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  const void **v299;
  const void *v300;
  const void **v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  int v308;
  const void *v309;
  size_t v310;
  int v311;
  const void *v312;
  size_t v313;
  size_t v314;
  int v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  BOOL v320;
  __int128 v321;
  unint64_t v322;
  __int128 v323;
  __int128 v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  int v328;
  const void *v329;
  size_t v330;
  void **v331;
  void *v332;
  size_t v333;
  int v334;
  BOOL v335;
  __int128 v336;
  __int128 v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  const void *v344;
  const void **v345;
  int v346;
  const void *v347;
  size_t v348;
  int v349;
  const void *v350;
  size_t v351;
  size_t v352;
  int v353;
  BOOL v354;
  __int128 v355;
  uint64_t v356;
  void **v357;
  void *v358;
  int v359;
  const void **v360;
  void *v361;
  size_t v362;
  int v363;
  const void **v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  BOOL v369;
  __int128 v370;
  __int128 v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  std::__shared_weak_count *v383;
  unint64_t *p_shared_owners;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  const void **v389;
  const void **v390;
  const void *v392;
  const void **v393;
  const void *v394;
  int64_t v396;
  const void *v397;
  const void **v398;
  const void **v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  char v404;
  __int128 v405;
  void *__p[2];
  const void *v407;
  __int128 v408;
  __int128 v409;
  const void *v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v393 = a2 - 5;
  v389 = a2 - 15;
  v390 = a2 - 10;
  i = a1;
  v398 = a2;
  while (2)
  {
    a1 = i;
    v7 = (uint64_t)a2 - i;
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v163 = a2 - 5;
        v164 = *((char *)a2 - 17);
        if (v164 >= 0)
          v165 = a2 - 5;
        else
          v165 = (const void **)*(a2 - 5);
        if (v164 >= 0)
          v166 = *((unsigned __int8 *)a2 - 17);
        else
          v166 = (size_t)*(a2 - 4);
        v167 = *(char *)(a1 + 23);
        if (v167 >= 0)
          v168 = (const void *)a1;
        else
          v168 = *(const void **)a1;
        if (v167 >= 0)
          v169 = *(unsigned __int8 *)(a1 + 23);
        else
          v169 = *(_QWORD *)(a1 + 8);
        if (v169 >= v166)
          v170 = v166;
        else
          v170 = v169;
        v171 = memcmp(v165, v168, v170);
        if (v171)
        {
          v172 = v398;
          if ((v171 & 0x80000000) == 0)
            return;
        }
        else if (v166 == v169)
        {
          v172 = v398;
          if ((unint64_t)*(v398 - 2) >= *(_QWORD *)(a1 + 24))
            return;
        }
        else
        {
          v172 = v398;
          if (v166 >= v169)
            return;
        }
        v378 = *(_OWORD *)a1;
        v407 = *(const void **)(a1 + 16);
        *(_OWORD *)__p = v378;
        v379 = *(_OWORD *)v163;
        *(_QWORD *)(a1 + 16) = v163[2];
        *(_OWORD *)a1 = v379;
        v380 = *(_OWORD *)__p;
        v163[2] = v407;
        *(_OWORD *)v163 = v380;
        v381 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v382 = *((_OWORD *)v172 - 1);
        *(v172 - 2) = 0;
        *(v172 - 1) = 0;
        v383 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v382;
        if (v383)
        {
          p_shared_owners = (unint64_t *)&v383->__shared_owners_;
          do
            v385 = __ldaxr(p_shared_owners);
          while (__stlxr(v385 - 1, p_shared_owners));
          if (!v385)
          {
            v405 = v381;
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
            v381 = v405;
          }
        }
        v386 = (std::__shared_weak_count *)*(v398 - 1);
        *((_OWORD *)v398 - 1) = v381;
        if (v386)
        {
          v387 = (unint64_t *)&v386->__shared_owners_;
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        return;
      case 3uLL:
        sub_20EA6329C((const void **)a1, (const void **)(a1 + 40), v393);
        return;
      case 4uLL:
        sub_20EA63CA8((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), v393);
        return;
      case 5uLL:
        sub_20EA64038(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), v393);
        return;
      default:
        if (v7 <= 959)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return;
            v173 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == a2)
              return;
            v174 = a1;
            while (1)
            {
              v175 = (const void **)v174;
              v174 = (uint64_t)v173;
              v176 = *((char *)v175 + 63);
              if (v176 >= 0)
                v177 = v173;
              else
                v177 = v175[5];
              if (v176 >= 0)
                v178 = *((unsigned __int8 *)v175 + 63);
              else
                v178 = (size_t)v175[6];
              v179 = *((char *)v175 + 23);
              if (v179 >= 0)
                v180 = v175;
              else
                v180 = *v175;
              if (v179 >= 0)
                v181 = *((unsigned __int8 *)v175 + 23);
              else
                v181 = (size_t)v175[1];
              if (v181 >= v178)
                v182 = v178;
              else
                v182 = v181;
              v183 = memcmp(v177, v180, v182);
              if (v183)
              {
                if ((v183 & 0x80000000) == 0)
                  goto LABEL_366;
              }
              else
              {
                v184 = v178 >= v181;
                if (v178 == v181)
                  v184 = v175[8] >= v175[3];
                if (v184)
                  goto LABEL_366;
              }
              v185 = *(_OWORD *)v174;
              v407 = *(const void **)(v174 + 16);
              *(_OWORD *)__p = v185;
              *(_QWORD *)(v174 + 8) = 0;
              *(_QWORD *)(v174 + 16) = 0;
              *(_QWORD *)v174 = 0;
              v408 = *((_OWORD *)v175 + 4);
              v175[8] = 0;
              v175[9] = 0;
              v186 = v174;
              while (1)
              {
                v187 = (uint64_t)v175;
                if (*(char *)(v186 + 23) < 0)
                  operator delete(*(void **)v186);
                *(_OWORD *)v186 = *(_OWORD *)v175;
                *(_QWORD *)(v186 + 16) = v175[2];
                *((_BYTE *)v175 + 23) = 0;
                *(_BYTE *)v175 = 0;
                v188 = v175 + 3;
                v189 = *(_OWORD *)(v175 + 3);
                v175[4] = 0;
                v175[3] = 0;
                v190 = *(std::__shared_weak_count **)(v186 + 32);
                *(_OWORD *)(v186 + 24) = v189;
                if (v190)
                {
                  v191 = (unint64_t *)&v190->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                }
                if (v187 == a1)
                  break;
                v175 = (const void **)(v187 - 40);
                if (SHIBYTE(v407) >= 0)
                  v193 = __p;
                else
                  v193 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v194 = (void *)HIBYTE(v407);
                else
                  v194 = __p[1];
                v195 = *(char *)(v187 - 17);
                if (v195 >= 0)
                  v196 = (const void *)(v187 - 40);
                else
                  v196 = *(const void **)(v187 - 40);
                if (v195 >= 0)
                  v197 = *(unsigned __int8 *)(v187 - 17);
                else
                  v197 = *(_QWORD *)(v187 - 32);
                if (v197 >= (unint64_t)v194)
                  v198 = (size_t)v194;
                else
                  v198 = v197;
                v199 = memcmp(v193, v196, v198);
                if (v199)
                {
                  v186 = v187;
                  if ((v199 & 0x80000000) == 0)
                    goto LABEL_421;
                }
                else
                {
                  v200 = (unint64_t)v194 >= v197;
                  if (v194 == (void *)v197)
                  {
                    v186 = v187;
                    if ((unint64_t)v408 >= *(_QWORD *)(v187 - 16))
                      goto LABEL_421;
                  }
                  else
                  {
                    v186 = v187;
                    if (v200)
                      goto LABEL_421;
                  }
                }
              }
              v187 = a1;
LABEL_421:
              if (*(char *)(v187 + 23) < 0)
                operator delete(*(void **)v187);
              v201 = *(_OWORD *)__p;
              *(_QWORD *)(v187 + 16) = v407;
              *(_OWORD *)v187 = v201;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v202 = v408;
              v408 = 0uLL;
              *v188 = v202;
              v203 = *(std::__shared_weak_count **)(v187 + 32);
              *(_QWORD *)(v187 + 32) = *((_QWORD *)&v202 + 1);
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              v206 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v207 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
LABEL_366:
              v173 = (const void *)(v174 + 40);
              if ((const void **)(v174 + 40) == v398)
                return;
            }
          }
          if ((const void **)a1 == a2)
            return;
          v344 = (const void *)(a1 + 40);
          if ((const void **)(a1 + 40) == a2)
            return;
          while (1)
          {
            v345 = (const void **)a1;
            a1 = (uint64_t)v344;
            v346 = *((char *)v345 + 63);
            if (v346 >= 0)
              v347 = v344;
            else
              v347 = v345[5];
            if (v346 >= 0)
              v348 = *((unsigned __int8 *)v345 + 63);
            else
              v348 = (size_t)v345[6];
            v349 = *((char *)v345 + 23);
            if (v349 >= 0)
              v350 = v345;
            else
              v350 = *v345;
            if (v349 >= 0)
              v351 = *((unsigned __int8 *)v345 + 23);
            else
              v351 = (size_t)v345[1];
            if (v351 >= v348)
              v352 = v348;
            else
              v352 = v351;
            v353 = memcmp(v347, v350, v352);
            if (v353)
            {
              if ((v353 & 0x80000000) == 0)
                goto LABEL_688;
            }
            else
            {
              v354 = v348 >= v351;
              if (v348 == v351)
                v354 = v345[8] >= v345[3];
              if (v354)
                goto LABEL_688;
            }
            v355 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v355;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v408 = *((_OWORD *)v345 + 4);
            v345[8] = 0;
            v345[9] = 0;
            v356 = a1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v364 = v345;
                  if (*(char *)(v356 + 23) < 0)
                    operator delete(*(void **)v356);
                  *(_OWORD *)v356 = *(_OWORD *)v345;
                  *(_QWORD *)(v356 + 16) = v345[2];
                  *((_BYTE *)v345 + 23) = 0;
                  *(_BYTE *)v345 = 0;
                  v365 = *(_OWORD *)(v345 + 3);
                  v345[3] = 0;
                  v345[4] = 0;
                  v366 = *(std::__shared_weak_count **)(v356 + 32);
                  *(_OWORD *)(v356 + 24) = v365;
                  if (v366)
                  {
                    v367 = (unint64_t *)&v366->__shared_owners_;
                    do
                      v368 = __ldaxr(v367);
                    while (__stlxr(v368 - 1, v367));
                    if (!v368)
                    {
                      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                      std::__shared_weak_count::__release_weak(v366);
                    }
                  }
                  v345 = v364 - 5;
                  v357 = SHIBYTE(v407) >= 0 ? __p : (void **)__p[0];
                  v358 = SHIBYTE(v407) >= 0 ? (void *)HIBYTE(v407) : __p[1];
                  v359 = *((char *)v364 - 17);
                  v360 = v359 >= 0 ? v364 - 5 : (const void **)*(v364 - 5);
                  v361 = v359 >= 0 ? (void *)*((unsigned __int8 *)v364 - 17) : (void *)*(v364 - 4);
                  v362 = (size_t)(v361 >= v358 ? v358 : v361);
                  v363 = memcmp(v357, v360, v362);
                  if (!v363)
                    break;
                  v356 = (uint64_t)v364;
                  if ((v363 & 0x80000000) == 0)
                    goto LABEL_740;
                }
                v369 = v358 >= v361;
                if (v358 != v361)
                  break;
                v356 = (uint64_t)v364;
                if ((unint64_t)v408 >= (unint64_t)*(v364 - 2))
                  goto LABEL_740;
              }
              v356 = (uint64_t)v364;
            }
            while (!v369);
LABEL_740:
            if (*((char *)v364 + 23) < 0)
              operator delete((void *)*v364);
            v370 = *(_OWORD *)__p;
            v364[2] = v407;
            *(_OWORD *)v364 = v370;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v371 = v408;
            v408 = 0uLL;
            v372 = (std::__shared_weak_count *)v364[4];
            *(_OWORD *)(v364 + 3) = v371;
            if (v372)
            {
              v373 = (unint64_t *)&v372->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            v375 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v376 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v377 = __ldaxr(v376);
              while (__stlxr(v377 - 1, v376));
              if (!v377)
              {
                ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                std::__shared_weak_count::__release_weak(v375);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
LABEL_688:
            v344 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == v398)
              return;
          }
        }
        if (a3)
        {
          v9 = v8 >> 1;
          v10 = a1 + 40 * (v8 >> 1);
          if ((unint64_t)v7 < 0x1401)
          {
            sub_20EA6329C((const void **)v10, (const void **)a1, v393);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            sub_20EA6329C((const void **)a1, (const void **)v10, v393);
            v11 = 40 * v9;
            sub_20EA6329C((const void **)(a1 + 40), (const void **)(v11 + a1 - 40), v390);
            sub_20EA6329C((const void **)(a1 + 80), (const void **)(a1 + 40 + v11), v389);
            sub_20EA6329C((const void **)(v11 + a1 - 40), (const void **)v10, (const void **)(a1 + 40 + v11));
            v12 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v12;
            v13 = *(_QWORD *)(v10 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            v14 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v13;
            *(_QWORD *)(a1 + 24) = 0;
            v15 = v407;
            *(_OWORD *)v10 = *(_OWORD *)__p;
            *(_QWORD *)(a1 + 32) = 0;
            v16 = *(_OWORD *)(v10 + 24);
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            *(_QWORD *)(v10 + 16) = v15;
            v17 = *(std::__shared_weak_count **)(a1 + 32);
            *(_OWORD *)(a1 + 24) = v16;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                v400 = v14;
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
                v14 = v400;
              }
            }
            v20 = *(std::__shared_weak_count **)(v10 + 32);
            *(_OWORD *)(v10 + 24) = v14;
            if (!v20)
              goto LABEL_16;
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
            else
            {
LABEL_16:
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
          }
          v23 = *(char *)(a1 - 17);
          if (v23 >= 0)
            v24 = (const void *)(a1 - 40);
          else
            v24 = *(const void **)(a1 - 40);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(a1 - 17);
          else
            v25 = *(_QWORD *)(a1 - 32);
          v26 = *(char *)(a1 + 23);
          if (v26 >= 0)
            v27 = (const void *)a1;
          else
            v27 = *(const void **)a1;
          if (v26 >= 0)
            v28 = *(unsigned __int8 *)(a1 + 23);
          else
            v28 = *(_QWORD *)(a1 + 8);
          if (v28 >= v25)
            v29 = v25;
          else
            v29 = v28;
          v30 = memcmp(v24, v27, v29);
          if (v30)
          {
            if (v30 < 0)
              goto LABEL_43;
            goto LABEL_186;
          }
          if (v25 == v28)
          {
            if (*(_QWORD *)(a1 - 16) < *(_QWORD *)(a1 + 24))
              goto LABEL_43;
LABEL_186:
            v96 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v96;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v402 = *(_OWORD *)(a1 + 24);
            v408 = v402;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            if (SHIBYTE(v407) >= 0)
              v97 = __p;
            else
              v97 = (void **)__p[0];
            if (SHIBYTE(v407) >= 0)
              v98 = (void *)HIBYTE(v407);
            else
              v98 = __p[1];
            v99 = *((unsigned __int8 *)v398 - 17);
            v100 = (const void **)*(v398 - 5);
            v101 = *(v398 - 4);
            if ((v99 & 0x80u) == 0)
              v102 = v393;
            else
              v102 = (const void **)*(v398 - 5);
            if ((v99 & 0x80u) == 0)
              v103 = *((unsigned __int8 *)v398 - 17);
            else
              v103 = (size_t)*(v398 - 4);
            if (v103 >= (unint64_t)v98)
              v104 = (size_t)v98;
            else
              v104 = v103;
            v105 = memcmp(v97, v102, v104);
            if (v105)
            {
              if (v105 < 0)
                goto LABEL_225;
            }
            else
            {
              v112 = (unint64_t)v98 >= v103;
              if (v98 == (void *)v103)
                v112 = (unint64_t)v402 >= (unint64_t)*(v398 - 2);
              if (!v112)
              {
LABEL_225:
                for (i = a1 + 40; ; i += 40)
                {
                  v113 = *(char *)(i + 23);
                  if (v113 >= 0)
                    v114 = (const void *)i;
                  else
                    v114 = *(const void **)i;
                  if (v113 >= 0)
                    v115 = *(unsigned __int8 *)(i + 23);
                  else
                    v115 = *(_QWORD *)(i + 8);
                  if (v115 >= (unint64_t)v98)
                    v116 = (size_t)v98;
                  else
                    v116 = v115;
                  v117 = memcmp(v97, v114, v116);
                  if (v117)
                  {
                    if (v117 < 0)
                      goto LABEL_243;
                  }
                  else
                  {
                    v118 = (unint64_t)v98 >= v115;
                    if (v98 == (void *)v115)
                      v118 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                    if (!v118)
                      goto LABEL_243;
                  }
                }
              }
            }
            for (i = a1 + 40; i < (unint64_t)v398; i += 40)
            {
              v106 = *(char *)(i + 23);
              if (v106 >= 0)
                v107 = (const void *)i;
              else
                v107 = *(const void **)i;
              if (v106 >= 0)
                v108 = *(unsigned __int8 *)(i + 23);
              else
                v108 = *(_QWORD *)(i + 8);
              if (v108 >= (unint64_t)v98)
                v109 = (size_t)v98;
              else
                v109 = v108;
              v110 = memcmp(v97, v107, v109);
              if (v110)
              {
                if (v110 < 0)
                  break;
              }
              else
              {
                v111 = (unint64_t)v98 >= v108;
                if (v98 == (void *)v108)
                  v111 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                if (!v111)
                  break;
              }
            }
LABEL_243:
            j = v398;
            if (i < (unint64_t)v398)
            {
              for (j = v393; ; v101 = j[1])
              {
                if ((v99 & 0x80u) == 0)
                  v121 = j;
                else
                  v121 = v100;
                if ((v99 & 0x80u) != 0)
                  v99 = (size_t)v101;
                if (v99 >= (unint64_t)v98)
                  v122 = (size_t)v98;
                else
                  v122 = v99;
                v123 = memcmp(v97, v121, v122);
                if (v123)
                {
                  if ((v123 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v124 = (unint64_t)v98 >= v99;
                  if (v98 == (void *)v99)
                    v124 = (unint64_t)v402 >= (unint64_t)j[3];
                  if (v124)
                    break;
                }
                v120 = (const void **)*(j - 5);
                j -= 5;
                v100 = v120;
                v99 = *((unsigned __int8 *)j + 23);
              }
            }
            if (i < (unint64_t)j)
            {
              do
              {
                v139 = *(_OWORD *)i;
                v410 = *(const void **)(i + 16);
                v409 = v139;
                v140 = *(_OWORD *)j;
                *(_QWORD *)(i + 16) = j[2];
                *(_OWORD *)i = v140;
                v141 = v409;
                j[2] = v410;
                *(_OWORD *)j = v141;
                v142 = *(_OWORD *)(i + 24);
                *(_QWORD *)(i + 24) = 0;
                *(_QWORD *)(i + 32) = 0;
                v143 = *(_OWORD *)(j + 3);
                j[3] = 0;
                j[4] = 0;
                v144 = *(std::__shared_weak_count **)(i + 32);
                *(_OWORD *)(i + 24) = v143;
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    v403 = v142;
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                    v142 = v403;
                  }
                }
                v147 = (std::__shared_weak_count *)j[4];
                *(_OWORD *)(j + 3) = v142;
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                if (SHIBYTE(v407) >= 0)
                  v150 = __p;
                else
                  v150 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v151 = (void *)HIBYTE(v407);
                else
                  v151 = __p[1];
                v152 = v408;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      i += 40;
                      v153 = *(char *)(i + 23);
                      v154 = v153 >= 0 ? (const void *)i : *(const void **)i;
                      v155 = v153 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                      v156 = (size_t)(v155 >= v151 ? v151 : v155);
                      v157 = memcmp(v150, v154, v156);
                      if (!v157)
                        break;
                      if (v157 < 0)
                        goto LABEL_320;
                    }
                    if (v151 != v155)
                      break;
                    if (v152 < *(_QWORD *)(i + 24))
                      goto LABEL_320;
                  }
                }
                while (v151 >= v155);
                do
                {
                  while (1)
                  {
LABEL_320:
                    while (1)
                    {
                      j -= 5;
                      v158 = *((char *)j + 23);
                      v159 = v158 >= 0 ? j : (const void **)*j;
                      v160 = v158 >= 0 ? (void *)*((unsigned __int8 *)j + 23) : (void *)j[1];
                      v161 = (size_t)(v160 >= v151 ? v151 : v160);
                      v162 = memcmp(v150, v159, v161);
                      if (!v162)
                        break;
                      if ((v162 & 0x80000000) == 0)
                        goto LABEL_285;
                    }
                    if (v151 != v160)
                      break;
                    if (v152 >= (unint64_t)j[3])
                      goto LABEL_285;
                  }
                }
                while (v151 < v160);
LABEL_285:
                a2 = v398;
              }
              while (i < (unint64_t)j);
            }
            else
            {
              a2 = v398;
            }
            v125 = (void **)(i - 40);
            if (i - 40 != a1)
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v126 = *(_OWORD *)v125;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
              *(_OWORD *)a1 = v126;
              *(_BYTE *)(i - 17) = 0;
              *(_BYTE *)(i - 40) = 0;
              v127 = *(_OWORD *)(i - 16);
              *(_QWORD *)(i - 16) = 0;
              *(_QWORD *)(i - 8) = 0;
              v128 = *(std::__shared_weak_count **)(a1 + 32);
              *(_OWORD *)(a1 + 24) = v127;
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
            }
            if (*(char *)(i - 17) < 0)
              operator delete(*v125);
            v131 = *(_OWORD *)__p;
            *(_QWORD *)(i - 24) = v407;
            *(_OWORD *)v125 = v131;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v132 = v408;
            v408 = 0uLL;
            v133 = *(std::__shared_weak_count **)(i - 8);
            *(_OWORD *)(i - 16) = v132;
            if (v133)
            {
              v134 = (unint64_t *)&v133->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
            v136 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v137 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
            a4 = 0;
            continue;
          }
          if (v25 >= v28)
            goto LABEL_186;
LABEL_43:
          v31 = 0;
          v32 = *(_OWORD *)a1;
          v407 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v33 = *(_OWORD *)(a1 + 24);
          v408 = v33;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          if (SHIBYTE(v407) >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          if (SHIBYTE(v407) >= 0)
            v35 = (void *)HIBYTE(v407);
          else
            v35 = __p[1];
          v36 = v33;
          while (2)
          {
            v37 = *(char *)(a1 + v31 + 63);
            if (v37 >= 0)
              v38 = (const void *)(a1 + v31 + 40);
            else
              v38 = *(const void **)(a1 + v31 + 40);
            if (v37 >= 0)
              v39 = *(unsigned __int8 *)(a1 + v31 + 63);
            else
              v39 = *(_QWORD *)(a1 + v31 + 48);
            if ((unint64_t)v35 >= v39)
              v40 = v39;
            else
              v40 = (size_t)v35;
            v41 = memcmp(v38, v34, v40);
            if (v41)
            {
              if ((v41 & 0x80000000) == 0)
                break;
              goto LABEL_51;
            }
            v42 = v39 >= (unint64_t)v35;
            if ((void *)v39 == v35)
              v42 = *(_QWORD *)(a1 + v31 + 64) >= v36;
            if (!v42)
            {
LABEL_51:
              v31 += 40;
              continue;
            }
            break;
          }
          v43 = a1 + v31 + 40;
          k = v393;
          if (v31)
          {
            while (1)
            {
              v45 = *((char *)k + 23);
              if (v45 >= 0)
                v46 = k;
              else
                v46 = *k;
              if (v45 >= 0)
                v47 = *((unsigned __int8 *)k + 23);
              else
                v47 = (size_t)k[1];
              if ((unint64_t)v35 >= v47)
                v48 = v47;
              else
                v48 = (size_t)v35;
              v49 = memcmp(v46, v34, v48);
              if (v49)
              {
                if (v49 < 0)
                  goto LABEL_106;
              }
              else
              {
                v50 = v47 >= (unint64_t)v35;
                if ((void *)v47 == v35)
                  v50 = (unint64_t)k[3] >= v36;
                if (!v50)
                  goto LABEL_106;
              }
              k -= 5;
            }
          }
          k = v398;
          if (v43 < (unint64_t)v398)
          {
            for (k = v393; ; k -= 5)
            {
              v51 = *((char *)k + 23);
              if (v51 >= 0)
                v52 = k;
              else
                v52 = *k;
              if (v51 >= 0)
                v53 = *((unsigned __int8 *)k + 23);
              else
                v53 = (size_t)k[1];
              if ((unint64_t)v35 >= v53)
                v54 = v53;
              else
                v54 = (size_t)v35;
              v55 = memcmp(v52, v34, v54);
              if (v55)
              {
                if (v43 >= (unint64_t)k || v55 < 0)
                  break;
              }
              else if ((void *)v53 == v35)
              {
                if (v43 >= (unint64_t)k || (unint64_t)k[3] < v36)
                  break;
              }
              else if (v43 >= (unint64_t)k || v53 < (unint64_t)v35)
              {
                break;
              }
            }
          }
LABEL_106:
          i = v43;
          if (v43 < (unint64_t)k)
          {
            v56 = (unint64_t)k;
            do
            {
              v57 = *(_OWORD *)i;
              v410 = *(const void **)(i + 16);
              v409 = v57;
              v58 = *(_OWORD *)v56;
              *(_QWORD *)(i + 16) = *(_QWORD *)(v56 + 16);
              *(_OWORD *)i = v58;
              v59 = v409;
              *(_QWORD *)(v56 + 16) = v410;
              *(_OWORD *)v56 = v59;
              v60 = *(_OWORD *)(i + 24);
              *(_QWORD *)(i + 24) = 0;
              *(_QWORD *)(i + 32) = 0;
              v61 = *(_OWORD *)(v56 + 24);
              *(_QWORD *)(v56 + 24) = 0;
              *(_QWORD *)(v56 + 32) = 0;
              v62 = *(std::__shared_weak_count **)(i + 32);
              *(_OWORD *)(i + 24) = v61;
              if (!v62)
                goto LABEL_113;
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                v401 = v60;
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v401;
                if (v65)
                {
LABEL_114:
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
              }
              else
              {
LABEL_113:
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v60;
                if (v65)
                  goto LABEL_114;
              }
              if (SHIBYTE(v407) >= 0)
                v68 = __p;
              else
                v68 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v69 = (void *)HIBYTE(v407);
              else
                v69 = __p[1];
              v70 = v408;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 40;
                    v71 = *(char *)(i + 23);
                    v72 = v71 >= 0 ? (const void *)i : *(const void **)i;
                    v73 = v71 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                    v74 = (size_t)(v69 >= v73 ? v73 : v69);
                    v75 = memcmp(v72, v68, v74);
                    if (!v75)
                      break;
                    if ((v75 & 0x80000000) == 0)
                      goto LABEL_143;
                  }
                  if (v73 != v69)
                    break;
                  if (*(_QWORD *)(i + 24) >= v70)
                    goto LABEL_143;
                }
              }
              while (v73 < v69);
              do
              {
                while (1)
                {
LABEL_143:
                  while (1)
                  {
                    v56 -= 40;
                    v76 = *(char *)(v56 + 23);
                    v77 = v76 >= 0 ? (const void *)v56 : *(const void **)v56;
                    v78 = v76 >= 0 ? (void *)*(unsigned __int8 *)(v56 + 23) : *(void **)(v56 + 8);
                    v79 = (size_t)(v69 >= v78 ? v78 : v69);
                    v80 = memcmp(v77, v68, v79);
                    if (!v80)
                      break;
                    if (v80 < 0)
                      goto LABEL_108;
                  }
                  if (v78 != v69)
                    break;
                  if (*(_QWORD *)(v56 + 24) < v70)
                    goto LABEL_108;
                }
              }
              while (v78 >= v69);
LABEL_108:
              ;
            }
            while (i < v56);
          }
          v81 = (void **)(i - 40);
          if (i - 40 == a1)
            goto LABEL_165;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v82 = *(_OWORD *)v81;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
          *(_OWORD *)a1 = v82;
          *(_BYTE *)(i - 17) = 0;
          *(_BYTE *)(i - 40) = 0;
          v83 = *(_OWORD *)(i - 16);
          *(_QWORD *)(i - 16) = 0;
          *(_QWORD *)(i - 8) = 0;
          v84 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v83;
          if (!v84)
            goto LABEL_165;
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (v86)
          {
LABEL_165:
            if (*(char *)(i - 17) < 0)
              goto LABEL_166;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
            if (*(char *)(i - 17) < 0)
LABEL_166:
              operator delete(*v81);
          }
          v87 = *(_OWORD *)__p;
          *(_QWORD *)(i - 24) = v407;
          *(_OWORD *)v81 = v87;
          HIBYTE(v407) = 0;
          LOBYTE(__p[0]) = 0;
          v88 = v408;
          v408 = 0uLL;
          v89 = *(std::__shared_weak_count **)(i - 8);
          *(_OWORD *)(i - 16) = v88;
          if (!v89)
            goto LABEL_171;
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
LABEL_172:
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
          }
          else
          {
LABEL_171:
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
              goto LABEL_172;
          }
          if (SHIBYTE(v407) < 0)
            operator delete(__p[0]);
          v42 = v43 >= (unint64_t)k;
          a2 = v398;
          if (!v42)
            goto LABEL_183;
          v95 = sub_20EA63810(a1, (const void **)(i - 40));
          if (!sub_20EA63810(i, v398))
          {
            if (v95)
              continue;
LABEL_183:
            sub_20EA6155C(a1, i - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (const void **)(i - 40);
          if (v95)
            return;
          goto LABEL_2;
        }
        if ((const void **)a1 == a2)
          return;
        v209 = (v8 - 2) >> 1;
        v210 = v209;
        do
        {
          v211 = v210;
          if (v209 < v210)
            goto LABEL_438;
          v396 = v210;
          v212 = (2 * v210) | 1;
          v213 = a1 + 40 * v212;
          v214 = 2 * v210 + 2;
          if (v214 >= (uint64_t)v8)
          {
            v223 = v210;
            goto LABEL_464;
          }
          v215 = *(char *)(v213 + 23);
          if (v215 >= 0)
            v216 = (const void *)(a1 + 40 * v212);
          else
            v216 = *(const void **)v213;
          if (v215 >= 0)
            v217 = *(unsigned __int8 *)(v213 + 23);
          else
            v217 = *(_QWORD *)(v213 + 8);
          v218 = *(char *)(v213 + 63);
          if (v218 >= 0)
            v219 = (const void *)(v213 + 40);
          else
            v219 = *(const void **)(v213 + 40);
          if (v218 >= 0)
            v220 = *(unsigned __int8 *)(v213 + 63);
          else
            v220 = *(_QWORD *)(v213 + 48);
          if (v220 >= v217)
            v221 = v217;
          else
            v221 = v220;
          v222 = memcmp(v216, v219, v221);
          if (v222)
          {
            v209 = (v8 - 2) >> 1;
            v223 = v396;
            if ((v222 & 0x80000000) == 0)
              goto LABEL_464;
LABEL_463:
            v213 += 40;
            v212 = v214;
            goto LABEL_464;
          }
          v224 = v217 >= v220;
          if (v217 == v220)
            v224 = *(_QWORD *)(v213 + 24) >= *(_QWORD *)(v213 + 64);
          v209 = (v8 - 2) >> 1;
          v223 = v396;
          if (!v224)
            goto LABEL_463;
LABEL_464:
          v225 = (const void **)(a1 + 40 * v223);
          v226 = *(char *)(v213 + 23);
          if (v226 >= 0)
            v227 = (const void *)v213;
          else
            v227 = *(const void **)v213;
          if (v226 >= 0)
            v228 = *(unsigned __int8 *)(v213 + 23);
          else
            v228 = *(_QWORD *)(v213 + 8);
          v229 = *((char *)v225 + 23);
          if (v229 >= 0)
            v230 = v225;
          else
            v230 = *v225;
          if (v229 >= 0)
            v231 = *((unsigned __int8 *)v225 + 23);
          else
            v231 = (size_t)v225[1];
          if (v231 >= v228)
            v232 = v228;
          else
            v232 = v231;
          v233 = memcmp(v227, v230, v232);
          if (v233)
          {
            v211 = v396;
            a2 = v398;
            if (v233 < 0)
              goto LABEL_438;
LABEL_486:
            v235 = 0;
            v236 = *(_OWORD *)v225;
            v407 = v225[2];
            *(_OWORD *)__p = v236;
            v225[1] = 0;
            v225[2] = 0;
            *v225 = 0;
            v408 = *(_OWORD *)(v225 + 3);
            v225[3] = 0;
            v225[4] = 0;
            while (1)
            {
              if (v235 < 0)
                operator delete((void *)*v225);
              v245 = *(_OWORD *)v213;
              v225[2] = *(const void **)(v213 + 16);
              *(_OWORD *)v225 = v245;
              *(_BYTE *)(v213 + 23) = 0;
              *(_BYTE *)v213 = 0;
              v246 = *(_OWORD *)(v213 + 24);
              *(_QWORD *)(v213 + 24) = 0;
              *(_QWORD *)(v213 + 32) = 0;
              v247 = (std::__shared_weak_count *)v225[4];
              *(_OWORD *)(v225 + 3) = v246;
              if (v247)
              {
                v248 = (unint64_t *)&v247->__shared_owners_;
                do
                  v249 = __ldaxr(v248);
                while (__stlxr(v249 - 1, v248));
                if (!v249)
                {
                  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                  std::__shared_weak_count::__release_weak(v247);
                }
              }
              if (v209 < v212)
              {
LABEL_542:
                if (*(char *)(v213 + 23) < 0)
                  operator delete(*(void **)v213);
                v261 = *(_OWORD *)__p;
                *(_QWORD *)(v213 + 16) = v407;
                *(_OWORD *)v213 = v261;
                HIBYTE(v407) = 0;
                LOBYTE(__p[0]) = 0;
                v262 = v408;
                v408 = 0uLL;
                v263 = *(std::__shared_weak_count **)(v213 + 32);
                *(_OWORD *)(v213 + 24) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v266 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                if (*((_QWORD *)&v408 + 1))
                {
                  v267 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }
                if (SHIBYTE(v407) < 0)
                  operator delete(__p[0]);
                v211 = v396;
                a2 = v398;
                goto LABEL_438;
              }
              v250 = 2 * v212;
              v212 = (2 * v212) | 1;
              v237 = a1 + 40 * v212;
              v251 = v250 + 2;
              if (v250 + 2 < (uint64_t)v8)
              {
                v252 = *(char *)(v237 + 23);
                if (v252 >= 0)
                  v253 = (const void *)(a1 + 40 * v212);
                else
                  v253 = *(const void **)v237;
                if (v252 >= 0)
                  v254 = *(unsigned __int8 *)(v237 + 23);
                else
                  v254 = *(_QWORD *)(v237 + 8);
                v255 = *(char *)(v237 + 63);
                if (v255 >= 0)
                  v256 = (const void *)(v237 + 40);
                else
                  v256 = *(const void **)(v237 + 40);
                if (v255 >= 0)
                  v257 = *(unsigned __int8 *)(v237 + 63);
                else
                  v257 = *(_QWORD *)(v237 + 48);
                if (v257 >= v254)
                  v258 = v254;
                else
                  v258 = v257;
                v259 = memcmp(v253, v256, v258);
                if (v259)
                {
                  v209 = (v8 - 2) >> 1;
                  if (v259 < 0)
                    goto LABEL_487;
                }
                else
                {
                  v260 = v254 >= v257;
                  if (v254 == v257)
                    v260 = *(_QWORD *)(v237 + 24) >= *(_QWORD *)(v237 + 64);
                  v209 = (v8 - 2) >> 1;
                  if (!v260)
                  {
LABEL_487:
                    v237 += 40;
                    v212 = v251;
                  }
                }
              }
              v238 = *(char *)(v237 + 23);
              if (v238 >= 0)
                v239 = (const void *)v237;
              else
                v239 = *(const void **)v237;
              if (v238 >= 0)
                v240 = *(unsigned __int8 *)(v237 + 23);
              else
                v240 = *(_QWORD *)(v237 + 8);
              if (SHIBYTE(v407) >= 0)
                v241 = __p;
              else
                v241 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v242 = (void *)HIBYTE(v407);
              else
                v242 = __p[1];
              if ((unint64_t)v242 >= v240)
                v243 = v240;
              else
                v243 = (size_t)v242;
              v244 = memcmp(v239, v241, v243);
              if (v244)
              {
                if (v244 < 0)
                  goto LABEL_542;
              }
              else if ((void *)v240 == v242)
              {
                if (*(_QWORD *)(v237 + 24) < (unint64_t)v408)
                  goto LABEL_542;
              }
              else if (v240 < (unint64_t)v242)
              {
                goto LABEL_542;
              }
              v235 = *(_BYTE *)(v213 + 23);
              v225 = (const void **)v213;
              v213 = v237;
            }
          }
          v234 = v228 >= v231;
          if (v228 == v231)
            v234 = *(_QWORD *)(v213 + 24) >= (unint64_t)v225[3];
          v211 = v396;
          a2 = v398;
          if (v234)
            goto LABEL_486;
LABEL_438:
          v210 = v211 - 1;
        }
        while (v211);
        v269 = v7 / 0x28uLL;
        while (2)
        {
          if (v269 < 2)
            goto LABEL_558;
          v271 = 0;
          v272 = *(void **)a1;
          *(_QWORD *)&v409 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)((char *)&v409 + 7) = *(_QWORD *)(a1 + 15);
          v404 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v397 = *(const void **)(a1 + 24);
          v399 = a2;
          v392 = v272;
          v394 = *(const void **)(a1 + 32);
          v273 = a1;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          while (2)
          {
            v274 = v273;
            v273 += 40 * v271 + 40;
            v275 = 2 * v271;
            v271 = (2 * v271) | 1;
            v276 = v275 + 2;
            if (v275 + 2 < v269)
            {
              v277 = *(char *)(v273 + 23);
              if (v277 >= 0)
                v278 = (const void *)v273;
              else
                v278 = *(const void **)v273;
              if (v277 >= 0)
                v279 = *(unsigned __int8 *)(v273 + 23);
              else
                v279 = *(_QWORD *)(v273 + 8);
              v280 = *(char *)(v273 + 63);
              if (v280 >= 0)
                v281 = (const void *)(v273 + 40);
              else
                v281 = *(const void **)(v273 + 40);
              if (v280 >= 0)
                v282 = *(unsigned __int8 *)(v273 + 63);
              else
                v282 = *(_QWORD *)(v273 + 48);
              if (v282 >= v279)
                v283 = v279;
              else
                v283 = v282;
              v284 = memcmp(v278, v281, v283);
              if (v284)
              {
                if (v284 < 0)
                  goto LABEL_581;
              }
              else
              {
                v291 = v279 >= v282;
                if (v279 == v282)
                  v291 = *(_QWORD *)(v273 + 24) >= *(_QWORD *)(v273 + 64);
                if (!v291)
                {
LABEL_581:
                  v273 += 40;
                  v271 = v276;
                }
              }
            }
            if (*(char *)(v274 + 23) < 0)
              operator delete(*(void **)v274);
            v285 = *(_OWORD *)v273;
            *(_QWORD *)(v274 + 16) = *(_QWORD *)(v273 + 16);
            *(_OWORD *)v274 = v285;
            *(_BYTE *)(v273 + 23) = 0;
            *(_BYTE *)v273 = 0;
            v286 = (_QWORD *)(v273 + 24);
            v287 = *(_OWORD *)(v273 + 24);
            *(_QWORD *)(v273 + 24) = 0;
            *(_QWORD *)(v273 + 32) = 0;
            v288 = *(std::__shared_weak_count **)(v274 + 32);
            *(_OWORD *)(v274 + 24) = v287;
            if (v288)
            {
              v289 = (unint64_t *)&v288->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (!v290)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v288);
              }
            }
            if (v271 <= (uint64_t)((unint64_t)(v269 - 2) >> 1))
              continue;
            break;
          }
          v292 = (void **)(v399 - 5);
          v293 = *(char *)(v273 + 23);
          if ((const void **)v273 == v399 - 5)
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            *(_QWORD *)v273 = v392;
            v316 = *(_QWORD *)((char *)&v409 + 7);
            *(_QWORD *)(v273 + 8) = v409;
            *(_QWORD *)(v273 + 15) = v316;
            *(_BYTE *)(v273 + 23) = v404;
            v317 = *(std::__shared_weak_count **)(v273 + 32);
            *(_QWORD *)(v273 + 24) = v397;
            *(_QWORD *)(v273 + 32) = v394;
            if (v317)
            {
              v318 = (unint64_t *)&v317->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                std::__shared_weak_count::__release_weak(v317);
              }
            }
          }
          else
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            v294 = *(_OWORD *)v292;
            *(_QWORD *)(v273 + 16) = *(v399 - 3);
            *(_OWORD *)v273 = v294;
            *((_BYTE *)v399 - 17) = 0;
            *((_BYTE *)v399 - 40) = 0;
            v295 = *((_OWORD *)v399 - 1);
            *(v399 - 2) = 0;
            *(v399 - 1) = 0;
            v296 = *(std::__shared_weak_count **)(v273 + 32);
            *(_OWORD *)(v273 + 24) = v295;
            if (!v296)
              goto LABEL_601;
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
LABEL_602:
                operator delete(*v292);
            }
            else
            {
LABEL_601:
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
                goto LABEL_602;
            }
            *(v299 - 5) = v392;
            v300 = (const void *)v409;
            *(const void **)((char *)v299 - 25) = *(const void **)((char *)&v409 + 7);
            *(v299 - 4) = v300;
            *((_BYTE *)v299 - 17) = v404;
            v301 = v299;
            v302 = (std::__shared_weak_count *)*(v299 - 1);
            *(v301 - 2) = v397;
            *(v301 - 1) = v394;
            if (!v302)
              goto LABEL_607;
            v303 = (unint64_t *)&v302->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
              v305 = v273 + 40 - a1;
              if (v305 < 41)
                goto LABEL_557;
LABEL_608:
              v306 = (v305 / 0x28uLL - 2) >> 1;
              v307 = a1 + 40 * v306;
              v308 = *(char *)(v307 + 23);
              if (v308 >= 0)
                v309 = (const void *)(a1 + 40 * v306);
              else
                v309 = *(const void **)v307;
              if (v308 >= 0)
                v310 = *(unsigned __int8 *)(v307 + 23);
              else
                v310 = *(_QWORD *)(v307 + 8);
              v311 = *(char *)(v273 + 23);
              if (v311 >= 0)
                v312 = (const void *)v273;
              else
                v312 = *(const void **)v273;
              if (v311 >= 0)
                v313 = *(unsigned __int8 *)(v273 + 23);
              else
                v313 = *(_QWORD *)(v273 + 8);
              if (v313 >= v310)
                v314 = v310;
              else
                v314 = v313;
              v315 = memcmp(v309, v312, v314);
              if (v315)
              {
                if ((v315 & 0x80000000) == 0)
                  goto LABEL_557;
              }
              else
              {
                v320 = v310 >= v313;
                if (v310 == v313)
                  v320 = *(_QWORD *)(v307 + 24) >= *v286;
                if (v320)
                  goto LABEL_557;
              }
              v321 = *(_OWORD *)v273;
              v407 = *(const void **)(v273 + 16);
              *(_OWORD *)__p = v321;
              *(_QWORD *)(v273 + 8) = 0;
              *(_QWORD *)(v273 + 16) = 0;
              *(_QWORD *)v273 = 0;
              v408 = *(_OWORD *)(v273 + 24);
              *v286 = 0;
              *(_QWORD *)(v273 + 32) = 0;
              while (1)
              {
                v322 = v307;
                if (*(char *)(v273 + 23) < 0)
                  operator delete(*(void **)v273);
                v323 = *(_OWORD *)v307;
                *(_QWORD *)(v273 + 16) = *(_QWORD *)(v307 + 16);
                *(_OWORD *)v273 = v323;
                *(_BYTE *)(v307 + 23) = 0;
                *(_BYTE *)v307 = 0;
                v324 = *(_OWORD *)(v307 + 24);
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                v325 = *(std::__shared_weak_count **)(v273 + 32);
                *(_OWORD *)(v273 + 24) = v324;
                if (v325)
                {
                  v326 = (unint64_t *)&v325->__shared_owners_;
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                if (!v306)
                  break;
                v306 = (v306 - 1) >> 1;
                v307 = a1 + 40 * v306;
                v328 = *(char *)(v307 + 23);
                if (v328 >= 0)
                  v329 = (const void *)(a1 + 40 * v306);
                else
                  v329 = *(const void **)v307;
                if (v328 >= 0)
                  v330 = *(unsigned __int8 *)(v307 + 23);
                else
                  v330 = *(_QWORD *)(v307 + 8);
                if (SHIBYTE(v407) >= 0)
                  v331 = __p;
                else
                  v331 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v332 = (void *)HIBYTE(v407);
                else
                  v332 = __p[1];
                if ((unint64_t)v332 >= v330)
                  v333 = v330;
                else
                  v333 = (size_t)v332;
                v334 = memcmp(v329, v331, v333);
                if (v334)
                {
                  v273 = v322;
                  if ((v334 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v335 = v330 >= (unint64_t)v332;
                  if ((void *)v330 == v332)
                  {
                    v273 = v322;
                    if (*(_QWORD *)(v307 + 24) >= (unint64_t)v408)
                      break;
                  }
                  else
                  {
                    v273 = v322;
                    if (v335)
                      break;
                  }
                }
              }
              if (*(char *)(v322 + 23) < 0)
                operator delete(*(void **)v322);
              v336 = *(_OWORD *)__p;
              *(_QWORD *)(v322 + 16) = v407;
              *(_OWORD *)v322 = v336;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v337 = v408;
              v408 = 0uLL;
              v338 = *(std::__shared_weak_count **)(v322 + 32);
              *(_OWORD *)(v322 + 24) = v337;
              if (v338)
              {
                v339 = (unint64_t *)&v338->__shared_owners_;
                do
                  v340 = __ldaxr(v339);
                while (__stlxr(v340 - 1, v339));
                if (!v340)
                {
                  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                  std::__shared_weak_count::__release_weak(v338);
                }
              }
              v341 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v342 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v343 = __ldaxr(v342);
                while (__stlxr(v343 - 1, v342));
                if (!v343)
                {
                  ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                  std::__shared_weak_count::__release_weak(v341);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
            }
            else
            {
LABEL_607:
              v305 = v273 + 40 - a1;
              if (v305 >= 41)
                goto LABEL_608;
            }
          }
LABEL_557:
          a2 = v399;
LABEL_558:
          a2 -= 5;
          if ((unint64_t)v269-- > 2)
            continue;
          return;
        }
    }
  }
}

void sub_20EA6329C(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  const void *v24;
  __int128 v25;
  const void *v26;
  __int128 v27;
  _QWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  size_t v38;
  int v39;
  const void *v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  __int128 v45;
  const void *v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  const void *v57;
  size_t v58;
  int v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  const void *v64;
  __int128 v65;
  const void *v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const void *v75;
  __int128 v76;
  const void *v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  const void *v84;
  __int128 v85;
  const void *v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 == v11)
    {
      if (a2[3] < a1[3])
        goto LABEL_37;
    }
    else if (v8 < v11)
    {
      goto LABEL_37;
    }
LABEL_18:
    v14 = *((char *)a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    if (v8 >= v16)
      v17 = v16;
    else
      v17 = v8;
    v18 = memcmp(v15, v7, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
        return;
    }
    else if (v16 == v8)
    {
      if (a3[3] >= a2[3])
        return;
    }
    else if (v16 >= v8)
    {
      return;
    }
    v44 = a2[2];
    v45 = *(_OWORD *)a2;
    v46 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v46;
    *(_OWORD *)a3 = v45;
    a3[2] = v44;
    v47 = a2 + 3;
    v48 = *(_OWORD *)(a2 + 3);
    a2[3] = 0;
    a2[4] = 0;
    v49 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v50 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v49;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (!v52)
      {
        v94 = v48;
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v48 = v94;
      }
    }
    v53 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v48;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *((char *)a2 + 23);
    if (v56 >= 0)
      v57 = a2;
    else
      v57 = *a2;
    if (v56 >= 0)
      v58 = *((unsigned __int8 *)a2 + 23);
    else
      v58 = (size_t)a2[1];
    v59 = *((char *)a1 + 23);
    if (v59 >= 0)
      v60 = a1;
    else
      v60 = *a1;
    if (v59 >= 0)
      v61 = *((unsigned __int8 *)a1 + 23);
    else
      v61 = (size_t)a1[1];
    if (v61 >= v58)
      v62 = v58;
    else
      v62 = v61;
    v63 = memcmp(v57, v60, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        return;
    }
    else if (v58 == v61)
    {
      if (*v47 >= (unint64_t)a1[3])
        return;
    }
    else if (v58 >= v61)
    {
      return;
    }
    v84 = a1[2];
    v85 = *(_OWORD *)a1;
    v86 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v86;
    *(_OWORD *)a2 = v85;
    a2[2] = v84;
    v87 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v88 = *(_OWORD *)(a2 + 3);
    *v47 = 0;
    a2[4] = 0;
    v89 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v88;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        v97 = v87;
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        v87 = v97;
      }
    }
    v72 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v87;
    if (v72)
    {
      v92 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v92);
      while (__stlxr(v74 - 1, v92));
LABEL_143:
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      return;
    }
    return;
  }
  if ((v13 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_37:
  v19 = *((char *)a3 + 23);
  if (v19 >= 0)
    v20 = a3;
  else
    v20 = *a3;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a3 + 23);
  else
    v21 = (size_t)a3[1];
  if (v8 >= v21)
    v22 = v21;
  else
    v22 = v8;
  v23 = memcmp(v20, v7, v22);
  if (!v23)
  {
    if (v21 == v8)
    {
      if (a3[3] >= a2[3])
        goto LABEL_48;
    }
    else if (v21 >= v8)
    {
      goto LABEL_48;
    }
LABEL_115:
    v64 = a1[2];
    v65 = *(_OWORD *)a1;
    v66 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v66;
    *(_OWORD *)a3 = v65;
    a3[2] = v64;
    v67 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v68 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v69 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        v95 = v67;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v67 = v95;
      }
    }
    v72 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v67;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      goto LABEL_143;
    }
    return;
  }
  if (v23 < 0)
    goto LABEL_115;
LABEL_48:
  v24 = a1[2];
  v25 = *(_OWORD *)a1;
  v26 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v26;
  *(_OWORD *)a2 = v25;
  a2[2] = v24;
  v27 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  v28 = a2 + 3;
  v29 = *(_OWORD *)(a2 + 3);
  a2[3] = 0;
  a2[4] = 0;
  v30 = (std::__shared_weak_count *)a1[4];
  *(_OWORD *)(a1 + 3) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v93 = v27;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v27 = v93;
    }
  }
  v33 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v27;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *((char *)a3 + 23);
  if (v36 >= 0)
    v37 = a3;
  else
    v37 = *a3;
  if (v36 >= 0)
    v38 = *((unsigned __int8 *)a3 + 23);
  else
    v38 = (size_t)a3[1];
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  if (v41 >= v38)
    v42 = v38;
  else
    v42 = v41;
  v43 = memcmp(v37, v40, v42);
  if (v43)
  {
    if ((v43 & 0x80000000) == 0)
      return;
  }
  else if (v38 == v41)
  {
    if ((unint64_t)a3[3] >= *v28)
      return;
  }
  else if (v38 >= v41)
  {
    return;
  }
  v75 = a2[2];
  v76 = *(_OWORD *)a2;
  v77 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v77;
  *(_OWORD *)a3 = v76;
  a3[2] = v75;
  v78 = *(_OWORD *)(a2 + 3);
  *v28 = 0;
  a2[4] = 0;
  v79 = *(_OWORD *)(a3 + 3);
  a3[3] = 0;
  a3[4] = 0;
  v80 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v79;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      v96 = v78;
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      v78 = v96;
    }
  }
  v72 = (std::__shared_weak_count *)a3[4];
  *(_OWORD *)(a3 + 3) = v78;
  if (v72)
  {
    v83 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v83);
    while (__stlxr(v74 - 1, v83));
    goto LABEL_143;
  }
}

BOOL sub_20EA63810(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  const void *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  void *__p[2];
  const void *v65;
  __int128 v66;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 5;
      v7 = *((char *)a2 - 17);
      if (v7 >= 0)
        v8 = a2 - 5;
      else
        v8 = (const void **)*(a2 - 5);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 17);
      else
        v9 = (size_t)*(a2 - 4);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
        goto LABEL_99;
      }
      v51 = v9 >= v12;
      if (v9 == v12)
        v51 = (unint64_t)*(a2 - 2) >= *(_QWORD *)(a1 + 24);
      if (!v51)
      {
LABEL_99:
        v52 = *(const void **)(a1 + 16);
        v53 = *(_OWORD *)a1;
        v54 = (uint64_t)*(a2 - 3);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v54;
        *(_OWORD *)v6 = v53;
        *(a2 - 3) = v52;
        v55 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v56 = *((_OWORD *)a2 - 1);
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        v57 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v56;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            v63 = v55;
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            v55 = v63;
          }
        }
        v60 = (std::__shared_weak_count *)*(a2 - 1);
        *((_OWORD *)a2 - 1) = v55;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      return 1;
    case 3uLL:
      sub_20EA6329C((const void **)a1, (const void **)(a1 + 40), a2 - 5);
      return 1;
    case 4uLL:
      sub_20EA63CA8((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a2 - 5);
      return 1;
    case 5uLL:
      sub_20EA64038(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), a2 - 5);
      return 1;
    default:
      v15 = (const void **)(a1 + 80);
      sub_20EA6329C((const void **)a1, (const void **)(a1 + 40), (const void **)(a1 + 80));
      v16 = (const void **)(a1 + 120);
      if ((const void **)(a1 + 120) == a2)
        return 1;
      v17 = 0;
      while (2)
      {
        v18 = *((char *)v16 + 23);
        if (v18 >= 0)
          v19 = v16;
        else
          v19 = *v16;
        if (v18 >= 0)
          v20 = *((unsigned __int8 *)v16 + 23);
        else
          v20 = (size_t)v16[1];
        v21 = *((char *)v15 + 23);
        if (v21 >= 0)
          v22 = v15;
        else
          v22 = *v15;
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v15 + 23);
        else
          v23 = (size_t)v15[1];
        if (v23 >= v20)
          v24 = v20;
        else
          v24 = v23;
        v25 = memcmp(v19, v22, v24);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_24;
        }
        else
        {
          v26 = v20 >= v23;
          if (v20 == v23)
            v26 = v16[3] >= v15[3];
          if (v26)
            goto LABEL_24;
        }
        v27 = 0;
        *(_OWORD *)__p = *(_OWORD *)v16;
        v65 = v16[2];
        *v16 = 0;
        v16[1] = 0;
        v66 = *(_OWORD *)(v16 + 3);
        v16[2] = 0;
        v16[3] = 0;
        v28 = (uint64_t)v16;
        v16[4] = 0;
        while (1)
        {
          v29 = (uint64_t)v15;
          if (v27 < 0)
            operator delete(*(void **)v28);
          *(_OWORD *)v28 = *(_OWORD *)v15;
          *(_QWORD *)(v28 + 16) = v15[2];
          *((_BYTE *)v15 + 23) = 0;
          *(_BYTE *)v15 = 0;
          v30 = v15 + 3;
          v31 = *(_OWORD *)(v15 + 3);
          v15[4] = 0;
          v15[3] = 0;
          v32 = *(std::__shared_weak_count **)(v28 + 32);
          *(_OWORD *)(v28 + 24) = v31;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (v29 == a1)
            break;
          v15 = (const void **)(v29 - 40);
          if (SHIBYTE(v65) >= 0)
            v35 = __p;
          else
            v35 = (void **)__p[0];
          if (SHIBYTE(v65) >= 0)
            v36 = (void *)HIBYTE(v65);
          else
            v36 = __p[1];
          v37 = *(char *)(v29 - 17);
          if (v37 >= 0)
            v38 = (const void *)(v29 - 40);
          else
            v38 = *(const void **)(v29 - 40);
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v29 - 17);
          else
            v39 = *(_QWORD *)(v29 - 32);
          if (v39 >= (unint64_t)v36)
            v40 = (size_t)v36;
          else
            v40 = v39;
          v41 = memcmp(v35, v38, v40);
          if (v41)
          {
            if ((v41 & 0x80000000) == 0)
              goto LABEL_78;
          }
          else
          {
            v42 = (unint64_t)v36 >= v39;
            if (v36 == (void *)v39)
              v42 = (unint64_t)v66 >= *(_QWORD *)(v29 - 16);
            if (v42)
              goto LABEL_78;
          }
          v27 = *(_BYTE *)(v29 + 23);
          v28 = v29;
        }
        v29 = a1;
LABEL_78:
        if (*(char *)(v29 + 23) < 0)
          operator delete(*(void **)v29);
        v43 = *(_OWORD *)__p;
        *(_QWORD *)(v29 + 16) = v65;
        *(_OWORD *)v29 = v43;
        HIBYTE(v65) = 0;
        LOBYTE(__p[0]) = 0;
        v44 = v66;
        v66 = 0uLL;
        *v30 = v44;
        v45 = *(std::__shared_weak_count **)(v29 + 32);
        *(_QWORD *)(v29 + 32) = *((_QWORD *)&v44 + 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (SHIBYTE(v65) < 0)
        {
          operator delete(__p[0]);
          if (++v17 == 8)
            return v16 + 5 == a2;
LABEL_24:
          v15 = v16;
          v16 += 5;
          if (v16 == a2)
            return 1;
          continue;
        }
        break;
      }
      if (++v17 != 8)
        goto LABEL_24;
      return v16 + 5 == a2;
  }
}

void sub_20EA63CA8(__int128 *a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  BOOL v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  const void *v30;
  size_t v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  const void *v51;
  size_t v52;
  int v53;
  const void *v54;
  size_t v55;
  size_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  sub_20EA6329C((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else
  {
    v16 = v10 >= v13;
    if (v10 == v13)
      v16 = (unint64_t)a4[3] >= *((_QWORD *)a3 + 3);
    if (v16)
      return;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = (_QWORD *)a3 + 3;
  v21 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  v22 = *(_OWORD *)(a4 + 3);
  a4[3] = 0;
  a4[4] = 0;
  v23 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      v70 = v21;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v21 = v70;
    }
  }
  v26 = (std::__shared_weak_count *)a4[4];
  *(_OWORD *)(a4 + 3) = v21;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((char *)a3 + 23);
  if (v29 >= 0)
    v30 = a3;
  else
    v30 = *(const void **)a3;
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)a3 + 23);
  else
    v31 = *((_QWORD *)a3 + 1);
  v32 = *((char *)a2 + 23);
  if (v32 >= 0)
    v33 = a2;
  else
    v33 = *(const void **)a2;
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)a2 + 23);
  else
    v34 = *((_QWORD *)a2 + 1);
  if (v34 >= v31)
    v35 = v31;
  else
    v35 = v34;
  v36 = memcmp(v30, v33, v35);
  if (v36)
  {
    if ((v36 & 0x80000000) == 0)
      return;
  }
  else
  {
    v37 = v31 >= v34;
    if (v31 == v34)
      v37 = *v20 >= *((_QWORD *)a2 + 3);
    if (v37)
      return;
  }
  v38 = *((_QWORD *)a2 + 2);
  v39 = *a2;
  v40 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v40;
  *a3 = v39;
  *((_QWORD *)a3 + 2) = v38;
  v41 = (_QWORD *)a2 + 3;
  v42 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v43 = *(__int128 *)((char *)a3 + 24);
  *v20 = 0;
  *((_QWORD *)a3 + 4) = 0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  *(__int128 *)((char *)a2 + 24) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      v71 = v42;
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v42 = v71;
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v42;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *((char *)a2 + 23);
  if (v50 >= 0)
    v51 = a2;
  else
    v51 = *(const void **)a2;
  if (v50 >= 0)
    v52 = *((unsigned __int8 *)a2 + 23);
  else
    v52 = *((_QWORD *)a2 + 1);
  v53 = *((char *)a1 + 23);
  if (v53 >= 0)
    v54 = a1;
  else
    v54 = *(const void **)a1;
  if (v53 >= 0)
    v55 = *((unsigned __int8 *)a1 + 23);
  else
    v55 = *((_QWORD *)a1 + 1);
  if (v55 >= v52)
    v56 = v52;
  else
    v56 = v55;
  v57 = memcmp(v51, v54, v56);
  if (v57)
  {
    if ((v57 & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
  v58 = v52 >= v55;
  if (v52 == v55)
    v58 = *v41 >= *((_QWORD *)a1 + 3);
  if (!v58)
  {
LABEL_84:
    v59 = *((_QWORD *)a1 + 2);
    v60 = *a1;
    v61 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v61;
    *a2 = v60;
    *((_QWORD *)a2 + 2) = v59;
    v62 = *(__int128 *)((char *)a1 + 24);
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    v63 = *(__int128 *)((char *)a2 + 24);
    *v41 = 0;
    *((_QWORD *)a2 + 4) = 0;
    v64 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    *(__int128 *)((char *)a1 + 24) = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        v72 = v62;
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v62 = v72;
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
    *(__int128 *)((char *)a2 + 24) = v62;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
}

void sub_20EA64038(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  BOOL v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  __int128 *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  const void *v53;
  size_t v54;
  int v55;
  const void *v56;
  size_t v57;
  size_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  const void *v74;
  size_t v75;
  int v76;
  const void *v77;
  size_t v78;
  size_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  sub_20EA63CA8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return;
  }
  else
  {
    v18 = v12 >= v15;
    if (v12 == v15)
      v18 = (unint64_t)a5[3] >= *((_QWORD *)a4 + 3);
    if (v18)
      return;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = (_QWORD *)a4 + 3;
  v23 = *(__int128 *)((char *)a4 + 24);
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  v24 = *(_OWORD *)(a5 + 3);
  a5[3] = 0;
  a5[4] = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v24;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      v93 = v23;
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v23 = v93;
    }
  }
  v28 = (std::__shared_weak_count *)a5[4];
  *(_OWORD *)(a5 + 3) = v23;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *((char *)a4 + 23);
  if (v31 >= 0)
    v32 = a4;
  else
    v32 = *(__int128 **)a4;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a4 + 23);
  else
    v33 = *((_QWORD *)a4 + 1);
  v34 = *(char *)(a3 + 23);
  if (v34 >= 0)
    v35 = (const void *)a3;
  else
    v35 = *(const void **)a3;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a3 + 23);
  else
    v36 = *(_QWORD *)(a3 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      return;
  }
  else
  {
    v39 = v33 >= v36;
    if (v33 == v36)
      v39 = *v22 >= *(_QWORD *)(a3 + 24);
    if (v39)
      return;
  }
  v40 = *(_QWORD *)(a3 + 16);
  v41 = *(_OWORD *)a3;
  v42 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v42;
  *a4 = v41;
  *((_QWORD *)a4 + 2) = v40;
  v43 = (_QWORD *)(a3 + 24);
  v44 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v45 = *(__int128 *)((char *)a4 + 24);
  *v22 = 0;
  *((_QWORD *)a4 + 4) = 0;
  v46 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v45;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      v94 = v44;
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v44 = v94;
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v44;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(char *)(a3 + 23);
  if (v52 >= 0)
    v53 = (const void *)a3;
  else
    v53 = *(const void **)a3;
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(a3 + 23);
  else
    v54 = *(_QWORD *)(a3 + 8);
  v55 = *(char *)(a2 + 23);
  if (v55 >= 0)
    v56 = (const void *)a2;
  else
    v56 = *(const void **)a2;
  if (v55 >= 0)
    v57 = *(unsigned __int8 *)(a2 + 23);
  else
    v57 = *(_QWORD *)(a2 + 8);
  if (v57 >= v54)
    v58 = v54;
  else
    v58 = v57;
  v59 = memcmp(v53, v56, v58);
  if (v59)
  {
    if ((v59 & 0x80000000) == 0)
      return;
  }
  else
  {
    v60 = v54 >= v57;
    if (v54 == v57)
      v60 = *v43 >= *(_QWORD *)(a2 + 24);
    if (v60)
      return;
  }
  v61 = *(_QWORD *)(a2 + 16);
  v62 = *(_OWORD *)a2;
  v63 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v63;
  *(_OWORD *)a3 = v62;
  *(_QWORD *)(a3 + 16) = v61;
  v64 = (_QWORD *)(a2 + 24);
  v65 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v66 = *(_OWORD *)(a3 + 24);
  *v43 = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v67 = *(std::__shared_weak_count **)(a2 + 32);
  *(_OWORD *)(a2 + 24) = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      v95 = v65;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v65 = v95;
    }
  }
  v70 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v65;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(char *)(a2 + 23);
  if (v73 >= 0)
    v74 = (const void *)a2;
  else
    v74 = *(const void **)a2;
  if (v73 >= 0)
    v75 = *(unsigned __int8 *)(a2 + 23);
  else
    v75 = *(_QWORD *)(a2 + 8);
  v76 = *(char *)(a1 + 23);
  if (v76 >= 0)
    v77 = (const void *)a1;
  else
    v77 = *(const void **)a1;
  if (v76 >= 0)
    v78 = *(unsigned __int8 *)(a1 + 23);
  else
    v78 = *(_QWORD *)(a1 + 8);
  if (v78 >= v75)
    v79 = v75;
  else
    v79 = v78;
  v80 = memcmp(v74, v77, v79);
  if (v80)
  {
    if ((v80 & 0x80000000) == 0)
      return;
    goto LABEL_115;
  }
  v81 = v75 >= v78;
  if (v75 == v78)
    v81 = *v64 >= *(_QWORD *)(a1 + 24);
  if (!v81)
  {
LABEL_115:
    v82 = *(_QWORD *)(a1 + 16);
    v83 = *(_OWORD *)a1;
    v84 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v84;
    *(_OWORD *)a2 = v83;
    *(_QWORD *)(a2 + 16) = v82;
    v85 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v86 = *(_OWORD *)(a2 + 24);
    *v64 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v87 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v86;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        v96 = v85;
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v85 = v96;
      }
    }
    v90 = *(std::__shared_weak_count **)(a2 + 32);
    *(_OWORD *)(a2 + 24) = v85;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
}

void sub_20EA644EC(_QWORD *a1, const void *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_20E9DA754(&v14, a2);
  v4 = v14;
  v3 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v15;
    if (v15)
    {
      v8 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = v3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a1 = v14;
    a1[1] = 0;
  }
}

void sub_20EA6462C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E867F44();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E877A38();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_20EA647CC(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20E867F44();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_20EA648C4(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20E867F44();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_20E877A38();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
  }
  if (v13)
    operator delete(v13);
  return v10;
}

uint64_t sub_20EA649F8(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeID TypeID;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeID v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  CFIndex Count;
  CFIndex v44;
  const void *ValueAtIndex;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  CFTypeRef v60;
  std::__shared_weak_count *v61;
  CFArrayRef theArray;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  CFTypeRef v65;
  std::__shared_weak_count *v66;

  v64 = a3;
  v5 = CFGetTypeID(*(CFTypeRef *)a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    v12 = *(std::__shared_weak_count_vtbl **)a2;
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v60 = *(CFTypeRef *)a2;
    v61 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v12 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v12) == TypeID))
    {
      CFRetain(v12);
      v16 = (std::__shared_weak_count *)operator new();
      v17 = v16;
      v16->__shared_owners_ = 0;
      v18 = (unint64_t *)&v16->__shared_owners_;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = v12;
      theArray = (CFArrayRef)v12;
      v63 = v16;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    sub_20EA644EC(&v65, theArray);
    if (v63)
    {
      v31 = &v63->__shared_owners_;
      do
        v32 = __ldaxr((unint64_t *)v31);
      while (__stlxr(v32 - 1, (unint64_t *)v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v61)
    {
      v33 = &v61->__shared_owners_;
      do
        v34 = __ldaxr((unint64_t *)v33);
      while (__stlxr(v34 - 1, (unint64_t *)v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v35 = sub_20EA600AC(&v65, **a1, (*a1)[1]);
    v36 = v66;
    if (v35)
    {
      if (v66)
      {
        v37 = (unint64_t *)&v66->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
LABEL_78:
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        return 1;
      }
      return 1;
    }
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_89;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    v21 = *(std::__shared_weak_count_vtbl **)a2;
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v65 = *(CFTypeRef *)a2;
    v66 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v21 && (v25 = CFArrayGetTypeID(), CFGetTypeID(v21) == v25))
    {
      CFRetain(v21);
      v26 = (std::__shared_weak_count *)operator new();
      v27 = v26;
      v26->__shared_owners_ = 0;
      v28 = (unint64_t *)&v26->__shared_owners_;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AFE68;
      v26->__shared_weak_owners_ = 0;
      v26[1].__vftable = v21;
      theArray = (CFArrayRef)v21;
      v63 = v26;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }
      v22 = v66;
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    if (v22)
    {
      v41 = (unint64_t *)&v22->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    Count = CFArrayGetCount(theArray);
    if (!Count)
    {
LABEL_75:
      v36 = v63;
      if (v63)
      {
        v54 = &v63->__shared_owners_;
        do
          v38 = __ldaxr((unint64_t *)v54);
        while (__stlxr(v38 - 1, (unint64_t *)v54));
        goto LABEL_78;
      }
      return 1;
    }
    v44 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v44);
      sub_20E8A9534(&v65, ValueAtIndex);
      v60 = v65;
      v61 = v66;
      if (v66)
      {
        v46 = (unint64_t *)&v66->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        v48 = v66;
        if (v66)
        {
          v49 = (unint64_t *)&v66->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      if (!sub_20EA64FD0(&v64, &v60, (uint64_t)v64))
        break;
      v51 = v61;
      if (v61)
      {
        v52 = &v61->__shared_owners_;
        do
          v53 = __ldaxr((unint64_t *)v52);
        while (__stlxr(v53 - 1, (unint64_t *)v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (++v44 == Count)
        goto LABEL_75;
    }
    v56 = v61;
    if (v61)
    {
      v57 = &v61->__shared_owners_;
      do
        v58 = __ldaxr((unint64_t *)v57);
      while (__stlxr(v58 - 1, (unint64_t *)v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v36 = v63;
    if (v63)
    {
      v59 = &v63->__shared_owners_;
      do
        v40 = __ldaxr((unint64_t *)v59);
      while (__stlxr(v40 - 1, (unint64_t *)v59));
LABEL_89:
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  return 0;
}

void sub_20EA64EEC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA64EFC()
{
  __break(1u);
}

void sub_20EA64F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA64F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA64F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA64F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA64FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA64FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA64FD0(uint64_t **a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  CFTypeRef v11;
  CFTypeID TypeID;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeID v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  CFIndex Count;
  CFIndex v42;
  const void *ValueAtIndex;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  CFTypeRef v58;
  std::__shared_weak_count *v59;
  CFTypeRef cf;
  std::__shared_weak_count *v61;
  CFArrayRef theArray;
  std::__shared_weak_count *v63;
  uint64_t v64;
  const void *v65;
  std::__shared_weak_count *v66;

  v64 = a3;
  v5 = CFGetTypeID(*a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    sub_20EA6144C(&v58, (uint64_t)a2);
    v11 = v58;
    if (v58 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v11) == TypeID))
    {
      sub_20E9DA754(&v65, v58);
      cf = v65;
      v61 = v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = v66;
        if (v66)
        {
          v16 = (unint64_t *)&v66->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      v18 = cf;
    }
    else
    {
      v18 = 0;
      cf = 0;
      v61 = 0;
    }
    sub_20EA644EC(&theArray, v18);
    v26 = v61;
    if (v61)
    {
      v27 = (unint64_t *)&v61->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v59;
    if (v59)
    {
      v30 = (unint64_t *)&v59->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = sub_20EA600AC(&theArray, **a1, (*a1)[1]);
    v33 = v63;
    if (v32)
    {
      if (v63)
      {
        v34 = (unint64_t *)&v63->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
LABEL_78:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        return 1;
      }
      return 1;
    }
    if (v63)
    {
      v36 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_89;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    sub_20EA6144C(&cf, (uint64_t)a2);
    v19 = cf;
    if (cf && (v20 = CFArrayGetTypeID(), CFGetTypeID(v19) == v20))
    {
      sub_20E8EAFFC(&v65, cf);
      theArray = (CFArrayRef)v65;
      v63 = v66;
      if (v66)
      {
        v21 = (unint64_t *)&v66->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v23 = v66;
        if (v66)
        {
          v24 = (unint64_t *)&v66->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
    else
    {
      theArray = 0;
      v63 = 0;
    }
    v38 = v61;
    if (v61)
    {
      v39 = (unint64_t *)&v61->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    Count = CFArrayGetCount(theArray);
    if (!Count)
    {
LABEL_75:
      v33 = v63;
      if (v63)
      {
        v52 = (unint64_t *)&v63->__shared_owners_;
        do
          v35 = __ldaxr(v52);
        while (__stlxr(v35 - 1, v52));
        goto LABEL_78;
      }
      return 1;
    }
    v42 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v42);
      sub_20E8A9534(&v65, ValueAtIndex);
      cf = v65;
      v61 = v66;
      if (v66)
      {
        v44 = (unint64_t *)&v66->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v46 = v66;
        if (v66)
        {
          v47 = (unint64_t *)&v66->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      if (!sub_20EA64FD0(&v64, &cf, v64))
        break;
      v49 = v61;
      if (v61)
      {
        v50 = (unint64_t *)&v61->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (++v42 == Count)
        goto LABEL_75;
    }
    v54 = v61;
    if (v61)
    {
      v55 = (unint64_t *)&v61->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v33 = v63;
    if (v63)
    {
      v57 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v57);
      while (__stlxr(v37 - 1, v57));
LABEL_89:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  return 0;
}

void sub_20EA65478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA654A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA654B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA654D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA654E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA65500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA65514(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C00E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA65524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C00E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA65554(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_8;
}

void sub_20EA655CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA655DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA6560C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 == v8)
    {
      a1[4] = v8;
      operator delete(v10);
    }
    else
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v11 = (void *)a1[3];
      a1[4] = v8;
      operator delete(v11);
    }
  }
}

void sub_20EA65708(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  sub_20EA6593C(&cf, a1);
  v4 = cf;
  v3 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20E9DA754(&v25, cf);
  v9 = v25;
  v8 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    *a2 = v9;
    a2[1] = v8;
    do
      v16 = __ldxr(v10);
    while (__stxr(v16 + 1, v10));
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v18 = __ldaxr(v10);
    while (__stlxr(v18 - 1, v10));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a2 = v25;
    a2[1] = 0;
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EA6590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA65928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA6593C(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *value;
  std::__shared_weak_count *v41;
  void *key;
  std::__shared_weak_count *v43;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_20EA5EA1C((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a2;
  v10 = (int *)(a2 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)a1 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_20EA5E4B8((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_20EA5DB5C(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v41;
    if (!v14)
      break;
    v19 = value;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v41;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v41;
    if (!v41)
      goto LABEL_28;
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v43;
      if (v43)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v43;
      if (v43)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_20EA65C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA65D20(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  sub_20EA6593C(&cf, a1);
  v4 = cf;
  v3 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  sub_20E9350E4(&v25, cf);
  v9 = v25;
  v8 = v26;
  if (v26)
  {
    v10 = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v26;
    if (v26)
    {
      v13 = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    *a2 = v9;
    a2[1] = v8;
    do
      v16 = __ldxr(v10);
    while (__stxr(v16 + 1, v10));
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v18 = __ldaxr(v10);
    while (__stlxr(v18 - 1, v10));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a2 = v25;
    a2[1] = 0;
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EA65F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA65F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA65F54(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  __int128 __dst;
  uint64_t v7;
  int v8;
  std::string v9;
  std::string *p_dst;
  std::string *v11;
  __int128 *v12;
  std::string *v13;
  std::string *v14;
  std::string **p_p_dst;

  if (*(_BYTE *)(a2 + 24))
  {
    v11 = 0;
    v12 = 0;
    p_dst = (std::string *)&v11;
    sub_20EA65D20(&p_dst, &__dst);
    *(_OWORD *)a1 = __dst;
    sub_20E866BE0((uint64_t)&p_dst, (char *)v11);
    sub_20EA66248(a1, (const void *)*MEMORY[0x24BDBD3A0], a2);
    if (!*(_BYTE *)(a2 + 88))
      return;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v11 = 0;
    v12 = 0;
    p_dst = (std::string *)&v11;
    sub_20EA65D20(&p_dst, &__dst);
    *(_OWORD *)a1 = __dst;
    sub_20E866BE0((uint64_t)&p_dst, (char *)v11);
    if (!*(_BYTE *)(a2 + 88))
      return;
  }
  v8 = -1;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 48);
  }
  v8 = 1;
  p_dst = (std::string *)&__dst;
  v11 = (std::string *)":";
  v12 = &__dst;
  v13 = (std::string *)":";
  v14 = (std::string *)":";
  sub_20E89FEA0((uint64_t *)&v12, (uint64_t)&__dst);
  std::to_string(&v9, *(_QWORD *)(a2 + 56));
  p_dst = (std::string *)&__dst;
  v11 = &v9;
  v12 = &__dst;
  v13 = &v9;
  v14 = &v9;
  if (v8 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(std::string ***, __int128 *))off_24C9C0188[v8])(&p_p_dst, &__dst);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v8 == -1)
    sub_20E877AB8();
  p_dst = &v9;
  ((void (*)(void **__return_ptr, std::string **, __int128 *))off_24C9C01A0[v8])(__p, &p_dst, &__dst);
  if (v8 != -1)
    ((void (*)(std::string **, __int128 *))off_24C9C0170[v8])(&p_dst, &__dst);
  sub_20EA66248(a1, (const void *)*MEMORY[0x24BDBD398], (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20EA6616C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_20E877A60((uint64_t)&a16);
  sub_20E86665C(v16);
  _Unwind_Resume(a1);
}

void sub_20EA66230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x20EA66218);
}

BOOL sub_20EA66248(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_20EA5E4B8(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20EA66398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20EA663AC(const void **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  const void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  CFTypeRef v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  CFTypeRef v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_15:
      v14 = *a1;
      goto LABEL_16;
    }
  }
  if (!v5)
    goto LABEL_15;
LABEL_7:
  v10 = *(CFTypeRef *)a2;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v9)
    goto LABEL_12;
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v14 = *a1;
    if (v10)
      return CFEqual(v14, *(CFTypeRef *)a2) != 0;
  }
  else
  {
LABEL_12:
    v14 = *a1;
    if (v10)
      return CFEqual(v14, *(CFTypeRef *)a2) != 0;
  }
LABEL_16:
  v16 = (std::__shared_weak_count *)a1[1];
  if (!v16)
    goto LABEL_21;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v14)
      return 0;
  }
  else
  {
LABEL_21:
    if (v14)
      return 0;
  }
  v21 = *(CFTypeRef *)a2;
  v20 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v20)
    return v21 == 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (v24)
    return v21 == 0;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v21 == 0;
}

void sub_20EA66578(CFErrorRef *a1, uint64_t a2)
{
  const __CFAllocator *Default;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  const __CFAllocator *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char **v13;
  char *v14[2];
  void *v15;
  std::__shared_weak_count *v16;

  if (*(_BYTE *)(a2 + 112))
  {
    sub_20EA65F54((uint64_t)&v13, a2 + 16);
    Default = CFAllocatorGetDefault();
    sub_20EA666F0(a1, (const std::error_condition *)a2, (void **)&v13, Default);
    v5 = (std::__shared_weak_count *)v14[0];
    if (v14[0])
    {
      v6 = (unint64_t *)(v14[0] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v13 = v14;
    sub_20EA65D20(&v13, &v15);
    v8 = v16;
    v12[0] = v15;
    v12[1] = v16;
    sub_20E866BE0((uint64_t)&v13, v14[0]);
    v9 = CFAllocatorGetDefault();
    sub_20EA666F0(a1, (const std::error_condition *)a2, v12, v9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20EA666B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20EA666C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA666DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFErrorRef *sub_20EA666F0(CFErrorRef *a1, const std::error_condition *a2, void **a3, const __CFAllocator *a4)
{
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  const __CFDictionary *size;
  const __CFDictionary *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void **v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  const std::error_category *v35;
  const std::error_category *cat;
  CFIndex val;
  CFErrorRef v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFString *v43;
  CFIndex v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  const char *v56;
  std::string v57;
  char v58;
  CFDictionaryRef theDict[2];
  void *value[2];

  *(_OWORD *)&v57.__r_.__value_.__r.__words[1] = 0uLL;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57.__r_.__value_.__l.__size_;
  sub_20EA65D20(&v57, value);
  *(_OWORD *)theDict = *(_OWORD *)value;
  sub_20E866BE0((uint64_t)&v57, (char *)v57.__r_.__value_.__l.__size_);
  v9 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_6:
    if (v9)
      goto LABEL_7;
LABEL_29:
    v18 = theDict[0];
    size = theDict[1];
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
    goto LABEL_29;
LABEL_7:
  v13 = *a3;
  v14 = (unint64_t *)a3[1];
  value[0] = *a3;
  value[1] = v14;
  if (v14)
  {
    v15 = v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20E9350E4(&v57, v13);
  size = (const __CFDictionary *)v57.__r_.__value_.__l.__size_;
  v18 = (const __CFDictionary *)v57.__r_.__value_.__r.__words[0];
  if (v57.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v25 = (unint64_t *)((char *)value[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)theDict[1];
  theDict[0] = v18;
  theDict[1] = size;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_29;
  }
LABEL_30:
  v30 = (const void **)MEMORY[0x24BDBD378];
  if (size)
  {
    v31 = (unint64_t *)((char *)size + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      (*(void (**)(const __CFDictionary *))(*(_QWORD *)size + 16))(size);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
      v34 = *v30;
      if (v18)
        goto LABEL_36;
LABEL_41:
      std::error_condition::message(&v57, a2);
      sub_20EA66248((uint64_t)theDict, v34, (uint64_t)&v57);
      goto LABEL_42;
    }
  }
  v34 = *v30;
  if (!v18)
    goto LABEL_41;
LABEL_36:
  value[0] = 0;
  if (!v34)
    goto LABEL_41;
  if (!CFDictionaryGetValueIfPresent(theDict[0], v34, (const void **)value))
    goto LABEL_41;
  sub_20EA5E5C4((CFIndex)value[0], &v57);
  if (!v58)
    goto LABEL_41;
LABEL_42:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    cat = a2->__cat_;
    if (cat != std::generic_category())
      goto LABEL_51;
  }
  else
  {
    v35 = a2->__cat_;
    if (v35 != std::generic_category())
      goto LABEL_51;
  }
  val = a2->__val_;
  if ((_DWORD)val)
  {
    sub_20E998B0C(&v57, (uint64_t)theDict);
    v38 = CFErrorCreate(a4, (CFErrorDomain)*MEMORY[0x24BDBD390], val, (CFDictionaryRef)v57.__r_.__value_.__l.__data_);
    v39 = (std::__shared_weak_count *)operator new();
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
    v40 = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (!v57.__r_.__value_.__l.__size_)
      goto LABEL_61;
    v41 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    goto LABEL_59;
  }
LABEL_51:
  v56 = (const char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  sub_20E9E0A20(&v56, (CFStringRef *)&v57);
  v43 = (const __CFString *)v57.__r_.__value_.__r.__words[0];
  v44 = a2->__val_;
  sub_20E998B0C(value, (uint64_t)theDict);
  v38 = CFErrorCreate(a4, v43, v44, (CFDictionaryRef)value[0]);
  v39 = (std::__shared_weak_count *)operator new();
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
  v45 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v46 = (unint64_t *)((char *)value[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v40 = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
  if (v57.__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v48);
    while (__stlxr(v42 - 1, v48));
LABEL_59:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_61:
  v49 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v50 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *a1 = v38;
  a1[1] = (CFErrorRef)v39;
  v52 = (unint64_t *)&v39->__shared_owners_;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 - 1, v52));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return a1;
}

void sub_20EA66B70(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA66B84()
{
  __break(1u);
}

void sub_20EA66BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  __cxa_end_catch();
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a12)
  {
    v20 = (unint64_t *)(a12 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    JUMPOUT(0x20EA66C54);
  }
  JUMPOUT(0x20EA66C98);
}

void sub_20EA66C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x20EA66C98);
}

void sub_20EA66C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA66CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20E866BE0((uint64_t)&a11, a12);
  JUMPOUT(0x20EA66CE8);
}

void sub_20EA66CF0(const void **a1, CFTypeRef *a2)
{
  const void *v4;

  if (a2)
  {
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v4 = *a1;
    if (v4)
      CFRetain(v4);
    *a2 = v4;
  }
}

CFIndex sub_20EA66D38(__CFError **a1)
{
  std::__shared_weak_count *v2;
  __CFError *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  __CFError *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFIndex result;
  CFIndex v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v3)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v3)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/ErrorRef.cpp", 244, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EB37, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = CFErrorGetCode(v7);
  v12 = result;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      return v12;
    }
  }
  return result;
}

void sub_20EA66E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA66E78(__CFError **a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  __CFError *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __CFError *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  CFDictionaryRef v24;
  std::__shared_weak_count *v25;
  CFDictionaryRef v26;
  std::__shared_weak_count *v27;
  _BYTE v28[16];

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/ErrorRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EB37, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v23 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v24 = CFErrorCopyUserInfo(v9);
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
  v25 = v13;
  v26 = v24;
  v27 = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v28[0] = 0;
  v28[8] = 0;
  sub_20EA5FF38((uint64_t)&v26, (uint64_t)v28, a2);
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v23)
  {
    v21 = (unint64_t *)&v23->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_20EA67078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA6709C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA670B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA670D8(__CFError **a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  __CFError *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __CFError *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  CFStringRef v19;
  std::string __p;
  char v21;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/ErrorRef.cpp", 254, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EB37, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v18 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v19 = CFErrorCopyDescription(v9);
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0050;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
  sub_20EA5E5C4((CFIndex)v19, &__p);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v18)
    goto LABEL_21;
  v16 = (unint64_t *)&v18->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      *a2 = __p;
      return;
    }
  }
  sub_20E860C04(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if (v21)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20EA672BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA672E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA672FC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA67314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA67338(__CFError **a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  __CFError *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __CFError *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  CFStringRef v20;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/ErrorRef.cpp", 261, (uint64_t)"IsValid()", 9, (uint64_t)&unk_21024EB37, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v19 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v20 = CFErrorCopyFailureReason(v9);
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0050;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  sub_20EA5E5C4((CFIndex)v20, a2);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
    v16 = v19;
    if (!v19)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = v19;
    if (!v19)
      return;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_20EA674E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA674FC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA67514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA67538(const std::error_condition *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  const __CFAllocator *Default;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  char **v11;
  char *v12[2];
  __int128 v13;

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  sub_20EA65D20(&v11, &v13);
  v10 = v13;
  sub_20E866BE0((uint64_t)&v11, v12[0]);
  sub_20EA66248((uint64_t)&v10, (const void *)*MEMORY[0x24BDBD3A8], a2);
  Default = CFAllocatorGetDefault();
  sub_20EA666F0(a3, a1, (void **)&v10, Default);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20EA67618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20EA67630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA67644(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E9350E4(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20EA67740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA67754(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9C01C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA677B4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA677CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA677E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA67808(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA67828(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EA67898(CFNumberRef *a1)
{
  char *v1;

  v1 = (char *)sub_20EA678D8 + 4 * aE_1[CFNumberGetType(*a1) - 1];
  __asm { BR              X10 }
}

_QWORD *sub_20EA678D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 8;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_QWORD *sub_20EA67934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 12;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_BYTE *sub_20EA67990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _BYTE *v20;
  _BYTE *result;
  char v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOBYTE(v18) = v22;
  *(_BYTE *)v16 = 5;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(1uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_BYTE)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_WORD *sub_20EA679EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _WORD *v20;
  _WORD *result;
  __int16 v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOWORD(v18) = v22;
  *(_BYTE *)v16 = 6;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(2uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_WORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_20EA67A48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _DWORD *v20;
  _DWORD *result;
  int v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LODWORD(v18) = v22;
  *(_BYTE *)v16 = 7;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_DWORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_20EA67AA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  int v20;
  _DWORD *v21;
  _DWORD *result;
  int v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 11;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

std::__shared_weak_count_vtbl **sub_20EA67B00(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BFFF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  *a1 = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_20EA67BB4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA67BCC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA67BE0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

double sub_20EA67C18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t valuePtr, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _OWORD *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  int v23;
  __int16 v24;
  const __CFAllocator *v25;
  CFNumberType v26;
  std::__shared_weak_count_vtbl *v27;
  double result;
  __int128 v29;
  _BYTE *v30;
  _BYTE *v31;
  __int16 v32;

  LOBYTE(v29) = 5;
  v22 = operator new(1uLL);
  *((_QWORD *)&v29 + 1) = v22;
  *v22 = 127;
  v30 = v22 + 1;
  v31 = v22 + 1;
  v23 = sub_210230694(v21, &v29);
  if (*((_QWORD *)&v29 + 1))
  {
    v30 = (_BYTE *)*((_QWORD *)&v29 + 1);
    operator delete(*((void **)&v29 + 1));
  }
  v24 = *(unsigned __int8 *)sub_21022FC14((uint64_t)v21);
  if (v23 == 1)
  {
    v32 = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt16Type;
  }
  else
  {
    LOBYTE(v32) = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt8Type;
  }
  v27 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v25, v26, &v32);
  sub_20EA67B00((std::__shared_weak_count_vtbl **)&v29, v27);
  result = *(double *)&v29;
  *v20 = v29;
  return result;
}

void sub_20EA67E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA67EC4(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9BFFF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA67F24(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA67F3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA67F58(CFTypeID a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  std::string v9;

  v3 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(a1);
  sub_20E8F3E5C(&v7, v3, 0);
  sub_20EA5E5C4((CFIndex)v7, &v9);
  *a2 = v9;
  memset(&v9, 0, sizeof(v9));
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20EA67FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA68010(_QWORD *a1, CFTypeRef cf)
{
  __CFString *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  unint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unsigned __int8 v15;
  CFTypeRef v16;
  std::string __p;
  int v18;
  char v19;
  char *v20;

  v16 = cf;
  if (cf)
  {
    v3 = (__CFString *)CFCopyDescription(cf);
    v13 = v3;
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B0050;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v14 = v4;
    sub_20EA5E5C4((CFIndex)v3, &__p);
    if (!(_BYTE)v18
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/Ref.cpp", 37, (uint64_t)"maybe_string", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = sub_20E86A980(a1, (uint64_t)p_p, size);
    if ((_BYTE)v18 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return v8;
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return v8;
  }
  else
  {
    v18 = 0;
    sub_20EA682C8((uint64_t)&v20, (uint64_t)&__p, &v16);
    if (v18 == -1)
      sub_20E877AB8();
    v20 = &v19;
    ((void (*)(void **__return_ptr, char **, std::string *))off_24C9C0250[v18])(&v13, &v20, &__p);
    if (v18 != -1)
      ((void (*)(char **, std::string *))off_24C9C0220[v18])(&v20, &__p);
    if ((v15 & 0x80u) == 0)
      v11 = &v13;
    else
      v11 = v13;
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14;
    v8 = sub_20E86A980(a1, (uint64_t)v11, v12);
    if (((char)v15 & 0x80000000) == 0)
      return v8;
    operator delete(v13);
    return v8;
  }
}

void sub_20EA68228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA68244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA68258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  JUMPOUT(0x20EA682C0);
}

void sub_20EA68260(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA68278(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA68288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6829C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  sub_20E86665C((uint64_t)&a9);
  JUMPOUT(0x20EA682C0);
}

void sub_20EA682C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;

  if (*a3)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_QWORD *)(v4 + 272) = 0;
    sub_20E863438(v4);
    v22 = (_QWORD *)v4;
    std::ostream::operator<<();
    v5 = *(_DWORD *)(v4 + 120);
    if ((v5 & 0x10) != 0)
    {
      v9 = *(_QWORD *)(v4 + 112);
      v10 = *(_QWORD *)(v4 + 72);
      if (v9 < v10)
      {
        *(_QWORD *)(v4 + 112) = v10;
        v9 = v10;
      }
      v11 = *(const void **)(v4 + 64);
      v6 = v9 - (_QWORD)v11;
      if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_25;
    }
    else
    {
      if ((v5 & 8) == 0)
      {
        v6 = 0;
        HIBYTE(v20) = 0;
        v7 = __dst;
        goto LABEL_17;
      }
      v11 = *(const void **)(v4 + 40);
      v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v11;
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
        sub_20E860B7C();
    }
    if (v6 >= 0x17)
    {
      v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v12 = v6 | 7;
      v13 = v12 + 1;
      v7 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v6;
      v20 = v13 | 0x8000000000000000;
      __dst[0] = v7;
    }
    else
    {
      HIBYTE(v20) = v6;
      v7 = __dst;
      if (!v6)
        goto LABEL_17;
    }
    memmove(v7, v11, v6);
LABEL_17:
    *((_BYTE *)v7 + v6) = 0;
    v14 = v22;
    if (v22)
    {
      v15 = MEMORY[0x24BEDB7F0];
      v16 = *MEMORY[0x24BEDB7F0];
      *v22 = *MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(v15 + 72);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
      v14[3] = MEMORY[0x24BEDB848] + 16;
      v14[2] = v17;
      if (*((char *)v14 + 111) < 0)
        operator delete((void *)v14[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v14 + 16);
      MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
    }
    v22 = (_QWORD *)a2;
    v23 = (const char *)__dst;
    v24 = a2;
    v25 = (const char *)__dst;
    v26 = (const char *)__dst;
    v18 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v18 == -1)
      sub_20E877AB8();
    v21 = &v22;
    ((void (*)(_QWORD ***, uint64_t))off_24C9C0208[v18])(&v21, a2);
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
    return;
  }
  v22 = (_QWORD *)a2;
  v23 = "nullptr";
  v24 = a2;
  v25 = "nullptr";
  v26 = "nullptr";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_20E877AB8();
  __dst[0] = &v22;
  ((void (*)(void **, uint64_t))off_24C9C0238[v8])(__dst, a2);
}

void sub_20EA6857C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20EA685A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA685BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA685D0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA67754(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C01C8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA686AC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA686C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *sub_20EA686D8(_OWORD *a1, uint64_t a2, Boolean a3)
{
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  CFStringRef filePath;
  std::__shared_weak_count *v13;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  sub_20EA5E4B8((uint64_t)__p, &filePath);
  v5 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, a3);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (SHIBYTE(v11) < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  sub_20EA68C08((std::__shared_weak_count_vtbl **)__p, v5, 0);
  *a1 = *(_OWORD *)__p;
  return a1;
}

void sub_20EA687D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6882C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string __p;
  char v16;

  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/URLRef.cpp", 58, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  v9 = (std::__shared_weak_count_vtbl *)CFURLCopyScheme(*(CFURLRef *)a1);
  sub_20E8F3E5C(&v13, v9, 0);
  sub_20EA5E5C4((CFIndex)v13, &__p);
  v10 = v14;
  if (!v14)
    goto LABEL_14;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_14:
    if (v16)
      goto LABEL_15;
LABEL_19:
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_20EA689BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA689E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA689F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  BOOL v11;
  std::__shared_weak_count_vtbl *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::string __p;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/src/URLRef.cpp", 64, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_10:
  sub_20EA6882C(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v11 = LODWORD(p_p->__r_.__value_.__l.__data_) == 1701603686;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
  }
  if (!v11)
  {
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
LABEL_19:
  v12 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  sub_20E8F3E5C(&v19, v12, 0);
  sub_20EA5E5C4((CFIndex)v19, &__p);
  v22[0] = __p.__r_.__value_.__l.__size_;
  v13 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v15 = v22[0];
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(a2 + 23) = v14;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20EA68BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20EA68C08(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA67754(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C01C8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA68CE4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA68CFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EA68D10(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::__shared_weak_count_vtbl **sub_20EA68D1C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20EA68E24(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C0278;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA68DF8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA68E10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA68E24(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9C0278;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20EA68E84(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20EA68E9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA68EB4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA68ED8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA68EF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA68F68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA68FD0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69038(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA690A0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69108(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69170(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA691D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69240(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA692A8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69310(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69378(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA693E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69448(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA694B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA69518(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA69580(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA695E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20EA695F0(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20EA695F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20EA6960C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA69690(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA696F8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA69760(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20EA69768(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20EA69770@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20EA69784(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA69808(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA69870()
{
  return 29;
}

uint64_t sub_20EA69878(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA69880@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA69894(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA69918(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA69980()
{
  return 25;
}

uint64_t sub_20EA69988(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA69990@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA699A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA69A28(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA69C40(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EA69B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA69B30(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA69B98()
{
  return 1;
}

uint64_t sub_20EA69BA0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EA69BA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EA69BBC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA69C40(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20EA69D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA69D90(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 2;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6A00C(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA69EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA69EFC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA69F64()
{
  return 5;
}

uint64_t sub_20EA69F6C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA69F74@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA69F88(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6A00C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20EA6A118(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6A15C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6A1C4()
{
  return 3;
}

uint64_t sub_20EA6A1CC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EA6A1D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EA6A1EC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA6A270(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6A4EC(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA6A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6A3DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6A444()
{
  return 29;
}

uint64_t sub_20EA6A44C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6A454@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6A468(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6A4EC(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20EA6A5F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6A63C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6A8B8(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA6A794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6A7A8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6A810()
{
  return 25;
}

uint64_t sub_20EA6A818(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6A820@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6A834(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6A8B8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20EA6A9C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6AA08(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6AC20(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EA6AAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6AB10(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6AB78()
{
  return 1;
}

uint64_t sub_20EA6AB80(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EA6AB88@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EA6AB9C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6AC20(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20EA6AD2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6AD70(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6ADD8()
{
  return 5;
}

uint64_t sub_20EA6ADE0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6ADE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6ADFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA6AE80(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6B09C(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EA6AF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6AF88(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6AFF0()
{
  return 3;
}

uint64_t sub_20EA6AFF8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20EA6B000@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20EA6B018(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6B09C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20EA6B1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6B1EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6B254()
{
  return 32;
}

uint64_t sub_20EA6B25C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6B264@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6B27C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA6B300(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6B368()
{
  return 28;
}

uint64_t sub_20EA6B370(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6B378@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6B390(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA6B414(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6B694(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20EA6B56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6B580(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6B5E8()
{
  return 32;
}

uint64_t sub_20EA6B5F0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6B5F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6B610(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20EA6B694(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20EA6B7A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6B7E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6B84C()
{
  return 28;
}

uint64_t sub_20EA6B854(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20EA6B85C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20EA6B874(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20EA6B8F8(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EA6BA00(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EA6B9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6BA00(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20EA6BB0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6BB50(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"uint8";
  v12 = 0x500000000000000;
  sub_20E877C80(&__p, (uint64_t)v11, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20EA6BC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EA6BC60(unsigned int *a1@<X0>, unsigned int *a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int64_t v13;
  unsigned int *v14;
  std::string::size_type v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  unsigned int *i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;

  v9 = a1 - a2;
  if (v9 >= -1)
    v10 = -1;
  else
    v10 = a1 - a2;
  v11 = a4 * ~v10;
  v12 = 0;
  v13 = (char *)a1 - (char *)a2;
  if (a1 != a2)
  {
    v14 = a1;
    do
    {
      sub_20E9F6A6C(v14);
      if ((v24 & 0x80u) == 0)
        v15 = v24;
      else
        v15 = v23;
      if ((char)v24 < 0)
        operator delete(__p);
      v12 += v15;
      ++v14;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v12 + v11);
  if (v13 < 0)
  {
    sub_20E9F6A6C(a1);
    if ((v24 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    std::string::append(a5, p_p, v17);
    if ((char)v24 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v9 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v9 + 1) < 2)
    {
      return;
    }
    for (i = a1 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      sub_20E9F6A6C(i);
      if ((v24 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v20 = v24;
      else
        v20 = v23;
      std::string::append(a5, v19, v20);
      if ((char)v24 < 0)
        operator delete(__p);
    }
  }
}

void sub_20EA6BE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_20EA6BE4C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EA6BF74();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EA6BF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *sub_20EA6BF74()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50090);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50090))
    return &stru_254A50078;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 4U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50078);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50078, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50090);
  return &stru_254A50078;
}

void sub_20EA6C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50090);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50090);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA6C06C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20EA6C114(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA6C168(uint64_t a1, uint64_t a2, __int16 *a3)
{
  std::string *v12;
  std::string *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  unint64_t v39;
  std::string v40;
  double v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  double *v46;

  _H0 = *a3;
  __asm { FCVT            S0, H0; __val }
  std::to_string(&v40, _S0);
  v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v40;
  else
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v15 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v40.__r_.__value_.__r.__words[2]) - 1)
      {
        v12 = &v40;
        goto LABEL_17;
      }
LABEL_15:
      v41 = *(double *)&a2;
      v42 = &v40;
      v43 = a2;
      v44 = &v40;
      v45 = &v40;
      v17 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v17 == -1)
        sub_20E877AB8();
LABEL_16:
      __p[0] = &v41;
      ((void (*)(void **, uint64_t))off_24C9C1140[v17])(__p, a2);
LABEL_44:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_45:
      operator delete(v40.__r_.__value_.__l.__data_);
      return;
    }
    v16 = v15[size--];
  }
  while (v16 == 48);
  if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v40.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  v18 = (_QWORD *)operator new();
  sub_21023865C((uint64_t)v18, (char *)v12);
  __p[0] = v18;
  v41 = 0.0;
  v19 = (_QWORD *)MEMORY[0x212BC5BDC](v18, &v41);
  v20 = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5;
  _S0 = v41;
  __asm { FCVT            H8, S0 }
  v22 = MEMORY[0x24BEDB7F0];
  v23 = *MEMORY[0x24BEDB7F0];
  *v18 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
  v18[3] = MEMORY[0x24BEDB848] + 16;
  v18[2] = v24;
  if (*((char *)v18 + 111) < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v18 + 16);
  MEMORY[0x212BC6398](v18, 0x10B2C40EED050F3);
  LOWORD(_S0) = 0;
  if (!v20)
    _S0 = _S8;
  _H1 = *a3;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
  }
  if (_S0 != _S1)
  {
    v41 = *(double *)&a2;
    v42 = &v40;
    v43 = a2;
    v44 = &v40;
    v45 = &v40;
    v17 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v17 == -1)
      sub_20E877AB8();
    goto LABEL_16;
  }
  v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v40;
  else
    v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v40.__r_.__value_.__l.__size_;
  v31 = 1;
  if (v30->__r_.__value_.__s.__data_[size] == 46)
    v31 = 2;
  v32 = v31 + size;
  if (v29 >= v32)
    v33 = v32;
  else
    v33 = v29;
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    __p[1] = (void *)v33;
    v39 = v36 | 0x8000000000000000;
    __p[0] = v34;
    goto LABEL_41;
  }
  HIBYTE(v39) = v33;
  v34 = __p;
  if (v33)
LABEL_41:
    memmove(v34, v30, v33);
  *((_BYTE *)v34 + v33) = 0;
  v41 = *(double *)&a2;
  v42 = (std::string *)__p;
  v43 = a2;
  v44 = (std::string *)__p;
  v45 = (std::string *)__p;
  v37 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v37 == -1)
    sub_20E877AB8();
  v46 = &v41;
  ((void (*)(double **, uint64_t))off_24C9C0398[v37])(&v46, a2);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_44;
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
}

void sub_20EA6C4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6C56C(uint64_t *a1, __int128 *a2, unsigned int a3)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  int v12;

  v12 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v9 = v11;
  *(_OWORD *)__p = __dst;
  v5 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = a3;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v9 >= 0)
    v7 = HIBYTE(v9);
  else
    v7 = (uint64_t)__p[1];
  sub_20E86A980(a1, (uint64_t)v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_20EA6C64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA6C660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6C67C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6C97C(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA6C930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6C97C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6C9F4();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6C9F4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50170);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50170))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6CCB0();
    sub_20EA6CBF8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6CBF8((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50158, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50158, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50170);
          return &stru_254A50158;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50158;
}

void sub_20EA6CB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50170);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50170);
  _Unwind_Resume(a1);
}

void sub_20EA6CBF8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6CC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6CCB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50190);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50190))
    return &stru_254A50178;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50178);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50178, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50190);
  return &stru_254A50178;
}

void sub_20EA6CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50190);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50190);
  _Unwind_Resume(a1);
}

std::string *sub_20EA6CDA8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A500F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A500F0))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20E8A46B4();
    sub_20EA6CFAC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6CFAC((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A500D8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A500D8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A500F0);
          return &stru_254A500D8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A500D8;
}

void sub_20EA6CEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A500F0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A500F0);
  _Unwind_Resume(a1);
}

void sub_20EA6CFAC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6D048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6D064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (*(_BYTE *)(a3 + 8))
  {
    std::to_string(&v6, *(_QWORD *)a3);
    v8 = a2;
    v9 = &v6;
    v10 = a2;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24C9C1170[v4])(&v7, a2);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a2;
    v9 = (std::string *)"nullopt";
    v10 = a2;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5 == -1)
      sub_20E877AB8();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24C9C1158[v5])(&v6, a2);
  }
}

void sub_20EA6D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6D174(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA6D198(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EA6D1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000021030CA1ALL)
    return a1 + 24;
  if (((v3 & 0x800000021030CA1ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000021030CA1ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021030CA1ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_20EA6D268(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6D4E4(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20EA6D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6D4E4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6D55C();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6D55C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A500B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A500B0))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6D818();
    sub_20EA6D760((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6D760((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50098, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50098, &dword_20E81F000);
          __cxa_guard_release(&qword_254A500B0);
          return &stru_254A50098;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50098;
}

void sub_20EA6D6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A500B0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A500B0);
  _Unwind_Resume(a1);
}

void sub_20EA6D760(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6D7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6D818()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A500D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A500D0))
    return &stru_254A500B8;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A500B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A500B8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A500D0);
  return &stru_254A500B8;
}

void sub_20EA6D8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A500D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A500D0);
  _Unwind_Resume(a1);
}

void sub_20EA6D910(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6DB90(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20EA6DB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6DB90(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6DC08();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6DC08()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50110))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6DEC4();
    sub_20EA6DE0C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6DE0C((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A500F8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A500F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50110);
          return &stru_254A500F8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A500F8;
}

void sub_20EA6DD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50110);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50110);
  _Unwind_Resume(a1);
}

void sub_20EA6DE0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6DEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6DEC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50130);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50130))
    return &stru_254A50118;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray16f]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50118);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50118, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50130);
  return &stru_254A50118;
}

void sub_20EA6DF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50130);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50130);
  _Unwind_Resume(a1);
}

void sub_20EA6DFBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6E23C(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_20EA6E1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6E23C(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6E2B4();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6E2B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50150);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50150))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20E8A225C();
    sub_20EA6E4B8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6E4B8((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50138, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50138, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50150);
          return &stru_254A50138;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50138;
}

void sub_20EA6E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50150);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50150);
  _Unwind_Resume(a1);
}

void sub_20EA6E4B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6E554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EA6E570(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6E870(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA6E824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6E870(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6E8E8();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6E8E8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A501B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A501B0))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6EBA4();
    sub_20EA6EAEC((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6EAEC((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50198, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50198, &dword_20E81F000);
          __cxa_guard_release(&qword_254A501B0);
          return &stru_254A50198;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50198;
}

void sub_20EA6EA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A501B0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A501B0);
  _Unwind_Resume(a1);
}

void sub_20EA6EAEC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6EB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6EBA4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A501D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A501D0))
    return &stru_254A501B8;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra8u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A501B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A501B8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A501D0);
  return &stru_254A501B8;
}

void sub_20EA6EC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A501D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A501D0);
  _Unwind_Resume(a1);
}

void sub_20EA6EC9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 28)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6EFA0(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA6EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6EFA0(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6F018();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6F018()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A501F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A501F0))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6F2D4();
    sub_20EA6F21C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6F21C((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A501D8, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A501D8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A501F0);
          return &stru_254A501D8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A501D8;
}

void sub_20EA6F168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A501F0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A501F0);
  _Unwind_Resume(a1);
}

void sub_20EA6F21C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6F2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6F2D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50210);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50210))
    return &stru_254A501F8;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A501F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A501F8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50210);
  return &stru_254A501F8;
}

void sub_20EA6F38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50210);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50210);
  _Unwind_Resume(a1);
}

void sub_20EA6F3CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 29)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6F6CC(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA6F680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6F6CC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6F744();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6F744()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50230);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50230))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA6FA00();
    sub_20EA6F948((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA6F948((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50218, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50218, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50230);
          return &stru_254A50218;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50218;
}

void sub_20EA6F894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50230);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50230);
  _Unwind_Resume(a1);
}

void sub_20EA6F948(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA6F9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA6FA00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50250);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50250))
    return &stru_254A50238;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50238);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50238, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50250);
  return &stru_254A50238;
}

void sub_20EA6FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50250);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50250);
  _Unwind_Resume(a1);
}

void sub_20EA6FAF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA6FDFC(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 30) & 0x3FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20EA6FDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA6FDFC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_20EA6FE74();
  v3 = sub_20EA6CDA8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_20E8A2A0C("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_20EA6FE74()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A50270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50270))
  {
    sub_20E8610C0(v7, "ConstImageView");
    v2 = sub_20EA70130();
    sub_20EA70078((uint64_t)v2, (uint64_t)v9);
    v3 = sub_20E8A41FC();
    sub_20EA70078((uint64_t)v3, (uint64_t)&__p);
    sub_20E877C80(v6, (uint64_t)v9, 2uLL);
    sub_21023CE38((char *)v7, (uint64_t *)v6, &stru_254A50258, v4, v5);
    sub_20E89FB98(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50258, &dword_20E81F000);
          __cxa_guard_release(&qword_254A50270);
          return &stru_254A50258;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_254A50258;
}

void sub_20EA6FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_254A50270);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_254A50270);
  _Unwind_Resume(a1);
}

void sub_20EA70078(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_210236E50(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EA70114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EA70130()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50290);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50290))
    return &stru_254A50278;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A50278);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50278, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50290);
  return &stru_254A50278;
}

void sub_20EA701E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50290);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50290);
  _Unwind_Resume(a1);
}

BOOL sub_20EA70228(uint64_t a1, unsigned int a2)
{
  _BOOL8 v3;
  uint64_t v4;
  void **v5;
  char *v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  std::string __dst;
  void *__p[2];
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
  }
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = (uint64_t)__p[1];
  if (v4 >= 1)
  {
    v5 = __p;
    if (v16 < 0)
      v5 = (void **)__p[0];
    if (*(_BYTE *)v5 == 104)
    {
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1])
        {
          v6 = (char *)__p[0] + 1;
          v7 = (std::string::size_type)__p[1] - 1;
          if ((unint64_t)__p[1] - 1 < 0x7FFFFFFFFFFFFFF8)
          {
LABEL_16:
            if (v7 >= 0x17)
            {
              v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v7 | 7) != 0x17)
                v10 = v7 | 7;
              v11 = v10 + 1;
              p_dst = (std::string *)operator new(v10 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
              p_dst = &__dst;
              if (!v7)
              {
LABEL_26:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                v12 = std::stoi(&__dst, 0, 10);
                v13 = v12;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  v3 = v13 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                else
                {
                  v3 = v12 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                goto LABEL_20;
              }
            }
            memmove(p_dst, v6, v7);
            goto LABEL_26;
          }
LABEL_31:
          sub_20E860B7C();
        }
      }
      else if (HIBYTE(v16))
      {
        v6 = (char *)__p + 1;
        v7 = HIBYTE(v16) - 1;
        if (v7 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_16;
        goto LABEL_31;
      }
      sub_20E89FD0C();
    }
  }
  v3 = 0;
  if (v16 < 0)
LABEL_20:
    operator delete(__p[0]);
  return v3;
}

void sub_20EA703DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA70428@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void **a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  char **v29;
  char *v30;
  uint64_t *v31;
  uint64_t (**v32)();
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  char **v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  char **v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  char **v114;
  uint64_t **v115;
  uint64_t **v116;
  uint64_t **v117;
  uint64_t **v118;
  char **v119;
  char **v120;
  char **v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t **v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  __int128 *v130;
  uint64_t *v131;
  char v132;
  char v133;
  char v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char **v145;
  char **v146;
  char **v147;
  uint64_t *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  char **v154;
  char **v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  BOOL v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _BYTE *v228;
  _QWORD *v229;
  int64_t v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  char *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  _OWORD *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  void **v266;
  uint64_t **v267;
  uint64_t **v268;
  uint64_t **v269;
  uint64_t **v270;
  char **v271;
  uint64_t **v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  _QWORD *v276;
  char *v277;
  uint64_t v278;
  uint64_t **v279;
  char **v280;
  uint64_t **v281;
  uint64_t **v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t **v285;
  char **v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  __int128 *v292;
  __int128 *v293;
  uint64_t *v294;
  char *v295;
  uint64_t *v296;
  uint64_t **v297;
  uint64_t **v298;
  uint64_t **v299;
  uint64_t **v300;
  char **v301;
  uint64_t **v302;
  uint64_t **v303;
  uint64_t **v304;
  uint64_t **v305;
  uint64_t *v306;
  uint64_t **v307;
  char **v308;
  uint64_t *v309;
  char **v310;
  char **v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t *v323;
  char **v324;
  uint64_t v325;
  uint64_t **v326;
  uint64_t *v327;
  uint64_t *v328;
  uint64_t *v329;
  char **v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t *v338;
  char *v339;
  _QWORD *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351;
  _QWORD v352[3];
  uint64_t *v353;
  uint64_t v354;
  _QWORD v355[3];
  char *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t *v359;
  __int128 v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t *v370;
  _QWORD v371[3];
  uint64_t *v372;
  __int128 v373;
  uint64_t v374;
  char *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  __int128 v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t *v408;
  _QWORD v409[3];
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  __int128 v431;
  uint64_t v432;
  char *v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD v439[3];
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t *v448;
  _QWORD v449[3];
  char *v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  uint64_t *v454;
  uint64_t v455;
  char *v456;
  _QWORD v457[3];

  v278 = a2;
  v457[1] = *MEMORY[0x24BDAC8D0];
  v8 = *result;
  v7 = result[1];
  v290 = result;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 3);
    v266 = a4;
    if (v10 > 0x1555555555555555)
      sub_20E867F44();
    v14 = (char *)operator new(0x3333333333333334 * (v9 >> 3));
    v15 = 0;
    *a4 = v14;
    a4[1] = v14;
    v340 = v439;
    v309 = &v440;
    a4[2] = &v14[12 * v10];
    v336 = &v429;
    v326 = &v430;
    v16 = v409;
    v291 = &v390;
    v303 = &v443;
    v335 = &v442;
    v302 = &v446;
    v332 = &v445;
    v17 = v352;
    v287 = &v353;
    v18 = (char *)v355;
    v286 = &v356;
    v315 = &v358;
    v285 = &v359;
    v284 = (uint64_t *)&v362;
    v334 = &v364;
    v283 = &v365;
    v329 = &v367;
    v282 = &v368;
    v323 = &v412;
    v271 = &v413;
    v272 = &v410;
    v319 = &v432;
    v288 = (uint64_t *)&v434;
    v301 = &v433;
    v321 = &v435;
    v322 = &v415;
    v333 = &v399;
    v269 = &v400;
    v270 = &v416;
    v314 = &v402;
    v267 = &v406;
    v268 = &v403;
    v337 = &v419;
    v299 = &v420;
    v300 = &v436;
    v320 = &v422;
    v312 = &v425;
    v313 = &v405;
    v297 = &v426;
    v298 = &v423;
    v324 = &v450;
    v19 = (char *)&v452;
    v310 = &v456;
    v311 = &v453;
    v289 = &v455;
    v293 = (__int128 *)v457;
    v330 = (char **)&v372;
    v274 = (uint64_t *)&v376;
    v327 = &v374;
    v339 = (char *)&v373 + 8;
    v338 = &v377;
    v307 = &v378;
    v308 = &v375;
    v306 = (uint64_t *)&v381;
    v317 = &v383;
    v318 = &v380;
    v316 = &v386;
    v304 = &v387;
    v305 = &v384;
    v292 = &v379;
    v328 = &v342;
    v295 = (char *)&v345;
    v280 = &v346;
    v281 = &v343;
    v294 = &v348;
    v279 = &v349;
    v273 = a3;
    v296 = &v394;
    v275 = v352;
    v276 = v409;
    v277 = (char *)v355;
    v331 = &v361;
    while (1)
    {
      v21 = v19;
      v325 = v15;
      v22 = (uint64_t **)(v8 + 120 * v15);
      v23 = *v22;
      v24 = v22[1];
      v25 = (uint64_t)&(*v22)[4 * (_QWORD)v24];
      v448 = *v22;
      v449[0] = &off_24C9C1278;
      *(double *)&v449[1] = a5;
      v450 = (char *)v449;
      v451 = v25;
      v26 = (char *)v449;
      v27 = (char *)v449;
      if (v24)
      {
        while (1)
        {
          v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v26 + 48))(v26);
          v23 = v448;
          if ((v28 & 1) != 0)
            break;
          v23 = v448 + 4;
          v448 = v23;
          if (v23 == (uint64_t *)v451)
            break;
          v26 = v450;
          if (!v450)
            sub_20E86D37C();
        }
        v27 = v450;
      }
      v438 = v25;
      v439[0] = &off_24C9C1278;
      *(double *)&v439[1] = a5;
      v440 = (uint64_t)v340;
      v441 = v25;
      v29 = v330;
      v370 = v23;
      if (!v27)
        goto LABEL_16;
      if (v27 != (char *)v449)
        break;
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
      *(_QWORD *)&v373 = v451;
      *((_QWORD *)&v373 + 1) = v438;
      v39 = v274;
      v33 = v331;
      if (v440)
      {
        v34 = (uint64_t)v340;
        if ((_QWORD *)v440 == v340)
        {
          v30 = v18;
          v31 = v17;
          v32 = (uint64_t (**)())v439[0];
          goto LABEL_17;
        }
        v376 = (uint64_t *)v440;
        v39 = v309;
      }
      v30 = v18;
      v31 = v17;
      *v39 = 0;
      v35 = (uint64_t)v340;
      v36 = (_QWORD *)v440;
      v377 = v441;
      if ((_QWORD *)v440 == v340)
      {
LABEL_24:
        v36 = (_QWORD *)v35;
        v38 = 4;
        v17 = v31;
        v18 = v30;
        v37 = (char *)v289;
        goto LABEL_25;
      }
LABEL_18:
      v17 = v31;
      v18 = v30;
      v37 = (char *)v289;
      if (!v36)
        goto LABEL_26;
      v38 = 5;
LABEL_25:
      (*(void (**)(void))(*v36 + 8 * v38))();
LABEL_26:
      v40 = v450;
      if (v450 == (char *)v449)
      {
        v40 = (char *)v449;
        v41 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_31;
        v41 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_31:
      v428 = (uint64_t)v370;
      v42 = v326;
      if (!v372)
        goto LABEL_34;
      if (v372 != v371)
      {
        v430 = v372;
        v42 = (uint64_t **)v330;
LABEL_34:
        *v42 = 0;
        goto LABEL_36;
      }
      v430 = v336;
      (*(void (**)(_QWORD *))(v371[0] + 24))(v371);
LABEL_36:
      v431 = v373;
      v43 = v288;
      if (!v376)
        goto LABEL_39;
      if (v376 != v327)
      {
        v434 = v376;
        v43 = v274;
LABEL_39:
        *v43 = 0;
        goto LABEL_41;
      }
      v434 = v319;
      (*(void (**)(void))(v374 + 24))();
LABEL_41:
      v44 = v376;
      v435 = v377;
      if (v376 == v327)
      {
        v44 = v327;
        v45 = 4;
      }
      else
      {
        if (!v376)
          goto LABEL_46;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_46:
      v46 = v372;
      if (v372 == v371)
      {
        v46 = v371;
        v47 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_51;
        v47 = 5;
      }
      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_51:
      v48 = (uint64_t)v430;
      v418 = v428;
      if (!v430)
        goto LABEL_54;
      if (v430 != v336)
      {
        v48 = (*(uint64_t (**)(void))(*v430 + 16))();
LABEL_54:
        v420 = (uint64_t *)v48;
        goto LABEL_56;
      }
      v420 = v337;
      (*(void (**)(uint64_t *))(v429 + 24))(v336);
LABEL_56:
      v408 = (uint64_t *)*((_QWORD *)&v431 + 1);
      v421 = v431;
      v49 = (uint64_t)v434;
      if (!v434)
        goto LABEL_59;
      if (v434 != v319)
      {
        v49 = (*(uint64_t (**)(void))(*v434 + 16))();
LABEL_59:
        v410 = (_QWORD *)v49;
        goto LABEL_61;
      }
      v410 = v16;
      (*(void (**)(uint64_t *, _QWORD *))(v432 + 24))(v319, v16);
LABEL_61:
      v411 = v435;
      v50 = (uint64_t)v420;
      v398 = v418;
      if (!v420)
        goto LABEL_64;
      if (v420 != v337)
      {
        v50 = (*(uint64_t (**)(void))(*v420 + 16))();
LABEL_64:
        v400 = (uint64_t *)v50;
        goto LABEL_66;
      }
      v400 = v333;
      (*(void (**)(uint64_t *))(v419 + 24))(v337);
LABEL_66:
      v401 = v421;
      v51 = (uint64_t)v410;
      v341 = v408;
      if (!v410)
        goto LABEL_69;
      if (v410 != v16)
      {
        v51 = (*(uint64_t (**)(void))(*v410 + 16))();
LABEL_69:
        v343 = (uint64_t *)v51;
        goto LABEL_71;
      }
      v343 = v328;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_71:
      v344 = v411;
      sub_20EA74924((uint64_t)&v448, &v398, &v341, a6);
      v52 = (uint64_t)v410;
      v393 = v408;
      if (!v410)
      {
        v396 = 0;
        v397 = v411;
        v389 = v408;
LABEL_79:
        v391 = (uint64_t *)v52;
        goto LABEL_80;
      }
      if (v410 == v16)
      {
        v396 = (uint64_t)v296;
        (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
      }
      else
      {
        v396 = (*(uint64_t (**)(void))(*v410 + 16))();
      }
      v397 = v411;
      v52 = (uint64_t)v410;
      v389 = v408;
      if (!v410)
        goto LABEL_79;
      if (v410 != v16)
      {
        v52 = (*(uint64_t (**)(void))(*v410 + 16))();
        goto LABEL_79;
      }
      v391 = v291;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_80:
      v392 = v411;
      sub_20EA74924((uint64_t)&v438, &v393, &v389, a6);
      v370 = v448;
      v53 = v330;
      if (!v450)
        goto LABEL_83;
      if (v450 != (char *)v449)
      {
        v372 = (uint64_t *)v450;
        v53 = v324;
LABEL_83:
        *v53 = 0;
        goto LABEL_85;
      }
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
LABEL_85:
      *(_QWORD *)&v373 = v451;
      v54 = v308;
      if (!v453)
        goto LABEL_88;
      if (v453 != v21)
      {
        v375 = v453;
        v54 = v311;
LABEL_88:
        *v54 = 0;
        goto LABEL_90;
      }
      v375 = v339;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_90:
      v376 = v454;
      v55 = v307;
      if (!v456)
        goto LABEL_93;
      if (v456 != v37)
      {
        v378 = (uint64_t *)v456;
        v55 = v310;
LABEL_93:
        *v55 = 0;
        goto LABEL_95;
      }
      v378 = v338;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_95:
      *(_QWORD *)&v379 = v457[0];
      *((_QWORD *)&v379 + 1) = v438;
      v56 = v306;
      if (!v440)
        goto LABEL_98;
      if ((_QWORD *)v440 != v340)
      {
        v381 = (uint64_t *)v440;
        v56 = v309;
LABEL_98:
        *v56 = 0;
        goto LABEL_100;
      }
      v381 = v318;
      (*(void (**)(uint64_t, _QWORD *))(v439[0] + 24))((uint64_t)v340, v318);
LABEL_100:
      v382 = v441;
      v57 = v305;
      if (!v443)
        goto LABEL_103;
      if (v443 != v335)
      {
        v384 = v443;
        v57 = v303;
LABEL_103:
        *v57 = 0;
        goto LABEL_105;
      }
      v384 = v317;
      (*(void (**)(void))(v442 + 24))();
LABEL_105:
      v385 = v444;
      v58 = v304;
      if (!v446)
        goto LABEL_108;
      if (v446 != v332)
      {
        v387 = v446;
        v58 = v302;
LABEL_108:
        *v58 = 0;
        goto LABEL_110;
      }
      v387 = v316;
      (*(void (**)(void))(v445 + 24))();
LABEL_110:
      v59 = v446;
      v388 = v447;
      v60 = (uint64_t)v340;
      v61 = v335;
      if (v446 == v332)
      {
        v59 = v332;
        v62 = 4;
      }
      else
      {
        if (!v446)
          goto LABEL_115;
        v62 = 5;
      }
      (*(void (**)(void))(*v59 + 8 * v62))();
      v60 = (uint64_t)v340;
      v61 = v335;
LABEL_115:
      v63 = v443;
      if (v443 == v61)
      {
        v63 = v61;
        v64 = 4;
      }
      else
      {
        if (!v443)
          goto LABEL_120;
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
      v60 = (uint64_t)v340;
LABEL_120:
      v65 = (_QWORD *)v440;
      if (v440 == v60)
      {
        v65 = (_QWORD *)v60;
        v66 = 4;
      }
      else
      {
        if (!v440)
          goto LABEL_125;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_125:
      v67 = v391;
      if (v391 == v291)
      {
        v67 = v291;
        v68 = 4;
      }
      else
      {
        if (!v391)
          goto LABEL_130;
        v68 = 5;
      }
      (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_130:
      v69 = (_QWORD *)v396;
      if ((uint64_t *)v396 == v296)
      {
        v69 = v296;
        v70 = 4;
      }
      else
      {
        if (!v396)
          goto LABEL_135;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_135:
      v71 = v456;
      if (v456 == v37)
      {
        v71 = v37;
        v72 = 4;
      }
      else
      {
        if (!v456)
          goto LABEL_140;
        v72 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_140:
      v73 = v453;
      if (v453 == v21)
      {
        v73 = v21;
        v74 = 4;
      }
      else
      {
        if (!v453)
          goto LABEL_145;
        v74 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_145:
      v75 = v450;
      if (v450 == (char *)v449)
      {
        v75 = (char *)v449;
        v76 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_150;
        v76 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_150:
      v77 = v343;
      if (v343 == v328)
      {
        v77 = v328;
        v78 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_155;
        v78 = 5;
      }
      (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_155:
      v79 = v400;
      if (v400 == v333)
      {
        v79 = v333;
        v80 = 4;
      }
      else
      {
        if (!v400)
          goto LABEL_160;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_160:
      v81 = v410;
      if (v410 == v16)
      {
        v81 = v16;
        v82 = 4;
      }
      else
      {
        if (!v410)
          goto LABEL_165;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_165:
      v83 = v420;
      if (v420 == v337)
      {
        v83 = v337;
        v84 = 4;
      }
      else
      {
        if (!v420)
          goto LABEL_170;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_170:
      v351 = v370;
      v85 = v287;
      if (!v372)
        goto LABEL_173;
      if (v372 != v371)
      {
        v353 = v372;
        v85 = v330;
LABEL_173:
        *v85 = 0;
        goto LABEL_175;
      }
      v353 = v17;
      (*(void (**)(_QWORD *, uint64_t *))(v371[0] + 24))(v371, v17);
LABEL_175:
      v354 = v373;
      v86 = v286;
      if (!v375)
        goto LABEL_178;
      if (v375 != v339)
      {
        v356 = v375;
        v86 = v308;
LABEL_178:
        *v86 = 0;
        goto LABEL_180;
      }
      v356 = v18;
      (*(void (**)(void))(*((_QWORD *)&v373 + 1) + 24))();
LABEL_180:
      v357 = v376;
      v87 = v285;
      if (!v378)
        goto LABEL_183;
      if (v378 != v338)
      {
        v359 = v378;
        v87 = v307;
LABEL_183:
        *v87 = 0;
        goto LABEL_185;
      }
      v359 = v315;
      (*(void (**)(void))(v377 + 24))();
LABEL_185:
      v360 = v379;
      v88 = v284;
      if (!v381)
        goto LABEL_188;
      if (v381 != v318)
      {
        v362 = v381;
        v88 = v306;
LABEL_188:
        *v88 = 0;
        goto LABEL_190;
      }
      v362 = v33;
      (*(void (**)(void))(v380 + 24))();
LABEL_190:
      v363 = v382;
      v89 = v283;
      if (!v384)
        goto LABEL_193;
      if (v384 != v317)
      {
        v365 = v384;
        v89 = v305;
LABEL_193:
        *v89 = 0;
        goto LABEL_195;
      }
      v365 = v334;
      (*(void (**)(void))(v383 + 24))();
LABEL_195:
      v366 = v385;
      v90 = v282;
      if (!v387)
        goto LABEL_198;
      if (v387 != v316)
      {
        v368 = v387;
        v90 = v304;
LABEL_198:
        *v90 = 0;
        goto LABEL_200;
      }
      v368 = v329;
      (*(void (**)(void))(v386 + 24))();
LABEL_200:
      v91 = v387;
      v369 = v388;
      if (v387 == v316)
      {
        v91 = v316;
        v92 = 4;
      }
      else
      {
        if (!v387)
          goto LABEL_205;
        v92 = 5;
      }
      (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_205:
      v93 = v384;
      if (v384 == v317)
      {
        v93 = v317;
        v94 = 4;
      }
      else
      {
        if (!v384)
          goto LABEL_210;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_210:
      v95 = v381;
      if (v381 == v318)
      {
        v95 = v318;
        v96 = 4;
      }
      else
      {
        if (!v381)
          goto LABEL_215;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_215:
      v97 = v378;
      if (v378 == v338)
      {
        v97 = v338;
        v98 = 4;
      }
      else
      {
        if (!v378)
          goto LABEL_220;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_220:
      v99 = v375;
      if (v375 == v339)
      {
        v99 = v339;
        v100 = 4;
      }
      else
      {
        if (!v375)
          goto LABEL_225;
        v100 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v99 + 8 * v100))();
LABEL_225:
      v101 = v372;
      if (v372 == v371)
      {
        v101 = v371;
        v102 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_230;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_230:
      v103 = v434;
      if (v434 == v319)
      {
        v103 = v319;
        v104 = 4;
      }
      else
      {
        if (!v434)
          goto LABEL_235;
        v104 = 5;
      }
      (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_235:
      v105 = v430;
      if (v430 == v336)
      {
        v105 = v336;
        v106 = 4;
      }
      else
      {
        if (!v430)
          goto LABEL_240;
        v106 = 5;
      }
      (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_240:
      v107 = (uint64_t)v353;
      v408 = v351;
      if (!v353)
        goto LABEL_243;
      if (v353 != v17)
      {
        v107 = (*(uint64_t (**)(void))(*v353 + 16))();
LABEL_243:
        v410 = (_QWORD *)v107;
        goto LABEL_245;
      }
      v410 = v16;
      (*(void (**)(uint64_t *, _QWORD *))(v352[0] + 24))(v17, v16);
LABEL_245:
      v108 = (uint64_t)v356;
      v411 = v354;
      if (!v356)
        goto LABEL_248;
      if (v356 != v18)
      {
        v108 = (*(uint64_t (**)(void))(*(_QWORD *)v356 + 16))();
LABEL_248:
        v413 = (char *)v108;
        goto LABEL_250;
      }
      v413 = (char *)v323;
      (*(void (**)(char *))(v355[0] + 24))(v18);
LABEL_250:
      v109 = (uint64_t)v359;
      v414 = v357;
      if (!v359)
        goto LABEL_253;
      if (v359 != v315)
      {
        v109 = (*(uint64_t (**)(void))(*v359 + 16))();
LABEL_253:
        v416 = (uint64_t *)v109;
        goto LABEL_255;
      }
      v416 = v322;
      (*(void (**)(uint64_t *))(v358 + 24))(v315);
LABEL_255:
      v398 = *((_QWORD *)&v360 + 1);
      v417 = v360;
      v110 = (uint64_t)v362;
      if (!v362)
        goto LABEL_258;
      if (v362 != v33)
      {
        v110 = (*(uint64_t (**)(void))(*v362 + 16))();
LABEL_258:
        v400 = (uint64_t *)v110;
        goto LABEL_260;
      }
      v400 = v333;
      (*(void (**)(uint64_t *))(v361 + 24))(v33);
LABEL_260:
      v111 = (uint64_t)v365;
      v401 = v363;
      if (!v365)
        goto LABEL_263;
      if (v365 != v334)
      {
        v111 = (*(uint64_t (**)(void))(*v365 + 16))();
LABEL_263:
        v403 = (uint64_t *)v111;
        goto LABEL_265;
      }
      v403 = v314;
      (*(void (**)(uint64_t *))(v364 + 24))(v334);
LABEL_265:
      v112 = (uint64_t)v368;
      v404 = v366;
      if (!v368)
        goto LABEL_268;
      if (v368 != v329)
      {
        v112 = (*(uint64_t (**)(void))(*v368 + 16))();
LABEL_268:
        v406 = (uint64_t *)v112;
        goto LABEL_270;
      }
      v406 = v313;
      (*(void (**)(uint64_t *))(v367 + 24))(v329);
LABEL_270:
      v407 = v369;
      v428 = (uint64_t)v408;
      v113 = v326;
      if (!v410)
        goto LABEL_273;
      if (v410 != v16)
      {
        v430 = v410;
        v113 = v272;
LABEL_273:
        *v113 = 0;
        goto LABEL_275;
      }
      v430 = v336;
      (*(void (**)(_QWORD *))(v409[0] + 24))(v16);
LABEL_275:
      *(_QWORD *)&v431 = v411;
      v114 = v301;
      if (!v413)
        goto LABEL_278;
      if (v413 != (char *)v323)
      {
        v433 = v413;
        v114 = v271;
LABEL_278:
        *v114 = 0;
        goto LABEL_280;
      }
      v433 = (char *)&v431 + 8;
      (*(void (**)(void))(v412 + 24))();
LABEL_280:
      v434 = v414;
      v115 = v300;
      if (!v416)
        goto LABEL_283;
      if (v416 != v322)
      {
        v436 = v416;
        v115 = v270;
LABEL_283:
        *v115 = 0;
        goto LABEL_285;
      }
      v436 = v321;
      (*(void (**)(void))(v415 + 24))();
LABEL_285:
      v437 = v417;
      v418 = v398;
      v116 = v299;
      if (!v400)
        goto LABEL_288;
      if (v400 != v333)
      {
        v420 = v400;
        v116 = v269;
LABEL_288:
        *v116 = 0;
        goto LABEL_290;
      }
      v420 = v337;
      (*(void (**)(void))(v399 + 24))();
LABEL_290:
      v421 = v401;
      v117 = v298;
      if (!v403)
        goto LABEL_293;
      if (v403 != v314)
      {
        v423 = v403;
        v117 = v268;
LABEL_293:
        *v117 = 0;
        goto LABEL_295;
      }
      v423 = v320;
      (*(void (**)(void))(v402 + 24))();
LABEL_295:
      v424 = v404;
      v118 = v297;
      if (!v406)
        goto LABEL_298;
      if (v406 != v313)
      {
        v426 = v406;
        v118 = v267;
LABEL_298:
        *v118 = 0;
        goto LABEL_300;
      }
      v426 = v312;
      (*(void (**)(void))(v405 + 24))();
LABEL_300:
      v427 = v407;
      v448 = (uint64_t *)v428;
      v119 = v324;
      if (!v430)
        goto LABEL_303;
      if (v430 != v336)
      {
        v450 = (char *)v430;
        v119 = (char **)v326;
LABEL_303:
        *v119 = 0;
        goto LABEL_305;
      }
      v450 = (char *)v449;
      (*(void (**)(void))(v429 + 24))();
LABEL_305:
      v451 = v431;
      v120 = v311;
      if (!v433)
        goto LABEL_308;
      if (v433 != (char *)&v431 + 8)
      {
        v453 = v433;
        v120 = v301;
LABEL_308:
        *v120 = 0;
        goto LABEL_310;
      }
      v453 = v21;
      (*(void (**)(char *, char *))(*((_QWORD *)&v431 + 1) + 24))((char *)&v431 + 8, v21);
LABEL_310:
      v454 = v434;
      v121 = v310;
      if (!v436)
        goto LABEL_313;
      if (v436 != v321)
      {
        v456 = (char *)v436;
        v121 = (char **)v300;
LABEL_313:
        *v121 = 0;
        goto LABEL_315;
      }
      v456 = v37;
      (*(void (**)(void))(v435 + 24))();
LABEL_315:
      v457[0] = v437;
      v438 = v418;
      v122 = v309;
      if (!v420)
        goto LABEL_318;
      if (v420 != v337)
      {
        v440 = (uint64_t)v420;
        v122 = (uint64_t *)v299;
LABEL_318:
        *v122 = 0;
        goto LABEL_320;
      }
      v440 = (uint64_t)v340;
      (*(void (**)(void))(v419 + 24))();
LABEL_320:
      v441 = v421;
      v123 = v303;
      if (!v423)
        goto LABEL_323;
      if (v423 != v320)
      {
        v443 = v423;
        v123 = v298;
LABEL_323:
        *v123 = 0;
        goto LABEL_325;
      }
      v443 = v335;
      (*(void (**)(void))(v422 + 24))();
LABEL_325:
      v444 = v424;
      v124 = v302;
      if (!v426)
        goto LABEL_328;
      if (v426 != v312)
      {
        v446 = v426;
        v124 = v297;
LABEL_328:
        *v124 = 0;
        goto LABEL_330;
      }
      v446 = v332;
      (*(void (**)(void))(v425 + 24))();
LABEL_330:
      v447 = v427;
      if (v448 == (uint64_t *)v438)
      {
        v341 = v448;
        v126 = (char **)v281;
        if (!v450)
          goto LABEL_338;
        if (v450 == (char *)v449)
        {
          v343 = v328;
          (*(void (**)(_QWORD *))(v449[0] + 24))(v449);
        }
        else
        {
          v343 = (uint64_t *)v450;
          v126 = v324;
LABEL_338:
          *v126 = 0;
        }
        v344 = v451;
        v154 = v280;
        if (v453)
        {
          if (v453 != v21)
          {
            v346 = v453;
            v154 = v311;
            goto LABEL_455;
          }
          v346 = v295;
          (*(void (**)(char *))(v452 + 24))(v21);
        }
        else
        {
LABEL_455:
          *v154 = 0;
        }
        v347 = v454;
        v155 = (char **)v279;
        if (v456)
        {
          if (v456 != v37)
          {
            v349 = (uint64_t *)v456;
            v155 = v310;
            goto LABEL_460;
          }
          v349 = v294;
          (*(void (**)(char *))(v455 + 24))(v37);
        }
        else
        {
LABEL_460:
          *v155 = 0;
        }
        v350 = v457[0];
        goto LABEL_463;
      }
      v370 = v448;
      v125 = (uint64_t)v450;
      if (!v450)
        goto LABEL_334;
      if (v450 != (char *)v449)
      {
        v125 = (*(uint64_t (**)(char *))(*(_QWORD *)v450 + 16))(v450);
LABEL_334:
        v372 = (uint64_t *)v125;
        goto LABEL_341;
      }
      v372 = v371;
      (*(void (**)(_QWORD *, _QWORD *))(v449[0] + 24))(v449, v371);
LABEL_341:
      v127 = (uint64_t)v453;
      *(_QWORD *)&v373 = v451;
      if (!v453)
        goto LABEL_344;
      if (v453 != v21)
      {
        v127 = (*(uint64_t (**)(char *))(*(_QWORD *)v453 + 16))(v453);
LABEL_344:
        v375 = (char *)v127;
        goto LABEL_346;
      }
      v375 = v339;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_346:
      v128 = (uint64_t)v456;
      v376 = v454;
      if (!v456)
        goto LABEL_349;
      if (v456 != v37)
      {
        v128 = (*(uint64_t (**)(char *))(*(_QWORD *)v456 + 16))(v456);
LABEL_349:
        v378 = (uint64_t *)v128;
        goto LABEL_351;
      }
      v378 = v338;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_351:
      v130 = v292;
      v129 = v293;
LABEL_352:
      *(_QWORD *)v130 = *(_QWORD *)v129;
      while (1)
      {
        v131 = v370 + 4;
        v370 = v131;
        if (v131 == (uint64_t *)v373)
          goto LABEL_361;
        do
        {
          if (!v372)
LABEL_674:
            sub_20E86D37C();
          v132 = (*(uint64_t (**)(uint64_t *))(*v372 + 48))(v372);
          v131 = v370;
          if ((v132 & 1) != 0)
            break;
          v131 = v370 + 4;
          v370 = v131;
        }
        while (v131 != (uint64_t *)v373);
LABEL_361:
        while (v131 != v376)
        {
          if (!v375)
            goto LABEL_674;
          v134 = (*(uint64_t (**)(char *))(*(_QWORD *)v375 + 48))(v375);
          v131 = v370;
          if ((v134 & 1) != 0)
            break;
          do
          {
            v131 += 4;
            v370 = v131;
            if (v131 == (uint64_t *)v373)
              break;
            if (!v372)
              goto LABEL_674;
            v133 = (*(uint64_t (**)(uint64_t *))(*v372 + 48))(v372);
            v131 = v370;
          }
          while ((v133 & 1) == 0);
        }
        if (v131 == (uint64_t *)v438)
          break;
        if (*((float *)v131 + 2) < *((float *)v448 + 2))
        {
          v448 = v131;
          if (v372)
          {
            if (v372 != v371)
            {
              v135 = (char *)(*(uint64_t (**)(void))(*v372 + 16))();
              v395 = v135;
              v136 = v450;
              if (v135 != (char *)&v393)
                goto LABEL_369;
LABEL_374:
              if (v136 != (char *)v449)
              {
                ((void (*)(uint64_t **, _QWORD *))v393[3])(&v393, v449);
                (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                v395 = v450;
                v136 = v450;
                v450 = (char *)v449;
                if (v136 == (char *)&v393)
                  goto LABEL_376;
LABEL_371:
                v137 = v21;
                if (v136)
                {
                  v138 = 5;
                  goto LABEL_381;
                }
                goto LABEL_382;
              }
              ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
              (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
              v395 = 0;
              (*(void (**)(char *, uint64_t **))(*(_QWORD *)v450 + 24))(v450, &v393);
              (*(void (**)(char *))(*(_QWORD *)v450 + 32))(v450);
              v450 = 0;
              v395 = (char *)&v393;
              ((void (*)(uint64_t **, _QWORD *))v389[3])(&v389, v449);
              ((void (*)(uint64_t **))v389[4])(&v389);
              v450 = (char *)v449;
              v136 = v395;
              if (v395 != (char *)&v393)
                goto LABEL_371;
LABEL_376:
              v136 = (char *)&v393;
LABEL_380:
              v138 = 4;
LABEL_381:
              (*(void (**)(void))(*(_QWORD *)v136 + 8 * v138))();
              v137 = v21;
LABEL_382:
              v451 = v373;
              if (v375)
              {
                if (v375 != v339)
                {
                  v139 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v375 + 16))();
                  v137 = v21;
                  v395 = v139;
                  v140 = v453;
                  if (v139 != (char *)&v393)
                    goto LABEL_385;
LABEL_390:
                  if (v140 != v137)
                  {
                    ((void (*)(uint64_t **, char *))v393[3])(&v393, v137);
                    (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                    v395 = v453;
                    v140 = v453;
                    v453 = v21;
                    if (v140 == (char *)&v393)
                      goto LABEL_392;
LABEL_387:
                    if (v140)
                    {
                      v141 = 5;
                      goto LABEL_397;
                    }
                    goto LABEL_398;
                  }
                  ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
                  (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                  v395 = 0;
                  (*(void (**)(char *, uint64_t **))(*(_QWORD *)v453 + 24))(v453, &v393);
                  (*(void (**)(char *))(*(_QWORD *)v453 + 32))(v453);
                  v453 = 0;
                  v395 = (char *)&v393;
                  ((void (*)(uint64_t **, char *))v389[3])(&v389, v21);
                  ((void (*)(uint64_t **))v389[4])(&v389);
                  v453 = v21;
                  v140 = v395;
                  if (v395 != (char *)&v393)
                    goto LABEL_387;
LABEL_392:
                  v140 = (char *)&v393;
LABEL_396:
                  v141 = 4;
LABEL_397:
                  (*(void (**)(void))(*(_QWORD *)v140 + 8 * v141))();
LABEL_398:
                  v454 = v376;
                  if (v378)
                  {
                    if (v378 != v338)
                    {
                      v142 = (char *)(*(uint64_t (**)(void))(*v378 + 16))();
                      v395 = v142;
                      v143 = v456;
                      if (v142 != (char *)&v393)
                        goto LABEL_401;
LABEL_406:
                      if (v143 != v37)
                      {
                        ((void (*)(uint64_t **, char *))v393[3])(&v393, v37);
                        (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                        v395 = v456;
                        v143 = v456;
                        v456 = v37;
                        if (v143 == (char *)&v393)
                          goto LABEL_408;
LABEL_403:
                        if (v143)
                        {
                          v144 = 5;
                          goto LABEL_413;
                        }
                        goto LABEL_414;
                      }
                      ((void (*)(uint64_t **, uint64_t **))v393[3])(&v393, &v389);
                      (*(void (**)(char *))(*(_QWORD *)v395 + 32))(v395);
                      v395 = 0;
                      (*(void (**)(char *, uint64_t **))(*(_QWORD *)v456 + 24))(v456, &v393);
                      (*(void (**)(char *))(*(_QWORD *)v456 + 32))(v456);
                      v456 = 0;
                      v395 = (char *)&v393;
                      ((void (*)(uint64_t **, char *))v389[3])(&v389, v37);
                      ((void (*)(uint64_t **))v389[4])(&v389);
                      v456 = v37;
                      v143 = v395;
                      if (v395 != (char *)&v393)
                        goto LABEL_403;
LABEL_408:
                      v143 = (char *)&v393;
LABEL_412:
                      v144 = 4;
LABEL_413:
                      (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_414:
                      v129 = v292;
                      v130 = v293;
                      goto LABEL_352;
                    }
                    v395 = (char *)&v393;
                    (*(void (**)(uint64_t *, uint64_t **))(v377 + 24))(v338, &v393);
                    v142 = v395;
                    v143 = v456;
                    if (v395 == (char *)&v393)
                      goto LABEL_406;
                  }
                  else
                  {
                    v142 = 0;
                    v395 = 0;
                    v143 = v456;
                    if (&v265 == (uint64_t *)-1296)
                      goto LABEL_406;
                  }
LABEL_401:
                  if (v143 != v37)
                  {
                    v395 = v143;
                    v456 = v142;
                    if (v143 == (char *)&v393)
                      goto LABEL_408;
                    goto LABEL_403;
                  }
                  (*(void (**)(char *, uint64_t **))(v455 + 24))(v37, &v393);
                  (*(void (**)(char *))(*(_QWORD *)v456 + 32))(v456);
                  v456 = v395;
                  v143 = (char *)&v393;
                  v395 = (char *)&v393;
                  goto LABEL_412;
                }
                v395 = (char *)&v393;
                (*(void (**)(char *, uint64_t **))(*((_QWORD *)&v373 + 1) + 24))(v339, &v393);
                v139 = v395;
                v137 = v21;
                v140 = v453;
                if (v395 == (char *)&v393)
                  goto LABEL_390;
              }
              else
              {
                v139 = 0;
                v395 = 0;
                v140 = v453;
                if (&v265 == (uint64_t *)-1296)
                  goto LABEL_390;
              }
LABEL_385:
              if (v140 != v137)
              {
                v395 = v140;
                v453 = v139;
                if (v140 == (char *)&v393)
                  goto LABEL_392;
                goto LABEL_387;
              }
              (*(void (**)(char *, uint64_t **))(v452 + 24))(v137, &v393);
              (*(void (**)(char *))(*(_QWORD *)v453 + 32))(v453);
              v453 = v395;
              v140 = (char *)&v393;
              v395 = (char *)&v393;
              goto LABEL_396;
            }
            v395 = (char *)&v393;
            (*(void (**)(_QWORD *, uint64_t **))(v371[0] + 24))(v371, &v393);
            v135 = v395;
            v136 = v450;
            if (v395 == (char *)&v393)
              goto LABEL_374;
          }
          else
          {
            v135 = 0;
            v395 = 0;
            v136 = v450;
            if (&v265 == (uint64_t *)-1296)
              goto LABEL_374;
          }
LABEL_369:
          if (v136 != (char *)v449)
          {
            v395 = v136;
            v450 = v135;
            if (v136 == (char *)&v393)
              goto LABEL_376;
            goto LABEL_371;
          }
          (*(void (**)(_QWORD *, uint64_t **))(v449[0] + 24))(v449, &v393);
          (*(void (**)(char *))(*(_QWORD *)v450 + 32))(v450);
          v450 = v395;
          v136 = (char *)&v393;
          v395 = (char *)&v393;
          goto LABEL_380;
        }
      }
      v341 = v448;
      v145 = (char **)v281;
      if (!v450)
        goto LABEL_424;
      if (v450 != (char *)v449)
      {
        v343 = (uint64_t *)v450;
        v145 = v324;
LABEL_424:
        *v145 = 0;
        goto LABEL_426;
      }
      v343 = v328;
      (*(void (**)(_QWORD *))(v449[0] + 24))(v449);
LABEL_426:
      v344 = v451;
      v146 = v280;
      if (!v453)
        goto LABEL_429;
      if (v453 != v21)
      {
        v346 = v453;
        v146 = v311;
LABEL_429:
        *v146 = 0;
        goto LABEL_431;
      }
      v346 = v295;
      (*(void (**)(char *))(v452 + 24))(v21);
LABEL_431:
      v347 = v454;
      v147 = (char **)v279;
      if (!v456)
        goto LABEL_434;
      if (v456 != v37)
      {
        v349 = (uint64_t *)v456;
        v147 = v310;
LABEL_434:
        *v147 = 0;
        goto LABEL_436;
      }
      v349 = v294;
      (*(void (**)(char *))(v455 + 24))(v37);
LABEL_436:
      v350 = v457[0];
      v148 = v378;
      if (v378 == v338)
      {
        v148 = v338;
        v149 = 4;
      }
      else
      {
        if (!v378)
          goto LABEL_441;
        v149 = 5;
      }
      (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_441:
      v150 = v375;
      if (v375 == v339)
      {
        v150 = v339;
        v151 = 4;
        goto LABEL_445;
      }
      if (v375)
      {
        v151 = 5;
LABEL_445:
        (*(void (**)(void))(*(_QWORD *)v150 + 8 * v151))();
      }
      v152 = v372;
      if (v372 == v371)
      {
        v152 = v371;
        v153 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_463;
        v153 = 5;
      }
      (*(void (**)(void))(*v152 + 8 * v153))();
LABEL_463:
      v156 = v446;
      if (v446 == v332)
      {
        v156 = v332;
        v157 = 4;
      }
      else
      {
        if (!v446)
          goto LABEL_468;
        v157 = 5;
      }
      (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_468:
      v158 = v443;
      if (v443 == v335)
      {
        v158 = v335;
        v159 = 4;
      }
      else
      {
        if (!v443)
          goto LABEL_473;
        v159 = 5;
      }
      (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_473:
      v160 = (_QWORD *)v440;
      if ((_QWORD *)v440 == v340)
      {
        v160 = v340;
        v161 = 4;
      }
      else
      {
        if (!v440)
          goto LABEL_478;
        v161 = 5;
      }
      (*(void (**)(void))(*v160 + 8 * v161))();
LABEL_478:
      v162 = v456;
      if (v456 == v37)
      {
        v162 = v37;
        v164 = 4;
        v163 = v312;
      }
      else
      {
        v163 = v312;
        if (!v456)
          goto LABEL_483;
        v164 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v162 + 8 * v164))();
LABEL_483:
      v165 = v453;
      if (v453 == v21)
      {
        v165 = v21;
        v166 = 4;
      }
      else
      {
        if (!v453)
          goto LABEL_488;
        v166 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v165 + 8 * v166))();
LABEL_488:
      v167 = v450;
      if (v450 == (char *)v449)
      {
        v167 = (char *)v449;
        v168 = 4;
      }
      else
      {
        if (!v450)
          goto LABEL_493;
        v168 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v167 + 8 * v168))();
LABEL_493:
      v169 = v426;
      if (v426 == v163)
      {
        v169 = v163;
        v171 = 4;
        v170 = v338;
      }
      else
      {
        v170 = v338;
        if (!v426)
          goto LABEL_498;
        v171 = 5;
      }
      (*(void (**)(void))(*v169 + 8 * v171))();
LABEL_498:
      v172 = v423;
      if (v423 == v320)
      {
        v172 = v320;
        v173 = 4;
      }
      else
      {
        if (!v423)
          goto LABEL_503;
        v173 = 5;
      }
      (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_503:
      v174 = v420;
      if (v420 == v337)
      {
        v174 = v337;
        v175 = 4;
      }
      else
      {
        if (!v420)
          goto LABEL_508;
        v175 = 5;
      }
      (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_508:
      v176 = v436;
      if (v436 == v321)
      {
        v176 = v321;
        v177 = 4;
      }
      else
      {
        if (!v436)
          goto LABEL_513;
        v177 = 5;
      }
      (*(void (**)(void))(*v176 + 8 * v177))();
LABEL_513:
      v178 = v433;
      if (v433 == (char *)&v431 + 8)
      {
        v178 = (char *)&v431 + 8;
        v179 = 4;
      }
      else
      {
        if (!v433)
          goto LABEL_518;
        v179 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v178 + 8 * v179))();
LABEL_518:
      v180 = v430;
      if (v430 == v336)
      {
        v180 = v336;
        v181 = 4;
      }
      else
      {
        if (!v430)
          goto LABEL_523;
        v181 = 5;
      }
      (*(void (**)(void))(*v180 + 8 * v181))();
LABEL_523:
      v182 = v406;
      if (v406 == v313)
      {
        v182 = v313;
        v183 = 4;
      }
      else
      {
        if (!v406)
          goto LABEL_528;
        v183 = 5;
      }
      (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_528:
      v184 = v403;
      if (v403 == v314)
      {
        v184 = v314;
        v185 = 4;
      }
      else
      {
        if (!v403)
          goto LABEL_533;
        v185 = 5;
      }
      (*(void (**)(void))(*v184 + 8 * v185))();
LABEL_533:
      v186 = v400;
      if (v400 == v333)
      {
        v186 = v333;
        v187 = 4;
      }
      else
      {
        if (!v400)
          goto LABEL_538;
        v187 = 5;
      }
      (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_538:
      v188 = v416;
      if (v416 == v322)
      {
        v188 = v322;
        v189 = 4;
      }
      else
      {
        if (!v416)
          goto LABEL_543;
        v189 = 5;
      }
      (*(void (**)(void))(*v188 + 8 * v189))();
LABEL_543:
      v190 = v413;
      if (v413 == (char *)v323)
      {
        v190 = v323;
        v191 = 4;
      }
      else
      {
        if (!v413)
          goto LABEL_548;
        v191 = 5;
      }
      (*(void (**)(void))(*v190 + 8 * v191))();
LABEL_548:
      v192 = v410;
      if (v410 == v16)
      {
        v192 = v16;
        v193 = 4;
      }
      else
      {
        if (!v410)
          goto LABEL_553;
        v193 = 5;
      }
      (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_553:
      v194 = (uint64_t)v362;
      v370 = (uint64_t *)*((_QWORD *)&v360 + 1);
      if (!v362)
      {
        v19 = v21;
        v195 = v339;
        goto LABEL_557;
      }
      if (v362 != v33)
      {
        v194 = (*(uint64_t (**)(void))(*v362 + 16))();
        v195 = v339;
        v19 = v21;
LABEL_557:
        v372 = (uint64_t *)v194;
        goto LABEL_559;
      }
      v372 = v371;
      (*(void (**)(uint64_t *, _QWORD *))(v361 + 24))(v33, v371);
      v19 = v21;
      v195 = v339;
LABEL_559:
      v196 = (uint64_t)v365;
      *(_QWORD *)&v373 = v363;
      if (!v365)
        goto LABEL_562;
      if (v365 != v334)
      {
        v196 = (*(uint64_t (**)(void))(*v365 + 16))();
        v19 = v21;
LABEL_562:
        v375 = (char *)v196;
        goto LABEL_564;
      }
      v375 = v195;
      (*(void (**)(uint64_t *, char *))(v364 + 24))(v334, v195);
      v19 = v21;
LABEL_564:
      v197 = v368;
      v376 = v366;
      if (!v368)
        goto LABEL_567;
      if (v368 != v329)
      {
        v197 = (uint64_t *)(*(uint64_t (**)(void))(*v368 + 16))();
        v19 = v21;
LABEL_567:
        v378 = v197;
        goto LABEL_569;
      }
      v378 = v170;
      (*(void (**)(uint64_t *, uint64_t *))(v367 + 24))(v329, v170);
      v197 = v378;
      v19 = v21;
LABEL_569:
      *(_QWORD *)&v379 = v369;
      v198 = v341;
      v199 = v370;
      if (v197 == v338)
      {
        v197 = v338;
        v200 = 4;
      }
      else
      {
        if (!v197)
          goto LABEL_574;
        v200 = 5;
      }
      (*(void (**)(void))(*v197 + 8 * v200))();
      v19 = v21;
LABEL_574:
      v201 = v375;
      if (v375 == v339)
      {
        v201 = v339;
        v202 = 4;
      }
      else
      {
        if (!v375)
          goto LABEL_579;
        v202 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v201 + 8 * v202))();
      v19 = v21;
LABEL_579:
      v203 = v372;
      if (v372 == v371)
      {
        v203 = v371;
        v204 = 4;
      }
      else
      {
        if (!v372)
          goto LABEL_584;
        v204 = 5;
      }
      (*(void (**)(void))(*v203 + 8 * v204))();
      v19 = v21;
LABEL_584:
      v205 = v198 == v199;
      v206 = v331;
      v207 = v334;
      if (v205)
        goto LABEL_616;
      v208 = v341;
      v210 = (char *)a4[1];
      v209 = (unint64_t)a4[2];
      if ((unint64_t)v210 < v209)
      {
        v211 = *v341;
        *((_DWORD *)v210 + 2) = *((_DWORD *)v341 + 2);
        *(_QWORD *)v210 = v211;
        v212 = v210 + 12;
        v18 = v277;
        v207 = v334;
        a4[1] = v212;
        v206 = v331;
        v19 = v21;
        if (!v273)
          goto LABEL_616;
        goto LABEL_587;
      }
      v216 = (char *)*a4;
      v217 = 0xAAAAAAAAAAAAAAABLL * ((v210 - (_BYTE *)*a4) >> 2);
      v218 = v217 + 1;
      if (v217 + 1 > 0x1555555555555555)
        sub_20E867F44();
      v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - (_QWORD)v216) >> 2);
      if (2 * v219 > v218)
        v218 = 2 * v219;
      if (v219 >= 0xAAAAAAAAAAAAAAALL)
        v220 = 0x1555555555555555;
      else
        v220 = v218;
      if (v220)
      {
        if (v220 > 0x1555555555555555)
          goto LABEL_675;
        v221 = (char *)operator new(12 * v220);
        a4 = v266;
      }
      else
      {
        v221 = 0;
      }
      v232 = *v208;
      v233 = &v221[12 * v217];
      *((_DWORD *)v233 + 2) = *((_DWORD *)v208 + 2);
      *(_QWORD *)v233 = v232;
      v234 = v233;
      if (v210 == v216)
      {
        v17 = v275;
        v18 = v277;
        v237 = v233 + 12;
        *a4 = v233;
        a4[1] = v233 + 12;
        a4[2] = &v221[12 * v220];
        if (v210)
          goto LABEL_614;
      }
      else
      {
        v17 = v275;
        v18 = v277;
        do
        {
          v235 = *(_QWORD *)(v210 - 12);
          v210 -= 12;
          v236 = *((_DWORD *)v210 + 2);
          *(_QWORD *)(v234 - 12) = v235;
          v234 -= 12;
          *((_DWORD *)v234 + 2) = v236;
        }
        while (v210 != v216);
        v210 = (char *)*a4;
        v237 = v233 + 12;
        *a4 = v234;
        a4[1] = v233 + 12;
        a4[2] = &v221[12 * v220];
        if (v210)
LABEL_614:
          operator delete(v210);
      }
      v16 = v276;
      v207 = v334;
      a4[1] = v237;
      v206 = v331;
      v19 = v21;
      if (!v273)
      {
LABEL_616:
        v238 = v349;
        v239 = v294;
        if (v349 == v294)
          goto LABEL_632;
        goto LABEL_617;
      }
LABEL_587:
      v214 = *(char **)(v278 + 8);
      v213 = *(_QWORD *)(v278 + 16);
      if ((unint64_t)v214 < v213)
      {
        *(_QWORD *)v214 = v325;
        v215 = (uint64_t)(v214 + 8);
        v17 = v275;
        goto LABEL_631;
      }
      v222 = *(char **)v278;
      v223 = (uint64_t)&v214[-*(_QWORD *)v278];
      v224 = v223 >> 3;
      v225 = (v223 >> 3) + 1;
      if (v225 >> 61)
        sub_20E867F44();
      v226 = v213 - (_QWORD)v222;
      if (v226 >> 2 > v225)
        v225 = v226 >> 2;
      if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8)
        v227 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v227 = v225;
      if (v227)
      {
        if (v227 >> 61)
LABEL_675:
          sub_20E877A38();
        v228 = operator new(8 * v227);
        v229 = &v228[8 * v224];
        *v229 = v325;
        v215 = (uint64_t)(v229 + 1);
        v230 = v214 - v222;
        if (v214 == v222)
        {
LABEL_622:
          a4 = v266;
          goto LABEL_628;
        }
      }
      else
      {
        v228 = 0;
        v229 = (_QWORD *)(8 * v224);
        *(_QWORD *)(8 * v224) = v325;
        v215 = 8 * v224 + 8;
        v230 = v214 - v222;
        if (v214 == v222)
          goto LABEL_622;
      }
      v231 = v230 - 8;
      if (v231 >= 0x58)
      {
        v241 = v214 - v228 - v223;
        a4 = v266;
        if (v241 >= 0x20)
        {
          v242 = (v231 >> 3) + 1;
          v243 = 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
          v244 = &v214[-v243];
          v229 = (_QWORD *)((char *)v229 - v243);
          v245 = &v228[8 * v224 - 16];
          v246 = v214 - 16;
          v247 = v242 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v248 = *(_OWORD *)v246;
            *(v245 - 1) = *((_OWORD *)v246 - 1);
            *v245 = v248;
            v245 -= 2;
            v246 -= 32;
            v247 -= 4;
          }
          while (v247);
          v214 = v244;
          if (v242 == (v242 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_628;
        }
      }
      else
      {
        a4 = v266;
      }
      do
      {
        v249 = *((_QWORD *)v214 - 1);
        v214 -= 8;
        *--v229 = v249;
      }
      while (v214 != v222);
LABEL_628:
      v250 = v278;
      *(_QWORD *)v278 = v229;
      *(_QWORD *)(v250 + 8) = v215;
      *(_QWORD *)(v250 + 16) = &v228[8 * v227];
      if (v222)
        operator delete(v222);
      v17 = v275;
      v18 = v277;
      v206 = v331;
      v207 = v334;
      v19 = v21;
LABEL_631:
      *(_QWORD *)(v278 + 8) = v215;
      v16 = v276;
      v238 = v349;
      v239 = v294;
      if (v349 == v294)
      {
LABEL_632:
        v238 = v239;
        v240 = 4;
        goto LABEL_633;
      }
LABEL_617:
      if (!v238)
        goto LABEL_634;
      v240 = 5;
LABEL_633:
      (*(void (**)(void))(*v238 + 8 * v240))();
      v19 = v21;
LABEL_634:
      v251 = v346;
      if (v346 == v295)
      {
        v251 = v295;
        v252 = 4;
      }
      else
      {
        if (!v346)
          goto LABEL_639;
        v252 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v251 + 8 * v252))();
      v19 = v21;
LABEL_639:
      v253 = v343;
      if (v343 == v328)
      {
        v253 = v328;
        v254 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_644;
        v254 = 5;
      }
      (*(void (**)(void))(*v253 + 8 * v254))();
      v19 = v21;
LABEL_644:
      v255 = v368;
      if (v368 == v329)
      {
        v255 = v329;
        v256 = 4;
      }
      else
      {
        if (!v368)
          goto LABEL_649;
        v256 = 5;
      }
      (*(void (**)(void))(*v255 + 8 * v256))();
      v19 = v21;
LABEL_649:
      v257 = v365;
      if (v365 == v207)
      {
        v257 = v207;
        v258 = 4;
      }
      else
      {
        if (!v365)
          goto LABEL_654;
        v258 = 5;
      }
      (*(void (**)(void))(*v257 + 8 * v258))();
      v19 = v21;
LABEL_654:
      v259 = v362;
      if (v362 == v206)
      {
        v259 = v206;
        v260 = 4;
      }
      else
      {
        if (!v362)
          goto LABEL_659;
        v260 = 5;
      }
      (*(void (**)(void))(*v259 + 8 * v260))();
      v19 = v21;
LABEL_659:
      v261 = v359;
      if (v359 == v315)
      {
        v261 = v315;
        v262 = 4;
      }
      else
      {
        if (!v359)
          goto LABEL_664;
        v262 = 5;
      }
      (*(void (**)(void))(*v261 + 8 * v262))();
      v19 = v21;
LABEL_664:
      v263 = v356;
      if (v356 == v18)
      {
        v263 = v18;
        v264 = 4;
      }
      else
      {
        if (!v356)
          goto LABEL_669;
        v264 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v263 + 8 * v264))();
      v19 = v21;
LABEL_669:
      result = v353;
      if (v353 == v17)
      {
        result = v17;
        v20 = 4;
      }
      else
      {
        if (!v353)
          goto LABEL_6;
        v20 = 5;
      }
      result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v20))();
      v19 = v21;
LABEL_6:
      v15 = v325 + 1;
      v8 = *v290;
      if (v325 + 1 >= 0xEEEEEEEEEEEEEEEFLL * ((v290[1] - *v290) >> 3))
        return result;
    }
    v372 = (uint64_t *)v27;
    v29 = v324;
LABEL_16:
    v30 = v18;
    v31 = v17;
    *v29 = 0;
    *(_QWORD *)&v373 = v451;
    *((_QWORD *)&v373 + 1) = v25;
    v32 = &off_24C9C1278;
    v33 = v331;
    v34 = (uint64_t)v340;
LABEL_17:
    v376 = v327;
    v35 = v34;
    ((void (*)(uint64_t, _QWORD *))v32[3])(v34, v327);
    v36 = (_QWORD *)v440;
    v377 = v441;
    if (v440 == v35)
      goto LABEL_24;
    goto LABEL_18;
  }
  return result;
}

void sub_20EA72C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a10 + 8) = v12;
    operator delete(v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA737F0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_20EA73870(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 11;
  v3 = (_QWORD *)a1[14];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *sub_20EA73920@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  uint64_t (**v24)();
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  uint64_t *v94;
  _BYTE v95[24];
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  _QWORD *v100;
  __int128 v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[3];
  _QWORD *v107;
  __int128 v108;
  _QWORD v109[3];
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[3];
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[3];
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[3];
  _QWORD *v134;
  uint64_t v135;
  _QWORD v136[3];
  _QWORD *v137;
  _QWORD v138[5];
  uint64_t vars0;

  v6 = result;
  v138[3] = *MEMORY[0x24BDAC8D0];
  v9 = *result;
  v8 = result[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v10 = v8 - v9;
  v92 = (char **)a3;
  if (v10)
  {
    v11 = 0xEEEEEEEEEEEEEEEFLL * (v10 >> 3);
    if (v11 > 0x1555555555555555)
      sub_20E867F44();
    result = operator new(0x3333333333333334 * (v10 >> 3));
    *a3 = result;
    a3[1] = result;
    a3[2] = (char *)result + 12 * v11;
  }
  v12 = *a2;
  if (a2[1] != *a2)
  {
    v13 = 0;
    v14 = v129;
    while (1)
    {
      v93 = v13;
      v16 = (uint64_t *)(*v6 + 120 * *(_QWORD *)(v12 + 8 * v13));
      v17 = *v16;
      v18 = v16[1];
      v19 = *v16 + 32 * v18;
      v132 = *v16;
      v133[0] = &off_24C9C12F8;
      *(double *)&v133[1] = a4;
      v134 = v133;
      v135 = v19;
      v20 = v133;
      v21 = v133;
      if (v18)
      {
        while (1)
        {
          v22 = (*(uint64_t (**)(_QWORD *))(*v20 + 48))(v20);
          v17 = v132;
          if ((v22 & 1) != 0)
            break;
          v17 = v132 + 32;
          v132 = v17;
          if (v17 == v135)
            break;
          v20 = v134;
          if (!v134)
            sub_20E86D37C();
        }
        v21 = v134;
      }
      v128 = v19;
      v129[0] = &off_24C9C12F8;
      *(double *)&v129[1] = a4;
      v130 = v14;
      v131 = v19;
      v23 = &v107;
      v105 = v17;
      if (!v21)
        goto LABEL_18;
      if (v21 != v133)
        break;
      v107 = v106;
      (*(void (**)(_QWORD *, _QWORD *))(v133[0] + 24))(v133, v106);
      *(_QWORD *)&v108 = v135;
      *((_QWORD *)&v108 + 1) = v128;
      v27 = &v110;
      if (v130)
      {
        if (v130 == v14)
        {
          v24 = (uint64_t (**)())v129[0];
          goto LABEL_19;
        }
        v110 = v130;
        v27 = &v130;
      }
      *v27 = 0;
      v25 = v130;
      v111 = v131;
      if (v130 == v14)
      {
LABEL_26:
        v25 = v14;
        v26 = 4;
        goto LABEL_27;
      }
LABEL_20:
      if (!v25)
        goto LABEL_28;
      v26 = 5;
LABEL_27:
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_28:
      v28 = v134;
      if (v134 == v133)
      {
        v28 = v133;
        v29 = 4;
      }
      else
      {
        if (!v134)
          goto LABEL_33;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_33:
      v98 = v105;
      v30 = &v100;
      if (!v107)
        goto LABEL_36;
      if (v107 != v106)
      {
        v100 = v107;
        v30 = &v107;
LABEL_36:
        *v30 = 0;
        goto LABEL_38;
      }
      v100 = v99;
      (*(void (**)(_QWORD *))(v106[0] + 24))(v106);
LABEL_38:
      v101 = v108;
      v31 = &v103;
      if (!v110)
        goto LABEL_41;
      if (v110 != v109)
      {
        v103 = v110;
        v31 = &v110;
LABEL_41:
        *v31 = 0;
        goto LABEL_43;
      }
      v103 = v102;
      (*(void (**)(void))(v109[0] + 24))();
LABEL_43:
      v32 = v110;
      v104 = v111;
      if (v110 == v109)
      {
        v32 = v109;
        v33 = 4;
      }
      else
      {
        if (!v110)
          goto LABEL_48;
        v33 = 5;
      }
      (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_48:
      v34 = v107;
      if (v107 == v106)
      {
        v34 = v106;
        v35 = 4;
      }
      else
      {
        if (!v107)
          goto LABEL_53;
        v35 = 5;
      }
      (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_53:
      v36 = (uint64_t)v100;
      v116 = v98;
      if (!v100)
        goto LABEL_56;
      if (v100 != v99)
      {
        v36 = (*(uint64_t (**)(void))(*v100 + 16))();
LABEL_56:
        v118 = (_QWORD *)v36;
        goto LABEL_58;
      }
      v118 = v117;
      (*(void (**)(_QWORD *, _QWORD *))(v99[0] + 24))(v99, v117);
LABEL_58:
      v112 = *((_QWORD *)&v101 + 1);
      v119 = v101;
      v37 = (uint64_t)v103;
      if (!v103)
        goto LABEL_61;
      if (v103 != v102)
      {
        v37 = (*(uint64_t (**)(void))(*v103 + 16))();
LABEL_61:
        v114 = (_QWORD *)v37;
        goto LABEL_63;
      }
      v114 = v113;
      (*(void (**)(_QWORD *, _QWORD *))(v102[0] + 24))(v102, v113);
LABEL_63:
      v115 = v104;
      v124 = v116;
      v38 = &v126;
      if (!v118)
        goto LABEL_66;
      if (v118 != v117)
      {
        v126 = v118;
        v38 = &v118;
LABEL_66:
        *v38 = 0;
        goto LABEL_68;
      }
      v126 = v125;
      (*(void (**)(_QWORD *, _QWORD *))(v117[0] + 24))(v117, v125);
LABEL_68:
      v127 = v119;
      v120 = v112;
      v39 = &v122;
      if (!v114)
        goto LABEL_71;
      if (v114 != v113)
      {
        v122 = v114;
        v39 = &v114;
LABEL_71:
        *v39 = 0;
        goto LABEL_73;
      }
      v122 = v121;
      (*(void (**)(_QWORD *))(v113[0] + 24))(v113);
LABEL_73:
      v123 = v115;
      v132 = v124;
      v40 = &v134;
      if (!v126)
        goto LABEL_76;
      if (v126 != v125)
      {
        v134 = v126;
        v40 = &v126;
LABEL_76:
        *v40 = 0;
        goto LABEL_78;
      }
      v134 = v133;
      (*(void (**)(_QWORD *, _QWORD *))(v125[0] + 24))(v125, v133);
LABEL_78:
      v135 = v127;
      v41 = v120;
      v128 = v120;
      v42 = &v130;
      if (!v122)
        goto LABEL_81;
      if (v122 != v121)
      {
        v130 = v122;
        v42 = &v122;
LABEL_81:
        *v42 = 0;
        v131 = v123;
        v43 = v132;
        if (v132 != v41)
          goto LABEL_82;
        goto LABEL_87;
      }
      v130 = v14;
      (*(void (**)(void))(v121[0] + 24))();
      v41 = v128;
      v131 = v123;
      v43 = v132;
      if (v132 != v128)
      {
LABEL_82:
        v105 = v43;
        v44 = (uint64_t)v134;
        if (!v134)
          goto LABEL_85;
        if (v134 == v133)
        {
          v107 = v106;
          (*(void (**)(_QWORD *, _QWORD *))(v133[0] + 24))(v133, v106);
        }
        else
        {
          v44 = (*(uint64_t (**)(_QWORD *))(*v134 + 16))(v134);
LABEL_85:
          v107 = (_QWORD *)v44;
        }
        v46 = v135;
        *(_QWORD *)&v108 = v135;
        v47 = v105 + 32;
        v105 = v47;
        if (v47 != v135)
        {
LABEL_95:
          v46 = v47;
          do
          {
            if (!v107)
              sub_20E86D37C();
            v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v107 + 48))(v107, v46);
            v46 = v105;
            if ((v48 & 1) != 0)
              break;
            v46 = v105 + 32;
            v105 = v46;
          }
          while (v46 != (_QWORD)v108);
        }
        while (v46 != v128)
        {
          if (*(float *)(v46 + 8) >= *(float *)(v132 + 8))
          {
            v46 = v108;
            v47 = v105 + 32;
            v105 = v47;
            if (v47 != (_QWORD)v108)
              goto LABEL_95;
          }
          else
          {
            v132 = v46;
            if (v107)
            {
              if (v107 == v106)
              {
                v137 = v136;
                (*(void (**)(_QWORD *, _QWORD *))(v106[0] + 24))(v106, v136);
                v49 = v137;
                v50 = v134;
                if (v137 == v136)
                {
LABEL_109:
                  if (v50 == v133)
                  {
                    (*(void (**)(_QWORD *, _QWORD *))(v136[0] + 24))(v136, v138);
                    (*(void (**)(_QWORD *))(*v137 + 32))(v137);
                    v137 = 0;
                    (*(void (**)(_QWORD *, _QWORD *))(*v134 + 24))(v134, v136);
                    (*(void (**)(_QWORD *))(*v134 + 32))(v134);
                    v134 = 0;
                    v137 = v136;
                    (*(void (**)(_QWORD *, _QWORD *))(v138[0] + 24))(v138, v133);
                    (*(void (**)(_QWORD *))(v138[0] + 32))(v138);
                    v134 = v133;
                    v50 = v137;
                    if (v137 == v136)
                    {
LABEL_111:
                      v50 = v136;
                      goto LABEL_115;
                    }
                  }
                  else
                  {
                    (*(void (**)(_QWORD *, _QWORD *))(v136[0] + 24))(v136, v133);
                    (*(void (**)(_QWORD *))(*v137 + 32))(v137);
                    v50 = v134;
                    v137 = v134;
                    v134 = v133;
                    if (v137 == v136)
                      goto LABEL_111;
                  }
                  goto LABEL_106;
                }
              }
              else
              {
                v49 = (_QWORD *)(*(uint64_t (**)(void))(*v107 + 16))();
                v137 = v49;
                v50 = v134;
                if (v49 == v136)
                  goto LABEL_109;
              }
            }
            else
            {
              v49 = 0;
              v137 = 0;
              v50 = v134;
              if (&vars0 == (uint64_t *)168)
                goto LABEL_109;
            }
            if (v50 == v133)
            {
              (*(void (**)(_QWORD *, _QWORD *))(v133[0] + 24))(v133, v136);
              (*(void (**)(_QWORD *))(*v134 + 32))(v134);
              v134 = v137;
              v50 = v136;
              v137 = v136;
LABEL_115:
              v51 = 4;
LABEL_116:
              (*(void (**)(void))(*v50 + 8 * v51))();
              goto LABEL_117;
            }
            v137 = v50;
            v134 = v49;
            if (v50 == v136)
              goto LABEL_111;
LABEL_106:
            if (v50)
            {
              v51 = 5;
              goto LABEL_116;
            }
LABEL_117:
            v46 = v108;
            v135 = v108;
            v47 = v105 + 32;
            v105 = v47;
            if (v47 != (_QWORD)v108)
              goto LABEL_95;
          }
        }
        v94 = (uint64_t *)v132;
        v52 = &v96;
        if (v134)
        {
          if (v134 != v133)
          {
            v96 = v134;
            v52 = &v134;
            goto LABEL_124;
          }
          v96 = v95;
          (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v95);
        }
        else
        {
LABEL_124:
          *v52 = 0;
        }
        v97 = v135;
        v53 = v107;
        if (v107 == v106)
        {
          v53 = v106;
          v54 = 4;
LABEL_130:
          (*(void (**)(void))(*v53 + 8 * v54))();
        }
        else if (v107)
        {
          v54 = 5;
          goto LABEL_130;
        }
        v55 = v130;
        if (v130 == v14)
          goto LABEL_136;
        goto LABEL_132;
      }
LABEL_87:
      v94 = (uint64_t *)v41;
      v45 = &v96;
      if (!v134)
        goto LABEL_90;
      if (v134 != v133)
      {
        v96 = v134;
        v45 = &v134;
LABEL_90:
        *v45 = 0;
        goto LABEL_135;
      }
      v96 = v95;
      (*(void (**)(_QWORD *, _BYTE *))(v133[0] + 24))(v133, v95);
LABEL_135:
      v97 = v135;
      v55 = v130;
      if (v130 == v14)
      {
LABEL_136:
        v55 = v14;
        v56 = 4;
        goto LABEL_137;
      }
LABEL_132:
      if (!v55)
        goto LABEL_138;
      v56 = 5;
LABEL_137:
      (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_138:
      v57 = v134;
      if (v134 == v133)
      {
        v57 = v133;
        v58 = 4;
      }
      else
      {
        if (!v134)
          goto LABEL_143;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_143:
      v59 = v122;
      if (v122 == v121)
      {
        v59 = v121;
        v60 = 4;
      }
      else
      {
        if (!v122)
          goto LABEL_148;
        v60 = 5;
      }
      (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_148:
      v61 = v126;
      if (v126 == v125)
      {
        v61 = v125;
        v62 = 4;
      }
      else
      {
        if (!v126)
          goto LABEL_153;
        v62 = 5;
      }
      (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_153:
      v63 = v114;
      if (v114 == v113)
      {
        v63 = v113;
        v64 = 4;
      }
      else
      {
        if (!v114)
          goto LABEL_158;
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_158:
      v65 = v118;
      if (v118 == v117)
      {
        v65 = v117;
        v66 = 4;
      }
      else
      {
        if (!v118)
          goto LABEL_163;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_163:
      v105 = *((_QWORD *)&v101 + 1);
      if (v103)
      {
        if (v103 == v102)
        {
          v107 = v106;
          (*(void (**)(_QWORD *, _QWORD *))(v102[0] + 24))(v102, v106);
          v67 = v107;
          v68 = (uint64_t *)v105;
          *(_QWORD *)&v108 = v104;
          v69 = v94;
          if (v107 == v106)
          {
LABEL_172:
            (*(void (**)(_QWORD *))(v106[0] + 32))(v106);
            if (v69 == v68)
              goto LABEL_194;
LABEL_173:
            v69 = v94;
            v71 = (char *)a3[1];
            v70 = a3[2];
            if ((unint64_t)v71 >= v70)
              goto LABEL_174;
LABEL_185:
            v81 = *v69;
            *((_DWORD *)v71 + 2) = *((_DWORD *)v69 + 2);
            *(_QWORD *)v71 = v81;
            v82 = v71 + 12;
LABEL_193:
            a3[1] = v82;
            goto LABEL_194;
          }
        }
        else
        {
          v67 = (_QWORD *)(*(uint64_t (**)(void))(*v103 + 16))();
          v68 = (uint64_t *)v105;
          v107 = v67;
          *(_QWORD *)&v108 = v104;
          v69 = v94;
          if (v67 == v106)
            goto LABEL_172;
        }
        if (!v67)
        {
          if (v69 == v68)
            goto LABEL_194;
LABEL_184:
          v71 = (char *)a3[1];
          v70 = a3[2];
          if ((unint64_t)v71 < v70)
            goto LABEL_185;
LABEL_174:
          v72 = (char *)*a3;
          v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v71[-*a3] >> 2);
          v74 = v73 + 1;
          if (v73 + 1 > 0x1555555555555555)
            sub_20E867F44();
          v75 = v6;
          v76 = v14;
          v77 = a2;
          v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v72) >> 2);
          if (2 * v78 > v74)
            v74 = 2 * v78;
          if (v78 >= 0xAAAAAAAAAAAAAAALL)
            v79 = 0x1555555555555555;
          else
            v79 = v74;
          if (v79)
          {
            if (v79 > 0x1555555555555555)
              sub_20E877A38();
            v80 = (char *)operator new(12 * v79);
          }
          else
          {
            v80 = 0;
          }
          v83 = *v69;
          v84 = &v80[12 * v73];
          *((_DWORD *)v84 + 2) = *((_DWORD *)v69 + 2);
          *(_QWORD *)v84 = v83;
          v85 = v84;
          if (v71 == v72)
          {
            a3 = v92;
            v82 = v84 + 12;
            *v92 = v84;
            v92[1] = v84 + 12;
            v92[2] = &v80[12 * v79];
            if (v71)
              goto LABEL_191;
          }
          else
          {
            a3 = v92;
            do
            {
              v86 = *(_QWORD *)(v71 - 12);
              v71 -= 12;
              v87 = *((_DWORD *)v71 + 2);
              *(_QWORD *)(v85 - 12) = v86;
              v85 -= 12;
              *((_DWORD *)v85 + 2) = v87;
            }
            while (v71 != v72);
            v71 = *v92;
            v82 = v84 + 12;
            *v92 = v85;
            v92[1] = v84 + 12;
            v92[2] = &v80[12 * v79];
            if (v71)
LABEL_191:
              operator delete(v71);
          }
          a2 = v77;
          v14 = v76;
          v6 = v75;
          goto LABEL_193;
        }
        (*(void (**)(_QWORD *))(*v67 + 40))(v67);
        if (v69 != v68)
          goto LABEL_173;
      }
      else
      {
        v69 = v94;
        if (v94 != *((uint64_t **)&v101 + 1))
          goto LABEL_184;
      }
LABEL_194:
      v88 = v96;
      if (v96 == v95)
      {
        v88 = v95;
        v89 = 4;
      }
      else
      {
        if (!v96)
          goto LABEL_199;
        v89 = 5;
      }
      (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_199:
      v90 = v103;
      if (v103 == v102)
      {
        v90 = v102;
        v91 = 4;
      }
      else
      {
        if (!v103)
          goto LABEL_204;
        v91 = 5;
      }
      (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_204:
      result = v100;
      if (v100 == v99)
      {
        result = v99;
        v15 = 4;
      }
      else
      {
        if (!v100)
          goto LABEL_8;
        v15 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
LABEL_8:
      v13 = v93 + 1;
      v12 = *a2;
      if (v93 + 1 >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 3))
        return result;
    }
    v107 = v21;
    v23 = &v134;
LABEL_18:
    *v23 = 0;
    *(_QWORD *)&v108 = v135;
    *((_QWORD *)&v108 + 1) = v19;
    v24 = &off_24C9C12F8;
LABEL_19:
    v110 = v109;
    ((void (*)(uint64_t, _QWORD *))v24[3])((uint64_t)v14, v109);
    v25 = v130;
    v111 = v131;
    if (v130 == v14)
      goto LABEL_26;
    goto LABEL_20;
  }
  return result;
}

void sub_20EA746BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA74924(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)a1 = *a2;
  v8 = a1 + 8;
  v9 = (_QWORD *)a2[4];
  if (v9)
  {
    if (v9 == a2 + 1)
    {
      *(_QWORD *)(a1 + 32) = v8;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a2[4] + 24))(a2[4], v8);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  v10 = a2[5];
  *(_QWORD *)(a1 + 48) = &off_24C9C11E8;
  *(_QWORD *)(a1 + 40) = v10;
  *(double *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 80) = *a3;
  v11 = a3[4];
  if (v11)
  {
    if ((_QWORD *)v11 == a3 + 1)
    {
      *(_QWORD *)(a1 + 112) = a1 + 88;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a3[4] + 24))(a3[4], a1 + 88);
      goto LABEL_11;
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  *(_QWORD *)(a1 + 112) = v11;
LABEL_11:
  *(_QWORD *)(a1 + 120) = a3[5];
  v12 = *(_QWORD *)a1;
LABEL_12:
  while (v12 != *(_QWORD *)(a1 + 80))
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (!v13)
      goto LABEL_21;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) != 0)
      break;
    v12 = *(_QWORD *)a1 + 32;
    *(_QWORD *)a1 = v12;
    if (v12 != *(_QWORD *)(a1 + 40))
    {
      while (1)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (!v14)
          break;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        v12 = *(_QWORD *)a1;
        if ((v15 & 1) == 0)
        {
          v12 += 32;
          *(_QWORD *)a1 = v12;
          if (v12 != *(_QWORD *)(a1 + 40))
            continue;
        }
        goto LABEL_12;
      }
LABEL_21:
      sub_20E86D37C();
    }
  }
  return a1;
}

void sub_20EA74AAC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_20EA74B58()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA74B6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9C11E8;
  result[1] = v3;
  return result;
}

uint64_t sub_20EA74BA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9C11E8;
  a2[1] = v2;
  return result;
}

BOOL sub_20EA74BBC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(float *)(a2 + 8);
}

uint64_t sub_20EA74BD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20Jas"
                     "perPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vecto"
                                "rINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_Im"
                                "NS9_ImEEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA74C40()
{
  return &unk_24C9C1258;
}

void sub_20EA74C50()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA74C64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9C1278;
  result[1] = v3;
  return result;
}

uint64_t sub_20EA74C98(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9C1278;
  a2[1] = v2;
  return result;
}

BOOL sub_20EA74CB4(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > *(double *)(a1 + 8);
}

uint64_t sub_20EA74CC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20Jas"
                     "perPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vecto"
                                "rINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_Im"
                                "NS9_ImEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11sensor_data14FilteredPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEEddNS_3esn11OptionalRefINS3_ImNS9_ImEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA74D34()
{
  return &unk_24C9C12D8;
}

void sub_20EA74D44()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA74D58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9C12F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20EA74D8C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9C12F8;
  a2[1] = v2;
  return result;
}

BOOL sub_20EA74DA8(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > *(double *)(a1 + 8);
}

uint64_t sub_20EA74DBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11sensor_data14SelectedPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20Jas"
                     "perPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEERNS3_ImNS9_ImEEEEdE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11sensor_data14SelectedPointsERKNSt3__16vectorIN5boost9container12small_vecto"
                                "rINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEERNS3_ImNS9_ImEEEEdE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11sensor_data14SelectedPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEERNS3_ImNS9_ImEEEEdE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11sensor_data14SelectedPointsERKNSt3__16vectorIN5boost9container12small_vectorINS1_20JasperPointCloudEchoELm3EvvEENS2_9allocatorIS8_EEEERNS3_ImNS9_ImEEEEdE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA74E28()
{
  return &unk_24C9C1358;
}

void sub_20EA74E34(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;

  v2 = *(char **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_20E969238();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      v10 = xmmword_2102E0CB0;
      do
      {
        while (1)
        {
          *(_QWORD *)&v8[v9 - 120] = &v8[v9 - 96];
          v11 = (uint64_t **)&v8[v9 - 120];
          v12 = &v4[v9];
          v13 = *(uint64_t **)&v4[v9 - 120];
          *(_OWORD *)&v8[v9 - 112] = v10;
          if (&v4[v9 - 96] == (_BYTE *)v13)
            break;
          *v11 = v13;
          *(_OWORD *)&v8[v9 - 112] = *((_OWORD *)v12 - 7);
          *(_QWORD *)&v4[v9 - 120] = 0;
          *(_QWORD *)&v4[v9 - 112] = 0;
          *(_QWORD *)&v4[v9 - 104] = 0;
          v9 -= 120;
          if (&v4[v9] == v2)
            goto LABEL_8;
        }
        sub_20EA74FD0(v11, v13, &v13[4 * *((_QWORD *)v12 - 14)]);
        *((_QWORD *)v12 - 14) = 0;
        v10 = xmmword_2102E0CB0;
        v9 -= 120;
      }
      while (&v4[v9] != v2);
LABEL_8:
      v2 = *(char **)a1;
      v14 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v14 != v2)
      {
        if (*((_QWORD *)v14 - 13))
        {
          v15 = (char *)*((_QWORD *)v14 - 15);
          if (v14 - 96 != v15)
            operator delete(v15);
        }
        v14 -= 120;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20EA74FD0(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  size_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2;
  v6 = (char *)a3 - (char *)a2;
  v7 = ((char *)a3 - (char *)a2) >> 5;
  if (v7 <= a1[2])
  {
    v13 = (_QWORD *)*a1;
    v14 = a1[1];
    v15 = v14 - v7;
    if (v14 >= v7)
    {
      if (a3 != a2)
      {
        v23 = ((char *)a3 - (char *)a2) >> 5;
        do
        {
          v24 = *v4;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v4 + 2);
          *v13 = v24;
          v25 = v4[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v4 + 6);
          v13[2] = v25;
          v13 += 4;
          v4 += 4;
          --v23;
        }
        while (v23);
      }
    }
    else
    {
      if (v14)
      {
        v16 = a2;
        v4 = &a2[4 * v14];
        v17 = a1[1];
        do
        {
          v18 = *v16;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v16 + 2);
          *v13 = v18;
          v19 = v16[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v16 + 6);
          v13[2] = v19;
          v13 += 4;
          v16 += 4;
          --v17;
        }
        while (v17);
      }
      if (v7 != v14)
      {
        do
        {
          v20 = *v4;
          *((_DWORD *)v13 + 2) = *((_DWORD *)v4 + 2);
          *v13 = v20;
          v21 = v4[2];
          *((_DWORD *)v13 + 6) = *((_DWORD *)v4 + 6);
          v13[2] = v21;
          v13 += 4;
          v4 += 4;
        }
        while (!__CFADD__(v15++, 1));
      }
    }
    a1[1] = v7;
  }
  else
  {
    if (v6 >= 0x7FFFFFFFFFFFFFE1)
      sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
    v8 = operator new(v6);
    v9 = (_QWORD *)*a1;
    if (*a1)
    {
      a1[1] = 0;
      if (a1 + 3 != v9)
        operator delete(v9);
    }
    a1[1] = 0;
    a1[2] = v7;
    *a1 = v8;
    for (i = v8; v4 != a3; v4 += 4)
    {
      v11 = *v4;
      i[2] = *((_DWORD *)v4 + 2);
      *(_QWORD *)i = v11;
      v12 = v4[2];
      i[6] = *((_DWORD *)v4 + 6);
      *((_QWORD *)i + 2) = v12;
      i += 8;
    }
    a1[1] = ((char *)i - (char *)v8) >> 5;
  }
}

char *sub_20EA75184(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t **v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;

  v3 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    sub_20E969238();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      sub_20E877A38();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[120 * v3];
  *(_QWORD *)v8 = v8 + 24;
  v9 = xmmword_2102E0CB0;
  *(_OWORD *)(v8 + 8) = xmmword_2102E0CB0;
  v10 = *(uint64_t **)a2;
  if (a2 + 24 != *(_QWORD *)a2)
  {
    *(_QWORD *)v8 = v10;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v11 = &v7[120 * v6];
    v12 = v8 + 120;
    v14 = (char *)*a1;
    v13 = (char *)a1[1];
    if (v13 != *a1)
      goto LABEL_13;
LABEL_24:
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v11;
    goto LABEL_25;
  }
  sub_20EA74FD0(v8, v10, &v10[4 * *(_QWORD *)(a2 + 8)]);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = xmmword_2102E0CB0;
  v11 = &v7[120 * v6];
  v12 = v8 + 120;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
    goto LABEL_24;
LABEL_13:
  v15 = 0;
  do
  {
    while (1)
    {
      *(_QWORD *)&v8[v15 - 120] = &v8[v15 - 96];
      v16 = (uint64_t **)&v8[v15 - 120];
      v17 = &v13[v15];
      v18 = *(uint64_t **)&v13[v15 - 120];
      *(_OWORD *)&v8[v15 - 112] = v9;
      if (&v13[v15 - 96] == (char *)v18)
        break;
      *v16 = v18;
      *(_OWORD *)&v8[v15 - 112] = *((_OWORD *)v17 - 7);
      *(_QWORD *)&v13[v15 - 120] = 0;
      *(_QWORD *)&v13[v15 - 112] = 0;
      *(_QWORD *)&v13[v15 - 104] = 0;
      v15 -= 120;
      if (&v13[v15] == v14)
        goto LABEL_17;
    }
    sub_20EA74FD0(v16, v18, &v18[4 * *((_QWORD *)v17 - 14)]);
    *((_QWORD *)v17 - 14) = 0;
    v9 = xmmword_2102E0CB0;
    v15 -= 120;
  }
  while (&v13[v15] != v14);
LABEL_17:
  v13 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v11;
  while (v19 != v13)
  {
    if (*((_QWORD *)v19 - 13))
    {
      v20 = (char *)*((_QWORD *)v19 - 15);
      if (v19 - 96 != v20)
        operator delete(v20);
    }
    v19 -= 120;
  }
LABEL_25:
  if (v13)
    operator delete(v13);
  return v12;
}

void sub_20EA753B4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = 0x3FFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (0x3FFFFFFFFFFFFFFLL - v8 < a3 - v8 + v7)
    goto LABEL_23;
  v10 = v8 >> 61;
  v11 = 8 * v8;
  if (v10 > 4)
    v12 = -1;
  else
    v12 = v11;
  v13 = v11 / 5;
  if (v10)
    v13 = v12;
  v14 = v7 + a3;
  if (v13 < 0x3FFFFFFFFFFFFFFLL)
    v6 = v13;
  v15 = v14 <= v6 ? v6 : v14;
  if (v15 >> 58)
LABEL_23:
    sub_20E969408((uint64_t)"get_next_capacity, allocator's max size reached");
  v19 = *(char **)a1;
  v20 = (char *)operator new(32 * v15);
  v21 = v20;
  v22 = *(char **)a1;
  v23 = *(_QWORD *)a1 + 32 * *(_QWORD *)(a1 + 8);
  v24 = v20;
  if (*(uint64_t **)a1 != a2)
  {
    v25 = *(char **)a1;
    v24 = v20;
    do
    {
      v26 = *(_QWORD *)v25;
      *((_DWORD *)v24 + 2) = *((_DWORD *)v25 + 2);
      *(_QWORD *)v24 = v26;
      v27 = *((_QWORD *)v25 + 2);
      *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
      *((_QWORD *)v24 + 2) = v27;
      v24 += 32;
      v25 += 32;
    }
    while (v25 != (char *)a2);
  }
  v28 = *a4;
  *((_DWORD *)v24 + 2) = *((_DWORD *)a4 + 2);
  *(_QWORD *)v24 = v28;
  v29 = a4[2];
  *((_DWORD *)v24 + 6) = *((_DWORD *)a4 + 6);
  *((_QWORD *)v24 + 2) = v29;
  if ((uint64_t *)v23 != a2)
  {
    v30 = &v24[32 * a3];
    v31 = a2;
    do
    {
      v32 = *v31;
      *((_DWORD *)v30 + 2) = *((_DWORD *)v31 + 2);
      *(_QWORD *)v30 = v32;
      v33 = v31[2];
      *((_DWORD *)v30 + 6) = *((_DWORD *)v31 + 6);
      *((_QWORD *)v30 + 2) = v33;
      v31 += 4;
      v30 += 32;
    }
    while (v31 != (uint64_t *)v23);
  }
  if (v22 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v34 = *(_QWORD *)(a1 + 8) + a3;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 16) = v15;
  *a5 = &v21[(char *)a2 - v19];
}

void sub_20EA75554(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  std::__fs::filesystem::path::__string_view v10;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  CFDictionaryRef v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  CFDictionaryRef v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  const void *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count_vtbl *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *exception;
  _QWORD v81[2];
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  CFStringRef filePath;
  std::__shared_weak_count *v86;
  CFDictionaryRef theDict[2];
  void *__p[2];
  unint64_t v89;
  __int128 __dst;
  unint64_t v91;
  __int128 v92;

  v10 = std::__fs::filesystem::path::__parent_path(a1);
  if (v10.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10.__size_ >= 0x17)
  {
    v12 = (v10.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10.__size_ | 7) != 0x17)
      v12 = v10.__size_ | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v10.__size_;
    v91 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v91) = v10.__size_;
  p_dst = &__dst;
  if (v10.__size_)
LABEL_8:
    memmove(p_dst, v10.__data_, v10.__size_);
  *((_BYTE *)p_dst + v10.__size_) = 0;
  *(_OWORD *)__p = __dst;
  v89 = v91;
  v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a4 + 312))(a4, __p);
  if (SHIBYTE(v89) < 0)
    operator delete(__p[0]);
  if ((v14 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Jpeg HW saving file issue: the save folder must exist to proceed");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *((_QWORD *)&__dst + 1) = 0;
  v91 = 0;
  *(_QWORD *)&__dst = (char *)&__dst + 8;
  sub_20EA65D20(&__dst, __p);
  *(_OWORD *)theDict = *(_OWORD *)__p;
  sub_20E866BE0((uint64_t)&__dst, *((char **)&__dst + 1));
  if (!theDict[1])
    goto LABEL_17;
  v15 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    (*(void (**)(CFDictionaryRef))(*(_QWORD *)theDict[1] + 16))(theDict[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)theDict[1]);
    if (!theDict[0])
      goto LABEL_19;
  }
  else
  {
LABEL_17:
    if (!theDict[0])
      goto LABEL_19;
  }
  v18 = (const void *)*MEMORY[0x24BE12038];
  if (CFDictionaryContainsKey(theDict[0], (const void *)*MEMORY[0x24BE12038]))
    goto LABEL_19;
  LODWORD(__p[0]) = 1;
  sub_20EA5DB5C((int *)__p, (CFNumberRef *)&__dst);
  v48 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      if (!(_QWORD)v48)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
  if ((_QWORD)v48)
LABEL_70:
    CFDictionaryAddValue(theDict[0], v18, (const void *)__dst);
LABEL_71:
  v52 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_19:
  if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&__dst, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
    v91 = a1->__pn_.__r_.__value_.__r.__words[2];
  }
  sub_20EA5E4B8((uint64_t)&__dst, &filePath);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)__dst);
  v19 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, 0);
  sub_20EA68C08(&v83, v19, 0);
  v21 = theDict[0];
  v20 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_29;
  v22 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!v21)
      goto LABEL_31;
  }
  else
  {
LABEL_29:
    if (!v21)
      goto LABEL_31;
  }
  v25 = (const void *)*MEMORY[0x24BE12030];
  if (CFDictionaryContainsKey(theDict[0], (const void *)*MEMORY[0x24BE12030]))
    goto LABEL_31;
  LODWORD(__p[0]) = 3;
  sub_20EA5DE68((unsigned int *)__p, (CFNumberRef *)&__dst);
  v55 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
      if (!(_QWORD)v55)
        goto LABEL_85;
      goto LABEL_84;
    }
  }
  if ((_QWORD)v55)
LABEL_84:
    CFDictionaryAddValue(theDict[0], v25, (const void *)__dst);
LABEL_85:
  v59 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_31:
  v27 = theDict[0];
  v26 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_36;
  v28 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!v27)
      goto LABEL_38;
  }
  else
  {
LABEL_36:
    if (!v27)
      goto LABEL_38;
  }
  v31 = (const void *)*MEMORY[0x24BE12028];
  if (CFDictionaryContainsKey(theDict[0], (const void *)*MEMORY[0x24BE12028]))
    goto LABEL_38;
  v62 = v83;
  __p[0] = v83;
  __p[1] = v84;
  if (v84)
  {
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v64 = __ldxr(p_shared_owners);
    while (__stxr(v64 + 1, p_shared_owners));
  }
  sub_20EA67754(&__dst, v62);
  v92 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v67 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  v70 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v71 = (unint64_t *)((char *)__p[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v92;
  if (*((_QWORD *)&v92 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    do
      v76 = __ldaxr(v74);
    while (__stlxr(v76 - 1, v74));
    if (!v76)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 16))(*((_QWORD *)&v73 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v73 + 1));
      if (!(_QWORD)v73)
        goto LABEL_115;
      goto LABEL_114;
    }
  }
  if ((_QWORD)v73)
LABEL_114:
    CFDictionaryAddValue(theDict[0], v31, (const void *)v92);
LABEL_115:
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_38:
  v33 = *(_QWORD *)(a2 + 8);
  v32 = *(std::__shared_weak_count **)(a2 + 16);
  v81[0] = &off_24CA1A9A0;
  v81[1] = v33;
  v82 = v32;
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_20EA75D6C((uint64_t)v81, a3, a5);
  v81[0] = &off_24CA1A9A0;
  v36 = v82;
  if (v82)
  {
    v37 = (unint64_t *)&v82->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v84;
  if (v84)
  {
    v40 = (unint64_t *)&v84->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v86;
  if (v86)
  {
    v43 = (unint64_t *)&v86->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v46 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_20EA75C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_20E86665C(v28 - 96);
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EA75D6C(uint64_t a1@<X0>, uint64_t a2@<X2>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  CFDictionaryRef v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  int v23;
  int v24;
  void *v25;
  void *v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  const __CFDictionary *v31;
  const void *v32;
  const void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::runtime_error *exception;
  unint64_t *v82;
  unint64_t v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  __int128 v87;
  __int128 v88;
  CFDictionaryRef theDict[3];
  int v90;
  uint64_t v91;
  std::string value;
  __int128 v93;
  __int128 v94;

  v91 = a2;
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    goto LABEL_127;
  v7 = *v4;
  v6 = (std::__shared_weak_count *)v4[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v7)
  {
LABEL_127:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PixelBuffer for Jpeg HW encoding cannot be empty");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254A5ACF0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ACF0))
  {
    sub_20EA76874(&value);
    xmmword_254A5ACF8 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
    if (value.__r_.__value_.__l.__size_)
    {
      v82 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    sub_20E86665C((uint64_t)&value);
    __cxa_atexit((void (*)(void *))sub_20EA769AC, &xmmword_254A5ACF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5ACF0);
  }
  v90 = CMPhotoCompressionSessionOpenEmptyContainer();
  if (v90)
  {
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA76A14((uint64_t)&value, "Failed to open empty container for JPEG comperssion. Error code: ", &v90);
    std::runtime_error::runtime_error(v84, &value);
    __cxa_throw(v84, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_20EA65D20(&value, &v94);
  *(_OWORD *)theDict = v94;
  sub_20E866BE0((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  if (!theDict[1])
    goto LABEL_16;
  v12 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    (*(void (**)(CFDictionaryRef))(*(_QWORD *)theDict[1] + 16))(theDict[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)theDict[1]);
    if (!theDict[0])
      goto LABEL_18;
  }
  else
  {
LABEL_16:
    if (!theDict[0])
      goto LABEL_18;
  }
  v15 = (const void *)*MEMORY[0x24BE12050];
  if (CFDictionaryContainsKey(theDict[0], (const void *)*MEMORY[0x24BE12050]))
    goto LABEL_18;
  LODWORD(v94) = 1785750887;
  sub_20EA5DE68((unsigned int *)&v94, (CFNumberRef *)&value);
  v51 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
      if (!(_QWORD)v51)
        goto LABEL_76;
      goto LABEL_75;
    }
  }
  if ((_QWORD)v51)
LABEL_75:
    CFDictionaryAddValue(theDict[0], v15, value.__r_.__value_.__l.__data_);
LABEL_76:
  size = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v56 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_18:
  v16 = (void *)*MEMORY[0x24BE120B0];
  value.__r_.__value_.__s.__data_[0] = 0;
  sub_20E8E223C((uint64_t)theDict, v16, &value);
  v18 = theDict[0];
  v17 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_23;
  v19 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v18)
      goto LABEL_25;
  }
  else
  {
LABEL_23:
    if (!v18)
      goto LABEL_25;
  }
  v22 = (const void *)*MEMORY[0x24BE12098];
  if (CFDictionaryContainsKey(theDict[0], (const void *)*MEMORY[0x24BE12098]))
    goto LABEL_25;
  LODWORD(v94) = 3;
  sub_20EA5DB5C((int *)&v94, (CFNumberRef *)&value);
  v58 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v59 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v58 + 1) + 16))(*((_QWORD *)&v58 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v58 + 1));
      if (!(_QWORD)v58)
        goto LABEL_90;
      goto LABEL_89;
    }
  }
  if ((_QWORD)v58)
LABEL_89:
    CFDictionaryAddValue(theDict[0], v22, value.__r_.__value_.__l.__data_);
LABEL_90:
  v62 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v63 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
LABEL_25:
  v23 = v91;
  if ((_DWORD)v91)
    v24 = 1;
  else
    v24 = 2;
  LODWORD(v91) = v24;
  v25 = (void *)*MEMORY[0x24BE120A0];
  if (v23)
  {
    value.__r_.__value_.__s.__data_[0] = 0;
    sub_20E8E223C((uint64_t)theDict, v25, &value);
    v26 = (void *)*MEMORY[0x24BE12088];
    value.__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    value.__r_.__value_.__s.__data_[0] = 1;
    sub_20E8E223C((uint64_t)theDict, v25, &value);
    v26 = (void *)*MEMORY[0x24BE12088];
    value.__r_.__value_.__s.__data_[0] = 0;
  }
  sub_20E8E223C((uint64_t)theDict, v26, &value);
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_20EA65D20(&value, &v94);
  v27 = v94;
  v88 = v94;
  sub_20E866BE0((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  sub_20EA5E174((char *)&v91 + 4, (CFNumberRef *)&v87);
  if (!*((_QWORD *)&v27 + 1))
    goto LABEL_36;
  v28 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    v31 = (const __CFDictionary *)v88;
    if (!(_QWORD)v27)
      goto LABEL_96;
  }
  else
  {
LABEL_36:
    v31 = (const __CFDictionary *)v88;
    if (!(_QWORD)v27)
      goto LABEL_96;
  }
  v32 = (const void *)*MEMORY[0x24BE12140];
  if (CFDictionaryContainsKey(v31, (const void *)*MEMORY[0x24BE12140]))
    goto LABEL_96;
  v33 = (const void *)v87;
  v94 = v87;
  if (*((_QWORD *)&v87 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_20EA67EC4(&value, v33);
  v93 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v38 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v93;
  if (!*((_QWORD *)&v93 + 1))
    goto LABEL_59;
  v45 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  do
    v47 = __ldaxr(v45);
  while (__stlxr(v47 - 1, v45));
  if (v47)
  {
LABEL_59:
    if (!(_QWORD)v44)
      goto LABEL_61;
    goto LABEL_60;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
  if ((_QWORD)v44)
LABEL_60:
    CFDictionaryAddValue((CFMutableDictionaryRef)v88, v32, (const void *)v93);
LABEL_61:
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v31 = (const __CFDictionary *)v88;
LABEL_96:
  v65 = (void *)*MEMORY[0x24BE12090];
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  sub_20E934D64((uint64_t)theDict, v65, (CFTypeRef *)&value.__r_.__value_.__l.__data_);
  *(_QWORD *)&v94 = 0;
  v66 = *(_QWORD *)(a1 + 8);
  if (v66)
  {
    v67 = *(std::__shared_weak_count **)(v66 + 8);
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 - 1, v68));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  v90 = CMPhotoCompressionSessionAddImage();
  if (v90)
  {
    v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA76B4C((uint64_t)&value, &v90);
    std::runtime_error::runtime_error(v85, &value);
    __cxa_throw(v85, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)&v93 = 0;
  v71 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
  v90 = v71;
  sub_20EA5ED70(a3, (std::__shared_weak_count_vtbl *)v93, 0);
  if (v71)
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA76C8C((uint64_t)&value, &v90);
    std::runtime_error::runtime_error(v86, &value);
    __cxa_throw(v86, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v79 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_20EA76660(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5ACF0);
  _Unwind_Resume(a1);
}

void sub_20EA76678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  sub_20E86665C(v23 - 80);
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA76874(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  std::runtime_error *exception;
  std::string v5;
  _BYTE v6[12];

  *(_DWORD *)&v6[8] = 0;
  *(_QWORD *)v6 = CMPhotoCompressionSessionCreate();
  if (*(_DWORD *)v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20EA76DCC((uint64_t)&v5, "Failed to create JPEG compression session. Error code: ", (int *)v6);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v2 = *(_QWORD *)&v6[4];
  *a1 = *(_QWORD *)&v6[4];
  result = (_QWORD *)operator new();
  *result = &off_24C9C13C0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  a1[1] = result;
  return result;
}

void sub_20EA76944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __break(1u);
}

void sub_20EA76998()
{
  __cxa_end_catch();
  JUMPOUT(0x20EA769A0);
}

uint64_t sub_20EA769AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EA76A14(uint64_t a1, char *a2, int *a3)
{
  uint64_t result;
  _DWORD v5[6];
  int v6;
  std::string v7;
  _QWORD v8[5];
  _QWORD *v9;

  v6 = 0;
  sub_20EA770AC(v5, a2);
  std::to_string(&v7, *a3);
  v8[0] = v5;
  v8[1] = &v7;
  v8[2] = v5;
  v8[3] = &v7;
  v8[4] = &v7;
  if (v6 == -1)
    sub_20E877AB8();
  v9 = v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C1380[v6])(&v9, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v6 == -1)
    sub_20E877AB8();
  v8[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1398[v6])(v8, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1368[v6])(v8, v5);
  return result;
}

void sub_20EA76B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA76B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA76B18);
}

uint64_t sub_20EA76B4C(uint64_t a1, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20EA7719C(v4, "Failed to add image to session. Error code: ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C1380[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1398[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1368[v5])(v7, v4);
  return result;
}

void sub_20EA76C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA76C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA76C58);
}

uint64_t sub_20EA76C8C(uint64_t a1, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20EA7728C(v4, "Failed to close container and copy backing. Error code: ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C1380[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20E877AB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1398[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1368[v5])(v7, v4);
  return result;
}

void sub_20EA76D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA76DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA76D98);
}

uint64_t sub_20EA76DCC(uint64_t a1, char *a2, int *a3)
{
  uint64_t result;
  _DWORD v5[6];
  int v6;
  std::string v7;
  _QWORD v8[5];
  _QWORD *v9;

  v6 = 0;
  sub_20EA76F04(v5, a2);
  std::to_string(&v7, *a3);
  v8[0] = v5;
  v8[1] = &v7;
  v8[2] = v5;
  v8[3] = &v7;
  v8[4] = &v7;
  if (v6 == -1)
    sub_20E877AB8();
  v9 = v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9C1380[v6])(&v9, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v6 == -1)
    sub_20E877AB8();
  v8[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1398[v6])(v8, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9C1368[v6])(v8, v5);
  return result;
}

void sub_20EA76EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA76EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EA76ED0);
}

_DWORD *sub_20EA76F04(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1368[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA76FF8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA7701C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20EA7703C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP25CMPhotoCompressionSessionEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_DWORD *sub_20EA770AC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1368[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EA7719C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1368[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EA7728C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1368[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20EA7737C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1368[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA7746C(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3@<D0>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  float64x2_t v14;
  uint64x2_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;

  sub_20E89E538(a2, (uint64_t *)a1);
  v5 = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a2 + 448) = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a2 + 464) = v5;
  *(_OWORD *)(a2 + 480) = *(_OWORD *)(a1 + 480);
  *(_DWORD *)(a2 + 496) = *(_DWORD *)(a1 + 496);
  v6 = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a2 + 384) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(a2 + 400) = v6;
  v7 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a2 + 416) = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a2 + 432) = v7;
  v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a2 + 320) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a2 + 336) = v8;
  v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a2 + 352) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a2 + 368) = v9;
  v10 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 304) = v10;
  v11 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a2 + 504) = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a2 + 512) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(double *)&a3 < 0.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Calibration data scale factor must be positive.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v14 = vmulq_n_f64(*(float64x2_t *)(a2 + 128), 1.0 / *(double *)&a3);
  *(float64x2_t *)(a2 + 112) = vmulq_n_f64(*(float64x2_t *)(a2 + 112), 1.0 / *(double *)&a3);
  *(float64x2_t *)(a2 + 128) = v14;
  *(float64x2_t *)(a2 + 144) = vmulq_n_f64(*(float64x2_t *)(a2 + 144), 1.0 / *(double *)&a3);
  v15.i64[0] = *(_QWORD *)a2;
  v15.i64[1] = HIDWORD(*(_QWORD *)a2);
  *(int32x2_t *)a2 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_lane_s64(a3, 0)))));
  v16 = *(std::__shared_weak_count **)(a2 + 512);
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20EA775F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E90BD50(v1);
  _Unwind_Resume(a1);
}

void sub_20EA77608(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_20E90BD50(v1);
  _Unwind_Resume(a1);
}

void sub_20EA77624()
{
  uint64_t v0;
  unsigned int *v1;
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  size_t v33;
  const char *v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const void *v82;
  void *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  int64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  __int128 *v105;
  unint64_t v106;
  const char *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  size_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  unsigned __int8 v161;
  uint64_t v162;
  const char *v163;
  NSObject *v164;
  unint64_t *v165;
  unint64_t *v166;
  unint64_t *v167;
  unint64_t *v168;
  unint64_t *v169;
  unint64_t *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t *v181;
  unint64_t *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  float64x2_t v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  int64x2_t v196;
  char v197;
  _OWORD v198[45];
  uint64_t v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  __int128 v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  int64x2_t v214;
  uint64_t v215;
  int64x2_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  __int128 category;
  __int128 v221;
  __int128 v222;
  float64x2_t v223;
  __int128 v224;
  std::__shared_weak_count *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  int64x2_t v231;
  char v232;
  _OWORD v233[45];
  uint64_t v234;
  std::__shared_weak_count *v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  unsigned int v242;
  _QWORD v243[55];
  void *object;
  __int128 v245;
  __int128 v246;
  void *__p[2];
  unint64_t v248;
  char v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  unsigned int v254;
  _QWORD v255[59];

  v0 = MEMORY[0x24BDAC7A8]();
  v1 = (unsigned int *)v0;
  v3 = v2;
  v255[56] = *MEMORY[0x24BDAC8D0];
  v4 = *(std::__shared_weak_count **)(v0 + 512);
  *(_QWORD *)(v0 + 504) = 0;
  *(_QWORD *)(v0 + 512) = 0;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v1[124])
      goto LABEL_198;
  }
  else
  {
LABEL_5:
    if (!*(_DWORD *)(v0 + 496))
      goto LABEL_198;
  }
  v7 = *((_QWORD *)v1 + 23);
  if (!v7)
  {
    sub_20EA79230(&category);
    if (**(int **)(category + 56) <= 5)
    {
      v28 = *(unsigned __int8 *)(category + 72);
      v29 = sub_20E8C31DC(category, "OSLogSurrogateAppender", 1, 0);
      v30 = v29;
      if (v28 || v29 != 0)
      {
        *(_QWORD *)&v221 = &category;
        *((std::chrono::steady_clock::time_point *)&v221 + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v222 = std::chrono::system_clock::now();
        DWORD2(v222) = 5;
        *(_QWORD *)&v223.f64[0] = "unknown file";
        LODWORD(v223.f64[1]) = 103;
        v225 = 0;
        *(_QWORD *)&v224 = "unknown function";
        *((_QWORD *)&v224 + 1) = 0;
        v32 = *(_QWORD *)v221;
        if (*(char *)(*(_QWORD *)v221 + 39) < 0)
        {
          v34 = *(const char **)(v32 + 16);
          v33 = *(_QWORD *)(v32 + 24);
        }
        else
        {
          v33 = *(unsigned __int8 *)(*(_QWORD *)v221 + 39);
          v34 = (const char *)(*(_QWORD *)v221 + 16);
        }
        v183 = *(_QWORD *)v221 + 16;
        v184 = v3;
        v102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v246 && SHIBYTE(v245) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v103 = byte_254A4A4F8;
        else
          v103 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v104 = byte_254A4A4F8[23];
        else
          v104 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v103, v34);
        v105 = &v245;
        if (v104 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v104 >= 0x17)
        {
          v106 = v30;
          v107 = v34;
          v108 = v32;
          v109 = v28;
          v110 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v104 | 7) != 0x17)
            v110 = v104 | 7;
          v111 = v110 + 1;
          v105 = (__int128 *)operator new(v110 + 1);
          *(_QWORD *)&v246 = v111 | 0x8000000000000000;
          *(_QWORD *)&v245 = v105;
          *((_QWORD *)&v245 + 1) = v104;
          v28 = v109;
          v32 = v108;
          v34 = v107;
          v30 = v106;
        }
        else
        {
          BYTE7(v246) = v104;
          if (!v104)
          {
LABEL_131:
            *((_BYTE *)v105 + v104) = 0;
            BYTE8(v246) = 1;
            v112 = __p;
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v3 = v184;
            if (v33 >= 0x17)
            {
              v113 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v113 = v33 | 7;
              v114 = v113 + 1;
              v112 = operator new(v113 + 1);
              v248 = v114 | 0x8000000000000000;
              __p[0] = v112;
              __p[1] = (void *)v33;
            }
            else
            {
              HIBYTE(v248) = v33;
              if (!v33)
                goto LABEL_139;
            }
            memmove(v112, v34, v33);
LABEL_139:
            *((_BYTE *)v112 + v33) = 0;
            v249 = 1;
            v115 = object;
            if (SHIBYTE(v248) < 0)
              operator delete(__p[0]);
            if (BYTE8(v246) && SBYTE7(v246) < 0)
              operator delete((void *)v245);
            if (object)
              os_release(object);
            if (v30 && *(_QWORD *)(v30 + 24))
            {
              v116 = _os_log_pack_size();
              v117 = (std::__shared_weak_count_vtbl *)operator new(v116, (std::align_val_t)8uLL);
              v118 = (std::__shared_weak_count *)operator new();
              v119 = v118;
              v118->__shared_owners_ = 0;
              v120 = (unint64_t *)&v118->__shared_owners_;
              v118->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v118->__shared_weak_owners_ = 0;
              v118[1].__vftable = v117;
              object = v117;
              *(_QWORD *)&v245 = v117;
              *((_QWORD *)&v245 + 1) = v118;
              do
                v121 = __ldxr(v120);
              while (__stxr(v121 + 1, v120));
              v246 = 0uLL;
              __p[0] = 0;
              do
                v122 = __ldaxr(v120);
              while (__stlxr(v122 - 1, v120));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v119);
              }
              v123 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v124 = operator new();
              v125 = *(unsigned __int8 *)(v32 + 39);
              v126 = v183;
              if ((v125 & 0x80u) != 0)
              {
                v126 = *(_QWORD *)(v32 + 16);
                v125 = *(_QWORD *)(v32 + 24);
              }
              *(_QWORD *)v124 = v123;
              *(_OWORD *)(v124 + 8) = v245;
              v245 = 0uLL;
              *(_OWORD *)(v124 + 24) = v246;
              v246 = 0uLL;
              *(_QWORD *)(v124 + 40) = v126;
              *(_QWORD *)(v124 + 48) = v125;
              *(_BYTE *)(v124 + 56) = 16;
              v214.i64[0] = 0;
              *(_QWORD *)&v186 = v124;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), &v186);
              v127 = v186;
              *(_QWORD *)&v186 = 0;
              if (v127)
              {
                v128 = *(std::__shared_weak_count **)(v127 + 32);
                if (v128)
                {
                  v129 = (unint64_t *)&v128->__shared_owners_;
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                v131 = *(std::__shared_weak_count **)(v127 + 16);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                MEMORY[0x212BC6398](v127, 0x10F0C40B62ED6C6);
                v134 = v214.i64[0];
                v214.i64[0] = 0;
                if (v134)
                {
                  v135 = *(std::__shared_weak_count **)(v134 + 32);
                  if (v135)
                  {
                    v136 = (unint64_t *)&v135->__shared_owners_;
                    do
                      v137 = __ldaxr(v136);
                    while (__stlxr(v137 - 1, v136));
                    if (!v137)
                    {
                      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                      std::__shared_weak_count::__release_weak(v135);
                    }
                  }
                  v138 = *(std::__shared_weak_count **)(v134 + 16);
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  MEMORY[0x212BC6398](v134, 0x10F0C40B62ED6C6);
                }
              }
              v141 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
              if (*((_QWORD *)&v246 + 1))
              {
                v142 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v144 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
              if (*((_QWORD *)&v245 + 1))
              {
                v145 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
            }
            else
            {
              os_log_type_enabled(v115, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v147 = (void *)_os_log_send_and_compose_impl();
              if (v147)
                free(v147);
            }
            if (v28)
            {
              sub_20E8C003C((uint64_t)&v221, "External lens distortion model (FFA) is not loaded.");
              sub_20E863570((uint64_t)&v221);
            }
            sub_20E863570((uint64_t)&v221);
            v148 = v225;
            if (v225)
            {
              v149 = (unint64_t *)&v225->__shared_owners_;
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            goto LABEL_198;
          }
        }
        memmove(v105, v103, v104);
        goto LABEL_131;
      }
    }
LABEL_198:
    *v3 = 0;
    v3[1] = 0;
    return;
  }
  v254 = 0;
  v255[0] = 0x7FF8000000000000;
  v255[1] = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)&v255[53] = xmmword_2102E3C60;
  v8 = (__int128 *)(v1 + 66);
  switch(v1[2])
  {
    case 1u:
    case 2u:
    case 3u:
      v9 = (__int128 *)*((_QWORD *)v1 + 2);
      if (*((_QWORD *)v1 + 3) - (_QWORD)v9 > 0x18uLL)
        goto LABEL_11;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 111, (uint64_t)"radial_distortion_.size() >= 4", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_316;
      }
      v9 = (__int128 *)*((_QWORD *)v1 + 2);
      v7 = *((_QWORD *)v1 + 23);
LABEL_11:
      v10 = *((_QWORD *)v1 + 24);
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)&v13 = *((_QWORD *)v1 + 29);
      v14 = *(int64x2_t *)(v1 + 54);
      v15 = *((int64x2_t *)v1 + 15);
      v16 = *((_QWORD *)v1 + 35);
      v17 = *v8;
      *((_QWORD *)&v13 + 1) = *((_QWORD *)v1 + 32);
      v18 = *((_OWORD *)v1 + 7);
      v19 = *((_OWORD *)v1 + 8);
      v20 = *((_OWORD *)v1 + 10);
      v21 = (std::__shared_weak_count *)*((_QWORD *)v1 + 22);
      v188 = *((float64x2_t *)v1 + 9);
      v189 = v20;
      v186 = v18;
      v187 = v19;
      *(double *)&v20 = vmuld_n_f64(v188.f64[0], *(double *)&v18);
      v190 = v21;
      *(double *)&v191 = 1.0 / *(double *)&v18;
      *((double *)&v191 + 1) = -*((double *)&v18 + 1) / *(double *)&v20;
      *(double *)&v192 = -(vmuld_n_f64(v188.f64[0], *(double *)&v19) - vmuld_lane_f64(*((double *)&v18 + 1), v188, 1))
                       / *(double *)&v20;
      *((_QWORD *)&v192 + 1) = 0;
      *(double *)&v193 = 1.0 / v188.f64[0];
      *((double *)&v193 + 1) = -v188.f64[1] / v188.f64[0];
      v194 = 0uLL;
      v195 = 0x3FF0000000000000;
      *(_QWORD *)&v198[19] = v7;
      *((_QWORD *)&v198[19] + 1) = v10;
      *(_QWORD *)&v198[21] = v17;
      v198[20] = vzip1q_s64(v14, v15);
      *((_QWORD *)&v198[22] + 1) = *((_QWORD *)&v17 + 1);
      *(int64x2_t *)((char *)&v198[21] + 8) = vzip2q_s64(v14, v15);
      *(_QWORD *)&v198[24] = v16;
      v198[23] = v13;
      *(_OWORD *)((char *)&v198[24] + 8) = *(_OWORD *)(v1 + 50);
      v22 = *v9;
      v198[1] = v9[1];
      v198[0] = v22;
      BYTE12(v198[18]) = 0;
      v196 = vdupq_n_s64(0x7FF8000000000000uLL);
      v197 = 0;
      *(_OWORD *)((char *)&v198[25] + 8) = xmmword_2102E3C50;
      *((_QWORD *)&v207 + 1) = 0xBFF0000000000000;
      v208 = 0xFFEFFFFFFFFFFFFFLL;
      v242 = -1;
      v222 = v19;
      v223 = v188;
      v224 = v189;
      v221 = v18;
      v225 = v21;
      v230 = 0x3FF0000000000000;
      v228 = v193;
      v229 = 0u;
      v226 = v191;
      v227 = (unint64_t)v192;
      v232 = 0;
      v231 = v196;
      memcpy(v233, v198, 0x12DuLL);
      *(_QWORD *)&v233[19] = v7;
      *((_QWORD *)&v233[19] + 1) = v10;
      if (v10)
      {
        v23 = (unint64_t *)(v10 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v233[22] = v198[22];
      v233[23] = v198[23];
      v233[20] = v198[20];
      v233[21] = v198[21];
      *(_QWORD *)&v233[24] = *(_QWORD *)&v198[24];
      *(_OWORD *)((char *)&v233[24] + 8) = *(_OWORD *)((char *)&v198[24] + 8);
      v242 = 7;
      v243[0] = 0x7FF8000000000000;
      v243[1] = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)&v243[53] = xmmword_2102E3C60;
      sub_20E9708B8((uint64_t)&object, (uint64_t)&v221);
      memcpy(v255, v243, 0x1B8uLL);
      if (v242 == -1)
        goto LABEL_227;
      if (v242 > 7)
      {
        if (v242 > 0xB)
        {
          if (v242 < 0xF)
            goto LABEL_227;
          v25 = v235;
          if (!v235)
            goto LABEL_227;
          v101 = (unint64_t *)&v235->__shared_owners_;
          do
            v27 = __ldaxr(v101);
          while (__stlxr(v27 - 1, v101));
        }
        else if (v242 > 9)
        {
          if (v242 == 10)
            goto LABEL_227;
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v233[31] + 1);
          if (!*((_QWORD *)&v233[31] + 1))
            goto LABEL_227;
          v154 = (unint64_t *)(*((_QWORD *)&v233[31] + 1) + 8);
          do
            v27 = __ldaxr(v154);
          while (__stlxr(v27 - 1, v154));
        }
        else
        {
          if (v242 != 9)
            goto LABEL_227;
          v25 = *(std::__shared_weak_count **)&v233[21];
          if (!*(_QWORD *)&v233[21])
            goto LABEL_227;
          v100 = (unint64_t *)(*(_QWORD *)&v233[21] + 8);
          do
            v27 = __ldaxr(v100);
          while (__stlxr(v27 - 1, v100));
        }
      }
      else
      {
        if (v242 != 7)
          goto LABEL_227;
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v233[19] + 1);
        if (!*((_QWORD *)&v233[19] + 1))
          goto LABEL_227;
        v26 = (unint64_t *)(*((_QWORD *)&v233[19] + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
      }
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
LABEL_227:
      v155 = (std::__shared_weak_count *)*((_QWORD *)&v198[19] + 1);
      if (!*((_QWORD *)&v198[19] + 1))
        goto LABEL_286;
      v156 = (unint64_t *)(*((_QWORD *)&v198[19] + 1) + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      goto LABEL_284;
    case 7u:
      v60 = (__int128 *)*((_QWORD *)v1 + 2);
      if (*((_QWORD *)v1 + 3) - (_QWORD)v60 > 0x30uLL)
        goto LABEL_67;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 118, (uint64_t)"radial_distortion_.size() >= 7", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_316;
      }
      v60 = (__int128 *)*((_QWORD *)v1 + 2);
      v7 = *((_QWORD *)v1 + 23);
LABEL_67:
      v61 = v3;
      v62 = *((_QWORD *)v1 + 24);
      if (v62)
      {
        v63 = (unint64_t *)(v62 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      *(_QWORD *)&v65 = *((_QWORD *)v1 + 29);
      v66 = *(int64x2_t *)(v1 + 54);
      v67 = *((int64x2_t *)v1 + 15);
      v68 = *((_QWORD *)v1 + 35);
      v69 = *v8;
      *((_QWORD *)&v65 + 1) = *((_QWORD *)v1 + 32);
      v70 = *((_OWORD *)v1 + 7);
      v71 = *((_OWORD *)v1 + 8);
      v72 = *((_OWORD *)v1 + 10);
      v73 = (std::__shared_weak_count *)*((_QWORD *)v1 + 22);
      v188 = *((float64x2_t *)v1 + 9);
      v189 = v72;
      v186 = v70;
      v187 = v71;
      *(double *)&v72 = vmuld_n_f64(v188.f64[0], *(double *)&v70);
      v190 = v73;
      *(double *)&v191 = 1.0 / *(double *)&v70;
      *((double *)&v191 + 1) = -*((double *)&v70 + 1) / *(double *)&v72;
      *(double *)&v192 = -(vmuld_n_f64(v188.f64[0], *(double *)&v71) - vmuld_lane_f64(*((double *)&v70 + 1), v188, 1))
                       / *(double *)&v72;
      *((_QWORD *)&v192 + 1) = 0;
      *(double *)&v193 = 1.0 / v188.f64[0];
      *((double *)&v193 + 1) = -v188.f64[1] / v188.f64[0];
      v194 = 0uLL;
      v195 = 0x3FF0000000000000;
      *((_QWORD *)&v198[20] + 1) = v7;
      *(_QWORD *)&v198[21] = v62;
      *((_QWORD *)&v198[22] + 1) = v69;
      *(int64x2_t *)((char *)&v198[21] + 8) = vzip1q_s64(v66, v67);
      *(_QWORD *)&v198[24] = *((_QWORD *)&v69 + 1);
      v198[23] = vzip2q_s64(v66, v67);
      *((_QWORD *)&v198[25] + 1) = v68;
      *(_OWORD *)((char *)&v198[24] + 8) = v65;
      v198[26] = *(_OWORD *)(v1 + 50);
      v75 = v60[1];
      v74 = v60[2];
      v76 = *v60;
      *(_QWORD *)&v198[3] = *((_QWORD *)v60 + 6);
      v198[0] = v76;
      v198[1] = v75;
      v198[2] = v74;
      BYTE4(v198[20]) = 0;
      v196 = vdupq_n_s64(0x7FF8000000000000uLL);
      v197 = 0;
      *(_QWORD *)&v198[27] = 0x7FF8000000000000;
      *((_QWORD *)&v198[27] + 1) = 0xFFEFFFFFFFFFFFFFLL;
      v209 = xmmword_2102E3C60;
      v242 = -1;
      v223 = v188;
      v224 = v189;
      v221 = v70;
      v222 = v71;
      v226 = v191;
      v225 = v73;
      v230 = 0x3FF0000000000000;
      v229 = 0u;
      v228 = v193;
      v227 = (unint64_t)v192;
      v232 = 0;
      v231 = v196;
      memcpy(v233, v198, 0x145uLL);
      *((_QWORD *)&v233[20] + 1) = v7;
      *(_QWORD *)&v233[21] = v62;
      if (v62)
      {
        v77 = (unint64_t *)(v62 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      *(_OWORD *)((char *)&v233[23] + 8) = *(_OWORD *)((char *)&v198[23] + 8);
      *(_OWORD *)((char *)&v233[24] + 8) = *(_OWORD *)((char *)&v198[24] + 8);
      *((_QWORD *)&v233[25] + 1) = *((_QWORD *)&v198[25] + 1);
      *(_OWORD *)((char *)&v233[21] + 8) = *(_OWORD *)((char *)&v198[21] + 8);
      *(_OWORD *)((char *)&v233[22] + 8) = *(_OWORD *)((char *)&v198[22] + 8);
      v233[26] = v198[26];
      v242 = 9;
      v243[0] = 0x7FF8000000000000;
      v243[1] = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)&v243[53] = xmmword_2102E3C60;
      sub_20E9708B8((uint64_t)&object, (uint64_t)&v221);
      memcpy(v255, v243, 0x1B8uLL);
      v3 = v61;
      if (v242 == -1)
        goto LABEL_261;
      if (v242 > 7)
      {
        if (v242 > 0xB)
        {
          if (v242 < 0xF)
            goto LABEL_261;
          v79 = v235;
          if (!v235)
            goto LABEL_261;
          v158 = (unint64_t *)&v235->__shared_owners_;
          do
            v81 = __ldaxr(v158);
          while (__stlxr(v81 - 1, v158));
        }
        else if (v242 > 9)
        {
          if (v242 == 10)
            goto LABEL_261;
          v79 = (std::__shared_weak_count *)*((_QWORD *)&v233[31] + 1);
          if (!*((_QWORD *)&v233[31] + 1))
            goto LABEL_261;
          v165 = (unint64_t *)(*((_QWORD *)&v233[31] + 1) + 8);
          do
            v81 = __ldaxr(v165);
          while (__stlxr(v81 - 1, v165));
        }
        else
        {
          if (v242 != 9)
            goto LABEL_261;
          v79 = *(std::__shared_weak_count **)&v233[21];
          if (!*(_QWORD *)&v233[21])
            goto LABEL_261;
          v151 = (unint64_t *)(*(_QWORD *)&v233[21] + 8);
          do
            v81 = __ldaxr(v151);
          while (__stlxr(v81 - 1, v151));
        }
      }
      else
      {
        if (v242 != 7)
          goto LABEL_261;
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v233[19] + 1);
        if (!*((_QWORD *)&v233[19] + 1))
          goto LABEL_261;
        v80 = (unint64_t *)(*((_QWORD *)&v233[19] + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
      }
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
LABEL_261:
      v155 = *(std::__shared_weak_count **)&v198[21];
      if (!*(_QWORD *)&v198[21])
        goto LABEL_286;
      v166 = (unint64_t *)(*(_QWORD *)&v198[21] + 8);
      do
        v157 = __ldaxr(v166);
      while (__stlxr(v157 - 1, v166));
      goto LABEL_284;
    case 9u:
      if (*((_QWORD *)v1 + 3) - *((_QWORD *)v1 + 2) <= 0x68uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 125, (uint64_t)"radial_distortion_.size() >= 14", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_316;
      }
      v82 = (const void *)*((_QWORD *)v1 + 5);
      if (*((_QWORD *)v1 + 6) - (_QWORD)v82 > 0x68uLL)
        goto LABEL_85;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 126, (uint64_t)"radial_undistortion_.size() >= 14", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_316;
      }
      v82 = (const void *)*((_QWORD *)v1 + 5);
LABEL_85:
      v83 = (void *)*((_QWORD *)v1 + 2);
      v84 = *((_QWORD *)v1 + 24);
      *(_QWORD *)&category = *((_QWORD *)v1 + 23);
      *((_QWORD *)&category + 1) = v84;
      if (v84)
      {
        v85 = (unint64_t *)(v84 + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      *(_QWORD *)&v87 = *((_QWORD *)v1 + 29);
      v88 = *(int64x2_t *)(v1 + 54);
      v89 = *((int64x2_t *)v1 + 15);
      v90 = *((_QWORD *)v1 + 35);
      v91 = *v8;
      *((_QWORD *)&v87 + 1) = *((_QWORD *)v1 + 32);
      v215 = *(_QWORD *)v8;
      v214 = vzip1q_s64(v88, v89);
      v217 = *((_QWORD *)&v91 + 1);
      v216 = vzip2q_s64(v88, v89);
      v219 = v90;
      v218 = v87;
      sub_20EB38854((uint64_t)&v186, (__int128 *)v1 + 7, v83, &category, (uint64_t)&v214, v1 + 50, v82);
      v92 = (std::__shared_weak_count *)*((_QWORD *)&category + 1);
      if (*((_QWORD *)&category + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&category + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      *(_OWORD *)((char *)&v198[37] + 8) = xmmword_2102E3C50;
      v210 = 0xBFF0000000000000;
      v211 = 0xFFEFFFFFFFFFFFFFLL;
      v242 = -1;
      v223 = v188;
      v224 = v189;
      v221 = v186;
      v222 = v187;
      v226 = v191;
      v225 = v190;
      v230 = v195;
      v229 = v194;
      v228 = v193;
      v227 = v192;
      v232 = v197;
      v231 = v196;
      memcpy(v233, v198, 0x1E9uLL);
      v233[31] = v198[31];
      if (*((_QWORD *)&v198[31] + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v198[31] + 1) + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v233[34] = v198[34];
      v233[35] = v198[35];
      v233[32] = v198[32];
      v233[33] = v198[33];
      *(_QWORD *)&v233[36] = *(_QWORD *)&v198[36];
      *(_OWORD *)((char *)&v233[36] + 8) = *(_OWORD *)((char *)&v198[36] + 8);
      v242 = 11;
      v243[0] = 0x7FF8000000000000;
      v243[1] = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)&v243[53] = xmmword_2102E3C60;
      sub_20E9708B8((uint64_t)&object, (uint64_t)&v221);
      memcpy(v255, v243, 0x1B8uLL);
      if (v242 == -1)
        goto LABEL_281;
      if (v242 > 7)
      {
        if (v242 > 0xB)
        {
          if (v242 < 0xF)
            goto LABEL_281;
          v97 = v235;
          if (!v235)
            goto LABEL_281;
          v160 = (unint64_t *)&v235->__shared_owners_;
          do
            v99 = __ldaxr(v160);
          while (__stlxr(v99 - 1, v160));
        }
        else if (v242 > 9)
        {
          if (v242 == 10)
            goto LABEL_281;
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v233[31] + 1);
          if (!*((_QWORD *)&v233[31] + 1))
            goto LABEL_281;
          v169 = (unint64_t *)(*((_QWORD *)&v233[31] + 1) + 8);
          do
            v99 = __ldaxr(v169);
          while (__stlxr(v99 - 1, v169));
        }
        else
        {
          if (v242 != 9)
            goto LABEL_281;
          v97 = *(std::__shared_weak_count **)&v233[21];
          if (!*(_QWORD *)&v233[21])
            goto LABEL_281;
          v153 = (unint64_t *)(*(_QWORD *)&v233[21] + 8);
          do
            v99 = __ldaxr(v153);
          while (__stlxr(v99 - 1, v153));
        }
      }
      else
      {
        if (v242 != 7)
          goto LABEL_281;
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v233[19] + 1);
        if (!*((_QWORD *)&v233[19] + 1))
          goto LABEL_281;
        v98 = (unint64_t *)(*((_QWORD *)&v233[19] + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
      }
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
LABEL_281:
      v155 = (std::__shared_weak_count *)*((_QWORD *)&v198[31] + 1);
      if (!*((_QWORD *)&v198[31] + 1))
        goto LABEL_286;
      v170 = (unint64_t *)(*((_QWORD *)&v198[31] + 1) + 8);
      do
        v157 = __ldaxr(v170);
      while (__stlxr(v157 - 1, v170));
      goto LABEL_284;
    case 0xCu:
      if (*((_QWORD *)v1 + 3) - *((_QWORD *)v1 + 2) <= 0xD8uLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 133, (uint64_t)"radial_distortion_.size() >= 28", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_316;
      }
      v35 = (const void *)*((_QWORD *)v1 + 5);
      if (*((_QWORD *)v1 + 6) - (_QWORD)v35 > 0xD8uLL)
        goto LABEL_38;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationData.cpp", 134, (uint64_t)"radial_undistortion_.size() >= 28", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_316:
        abort();
      }
      v35 = (const void *)*((_QWORD *)v1 + 5);
LABEL_38:
      v36 = (void *)*((_QWORD *)v1 + 2);
      v37 = *((_QWORD *)v1 + 24);
      *(_QWORD *)&category = *((_QWORD *)v1 + 23);
      *((_QWORD *)&category + 1) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      *(_QWORD *)&v40 = *((_QWORD *)v1 + 29);
      v41 = *(int64x2_t *)(v1 + 54);
      v42 = *((int64x2_t *)v1 + 15);
      v43 = *((_QWORD *)v1 + 35);
      v44 = *v8;
      *((_QWORD *)&v40 + 1) = *((_QWORD *)v1 + 32);
      v215 = *(_QWORD *)v8;
      v214 = vzip1q_s64(v41, v42);
      v217 = *((_QWORD *)&v44 + 1);
      v216 = vzip2q_s64(v41, v42);
      v219 = v43;
      v218 = v40;
      sub_20EB3C668((uint64_t)&v186, (__int128 *)v1 + 7, v36, &category, (uint64_t)&v214, v1 + 50, v35);
      v45 = (std::__shared_weak_count *)*((_QWORD *)&category + 1);
      if (*((_QWORD *)&category + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&category + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v207 = xmmword_2102E3C50;
      v212 = 0xBFF0000000000000;
      v213 = 0xFFEFFFFFFFFFFFFFLL;
      v242 = -1;
      v223 = v188;
      v224 = v189;
      v221 = v186;
      v222 = v187;
      v226 = v191;
      v225 = v190;
      v230 = v195;
      v229 = v194;
      v228 = v193;
      v227 = v192;
      v232 = v197;
      v231 = v196;
      memcpy(v233, v198, 0x2C9uLL);
      v234 = v199;
      v235 = v200;
      if (v200)
      {
        v48 = (unint64_t *)&v200->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v238 = v203;
      v239 = v204;
      v236 = v201;
      v237 = v202;
      v240 = v205;
      v241 = v206;
      v242 = 15;
      v243[0] = 0x7FF8000000000000;
      v243[1] = 0xFFEFFFFFFFFFFFFFLL;
      *(_OWORD *)&v243[53] = xmmword_2102E3C60;
      sub_20E9708B8((uint64_t)&object, (uint64_t)&v221);
      memcpy(v255, v243, 0x1B8uLL);
      if (v242 == -1)
        goto LABEL_271;
      if (v242 > 7)
      {
        if (v242 > 0xB)
        {
          if (v242 < 0xF)
            goto LABEL_271;
          v50 = v235;
          if (!v235)
            goto LABEL_271;
          v159 = (unint64_t *)&v235->__shared_owners_;
          do
            v52 = __ldaxr(v159);
          while (__stlxr(v52 - 1, v159));
        }
        else if (v242 > 9)
        {
          if (v242 == 10)
            goto LABEL_271;
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v233[31] + 1);
          if (!*((_QWORD *)&v233[31] + 1))
            goto LABEL_271;
          v167 = (unint64_t *)(*((_QWORD *)&v233[31] + 1) + 8);
          do
            v52 = __ldaxr(v167);
          while (__stlxr(v52 - 1, v167));
        }
        else
        {
          if (v242 != 9)
            goto LABEL_271;
          v50 = *(std::__shared_weak_count **)&v233[21];
          if (!*(_QWORD *)&v233[21])
            goto LABEL_271;
          v152 = (unint64_t *)(*(_QWORD *)&v233[21] + 8);
          do
            v52 = __ldaxr(v152);
          while (__stlxr(v52 - 1, v152));
        }
      }
      else
      {
        if (v242 != 7)
          goto LABEL_271;
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v233[19] + 1);
        if (!*((_QWORD *)&v233[19] + 1))
          goto LABEL_271;
        v51 = (unint64_t *)(*((_QWORD *)&v233[19] + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
      }
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
LABEL_271:
      v155 = v200;
      if (v200)
      {
        v168 = (unint64_t *)&v200->__shared_owners_;
        do
          v157 = __ldaxr(v168);
        while (__stlxr(v157 - 1, v168));
LABEL_284:
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
LABEL_286:
      v171 = v1[124];
      v172 = *v1;
      v173 = v1[1];
      sub_20E96E138((uint64_t)v1, (uint64_t *)&v186);
      sub_20EA88F44(v171, v172, v173, v186, (uint64_t)&object);
      v174 = v221;
      *v3 = v221;
      if (v174)
      {
        v175 = (_QWORD *)operator new();
        *v175 = &off_24C9C14F0;
        v175[1] = 0;
        v175[2] = 0;
        v175[3] = v174;
        v3[1] = v175;
        v176 = v186;
        *(_QWORD *)&v186 = 0;
        if (!v176)
          goto LABEL_289;
        goto LABEL_288;
      }
      v3[1] = 0;
      v176 = v186;
      *(_QWORD *)&v186 = 0;
      if (v176)
LABEL_288:
        sub_20E8E931C((uint64_t)&v186, v176);
LABEL_289:
      if (v254 == -1)
        return;
      if (v254 > 7)
      {
        if (v254 > 0xB)
        {
          if (v254 >= 0xF)
          {
            v177 = v253;
            if (v253)
            {
              v181 = (unint64_t *)&v253->__shared_owners_;
              do
                v179 = __ldaxr(v181);
              while (__stlxr(v179 - 1, v181));
              goto LABEL_314;
            }
          }
        }
        else if (v254 > 9)
        {
          if (v254 != 10)
          {
            v177 = v252;
            if (v252)
            {
              v182 = (unint64_t *)&v252->__shared_owners_;
              do
                v179 = __ldaxr(v182);
              while (__stlxr(v179 - 1, v182));
              goto LABEL_314;
            }
          }
        }
        else if (v254 == 9)
        {
          v177 = v251;
          if (v251)
          {
            v180 = (unint64_t *)&v251->__shared_owners_;
            do
              v179 = __ldaxr(v180);
            while (__stlxr(v179 - 1, v180));
            goto LABEL_314;
          }
        }
      }
      else if (v254 == 7)
      {
        v177 = v250;
        if (v250)
        {
          v178 = (unint64_t *)&v250->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
LABEL_314:
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
          return;
        }
      }
      break;
    default:
      sub_20EA79230(&v185);
      if (**(int **)(v185 + 56) <= 5)
      {
        v53 = *(unsigned __int8 *)(v185 + 72);
        v54 = sub_20E8C31DC(v185, "OSLogSurrogateAppender", 1, 0);
        v55 = v54 ? v54 + 16 : 0;
        if (v53 || v54)
        {
          *(_QWORD *)&v186 = &v185;
          *((std::chrono::steady_clock::time_point *)&v186 + 1) = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v187 = std::chrono::system_clock::now();
          DWORD2(v187) = 5;
          *(_QWORD *)&v188.f64[0] = "unknown file";
          LODWORD(v188.f64[1]) = 143;
          *((_QWORD *)&v189 + 1) = 0;
          v190 = 0;
          *(_QWORD *)&v189 = "unknown function";
          v56 = *(_QWORD *)v186;
          v57 = (uint64_t *)(*(_QWORD *)v186 + 16);
          if (*(char *)(*(_QWORD *)v186 + 39) < 0)
          {
            v59 = *(_QWORD *)(v56 + 16);
            v58 = *(_QWORD *)(v56 + 24);
          }
          else
          {
            v58 = *(unsigned __int8 *)(*(_QWORD *)v186 + 39);
            v59 = *(_QWORD *)v186 + 16;
          }
          *(_QWORD *)&category = v59;
          *((_QWORD *)&category + 1) = v58;
          v161 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v221);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v221);
            if (BYTE8(v222) && SBYTE7(v222) < 0)
              operator delete((void *)v221);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v162 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v163 = byte_254A4A4F8;
          }
          else
          {
            v162 = *(_QWORD *)&byte_254A4A4F8[8];
            v163 = *(const char **)byte_254A4A4F8;
          }
          v214.i64[0] = (uint64_t)v163;
          v214.i64[1] = v162;
          *(_QWORD *)&v221 = os_log_create(v163, (const char *)category);
          sub_20E86E5A8((_QWORD *)&v221 + 1, (uint64_t)&v214);
          sub_20E86E5A8(&v223.f64[1], (uint64_t)&category);
          v164 = v221;
          sub_20E86E44C((uint64_t)&v221);
          sub_20EA79458(v55, v57, v164, OS_LOG_TYPE_ERROR);
          if (v53)
          {
            sub_20E8C003C((uint64_t)&v186, "Approximate external lens undistortion can be enabled only with Fisheye lens type.");
            sub_20E863570((uint64_t)&v186);
          }
          sub_20E863714((uint64_t)&v186);
        }
      }
      *v3 = 0;
      v3[1] = 0;
      goto LABEL_289;
  }
}

void sub_20EA78EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  if (LOBYTE(STACK[0x648]))
  {
    if (SLOBYTE(STACK[0x647]) < 0)
      operator delete((void *)STACK[0x630]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA78F34(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xBE8]))
  {
    if (SLOBYTE(STACK[0xBE7]) < 0)
      operator delete((void *)STACK[0xBD0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA78F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA78FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)&STACK[0x5D8]);
  sub_20E86E658((uint64_t)&STACK[0xBD0]);
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA78FF8(_Unwind_Exception *a1)
{
  sub_20E86E658((uint64_t)&STACK[0xBD0]);
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA79014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA79040(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA7905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EA79324((uint64_t)&STACK[0x630]);
  sub_20E970240((uint64_t)va);
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA79080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EA79324((uint64_t)&STACK[0x630]);
  sub_20E9702A8((uint64_t)va);
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA790A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)STACK[0x628];
  if (STACK[0x628])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_20EA79324((uint64_t)&STACK[0xBD0]);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20EA79220);
}

void sub_20EA79114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20EA79324((uint64_t)&STACK[0x630]);
  sub_20E9701D8((uint64_t)va);
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA79140(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA79154(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0xBF0]) && SLOBYTE(STACK[0xBEF]) < 0)
    operator delete((void *)STACK[0xBD8]);
  if (STACK[0xBD0])
    os_release((void *)STACK[0xBD0]);
  sub_20E863714((uint64_t)&STACK[0x630]);
  _Unwind_Resume(a1);
}

void sub_20EA79194(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EA791A4()
{
  JUMPOUT(0x20EA791E8);
}

void sub_20EA7921C(_Unwind_Exception *a1)
{
  sub_20EA79324((uint64_t)&STACK[0xBD0]);
  _Unwind_Resume(a1);
}

void sub_20EA79230(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AD10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD10))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.calibration");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AD08);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AD10);
  }
  *a1 = qword_254A5AD08;
}

void sub_20EA792CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AD10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AD10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA79324(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t *v8;

  v1 = result;
  v2 = *(_DWORD *)(result + 992);
  if (v2 != -1)
  {
    if (v2 > 7)
    {
      if (v2 > 0xB)
      {
        if (v2 >= 0xF)
        {
          v3 = *(std::__shared_weak_count **)(result + 896);
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(p_shared_owners);
            while (__stlxr(v5 - 1, p_shared_owners));
            goto LABEL_24;
          }
        }
      }
      else if (v2 > 9)
      {
        if (v2 != 10)
        {
          v3 = *(std::__shared_weak_count **)(result + 672);
          if (v3)
          {
            v8 = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(v8);
            while (__stlxr(v5 - 1, v8));
            goto LABEL_24;
          }
        }
      }
      else if (v2 == 9)
      {
        v3 = *(std::__shared_weak_count **)(result + 504);
        if (v3)
        {
          v6 = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(v6);
          while (__stlxr(v5 - 1, v6));
          goto LABEL_24;
        }
      }
    }
    else if (v2 == 7)
    {
      v3 = *(std::__shared_weak_count **)(result + 480);
      if (v3)
      {
        v4 = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
LABEL_24:
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          return v1;
        }
      }
    }
  }
  return result;
}

void sub_20EA7942C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA79444()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EA79458(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EA797E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA7980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA79820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EA79848(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA7986C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA79884(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio8geometry33ExternalLensUndistortionInterfaceEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry33ExternalLensUndistortionInterfaceEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio8geometry33ExternalLensUndistortionInterfaceEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry33ExternalLensUndistortionInterfaceEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

double sub_20EA798F4@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  double result;
  _QWORD *v8;

  *(_QWORD *)(a2 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 160) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 96) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)algn_21030E1D0;
  *(_OWORD *)(a2 + 128) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 144) = unk_21030E1F0;
  *(_QWORD *)(a2 + 232) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 168) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 216) = unk_21030E1F0;
  *(_OWORD *)(a2 + 200) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)algn_21030E1D0;
  *(_QWORD *)(a2 + 304) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 240) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 256) = *(_OWORD *)algn_21030E1D0;
  *(_OWORD *)(a2 + 272) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 288) = unk_21030E1F0;
  *(_QWORD *)(a2 + 376) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 312) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 328) = *(_OWORD *)algn_21030E1D0;
  *(_OWORD *)(a2 + 344) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 360) = unk_21030E1F0;
  *(_QWORD *)(a2 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 384) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 400) = *(_OWORD *)algn_21030E1D0;
  *(_OWORD *)(a2 + 416) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 432) = unk_21030E1F0;
  *(_QWORD *)(a2 + 520) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 456) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 472) = *(_OWORD *)algn_21030E1D0;
  *(_OWORD *)(a2 + 488) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 504) = unk_21030E1F0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_QWORD *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_QWORD *)(a2 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 560) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a2 + 592) = _Q1;
  *(_OWORD *)(a2 + 608) = _Q1;
  *(_OWORD *)(a2 + 624) = _Q1;
  *(_QWORD *)(a2 + 640) = 0x3FF0000000000000;
  *(_WORD *)(a2 + 696) = 0;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_OWORD *)(a2 + 664) = 0u;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)a2 = xmmword_21030E078;
  *(_OWORD *)(a2 + 16) = unk_21030E088;
  result = 0.0;
  *(_QWORD *)(a2 + 48) = 0x40239D013A92A305;
  *(_OWORD *)(a2 + 32) = xmmword_21030E098;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = (_QWORD *)(a2 + 56);
  switch(a1)
  {
    case 0:
    case 1:
      *v8 = 0xBF85E9E1B089A027;
      break;
    case 2:
    case 3:
    case 15:
    case 20:
    case 21:
      *v8 = 0xBF83C36113404EA5;
      break;
    case 4:
    case 5:
    case 6:
      *v8 = 0xBF86C0D6F544BB1BLL;
      break;
    case 7:
    case 8:
    case 22:
    case 23:
      *v8 = 0xBF830BE0DED288CELL;
      break;
    case 9:
    case 10:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 24:
    case 34:
    case 35:
    case 36:
    case 37:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 87:
    case 95:
    case 96:
    case 97:
      *v8 = 0xBF8374BC6A7EF9DBLL;
      break;
    case 11:
    case 12:
    case 25:
    case 26:
    case 27:
    case 28:
      *v8 = 0xBF7F8A0902DE00D2;
      break;
    case 30:
    case 31:
    case 40:
    case 41:
      *v8 = 0xBF5C58255B035BD5;
      break;
    case 32:
    case 33:
    case 92:
      *v8 = 0xBF500E6AFCCE1C58;
      break;
    case 38:
    case 39:
    case 48:
    case 49:
    case 50:
    case 51:
    case 56:
    case 57:
      *v8 = 0xBF802DE00D1B7176;
      break;
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 84:
    case 85:
    case 88:
    case 94:
      *v8 = 0xBF6205BC01A36E2FLL;
      break;
    case 89:
      result = -0.00134;
      *(_OWORD *)(a2 + 64) = xmmword_21030D310;
      *(_QWORD *)(a2 + 80) = 0x3EE4F8B588E368F1;
      *(_BYTE *)(a2 + 88) = 1;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      *v8 = 0xBF7EECBFB15B573FLL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      *v8 = 0xBF80574B40703298;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      *v8 = 0xBF80C026CC1CA3A5;
      break;
    default:
      return result;
  }
  return result;
}

void sub_20EA79B68(uint64_t a1, int a2, uint64_t a3, _OWORD *a4, _QWORD *a5, _QWORD *a6)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  BOOL v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void *__p[2];
  unsigned __int8 v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  char v57;
  int v58;
  _BYTE v59[24];
  int v60;
  void *__dst[2];
  unint64_t v62;
  void **v63;
  const char *v64;
  _BYTE *v65;
  const char *v66;
  const char *v67;
  void ***v68;

  v58 = a1;
  sub_20EA7A0A4(a1, a2);
  if (v57)
  {
    v11 = 0;
    goto LABEL_40;
  }
  v60 = 0;
  sub_20EA7C0C0((std::string::size_type)v59, &v58);
  v63 = (void **)v59;
  v64 = " must have a calibration for ";
  v65 = v59;
  v66 = " must have a calibration for ";
  v67 = " must have a calibration for ";
  if (v60 == -1)
    sub_20E877AB8();
  __dst[0] = &v63;
  ((void (*)(void **, _BYTE *))off_24C9C1560[v60])(__dst, v59);
  v12 = operator new();
  *(_QWORD *)(v12 + 272) = 0;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)v12 = 0u;
  sub_20E863438(v12);
  v63 = (void **)v12;
  if (a2 > 0xC)
  {
    v15 = "Unknown";
    v14 = 7;
  }
  else
  {
    v13 = a2;
    v14 = *(_QWORD *)((char *)&unk_21030E298 + v13 * 8);
    v15 = off_24C9C15C0[v13];
  }
  sub_20E86A980((_QWORD *)(v12 + 16), (uint64_t)v15, v14);
  v16 = *(_DWORD *)(v12 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v12 + 112);
    v20 = *(_QWORD *)(v12 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v12 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v12 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_57;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v62) = 0;
      v18 = __dst;
      goto LABEL_20;
    }
    v41 = *(_QWORD *)(v12 + 56);
    v21 = *(const void **)(v12 + 40);
    v17 = v41 - (_QWORD)v21;
    if ((unint64_t)(v41 - (_QWORD)v21) >= 0x7FFFFFFFFFFFFFF8)
LABEL_57:
      sub_20E860B7C();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v62 = v23 | 0x8000000000000000;
    __dst[0] = v18;
  }
  else
  {
    HIBYTE(v62) = v17;
    v18 = __dst;
    if (!v17)
      goto LABEL_20;
  }
  memmove(v18, v21, v17);
LABEL_20:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v63;
  if (v63)
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *v63 = (void *)*MEMORY[0x24BEDB7F0];
    v27 = *(void **)(v25 + 72);
    *(void **)((char *)v24 + *(_QWORD *)(v26 - 24)) = *(void **)(v25 + 64);
    v24[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v24[2] = v27;
    if (*((char *)v24 + 111) < 0)
      operator delete(v24[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v24 + 16);
    MEMORY[0x212BC6398](v24, 0x10B2C40EED050F3);
  }
  v63 = (void **)v59;
  v64 = (const char *)__dst;
  v65 = v59;
  v66 = (const char *)__dst;
  v67 = (const char *)__dst;
  if (v60 == -1)
    sub_20E877AB8();
  v68 = &v63;
  ((void (*)(void ****, _BYTE *))off_24C9C1530[v60])(&v68, v59);
  if (SHIBYTE(v62) < 0)
    operator delete(__dst[0]);
  if (v60 == -1)
    sub_20E877AB8();
  v63 = __dst;
  ((void (*)(void **__return_ptr, void ***, _BYTE *))off_24C9C1590[v60])(__p, &v63, v59);
  if (v60 != -1)
    ((void (*)(void ***, _BYTE *))off_24C9C1548[v60])(&v63, v59);
  if ((v43 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v29 = v43;
  else
    v29 = (uint64_t)__p[1];
  v30 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationDefaults.cpp", 53, (uint64_t)"opt_camera_calib", 16, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
  if ((char)v43 < 0)
    operator delete(__p[0]);
  if (v30)
    abort();
  v11 = v57 == 0;
LABEL_40:
  v31 = v44;
  *(_QWORD *)(a3 + 64) = v52;
  v32 = v51;
  *(_OWORD *)(a3 + 32) = v50;
  *(_OWORD *)(a3 + 48) = v32;
  v33 = v49;
  *(_OWORD *)a3 = v48;
  *(_OWORD *)(a3 + 16) = v33;
  v34 = v31[1];
  *a4 = *v31;
  a4[1] = v34;
  *(_QWORD *)&v32 = v54;
  *a6 = v55;
  *a5 = v32;
  if (!v11)
  {
    v35 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v53;
    if (v53)
    {
      v39 = (unint64_t *)&v53->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
  }
}

void sub_20EA79FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E90DCE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA7A010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E90DCE4((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_20E90DCE4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA7A0A4(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_20EA7A0C0 + 4 * byte_21030D3CF[a2]))();
}

void sub_20EA7A0C0(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[520] = 0;
}

__n128 sub_20EA7A0F8(uint64_t a1, int a2, double *a3, double *a4, unint64_t *a5)
{
  BOOL v5;
  double v6;
  __n128 result;
  BOOL v8;
  double v9;
  BOOL v10;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  v5 = *a3 == 1.79769313e308;
  if (*a3 == 1.79769313e308)
  {
    v6 = a3[1];
    v5 = v6 == 1.79769313e308;
    if (v6 == 1.79769313e308)
      v5 = a3[2] == 1.79769313e308;
  }
  if (!v5)
  {
    result = *(__n128 *)a3;
    *(double *)(a1 + 24) = a3[2];
    *(__n128 *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 32) = 1;
  }
  v8 = *a4 == 1.79769313e308;
  if (*a4 == 1.79769313e308)
  {
    v9 = a4[1];
    v8 = v9 == 1.79769313e308;
    if (v9 == 1.79769313e308)
      v8 = a4[2] == 1.79769313e308;
  }
  if (!v8)
  {
    result = *(__n128 *)a4;
    *(double *)(a1 + 56) = a4[2];
    *(__n128 *)(a1 + 40) = result;
    *(_BYTE *)(a1 + 64) = 1;
  }
  result.n128_u64[0] = *a5;
  v10 = *(double *)a5 == 1.79769313e308;
  if (*(double *)a5 == 1.79769313e308)
  {
    result.n128_u64[0] = a5[1];
    v10 = result.n128_f64[0] == 1.79769313e308;
    if (result.n128_f64[0] == 1.79769313e308)
    {
      result.n128_u64[0] = a5[2];
      v10 = result.n128_f64[0] == 1.79769313e308;
    }
  }
  if (!v10)
  {
    result = *(__n128 *)a5;
    *(_QWORD *)(a1 + 88) = a5[2];
    *(__n128 *)(a1 + 72) = result;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

double sub_20EA7A244()
{
  int v0;
  int v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  void *p_p;
  uint64_t v7;
  _BOOL4 v8;
  double v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  int v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v29;
  int v30;
  void *v31[2];
  unsigned __int8 v32;
  _DWORD v33[6];
  int v34;
  void *__p;
  size_t v36;
  int64_t v37;
  void ***v38;
  void **v39;
  const char *v40;
  _DWORD *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[14];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v155[13] = *MEMORY[0x24BDAC8D0];
  v30 = v0;
  v3 = atomic_load((unsigned __int8 *)&qword_254A5AD18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AD18))
  {
    sub_20EA7A0F8((uint64_t)&v39, 0, dbl_21030D4D8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v44, 1, dbl_21030D4F0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v45, 2, dbl_21030D508, dbl_21030D520, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v46, 3, dbl_21030D538, dbl_21030D550, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v47, 4, dbl_21030D568, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v48, 5, dbl_21030D580, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v49, 6, dbl_21030D598, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v50, 7, dbl_21030D5B0, dbl_21030D5C8, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v51, 8, dbl_21030D5E0, dbl_21030D5F8, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v52, 9, dbl_21030D610, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v53, 10, dbl_21030D628, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v54, 11, dbl_21030D640, dbl_21030D658, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v55, 12, dbl_21030D670, dbl_21030D688, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v56, 13, dbl_21030D6A0, dbl_21030D6B8, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v57, 14, dbl_21030D6A0, dbl_21030D6B8, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v58, 15, dbl_21030D8E0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v59, 16, dbl_21030D6D0, dbl_21030D6E8, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v60, 17, dbl_21030D700, dbl_21030D718, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v61, 18, dbl_21030D730, dbl_21030D748, qword_21030D760);
    sub_20EA7A0F8((uint64_t)&v62, 19, dbl_21030D778, dbl_21030D790, qword_21030D7A8);
    sub_20EA7A0F8((uint64_t)&v63, 20, dbl_21030D7C0, dbl_21030D7D8, qword_21030D7F0);
    sub_20EA7A0F8((uint64_t)&v64, 21, dbl_21030D808, dbl_21030D820, qword_21030D838);
    sub_20EA7A0F8((uint64_t)&v65, 22, dbl_21030D850, dbl_21030D868, qword_21030D880);
    sub_20EA7A0F8((uint64_t)&v66, 23, dbl_21030D898, dbl_21030D8B0, qword_21030D8C8);
    sub_20EA7A0F8((uint64_t)&v67, 24, dbl_21030D8E0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v68, 25, dbl_21030D8F8, dbl_21030D910, qword_21030D928);
    sub_20EA7A0F8((uint64_t)&v69, 26, dbl_21030D940, dbl_21030D958, qword_21030D970);
    sub_20EA7A0F8((uint64_t)&v70, 27, dbl_21030D988, dbl_21030D9A0, qword_21030D9B8);
    sub_20EA7A0F8((uint64_t)&v71, 28, dbl_21030D9D0, dbl_21030D9E8, qword_21030DA00);
    sub_20EA7A0F8((uint64_t)&v72, 29, (double *)qword_21030D4C0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v73, 30, dbl_21030DA18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v74, 31, dbl_21030DA18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v75, 32, dbl_21030DA30, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v76, 33, dbl_21030DA30, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v77, 34, dbl_21030DA48, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v78, 35, dbl_21030DA60, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v79, 36, dbl_21030DA48, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v80, 37, dbl_21030DA60, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v81, 38, dbl_21030DA78, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v82, 39, dbl_21030DA78, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v83, 40, dbl_21030DA90, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v84, 41, dbl_21030DA90, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v85, 42, dbl_21030DAA8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v86, 43, dbl_21030DAA8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v87, 44, dbl_21030DAC0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v88, 45, dbl_21030DAC0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v89, 46, dbl_21030DAD8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v90, 47, dbl_21030DAD8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v91, 48, dbl_21030DAF0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v92, 49, dbl_21030DAF0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v93, 50, dbl_21030DB08, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v94, 51, dbl_21030DB08, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v95, 52, dbl_21030DB20, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v96, 53, dbl_21030DB20, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v97, 54, dbl_21030DB38, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v98, 55, dbl_21030DB38, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v99, 56, dbl_21030DB50, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v100, 57, dbl_21030DB68, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v101, 58, dbl_21030DB80, dbl_21030DB98, qword_21030DBB0);
    sub_20EA7A0F8((uint64_t)&v102, 59, dbl_21030DB80, dbl_21030DB98, qword_21030DBB0);
    sub_20EA7A0F8((uint64_t)&v103, 60, dbl_21030DBC8, dbl_21030DBE0, qword_21030DBF8);
    sub_20EA7A0F8((uint64_t)&v104, 61, dbl_21030DBC8, dbl_21030DBE0, qword_21030DBF8);
    sub_20EA7A0F8((uint64_t)&v105, 62, dbl_21030DC10, dbl_21030DC28, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v106, 63, dbl_21030DC10, dbl_21030DC28, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v107, 64, dbl_21030DC10, dbl_21030DC28, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v108, 65, dbl_21030DC40, dbl_21030DC58, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v109, 66, dbl_21030DC40, dbl_21030DC58, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v110, 67, dbl_21030DC40, dbl_21030DC58, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v111, 68, dbl_21030DC70, dbl_21030DC88, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v112, 69, dbl_21030DC70, dbl_21030DC88, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v113, 70, dbl_21030DC70, dbl_21030DC88, qword_21030DCA0);
    sub_20EA7A0F8((uint64_t)&v114, 71, dbl_21030DCB8, dbl_21030DCD0, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v115, 72, dbl_21030DCB8, dbl_21030DCD0, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v116, 73, dbl_21030DCB8, dbl_21030DCD0, qword_21030DCE8);
    sub_20EA7A0F8((uint64_t)&v117, 74, dbl_21030DD00, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v118, 75, dbl_21030DD18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v119, 76, dbl_21030DD18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v120, 77, dbl_21030DD00, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v121, 78, dbl_21030DD18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v122, 79, dbl_21030DD18, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v123, 80, dbl_21030DD30, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v124, 81, dbl_21030DD30, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v125, 82, dbl_21030DD48, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v126, 83, dbl_21030DD48, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v127, 84, dbl_21030DD60, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v128, 85, dbl_21030DD60, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v129, 86, dbl_21030DDC0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v130, 87, dbl_21030DD78, dbl_21030DD90, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v131, 88, dbl_21030DDA8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v132, 89, (double *)qword_21030D4C0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v133, 90, dbl_21030DDC0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v134, 91, dbl_21030DDD8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v135, 92, dbl_21030DDF0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v136, 93, dbl_21030DE08, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v137, 94, dbl_21030DE20, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v138, 95, dbl_21030DE38, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v139, 96, dbl_21030DE50, dbl_21030DE68, qword_21030DEB0);
    sub_20EA7A0F8((uint64_t)&v140, 97, dbl_21030DE80, dbl_21030DE98, qword_21030DEB0);
    sub_20EA7A0F8((uint64_t)&v141, 98, (double *)qword_21030D4C0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v142, 99, dbl_21030DEC8, dbl_21030DEE0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v143, 100, dbl_21030DEF8, dbl_21030DF10, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v144, 101, dbl_21030DF28, dbl_21030DF40, qword_21030DF58);
    sub_20EA7A0F8((uint64_t)&v145, 102, dbl_21030DF70, dbl_21030DF88, qword_21030DFA0);
    sub_20EA7A0F8((uint64_t)&v146, 103, dbl_21030DFB8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v147, 104, dbl_21030DFB8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v148, 105, dbl_21030DFD0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v149, 106, dbl_21030DFE8, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)&v150, 107, dbl_21030E000, (double *)qword_21030D4C0, qword_21030E018);
    sub_20EA7A0F8((uint64_t)&v151, 108, dbl_21030E000, (double *)qword_21030D4C0, qword_21030E018);
    sub_20EA7A0F8((uint64_t)&v152, 109, dbl_21030E030, (double *)qword_21030D4C0, qword_21030E048);
    sub_20EA7A0F8((uint64_t)&v153, 110, dbl_21030E030, (double *)qword_21030D4C0, qword_21030E048);
    sub_20EA7A0F8((uint64_t)&v154, 111, (double *)qword_21030D4C0, dbl_21030E060, qword_21030D4C0);
    sub_20EA7A0F8((uint64_t)v155, 112, (double *)qword_21030D4C0, (double *)qword_21030D4C0, qword_21030D4C0);
    sub_20EA7B888(&v39, 0x71uLL);
    __cxa_atexit((void (*)(void *))sub_20EA7B934, &qword_254A5AD20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5AD18);
  }
  v4 = qword_254A5AD20;
  v5 = qword_254A5AD28;
  if (qword_254A5AD20 != qword_254A5AD28)
  {
    while (*(_DWORD *)v4 != v30)
    {
      v4 += 104;
      if (v4 == qword_254A5AD28)
        goto LABEL_7;
    }
  }
  if (v4 == qword_254A5AD28)
  {
LABEL_7:
    v34 = 0;
    sub_20E8F8738(v33, "No Camera to IMU translation for ");
    sub_20EA7C0C0((std::string::size_type)v33, &v30);
    v39 = (void **)v33;
    v40 = " device";
    v41 = v33;
    v42 = " device";
    v43 = " device";
    if (v34 == -1)
      sub_20E877AB8();
    v31[0] = &v39;
    ((void (*)(void **, _DWORD *))off_24C9C1578[v34])(v31, v33);
    if (v34 == -1)
      sub_20E877AB8();
    v39 = v31;
    ((void (*)(void **__return_ptr, void ***, _DWORD *))off_24C9C1590[v34])(&__p, &v39, v33);
    if (v34 != -1)
      ((void (*)(void ***, _DWORD *))off_24C9C1548[v34])(&v39, v33);
    if (v37 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v37 >= 0)
      v7 = HIBYTE(v37);
    else
      v7 = v36;
    v8 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationDefaults.cpp", 368, (uint64_t)"translation_found", 17, (uint64_t)p_p, v7, (void (*)(void **))sub_21023DDB0);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    v4 = v5;
    if (v8)
      abort();
  }
  if (v2 == 2)
  {
    v9 = *(double *)(v4 + 72);
    if (*(_BYTE *)(v4 + 96))
      return v9;
    goto LABEL_28;
  }
  if (v2 == 1)
  {
    v9 = *(double *)(v4 + 40);
    if (*(_BYTE *)(v4 + 64))
      return v9;
LABEL_28:
    v34 = 0;
    sub_20E9EBBAC(v33, "No translation from IMU to ");
    v10 = operator new();
    *(_QWORD *)(v10 + 272) = 0;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)v10 = 0u;
    sub_20E863438(v10);
    v39 = (void **)v10;
    v11 = off_24C9C1628[v2];
    v12 = strlen(v11);
    sub_20E86A980((_QWORD *)(v10 + 16), (uint64_t)v11, v12);
    v13 = *(_DWORD *)(v10 + 120);
    if ((v13 & 0x10) != 0)
    {
      v16 = *(_QWORD *)(v10 + 112);
      v17 = *(_QWORD *)(v10 + 72);
      if (v16 < v17)
      {
        *(_QWORD *)(v10 + 112) = v17;
        v16 = v17;
      }
      v18 = *(const void **)(v10 + 64);
      v14 = v16 - (_QWORD)v18;
      if (v16 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_64;
    }
    else
    {
      if ((v13 & 8) == 0)
      {
        v14 = 0;
        HIBYTE(v37) = 0;
        v15 = &__p;
        goto LABEL_41;
      }
      v29 = *(_QWORD *)(v10 + 56);
      v18 = *(const void **)(v10 + 40);
      v14 = v29 - (_QWORD)v18;
      if ((unint64_t)(v29 - (_QWORD)v18) >= 0x7FFFFFFFFFFFFFF8)
LABEL_64:
        sub_20E860B7C();
    }
    if (v14 >= 0x17)
    {
      v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v19 = v14 | 7;
      v20 = v19 + 1;
      v15 = operator new(v19 + 1);
      v36 = v14;
      v37 = v20 | 0x8000000000000000;
      __p = v15;
    }
    else
    {
      HIBYTE(v37) = v14;
      v15 = &__p;
      if (!v14)
        goto LABEL_41;
    }
    memmove(v15, v18, v14);
LABEL_41:
    *((_BYTE *)v15 + v14) = 0;
    v21 = v39;
    if (v39)
    {
      v22 = MEMORY[0x24BEDB7F0];
      v23 = *MEMORY[0x24BEDB7F0];
      *v39 = (void *)*MEMORY[0x24BEDB7F0];
      v24 = *(void **)(v22 + 72);
      *(void **)((char *)v21 + *(_QWORD *)(v23 - 24)) = *(void **)(v22 + 64);
      v21[3] = (void *)(MEMORY[0x24BEDB848] + 16);
      v21[2] = v24;
      if (*((char *)v21 + 111) < 0)
        operator delete(v21[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v21 + 16);
      MEMORY[0x212BC6398](v21, 0x10B2C40EED050F3);
    }
    v39 = (void **)v33;
    v40 = (const char *)&__p;
    v41 = v33;
    v42 = (const char *)&__p;
    v43 = (const char *)&__p;
    if (v34 == -1)
      sub_20E877AB8();
    v38 = &v39;
    ((void (*)(void ****, _DWORD *))off_24C9C1530[v34])(&v38, v33);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    v39 = (void **)v33;
    v40 = " for ";
    v41 = v33;
    v42 = " for ";
    v43 = " for ";
    if (v34 == -1)
      sub_20E877AB8();
    __p = &v39;
    ((void (*)(void **, _DWORD *))off_24C9C15A8[v34])(&__p, v33);
    sub_20EA7C0C0((std::string::size_type)v33, (int *)v4);
    v39 = (void **)v33;
    v40 = " device";
    v41 = v33;
    v42 = " device";
    v43 = " device";
    if (v34 == -1)
      sub_20E877AB8();
    __p = &v39;
    ((void (*)(void **, _DWORD *))off_24C9C1578[v34])(&__p, v33);
    if (v34 == -1)
      sub_20E877AB8();
    v39 = &__p;
    ((void (*)(void **__return_ptr, void ***, _DWORD *))off_24C9C1590[v34])(v31, &v39, v33);
    if (v34 != -1)
      ((void (*)(void ***, _DWORD *))off_24C9C1548[v34])(&v39, v33);
    if ((v32 & 0x80u) == 0)
      v25 = v31;
    else
      v25 = (void **)v31[0];
    if ((v32 & 0x80u) == 0)
      v26 = v32;
    else
      v26 = (uint64_t)v31[1];
    v27 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationDefaults.cpp", 116, (uint64_t)"opt_cam_to_imu", 14, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    if ((char)v32 < 0)
      operator delete(v31[0]);
    if (v27)
      abort();
    return v9;
  }
  if (v2)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationDefaults.cpp", 113, (uint64_t)&unk_21024F3B6, 0, (uint64_t)"Unsupported", 11, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v9 = *(double *)(v4 + 8);
  if (!*(_BYTE *)(v4 + 32))
    goto LABEL_28;
  return v9;
}

void sub_20EA7B774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5AD18);
  _Unwind_Resume(a1);
}

void sub_20EA7B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void *sub_20EA7B888(void *result, unint64_t a2)
{
  const void *v3;
  size_t v4;
  uint64_t v5;

  qword_254A5AD20 = 0;
  qword_254A5AD28 = 0;
  qword_254A5AD30 = 0;
  if (a2)
  {
    if (a2 >= 0x276276276276277)
      sub_20E867F44();
    v3 = result;
    qword_254A5AD20 = (uint64_t)operator new(104 * a2);
    qword_254A5AD28 = qword_254A5AD20;
    v4 = 104 * a2;
    v5 = qword_254A5AD20 + 104 * a2;
    qword_254A5AD30 = v5;
    result = memmove((void *)qword_254A5AD20, v3, v4);
    qword_254A5AD28 = v5;
  }
  return result;
}

void sub_20EA7B910(_Unwind_Exception *exception_object)
{
  if (qword_254A5AD20)
  {
    qword_254A5AD28 = qword_254A5AD20;
    operator delete((void *)qword_254A5AD20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA7B934(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

__n128 sub_20EA7B964@<Q0>(int a1@<W0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  __n128 result;
  float64x2_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[152];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  char __src[32];
  char v42[8];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v4 = operator new(0x20uLL);
  *((_QWORD *)&v24 + 1) = v4 + 2;
  *(_QWORD *)v25 = v4 + 2;
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)&v24 = v4;
  memset(&v25[8], 0, 144);
  v26 = 0u;
  v27 = 0u;
  v31 = unk_21030E1F0;
  v32 = 0x3FF0000000000000;
  v30 = xmmword_21030E1E0;
  v29 = *(_OWORD *)algn_21030E1D0;
  v28 = xmmword_21030E1C0;
  BYTE8(v39) = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  LOBYTE(v39) = 0;
  v40 = sub_20EA8E71C(a1);
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 24:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 98:
    case 99:
    case 100:
    case 103:
    case 104:
    case 105:
    case 106:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 408) = 0;
      *((_QWORD *)&v24 + 1) = v4;
      operator delete(v4);
      return result;
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      v23 = 0xB40000008CLL;
      *(_QWORD *)&v25[144] = 0x3FF0000000000000;
      *(_OWORD *)&v25[80] = xmmword_21030E208;
      *(_OWORD *)&v25[96] = unk_21030E218;
      *(_OWORD *)&v25[112] = xmmword_21030E228;
      *(_OWORD *)&v25[128] = unk_21030E238;
      v6.f64[0] = sub_20EA7A244();
      goto LABEL_5;
    case 25:
    case 26:
    case 27:
    case 28:
    case 101:
    case 102:
    case 107:
    case 108:
    case 109:
    case 110:
      v23 = 0x6C00000054;
      *(_QWORD *)&v25[144] = 0x3FF0000000000000;
      *(_OWORD *)&v25[80] = xmmword_21030E250;
      *(_OWORD *)&v25[96] = unk_21030E260;
      *(_OWORD *)&v25[112] = xmmword_21030E270;
      *(_OWORD *)&v25[128] = unk_21030E280;
      v6.f64[0] = sub_20EA7A244();
LABEL_5:
      v9 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v6.f64[0]), (float64x2_t)xmmword_21030D330, v7), (float64x2_t)0, v8);
      *(_QWORD *)&v34 = 0;
      v33 = 0x3FF0000000000000uLL;
      v6.f64[0] = v6.f64[0] * 0.0 + v7 * 0.0 - v8;
      v10 = vnegq_f64(v9);
      *((_QWORD *)&v34 + 1) = *(_QWORD *)&v10.f64[0];
      v35 = xmmword_21030D330;
      v37 = 0uLL;
      *(_QWORD *)&v36 = 0;
      *((_QWORD *)&v36 + 1) = *(_QWORD *)&v10.f64[1];
      *(_QWORD *)&v38 = 0xBFF0000000000000;
      *((_QWORD *)&v38 + 1) = *(_OWORD *)&vnegq_f64(v6);
      goto LABEL_6;
    case 96:
    case 97:
      memset(__src, 0, sizeof(__src));
      sub_20E86811C(&v24, __src, v42, 4uLL);
      *(_QWORD *)&v25[32] = 0;
      *(_QWORD *)&v25[40] = 0;
      v23 = 0xB40000008CLL;
      *(_QWORD *)&v25[144] = 0x3FF0000000000000;
      *(_OWORD *)&v25[80] = xmmword_21030E208;
      *(_OWORD *)&v25[96] = unk_21030E218;
      *(_OWORD *)&v25[112] = xmmword_21030E228;
      *(_OWORD *)&v25[128] = unk_21030E238;
      v35 = xmmword_21030E0D0;
      v36 = unk_21030E0E0;
      v37 = xmmword_21030E0F0;
      v38 = unk_21030E100;
      v33 = xmmword_21030E0B0;
      v34 = unk_21030E0C0;
      goto LABEL_6;
    default:
LABEL_6:
      *(_QWORD *)a2 = v23;
      *(_DWORD *)(a2 + 8) = 6;
      v11 = *(_OWORD *)v25;
      *(_OWORD *)(a2 + 16) = v24;
      *(_OWORD *)(a2 + 32) = v11;
      v12 = *(_OWORD *)&v25[128];
      *(_OWORD *)(a2 + 144) = *(_OWORD *)&v25[112];
      *(_OWORD *)(a2 + 160) = v12;
      v13 = v32;
      *(_QWORD *)(a2 + 176) = *(_QWORD *)&v25[144];
      v14 = *(_OWORD *)&v25[32];
      *(_OWORD *)(a2 + 48) = *(_OWORD *)&v25[16];
      *(_OWORD *)(a2 + 64) = v14;
      v15 = *(_OWORD *)&v25[64];
      *(_OWORD *)(a2 + 80) = *(_OWORD *)&v25[48];
      *(_OWORD *)(a2 + 96) = v15;
      v16 = *(_OWORD *)&v25[96];
      *(_OWORD *)(a2 + 112) = *(_OWORD *)&v25[80];
      *(_OWORD *)(a2 + 128) = v16;
      *(_OWORD *)(a2 + 184) = v26;
      v17 = v31;
      *(_OWORD *)(a2 + 232) = v29;
      *(_OWORD *)(a2 + 248) = v30;
      *(_OWORD *)(a2 + 264) = v17;
      *(_QWORD *)(a2 + 280) = v13;
      *(_OWORD *)(a2 + 200) = v27;
      *(_OWORD *)(a2 + 216) = v28;
      v18 = v33;
      v19 = v34;
      v20 = v36;
      *(_OWORD *)(a2 + 320) = v35;
      *(_OWORD *)(a2 + 336) = v20;
      *(_OWORD *)(a2 + 288) = v18;
      *(_OWORD *)(a2 + 304) = v19;
      result = (__n128)v37;
      v21 = v38;
      v22 = v39;
      *(_BYTE *)(a2 + 400) = v40;
      *(_OWORD *)(a2 + 368) = v21;
      *(_OWORD *)(a2 + 384) = v22;
      *(__n128 *)(a2 + 352) = result;
      *(_BYTE *)(a2 + 408) = 1;
      return result;
  }
}

void sub_20EA7BD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9700EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EA7BD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9700EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_20EA7BD4C@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)result == 111)
  {
    v3 = 1;
    v4 = sub_20EA7A244();
    v6 = v5;
    v8 = v7;
    result = operator new(0x20uLL);
    *result = xmmword_21030E158;
    result[1] = unk_21030E168;
    *(_OWORD *)(a2 + 344) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_QWORD *)a2 = 0x50000000500;
    *(_DWORD *)(a2 + 8) = 2;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = result + 2;
    *(_QWORD *)(a2 + 32) = result + 2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = xmmword_21030E110;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 144) = xmmword_21030E130;
    *(_OWORD *)(a2 + 160) = unk_21030E140;
    *(_OWORD *)(a2 + 128) = unk_21030E120;
    *(_QWORD *)(a2 + 176) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
    *(_OWORD *)(a2 + 200) = 0uLL;
    *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 264) = unk_21030E1F0;
    *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
    *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
    *(double *)(a2 + 288) = v4;
    *(_QWORD *)(a2 + 296) = v6;
    *(_QWORD *)(a2 + 304) = v8;
    *(_QWORD *)(a2 + 312) = 0;
    *(_OWORD *)(a2 + 320) = xmmword_21030D340;
    *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
    *(_OWORD *)(a2 + 384) = xmmword_21030D350;
    *(_WORD *)(a2 + 400) = 257;
    *(_BYTE *)(a2 + 408) = 0;
    *(_BYTE *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 464) = 0;
    *(_BYTE *)(a2 + 488) = 0;
    *(_DWORD *)(a2 + 496) = 0;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 520) = v3;
  return result;
}

uint64_t sub_20EA7BF18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 *v3;
  _BYTE v4[23];

  *(_OWORD *)&v4[7] = 0uLL;
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      v2 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_3;
    case 13:
      v3 = &xmmword_21030E190;
      goto LABEL_7;
    case 14:
      v3 = &xmmword_21030E1A8;
      goto LABEL_7;
    case 87:
      v3 = &xmmword_21030E178;
LABEL_7:
      *(_OWORD *)&v4[7] = *v3;
      break;
    default:
      break;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)v4;
  *(_OWORD *)(a2 + 24) = *(unint64_t *)&v4[15];
  v2 = 1;
LABEL_3:
  *(_BYTE *)(a2 + 40) = v2;
  return result;
}

BOOL sub_20EA7BFF0(uint64_t a1, int a2)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v7;
  void *__p;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  char v11;

  sub_20EA7A0A4(a1, a2);
  if (v11)
  {
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)())v10->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v9)
    {
      v4 = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)())v9->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (__p)
      operator delete(__p);
    if (v7)
      operator delete(v7);
  }
  return v11 != 0;
}

void sub_20EA7C0C0(std::string::size_type a1, int *a2)
{
  uint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  std::string __p;
  void **v23;
  void **v24;
  std::string *v25;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v25 = (std::string *)v4;
  sub_20EA8DA34(*a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_20E86A980((_QWORD *)(v4 + 16), (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = *(_DWORD *)(v4 + 120);
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v7 & 8) == 0)
  {
    v8 = 0;
    HIBYTE(v21) = 0;
    v9 = __dst;
    goto LABEL_22;
  }
  v12 = *(const void **)(v4 + 40);
  v8 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_20E860B7C();
LABEL_15:
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_21;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_21:
    memmove(v9, v12, v8);
LABEL_22:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v25;
  if (v25)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    v25->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    v15[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v15->__r_.__value_.__r.__words[2] = v18;
    if (v15[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v15[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v15[5].__r_.__value_.__r.__words[1]);
    MEMORY[0x212BC6398](v15, 0x10B2C40EED050F3);
  }
  __p.__r_.__value_.__r.__words[0] = a1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  __p.__r_.__value_.__r.__words[2] = a1;
  v23 = __dst;
  v24 = __dst;
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    sub_20E877AB8();
  v25 = &__p;
  ((void (*)(std::string **, std::string::size_type))off_24C9C1530[v19])(&v25, a1);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_20EA7C34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    sub_20FD0DE48((uint64_t *)(v21 - 56));
    _Unwind_Resume(a1);
  }
  sub_20FD0DE48((uint64_t *)(v21 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA7C3C4(_DWORD ***a1)
{
  return sub_20E9EC940(**a1, (char *)(*a1)[1]);
}

void sub_20EA7C3D0(uint64_t a1, uint64_t a2)
{
  sub_20EA7C3E0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20EA7C3E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C1548[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA7C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA7C5D8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA7C6D0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA7C6C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA7C6D0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA7C8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA7C8E0(_DWORD ***a1)
{
  return sub_20EA7C8FC(**a1, (char *)(*a1)[1]);
}

void sub_20EA7C8EC(uint64_t a1, uint64_t a2)
{
  sub_20EA7C9EC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EA7C8FC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1548[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA7C9EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C1548[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA7CBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA7CBE4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA7CCDC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA7CCD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA7CCDC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA7CED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EA7CEEC(_DWORD ***a1)
{
  return sub_20EA7CF08(**a1, (char *)(*a1)[1]);
}

void sub_20EA7CEF8(uint64_t a1, uint64_t a2)
{
  sub_20EA7CFF8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20EA7CF08(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9C1548[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20EA7CFF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9C1548[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20EA7D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20EA7D1F0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20EA7D2E8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20EA7D2E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20EA7D2E8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20EA7D4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_20EA7D4F8@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v85 = 0u;
  v86 = 0u;
  v76 = 0xBFF0000000000000;
  v77 = 0;
  switch((int)result)
  {
    case 0:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E468;
      v81 = unk_21030E478;
      v82 = xmmword_21030E488;
      v83 = unk_21030E498;
      v78 = xmmword_21030E4B0;
      v79 = unk_21030E4C0;
      v2 = sub_20EA7A244();
      v3 = v42;
      v4 = v43;
      v11 = 0x3F8503B81B64E054;
      goto LABEL_69;
    case 1:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E4D0;
      v81 = unk_21030E4E0;
      v82 = xmmword_21030E4F0;
      v83 = unk_21030E500;
      v78 = xmmword_21030E518;
      v79 = unk_21030E528;
      v2 = sub_20EA7A244();
      v3 = v44;
      v4 = v45;
      v11 = 0x3F85C28F5C28F5C3;
      goto LABEL_69;
    case 2:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F808;
      v81 = unk_21030F818;
      v82 = xmmword_21030F828;
      v83 = unk_21030F838;
      v78 = xmmword_21030F850;
      v79 = unk_21030F860;
      goto LABEL_67;
    case 3:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F870;
      v81 = unk_21030F880;
      v82 = xmmword_21030F890;
      v83 = unk_21030F8A0;
      v78 = xmmword_21030F8B8;
      v79 = unk_21030F8C8;
      goto LABEL_67;
    case 4:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F258;
      v81 = unk_21030F268;
      v82 = xmmword_21030F278;
      v83 = unk_21030F288;
      v78 = xmmword_21030F2A0;
      v79 = *(_OWORD *)algn_21030F2B0;
      v2 = sub_20EA7A244();
      v3 = v46;
      v4 = v47;
      v11 = 0x3F7FDAC68A936C59;
      goto LABEL_69;
    case 5:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F2C0;
      v81 = unk_21030F2D0;
      v82 = xmmword_21030F2E0;
      v83 = unk_21030F2F0;
      v78 = xmmword_21030F308;
      v79 = unk_21030F318;
      v2 = sub_20EA7A244();
      v3 = v48;
      v4 = v49;
      v11 = 0x3F7C9F72F76E6107;
      goto LABEL_69;
    case 6:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030FA78;
      v81 = unk_21030FA88;
      v82 = xmmword_21030FA98;
      v83 = unk_21030FAA8;
      v78 = xmmword_21030FAC0;
      v79 = *(_OWORD *)algn_21030FAD0;
      goto LABEL_67;
    case 7:
    case 8:
    case 11:
    case 12:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F8D8;
      v81 = unk_21030F8E8;
      v82 = xmmword_21030F8F8;
      v83 = unk_21030F908;
      v78 = xmmword_21030F920;
      v79 = *(_OWORD *)algn_21030F930;
      goto LABEL_67;
    case 9:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F530;
      v81 = unk_21030F540;
      v82 = xmmword_21030F550;
      v83 = unk_21030F560;
      v78 = xmmword_21030F578;
      v79 = unk_21030F588;
      goto LABEL_67;
    case 10:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F4C8;
      v81 = unk_21030F4D8;
      v82 = xmmword_21030F4E8;
      v83 = unk_21030F4F8;
      v78 = xmmword_21030F510;
      v79 = unk_21030F520;
      goto LABEL_67;
    case 13:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F668;
      v81 = unk_21030F678;
      v82 = xmmword_21030F688;
      v83 = unk_21030F698;
      v78 = xmmword_21030F6B0;
      v79 = unk_21030F6C0;
      goto LABEL_67;
    case 14:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F600;
      v81 = unk_21030F610;
      v82 = xmmword_21030F620;
      v83 = unk_21030F630;
      v78 = xmmword_21030F648;
      v79 = unk_21030F658;
      goto LABEL_67;
    case 15:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F328;
      v81 = unk_21030F338;
      v82 = xmmword_21030F348;
      v83 = unk_21030F358;
      v78 = xmmword_21030F370;
      v79 = unk_21030F380;
      goto LABEL_52;
    case 16:
    case 17:
    case 18:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F738;
      v81 = unk_21030F748;
      v82 = xmmword_21030F758;
      v83 = unk_21030F768;
      v78 = xmmword_21030F780;
      v79 = *(_OWORD *)algn_21030F790;
      goto LABEL_67;
    case 19:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F7A0;
      v81 = unk_21030F7B0;
      v82 = xmmword_21030F7C0;
      v83 = unk_21030F7D0;
      v78 = xmmword_21030F7E8;
      v79 = unk_21030F7F8;
      goto LABEL_67;
    case 20:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F940;
      v81 = unk_21030F950;
      v82 = xmmword_21030F960;
      v83 = unk_21030F970;
      v78 = xmmword_21030F988;
      v79 = unk_21030F998;
      goto LABEL_67;
    case 21:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F9A8;
      v81 = unk_21030F9B8;
      v82 = xmmword_21030F9C8;
      v83 = unk_21030F9D8;
      v78 = xmmword_21030F9F0;
      v79 = unk_21030FA00;
      goto LABEL_67;
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030FA10;
      v81 = unk_21030FA20;
      v82 = xmmword_21030FA30;
      v83 = unk_21030FA40;
      v78 = xmmword_21030FA58;
      v79 = unk_21030FA68;
      goto LABEL_67;
    case 24:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F390;
      v81 = unk_21030F3A0;
      v82 = xmmword_21030F3B0;
      v83 = unk_21030F3C0;
      v78 = xmmword_21030F3D8;
      v79 = unk_21030F3E8;
LABEL_52:
      v2 = sub_20EA7A244();
      v3 = v50;
      v4 = v51;
      v11 = 0x3F809D0635A426BBLL;
      goto LABEL_69;
    case 29:
    case 89:
    case 96:
    case 97:
    case 98:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      return result;
    case 30:
    case 31:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EA18;
      v81 = unk_21030EA28;
      v82 = xmmword_21030EA38;
      v83 = unk_21030EA48;
      v78 = xmmword_21030EA60;
      v79 = *(_OWORD *)algn_21030EA70;
      v2 = sub_20EA7A244();
      v3 = v9;
      v4 = v10;
      v11 = 0x3F85EE99A62ED352;
      goto LABEL_69;
    case 32:
    case 33:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E948;
      v81 = unk_21030E958;
      v82 = xmmword_21030E968;
      v83 = unk_21030E978;
      v78 = xmmword_21030E990;
      v79 = unk_21030E9A0;
      v2 = sub_20EA7A244();
      v3 = v12;
      v4 = v13;
      v11 = 0x3F85C74751CE28EDLL;
      goto LABEL_69;
    case 34:
    case 36:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EAA0;
      v81 = unk_21030EAB0;
      v82 = xmmword_21030EAC0;
      v83 = unk_21030EAD0;
      v14 = &xmmword_21030EA80;
      goto LABEL_19;
    case 35:
    case 37:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EAA0;
      v81 = unk_21030EAB0;
      v82 = xmmword_21030EAC0;
      v83 = unk_21030EAD0;
      v78 = xmmword_21030EAE8;
      v79 = unk_21030EAF8;
      goto LABEL_20;
    case 38:
    case 39:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EB08;
      v81 = unk_21030EB18;
      v82 = xmmword_21030EB28;
      v83 = unk_21030EB38;
      v14 = &xmmword_21030EB50;
      goto LABEL_19;
    case 40:
    case 41:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EB70;
      v81 = unk_21030EB80;
      v82 = xmmword_21030EB90;
      v83 = unk_21030EBA0;
      v78 = xmmword_21030EBB8;
      v79 = unk_21030EBC8;
      v2 = sub_20EA7A244();
      v3 = v15;
      v4 = v16;
      v11 = 0x3F85610ADCD2D44ELL;
      goto LABEL_69;
    case 42:
    case 43:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EBD8;
      v81 = unk_21030EBE8;
      v82 = xmmword_21030EBF8;
      v83 = unk_21030EC08;
      v17 = &xmmword_21030EC20;
      goto LABEL_16;
    case 44:
    case 45:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EC40;
      v81 = unk_21030EC50;
      v82 = xmmword_21030EC60;
      v83 = unk_21030EC70;
      v17 = &xmmword_21030EC88;
      goto LABEL_16;
    case 46:
    case 47:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030ECA8;
      v81 = unk_21030ECB8;
      v82 = xmmword_21030ECC8;
      v83 = unk_21030ECD8;
      v78 = xmmword_21030ECF0;
      v79 = unk_21030ED00;
      goto LABEL_20;
    case 48:
    case 49:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030ED10;
      v81 = unk_21030ED20;
      v82 = xmmword_21030ED30;
      v83 = unk_21030ED40;
      v17 = &xmmword_21030ED58;
LABEL_16:
      v18 = v17[1];
      v78 = *v17;
      v79 = v18;
      goto LABEL_17;
    case 50:
    case 51:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030ED78;
      v81 = unk_21030ED88;
      v82 = xmmword_21030ED98;
      v83 = unk_21030EDA8;
      v14 = &xmmword_21030EDC0;
LABEL_19:
      v21 = v14[1];
      v78 = *v14;
      v79 = v21;
LABEL_20:
      v2 = sub_20EA7A244();
      v3 = v22;
      v4 = v23;
      v11 = 0x3F84AEC8D5C74752;
      goto LABEL_69;
    case 52:
    case 53:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EDE0;
      v81 = unk_21030EDF0;
      v82 = xmmword_21030EE00;
      v83 = unk_21030EE10;
      v78 = xmmword_21030EE28;
      v79 = unk_21030EE38;
      v2 = sub_20EA7A244();
      v3 = v24;
      v4 = v25;
      v11 = 0x3F7B9A5A89B951C6;
      goto LABEL_69;
    case 54:
    case 55:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EE48;
      v81 = unk_21030EE58;
      v82 = xmmword_21030EE68;
      v83 = unk_21030EE78;
      v78 = xmmword_21030EE90;
      v79 = unk_21030EEA0;
      v2 = sub_20EA7A244();
      v3 = v26;
      v4 = v27;
      v28 = 0xEBB341E14BE0;
      goto LABEL_68;
    case 56:
    case 57:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EEB0;
      v81 = unk_21030EEC0;
      v82 = xmmword_21030EED0;
      v83 = unk_21030EEE0;
      v78 = xmmword_21030EEF8;
      v79 = unk_21030EF08;
LABEL_17:
      v2 = sub_20EA7A244();
      v3 = v19;
      v4 = v20;
      v11 = 0x3F85A74C09C3CE21;
      goto LABEL_69;
    case 58:
    case 59:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EF18;
      v81 = unk_21030EF28;
      v82 = xmmword_21030EF38;
      v83 = unk_21030EF48;
      v7 = &xmmword_21030EF60;
      goto LABEL_24;
    case 60:
    case 61:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EF18;
      v81 = unk_21030EF28;
      v82 = xmmword_21030EF38;
      v83 = unk_21030EF48;
      v8 = &xmmword_21030EF60;
      goto LABEL_27;
    case 62:
    case 63:
    case 64:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F050;
      v81 = unk_21030F060;
      v82 = xmmword_21030F070;
      v83 = unk_21030F080;
      v7 = &xmmword_21030F098;
      goto LABEL_24;
    case 65:
    case 66:
    case 67:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F0B8;
      v81 = unk_21030F0C8;
      v82 = xmmword_21030F0D8;
      v83 = unk_21030F0E8;
      v8 = &xmmword_21030F100;
      goto LABEL_27;
    case 68:
    case 69:
    case 70:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F188;
      v81 = unk_21030F198;
      v82 = xmmword_21030F1A8;
      v83 = unk_21030F1B8;
      v7 = &xmmword_21030F1D0;
LABEL_24:
      v29 = v7[1];
      v78 = *v7;
      v79 = v29;
      goto LABEL_25;
    case 71:
    case 72:
    case 73:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F188;
      v81 = unk_21030F198;
      v82 = xmmword_21030F1A8;
      v83 = unk_21030F1B8;
      v8 = &xmmword_21030F1D0;
LABEL_27:
      v32 = v8[1];
      v78 = *v8;
      v79 = v32;
      v2 = sub_20EA7A244();
      v3 = v33;
      v4 = v34;
      v11 = 0x3F8285A921CCD962;
      goto LABEL_69;
    case 74:
    case 77:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E7A8;
      v81 = unk_21030E7B8;
      v82 = xmmword_21030E7C8;
      v83 = unk_21030E7D8;
      v6 = &xmmword_21030E7F0;
      goto LABEL_29;
    case 75:
    case 76:
    case 78:
    case 79:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E740;
      v81 = unk_21030E750;
      v82 = xmmword_21030E760;
      v83 = unk_21030E770;
      v6 = &xmmword_21030E788;
LABEL_29:
      v35 = v6[1];
      v78 = *v6;
      v79 = v35;
      v2 = sub_20EA7A244();
      v3 = v36;
      v4 = v37;
      v11 = 0x3F8CDFEFBF401C50;
      goto LABEL_69;
    case 80:
    case 81:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E810;
      v81 = unk_21030E820;
      v82 = xmmword_21030E830;
      v83 = unk_21030E840;
      v38 = &xmmword_21030E858;
      goto LABEL_32;
    case 82:
    case 83:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E878;
      v81 = unk_21030E888;
      v82 = xmmword_21030E898;
      v83 = unk_21030E8A8;
      v38 = &xmmword_21030E8C0;
LABEL_32:
      v39 = v38[1];
      v78 = *v38;
      v79 = v39;
      goto LABEL_62;
    case 84:
    case 85:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E8E0;
      v81 = unk_21030E8F0;
      v82 = xmmword_21030E900;
      v83 = unk_21030E910;
      v78 = xmmword_21030E928;
      v79 = unk_21030E938;
      v2 = sub_20EA7A244();
      v3 = v40;
      v4 = v41;
      v11 = 0x3F87BBF93FF25E57;
      goto LABEL_69;
    case 86:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E9B0;
      v81 = unk_21030E9C0;
      v82 = xmmword_21030E9D0;
      v83 = unk_21030E9E0;
      v78 = xmmword_21030E9F8;
      v79 = unk_21030EA08;
      goto LABEL_62;
    case 87:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F6D0;
      v81 = unk_21030F6E0;
      v82 = xmmword_21030F6F0;
      v83 = unk_21030F700;
      v78 = xmmword_21030F718;
      v79 = unk_21030F728;
      goto LABEL_67;
    case 88:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E400;
      v81 = unk_21030E410;
      v82 = xmmword_21030E420;
      v83 = unk_21030E430;
      v78 = xmmword_21030E448;
      v79 = unk_21030E458;
      v2 = sub_20EA7A244();
      v3 = v52;
      v4 = v53;
      v11 = 0x3F891C4B90214AD3;
      goto LABEL_69;
    case 90:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E608;
      v81 = unk_21030E618;
      v82 = xmmword_21030E628;
      v83 = unk_21030E638;
      v78 = xmmword_21030E650;
      v79 = unk_21030E660;
      goto LABEL_62;
    case 91:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E670;
      v81 = unk_21030E680;
      v82 = xmmword_21030E690;
      v83 = unk_21030E6A0;
      v78 = xmmword_21030E6B8;
      v79 = unk_21030E6C8;
LABEL_62:
      v2 = sub_20EA7A244();
      v3 = v54;
      v4 = v55;
      v11 = 0xBFF0000000000000;
      goto LABEL_69;
    case 92:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E538;
      v81 = unk_21030E548;
      v82 = xmmword_21030E558;
      v83 = unk_21030E568;
      v78 = xmmword_21030E580;
      v79 = *(_OWORD *)algn_21030E590;
      v2 = sub_20EA7A244();
      v3 = v56;
      v4 = v57;
      v11 = 0x3F8739F340D4DC66;
      goto LABEL_69;
    case 93:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E6D8;
      v81 = unk_21030E6E8;
      v82 = xmmword_21030E6F8;
      v83 = unk_21030E708;
      v78 = xmmword_21030E720;
      v79 = *(_OWORD *)algn_21030E730;
      v2 = sub_20EA7A244();
      v3 = v58;
      v4 = v59;
      v11 = 0x3F85D78811B1D92BLL;
      goto LABEL_69;
    case 94:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030E5A0;
      v81 = unk_21030E5B0;
      v82 = xmmword_21030E5C0;
      v83 = unk_21030E5D0;
      v78 = xmmword_21030E5E8;
      v79 = unk_21030E5F8;
      v2 = sub_20EA7A244();
      v3 = v60;
      v4 = v61;
      v11 = 0x3F8694467381D7DCLL;
      goto LABEL_69;
    case 95:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F598;
      v81 = unk_21030F5A8;
      v82 = xmmword_21030F5B8;
      v83 = unk_21030F5C8;
      v78 = xmmword_21030F5E0;
      v79 = *(_OWORD *)algn_21030F5F0;
LABEL_67:
      v2 = sub_20EA7A244();
      v3 = v62;
      v4 = v63;
      v28 = 0x4F765FD8ADACLL;
LABEL_68:
      v11 = v28 & 0xFFFFFFFFFFFFLL | 0x3F7E000000000000;
      goto LABEL_69;
    case 99:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F3F8;
      v81 = unk_21030F408;
      v82 = xmmword_21030F418;
      v83 = unk_21030F428;
      v78 = xmmword_21030F440;
      v79 = *(_OWORD *)algn_21030F450;
      goto LABEL_25;
    case 100:
      sub_20EA79B68(99, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
      goto LABEL_84;
    case 101:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F460;
      v81 = unk_21030F470;
      v82 = xmmword_21030F480;
      v83 = unk_21030F490;
      v78 = xmmword_21030F4A8;
      v79 = unk_21030F4B8;
      goto LABEL_25;
    case 102:
      sub_20EA79B68(101, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
      goto LABEL_84;
    case 103:
      sub_20EA79B68(104, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
      goto LABEL_84;
    case 104:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EF80;
      v81 = unk_21030EF90;
      v82 = xmmword_21030EFA0;
      v83 = unk_21030EFB0;
      v78 = xmmword_21030EFC8;
      v79 = unk_21030EFD8;
      goto LABEL_25;
    case 105:
      sub_20EA79B68(106, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
      goto LABEL_84;
    case 106:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030EFE8;
      v81 = unk_21030EFF8;
      v82 = xmmword_21030F008;
      v83 = unk_21030F018;
      v78 = xmmword_21030F030;
      v79 = unk_21030F040;
      goto LABEL_25;
    case 107:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F120;
      v81 = unk_21030F130;
      v82 = xmmword_21030F140;
      v83 = unk_21030F150;
      v78 = xmmword_21030F168;
      v79 = unk_21030F178;
      goto LABEL_25;
    case 108:
      sub_20EA79B68(107, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
      goto LABEL_84;
    case 109:
      v84 = 0x3FF0000000000000;
      v80 = xmmword_21030F1F0;
      v81 = unk_21030F200;
      v82 = xmmword_21030F210;
      v83 = unk_21030F220;
      v78 = xmmword_21030F238;
      v79 = unk_21030F248;
LABEL_25:
      v2 = sub_20EA7A244();
      v3 = v30;
      v4 = v31;
      v11 = 0x3F821CCD96206855;
LABEL_69:
      v76 = v11;
      break;
    case 110:
      sub_20EA79B68(109, 1, (uint64_t)&v80, &v78, &v76, &v77);
      v68 = sub_20EA7A244();
LABEL_84:
      v2 = v68;
      v3 = v69;
      v4 = v70;
      break;
    default:
      break;
  }
  v65 = v76;
  v64 = v77;
  result = operator new(0x20uLL);
  v75 = v84;
  v73 = v82;
  v74 = v83;
  v71 = v80;
  v72 = v81;
  v66 = v79;
  *result = v78;
  result[1] = v66;
  v67 = v86;
  *(_OWORD *)(a2 + 344) = v85;
  *(_OWORD *)(a2 + 360) = v67;
  *(_QWORD *)a2 = 0x2D000000500;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result + 2;
  *(_QWORD *)(a2 + 32) = result + 2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 144) = v73;
  *(_OWORD *)(a2 + 160) = v74;
  *(_OWORD *)(a2 + 112) = v71;
  *(_OWORD *)(a2 + 128) = v72;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = v75;
  *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 200) = 0uLL;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_21030E1F0;
  *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
  *(double *)(a2 + 288) = v2;
  *(_QWORD *)(a2 + 296) = v3;
  *(_QWORD *)(a2 + 304) = v4;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a2 + 320) = xmmword_21030D340;
  *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 384) = v64;
  *(_QWORD *)(a2 + 392) = v65;
  *(_WORD *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 1;
  return result;
}

_OWORD *sub_20EA7EA40@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 40:
    case 41:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 75:
    case 76:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      return result;
    case 34:
    case 36:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FD40;
      v20 = unk_21030FD50;
      v21 = xmmword_21030FD60;
      v22 = unk_21030FD70;
      v6 = &xmmword_21030FD20;
      goto LABEL_5;
    case 35:
    case 37:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FD40;
      v20 = unk_21030FD50;
      v21 = xmmword_21030FD60;
      v22 = unk_21030FD70;
      v17 = xmmword_21030FD88;
      v18 = unk_21030FD98;
      goto LABEL_12;
    case 38:
    case 39:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FDA8;
      v20 = unk_21030FDB8;
      v21 = xmmword_21030FDC8;
      v22 = unk_21030FDD8;
      v6 = &xmmword_21030FDF0;
LABEL_5:
      v17 = *v6;
      v18 = v6[1];
LABEL_12:
      v2 = sub_20EA7A244();
      v3 = v13;
      v4 = v14;
      v10 = 0.013599;
      break;
    case 42:
    case 43:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FCB8;
      v20 = unk_21030FCC8;
      v21 = xmmword_21030FCD8;
      v22 = unk_21030FCE8;
      v7 = &xmmword_21030FD00;
      goto LABEL_8;
    case 44:
    case 45:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FC50;
      v20 = unk_21030FC60;
      v21 = xmmword_21030FC70;
      v22 = unk_21030FC80;
      v7 = &xmmword_21030FC98;
LABEL_8:
      v17 = *v7;
      v18 = v7[1];
      v2 = sub_20EA7A244();
      v3 = v8;
      v4 = v9;
      v10 = 0.013521;
      break;
    case 74:
    case 77:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FBE8;
      v20 = unk_21030FBF8;
      v21 = xmmword_21030FC08;
      v22 = unk_21030FC18;
      v17 = xmmword_21030FC30;
      v18 = unk_21030FC40;
      v2 = sub_20EA7A244();
      v3 = v11;
      v4 = v12;
      v10 = 0.0237920625;
      break;
    case 88:
      v23 = 0x3FF0000000000000;
      v19 = xmmword_21030FB80;
      v20 = unk_21030FB90;
      v21 = xmmword_21030FBA0;
      v22 = unk_21030FBB0;
      v17 = xmmword_21030FBC8;
      v18 = unk_21030FBD8;
      v2 = sub_20EA7A244();
      v3 = v15;
      v4 = v16;
      v10 = 0.013861;
      break;
    default:
      v10 = -1.0;
      break;
  }
  result = operator new(0x20uLL);
  *result = v17;
  result[1] = v18;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_QWORD *)a2 = 0x438000005A0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result + 2;
  *(_QWORD *)(a2 + 32) = result + 2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 144) = v21;
  *(_OWORD *)(a2 + 160) = v22;
  *(_OWORD *)(a2 + 112) = v19;
  *(_OWORD *)(a2 + 128) = v20;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = v23;
  *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 200) = 0uLL;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_21030E1F0;
  *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
  *(double *)(a2 + 288) = v2;
  *(_QWORD *)(a2 + 296) = v3;
  *(_QWORD *)(a2 + 304) = v4;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a2 + 320) = xmmword_21030D340;
  *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 384) = 0;
  *(double *)(a2 + 392) = v10;
  *(_WORD *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 1;
  return result;
}

_OWORD *sub_20EA7EE50@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v71 = 0u;
  v72 = 0u;
  v62 = 0xBFF0000000000000;
  v63 = 0;
  switch((int)result)
  {
    case 0:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_21030FF00;
      v67 = unk_21030FF10;
      v68 = xmmword_21030FF20;
      v69 = unk_21030FF30;
      v64 = xmmword_21030FF48;
      v65 = unk_21030FF58;
      v2 = sub_20EA7A244();
      v3 = v27;
      v4 = v28;
      v10 = 0x3F858969A0AD8A11;
      goto LABEL_48;
    case 1:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_21030FF68;
      v67 = unk_21030FF78;
      v68 = xmmword_21030FF88;
      v69 = unk_21030FF98;
      v64 = xmmword_21030FFB0;
      v65 = unk_21030FFC0;
      v2 = sub_20EA7A244();
      v3 = v29;
      v4 = v30;
      v10 = 0x3F838C5436B8F9B1;
      goto LABEL_48;
    case 2:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310B98;
      v67 = unk_210310BA8;
      v68 = xmmword_210310BB8;
      v69 = unk_210310BC8;
      v64 = xmmword_210310BE0;
      v65 = *(_OWORD *)algn_210310BF0;
      goto LABEL_39;
    case 3:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310C00;
      v67 = unk_210310C10;
      v68 = xmmword_210310C20;
      v69 = unk_210310C30;
      v64 = xmmword_210310C48;
      v65 = unk_210310C58;
      goto LABEL_39;
    case 4:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310720;
      v67 = unk_210310730;
      v68 = xmmword_210310740;
      v69 = unk_210310750;
      v64 = xmmword_210310768;
      v65 = unk_210310778;
      v2 = sub_20EA7A244();
      v3 = v31;
      v4 = v32;
      v33 = 0x9378EE286727;
      goto LABEL_47;
    case 5:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310788;
      v67 = unk_210310798;
      v68 = xmmword_2103107A8;
      v69 = unk_2103107B8;
      v64 = xmmword_2103107D0;
      v65 = unk_2103107E0;
      goto LABEL_15;
    case 6:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310F40;
      v67 = unk_210310F50;
      v68 = xmmword_210310F60;
      v69 = unk_210310F70;
      v64 = xmmword_210310F88;
      v65 = unk_210310F98;
      goto LABEL_46;
    case 7:
    case 8:
    case 11:
    case 12:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310C68;
      v67 = unk_210310C78;
      v68 = xmmword_210310C88;
      v69 = unk_210310C98;
      v64 = xmmword_210310CB0;
      v65 = unk_210310CC0;
      goto LABEL_39;
    case 9:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310ED8;
      v67 = unk_210310EE8;
      v68 = xmmword_210310EF8;
      v69 = unk_210310F08;
      v64 = xmmword_210310F20;
      v65 = *(_OWORD *)algn_210310F30;
      goto LABEL_29;
    case 10:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310E70;
      v67 = unk_210310E80;
      v68 = xmmword_210310E90;
      v69 = unk_210310EA0;
      v64 = xmmword_210310EB8;
      v65 = unk_210310EC8;
      goto LABEL_46;
    case 13:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310A60;
      v67 = unk_210310A70;
      v68 = xmmword_210310A80;
      v69 = unk_210310A90;
      v64 = xmmword_210310AA8;
      v65 = unk_210310AB8;
LABEL_29:
      v2 = sub_20EA7A244();
      v3 = v34;
      v4 = v35;
      v10 = 0x3F7D6BEBE1650A46;
      goto LABEL_48;
    case 14:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103109F8;
      v67 = unk_210310A08;
      v68 = xmmword_210310A18;
      v69 = unk_210310A28;
      v64 = xmmword_210310A40;
      v65 = *(_OWORD *)algn_210310A50;
      goto LABEL_46;
    case 15:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103107F0;
      v67 = unk_210310800;
      v68 = xmmword_210310810;
      v69 = unk_210310820;
      v64 = xmmword_210310838;
      v65 = unk_210310848;
      goto LABEL_37;
    case 16:
    case 17:
    case 18:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310AC8;
      v67 = unk_210310AD8;
      v68 = xmmword_210310AE8;
      v69 = unk_210310AF8;
      v64 = xmmword_210310B10;
      v65 = unk_210310B20;
      goto LABEL_39;
    case 19:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310B30;
      v67 = unk_210310B40;
      v68 = xmmword_210310B50;
      v69 = unk_210310B60;
      v64 = xmmword_210310B78;
      v65 = unk_210310B88;
      goto LABEL_39;
    case 20:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310CD0;
      v67 = unk_210310CE0;
      v68 = xmmword_210310CF0;
      v69 = unk_210310D00;
      v64 = xmmword_210310D18;
      v65 = unk_210310D28;
      goto LABEL_39;
    case 21:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310D38;
      v67 = unk_210310D48;
      v68 = xmmword_210310D58;
      v69 = unk_210310D68;
      v64 = xmmword_210310D80;
      v65 = *(_OWORD *)algn_210310D90;
      goto LABEL_39;
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310DA0;
      v67 = unk_210310DB0;
      v68 = xmmword_210310DC0;
      v69 = unk_210310DD0;
      v64 = xmmword_210310DE8;
      v65 = unk_210310DF8;
LABEL_39:
      v2 = sub_20EA7A244();
      v3 = v38;
      v4 = v39;
      v10 = 0x3F80A4E379B77C03;
      goto LABEL_48;
    case 24:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310858;
      v67 = unk_210310868;
      v68 = xmmword_210310878;
      v69 = unk_210310888;
      v64 = xmmword_2103108A0;
      v65 = *(_OWORD *)algn_2103108B0;
LABEL_37:
      v2 = sub_20EA7A244();
      v3 = v36;
      v4 = v37;
      v10 = 0x3F80B84988094E5DLL;
      goto LABEL_48;
    case 29:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 96:
    case 97:
    case 98:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      return result;
    case 30:
    case 31:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310170;
      v67 = unk_210310180;
      v68 = xmmword_210310190;
      v69 = unk_2103101A0;
      v64 = xmmword_2103101B8;
      v65 = unk_2103101C8;
      v2 = sub_20EA7A244();
      v3 = v8;
      v4 = v9;
      v10 = 0x3F85FAA8A82A5615;
      goto LABEL_48;
    case 32:
    case 33:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310108;
      v67 = unk_210310118;
      v68 = xmmword_210310128;
      v69 = unk_210310138;
      v64 = xmmword_210310150;
      v65 = unk_210310160;
      v2 = sub_20EA7A244();
      v3 = v11;
      v4 = v12;
      v10 = 0x3F8D60E94EE392E2;
      goto LABEL_48;
    case 40:
    case 41:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103101D8;
      v67 = unk_2103101E8;
      v68 = xmmword_2103101F8;
      v69 = unk_210310208;
      v64 = xmmword_210310220;
      v65 = *(_OWORD *)algn_210310230;
      v2 = sub_20EA7A244();
      v3 = v13;
      v4 = v14;
      v10 = 0x3F85D5F56A7AC81DLL;
      goto LABEL_48;
    case 50:
    case 51:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310240;
      v67 = unk_210310250;
      v68 = xmmword_210310260;
      v69 = unk_210310270;
      v64 = xmmword_210310288;
      v65 = unk_210310298;
      v2 = sub_20EA7A244();
      v3 = v15;
      v4 = v16;
      v10 = 0x3F8BD9CAE21101B0;
      goto LABEL_48;
    case 52:
    case 53:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103102A8;
      v67 = unk_2103102B8;
      v68 = xmmword_2103102C8;
      v69 = unk_2103102D8;
      v64 = xmmword_2103102F0;
      v65 = unk_210310300;
      v2 = sub_20EA7A244();
      v3 = v17;
      v4 = v18;
      v10 = 0x3F7EE45C358AFC48;
      goto LABEL_48;
    case 54:
    case 55:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310310;
      v67 = unk_210310320;
      v68 = xmmword_210310330;
      v69 = unk_210310340;
      v64 = xmmword_210310358;
      v65 = unk_210310368;
      v2 = sub_20EA7A244();
      v3 = v19;
      v4 = v20;
      v10 = 0x3F7DADFB506DD69DLL;
      goto LABEL_48;
    case 56:
    case 57:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310378;
      v67 = unk_210310388;
      v68 = xmmword_210310398;
      v69 = unk_2103103A8;
      v64 = xmmword_2103103C0;
      v65 = *(_OWORD *)algn_2103103D0;
      v2 = sub_20EA7A244();
      v3 = v40;
      v4 = v41;
      v10 = 0x3F85A74C09C3CE21;
      goto LABEL_48;
    case 58:
    case 59:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103103E0;
      v67 = unk_2103103F0;
      v68 = xmmword_210310400;
      v69 = unk_210310410;
      v6 = &xmmword_210310428;
      goto LABEL_14;
    case 60:
    case 61:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103103E0;
      v67 = unk_2103103F0;
      v68 = xmmword_210310400;
      v69 = unk_210310410;
      v7 = &xmmword_210310428;
      goto LABEL_17;
    case 62:
    case 63:
    case 64:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310518;
      v67 = unk_210310528;
      v68 = xmmword_210310538;
      v69 = unk_210310548;
      v6 = &xmmword_210310560;
      goto LABEL_14;
    case 65:
    case 66:
    case 67:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310580;
      v67 = unk_210310590;
      v68 = xmmword_2103105A0;
      v69 = unk_2103105B0;
      v7 = &xmmword_2103105C8;
      goto LABEL_17;
    case 68:
    case 69:
    case 70:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310650;
      v67 = unk_210310660;
      v68 = xmmword_210310670;
      v69 = unk_210310680;
      v6 = &xmmword_210310698;
LABEL_14:
      v21 = v6[1];
      v64 = *v6;
      v65 = v21;
      goto LABEL_15;
    case 71:
    case 72:
    case 73:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310650;
      v67 = unk_210310660;
      v68 = xmmword_210310670;
      v69 = unk_210310680;
      v7 = &xmmword_210310698;
LABEL_17:
      v24 = v7[1];
      v64 = *v7;
      v65 = v24;
      v2 = sub_20EA7A244();
      v3 = v25;
      v4 = v26;
      v10 = 0x3F8285A921CCD962;
      goto LABEL_48;
    case 87:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310990;
      v67 = unk_2103109A0;
      v68 = xmmword_2103109B0;
      v69 = unk_2103109C0;
      v64 = xmmword_2103109D8;
      v65 = unk_2103109E8;
      goto LABEL_46;
    case 92:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_21030FFD0;
      v67 = unk_21030FFE0;
      v68 = xmmword_21030FFF0;
      v69 = unk_210310000;
      v64 = xmmword_210310018;
      v65 = unk_210310028;
      v2 = sub_20EA7A244();
      v3 = v42;
      v4 = v43;
      v10 = 0x3F8BEEC39799E519;
      goto LABEL_48;
    case 93:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103100A0;
      v67 = unk_2103100B0;
      v68 = xmmword_2103100C0;
      v69 = unk_2103100D0;
      v64 = xmmword_2103100E8;
      v65 = unk_2103100F8;
      v2 = sub_20EA7A244();
      v3 = v44;
      v4 = v45;
      v10 = 0x3F8D8A5482385404;
      goto LABEL_48;
    case 94:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310038;
      v67 = unk_210310048;
      v68 = xmmword_210310058;
      v69 = unk_210310068;
      v64 = xmmword_210310080;
      v65 = *(_OWORD *)algn_210310090;
      v2 = sub_20EA7A244();
      v3 = v46;
      v4 = v47;
      v10 = 0x3F8EF416BDB1A6D7;
      goto LABEL_48;
    case 95:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310E08;
      v67 = unk_210310E18;
      v68 = xmmword_210310E28;
      v69 = unk_210310E38;
      v64 = xmmword_210310E50;
      v65 = unk_210310E60;
LABEL_46:
      v2 = sub_20EA7A244();
      v3 = v48;
      v4 = v49;
      v33 = 0x78359BC33F85;
LABEL_47:
      v10 = v33 & 0xFFFFFFFFFFFFLL | 0x3F7F000000000000;
      goto LABEL_48;
    case 99:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103108C0;
      v67 = unk_2103108D0;
      v68 = xmmword_2103108E0;
      v69 = unk_2103108F0;
      v64 = xmmword_210310908;
      v65 = unk_210310918;
      goto LABEL_15;
    case 100:
      sub_20EA79B68(99, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
      goto LABEL_63;
    case 101:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310928;
      v67 = unk_210310938;
      v68 = xmmword_210310948;
      v69 = unk_210310958;
      v64 = xmmword_210310970;
      v65 = unk_210310980;
      goto LABEL_15;
    case 102:
      sub_20EA79B68(101, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
      goto LABEL_63;
    case 103:
      sub_20EA79B68(104, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
      goto LABEL_63;
    case 104:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_210310448;
      v67 = unk_210310458;
      v68 = xmmword_210310468;
      v69 = unk_210310478;
      v64 = xmmword_210310490;
      v65 = unk_2103104A0;
      goto LABEL_15;
    case 105:
      sub_20EA79B68(106, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
      goto LABEL_63;
    case 106:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103104B0;
      v67 = unk_2103104C0;
      v68 = xmmword_2103104D0;
      v69 = unk_2103104E0;
      v64 = xmmword_2103104F8;
      v65 = unk_210310508;
      goto LABEL_15;
    case 107:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103105E8;
      v67 = unk_2103105F8;
      v68 = xmmword_210310608;
      v69 = unk_210310618;
      v64 = xmmword_210310630;
      v65 = unk_210310640;
      goto LABEL_15;
    case 108:
      sub_20EA79B68(107, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
      goto LABEL_63;
    case 109:
      v70 = 0x3FF0000000000000;
      v66 = xmmword_2103106B8;
      v67 = unk_2103106C8;
      v68 = xmmword_2103106D8;
      v69 = unk_2103106E8;
      v64 = xmmword_210310700;
      v65 = *(_OWORD *)algn_210310710;
LABEL_15:
      v2 = sub_20EA7A244();
      v3 = v22;
      v4 = v23;
      v10 = 0x3F821CCD96206855;
LABEL_48:
      v62 = v10;
      break;
    case 110:
      sub_20EA79B68(109, 4, (uint64_t)&v66, &v64, &v62, &v63);
      v54 = sub_20EA7A244();
LABEL_63:
      v2 = v54;
      v3 = v55;
      v4 = v56;
      break;
    default:
      break;
  }
  v51 = v62;
  v50 = v63;
  result = operator new(0x20uLL);
  v61 = v70;
  v59 = v68;
  v60 = v69;
  v57 = v66;
  v58 = v67;
  v52 = v65;
  *result = v64;
  result[1] = v52;
  v53 = v72;
  *(_OWORD *)(a2 + 344) = v71;
  *(_OWORD *)(a2 + 360) = v53;
  *(_QWORD *)a2 = 0x43800000780;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result + 2;
  *(_QWORD *)(a2 + 32) = result + 2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 144) = v59;
  *(_OWORD *)(a2 + 160) = v60;
  *(_OWORD *)(a2 + 112) = v57;
  *(_OWORD *)(a2 + 128) = v58;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = v61;
  *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 200) = 0uLL;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_21030E1F0;
  *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
  *(double *)(a2 + 288) = v2;
  *(_QWORD *)(a2 + 296) = v3;
  *(_QWORD *)(a2 + 304) = v4;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a2 + 320) = xmmword_21030D340;
  *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 384) = v50;
  *(_QWORD *)(a2 + 392) = v51;
  *(_WORD *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 1;
  return result;
}

_OWORD *sub_20EA7FFA0@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v69 = 0u;
  v70 = 0u;
  v60 = 0xBFF0000000000000;
  v61 = 0;
  switch((int)result)
  {
    case 0:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311FE8;
      v65 = unk_210311FF8;
      v66 = xmmword_210312008;
      v67 = unk_210312018;
      v62 = xmmword_210312030;
      v63 = unk_210312040;
      v2 = sub_20EA7A244();
      v3 = v26;
      v4 = v27;
      v10 = 0x3F8CB73780E762C1;
      goto LABEL_40;
    case 1:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210312050;
      v65 = unk_210312060;
      v66 = xmmword_210312070;
      v67 = unk_210312080;
      v62 = xmmword_210312098;
      v63 = *(_OWORD *)algn_2103120A8;
      v2 = sub_20EA7A244();
      v3 = v28;
      v4 = v29;
      v10 = 0x3F8A107048F6A241;
      goto LABEL_40;
    case 2:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311440;
      v65 = unk_210311450;
      v66 = xmmword_210311460;
      v67 = unk_210311470;
      v62 = xmmword_210311488;
      v63 = unk_210311498;
      goto LABEL_38;
    case 3:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103114A8;
      v65 = unk_2103114B8;
      v66 = xmmword_2103114C8;
      v67 = unk_2103114D8;
      v62 = xmmword_2103114F0;
      v63 = unk_210311500;
      goto LABEL_38;
    case 4:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311F18;
      v65 = unk_210311F28;
      v66 = xmmword_210311F38;
      v67 = unk_210311F48;
      v62 = xmmword_210311F60;
      v63 = *(_OWORD *)algn_210311F70;
      v2 = sub_20EA7A244();
      v3 = v30;
      v4 = v31;
      v10 = 0x3F850CFB497044C4;
      goto LABEL_40;
    case 5:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311F80;
      v65 = unk_210311F90;
      v66 = xmmword_210311FA0;
      v67 = unk_210311FB0;
      v62 = xmmword_210311FC8;
      v63 = unk_210311FD8;
      v2 = sub_20EA7A244();
      v3 = v32;
      v4 = v33;
      v10 = 0x3F88266772D5E071;
      goto LABEL_40;
    case 6:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311EB0;
      v65 = unk_210311EC0;
      v66 = xmmword_210311ED0;
      v67 = unk_210311EE0;
      v62 = xmmword_210311EF8;
      v63 = unk_210311F08;
      goto LABEL_46;
    case 7:
    case 8:
    case 11:
    case 12:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311510;
      v65 = unk_210311520;
      v66 = xmmword_210311530;
      v67 = unk_210311540;
      v62 = xmmword_210311558;
      v63 = unk_210311568;
      goto LABEL_38;
    case 9:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311100;
      v65 = unk_210311110;
      v66 = xmmword_210311120;
      v67 = unk_210311130;
      v62 = xmmword_210311148;
      v63 = unk_210311158;
      goto LABEL_28;
    case 10:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311098;
      v65 = unk_2103110A8;
      v66 = xmmword_2103110B8;
      v67 = unk_2103110C8;
      v62 = xmmword_2103110E0;
      v63 = *(_OWORD *)algn_2103110F0;
      goto LABEL_46;
    case 13:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311308;
      v65 = unk_210311318;
      v66 = xmmword_210311328;
      v67 = unk_210311338;
      v62 = xmmword_210311350;
      v63 = unk_210311360;
LABEL_28:
      v2 = sub_20EA7A244();
      v3 = v34;
      v4 = v35;
      v10 = 0x3F817D6B65A9A805;
      goto LABEL_40;
    case 14:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103112A0;
      v65 = unk_2103112B0;
      v66 = xmmword_2103112C0;
      v67 = unk_2103112D0;
      v62 = xmmword_2103112E8;
      v63 = unk_2103112F8;
      v2 = sub_20EA7A244();
      v3 = v36;
      v4 = v37;
      v10 = 0x3F80E23AF31B152FLL;
      goto LABEL_40;
    case 15:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311718;
      v65 = unk_210311728;
      v66 = xmmword_210311738;
      v67 = unk_210311748;
      v62 = xmmword_210311760;
      v63 = *(_OWORD *)algn_210311770;
      goto LABEL_36;
    case 16:
    case 17:
    case 18:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311370;
      v65 = unk_210311380;
      v66 = xmmword_210311390;
      v67 = unk_2103113A0;
      v62 = xmmword_2103113B8;
      v63 = unk_2103113C8;
      goto LABEL_38;
    case 19:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103113D8;
      v65 = unk_2103113E8;
      v66 = xmmword_2103113F8;
      v67 = unk_210311408;
      v62 = xmmword_210311420;
      v63 = *(_OWORD *)algn_210311430;
      goto LABEL_38;
    case 20:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311578;
      v65 = unk_210311588;
      v66 = xmmword_210311598;
      v67 = unk_2103115A8;
      v62 = xmmword_2103115C0;
      v63 = *(_OWORD *)algn_2103115D0;
      goto LABEL_38;
    case 21:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103115E0;
      v65 = unk_2103115F0;
      v66 = xmmword_210311600;
      v67 = unk_210311610;
      v62 = xmmword_210311628;
      v63 = unk_210311638;
      goto LABEL_38;
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311648;
      v65 = unk_210311658;
      v66 = xmmword_210311668;
      v67 = unk_210311678;
      v62 = xmmword_210311690;
      v63 = unk_2103116A0;
LABEL_38:
      v2 = sub_20EA7A244();
      v3 = v40;
      v4 = v41;
      v22 = 0xC6AC215B9A5BLL;
      goto LABEL_39;
    case 24:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311780;
      v65 = unk_210311790;
      v66 = xmmword_2103117A0;
      v67 = unk_2103117B0;
      v62 = xmmword_2103117C8;
      v63 = unk_2103117D8;
LABEL_36:
      v2 = sub_20EA7A244();
      v3 = v38;
      v4 = v39;
      v10 = 0x3F81F70DE8F6CEFFLL;
      goto LABEL_40;
    case 29:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 98:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      return result;
    case 30:
    case 31:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103118B8;
      v65 = unk_2103118C8;
      v66 = xmmword_2103118D8;
      v67 = unk_2103118E8;
      v62 = xmmword_210311900;
      v63 = *(_OWORD *)algn_210311910;
      v2 = sub_20EA7A244();
      v3 = v8;
      v4 = v9;
      v10 = 0x3F8D4E36358DC81CLL;
      goto LABEL_40;
    case 40:
    case 41:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311920;
      v65 = unk_210311930;
      v66 = xmmword_210311940;
      v67 = unk_210311950;
      v62 = xmmword_210311968;
      v63 = unk_210311978;
      v2 = sub_20EA7A244();
      v3 = v11;
      v4 = v12;
      v10 = 0x3F8D1D4738A3B57CLL;
      goto LABEL_40;
    case 50:
    case 51:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311988;
      v65 = unk_210311998;
      v66 = xmmword_2103119A8;
      v67 = unk_2103119B8;
      v62 = xmmword_2103119D0;
      v63 = unk_2103119E0;
      v2 = sub_20EA7A244();
      v3 = v13;
      v4 = v14;
      v10 = 0x3F8BD9CAE21101B0;
      goto LABEL_40;
    case 52:
    case 53:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103119F0;
      v65 = unk_210311A00;
      v66 = xmmword_210311A10;
      v67 = unk_210311A20;
      v62 = xmmword_210311A38;
      v63 = unk_210311A48;
      v2 = sub_20EA7A244();
      v3 = v15;
      v4 = v16;
      v10 = 0x3F806034F3FD933ELL;
      goto LABEL_40;
    case 54:
    case 55:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311A58;
      v65 = unk_210311A68;
      v66 = xmmword_210311A78;
      v67 = unk_210311A88;
      v62 = xmmword_210311AA0;
      v63 = *(_OWORD *)algn_210311AB0;
      v2 = sub_20EA7A244();
      v3 = v17;
      v4 = v18;
      v10 = 0x3F80FA58F7121AB5;
      goto LABEL_40;
    case 56:
    case 57:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311AC0;
      v65 = unk_210311AD0;
      v66 = xmmword_210311AE0;
      v67 = unk_210311AF0;
      v62 = xmmword_210311B08;
      v63 = unk_210311B18;
      v2 = sub_20EA7A244();
      v3 = v46;
      v4 = v47;
      v10 = 0x3F85A74C09C3CE21;
      goto LABEL_40;
    case 58:
    case 59:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311B28;
      v65 = unk_210311B38;
      v66 = xmmword_210311B48;
      v67 = unk_210311B58;
      v6 = &xmmword_210311BB8;
      goto LABEL_13;
    case 60:
    case 61:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311B70;
      v65 = unk_210311B80;
      v66 = xmmword_210311B90;
      v67 = unk_210311BA0;
      v7 = &xmmword_210311BB8;
      goto LABEL_16;
    case 62:
    case 63:
    case 64:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311CA8;
      v65 = unk_210311CB8;
      v66 = xmmword_210311CC8;
      v67 = unk_210311CD8;
      v6 = &xmmword_210311CF0;
      goto LABEL_13;
    case 65:
    case 66:
    case 67:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311D10;
      v65 = unk_210311D20;
      v66 = xmmword_210311D30;
      v67 = unk_210311D40;
      v7 = &xmmword_210311D58;
      goto LABEL_16;
    case 68:
    case 69:
    case 70:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311DE0;
      v65 = unk_210311DF0;
      v66 = xmmword_210311E00;
      v67 = unk_210311E10;
      v6 = &xmmword_210311E28;
LABEL_13:
      v19 = v6[1];
      v62 = *v6;
      v63 = v19;
      goto LABEL_14;
    case 71:
    case 72:
    case 73:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311DE0;
      v65 = unk_210311DF0;
      v66 = xmmword_210311E00;
      v67 = unk_210311E10;
      v7 = &xmmword_210311E28;
LABEL_16:
      v23 = v7[1];
      v62 = *v7;
      v63 = v23;
      v2 = sub_20EA7A244();
      v3 = v24;
      v4 = v25;
      v22 = 0x85A921CCD962;
      goto LABEL_39;
    case 87:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103116B0;
      v65 = unk_2103116C0;
      v66 = xmmword_2103116D0;
      v67 = unk_2103116E0;
      v62 = xmmword_2103116F8;
      v63 = unk_210311708;
      goto LABEL_46;
    case 95:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311238;
      v65 = unk_210311248;
      v66 = xmmword_210311258;
      v67 = unk_210311268;
      v62 = xmmword_210311280;
      v63 = *(_OWORD *)algn_210311290;
LABEL_46:
      v2 = sub_20EA7A244();
      v3 = v48;
      v4 = v49;
      v10 = 0x3F84FACE67D77FAELL;
      goto LABEL_40;
    case 96:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311168;
      v65 = unk_210311178;
      v66 = xmmword_210311188;
      v67 = unk_210311198;
      v62 = xmmword_2103111B0;
      v63 = unk_2103111C0;
      goto LABEL_49;
    case 97:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103111D0;
      v65 = unk_2103111E0;
      v66 = xmmword_2103111F0;
      v67 = unk_210311200;
      v62 = xmmword_210311218;
      v63 = unk_210311228;
LABEL_49:
      v2 = sub_20EA7A244();
      v3 = v50;
      v4 = v51;
      v10 = 0x3F813404EA4A8C15;
      goto LABEL_40;
    case 99:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_2103117E8;
      v65 = unk_2103117F8;
      v66 = xmmword_210311808;
      v67 = unk_210311818;
      v62 = xmmword_210311830;
      v63 = unk_210311840;
      goto LABEL_14;
    case 100:
      sub_20EA79B68(99, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
      goto LABEL_62;
    case 101:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311850;
      v65 = unk_210311860;
      v66 = xmmword_210311870;
      v67 = unk_210311880;
      v62 = xmmword_210311898;
      v63 = unk_2103118A8;
      goto LABEL_14;
    case 102:
      sub_20EA79B68(101, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
      goto LABEL_62;
    case 103:
      sub_20EA79B68(104, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
      goto LABEL_62;
    case 104:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311BD8;
      v65 = unk_210311BE8;
      v66 = xmmword_210311BF8;
      v67 = unk_210311C08;
      v62 = xmmword_210311C20;
      v63 = *(_OWORD *)algn_210311C30;
      goto LABEL_14;
    case 105:
      sub_20EA79B68(106, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
      goto LABEL_62;
    case 106:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311C40;
      v65 = unk_210311C50;
      v66 = xmmword_210311C60;
      v67 = unk_210311C70;
      v62 = xmmword_210311C88;
      v63 = unk_210311C98;
      goto LABEL_14;
    case 107:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311D78;
      v65 = unk_210311D88;
      v66 = xmmword_210311D98;
      v67 = unk_210311DA8;
      v62 = xmmword_210311DC0;
      v63 = *(_OWORD *)algn_210311DD0;
      goto LABEL_14;
    case 108:
      sub_20EA79B68(107, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
      goto LABEL_62;
    case 109:
      v68 = 0x3FF0000000000000;
      v64 = xmmword_210311E48;
      v65 = unk_210311E58;
      v66 = xmmword_210311E68;
      v67 = unk_210311E78;
      v62 = xmmword_210311E90;
      v63 = unk_210311EA0;
LABEL_14:
      v2 = sub_20EA7A244();
      v3 = v20;
      v4 = v21;
      v22 = 0x1CCD96206855;
LABEL_39:
      v10 = v22 & 0xFFFFFFFFFFFFLL | 0x3F82000000000000;
LABEL_40:
      v60 = v10;
      break;
    case 110:
      sub_20EA79B68(109, 6, (uint64_t)&v64, &v62, &v60, &v61);
      v52 = sub_20EA7A244();
LABEL_62:
      v2 = v52;
      v3 = v53;
      v4 = v54;
      break;
    default:
      break;
  }
  v43 = v60;
  v42 = v61;
  result = operator new(0x20uLL);
  v59 = v68;
  v57 = v66;
  v58 = v67;
  v55 = v64;
  v56 = v65;
  v44 = v63;
  *result = v62;
  result[1] = v44;
  v45 = v70;
  *(_OWORD *)(a2 + 344) = v69;
  *(_OWORD *)(a2 + 360) = v45;
  *(_QWORD *)a2 = 0x5A000000780;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result + 2;
  *(_QWORD *)(a2 + 32) = result + 2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 144) = v57;
  *(_OWORD *)(a2 + 160) = v58;
  *(_OWORD *)(a2 + 112) = v55;
  *(_OWORD *)(a2 + 128) = v56;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = v59;
  *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 200) = 0uLL;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_21030E1F0;
  *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
  *(double *)(a2 + 288) = v2;
  *(_QWORD *)(a2 + 296) = v3;
  *(_QWORD *)(a2 + 304) = v4;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a2 + 320) = xmmword_21030D340;
  *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 384) = v42;
  *(_QWORD *)(a2 + 392) = v43;
  *(_WORD *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 1;
  return result;
}

_OWORD *sub_20EA8105C@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)result == 96)
  {
    v3 = 1;
    v4 = sub_20EA7A244();
    v6 = v5;
    v8 = v7;
    result = operator new(0x20uLL);
    *result = xmmword_210312118;
    result[1] = unk_210312128;
    *(_OWORD *)(a2 + 344) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_QWORD *)a2 = 0x5A000000780;
    *(_DWORD *)(a2 + 8) = 2;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = result + 2;
    *(_QWORD *)(a2 + 32) = result + 2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = xmmword_2103120D0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 144) = xmmword_2103120F0;
    *(_OWORD *)(a2 + 160) = unk_210312100;
    *(_OWORD *)(a2 + 128) = unk_2103120E0;
    *(_QWORD *)(a2 + 176) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
    *(_OWORD *)(a2 + 200) = 0uLL;
    *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 264) = unk_21030E1F0;
    *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
    *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
    *(double *)(a2 + 288) = v4;
    *(_QWORD *)(a2 + 296) = v6;
    *(_QWORD *)(a2 + 304) = v8;
    *(_QWORD *)(a2 + 312) = 0;
    *(_OWORD *)(a2 + 320) = xmmword_21030D340;
    *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
    *(_OWORD *)(a2 + 384) = xmmword_2103120C0;
    *(_WORD *)(a2 + 400) = 257;
    *(_BYTE *)(a2 + 408) = 0;
    *(_BYTE *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 464) = 0;
    *(_BYTE *)(a2 + 488) = 0;
    *(_DWORD *)(a2 + 496) = 0;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 520) = v3;
  return result;
}

_OWORD *sub_20EA81230@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  switch((int)result)
  {
    case 18:
      v17 = xmmword_210312218;
      v18 = unk_210312228;
      v19 = xmmword_210312238;
      v20 = unk_210312248;
      v15 = xmmword_210312260;
      v16 = *(_OWORD *)algn_210312270;
      v3 = sub_20EA7A244();
      v5 = v11;
      v7 = v12;
      v8 = 0x3F82C6AC215B9A5BLL;
      goto LABEL_7;
    case 62:
    case 63:
    case 64:
      v17 = xmmword_210312280;
      v18 = unk_210312290;
      v19 = xmmword_2103122A0;
      v20 = unk_2103122B0;
      v15 = xmmword_2103122C8;
      v16 = unk_2103122D8;
      v3 = sub_20EA7A244();
      v5 = v4;
      v7 = v6;
      v8 = 0x3F821CCD96206855;
      goto LABEL_7;
    case 65:
    case 66:
    case 67:
      v17 = xmmword_2103122E8;
      v18 = unk_2103122F8;
      v19 = xmmword_210312308;
      v20 = unk_210312318;
      v15 = xmmword_210312330;
      v16 = unk_210312340;
      v3 = sub_20EA7A244();
      v5 = v9;
      v7 = v10;
      v8 = 0x3F8285A921CCD962;
      goto LABEL_7;
    case 96:
      v17 = xmmword_2103121B0;
      v18 = unk_2103121C0;
      v19 = xmmword_2103121D0;
      v20 = unk_2103121E0;
      v15 = xmmword_2103121F8;
      v16 = unk_210312208;
      v3 = sub_20EA7A244();
      v5 = v13;
      v7 = v14;
      v8 = 0x3F813404EA4A8C15;
LABEL_7:
      result = operator new(0x20uLL);
      *result = v15;
      result[1] = v16;
      *(_OWORD *)(a2 + 344) = 0u;
      *(_OWORD *)(a2 + 360) = 0u;
      *(_QWORD *)a2 = 0x78000000A00;
      *(_DWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = result;
      *(_QWORD *)(a2 + 24) = result + 2;
      *(_QWORD *)(a2 + 32) = result + 2;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_OWORD *)(a2 + 144) = v19;
      *(_OWORD *)(a2 + 160) = v20;
      *(_OWORD *)(a2 + 112) = v17;
      *(_OWORD *)(a2 + 128) = v18;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_QWORD *)(a2 + 184) = 0;
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 176) = 0x3FF0000000000000;
      *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
      *(_OWORD *)(a2 + 200) = 0uLL;
      *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
      *(_OWORD *)(a2 + 264) = unk_21030E1F0;
      *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
      *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
      *(double *)(a2 + 288) = v3;
      *(_QWORD *)(a2 + 296) = v5;
      *(_QWORD *)(a2 + 304) = v7;
      *(_QWORD *)(a2 + 312) = 0;
      *(_OWORD *)(a2 + 320) = xmmword_21030D340;
      *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
      *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
      *(_QWORD *)(a2 + 384) = 0;
      *(_QWORD *)(a2 + 392) = v8;
      *(_WORD *)(a2 + 400) = 0;
      *(_BYTE *)(a2 + 408) = 0;
      *(_BYTE *)(a2 + 432) = 0;
      *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
      *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
      *(_BYTE *)(a2 + 456) = 0;
      *(_BYTE *)(a2 + 464) = 0;
      *(_BYTE *)(a2 + 488) = 0;
      *(_DWORD *)(a2 + 496) = 0;
      *(_QWORD *)(a2 + 504) = 0;
      *(_QWORD *)(a2 + 512) = 0;
      *(_BYTE *)(a2 + 520) = 1;
      break;
    default:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      break;
  }
  return result;
}

_OWORD *sub_20EA81560@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)result == 96)
  {
    v3 = 1;
    v4 = sub_20EA7A244();
    v6 = v5;
    v8 = v7;
    result = operator new(0x20uLL);
    *result = xmmword_210312398;
    result[1] = unk_2103123A8;
    *(_OWORD *)(a2 + 344) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_QWORD *)a2 = 0x78000000A00;
    *(_DWORD *)(a2 + 8) = 2;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = result + 2;
    *(_QWORD *)(a2 + 32) = result + 2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = xmmword_210312350;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 144) = xmmword_210312370;
    *(_OWORD *)(a2 + 160) = unk_210312380;
    *(_OWORD *)(a2 + 128) = unk_210312360;
    *(_QWORD *)(a2 + 176) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
    *(_OWORD *)(a2 + 200) = 0uLL;
    *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 264) = unk_21030E1F0;
    *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
    *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
    *(double *)(a2 + 288) = v4;
    *(_QWORD *)(a2 + 296) = v6;
    *(_QWORD *)(a2 + 304) = v8;
    *(_QWORD *)(a2 + 312) = 0;
    *(_OWORD *)(a2 + 320) = xmmword_21030D340;
    *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
    *(_OWORD *)(a2 + 384) = xmmword_2103120C0;
    *(_WORD *)(a2 + 400) = 257;
    *(_BYTE *)(a2 + 408) = 0;
    *(_BYTE *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 464) = 0;
    *(_BYTE *)(a2 + 488) = 0;
    *(_DWORD *)(a2 + 496) = 0;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 520) = v3;
  return result;
}

_OWORD *sub_20EA81734@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v18 = 0xBFF0000000000000;
  v19 = 0;
  if (result >= 0x63)
  {
    switch((int)result)
    {
      case 'c':
        v26 = 0x3FF0000000000000;
        v22 = xmmword_2103124A0;
        v23 = unk_2103124B0;
        v24 = xmmword_2103124C0;
        v25 = unk_2103124D0;
        v20 = xmmword_2103124E8;
        v21 = unk_2103124F8;
        goto LABEL_13;
      case 'd':
        sub_20EA79B68(99, 10, (uint64_t)&v22, &v20, &v18, &v19);
        goto LABEL_11;
      case 'e':
        v26 = 0x3FF0000000000000;
        v22 = xmmword_210312508;
        v23 = unk_210312518;
        v24 = xmmword_210312528;
        v25 = unk_210312538;
        v20 = xmmword_210312550;
        v21 = unk_210312560;
        goto LABEL_13;
      case 'f':
        sub_20EA79B68(101, 10, (uint64_t)&v22, &v20, &v18, &v19);
        goto LABEL_11;
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'o':
      case 'p':
        goto LABEL_2;
      case 'k':
        v26 = 0x3FF0000000000000;
        v22 = xmmword_2103123D0;
        v23 = unk_2103123E0;
        v24 = xmmword_2103123F0;
        v25 = unk_210312400;
        v20 = xmmword_210312418;
        v21 = unk_210312428;
        goto LABEL_13;
      case 'l':
        sub_20EA79B68(107, 10, (uint64_t)&v22, &v20, &v18, &v19);
        goto LABEL_11;
      case 'm':
        sub_20EA79B68(110, 10, (uint64_t)&v22, &v20, &v18, &v19);
LABEL_11:
        v2 = sub_20EA7A244();
        v3 = v6;
        v4 = v7;
        break;
      case 'n':
        v26 = 0x3FF0000000000000;
        v22 = xmmword_210312438;
        v23 = unk_210312448;
        v24 = xmmword_210312458;
        v25 = unk_210312468;
        v20 = xmmword_210312480;
        v21 = *(_OWORD *)algn_210312490;
LABEL_13:
        v2 = sub_20EA7A244();
        v3 = v8;
        v4 = v9;
        v18 = 0x3F821CCD96206855;
        break;
      default:
        break;
    }
    v11 = v18;
    v10 = v19;
    result = operator new(0x20uLL);
    v17 = v26;
    v15 = v24;
    v16 = v25;
    v13 = v22;
    v14 = v23;
    v12 = v21;
    *result = v20;
    result[1] = v12;
    *(_OWORD *)(a2 + 344) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_QWORD *)a2 = 0x87000000F00;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = result + 2;
    *(_QWORD *)(a2 + 32) = result + 2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 144) = v15;
    *(_OWORD *)(a2 + 160) = v16;
    *(_OWORD *)(a2 + 112) = v13;
    *(_OWORD *)(a2 + 128) = v14;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = v17;
    *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
    *(_OWORD *)(a2 + 200) = 0uLL;
    *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 264) = unk_21030E1F0;
    *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
    *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
    *(double *)(a2 + 288) = v2;
    *(_QWORD *)(a2 + 296) = v3;
    *(_QWORD *)(a2 + 304) = v4;
    *(_QWORD *)(a2 + 312) = 0;
    *(_OWORD *)(a2 + 320) = xmmword_21030D340;
    *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 384) = v10;
    *(_QWORD *)(a2 + 392) = v11;
    *(_WORD *)(a2 + 400) = 0;
    *(_BYTE *)(a2 + 408) = 0;
    *(_BYTE *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 464) = 0;
    *(_BYTE *)(a2 + 488) = 0;
    *(_DWORD *)(a2 + 496) = 0;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
    *(_BYTE *)(a2 + 520) = 1;
  }
  else
  {
LABEL_2:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 520) = 0;
  }
  return result;
}

_OWORD *sub_20EA81AB8@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if ((_DWORD)result == 96)
  {
    v3 = sub_20EA7A244();
    v5 = v4;
    v7 = v6;
    result = operator new(0x20uLL);
    *result = xmmword_2103125D8;
    result[1] = unk_2103125E8;
    *(_OWORD *)(a2 + 344) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_QWORD *)a2 = 0x1E000000280;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = result + 2;
    *(_QWORD *)(a2 + 32) = result + 2;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = xmmword_210312590;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 144) = xmmword_2103125B0;
    *(_OWORD *)(a2 + 160) = unk_2103125C0;
    *(_OWORD *)(a2 + 128) = unk_2103125A0;
    *(_QWORD *)(a2 + 176) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
    *(_OWORD *)(a2 + 200) = 0uLL;
    *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 264) = unk_21030E1F0;
    *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
    *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
    *(double *)(a2 + 288) = v3;
    *(_QWORD *)(a2 + 296) = v5;
    *(_QWORD *)(a2 + 304) = v7;
    *(_QWORD *)(a2 + 312) = 0;
    *(_OWORD *)(a2 + 320) = xmmword_21030D340;
    *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
    *(_OWORD *)(a2 + 384) = xmmword_210312580;
    *(_WORD *)(a2 + 400) = 0;
    *(_BYTE *)(a2 + 408) = 0;
    *(_BYTE *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 464) = 0;
    *(_BYTE *)(a2 + 488) = 0;
    *(_DWORD *)(a2 + 496) = 0;
    v8 = 1;
    *(_QWORD *)(a2 + 504) = 0;
    *(_QWORD *)(a2 + 512) = 0;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 520) = v8;
  return result;
}

_OWORD *sub_20EA81C84@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45 = 0u;
  v46 = 0u;
  v36 = 0xBFF0000000000000;
  v37 = 0;
  switch((int)result)
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 15:
    case 24:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 98:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 520) = 0;
      return result;
    case 2:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312880;
      v41 = unk_210312890;
      v42 = xmmword_2103128A0;
      v43 = unk_2103128B0;
      v38 = xmmword_2103128C8;
      v39 = unk_2103128D8;
      goto LABEL_18;
    case 3:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_2103128E8;
      v41 = unk_2103128F8;
      v42 = xmmword_210312908;
      v43 = unk_210312918;
      v38 = xmmword_210312930;
      v39 = unk_210312940;
      goto LABEL_18;
    case 7:
    case 8:
    case 11:
    case 12:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312950;
      v41 = unk_210312960;
      v42 = xmmword_210312970;
      v43 = unk_210312980;
      v38 = xmmword_210312998;
      v39 = unk_2103129A8;
      goto LABEL_18;
    case 13:
    case 14:
    case 87:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_2103127B0;
      v41 = unk_2103127C0;
      v42 = xmmword_2103127D0;
      v43 = unk_2103127E0;
      v38 = xmmword_2103127F8;
      v39 = unk_210312808;
      v2 = sub_20EA7A244();
      v3 = v22;
      v4 = v23;
      v11 = 0x3F7E4F765FD8ADACLL;
      goto LABEL_20;
    case 16:
    case 17:
    case 18:
    case 19:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312818;
      v41 = unk_210312828;
      v42 = xmmword_210312838;
      v43 = unk_210312848;
      v38 = xmmword_210312860;
      v39 = unk_210312870;
      goto LABEL_18;
    case 20:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_2103129B8;
      v41 = unk_2103129C8;
      v42 = xmmword_2103129D8;
      v43 = unk_2103129E8;
      v38 = xmmword_210312A00;
      v39 = unk_210312A10;
      goto LABEL_18;
    case 21:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312A20;
      v41 = unk_210312A30;
      v42 = xmmword_210312A40;
      v43 = unk_210312A50;
      v38 = xmmword_210312A68;
      v39 = unk_210312A78;
      goto LABEL_18;
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312A88;
      v41 = unk_210312A98;
      v42 = xmmword_210312AA8;
      v43 = unk_210312AB8;
      v38 = xmmword_210312AD0;
      v39 = unk_210312AE0;
LABEL_18:
      v2 = sub_20EA7A244();
      v3 = v15;
      v4 = v16;
      v17 = 0xE0E30446B69ELL;
      goto LABEL_19;
    case 58:
    case 59:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312AF0;
      v41 = unk_210312B00;
      v42 = xmmword_210312B10;
      v43 = unk_210312B20;
      v6 = &xmmword_210312B38;
      goto LABEL_8;
    case 60:
    case 61:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312B58;
      v41 = unk_210312B68;
      v42 = xmmword_210312B78;
      v43 = unk_210312B88;
      v7 = &xmmword_210312BA0;
      goto LABEL_10;
    case 62:
    case 63:
    case 64:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312BC0;
      v41 = unk_210312BD0;
      v42 = xmmword_210312BE0;
      v43 = unk_210312BF0;
      v6 = &xmmword_210312C08;
      goto LABEL_8;
    case 65:
    case 66:
    case 67:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312C28;
      v41 = unk_210312C38;
      v42 = xmmword_210312C48;
      v43 = unk_210312C58;
      v7 = &xmmword_210312C70;
      goto LABEL_10;
    case 68:
    case 69:
    case 70:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312C90;
      v41 = unk_210312CA0;
      v42 = xmmword_210312CB0;
      v43 = unk_210312CC0;
      v6 = &xmmword_210312CD8;
LABEL_8:
      v8 = v6[1];
      v38 = *v6;
      v39 = v8;
      v2 = sub_20EA7A244();
      v3 = v9;
      v4 = v10;
      v11 = 0x3F8096BB98C7E282;
      goto LABEL_20;
    case 71:
    case 72:
    case 73:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312C90;
      v41 = unk_210312CA0;
      v42 = xmmword_210312CB0;
      v43 = unk_210312CC0;
      v7 = &xmmword_210312CD8;
LABEL_10:
      v12 = v7[1];
      v38 = *v7;
      v39 = v12;
      v2 = sub_20EA7A244();
      v3 = v13;
      v4 = v14;
      v11 = 0x3F802795703F2D3CLL;
      goto LABEL_20;
    case 96:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_2103126E0;
      v41 = unk_2103126F0;
      v42 = xmmword_210312700;
      v43 = unk_210312710;
      v38 = xmmword_210312728;
      v39 = unk_210312738;
      goto LABEL_25;
    case 97:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312748;
      v41 = unk_210312758;
      v42 = xmmword_210312768;
      v43 = unk_210312778;
      v38 = xmmword_210312790;
      v39 = unk_2103127A0;
LABEL_25:
      v2 = sub_20EA7A244();
      v3 = v24;
      v4 = v25;
      v37 = 0xBF763BABA7B9170DLL;
      break;
    case 99:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312CF8;
      v41 = unk_210312D08;
      v42 = xmmword_210312D18;
      v43 = unk_210312D28;
      v38 = xmmword_210312D40;
      v39 = unk_210312D50;
      goto LABEL_29;
    case 100:
      sub_20EA79B68(99, 11, (uint64_t)&v40, &v38, &v36, &v37);
      v26 = sub_20EA7A244();
      goto LABEL_31;
    case 101:
      v44 = 0x3FF0000000000000;
      v40 = xmmword_210312D60;
      v41 = unk_210312D70;
      v42 = xmmword_210312D80;
      v43 = unk_210312D90;
      v38 = xmmword_210312DA8;
      v39 = unk_210312DB8;
LABEL_29:
      v2 = sub_20EA7A244();
      v3 = v29;
      v4 = v30;
      v17 = 0x1CCD96206855;
LABEL_19:
      v11 = v17 & 0xFFFFFFFFFFFFLL | 0x3F82000000000000;
LABEL_20:
      v36 = v11;
      break;
    case 102:
      sub_20EA79B68(101, 11, (uint64_t)&v40, &v38, &v36, &v37);
      v26 = sub_20EA7A244();
LABEL_31:
      v2 = v26;
      v3 = v27;
      v4 = v28;
      break;
    default:
      break;
  }
  v19 = v36;
  v18 = v37;
  result = operator new(0x20uLL);
  v35 = v44;
  v33 = v42;
  v34 = v43;
  v31 = v40;
  v32 = v41;
  v20 = v39;
  *result = v38;
  result[1] = v20;
  v21 = v46;
  *(_OWORD *)(a2 + 344) = v45;
  *(_OWORD *)(a2 + 360) = v21;
  *(_QWORD *)a2 = 0x1E000000280;
  *(_DWORD *)(a2 + 8) = 2;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = result + 2;
  *(_QWORD *)(a2 + 32) = result + 2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v34;
  *(_OWORD *)(a2 + 112) = v31;
  *(_OWORD *)(a2 + 128) = v32;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 176) = v35;
  *(_OWORD *)(a2 + 216) = xmmword_21030E1C0;
  *(_OWORD *)(a2 + 200) = 0uLL;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 264) = unk_21030E1F0;
  *(_OWORD *)(a2 + 248) = xmmword_21030E1E0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)algn_21030E1D0;
  *(double *)(a2 + 288) = v2;
  *(_QWORD *)(a2 + 296) = v3;
  *(_QWORD *)(a2 + 304) = v4;
  *(_QWORD *)(a2 + 312) = 0;
  *(_OWORD *)(a2 + 320) = xmmword_21030D340;
  *(_QWORD *)(a2 + 336) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 376) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 384) = v18;
  *(_QWORD *)(a2 + 392) = v19;
  *(_WORD *)(a2 + 400) = 257;
  *(_BYTE *)(a2 + 408) = 0;
  *(_BYTE *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 448) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a2 + 456) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_DWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 520) = 1;
  return result;
}

void sub_20EA82680(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int64x2_t v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  __int128 v64;
  _OWORD v65[100];
  _BYTE v66[25];
  _BYTE v67[25];
  _BYTE v68[1584];
  uint64_t v69;
  char v70;
  _BYTE v71[25];
  _BYTE v72[25];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 8) = 0;
  v6 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v7 = a1 + 8;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  v8 = sub_20E96E138(a1 + 8, &v63);
  if ((sub_20EA82D10(v63, v8, v9, v10, v11, v12, v13, v14) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationUtil.cpp", 61, (uint64_t)"primary_lens->validate()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = v63;
  v16 = *(_QWORD *)(a1 + 512);
  if (!v16)
  {
    sub_20EA77624();
    v17 = v65[0];
    v65[0] = 0uLL;
    v18 = *(std::__shared_weak_count **)(a1 + 520);
    *(_OWORD *)(a1 + 512) = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v65[0] + 1);
    if (*((_QWORD *)&v65[0] + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v65[0] + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v16 = *(_QWORD *)(a1 + 512);
  }
  v24 = *(_QWORD *)(a1 + 520);
  v62.i64[0] = v16;
  v62.i64[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  sub_20EA83850((uint64_t)v68, v7, v15, &v62, a3);
  v27 = (std::__shared_weak_count *)v62.i64[1];
  if (!v62.i64[1])
    goto LABEL_22;
  v28 = (unint64_t *)(v62.i64[1] + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v69 = *(_QWORD *)(a1 + 1072);
    v70 = *(_BYTE *)(a1 + 1080);
    if (!*(_BYTE *)(a1 + 440))
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v69 = *(_QWORD *)(a1 + 1072);
    v70 = *(_BYTE *)(a1 + 1080);
    if (!*(_BYTE *)(a1 + 440))
      goto LABEL_25;
  }
  if (v72[24]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 281, (uint64_t)"!model || !aps_model_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_77:
    abort();
  }
LABEL_25:
  *(_OWORD *)&v71[9] = *(_OWORD *)(a1 + 425);
  *(_OWORD *)v71 = *(_OWORD *)(a1 + 416);
  if (*(_BYTE *)(a1 + 496)
    && v71[24]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 292, (uint64_t)"!model || !temperature_model_", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  *(_OWORD *)&v72[9] = *(_OWORD *)(a1 + 481);
  *(_OWORD *)v72 = *(_OWORD *)(a1 + 472);
  v30 = *(_QWORD *)(a2 + 16);
  if (v30 >= *(_QWORD *)(a2 + 24))
  {
    v31 = sub_20EA8976C(v6, (uint64_t)v68);
  }
  else
  {
    sub_20EB81E74(*(_QWORD *)(a2 + 16), (uint64_t)v68);
    v31 = v30 + 1664;
    *(_QWORD *)(a2 + 16) = v30 + 1664;
  }
  *(_QWORD *)(a2 + 16) = v31;
  if (*(_DWORD *)(a1 + 4) != 2)
    goto LABEL_66;
  v32 = sub_20E96E138(a1 + 536, &v61);
  if ((sub_20EA82D10(v61, v32, v33, v34, v35, v36, v37, v38) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Calibration/src/CalibrationUtil.cpp", 75, (uint64_t)"secondary_lens->validate()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v39 = v61;
  v40 = *(_QWORD *)(a1 + 1040);
  if (!v40)
  {
    sub_20EA77624();
    v41 = v64;
    v64 = 0uLL;
    v42 = *(std::__shared_weak_count **)(a1 + 1048);
    *(_OWORD *)(a1 + 1040) = v41;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v40 = *(_QWORD *)(a1 + 1040);
  }
  v48 = *(_QWORD *)(a1 + 1048);
  v60.i64[0] = v40;
  v60.i64[1] = v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  sub_20EA83850((uint64_t)v65, a1 + 536, v39, &v60, a3);
  v51 = (std::__shared_weak_count *)v60.i64[1];
  if (!v60.i64[1])
    goto LABEL_83;
  v52 = (unint64_t *)(v60.i64[1] + 8);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if (*(_BYTE *)(a1 + 968))
      v59 = v67[24] == 0;
    else
      v59 = 1;
    if (v59)
      goto LABEL_58;
  }
  else
  {
LABEL_83:
    if (*(_BYTE *)(a1 + 968))
      v54 = v67[24] == 0;
    else
      v54 = 1;
    if (v54)
      goto LABEL_58;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 281, (uint64_t)"!model || !aps_model_", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_79;
  }
LABEL_58:
  *(_OWORD *)&v66[9] = *(_OWORD *)(a1 + 953);
  *(_OWORD *)v66 = *(_OWORD *)(a1 + 944);
  if (*(_BYTE *)(a1 + 1024)
    && v66[24]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/SensorModel.h", 292, (uint64_t)"!model || !temperature_model_", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_79:
    abort();
  }
  *(_OWORD *)&v67[9] = *(_OWORD *)(a1 + 1009);
  *(_OWORD *)v67 = *(_OWORD *)(a1 + 1000);
  v55 = *(_QWORD *)(a2 + 16);
  if (v55 >= *(_QWORD *)(a2 + 24))
  {
    v56 = sub_20EA8976C(v6, (uint64_t)v65);
  }
  else
  {
    sub_20EB81E74(*(_QWORD *)(a2 + 16), (uint64_t)v65);
    v56 = v55 + 1664;
    *(_QWORD *)(a2 + 16) = v55 + 1664;
  }
  *(_QWORD *)(a2 + 16) = v56;
  sub_20EB8188C((uint64_t)v65);
  v57 = v61;
  v61 = 0;
  if (v57)
    sub_20E8E931C((uint64_t)&v61, v57);
LABEL_66:
  sub_20EB8188C((uint64_t)v68);
  v58 = v63;
  v63 = 0;
  if (v58)
    sub_20E8E931C((uint64_t)&v63, v58);
}

void sub_20EA82C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a11;
  a11 = 0;
  if (v16)
    sub_20E8E931C((uint64_t)&a11, v16);
  sub_20EB8188C((uint64_t)&STACK[0x6C8]);
  v17 = a14;
  a14 = 0;
  if (v17)
    sub_20E8E931C((uint64_t)&a14, v17);
  sub_20EA841C0(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA82D10(uint64_t a1, double a2, double a3, double a4, double a5, int64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  unsigned int v8;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  _BOOL4 v52;

  v8 = *(_DWORD *)(a1 + 992);
  if (!v8)
    return 0;
  if (v8 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v8 = *(_DWORD *)(a1 + 992);
  }
  if (v8 <= 7)
  {
    if (v8 <= 3)
    {
      if (v8 <= 1)
      {
        if (!v8)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v10 = 0;
        do
        {
          v11 = (*(_QWORD *)(a1 + v10) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v10 == 64;
          v10 += 8;
        }
        while (!v15);
        if (v11)
        {
          v12 = 0;
          do
          {
            v13 = (*(_QWORD *)(a1 + 72 + v12) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 72 + v12) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              break;
            v15 = v12 == 64;
            v12 += 8;
          }
          while (!v15);
          if (v13 && fabs(*(double *)(a1 + 48)) < 0.00000001 && fabs(*(double *)(a1 + 56)) < 0.00000001)
            return fabs(*(double *)(a1 + 64) + -1.0) < 0.00000001;
        }
        return 0;
      }
      if (v8 == 2)
      {
        v31 = 0;
        do
        {
          v32 = (*(_QWORD *)(a1 + v31) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v31) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v31 == 64;
          v31 += 8;
        }
        while (!v15);
        if (v32)
        {
          v33 = 0;
          do
          {
            v34 = (*(_QWORD *)(a1 + 72 + v33) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 72 + v33) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              break;
            v15 = v33 == 64;
            v33 += 8;
          }
          while (!v15);
          if (v34
            && fabs(*(double *)(a1 + 48)) < 0.00000001
            && fabs(*(double *)(a1 + 56)) < 0.00000001
            && fabs(*(double *)(a1 + 64) + -1.0) < 0.00000001)
          {
            v35 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v35 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                v35 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            }
            if (v35)
            {
              result = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                return (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              return result;
            }
          }
        }
        return 0;
      }
      v45 = 0;
      do
      {
        v46 = (*(_QWORD *)(a1 + v45) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v45) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v45 == 64;
        v45 += 8;
      }
      while (!v15);
      if (!v46)
        return 0;
      v47 = 0;
      do
      {
        v28 = (*(_QWORD *)(a1 + 72 + v47) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v47) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v47 == 64;
        v47 += 8;
      }
      while (!v15);
      goto LABEL_159;
    }
    v24 = v8 == 5;
    if (v8 <= 5)
    {
      v25 = 0;
      if (v24)
      {
        do
        {
          v26 = (*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v25 == 64;
          v25 += 8;
        }
        while (!v15);
        if (!v26)
          return 0;
        v27 = 0;
        do
        {
          v28 = (*(_QWORD *)(a1 + 72 + v27) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 72 + v27) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v27 == 64;
          v27 += 8;
        }
        while (!v15);
      }
      else
      {
        do
        {
          v29 = (*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v25 == 64;
          v25 += 8;
        }
        while (!v15);
        if (!v29)
          return 0;
        v30 = 0;
        do
        {
          v28 = (*(_QWORD *)(a1 + 72 + v30) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 72 + v30) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v30 == 64;
          v30 += 8;
        }
        while (!v15);
      }
      goto LABEL_159;
    }
    if (v8 == 6)
    {
      v36 = 0;
      do
      {
        v37 = (*(_QWORD *)(a1 + v36) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v36) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v36 == 64;
        v36 += 8;
      }
      while (!v15);
      if (!v37)
        return 0;
      v38 = 0;
      do
      {
        v39 = (*(_QWORD *)(a1 + 72 + v38) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v38) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v38 == 64;
        v38 += 8;
      }
      while (!v15);
      if (!v39
        || fabs(*(double *)(a1 + 48)) >= 0.00000001
        || fabs(*(double *)(a1 + 56)) >= 0.00000001
        || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
      {
        return 0;
      }
      v40 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v40 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          v40 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      if (!v40)
        return 0;
      v41 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v41 = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (!v41)
        return 0;
      result = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        return (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return result;
    }
    v48 = 0;
    do
    {
      v49 = (*(_QWORD *)(a1 + v48) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + v48) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v48 == 64;
      v48 += 8;
    }
    while (!v15);
    if (!v49)
      return 0;
    v50 = 0;
    do
    {
      v51 = (*(_QWORD *)(a1 + 72 + v50) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 72 + v50) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v50 == 64;
      v50 += 8;
    }
    while (!v15);
    if (!v51
      || fabs(*(double *)(a1 + 48)) >= 0.00000001
      || fabs(*(double *)(a1 + 56)) >= 0.00000001
      || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
    {
      return 0;
    }
    v52 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v52 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v52 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          v52 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
    }
    if (!v52)
      return 0;
    result = *(_QWORD *)(a1 + 472);
    if (!result)
      return result;
    return sub_20EB1E278(result);
  }
  if (v8 <= 0xB)
  {
    v15 = v8 == 9;
    if (v8 > 9)
    {
      if (v8 == 10)
        return sub_20EA89D88(a1);
      else
        return sub_20EB3C10C(a1);
    }
    v16 = 0;
    if (!v15)
    {
      do
      {
        v21 = (*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v16 == 64;
        v16 += 8;
      }
      while (!v15);
      if (!v21)
        return 0;
      v22 = 0;
      do
      {
        v23 = (*(_QWORD *)(a1 + 72 + v22) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v22) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v22 == 64;
        v22 += 8;
      }
      while (!v15);
      if (!v23
        || fabs(*(double *)(a1 + 48)) >= 0.00000001
        || fabs(*(double *)(a1 + 56)) >= 0.00000001
        || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
      {
        return 0;
      }
      result = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        result = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          result = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            result = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              result = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                result = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                  return (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              }
            }
          }
        }
      }
      return result;
    }
    do
    {
      v17 = (*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v16 == 64;
      v16 += 8;
    }
    while (!v15);
    if (!v17)
      return 0;
    v18 = 0;
    do
    {
      v19 = (*(_QWORD *)(a1 + 72 + v18) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 72 + v18) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v18 == 64;
      v18 += 8;
    }
    while (!v15);
    if (!v19
      || fabs(*(double *)(a1 + 48)) >= 0.00000001
      || fabs(*(double *)(a1 + 56)) >= 0.00000001
      || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
    {
      return 0;
    }
    v20 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v20 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v20 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v20 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v20 = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v20 = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                v20 = (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            }
          }
        }
      }
    }
    if (!v20)
      return 0;
    result = *(_QWORD *)(a1 + 496);
    if (!result)
      return result;
    return sub_20EB1E278(result);
  }
  if (v8 > 0xD)
  {
    if (v8 == 14)
      return sub_20EA8A054(a1);
    else
      return sub_20EB401C4(a1);
  }
  if (v8 == 13)
    return sub_20EB43E14(a1, a2, a3, a4, a5, a6, a7, a8);
  v42 = 0;
  do
  {
    v43 = (*(_QWORD *)(a1 + v42) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v42) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v15 = v42 == 64;
    v42 += 8;
  }
  while (!v15);
  if (!v43)
    return 0;
  v44 = 0;
  do
  {
    v28 = (*(_QWORD *)(a1 + 72 + v44) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 72 + v44) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v15 = v44 == 64;
    v44 += 8;
  }
  while (!v15);
LABEL_159:
  if (!v28
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  result = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    result = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      result = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        return (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    }
  }
  return result;
}

void sub_20EA83850(uint64_t a1, uint64_t a2, uint64_t a3, int64x2_t *a4, double a5)
{
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *__src;
  int v73;
  unint64_t v74;
  int64x2_t v75;
  _QWORD v76[3];
  int v77;
  const char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  void *object;
  void *v85[2];
  __int128 v86;
  void *__p[2];
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;

  if (!a4->i64[0])
    goto LABEL_108;
  v10 = *(_DWORD *)(a3 + 992);
  if (v10 != -1)
  {
    if (v10 <= 7)
      goto LABEL_4;
LABEL_10:
    if (v10 != 13)
      goto LABEL_108;
    goto LABEL_15;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = *(_DWORD *)(a3 + 992);
  if (v10 > 7)
    goto LABEL_10;
LABEL_4:
  if (v10 > 3)
  {
    if (v10 != 6)
      goto LABEL_108;
  }
  else if (v10 > 1)
  {
    if (v10 != 2)
      goto LABEL_108;
  }
  else if (!v10)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_15:
  sub_20EA866E4(&v83);
  if (**(int **)(v83 + 56) <= 5)
  {
    v11 = *(unsigned __int8 *)(v83 + 72);
    v12 = sub_20E8C31DC(v83, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (v11 || v12)
    {
      v73 = v11;
      v76[0] = &v83;
      v76[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v76[2] = std::chrono::system_clock::now().__d_.__rep_;
      v77 = 5;
      v78 = "unknown file";
      v79 = 178;
      v81 = 0;
      v82 = 0;
      v80 = "unknown function";
      v71 = v83;
      if (*(char *)(v83 + 39) < 0)
      {
        v15 = *(const char **)(v83 + 16);
        v14 = *(_QWORD *)(v83 + 24);
        v70 = v83 + 16;
        v74 = v13;
        v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v17 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        v14 = *(unsigned __int8 *)(v83 + 39);
        v15 = (const char *)(v83 + 16);
        v70 = v83 + 16;
        v74 = v13;
        v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v16 & 1) != 0)
          goto LABEL_22;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v86 && SHIBYTE(v85[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_22:
      if (byte_254A4A4F8[23] >= 0)
        v18 = byte_254A4A4F8;
      else
        v18 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v19 = byte_254A4A4F8[23];
      else
        v19 = *(_QWORD *)&byte_254A4A4F8[8];
      __src = v15;
      object = os_log_create(v18, v15);
      v20 = v85;
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v19 >= 0x17)
      {
        v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v21 = v19 | 7;
        v22 = v21 + 1;
        v20 = operator new(v21 + 1);
        v85[1] = (void *)v19;
        *(_QWORD *)&v86 = v22 | 0x8000000000000000;
        v85[0] = v20;
      }
      else
      {
        BYTE7(v86) = v19;
        if (!v19)
        {
LABEL_36:
          *((_BYTE *)v20 + v19) = 0;
          BYTE8(v86) = 1;
          v23 = __p;
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v14 >= 0x17)
          {
            v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v24 = v14 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            __p[1] = (void *)v14;
            v88 = v25 | 0x8000000000000000;
            __p[0] = v23;
          }
          else
          {
            HIBYTE(v88) = v14;
            if (!v14)
              goto LABEL_44;
          }
          memmove(v23, __src, v14);
LABEL_44:
          *((_BYTE *)v23 + v14) = 0;
          v89 = 1;
          v26 = object;
          if (SHIBYTE(v88) < 0)
            operator delete(__p[0]);
          if (BYTE8(v86) && SBYTE7(v86) < 0)
            operator delete(v85[0]);
          if (object)
            os_release(object);
          if (v74 && *(_QWORD *)(v74 + 24))
          {
            v27 = _os_log_pack_size();
            v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
            v29 = (std::__shared_weak_count *)operator new();
            v30 = v29;
            v29->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v29->__shared_weak_owners_ = 0;
            v29[1].__vftable = v28;
            object = v28;
            v85[0] = v28;
            v85[1] = v29;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            v86 = 0uLL;
            __p[0] = 0;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v30);
            }
            v34 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v35 = operator new();
            v36 = *(unsigned __int8 *)(v71 + 39);
            v37 = v70;
            if ((v36 & 0x80u) != 0)
            {
              v37 = *(_QWORD *)(v71 + 16);
              v36 = *(_QWORD *)(v71 + 24);
            }
            *(_QWORD *)v35 = v34;
            *(_OWORD *)(v35 + 8) = *(_OWORD *)v85;
            v85[0] = 0;
            v85[1] = 0;
            *(_OWORD *)(v35 + 24) = v86;
            v86 = 0uLL;
            *(_QWORD *)(v35 + 40) = v37;
            *(_QWORD *)(v35 + 48) = v36;
            *(_BYTE *)(v35 + 56) = 16;
            v90 = 0;
            v91 = v35;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v74 + 24) + 40))(*(_QWORD *)(v74 + 24), &v91);
            v38 = v91;
            v91 = 0;
            if (v38)
            {
              v39 = *(std::__shared_weak_count **)(v38 + 32);
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v42 = *(std::__shared_weak_count **)(v38 + 16);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
              v45 = v90;
              v90 = 0;
              if (v45)
              {
                v46 = *(std::__shared_weak_count **)(v45 + 32);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *(std::__shared_weak_count **)(v45 + 16);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
              }
            }
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
            v53 = v73;
            if (*((_QWORD *)&v86 + 1))
            {
              v54 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v56 = (std::__shared_weak_count *)v85[1];
            if (v85[1])
            {
              v57 = (unint64_t *)((char *)v85[1] + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v59 = (void *)_os_log_send_and_compose_impl();
            v53 = v11;
            if (v59)
              free(v59);
          }
          if (v53)
          {
            sub_20E8C003C((uint64_t)v76, "Approximate external lens undistortion is disabled: non fisheye lens model");
            sub_20E863570((uint64_t)v76);
          }
          sub_20E863570((uint64_t)v76);
          v60 = v82;
          if (v82)
          {
            v61 = (unint64_t *)&v82->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          goto LABEL_103;
        }
      }
      memmove(v20, v18, v19);
      goto LABEL_36;
    }
  }
LABEL_103:
  v63 = (std::__shared_weak_count *)a4->i64[1];
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_108:
  v66 = *(double *)(a2 + 384);
  v75 = *a4;
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  sub_20EB819DC(a1, a2 + 312, (_QWORD *)(a2 + 288), a3, 2, &v75, a5, v66);
  v67 = (std::__shared_weak_count *)v75.i64[1];
  if (v75.i64[1])
  {
    v68 = (unint64_t *)(v75.i64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_20EA84094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20EA840D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20E86E8C4((uint64_t *)(v29 - 112));
  sub_20E86E8C4((uint64_t *)(v29 - 120));
  sub_20E86E658((uint64_t)&a29);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20EA84108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  MEMORY[0x212BC6398](v11, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA84134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA84150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA84164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20EA841AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA841C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20EB8188C(v3 - 1664);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EA84218@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  float64x2_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;

  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  result = sub_20EA89974(a3 + 8, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 7));
  v6 = a2[1] - *a2;
  if (v6)
  {
    v7 = 0;
    v8 = 0x8E38E38E38E38E39 * (v6 >> 3);
    v9 = 1;
    v10 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v27 = v10;
    do
    {
      v12 = *a2;
      v13 = *v4 + 1664 * v7;
      if (*(_BYTE *)(v13 + 1536))
        v14 = v13 + 96;
      else
        v14 = 0;
      v15 = *(_DWORD *)(v14 + 992);
      if (v15 == -1)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_19;
        v15 = *(_DWORD *)(v14 + 992);
        v16 = v12 + 72 * v7;
        if (v15 <= 7)
        {
LABEL_13:
          if (!v15)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_19:
            abort();
          }
        }
      }
      else
      {
        v16 = v12 + 72 * v7;
        if (v15 <= 7)
          goto LABEL_13;
      }
      v10.f64[0] = *(float64_t *)(v16 + 64);
      v18 = *(float64x2_t *)(v16 + 32);
      v17 = *(float64x2_t *)(v16 + 48);
      v20 = *(int8x16_t *)v16;
      v19 = *(float64x2_t *)(v16 + 16);
      v21 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v22 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v23 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v24 = vextq_s8(v20, v20, 8uLL).u64[0];
      v25 = (int8x16_t)vabdq_f64(*(float64x2_t *)v16, *(float64x2_t *)v14);
      v26 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, (float64x2_t)vextq_s8(v25, v25, 8uLL)), (int32x4_t)vcgeq_f64(v27, vabdq_f64(v19, *(float64x2_t *)(v14 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vabdq_f64(v18, *(float64x2_t *)(v14 + 32))), (int32x4_t)vcgeq_f64(v27, vabdq_f64(v17, *(float64x2_t *)(v14 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v26)) & 1) != 0
        || (v26.f64[0] = *(float64_t *)(v14 + 64), vabdq_f64(v10, v26).f64[0] > 1.0e-10))
      {
        v20.i64[1] = v24;
        *(_QWORD *)&v19.f64[1] = v23;
        *(int8x16_t *)v14 = v20;
        *(float64x2_t *)(v14 + 16) = v19;
        *(_QWORD *)&v18.f64[1] = v22;
        *(float64_t *)(v14 + 64) = v10.f64[0];
        *(_QWORD *)&v17.f64[1] = v21;
        *(float64x2_t *)(v14 + 32) = v18;
        *(float64x2_t *)(v14 + 48) = v17;
        v11 = *(double *)v16 * *(double *)(v16 + 32);
        *(double *)(v14 + 72) = 1.0 / *(double *)v16;
        *(double *)(v14 + 80) = -*(double *)(v16 + 8) / v11;
        *(double *)(v14 + 88) = -(*(double *)(v16 + 32) * *(double *)(v16 + 16)
                                - *(double *)(v16 + 8) * *(double *)(v16 + 40))
                              / v11;
        *(_QWORD *)(v14 + 96) = 0;
        *(double *)(v14 + 104) = 1.0 / *(double *)(v16 + 32);
        *(double *)(v14 + 112) = -*(double *)(v16 + 40) / *(double *)(v16 + 32);
        *(_QWORD *)(v14 + 120) = 0;
        *(_QWORD *)(v14 + 128) = 0;
        v10.f64[1] = NAN;
        *(_OWORD *)(v14 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v14 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v14 + 160) = 0;
      }
      v7 = v9++;
    }
    while (v8 > v7);
  }
  return result;
}

void sub_20EA844F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20EA841C0(a10);
  _Unwind_Resume(a1);
}

void sub_20EA84508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20EA841C0(a10);
  _Unwind_Resume(a1);
}

void sub_20EA8451C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  void **v45;
  uint64_t v46;
  size_t v47;
  void **p_dst;
  unint64_t v49;
  void **v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  size_t v56;
  const char *v57;
  unsigned __int8 v58;
  size_t v59;
  const char *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  size_t v69;
  void *v70;
  _QWORD *v71;
  size_t v72;
  size_t v73;
  void *v74;
  void *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  char *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  const char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  void *v134;
  void *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  size_t v147;
  const char *v148;
  unsigned __int8 v149;
  const char *v150;
  size_t v151;
  __int128 *v152;
  unint64_t v153;
  const char *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  size_t v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  const char *v199;
  NSObject *v200;
  unsigned __int8 v201;
  uint64_t v202;
  const char *v203;
  NSObject *v204;
  int v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 v235;
  size_t v236;
  char *v237;
  NSObject *v238;
  const char *v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  uint64_t v245;
  void *__src;
  const char *__srca;
  double v248;
  int v249;
  char *__s;
  char *__sa;
  double v252;
  unint64_t v253;
  const char *v254;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char *v257;
  const char *v258;
  int v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  double v267;
  void **__dst;
  size_t v269;
  int64_t v270;
  void *object;
  __int128 v272;
  __int128 v273;
  void *v274[2];
  unint64_t v275;
  char v276;
  unint64_t v277;
  void *v278;
  char v279;
  unint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  double v288;
  __int128 v289;
  _BYTE v290[24];
  __int128 v291;
  char *v292;
  const char *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;

  v296 = *MEMORY[0x24BDAC8D0];
  v7 = (double *)(a4 + 112);
  if (*(_BYTE *)(a4 + 401))
  {
    v8 = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a5 + 48) = v8;
    v9 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)a5 = *(_OWORD *)v7;
    *(_OWORD *)(a5 + 16) = v9;
    v10 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a5 + 72) = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(a5 + 64) = *(_QWORD *)(a4 + 176);
    *(_OWORD *)(a5 + 88) = v10;
    *(_OWORD *)(a5 + 104) = *(_OWORD *)(a4 + 144);
    *(_QWORD *)(a5 + 120) = 0;
    *(_QWORD *)(a5 + 128) = 0;
    *(_QWORD *)(a5 + 136) = 0x3FF0000000000000;
    return;
  }
  v288 = 0.0;
  v287 = 0uLL;
  v286 = 0uLL;
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a4 + 456))
    {
      v14 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a5 + 96) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a5 + 112) = v14;
      *(_OWORD *)(a5 + 128) = *(_OWORD *)(a1 + 128);
      v15 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a5 + 48) = v15;
      v16 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a5 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 80) = v16;
      v17 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a5 = *(_OWORD *)a1;
      *(_OWORD *)(a5 + 16) = v17;
      return;
    }
    v26 = *v7;
    v19 = *(double *)a1;
    if (*v7 == 0.0)
    {
      if (v19 != 0.0)
        goto LABEL_36;
    }
    else
    {
      if (v19 == 0.0)
        goto LABEL_36;
      v30 = vabdd_f64(v26, v19);
      v31 = fabs(v26);
      v32 = fabs(v19);
      if (v32 < v31)
        v31 = v32;
      if (v30 / v31 >= 0.1)
        goto LABEL_36;
    }
    v27 = *(double *)(a4 + 144);
    v23 = *(double *)(a1 + 32);
    if (v27 == 0.0)
    {
      if (v23 != 0.0)
        goto LABEL_36;
    }
    else
    {
      if (v23 == 0.0)
        goto LABEL_36;
      v33 = vabdd_f64(v27, v23);
      v34 = fabs(v27);
      v35 = fabs(v23);
      if (v35 < v34)
        v34 = v35;
      if (v33 / v34 >= 0.1)
        goto LABEL_36;
    }
    v28 = *(double *)(a4 + 128);
    v20 = *(double *)(a1 + 16);
    if (v28 == 0.0)
    {
      if (v20 != 0.0)
        goto LABEL_36;
    }
    else
    {
      if (v20 == 0.0)
        goto LABEL_36;
      v36 = vabdd_f64(v28, v20);
      v37 = fabs(v28);
      v38 = fabs(v20);
      if (v38 < v37)
        v37 = v38;
      if (v36 / v37 >= 0.1)
        goto LABEL_36;
    }
    v29 = *(double *)(a4 + 152);
    v22 = *(double *)(a1 + 40);
    if (v29 == 0.0)
    {
      if (v22 != 0.0)
        goto LABEL_36;
    }
    else
    {
      if (v22 == 0.0)
        goto LABEL_36;
      v39 = vabdd_f64(v29, v22);
      v40 = fabs(v29);
      v41 = fabs(v22);
      if (v41 < v40)
        v40 = v41;
      if (v39 / v40 >= 0.1)
        goto LABEL_36;
    }
    if (*(double *)(a4 + 176) == *(double *)(a1 + 64))
    {
      v18 = *(_QWORD *)(a1 + 8);
      v21 = *(void **)(a1 + 24);
      v287 = *(_OWORD *)(a1 + 48);
      v288 = *(double *)(a1 + 64);
      v25 = *(double *)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 80);
      v244 = *(double *)(a1 + 88);
      __src = *(void **)(a1 + 96);
      v248 = *(double *)(a1 + 104);
      __s = *(char **)(a1 + 112);
      v286 = *(_OWORD *)(a1 + 120);
      v252 = *(double *)(a1 + 136);
      goto LABEL_188;
    }
LABEL_36:
    sub_20EA866E4(&v283);
    if (**(int **)(v283 + 56) > 5
      || (v42 = *(unsigned __int8 *)(v283 + 72),
          v43 = sub_20E8C31DC(v283, "OSLogSurrogateAppender", 1, 0),
          v44 = v43,
          !v42)
      && !v43)
    {
LABEL_187:
      v19 = *(double *)(a4 + 112);
      v18 = *(_QWORD *)(a4 + 120);
      v20 = *(double *)(a4 + 128);
      v21 = *(void **)(a4 + 136);
      v23 = *(double *)(a4 + 144);
      v22 = *(double *)(a4 + 152);
      v287 = *(_OWORD *)(a4 + 160);
      v288 = *(double *)(a4 + 176);
      __s = *(char **)&v22;
      v252 = 1.0;
      __src = v21;
      v248 = v23;
      v244 = v20;
      v24 = v18;
      v25 = v19;
      v286 = 0uLL;
      goto LABEL_188;
    }
    sub_20E863438((uint64_t)&object);
    DWORD2(v264) = 0;
    sub_20EA8A320(&v263, "SLAM received per frame intrinsics, ");
    sub_20E8F6238((uint64_t)&__dst, (uint64_t)&v263, (double *)a1);
    *(_QWORD *)v290 = &v263;
    *(_QWORD *)&v290[8] = " that do not match the default intrinsics, ";
    *(_QWORD *)&v290[16] = &v263;
    *(_QWORD *)&v291 = " that do not match the default intrinsics, ";
    *((_QWORD *)&v291 + 1) = " that do not match the default intrinsics, ";
    if (DWORD2(v264) == -1)
      sub_20E877AB8();
    v284 = v290;
    ((void (*)(void **, __int128 *))off_24C9C1688[DWORD2(v264)])(&v284, &v263);
    sub_20E8F6238((uint64_t)v290, (uint64_t)&v263, v7);
    if (DWORD2(v264) == -1)
      sub_20E877AB8();
    *(_QWORD *)v290 = &v284;
    ((void (*)(void **__return_ptr, _BYTE *, __int128 *))off_24C9C16A0[DWORD2(v264)])(__p, v290, &v263);
    if (DWORD2(v264) != -1)
      ((void (*)(_BYTE *, __int128 *))off_24C9C1640[DWORD2(v264)])(v290, &v263);
    if (rep >= 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if (rep >= 0)
      v46 = HIBYTE(rep);
    else
      v46 = (uint64_t)__p[1];
    sub_20E86A980((_QWORD *)&v272 + 1, (uint64_t)v45, v46);
    if (SHIBYTE(rep) < 0)
      operator delete(__p[0]);
    v253 = v44;
    v249 = v42;
    if ((v281 & 0x10) != 0)
    {
      v49 = v280;
      if (v280 < v277)
      {
        v280 = v277;
        v49 = v277;
      }
      v50 = (void **)&v276;
    }
    else
    {
      if ((v281 & 8) == 0)
      {
        v47 = 0;
        HIBYTE(v270) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_66;
      }
      v50 = v274;
      v49 = v275;
    }
    v51 = *v50;
    v47 = v49 - (_QWORD)*v50;
    if (v47 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v47 >= 0x17)
    {
      v52 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v52 = v47 | 7;
      v53 = v52 + 1;
      p_dst = (void **)operator new(v52 + 1);
      v269 = v47;
      v270 = v53 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v270) = v49 - *(_BYTE *)v50;
      p_dst = (void **)&__dst;
      if (!v47)
      {
LABEL_66:
        *((_BYTE *)p_dst + v47) = 0;
        *(_QWORD *)&v263 = &v283;
        *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v264 = std::chrono::system_clock::now();
        DWORD2(v264) = 5;
        *(_QWORD *)&v265 = "unknown file";
        DWORD2(v265) = 155;
        *((_QWORD *)&v266 + 1) = 0;
        v267 = 0.0;
        *(_QWORD *)&v266 = "unknown function";
        v54 = (void **)&__dst;
        if (v270 < 0)
          v54 = __dst;
        __sa = (char *)v54;
        v55 = *(_QWORD *)v263;
        if (*(char *)(*(_QWORD *)v263 + 39) < 0)
        {
          v57 = *(const char **)(v55 + 16);
          v56 = *(_QWORD *)(v55 + 24);
        }
        else
        {
          v56 = *(unsigned __int8 *)(*(_QWORD *)v263 + 39);
          v57 = (const char *)(*(_QWORD *)v263 + 16);
        }
        v242 = *(_QWORD *)v263;
        v245 = *(_QWORD *)v263 + 16;
        v58 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v290);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v290);
          if ((_BYTE)v291 && (v290[23] & 0x80000000) != 0)
            operator delete(*(void **)v290);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v59 = byte_254A4A4F8[23];
        else
          v59 = *(_QWORD *)&byte_254A4A4F8[8];
        if (byte_254A4A4F8[23] >= 0)
          v60 = byte_254A4A4F8;
        else
          v60 = *(const char **)byte_254A4A4F8;
        __srca = v57;
        *(_QWORD *)v290 = os_log_create(v60, v57);
        v61 = &v290[8];
        if (v59 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v59 >= 0x17)
        {
          v240 = v56;
          v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17)
            v62 = v59 | 7;
          v63 = v62 + 1;
          v61 = operator new(v62 + 1);
          *(_QWORD *)&v290[16] = v59;
          *(_QWORD *)&v291 = v63 | 0x8000000000000000;
          *(_QWORD *)&v290[8] = v61;
          v56 = v240;
        }
        else
        {
          BYTE7(v291) = v59;
          if (!v59)
          {
LABEL_86:
            v61[v59] = 0;
            BYTE8(v291) = 1;
            v64 = (char *)&v292;
            if (v56 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v56 >= 0x17)
            {
              v66 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v56 | 7) != 0x17)
                v66 = v56 | 7;
              v67 = v66 + 1;
              v64 = (char *)operator new(v66 + 1);
              v293 = (const char *)v56;
              v294 = v67 | 0x8000000000000000;
              v292 = v64;
              v65 = v253;
            }
            else
            {
              HIBYTE(v294) = v56;
              v65 = v253;
              if (!v56)
              {
LABEL_94:
                v64[v56] = 0;
                LOBYTE(v295) = 1;
                v68 = *(NSObject **)v290;
                if (SHIBYTE(v294) < 0)
                  operator delete(v292);
                if (BYTE8(v291) && SBYTE7(v291) < 0)
                  operator delete(*(void **)&v290[8]);
                if (*(_QWORD *)v290)
                  os_release(*(void **)v290);
                if (!v65 || !*(_QWORD *)(v65 + 24))
                {
                  os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v290 = 136315138;
                  *(_QWORD *)&v290[4] = __sa;
                  v75 = (void *)_os_log_send_and_compose_impl();
                  v76 = v249;
                  if (v75)
                    free(v75);
                  goto LABEL_173;
                }
                v69 = _os_log_pack_size();
                v70 = operator new(v69, (std::align_val_t)8uLL);
                v71 = (_QWORD *)operator new();
                *v71 = &off_24C9ABB80;
                v71[1] = 0;
                v71[2] = 0;
                v71[3] = v70;
                __p[0] = v70;
                __p[1] = v70;
                v257 = 0;
                v258 = 0;
                rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v71;
                v72 = strlen(__sa);
                if (v72 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v73 = v72;
                if (v72 >= 0x17)
                {
                  v77 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v72 | 7) != 0x17)
                    v77 = v72 | 7;
                  v78 = v77 + 1;
                  v74 = operator new(v77 + 1);
                  *((_QWORD *)&v285 + 1) = v78 | 0x8000000000000000;
                  v284 = v74;
                  *(_QWORD *)&v285 = v73;
                }
                else
                {
                  HIBYTE(v285) = v72;
                  v74 = &v284;
                  if (!v72)
                  {
LABEL_113:
                    *((_BYTE *)v74 + v73) = 0;
                    v79 = v284;
                    *(_QWORD *)&v289 = v285;
                    *(_QWORD *)((char *)&v289 + 7) = *(_QWORD *)((char *)&v285 + 7);
                    v80 = HIBYTE(v285);
                    v81 = operator new(0x38uLL);
                    v81[1] = 0;
                    v81[2] = 0;
                    v81[3] = off_24C9ABC20;
                    *v81 = &off_24C9ABBD0;
                    v82 = v289;
                    v81[4] = v79;
                    v81[5] = v82;
                    *(_QWORD *)((char *)v81 + 47) = *(_QWORD *)((char *)&v289 + 7);
                    *((_BYTE *)v81 + 55) = v80;
                    *(_QWORD *)&v289 = 0;
                    *(_QWORD *)((char *)&v289 + 7) = 0;
                    v83 = (std::__shared_weak_count *)v258;
                    v257 = (char *)(v81 + 3);
                    v258 = (const char *)v81;
                    if (v83)
                    {
                      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
                      do
                        v85 = __ldaxr(p_shared_owners);
                      while (__stlxr(v85 - 1, p_shared_owners));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    *(_OWORD *)v290 = *(_OWORD *)__p;
                    v86 = v257;
                    *(_QWORD *)&v290[16] = rep;
                    if (rep)
                    {
                      v87 = (unint64_t *)(rep + 8);
                      do
                        v88 = __ldxr(v87);
                      while (__stxr(v88 + 1, v87));
                    }
                    v89 = (std::__shared_weak_count *)v258;
                    *(_QWORD *)&v291 = v86;
                    *((_QWORD *)&v291 + 1) = v258;
                    if (v258)
                    {
                      v90 = (unint64_t *)(v258 + 8);
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                      v292 = v86;
                      do
                        v92 = __ldaxr(v90);
                      while (__stlxr(v92 - 1, v90));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    else
                    {
                      v292 = v86;
                    }
                    v93 = (std::__shared_weak_count *)rep;
                    if (rep)
                    {
                      v94 = (unint64_t *)(rep + 8);
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    v96 = *(_QWORD *)v290;
                    if (v292[31] >= 0)
                      v97 = v292 + 8;
                    else
                      v97 = (char *)*((_QWORD *)v292 + 1);
                    v98 = _os_log_pack_fill();
                    *(_DWORD *)v98 = 136315138;
                    *(_QWORD *)(v98 + 4) = v97;
                    v99 = (char *)operator new();
                    v100 = *(unsigned __int8 *)(v242 + 39);
                    v101 = *(_QWORD *)(v242 + 16);
                    v102 = *(_QWORD *)(v242 + 24);
                    v103 = v291;
                    *(_OWORD *)(v99 + 8) = *(_OWORD *)&v290[8];
                    if ((v100 & 0x80u) != 0)
                      v100 = v102;
                    else
                      v101 = v245;
                    *(_QWORD *)v99 = v96;
                    *(_QWORD *)&v290[8] = 0;
                    *(_QWORD *)&v290[16] = 0;
                    *(_OWORD *)(v99 + 24) = v103;
                    v291 = 0uLL;
                    *((_QWORD *)v99 + 5) = v101;
                    *((_QWORD *)v99 + 6) = v100;
                    v99[56] = 16;
                    v284 = 0;
                    __p[0] = v99;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v253 + 24) + 40))(*(_QWORD *)(v253 + 24), __p);
                    v76 = v249;
                    v104 = __p[0];
                    __p[0] = 0;
                    if (v104)
                    {
                      v105 = (std::__shared_weak_count *)*((_QWORD *)v104 + 4);
                      if (v105)
                      {
                        v106 = (unint64_t *)&v105->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      v108 = (std::__shared_weak_count *)*((_QWORD *)v104 + 2);
                      if (v108)
                      {
                        v109 = (unint64_t *)&v108->__shared_owners_;
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 - 1, v109));
                        if (!v110)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }
                      MEMORY[0x212BC6398](v104, 0x10F0C40B62ED6C6);
                      v111 = v284;
                      v284 = 0;
                      if (v111)
                      {
                        v112 = (std::__shared_weak_count *)*((_QWORD *)v111 + 4);
                        if (v112)
                        {
                          v113 = (unint64_t *)&v112->__shared_owners_;
                          do
                            v114 = __ldaxr(v113);
                          while (__stlxr(v114 - 1, v113));
                          if (!v114)
                          {
                            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                            std::__shared_weak_count::__release_weak(v112);
                          }
                        }
                        v115 = (std::__shared_weak_count *)*((_QWORD *)v111 + 2);
                        if (v115)
                        {
                          v116 = (unint64_t *)&v115->__shared_owners_;
                          do
                            v117 = __ldaxr(v116);
                          while (__stlxr(v117 - 1, v116));
                          if (!v117)
                          {
                            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                            std::__shared_weak_count::__release_weak(v115);
                          }
                        }
                        MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
                      }
                    }
                    v118 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
                    if (*((_QWORD *)&v291 + 1))
                    {
                      v119 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
                      do
                        v120 = __ldaxr(v119);
                      while (__stlxr(v120 - 1, v119));
                      if (!v120)
                      {
                        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                        std::__shared_weak_count::__release_weak(v118);
                      }
                    }
                    v121 = *(std::__shared_weak_count **)&v290[16];
                    if (*(_QWORD *)&v290[16])
                    {
                      v122 = (unint64_t *)(*(_QWORD *)&v290[16] + 8);
                      do
                        v123 = __ldaxr(v122);
                      while (__stlxr(v123 - 1, v122));
                      if (!v123)
                      {
                        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                        std::__shared_weak_count::__release_weak(v121);
                      }
                    }
LABEL_173:
                    if (v76)
                    {
                      v124 = (const char *)&__dst;
                      if (v270 < 0)
                        v124 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v263, "%s", v124);
                      sub_20E863570((uint64_t)&v263);
                    }
                    sub_20E863570((uint64_t)&v263);
                    v125 = *(std::__shared_weak_count **)&v267;
                    if (v267 != 0.0)
                    {
                      v126 = (unint64_t *)(*(_QWORD *)&v267 + 8);
                      do
                        v127 = __ldaxr(v126);
                      while (__stlxr(v127 - 1, v126));
                      if (!v127)
                      {
                        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                        std::__shared_weak_count::__release_weak(v125);
                      }
                    }
                    if (SHIBYTE(v270) < 0)
                      operator delete(__dst);
                    object = (void *)*MEMORY[0x24BEDB7F0];
                    v128 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)&object + *((_QWORD *)object - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    *((_QWORD *)&v272 + 1) = v128;
                    *(_QWORD *)&v273 = MEMORY[0x24BEDB848] + 16;
                    if (v279 < 0)
                      operator delete(v278);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v282);
                    goto LABEL_187;
                  }
                }
                memcpy(v74, __sa, v73);
                goto LABEL_113;
              }
            }
            memmove(v64, __srca, v56);
            goto LABEL_94;
          }
        }
        memmove(v61, v60, v59);
        goto LABEL_86;
      }
    }
    memmove(p_dst, v51, v47);
    goto LABEL_66;
  }
  v19 = *(double *)(a4 + 112);
  v18 = *(_QWORD *)(a4 + 120);
  v20 = *(double *)(a4 + 128);
  v21 = *(void **)(a4 + 136);
  v23 = *(double *)(a4 + 144);
  v22 = *(double *)(a4 + 152);
  v287 = *(_OWORD *)(a4 + 160);
  v288 = *(double *)(a4 + 176);
  v248 = v23;
  __s = *(char **)&v22;
  v252 = 1.0;
  v244 = v20;
  __src = v21;
  v24 = v18;
  v25 = v19;
LABEL_188:
  if (*(_BYTE *)(a4 + 488) && *(_BYTE *)(a3 + 8) && (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (*(_BYTE *)(a4 + 432) && *(_BYTE *)(a2 + 8))
    {
      sub_20EA866E4(&v284);
      if (**((int **)v284 + 7) <= 4)
      {
        v129 = *((unsigned __int8 *)v284 + 72);
        v130 = sub_20E8C31DC((uint64_t)v284, "OSLogSurrogateAppender", 1, 0);
        v131 = v130 ? v130 + 16 : 0;
        if (v129 || v130)
        {
          *(_QWORD *)v290 = &v284;
          *(std::chrono::steady_clock::time_point *)&v290[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v290[16] = std::chrono::system_clock::now();
          LODWORD(v291) = 4;
          *((_QWORD *)&v291 + 1) = "unknown file";
          LODWORD(v292) = 166;
          v294 = 0;
          v295 = 0;
          v293 = "unknown function";
          v132 = **(_QWORD **)v290;
          v133 = (uint64_t *)(**(_QWORD **)v290 + 16);
          if (*(char *)(**(_QWORD **)v290 + 39) < 0)
          {
            v135 = *(void **)(v132 + 16);
            v134 = *(void **)(v132 + 24);
          }
          else
          {
            v134 = (void *)*(unsigned __int8 *)(**(_QWORD **)v290 + 39);
            v135 = (void *)(**(_QWORD **)v290 + 16);
          }
          __p[0] = v135;
          __p[1] = v134;
          v201 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v273 && SHIBYTE(v272) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v202 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v203 = byte_254A4A4F8;
          }
          else
          {
            v202 = *(_QWORD *)&byte_254A4A4F8[8];
            v203 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v263 = v203;
          *((_QWORD *)&v263 + 1) = v202;
          object = os_log_create(v203, (const char *)__p[0]);
          sub_20E86E5A8(&v272, (uint64_t)&v263);
          sub_20E86E5A8(v274, (uint64_t)__p);
          v204 = object;
          sub_20E86E44C((uint64_t)&object);
          sub_20EA8A9B8(v131, v133, v204, OS_LOG_TYPE_ERROR);
          if (v129)
          {
            sub_20E8C003C((uint64_t)v290, "Overwriting thermocompensated focal length using the APS model.");
            sub_20E863570((uint64_t)v290);
          }
          sub_20E863714((uint64_t)v290);
        }
      }
      v205 = *(unsigned __int8 *)(a4 + 488);
      v267 = 0.0;
      v266 = 0u;
      v264 = 0u;
      v265 = 0u;
      v263 = 0u;
      if (!v205)
        sub_20E866B34();
      if (!*(_BYTE *)(a3 + 8))
        sub_20E866B34();
    }
    v206 = *(double *)a3;
    *(double *)&v264 = v20;
    *((_QWORD *)&v264 + 1) = v21;
    v266 = v287;
    v267 = v288;
    v207 = v206 * *(double *)(a4 + 464) + *(double *)(a4 + 472);
    v208 = *(double *)(a4 + 480) * v207;
    *(double *)&v263 = v208;
    *((_QWORD *)&v263 + 1) = v18;
    *(double *)&v265 = v207;
    *((double *)&v265 + 1) = v22;
    v209 = *(double *)(a4 + 112);
    if (v209 == 0.0)
    {
      if (v208 != 0.0)
        goto LABEL_352;
    }
    else
    {
      if (v208 == 0.0)
        goto LABEL_352;
      v213 = vabdd_f64(v209, v208);
      v214 = fabs(v209);
      v215 = fabs(v208);
      if (v215 < v214)
        v214 = v215;
      if (v213 / v214 >= 0.1)
        goto LABEL_352;
    }
    v210 = *(double *)(a4 + 144);
    if (v210 == 0.0)
    {
      if (v207 != 0.0)
        goto LABEL_352;
    }
    else
    {
      if (v207 == 0.0)
        goto LABEL_352;
      v216 = vabdd_f64(v210, v207);
      v217 = fabs(v210);
      v218 = fabs(v207);
      if (v218 < v217)
        v217 = v218;
      if (v216 / v217 >= 0.1)
        goto LABEL_352;
    }
    v211 = *(double *)(a4 + 128);
    if (v211 == 0.0)
    {
      if (v20 != 0.0)
        goto LABEL_352;
    }
    else
    {
      if (v20 == 0.0)
        goto LABEL_352;
      v219 = vabdd_f64(v211, v20);
      v220 = fabs(v211);
      v221 = fabs(v20);
      if (v221 < v220)
        v220 = v221;
      if (v219 / v220 >= 0.1)
        goto LABEL_352;
    }
    v212 = *(double *)(a4 + 152);
    if (v212 == 0.0)
    {
      if (v22 != 0.0)
        goto LABEL_352;
    }
    else
    {
      if (v22 == 0.0)
        goto LABEL_352;
      v222 = vabdd_f64(v212, v22);
      v223 = fabs(v212);
      v224 = fabs(v22);
      if (v224 < v223)
        v223 = v224;
      if (v222 / v223 >= 0.1)
        goto LABEL_352;
    }
    if (*(double *)(a4 + 176) == v267)
    {
      v286 = 0uLL;
      v23 = v207;
      v19 = v208;
      v248 = v207;
      __s = *(char **)&v22;
      v252 = 1.0;
      v244 = v20;
      __src = v21;
      v24 = v18;
      v25 = v208;
      goto LABEL_383;
    }
LABEL_352:
    sub_20EA866E4(&v283);
    if (**(int **)(v283 + 56) <= 5)
    {
      v225 = *(unsigned __int8 *)(v283 + 72);
      v226 = sub_20E8C31DC(v283, "OSLogSurrogateAppender", 1, 0);
      v227 = v226 ? v226 + 16 : 0;
      if (v225 || v226)
      {
        sub_20E863438((uint64_t)&object);
        sub_20EA867D8((uint64_t)v290, (double *)&v263, v7);
        if (v290[23] >= 0)
          v228 = v290;
        else
          v228 = *(_BYTE **)v290;
        if (v290[23] >= 0)
          v229 = v290[23];
        else
          v229 = *(_QWORD *)&v290[8];
        sub_20E86A980((_QWORD *)&v272 + 1, (uint64_t)v228, v229);
        if ((v290[23] & 0x80000000) != 0)
          operator delete(*(void **)v290);
        sub_20E923E88(&object, &v284);
        __p[0] = &v283;
        __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        rep = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v257) = 5;
        v258 = "unknown file";
        v259 = 180;
        v261 = 0;
        v262 = 0;
        v260 = "unknown function";
        if (v285 >= 0)
          v230 = (const char *)&v284;
        else
          v230 = (const char *)v284;
        v254 = v230;
        v231 = *(_QWORD *)__p[0];
        v232 = (uint64_t *)(*(_QWORD *)__p[0] + 16);
        if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
        {
          v234 = *(_QWORD *)(v231 + 16);
          v233 = *(_QWORD *)(v231 + 24);
        }
        else
        {
          v233 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
          v234 = *(_QWORD *)__p[0] + 16;
        }
        *(_QWORD *)&v289 = v234;
        *((_QWORD *)&v289 + 1) = v233;
        v235 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v290);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v290);
          if ((_BYTE)v291 && (v290[23] & 0x80000000) != 0)
            operator delete(*(void **)v290);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v236 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v237 = byte_254A4A4F8;
        }
        else
        {
          v236 = *(_QWORD *)&byte_254A4A4F8[8];
          v237 = *(char **)byte_254A4A4F8;
        }
        __dst = (void **)v237;
        v269 = v236;
        *(_QWORD *)v290 = os_log_create(v237, (const char *)v289);
        sub_20E86E5A8(&v290[8], (uint64_t)&__dst);
        sub_20E86E5A8(&v292, (uint64_t)&v289);
        v238 = *(NSObject **)v290;
        sub_20E86E44C((uint64_t)v290);
        sub_20EA8B3B0(v227, v232, v238, OS_LOG_TYPE_ERROR, &v254);
        if (v225)
        {
          v239 = (const char *)&v284;
          if (v285 < 0)
            v239 = (const char *)v284;
          sub_20E8C003C((uint64_t)__p, "%s", v239);
          sub_20E863570((uint64_t)__p);
        }
        sub_20E863714((uint64_t)__p);
        if (SHIBYTE(v285) < 0)
          operator delete(v284);
        sub_20E863784((uint64_t)&object);
      }
    }
    goto LABEL_383;
  }
  if (*(_BYTE *)(a4 + 432) && *(_BYTE *)(a2 + 8) && (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (*(_BYTE *)(a1 + 144))
    {
      sub_20EA866E4(&v284);
      if (**((int **)v284 + 7) <= 4)
      {
        v136 = *((unsigned __int8 *)v284 + 72);
        v137 = sub_20E8C31DC((uint64_t)v284, "OSLogSurrogateAppender", 1, 0);
        v138 = v137 ? v137 + 16 : 0;
        if (v136 || v137)
        {
          *(_QWORD *)v290 = &v284;
          *(std::chrono::steady_clock::time_point *)&v290[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v290[16] = std::chrono::system_clock::now();
          LODWORD(v291) = 4;
          *((_QWORD *)&v291 + 1) = "unknown file";
          LODWORD(v292) = 186;
          v294 = 0;
          v295 = 0;
          v293 = "unknown function";
          v139 = **(_QWORD **)v290;
          v140 = (uint64_t *)(**(_QWORD **)v290 + 16);
          if (*(char *)(**(_QWORD **)v290 + 39) < 0)
          {
            v142 = *(void **)(v139 + 16);
            v141 = *(void **)(v139 + 24);
          }
          else
          {
            v141 = (void *)*(unsigned __int8 *)(**(_QWORD **)v290 + 39);
            v142 = (void *)(**(_QWORD **)v290 + 16);
          }
          __p[0] = v142;
          __p[1] = v141;
          v197 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v273 && SHIBYTE(v272) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v198 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v199 = byte_254A4A4F8;
          }
          else
          {
            v198 = *(_QWORD *)&byte_254A4A4F8[8];
            v199 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v263 = v199;
          *((_QWORD *)&v263 + 1) = v198;
          object = os_log_create(v199, (const char *)__p[0]);
          sub_20E86E5A8(&v272, (uint64_t)&v263);
          sub_20E86E5A8(v274, (uint64_t)__p);
          v200 = object;
          sub_20E86E44C((uint64_t)&object);
          sub_20EA8B9B4(v138, v140, v200, OS_LOG_TYPE_ERROR);
          if (v136)
          {
            sub_20E8C003C((uint64_t)v290, "Overwriting per frame focal length according to thermal model.");
            sub_20E863570((uint64_t)v290);
          }
          sub_20E863714((uint64_t)v290);
        }
      }
      if (!*(_BYTE *)(a4 + 432))
        sub_20E866B34();
      if (!*(_BYTE *)(a2 + 8))
        sub_20E866B34();
    }
    v23 = *(double *)a2 * *(double *)(a4 + 408) + *(double *)(a4 + 416);
    v19 = v23 * *(double *)(a4 + 424);
    v286 = 0uLL;
    v248 = v23;
    __s = *(char **)&v22;
    v252 = 1.0;
    v244 = v20;
    __src = v21;
    v24 = v18;
    v25 = v19;
    goto LABEL_383;
  }
  if (!*(_BYTE *)(a1 + 144))
  {
    sub_20EA866E4(&v284);
    if (**((int **)v284 + 7) <= 4)
    {
      v143 = *((unsigned __int8 *)v284 + 72);
      v144 = sub_20E8C31DC((uint64_t)v284, "OSLogSurrogateAppender", 1, 0);
      v145 = v144;
      if (v143 || v144)
      {
        *(_QWORD *)v290 = &v284;
        *(std::chrono::steady_clock::time_point *)&v290[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v290[16] = std::chrono::system_clock::now();
        LODWORD(v291) = 4;
        *((_QWORD *)&v291 + 1) = "unknown file";
        LODWORD(v292) = 195;
        v294 = 0;
        v295 = 0;
        v293 = "unknown function";
        v146 = **(_QWORD **)v290;
        v243 = **(_QWORD **)v290;
        if (*(char *)(**(_QWORD **)v290 + 39) < 0)
        {
          v148 = *(const char **)(v146 + 16);
          v147 = *(_QWORD *)(v146 + 24);
        }
        else
        {
          v147 = *(unsigned __int8 *)(**(_QWORD **)v290 + 39);
          v148 = (const char *)(v146 + 16);
        }
        v241 = v146 + 16;
        v149 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v273 && SHIBYTE(v272) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v150 = byte_254A4A4F8;
        else
          v150 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v151 = byte_254A4A4F8[23];
        else
          v151 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v150, v148);
        v152 = &v272;
        if (v151 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v151 >= 0x17)
        {
          v153 = v145;
          v154 = v148;
          v155 = v143;
          v156 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v151 | 7) != 0x17)
            v156 = v151 | 7;
          v157 = v156 + 1;
          v152 = (__int128 *)operator new(v156 + 1);
          *((_QWORD *)&v272 + 1) = v151;
          *(_QWORD *)&v273 = v157 | 0x8000000000000000;
          *(_QWORD *)&v272 = v152;
          v143 = v155;
          v148 = v154;
          v145 = v153;
        }
        else
        {
          BYTE7(v273) = v151;
          if (!v151)
          {
LABEL_235:
            *((_BYTE *)v152 + v151) = 0;
            BYTE8(v273) = 1;
            v158 = v274;
            if (v147 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v147 >= 0x17)
            {
              v159 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v147 | 7) != 0x17)
                v159 = v147 | 7;
              v160 = v159 + 1;
              v158 = operator new(v159 + 1);
              v274[1] = (void *)v147;
              v275 = v160 | 0x8000000000000000;
              v274[0] = v158;
            }
            else
            {
              HIBYTE(v275) = v147;
              if (!v147)
                goto LABEL_243;
            }
            memmove(v158, v148, v147);
LABEL_243:
            *((_BYTE *)v158 + v147) = 0;
            v276 = 1;
            v161 = object;
            if (SHIBYTE(v275) < 0)
              operator delete(v274[0]);
            if (BYTE8(v273) && SBYTE7(v273) < 0)
              operator delete((void *)v272);
            if (object)
              os_release(object);
            if (v145 && *(_QWORD *)(v145 + 24))
            {
              v162 = _os_log_pack_size();
              v163 = (std::__shared_weak_count_vtbl *)operator new(v162, (std::align_val_t)8uLL);
              v164 = (std::__shared_weak_count *)operator new();
              v165 = v164;
              v164->__shared_owners_ = 0;
              v166 = (unint64_t *)&v164->__shared_owners_;
              v164->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v164->__shared_weak_owners_ = 0;
              v164[1].__vftable = v163;
              object = v163;
              *(_QWORD *)&v272 = v163;
              *((_QWORD *)&v272 + 1) = v164;
              do
                v167 = __ldxr(v166);
              while (__stxr(v167 + 1, v166));
              v273 = 0uLL;
              v274[0] = 0;
              do
                v168 = __ldaxr(v166);
              while (__stlxr(v168 - 1, v166));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v165);
              }
              v169 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v170 = operator new();
              v171 = *(unsigned __int8 *)(v243 + 39);
              v172 = v241;
              if ((v171 & 0x80u) != 0)
              {
                v172 = *(_QWORD *)(v243 + 16);
                v171 = *(_QWORD *)(v243 + 24);
              }
              *(_QWORD *)v170 = v169;
              *(_OWORD *)(v170 + 8) = v272;
              v272 = 0uLL;
              *(_OWORD *)(v170 + 24) = v273;
              v273 = 0uLL;
              *(_QWORD *)(v170 + 40) = v172;
              *(_QWORD *)(v170 + 48) = v171;
              *(_BYTE *)(v170 + 56) = 16;
              __p[0] = 0;
              *(_QWORD *)&v263 = v170;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v145 + 24) + 40))(*(_QWORD *)(v145 + 24), &v263);
              v173 = v263;
              *(_QWORD *)&v263 = 0;
              if (v173)
              {
                v174 = *(std::__shared_weak_count **)(v173 + 32);
                if (v174)
                {
                  v175 = (unint64_t *)&v174->__shared_owners_;
                  do
                    v176 = __ldaxr(v175);
                  while (__stlxr(v176 - 1, v175));
                  if (!v176)
                  {
                    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                    std::__shared_weak_count::__release_weak(v174);
                  }
                }
                v177 = *(std::__shared_weak_count **)(v173 + 16);
                if (v177)
                {
                  v178 = (unint64_t *)&v177->__shared_owners_;
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                v180 = __p[0];
                __p[0] = 0;
                if (v180)
                {
                  v181 = (std::__shared_weak_count *)*((_QWORD *)v180 + 4);
                  if (v181)
                  {
                    v182 = (unint64_t *)&v181->__shared_owners_;
                    do
                      v183 = __ldaxr(v182);
                    while (__stlxr(v183 - 1, v182));
                    if (!v183)
                    {
                      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                      std::__shared_weak_count::__release_weak(v181);
                    }
                  }
                  v184 = (std::__shared_weak_count *)*((_QWORD *)v180 + 2);
                  if (v184)
                  {
                    v185 = (unint64_t *)&v184->__shared_owners_;
                    do
                      v186 = __ldaxr(v185);
                    while (__stlxr(v186 - 1, v185));
                    if (!v186)
                    {
                      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                      std::__shared_weak_count::__release_weak(v184);
                    }
                  }
                  MEMORY[0x212BC6398](v180, 0x10F0C40B62ED6C6);
                }
              }
              v187 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
              if (*((_QWORD *)&v273 + 1))
              {
                v188 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
                do
                  v189 = __ldaxr(v188);
                while (__stlxr(v189 - 1, v188));
                if (!v189)
                {
                  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                  std::__shared_weak_count::__release_weak(v187);
                }
              }
              v190 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
              if (*((_QWORD *)&v272 + 1))
              {
                v191 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
                do
                  v192 = __ldaxr(v191);
                while (__stlxr(v192 - 1, v191));
                if (!v192)
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                }
              }
            }
            else
            {
              os_log_type_enabled(v161, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v193 = (void *)_os_log_send_and_compose_impl();
              if (v193)
                free(v193);
            }
            if (v143)
            {
              sub_20E8C003C((uint64_t)v290, "Neither per-frame intrinsics, thermal model, nor APS model exists, even though calibration processor was configured to expect one of them.");
              sub_20E863570((uint64_t)v290);
            }
            sub_20E863570((uint64_t)v290);
            v194 = v295;
            if (v295)
            {
              v195 = (unint64_t *)&v295->__shared_owners_;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            goto LABEL_383;
          }
        }
        memmove(v152, v150, v151);
        goto LABEL_235;
      }
    }
  }
LABEL_383:
  *(double *)a5 = v19;
  *(_QWORD *)(a5 + 8) = v18;
  *(double *)(a5 + 16) = v20;
  *(_QWORD *)(a5 + 24) = v21;
  *(double *)(a5 + 32) = v23;
  *(double *)(a5 + 40) = v22;
  *(_OWORD *)(a5 + 48) = v287;
  *(double *)(a5 + 64) = v288;
  *(double *)(a5 + 72) = v25;
  *(_QWORD *)(a5 + 80) = v24;
  *(double *)(a5 + 88) = v244;
  *(_QWORD *)(a5 + 96) = __src;
  *(double *)(a5 + 104) = v248;
  *(_QWORD *)(a5 + 112) = __s;
  *(_OWORD *)(a5 + 120) = v286;
  *(double *)(a5 + 136) = v252;
}

